{"sha": "17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkNTczOWE2YjEwM2NkZDMzMTVmNWQwZTA5ZmU4ZmFhNjYyMGEwMw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-07T05:22:53Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-14T12:37:03Z"}, "message": "[gimple] Move can_duplicate_bb_p to gimple_can_duplicate_bb_p\n\nThe function gimple_can_duplicate_bb_p currently always returns true.\n\nThe presence of can_duplicate_bb_p in tracer.c however suggests that\nthere are cases when bb's indeed cannot be duplicated.\n\nMove the implementation of can_duplicate_bb_p to gimple_can_duplicate_bb_p.\n\nBootstrapped and reg-tested on x86_64-linux.\n\nBuild x86_64-linux with nvptx accelerator and tested libgomp.\n\nNo issues found.\n\nAs corner-case check, bootstrapped and reg-tested a patch that makes\ngimple_can_duplicate_bb_p always return false, resulting in\nPR97333 - \"[gimple_can_duplicate_bb_p == false, tree-ssa-threadupdate]\nICE in duplicate_block, at cfghooks.c:1093\".\n\ngcc/ChangeLog:\n\n2020-10-09  Tom de Vries  <tdevries@suse.de>\n\n\t* tracer.c (cached_can_duplicate_bb_p, analyze_bb): Use\n\tcan_duplicate_block_p.\n\t(can_duplicate_insn_p, can_duplicate_bb_no_insn_iter_p)\n\t(can_duplicate_bb_p): Move and merge ...\n\t* tree-cfg.c (gimple_can_duplicate_bb_p): ... here.", "tree": {"sha": "b6f7b76c6622ee165aacb1e445fa7e54f14dd7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f7b76c6622ee165aacb1e445fa7e54f14dd7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d5739a6b103cdd3315f5d0e09fe8faa6620a03/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9068711f210e02a2b80f46813e47f338718c94dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9068711f210e02a2b80f46813e47f338718c94dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9068711f210e02a2b80f46813e47f338718c94dc"}], "stats": {"total": 104, "additions": 40, "deletions": 64}, "files": [{"sha": "2f9daf92d79d8ea9cb4815a24379994a0a99f27d", "filename": "gcc/tracer.c", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5739a6b103cdd3315f5d0e09fe8faa6620a03/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5739a6b103cdd3315f5d0e09fe8faa6620a03/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "patch": "@@ -84,65 +84,6 @@ bb_seen_p (basic_block bb)\n   return bitmap_bit_p (bb_seen, bb->index);\n }\n \n-/* Return true if gimple stmt G can be duplicated.  */\n-static bool\n-can_duplicate_insn_p (gimple *g)\n-{\n-  /* An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n-     duplicated as part of its group, or not at all.\n-     The IFN_GOMP_SIMT_VOTE_ANY and IFN_GOMP_SIMT_XCHG_* are part of such a\n-     group, so the same holds there.  */\n-  if (is_gimple_call (g)\n-      && (gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n-\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_EXIT)\n-\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_VOTE_ANY)\n-\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_BFLY)\n-\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_IDX)))\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Return true if BB can be duplicated.  Avoid iterating over the insns.  */\n-static bool\n-can_duplicate_bb_no_insn_iter_p (const_basic_block bb)\n-{\n-  if (bb->index < NUM_FIXED_BLOCKS)\n-    return false;\n-\n-  if (gimple *g = last_stmt (CONST_CAST_BB (bb)))\n-    {\n-      /* A transaction is a single entry multiple exit region.  It\n-\t must be duplicated in its entirety or not at all.  */\n-      if (gimple_code (g) == GIMPLE_TRANSACTION)\n-\treturn false;\n-\n-      /* An IFN_UNIQUE call must be duplicated as part of its group,\n-\t or not at all.  */\n-      if (is_gimple_call (g)\n-\t  && gimple_call_internal_p (g)\n-\t  && gimple_call_internal_unique_p (g))\n-\treturn false;\n-    }\n-\n-  return true;\n-}\n-\n-/* Return true if BB can be duplicated.  */\n-static bool\n-can_duplicate_bb_p (const_basic_block bb)\n-{\n-  if (!can_duplicate_bb_no_insn_iter_p (bb))\n-    return false;\n-\n-  for (gimple_stmt_iterator gsi = gsi_start_bb (CONST_CAST_BB (bb));\n-       !gsi_end_p (gsi); gsi_next (&gsi))\n-    if (!can_duplicate_insn_p (gsi_stmt (gsi)))\n-      return false;\n-\n-  return true;\n-}\n-\n static sbitmap can_duplicate_bb;\n \n /* Cache VAL as value of can_duplicate_bb_p for BB.  */\n@@ -167,7 +108,7 @@ cached_can_duplicate_bb_p (const_basic_block bb)\n       return false;\n     }\n \n-  return can_duplicate_bb_p (bb);\n+  return can_duplicate_block_p (bb);\n }\n \n /* Return true if we should ignore the basic block for purposes of tracing.  */\n@@ -190,16 +131,15 @@ analyze_bb (basic_block bb, int *count)\n   gimple_stmt_iterator gsi;\n   gimple *stmt;\n   int n = 0;\n-  bool can_duplicate = can_duplicate_bb_no_insn_iter_p (bb);\n \n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       stmt = gsi_stmt (gsi);\n       n += estimate_num_insns (stmt, &eni_size_weights);\n-      can_duplicate = can_duplicate && can_duplicate_insn_p (stmt);\n     }\n   *count = n;\n-  cache_can_duplicate_bb_p (bb, can_duplicate);\n+\n+  cache_can_duplicate_bb_p (bb, can_duplicate_block_p (CONST_CAST_BB (bb)));\n }\n \n /* Return true if E1 is more frequent than E2.  */"}, {"sha": "002560d9370e35dd3d2bc938cecdd448445647ba", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5739a6b103cdd3315f5d0e09fe8faa6620a03/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5739a6b103cdd3315f5d0e09fe8faa6620a03/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "patch": "@@ -6211,8 +6211,44 @@ gimple_split_block_before_cond_jump (basic_block bb)\n /* Return true if basic_block can be duplicated.  */\n \n static bool\n-gimple_can_duplicate_bb_p (const_basic_block bb ATTRIBUTE_UNUSED)\n+gimple_can_duplicate_bb_p (const_basic_block bb)\n {\n+  gimple *last = last_stmt (CONST_CAST_BB (bb));\n+\n+  /* Do checks that can only fail for the last stmt, to minimize the work in the\n+     stmt loop.  */\n+  if (last) {\n+    /* A transaction is a single entry multiple exit region.  It\n+       must be duplicated in its entirety or not at all.  */\n+    if (gimple_code (last) == GIMPLE_TRANSACTION)\n+      return false;\n+\n+    /* An IFN_UNIQUE call must be duplicated as part of its group,\n+       or not at all.  */\n+    if (is_gimple_call (last)\n+\t&& gimple_call_internal_p (last)\n+\t&& gimple_call_internal_unique_p (last))\n+      return false;\n+  }\n+\n+  for (gimple_stmt_iterator gsi = gsi_start_bb (CONST_CAST_BB (bb));\n+       !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple *g = gsi_stmt (gsi);\n+\n+      /* An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n+\t duplicated as part of its group, or not at all.\n+\t The IFN_GOMP_SIMT_VOTE_ANY and IFN_GOMP_SIMT_XCHG_* are part of such a\n+\t group, so the same holds there.  */\n+      if (is_gimple_call (g)\n+\t  && (gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n+\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_EXIT)\n+\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_VOTE_ANY)\n+\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_BFLY)\n+\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_IDX)))\n+\treturn false;\n+    }\n+\n   return true;\n }\n "}]}