{"sha": "ba6730bd18371a3dff1e37d2c2ee27233285b597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2NzMwYmQxODM3MWEzZGZmMWUzN2QyYzJlZTI3MjMzMjg1YjU5Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-03T19:53:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-03T19:53:40Z"}, "message": "c++: Fix another PCH hash_map issue [PR96901]\n\nThe recent libstdc++ changes caused lots of libstdc++-v3 tests FAILs\non i686-linux, all of them in the same spot during constexpr evaluation\nof a recursive _S_gcd call.\nThe problem is yet another hash_map that used the default hasing of\ntree keys through pointer hashing which is preserved across PCH write/read.\nDuring PCH handling, the addresses of GC objects are changed, which means\nthat the hash values of the keys in such hash tables change without those\nhash tables being rehashed.  Which in the fundef_copies_table case usually\nmeans we just don't find a copy of a FUNCTION_DECL body for recursive uses\nand start from scratch.  But when the hash table keeps growing, the \"dead\"\nelements in the hash table can sometimes reappear and break things.\nIn particular what I saw under the debugger is when the fundef_copies_table\nhash map has been used on the outer _S_gcd call, it didn't find an entry for\nit, so returned a slot with *slot == NULL, which is treated as that the\nfunction itself is used directly (i.e. no recursion), but that addition of\na hash table slot caused the recursive _S_gcd call to actually find\nsomething in the hash table, unfortunately not the new *slot == NULL spot,\nbut a different one from the pre-PCH streaming which contained the returned\ntoplevel (non-recursive) call entry for it, which means that for the\nrecursive _S_gcd call we actually used the same trees as for the outer ones\nrather than a copy of those, which breaks constexpr evaluation.\n\n2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/96901\n\t* tree.h (struct decl_tree_traits): New type.\n\t(decl_tree_map): New typedef.\n\n\t* constexpr.c (fundef_copies_table): Change type from\n\thash_map<tree, tree> * to decl_tree_map *.", "tree": {"sha": "985096f9cfe0601047e7c8ed4578069d8e1ecda5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/985096f9cfe0601047e7c8ed4578069d8e1ecda5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6730bd18371a3dff1e37d2c2ee27233285b597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6730bd18371a3dff1e37d2c2ee27233285b597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6730bd18371a3dff1e37d2c2ee27233285b597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6730bd18371a3dff1e37d2c2ee27233285b597/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eeeecbcc17041fdfd3ccc928161ae86e7f9b456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeeecbcc17041fdfd3ccc928161ae86e7f9b456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eeeecbcc17041fdfd3ccc928161ae86e7f9b456"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "72fbdab06c544d78d482c8fcf12f31858e4c53c3", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6730bd18371a3dff1e37d2c2ee27233285b597/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6730bd18371a3dff1e37d2c2ee27233285b597/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ba6730bd18371a3dff1e37d2c2ee27233285b597", "patch": "@@ -1203,7 +1203,7 @@ maybe_initialize_constexpr_call_table (void)\n \n    This is not GC-deletable to avoid GC affecting UID generation.  */\n \n-static GTY(()) hash_map<tree, tree> *fundef_copies_table;\n+static GTY(()) decl_tree_map *fundef_copies_table;\n \n /* Reuse a copy or create a new unshared copy of the function FUN.\n    Return this copy.  We use a TREE_LIST whose PURPOSE is body, VALUE"}, {"sha": "9ec24a3008bfa08e5b9003dc5f50bafb306b35ef", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6730bd18371a3dff1e37d2c2ee27233285b597/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6730bd18371a3dff1e37d2c2ee27233285b597/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ba6730bd18371a3dff1e37d2c2ee27233285b597", "patch": "@@ -5453,6 +5453,11 @@ struct type_tree_cache_traits\n   : simple_cache_map_traits<tree_type_hash, tree> { };\n typedef hash_map<tree,tree,type_tree_cache_traits> type_tree_cache_map;\n \n+/* Similarly to decl_tree_cache_map, but without caching.  */\n+struct decl_tree_traits\n+  : simple_hashmap_traits<tree_decl_hash, tree> { };\n+typedef hash_map<tree,tree,decl_tree_traits> decl_tree_map;\n+\n /* Initialize the abstract argument list iterator object ITER with the\n    arguments from CALL_EXPR node EXP.  */\n static inline void"}]}