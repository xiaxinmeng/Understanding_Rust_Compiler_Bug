{"sha": "b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjYjhkYzJkODRmMjI5ODhkMzNlMGY4NWIyMzg3YjZhOTYzODNlMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-11-21T18:38:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-21T18:38:05Z"}, "message": "sso_string_base.h: Minor formatting and stylistic fixes.\n\n2005-11-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h: Minor formatting and stylistic fixes.\n\t(__sso_string_base<>::_M_get_allocator): Return by const ref.\n\t* include/ext/rc_string_base.h: Likewise.\n\t(__rc_string_base<>::_M_get_allocator): Return by const ref.\n\t(__rc_string_base<>::_M_dispose): Take void, use _M_get_allocator.\n\t(__rc_string_base<>::_M_grab): Take one alloc, use _M_get_allocator.\n\t(__rc_string_base<>::~__rc_string_base,\n\t__rc_string_base(const __rc_string_base&), _M_assign, _M_reserve,\n\t_M_mutate): Adjust.\n\t* include/ext/vstring_util.h: Minor stylistic fixes.\n\nFrom-SVN: r107317", "tree": {"sha": "40bcff9a51d36ec820e240ab9484d1d6d1fe6e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40bcff9a51d36ec820e240ab9484d1d6d1fe6e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/comments", "author": null, "committer": null, "parents": [{"sha": "e20dcbefa5407dc35fe4acf749322f6a75781d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20dcbefa5407dc35fe4acf749322f6a75781d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20dcbefa5407dc35fe4acf749322f6a75781d38"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "07224593ffd3485a7fccd2beb1ce59e88e1f2bc1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "patch": "@@ -1,3 +1,16 @@\n+2005-11-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h: Minor formatting and stylistic fixes.\n+\t(__sso_string_base<>::_M_get_allocator): Return by const ref.\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t(__rc_string_base<>::_M_get_allocator): Return by const ref.\n+\t(__rc_string_base<>::_M_dispose): Take void, use _M_get_allocator.\n+\t(__rc_string_base<>::_M_grab): Take one alloc, use _M_get_allocator.\n+\t(__rc_string_base<>::~__rc_string_base,\n+\t__rc_string_base(const __rc_string_base&), _M_assign, _M_reserve,\n+\t_M_mutate): Adjust.\n+\t* include/ext/vstring_util.h: Minor stylistic fixes.\n+\n 2005-11-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/rc_string_base.h (__rc_string_base<>::_Rep): Avoid the"}, {"sha": "8fb7531eadd14fceded8a562bea2642a8fd129d9", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "patch": "@@ -193,17 +193,17 @@ namespace __gnu_cxx\n       { return &((reinterpret_cast<_Rep*>(_M_data()))[-1]); }\n \n       _CharT*\n-      _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2) const\n+      _M_grab(const _Alloc& __alloc) const\n       {\n-\treturn (!_M_is_leaked() && __alloc1 == __alloc2)\n-\t        ? _M_rep()->_M_refcopy() : _M_rep()->_M_clone(__alloc1);\n+\treturn (!_M_is_leaked() && _M_get_allocator() == __alloc)\n+\t        ? _M_rep()->_M_refcopy() : _M_rep()->_M_clone(__alloc);\n       }\n \n       void\n-      _M_dispose(const _Alloc& __a)\n+      _M_dispose()\n       {\n \tif (__exchange_and_add(&_M_rep()->_M_info._M_refcount, -1) <= 0)\n-\t  _M_rep()->_M_destroy(__a);\n+\t  _M_rep()->_M_destroy(_M_get_allocator());\n       }  // XXX MT\n \n       bool\n@@ -219,7 +219,7 @@ namespace __gnu_cxx\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIterator is an integral type\n-      template<class _InIterator>\n+      template<typename _InIterator>\n         static _CharT*\n         _S_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t const _Alloc& __a, __false_type)\n@@ -228,14 +228,14 @@ namespace __gnu_cxx\n           return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n-      template<class _InIterator>\n+      template<typename _InIterator>\n         static _CharT*\n         _S_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t const _Alloc& __a, __true_type)\n \t{ return _S_construct(static_cast<size_type>(__beg),\n \t\t\t      static_cast<value_type>(__end), __a); }\n \n-      template<class _InIterator>\n+      template<typename _InIterator>\n         static _CharT*\n         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n \t{\n@@ -244,14 +244,14 @@ namespace __gnu_cxx\n         }\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n-      template<class _InIterator>\n+      template<typename _InIterator>\n         static _CharT*\n          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t      std::input_iterator_tag);\n       \n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n-      template<class _FwdIterator>\n+      template<typename _FwdIterator>\n         static _CharT*\n         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n \t\t     std::forward_iterator_tag);\n@@ -309,9 +309,9 @@ namespace __gnu_cxx\n \t\t\t const _Alloc& __a);\n \n       ~__rc_string_base()\n-      { _M_dispose(_M_get_allocator()); }      \n+      { _M_dispose(); }      \n \n-      allocator_type\n+      const allocator_type&\n       _M_get_allocator() const\n       { return _M_dataplus; }\n \n@@ -372,9 +372,6 @@ namespace __gnu_cxx\n       // The below implements an exponential growth policy, necessary to\n       // meet amortized linear time requirements of the library: see\n       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n-      // It's active for allocations requiring an amount of memory above\n-      // system pagesize. This is consistent with the requirements of the\n-      // standard: http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html\n       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n \t__capacity = 2 * __old_capacity;\n \n@@ -441,8 +438,7 @@ namespace __gnu_cxx\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n     __rc_string_base(const __rc_string_base& __rcs)\n     : _M_dataplus(__rcs._M_get_allocator(),\n-\t\t  __rcs._M_grab(_Alloc(__rcs._M_get_allocator()),\n-\t\t\t\t__rcs._M_get_allocator())) { }\n+\t\t  __rcs._M_grab(__rcs._M_get_allocator())) { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n@@ -516,7 +512,7 @@ namespace __gnu_cxx\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <typename _InIterator>\n+    template<typename _InIterator>\n       _CharT*\n       __rc_string_base<_CharT, _Traits, _Alloc>::\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n@@ -587,9 +583,8 @@ namespace __gnu_cxx\n     {\n       if (_M_rep() != __rcs._M_rep())\n \t{\n-\t  const allocator_type __a = _M_get_allocator();\n-\t  _CharT* __tmp = __rcs._M_grab(__a, __rcs._M_get_allocator());\n-\t  _M_dispose(__a);\n+\t  _CharT* __tmp = __rcs._M_grab(_M_get_allocator());\n+\t  _M_dispose();\n \t  _M_data(__tmp);\n \t}\n     }\n@@ -605,9 +600,9 @@ namespace __gnu_cxx\n \t  if (__res < _M_length())\n \t    __res = _M_length();\n \t  \n-\t  const allocator_type __a = _M_get_allocator();\n-\t  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - _M_length());\n-\t  _M_dispose(__a);\n+\t  _CharT* __tmp = _M_rep()->_M_clone(_M_get_allocator(),\n+\t\t\t\t\t     __res - _M_length());\n+\t  _M_dispose();\n \t  _M_data(__tmp);\n \t}\n     }\n@@ -624,16 +619,16 @@ namespace __gnu_cxx\n       if (__new_size > _M_capacity() || _M_is_shared())\n \t{\n \t  // Must reallocate.\n-\t  const allocator_type __a = _M_get_allocator();\n-\t  _Rep* __r = _Rep::_S_create(__new_size, _M_capacity(), __a);\n+\t  _Rep* __r = _Rep::_S_create(__new_size, _M_capacity(),\n+\t\t\t\t      _M_get_allocator());\n \n \t  if (__pos)\n \t    _S_copy(__r->_M_refdata(), _M_data(), __pos);\n \t  if (__how_much)\n \t    _S_copy(__r->_M_refdata() + __pos + __len2,\n \t\t    _M_data() + __pos + __len1, __how_much);\n \n-\t  _M_dispose(__a);\n+\t  _M_dispose();\n \t  _M_data(__r->_M_refdata());\n \t}\n       else if (__how_much && __len1 != __len2)"}, {"sha": "f4bd3fb1eeca888b4cca01573896ecff6099e62a", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "patch": "@@ -74,8 +74,8 @@ namespace __gnu_cxx\n       \n       union\n       {\n-\t_CharT                  _M_local_data[_S_local_capacity + 1];\n-\tsize_type               _M_allocated_capacity;\n+\t_CharT           _M_local_data[_S_local_capacity + 1];\n+\tsize_type        _M_allocated_capacity;\n       };\n \n       void\n@@ -99,7 +99,7 @@ namespace __gnu_cxx\n       _M_create(size_type&, size_type);\n       \n       void\n-      _M_dispose() throw()\n+      _M_dispose()\n       {\n \tif (!_M_is_local())\n \t  _M_destroy(_M_allocated_capacity + 1);\n@@ -110,21 +110,21 @@ namespace __gnu_cxx\n \n       // _M_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIterator is an integral type\n-      template<class _InIterator>\n+      template<typename _InIterator>\n         void\n         _M_construct_aux(_InIterator __beg, _InIterator __end, __false_type)\n \t{\n           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n           _M_construct(__beg, __end, _Tag());\n \t}\n \n-      template<class _InIterator>\n+      template<typename _InIterator>\n         void\n         _M_construct_aux(_InIterator __beg, _InIterator __end, __true_type)\n \t{ _M_construct(static_cast<size_type>(__beg),\n \t\t       static_cast<value_type>(__end)); }\n \n-      template<class _InIterator>\n+      template<typename _InIterator>\n         void\n         _M_construct(_InIterator __beg, _InIterator __end)\n \t{\n@@ -133,14 +133,14 @@ namespace __gnu_cxx\n         }\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n-      template<class _InIterator>\n+      template<typename _InIterator>\n         void\n         _M_construct(_InIterator __beg, _InIterator __end,\n \t\t     std::input_iterator_tag);\n       \n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n-      template<class _FwdIterator>\n+      template<typename _FwdIterator>\n         void\n         _M_construct(_FwdIterator __beg, _FwdIterator __end,\n \t\t     std::forward_iterator_tag);\n@@ -202,7 +202,7 @@ namespace __gnu_cxx\n       ~__sso_string_base()\n       { _M_dispose(); }\n \n-      allocator_type\n+      const allocator_type&\n       _M_get_allocator() const\n       { return _M_dataplus; }\n \n@@ -392,7 +392,7 @@ namespace __gnu_cxx\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <typename _InIterator>\n+    template<typename _InIterator>\n       void\n       __sso_string_base<_CharT, _Traits, _Alloc>::\n       _M_construct(_InIterator __beg, _InIterator __end,"}, {"sha": "2a8c45c9cf647b598093511c41b8e379f768d311", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb8dc2d84f22988d33e0f85b2387b6a96383e2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=b6cb8dc2d84f22988d33e0f85b2387b6a96383e2", "patch": "@@ -160,7 +160,7 @@ namespace __gnu_cxx\n \n       // _S_copy_chars is a separate template to permit specialization\n       // to optimize for the common case of pointers as iterators.\n-      template<class _Iterator>\n+      template<typename _Iterator>\n         static void\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n         {"}]}