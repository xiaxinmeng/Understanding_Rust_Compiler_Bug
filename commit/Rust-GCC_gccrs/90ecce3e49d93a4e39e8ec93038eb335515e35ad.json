{"sha": "90ecce3e49d93a4e39e8ec93038eb335515e35ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlY2NlM2U0OWQ5M2E0ZTM5ZThlYzkzMDM4ZWIzMzU1MTVlMzVhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-05-21T15:55:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-05-21T15:55:40Z"}, "message": "class.c (build_vtable_entry_ref): Lose vtbl parm.\n\n        * class.c (build_vtable_entry_ref): Lose vtbl parm.  Fix for new abi.\n        (build_vtbl_ref): Adjust.\n        (dfs_accumulate_vtbl_inits): Set TREE_CONSTANT on the vtable address.\n        * decl2.c (lang_f_options): Remove huge-objects, vtable-thunks.\n        Re-add vtable-gc.\n        (unsupported_options): Correspondingly.\n\n        * decl2.c (maybe_make_one_only): Check flag_weak, not\n        supports_one_only().\n\nFrom-SVN: r42393", "tree": {"sha": "11ad29c9613393dc726c256a876ce23e79d80008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ad29c9613393dc726c256a876ce23e79d80008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ecce3e49d93a4e39e8ec93038eb335515e35ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ecce3e49d93a4e39e8ec93038eb335515e35ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ecce3e49d93a4e39e8ec93038eb335515e35ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ecce3e49d93a4e39e8ec93038eb335515e35ad/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c1e4fd7e723ec42f416b5bce57814a8e65d0165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1e4fd7e723ec42f416b5bce57814a8e65d0165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1e4fd7e723ec42f416b5bce57814a8e65d0165"}], "stats": {"total": 139, "additions": 68, "deletions": 71}, "files": [{"sha": "eda85ecfa411ce134798a99e0ad582091f3b96a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,15 @@\n 2001-05-21  Jason Merrill  <jason_merrill@redhat.com>\n \n+\t* class.c (build_vtable_entry_ref): Lose vtbl parm.  Fix for new abi.\n+\t(build_vtbl_ref): Adjust.\n+\t(dfs_accumulate_vtbl_inits): Set TREE_CONSTANT on the vtable address.\n+\t* decl2.c (lang_f_options): Remove huge-objects, vtable-thunks.\n+\tRe-add vtable-gc.\n+\t(unsupported_options): Correspondingly.\n+\n+\t* decl2.c (maybe_make_one_only): Check flag_weak, not\n+\tsupports_one_only().\n+\n \t* cp-tree.def (START_CATCH_STMT): Lose.\n \t* dump.c (cp_dump_tree): Don't dump it.  Do dump HANDLER_PARMS.\n \t* tree.c (cp_statement_code_p): Don't case it."}, {"sha": "4566200f3acfd06bb2abaf2335300827e4066b78", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -136,7 +136,7 @@ static tree add_implicitly_declared_members PARAMS ((tree, int, int, int));\n static tree fixed_type_or_null PARAMS ((tree, int *, int *));\n static tree resolve_address_of_overloaded_function PARAMS ((tree, tree, int,\n \t\t\t\t\t\t\t  int, int, tree));\n-static void build_vtable_entry_ref PARAMS ((tree, tree, tree));\n+static void build_vtable_entry_ref PARAMS ((tree, tree));\n static tree build_vtbl_initializer PARAMS ((tree, tree, tree, tree, int *));\n static int count_fields PARAMS ((tree));\n static int add_fields_to_vec PARAMS ((tree, tree, int));\n@@ -518,22 +518,20 @@ build_vbase_path (code, type, expr, path, nonnull)\n           \"i\"((long)&vtbl[idx].pfn - (long)&vtbl[0])); */\n \n static void\n-build_vtable_entry_ref (basetype, vtbl, idx)\n-     tree basetype, vtbl, idx;\n+build_vtable_entry_ref (basetype, idx)\n+     tree basetype, idx;\n {\n   static char asm_stmt[] = \".vtable_entry %c0, %c1\";\n   tree s, i, i2;\n+  tree vtable = get_vtbl_decl_for_binfo (TYPE_BINFO (basetype));\n+  tree first_fn = TYPE_BINFO_VTABLE (basetype);\n \n-  s = build_unary_op (ADDR_EXPR, \n-\t\t      get_vtbl_decl_for_binfo (TYPE_BINFO (basetype)), \n-\t\t      0);\n+  s = build_unary_op (ADDR_EXPR, vtable, 0);\n   s = build_tree_list (build_string (1, \"s\"), s);\n \n-  i = build_array_ref (vtbl, idx);\n-  if (!flag_vtable_thunks)\n-    i = build_component_ref (i, pfn_identifier, vtable_entry_type, 0);\n+  i = build_array_ref (first_fn, idx);\n   i = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i, 0));\n-  i2 = build_array_ref (vtbl, build_int_2(0,0));\n+  i2 = build_array_ref (vtable, build_int_2 (0,0));\n   i2 = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i2, 0));\n   i = cp_build_binary_op (MINUS_EXPR, i, i2);\n   i = build_tree_list (build_string (1, \"i\"), i);\n@@ -621,7 +619,7 @@ build_vtbl_ref (instance, idx)\n   assemble_external (vtbl);\n \n   if (flag_vtable_gc)\n-    build_vtable_entry_ref (basetype, vtbl, idx);\n+    build_vtable_entry_ref (basetype, idx);\n \n   aref = build_array_ref (vtbl, idx);\n \n@@ -726,13 +724,13 @@ build_vtable (class_type, name, vtable_type)\n   tree decl;\n \n   decl = build_lang_decl (VAR_DECL, name, vtable_type);\n+  /* vtable names are already mangled; give them their DECL_ASSEMBLER_NAME\n+     now to avoid confusion in mangle_decl.  */\n+  SET_DECL_ASSEMBLER_NAME (decl, name);\n   DECL_CONTEXT (decl) = class_type;\n   DECL_ARTIFICIAL (decl) = 1;\n   TREE_STATIC (decl) = 1;\n-#ifndef WRITABLE_VTABLES\n-  /* Make them READONLY by default. (mrs) */\n   TREE_READONLY (decl) = 1;\n-#endif\n   DECL_VIRTUAL_P (decl) = 1;\n   import_export_vtable (decl, class_type, 0);\n \n@@ -761,7 +759,6 @@ get_vtable_decl (type, complete)\n     }\n   \n   decl = build_vtable (type, name, void_type_node);\n-  SET_DECL_ASSEMBLER_NAME (decl, name);\n   decl = pushdecl_top_level (decl);\n   my_friendly_assert (IDENTIFIER_GLOBAL_VALUE (name) == decl,\n \t\t      20000517);\n@@ -2448,7 +2445,7 @@ duplicate_tag_error (t)\n   SET_IS_AGGR_TYPE (t, 1);\n }\n \n-/* Make the BINFO's vtablehave N entries, including RTTI entries,\n+/* Make BINFO's vtable have N entries, including RTTI entries,\n    vbase and vcall offsets, etc.  Set its type and call the backend\n    to lay it out.  */\n \n@@ -6996,7 +6993,8 @@ initialize_array (decl, inits)\n    \n    This holds\n    1 - primary virtual pointer for complete object T\n-   2 - secondary VTTs for each direct non-virtual base of T which requires a VTT\n+   2 - secondary VTTs for each direct non-virtual base of T which requires a\n+       VTT\n    3 - secondary virtual pointers for each direct or indirect base of T which\n        has virtual bases or is reachable via a virtual path from T.\n    4 - secondary VTTs for each direct or indirect virtual base of T.\n@@ -7027,7 +7025,6 @@ build_vtt (t)\n \t\t\t\t \n   /* Now, build the VTT object itself.  */\n   vtt = build_vtable (t, get_vtt_name (t), type);\n-  SET_DECL_ASSEMBLER_NAME (vtt, DECL_NAME (vtt));\n   pushdecl_top_level (vtt);\n   initialize_array (vtt, inits);\n }\n@@ -7482,6 +7479,7 @@ dfs_accumulate_vtbl_inits (binfo, orig_binfo, rtti_binfo, t, l)\n       vtbl = build1 (ADDR_EXPR, \n \t\t     vtbl_ptr_type_node,\n \t\t     vtbl);\n+      TREE_CONSTANT (vtbl) = 1;\n       index = size_binop (PLUS_EXPR,\n \t\t\t  size_int (non_fn_entries),\n \t\t\t  size_int (list_length (TREE_VALUE (l))));\n@@ -7508,7 +7506,7 @@ dfs_accumulate_vtbl_inits (binfo, orig_binfo, rtti_binfo, t, l)\n   return inits;\n }\n \n-/* Construct the initializer for BINFOs virtual function table.  BINFO\n+/* Construct the initializer for BINFO's virtual function table.  BINFO\n    is part of the hierarchy dominated by T.  If we're building a\n    construction vtable, the ORIG_BINFO is the binfo we should use to\n    find the actual function pointers to put in the vtable - but they"}, {"sha": "ba98dc5e7e798817fe7c558023d81e1078b9b72d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -463,7 +463,6 @@ lang_f_options[] =\n   {\"gnu-keywords\", &flag_no_gnu_keywords, 0},\n   {\"handle-exceptions\", &flag_exceptions, 1},\n   {\"honor-std\", &flag_honor_std, 1},\n-  {\"huge-objects\", &flag_huge_objects, 1},\n   {\"implement-inlines\", &flag_implement_inlines, 1},\n   {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n@@ -475,8 +474,8 @@ lang_f_options[] =\n   {\"repo\", &flag_use_repository, 1},\n   {\"rtti\", &flag_rtti, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n+  {\"vtable-gc\", &flag_vtable_gc, 1},\n   {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n-  {\"vtable-thunks\", &flag_vtable_thunks, 1},\n   {\"weak\", &flag_weak, 1}\n };\n \n@@ -488,13 +487,14 @@ static const char * const unsupported_options[] = {\n   \"cond-mismatch\",\n   \"enum-int-equiv\",\n   \"guiding-decls\",\n+  \"huge-objects\",\n   \"labels-ok\",\n   \"new-abi\",\n   \"nonnull-objects\",\n   \"squangle\",\n   \"strict-prototype\",\n   \"this-is-variable\",\n-  \"vtable-gc\",\n+  \"vtable-thunks\",\n   \"xref\"\n };\n \n@@ -2354,7 +2354,7 @@ maybe_make_one_only (decl)\n      after a weak one is an error.  Also, not making explicit\n      instantiations one_only means that we can end up with two copies of\n      some template instantiations. */\n-  if (! supports_one_only ())\n+  if (! flag_weak)\n     return;\n \n   /* We can't set DECL_COMDAT on functions, or finish_file will think"}, {"sha": "579775f78ba3c40a566a4cadc34e61ee440f702c", "filename": "gcc/invoke.texi", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -172,13 +172,13 @@ in the following sections.\n -fno-enforce-eh-specs  -fexternal-templates @gol\n -falt-external-templates @gol\n -ffor-scope  -fno-for-scope  -fno-gnu-keywords  -fhonor-std @gol\n--fhuge-objects  -fno-implicit-templates @gol\n+-fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n -fno-nonansi-builtins  -fno-operator-names @gol\n -fno-optional-diags  -fpermissive @gol\n -frepo  -fno-rtti  -fstats  -ftemplate-depth-@var{n} @gol\n--fuse-cxa-atexit  -fvtable-thunks  -fno-weak  -nostdinc++ @gol\n+-fuse-cxa-atexit  -fvtable-gc  -fno-weak  -nostdinc++ @gol\n -fno-default-inline  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wno-deprecated @gol\n@@ -1312,16 +1312,6 @@ by default, ignore @code{namespace-declarations},\n @code{using-declarations}, @code{using-directives}, and\n @code{namespace-names}, if they involve @code{std}.\n \n-@item -fhuge-objects\n-Support virtual function calls for objects that exceed the size\n-representable by a @samp{short int}.  Users should not use this flag by\n-default; if you need to use it, the compiler will tell you so.\n-\n-This flag is not useful when compiling with -fvtable-thunks.\n-\n-Like all options that change the ABI, all C++ code, @emph{including\n-libgcc} must be built with the same setting of this option.\n-\n @item -fno-implicit-templates\n Never emit code for non-inline templates which are instantiated\n implicitly (i.e. by use); only emit code for explicit instantiations.\n@@ -1392,24 +1382,18 @@ This option is required for fully standards-compliant handling of static\n destructors, but will only work if your C library supports\n @code{__cxa_atexit}.\n \n-@item -fvtable-thunks\n-Use @samp{thunks} to implement the virtual function dispatch table\n-(@samp{vtable}).  The traditional (cfront-style) approach to\n-implementing vtables was to store a pointer to the function and two\n-offsets for adjusting the @samp{this} pointer at the call site.  Newer\n-implementations store a single pointer to a @samp{thunk} function which\n-does any necessary adjustment and then calls the target function.\n-\n-This option also enables a heuristic for controlling emission of\n-vtables; if a class has any non-inline virtual functions, the vtable\n-will be emitted in the translation unit containing the first one of\n-those.\n+@item -fvtable-gc\n+Emit special relocations for vtables and virtual function references\n+so that the linker can identify unused virtual functions and zero out\n+vtable slots that refer to them.  This is most useful with\n+@samp{-ffunction-sections} and @samp{-Wl,--gc-sections}, in order to\n+also discard the functions themselves.\n \n-Like all options that change the ABI, all C++ code, @emph{including\n-libgcc.a} must be built with the same setting of this option.\n+This optimization requires GNU as and GNU ld.  Not all systems support\n+this option.  @samp{-Wl,--gc-sections} is ignored without @samp{-static}.\n \n @item -fno-weak\n-Do not use weak symbol support, even if it is provied by the linker.\n+Do not use weak symbol support, even if it is provided by the linker.\n By default, G++ will use weak symbols if they are available.  This\n option exists only for testing, and should not be used by end-users;\n it will result in inferior code and has no benefits.  This option may\n@@ -1489,7 +1473,8 @@ but disables the helpful warning.\n @item -Wold-style-cast (C++ only)\n Warn if an old-style (C-style) cast is used within a C++ program.  The\n new-style casts (@samp{static_cast}, @samp{reinterpret_cast}, and\n-@samp{const_cast}) are less vulnerable to unintended effects.\n+@samp{const_cast}) are less vulnerable to unintended effects, and much\n+easier to grep for.\n \n @item -Woverloaded-virtual (C++ only)\n @cindex overloaded virtual fn, warning\n@@ -3417,7 +3402,7 @@ If @var{n} is not specified, use a machine-dependent default.\n @item -fssa\n Perform optimizations in static single assignment form.  Each function's\n flow graph is translated into SSA form, optimizations are performed, and\n-the flow graph is translated back from SSA form.  User's should not\n+the flow graph is translated back from SSA form.  Users should not\n specify this option, since it is not yet ready for production use.\n \n @item -fdce\n@@ -8101,7 +8086,7 @@ exceptions.  For some targets, this implies GNU CC will generate frame\n unwind information for all functions, which can produce significant data\n size overhead, although it does not affect execution.  If you do not\n specify this option, GNU CC will enable it by default for languages like\n-C++ which normally require exception handling, and disable itfor\n+C++ which normally require exception handling, and disable it for\n languages like C that do not normally require it.  However, you may need\n to enable this option when compiling C code that needs to interoperate\n properly with exception handlers written in C++.  You may also wish to\n@@ -8154,7 +8139,7 @@ shared between processes running the same program, while private data\n exists in one copy per process.\n \n @item -fno-common\n-Allocate even uninitialized global variables in the data section of the\n+In C, allocate even uninitialized global variables in the data section of the\n object file, rather than generating them as common blocks.  This has the\n effect that if the same variable is declared (without @code{extern}) in\n two different compilations, you will get an error when you link them."}, {"sha": "78d99e6c357408f49c71f8957abad84c80857a68", "filename": "gcc/testsuite/g++.old-deja/g++.ext/comint1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,4 @@\n // Test that we can use mixins with COM classes.\n-// Special g++ Options: -fvtable-thunks\n \n struct A\n {"}, {"sha": "bd7d65ce7019fc91260705dbb6edcc477a81c9a3", "filename": "gcc/testsuite/g++.old-deja/g++.ext/noweak1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fnoweak1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fnoweak1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fnoweak1.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -0,0 +1,16 @@\n+// Test that -fno-weak doesn't break explicit instantiation of static data.\n+// Special g++ Options: -fno-weak\n+\n+template <class T> struct A\n+{\n+  static int i;\n+};\n+\n+template <class T> int A<T>::i = 42;\n+\n+template class A<int>;\n+\n+int main ()\n+{\n+  return (A<int>::i != 42);\n+}"}, {"sha": "a46d356a6c0873f21097cd6c8eda051e0976577a", "filename": "gcc/testsuite/g++.old-deja/g++.jason/thunk1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk1.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,4 @@\n // Test that non-variadic function calls using thunks work right.\n-// Special g++ Options: -fvtable-thunks\n \n struct A {\n   void* p;\n@@ -38,7 +37,7 @@ void* test(MMixin& anExample)\n   return anExample.MixinFunc(1,A(0)).p;\n }\n \n-main ()\n+int main ()\n {\n   CExample c;\n "}, {"sha": "3df566a68cc3d14fdabcdd19ebf48e3fd07b90f7", "filename": "gcc/testsuite/g++.old-deja/g++.jason/thunk2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk2.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,6 +1,6 @@\n // Test that non-variadic function calls using thunks and PIC work right.\n // Skip if not native\n-// Special g++ Options: -fvtable-thunks -fPIC\n+// Special g++ Options: -fPIC\n // excess errors test - XFAIL m68k-motorola-sysv m88k-motorola-sysv3\n \n struct A {"}, {"sha": "8833348230d1be25759ce88a5924b62283e8c7bf", "filename": "gcc/testsuite/g++.old-deja/g++.jason/thunk3.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -2,7 +2,6 @@\n // Note that this will break on any target that uses the generic thunk\n //  support, because it doesn't support variadic functions.\n \n-// Special g++ Options: -fvtable-thunks\n // excess errors test - XFAIL mips*-*-* rs6000-*-* powerpc-*-eabi m68k-*-coff m68k-motorola-sysv m88k-motorola-sysv3  mn10300-*-* mn10200-*-* v850-*-* sh-*-* h8*-*-*\n \n #include <stdarg.h>\n@@ -50,7 +49,7 @@ void* test(MMixin& anExample)\n   return anExample.MixinFunc(1,2,3,4,5,6,7,8,9).p;\n }\n \n-main ()\n+int main ()\n {\n   CExample c;\n "}, {"sha": "15b31e4290851adc2bdc729a2beff8d192d9540b", "filename": "gcc/testsuite/g++.old-deja/g++.law/vtable2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvtable2.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,4 @@\n // Build don't link: \n-// Special g++ Options: -fvtable-thunks\n // GROUPS passed vtable\n struct C1\n {"}, {"sha": "fc5e9b54b474184834ee143ec755d815a6b361c7", "filename": "gcc/testsuite/g++.old-deja/g++.mike/thunk1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk1.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,4 @@\n // Build don't link:\n-// Special g++ Options: -fvtable-thunks\n \n struct C1\n {"}, {"sha": "20f1379d39393e968a2b5e6dc438544a1b8eb937", "filename": "gcc/testsuite/g++.old-deja/g++.mike/thunk2.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk2.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,3 @@\n-// Special g++ Options: -fvtable-thunks\n-\n #include <typeinfo>\n \n int state;\n@@ -26,7 +24,7 @@ A* bar() {\n   return new A;\n }\n \n-main() {\n+int main() {\n   A *aptr = bar();\n   aptr->foo();\n   if (dynamic_cast <void*> (aptr) != aptr)"}, {"sha": "16a5be85da6071e058ae5ba856e508fef696365e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/thunk3.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fthunk3.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,5 +1,3 @@\n-// Special g++ Options: -fvtable-thunks\n-\n int state;\n int fail;\n \n@@ -24,7 +22,7 @@ A* bar() {\n   return new A;\n }\n \n-main() {\n+int main() {\n   A *aptr = bar();\n   aptr->foo();\n   if (dynamic_cast <void*> (aptr) != aptr)"}, {"sha": "0aa2178da5d3110a1431bf9559f73854be7141d6", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/thunk1.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fthunk1.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -3,8 +3,6 @@\n // by Alexandre Oliva <oliva@dcc.unicamp.br>\n // based on bug report by Fredrik \ufffdhrstr\ufffdm <d92-foh@nada.kth.se>\n \n-// Special g++ Options: -fvtable-thunks\n-\n #include <cstdlib>\n \n using namespace std;"}, {"sha": "789e3166fb40bda5c41d3a29c2f05001a6259b5b", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash18.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ecce3e49d93a4e39e8ec93038eb335515e35ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C?ref=90ecce3e49d93a4e39e8ec93038eb335515e35ad", "patch": "@@ -1,7 +1,6 @@\n // Build don't link:\n // Special g++ Options: -fvtable-gc\n // Origin: Mark Mitchell <mitchell@codesourcery.com>\n-// excess errors test - XFAIL *-*-*\n \n struct S {\n   virtual void f ();"}]}