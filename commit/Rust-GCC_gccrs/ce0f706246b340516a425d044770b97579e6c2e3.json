{"sha": "ce0f706246b340516a425d044770b97579e6c2e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwZjcwNjI0NmIzNDA1MTZhNDI1ZDA0NDc3MGI5NzU3OWU2YzJlMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-04-25T01:13:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-04-25T01:13:22Z"}, "message": "compiler: fix glitch when inlining method with empty param/receiver\n    \n    Fix a problem with Function_declaration::import_function relating to\n    how no-name or \"sink\" parameters are handled. In Gogo::start_function\n    (for the non-inline case) when parameter bindings are being added,\n    parameters with empty/sink names are renamed to synthesized \"r.%d\" /\n    \"p.%d\" names so as to avoid collisions. This same handling needs to be\n    present when creating the bindings for an inline function that's being\n    instantiated after being read from export data.\n    \n    Fixes golang/go#31637.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/173538\n\nFrom-SVN: r270564", "tree": {"sha": "acab9ef3baafb89ea90345cf3d79942c7c29f9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acab9ef3baafb89ea90345cf3d79942c7c29f9c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce0f706246b340516a425d044770b97579e6c2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0f706246b340516a425d044770b97579e6c2e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0f706246b340516a425d044770b97579e6c2e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0f706246b340516a425d044770b97579e6c2e3/comments", "author": null, "committer": null, "parents": [{"sha": "6aa6cbacc8c1b3aa35b8382cbc387de05a9461f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa6cbacc8c1b3aa35b8382cbc387de05a9461f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa6cbacc8c1b3aa35b8382cbc387de05a9461f9"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "fd53ada097c1860c775626c824191e53f8a781bf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ce0f706246b340516a425d044770b97579e6c2e3", "patch": "@@ -1,4 +1,4 @@\n-56fe6a00892252edb4b28f8660ce29a985c48702\n+cb6fb7285bac72389bdce7ecfe87f9366022571a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1efaadf8c9d0d79bc744b18cc0d0b8230991c74c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=ce0f706246b340516a425d044770b97579e6c2e3", "patch": "@@ -1832,21 +1832,18 @@ Gogo::start_function(const std::string& name, Function_type* type,\n       Variable* this_param = new Variable(receiver->type(), NULL, false,\n \t\t\t\t\t  true, true, location);\n       std::string rname = receiver->name();\n-      if (rname.empty() || Gogo::is_sink_name(rname))\n-\t{\n-\t  // We need to give receivers a name since they wind up in\n-\t  // DECL_ARGUMENTS.  FIXME.\n-\t  static unsigned int count;\n-\t  char buf[50];\n-\t  snprintf(buf, sizeof buf, \"r.%u\", count);\n-\t  ++count;\n-\t  rname = buf;\n-\t}\n+      unsigned rcounter = 0;\n+\n+      // We need to give a nameless receiver parameter a synthesized name to\n+      // avoid having it clash with some other nameless param. FIXME.\n+      Gogo::rename_if_empty(&rname, \"r\", &rcounter);\n+\n       block->bindings()->add_variable(rname, NULL, this_param);\n     }\n \n   const Typed_identifier_list* parameters = type->parameters();\n   bool is_varargs = type->is_varargs();\n+  unsigned pcounter = 0;\n   if (parameters != NULL)\n     {\n       for (Typed_identifier_list::const_iterator p = parameters->begin();\n@@ -1859,16 +1856,11 @@ Gogo::start_function(const std::string& name, Function_type* type,\n \t    param->set_is_varargs_parameter();\n \n \t  std::string pname = p->name();\n-\t  if (pname.empty() || Gogo::is_sink_name(pname))\n-\t    {\n-\t      // We need to give parameters a name since they wind up\n-\t      // in DECL_ARGUMENTS.  FIXME.\n-\t      static unsigned int count;\n-\t      char buf[50];\n-\t      snprintf(buf, sizeof buf, \"p.%u\", count);\n-\t      ++count;\n-\t      pname = buf;\n-\t    }\n+\n+          // We need to give each nameless parameter a non-empty name to avoid\n+          // having it clash with some other nameless param. FIXME.\n+          Gogo::rename_if_empty(&pname, \"p\", &pcounter);\n+\n \t  block->bindings()->add_variable(pname, NULL, param);\n \t}\n     }\n@@ -2313,6 +2305,20 @@ Gogo::add_variable(const std::string& name, Variable* variable)\n   return no;\n }\n \n+void\n+Gogo::rename_if_empty(std::string* pname, const char* tag, unsigned* count)\n+{\n+  if (pname->empty() || Gogo::is_sink_name(*pname))\n+    {\n+      char buf[50];\n+      go_assert(strlen(tag) < 10);\n+      snprintf(buf, sizeof buf, \"%s.%u\", tag, *count);\n+      ++(*count);\n+      *pname = buf;\n+    }\n+}\n+\n+\n // Add a sink--a reference to the blank identifier _.\n \n Named_object*\n@@ -6904,11 +6910,20 @@ Function_declaration::import_function_body(Gogo* gogo, Named_object* no)\n       const Typed_identifier* receiver = fntype->receiver();\n       Variable* recv_param = new Variable(receiver->type(), NULL, false,\n \t\t\t\t\t  true, true, start_loc);\n-      outer->bindings()->add_variable(receiver->name(), NULL, recv_param);\n+\n+      std::string rname = receiver->name();\n+      unsigned rcounter = 0;\n+\n+      // We need to give a nameless receiver a name to avoid having it\n+      // clash with some other nameless param. FIXME.\n+      Gogo::rename_if_empty(&rname, \"r\", &rcounter);\n+\n+      outer->bindings()->add_variable(rname, NULL, recv_param);\n     }\n \n   const Typed_identifier_list* params = fntype->parameters();\n   bool is_varargs = fntype->is_varargs();\n+  unsigned pcounter = 0;\n   if (params != NULL)\n     {\n       for (Typed_identifier_list::const_iterator p = params->begin();\n@@ -6919,7 +6934,14 @@ Function_declaration::import_function_body(Gogo* gogo, Named_object* no)\n \t\t\t\t\t start_loc);\n \t  if (is_varargs && p + 1 == params->end())\n \t    param->set_is_varargs_parameter();\n-\t  outer->bindings()->add_variable(p->name(), NULL, param);\n+\n+\t  std::string pname = p->name();\n+\n+          // We need to give each nameless parameter a non-empty name to avoid\n+          // having it clash with some other nameless param. FIXME.\n+          Gogo::rename_if_empty(&pname, \"p\", &pcounter);\n+\n+\t  outer->bindings()->add_variable(pname, NULL, param);\n \t}\n     }\n "}, {"sha": "1c9f0de0b366e60b1795e8108182d16df9a7adc6", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0f706246b340516a425d044770b97579e6c2e3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=ce0f706246b340516a425d044770b97579e6c2e3", "patch": "@@ -220,6 +220,16 @@ class Gogo\n \t    && name[name.length() - 2] == '.');\n   }\n \n+  // Helper used when adding parameters (including receiver param) to the\n+  // bindings of a function. If the specified parameter name is empty or\n+  // corresponds to the sink name, param name is replaced with a new unique\n+  // name. PNAME is the address of a string containing the parameter variable\n+  // name to be checked/updated; TAG is a descriptive tag to be used in\n+  // manufacturing the new unique name, and COUNT is the address of a counter\n+  // holding the number of params renamed so far with the tag in question.\n+  static void\n+  rename_if_empty(std::string* pname, const char* tag, unsigned* count);\n+\n   // Convert a pkgpath into a string suitable for a symbol\n   static std::string\n   pkgpath_for_symbol(const std::string& pkgpath);"}]}