{"sha": "c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlNGNjNTNlNTNkZTBmNjcxYjcxNWJmYjgzZjM3ZGJmNzNhYWYyZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-22T09:26:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-22T09:26:01Z"}, "message": "c-common.c (handle_packed_attribute): Don't pack a struct via a typedef.\n\n\t* c-common.c (handle_packed_attribute): Don't pack a struct via a\n\ttypedef. Propagate packedness from a main variant.\ntestsuite:\n\t* gcc.dg/pack-test-3.c: New test.\n\nFrom-SVN: r69668", "tree": {"sha": "99496b3fc47148edf71566fe7c4b58da3579195c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99496b3fc47148edf71566fe7c4b58da3579195c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/comments", "author": null, "committer": null, "parents": [{"sha": "55de4f08f41b19bc0a72c7e0676b53d9c4b0a9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55de4f08f41b19bc0a72c7e0676b53d9c4b0a9fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55de4f08f41b19bc0a72c7e0676b53d9c4b0a9fd"}], "stats": {"total": 87, "additions": 74, "deletions": 13}, "files": [{"sha": "85eab61d0cf2ccbfba2555586d3dd892d8658011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-common.c (handle_packed_attribute): Don't pack a struct via a\n+\ttypedef. Propagate packedness from a main variant.\n+\n 2003-07-22  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.in (install-common): Add dependency on installdirs."}, {"sha": "b5d6651ade456c2f99352214c5c0fd93d97e939e", "filename": "gcc/c-common.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "patch": "@@ -4534,25 +4534,33 @@ static tree\n handle_packed_attribute (tree *node, tree name, tree args  ATTRIBUTE_UNUSED,\n \t\t\t int flags, bool *no_add_attrs)\n {\n-  tree *type = NULL;\n-  if (DECL_P (*node))\n-    {\n-      if (TREE_CODE (*node) == TYPE_DECL)\n-\ttype = &TREE_TYPE (*node);\n-    }\n-  else\n-    type = node;\n-\n-  if (type)\n+  if (TYPE_P (*node))\n     {\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*type = build_type_copy (*type);\n-      TYPE_PACKED (*type) = 1;\n+\t*node = build_type_copy (*node);\n+      TYPE_PACKED (*node) = 1;\n+      if (TYPE_MAIN_VARIANT (*node) == *node)\n+\t{\n+\t  /* If it is the main variant, then pack the other variants\n+   \t     too. This happens in,\n+\t     \n+\t     struct Foo {\n+\t       struct Foo const *ptr; // creates a variant w/o packed flag\n+\t       } __ attribute__((packed)); // packs it now.\n+\t  */\n+\t  tree probe;\n+\t  \n+\t  for (probe = *node; probe; probe = TYPE_NEXT_VARIANT (probe))\n+\t    TYPE_PACKED (probe) = 1;\n+\t}\n+      \n     }\n   else if (TREE_CODE (*node) == FIELD_DECL)\n     DECL_PACKED (*node) = 1;\n   /* We can't set DECL_PACKED for a VAR_DECL, because the bit is\n-     used for DECL_REGISTER.  It wouldn't mean anything anyway.  */\n+     used for DECL_REGISTER.  It wouldn't mean anything anyway.\n+     We can't set DECL_PACKED on the type of a TYPE_DECL, because\n+     that changes what the typedef is typing.  */\n   else\n     {\n       warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));"}, {"sha": "25fd05966c1071cf9c2b3db0d05bc8efd4826f86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "patch": "@@ -1,3 +1,7 @@\n+2003-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.dg/pack-test-3.c: New test.\n+\n 2003-07-21  Janis Johnson  <janis187@us.ibm.com>\n \n \t* lib/compat.exp: Handle dg-options per source file."}, {"sha": "8b0390378b3120ba68101f6f296f4692d41b2f70", "filename": "gcc/testsuite/gcc.dg/pack-test-3.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c?ref=c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+\n+/* Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by Nathan Sidwell 15 Jul 2003 <nathan@codesourcery.com> */\n+\n+/* you should not be able to pack a typedef to a struct, only the\n+   underlying struct can be packed.  */\n+\n+/* ok */\n+struct u1\n+{\n+  char field1;\n+  short field2;\n+  int field3;\n+};\n+\n+/* ok */\n+typedef struct p1 {\n+   char  field1;\n+   short field2;\n+   int field3;\n+} __attribute__ ((packed)) p1_t1;\n+\n+/* ok */\n+typedef struct __attribute__ ((packed)) p2 {\n+   char  field1;\n+   short field2;\n+   int field3;\n+} p2_t1;\n+\n+int ary1[sizeof (struct p1) == sizeof (p1_t1) ? 1 : -1];\n+int ary2[sizeof (struct p2) == sizeof (p2_t1) ? 1 : -1];\n+int ary3[sizeof (struct p1) == sizeof (struct p2) ? 1 : -1];\n+\n+/* not ok */\n+typedef struct u1 __attribute__ ((packed)) u1_t1; /* { dg-warning \"attribute ignored\" \"\" }*/\n+typedef struct u1 u1_t2 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" \"\" }*/\n+\n+typedef struct p3 {\n+   char  field1;\n+   short field2;\n+   int field3;\n+} p3_t1 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" \"\" }*/\n+"}]}