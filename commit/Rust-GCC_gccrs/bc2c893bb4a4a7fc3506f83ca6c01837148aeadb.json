{"sha": "bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyYzg5M2JiNGE0YTdmYzM1MDZmODNjYTZjMDE4MzcxNDhhZWFkYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:42:16Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:42:16Z"}, "message": "Change use to type-based pool allocator in tree-sra.c.\n\n\t* tree-sra.c (sra_initialize): Use new type-based pool allocator.\n\t(sra_deinitialize) Likewise.\n\t(create_access_1) Likewise.\n\t(build_accesses_from_assign) Likewise.\n\t(create_artificial_child_access) Likewise.\n\nFrom-SVN: r223956", "tree": {"sha": "e793c99423eb7ec6a286fc0df6b856bfd450247f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e793c99423eb7ec6a286fc0df6b856bfd450247f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da6603c626fdc18f3206ad6f9df72b987575639a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6603c626fdc18f3206ad6f9df72b987575639a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6603c626fdc18f3206ad6f9df72b987575639a"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "ec7f5b7ac9d48dcffcabb87af62f789a11a6d41e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "patch": "@@ -1,3 +1,11 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-sra.c (sra_initialize): Use new type-based pool allocator.\n+\t(sra_deinitialize) Likewise.\n+\t(create_access_1) Likewise.\n+\t(build_accesses_from_assign) Likewise.\n+\t(create_artificial_child_access) Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* dse.c (get_group_info):Use new type-based pool allocator."}, {"sha": "ae42c9ba645d9d00f35e9ef61e42159463c31dce", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "patch": "@@ -301,13 +301,28 @@ struct access\n   /* Set when we discover that this pointer is not safe to dereference in the\n      caller.  */\n   unsigned grp_not_necessarilly_dereferenced : 1;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((access *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<access> pool;\n };\n \n typedef struct access *access_p;\n \n \n /* Alloc pool for allocating access structures.  */\n-static alloc_pool access_pool;\n+pool_allocator<struct access> access::pool (\"SRA accesses\", 16);\n \n /* A structure linking lhs and rhs accesses from an aggregate assignment.  They\n    are used to propagate subaccesses from rhs to lhs as long as they don't\n@@ -316,10 +331,25 @@ struct assign_link\n {\n   struct access *lacc, *racc;\n   struct assign_link *next;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((assign_link *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<assign_link> pool;\n };\n \n /* Alloc pool for allocating assign link structures.  */\n-static alloc_pool link_pool;\n+pool_allocator<assign_link> assign_link::pool (\"SRA links\", 16);\n \n /* Base (tree) -> Vector (vec<access_p> *) map.  */\n static hash_map<tree, auto_vec<access_p> > *base_access_vec;\n@@ -691,8 +721,6 @@ sra_initialize (void)\n   should_scalarize_away_bitmap = BITMAP_ALLOC (NULL);\n   cannot_scalarize_away_bitmap = BITMAP_ALLOC (NULL);\n   gcc_obstack_init (&name_obstack);\n-  access_pool = create_alloc_pool (\"SRA accesses\", sizeof (struct access), 16);\n-  link_pool = create_alloc_pool (\"SRA links\", sizeof (struct assign_link), 16);\n   base_access_vec = new hash_map<tree, auto_vec<access_p> >;\n   memset (&sra_stats, 0, sizeof (sra_stats));\n   encountered_apply_args = false;\n@@ -710,8 +738,8 @@ sra_deinitialize (void)\n   candidates = NULL;\n   BITMAP_FREE (should_scalarize_away_bitmap);\n   BITMAP_FREE (cannot_scalarize_away_bitmap);\n-  free_alloc_pool (access_pool);\n-  free_alloc_pool (link_pool);\n+  access::pool.release ();\n+  assign_link::pool.release ();\n   obstack_free (&name_obstack, NULL);\n \n   delete base_access_vec;\n@@ -863,9 +891,8 @@ mark_parm_dereference (tree base, HOST_WIDE_INT dist, gimple stmt)\n static struct access *\n create_access_1 (tree base, HOST_WIDE_INT offset, HOST_WIDE_INT size)\n {\n-  struct access *access;\n+  struct access *access = new struct access ();\n \n-  access = (struct access *) pool_alloc (access_pool);\n   memset (access, 0, sizeof (struct access));\n   access->base = base;\n   access->offset = offset;\n@@ -1240,7 +1267,7 @@ build_accesses_from_assign (gimple stmt)\n     {\n       struct assign_link *link;\n \n-      link = (struct assign_link *) pool_alloc (link_pool);\n+      link = new assign_link;\n       memset (link, 0, sizeof (struct assign_link));\n \n       link->lacc = lacc;\n@@ -2394,13 +2421,12 @@ static struct access *\n create_artificial_child_access (struct access *parent, struct access *model,\n \t\t\t\tHOST_WIDE_INT new_offset)\n {\n-  struct access *access;\n   struct access **child;\n   tree expr = parent->base;\n \n   gcc_assert (!model->grp_unscalarizable_region);\n \n-  access = (struct access *) pool_alloc (access_pool);\n+  struct access *access = new struct access ();\n   memset (access, 0, sizeof (struct access));\n   if (!build_user_friendly_ref_for_offset (&expr, TREE_TYPE (expr), new_offset,\n \t\t\t\t\t   model->type))"}]}