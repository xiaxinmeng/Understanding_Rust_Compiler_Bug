{"sha": "cc535146720889c8e32712b0351204ee182d4843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1MzUxNDY3MjA4ODljOGUzMjcxMmIwMzUxMjA0ZWUxODJkNDg0Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-02-23T23:23:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-02-23T23:23:43Z"}, "message": "PR libstdc++/84532 prevent unwrapping of reference_wrapper arguments\n\n\tPR libstdc++/84532\n\t* include/std/thread (thread::__make_invoker): Construct tuple\n\tdirectly instead of using make_tuple.\n\t* testsuite/30_threads/async/84532.cc: New.\n\t* testsuite/30_threads/thread/84532.cc: New.\n\nFrom-SVN: r257956", "tree": {"sha": "7271bee4a1eb11e0b500e4c1bd45cdb26334f103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7271bee4a1eb11e0b500e4c1bd45cdb26334f103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc535146720889c8e32712b0351204ee182d4843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc535146720889c8e32712b0351204ee182d4843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc535146720889c8e32712b0351204ee182d4843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc535146720889c8e32712b0351204ee182d4843/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af2826bb0cd48d90dc04fc044a9ddbf978a5281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af2826bb0cd48d90dc04fc044a9ddbf978a5281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af2826bb0cd48d90dc04fc044a9ddbf978a5281"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "4f83772b47911c80ad3f1e0109335944e70983eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc535146720889c8e32712b0351204ee182d4843", "patch": "@@ -1,3 +1,11 @@\n+2018-02-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/84532\n+\t* include/std/thread (thread::__make_invoker): Construct tuple\n+\tdirectly instead of using make_tuple.\n+\t* testsuite/30_threads/async/84532.cc: New.\n+\t* testsuite/30_threads/thread/84532.cc: New.\n+\n 2018-02-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/ext/aligned_buffer.h [_GLIBCXX_INLINE_VERSION]"}, {"sha": "1cabd6ae0e66365507cf4e5be3e6f84d19452e45", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=cc535146720889c8e32712b0351204ee182d4843", "patch": "@@ -243,21 +243,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return _M_invoke(_Indices()); }\n       };\n \n-    // Alias for _Invoker<tuple<DECAY_COPY(_Tp)...>>\n     template<typename... _Tp>\n-      using __invoker_type\n-\t= _Invoker<decltype(std::make_tuple(std::declval<_Tp>()...))>;\n+      using __decayed_tuple = tuple<typename std::decay<_Tp>::type...>;\n \n   public:\n-    // Returns a call wrapper that does\n-    // INVOKE(DECAY_COPY(__callable), DECAY_COPY(__args)).\n+    // Returns a call wrapper that stores\n+    // tuple{DECAY_COPY(__callable), DECAY_COPY(__args)...}.\n     template<typename _Callable, typename... _Args>\n-      static __invoker_type<_Callable, _Args...>\n+      static _Invoker<__decayed_tuple<_Callable, _Args...>>\n       __make_invoker(_Callable&& __callable, _Args&&... __args)\n       {\n-\treturn { {\n-\t    std::make_tuple(std::forward<_Callable>(__callable),\n-\t\t\t    std::forward<_Args>(__args)...)\n+\treturn { __decayed_tuple<_Callable, _Args...>{\n+\t    std::forward<_Callable>(__callable), std::forward<_Args>(__args)...\n \t} };\n       }\n   };"}, {"sha": "480ed733ca3f7e3b841ac2b329e96287cfc8eb17", "filename": "libstdc++-v3/testsuite/30_threads/async/84532.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F84532.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F84532.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F84532.cc?ref=cc535146720889c8e32712b0351204ee182d4843", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+\n+// PR libstdc++/84532\n+\n+struct F\n+{\n+  template<typename T, typename U>\n+    void operator()(T, U, int&)\n+    {\n+      using std::is_same;\n+      using std::reference_wrapper;\n+      static_assert(is_same<T, reference_wrapper<int>>::value, \"\");\n+      static_assert(is_same<U, reference_wrapper<const int>>::value, \"\");\n+    }\n+};\n+int i = 0;\n+auto fut = std::async(F{}, std::ref(i), std::cref(i), std::ref(i));"}, {"sha": "f389b9b88e3f38e69e195f2c84f8953af2145518", "filename": "libstdc++-v3/testsuite/30_threads/thread/84532.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2F84532.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc535146720889c8e32712b0351204ee182d4843/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2F84532.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2F84532.cc?ref=cc535146720889c8e32712b0351204ee182d4843", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <thread>\n+\n+// PR libstdc++/84532\n+\n+struct F\n+{\n+  template<typename T, typename U>\n+    void operator()(T, U, int&)\n+    {\n+      using std::is_same;\n+      using std::reference_wrapper;\n+      static_assert(is_same<T, reference_wrapper<int>>::value, \"\");\n+      static_assert(is_same<U, reference_wrapper<const int>>::value, \"\");\n+    }\n+};\n+int i = 0;\n+std::thread t(F{}, std::ref(i), std::cref(i), std::ref(i));"}]}