{"sha": "1a289fa36294627c252492e4c18d7877a7c80dc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyODlmYTM2Mjk0NjI3YzI1MjQ5MmU0YzE4ZDc4NzdhN2M4MGRjMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-04T23:23:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-04T23:23:22Z"}, "message": "Export explicit instantiations for C++17 members of std::string\n\nThe C++17 standard added some new members to std::basic_string, which\nwere not previously instantiated in the library. This meant that the\nextern template declarations had to be disabled for C++17 mode. With\nthis patch the new members are instantiated in the library and so the\nexplicit instantiation declarations can be used for C++17.\n\nThe new members added by C++2a are still not exported, and so the\nexplicit instantiation declarations are still disabled for C++2a.\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Make patterns less greedy\n\tfor const member functions of std::basic_string.\n\t(GLIBCXX_3.4.26): Export member functions of std::basic_string added\n\tin C++17.\n\t* include/bits/basic_string.h (basic_string(__sv_wrapper, const A&)):\n\tMake non-standard constructor private.\n\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string(__sv_wrapper, const A&)):\n\tLikewise.\n\t* include/bits/basic_string.tcc (std::string, std::wstring): Declare\n\texplicit instantiations for C++17 as well as earlier dialects.\n\t* src/c++17/Makefile.am: Add new source files.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++17/cow-string-inst.cc: New file defining explicit\n\tinstantiations for basic_string member functions added in C++17.\n\t* src/c++17/string-inst.cc: Likewise.\n\nFrom-SVN: r267585", "tree": {"sha": "f72c48461f5498b0faba69361a2a52347cb032dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72c48461f5498b0faba69361a2a52347cb032dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a289fa36294627c252492e4c18d7877a7c80dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a289fa36294627c252492e4c18d7877a7c80dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a289fa36294627c252492e4c18d7877a7c80dc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a289fa36294627c252492e4c18d7877a7c80dc1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff3e6509066e2832fdfe9987e7fd2f8719da93f"}], "stats": {"total": 248, "additions": 186, "deletions": 62}, "files": [{"sha": "993e0b6857b98f3c21699de065c0cd2a3dd68185", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -1,5 +1,21 @@\n 2019-01-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Make patterns less greedy\n+\tfor const member functions of std::basic_string.\n+\t(GLIBCXX_3.4.26): Export member functions of std::basic_string added\n+\tin C++17.\n+\t* include/bits/basic_string.h (basic_string(__sv_wrapper, const A&)):\n+\tMake non-standard constructor private.\n+\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string(__sv_wrapper, const A&)):\n+\tLikewise.\n+\t* include/bits/basic_string.tcc (std::string, std::wstring): Declare\n+\texplicit instantiations for C++17 as well as earlier dialects.\n+\t* src/c++17/Makefile.am: Add new source files.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/cow-string-inst.cc: New file defining explicit\n+\tinstantiations for basic_string member functions added in C++17.\n+\t* src/c++17/string-inst.cc: Likewise.\n+\n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export allocator-extended\n \tcopy/move constructors for old std::basic_string.\n \t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]"}, {"sha": "6c18caa6d8aee07a9a9b8e4b62f8e74af491cfcb", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -1742,7 +1742,8 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]I[PN]*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[Daip]*;\n-    _ZNKSt7__cxx1112basic_string*;\n+    _ZNKSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[1-9]*;\n+    _ZNKSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEixE[jmy];\n \n     # operator+ for ABI-tagged std::basic_string\n     _ZStplI[cw]St11char_traitsI[cw]ESaI[cw]EENSt7__cxx1112basic_stringIT_T0_T1_EE*;\n@@ -2077,6 +2078,27 @@ GLIBCXX_3.4.26 {\n     _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_RKS1_;\n     _ZNSbIwSt11char_traitsIwESaIwEEC[12]EOS2_RKS1_;\n \n+    # basic_string<C, T, A>::operator basic_string_view<C, T>() const\n+    _ZNKSscvSt17basic_string_viewIcSt11char_traitsIcEEEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEEcvSt17basic_string_viewIwS0_EEv;\n+    _ZNKSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEcvSt17basic_string_viewI[cw]S2_EEv;\n+    # basic_string<C, T, A>::data()\n+    _ZNSs4dataEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE4dataEv;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4dataEv;\n+    # basic_string<C, T, A>::_S_to_string_view(basic_string_view<C, T>)\n+    _ZNSs17_S_to_string_viewESt17basic_string_viewIcSt11char_traitsIcEE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE17_S_to_string_viewESt17basic_string_viewIwS0_E;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE17_S_to_string_viewESt17basic_string_viewI[cw]S2_E;\n+    # basic_string<C, T, A>::__sv_wrapper::__sv_wrapper(basic_string_view<C, T>)\n+    _ZNSs12__sv_wrapperC[12]ESt17basic_string_viewIcSt11char_traitsIcEE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE12__sv_wrapperC[12]ESt17basic_string_viewIwS0_E;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12__sv_wrapperC[12]ESt17basic_string_viewI[cw]S2_E;\n+    # basic_string<C, T, A>::basic_string(__sv_wrapper, const allocator_type&)\n+    _ZNSsC[12]ENSs12__sv_wrapperERKSaIcE;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]ENS2_12__sv_wrapperERKS1_;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ENS4_12__sv_wrapperERKS3_;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "28ed337bdb6fdef11c6849192457e346c4f88d79", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -44,7 +44,7 @@\n #include <initializer_list>\n #endif\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n # include <string_view>\n #endif\n \n@@ -109,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n \n     private:\n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       // A helper type for avoiding boiler-plate.\n       typedef basic_string_view<_CharT, _Traits> __sv_type;\n \n@@ -134,6 +134,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n \t__sv_type _M_sv;\n       };\n+\n+      /**\n+       *  @brief  Only internally used: Construct string from a string view\n+       *          wrapper.\n+       *  @param  __svw  string view wrapper.\n+       *  @param  __a  Allocator to use.\n+       */\n+      explicit\n+      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n+      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif\n \n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n@@ -617,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t: _M_dataplus(_M_local_data(), __a)\n \t{ _M_construct(__beg, __end); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Construct string from a substring of a string_view.\n        *  @param  __t   Source object convertible to string view.\n@@ -639,16 +649,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \texplicit\n \tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n \t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\n-\n-      /**\n-       *  @brief  Only internally used: Construct string from a string view\n-       *          wrapper.\n-       *  @param  __svw  string view wrapper.\n-       *  @param  __a  Allocator to use.\n-       */\n-      explicit\n-      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n-      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif // C++17\n \n       /**\n@@ -799,7 +799,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Set value to string constructed from a string_view.\n        *  @param  __svt  An object convertible to string_view.\n@@ -1200,7 +1200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->append(__l.begin(), __l.size()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Append a string_view.\n        *  @param __svt  An object convertible to string_view to be appended.\n@@ -1309,7 +1309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n         append(_InputIterator __first, _InputIterator __last)\n         { return this->replace(end(), end(), __first, __last); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Append a string_view.\n        *  @param __svt  An object convertible to string_view to be appended.\n@@ -1481,7 +1481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->assign(__l.begin(), __l.size()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Set value from a string_view.\n        *  @param __svt  The source object convertible to string_view.\n@@ -1750,7 +1750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn iterator(_M_data() + __pos);\n       }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n@@ -2181,7 +2181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos  The position to replace at.\n@@ -2309,7 +2309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Return non-const pointer to contents.\n        *\n@@ -2359,7 +2359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a string_view.\n        *  @param __svt  The object convertible to string_view to locate.\n@@ -2421,7 +2421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a string_view.\n        *  @param __svt  The object convertible to string_view to locate.\n@@ -2500,7 +2500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a character of a string_view.\n        *  @param __svt  An object convertible to string_view containing\n@@ -2584,7 +2584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a character of string.\n        *  @param __svt  An object convertible to string_view containing\n@@ -2667,7 +2667,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a character not in a string_view.\n        *  @param __svt  A object convertible to string_view containing\n@@ -2749,7 +2749,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a character not in a string_view.\n        *  @param __svt  An object convertible to string_view containing\n@@ -2859,7 +2859,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn __r;\n       }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __svt An object convertible to string_view to compare against.\n@@ -3493,7 +3493,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       _S_empty_rep() _GLIBCXX_NOEXCEPT\n       { return _Rep::_S_empty_rep(); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       // A helper type for avoiding boiler-plate.\n       typedef basic_string_view<_CharT, _Traits> __sv_type;\n \n@@ -3518,6 +3518,16 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n \t__sv_type _M_sv;\n       };\n+\n+      /**\n+       *  @brief  Only internally used: Construct string from a string view\n+       *          wrapper.\n+       *  @param  __svw  string view wrapper.\n+       *  @param  __a  Allocator to use.\n+       */\n+      explicit\n+      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n+      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif\n \n     public:\n@@ -3662,7 +3672,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n         basic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc());\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Construct string from a substring of a string_view.\n        *  @param  __t   Source object convertible to string view.\n@@ -3684,16 +3694,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \texplicit\n \tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n \t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\n-\n-      /**\n-       *  @brief  Only internally used: Construct string from a string view\n-       *          wrapper.\n-       *  @param  __svw  string view wrapper.\n-       *  @param  __a  Allocator to use.\n-       */\n-      explicit\n-      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n-      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif // C++17\n \n       /**\n@@ -3761,7 +3761,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Set value to string constructed from a string_view.\n        *  @param  __svt An object convertible to  string_view.\n@@ -4183,7 +4183,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->append(__l.begin(), __l.size()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Append a string_view.\n        *  @param __svt The object convertible to string_view to be appended.\n@@ -4275,7 +4275,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n         append(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_iend(), _M_iend(), __first, __last); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Append a string_view.\n        *  @param __svt The object convertible to string_view to be appended.\n@@ -4433,7 +4433,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->assign(__l.begin(), __l.size()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Set value from a string_view.\n        *  @param __svt The source object convertible to string_view.\n@@ -4640,7 +4640,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn iterator(_M_data() + __pos);\n       }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n@@ -5030,7 +5030,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos  The position to replace at.\n@@ -5203,7 +5203,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Return non-const pointer to contents.\n        *\n@@ -5286,7 +5286,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       size_type\n       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a string_view.\n        *  @param __svt  The object convertible to string_view to locate.\n@@ -5364,7 +5364,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       size_type\n       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a string_view.\n        *  @param __svt  The object convertible to string_view to locate.\n@@ -5447,7 +5447,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a character of a string_view.\n        *  @param __svt  An object convertible to string_view containing\n@@ -5531,7 +5531,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a character of string.\n        *  @param __svt  An object convertible to string_view containing\n@@ -5612,7 +5612,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT;\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find position of a character not in a string_view.\n        *  @param __svt  An object convertible to string_view containing\n@@ -5694,7 +5694,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT;\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Find last position of a character not in a string_view.\n        *  @param __svt  An object convertible to string_view containing\n@@ -5756,7 +5756,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn __r;\n       }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __svt An object convertible to string_view to compare against."}, {"sha": "314b8fe207f8163b227bc957b1697e6a054fc0ff", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -1604,7 +1604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Until those definitions are compiled as C++17 suppress the declaration,\n   // so C++17 code will implicitly instantiate std::string and std::wstring\n   // as needed.\n-# if __cplusplus <= 201402L && _GLIBCXX_EXTERN_TEMPLATE > 0\n+# if __cplusplus <= 201703L && _GLIBCXX_EXTERN_TEMPLATE > 0\n   extern template class basic_string<char>;\n # elif ! _GLIBCXX_USE_CXX11_ABI\n   // Still need to prevent implicit instantiation of the COW empty rep,\n@@ -1627,7 +1627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     getline(basic_istream<char>&, string&);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-# if __cplusplus <= 201402L && _GLIBCXX_EXTERN_TEMPLATE > 0\n+# if __cplusplus <= 201703L && _GLIBCXX_EXTERN_TEMPLATE > 0\n   extern template class basic_string<wchar_t>;\n # elif ! _GLIBCXX_USE_CXX11_ABI\n   extern template basic_string<wchar_t>::size_type"}, {"sha": "afa119eecb6cd6b4516a37b24ba973e88f0843a3", "filename": "libstdc++-v3/src/c++17/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -28,10 +28,11 @@ noinst_LTLIBRARIES = libc++17convenience.la\n headers =\n \n sources = \\\n-\tmemory_resource.cc\n+\tmemory_resource.cc \\\n+\tstring-inst.cc\n \n if ENABLE_DUAL_ABI\n-extra_string_inst_sources =\n+extra_string_inst_sources = cow-string-inst.cc\n else\n extra_string_inst_sources =\n endif"}, {"sha": "0657bdcf9d9e0d3f36205afa5a819569b17c140e", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -121,8 +121,8 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__17convenience_la_LIBADD =\n-am__objects_1 = memory_resource.lo\n-am__objects_2 =\n+am__objects_1 = memory_resource.lo string-inst.lo\n+@ENABLE_DUAL_ABI_TRUE@am__objects_2 = cow-string-inst.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_3 = $(am__objects_2)\n am_libc__17convenience_la_OBJECTS = $(am__objects_1) $(am__objects_3)\n libc__17convenience_la_OBJECTS = $(am_libc__17convenience_la_OBJECTS)\n@@ -411,10 +411,11 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES) $(CPPFLAGS)\n noinst_LTLIBRARIES = libc++17convenience.la\n headers = \n sources = \\\n-\tmemory_resource.cc\n+\tmemory_resource.cc \\\n+\tstring-inst.cc\n \n @ENABLE_DUAL_ABI_FALSE@extra_string_inst_sources = \n-@ENABLE_DUAL_ABI_TRUE@extra_string_inst_sources = \n+@ENABLE_DUAL_ABI_TRUE@extra_string_inst_sources = cow-string-inst.cc\n # XTEMPLATE_FLAGS =\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n "}, {"sha": "b47a6e50d87670b7181c26e6a533aa35e7fcdd12", "filename": "libstdc++-v3/src/c++17/cow-string-inst.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-string-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-string-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-string-inst.cc?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -0,0 +1,34 @@\n+// Reference-counted COW string instantiations for C++17 -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:2017 24  Strings library\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include \"string-inst.cc\"\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif"}, {"sha": "c095a90587eaf8f1c5a771d711274266a2b52880", "filename": "libstdc++-v3/src/c++17/string-inst.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a289fa36294627c252492e4c18d7877a7c80dc1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fstring-inst.cc?ref=1a289fa36294627c252492e4c18d7877a7c80dc1", "patch": "@@ -0,0 +1,50 @@\n+// string instantiations for C++17 -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:2017 24  Strings library\n+//\n+\n+#include <string>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+template basic_string<char>::basic_string(__sv_wrapper, const allocator_type&);\n+template basic_string<char>::__sv_wrapper::__sv_wrapper(string_view);\n+template string_view basic_string<char>::_S_to_string_view(string_view);\n+template basic_string<char>::operator string_view() const noexcept;\n+template char* basic_string<char>::data() noexcept;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+template basic_string<wchar_t>::basic_string(__sv_wrapper, const allocator_type&);\n+template basic_string<wchar_t>::__sv_wrapper::__sv_wrapper(wstring_view);\n+template wstring_view basic_string<wchar_t>::_S_to_string_view(wstring_view);\n+template basic_string<wchar_t>::operator wstring_view() const noexcept;\n+template wchar_t* basic_string<wchar_t>::data() noexcept;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std"}]}