{"sha": "62d60246e53778db6ee613377dd013ba4b264968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkNjAyNDZlNTM3NzhkYjZlZTYxMzM3N2RkMDEzYmE0YjI2NDk2OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-05T15:34:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-05T19:37:01Z"}, "message": "c++: lambda in DMI in class template [PR95870]\n\nHere enclosing_instantiation_of was failing to find a match because otctx is\nstruct S<T> and current_function_decl is S<int>::S(), so the latter has more\nfunction contexts, and we end up trying to compare S() to NULL_TREE.\n\nAfter spending a bit of time working on establishing the correspondence in\nthis case (class <=> constructor), it occurred to me that we could just use\nDECL_SOURCE_LOCATION, which is unique for lambdas, since they cannot be\nredeclared.  Since we're so close to release, for now I'm only doing this\nfor the case that was failing before.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95870\n\t* pt.c (enclosing_instantiation_of): Compare DECL_SOURCE_LOCATION if\n\tthere is no enclosing non-lambda function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95870\n\t* g++.dg/cpp0x/lambda/lambda-nsdmi10.C: New test.", "tree": {"sha": "05f4366d7d8b6d704f6e27515813b3773e639632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f4366d7d8b6d704f6e27515813b3773e639632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d60246e53778db6ee613377dd013ba4b264968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d60246e53778db6ee613377dd013ba4b264968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d60246e53778db6ee613377dd013ba4b264968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d60246e53778db6ee613377dd013ba4b264968/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebdef2076fda56cb4cffb941f6c2576f980f3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebdef2076fda56cb4cffb941f6c2576f980f3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebdef2076fda56cb4cffb941f6c2576f980f3b3"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "d6a8ede386dae582be76dbb3bb2ebd4116bf35f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d60246e53778db6ee613377dd013ba4b264968/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d60246e53778db6ee613377dd013ba4b264968/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=62d60246e53778db6ee613377dd013ba4b264968", "patch": "@@ -14371,6 +14371,19 @@ enclosing_instantiation_of (tree otctx)\n \t\t  || instantiated_lambda_fn_p (tctx));\n        tctx = decl_function_context (tctx))\n     ++lambda_count;\n+\n+  if (!tctx)\n+    {\n+      /* Match using DECL_SOURCE_LOCATION, which is unique for all lambdas.\n+\n+\t For GCC 11 the above condition limits this to the previously failing\n+\t case where all enclosing functions are lambdas (95870).  FIXME.  */\n+      for (tree ofn = fn; ofn; ofn = decl_function_context (ofn))\n+\tif (DECL_SOURCE_LOCATION (ofn) == DECL_SOURCE_LOCATION (otctx))\n+\t  return ofn;\n+      gcc_unreachable ();\n+    }\n+\n   for (; fn; fn = decl_function_context (fn))\n     {\n       tree ofn = fn;"}, {"sha": "810ed5387198441fe0089788051ec2f6cd51b853", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nsdmi10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d60246e53778db6ee613377dd013ba4b264968/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d60246e53778db6ee613377dd013ba4b264968/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi10.C?ref=62d60246e53778db6ee613377dd013ba4b264968", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/95870\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> struct S {\n+  S();\n+  int b = []() -> int { enum E {}; return 1; }();\n+};\n+struct C : S<int> {\n+  C();\n+};\n+template <typename T> S<T>::S() = default;\n+C::C() {}"}]}