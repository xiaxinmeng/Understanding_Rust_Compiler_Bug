{"sha": "16fdb75f788f9fe3d26853188a4c186efd5aef44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmZGI3NWY3ODhmOWZlM2QyNjg1MzE4OGE0YzE4NmVmZDVhZWY0NA==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2012-10-08T16:45:21Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2012-10-08T16:45:21Z"}, "message": "predict.c (predict_loops): Predict for short-circuit conditions.\n\ngcc:\n\t2012-10-08  Dehao Chen  <dehao@google.com>\n\n\t* predict.c (predict_loops): Predict for short-circuit conditions.\n\t(predict_extra_loop_exits): New Function.\n\ntestsuite:\n\t2012-10-08  Dehao Chen  <dehao@google.com>\n\n\t* g++.dg/predict-loop-exit-1.C: New.\n\t* g++.dg/predict-loop-exit-2.C: New.\n\t* g++.dg/predict-loop-exit-3.C: New.\n\nFrom-SVN: r192215", "tree": {"sha": "675e200d78e6ed4df9b534e2184161059261b725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675e200d78e6ed4df9b534e2184161059261b725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16fdb75f788f9fe3d26853188a4c186efd5aef44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16fdb75f788f9fe3d26853188a4c186efd5aef44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16fdb75f788f9fe3d26853188a4c186efd5aef44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16fdb75f788f9fe3d26853188a4c186efd5aef44/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2512a443d6c09f42c24dca5dfd4173cdef39c3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2512a443d6c09f42c24dca5dfd4173cdef39c3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2512a443d6c09f42c24dca5dfd4173cdef39c3b1"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "14bdc37b009498d9e23717489fe69c43823a4400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -1,3 +1,8 @@\n+2012-10-08  Dehao Chen  <dehao@google.com>\n+\n+\t* predict.c (predict_loops): Predict for short-circuit conditions.\n+\t(predict_extra_loop_exits): New Function.\n+\n 2012-10-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* bitmap.h (bitmap_and_into): Update prototype."}, {"sha": "49173998c87efe9a1da722d1238af66132651067", "filename": "gcc/predict.c", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -1296,7 +1296,87 @@ predict_iv_comparison (struct loop *loop, basic_block bb,\n \tpredict_edge_def (then_edge, PRED_LOOP_IV_COMPARE_GUESS, NOT_TAKEN);\n     }\n }\n- \n+\n+/* Predict for extra loop exits that will lead to EXIT_EDGE. The extra loop\n+   exits are resulted from short-circuit conditions that will generate an\n+   if_tmp. E.g.:\n+\n+   if (foo() || global > 10)\n+     break;\n+\n+   This will be translated into:\n+\n+   BB3:\n+     loop header...\n+   BB4:\n+     if foo() goto BB6 else goto BB5\n+   BB5:\n+     if global > 10 goto BB6 else goto BB7\n+   BB6:\n+     goto BB7\n+   BB7:\n+     iftmp = (PHI 0(BB5), 1(BB6))\n+     if iftmp == 1 goto BB8 else goto BB3\n+   BB8:\n+     outside of the loop...\n+\n+   The edge BB7->BB8 is loop exit because BB8 is outside of the loop.\n+   From the dataflow, we can infer that BB4->BB6 and BB5->BB6 are also loop\n+   exits. This function takes BB7->BB8 as input, and finds out the extra loop\n+   exits to predict them using PRED_LOOP_EXIT.  */\n+\n+static void\n+predict_extra_loop_exits (edge exit_edge)\n+{\n+  unsigned i;\n+  bool check_value_one;\n+  gimple phi_stmt;\n+  tree cmp_rhs, cmp_lhs;\n+  gimple cmp_stmt = last_stmt (exit_edge->src);\n+\n+  if (!cmp_stmt || gimple_code (cmp_stmt) != GIMPLE_COND)\n+    return;\n+  cmp_rhs = gimple_cond_rhs (cmp_stmt);\n+  cmp_lhs = gimple_cond_lhs (cmp_stmt);\n+  if (!TREE_CONSTANT (cmp_rhs)\n+      || !(integer_zerop (cmp_rhs) || integer_onep (cmp_rhs)))\n+    return;\n+  if (TREE_CODE (cmp_lhs) != SSA_NAME)\n+    return;\n+\n+  /* If check_value_one is true, only the phi_args with value '1' will lead\n+     to loop exit. Otherwise, only the phi_args with value '0' will lead to\n+     loop exit.  */\n+  check_value_one = (((integer_onep (cmp_rhs))\n+\t\t    ^ (gimple_cond_code (cmp_stmt) == EQ_EXPR))\n+\t\t    ^ ((exit_edge->flags & EDGE_TRUE_VALUE) != 0));\n+\n+  phi_stmt = SSA_NAME_DEF_STMT (cmp_lhs);\n+  if (!phi_stmt || gimple_code (phi_stmt) != GIMPLE_PHI)\n+    return;\n+\n+  for (i = 0; i < gimple_phi_num_args (phi_stmt); i++)\n+    {\n+      edge e1;\n+      edge_iterator ei;\n+      tree val = gimple_phi_arg_def (phi_stmt, i);\n+      edge e = gimple_phi_arg_edge (phi_stmt, i);\n+\n+      if (!TREE_CONSTANT (val) || !(integer_zerop (val) || integer_onep (val)))\n+\tcontinue;\n+      if ((check_value_one ^ integer_onep (val)) == 1)\n+\tcontinue;\n+      if (EDGE_COUNT (e->src->succs) != 1)\n+\t{\n+\t  predict_paths_leading_to_edge (e, PRED_LOOP_EXIT, NOT_TAKEN);\n+\t  continue;\n+\t}\n+\n+      FOR_EACH_EDGE (e1, ei, e->src->preds)\n+\tpredict_paths_leading_to_edge (e1, PRED_LOOP_EXIT, NOT_TAKEN);\n+    }\n+}\n+\n /* Predict edge probabilities by exploiting loop structure.  */\n \n static void\n@@ -1332,6 +1412,8 @@ predict_loops (void)\n \t  int probability;\n \t  enum br_predictor predictor;\n \n+\t  predict_extra_loop_exits (ex);\n+\n \t  if (number_of_iterations_exit (loop, ex, &niter_desc, false))\n \t    niter = niter_desc.niter;\n \t  if (!niter || TREE_CODE (niter_desc.niter) != INTEGER_CST)"}, {"sha": "1345f72f6f73f614184fab78268ee16f2d91ec5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -1,3 +1,9 @@\n+2012-10-08  Dehao Chen  <dehao@google.com>\n+\n+\t* g++.dg/predict-loop-exit-1.C: New.\n+\t* g++.dg/predict-loop-exit-2.C: New.\n+\t* g++.dg/predict-loop-exit-3.C: New.\n+\n 2012-10-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/pr54445-1.c: Require tls_runtime, add tls options."}, {"sha": "2289552b38f4d2796e7a6c70b00a24db29e0e139", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int g;\n+int foo();\n+void test() {\n+  while (foo() && g < 10)\n+    g++;\n+  return;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 3 \"profile_estimate\"} } */\n+/* { dg-final { cleanup-tree-dump \"profile_estimate\" } } */"}, {"sha": "1a5880bdeb890a006f439f95cb046742d4c18b4b", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int g;\n+int foo();\n+void test() {\n+  while (foo() || g < 10)\n+    g++;\n+  return;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 2 \"profile_estimate\"} } */\n+/* { dg-final { cleanup-tree-dump \"profile_estimate\" } } */"}, {"sha": "9afc78ef91aaa7db1b868c498aaf35d431db7217", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16fdb75f788f9fe3d26853188a4c186efd5aef44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C?ref=16fdb75f788f9fe3d26853188a4c186efd5aef44", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int g;\n+int foo();\n+void test() {\n+  while (foo() && (g < 10 || g > 20))\n+    g++;\n+  return;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 3 \"profile_estimate\"} } */\n+/* { dg-final { cleanup-tree-dump \"profile_estimate\" } } */"}]}