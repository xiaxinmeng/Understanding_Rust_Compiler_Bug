{"sha": "04199738b48867d8c1d60e98578340047e3237da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxOTk3MzhiNDg4NjdkOGMxZDYwZTk4NTc4MzQwMDQ3ZTMyMzdkYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-02T06:57:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-02T06:57:12Z"}, "message": "tree-vect-stmts.c (vectorizable_store): Perform vector extracts via vectors if supported...\n\n2017-08-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_store): Perform vector extracts\n\tvia vectors if supported, integer extracts via punning if supported\n\tor otherwise vector extracts.\n\nFrom-SVN: r250813", "tree": {"sha": "905d24700ac5b7cbe04f6293de16e1be29143565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/905d24700ac5b7cbe04f6293de16e1be29143565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04199738b48867d8c1d60e98578340047e3237da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04199738b48867d8c1d60e98578340047e3237da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04199738b48867d8c1d60e98578340047e3237da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04199738b48867d8c1d60e98578340047e3237da/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "faacba284224c0aa058801117599250dda69ff2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04199738b48867d8c1d60e98578340047e3237da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04199738b48867d8c1d60e98578340047e3237da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04199738b48867d8c1d60e98578340047e3237da", "patch": "@@ -1,3 +1,9 @@\n+2017-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_store): Perform vector extracts\n+\tvia vectors if supported, integer extracts via punning if supported\n+\tor otherwise vector extracts.\n+\n 2017-08-02  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (bitmap_insert_into_set_1): Remove and inline"}, {"sha": "ee32c5671e292627eb845500acbae2dd66ac119d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04199738b48867d8c1d60e98578340047e3237da/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04199738b48867d8c1d60e98578340047e3237da/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=04199738b48867d8c1d60e98578340047e3237da", "patch": "@@ -6002,6 +6002,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       unsigned nstores = nunits;\n       unsigned lnel = 1;\n       tree ltype = elem_type;\n+      tree lvectype = vectype;\n       if (slp)\n \t{\n \t  if (group_size < nunits\n@@ -6010,13 +6011,53 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t      nstores = nunits / group_size;\n \t      lnel = group_size;\n \t      ltype = build_vector_type (elem_type, group_size);\n+\t      lvectype = vectype;\n+\n+\t      /* First check if vec_extract optab doesn't support extraction\n+\t\t of vector elts directly.  */\n+\t      machine_mode elmode = TYPE_MODE (elem_type);\n+\t      machine_mode vmode = mode_for_vector (elmode, group_size);\n+\t      if (! VECTOR_MODE_P (vmode)\n+\t\t  || (convert_optab_handler (vec_extract_optab,\n+\t\t\t\t\t     TYPE_MODE (vectype), vmode)\n+\t\t      == CODE_FOR_nothing))\n+\t\t{\n+\t\t  /* Try to avoid emitting an extract of vector elements\n+\t\t     by performing the extracts using an integer type of the\n+\t\t     same size, extracting from a vector of those and then\n+\t\t     re-interpreting it as the original vector type if\n+\t\t     supported.  */\n+\t\t  unsigned lsize\n+\t\t    = group_size * GET_MODE_BITSIZE (elmode);\n+\t\t  elmode = mode_for_size (lsize, MODE_INT, 0);\n+\t\t  vmode = mode_for_vector (elmode, nunits / group_size);\n+\t\t  /* If we can't construct such a vector fall back to\n+\t\t     element extracts from the original vector type and\n+\t\t     element size stores.  */\n+\t\t  if (VECTOR_MODE_P (vmode)\n+\t\t      && (convert_optab_handler (vec_extract_optab,\n+\t\t\t\t\t\t vmode, elmode)\n+\t\t\t  != CODE_FOR_nothing))\n+\t\t    {\n+\t\t      nstores = nunits / group_size;\n+\t\t      lnel = group_size;\n+\t\t      ltype = build_nonstandard_integer_type (lsize, 1);\n+\t\t      lvectype = build_vector_type (ltype, nstores);\n+\t\t    }\n+\t\t  /* Else fall back to vector extraction anyway.\n+\t\t     Fewer stores are more important than avoiding spilling\n+\t\t     of the vector we extract from.  Compared to the\n+\t\t     construction case in vectorizable_load no store-forwarding\n+\t\t     issue exists here for reasonable archs.  */\n+\t\t}\n \t    }\n \t  else if (group_size >= nunits\n \t\t   && group_size % nunits == 0)\n \t    {\n \t      nstores = 1;\n \t      lnel = nunits;\n \t      ltype = vectype;\n+\t      lvectype = vectype;\n \t    }\n \t  ltype = build_aligned_type (ltype, TYPE_ALIGN (elem_type));\n \t  ncopies = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n@@ -6087,7 +6128,16 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t      vec_oprnd = vect_get_vec_def_for_stmt_copy (dt, vec_oprnd);\n \t\t    }\n \t\t}\n-\n+\t      /* Pun the vector to extract from if necessary.  */\n+\t      if (lvectype != vectype)\n+\t\t{\n+\t\t  tree tem = make_ssa_name (lvectype);\n+\t\t  gimple *pun\n+\t\t    = gimple_build_assign (tem, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t\tlvectype, vec_oprnd));\n+\t\t  vect_finish_stmt_generation (stmt, pun, gsi);\n+\t\t  vec_oprnd = tem;\n+\t\t}\n \t      for (i = 0; i < nstores; i++)\n \t\t{\n \t\t  tree newref, newoff;"}]}