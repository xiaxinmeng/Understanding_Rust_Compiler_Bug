{"sha": "7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiZjU2NzA2M2I4NjI4MTUxNTQ1YzQyYzJhZGEzY2UyZDZkOWEzYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:47:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:47:57Z"}, "message": "(memop_valid): Memory indirection now valid.\n\n(nonindirect_operand): Remove.\n(print_operand): Fix 'J' output modifier.\n\nFrom-SVN: r13964", "tree": {"sha": "e179002e27928e7427caa6043be70a0540e25758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e179002e27928e7427caa6043be70a0540e25758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbf567063b8628151545c42c2ada3ce2d6d9a3b/comments", "author": null, "committer": null, "parents": [{"sha": "fd073021172d998008743739661bb570a174f76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd073021172d998008743739661bb570a174f76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd073021172d998008743739661bb570a174f76e"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "26a30da34dc5c128c3675795992f55d43613773a", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbf567063b8628151545c42c2ada3ce2d6d9a3b/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbf567063b8628151545c42c2ada3ce2d6d9a3b/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "patch": "@@ -217,26 +217,35 @@ mod_regno_adjust (instr, op)\n }\n \n \n-/* Auxiliary to `nonindirect_operand':\n-   Check if op is a valid memory operand for 1750A arith./logic (non-move)\n-   instructions. */\n+/* Check if op is a valid memory operand for 1750A Load/Store instructions\n+   (memory indirection permitted.)  */\n+\n int\n memop_valid (op)\n      rtx op;\n {\n-  if (GET_MODE (op) != Pmode && GET_MODE (op) != VOIDmode)\n+  static int recurred = 0;\n+  int valid;\n+\n+  if (GET_MODE (op) != Pmode && GET_MODE (op) != VOIDmode\n+      && GET_MODE (op) != QImode)\n     return 0;\n   switch (GET_CODE (op))\n     {\n     case MEM:\n+      if (!recurred && GET_CODE (XEXP (op, 0)) == REG)\n+\treturn 1;\n     case MINUS:\n     case MULT:\n     case DIV:\n       return 0;\n     case PLUS:\n-      if (!memop_valid (XEXP (op, 0)))\n-\treturn 0;\n-      return memop_valid (XEXP (op, 1));\n+      recurred = 1;\n+      valid = memop_valid (XEXP (op, 0));\n+      if (valid)\n+\tvalid = memop_valid (XEXP (op, 1));\n+       recurred = 0;\n+       return valid;\n     case REG:\n       if (REGNO (op) > 0)\n \treturn 1;\n@@ -252,27 +261,6 @@ memop_valid (op)\n     }\n }\n \n-/* extra predicate for recog: */\n-int\n-nonindirect_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  int retval;\n-\n-  switch (GET_CODE (op))\n-    {\n-    case MEM:\n-      retval = memop_valid (XEXP (op, 0));\n-      return retval;\n-    case REG:\n-      return 1;\n-    default:\n-      if (!CONSTANT_P (op))\n-\treturn 0;\n-    }\n-  return 1;\n-}\n \n /* predicate for the MOV instruction: */\n int\n@@ -544,7 +532,7 @@ print_operand (file, x, letter)\n     case CONST_INT:\n       if (letter == 'J')\n \tfprintf (file, \"%d\", -INTVAL (x));\n-      if (letter == 'b')\n+      else if (letter == 'b')\n         fprintf (file, \"%d\", which_bit (INTVAL (x)));\n       else if (letter == 'B')\n         fprintf (file, \"%d\", which_bit (~INTVAL (x)));"}]}