{"sha": "7dbc7ad524a540e34ce25d120d0968f36c571bbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiYzdhZDUyNGE1NDBlMzRjZTI1ZDEyMGQwOTY4ZjM2YzU3MWJiYg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-30T18:58:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-30T18:59:53Z"}, "message": "Avoid assuming a VLA access specification string contains a closing bracket (PR middle-end/97189).\n\nResolves:\nPR middle-end/97189 - ICE on redeclaration of a function with VLA argument and attribute access\n\ngcc/ChangeLog:\n\n\tPR middle-end/97189\n\t* attribs.c (attr_access::array_as_string): Avoid assuming a VLA\n\taccess specification string contains a closing bracket.\n\ngcc/c-family/ChangeLog:\n\n\tPR middle-end/97189\n\t* c-attribs.c (append_access_attr): Use the function declaration\n\tlocation for a warning about an attribute access argument.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/97189\n\t* gcc.dg/attr-access-2.c: Adjust caret location.\n\t* gcc.dg/Wvla-parameter-6.c: New test.\n\t* gcc.dg/Wvla-parameter-7.c: New test.", "tree": {"sha": "245770a1d21bc0447338a70798ca0796c1bebf59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245770a1d21bc0447338a70798ca0796c1bebf59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dbc7ad524a540e34ce25d120d0968f36c571bbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbc7ad524a540e34ce25d120d0968f36c571bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbc7ad524a540e34ce25d120d0968f36c571bbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbc7ad524a540e34ce25d120d0968f36c571bbb/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e808f3fdfa8f31066da19011b55acb8c0446c72d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e808f3fdfa8f31066da19011b55acb8c0446c72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e808f3fdfa8f31066da19011b55acb8c0446c72d"}], "stats": {"total": 102, "additions": 86, "deletions": 16}, "files": [{"sha": "94b9e02699fbdad4e448c84dad6bcc445c6004c7", "filename": "gcc/attribs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=7dbc7ad524a540e34ce25d120d0968f36c571bbb", "patch": "@@ -2270,11 +2270,11 @@ attr_access::array_as_string (tree type) const\n \t     bound is nonconstant and whose access string has \"$]\" in it)\n \t     extract the bound expression from SIZE.  */\n \t  const char *p = end;\n-\t  for ( ; *p-- != ']'; );\n+\t  for ( ; p != str && *p-- != ']'; );\n \t  if (*p == '$')\n \t    index_type = build_index_type (TREE_VALUE (size));\n \t}\n-      else  if (minsize)\n+      else if (minsize)\n \tindex_type = build_index_type (size_int (minsize - 1));\n \n       tree arat = NULL_TREE;"}, {"sha": "c779d13f02308d85850ceb3bc8545b2e0a33c92a", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=7dbc7ad524a540e34ce25d120d0968f36c571bbb", "patch": "@@ -4151,18 +4151,12 @@ append_access_attr (tree node[3], tree attrs, const char *attrstr,\n \t\t\t\t \"missing in previous designation\",\n \t\t\t\t attrstr);\n \t  else if (newa->internal_p || cura->internal_p)\n-\t    {\n-\t      /* Mismatch in the value of the size argument and a VLA\n-\t\t bound.  */\n-\t      location_t argloc = curloc;\n-\t      if (tree arg = get_argument (node[2], newa->sizarg))\n-\t\targloc = DECL_SOURCE_LOCATION (arg);\n-\t      warned = warning_at (argloc, OPT_Wattributes,\n-\t\t\t\t   \"attribute %qs positional argument 2 \"\n-\t\t\t\t   \"conflicts with previous designation \"\n-\t\t\t\t   \"by argument %u\",\n-\t\t\t\t   attrstr, cura->sizarg + 1);\n-\t    }\n+\t    /* Mismatch in the value of the size argument and a VLA bound.  */\n+\t    warned = warning_at (curloc, OPT_Wattributes,\n+\t\t\t\t \"attribute %qs positional argument 2 \"\n+\t\t\t\t \"conflicts with previous designation \"\n+\t\t\t\t \"by argument %u\",\n+\t\t\t\t attrstr, cura->sizarg + 1);\n \t  else\n \t    /* Mismatch in the value of the size argument between two\n \t       explicit access attributes.  */"}, {"sha": "268aeec92518afa4e83b4c4c9db042e38c940406", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-6.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-6.c?ref=7dbc7ad524a540e34ce25d120d0968f36c571bbb", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/97189 - ICE on redeclaration of a function with VLA argument\n+   and attribute access\n+   Also verify the right arguments are underlined in the notes.\n+   { dg-do compile }\n+   { dg-options \"-Wall -fdiagnostics-show-caret\" } */\n+\n+#define RW(...) __attribute__ ((access (read_write, __VA_ARGS__)))\n+\n+RW (2, 3) void f1 (int n, int[n], int);\n+/* { dg-warning \"attribute 'access \\\\(read_write, 2, 3\\\\)' positional argument 2 conflicts with previous designation by argument 3\" \"warning\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ RW (2, 3) void f1 (int n, int[n], int);\n+                ^~\n+   { dg-end-multiline-output \"\" }\n+   { dg-message \"designating the bound of variable length array argument 2\" \"note\" { target *-*-* } .-6 }\n+   { dg-begin-multiline-output \"\" }\n+ RW (2, 3) void f1 (int n, int[n], int);\n+                    ~~~~^  ~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+RW (2)    void f2 (int, int[*], int);\n+/* { dg-message \"previously declared as a variable length array 'int\\\\\\[\\\\\\*]'\" \"note\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ RW (2, 3) void f2 (int, int[], int);\n+                         ^~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+RW (2, 3) void f2 (int, int[], int);\n+/* { dg-warning \"argument 2 of type 'int\\\\\\[]' declared as an ordinary array\" \"warning\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ RW (2)    void f2 (int, int[*], int);\n+                         ^~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "14ce75f3e2ec8adc4a683367252aca35bb01be7b", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-7.c?ref=7dbc7ad524a540e34ce25d120d0968f36c571bbb", "patch": "@@ -0,0 +1,36 @@\n+/* PR middle-end/97189 - ICE on redeclaration of a function with VLA argument\n+   and attribute access\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define RW(...) __attribute__ ((access (read_write, __VA_ARGS__)))\n+\n+RW (2, 3) void f1 (int n, int[n], int);\n+/* { dg-warning \"attribute 'access \\\\(read_write, 2, 3\\\\)' positional argument 2 conflicts with previous designation by argument 3\" \"warning\" { target *-*-* } .-1 }\n+   { dg-message \"designating the bound of variable length array argument 2\" \"note\" { target *-*-* } .-2 } */\n+\n+void call_f1 (int *p)\n+{\n+  /* Verify that a warning is issued.  Ideally, it seems the VLA bound\n+     should take precedence over the attribute and the warning would\n+     reference argument 1 but since the conflict in the redeclarations\n+     of the function is already diagnosed don't test that (and let it\n+     be acceptable for this warning to reference argument 3).  */\n+  f1 (-1, p, -1);\n+  // { dg-warning \"argument \\\\d value -1 is negative\" \"warning\" { target *-*-* } .-1 }\n+}\n+\n+RW (2)    void f2 (int, int[*], int);\n+// { dg-message \"previously declared as a variable length array 'int\\\\\\[\\\\\\*]'\" \"note\" { target *-*-* } .-1 }\n+RW (2, 3) void f2 (int, int[], int);\n+// { dg-warning \"argument 2 of type 'int\\\\\\[]' declared as an ordinary array\" \"warning\" { target *-*-* } .-1 }\n+\n+void call_f2 (int *p)\n+{\n+  f2 (-1, p, 0);\n+\n+  /* Verify that the attribute access on the redeclaration of f2() takes\n+     precedence over the one on the first declaration.  */\n+  f2 (0, p, -1);\n+  // { dg-warning \"argument 3 value -1 is negative\" \"warning\" { target *-*-* } .-1 }\n+}"}, {"sha": "76baddffc9f2df3ded5b4ca5a4c7a7a7a8fb6cf1", "filename": "gcc/testsuite/gcc.dg/attr-access-2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc7ad524a540e34ce25d120d0968f36c571bbb/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-2.c?ref=7dbc7ad524a540e34ce25d120d0968f36c571bbb", "patch": "@@ -112,5 +112,11 @@ typedef void G1 (int n, int[n], int);\n \n G1 g1;\n \n-RW (2, 3) void g1 (int n, int[n], int);     // { dg-warning \"24: attribute 'access *\\\\\\(read_write, 2, 3\\\\\\)' positional argument 2 conflicts with previous designation by argument 3\" }\n-// { dg-message \"designating the bound of variable length array argument 2\" \"note\" { target *-*-* } .-1 }\n+/* The warning is about the attribute positional argument 2 which refers\n+   to the last function argument.  Ideally, the caret would be under\n+   the corresponding function argument, i.e., the last one here) but\n+   that location isn't available yet.  Verify that the caret doesn't\n+   point to function argument 1 which is the VLA bound (that's what\n+   the caret in the note points to).  */\n+RW (2, 3) void g1 (int n, int[n], int);     // { dg-warning \"16: attribute 'access *\\\\\\(read_write, 2, 3\\\\\\)' positional argument 2 conflicts with previous designation by argument 3\" }\n+// { dg-message \"24:designating the bound of variable length array argument 2\" \"note\" { target *-*-* } .-1 }"}]}