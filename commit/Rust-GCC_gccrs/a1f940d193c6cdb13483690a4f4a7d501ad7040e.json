{"sha": "a1f940d193c6cdb13483690a4f4a7d501ad7040e", "node_id": "C_kwDOANBUbNoAKGExZjk0MGQxOTNjNmNkYjEzNDgzNjkwYTRmNGE3ZDUwMWFkNzA0MGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-01T11:35:18Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-14T16:15:50Z"}, "message": "hir: Add ExportedMacro node and handling.\n\nThis HIR node represents macros which should be exported into the final\nRust metadata files. Because our metadata exporter operates on the HIR,\nwhile macros are inherently tied to the AST, we need a way to propagate\nexported macros up until the metadata export pass on the HIR. Hence the\nexistence of this class, whose sole purpose is to keep enough information\nfor the metadata exporter to retrieve the original AST::MacroRulesDefinition.\nHandling for actually exporting these macros will come later.\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-item.h (class ExportedMacro): Add new ExportedMacro class.\n\t* hir/tree/rust-hir.cc (ExportedMacro::accept_vis): New function.\n\t(ExportedMacro::get_locus): Likewise.\n\t(ExportedMacro::get_item_kind): Likewise.\n\t(ExportedMacro::clone_item_impl): Likewise.\n\t* hir/tree/rust-hir-full-decls.h (class ExportedMacro): Forward declare class.\n\t* backend/rust-compile-item.h: Add visitor for ExportedMacro.\n\t* backend/rust-compile-stmt.h: Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.cc (PrivacyReporter::visit): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.h: Likewise.\n\t* checks/errors/privacy/rust-pub-restricted-visitor.cc (PubRestrictedVisitor::visit):\n\tLikewise.\n\t* checks/errors/privacy/rust-pub-restricted-visitor.h: Likewise.\n\t* checks/errors/privacy/rust-reachability.cc (ReachabilityVisitor::visit): Likewise.\n\t* checks/errors/privacy/rust-reachability.h: Likewise.\n\t* checks/errors/privacy/rust-visibility-resolver.cc (VisibilityResolver::visit): Likewise.\n\t* checks/errors/privacy/rust-visibility-resolver.h: Likewise.\n\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n\t* checks/errors/rust-const-checker.h: Likewise.\n\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.h: Likewise.\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Likewise.\n\t* hir/rust-ast-lower-item.h: Likewise.\n\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n\t* hir/rust-hir-dump.h: Likewise.\n\t* hir/tree/rust-hir-visitor.h: Likewise.\n\t* metadata/rust-export-metadata.cc: Likewise.\n\t* typecheck/rust-hir-type-check-item.h: Likewise.\n\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Likewise.\n\t* typecheck/rust-hir-type-check-stmt.h: Likewise.\n\t* typecheck/rust-tycheck-dump.h: Likewise.\n\t* hir/tree/rust-hir.h: Add new ItemKind::MacroExport variant.\n\t* util/rust-attributes.cc: Add #[macro_export] attribute.", "tree": {"sha": "5bdb29cf2a128ae959d0b8d230d534563c487b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bdb29cf2a128ae959d0b8d230d534563c487b88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1f940d193c6cdb13483690a4f4a7d501ad7040e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f940d193c6cdb13483690a4f4a7d501ad7040e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f940d193c6cdb13483690a4f4a7d501ad7040e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f940d193c6cdb13483690a4f4a7d501ad7040e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43590461e0033ff677ba4f3bf90cd289cf0b2518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43590461e0033ff677ba4f3bf90cd289cf0b2518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43590461e0033ff677ba4f3bf90cd289cf0b2518"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "333e55490cedd086c693a6f79a4aa437cc76c47d", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -70,6 +70,7 @@ class CompileItem : private HIRCompileBase, protected HIR::HIRStmtVisitor\n   void visit (HIR::LetStmt &) override {}\n   void visit (HIR::ExprStmtWithoutBlock &) override {}\n   void visit (HIR::ExprStmtWithBlock &) override {}\n+  void visit (HIR::ExportedMacro &) override {}\n \n protected:\n   CompileItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)"}, {"sha": "3d2f3ddb7460ab16b3d38ee5ec38a175c898128e", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -56,6 +56,7 @@ class CompileStmt : private HIRCompileBase, protected HIR::HIRStmtVisitor\n   void visit (HIR::ImplBlock &) override {}\n   void visit (HIR::ExternBlock &) override {}\n   void visit (HIR::EmptyStmt &) override {}\n+  void visit (HIR::ExportedMacro &) override {}\n \n private:\n   CompileStmt (Context *ctx);"}, {"sha": "a435d6dcade1802c1c775ae05a6d50608c65711c", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -761,5 +761,9 @@ PrivacyReporter::visit (HIR::ExprStmtWithBlock &stmt)\n   stmt.get_expr ()->accept_vis (*this);\n }\n \n+void\n+PrivacyReporter::visit (HIR::ExportedMacro &)\n+{}\n+\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "695a7e88df0315d42fdad37a000c18a7b95b1b3d", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -157,6 +157,7 @@ types\n   virtual void visit (HIR::LetStmt &stmt);\n   virtual void visit (HIR::ExprStmtWithoutBlock &stmt);\n   virtual void visit (HIR::ExprStmtWithBlock &stmt);\n+  virtual void visit (HIR::ExportedMacro &macro);\n \n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;"}, {"sha": "4dbd44ebb92d7d605acb8979cd3fa688d4dccad3", "filename": "gcc/rust/checks/errors/privacy/rust-pub-restricted-visitor.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -178,5 +178,12 @@ PubRestrictedVisitor::visit (HIR::ExternBlock &block)\n \t\t\tblock.get_locus ());\n }\n \n+void\n+PubRestrictedVisitor::visit (HIR::ExportedMacro &macro)\n+{\n+  is_restriction_valid (macro.get_mappings ().get_nodeid (),\n+\t\t\tmacro.get_locus ());\n+}\n+\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "d8419e2921b7480d18983674cfc13d94f4225035", "filename": "gcc/rust/checks/errors/privacy/rust-pub-restricted-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -103,6 +103,7 @@ class PubRestrictedVisitor : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n+  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   /* Stack of ancestor modules visited by this visitor */"}, {"sha": "d75e2a1f49a5f323f48d9c5372029622e638cbb8", "filename": "gcc/rust/checks/errors/privacy/rust-reachability.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -230,6 +230,10 @@ void\n ReachabilityVisitor::visit (HIR::ExternBlock &)\n {}\n \n+void\n+ReachabilityVisitor::visit (HIR::ExportedMacro &macro)\n+{}\n+\n // FIXME: How can we visit Blocks in the current configuration? Have a full\n // visitor?\n } // namespace Privacy"}, {"sha": "80fb1d4899c42105e17ddc786eacb6fc03810ab2", "filename": "gcc/rust/checks/errors/privacy/rust-reachability.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -75,6 +75,7 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n+  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   ReachLevel current_level;"}, {"sha": "72a3a5f88290a1231306306e122edac9f3cd5449", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -241,5 +241,11 @@ void\n VisibilityResolver::visit (HIR::ExternBlock &)\n {}\n \n+void\n+VisibilityResolver::visit (HIR::ExportedMacro &macro)\n+{\n+  resolve_and_update (&macro);\n+}\n+\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "9ea8ebd5c4f6a789c3a9be92df261001189e5f1f", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -90,6 +90,7 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n+  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   Analysis::Mappings &mappings;"}, {"sha": "12bb62a5c4c26659be33876ec556542100e8572e", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -927,5 +927,9 @@ void\n ConstChecker::visit (BareFunctionType &)\n {}\n \n+void\n+ConstChecker::visit (ExportedMacro &)\n+{}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "69628411d4cdc063b7a5e6c0f08351915f2e8e3e", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -205,6 +205,7 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (SliceType &type) override;\n   virtual void visit (InferredType &type) override;\n   virtual void visit (BareFunctionType &type) override;\n+  virtual void visit (ExportedMacro &macro) override;\n };\n \n } // namespace HIR"}, {"sha": "4374a0e2c1f857996667f5effafa2ca59f475d4d", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -984,5 +984,9 @@ void\n UnsafeChecker::visit (BareFunctionType &)\n {}\n \n+void\n+UnsafeChecker::visit (ExportedMacro &)\n+{}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "8f3a87f339594dc3201c82d0fbe85f8ca27040cc", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -187,6 +187,7 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (SliceType &type) override;\n   virtual void visit (InferredType &type) override;\n   virtual void visit (BareFunctionType &type) override;\n+  virtual void visit (ExportedMacro &macro) override;\n };\n \n } // namespace HIR"}, {"sha": "8c265e7f31c259080a001dbf2216ca775dd251b5", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -691,6 +691,28 @@ ASTLoweringItem::visit (AST::ExternBlock &extern_block)\n   translated = lower_extern_block (extern_block);\n }\n \n+void\n+ASTLoweringItem::visit (AST::MacroRulesDefinition &def)\n+{\n+  bool is_export = false;\n+  for (const auto &attr : def.get_outer_attrs ())\n+    if (attr.get_path ().as_string () == \"macro_export\")\n+      is_export = true;\n+\n+  if (is_export)\n+    {\n+      auto crate_num = mappings->get_current_crate ();\n+      Analysis::NodeMapping mapping (crate_num, def.get_node_id (),\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     mappings->get_next_localdef_id (\n+\t\t\t\t       crate_num));\n+      auto locus = def.get_locus ();\n+\n+      translated\n+\t= new HIR::ExportedMacro (mapping, def.get_outer_attrs (), locus);\n+    }\n+}\n+\n HIR::SimplePath\n ASTLoweringSimplePath::translate (const AST::SimplePath &path)\n {"}, {"sha": "f059c0568a7e927bc785188d3e68fe9d8b82f10a", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -56,6 +56,7 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Trait &trait) override;\n   void visit (AST::TraitImpl &impl_block) override;\n   void visit (AST::ExternBlock &extern_block) override;\n+  void visit (AST::MacroRulesDefinition &macro) override;\n \n private:\n   ASTLoweringItem () : translated (nullptr) {}"}, {"sha": "a7aa16a3b0d540f45eaef29cd603407d0a970a56", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -657,5 +657,8 @@ Dump::visit (InferredType &)\n void\n Dump::visit (BareFunctionType &)\n {}\n+void\n+Dump::visit (ExportedMacro &)\n+{}\n } // namespace HIR\n } // namespace Rust"}, {"sha": "145a6a1ee72086a5e0eca8cb4f9eb9ca3375662d", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -184,6 +184,7 @@ class Dump : public HIRFullVisitor\n   virtual void visit (SliceType &) override;\n   virtual void visit (InferredType &) override;\n   virtual void visit (BareFunctionType &) override;\n+  virtual void visit (ExportedMacro &) override;\n };\n \n } // namespace HIR"}, {"sha": "e49888c67c392a3e44e03d31f2229e8c9fbd7dcc", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -35,6 +35,9 @@ class Lifetime;\n class GenericParam;\n class LifetimeParam;\n \n+// FIXME: ARTHUR: Move this somewhere else\n+class ExportedMacro;\n+\n class TraitItem;\n class ImplItem;\n struct Crate;"}, {"sha": "7a2a39fe771e5c6e06b76afe04cb07e8f1a6cc12", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -3224,6 +3224,27 @@ class ExternBlock : public VisItem\n   }*/\n };\n \n+class ExportedMacro : public VisItem\n+{\n+  Location locus;\n+\n+public:\n+  ExportedMacro (Analysis::NodeMapping mapping, AST::AttrVec outer_attrs,\n+\t\t Location locus)\n+    : VisItem (mapping, Visibility (Visibility::PUBLIC),\n+\t       std::move (outer_attrs)),\n+      locus (locus)\n+  {}\n+\n+  virtual Location get_locus () const override;\n+  virtual ItemKind get_item_kind () const override;\n+  virtual ExportedMacro *clone_item_impl () const override;\n+\n+  void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "037aa01ecab64cdedad3e7eb4de71b04a5d63e84", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -157,6 +157,7 @@ class HIRFullVisitor\n   virtual void visit (SliceType &type) = 0;\n   virtual void visit (InferredType &type) = 0;\n   virtual void visit (BareFunctionType &type) = 0;\n+  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRFullVisitorBase : public HIRFullVisitor\n@@ -311,6 +312,7 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (SliceType &) override {}\n   virtual void visit (InferredType &) override {}\n   virtual void visit (BareFunctionType &) override {}\n+  virtual void visit (ExportedMacro &) override {}\n };\n \n class HIRExternalItemVisitor\n@@ -345,6 +347,7 @@ class HIRVisItemVisitor\n   virtual void visit (Trait &trait) = 0;\n   virtual void visit (ImplBlock &impl) = 0;\n   virtual void visit (ExternBlock &block) = 0;\n+  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRImplVisitor\n@@ -404,6 +407,7 @@ class HIRStmtVisitor\n   virtual void visit (LetStmt &stmt) = 0;\n   virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n   virtual void visit (ExprStmtWithBlock &stmt) = 0;\n+  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRExpressionVisitor"}, {"sha": "4aa9d7e822765c42ef2904357d4aae0ca5a9a466", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -5243,5 +5243,41 @@ void\n ConstGenericParam::accept_vis (HIRFullVisitor &)\n {}\n \n+void\n+ExportedMacro::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExportedMacro::accept_vis (HIRFullVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExportedMacro::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+Location\n+ExportedMacro::get_locus () const\n+{\n+  return locus;\n+}\n+\n+Item::ItemKind\n+ExportedMacro::get_item_kind () const\n+{\n+  return ItemKind::MacroExport;\n+}\n+\n+ExportedMacro *\n+ExportedMacro::clone_item_impl () const\n+{\n+  return new ExportedMacro (*this);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "6d5b755029fb5d87a8edb0abf9c3d6547e168dfe", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -191,6 +191,7 @@ class Item : public Stmt\n     Trait,\n     Impl,\n     Module,\n+    MacroExport,\n   };\n \n   virtual ItemKind get_item_kind () const = 0;"}, {"sha": "dc6e559ce1eea3b4e09cb4343f449804b28b4f3a", "filename": "gcc/rust/metadata/rust-export-metadata.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -169,6 +169,7 @@ class ExportVisItems : public HIR::HIRVisItemVisitor\n   void visit (HIR::StaticItem &) override {}\n   void visit (HIR::ImplBlock &) override {}\n   void visit (HIR::ExternBlock &) override {}\n+  void visit (HIR::ExportedMacro &) override {}\n \n   void visit (HIR::Trait &trait) override { ctx.emit_trait (trait); }\n "}, {"sha": "437a3d377e4235d1a53317742a12d712b4ae1097", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -50,6 +50,7 @@ class TypeCheckItem : private TypeCheckBase, private HIR::HIRVisItemVisitor\n   // nothing to do\n   void visit (HIR::ExternCrate &) override {}\n   void visit (HIR::UseDeclaration &) override {}\n+  void visit (HIR::ExportedMacro &) override {}\n \n protected:\n   std::vector<TyTy::SubstitutionParamMapping>"}, {"sha": "c0a7f09486a3973ac71b1ef7600aecb1a299ae93", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -148,6 +148,10 @@ TypeCheckStmt::visit (HIR::QualifiedPathInType &path)\n   infered = TypeCheckType::Resolve (&path);\n }\n \n+void\n+TypeCheckStmt::visit (HIR::ExportedMacro &path)\n+{}\n+\n void\n TypeCheckStmt::visit (HIR::TupleStruct &struct_decl)\n {"}, {"sha": "7331b2a92fc70b8238759039418a041ffed0b491", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -47,6 +47,7 @@ class TypeCheckStmt : private TypeCheckBase, private HIR::HIRStmtVisitor\n   void visit (HIR::ImplBlock &impl) override;\n   void visit (HIR::TypePath &path) override;\n   void visit (HIR::QualifiedPathInType &path) override;\n+  void visit (HIR::ExportedMacro &path) override;\n \n   // FIXME\n   // this seems like it should not be part of this visitor"}, {"sha": "19a52dd0022ae817dfb0e54c8e8a4bd549cc507d", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -196,6 +196,8 @@ class TypeResolverDump : private TypeCheckBase, private HIR::HIRFullVisitorBase\n     dump += \"ctor: \" + type_string (expr.get_mappings ());\n   }\n \n+  void visit (HIR::ExportedMacro &) override {}\n+\n protected:\n   std::string type_string (const Analysis::NodeMapping &mappings)\n   {"}, {"sha": "2573ec9b10f36bb00e4804743d754ee4ab4b9d5a", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f940d193c6cdb13483690a4f4a7d501ad7040e/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=a1f940d193c6cdb13483690a4f4a7d501ad7040e", "patch": "@@ -41,6 +41,7 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"repr\", CODE_GENERATION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n+     {\"macro_export\", CODE_GENERATION}, // FIXME: And NAME_RESOLUTION as well\n      // FIXME: This is not implemented yet, see\n      // https://github.com/Rust-GCC/gccrs/issues/1475\n      {\"target_feature\", CODE_GENERATION},"}]}