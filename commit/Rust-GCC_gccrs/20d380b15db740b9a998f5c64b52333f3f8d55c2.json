{"sha": "20d380b15db740b9a998f5c64b52333f3f8d55c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkMzgwYjE1ZGI3NDBiOWE5OThmNWM2NGI1MjMzM2YzZjhkNTVjMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-18T23:50:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-18T23:50:58Z"}, "message": "c-common.c (STD_C9L, ADJ_STD): Define.\n\n\t* c-common.c (STD_C9L, ADJ_STD): Define.\n\t(printf_length_specs, scanf_length_specs): Mark \"ll\" as standard\n\tSTD_C9L.\n\t(T99_LL): Rename to T9L_LL.\n\t(T99_ULL): Rename to T9L_ULL.\n\t(print_char_table, scan_char_table): Use T9L_LL and T9L_ULL\n\tinstead of T99_LL and T99_ULL.\n\t(check_format_info_main): Use ADJ_STD on all format standard\n\tversions being compared.\n\t* c-common.h: Declare warn_long_long.\n\t* c-tree.h: Don't declare warn_long_long.\n\ncp:\n\t* cp-tree.h: Don't declare warn_long_long.\n\ntestsuite:\n\t* gcc.dg/format-warnll-1.c: New test.\n\nFrom-SVN: r38369", "tree": {"sha": "833e6694e53e2262c29a25430e076b0022d4b539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/833e6694e53e2262c29a25430e076b0022d4b539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20d380b15db740b9a998f5c64b52333f3f8d55c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d380b15db740b9a998f5c64b52333f3f8d55c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d380b15db740b9a998f5c64b52333f3f8d55c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d380b15db740b9a998f5c64b52333f3f8d55c2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ef2bf880b8c33ac444c6fdf4e6afc2852ff19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ef2bf880b8c33ac444c6fdf4e6afc2852ff19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ef2bf880b8c33ac444c6fdf4e6afc2852ff19b"}], "stats": {"total": 127, "additions": 99, "deletions": 28}, "files": [{"sha": "c593d1e598b20d24804980f8dfe77b08f05b1ce9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -1,3 +1,17 @@\n+2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (STD_C9L, ADJ_STD): Define.\n+\t(printf_length_specs, scanf_length_specs): Mark \"ll\" as standard\n+\tSTD_C9L.\n+\t(T99_LL): Rename to T9L_LL.\n+\t(T99_ULL): Rename to T9L_ULL.\n+\t(print_char_table, scan_char_table): Use T9L_LL and T9L_ULL\n+\tinstead of T99_LL and T99_ULL.\n+\t(check_format_info_main): Use ADJ_STD on all format standard\n+\tversions being compared.\n+\t* c-common.h: Declare warn_long_long.\n+\t* c-tree.h: Don't declare warn_long_long.\n+\n 2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* COPYING: Update to current"}, {"sha": "a1970e2cd0c210d0802a5ff468eeec255d9cc480", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -1316,6 +1316,7 @@ enum format_std_version\n {\n   STD_C89,\n   STD_C94,\n+  STD_C9L, /* C99, but treat as C89 if -Wno-long-long.  */\n   STD_C99,\n   STD_EXT\n };\n@@ -1337,6 +1338,11 @@ enum format_std_version\n \t\t\t\t : ((FEATURE_VER) == STD_EXT\t\\\n \t\t\t\t    ? \"ISO C\"\t\t\t\\\n \t\t\t\t    : \"ISO C89\"))\n+/* Adjust a C standard version, which may be STD_C9L, to account for\n+   -Wno-long-long.  Returns other standard versions unchanged.  */\n+#define ADJ_STD(VER)\t\t((int)((VER) == STD_C9L\t\t\t      \\\n+\t\t\t\t       ? (warn_long_long ? STD_C99 : STD_C89) \\\n+\t\t\t\t       : (VER)))\n \n /* Flags that may apply to a particular kind of format checked by GCC.  */\n enum\n@@ -1548,7 +1554,7 @@ typedef struct format_wanted_type\n static const format_length_info printf_length_specs[] =\n {\n   { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C99 },\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n   { \"q\", FMT_LEN_ll, STD_EXT, NULL, 0, 0 },\n   { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n   { \"z\", FMT_LEN_z, STD_C99, NULL, 0, 0 },\n@@ -1563,7 +1569,7 @@ static const format_length_info printf_length_specs[] =\n static const format_length_info scanf_length_specs[] =\n {\n   { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C99 },\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n   { \"q\", FMT_LEN_ll, STD_EXT, NULL, 0, 0 },\n   { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n   { \"z\", FMT_LEN_z, STD_C99, NULL, 0, 0 },\n@@ -1649,7 +1655,7 @@ static const format_flag_pair strftime_flag_pairs[] =\n #define T_L\t&long_integer_type_node\n #define T89_L\t{ STD_C89, NULL, T_L }\n #define T_LL\t&long_long_integer_type_node\n-#define T99_LL\t{ STD_C99, NULL, T_LL }\n+#define T9L_LL\t{ STD_C9L, NULL, T_LL }\n #define TEX_LL\t{ STD_EXT, NULL, T_LL }\n #define T_S\t&short_integer_type_node\n #define T89_S\t{ STD_C89, NULL, T_S }\n@@ -1659,7 +1665,7 @@ static const format_flag_pair strftime_flag_pairs[] =\n #define T_UL\t&long_unsigned_type_node\n #define T89_UL\t{ STD_C89, NULL, T_UL }\n #define T_ULL\t&long_long_unsigned_type_node\n-#define T99_ULL\t{ STD_C99, NULL, T_ULL }\n+#define T9L_ULL\t{ STD_C9L, NULL, T_ULL }\n #define TEX_ULL\t{ STD_EXT, NULL, T_ULL }\n #define T_US\t&short_unsigned_type_node\n #define T89_US\t{ STD_C89, NULL, T_US }\n@@ -1702,15 +1708,15 @@ static const format_flag_pair strftime_flag_pairs[] =\n static const format_char_info print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\"  },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\"  },\n-  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\"  },\n+  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\"  },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\"  },\n+  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\"  },\n   { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n   { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n   { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"   },\n   { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"cR\" },\n   { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"c\"  },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\"  },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\"  },\n   /* C99 conversion specifiers.  */\n   { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n   { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n@@ -1725,15 +1731,15 @@ static const format_char_info print_char_table[] =\n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w'I\", \"W\"   },\n-  { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w'I\", \"W\"   },\n-  { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\",   \"W\"   },\n+  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w'I\", \"W\"   },\n+  { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w'I\", \"W\"   },\n+  { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\",   \"W\"   },\n   { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w'\",  \"W\"   },\n   { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",   \"cW\"  },\n   { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\",  \"cW\"  },\n   { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\",  \"cW[\" },\n   { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",   \"W\"   },\n-  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",     \"W\"   },\n+  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",     \"W\"   },\n   /* C99 conversion specifiers.  */\n   { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w'\",  \"W\"   },\n   /* X/Open conversion specifiers.  */\n@@ -2901,7 +2907,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  if (pedantic)\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n-\t      if (length_chars_std > C_STD_VER)\n+\t      if (ADJ_STD (length_chars_std) > C_STD_VER)\n \t\tstatus_warning (status, \"%s does not support the `%s' %s length modifier\",\n \t\t\t\tC_STD_NAME (length_chars_std), length_chars,\n \t\t\t\tfki->name);\n@@ -2971,7 +2977,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t}\n       if (pedantic)\n \t{\n-\t  if (fci->std > C_STD_VER)\n+\t  if (ADJ_STD (fci->std) > C_STD_VER)\n \t    status_warning (status, \"%s does not support the `%%%c' %s format\",\n \t\t\t    C_STD_NAME (fci->std), format_char, fki->name);\n \t}\n@@ -2996,16 +3002,16 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t    if (pedantic)\n \t      {\n \t\tconst format_flag_spec *t;\n-\t\tif (s->std > C_STD_VER)\n+\t\tif (ADJ_STD (s->std) > C_STD_VER)\n \t\t  status_warning (status, \"%s does not support %s\",\n \t\t\t\t  C_STD_NAME (s->std), _(s->long_name));\n \t\tt = get_flag_spec (flag_specs, flag_chars[i], fci->flags2);\n-\t\tif (t != NULL && t->std > s->std)\n+\t\tif (t != NULL && ADJ_STD (t->std) > ADJ_STD (s->std))\n \t\t  {\n \t\t    const char *long_name = (t->long_name != NULL\n \t\t\t\t\t     ? t->long_name\n \t\t\t\t\t     : s->long_name);\n-\t\t    if (t->std > C_STD_VER)\n+\t\t    if (ADJ_STD (t->std) > C_STD_VER)\n \t\t      status_warning (status, \"%s does not support %s with the `%%%c' %s format\",\n \t\t\t\t      C_STD_NAME (t->std), _(long_name),\n \t\t\t\t      format_char, fki->name);\n@@ -3121,10 +3127,10 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t   /* Warn if non-standard, provided it is more non-standard\n \t\t      than the length and type characters that may already\n \t\t      have been warned for.  */\n-\t\t   && wanted_type_std > length_chars_std\n-\t\t   && wanted_type_std > fci->std)\n+\t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (length_chars_std)\n+\t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n-\t      if (wanted_type_std > C_STD_VER)\n+\t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n \t\tstatus_warning (status, \"%s does not support the `%%%s%c' %s format\",\n \t\t\t\tC_STD_NAME (wanted_type_std), length_chars,\n \t\t\t\tformat_char, fki->name);"}, {"sha": "b31499ff7eaae94a19fe4c8fb1121709a7ddda22", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -416,6 +416,11 @@ extern int warn_parentheses;\n \n extern int warn_conversion;\n \n+/* Nonzero means warn about usage of long long,\n+   when `-pedantic' and not C99.  */\n+\n+extern int warn_long_long;\n+\n /* C types are partitioned into three subsets: object, function, and\n    incomplete types.  */\n #define C_TYPE_OBJECT_P(type) \\"}, {"sha": "ee769e7a6ca64d95798fb946cdcb7ab4f2335bf6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -373,10 +373,6 @@ extern int warn_float_equal;\n \n extern int warn_multichar;\n \n-/* Warn about long long.  */\n-\n-extern int warn_long_long;\n-\n /* Nonzero means we are reading code that came from a system header file.  */\n \n extern int system_header_p;"}, {"sha": "98040922376171d9fdbd230fed43732421cbf963", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -1,3 +1,7 @@\n+2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* cp-tree.h: Don't declare warn_long_long.\n+\n 2000-12-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* tree.c (no_linkage_helper): Use CLASS_TYPE_P instead of"}, {"sha": "d7ede4e80fa5aefe1f126f3c00eeed88ba2f7073", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -1019,10 +1019,6 @@ extern int flag_gnu_binutils;\n \n extern int warn_implicit;\n \n-/* Nonzero means warn about usage of long long when `-pedantic'.  */\n-\n-extern int warn_long_long;\n-\n /* Nonzero means warn when all ctors or dtors are private, and the class\n    has no friends.  */\n "}, {"sha": "b60cda7515e265d497287157f3e7e8aafc6ae806", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -1,3 +1,7 @@\n+2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-warnll-1.c: New test.\n+\n 2000-12-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/cmdlne-P.c: New test."}, {"sha": "71a749b71a8d743313437adabba820d4214b66bd", "filename": "gcc/testsuite/gcc.dg/format-warnll-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-warnll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d380b15db740b9a998f5c64b52333f3f8d55c2/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-warnll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-warnll-1.c?ref=20d380b15db740b9a998f5c64b52333f3f8d55c2", "patch": "@@ -0,0 +1,46 @@\n+/* Test for printf formats.  C99 \"long long\" formats should be accepted with\n+   -Wno-long-long.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat -Wno-long-long\" } */\n+\n+extern int printf (const char *, ...);\n+extern int scanf (const char *, ...);\n+\n+void\n+foo (long long ll, unsigned long long ull, long long *lln,\n+     long long *llp, unsigned long long *ullp)\n+{\n+  /* Test for accepting standard \"long long\" formats.  */\n+  printf (\"%lld%lli%llo%llu%llx%llX%lln\", ll, ll, ull, ull, ull, ull, lln);\n+  scanf (\"%lld%lli%llo%llu%llx%llX%lln\", llp, llp,\n+\t ullp, ullp, ullp, ullp, lln);\n+  /* Use of \"q\" and \"L\" should still be warned about.  */\n+  printf (\"%qd\", ll); /* { dg-warning \"C\" \"printf %qd\" } */\n+  printf (\"%qi\", ll); /* { dg-warning \"C\" \"printf %qi\" } */\n+  printf (\"%qo\", ull); /* { dg-warning \"C\" \"printf %qo\" } */\n+  printf (\"%qu\", ull); /* { dg-warning \"C\" \"printf %qu\" } */\n+  printf (\"%qx\", ull); /* { dg-warning \"C\" \"printf %qx\" } */\n+  printf (\"%qX\", ull); /* { dg-warning \"C\" \"printf %qX\" } */\n+  printf (\"%qn\", lln); /* { dg-warning \"C\" \"printf %qn\" } */\n+  printf (\"%Ld\", ll); /* { dg-warning \"C\" \"printf %Ld\" } */\n+  printf (\"%Li\", ll); /* { dg-warning \"C\" \"printf %Li\" } */\n+  printf (\"%Lo\", ull); /* { dg-warning \"C\" \"printf %oL\" } */\n+  printf (\"%Lu\", ull); /* { dg-warning \"C\" \"printf %Lu\" } */\n+  printf (\"%Lx\", ull); /* { dg-warning \"C\" \"printf %Lx\" } */\n+  printf (\"%LX\", ull); /* { dg-warning \"C\" \"printf %LX\" } */\n+  scanf (\"%qd\", llp); /* { dg-warning \"C\" \"scanf %qd\" } */\n+  scanf (\"%qi\", llp); /* { dg-warning \"C\" \"scanf %qi\" } */\n+  scanf (\"%qo\", ullp); /* { dg-warning \"C\" \"scanf %qo\" } */\n+  scanf (\"%qu\", ullp); /* { dg-warning \"C\" \"scanf %qu\" } */\n+  scanf (\"%qx\", ullp); /* { dg-warning \"C\" \"scanf %qx\" } */\n+  scanf (\"%qX\", ullp); /* { dg-warning \"C\" \"scanf %qX\" } */\n+  scanf (\"%qn\", lln); /* { dg-warning \"C\" \"scanf %qn\" } */\n+  scanf (\"%Ld\", llp); /* { dg-warning \"C\" \"scanf %Ld\" } */\n+  scanf (\"%Li\", llp); /* { dg-warning \"C\" \"scanf %Li\" } */\n+  scanf (\"%Lo\", ullp); /* { dg-warning \"C\" \"scanf %oL\" } */\n+  scanf (\"%Lu\", ullp); /* { dg-warning \"C\" \"scanf %Lu\" } */\n+  scanf (\"%Lx\", ullp); /* { dg-warning \"C\" \"scanf %Lx\" } */\n+  scanf (\"%LX\", ullp); /* { dg-warning \"C\" \"scanf %LX\" } */\n+}"}]}