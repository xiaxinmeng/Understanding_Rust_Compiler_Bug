{"sha": "c1b61fcad363122356f59509520a68cba9772361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNjFmY2FkMzYzMTIyMzU2ZjU5NTA5NTIwYTY4Y2JhOTc3MjM2MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-03-31T23:17:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-03-31T23:17:05Z"}, "message": "c-common.c (c_get_ident): New.\n\n\t* c-common.c (c_get_ident): New.\n\t(c_common_nodes_and_builtins): Call it for type names that may be\n\tNULL.\n\nFrom-SVN: r145380", "tree": {"sha": "9dde79f1ed18c98eced093e9d076ba6e5b3f6b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dde79f1ed18c98eced093e9d076ba6e5b3f6b0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b61fcad363122356f59509520a68cba9772361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b61fcad363122356f59509520a68cba9772361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b61fcad363122356f59509520a68cba9772361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b61fcad363122356f59509520a68cba9772361/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d2ad48e26771c338ccd53f666fe963a1d1acc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d2ad48e26771c338ccd53f666fe963a1d1acc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d2ad48e26771c338ccd53f666fe963a1d1acc7"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "6f955ff9d4139adcd3df38155681259f0e9d3189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b61fcad363122356f59509520a68cba9772361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b61fcad363122356f59509520a68cba9772361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b61fcad363122356f59509520a68cba9772361", "patch": "@@ -1,3 +1,9 @@\n+2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_get_ident): New.\n+\t(c_common_nodes_and_builtins): Call it for type names that may be\n+\tNULL.\n+\n 2009-04-01  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/rs6000/sysv4.opt (msdata): Improve option description."}, {"sha": "d102b6ef4c28e89a43be1f3fd7b2ef331b5a42ad", "filename": "gcc/c-common.c", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b61fcad363122356f59509520a68cba9772361/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b61fcad363122356f59509520a68cba9772361/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c1b61fcad363122356f59509520a68cba9772361", "patch": "@@ -4641,6 +4641,16 @@ c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n     mudflap_init ();\n }\n \n+/* Like get_identifier, but avoid warnings about null arguments when\n+   the argument may be NULL for targets where GCC lacks stdint.h type\n+   information.  */\n+\n+static inline tree\n+c_get_ident (const char *id)\n+{\n+  return get_identifier (id);\n+}\n+\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n \n@@ -4936,85 +4946,85 @@ c_common_nodes_and_builtins (void)\n \n   if (SIG_ATOMIC_TYPE)\n     sig_atomic_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (SIG_ATOMIC_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (SIG_ATOMIC_TYPE)));\n   if (INT8_TYPE)\n     int8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT8_TYPE)));\n   if (INT16_TYPE)\n     int16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT16_TYPE)));\n   if (INT32_TYPE)\n     int32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT32_TYPE)));\n   if (INT64_TYPE)\n     int64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT64_TYPE)));\n   if (UINT8_TYPE)\n     uint8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT8_TYPE)));\n   if (UINT16_TYPE)\n     uint16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT16_TYPE)));\n   if (UINT32_TYPE)\n     c_uint32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT32_TYPE)));\n   if (UINT64_TYPE)\n     c_uint64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT64_TYPE)));\n   if (INT_LEAST8_TYPE)\n     int_least8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_LEAST8_TYPE)));\n   if (INT_LEAST16_TYPE)\n     int_least16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_LEAST16_TYPE)));\n   if (INT_LEAST32_TYPE)\n     int_least32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_LEAST32_TYPE)));\n   if (INT_LEAST64_TYPE)\n     int_least64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_LEAST64_TYPE)));\n   if (UINT_LEAST8_TYPE)\n     uint_least8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_LEAST8_TYPE)));\n   if (UINT_LEAST16_TYPE)\n     uint_least16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_LEAST16_TYPE)));\n   if (UINT_LEAST32_TYPE)\n     uint_least32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_LEAST32_TYPE)));\n   if (UINT_LEAST64_TYPE)\n     uint_least64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_LEAST64_TYPE)));\n   if (INT_FAST8_TYPE)\n     int_fast8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_FAST8_TYPE)));\n   if (INT_FAST16_TYPE)\n     int_fast16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_FAST16_TYPE)));\n   if (INT_FAST32_TYPE)\n     int_fast32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_FAST32_TYPE)));\n   if (INT_FAST64_TYPE)\n     int_fast64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INT_FAST64_TYPE)));\n   if (UINT_FAST8_TYPE)\n     uint_fast8_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST8_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_FAST8_TYPE)));\n   if (UINT_FAST16_TYPE)\n     uint_fast16_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST16_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_FAST16_TYPE)));\n   if (UINT_FAST32_TYPE)\n     uint_fast32_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST32_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_FAST32_TYPE)));\n   if (UINT_FAST64_TYPE)\n     uint_fast64_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST64_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINT_FAST64_TYPE)));\n   if (INTPTR_TYPE)\n     intptr_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (INTPTR_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (INTPTR_TYPE)));\n   if (UINTPTR_TYPE)\n     uintptr_type_node =\n-      TREE_TYPE (identifier_global_value (get_identifier (UINTPTR_TYPE)));\n+      TREE_TYPE (identifier_global_value (c_get_ident (UINTPTR_TYPE)));\n \n   default_function_type = build_function_type (integer_type_node, NULL_TREE);\n   ptrdiff_type_node"}]}