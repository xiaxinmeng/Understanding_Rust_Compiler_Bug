{"sha": "d4d44753398f9b24a622b40c7a1d144a6a6c350c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkNDQ3NTMzOThmOWIyNGE2MjJiNDBjN2ExZDE0NGE2YTZjMzUwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-14T17:49:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-14T17:49:21Z"}, "message": "decl.c (duplicate_decls): Use DECL_SOURCE_LOCATION in OPT_Wshadow warning_at.\n\n/cp\n2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (duplicate_decls): Use DECL_SOURCE_LOCATION in\n\tOPT_Wshadow warning_at.\n\t(grokfndecl): Consistently use the location_t argument in\n\tliteral operator diagnostic messages.\n\t(grokdeclarator): Use declspecs->locations[ds_storage_class]\n\tin error_at call.\n\t* decl2.c (finish_static_data_member_decl): Use DECL_SOURCE_LOCATION\n\tin permerror call.\n\n/testsuite\n2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/other/static3.C: New.\n\t* g++.dg/other/static4.C: Likewise.\n\t* g++.dg/warn/Wshadow-15.C: Likewise.\n\t* g++.dg/cpp0x/gnu_fext-numeric-literals.C: Test locations too.\n\t* g++.dg/cpp0x/std_fext-numeric-literals.C: Likewise.\n\t* g++.dg/cpp0x/std_fno-ext-numeric-literals.C: Likewise.\n\t* g++.dg/cpp0x/udlit-args-neg.C: Likewise.\n\t* g++.dg/cpp0x/udlit-clink-neg.C: Likewise.\n\t* g++.dg/cpp0x/udlit-extern-c.C: Likewise.\n\t* g++.dg/cpp0x/udlit-member-neg.C: Likewise.\n\nFrom-SVN: r261601", "tree": {"sha": "73c7c44de846b441d8eefb17fc70e5dee81037bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73c7c44de846b441d8eefb17fc70e5dee81037bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4d44753398f9b24a622b40c7a1d144a6a6c350c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d44753398f9b24a622b40c7a1d144a6a6c350c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d44753398f9b24a622b40c7a1d144a6a6c350c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d44753398f9b24a622b40c7a1d144a6a6c350c/comments", "author": null, "committer": null, "parents": [{"sha": "e9ecac306b972a45e2a6a4385bdf2bdc7f7ed68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ecac306b972a45e2a6a4385bdf2bdc7f7ed68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ecac306b972a45e2a6a4385bdf2bdc7f7ed68c"}], "stats": {"total": 267, "additions": 157, "deletions": 110}, "files": [{"sha": "d1fdc42aa4b93d8572cec126f049834e5a9a3b14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -1,3 +1,14 @@\n+2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (duplicate_decls): Use DECL_SOURCE_LOCATION in\n+\tOPT_Wshadow warning_at.\n+\t(grokfndecl): Consistently use the location_t argument in\n+\tliteral operator diagnostic messages.\n+\t(grokdeclarator): Use declspecs->locations[ds_storage_class]\n+\tin error_at call.\n+\t* decl2.c (finish_static_data_member_decl): Use DECL_SOURCE_LOCATION\n+\tin permerror call.\n+\n 2018-06-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86099 - ICE with trivial copy and non-trivial default ctor."}, {"sha": "98dea9b766fc80defbe48db31d81129aba6628b0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -1398,10 +1398,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     bad choice of name.  */\n \t  if (! TREE_PUBLIC (newdecl))\n \t    {\n-\t      warning (OPT_Wshadow, \n-                       DECL_BUILT_IN (olddecl)\n-                       ? G_(\"shadowing built-in function %q#D\")\n-                       : G_(\"shadowing library function %q#D\"), olddecl);\n+\t      warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  OPT_Wshadow, \n+\t\t\t  DECL_BUILT_IN (olddecl)\n+\t\t\t  ? G_(\"shadowing built-in function %q#D\")\n+\t\t\t  : G_(\"shadowing library function %q#D\"), olddecl);\n \t      /* Discard the old built-in function.  */\n \t      return NULL_TREE;\n \t    }\n@@ -8863,7 +8864,7 @@ grokfndecl (tree ctype,\n       /* [over.literal]/6: Literal operators shall not have C linkage. */\n       if (DECL_LANGUAGE (decl) == lang_c)\n \t{\n-\t  error (\"literal operator with C linkage\");\n+\t  error_at (location, \"literal operator with C linkage\");\n \t  maybe_show_extern_c_location ();\n \t  return NULL_TREE;\n \t}\n@@ -8873,34 +8874,34 @@ grokfndecl (tree ctype,\n \t  if (!check_literal_operator_args (decl, &long_long_unsigned_p,\n \t\t\t\t\t    &long_double_p))\n \t    {\n-\t      error (\"%qD has invalid argument list\", decl);\n+\t      error_at (location, \"%qD has invalid argument list\", decl);\n \t      return NULL_TREE;\n \t    }\n \n \t  suffix = UDLIT_OP_SUFFIX (DECL_NAME (decl));\n \t  if (long_long_unsigned_p)\n \t    {\n \t      if (cpp_interpret_int_suffix (parse_in, suffix, strlen (suffix)))\n-\t\twarning (0, \"integer suffix %qs\"\n+\t\twarning_at (location, 0, \"integer suffix %qs\"\n \t\t\t    \" shadowed by implementation\", suffix);\n \t    }\n \t  else if (long_double_p)\n \t    {\n \t      if (cpp_interpret_float_suffix (parse_in, suffix, strlen (suffix)))\n-\t\twarning (0, \"floating point suffix %qs\"\n+\t\twarning_at (location, 0, \"floating point suffix %qs\"\n \t\t\t    \" shadowed by implementation\", suffix);\n \t    }\n \t  /* 17.6.3.3.5  */\n \t  if (suffix[0] != '_'\n-\t      && !in_system_header_at (DECL_SOURCE_LOCATION (decl))\n+\t      && !in_system_header_at (location)\n \t      && !current_function_decl && !(friendp && !funcdef_flag))\n-\t    warning (OPT_Wliteral_suffix,\n-\t\t     \"literal operator suffixes not preceded by %<_%>\"\n-\t\t     \" are reserved for future standardization\");\n+\t    warning_at (location, OPT_Wliteral_suffix,\n+\t\t\t\"literal operator suffixes not preceded by %<_%>\"\n+\t\t\t\" are reserved for future standardization\");\n \t}\n       else\n \t{\n-\t  error (\"%qD must be a non-member function\", decl);\n+\t  error_at (location, \"%qD must be a non-member function\", decl);\n \t  return NULL_TREE;\n \t}\n     }\n@@ -12408,7 +12409,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\t/* 7.1.1: There can be no static function declarations within a\n \t\t   block.  */\n-\t\terror (\"cannot declare static function inside another function\");\n+\t\terror_at (declspecs->locations[ds_storage_class],\n+\t\t\t  \"cannot declare static function inside another function\");\n \t\tinvalid_static = 1;\n \t      }\n "}, {"sha": "8917880ba6494fc150245d84c987076d48ff8a99", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -756,7 +756,8 @@ finish_static_data_member_decl (tree decl,\n   if (LOCAL_CLASS_P (current_class_type)\n       /* We already complained about the template definition.  */\n       && !DECL_TEMPLATE_INSTANTIATION (decl))\n-    permerror (input_location, \"local class %q#T shall not have static data member %q#D\",\n+    permerror (DECL_SOURCE_LOCATION (decl),\n+\t       \"local class %q#T shall not have static data member %q#D\",\n \t       current_class_type, decl);\n   else\n     for (tree t = current_class_type; TYPE_P (t);"}, {"sha": "ecf65546ec72b5c5431912b8e42927764d51edb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -1,3 +1,16 @@\n+2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/other/static3.C: New.\n+\t* g++.dg/other/static4.C: Likewise.\n+\t* g++.dg/warn/Wshadow-15.C: Likewise.\n+\t* g++.dg/cpp0x/gnu_fext-numeric-literals.C: Test locations too.\n+\t* g++.dg/cpp0x/std_fext-numeric-literals.C: Likewise.\n+\t* g++.dg/cpp0x/std_fno-ext-numeric-literals.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-args-neg.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-clink-neg.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-extern-c.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-member-neg.C: Likewise.\n+\n 2018-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85945"}, {"sha": "816077d540147fc253559000396e033b695a5832", "filename": "gcc/testsuite/g++.dg/cpp0x/gnu_fext-numeric-literals.C", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -4,73 +4,73 @@\n //  Integer imaginary...\n \n constexpr unsigned long long\n-operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(unsigned long long n) // { dg-warning \"1:integer suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4 * n + 0; }\n \n constexpr unsigned long long\n-operator\"\" I(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" I(unsigned long long n) // { dg-warning \"1:integer suffix .I. shadowed by implementation\" }\n { return 4 * n + 1; }\n \n constexpr unsigned long long\n-operator\"\" j(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" j(unsigned long long n) // { dg-warning \"1:integer suffix .j. shadowed by implementation\" }\n { return 4 * n + 2; }\n \n constexpr unsigned long long\n-operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" J(unsigned long long n) // { dg-warning \"1:integer suffix .J. shadowed by implementation\" }\n { return 4 * n + 3; }\n \n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(long double n) // { dg-warning \"1:floating point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double\n-operator\"\" I(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" I(long double n) // { dg-warning \"1:floating point suffix .I. shadowed by implementation\" }\n { return 4.0L * n + 1.0L; }\n \n constexpr long double\n-operator\"\" j(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" j(long double n) // { dg-warning \"1:floating point suffix .j. shadowed by implementation\" }\n { return 4.0L * n + 2.0L; }\n \n constexpr long double\n-operator\"\" J(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" J(long double n) // { dg-warning \"1:floating point suffix .J. shadowed by implementation\" }\n { return 4.0L * n + 3.0L; }\n \n //  Fixed-point...\n \n constexpr long double\n-operator\"\" k(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" k(long double n) // { dg-warning \"1:floating point suffix .k. shadowed by implementation\" }\n { return 4 * (n + 1) + 0; }\n \n constexpr long double\n-operator\"\" K(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" K(long double n) // { dg-warning \"1:floating point suffix .K. shadowed by implementation\" }\n { return 4 * (n + 1) + 1; }\n \n constexpr long double\n-operator\"\" r(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" r(long double n) // { dg-warning \"1:floating point suffix .r. shadowed by implementation\" }\n { return 4 * (n + 1) + 2; }\n \n constexpr long double\n-operator\"\" R(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" R(long double n) // { dg-warning \"1:floating point suffix .R. shadowed by implementation\" }\n { return 4 * (n + 1) + 3; }\n \n //  Machine-defined...\n \n constexpr long double\n-operator\"\" w(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" w(long double n) // { dg-warning \"1:floating point suffix .w. shadowed by implementation\" }\n { return 4 * (n + 2) + 0; }\n \n constexpr long double\n-operator\"\" W(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" W(long double n) // { dg-warning \"1:floating point suffix .W. shadowed by implementation\" }\n { return 4 * (n + 2) + 1; }\n \n constexpr long double\n-operator\"\" q(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" q(long double n) // { dg-warning \"1:floating point suffix .q. shadowed by implementation\" }\n { return 4 * (n + 2) + 2; }\n \n constexpr long double\n-operator\"\" Q(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" Q(long double n) // { dg-warning \"1:floating point suffix .Q. shadowed by implementation\" }\n { return 4 * (n + 2) + 3; }\n \n int\n@@ -97,19 +97,19 @@ main()\n   auto Qfp = 1.0Q; // { dg-error \"unsupported\" \"\" { target { ! has_q_floating_suffix } } }\n }\n \n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "72b8546ae58e491163ae7abeb5203bd67af85d7f", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fext-numeric-literals.C", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -4,73 +4,73 @@\n //  Integer imaginary...\n \n constexpr unsigned long long\n-operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(unsigned long long n) // { dg-warning \"1:integer suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4 * n + 0; }\n \n constexpr unsigned long long\n-operator\"\" I(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" I(unsigned long long n) // { dg-warning \"1:integer suffix .I. shadowed by implementation\" }\n { return 4 * n + 1; }\n \n constexpr unsigned long long\n-operator\"\" j(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" j(unsigned long long n) // { dg-warning \"1:integer suffix .j. shadowed by implementation\" }\n { return 4 * n + 2; }\n \n constexpr unsigned long long\n-operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" J(unsigned long long n) // { dg-warning \"1:integer suffix .J. shadowed by implementation\" }\n { return 4 * n + 3; }\n \n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(long double n) // { dg-warning \"1:floating point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double\n-operator\"\" I(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" I(long double n) // { dg-warning \"1:floating point suffix .I. shadowed by implementation\" }\n { return 4.0L * n + 1.0L; }\n \n constexpr long double\n-operator\"\" j(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" j(long double n) // { dg-warning \"1:floating point suffix .j. shadowed by implementation\" }\n { return 4.0L * n + 2.0L; }\n \n constexpr long double\n-operator\"\" J(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" J(long double n) // { dg-warning \"1:floating point suffix .J. shadowed by implementation\" }\n { return 4.0L * n + 3.0L; }\n \n //  Fixed-point...\n \n constexpr long double\n-operator\"\" k(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" k(long double n) // { dg-warning \"1:floating point suffix .k. shadowed by implementation\" }\n { return 4 * (n + 1) + 0; }\n \n constexpr long double\n-operator\"\" K(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" K(long double n) // { dg-warning \"1:floating point suffix .K. shadowed by implementation\" }\n { return 4 * (n + 1) + 1; }\n \n constexpr long double\n-operator\"\" r(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" r(long double n) // { dg-warning \"1:floating point suffix .r. shadowed by implementation\" }\n { return 4 * (n + 1) + 2; }\n \n constexpr long double\n-operator\"\" R(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" R(long double n) // { dg-warning \"1:floating point suffix .R. shadowed by implementation\" }\n { return 4 * (n + 1) + 3; }\n \n //  Machine-defined...\n \n constexpr long double\n-operator\"\" w(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" w(long double n) // { dg-warning \"1:floating point suffix .w. shadowed by implementation\" }\n { return 4 * (n + 2) + 0; }\n \n constexpr long double\n-operator\"\" W(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" W(long double n) // { dg-warning \"1:floating point suffix .W. shadowed by implementation\" }\n { return 4 * (n + 2) + 1; }\n \n constexpr long double\n-operator\"\" q(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" q(long double n) // { dg-warning \"1:floating point suffix .q. shadowed by implementation\" }\n { return 4 * (n + 2) + 2; }\n \n constexpr long double\n-operator\"\" Q(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" Q(long double n) // { dg-warning \"1:floating point suffix .Q. shadowed by implementation\" }\n { return 4 * (n + 2) + 3; }\n \n int\n@@ -97,19 +97,19 @@ main()\n   auto Qfp = 1.0Q; // { dg-error \"unsupported\" \"\" { target { ! has_q_floating_suffix } } }\n }\n \n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "b4f9d457d98cea10923d76926802827061435b80", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fno-ext-numeric-literals.C", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -97,19 +97,19 @@ main()\n   auto Qfp = 1.0Q;\n }\n \n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n-// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"1:literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "b22fddd04032c8d9672522c7eb9ba18478d7ea34", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-args-neg.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-args-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-args-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-args-neg.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -5,37 +5,37 @@\n class Foo { };\n \n int\n-operator\"\" _Foo();\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo();\t// { dg-error \"1:.int operator\\\"\\\"_Foo\\\\(\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(int *);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(int *);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(int\\\\*\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(unsigned long int);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(unsigned long int);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(long unsigned int\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(double);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(double);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(double\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(const float *, std::size_t);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(const float *, std::size_t);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(const float\\\\*, std::size_t\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(const wchar_t *, int);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(const wchar_t *, int);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(const wchar_t\\\\*, int\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(const char16_t *);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(const char16_t *);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(const char16_t\\\\*\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(char...);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(char...);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(char, \\\\.\\\\.\\\\.\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(unsigned long long int, char);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(unsigned long long int, char);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(long long unsigned int, char\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(const char *, std::size_t, int);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(const char *, std::size_t, int);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(const char\\\\*, std::size_t, int\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(long double &);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(long double &);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(long double&\\\\). has invalid argument list\" }\n \n Foo\n-operator\"\" _Foo(std::size_t, const char16_t *);\t// { dg-error \"has invalid argument list\" }\n+operator\"\" _Foo(std::size_t, const char16_t *);\t// { dg-error \"1:.Foo operator\\\"\\\"_Foo\\\\(std::size_t, const char16_t\\\\*\\\\). has invalid argument list\" }"}, {"sha": "eb7ae8c0b174b01cba485028995b01c73747ec75", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-clink-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-clink-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-clink-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-clink-neg.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -3,6 +3,6 @@\n extern \"C\" {\n \n int\n-operator\"\" _badclinkage(unsigned long long);\t// { dg-error \"operator with C linkage\" }\n+operator\"\" _badclinkage(unsigned long long);\t// { dg-error \"1:literal operator with C linkage\" }\n \n }"}, {"sha": "7a38e12dcd09e18f4322ad0f0f57b36d4b7f33b0", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-extern-c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -2,6 +2,6 @@\n \n extern \"C\" { // { dg-message \"1: 'extern .C.' linkage started here\" }\n \n-constexpr double operator\"\" _deg ( double degrees ); // { dg-error \"literal operator with C linkage\" }\n+constexpr double operator\"\" _deg ( double degrees ); // { dg-error \"18:literal operator with C linkage\" }\n \n }"}, {"sha": "f2eef0f52a249d622b276480b16baeb0ab081b16", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-member-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-member-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-member-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-member-neg.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -4,7 +4,7 @@ class Foo\n {\n public:\n   Foo() { }\n-  int operator\"\" _Bar(char32_t);  // { dg-error \"must be a non-member function\" }\n+  int operator\"\" _Bar(char32_t);  // { dg-error \"7:.int Foo::operator\\\"\\\"_Bar\\\\(char32_t\\\\). must be a non-member function\" }\n };\n \n int i = operator\"\" _Bar(U'x');  // { dg-error \"9:'operator\\\"\\\"_Bar' was not declared in this scope\" }"}, {"sha": "1d6b121b85ad388cce4c800337c28623524f1cfa", "filename": "gcc/testsuite/g++.dg/other/static3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic3.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -0,0 +1,7 @@\n+void foo()\n+{\n+  struct S\n+  {\n+    static const int a = 0;  // { dg-error \"22:local class\" }\n+  };\n+}"}, {"sha": "94dc9b3d01117307fa0b9491feb49b12025cd07c", "filename": "gcc/testsuite/g++.dg/other/static4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic4.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options -Wno-pedantic }\n+\n+void foo()\n+{\n+  static void bar();  // { dg-error \"3:cannot declare static function\" }\n+}"}, {"sha": "57ec88124b42399c00274e97c41a87e3ce6a5050", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-15.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d44753398f9b24a622b40c7a1d144a6a6c350c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-15.C?ref=d4d44753398f9b24a622b40c7a1d144a6a6c350c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-Wshadow\" }\n+\n+template<typename T>\n+void* operator new(__SIZE_TYPE__, T&);  // { dg-warning \"7:shadowing library function\" }\n+\n+template<typename T>\n+void operator delete(void *, T&);  // { dg-warning \"6:shadowing library function\" }"}]}