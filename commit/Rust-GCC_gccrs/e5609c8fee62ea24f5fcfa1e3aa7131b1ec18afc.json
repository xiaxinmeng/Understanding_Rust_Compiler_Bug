{"sha": "e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2MDljOGZlZTYyZWEyNGY1ZmNmYTFlM2FhNzEzMWIxZWMxOGFmYw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-06-05T16:54:53Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-06-05T16:54:53Z"}, "message": "[multiple changes]\n\n2015-06-03  Russell Whitesides  <russelldub@gmail.com>\n\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/40958\n\tPR fortran/60780\n\tPR fortran/66377\n\t* module.c (load_equiv): Add check for loading duplicate EQUIVALENCEs\n\tfrom different modules.  Eliminate the pruning of unused\n\tequivalence-objects\n\n\n2015-06-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/66377\n\tgfortran.dg/equiv_9.f90: New test.\n\nFrom-SVN: r224159", "tree": {"sha": "a0e126c4948d37e3b7aee1084b445bde8dd93a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e126c4948d37e3b7aee1084b445bde8dd93a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/comments", "author": null, "committer": null, "parents": [{"sha": "712266515f4ba06d8a2d90584984f461a37b5d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712266515f4ba06d8a2d90584984f461a37b5d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712266515f4ba06d8a2d90584984f461a37b5d68"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "2bf67171c0728712399872cfc5cbec7f36d9e317", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "patch": "@@ -1,3 +1,13 @@\n+2015-06-05  Russell Whitesides  <russelldub@gmail.com>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/40958\n+\tPR fortran/60780\n+\tPR fortran/66377\n+\t* module.c (load_equiv): Add check for loading duplicate EQUIVALENCEs\n+\tfrom different modules.  Eliminate the pruning of unused\n+\tequivalence-objects\n+\n 2015-06-04  Thomas Koenig  <tkoenig@netcologne.de>\n \n \tPR fortran/58749"}, {"sha": "e183d908ab408e866120befdda63611b9f36f109", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "patch": "@@ -4476,8 +4476,8 @@ load_commons (void)\n static void\n load_equiv (void)\n {\n-  gfc_equiv *head, *tail, *end, *eq;\n-  bool unused;\n+  gfc_equiv *head, *tail, *end, *eq, *equiv;\n+  bool duplicate;\n \n   mio_lparen ();\n   in_load_equiv = true;\n@@ -4504,23 +4504,19 @@ load_equiv (void)\n \tmio_expr (&tail->expr);\n       }\n \n-    /* Unused equivalence members have a unique name.  In addition, it\n-       must be checked that the symbols are from the same module.  */\n-    unused = true;\n-    for (eq = head; eq; eq = eq->eq)\n+    /* Check for duplicate equivalences being loaded from different modules */\n+    duplicate = false;\n+    for (equiv = gfc_current_ns->equiv; equiv; equiv = equiv->next)\n       {\n-\tif (eq->expr->symtree->n.sym->module\n-\t      && head->expr->symtree->n.sym->module\n-\t      && strcmp (head->expr->symtree->n.sym->module,\n-\t\t\t eq->expr->symtree->n.sym->module) == 0\n-\t      && !check_unique_name (eq->expr->symtree->name))\n+\tif (equiv->module && head->module\n+\t    && strcmp (equiv->module, head->module) == 0)\n \t  {\n-\t    unused = false;\n+\t    duplicate = true;\n \t    break;\n \t  }\n       }\n \n-    if (unused)\n+    if (duplicate)\n       {\n \tfor (eq = head; eq; eq = head)\n \t  {"}, {"sha": "e96238344096bd08b04c2f31492876baf36f5941", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "patch": "@@ -1,3 +1,9 @@\n+2015-06-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/66377\n+\tgfortran.dg/equiv_9.f90: New test.\n+\n+\n 2015-06-05  Tom de Vries  <tom@codesourcery.com>\n \n \tmerge from gomp4 branch:"}, {"sha": "28f0bb8bbf1400034e395dab53b466fc8e4ebf02", "filename": "gcc/testsuite/gfortran.dg/equiv_9.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_9.f90?ref=e5609c8fee62ea24f5fcfa1e3aa7131b1ec18afc", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! PR fortran/66377\n+!\n+module constant\n+  integer x1, x2, x3\n+  integer x(3)\n+  equivalence (x(1),x1), (x2,x(2)), (x3,x(3))\n+end module\n+\n+program test\n+  use constant\n+  implicit none \n+  x = (/1, 2, 3/)\n+  call another()\n+end program\n+\n+subroutine another()\n+   use constant, only : x2\n+   implicit none\n+   if (x2 /= 2) call abort\n+end subroutine\n+! { dg-final { cleanup-modules \"constant\" } }"}]}