{"sha": "7f26f7df904d3894d726e36a57d5f004eef71a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyNmY3ZGY5MDRkMzg5NGQ3MjZlMzZhNTdkNWYwMDRlZWY3MWE3NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-18T15:54:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-18T15:54:14Z"}, "message": "re PR c++/68767 (spurious warning: null argument where non-null required)\n\n\tPR c++/68767\ngcc/c-family/\n\t* c-common.c (check_function_arguments_recurse): Fold the whole\n\tCOND_EXPR, not just the condition.\ngcc/cp/\n\t* cp-gimplify.c (cp_fold) [COND_EXPR]: Simplify.  Do fold COND_EXPR.\n\t(contains_label_1, contains_label_p): Remove.\n\nFrom-SVN: r232522", "tree": {"sha": "e8083e786a4a21b4845fb573c6d3c996b8368aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8083e786a4a21b4845fb573c6d3c996b8368aab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f26f7df904d3894d726e36a57d5f004eef71a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f26f7df904d3894d726e36a57d5f004eef71a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f26f7df904d3894d726e36a57d5f004eef71a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f26f7df904d3894d726e36a57d5f004eef71a74/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f62bf0924e9d0cbd429be8b57e5801b7f4c69c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62bf0924e9d0cbd429be8b57e5801b7f4c69c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62bf0924e9d0cbd429be8b57e5801b7f4c69c7c"}], "stats": {"total": 129, "additions": 45, "deletions": 84}, "files": [{"sha": "a22485fcbd6883ae467fec0f7ea35b70d60b19cd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7f26f7df904d3894d726e36a57d5f004eef71a74", "patch": "@@ -1,3 +1,9 @@\n+2016-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68767\n+\t* c-common.c (check_function_arguments_recurse): Fold the whole\n+\tCOND_EXPR, not just the condition.\n+\n 2016-01-18  Tom de Vries  <tom@codesourcery.com>\n \n \t* c-omp.c (c_oacc_split_loop_clauses): Don't copy OMP_CLAUSE_REDUCTION,"}, {"sha": "1a2c21b8939de9430f50ee8adf782b576a4951f5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7f26f7df904d3894d726e36a57d5f004eef71a74", "patch": "@@ -9765,15 +9765,19 @@ check_function_arguments_recurse (void (*callback)\n \n   if (TREE_CODE (param) == COND_EXPR)\n     {\n-      tree cond = fold_for_warn (TREE_OPERAND (param, 0));\n-      /* Check both halves of the conditional expression.  */\n-      if (!integer_zerop (cond))\n-\tcheck_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\t  TREE_OPERAND (param, 1), param_num);\n-      if (!integer_nonzerop (cond))\n-\tcheck_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\t  TREE_OPERAND (param, 2), param_num);\n-      return;\n+      /* Simplify to avoid warning for an impossible case.  */\n+      param = fold_for_warn (param);\n+      if (TREE_CODE (param) == COND_EXPR)\n+\t{\n+\t  /* Check both halves of the conditional expression.  */\n+\t  check_function_arguments_recurse (callback, ctx,\n+\t\t\t\t\t    TREE_OPERAND (param, 1),\n+\t\t\t\t\t    param_num);\n+\t  check_function_arguments_recurse (callback, ctx,\n+\t\t\t\t\t    TREE_OPERAND (param, 2),\n+\t\t\t\t\t    param_num);\n+\t  return;\n+\t}\n     }\n \n   (*callback) (ctx, param, param_num);"}, {"sha": "0ae29124658eff8ed5b6da7c390d4a548c7c7cca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f26f7df904d3894d726e36a57d5f004eef71a74", "patch": "@@ -1,3 +1,9 @@\n+2016-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68767\n+\t* cp-gimplify.c (cp_fold) [COND_EXPR]: Simplify.  Do fold COND_EXPR.\n+\t(contains_label_1, contains_label_p): Remove.\n+\n 2016-01-16  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/69091"}, {"sha": "e151753b3e4a37dc6a4f3d63d676c4a126a384f1", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 11, "deletions": 75, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7f26f7df904d3894d726e36a57d5f004eef71a74", "patch": "@@ -1851,38 +1851,6 @@ cxx_omp_disregard_value_expr (tree decl, bool shared)\n \t && DECL_OMP_PRIVATIZED_MEMBER (decl);\n }\n \n-/* Callback for walk_tree, looking for LABEL_EXPR.  Return *TP if it is\n-   a LABEL_EXPR; otherwise return NULL_TREE.  Do not check the subtrees\n-   of GOTO_EXPR.  */\n-\n-static tree\n-contains_label_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n-{\n-  switch (TREE_CODE (*tp))\n-    {\n-    case LABEL_EXPR:\n-      return *tp;\n-\n-    case GOTO_EXPR:\n-      *walk_subtrees = 0;\n-\n-      /* ... fall through ...  */\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n-/* Return whether the sub-tree ST contains a label which is accessible from\n-   outside the sub-tree.  */\n-\n-static bool\n-contains_label_p (tree st)\n-{\n-  return\n-   walk_tree_without_duplicates (&st, contains_label_1 , NULL) != NULL_TREE;\n-}\n-\n /* Perform folding on expression X.  */\n \n tree\n@@ -2110,54 +2078,22 @@ cp_fold (tree x)\n     case VEC_COND_EXPR:\n     case COND_EXPR:\n \n+      /* Don't bother folding a void condition, since it can't produce a\n+\t constant value.  Also, some statement-level uses of COND_EXPR leave\n+\t one of the branches NULL, so folding would crash.  */\n+      if (VOID_TYPE_P (TREE_TYPE (x)))\n+\treturn x;\n+\n       loc = EXPR_LOCATION (x);\n       op0 = cp_fold_rvalue (TREE_OPERAND (x, 0));\n-\n-      if (TREE_SIDE_EFFECTS (op0))\n-\tbreak;\n-\n       op1 = cp_fold (TREE_OPERAND (x, 1));\n       op2 = cp_fold (TREE_OPERAND (x, 2));\n \n-      if (TREE_CODE (op0) == INTEGER_CST)\n-\t{\n-\t  tree un;\n-\n-\t  if (integer_zerop (op0))\n-\t    {\n-\t      un = op1;\n-\t      r = op2;\n-\t    }\n-\t  else\n-\t    {\n-\t      un = op2;\n-\t      r = op1;\n-\t    }\n-\n-          if ((!TREE_SIDE_EFFECTS (un) || !contains_label_p (un))\n-              && (! VOID_TYPE_P (TREE_TYPE (r)) || VOID_TYPE_P (x)))\n-            {\n-\t      if (CAN_HAVE_LOCATION_P (r)\n-\t\t  && EXPR_LOCATION (r) != loc\n-\t\t  && !(TREE_CODE (r) == SAVE_EXPR\n-\t\t       || TREE_CODE (r) == TARGET_EXPR\n-\t\t       || TREE_CODE (r) == BIND_EXPR))\n-\t        {\n-\t\t  r = copy_node (r);\n-\t\t  SET_EXPR_LOCATION (r, loc);\n-\t        }\n-\t      x = r;\n-\t    }\n-\n-\t  break;\n-\t}\n-\n-      if (VOID_TYPE_P (TREE_TYPE (x)))\n-\tbreak;\n-\n-      x = build3_loc (loc, code, TREE_TYPE (x), op0, op1, op2);\n-\n-      if (code != COND_EXPR)\n+      if (op0 != TREE_OPERAND (x, 0)\n+\t  || op1 != TREE_OPERAND (x, 1)\n+\t  || op2 != TREE_OPERAND (x, 2))\n+\tx = fold_build3_loc (loc, code, TREE_TYPE (x), op0, op1, op2);\n+      else\n \tx = fold (x);\n \n       break;"}, {"sha": "6757437de126a669f25a5d3d362a2a3f8a9115e2", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f26f7df904d3894d726e36a57d5f004eef71a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull2.C?ref=7f26f7df904d3894d726e36a57d5f004eef71a74", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/68767\n+// { dg-options \"-Wnonnull\" }\n+\n+extern int len (const char*) __attribute__ ((__nonnull__ (1)));\n+\n+int f (int x)\n+{\n+  return len ((x ? \"x\" : 0) ? (x ? \"x\" : 0) : \"x\");\n+}"}]}