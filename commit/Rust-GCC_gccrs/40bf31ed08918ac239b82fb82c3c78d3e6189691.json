{"sha": "40bf31ed08918ac239b82fb82c3c78d3e6189691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiZjMxZWQwODkxOGFjMjM5YjgyZmI4MmMzYzc4ZDNlNjE4OTY5MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-01T19:01:57Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-01T19:01:57Z"}, "message": "extended.texi (C Extensions): Change order in @menu to match @node.\n\ngcc/\n2013-03-01  Tobias Burnus  <burnus@net-b.de>\n\n        * doc/extended.texi (C Extensions): Change order in @menu\n        to match @node.\n        (Other MIPS Built-in Functions): Move last MIPS entry before\n        \"picoChip Built-in Functions\".\n        (SH Built-in Functions): Move after RX Built-in Functions.\n        * doc/gcc.texi (Introduction): Change order in @menu\n        to match @node.\n        * doc/md.texi (Constraints): Ditto.\n        * gty.texi (Type Information): Ditto.\n        (User-provided marking routines for template types): Make\n        subsection.\n        * doc/invoke.texi (AArch64 Options): Move before\n        \"Adapteva Epiphany Options\".\n\nlibiberty/\n2013-03-01  Andreas Schwab  <schwab@linux-m68k.org>\n\n        * obstacks.texi (Obstacks): Trim @node to only contain the\n        node name.\n        * libiberty.texi (Obstacks): Lower section.\n\nFrom-SVN: r196388", "tree": {"sha": "e601231903d80822c94718db17045d0e38cc21cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e601231903d80822c94718db17045d0e38cc21cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40bf31ed08918ac239b82fb82c3c78d3e6189691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf31ed08918ac239b82fb82c3c78d3e6189691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf31ed08918ac239b82fb82c3c78d3e6189691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf31ed08918ac239b82fb82c3c78d3e6189691/comments", "author": null, "committer": null, "parents": [{"sha": "2b62c97f038337ffd7522bca3eef22a346ca5306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b62c97f038337ffd7522bca3eef22a346ca5306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b62c97f038337ffd7522bca3eef22a346ca5306"}], "stats": {"total": 377, "additions": 201, "deletions": 176}, "files": [{"sha": "fde6ecd8c3b0bb13d5203e0507b082dc11416ac6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -1,3 +1,19 @@\n+2013-03-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* doc/extended.texi (C Extensions): Change order in @menu\n+\tto match @node.\n+\t(Other MIPS Built-in Functions): Move last MIPS entry before\n+\t\"picoChip Built-in Functions\".\n+\t(SH Built-in Functions): Move after RX Built-in Functions.\n+\t* doc/gcc.texi (Introduction): Change order in @menu\n+\tto match @node.\n+\t* doc/md.texi (Constraints): Ditto.\n+\t* gty.texi (Type Information): Ditto.\n+\t(User-provided marking routines for template types): Make\n+\tsubsection.\n+\t* doc/invoke.texi (AArch64 Options): Move before\n+\t\"Adapteva Epiphany Options\".\n+\n 2013-02-28  Konstantin Serebryany  <konstantin.s.serebryany@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ca6551530678e02ad26f2122a9db8e9949d3f259", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -30,8 +30,8 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Constructing Calls::  Dispatching a call to another function.\n * Typeof::              @code{typeof}: referring to the type of an expression.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n-* Long Long::           Double-word integers---@code{long long int}.\n * __int128::\t\t\t128-bit integers---@code{__int128}.\n+* Long Long::           Double-word integers---@code{long long int}.\n * Complex::             Data types for complex numbers.\n * Floating Types::      Additional Floating Types.\n * Half-Precision::      Half-Precision Floating Point.\n@@ -40,8 +40,8 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Fixed-Point::         Fixed-Point Types.\n * Named Address Spaces::Named address spaces.\n * Zero Length::         Zero-length arrays.\n-* Variable Length::     Arrays whose length is computed at run time.\n * Empty Structures::    Structures with no members.\n+* Variable Length::     Arrays whose length is computed at run time.\n * Variadic Macros::     Macros with a variable number of arguments.\n * Escaped Newlines::    Slightly looser rules for escaped newlines.\n * Subscripting::        Any array can be subscripted, even if not an lvalue.\n@@ -50,8 +50,8 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Compound Literals::   Compound literals give structures, unions\n                         or arrays as values.\n * Designated Inits::    Labeling elements of initializers.\n-* Cast to Union::       Casting to union type from any member of the union.\n * Case Ranges::         `case 1 ... 9' and such.\n+* Cast to Union::       Casting to union type from any member of the union.\n * Mixed Declarations::  Mixing declarations and code.\n * Function Attributes:: Declaring that functions have no side effects,\n                         or that they can never return.\n@@ -11658,6 +11658,18 @@ else\n @end smallexample\n @end table\n \n+@node Other MIPS Built-in Functions\n+@subsection Other MIPS Built-in Functions\n+\n+GCC provides other MIPS-specific built-in functions:\n+\n+@table @code\n+@item void __builtin_mips_cache (int @var{op}, const volatile void *@var{addr})\n+Insert a @samp{cache} instruction with operands @var{op} and @var{addr}.\n+GCC defines the preprocessor macro @code{___GCC_HAVE_BUILTIN_MIPS_CACHE}\n+when this function is available.\n+@end table\n+\n @node picoChip Built-in Functions\n @subsection picoChip Built-in Functions\n \n@@ -11694,18 +11706,6 @@ implementing assertions.\n \n @end table\n \n-@node Other MIPS Built-in Functions\n-@subsection Other MIPS Built-in Functions\n-\n-GCC provides other MIPS-specific built-in functions:\n-\n-@table @code\n-@item void __builtin_mips_cache (int @var{op}, const volatile void *@var{addr})\n-Insert a @samp{cache} instruction with operands @var{op} and @var{addr}.\n-GCC defines the preprocessor macro @code{___GCC_HAVE_BUILTIN_MIPS_CACHE}\n-when this function is available.\n-@end table\n-\n @node PowerPC Built-in Functions\n @subsection PowerPC Built-in Functions\n \n@@ -13796,41 +13796,6 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} built-in functions always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n-@node SH Built-in Functions\n-@subsection SH Built-in Functions\n-The following built-in functions are supported on the SH1, SH2, SH3 and SH4\n-families of processors:\n-\n-@deftypefn {Built-in Function} {void} __builtin_set_thread_pointer (void *@var{ptr})\n-Sets the @samp{GBR} register to the specified value @var{ptr}.  This is usually\n-used by system code that manages threads and execution contexts.  The compiler\n-normally does not generate code that modifies the contents of @samp{GBR} and\n-thus the value is preserved across function calls.  Changing the @samp{GBR}\n-value in user code must be done with caution, since the compiler might use\n-@samp{GBR} in order to access thread local variables.\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {void *} __builtin_thread_pointer (void)\n-Returns the value that is currently set in the @samp{GBR} register.\n-Memory loads and stores that use the thread pointer as a base address are\n-turned into @samp{GBR} based displacement loads and stores, if possible.\n-For example:\n-@smallexample\n-struct my_tcb\n-@{\n-   int a, b, c, d, e;\n-@};\n-\n-int get_tcb_value (void)\n-@{\n-  // Generate @samp{mov.l @@(8,gbr),r0} instruction\n-  return ((my_tcb*)__builtin_thread_pointer ())->c;\n-@}\n-\n-@end smallexample\n-@end deftypefn\n-\n @node RX Built-in Functions\n @subsection RX Built-in Functions\n GCC supports some of the RX instructions which cannot be expressed in\n@@ -13946,6 +13911,41 @@ bit in the processor status word.\n Generates the @code{wait} machine instruction.\n @end deftypefn\n \n+@node SH Built-in Functions\n+@subsection SH Built-in Functions\n+The following built-in functions are supported on the SH1, SH2, SH3 and SH4\n+families of processors:\n+\n+@deftypefn {Built-in Function} {void} __builtin_set_thread_pointer (void *@var{ptr})\n+Sets the @samp{GBR} register to the specified value @var{ptr}.  This is usually\n+used by system code that manages threads and execution contexts.  The compiler\n+normally does not generate code that modifies the contents of @samp{GBR} and\n+thus the value is preserved across function calls.  Changing the @samp{GBR}\n+value in user code must be done with caution, since the compiler might use\n+@samp{GBR} in order to access thread local variables.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {void *} __builtin_thread_pointer (void)\n+Returns the value that is currently set in the @samp{GBR} register.\n+Memory loads and stores that use the thread pointer as a base address are\n+turned into @samp{GBR} based displacement loads and stores, if possible.\n+For example:\n+@smallexample\n+struct my_tcb\n+@{\n+   int a, b, c, d, e;\n+@};\n+\n+int get_tcb_value (void)\n+@{\n+  // Generate @samp{mov.l @@(8,gbr),r0} instruction\n+  return ((my_tcb*)__builtin_thread_pointer ())->c;\n+@}\n+\n+@end smallexample\n+@end deftypefn\n+\n @node SPARC VIS Built-in Functions\n @subsection SPARC VIS Built-in Functions\n "}, {"sha": "02b81cf86eccf98086dcf72479f3890569430cb0", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -132,8 +132,8 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n * Standards::       Language standards supported by GCC.\n * Invoking GCC::    Command options supported by @samp{gcc}.\n * C Implementation:: How GCC implements the ISO C specification.\n-* C Extensions::    GNU extensions to the C language family.\n * C++ Implementation:: How GCC implements the ISO C++ specification.\n+* C Extensions::    GNU extensions to the C language family.\n * C++ Extensions::  GNU extensions to the C++ language.\n * Objective-C::     GNU Objective-C runtime features.\n * Compatibility::   Binary Compatibility"}, {"sha": "82e8e4f728f87936f3de021f680cad577ec776c8", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -87,8 +87,8 @@ data members.\n \n @menu\n * GTY Options::         What goes inside a @code{GTY(())}.\n-* GGC Roots::           Making global variables GGC roots.\n * User GC::\t\tAdding user-provided GC marking routines.\n+* GGC Roots::           Making global variables GGC roots.\n * Files::               How the generated files work.\n * Invoking the garbage collector::   How to invoke the garbage collector.\n * Troubleshooting::     When something does not work as expected.\n@@ -515,7 +515,7 @@ Note that the rules for the pointer walker @code{gt_pch_nx (my_struct\n case, the operation @code{op} must be applied to the @emph{address} of\n every pointer field.\n \n-@section User-provided marking routines for template types\n+@subsection User-provided marking routines for template types\n When a template type @code{TP} is marked with @code{GTY}, all\n instances of that type are considered user-provided types.  This means\n that the individual instances of @code{TP} do not need to be marked"}, {"sha": "75dd9bda59e21aad0eea5812a23a9e9b234ee705", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -10855,6 +10855,125 @@ platform.\n * zSeries Options::\n @end menu\n \n+@node AArch64 Options\n+@subsection AArch64 Options\n+@cindex AArch64 Options\n+\n+These options are defined for AArch64 implementations:\n+\n+@table @gcctabopt\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+Generate big-endian code.  This is the default when GCC is configured for an\n+@samp{aarch64_be-*-*} target.\n+\n+@item -mgeneral-regs-only\n+@opindex mgeneral-regs-only\n+Generate code which uses only the general registers.\n+\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+Generate little-endian code.  This is the default when GCC is configured for an\n+@samp{aarch64-*-*} but not an @samp{aarch64_be-*-*} target.\n+\n+@item -mcmodel=tiny\n+@opindex mcmodel=tiny\n+Generate code for the tiny code model.  The program and its statically defined\n+symbols must be within 1GB of each other.  Pointers are 64 bits.  Programs can\n+be statically or dynamically linked.  This model is not fully implemented and\n+mostly treated as @samp{small}.\n+\n+@item -mcmodel=small\n+@opindex mcmodel=small\n+Generate code for the small code model.  The program and its statically defined\n+symbols must be within 4GB of each other.  Pointers are 64 bits.  Programs can\n+be statically or dynamically linked.  This is the default code model.\n+\n+@item -mcmodel=large\n+@opindex mcmodel=large\n+Generate code for the large code model.  This makes no assumptions about\n+addresses and sizes of sections.  Pointers are 64 bits.  Programs can be\n+statically linked only.\n+\n+@item -mstrict-align\n+@opindex mstrict-align\n+Do not assume that unaligned memory references will be handled by the system.\n+\n+@item -momit-leaf-frame-pointer\n+@itemx -mno-omit-leaf-frame-pointer\n+@opindex momit-leaf-frame-pointer\n+@opindex mno-omit-leaf-frame-pointer\n+Omit or keep the frame pointer in leaf functions.  The former behaviour is the\n+default.\n+\n+@item -mtls-dialect=desc\n+@opindex mtls-dialect=desc\n+Use TLS descriptors as the thread-local storage mechanism for dynamic accesses\n+of TLS variables.  This is the default.\n+\n+@item -mtls-dialect=traditional\n+@opindex mtls-dialect=traditional\n+Use traditional TLS as the thread-local storage mechanism for dynamic accesses\n+of TLS variables.\n+\n+@item -march=@var{name}\n+@opindex march\n+Specify the name of the target architecture, optionally suffixed by one or\n+more feature modifiers.  This option has the form\n+@option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n+only value for @var{arch} is @samp{armv8-a}.  The possible values for\n+@var{feature} are documented in the sub-section below.\n+\n+Where conflicting feature modifiers are specified, the right-most feature is\n+used.\n+\n+GCC uses this name to determine what kind of instructions it can emit when\n+generating assembly code.  This option can be used in conjunction with or\n+instead of the @option{-mcpu=} option.\n+\n+@item -mcpu=@var{name}\n+@opindex mcpu\n+Specify the name of the target processor, optionally suffixed by one or more\n+feature modifiers.  This option has the form\n+@option{-mcpu=@var{cpu}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n+possible values for @var{cpu} are @samp{generic}, @samp{large}.  The\n+possible values for @var{feature} are documented in the sub-section\n+below.\n+\n+Where conflicting feature modifiers are specified, the right-most feature is\n+used.\n+\n+GCC uses this name to determine what kind of instructions it can emit when\n+generating assembly code.\n+\n+@item -mtune=@var{name}\n+@opindex mtune\n+Specify the name of the processor to tune the performance for.  The code will\n+be tuned as if the target processor were of the type specified in this option,\n+but still using instructions compatible with the target processor specified\n+by a @option{-mcpu=} option.  This option cannot be suffixed by feature\n+modifiers.\n+\n+@end table\n+\n+@subsubsection @option{-march} and @option{-mcpu} feature modifiers\n+@cindex @option{-march} feature modifiers\n+@cindex @option{-mcpu} feature modifiers\n+Feature modifiers used with @option{-march} and @option{-mcpu} can be one\n+the following:\n+\n+@table @samp\n+@item crypto\n+Enable Crypto extension.  This implies Advanced SIMD is enabled.\n+@item fp\n+Enable floating-point instructions.\n+@item simd\n+Enable Advanced SIMD instructions.  This implies floating-point instructions\n+are enabled.  This is the default for all current possible values for options\n+@option{-march} and @option{-mcpu=}.\n+@end table\n+\n @node Adapteva Epiphany Options\n @subsection Adapteva Epiphany Options\n \n@@ -11011,125 +11130,6 @@ purpose.  The default is @option{-m1reg-none}.\n \n @end table\n \n-@node AArch64 Options\n-@subsection AArch64 Options\n-@cindex AArch64 Options\n-\n-These options are defined for AArch64 implementations:\n-\n-@table @gcctabopt\n-\n-@item -mbig-endian\n-@opindex mbig-endian\n-Generate big-endian code.  This is the default when GCC is configured for an\n-@samp{aarch64_be-*-*} target.\n-\n-@item -mgeneral-regs-only\n-@opindex mgeneral-regs-only\n-Generate code which uses only the general registers.\n-\n-@item -mlittle-endian\n-@opindex mlittle-endian\n-Generate little-endian code.  This is the default when GCC is configured for an\n-@samp{aarch64-*-*} but not an @samp{aarch64_be-*-*} target.\n-\n-@item -mcmodel=tiny\n-@opindex mcmodel=tiny\n-Generate code for the tiny code model.  The program and its statically defined\n-symbols must be within 1GB of each other.  Pointers are 64 bits.  Programs can\n-be statically or dynamically linked.  This model is not fully implemented and\n-mostly treated as @samp{small}.\n-\n-@item -mcmodel=small\n-@opindex mcmodel=small\n-Generate code for the small code model.  The program and its statically defined\n-symbols must be within 4GB of each other.  Pointers are 64 bits.  Programs can\n-be statically or dynamically linked.  This is the default code model.\n-\n-@item -mcmodel=large\n-@opindex mcmodel=large\n-Generate code for the large code model.  This makes no assumptions about\n-addresses and sizes of sections.  Pointers are 64 bits.  Programs can be\n-statically linked only.\n-\n-@item -mstrict-align\n-@opindex mstrict-align\n-Do not assume that unaligned memory references will be handled by the system.\n-\n-@item -momit-leaf-frame-pointer\n-@itemx -mno-omit-leaf-frame-pointer\n-@opindex momit-leaf-frame-pointer\n-@opindex mno-omit-leaf-frame-pointer\n-Omit or keep the frame pointer in leaf functions.  The former behaviour is the\n-default.\n-\n-@item -mtls-dialect=desc\n-@opindex mtls-dialect=desc\n-Use TLS descriptors as the thread-local storage mechanism for dynamic accesses\n-of TLS variables.  This is the default.\n-\n-@item -mtls-dialect=traditional\n-@opindex mtls-dialect=traditional\n-Use traditional TLS as the thread-local storage mechanism for dynamic accesses\n-of TLS variables.\n-\n-@item -march=@var{name}\n-@opindex march\n-Specify the name of the target architecture, optionally suffixed by one or\n-more feature modifiers.  This option has the form\n-@option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n-only value for @var{arch} is @samp{armv8-a}.  The possible values for\n-@var{feature} are documented in the sub-section below.\n-\n-Where conflicting feature modifiers are specified, the right-most feature is\n-used.\n-\n-GCC uses this name to determine what kind of instructions it can emit when\n-generating assembly code.  This option can be used in conjunction with or\n-instead of the @option{-mcpu=} option.\n-\n-@item -mcpu=@var{name}\n-@opindex mcpu\n-Specify the name of the target processor, optionally suffixed by one or more\n-feature modifiers.  This option has the form\n-@option{-mcpu=@var{cpu}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n-possible values for @var{cpu} are @samp{generic}, @samp{large}.  The\n-possible values for @var{feature} are documented in the sub-section\n-below.\n-\n-Where conflicting feature modifiers are specified, the right-most feature is\n-used.\n-\n-GCC uses this name to determine what kind of instructions it can emit when\n-generating assembly code.\n-\n-@item -mtune=@var{name}\n-@opindex mtune\n-Specify the name of the processor to tune the performance for.  The code will\n-be tuned as if the target processor were of the type specified in this option,\n-but still using instructions compatible with the target processor specified\n-by a @option{-mcpu=} option.  This option cannot be suffixed by feature\n-modifiers.\n-\n-@end table\n-\n-@subsubsection @option{-march} and @option{-mcpu} feature modifiers\n-@cindex @option{-march} feature modifiers\n-@cindex @option{-mcpu} feature modifiers\n-Feature modifiers used with @option{-march} and @option{-mcpu} can be one\n-the following:\n-\n-@table @samp\n-@item crypto\n-Enable Crypto extension.  This implies Advanced SIMD is enabled.\n-@item fp\n-Enable floating-point instructions.\n-@item simd\n-Enable Advanced SIMD instructions.  This implies floating-point instructions\n-are enabled.  This is the default for all current possible values for options\n-@option{-march} and @option{-mcpu=}.\n-@end table\n-\n @node ARM Options\n @subsection ARM Options\n @cindex ARM options"}, {"sha": "63ec92f6b255a32181af4aef7bb1ae8f3eea45c1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -1079,8 +1079,8 @@ the addressing register.\n * Multi-Alternative::   When an insn has two alternative constraint-patterns.\n * Class Preferences::   Constraints guide which hard register to put things in.\n * Modifiers::           More precise control over effects of constraints.\n-* Disable Insn Alternatives:: Disable insn alternatives using the @code{enabled} attribute.\n * Machine Constraints:: Existing constraints for some particular machines.\n+* Disable Insn Alternatives:: Disable insn alternatives using the @code{enabled} attribute.\n * Define Constraints::  How to define machine-specific constraints.\n * C Constraint Interface:: How to test constraints from C code.\n @end menu"}, {"sha": "499347f247b389e73695e6ee9f9d08a1b9707fb0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -1,5 +1,6 @@\n 2013-03-01  Tobias Burnus  <burnus@net-b.de>\n \n+\tPR fortran/56491\n \t* iresolve.c (resolve_bound): Use gfc_get_string instead of xstrdup.\n \t* symbol.c (free_components): Free proc-pointer components.\n "}, {"sha": "b4c61807b5e637c0a1651de1edc0f054a73cf1cc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -1,3 +1,9 @@\n+2013-03-01  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* obstacks.texi (Obstacks): Trim @node to only contain the\n+\tnode name.\n+\t* libiberty.texi (Obstacks): Lower section.\n+\n 2013-02-14  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_DEFAULT_ARG."}, {"sha": "f1e4bddaa84cb3b913c1e6621ec27644dcc988e7", "filename": "libiberty/libiberty.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -82,8 +82,6 @@ License; for more information, see @ref{Library Copying}.\n \n * Functions::          Available functions, macros, and global variables.\n \n-* Obstacks::           Object Stacks.\n-\n * Licenses::           The various licenses under which libiberty sources are\n                        distributed.\n \n@@ -245,7 +243,11 @@ central location from which to use, maintain, and distribute them.\n \n @c This is generated from the glibc manual using a make-obstacks-texi.sh\n @c script of Phil's.  Hope it's accurate.\n+@lowersections\n+@lowersections\n @include obstacks.texi\n+@raisesections\n+@raisesections\n \n @node Functions\n @chapter Function, Variable, and Macro Listing."}, {"sha": "67780aa1a652b2eaf74fa95e1f159c91a6be3e5c", "filename": "libiberty/obstacks.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2Fobstacks.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf31ed08918ac239b82fb82c3c78d3e6189691/libiberty%2Fobstacks.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstacks.texi?ref=40bf31ed08918ac239b82fb82c3c78d3e6189691", "patch": "@@ -1,4 +1,4 @@\n-@node Obstacks,Licenses,Functions,Top\n+@node Obstacks\n @chapter Obstacks\n @cindex obstacks\n "}]}