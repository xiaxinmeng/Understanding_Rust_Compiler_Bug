{"sha": "67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhNDkzYTBiOWU3Y2U2Y2FiYTRiOGJlZGYxZjMyOTVlNDc3ZWMwMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-06T21:23:37Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-06T21:23:37Z"}, "message": "Exclude calls to variadic lambda stubs from -Wnonnull checking (PR c++/95984).\n\nResolves:\nPR c++/95984 - Internal compiler error: Error reporting routines re-entered in -Wnonnull on a variadic lamnda\nPR c++/96021 - missing -Wnonnull passing nullptr to a nonnull variadic lambda\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/95984\n\t* c-common.c (check_function_nonnull): Avoid checking syntesized calls\n\tto stub lambda objects with null this pointer.\n\t(check_nonnull_arg): Handle C++ nullptr.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95984\n\t* call.c (build_over_call): Check calls only when tf_warning is set.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95984\n\t* g++.dg/warn/Wnonnull6.C: New test.", "tree": {"sha": "952e9ccb0ffa2e3f8c2e190f2cdc389a2085e2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/952e9ccb0ffa2e3f8c2e190f2cdc389a2085e2b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1c9715b3142bc09e313c0d4b196694ab7ae153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1c9715b3142bc09e313c0d4b196694ab7ae153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1c9715b3142bc09e313c0d4b196694ab7ae153"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "51ecde69f2d44479b573e0578b3d81059abe4da8", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "patch": "@@ -5308,12 +5308,26 @@ check_function_nonnull (nonnull_arg_ctx &ctx, int nargs, tree *argarray)\n   int firstarg = 0;\n   if (TREE_CODE (ctx.fntype) == METHOD_TYPE)\n     {\n+      bool closure = false;\n+      if (ctx.fndecl)\n+\t{\n+\t  /* For certain lambda expressions the C++ front end emits calls\n+\t     that pass a null this pointer as an argument named __closure\n+\t     to the member operator() of empty function.  Detect those\n+\t     and avoid checking them, but proceed to check the remaining\n+\t     arguments.  */\n+\t  tree arg0 = DECL_ARGUMENTS (ctx.fndecl);\n+\t  if (tree arg0name = DECL_NAME (arg0))\n+\t    closure = id_equal (arg0name, \"__closure\");\n+\t}\n+\n       /* In calls to C++ non-static member functions check the this\n \t pointer regardless of whether the function is declared with\n \t attribute nonnull.  */\n       firstarg = 1;\n-      check_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[0],\n-\t\t\t\t\tfirstarg);\n+      if (!closure)\n+\tcheck_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[0],\n+\t\t\t\t\t  firstarg);\n     }\n \n   tree attrs = lookup_attribute (\"nonnull\", TYPE_ATTRIBUTES (ctx.fntype));\n@@ -5503,7 +5517,9 @@ check_nonnull_arg (void *ctx, tree param, unsigned HOST_WIDE_INT param_num)\n      happen if the \"nonnull\" attribute was given without an operand\n      list (which means to check every pointer argument).  */\n \n-  if (TREE_CODE (TREE_TYPE (param)) != POINTER_TYPE)\n+  tree paramtype = TREE_TYPE (param);\n+  if (TREE_CODE (paramtype) != POINTER_TYPE\n+      && TREE_CODE (paramtype) != NULLPTR_TYPE)\n     return;\n \n   /* Diagnose the simple cases of null arguments.  */"}, {"sha": "5341a57298017ffb0fed25740f88efeb68d16691", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "patch": "@@ -8842,15 +8842,16 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n   gcc_assert (j <= nargs);\n   nargs = j;\n \n-  /* Avoid to do argument-transformation, if warnings for format, and for\n-     nonnull are disabled.  Just in case that at least one of them is active\n+  /* Avoid performing argument transformation if warnings are disabled.\n+     When tf_warning is set and at least one of the warnings is active\n      the check_function_arguments function might warn about something.  */\n \n   bool warned_p = false;\n-  if (warn_nonnull\n-      || warn_format\n-      || warn_suggest_attribute_format\n-      || warn_restrict)\n+  if ((complain & tf_warning)\n+      && (warn_nonnull\n+\t  || warn_format\n+\t  || warn_suggest_attribute_format\n+\t  || warn_restrict))\n     {\n       tree *fargs = (!nargs ? argarray\n \t\t\t    : (tree *) alloca (nargs * sizeof (tree)));"}, {"sha": "dae6dd2d91259656ef121422e5c62e6295da1c49", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull6.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull6.C?ref=67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "patch": "@@ -0,0 +1,37 @@\n+/* PR c++/95984 - Internal compiler error: Error reporting routines re-entered\n+   in -Wnonnull on a variadic lamnda\n+   PR c++/missing -Wnonnull passing nullptr to a nonnull variadic lambda\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-Wall\" } */\n+\n+typedef int F (int);\n+\n+F* pr95984 ()\n+{\n+  // This also triggered the ICE.\n+  return [](auto...) { return 0; };     // { dg-bogus \"\\\\\\[-Wnonnull\" }\n+}\n+\n+\n+__attribute__ ((nonnull)) void f (int, ...);\n+void ff ()\n+{\n+  f (1, nullptr);                       // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+template <class T> void g (T t)\n+{\n+  t (1, nullptr);                       // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void gg (void)\n+{\n+  g ([](int, auto...) __attribute__ ((nonnull)) { });\n+}\n+\n+template <class T> __attribute__ ((nonnull)) void h (T);\n+\n+void hh ()\n+{\n+  h (nullptr);                          //  { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}]}