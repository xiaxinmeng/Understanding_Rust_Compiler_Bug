{"sha": "641ff2196fe3909bba852a5ac1d55e7cdab6d361", "node_id": "C_kwDOANBUbNoAKDY0MWZmMjE5NmZlMzkwOWJiYTg1MmE1YWMxZDU1ZTdjZGFiNmQzNjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-09T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-09T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "70112d82593543e995f4c2aa6b0427181f73f55f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70112d82593543e995f4c2aa6b0427181f73f55f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/641ff2196fe3909bba852a5ac1d55e7cdab6d361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641ff2196fe3909bba852a5ac1d55e7cdab6d361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641ff2196fe3909bba852a5ac1d55e7cdab6d361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641ff2196fe3909bba852a5ac1d55e7cdab6d361/comments", "author": null, "committer": null, "parents": [{"sha": "0fb57034770aa20adced4d176f34ca611c2945bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb57034770aa20adced4d176f34ca611c2945bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb57034770aa20adced4d176f34ca611c2945bf"}], "stats": {"total": 419, "additions": 418, "deletions": 1}, "files": [{"sha": "66c7532910dca2d1c301658eda9e2d605a1d628b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,115 @@\n+2021-12-08  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h (DARWIN_PIE_SPEC): Add -no_pie when\n+\tlinking mdynamic-no-pic code on macOS > 10.7.\n+\n+2021-12-08  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/pru.c (pru_section_type_flags): New function.\n+\t(TARGET_SECTION_TYPE_FLAGS): Wire it.\n+\n+2021-12-08  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.c (handle_attr_preserve): Avoid calling\n+\tis_gimple_assign with a NULL pointer.\n+\n+2021-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile-count.c (profile_count::dump): Add function\n+\tthat can dump to a provided buffer.\n+\t(profile_probability::dump): Likewise.\n+\t* profile-count.h: Likewise.\n+\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop):\n+\tUse dump_printf_loc infrastructure.\n+\t(tree_unswitch_outer_loop): Likewise.\n+\t(find_loop_guard): Likewise.\n+\t(hoist_guard): Likewise.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gimplify.c (extract_base_bit_offset): Add 'tree *offsetp' parameter,\n+\taccomodate case where 'offset' return of get_inner_reference is\n+\tnon-NULL.\n+\t(is_or_contains_p): Further robustify conditions.\n+\t(omp_target_reorder_clauses): In alloc/to/from sorting phase, also\n+\tmove following GOMP_MAP_ALWAYS_POINTER maps along.  Add new sorting\n+\tphase where we make sure pointers with an attach/detach map are ordered\n+\tcorrectly.\n+\t(gimplify_scan_omp_clauses): Add modifications to avoid creating\n+\tGOMP_MAP_STRUCT and associated alloc map for attach/detach maps.\n+\n+2021-12-08  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (*extend_trunc_<mode>2_qi,\n+\t*extend_trunc_<mode>2_hi, *extend_trunc_di2_si): New insns.\n+\tUse cvt to perform sign-extension of truncation in one step.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* gimplify.c (\"tree-hash-traits.h\"): Add include.\n+\t(gimplify_scan_omp_clauses): Change struct_map_to_clause to type\n+\thash_map<tree_operand, tree> *. Adjust struct map handling to handle\n+\tcases of *A and A->B expressions. Under !DECL_P case of\n+\tGOMP_CLAUSE_MAP handling, add STRIP_NOPS for indir_p case, add to\n+\tstruct_deref_set for map(*ptr_to_struct) cases. Add MEM_REF case when\n+\thandling component_ref_p case. Add unshare_expr and gimplification\n+\twhen created GOMP_MAP_STRUCT is not a DECL. Add code to add\n+\tfirstprivate pointer for *pointer-to-struct case.\n+\t(gimplify_adjust_omp_clauses): Move GOMP_MAP_STRUCT removal code for\n+\texit data directives code to earlier position.\n+\t* omp-low.c (lower_omp_target):\n+\tHandle GOMP_MAP_ATTACH_ZERO_LENGTH_ARRAY_SECTION, and\n+\tGOMP_MAP_POINTER_TO_ZERO_LENGTH_ARRAY_SECTION map kinds.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\n+2021-12-08  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Hafiz Abid Qadeer  <abidh@codesourcery.com>\n+\n+\t* dwarf2cfi.c (dw_stack_pointer_regnum): Change type to struct cfa_reg.\n+\t(dw_frame_pointer_regnum): Likewise.\n+\t(new_cfi_row): Use set_by_dwreg.\n+\t(get_cfa_from_loc_descr): Use set_by_dwreg.  Support register spans.\n+\thandle DW_OP_bregx with DW_OP_breg{0-31}.  Support DW_OP_lit*,\n+\tDW_OP_const*, DW_OP_minus, DW_OP_shl and DW_OP_plus.\n+\t(lookup_cfa_1): Use set_by_dwreg.\n+\t(def_cfa_0): Update for cfa_reg and support register spans.\n+\t(reg_save): Change sreg parameter to struct cfa_reg.  Support register\n+\tspans.\n+\t(dwf_cfa_reg): New function.\n+\t(dwarf2out_flush_queued_reg_saves): Use dwf_cfa_reg instead of\n+\tdwf_regno.\n+\t(dwarf2out_frame_debug_def_cfa): Likewise.\n+\t(dwarf2out_frame_debug_adjust_cfa): Likewise.\n+\t(dwarf2out_frame_debug_cfa_offset): Likewise.  Update reg_save usage.\n+\t(dwarf2out_frame_debug_cfa_register): Likewise.\n+\t(dwarf2out_frame_debug_expr): Likewise.\n+\t(create_pseudo_cfg): Use set_by_dwreg.\n+\t(initial_return_save): Use set_by_dwreg and dwf_cfa_reg,\n+\t(create_cie_data): Use dwf_cfa_reg.\n+\t(execute_dwarf2_frame): Use dwf_cfa_reg.\n+\t(dump_cfi_row): Use set_by_dwreg.\n+\t* dwarf2out.c (build_span_loc, build_breg_loc): New function.\n+\t(build_cfa_loc): Support register spans.\n+\t(build_cfa_aligned_loc): Update cfa_reg usage.\n+\t(convert_cfa_to_fb_loc_list): Use set_by_dwreg.\n+\t* dwarf2out.h (struct cfa_reg): New type.\n+\t(struct dw_cfa_location): Use struct cfa_reg.\n+\t(build_span_loc): New prototype.\n+\n+2021-12-08  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/100738\n+\t* config/i386/sse.md\n+\t(*<sse4_1>_blendv<ssefltmodesuffix><avxsizesuffix>_not_ltint):\n+\tAdd new define_insn_and_split.\n+\n+2021-12-08  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR middle-end/103149\n+\t* gimple-harden-conditionals.cc (detach_value): Use memory if\n+\tgeneral regs won't do.\n+\n 2021-12-07  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/103438"}, {"sha": "6f8b77f403ef1e072a11528f7614996e57805543", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1 +1 @@\n-20211208\n+20211209"}, {"sha": "fb2ef2a7304f6bc1df0078cf8d1bf01794687d56", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,27 @@\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-parser.c (struct omp_dim): New struct type for use inside\n+\tc_parser_omp_variable_list.\n+\t(c_parser_omp_variable_list): Allow multiple levels of array and\n+\tcomponent accesses in array section base-pointer expression.\n+\t(c_parser_omp_clause_to): Set 'allow_deref' to true in call to\n+\tc_parser_omp_var_list_parens.\n+\t(c_parser_omp_clause_from): Likewise.\n+\t* c-typeck.c (handle_omp_array_sections_1): Extend allowed range\n+\tof base-pointer expressions involving INDIRECT/MEM/ARRAY_REF and\n+\tPOINTER_PLUS_EXPR.\n+\t(c_finish_omp_clauses): Extend allowed ranged of expressions\n+\tinvolving INDIRECT/MEM/ARRAY_REF and POINTER_PLUS_EXPR.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* c-parser.c (c_parser_omp_clause_map): Set 'allow_deref' argument in\n+\tcall to c_parser_omp_variable_list to 'true'.\n+\t* c-typeck.c (handle_omp_array_sections_1): Add strip of MEM_REF in\n+\tarray base handling.\n+\t(c_finish_omp_clauses): Handle 'A->member' case in map clauses.\n+\n 2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-typeck.c (c_finish_omp_clauses): Remove \"gang reduction on an"}, {"sha": "9a8e7fb330409585e55f62dcd2680d14c84ca418", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,43 @@\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* parser.c (struct omp_dim): New struct type for use inside\n+\tcp_parser_omp_var_list_no_open.\n+\t(cp_parser_omp_var_list_no_open): Allow multiple levels of array and\n+\tcomponent accesses in array section base-pointer expression.\n+\t(cp_parser_omp_all_clauses): Set 'allow_deref' to true in call to\n+\tcp_parser_omp_var_list for to/from clauses.\n+\t* semantics.c (handle_omp_array_sections_1): Extend allowed range\n+\tof base-pointer expressions involving INDIRECT/MEM/ARRAY_REF and\n+\tPOINTER_PLUS_EXPR.\n+\t(handle_omp_array_sections): Adjust pointer map generation of\n+\treferences.\n+\t(finish_omp_clauses): Extend allowed ranged of expressions\n+\tinvolving INDIRECT/MEM/ARRAY_REF and POINTER_PLUS_EXPR.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* cp-tree.h (finish_omp_target): New declaration.\n+\t(finish_omp_target_clauses): Likewise.\n+\t* parser.c (cp_parser_omp_clause_map): Adjust call to\n+\tcp_parser_omp_var_list_no_open to set 'allow_deref' argument to true.\n+\t(cp_parser_omp_target): Factor out code, adjust into calls to new\n+\tfunction finish_omp_target.\n+\t* pt.c (tsubst_expr): Add call to finish_omp_target_clauses for\n+\tOMP_TARGET case.\n+\t* semantics.c (handle_omp_array_sections_1): Add handling to create\n+\t'this->member' from 'member' FIELD_DECL. Remove case of rejecting\n+\t'this' when not in declare simd.\n+\t(handle_omp_array_sections): Likewise.\n+\t(finish_omp_clauses): Likewise. Adjust to allow 'this[]' in OpenMP\n+\tmap clauses. Handle 'A->member' case in map clauses. Remove case of\n+\trejecting 'this' when not in declare simd.\n+\t(struct omp_target_walk_data): New struct for walking over\n+\ttarget-directive tree body.\n+\t(finish_omp_target_clauses_r): New function for tree walk.\n+\t(finish_omp_target_clauses): New function.\n+\t(finish_omp_target): New function.\n+\n 2021-12-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95009"}, {"sha": "370e33cfa36454e13c1da65ed4a3504c77323106", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,50 @@\n+2021-12-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 568496d5b.\n+\t* Make-lang.in (D_FRONTEND_OBJS): Add d/common-file.o,\n+\td/common-outbuffer.o, d/common-string.o, d/file_manager.o,\n+\td/importc.o.  Remove d/root-outbuffer.o.\n+\t(d/common-%.o): New recipe.\n+\t* d-builtins.cc (build_frontend_type): Update for new front-end\n+\tinterface.\n+\t(d_build_d_type_nodes): Set noreturn_type_node.\n+\t* d-codegen.cc (d_build_call): Don't call function if one of the\n+\targuments is type 'noreturn'.\n+\t(build_vthis_function): Propagate TYPE_QUAL_VOLATILE from original\n+\tfunction type.\n+\t* d-frontend.cc (eval_builtin): Update signature.\n+\t(getTypeInfoType): Likewise.\n+\t(toObjFile): New function.\n+\t* d-gimplify.cc (d_gimplify_call_expr): Always evaluate arguments from\n+\tleft to right.\n+\t* d-lang.cc (d_handle_option): Handle OPT_ftransition_in.\n+\t(d_parse_file): Don't generate D main if it is declared in user code.\n+\t* d-tree.h (CALL_EXPR_ARGS_ORDERED): Remove.\n+\t(enum d_tree_index): Add DTI_BOTTOM_TYPE.\n+\t(noreturn_type_node): New.\n+\t* decl.cc (apply_pragma_crt): Remove.\n+\t(DeclVisitor::visit): Update for new front-end interface.\n+\t(DeclVisitor::visit (PragmaDeclaration *)): Don't handle\n+\tcrt_constructor and crt_destructor pragmas.\n+\t(DeclVisitor::visit (VarDeclaration *)): Don't generate declarations\n+\tof type 'noreturn'.\n+\t(DeclVisitor::visit (FuncDeclaration *)): Stop adding parameters when\n+\t'noreturn' type has been encountered.\n+\t(get_symbol_decl): Set DECL_STATIC_CONSTRUCTOR and\n+\tDECL_STATIC_DESTRUCTOR on decl node if requested.\n+\t(aggregate_initializer_decl): Update for new front-end interface.\n+\t* expr.cc (ExprVisitor::visit (CallExp *)): Always use the 'this'\n+\tobject as the result of calling any constructor function.\n+\t(ExprVisitor::visit): Update for new front-end interface.\n+\t* gdc.texi (Runtime Options): Document -fmain and -ftransition=in.\n+\t* lang.opt (ftransition=in): New option.\n+\t* modules.cc (get_internal_fn): Update for new front-end interface.\n+\t* types.cc (TypeVisitor::visit): Likewise.\n+\t(TypeVisitor::visit (TypeNoreturn *)): Return noreturn_type_node.\n+\t(TypeVisitor::visit (TypeFunction *)): Stop adding parameters when\n+\t'notreturn' type has been encountered.  Qualify function types that\n+\treturn 'noreturn' as TYPE_QUAL_VOLATILE.\n+\n 2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/103520"}, {"sha": "c16ff2c7067da7a3e6fe3e58a3f3b21941671f08", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,20 @@\n+2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103609\n+\t* symbol.c (gfc_sym_get_dummy_args): Catch NULL pointer\n+\tdereference.\n+\n+2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103610\n+\t* array.c (spec_dimen_size): Fix simplification of SHAPE:\n+\tdimensions must be non-negative.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_array_section): Do not generate\n+\tGOMP_MAP_ALWAYS_POINTER map for main array maps of ARRAY_TYPE type.\n+\n 2021-12-07  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103607"}, {"sha": "e02c0c8a31101533bc3c2b2ca38632f28da33b8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,75 @@\n+2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103609\n+\t* gfortran.dg/pr103609.f90: New test.\n+\n+2021-12-08  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/pru_irq_map.c: New test.\n+\n+2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103610\n+\t* gfortran.dg/shape_11.f90: New test.\n+\n+2021-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/loop-unswitch-1.c: Adjust test-case based on\n+\tdump_printf_loc.\n+\t* gcc.dg/loop-unswitch-2.c: Likewise.\n+\t* gcc.dg/loop-unswitch-3.c: Likewise.\n+\t* gcc.dg/loop-unswitch-4.c: Likewise.\n+\t* gcc.dg/loop-unswitch-5.c: Likewise.\n+\n+2021-12-08  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/sibcall-1.c, gcc.dg/sibcall-10.c,\n+\tgcc.dg/sibcall-2.c, gcc.dg/sibcall-3.c,\n+\tgcc.dg/sibcall-4.c, gcc.dg/sibcall-9.c: Replace\n+\tattribute \"noinline\" with \"noipa\".\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-c++-common/goacc/deep-copy-arrayofstruct.c: Adjust testcase.\n+\t* c-c++-common/gomp/target-enter-data-1.c: New testcase.\n+\t* c-c++-common/gomp/target-implicit-map-2.c: New testcase.\n+\n+2021-12-08  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/exttrunc-2.c: New test case.\n+\t* gcc.target/nvptx/exttrunc-3.c: New test case.\n+\t* gcc.target/nvptx/exttrunc-4.c: New test case.\n+\t* gcc.target/nvptx/exttrunc-5.c: New test case.\n+\t* gcc.target/nvptx/exttrunc-6.c: New test case.\n+\n+2021-12-08  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/exttrunc-1.c: New test case.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* gcc.dg/gomp/target-3.c: New testcase.\n+\t* g++.dg/gomp/target-3.C: New testcase.\n+\t* g++.dg/gomp/target-lambda-1.C: New testcase.\n+\t* g++.dg/gomp/target-lambda-2.C: New testcase.\n+\t* g++.dg/gomp/target-this-1.C: New testcase.\n+\t* g++.dg/gomp/target-this-2.C: New testcase.\n+\t* g++.dg/gomp/target-this-3.C: New testcase.\n+\t* g++.dg/gomp/target-this-4.C: New testcase.\n+\t* g++.dg/gomp/target-this-5.C: New testcase.\n+\t* g++.dg/gomp/this-2.C: Adjust testcase.\n+\n+2021-12-08  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/100738\n+\t* g++.target/i386/pr100738-1.C: New test.\n+\n+2021-12-08  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR middle-end/103149\n+\t* gcc.target/aarch64/pr103149.c: New.\n+\n 2021-12-07  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103607"}, {"sha": "13e5b7ef74045e9e3dfbb5441c2525255ae033c7", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,12 @@\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* gomp-constants.h (enum gomp_map_kind):\n+\tAdd GOMP_MAP_ATTACH_ZERO_LENGTH_ARRAY_SECTION, and\n+\tGOMP_MAP_POINTER_TO_ZERO_LENGTH_ARRAY_SECTION map kinds.\n+\t(GOMP_MAP_POINTER_P):\n+\tInclude GOMP_MAP_POINTER_TO_ZERO_LENGTH_ARRAY_SECTION.\n+\n 2021-11-12  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_MAP_FLAG_SPECIAL_3): Define special bit macro."}, {"sha": "71e35b98f5f1d4fa07be5d553cd15cc1167f0ca0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,18 @@\n+2021-12-08  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.host (*-*-darwin*): Add logic to build a shared\n+\tunwinder library for Darwin8-10.\n+\t* config/i386/t-darwin: Build legacy libgcc_s.1.\n+\t* config/rs6000/t-darwin: Likewise.\n+\t* config/t-darwin: Reorganise the EH fragments to place\n+\tthem for inclusion in a shared EH lib.\n+\t* config/t-slibgcc-darwin: Build a legacy libgcc_s.1 and\n+\tthe supporting pieces (all FAT libs).\n+\t* config/t-darwin-noeh: Removed.\n+\t* config/darwin-unwind.ver: New file.\n+\t* config/rs6000/t-darwin-ehs: New file.\n+\t* config/t-darwin-ehs: New file.\n+\n 2021-12-06  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/riscv/div.S: Add the hidden alias symbol for __udivdi3, and"}, {"sha": "5f0b09615542f6de62eee5c5a356bd255a4d7d07", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,45 @@\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* target.c (gomp_map_vars_existing): Make sure attached pointer is\n+\tnot overwritten during cross-host/device copying.\n+\t(gomp_update): Likewise.\n+\t(gomp_exit_data): Likewise.\n+\t* testsuite/libgomp.c++/target-11.C: Adjust testcase.\n+\t* testsuite/libgomp.c++/target-12.C: Likewise.\n+\t* testsuite/libgomp.c++/target-15.C: Likewise.\n+\t* testsuite/libgomp.c++/target-16.C: Likewise.\n+\t* testsuite/libgomp.c++/target-17.C: Likewise.\n+\t* testsuite/libgomp.c++/target-21.C: Likewise.\n+\t* testsuite/libgomp.c++/target-23.C: Likewise.\n+\t* testsuite/libgomp.c/target-23.c: Likewise.\n+\t* testsuite/libgomp.c/target-29.c: Likewise.\n+\t* testsuite/libgomp.c-c++-common/target-implicit-map-2.c: New testcase.\n+\n+2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/92120\n+\t* libgomp.h (gomp_attach_pointer): Add bool parameter.\n+\t* oacc-mem.c (acc_attach_async): Update call to gomp_attach_pointer.\n+\t(goacc_enter_data_internal): Likewise.\n+\t* target.c (gomp_map_vars_existing): Update assert condition to\n+\tinclude GOMP_MAP_ATTACH_ZERO_LENGTH_ARRAY_SECTION.\n+\t(gomp_map_pointer): Add 'bool allow_zero_length_array_sections'\n+\tparameter, add support for mapping a pointer with NULL target.\n+\t(gomp_attach_pointer): Add 'bool allow_zero_length_array_sections'\n+\tparameter, add support for attaching a pointer with NULL target.\n+\t(gomp_map_vars_internal): Update calls to gomp_map_pointer and\n+\tgomp_attach_pointer, add handling for\n+\tGOMP_MAP_ATTACH_ZERO_LENGTH_ARRAY_SECTION, and\n+\tGOMP_MAP_POINTER_TO_ZERO_LENGTH_ARRAY_SECTION cases.\n+\t* testsuite/libgomp.c++/target-23.C: New testcase.\n+\t* testsuite/libgomp.c++/target-lambda-1.C: New testcase.\n+\t* testsuite/libgomp.c++/target-lambda-2.C: New testcase.\n+\t* testsuite/libgomp.c++/target-this-1.C: New testcase.\n+\t* testsuite/libgomp.c++/target-this-2.C: New testcase.\n+\t* testsuite/libgomp.c++/target-this-3.C: New testcase.\n+\t* testsuite/libgomp.c++/target-this-4.C: New testcase.\n+\t* testsuite/libgomp.c++/target-this-5.C: New testcase.\n+\n 2021-12-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.1): Update status."}, {"sha": "70d63f0430a250c960275809af6e7f137f8a551a", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,17 @@\n+2021-12-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/103558\n+\t* libdruntime/MERGE: Merge upstream druntime 178c44ff.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_LINUX): Add\n+\tcore/sys/linux/syscalls.d.\n+\t(DRUNTIME_DSOURCES_OPENBSD): Add core/sys/openbsd/pthread_np.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/MERGE: Merge upstream phobos 574bf883b.\n+\t* src/Makefile.am (D_EXTRA_DFLAGS): Add -fpreview=fieldwise.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/libphobos.exceptions/assert_fail.d: Update test.\n+\t* testsuite/libphobos.betterc/test22336.d: New test.\n+\n 2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/core/thread/osthread.d (callWithStackShell): Push all"}, {"sha": "fa193c6c8b4cc1fddfcd89f65474ee9ff37b69ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641ff2196fe3909bba852a5ac1d55e7cdab6d361/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=641ff2196fe3909bba852a5ac1d55e7cdab6d361", "patch": "@@ -1,3 +1,28 @@\n+2021-12-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_release()):\n+\tMake shift width conditional on __double_word condition.\n+\n+2021-12-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/std/deque (erase_if): Use _GLIBCXX_STD_C container reference and\n+\t__niter_wrap to limit _GLIBCXX_DEBUG mode impact.\n+\t* include/std/vector (erase_if): Likewise.\n+\n+2021-12-08  Maged Michael  <maged.michael@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_TSAN): Define macro\n+\tindicating that TSan is in use.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_release):\n+\tReplace definition in primary template with explicit\n+\tspecializations for _S_mutex and _S_atomic policies.\n+\t(_Sp_counted_base<_S_mutex>::_M_release): New specialization.\n+\t(_Sp_counted_base<_S_atomic>::_M_release): New specialization,\n+\tusing a single atomic load to access both reference counts at\n+\tonce.\n+\t(_Sp_counted_base::_M_release_last_use): New member function.\n+\n 2021-12-07  Tamar Christina  <tamar.christina@arm.com>\n \n \tRevert:"}]}