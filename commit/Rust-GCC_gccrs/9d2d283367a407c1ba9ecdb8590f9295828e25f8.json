{"sha": "9d2d283367a407c1ba9ecdb8590f9295828e25f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyZDI4MzM2N2E0MDdjMWJhOWVjZGI4NTkwZjkyOTU4MjhlMjVmOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-02-27T18:50:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-02-27T18:50:36Z"}, "message": "Compare ARGUMENT_PACKS [pr93933]\n\nThis implements Jason's suggested approach: 'I'd think that the bug is\nthat we're treating them as types in the first place; they aren't\ntypes, so they shouldn't reach comptypes.  I'd lean toward adding an\nassert to that effect and fixing the caller to use\ne.g. template_args_equal.'\n\n\tPR c++/93933\n\t* pt.c (template_args_equal): Pass ARGUMENT_PACKS through to\n\tcp_tree_equal.\n\t* tree.c (cp_tree_equal): Compare ARGUMENT_PACKS here,\n\t* typeck.c (comptypes): Assert we don't get any argument packs.", "tree": {"sha": "670766297b077469d190cbf4fad93b2c4191d4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670766297b077469d190cbf4fad93b2c4191d4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2d283367a407c1ba9ecdb8590f9295828e25f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2d283367a407c1ba9ecdb8590f9295828e25f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2d283367a407c1ba9ecdb8590f9295828e25f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2d283367a407c1ba9ecdb8590f9295828e25f8/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba49e9eb18730cc71e5ffc302092f87ef6821f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49e9eb18730cc71e5ffc302092f87ef6821f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba49e9eb18730cc71e5ffc302092f87ef6821f24"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "22fe8036f18521d0edb10341b93df2445c50cd3e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d2d283367a407c1ba9ecdb8590f9295828e25f8", "patch": "@@ -1,5 +1,11 @@\n 2020-02-27  Nathan Sidwell  <nathan@acm.org>\n \n+\tPR c++/93933\n+\t* pt.c (template_args_equal): Pass ARGUMENT_PACKS through to\n+\tcp_tree_equal.\n+\t* tree.c (cp_tree_equal): Compare ARGUMENT_PACKS here,\n+\t* typeck.c (comptypes): Assert we don't get any argument packs.\n+\n \t* class.c (adjust_clone_args): Correct arg-checking assert.\n \t* typeck.c (comptypes): Assert not nulls.\n "}, {"sha": "622c70b352fc1e96a6a0ccacfb19213db8114cdc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9d2d283367a407c1ba9ecdb8590f9295828e25f8", "patch": "@@ -8999,25 +8999,8 @@ template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n \t\t\t\t    PACK_EXPANSION_PATTERN (nt))\n \t    && template_args_equal (PACK_EXPANSION_EXTRA_ARGS (ot),\n \t\t\t\t    PACK_EXPANSION_EXTRA_ARGS (nt)));\n-  else if (ARGUMENT_PACK_P (ot))\n-    {\n-      int i, len;\n-      tree opack, npack;\n-\n-      if (!ARGUMENT_PACK_P (nt))\n-\treturn 0;\n-\n-      opack = ARGUMENT_PACK_ARGS (ot);\n-      npack = ARGUMENT_PACK_ARGS (nt);\n-      len = TREE_VEC_LENGTH (opack);\n-      if (TREE_VEC_LENGTH (npack) != len)\n-\treturn 0;\n-      for (i = 0; i < len; ++i)\n-\tif (!template_args_equal (TREE_VEC_ELT (opack, i),\n-\t\t\t\t  TREE_VEC_ELT (npack, i)))\n-\t  return 0;\n-      return 1;\n-    }\n+  else if (ARGUMENT_PACK_P (ot) || ARGUMENT_PACK_P (nt))\n+    return cp_tree_equal (ot, nt);\n   else if (ot && TREE_CODE (ot) == ARGUMENT_PACK_SELECT)\n     gcc_unreachable ();\n   else if (TYPE_P (nt))"}, {"sha": "3fc6287d566f50a1ac41cd81899c1a01c948dba7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9d2d283367a407c1ba9ecdb8590f9295828e25f8", "patch": "@@ -3857,12 +3857,27 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t     DEFERRED_NOEXCEPT_PATTERN (t2))\n \t      && comp_template_args (DEFERRED_NOEXCEPT_ARGS (t1),\n \t\t\t\t     DEFERRED_NOEXCEPT_ARGS (t2)));\n-      break;\n \n     case LAMBDA_EXPR:\n       /* Two lambda-expressions are never considered equivalent.  */\n       return false;\n \n+    case TYPE_ARGUMENT_PACK:\n+    case NONTYPE_ARGUMENT_PACK:\n+      {\n+\ttree p1 = ARGUMENT_PACK_ARGS (t1);\n+\ttree p2 = ARGUMENT_PACK_ARGS (t2);\n+\tint len = TREE_VEC_LENGTH (p1);\n+\tif (TREE_VEC_LENGTH (p2) != len)\n+\t  return false;\n+\n+\tfor (int ix = 0; ix != len; ix++)\n+\t  if (!template_args_equal (TREE_VEC_ELT (p1, ix),\n+\t\t\t\t    TREE_VEC_ELT (p2, ix)))\n+\t    return false;\n+\treturn true;\n+      }\n+\n     default:\n       break;\n     }"}, {"sha": "2a3243f3e813df6e542808c8b3301a8bb236c036", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9d2d283367a407c1ba9ecdb8590f9295828e25f8", "patch": "@@ -1485,6 +1485,10 @@ comptypes (tree t1, tree t2, int strict)\n {\n   gcc_checking_assert (t1 && t2);\n \n+  /* TYPE_ARGUMENT_PACKS are not really types.  */\n+  gcc_checking_assert (TREE_CODE (t1) != TYPE_ARGUMENT_PACK\n+\t\t       && TREE_CODE (t2) != TYPE_ARGUMENT_PACK);\n+\n   if (strict == COMPARE_STRICT && comparing_specializations\n       && (t1 != TYPE_CANONICAL (t1) || t2 != TYPE_CANONICAL (t2)))\n     /* If comparing_specializations, treat dependent aliases as distinct.  */"}, {"sha": "b4f2c36374d94ec3de345b1192c8caa3227443b1", "filename": "gcc/testsuite/g++.dg/concepts/pr93933.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93933.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2d283367a407c1ba9ecdb8590f9295828e25f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93933.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93933.C?ref=9d2d283367a407c1ba9ecdb8590f9295828e25f8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-fconcepts\" }\n+\n+// distilled from <concepts>, via header units\n+\n+template<typename _ArgTypes>\n+struct is_invocable;\n+\n+template<typename... _Args>\n+concept invocable = is_invocable<_Args...>::value;\n+\n+template<typename _Is>\n+requires invocable<_Is>\n+class BUG;\n+\n+template<typename _Is>\n+requires invocable<_Is>\n+class BUG {}; // { dg-bogus \"different constraints\" }\n+\n+template<int> struct is_invocable_NT;\n+\n+template<int... Ints>\n+concept invocable_NT = is_invocable_NT<Ints...>::value;\n+\n+template<int _Is>\n+requires invocable_NT<_Is>\n+class BUG_NT;\n+\n+template<int _Is>\n+requires invocable_NT<_Is>\n+class BUG_NT {};"}]}