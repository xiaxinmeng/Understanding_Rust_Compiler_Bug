{"sha": "394860586c4ea568a64497652df7dc318a0d734d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0ODYwNTg2YzRlYTU2OGE2NDQ5NzY1MmRmN2RjMzE4YTBkNzM0ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-08T12:30:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T12:30:30Z"}, "message": "sem_attr.adb (Eval_Attribute, case Width): Avoid ludicrous long loop for case of Wide_[Wide_]Character.\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute, case Width): Avoid ludicrous long loop\n\tfor case of Wide_[Wide_]Character.\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch3.adb: Minor reformating\n\tMinor code reorganization.\n\nFrom-SVN: r165166", "tree": {"sha": "bfef21a7dc1cd2c351f3169e1511b5422373c9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfef21a7dc1cd2c351f3169e1511b5422373c9a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394860586c4ea568a64497652df7dc318a0d734d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394860586c4ea568a64497652df7dc318a0d734d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394860586c4ea568a64497652df7dc318a0d734d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394860586c4ea568a64497652df7dc318a0d734d/comments", "author": null, "committer": null, "parents": [{"sha": "fe2eee8e2118c72fcafc1cd1d9efedb228fd4ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2eee8e2118c72fcafc1cd1d9efedb228fd4ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2eee8e2118c72fcafc1cd1d9efedb228fd4ca2"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "7ddaa66dc462f3c01a8d58a972930151961df678", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=394860586c4ea568a64497652df7dc318a0d734d", "patch": "@@ -1,3 +1,13 @@\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute, case Width): Avoid ludicrous long loop\n+\tfor case of Wide_[Wide_]Character.\n+\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch3.adb: Minor reformating\n+\tMinor code reorganization.\n+\n 2010-10-08  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Add missing checks on wrong use of"}, {"sha": "77a09eb4aae415d4ce6c5f7d83a68e7373c6aee8", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=394860586c4ea568a64497652df7dc318a0d734d", "patch": "@@ -5859,11 +5859,11 @@ package body Exp_Ch3 is\n    -------------------------------\n \n    procedure Expand_Freeze_Record_Type (N : Node_Id) is\n-      Def_Id        : constant Node_Id := Entity (N);\n-      Type_Decl     : constant Node_Id := Parent (Def_Id);\n-      Comp          : Entity_Id;\n-      Comp_Typ      : Entity_Id;\n-      Predef_List   : List_Id;\n+      Def_Id      : constant Node_Id := Entity (N);\n+      Type_Decl   : constant Node_Id := Parent (Def_Id);\n+      Comp        : Entity_Id;\n+      Comp_Typ    : Entity_Id;\n+      Predef_List : List_Id;\n \n       Flist : Entity_Id := Empty;\n       --  Finalization list allocated for the case of a type with anonymous\n@@ -5898,9 +5898,9 @@ package body Exp_Ch3 is\n       elsif Is_Derived_Type (Def_Id)\n         and then not Is_Tagged_Type (Def_Id)\n \n-         --  If we have a derived Unchecked_Union, we do not inherit the\n-         --  discriminant checking functions from the parent type since the\n-         --  discriminants are non existent.\n+        --  If we have a derived Unchecked_Union, we do not inherit the\n+        --  discriminant checking functions from the parent type since the\n+        --  discriminants are non existent.\n \n         and then not Is_Unchecked_Union (Def_Id)\n         and then Has_Discriminants (Def_Id)\n@@ -5938,7 +5938,6 @@ package body Exp_Ch3 is\n       --  declaration.\n \n       Comp := First_Component (Def_Id);\n-\n       while Present (Comp) loop\n          Comp_Typ := Etype (Comp);\n \n@@ -6010,14 +6009,14 @@ package body Exp_Ch3 is\n                --  Similarly, if this is an inherited operation whose parent is\n                --  not frozen yet, it is not in the DT of the parent, and we\n                --  generate an explicit freeze node for the inherited operation\n-               --  so that it is properly inserted in the DT of the current\n-               --  type.\n+               --  so it is properly inserted in the DT of the current type.\n \n                declare\n-                  Elmt : Elmt_Id := First_Elmt (Primitive_Operations (Def_Id));\n+                  Elmt : Elmt_Id;\n                   Subp : Entity_Id;\n \n                begin\n+                  Elmt := First_Elmt (Primitive_Operations (Def_Id));\n                   while Present (Elmt) loop\n                      Subp := Node (Elmt);\n \n@@ -6053,6 +6052,14 @@ package body Exp_Ch3 is\n             then\n                null;\n \n+            --  Do not add the spec of predefined primitives in case of\n+            --  CIL and Java tagged types\n+\n+            elsif Convention (Def_Id) = Convention_CIL\n+              or else Convention (Def_Id) = Convention_Java\n+            then\n+               null;\n+\n             --  Do not add the spec of the predefined primitives if we are\n             --  compiling under restriction No_Dispatching_Calls\n \n@@ -6179,7 +6186,6 @@ package body Exp_Ch3 is\n          declare\n             Comps : constant Node_Id :=\n                       Component_List (Type_Definition (Type_Decl));\n-\n          begin\n             if Present (Comps)\n               and then Present (Variant_Part (Comps))\n@@ -6247,11 +6253,10 @@ package body Exp_Ch3 is\n       end if;\n \n       --  For tagged type that are not interfaces, build bodies of primitive\n-      --  operations. Note that we do this after building the record\n-      --  initialization procedure, since the primitive operations may need\n-      --  the initialization routine. There is no need to add predefined\n-      --  primitives of interfaces because all their predefined primitives\n-      --  are abstract.\n+      --  operations. Note: do this after building the record initialization\n+      --  procedure, since the primitive operations may need the initialization\n+      --  routine. There is no need to add predefined primitives of interfaces\n+      --  because all their predefined primitives are abstract.\n \n       if Is_Tagged_Type (Def_Id)\n         and then not Is_Interface (Def_Id)\n@@ -6264,6 +6269,14 @@ package body Exp_Ch3 is\n          then\n             null;\n \n+         --  Do not add the body of predefined primitives in case of\n+         --  CIL and Java tagged types.\n+\n+         elsif Convention (Def_Id) = Convention_CIL\n+           or else Convention (Def_Id) = Convention_Java\n+         then\n+            null;\n+\n          --  Do not add the body of the predefined primitives if we are\n          --  compiling under restriction No_Dispatching_Calls or if we are\n          --  compiling a CPP tagged type."}, {"sha": "5302ebb8492eb677726ad9dc247aa292c9d189ea", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394860586c4ea568a64497652df7dc318a0d734d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=394860586c4ea568a64497652df7dc318a0d734d", "patch": "@@ -7410,7 +7410,11 @@ package body Sem_Attr is\n                         --  All wide characters look like Hex_hhhhhhhh\n \n                         if J > 255 then\n-                           W := 12;\n+\n+                           --  No need to compute this more than once!\n+\n+                           W := Int'Max (W, 12);\n+                           exit;\n \n                         else\n                            C := Character'Val (J);"}]}