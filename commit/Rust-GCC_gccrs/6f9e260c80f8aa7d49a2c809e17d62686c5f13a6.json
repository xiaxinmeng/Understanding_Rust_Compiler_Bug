{"sha": "6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5ZTI2MGM4MGY4YWE3ZDQ5YTJjODA5ZTE3ZDYyNjg2YzVmMTNhNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2012-06-28T07:39:25Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2012-06-28T07:39:25Z"}, "message": "re PR debug/53740 (--enable-checking=yes,rtl bootstrap failure with ada)\n\nPR debug/53740\nPR debug/52983\nPR debug/48866\n* dce.c (word_dce_process_block): Check whether inserting debug\ntemps are needed even for needed insns.\n(dce_process_block): Likewise.\n* df-problems.c (dead_debug_add): Add comment about multi-regs.\n(dead_debug_insert_temp): Likewise.  Don't subreg when we're\nsetting fewer regs than a multi-reg requires.\n\nFrom-SVN: r189036", "tree": {"sha": "5cb806a55543696d39711d3f54d8308c3a5c7ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb806a55543696d39711d3f54d8308c3a5c7ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/comments", "author": null, "committer": null, "parents": [{"sha": "b94a8a1239c4ec4ec50bbcd24fa85cae912b3a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94a8a1239c4ec4ec50bbcd24fa85cae912b3a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94a8a1239c4ec4ec50bbcd24fa85cae912b3a8e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9b5a0f317d2f2a0364fd426fcdd7296cb54de706", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "patch": "@@ -1,3 +1,15 @@\n+2012-06-28  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/53740\n+\tPR debug/52983\n+\tPR debug/48866\n+\t* dce.c (word_dce_process_block): Check whether inserting debug\n+\ttemps are needed even for needed insns.\n+\t(dce_process_block): Likewise.\n+\t* df-problems.c (dead_debug_add): Add comment about multi-regs.\n+\t(dead_debug_insert_temp): Likewise.  Don't subreg when we're\n+\tsetting fewer regs than a multi-reg requires.\n+\n 2012-06-27  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_dimode_u): New."}, {"sha": "2e58e4343565a7d06f8a02da0675cf83760fa7fc", "filename": "gcc/dce.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "patch": "@@ -864,9 +864,12 @@ word_dce_process_block (basic_block bb, bool redo_out)\n \t   anything in local_live.  */\n \tif (marked_insn_p (insn))\n \t  df_word_lr_simulate_uses (insn, local_live);\n+\n \t/* Insert debug temps for dead REGs used in subsequent debug\n-\t   insns.  */\n-\telse if (debug.used && !bitmap_empty_p (debug.used))\n+\t   insns.  We may have to emit a debug temp even if the insn\n+\t   was marked, in case the debug use was after the point of\n+\t   death.  */\n+\tif (debug.used && !bitmap_empty_p (debug.used))\n \t  {\n \t    df_ref *def_rec;\n \n@@ -963,9 +966,12 @@ dce_process_block (basic_block bb, bool redo_out, bitmap au)\n \t   anything in local_live.  */\n \tif (needed)\n \t  df_simulate_uses (insn, local_live);\n+\n \t/* Insert debug temps for dead REGs used in subsequent debug\n-\t   insns.  */\n-\telse if (debug.used && !bitmap_empty_p (debug.used))\n+\t   insns.  We may have to emit a debug temp even if the insn\n+\t   was marked, in case the debug use was after the point of\n+\t   death.  */\n+\tif (debug.used && !bitmap_empty_p (debug.used))\n \t  for (def_rec = DF_INSN_DEFS (insn); *def_rec; def_rec++)\n \t    dead_debug_insert_temp (&debug, DF_REF_REGNO (*def_rec), insn,\n \t\t\t\t    DEBUG_TEMP_BEFORE_WITH_VALUE);"}, {"sha": "7afbed982833ab84d74603ce797d5161c91627de", "filename": "gcc/df-problems.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e260c80f8aa7d49a2c809e17d62686c5f13a6/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=6f9e260c80f8aa7d49a2c809e17d62686c5f13a6", "patch": "@@ -3179,6 +3179,9 @@ dead_debug_add (struct dead_debug *debug, df_ref use, unsigned int uregno)\n   if (!debug->used)\n     debug->used = BITMAP_ALLOC (NULL);\n \n+  /* ??? If we dealt with split multi-registers below, we should set\n+     all registers for the used mode in case of hardware\n+     registers.  */\n   bitmap_set_bit (debug->used, uregno);\n }\n \n@@ -3269,6 +3272,15 @@ dead_debug_insert_temp (struct dead_debug *debug, unsigned int uregno,\n \t  /* Hmm...  Something's fishy, we should be setting REG here.  */\n \t  if (REGNO (dest) != REGNO (reg))\n \t    breg = NULL;\n+\t  /* If we're not overwriting all the hardware registers that\n+\t     setting REG in its mode would, we won't know what to bind\n+\t     the debug temp to.  ??? We could bind the debug_expr to a\n+\t     CONCAT or PARALLEL with the split multi-registers, and\n+\t     replace them as we found the corresponding sets.  */\n+\t  else if (REGNO (reg) < FIRST_PSEUDO_REGISTER\n+\t\t   && (hard_regno_nregs[REGNO (reg)][GET_MODE (reg)]\n+\t\t       != hard_regno_nregs[REGNO (reg)][GET_MODE (dest)]))\n+\t    breg = NULL;\n \t  /* Ok, it's the same (hardware) REG, but with a different\n \t     mode, so SUBREG it.  */\n \t  else"}]}