{"sha": "31dcf83f634339a70ec9b00f5a0045ab7beb6ad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkY2Y4M2Y2MzQzMzlhNzBlYzliMDBmNWEwMDQ1YWI3YmViNmFkMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-30T16:04:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-30T16:04:40Z"}, "message": "(cse_insn): Reset the INSN_CODE for conditional\nor computed jumps which have been converted into simplejumps.\n\nFrom-SVN: r4287", "tree": {"sha": "4c88082935d085705aa41bc7f5f552c65452daf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c88082935d085705aa41bc7f5f552c65452daf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0/comments", "author": null, "committer": null, "parents": [{"sha": "d096c372761b6e5ed57b75c90757594acbf7705f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096c372761b6e5ed57b75c90757594acbf7705f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d096c372761b6e5ed57b75c90757594acbf7705f"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "077a921c367fcf21b8338d59a9194c61a208d8fb", "filename": "gcc/cse.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dcf83f634339a70ec9b00f5a0045ab7beb6ad0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=31dcf83f634339a70ec9b00f5a0045ab7beb6ad0", "patch": "@@ -3598,7 +3598,8 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  /* A | (~A) -> -1 */\n \t  if (((GET_CODE (op0) == NOT && rtx_equal_p (XEXP (op0, 0), op1))\n \t       || (GET_CODE (op1) == NOT && rtx_equal_p (XEXP (op1, 0), op0)))\n-\t      && ! side_effects_p (op0))\n+\t      && ! side_effects_p (op0)\n+\t      && mode == CCmode)\n \t    return constm1_rtx;\n \t  break;\n \n@@ -3608,7 +3609,8 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  if (GET_CODE (op1) == CONST_INT\n \t      && (INTVAL (op1) & GET_MODE_MASK (mode)) == GET_MODE_MASK (mode))\n \t    return gen_rtx (NOT, mode, op0);\n-\t  if (op0 == op1 && ! side_effects_p (op0))\n+\t  if (op0 == op1 && ! side_effects_p (op0)\n+\t      && mode == CCmode)\n \t    return const0_rtx;\n \t  break;\n \n@@ -3618,7 +3620,8 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  if (GET_CODE (op1) == CONST_INT\n \t      && (INTVAL (op1) & GET_MODE_MASK (mode)) == GET_MODE_MASK (mode))\n \t    return op0;\n-\t  if (op0 == op1 && ! side_effects_p (op0))\n+\t  if (op0 == op1 && ! side_effects_p (op0)\n+\t      && mode == CCmode)\n \t    return op0;\n \t  /* A & (~A) -> 0 */\n \t  if (((GET_CODE (op0) == NOT && rtx_equal_p (XEXP (op0, 0), op1))\n@@ -4159,6 +4162,11 @@ simplify_relational_operation (code, mode, op0, op1)\n   if (GET_CODE (op0) == COMPARE && op1 == const0_rtx)\n     op1 = XEXP (op0, 1), op0 = XEXP (op0, 0);\n \n+  /* What to do with CCmode isn't clear yet.\n+     Let's make sure nothing erroneous is done.  */\n+  if (GET_MODE (op0) == CCmode)\n+    return 0;\n+\n   /* Unlike the arithmetic operations, we can do the comparison whether\n      or not WIDTH is larger than HOST_BITS_PER_WIDE_INT because the\n      CONST_INTs are to be understood as being infinite precision as\n@@ -6595,6 +6603,13 @@ cse_insn (insn, in_libcall_block)\n \t      delete_insn (insn);\n \t      insn = new;\n \t    }\n+\t  else\n+\t    /* Otherwise, force rerecognition, since it probably had\n+\t       a different pattern before.\n+\t       This shouldn't really be necessary, since whatever\n+\t       changed the source value above should have done this.\n+\t       Until the right place is found, might as well do this here.  */\n+\t    INSN_CODE (insn) = -1;\n \n \t  /* Now that we've converted this jump to an unconditional jump,\n \t     there is dead code after it.  Delete the dead code until we"}]}