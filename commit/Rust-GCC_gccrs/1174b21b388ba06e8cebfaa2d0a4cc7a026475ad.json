{"sha": "1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3NGIyMWIzODhiYTA2ZThjZWJmYWEyZDBhNGNjN2EwMjY0NzVhZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-05T13:25:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-05T13:25:47Z"}, "message": "gimple-ssa-split-paths.c (find_block_to_duplicate_for_splitting_pa): Handle empty else block.\n\n2016-07-05  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-ssa-split-paths.c (find_block_to_duplicate_for_splitting_pa):\n\tHandle empty else block.\n\t(is_feasible_trace): Likewise.\n\t(split_paths): Likewise.\n\nFrom-SVN: r238005", "tree": {"sha": "ffa712826d22dcc661c1a9c5070f48c9150ac4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa712826d22dcc661c1a9c5070f48c9150ac4a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16eba42015a33bf52f19e76eb491b98d99cac723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16eba42015a33bf52f19e76eb491b98d99cac723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16eba42015a33bf52f19e76eb491b98d99cac723"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "135fd5b678bd5de226dbd119a0e7e2a78cb8a455", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "patch": "@@ -1,3 +1,10 @@\n+2016-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-ssa-split-paths.c (find_block_to_duplicate_for_splitting_pa):\n+\tHandle empty else block.\n+\t(is_feasible_trace): Likewise.\n+\t(split_paths): Likewise.\n+\n 2016-07-05  Richard Biener  <rguenther@suse.de>\n \n \t* tree-loop-distribution.c (distribute_loop): Fix issue with"}, {"sha": "81705918179ec6e03f2c750e422a1bd0f32139cc", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "patch": "@@ -76,14 +76,19 @@ find_block_to_duplicate_for_splitting_paths (basic_block latch)\n \t    return NULL;\n \n \t  /* And that BB's immediate dominator's successors are the\n-\t     predecessors of BB.  */\n-\t  if (!find_edge (bb_idom, EDGE_PRED (bb, 0)->src)\n-\t      || !find_edge (bb_idom, EDGE_PRED (bb, 1)->src))\n+\t     predecessors of BB or BB itself.  */\n+\t  if (!(EDGE_PRED (bb, 0)->src == bb_idom\n+\t\t|| find_edge (bb_idom, EDGE_PRED (bb, 0)->src))\n+\t      || !(EDGE_PRED (bb, 1)->src == bb_idom\n+\t\t   || find_edge (bb_idom, EDGE_PRED (bb, 1)->src)))\n \t    return NULL;\n \n-\t  /* And that the predecessors of BB each have a single successor.  */\n-\t  if (!single_succ_p (EDGE_PRED (bb, 0)->src)\n-\t      || !single_succ_p (EDGE_PRED (bb, 1)->src))\n+\t  /* And that the predecessors of BB each have a single successor\n+\t     or are BB's immediate domiator itself.  */\n+\t  if (!(EDGE_PRED (bb, 0)->src == bb_idom\n+\t\t|| single_succ_p (EDGE_PRED (bb, 0)->src))\n+\t      || !(EDGE_PRED (bb, 1)->src == bb_idom\n+\t\t   || single_succ_p (EDGE_PRED (bb, 1)->src)))\n \t    return NULL;\n \n \t  /* So at this point we have a simple diamond for an IF-THEN-ELSE\n@@ -148,8 +153,10 @@ is_feasible_trace (basic_block bb)\n   basic_block pred1 = EDGE_PRED (bb, 0)->src;\n   basic_block pred2 = EDGE_PRED (bb, 1)->src;\n   int num_stmts_in_join = count_stmts_in_block (bb);\n-  int num_stmts_in_pred1 = count_stmts_in_block (pred1);\n-  int num_stmts_in_pred2 = count_stmts_in_block (pred2);\n+  int num_stmts_in_pred1\n+    = EDGE_COUNT (pred1->succs) == 1 ? count_stmts_in_block (pred1) : 0;\n+  int num_stmts_in_pred2\n+    = EDGE_COUNT (pred2->succs) == 1 ? count_stmts_in_block (pred2) : 0;\n \n   /* This is meant to catch cases that are likely opportunities for\n      if-conversion.  Essentially we look for the case where\n@@ -292,6 +299,8 @@ split_paths ()\n \t\t     \"Duplicating join block %d into predecessor paths\\n\",\n \t\t     bb->index);\n \t  basic_block pred0 = EDGE_PRED (bb, 0)->src;\n+\t  if (EDGE_COUNT (pred0->succs) != 1)\n+\t    pred0 = EDGE_PRED (bb, 1)->src;\n \t  transform_duplicate (pred0, bb);\n \t  changed = true;\n "}]}