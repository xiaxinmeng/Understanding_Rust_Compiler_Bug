{"sha": "cd0cb23271a815fa6472029791c76cd604e19708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwY2IyMzI3MWE4MTVmYTY0NzIwMjk3OTFjNzZjZDYwNGUxOTcwOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-24T11:26:04Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-24T11:26:04Z"}, "message": "[AArch64][3/5] Implement fusion of MOVK+MOVK\n\n\t* config/aarch64/aarch64.c (AARCH64_FUSE_MOVK_MOVK): Define.\n\t(cortexa53_tunings): Specify AARCH64_FUSE_MOVK_MOVK in fuseable_ops.\n\t(cortexa57_tunings): Likewise.\n\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_MOVK_MOVK.\n\nFrom-SVN: r218013", "tree": {"sha": "21494ff43b32bccc6f09070ef033e9a01c3ef53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21494ff43b32bccc6f09070ef033e9a01c3ef53b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0cb23271a815fa6472029791c76cd604e19708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0cb23271a815fa6472029791c76cd604e19708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0cb23271a815fa6472029791c76cd604e19708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0cb23271a815fa6472029791c76cd604e19708/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "892d9879a895ac23e8672a0817c4cfd0af253bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892d9879a895ac23e8672a0817c4cfd0af253bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892d9879a895ac23e8672a0817c4cfd0af253bca"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "d58c8c3593b288d86932cd197dab4c468d4281ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0cb23271a815fa6472029791c76cd604e19708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0cb23271a815fa6472029791c76cd604e19708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd0cb23271a815fa6472029791c76cd604e19708", "patch": "@@ -1,3 +1,10 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (AARCH64_FUSE_MOVK_MOVK): Define.\n+\t(cortexa53_tunings): Specify AARCH64_FUSE_MOVK_MOVK in fuseable_ops.\n+\t(cortexa57_tunings): Likewise.\n+\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_MOVK_MOVK.\n+\n 2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* sched-deps.c (sched_macro_fuse_insns): Do not check modified_in_p"}, {"sha": "5598b5b253edaeca100c98948a36068a5c66bf9a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0cb23271a815fa6472029791c76cd604e19708/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0cb23271a815fa6472029791c76cd604e19708/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cd0cb23271a815fa6472029791c76cd604e19708", "patch": "@@ -308,6 +308,7 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n #define AARCH64_FUSE_NOTHING\t(0)\n #define AARCH64_FUSE_MOV_MOVK\t(1 << 0)\n #define AARCH64_FUSE_ADRP_ADD\t(1 << 1)\n+#define AARCH64_FUSE_MOVK_MOVK\t(1 << 2)\n \n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n@@ -331,7 +332,7 @@ static const struct tune_params cortexa53_tunings =\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD))\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK))\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -342,7 +343,7 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 3),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD))\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK))\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -10455,6 +10456,36 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n+  if (simple_sets_p\n+      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_MOVK_MOVK))\n+    {\n+\n+      /* We're trying to match:\n+         prev (movk) == (set (zero_extract (reg r0)\n+                                           (const_int 16)\n+                                           (const_int 32))\n+                             (const_int imm16_1))\n+         curr (movk) == (set (zero_extract (reg r0)\n+                                           (const_int 16)\n+                                           (const_int 48))\n+                             (const_int imm16_2))  */\n+\n+      if (GET_CODE (SET_DEST (prev_set)) == ZERO_EXTRACT\n+          && GET_CODE (SET_DEST (curr_set)) == ZERO_EXTRACT\n+          && REG_P (XEXP (SET_DEST (prev_set), 0))\n+          && REG_P (XEXP (SET_DEST (curr_set), 0))\n+          && REGNO (XEXP (SET_DEST (prev_set), 0))\n+             == REGNO (XEXP (SET_DEST (curr_set), 0))\n+          && CONST_INT_P (XEXP (SET_DEST (prev_set), 2))\n+          && CONST_INT_P (XEXP (SET_DEST (curr_set), 2))\n+          && INTVAL (XEXP (SET_DEST (prev_set), 2)) == 32\n+          && INTVAL (XEXP (SET_DEST (curr_set), 2)) == 48\n+          && CONST_INT_P (SET_SRC (prev_set))\n+          && CONST_INT_P (SET_SRC (curr_set)))\n+        return true;\n+\n+    }\n+\n   return false;\n }\n "}]}