{"sha": "3facde269a04c33b91becb5cf4397fb69077895d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhY2RlMjY5YTA0YzMzYjkxYmVjYjVjZjQzOTdmYjY5MDc3ODk1ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-08T04:45:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-08T04:45:18Z"}, "message": "tree.c (tree_expr_nonnegative_p): New function.\n\n        * tree.c (tree_expr_nonnegative_p): New function.\n\n        * tree.h (tree_expr_nonnegative_p): Declare.\n\n        * c-typeck.c (build_binary_op): Call `tree_expr_nonnegative_p' to\n        elide some sign_compare warnings.\n        (build_conditional_expr): Likewise.\n\ncp:\n        * typeck.c (build_binary_op): Call `tree_expr_nonnegative_p' to elide\n        some sign_compare warnings.\n\nFrom-SVN: r33019", "tree": {"sha": "ffab24c880d3a50de4e3ea9bfc57f63e27c41487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffab24c880d3a50de4e3ea9bfc57f63e27c41487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3facde269a04c33b91becb5cf4397fb69077895d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3facde269a04c33b91becb5cf4397fb69077895d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3facde269a04c33b91becb5cf4397fb69077895d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3facde269a04c33b91becb5cf4397fb69077895d/comments", "author": null, "committer": null, "parents": [{"sha": "155d8a473c79aa5a557ee37306f83b28353b06d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155d8a473c79aa5a557ee37306f83b28353b06d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155d8a473c79aa5a557ee37306f83b28353b06d4"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "3ff67077c86bcb3238e6f47647b634e7eeddf27e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -1,3 +1,13 @@\n+2000-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree.c (tree_expr_nonnegative_p): New function.\n+\n+\t* tree.h (tree_expr_nonnegative_p): Declare.\n+\n+\t* c-typeck.c (build_binary_op): Call `tree_expr_nonnegative_p' to\n+\telide some sign_compare warnings.\n+\t(build_conditional_expr): Likewise.\n+\n Sat Apr  8 00:21:51 EDT 2000  John Wehle  (john@feith.com)\n \n \t* i386.md (ashrsi3, ashrhi3, ashrqi3): Fix typo."}, {"sha": "0d395a2b3d475c89d70ac416b4682b3c96a0ef72", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -2416,11 +2416,12 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t  else\n \t\t    sop = xop1, uop = xop0;\n \n-\t\t  /* Do not warn if the signed quantity is an unsuffixed\n-\t\t     integer literal (or some static constant expression\n-\t\t     involving such literals) and it is non-negative.  */\n-\t\t  if (TREE_CODE (sop) == INTEGER_CST\n-\t\t      && tree_int_cst_sgn (sop) >= 0)\n+\t\t  /* Do not warn if the signed quantity is an\n+\t\t     unsuffixed integer literal (or some static\n+\t\t     constant expression involving such literals or a\n+\t\t     conditional expression involving such literals)\n+\t\t     and it is non-negative.  */\n+\t\t  if (tree_expr_nonnegative_p (sop))\n \t\t    /* OK */;\n \t\t  /* Do not warn if the comparison is an equality operation,\n \t\t     the unsigned quantity is an integral constant, and it\n@@ -3383,10 +3384,8 @@ build_conditional_expr (ifexp, op1, op2)\n \t      /* Do not warn if the signed quantity is an unsuffixed\n \t\t integer literal (or some static constant expression\n \t\t involving such literals) and it is non-negative.  */\n-\t      else if ((unsigned_op2 && TREE_CODE (op1) == INTEGER_CST\n-\t\t\t&& tree_int_cst_sgn (op1) >= 0)\n-\t\t       || (unsigned_op1 && TREE_CODE (op2) == INTEGER_CST\n-\t\t\t   && tree_int_cst_sgn (op2) >= 0))\n+\t      else if ((unsigned_op2 && tree_expr_nonnegative_p (op1))\n+\t\t       || (unsigned_op1 && tree_expr_nonnegative_p (op2)))\n \t\t/* OK */;\n \t      else\n \t\twarning (\"signed and unsigned type in conditional expression\");"}, {"sha": "5759cb6604c925a4f92f81f266bf12cde3539ba3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -1,3 +1,8 @@\n+2000-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* typeck.c (build_binary_op): Call `tree_expr_nonnegative_p' to elide\n+\tsome sign_compare warnings.\n+\n 2000-04-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tRename abi::__vmi_class_type_info members."}, {"sha": "74f16b7a8adfe4750a2906a69b6c679e40eee6ab", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -3960,11 +3960,10 @@ build_binary_op (code, orig_op0, orig_op1)\n \t    /* OK */;\n \t  /* Do not warn if the signed quantity is an unsuffixed\n \t     integer literal (or some static constant expression\n+\t     involving such literals or a conditional expression\n \t     involving such literals) and it is non-negative.  */\n-\t  else if ((op0_signed && TREE_CODE (orig_op0) == INTEGER_CST\n-\t\t    && tree_int_cst_sgn (orig_op0) >= 0)\n-\t\t   || (op1_signed && TREE_CODE (orig_op1) == INTEGER_CST\n-\t\t       && tree_int_cst_sgn (orig_op1) >= 0))\n+\t  else if ((op0_signed && tree_expr_nonnegative_p (orig_op0))\n+\t\t   || (op1_signed && tree_expr_nonnegative_p (orig_op1)))\n \t    /* OK */;\n \t  /* Do not warn if the comparison is an equality operation,\n \t     the unsigned quantity is an integral constant and it does"}, {"sha": "66078e5646ad249970e44c6c77767b71c72e8dec", "filename": "gcc/tree.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -4370,6 +4370,25 @@ tree_int_cst_sgn (t)\n     return 1;\n }\n \n+/* Return true if `t' is known to be non-negative.  */\n+\n+int\n+tree_expr_nonnegative_p (t)\n+     tree t;\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_CST:\n+      return tree_int_cst_sgn (t) >= 0;\n+    case COND_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1))\n+\t&& tree_expr_nonnegative_p (TREE_OPERAND (t, 2));\n+    default:\n+      /* We don't know sign of `t', so be safe and return false.  */\n+      return 0;\n+    }\n+}\n+\n /* Compare two constructor-element-type constants.  Return 1 if the lists\n    are known to be equal; otherwise return 0.  */\n "}, {"sha": "033210251817bb07c2b8bf78411ad4eb3c3fd064", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facde269a04c33b91becb5cf4397fb69077895d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3facde269a04c33b91becb5cf4397fb69077895d", "patch": "@@ -1697,6 +1697,7 @@ extern int host_integerp\t\tPARAMS ((tree, int));\n extern HOST_WIDE_INT tree_low_cst\tPARAMS ((tree, int));\n extern int tree_int_cst_msb\t\tPARAMS ((tree));\n extern int tree_int_cst_sgn\t\tPARAMS ((tree));\n+extern int tree_expr_nonnegative_p\t\tPARAMS ((tree));\n extern int index_type_equal\t\tPARAMS ((tree, tree));\n extern tree get_inner_array_type\tPARAMS ((tree));\n "}]}