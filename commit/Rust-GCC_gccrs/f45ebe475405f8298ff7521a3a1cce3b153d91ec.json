{"sha": "f45ebe475405f8298ff7521a3a1cce3b153d91ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1ZWJlNDc1NDA1ZjgyOThmZjc1MjFhM2ExY2NlM2IxNTNkOTFlYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-01T17:53:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-01T17:53:12Z"}, "message": "O        Bring in changes from release branch (egcs_ss_971127).\n\nFrom-SVN: r16866", "tree": {"sha": "448a82241bdc2368d95925d23a0f1c36aad73a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/448a82241bdc2368d95925d23a0f1c36aad73a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45ebe475405f8298ff7521a3a1cce3b153d91ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45ebe475405f8298ff7521a3a1cce3b153d91ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45ebe475405f8298ff7521a3a1cce3b153d91ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45ebe475405f8298ff7521a3a1cce3b153d91ec/comments", "author": null, "committer": null, "parents": [{"sha": "7dfef6ed40301c60119e111e695e1ca1b02f439a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dfef6ed40301c60119e111e695e1ca1b02f439a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dfef6ed40301c60119e111e695e1ca1b02f439a"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "70a34a6c78f45286b4ee7a04de3c7203ec6ef7c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -10,6 +10,12 @@ Thu Nov 27 12:20:19 1997  Jeffrey A Law  (law@cygnus.com)\n \t* unroll.c (find_splittable_givs): Don't split givs with a dest_reg\n \tthat was created by loop.\n \n+Thu Nov 27 09:34:58 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* expr.c (preexpand_calls): Don't look past a TRY_CATCH_EXPR.\n+\n+\t* except.c (expand_start_all_catch): One more do_pending_stack_adjust.\n+\n Wed Nov 26 15:47:30 1997  Michael Meissner  <meissner@cygnus.com>\n \n \t* rs6000.c (SMALL_DATA_REG): Register to use for small data relocs.\n@@ -33,6 +39,11 @@ Wed Nov 26 11:12:26 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* toplev.c (main): Complain about -gdwarfn.\n \n+Tue Nov 25 22:43:30 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* dwarfout.c (output_type): If finalizing, write out nested types \n+\tof types we've already written.\n+\n Tue Nov 25 20:32:24 1997  Michael Meissner  <meissner@cygnus.com>\n \n \t(patches originally from Geoffrey Keating)\n@@ -73,6 +84,12 @@ Mon Nov 24 22:41:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t* optabs.c (init_optabs): Lose get_dynamic_handler_chain_libfunc.\n \t* expr.h: Likewise.\n \n+Sat Nov 22 18:58:20 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa-hpux10.h (NEW_HP_ASSEMBLER): Define.\n+\t* pa.h (LEGITIMATE_CONSTANT_P): Reject LABEL_REFs if not using\n+\tgas and not using the new HP assembler.\n+\n Fri Nov 21 15:20:05 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (program_transform_cross_name): Clean up \"-e\" confusion."}, {"sha": "c4b8ddd36dcce60606cf387bf463655dc5aa11a6", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -69,3 +69,6 @@ do {  \\\n #define MD_STARTFILE_PREFIX \"/usr/ccs/lib/\"\n #endif\n \n+/* hpux10 has the new HP assembler.  It's still lousy, but it's a whole lot\n+   better than the assembler shipped with older versions of hpux.  */\n+#define NEW_HP_ASSEMBLER"}, {"sha": "5944448a849c02eb1ea944076db76c53a6c10a06", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -1396,12 +1396,21 @@ extern struct rtx_def *hppa_builtin_saveregs ();\n    && (reload_in_progress || reload_completed || ! symbolic_expression_p (X)))\n \n /* Include all constant integers and constant doubles, but not\n-   floating-point, except for floating-point zero.  */\n+   floating-point, except for floating-point zero.\n \n+   Reject LABEL_REFs if we're not using gas or the new HP assembler.  */\n+#ifdef NEW_HP_ASSEMBLER\n #define LEGITIMATE_CONSTANT_P(X)  \t\t\\\n   ((GET_MODE_CLASS (GET_MODE (X)) != MODE_FLOAT\t\\\n     || (X) == CONST0_RTX (GET_MODE (X)))\t\\\n    && !function_label_operand (X, VOIDmode))\n+#else\n+#define LEGITIMATE_CONSTANT_P(X)  \t\t\\\n+  ((GET_MODE_CLASS (GET_MODE (X)) != MODE_FLOAT\t\\\n+    || (X) == CONST0_RTX (GET_MODE (X)))\t\\\n+   && (GET_CODE (X) != LABEL_REF || TARGET_GAS)\\\n+   && !function_label_operand (X, VOIDmode))\n+#endif\n \n /* Subroutine for EXTRA_CONSTRAINT.\n "}, {"sha": "77248f6d4367f859064b7f79809ed921fb5661fd", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -4193,7 +4193,22 @@ output_type (type, containing_scope)\n   type = type_main_variant (type);\n \n   if (TREE_ASM_WRITTEN (type))\n-    return;\n+    {\n+      if (finalizing && AGGREGATE_TYPE_P (type))\n+\t{\n+\t  register tree member;\n+\n+\t  /* Some of our nested types might not have been defined when we\n+\t     were written out before; force them out now.  */\n+\n+\t  for (member = TYPE_FIELDS (type); member;\n+\t       member = TREE_CHAIN (member))\n+\t    if (TREE_CODE (member) == TYPE_DECL\n+\t\t&& ! TREE_ASM_WRITTEN (TREE_TYPE (member)))\n+\t      output_type (TREE_TYPE (member), containing_scope);\n+\t}\n+      return;\n+    }\n \n   /* If this is a nested type whose containing class hasn't been\n      written out yet, writing it out will cover this one, too.  */"}, {"sha": "0b5ceecc8bc71b0f349a69c0e9ebcc87d2183dc9", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -1366,6 +1366,7 @@ expand_start_all_catch ()\n \t      expand_internal_throw (entry->outer_context);\n \t    }\n \t}\n+      do_pending_stack_adjust ();\n       free (entry);\n     }\n }"}, {"sha": "f07b3f674777bb4981a751d3d8417cfb9e661dca", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -10044,6 +10044,7 @@ preexpand_calls (exp)\n     case RTL_EXPR:\n     case WITH_CLEANUP_EXPR:\n     case CLEANUP_POINT_EXPR:\n+    case TRY_CATCH_EXPR:\n       return;\n \n     case SAVE_EXPR:"}, {"sha": "2bb3d99a4be5ccb0218e1e6a94238bba825b4d83", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ebe475405f8298ff7521a3a1cce3b153d91ec/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=f45ebe475405f8298ff7521a3a1cce3b153d91ec", "patch": "@@ -4518,6 +4518,7 @@ defaults.\n \n These @samp{-m} options are defined for the i386 family of computers:\n \n+@table @code\n @item -mcpu=@var{cpu type}\n Assume the defaults for the machine type @var{cpu type} when scheduling\n instructions.  The choices for @var{cpu type} are: @samp{i386},"}]}