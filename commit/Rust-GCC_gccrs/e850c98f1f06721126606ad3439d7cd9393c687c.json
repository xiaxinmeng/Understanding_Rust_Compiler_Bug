{"sha": "e850c98f1f06721126606ad3439d7cd9393c687c", "node_id": "C_kwDOANBUbNoAKGU4NTBjOThmMWYwNjcyMTEyNjYwNmFkMzQzOWQ3Y2Q5MzkzYzY4N2M", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-20T18:35:15Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-24T15:00:50Z"}, "message": "Convert some uses in ranger_cache and DOM to vrange.\n\nHere are a few conversions to type agnostic vrange I found while\nworking on frange.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-cache.cc (ranger_cache::edge_range): Convert to vrange.\n\t(ranger_cache::range_from_dom): Same.\n\t* tree-ssa-dom.cc\n\t(dom_opt_dom_walker::set_global_ranges_from_unreachable_edges): Same.", "tree": {"sha": "e0bad46f1eb4af2fced1363332da300eb49e2df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0bad46f1eb4af2fced1363332da300eb49e2df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e850c98f1f06721126606ad3439d7cd9393c687c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e850c98f1f06721126606ad3439d7cd9393c687c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e850c98f1f06721126606ad3439d7cd9393c687c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e850c98f1f06721126606ad3439d7cd9393c687c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d6224b944e1a66bfb1195fb7d35d9726f1aed8"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "d9e160c9a2a4e3e2317ed292f0ef59e17477b96d", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e850c98f1f06721126606ad3439d7cd9393c687c/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e850c98f1f06721126606ad3439d7cd9393c687c/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=e850c98f1f06721126606ad3439d7cd9393c687c", "patch": "@@ -960,7 +960,7 @@ ranger_cache::edge_range (vrange &r, edge e, tree name, enum rfd_mode mode)\n   // If this is not an abnormal edge, check for inferred ranges on exit.\n   if ((e->flags & (EDGE_EH | EDGE_ABNORMAL)) == 0)\n     m_exit.maybe_adjust_range (r, name, e->src);\n-  int_range_max er;\n+  Value_Range er (TREE_TYPE (name));\n   if (m_gori.outgoing_edge_range_p (er, e, name, *this))\n     r.intersect (er);\n   return true;\n@@ -1364,7 +1364,8 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n   basic_block prev_bb = start_bb;\n \n   // Track any inferred ranges seen.\n-  int_range_max infer (TREE_TYPE (name));\n+  Value_Range infer (TREE_TYPE (name));\n+  infer.set_varying (TREE_TYPE (name));\n \n   // Range on entry to the DEF block should not be queried.\n   gcc_checking_assert (start_bb != def_bb);\n@@ -1431,7 +1432,7 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n   // Now process any blocks wit incoming edges that nay have adjustemnts.\n   while (m_workback.length () > start_limit)\n     {\n-      int_range_max er;\n+      Value_Range er (TREE_TYPE (name));\n       prev_bb = m_workback.pop ();\n       if (!single_pred_p (prev_bb))\n \t{"}, {"sha": "44dc27b464cf2c1e93ec85441684fabfcf4f4c27", "filename": "gcc/tree-ssa-dom.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e850c98f1f06721126606ad3439d7cd9393c687c/gcc%2Ftree-ssa-dom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e850c98f1f06721126606ad3439d7cd9393c687c/gcc%2Ftree-ssa-dom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.cc?ref=e850c98f1f06721126606ad3439d7cd9393c687c", "patch": "@@ -1233,20 +1233,22 @@ dom_opt_dom_walker::set_global_ranges_from_unreachable_edges (basic_block bb)\n \n   gimple *stmt = last_stmt (pred_e->src);\n   tree name;\n-  int_range_max r;\n   if (stmt\n       && gimple_code (stmt) == GIMPLE_COND\n       && (name = gimple_cond_lhs (stmt))\n       && TREE_CODE (name) == SSA_NAME\n-      && r.supports_type_p (TREE_TYPE (name))\n       && assert_unreachable_fallthru_edge_p (pred_e)\n-      && all_uses_feed_or_dominated_by_stmt (name, stmt)\n-      && m_ranger->range_on_edge (r, pred_e, name)\n-      && !r.varying_p ()\n-      && !r.undefined_p ())\n+      && all_uses_feed_or_dominated_by_stmt (name, stmt))\n     {\n-      set_range_info (name, r);\n-      maybe_set_nonzero_bits (pred_e, name);\n+      Value_Range r (TREE_TYPE (name));\n+\n+      if (m_ranger->range_on_edge (r, pred_e, name)\n+\t  && !r.varying_p ()\n+\t  && !r.undefined_p ())\n+\t{\n+\t  set_range_info (name, r);\n+\t  maybe_set_nonzero_bits (pred_e, name);\n+\t}\n     }\n }\n "}]}