{"sha": "826c22dff6455ba324fea120be27c2be638f0b96", "node_id": "C_kwDOANBUbNoAKDgyNmMyMmRmZjY0NTViYTMyNGZlYTEyMGJlMjdjMmJlNjM4ZjBiOTY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-18T08:08:08Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-22T04:49:53Z"}, "message": "Some tidy up for RA related hooks.\n\n1. We also need to guard size of TO to be\nless than TARGET_SSE2 ? 2 : 4 in ix86_can_change_mode_class.\n2. Merge VALID_AVX512FP16_SCALAR_MODE plus BFmode\ninto VALID_AVX512F_SCALAR_MODE since we've support 16-bit data move\nabove SSE2, so no need for the condition of AVX512FP16 for those evex\nsse registers.\n3. Allocate DI/HImode to sse register for SSE2 above just like\nSImode since we've supported 16-bit data move between sse and gpr\nabove SSE2, this will help RA to handle cases like (subreg:HI (reg:V8HI)\n0) or else RA will spill it. This enable optimization for\npices-memset-{3,37,39}.c\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.cc (ix86_can_change_mode_class): Also guard\n\tsize of TO.\n\t(ix86_hard_regno_mode_ok): Remove VALID_AVX512FP16_SCALAR_MODE\n\t* config/i386/i386.h (VALID_AVX512FP16_SCALAR_MODE): Merged to\n\t..\n\t(VALID_AVX512F_SCALAR_MODE): .. this, also add HImode.\n\t(VALID_SSE_REG_MODE): Add DI/HImode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pieces-memset-3.c: Remove xfail.\n\t* gcc.target/i386/pieces-memset-37.c: Remove xfail.\n\t* gcc.target/i386/pieces-memset-39.c: Remove xfail.", "tree": {"sha": "0f12e325dec0ebb86c99c40cd3f6c1eaeeced48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f12e325dec0ebb86c99c40cd3f6c1eaeeced48a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826c22dff6455ba324fea120be27c2be638f0b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826c22dff6455ba324fea120be27c2be638f0b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826c22dff6455ba324fea120be27c2be638f0b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826c22dff6455ba324fea120be27c2be638f0b96/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20a3854c9f2923ac02c26385dac0c68f4df1e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20a3854c9f2923ac02c26385dac0c68f4df1e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20a3854c9f2923ac02c26385dac0c68f4df1e66"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "14719d397a42b028b7e5aae7841178cc5c496710", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=826c22dff6455ba324fea120be27c2be638f0b96", "patch": "@@ -19725,7 +19725,8 @@ ix86_can_change_mode_class (machine_mode from, machine_mode to,\n \t the vec_dupv4hi pattern.\n \t NB: SSE2 can load 16bit data to sse register via pinsrw.  */\n       int mov_size = MAYBE_SSE_CLASS_P (regclass) && TARGET_SSE2 ? 2 : 4;\n-      if (GET_MODE_SIZE (from) < mov_size)\n+      if (GET_MODE_SIZE (from) < mov_size\n+\t  || GET_MODE_SIZE (to) < mov_size)\n \treturn false;\n     }\n \n@@ -20089,12 +20090,6 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t      || VALID_AVX512F_SCALAR_MODE (mode)))\n \treturn true;\n \n-      /* For AVX512FP16, vmovw supports movement of HImode\n-\t and HFmode between GPR and SSE registers.  */\n-      if (TARGET_AVX512FP16\n-\t  && VALID_AVX512FP16_SCALAR_MODE (mode))\n-\treturn true;\n-\n       /* For AVX-5124FMAPS or AVX-5124VNNIW\n \t allow V64SF and V64SI modes for special regnos.  */\n       if ((TARGET_AVX5124FMAPS || TARGET_AVX5124VNNIW)\n@@ -20113,6 +20108,10 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if (EXT_REX_SSE_REGNO_P (regno))\n \treturn false;\n \n+      /* Use pinsrw/pextrw to mov 16-bit data from/to sse to/from integer.  */\n+      if (TARGET_SSE2 && mode == HImode)\n+\treturn true;\n+\n       /* OImode and AVX modes are available only when AVX is enabled.  */\n       return ((TARGET_AVX\n \t       && VALID_AVX256_REG_OR_OI_MODE (mode))"}, {"sha": "d865fcb9466832049418de2607652051e8b407ee", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=826c22dff6455ba324fea120be27c2be638f0b96", "patch": "@@ -1017,11 +1017,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode)\n \n #define VALID_AVX512F_SCALAR_MODE(MODE)\t\t\t\t\t\\\n-  ((MODE) == DImode || (MODE) == DFmode || (MODE) == SImode\t\t\\\n-   || (MODE) == SFmode)\n-\n-#define VALID_AVX512FP16_SCALAR_MODE(MODE)\t\\\n-  ((MODE) == HImode || (MODE) == HFmode)\n+  ((MODE) == DImode || (MODE) == DFmode\t\t\t\t\t\\\n+   || (MODE) == SImode || (MODE) == SFmode\t\t\t\t\\\n+   || (MODE) == HImode || (MODE) == HFmode || (MODE) == BFmode)\n \n #define VALID_AVX512F_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V8DImode || (MODE) == V8DFmode || (MODE) == V64QImode\t\\\n@@ -1045,13 +1043,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n    || (MODE) == V8BFmode || (MODE) == V4BFmode || (MODE) == V2BFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n-   || (MODE) == V2DImode || (MODE) == V2QImode || (MODE) == DFmode\t\\\n+   || (MODE) == V2DImode || (MODE) == V2QImode\t\t\t\t\\\n+   || (MODE) == DFmode\t|| (MODE) == DImode\t\t\t\t\\\n    || (MODE) == HFmode || (MODE) == BFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\t\t\\\n-   || (MODE) == SFmode || (MODE) == TFmode || (MODE) == TDmode)\n+   || (MODE) == SFmode || (MODE) == SImode\t\t\t\t\\\n+   || (MODE) == TFmode || (MODE) == TDmode)\n \n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n   ((MODE) == V2SFmode || (MODE) == SFmode)"}, {"sha": "431732afb8f86b393a0044f738942910090d5cf8", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-3.c?ref=826c22dff6455ba324fea120be27c2be638f0b96", "patch": "@@ -13,6 +13,6 @@ foo (int x)\n /* { dg-final { scan-assembler-times \"vinserti64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n /* No need to dynamically realign the stack here.  */\n-/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n /* Nor use a frame pointer.  */\n-/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" { xfail ia32 } } } */"}, {"sha": "5cc4d7749c36db4a7c824b8b32d7de8c4f8339c8", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-37.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-37.c?ref=826c22dff6455ba324fea120be27c2be638f0b96", "patch": "@@ -10,6 +10,6 @@ foo (int a1, int a2, int a3, int a4, int a5, int a6, int x, char *dst)\n /* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 2 } } */\n /* No need to dynamically realign the stack here.  */\n-/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n /* Nor use a frame pointer.  */\n /* { dg-final { scan-assembler-not \"%\\[re\\]bp\" { xfail *-*-* } } } */"}, {"sha": "862712733b1eb9c511ad08e6bc85832cca9c5832", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-39.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c22dff6455ba324fea120be27c2be638f0b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-39.c?ref=826c22dff6455ba324fea120be27c2be638f0b96", "patch": "@@ -11,6 +11,6 @@ foo (int a1, int a2, int a3, int a4, int a5, int a6, int x, char *dst)\n /* { dg-final { scan-assembler-not \"vinserti64x4\" } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n /* No need to dynamically realign the stack here.  */\n-/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n /* Nor use a frame pointer.  */\n /* { dg-final { scan-assembler-not \"%\\[re\\]bp\" { xfail *-*-* } } } */"}]}