{"sha": "d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4N2FlYzViZDIyY2QyOGMwZmRiZGM1MjIyYmZlZTZkYmQ0Y2YwMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-05-17T16:31:43Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-05-17T16:31:43Z"}, "message": "sh.c (output_option, [...]): Delete.\n\n\t* sh/sh.c (output_option, m_options, output_options): Delete.\n\t(output_file_start): Delete option output support.\n\nFrom-SVN: r12002", "tree": {"sha": "b05e4a164a5759c58275ed77e3051f2e1e776a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05e4a164a5759c58275ed77e3051f2e1e776a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03/comments", "author": null, "committer": null, "parents": [{"sha": "900cb721ce5d7991c5c5fc7e2d2dbbb50ac4cce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900cb721ce5d7991c5c5fc7e2d2dbbb50ac4cce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900cb721ce5d7991c5c5fc7e2d2dbbb50ac4cce0"}], "stats": {"total": 94, "additions": 1, "deletions": 93}, "files": [{"sha": "be8824aab7d630fe42d983d64f4b66088a4a43cc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d787aec5bd22cd28c0fdbdc5222bfee6dbd4cf03", "patch": "@@ -617,99 +617,11 @@ output_branch (logic, insn, operands)\n   return \"bad\";\n }\n \f\n-/* A copy of the option structure defined in toplev.c.  */\n-\n-struct option\n-{\n-  char *string;\n-  int *variable;\n-  int on_value;\n-};\n-\n-/* Output a single output option string NAME to FILE, without generating\n-   lines longer than MAX.  */\n-\n-static int\n-output_option (file, sep, type, name, indent, pos, max)\n-     FILE *file;\n-     char *sep;\n-     char *type;\n-     char *name;\n-     char *indent;\n-     int pos;\n-     int max;\n-{\n-  if (strlen (sep) + strlen (type) + strlen (name) + pos > max)\n-    {\n-      fprintf (file, indent);\n-      return fprintf (file, \"%s%s\", type, name);\n-    }\n-  return pos + fprintf (file, \"%s%s%s\", sep, type, name);\n-}\n-\n-/* A copy of the target_switches variable in toplev.c.  */\n-\n-static struct\n-{\n-  char *name;\n-  int value;\n-} m_options[] = TARGET_SWITCHES;\n-\n-/* Output all options to the assembly language file.  */\n-\n-static void\n-output_options (file, f_options, f_len, W_options, W_len,\n-\t\tpos, max, sep, indent, term)\n-     FILE *file;\n-     struct option *f_options;\n-     struct option *W_options;\n-     int f_len, W_len;\n-     int pos;\n-     int max;\n-     char *sep;\n-     char *indent;\n-     char *term;\n-{\n-  register int j;\n-\n-  if (optimize)\n-    pos = output_option (file, sep, \"-O\", \"\", indent, pos, max);\n-  if (write_symbols != NO_DEBUG)\n-    pos = output_option (file, sep, \"-g\", \"\", indent, pos, max);\n-  if (profile_flag)\n-    pos = output_option (file, sep, \"-p\", \"\", indent, pos, max);\n-  if (profile_block_flag)\n-    pos = output_option (file, sep, \"-a\", \"\", indent, pos, max);\n-\n-  for (j = 0; j < f_len; j++)\n-    if (*f_options[j].variable == f_options[j].on_value)\n-      pos = output_option (file, sep, \"-f\", f_options[j].string,\n-\t\t\t   indent, pos, max);\n-\n-  for (j = 0; j < W_len; j++)\n-    if (*W_options[j].variable == W_options[j].on_value)\n-      pos = output_option (file, sep, \"-W\", W_options[j].string,\n-\t\t\t   indent, pos, max);\n-\n-  for (j = 0; j < sizeof m_options / sizeof m_options[0]; j++)\n-    if (m_options[j].name[0] != '\\0'\n-\t&& m_options[j].value > 0\n-\t&& ((m_options[j].value & target_flags)\n-\t    == m_options[j].value))\n-      pos = output_option (file, sep, \"-m\", m_options[j].name,\n-\t\t\t   indent, pos, max);\n-\n-  fprintf (file, term);\n-}\n-\n /* Output to FILE the start of the assembler file.  */\n \n void\n-output_file_start (file, f_options, f_len, W_options, W_len)\n+output_file_start (file);\n      FILE *file;\n-     struct option *f_options;\n-     struct option *W_options;\n-     int f_len, W_len;\n {\n   register int pos;\n \n@@ -719,10 +631,6 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n      gcc2_compiled. symbol aren't in the text section.  */\n   data_section ();\n \n-  pos = fprintf (file, \"\\n! Hitachi SH cc1 (%s) arguments:\", version_string);\n-  output_options (file, f_options, f_len, W_options, W_len,\n-\t\t  pos, 75, \" \", \"\\n! \", \"\\n\\n\");\n-\n   if (TARGET_LITTLE_ENDIAN)\n     fprintf (file, \"\\t.little\\n\");\n }"}]}