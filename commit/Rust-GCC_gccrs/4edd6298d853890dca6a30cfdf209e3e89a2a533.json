{"sha": "4edd6298d853890dca6a30cfdf209e3e89a2a533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkZDYyOThkODUzODkwZGNhNmEzMGNmZGYyMDllM2U4OWEyYTUzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-12T13:28:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-12T13:28:27Z"}, "message": "Make more use of end_hard_regno\n\nAn upcoming patch will convert hard_regno_nregs into an inline\nfunction, which in turn allows hard_regno_nregs to be used as the\nname of a targetm field.  This patch rewrites uses that can use\nend_hard_regno instead.\n\n2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_hard_regno_mode_ok): Use\n\tend_hard_regno instead of hard_regno_nregs.\n\t* config/s390/s390.c (s390_reg_clobbered_rtx): Likewise.\n\t* config/sparc/sparc.h (ASM_DECLARE_REGISTER_GLOBAL): Likewise.\n\t* config/visium/visium.c (visium_hard_regno_mode_ok): Likewise.\n\t* ira-color.c (improve_allocation): Likewise.\n\t* lra-assigns.c (find_hard_regno_for_1): Likewise.\n\t* lra-lives.c (mark_regno_live): Likewise.\n\t(mark_regno_dead): Likewise.\n\t* lra-remat.c (operand_to_remat): Likewise.\n\t* lra.c (collect_non_operand_hard_regs): Likewise.\n\t* postreload.c (reload_combine_note_store): Likewise.\n\t(move2add_valid_value_p): Likewise.\n\t* reload.c (regno_clobbered_p): Likewise.\n\nFrom-SVN: r252012", "tree": {"sha": "cb773aeb0a0539470b01a2b8d572da3b6dfe2742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb773aeb0a0539470b01a2b8d572da3b6dfe2742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4edd6298d853890dca6a30cfdf209e3e89a2a533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4edd6298d853890dca6a30cfdf209e3e89a2a533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4edd6298d853890dca6a30cfdf209e3e89a2a533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4edd6298d853890dca6a30cfdf209e3e89a2a533/comments", "author": null, "committer": null, "parents": [{"sha": "036620db8a9f9e4d807de8ba07a7004aa02a9941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036620db8a9f9e4d807de8ba07a7004aa02a9941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036620db8a9f9e4d807de8ba07a7004aa02a9941"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "1652e723e60a68a62e818d4c2f9d40a1cfbeb0b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -1,3 +1,20 @@\n+2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_mode_ok): Use\n+\tend_hard_regno instead of hard_regno_nregs.\n+\t* config/s390/s390.c (s390_reg_clobbered_rtx): Likewise.\n+\t* config/sparc/sparc.h (ASM_DECLARE_REGISTER_GLOBAL): Likewise.\n+\t* config/visium/visium.c (visium_hard_regno_mode_ok): Likewise.\n+\t* ira-color.c (improve_allocation): Likewise.\n+\t* lra-assigns.c (find_hard_regno_for_1): Likewise.\n+\t* lra-lives.c (mark_regno_live): Likewise.\n+\t(mark_regno_dead): Likewise.\n+\t* lra-remat.c (operand_to_remat): Likewise.\n+\t* lra.c (collect_non_operand_hard_regs): Likewise.\n+\t* postreload.c (reload_combine_note_store): Likewise.\n+\t(move2add_valid_value_p): Likewise.\n+\t* reload.c (regno_clobbered_p): Likewise.\n+\n 2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/frv/frv.c (FOR_EACH_REGNO): Use END_REGNO instead of"}, {"sha": "3b1c9ef6000d2d6f86d24de04a001f57e017e381", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -1106,8 +1106,7 @@ aarch64_hard_regno_mode_ok (unsigned regno, machine_mode mode)\n   if (FP_REGNUM_P (regno))\n     {\n       if (aarch64_vect_struct_mode_p (mode))\n-\treturn\n-\t  (regno + aarch64_hard_regno_nregs (regno, mode) - 1) <= V31_REGNUM;\n+\treturn end_hard_regno (mode, regno) - 1 <= V31_REGNUM;\n       else\n \treturn true;\n     }"}, {"sha": "53082ecca649db3eff4c3f6bb5ec00a64561bc85", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -9630,7 +9630,7 @@ s390_reg_clobbered_rtx (rtx setreg, const_rtx set_insn ATTRIBUTE_UNUSED, void *d\n     return;\n \n   for (i = regno;\n-       i < regno + HARD_REGNO_NREGS (regno, mode);\n+       i < end_hard_regno (mode, regno);\n        i++)\n     regs_ever_clobbered[i] = 1;\n }"}, {"sha": "2ea539ebc2330721656c427097f9bc20e1a187e9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -1248,7 +1248,7 @@ extern GTY(()) char sparc_hard_reg_printed[8];\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      int end = HARD_REGNO_NREGS ((REGNO), DECL_MODE (decl)) + (REGNO); \\\n+      int end = end_hard_regno (DECL_MODE (decl), REGNO);\t\t\\\n       int reg;\t\t\t\t\t\t\t\t\\\n       for (reg = (REGNO); reg < 8 && reg < end; reg++)\t\t\t\\\n \tif ((reg & ~1) == 2 || (reg & ~1) == 6)\t\t\t\t\\"}, {"sha": "f3016f9bda7467e3c7f00f4baf5865d3f7126da5", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -857,7 +857,7 @@ static bool\n visium_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n {\n   if (GP_REGISTER_P (regno))\n-    return GP_REGISTER_P (regno + HARD_REGNO_NREGS (regno, mode) - 1);\n+    return GP_REGISTER_P (end_hard_regno (mode, regno) - 1);\n \n   if (FP_REGISTER_P (regno))\n     return mode == SFmode || (mode == SImode && TARGET_FPU_IEEE);"}, {"sha": "c0b0155ed53202663c6984fc39250aab6d9d1c4f", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -2893,7 +2893,7 @@ improve_allocation (void)\n \t      conflict_nregs\n \t\t= hard_regno_nregs[conflict_hregno][ALLOCNO_MODE (conflict_a)];\n \t      for (r = conflict_hregno;\n-\t\t   r >= 0 && r + hard_regno_nregs[r][mode] > conflict_hregno;\n+\t\t   r >= 0 && (int) end_hard_regno (mode, r) > conflict_hregno;\n \t\t   r--)\n \t\tif (check_hard_reg_p (a, r,\n \t\t\t\t      conflicting_regs, profitable_hard_regs))"}, {"sha": "d9000b9f6b208b733d7270a5e2aa694aae6d0bf7", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -578,7 +578,7 @@ find_hard_regno_for_1 (int regno, int *cost, int try_only_hard_regno,\n \t       hr++)\n \t    SET_HARD_REG_BIT (impossible_start_hard_regs, hr);\n \t  for (hr = conflict_hr - 1;\n-\t       hr >= 0 && hr + hard_regno_nregs[hr][biggest_mode] > conflict_hr;\n+\t       hr >= 0 && (int) end_hard_regno (biggest_mode, hr) > conflict_hr;\n \t       hr--)\n \t    SET_HARD_REG_BIT (impossible_start_hard_regs, hr);\n \t}"}, {"sha": "0a8f00b84a092d5742386576be66fac59ad11993", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -314,9 +314,7 @@ mark_regno_live (int regno, machine_mode mode, int point)\n \n   if (regno < FIRST_PSEUDO_REGISTER)\n     {\n-      for (last = regno + hard_regno_nregs[regno][mode];\n-\t   regno < last;\n-\t   regno++)\n+      for (last = end_hard_regno (mode, regno); regno < last; regno++)\n \tmake_hard_regno_born (regno, false);\n     }\n   else\n@@ -343,9 +341,7 @@ mark_regno_dead (int regno, machine_mode mode, int point)\n \n   if (regno < FIRST_PSEUDO_REGISTER)\n     {\n-      for (last = regno + hard_regno_nregs[regno][mode];\n-\t   regno < last;\n-\t   regno++)\n+      for (last = end_hard_regno (mode, regno); regno < last; regno++)\n \tmake_hard_regno_dead (regno);\n     }\n   else"}, {"sha": "efc9ae2d71589ecfae0ea3b7898034949e97bb0f", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -367,8 +367,7 @@ operand_to_remat (rtx_insn *insn)\n \t    if (reg2->type == OP_OUT\n \t\t&& reg->regno <= reg2->regno\n \t\t&& (reg2->regno\n-\t\t    < (reg->regno\n-\t\t       + hard_regno_nregs[reg->regno][reg->biggest_mode])))\n+\t\t    < (int) end_hard_regno (reg->biggest_mode, reg->regno)))\n \t      return -1;\n       }\n   /* Check hard coded insn registers.  */"}, {"sha": "a4737773b6e8fa74f58ed31340b4d6a32f623cb8", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -846,9 +846,7 @@ collect_non_operand_hard_regs (rtx *x, lra_insn_recog_data_t data,\n \treturn list;\n       /* Process all regs even unallocatable ones as we need info\n \t about all regs for rematerialization pass.  */\n-      for (last = regno + hard_regno_nregs[regno][mode];\n-\t   regno < last;\n-\t   regno++)\n+      for (last = end_hard_regno (mode, regno); regno < last; regno++)\n \t{\n \t  for (curr = list; curr != NULL; curr = curr->next)\n \t    if (curr->regno == regno && curr->subreg_p == subreg_p"}, {"sha": "21312df0915b4f8737617bd9cbf187903d71a601", "filename": "gcc/postreload.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -1453,7 +1453,7 @@ reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n   if (GET_CODE (SET_DEST (set)) == ZERO_EXTRACT\n       || GET_CODE (SET_DEST (set)) == STRICT_LOW_PART)\n     {\n-      for (i = hard_regno_nregs[regno][mode] - 1 + regno; i >= regno; i--)\n+      for (i = end_hard_regno (mode, regno) - 1; i >= regno; i--)\n \t{\n \t  reg_state[i].use_index = -1;\n \t  reg_state[i].store_ruid = reload_combine_ruid;\n@@ -1462,7 +1462,7 @@ reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n     }\n   else\n     {\n-      for (i = hard_regno_nregs[regno][mode] - 1 + regno; i >= regno; i--)\n+      for (i = end_hard_regno (mode, regno) - 1; i >= regno; i--)\n \t{\n \t  reg_state[i].store_ruid = reload_combine_ruid;\n \t  if (GET_CODE (set) == SET)\n@@ -1717,8 +1717,8 @@ move2add_valid_value_p (int regno, scalar_int_mode mode)\n \treturn false;\n     }\n \n-  for (int i = hard_regno_nregs[regno][mode] - 1; i > 0; i--)\n-    if (reg_mode[regno + i] != BLKmode)\n+  for (int i = end_hard_regno (mode, regno) - 1; i > regno; i--)\n+    if (reg_mode[i] != BLKmode)\n       return false;\n   return true;\n }"}, {"sha": "141d53ad09ccdd511a603147546d102c1f394305", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edd6298d853890dca6a30cfdf209e3e89a2a533/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=4edd6298d853890dca6a30cfdf209e3e89a2a533", "patch": "@@ -7180,13 +7180,10 @@ int\n regno_clobbered_p (unsigned int regno, rtx_insn *insn, machine_mode mode,\n \t\t   int sets)\n {\n-  unsigned int nregs, endregno;\n-\n   /* regno must be a hard register.  */\n   gcc_assert (regno < FIRST_PSEUDO_REGISTER);\n \n-  nregs = hard_regno_nregs[regno][mode];\n-  endregno = regno + nregs;\n+  unsigned int endregno = end_hard_regno (mode, regno);\n \n   if ((GET_CODE (PATTERN (insn)) == CLOBBER\n        || (sets == 1 && GET_CODE (PATTERN (insn)) == SET))"}]}