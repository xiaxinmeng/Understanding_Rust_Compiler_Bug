{"sha": "b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNTU3N2I1OWNjM2E2ZTIxNmY5YTBjYjk1MTdhNDYzOWY5MzBhZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-15T17:11:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-15T17:14:02Z"}, "message": "Add HIR Lowering for TraitObjectTypeOneBound\n\nThis uses a little bit of a hack to get a plain old object for the\nTraitBound but we need to create an issue to refactor and remove the clone\nsupport for these types to be able to cleanup this work to use a simple\nstd::unique_ptr.\n\nAddresses #197", "tree": {"sha": "e909674ca5dac049fede09a6bf003727a04906ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e909674ca5dac049fede09a6bf003727a04906ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ebfd300bd6440880768e25edf876c158b78d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ebfd300bd6440880768e25edf876c158b78d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ebfd300bd6440880768e25edf876c158b78d4f"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "fd0fa5366798a907b1f9f785bd70db2c9100c9c4", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "patch": "@@ -367,6 +367,8 @@ class TraitObjectTypeOneBound : public TypeNoBounds\n     // TODO: check to ensure invariants are met?\n     return trait_bound;\n   }\n+\n+  bool is_dyn () const { return has_dyn; }\n };\n \n class TypePath; // definition moved to \"rust-path.h\""}, {"sha": "611c8448a252ed7909f85820bd79f31db6a2a66b", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "patch": "@@ -289,6 +289,8 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+\n private:\n   ASTLoweringType () : ASTLoweringBase (), translated (nullptr) {}\n "}, {"sha": "ed0774c50761c3be2776eb77f56ac39387867fb2", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "patch": "@@ -515,6 +515,29 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n   mappings->insert_hir_type (crate_num, hirid, translated);\n }\n \n+void\n+ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n+{\n+  HIR::TypeParamBound *b\n+    = ASTLoweringTypeBounds::translate (&type.get_trait_bound ());\n+  rust_assert (b->get_bound_type () == HIR::TypeParamBound::TRAITBOUND);\n+  HIR::TraitBound *bb = static_cast<HIR::TraitBound *> (b);\n+  HIR::TraitBound bound (*bb);\n+  delete bb;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::TraitObjectTypeOneBound (mapping, std::move (bound),\n+\t\t\t\t\ttype.get_locus (), type.is_dyn ());\n+\n+  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     translated);\n+}\n+\n // rust-ast-lower-base\n \n HIR::Type *"}, {"sha": "0428a7a6e0c810a3eef13171bcc650f32586de17", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5577b59cc3a6e216f9a0cb9517a4639f930ae/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=b3d5577b59cc3a6e216f9a0cb9517a4639f930ae", "patch": "@@ -310,45 +310,38 @@ class TraitObjectTypeOneBound : public TypeNoBounds\n {\n   bool has_dyn;\n   TraitBound trait_bound;\n-\n   Location locus;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n   TraitObjectTypeOneBound *clone_type_impl () const override\n   {\n-    return new TraitObjectTypeOneBound (*this);\n+    return new TraitObjectTypeOneBound (mappings, trait_bound, locus, has_dyn);\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n   TraitObjectTypeOneBound *clone_type_no_bounds_impl () const override\n   {\n-    return new TraitObjectTypeOneBound (*this);\n+    return new TraitObjectTypeOneBound (mappings, trait_bound, locus, has_dyn);\n   }\n \n public:\n   TraitObjectTypeOneBound (Analysis::NodeMapping mappings,\n \t\t\t   TraitBound trait_bound, Location locus,\n-\t\t\t   bool is_dyn_dispatch = false)\n+\t\t\t   bool is_dyn_dispatch)\n     : TypeNoBounds (mappings), has_dyn (is_dyn_dispatch),\n       trait_bound (std::move (trait_bound)), locus (locus)\n   {}\n \n   std::string as_string () const override;\n \n-  // Creates a trait bound (clone of this one's trait bound) - HACK\n-  TraitBound *to_trait_bound (bool in_parens ATTRIBUTE_UNUSED) const override\n-  {\n-    /* NOTE: this assumes there is no dynamic dispatch specified- if there was,\n-     * this cloning would not be required as parsing is unambiguous. */\n-    return new HIR::TraitBound (trait_bound);\n-  }\n-\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n+\n+  TraitBound &get_trait_bound () { return trait_bound; }\n };\n \n class TypePath; // definition moved to \"rust-path.h\""}]}