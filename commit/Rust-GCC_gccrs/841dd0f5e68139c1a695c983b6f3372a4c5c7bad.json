{"sha": "841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxZGQwZjVlNjgxMzljMWE2OTVjOTgzYjZmMzM3MmE0YzVjN2JhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T07:15:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T07:15:42Z"}, "message": "[multiple changes]\n\n2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_util.adb (Find_Interface_ADT): Retrieve Designated_Type instead of\n\tDirectly_Designated_Type when the type argument is an access type.\n\t(Find_Interface_Tag): Retrieve Designated_Type instead of\n\tDirectly_Designated_Type when the type argument is an access type.\n\t(Has_Controlled_Coextensions): Retrieve Designated_Type instead of\n\tDirectly_Designated_Type of each access discriminant.\n\t* sem_res.adb (Resolve_Type_Conversion): Retrieve Designated_Type\n\tinstead of Directly_Designated_Type when the operand and target types\n\tare access types.\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_aggr.adb (Flatten): Return False if one choice is statically\n\tknown to be out of bounds.\n\nFrom-SVN: r161137", "tree": {"sha": "f305957525805e053d232bcc80e2285f8c3acb22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f305957525805e053d232bcc80e2285f8c3acb22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/comments", "author": null, "committer": null, "parents": [{"sha": "196379c6f705582c047916b79e0ea1feded3b9cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196379c6f705582c047916b79e0ea1feded3b9cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196379c6f705582c047916b79e0ea1feded3b9cf"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "a1621e1cbfc56c12db57dba4ac334b7ef10b6516", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "patch": "@@ -1,3 +1,20 @@\n+2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Find_Interface_ADT): Retrieve Designated_Type instead of\n+\tDirectly_Designated_Type when the type argument is an access type.\n+\t(Find_Interface_Tag): Retrieve Designated_Type instead of\n+\tDirectly_Designated_Type when the type argument is an access type.\n+\t(Has_Controlled_Coextensions): Retrieve Designated_Type instead of\n+\tDirectly_Designated_Type of each access discriminant.\n+\t* sem_res.adb (Resolve_Type_Conversion): Retrieve Designated_Type\n+\tinstead of Directly_Designated_Type when the operand and target types\n+\tare access types.\n+\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.adb (Flatten): Return False if one choice is statically\n+\tknown to be out of bounds.\n+\n 2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): If the call is rewritten as an indexed of"}, {"sha": "c15b92282e3ef29e857f0bfd949f54a8815475b0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -173,14 +173,14 @@ package body Exp_Aggr is\n    -----------------------------------------------------\n \n    function Aggr_Size_OK (N : Node_Id; Typ : Entity_Id) return Boolean;\n-   --  Very large static aggregates present problems to the back-end, and\n-   --  are transformed into assignments and loops. This function verifies\n-   --  that the total number of components of an aggregate is acceptable\n-   --  for transformation into a purely positional static form. It is called\n-   --  prior to calling Flatten.\n-   --  This function also detects and warns about one-component aggregates\n-   --  that appear in a non-static context. Even if the component value is\n-   --  static, such an aggregate must be expanded into an assignment.\n+   --  Very large static aggregates present problems to the back-end, and are\n+   --  transformed into assignments and loops. This function verifies that the\n+   --  total number of components of an aggregate is acceptable for rewriting\n+   --  into a purely positional static form. It is called prior to calling\n+   --  Flatten.\n+   --  This function also detects and warns about one-component aggregates that\n+   --  appear in a non-static context. Even if the component value is static,\n+   --  such an aggregate must be expanded into an assignment.\n \n    procedure Convert_Array_Aggr_In_Allocator\n      (Decl   : Node_Id;\n@@ -3782,10 +3782,11 @@ package body Exp_Aggr is\n             Rep_Count : Nat;\n             --  Used to validate Max_Others_Replicate limit\n \n-            Elmt   : Node_Id;\n-            Num    : Int := UI_To_Int (Lov);\n-            Choice : Node_Id;\n-            Lo, Hi : Node_Id;\n+            Elmt         : Node_Id;\n+            Num          : Int := UI_To_Int (Lov);\n+            Choice_Index : Int;\n+            Choice       : Node_Id;\n+            Lo, Hi       : Node_Id;\n \n          begin\n             if Present (Expressions (N)) then\n@@ -3911,9 +3912,18 @@ package body Exp_Aggr is\n                         return False;\n \n                      else\n-                        Vals (UI_To_Int (Expr_Value (Choice))) :=\n-                          New_Copy_Tree (Expression (Elmt));\n-                        goto Continue;\n+                        Choice_Index := UI_To_Int (Expr_Value (Choice));\n+                        if Choice_Index in Vals'Range then\n+                           Vals (Choice_Index) :=\n+                             New_Copy_Tree (Expression (Elmt));\n+                           goto Continue;\n+\n+                        else\n+                           --  Choice is statically out-of-range, will be\n+                           --  rewritten to raise Constraint_Error.\n+\n+                           return False;\n+                        end if;\n                      end if;\n                   end if;\n "}, {"sha": "df70651480ccb529f0348e7eae2ad3f97080bde4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "patch": "@@ -1487,7 +1487,7 @@ package body Exp_Util is\n       --  Handle access types\n \n       if Is_Access_Type (Typ) then\n-         Typ := Directly_Designated_Type (Typ);\n+         Typ := Designated_Type (Typ);\n       end if;\n \n       --  Handle task and protected types implementing interfaces\n@@ -1594,7 +1594,7 @@ package body Exp_Util is\n       --  Handle access types\n \n       if Is_Access_Type (Typ) then\n-         Typ := Directly_Designated_Type (Typ);\n+         Typ := Designated_Type (Typ);\n       end if;\n \n       --  Handle class-wide types\n@@ -2129,9 +2129,9 @@ package body Exp_Util is\n \n             if Ekind (D_Typ) = E_Anonymous_Access_Type\n               and then\n-                (Is_Controlled (Directly_Designated_Type (D_Typ))\n+                (Is_Controlled (Designated_Type (D_Typ))\n                    or else\n-                 Is_Concurrent_Type (Directly_Designated_Type (D_Typ)))\n+                 Is_Concurrent_Type (Designated_Type (D_Typ)))\n             then\n                return True;\n             end if;"}, {"sha": "a6b9d3a0549696ebe3819b9e1a8ac8f5f641912d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841dd0f5e68139c1a695c983b6f3372a4c5c7bad/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "patch": "@@ -218,7 +218,7 @@ package body Sem_Res is\n    --  A call to a user-defined intrinsic operator is rewritten as a call\n    --  to the corresponding predefined operator, with suitable conversions.\n    --  Note that this applies only for intrinsic operators that denote\n-   --  predefined operators, not opeartors that are intrinsic imports of\n+   --  predefined operators, not operators that are intrinsic imports of\n    --  back-end builtins.\n \n    procedure Resolve_Intrinsic_Unary_Operator (N : Node_Id; Typ : Entity_Id);\n@@ -4625,7 +4625,7 @@ package body Sem_Res is\n \n          --  If the context is Universal_Fixed and the operands are also\n          --  universal fixed, this is an error, unless there is only one\n-         --  applicable fixed_point type (usually duration).\n+         --  applicable fixed_point type (usually Duration).\n \n          if B_Typ = Universal_Fixed and then Etype (L) = Universal_Fixed then\n             T := Unique_Fixed_Point_Type (N);\n@@ -8608,11 +8608,11 @@ package body Sem_Res is\n \n          begin\n             if Is_Access_Type (Opnd) then\n-               Opnd := Directly_Designated_Type (Opnd);\n+               Opnd := Designated_Type (Opnd);\n             end if;\n \n             if Is_Access_Type (Target_Typ) then\n-               Target := Directly_Designated_Type (Target);\n+               Target := Designated_Type (Target);\n             end if;\n \n             if Opnd = Target then"}]}