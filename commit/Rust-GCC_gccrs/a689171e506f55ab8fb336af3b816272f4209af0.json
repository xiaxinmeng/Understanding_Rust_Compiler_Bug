{"sha": "a689171e506f55ab8fb336af3b816272f4209af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4OTE3MWU1MDZmNTVhYjhmYjMzNmFmM2I4MTYyNzJmNDIwOWFmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-04-23T20:19:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-04-23T20:19:39Z"}, "message": "re PR middle-end/85496 (internal compiler error: in emit_move_insn, at expr.c:3722)\n\n\tPR middle-end/85496\n\t* expr.c (store_field): In the bitfield case, if the value comes from\n\ta function call and is returned in registers by means of a PARALLEL,\n\tdo not change the mode of the temporary unless BLKmode and VOIDmode.\n\nFrom-SVN: r259574", "tree": {"sha": "9f62d5a18312e9395a702a2f51c84dabac0256ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f62d5a18312e9395a702a2f51c84dabac0256ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a689171e506f55ab8fb336af3b816272f4209af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a689171e506f55ab8fb336af3b816272f4209af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a689171e506f55ab8fb336af3b816272f4209af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a689171e506f55ab8fb336af3b816272f4209af0/comments", "author": null, "committer": null, "parents": [{"sha": "53de8a7e13cae771fdcda36abee4787bd6575ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53de8a7e13cae771fdcda36abee4787bd6575ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53de8a7e13cae771fdcda36abee4787bd6575ed7"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "833601a038e2965744652543639c80295c540ac8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a689171e506f55ab8fb336af3b816272f4209af0", "patch": "@@ -1,9 +1,15 @@\n-2018-04-23  Andrey Belevantsev  <abel@ispras.ru>\n+2018-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/85496\n+\t* expr.c (store_field): In the bitfield case, if the value comes from\n+\ta function call and is returned in registers by means of a PARALLEL,\n+\tdo not change the mode of the temporary unless BLKmode and VOIDmode.\n \n-        PR rtl-optimization/85423\n+2018-04-23  Andrey Belevantsev  <abel@ispras.ru>\n \n-        * sel-sched-ir.c (has_dependence_note_mem_dep): Only discard\n-        dependencies to debug insns when the previous insn is non-debug.\n+\tPR rtl-optimization/85423\n+\t* sel-sched-ir.c (has_dependence_note_mem_dep): Only discard\n+\tdependencies to debug insns when the previous insn is non-debug.\n \n 2018-04-23  Claudiu Zissulescu  <claziss@synopsys.com>\n "}, {"sha": "c9e6bf228a41bcf5929030186e9fa11029759882", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a689171e506f55ab8fb336af3b816272f4209af0", "patch": "@@ -6989,8 +6989,9 @@ store_field (rtx target, poly_int64 bitsize, poly_int64 bitpos,\n       if (GET_CODE (temp) == PARALLEL)\n \t{\n \t  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (exp));\n-\t  scalar_int_mode temp_mode\n-\t    = smallest_int_mode_for_size (size * BITS_PER_UNIT);\n+\t  machine_mode temp_mode = GET_MODE (temp);\n+\t  if (temp_mode == BLKmode || temp_mode == VOIDmode)\n+\t    temp_mode = smallest_int_mode_for_size (size * BITS_PER_UNIT);\n \t  rtx temp_target = gen_reg_rtx (temp_mode);\n \t  emit_group_store (temp_target, temp, TREE_TYPE (exp), size);\n \t  temp = temp_target;"}, {"sha": "b1dfe4bdb38b97d58291792ee88338b0a390eebe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a689171e506f55ab8fb336af3b816272f4209af0", "patch": "@@ -1,7 +1,11 @@\n+2018-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/torture/pr85496.C: New test.\n+\n 2018-04-23  Andrey Belevantsev  <abel@ispras.ru>\n \n-        PR rtl-optimization/85423\n-        * gcc.dg/pr85423.c: New test.\n+\tPR rtl-optimization/85423\n+\t* gcc.dg/pr85423.c: New test.\n \n 2018-04-20  Martin Sebor  <msebor@redhat.com>\n "}, {"sha": "3f504a377914ea7ee0080ce82da91c01bd7c527e", "filename": "gcc/testsuite/g++.dg/torture/pr85496.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85496.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a689171e506f55ab8fb336af3b816272f4209af0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85496.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85496.C?ref=a689171e506f55ab8fb336af3b816272f4209af0", "patch": "@@ -0,0 +1,18 @@\n+// PR middle-end/85496\n+// Reported by Marek Polacek <mpolacek@gcc.gnu.org>\n+\n+template <typename> class complex;\n+template <typename _Tp> complex<_Tp> operator*(complex<_Tp>, complex<_Tp>);\n+template <> struct complex<float> { _Complex float _M_value; };\n+class A {\n+  complex<float> _f0, _f1;\n+\n+public:\n+  complex<float> &m_fn1() { return _f1; }\n+};\n+complex<float> a;\n+void cos() {\n+  A b;\n+  complex<float> c;\n+  b.m_fn1() = c * a;\n+}"}]}