{"sha": "fc5295fa6af5d1f71b476500988c0739846ce348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1Mjk1ZmE2YWY1ZDFmNzFiNDc2NTAwOTg4YzA3Mzk4NDZjZTM0OA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2002-09-27T18:27:44Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-09-27T18:27:44Z"}, "message": "expr.c (build_java_array_length_access): Check for null pointer.\n\n2002-09-26  Andrew Haley  <aph@redhat.com>\n\n\t* expr.c (build_java_array_length_access): Check for null pointer.\n\t* expr.c (expand_java_arrayload): Likewise.\n\nFrom-SVN: r57591", "tree": {"sha": "14791d5379a12f2c854f9406cda926a0e922573b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14791d5379a12f2c854f9406cda926a0e922573b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5295fa6af5d1f71b476500988c0739846ce348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5295fa6af5d1f71b476500988c0739846ce348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5295fa6af5d1f71b476500988c0739846ce348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5295fa6af5d1f71b476500988c0739846ce348/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23b8ba8182bafbb4ad3c4477b6a4063544165a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b8ba8182bafbb4ad3c4477b6a4063544165a47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b8ba8182bafbb4ad3c4477b6a4063544165a47"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "620543a5ca2fe6fee260da8aa4e8f8ea833d5be5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5295fa6af5d1f71b476500988c0739846ce348/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5295fa6af5d1f71b476500988c0739846ce348/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fc5295fa6af5d1f71b476500988c0739846ce348", "patch": "@@ -1,3 +1,8 @@\n+2002-09-26  Andrew Haley  <aph@redhat.com>\n+\n+\t* expr.c (build_java_array_length_access): Check for null pointer.\n+\t* expr.c (expand_java_arrayload): Likewise.\n+\n 2002-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* jcf-parse.c (get_constant): Decode from IEEE no matter "}, {"sha": "0c434e96d5fac48722f39486c7faac046142e0d5", "filename": "gcc/java/expr.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5295fa6af5d1f71b476500988c0739846ce348/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5295fa6af5d1f71b476500988c0739846ce348/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=fc5295fa6af5d1f71b476500988c0739846ce348", "patch": "@@ -675,6 +675,15 @@ build_java_array_length_access (node)\n   tree array_type = TREE_TYPE (type);\n   HOST_WIDE_INT length;\n \n+  /* JVM spec: If the arrayref is null, the arraylength instruction\n+     throws a NullPointerException.  The only way we could get a node\n+     of type ptr_type_node at this point is `aconst_null; arraylength'\n+     or something equivalent.  */\n+  if (type == ptr_type_node)\n+    return build (CALL_EXPR, int_type_node, \n+\t\t  build_address_of (soft_nullpointer_node),\n+\t\t  NULL_TREE, NULL_TREE);\n+\n   if (!is_array_type_p (type))\n     abort ();\n \n@@ -1028,12 +1037,21 @@ expand_java_arrayload (lhs_type_node )\n \n   index_node = save_expr (index_node);\n   array_node = save_expr (array_node);\n-  lhs_type_node   = build_java_check_indexed_type (array_node, lhs_type_node);\n-\n-  load_node = build_java_arrayaccess (array_node,\n-\t\t\t\t      lhs_type_node,\n-\t\t\t\t      index_node);\n-\n+  \n+  if (TREE_TYPE (array_node) == ptr_type_node)\n+    /* The only way we could get a node of type ptr_type_node at this\n+       point is `aconst_null; arraylength' or something equivalent, so\n+       unconditionally throw NullPointerException.  */    \n+    load_node = build (CALL_EXPR, lhs_type_node, \n+\t\t       build_address_of (soft_nullpointer_node),\n+\t\t       NULL_TREE, NULL_TREE);\n+  else\n+    {\n+      lhs_type_node = build_java_check_indexed_type (array_node, lhs_type_node);\n+      load_node = build_java_arrayaccess (array_node,\n+\t\t\t\t\t  lhs_type_node,\n+\t\t\t\t\t  index_node);\n+    }\n   if (INTEGRAL_TYPE_P (lhs_type_node) && TYPE_PRECISION (lhs_type_node) <= 32)\n     load_node = fold (build1 (NOP_EXPR, int_type_node, load_node));\n   push_value (load_node);"}]}