{"sha": "1ea463a273df44816d63c3f96292341668a88ef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhNDYzYTI3M2RmNDQ4MTZkNjNjM2Y5NjI5MjM0MTY2OGE4OGVmMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T08:00:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T08:00:47Z"}, "message": "function.h (struct function): Remove dont_emit_block_notes.\n\n        * function.h (struct function): Remove dont_emit_block_notes.\n        * gimple-low.c (lower_function_body): Don't set it.\n        * cfgexpand.c (expand_block): Don't check it.\n        * cfglayout.c (insn_locators_initialize): Likewise.\n        * expr.c (expand_expr_real, expand_expr_real_1): Likewise.\n        * passes.c (rest_of_compilation): Likewise.\n        * stmt.c (expand_start_bindings_and_block): Likewise.\n        (expand_end_bindings): Likewise.\n\nFrom-SVN: r83959", "tree": {"sha": "4334bddc40c1748c1f49a7fa541c7d618176242a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4334bddc40c1748c1f49a7fa541c7d618176242a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea463a273df44816d63c3f96292341668a88ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea463a273df44816d63c3f96292341668a88ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea463a273df44816d63c3f96292341668a88ef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea463a273df44816d63c3f96292341668a88ef0/comments", "author": null, "committer": null, "parents": [{"sha": "c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c"}], "stats": {"total": 78, "additions": 24, "deletions": 54}, "files": [{"sha": "5b78d22c7659b0d19be6d3181996d3ff77064fc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -1,3 +1,14 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.h (struct function): Remove dont_emit_block_notes.\n+\t* gimple-low.c (lower_function_body): Don't set it.\n+\t* cfgexpand.c (expand_block): Don't check it.\n+\t* cfglayout.c (insn_locators_initialize): Likewise.\n+\t* expr.c (expand_expr_real, expand_expr_real_1): Likewise.\n+\t* passes.c (rest_of_compilation): Likewise.\n+\t* stmt.c (expand_start_bindings_and_block): Likewise.\n+\t(expand_end_bindings): Likewise.\n+\n 2004-07-01  Richard Henderson  <rth@redhat.com>\n \n \t* cgraph.h (cgraph_build_static_cdtor): Declare."}, {"sha": "4227b985f3d5ca96318b395503b1240d9f3f19ae", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -119,8 +119,7 @@ expand_block (basic_block bb, FILE * dump_file)\n \t    if (EXPR_LOCUS (stmt))\n \t      {\n \t\temit_line_note (*(EXPR_LOCUS (stmt)));\n-\t\tif (cfun->dont_emit_block_notes)\n-\t\t  record_block_change (TREE_BLOCK (stmt));\n+\t\trecord_block_change (TREE_BLOCK (stmt));\n \t      }\n \n \t    /* These flags have no purpose in RTL land.  */"}, {"sha": "3fb23992acff261771243022a7d48aa845eed980", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -308,19 +308,9 @@ insn_locators_initialize (void)\n \t  switch (NOTE_LINE_NUMBER (insn))\n \t    {\n \t    case NOTE_INSN_BLOCK_BEG:\n-\t      if (cfun->dont_emit_block_notes)\n-\t\tabort ();\n-\t      block = NOTE_BLOCK (insn);\n-\t      delete_insn (insn);\n-\t      break;\n \t    case NOTE_INSN_BLOCK_END:\n-\t      if (cfun->dont_emit_block_notes)\n-\t\tabort ();\n-\t      block = BLOCK_SUPERCONTEXT (block);\n-\t      if (block && TREE_CODE (block) == FUNCTION_DECL)\n-\t\tblock = 0;\n-\t      delete_insn (insn);\n-\t      break;\n+\t      abort ();\n+\n \t    default:\n \t      if (NOTE_LINE_NUMBER (insn) > 0)\n \t\t{\n@@ -333,16 +323,14 @@ insn_locators_initialize (void)\n \t    }\n \t}\n \n-      if (cfun->dont_emit_block_notes)\n-\tcheck_block_change (insn, &block);\n+      check_block_change (insn, &block);\n     }\n \n   /* Tag the blocks with a depth number so that change_scope can find\n      the common parent easily.  */\n   set_block_levels (DECL_INITIAL (cfun->decl), 0);\n \n-  if (cfun->dont_emit_block_notes)\n-    free_block_changes ();\n+  free_block_changes ();\n }\n \n /* For each lexical block, set BLOCK_NUMBER to the depth at which it is"}, {"sha": "308f47c04b5de380985c55318f2d00ad6816f783", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -6490,8 +6490,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n       emit_line_note (input_location);\n       \n       /* Record where the insns produced belong.  */\n-      if (cfun->dont_emit_block_notes)\n-\trecord_block_change (TREE_BLOCK (exp));\n+      record_block_change (TREE_BLOCK (exp));\n \n       ret = expand_expr_real_1 (exp, target, tmode, modifier, alt_rtl);\n \n@@ -8534,8 +8533,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t      if (EXPR_HAS_LOCATION (exp))\n \t\t{\n \t\t  emit_line_note (EXPR_LOCATION (exp));\n-\t\t  if (cfun->dont_emit_block_notes)\n-\t\t    record_block_change (TREE_BLOCK (exp));\n+\t\t  record_block_change (TREE_BLOCK (exp));\n \t\t}\n \t      expand_elseif (TREE_OPERAND (exp, 0));\n \t      expand_expr (TREE_OPERAND (exp, 1), const0_rtx, VOIDmode, 0);"}, {"sha": "7d8394b51239ecc3f7822b07f804aaa45582e404", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -361,10 +361,6 @@ struct function GTY(())\n      delay list for them is recorded here.  */\n   rtx epilogue_delay_list;\n \n-  /* Nonzero if NOTE_INSN_BLOCK_BEG / NOTE_INSN_BLOCK_END notes should not\n-     be emitted.  */\n-  unsigned int dont_emit_block_notes : 1;\n-\n   /* How commonly executed the function is.  Initialized during branch\n      probabilities pass.  */\n   enum function_frequency {"}, {"sha": "67b7f2d16ee175fad8384f4accf9a7eb91c7511b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -124,8 +124,6 @@ lower_function_body (void)\n \n   clear_block_marks (data.block);\n \n-  /* Avoid producing notes for blocks.  */\n-  cfun->dont_emit_block_notes = 1;\n   reset_block_changes ();\n }\n "}, {"sha": "df1c5bd372b6a30ccefd0df867d59d0c58a41919", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -1374,14 +1374,7 @@ rest_of_compilation (void)\n      have been run to re-initialize it.  */\n   cse_not_expected = ! optimize;\n \n-  if (!cfun->dont_emit_block_notes)\n-    {\n-      /* In function-at-a-time mode, we do not attempt to keep the BLOCK\n-\t tree in sensible shape.  So, we just recalculate it here.  */\n-      reorder_blocks ();\n-    }\n-  else\n-    finalize_block_changes ();\n+  finalize_block_changes ();\n \n   /* Dump the rtl code if we are dumping rtl.  */\n   if (open_dump_file (DFI_rtl, current_function_decl))\n@@ -1413,8 +1406,6 @@ rest_of_compilation (void)\n      over the instruction sequence faster, and allow the garbage\n      collector to reclaim the memory used by the notes.  */\n   remove_unnecessary_notes ();\n-  if (!cfun->dont_emit_block_notes)\n-    reorder_blocks ();\n \n   ggc_collect ();\n "}, {"sha": "5c8a6e8af9c038e906d47e5d68af6342a93c23c2", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea463a273df44816d63c3f96292341668a88ef0/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=1ea463a273df44816d63c3f96292341668a88ef0", "patch": "@@ -2840,13 +2840,7 @@ expand_start_bindings_and_block (int flags, tree block)\n     abort ();\n \n   /* Create a note to mark the beginning of the block.  */\n-  if (block_flag && !cfun->dont_emit_block_notes)\n-    {\n-      note = emit_note (NOTE_INSN_BLOCK_BEG);\n-      NOTE_BLOCK (note) = block;\n-    }\n-  else\n-    note = emit_note (NOTE_INSN_DELETED);\n+  note = emit_note (NOTE_INSN_DELETED);\n \n   /* Make an entry on block_stack for the block we are entering.  */\n \n@@ -3073,7 +3067,8 @@ warn_about_unused_variables (tree vars)\n    labels (because the front end does that).  */\n \n void\n-expand_end_bindings (tree vars, int mark_ends, int dont_jump_in)\n+expand_end_bindings (tree vars, int mark_ends ATTRIBUTE_UNUSED,\n+\t\t     int dont_jump_in)\n {\n   struct nesting *thisblock = block_stack;\n \n@@ -3165,14 +3160,8 @@ expand_end_bindings (tree vars, int mark_ends, int dont_jump_in)\n      We do this now, after running cleanups on the variables\n      just going out of scope, so they are in scope for their cleanups.  */\n \n-  if (mark_ends && !cfun->dont_emit_block_notes)\n-    {\n-      rtx note = emit_note (NOTE_INSN_BLOCK_END);\n-      NOTE_BLOCK (note) = NOTE_BLOCK (thisblock->data.block.first_insn);\n-    }\n-  else\n-    /* Get rid of the beginning-mark if we don't make an end-mark.  */\n-    NOTE_LINE_NUMBER (thisblock->data.block.first_insn) = NOTE_INSN_DELETED;\n+  /* Get rid of the beginning-mark if we don't make an end-mark.  */\n+  NOTE_LINE_NUMBER (thisblock->data.block.first_insn) = NOTE_INSN_DELETED;\n \n   /* Restore the temporary level of TARGET_EXPRs.  */\n   target_temp_slot_level = thisblock->data.block.block_target_temp_slot_level;"}]}