{"sha": "4c1baa02893bea62bb9b87df5600be48760f6bb1", "node_id": "C_kwDOANBUbNoAKDRjMWJhYTAyODkzYmVhNjJiYjliODdkZjU2MDBiZTQ4NzYwZjZiYjE", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2022-05-12T19:35:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-05T08:28:16Z"}, "message": "[Ada] Remove old vxworks6 from Makefile.rtl\n\nPre vxworks7 code excepting legacy vxworks6 code is removed from\nMakefile.rtl and unused files are deleted.\n\ngcc/ada/\n\n\t* Makefile.rtl (*vxworks*): Remove most pre-vxworks7 code.\n\t* vxworks-arm-link.spec: Remove.\n\t* vxworks-e500-link.spec: Likewise.\n\t* vxworks-smp-arm-link.spec: Likewise.\n\t* vxworks-smp-e500-link.spec: Likewise.\n\t* vxworks-smp-x86-link.spec: Likewise.\n\t* libgnat/system-vxworks-arm-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks-arm-rtp.ads: Likewise.\n\t* libgnat/system-vxworks-arm.ads: Likewise.\n\t* libgnat/system-vxworks-e500-kernel.ads: Likewise.\n\t* libgnat/system-vxworks-e500-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks-e500-rtp.ads: Likewise.\n\t* libgnat/system-vxworks-x86-kernel.ads: Likewise.\n\t* libgnat/system-vxworks-x86-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks-x86-rtp.ads: Likewise.", "tree": {"sha": "6a0cdf3335191c8fa0dcd0893162a885e9ead59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a0cdf3335191c8fa0dcd0893162a885e9ead59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c1baa02893bea62bb9b87df5600be48760f6bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1baa02893bea62bb9b87df5600be48760f6bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1baa02893bea62bb9b87df5600be48760f6bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1baa02893bea62bb9b87df5600be48760f6bb1/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c3041b856cb0495d8f71110cd76f6fe64a0038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3041b856cb0495d8f71110cd76f6fe64a0038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c3041b856cb0495d8f71110cd76f6fe64a0038"}], "stats": {"total": 1635, "additions": 37, "deletions": 1598}, "files": [{"sha": "002d425cad5e9aa59ae900cdccdc3b89d0656ba4", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 37, "deletions": 103, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1baa02893bea62bb9b87df5600be48760f6bb1/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1baa02893bea62bb9b87df5600be48760f6bb1/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=4c1baa02893bea62bb9b87df5600be48760f6bb1", "patch": "@@ -1078,21 +1078,13 @@ GCC_SPEC_FILES=\n # $(strip STRING) removes leading and trailing spaces from STRING.\n # If what's left is null then it's a match.\n \n-# PowerPC and e500v2 VxWorks\n-ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe,$(target_cpu) $(target_vendor) $(target_os))),)\n-\n-  ifeq ($(strip $(filter-out e500%, $(target_alias))),)\n-     ARCH_STR=e500\n-     # gcc config translates the target e500v2-wrs-vxworks to\n-     # powerpc-wrs-vxworksspe. Let's keep the original alias here when\n-     # generating s-oscons.ads.\n-     target=$(target_alias)\n+# PowerPC VxWorks6 and VxWorks7\n+ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworks7%, $(target_cpu) $(target_vendor) $(target_os))),)\n+\n+  ifeq ($(strip $(filter-out powerpc64, $(target_cpu))),)\n+     ARCH_STR=ppc64\n   else\n-     ifeq ($(strip $(filter-out powerpc64, $(target_cpu))),)\n-        ARCH_STR=ppc64\n-     else\n-        ARCH_STR=ppc\n-     endif\n+     ARCH_STR=ppc\n   endif\n \n   VX=$(strip $(if $(filter vxworks7%, $(target_os)), vxworks7, vxworks))\n@@ -1123,35 +1115,22 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n-  # VxWorks 5 and 6 both use the same target triplet making them\n-  # indistinguishable in the context of this make file. Package\n-  # System.Stack_Checking.Operations is not needed on VxWorks 6 as it leads to\n-  # an undefined symbol when building a dynamic shared library. To alleviate\n-  # this problem and distinguish this case, we use the THREAD_KIND and include\n-  # the package only in default mode.\n-\n-  ifeq ($(strip $(filter-out default,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-      s-stchop.ads<libgnat/s-stchop__limit.ads \\\n-      s-stchop.adb<libgnat/s-stchop__vxworks.adb\n-    EXTRA_GNATRTL_NONTASKING_OBJS+=s-stchop.o\n-  endif\n-\n   ifeq ($(strip $(filter-out powerpc64, $(target_cpu))),)\n     LIBGNAT_TARGET_PAIRS += $(GNATRTL_128BIT_PAIRS)\n     EXTRA_GNATRTL_NONTASKING_OBJS += $(GNATRTL_128BIT_OBJS)\n   endif\n \n   TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n+  EH_MECHANISM=-gcc\n+\n   ifeq ($(strip $(filter-out rtp,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n     s-vxwext.ads<libgnarl/s-vxwext__rtp.ads \\\n     s-vxwext.adb<libgnarl/s-vxwext__rtp.adb \\\n     s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-rtp.adb \\\n     system.ads<libgnat/$(SVX)-$(ARCH_STR)-rtp.ads\n \n-    EH_MECHANISM=-gcc\n   else\n     ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n       LIBGNAT_TARGET_PAIRS += \\\n@@ -1161,7 +1140,6 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n       s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-tls.adb \\\n       system.ads<libgnat/$(SVX)-$(ARCH_STR)-rtp-smp.ads\n \n-      EH_MECHANISM=-gcc\n       EXTRA_LIBGNAT_OBJS+=affinity.o\n     else\n       ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n@@ -1173,15 +1151,13 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n         s-vxwext.adb<libgnarl/s-vxwext__kernel-smp.adb \\\n         system.ads<libgnat/$(SVX)-$(ARCH_STR)-kernel.ads\n \n-        EH_MECHANISM=-gcc\n         EXTRA_LIBGNAT_OBJS+=affinity.o\n       else\n         LIBGNAT_TARGET_PAIRS += \\\n         s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n         s-tpopsp.adb<libgnarl/s-tpopsp__vxworks.adb\n \n         ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n-          EH_MECHANISM=-gcc\n           LIBGNAT_TARGET_PAIRS += \\\n           s-vxwext.ads<libgnarl/s-vxwext__kernel.ads \\\n           s-vxwext.adb<libgnarl/s-vxwext__kernel.adb \\\n@@ -1211,8 +1187,8 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n   endif\n endif\n \n-# x86/x86_64 VxWorks\n-ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(target_vendor) $(target_os))),)\n+# x86/x86_64 VxWorks7\n+ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks7%, $(target_cpu) $(target_vendor) $(target_os))),)\n \n   LIBGNAT_TARGET_PAIRS= \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n@@ -1240,9 +1216,6 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(targ\n   g-stsifd.adb<libgnat/g-stsifd__sockets.adb \\\n   $(ATOMICS_TARGET_PAIRS)\n \n-  VX=$(strip $(if $(filter vxworks7%, $(target_os)), vxworks7, vxworks))\n-  SVX=system-$(VX)\n-\n   ifeq ($(strip $(filter-out x86_64, $(target_cpu))),)\n      X86CPU=x86_64\n      LIBGNAT_TARGET_PAIRS += $(X86_64_TARGET_PAIRS)\n@@ -1259,54 +1232,45 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(targ\n \n   # The CPU setting for VxSim varies with the\n   # host (Windows or Linux)\n-  # target (VxWorks6 or VxWorks7)\n   # runtime (rtp or kernel)\n   # -------------------------------------------------------------\n-  #\t\t\t\t\tvx6\t\tvx7\n+  #\t\t\t\t\tvx7\n   # Windows (host_os = mingw32)\n-  #\tkernel\t\t\t\tSIMNT\t\tSIMNT\n-  #\trtp\t\t\t\tSIMPENTIUM\tSIMNT\n+  #\tkernel\t\t\t\tSIMNT\n+  #\trtp\t\t\t\tSIMNT\n   # Linux (host_os = linux-gnu)\n-  #\tkernel\t\t\t\tSIMLINUX\tSIMLINUX\n-  #\trtp\t\t\t\tSIMPENTIUM\tSIMLINUX\n+  #\tkernel\t\t\t\tSIMLINUX\n+  #\trtp\t\t\t\tSIMLINUX\n   # -------------------------------------------------------------\n   # It is overridden by VXSIM_CPU only in files init-vxsim.c and\n   # sigtramp-vxworks-vxsim.c which contain functions determined at\n   # runtime to be called if a program is running on VxSim vs real hardware\n   # (due to differences in signal context for unwinding).\n \n-  ifneq ($(strip $(filter-out vxworks7, $(target_os))),)\n-    ifeq ($(strip $(filter-out vxworks rtp rtp-smp,$(target_os) $(THREAD_KIND))),)\n-      VXSIM_CPU = SIMPENTIUM\n-    else\n-      ifeq ($(strip $(filter-out kernel kernel-smp rtp rtp-smp,$(THREAD_KIND))),)\n-        ifeq ($(strip $(filter-out linux%,$(host_os))),)\n-          # Linux\n-          VXSIM_CPU = SIMLINUX\n-        else\n-          # Windows\n-          VXSIM_CPU = SIMNT\n-        endif\n-      endif\n-    endif\n-\n-    GNATLIBCFLAGS_FOR_C := $(GNATLIBCFLAGS_FOR_C) -D__VXSIM_CPU__=$(VXSIM_CPU)\n+  ifeq ($(strip $(filter-out linux%,$(host_os))),)\n+    # Linux\n+    VXSIM_CPU = SIMLINUX\n+  else\n+    # Windows\n+    VXSIM_CPU = SIMNT\n   endif\n \n+  GNATLIBCFLAGS_FOR_C := $(GNATLIBCFLAGS_FOR_C) -D__VXSIM_CPU__=$(VXSIM_CPU)\n+\n   ifeq ($(strip $(filter-out rtp,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n     s-vxwext.ads<libgnarl/s-vxwext__rtp.ads \\\n     s-vxwext.adb<libgnarl/s-vxwext__rtp.adb \\\n     s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-rtp.adb \\\n-    system.ads<libgnat/$(SVX)-x86-rtp.ads\n+    system.ads<libgnat/system-vxworks7-x86-rtp.ads\n   else\n     ifeq ($(strip $(filter-out rtp-smp, $(THREAD_KIND))),)\n       LIBGNAT_TARGET_PAIRS += \\\n       s-mudido.adb<libgnarl/s-mudido__affinity.adb \\\n       s-vxwext.ads<libgnarl/s-vxwext__rtp.ads \\\n       s-vxwext.adb<libgnarl/s-vxwext__rtp-smp.adb \\\n       s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-tls.adb \\\n-      system.ads<libgnat/$(SVX)-$(X86CPU)-rtp-smp.ads\n+      system.ads<libgnat/system-vxworks7-$(X86CPU)-rtp-smp.ads\n \n       EXTRA_LIBGNAT_OBJS+=affinity.o\n     else\n@@ -1317,7 +1281,7 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(targ\n         s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-tls.adb \\\n         s-vxwext.ads<libgnarl/s-vxwext__kernel.ads \\\n         s-vxwext.adb<libgnarl/s-vxwext__kernel-smp.adb \\\n-        system.ads<libgnat/$(SVX)-$(X86CPU)-kernel.ads\n+        system.ads<libgnat/system-vxworks7-$(X86CPU)-kernel.ads\n \n         EXTRA_LIBGNAT_OBJS+=affinity.o\n       else\n@@ -1329,7 +1293,7 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(targ\n           LIBGNAT_TARGET_PAIRS += \\\n           s-vxwext.ads<libgnarl/s-vxwext__kernel.ads \\\n           s-vxwext.adb<libgnarl/s-vxwext__kernel.adb \\\n-          system.ads<libgnat/$(SVX)-x86-kernel.ads\n+          system.ads<libgnat/system-vxworks7-x86-kernel.ads\n         endif\n       endif\n \n@@ -1345,16 +1309,11 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(targ\n   EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n   EXTRA_LIBGNAT_SRCS+=$(VX_SIGTRAMP_EXTRA_SRCS)\n \n-  ifeq ($(strip $(filter-out vxworks7%, $(target_os))),)\n-    GCC_SPEC_FILES+=vxworks7-$(X86CPU)-rtp-base-link.spec\n-  else\n-    GCC_SPEC_FILES+=vxworks-x86-link.spec\n-    GCC_SPEC_FILES+=vxworks-smp-x86-link.spec\n-  endif\n+  GCC_SPEC_FILES+=vxworks7-$(X86CPU)-rtp-base-link.spec\n endif\n \n-# ARM and Aarch64 VxWorks\n-ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(target_os))),)\n+# ARM and Aarch64 VxWorks7\n+ifeq ($(strip $(filter-out aarch64 arm wrs vxworks7%, $(target_cpu) $(target_vendor) $(target_os))),)\n \n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n@@ -1384,34 +1343,20 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n \n   ifeq ($(strip $(filter-out aarch64, $(target_cpu))),)\n     ARCH_STR=aarch64\n-    VX=vxworks7\n     EH_MECHANISM=-gcc\n     SIGTRAMP_OBJ=sigtramp-vxworks.o\n     LIBGNAT_TARGET_PAIRS += $(GNATRTL_128BIT_PAIRS) \\\n       a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n       s-dorepr.adb<libgnat/s-dorepr__fma.adb\n     EXTRA_GNATRTL_NONTASKING_OBJS += $(GNATRTL_128BIT_OBJS)\n   else\n-    ifeq ($(strip $(filter-out arm%, $(target_cpu))),)\n-      ARCH_STR=arm\n-      ifeq ($(strip $(filter-out vxworks7%, $(target_os))),)\n-        VX=vxworks7\n-        EH_MECHANISM=-arm\n-        SIGTRAMP_OBJ=sigtramp-armvxworks.o\n-      else\n-        VX=vxworks\n-        EH_MECHANISM=-gcc\n-        SIGTRAMP_OBJ=sigtramp-vxworks.o\n-      endif\n-    else\n-      ARCH_STR=coff\n-    endif\n+    ARCH_STR=arm\n+    EH_MECHANISM=-arm\n+    SIGTRAMP_OBJ=sigtramp-armvxworks.o\n   endif\n \n   LIBGNAT_TARGET_PAIRS += s-vxwork.ads<libgnarl/s-vxwork__$(ARCH_STR).ads\n \n-  SVX=system-$(VX)\n-\n   TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n@@ -1420,7 +1365,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n     s-vxwext.ads<libgnarl/s-vxwext__rtp.ads \\\n     s-vxwext.adb<libgnarl/s-vxwext__rtp-smp.adb \\\n     s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-tls.adb \\\n-    system.ads<libgnat/$(SVX)-$(ARCH_STR)-rtp-smp.ads\n+    system.ads<libgnat/system-vxworks7-$(ARCH_STR)-rtp-smp.ads\n \n     EXTRA_LIBGNAT_OBJS+=affinity.o\n \n@@ -1433,7 +1378,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n       s-tpopsp.adb<libgnarl/s-tpopsp__vxworks-tls.adb \\\n       s-vxwext.ads<libgnarl/s-vxwext__kernel.ads \\\n       s-vxwext.adb<libgnarl/s-vxwext__kernel-smp.adb \\\n-      system.ads<libgnat/$(SVX)-$(ARCH_STR).ads\n+      system.ads<libgnat/system-vxworks7-$(ARCH_STR).ads\n \n       EXTRA_LIBGNAT_OBJS+=affinity.o\n \n@@ -1442,7 +1387,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n     else\n       LIBGNAT_TARGET_PAIRS += \\\n       s-tpopsp.adb<libgnarl/s-tpopsp__vxworks.adb \\\n-      system.ads<libgnat/$(SVX)-$(ARCH_STR).ads\n+      system.ads<libgnat/system-vxworks7-$(ARCH_STR).ads\n \n       ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n         LIBGNAT_TARGET_PAIRS += \\\n@@ -1460,18 +1405,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n \n-  ifeq ($(strip $(filter-out arm vxworks7%, $(target_cpu) $(target_os))),)\n-    GCC_SPEC_FILES+=vxworks7-rtp-base-link.spec\n-  else\n-    ifeq ($(strip $(filter-out aarch64, $(target_cpu))),)\n-      GCC_SPEC_FILES+=vxworks7-rtp-base-link.spec\n-    endif\n-\n-    ifneq ($(strip $(filter-out vxworks7%, $(target_os))),)\n-      GCC_SPEC_FILES+=vxworks-arm-link.spec\n-      GCC_SPEC_FILES+=vxworks-smp-arm-link.spec\n-    endif\n-  endif\n+  GCC_SPEC_FILES+=vxworks7-rtp-base-link.spec\n endif\n \n # ARM android"}, {"sha": "42d14c43cf7d4f7dfabd8d0fdfc0b543cdd9964d", "filename": "gcc/ada/libgnat/system-vxworks-arm-rtp-smp.ads", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp-smp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,165 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                          (VxWorks 6.x ARM RTP)                           --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- In particular,  you can freely  distribute your programs  built with the --\n--- GNAT Pro compiler, including any required library run-time units,  using --\n--- any licensing terms  of your choosing.  See the AdaCore Software License --\n--- for full details.                                                        --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks version of this package for RTPs\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-smp-arm-link.spec\");\n-   pragma Linker_Options (\"--specs=vxworks-arm-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "aa8515ac95074d525add5e03d76441a838ebd462", "filename": "gcc/ada/libgnat/system-vxworks-arm-rtp.ads", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm-rtp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,164 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                          (VxWorks 6.x ARM RTP)                           --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- In particular,  you can freely  distribute your programs  built with the --\n--- GNAT Pro compiler, including any required library run-time units,  using --\n--- any licensing terms  of your choosing.  See the AdaCore Software License --\n--- for full details.                                                        --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks version of this package for RTPs\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-arm-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "ae09b78c0b6c30295708d00239fe6a2c561a2a11", "filename": "gcc/ada/libgnat/system-vxworks-arm.ads", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-arm.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,159 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                          (VxWorks Version ARM)                           --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}, {"sha": "4b091aef0691ae849d7c58fb86e1fec83052e6f9", "filename": "gcc/ada/libgnat/system-vxworks-e500-kernel.ads", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-kernel.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,160 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                      (VxWorks 6 Kernel Version E500)                     --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   --  MPC8548ECE Chip Errata Rev 8: signed zero not reliable\n-   Signed_Zeros              : constant Boolean := False;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}, {"sha": "a5d4d87fa43fa347d82543875a0418b538c7ebe0", "filename": "gcc/ada/libgnat/system-vxworks-e500-rtp-smp.ads", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp-smp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,166 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                        (VxWorks 6.x SMP E500 RTP)                        --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks SMP version of this package for RTPs\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-smp-e500-link.spec\");\n-   pragma Linker_Options (\"--specs=vxworks-e500-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   --  MPC8548ECE Chip Errata Rev 8: signed zero not reliable\n-   Signed_Zeros              : constant Boolean := False;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "4f96385d840a35a5eaee800b63322287df87e1b0", "filename": "gcc/ada/libgnat/system-vxworks-e500-rtp.ads", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-rtp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,164 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                          (VxWorks 6.x E500 RTP)                          --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks version of this package for RTPs\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-e500-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "4c912b8e529229f0f2553c97b05b9b0b69bb0ca1", "filename": "gcc/ada/libgnat/system-vxworks-x86-kernel.ads", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-kernel.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,163 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                      (VxWorks 6 Kernel Version x86)                      --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-x86-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}, {"sha": "f8115a5203406d6f9deeb61317eb643db57c4170", "filename": "gcc/ada/libgnat/system-vxworks-x86-rtp-smp.ads", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp-smp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,164 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                    (VxWorks Version x86 for SMP RTPs)                    --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-smp-x86-link.spec\");\n-   pragma Linker_Options (\"--specs=vxworks-x86-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "8894abbaab0a47c1c208e7d7eeee4711531c27cf", "filename": "gcc/ada/libgnat/system-vxworks-x86-rtp.ads", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-rtp.ads?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,163 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                     (VxWorks Version x86 for RTPs)                       --\n---                                                                          --\n---          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   pragma Linker_Options (\"--specs=vxworks-x86-link.spec\");\n-   --  Setup proper set of -L's for this configuration\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   Executable_Extension : constant String := \".vxe\";\n-\n-end System;"}, {"sha": "71c983247e79650e2916c2d174a9746900d3d2c4", "filename": "gcc/ada/vxworks-arm-link.spec", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-arm-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-arm-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-arm-link.spec?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,4 +0,0 @@\n-*lib:\n-+ %{mrtp:%{!shared: \\\n-      -L%:getenv(WIND_BASE /target/lib/usr/lib/arm/ARMARCH7/common) \\\n-   }}"}, {"sha": "befeba140f47edde2a04fec0d7ff699783b311c7", "filename": "gcc/ada/vxworks-e500-link.spec", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-e500-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-e500-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-e500-link.spec?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +0,0 @@\n-*lib:\n-+ %{mrtp:%{!shared: \\\n-     -L%:if-exists-else( \\\n-         %:getenv(WIND_BASE /target/lib/usr/lib/ppc/PPC32/e500v2common) \\\n-         %:getenv(WIND_BASE /target/usr/lib/ppc/PPC32/e500v2common)) \\\n-   }}"}, {"sha": "0370716825df91866f82227ec3df8322de9e2d58", "filename": "gcc/ada/vxworks-smp-arm-link.spec", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-arm-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-arm-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-smp-arm-link.spec?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,4 +0,0 @@\n-*lib:\n-+ %{mrtp:%{!shared: \\\n-      -L%:getenv(WIND_BASE /target/lib_smp/usr/lib/arm/ARMARCH7/common) \\\n-   }}"}, {"sha": "799bd190797ff66030c10d22de093afad65c86c1", "filename": "gcc/ada/vxworks-smp-e500-link.spec", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-e500-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-e500-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-smp-e500-link.spec?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,4 +0,0 @@\n-*lib:\n-+ %{mrtp:%{!shared: \\\n-     -L%:getenv(WIND_BASE /target/lib_smp/usr/lib/ppc/PPC32/e500v2common) \\\n-   }}"}, {"sha": "98a60c11297b03a894724d6b423af9afa0328cd9", "filename": "gcc/ada/vxworks-smp-x86-link.spec", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-x86-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Fada%2Fvxworks-smp-x86-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-smp-x86-link.spec?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,9 +0,0 @@\n-*lib:\n-+ %{mrtp:%{!shared: \\\n-    %{vxsim: \\\n-      -L%:getenv(WIND_BASE /target/lib_smp/usr/lib/simpentium/SIMPENTIUM/common) \\\n-     } \\\n-    %{!vxsim: \\\n-      -L%:getenv(WIND_BASE /target/lib_smp/usr/lib/pentium/PENTIUM4/common) \\\n-     } \\\n-   }}"}]}