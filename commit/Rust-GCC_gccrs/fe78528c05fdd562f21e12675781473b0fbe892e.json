{"sha": "fe78528c05fdd562f21e12675781473b0fbe892e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ODUyOGMwNWZkZDU2MmYyMWUxMjY3NTc4MTQ3M2IwZmJlODkyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T13:48:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T13:48:47Z"}, "message": "widening_mul: Recognize another form of ADD_OVERFLOW [PR96272]\n\nThe following patch recognizes another form of hand written\n__builtin_add_overflow (this time _p), in particular when\nthe code does unsigned\nif (x > ~0U - y)\nor\nif (x <= ~0U - y)\nit can be optimized (if the subtraction turned into ~y is single use)\ninto\nif (__builtin_add_overflow_p (x, y, 0U))\nor\nif (!__builtin_add_overflow_p (x, y, 0U))\nand generate better code, e.g. for the first function in the testcase:\n-       movl    %esi, %eax\n        addl    %edi, %esi\n-       notl    %eax\n-       cmpl    %edi, %eax\n-       movl    $-1, %eax\n-       cmovnb  %esi, %eax\n+       jc      .L3\n+       movl    %esi, %eax\n+       ret\n+.L3:\n+       orl     $-1, %eax\n        ret\non x86_64.  As for the jumps vs. conditional move case, that is some CE\nissue with complex branch patterns we should fix up no matter what, but\nin this case I'm actually not sure if branchy code isn't better, overflow\nis something that isn't that common.\n\n2020-12-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96272\n\t* tree-ssa-math-opts.c (uaddsub_overflow_check_p): Add OTHER argument.\n\tHandle BIT_NOT_EXPR.\n\t(match_uaddsub_overflow): Optimize unsigned a > ~b into\n\t__imag__ .ADD_OVERFLOW (a, b).\n\t(math_opts_dom_walker::after_dom_children): Call match_uaddsub_overflow\n\teven for BIT_NOT_EXPR.\n\n\t* gcc.dg/tree-ssa/pr96272.c: New test.", "tree": {"sha": "5c6f6b0bcb95b2393b3a43d8b9b61b9c62117259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6f6b0bcb95b2393b3a43d8b9b61b9c62117259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe78528c05fdd562f21e12675781473b0fbe892e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe78528c05fdd562f21e12675781473b0fbe892e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe78528c05fdd562f21e12675781473b0fbe892e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe78528c05fdd562f21e12675781473b0fbe892e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994"}], "stats": {"total": 132, "additions": 111, "deletions": 21}, "files": [{"sha": "4c9fa6360d314c56ad8b5ef17e4290673266922f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96272.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe78528c05fdd562f21e12675781473b0fbe892e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96272.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe78528c05fdd562f21e12675781473b0fbe892e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96272.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96272.c?ref=fe78528c05fdd562f21e12675781473b0fbe892e", "patch": "@@ -0,0 +1,37 @@\n+/* PR tree-optimization/96272 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-widening_mul\" } */\n+\n+unsigned\n+foo (unsigned a, unsigned b)\n+{\n+  if (a > ~0U - b)\n+    return ~0U;\n+  return a + b;\n+}\n+\n+unsigned\n+bar (unsigned a, unsigned b)\n+{\n+  if (a <= ~0U - b)\n+    return ~0U;\n+  return a + b;\n+}\n+\n+unsigned\n+baz (unsigned a, unsigned b)\n+{\n+  if (~0U - b < a)\n+    return ~0U;\n+  return a + b;\n+}\n+\n+unsigned\n+qux (unsigned a, unsigned b)\n+{\n+  if (~0U - b >= a)\n+    return ~0U;\n+  return a + b;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ADD_OVERFLOW\" 4 \"widening_mul\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "b8cdce94bff8b67f4514a4cc7aca4b5ddfc53ee0", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 74, "deletions": 21, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe78528c05fdd562f21e12675781473b0fbe892e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe78528c05fdd562f21e12675781473b0fbe892e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=fe78528c05fdd562f21e12675781473b0fbe892e", "patch": "@@ -3457,7 +3457,8 @@ convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n    and 0 otherwise.  */\n \n static int\n-uaddsub_overflow_check_p (gimple *stmt, gimple *use_stmt, tree maxval)\n+uaddsub_overflow_check_p (gimple *stmt, gimple *use_stmt, tree maxval,\n+\t\t\t  tree *other)\n {\n   enum tree_code ccode = ERROR_MARK;\n   tree crhs1 = NULL_TREE, crhs2 = NULL_TREE;\n@@ -3520,6 +3521,13 @@ uaddsub_overflow_check_p (gimple *stmt, gimple *use_stmt, tree maxval)\n \t  || (code == PLUS_EXPR && (crhs1 == rhs1 || crhs1 == rhs2)\n \t      && crhs2 == lhs))\n \treturn ccode == GT_EXPR ? 1 : -1;\n+      /* r = ~a; b > r or b <= r.  */\n+      if (code == BIT_NOT_EXPR && crhs2 == lhs)\n+\t{\n+\t  if (other)\n+\t    *other = crhs1;\n+\t  return ccode == GT_EXPR ? 1 : -1;\n+\t}\n       break;\n     case LT_EXPR:\n     case GE_EXPR:\n@@ -3531,6 +3539,13 @@ uaddsub_overflow_check_p (gimple *stmt, gimple *use_stmt, tree maxval)\n \t  || (code == PLUS_EXPR && crhs1 == lhs\n \t      && (crhs2 == rhs1 || crhs2 == rhs2)))\n \treturn ccode == LT_EXPR ? 1 : -1;\n+      /* r = ~a; r < b or r >= b.  */\n+      if (code == BIT_NOT_EXPR && crhs1 == lhs)\n+\t{\n+\t  if (other)\n+\t    *other = crhs2;\n+\t  return ccode == LT_EXPR ? 1 : -1;\n+\t}\n       break;\n     default:\n       break;\n@@ -3560,7 +3575,15 @@ uaddsub_overflow_check_p (gimple *stmt, gimple *use_stmt, tree maxval)\n    _9 = REALPART_EXPR <_7>;\n    _8 = IMAGPART_EXPR <_8>;\n    if (_8)\n-   and replace (utype) x with _9.  */\n+   and replace (utype) x with _9.\n+\n+   Also recognize:\n+   x = ~z;\n+   if (y > x)\n+   and replace it with\n+   _7 = ADD_OVERFLOW (y, z);\n+   _8 = IMAGPART_EXPR <_8>;\n+   if (_8)  */\n \n static bool\n match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n@@ -3576,34 +3599,49 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n   gimple *add_stmt = NULL;\n   bool add_first = false;\n \n-  gcc_checking_assert (code == PLUS_EXPR || code == MINUS_EXPR);\n+  gcc_checking_assert (code == PLUS_EXPR\n+\t\t       || code == MINUS_EXPR\n+\t\t       || code == BIT_NOT_EXPR);\n   if (!INTEGRAL_TYPE_P (type)\n       || !TYPE_UNSIGNED (type)\n       || has_zero_uses (lhs)\n-      || (code == MINUS_EXPR\n-\t  && optab_handler (usubv4_optab,\n+      || (code != PLUS_EXPR\n+\t  && optab_handler (code == MINUS_EXPR ? usubv4_optab : uaddv4_optab,\n \t\t\t    TYPE_MODE (type)) == CODE_FOR_nothing))\n     return false;\n \n+  tree rhs1 = gimple_assign_rhs1 (stmt);\n+  tree rhs2 = gimple_assign_rhs2 (stmt);\n   FOR_EACH_IMM_USE_FAST (use_p, iter, lhs)\n     {\n       use_stmt = USE_STMT (use_p);\n       if (is_gimple_debug (use_stmt))\n \tcontinue;\n \n-      if (uaddsub_overflow_check_p (stmt, use_stmt, NULL_TREE))\n-\tovf_use_seen = true;\n+      tree other = NULL_TREE;\n+      if (uaddsub_overflow_check_p (stmt, use_stmt, NULL_TREE, &other))\n+\t{\n+\t  if (code == BIT_NOT_EXPR)\n+\t    {\n+\t      gcc_assert (other);\n+\t      if (TREE_CODE (other) != SSA_NAME)\n+\t\treturn false;\n+\t      if (rhs2 == NULL)\n+\t\trhs2 = other;\n+\t      else if (rhs2 != other)\n+\t\treturn false;\n+\t    }\n+\t  ovf_use_seen = true;\n+\t}\n       else\n \tuse_seen = true;\n       if (ovf_use_seen && use_seen)\n \tbreak;\n     }\n \n-  tree rhs1 = gimple_assign_rhs1 (stmt);\n-  tree rhs2 = gimple_assign_rhs2 (stmt);\n   tree maxval = NULL_TREE;\n   if (!ovf_use_seen\n-      || !use_seen\n+      || (code == BIT_NOT_EXPR ? use_seen : !use_seen)\n       || (code == PLUS_EXPR\n \t  && optab_handler (uaddv4_optab,\n \t\t\t    TYPE_MODE (type)) == CODE_FOR_nothing))\n@@ -3664,7 +3702,7 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n \t  if (is_gimple_debug (use_stmt))\n \t    continue;\n \n-\t  if (uaddsub_overflow_check_p (stmt, use_stmt, maxval))\n+\t  if (uaddsub_overflow_check_p (stmt, use_stmt, maxval, NULL))\n \t    {\n \t      ovf_use_seen = true;\n \t      use_bb = gimple_bb (use_stmt);\n@@ -3781,23 +3819,27 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n     }\n \n   tree ctype = build_complex_type (type);\n-  gcall *g = gimple_build_call_internal (code == PLUS_EXPR\n+  gcall *g = gimple_build_call_internal (code != MINUS_EXPR\n \t\t\t\t\t ? IFN_ADD_OVERFLOW : IFN_SUB_OVERFLOW,\n \t\t\t\t\t 2, rhs1, rhs2);\n   tree ctmp = make_ssa_name (ctype);\n   gimple_call_set_lhs (g, ctmp);\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n   tree new_lhs = maxval ? make_ssa_name (type) : lhs;\n-  gassign *g2 = gimple_build_assign (new_lhs, REALPART_EXPR,\n-\t\t\t\t     build1 (REALPART_EXPR, type, ctmp));\n-  if (maxval)\n+  gassign *g2;\n+  if (code != BIT_NOT_EXPR)\n     {\n-      gsi_insert_before (gsi, g2, GSI_SAME_STMT);\n-      if (add_first)\n-\t*gsi = gsi_for_stmt (stmt);\n+      g2 = gimple_build_assign (new_lhs, REALPART_EXPR,\n+\t\t\t\tbuild1 (REALPART_EXPR, type, ctmp));\n+      if (maxval)\n+\t{\n+\t  gsi_insert_before (gsi, g2, GSI_SAME_STMT);\n+\t  if (add_first)\n+\t    *gsi = gsi_for_stmt (stmt);\n+\t}\n+      else\n+\tgsi_replace (gsi, g2, true);\n     }\n-  else\n-    gsi_replace (gsi, g2, true);\n   tree ovf = make_ssa_name (type);\n   g2 = gimple_build_assign (ovf, IMAGPART_EXPR,\n \t\t\t    build1 (IMAGPART_EXPR, type, ctmp));\n@@ -3808,9 +3850,10 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n       if (is_gimple_debug (use_stmt))\n \tcontinue;\n \n-      int ovf_use = uaddsub_overflow_check_p (stmt, use_stmt, maxval);\n+      int ovf_use = uaddsub_overflow_check_p (stmt, use_stmt, maxval, NULL);\n       if (ovf_use == 0)\n \t{\n+\t  gcc_assert (code != BIT_NOT_EXPR);\n \t  if (maxval)\n \t    {\n \t      tree use_lhs = gimple_assign_lhs (use_stmt);\n@@ -3863,6 +3906,12 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n \t  gsi_replace (&gsi2, g, true);\n \t}\n     }\n+  else if (code == BIT_NOT_EXPR)\n+    {\n+      gimple_stmt_iterator gsi2 = gsi_for_stmt (stmt);\n+      gsi_remove (&gsi2, true);\n+      release_ssa_name (lhs);\n+    }\n   return true;\n }\n \n@@ -4188,6 +4237,10 @@ math_opts_dom_walker::after_dom_children (basic_block bb)\n \t\tmatch_uaddsub_overflow (&gsi, stmt, code);\n \t      break;\n \n+\t    case BIT_NOT_EXPR:\n+\t      match_uaddsub_overflow (&gsi, stmt, code);\n+\t      break;\n+\n \t    case TRUNC_MOD_EXPR:\n \t      convert_to_divmod (as_a<gassign *> (stmt));\n \t      break;"}]}