{"sha": "ed8921dc73ef78e96e483df3ea204128d320aca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4OTIxZGM3M2VmNzhlOTZlNDgzZGYzZWEyMDQxMjhkMzIwYWNhMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-13T10:38:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-13T10:38:50Z"}, "message": "gcc/\n\t* rtl.def (DEBUG_INSN, INSN, JUMP_INSN, CALL_INSN, JUMP_TABLE_DATA)\n\t(BARRIER, CODE_LABEL, NOTE): Remove first \"i\" field.\n\t* rtl.h (rtx_def): Add insn_uid to u2 field.\n\t(RTX_FLAG_CHECK8): Delete in favor of...\n\t(RTL_INSN_CHAIN_FLAG_CHECK): ...this new macro.\n\t(INSN_DELETED_P): Update accordingly.\n\t(INSN_UID): Use u2.insn_uid.\n\t(INSN_CHAIN_CODE_P): Define.\n\t(PREV_INSN, NEXT_INSN, BLOCK_FOR_INSN, PATTERN, INSN_LOCATION)\n\t(INSN_CODE, REG_NOTES, CALL_INSN_FUNCTION_USAGE, CODE_LABEL_NUMBER)\n\t(NOTE_DATA, NOTE_DELETED_LABEL_NAME, NOTE_BLOCK, NOTE_EH_HANDLER)\n\t(NOTE_BASIC_BLOCK, NOTE_VAR_LOCATION, NOTE_CFI, NOTE_LABEL_NUMBER)\n\t(NOTE_KIND, LABEL_NAME, LABEL_NUSES, JUMP_LABEL, LABEL_REFS): Lower\n\tindices accordingly.\n\t* print-rtl.c (print_rtx): Print INSN_UIDs before the main loop.\n\tUpdate indices for insn-chain rtxes.\n\t* gengtype.c (gen_rtx_next): Adjust test for insn-chain rtxes.\n\t(adjust_field_rtx_def): Lower '0' indices for all insn-chain rtxes.\n\t* emit-rtl.c (gen_label_rtx): Update gen_rtx_LABEL call.\n\t* caller-save.c (init_caller_save): Update gen_rtx_INSN calls.\n\t* combine.c (try_combine): Likewise.\n\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n\nFrom-SVN: r210360", "tree": {"sha": "50050ec1ee6f88112d996a410fabd862afd5823e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50050ec1ee6f88112d996a410fabd862afd5823e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8921dc73ef78e96e483df3ea204128d320aca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8921dc73ef78e96e483df3ea204128d320aca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8921dc73ef78e96e483df3ea204128d320aca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8921dc73ef78e96e483df3ea204128d320aca2/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fccc55155dd303b502f04c8a17af1d0a9f31f6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccc55155dd303b502f04c8a17af1d0a9f31f6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccc55155dd303b502f04c8a17af1d0a9f31f6d5"}], "stats": {"total": 178, "additions": 105, "deletions": 73}, "files": [{"sha": "33727d64c8c8ac392bb502c8c4d92468f3aa01d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -1,3 +1,28 @@\n+2014-05-13  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.def (DEBUG_INSN, INSN, JUMP_INSN, CALL_INSN, JUMP_TABLE_DATA)\n+\t(BARRIER, CODE_LABEL, NOTE): Remove first \"i\" field.\n+\t* rtl.h (rtx_def): Add insn_uid to u2 field.\n+\t(RTX_FLAG_CHECK8): Delete in favor of...\n+\t(RTL_INSN_CHAIN_FLAG_CHECK): ...this new macro.\n+\t(INSN_DELETED_P): Update accordingly.\n+\t(INSN_UID): Use u2.insn_uid.\n+\t(INSN_CHAIN_CODE_P): Define.\n+\t(PREV_INSN, NEXT_INSN, BLOCK_FOR_INSN, PATTERN, INSN_LOCATION)\n+\t(INSN_CODE, REG_NOTES, CALL_INSN_FUNCTION_USAGE, CODE_LABEL_NUMBER)\n+\t(NOTE_DATA, NOTE_DELETED_LABEL_NAME, NOTE_BLOCK, NOTE_EH_HANDLER)\n+\t(NOTE_BASIC_BLOCK, NOTE_VAR_LOCATION, NOTE_CFI, NOTE_LABEL_NUMBER)\n+\t(NOTE_KIND, LABEL_NAME, LABEL_NUSES, JUMP_LABEL, LABEL_REFS): Lower\n+\tindices accordingly.\n+\t* print-rtl.c (print_rtx): Print INSN_UIDs before the main loop.\n+\tUpdate indices for insn-chain rtxes.\n+\t* gengtype.c (gen_rtx_next): Adjust test for insn-chain rtxes.\n+\t(adjust_field_rtx_def): Lower '0' indices for all insn-chain rtxes.\n+\t* emit-rtl.c (gen_label_rtx): Update gen_rtx_LABEL call.\n+\t* caller-save.c (init_caller_save): Update gen_rtx_INSN calls.\n+\t* combine.c (try_combine): Likewise.\n+\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n+\n 2014-05-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.def (REG): Remove middle field."}, {"sha": "20421c9645727a179905c8aef6541d1a3348bf8c", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -265,8 +265,8 @@ init_caller_save (void)\n   savepat = gen_rtx_SET (VOIDmode, test_mem, test_reg);\n   restpat = gen_rtx_SET (VOIDmode, test_reg, test_mem);\n \n-  saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, savepat, 0, -1, 0);\n-  restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, restpat, 0, -1, 0);\n+  saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, savepat, 0, -1, 0);\n+  restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, restpat, 0, -1, 0);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     for (j = 1; j <= MOVE_MAX_WORDS; j++)"}, {"sha": "061b4d5537f53d84824f2ee92096858455513bdf", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -2739,9 +2739,10 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \t     never appear in the insn stream so giving it the same INSN_UID\n \t     as I2 will not cause a problem.  */\n \n-\t  i1 = gen_rtx_INSN (VOIDmode, INSN_UID (i2), NULL_RTX, i2,\n-\t\t\t     BLOCK_FOR_INSN (i2), XVECEXP (PATTERN (i2), 0, 1),\n-\t\t\t     INSN_LOCATION (i2), -1, NULL_RTX);\n+\t  i1 = gen_rtx_INSN (VOIDmode, NULL_RTX, i2, BLOCK_FOR_INSN (i2),\n+\t\t\t     XVECEXP (PATTERN (i2), 0, 1), INSN_LOCATION (i2),\n+\t\t\t     -1, NULL_RTX);\n+\t  INSN_UID (i1) = INSN_UID (i2);\n \n \t  SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n \t  SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),"}, {"sha": "ab44aba705ce885d9a7244471b63755390e0c2a8", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -2451,7 +2451,7 @@ set_mem_attrs_for_spill (rtx mem)\n rtx\n gen_label_rtx (void)\n {\n-  return gen_rtx_CODE_LABEL (VOIDmode, 0, NULL_RTX, NULL_RTX,\n+  return gen_rtx_CODE_LABEL (VOIDmode, NULL_RTX, NULL_RTX,\n \t\t\t     NULL, label_num++, NULL);\n }\n \f"}, {"sha": "5fdb65fa1c77733c80a9d639db20074c7680a2e1", "filename": "gcc/gengtype.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -1086,8 +1086,8 @@ gen_rtx_next (void)\n       int k;\n \n       rtx_next_new[i] = -1;\n-      if (strncmp (rtx_format[i], \"iuu\", 3) == 0)\n-\trtx_next_new[i] = 2;\n+      if (strncmp (rtx_format[i], \"uu\", 2) == 0)\n+\trtx_next_new[i] = 1;\n       else if (i == COND_EXEC || i == SET || i == EXPR_LIST || i == INSN_LIST)\n \trtx_next_new[i] = 1;\n       else\n@@ -1227,19 +1227,19 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t    case '0':\n \t      if (i == MEM && aindex == 1)\n \t\tt = mem_attrs_tp, subname = \"rt_mem\";\n-\t      else if (i == JUMP_INSN && aindex == 8)\n+\t      else if (i == JUMP_INSN && aindex == 7)\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n-\t      else if (i == CODE_LABEL && aindex == 5)\n-\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == CODE_LABEL && aindex == 4)\n+\t\tt = scalar_tp, subname = \"rt_int\";\n+\t      else if (i == CODE_LABEL && aindex == 3)\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else if (i == LABEL_REF && (aindex == 1 || aindex == 2))\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n-\t      else if (i == NOTE && aindex == 4)\n+\t      else if (i == NOTE && aindex == 3)\n \t\tt = note_union_tp, subname = \"\";\n-\t      else if (i == NOTE && aindex == 5)\n+\t      else if (i == NOTE && aindex == 4)\n \t\tt = scalar_tp, subname = \"rt_int\";\n-\t      else if (i == NOTE && aindex >= 7)\n+\t      else if (i == NOTE && aindex >= 6)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == ADDR_DIFF_VEC && aindex == 4)\n \t\tt = scalar_tp, subname = \"rt_int\";\n@@ -1255,9 +1255,9 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == SYMBOL_REF && aindex == 2)\n \t\tt = symbol_union_tp, subname = \"\";\n-\t      else if (i == JUMP_TABLE_DATA && aindex >= 5)\n+\t      else if (i == JUMP_TABLE_DATA && aindex >= 4)\n \t\tt = scalar_tp, subname = \"rt_int\";\n-\t      else if (i == BARRIER && aindex >= 3)\n+\t      else if (i == BARRIER && aindex >= 2)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == ENTRY_VALUE && aindex == 0)\n \t\tt = rtx_tp, subname = \"rt_rtx\";"}, {"sha": "b9caad7da357e70ecc99eed434facb22622ac234", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -1744,7 +1744,7 @@ setup_prohibited_mode_move_regs (void)\n   test_reg1 = gen_rtx_REG (VOIDmode, 0);\n   test_reg2 = gen_rtx_REG (VOIDmode, 0);\n   move_pat = gen_rtx_SET (VOIDmode, test_reg1, test_reg2);\n-  move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, move_pat, 0, -1, 0);\n+  move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, move_pat, 0, -1, 0);\n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n       SET_HARD_REG_SET (ira_prohibited_mode_move_regs[i]);"}, {"sha": "9d90325a53b94eab95fc3d4c5cecf96ad35ae1f3", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -187,6 +187,9 @@ print_rtx (const_rtx in_rtx)\n     i = 5;\n #endif\n \n+  if (INSN_CHAIN_CODE_P (GET_CODE (in_rtx)))\n+    fprintf (outfile, \" %d\", INSN_UID (in_rtx));\n+\n   /* Get the format string and skip the first elements if we have handled\n      them already.  */\n   format_ptr = GET_RTX_FORMAT (GET_CODE (in_rtx)) + i;\n@@ -228,7 +231,7 @@ print_rtx (const_rtx in_rtx)\n \t    if (decl)\n \t      print_node_brief (outfile, \"\", decl, dump_flags);\n \t  }\n-\telse if (i == 4 && NOTE_P (in_rtx))\n+\telse if (i == 3 && NOTE_P (in_rtx))\n \t  {\n \t    switch (NOTE_KIND (in_rtx))\n \t      {\n@@ -290,7 +293,7 @@ print_rtx (const_rtx in_rtx)\n \t\tbreak;\n \t      }\n \t  }\n-\telse if (i == 8 && JUMP_P (in_rtx) && JUMP_LABEL (in_rtx) != NULL)\n+\telse if (i == 7 && JUMP_P (in_rtx) && JUMP_LABEL (in_rtx) != NULL)\n \t  {\n \t    /* Output the JUMP_LABEL reference.  */\n \t    fprintf (outfile, \"\\n%s%*s -> \", print_rtx_head, indent * 2, \"\");\n@@ -328,13 +331,13 @@ print_rtx (const_rtx in_rtx)\n       case 'e':\n       do_e:\n \tindent += 2;\n-\tif (i == 7 && INSN_P (in_rtx))\n+\tif (i == 6 && INSN_P (in_rtx))\n \t  /* Put REG_NOTES on their own line.  */\n \t  fprintf (outfile, \"\\n%s%*s\",\n \t\t   print_rtx_head, indent * 2, \"\");\n \tif (!sawclose)\n \t  fprintf (outfile, \" \");\n-\tif (i == 8 && CALL_P (in_rtx))\n+\tif (i == 7 && CALL_P (in_rtx))\n \t  {\n \t    in_call_function_usage = true;\n \t    print_rtx (XEXP (in_rtx, i));\n@@ -384,7 +387,7 @@ print_rtx (const_rtx in_rtx)\n \tbreak;\n \n       case 'i':\n-\tif (i == 5 && INSN_P (in_rtx))\n+\tif (i == 4 && INSN_P (in_rtx))\n \t  {\n #ifndef GENERATOR_FILE\n \t    /*  Pretty-print insn locations.  Ignore scoping as it is mostly\n@@ -413,7 +416,7 @@ print_rtx (const_rtx in_rtx)\n \t\t       LOCATION_LINE (ASM_INPUT_SOURCE_LOCATION (in_rtx)));\n #endif\n \t  }\n-\telse if (i == 6 && NOTE_P (in_rtx))\n+\telse if (i == 5 && NOTE_P (in_rtx))\n \t  {\n \t    /* This field is only used for NOTE_INSN_DELETED_LABEL, and\n \t       other times often contains garbage from INSN->NOTE death.  */"}, {"sha": "f1924126e2780c2c0766ffb7ace7f4aa13ee8c42", "filename": "gcc/rtl.def", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -139,46 +139,46 @@ DEF_RTL_EXPR(ADDRESS, \"address\", \"i\", RTX_EXTRA)\n    ---------------------------------------------------------------------- */\n \n /* An annotation for variable assignment tracking.  */\n-DEF_RTL_EXPR(DEBUG_INSN, \"debug_insn\", \"iuuBeiie\", RTX_INSN)\n+DEF_RTL_EXPR(DEBUG_INSN, \"debug_insn\", \"uuBeiie\", RTX_INSN)\n \n /* An instruction that cannot jump.  */\n-DEF_RTL_EXPR(INSN, \"insn\", \"iuuBeiie\", RTX_INSN)\n+DEF_RTL_EXPR(INSN, \"insn\", \"uuBeiie\", RTX_INSN)\n \n /* An instruction that can possibly jump.\n    Fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n-DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"iuuBeiie0\", RTX_INSN)\n+DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"uuBeiie0\", RTX_INSN)\n \n /* An instruction that can possibly call a subroutine\n    but which will not change which instruction comes next\n    in the current function.\n    Field ( rtx->u.fld[8] ) is CALL_INSN_FUNCTION_USAGE.\n    All other fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n-DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"iuuBeiiee\", RTX_INSN)\n+DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"uuBeiiee\", RTX_INSN)\n \n /* Placeholder for tablejump JUMP_INSNs.  The pattern of this kind\n    of rtx is always either an ADDR_VEC or an ADDR_DIFF_VEC.  These\n    placeholders do not appear as real instructions inside a basic\n    block, but are considered active_insn_p instructions for historical\n    reasons, when jump table data was represented with JUMP_INSNs.  */\n-DEF_RTL_EXPR(JUMP_TABLE_DATA, \"jump_table_data\", \"iuuBe0000\", RTX_INSN)\n+DEF_RTL_EXPR(JUMP_TABLE_DATA, \"jump_table_data\", \"uuBe0000\", RTX_INSN)\n \n /* A marker that indicates that control will not flow through.  */\n-DEF_RTL_EXPR(BARRIER, \"barrier\", \"iuu00000\", RTX_EXTRA)\n+DEF_RTL_EXPR(BARRIER, \"barrier\", \"uu00000\", RTX_EXTRA)\n \n /* Holds a label that is followed by instructions.\n    Operand:\n-   4: is used in jump.c for the use-count of the label.\n-   5: is used in the sh backend.\n-   6: is a number that is unique in the entire compilation.\n-   7: is the user-given name of the label, if any.  */\n-DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"iuuB00is\", RTX_EXTRA)\n+   3: is used in jump.c for the use-count of the label.\n+   4: is used in the sh backend.\n+   5: is a number that is unique in the entire compilation.\n+   6: is the user-given name of the label, if any.  */\n+DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"uuB00is\", RTX_EXTRA)\n \n /* Say where in the code a source line starts, for symbol table's sake.\n    Operand:\n-   4: note-specific data\n-   5: enum insn_note\n-   6: unique number if insn_note == note_insn_deleted_label.  */\n-DEF_RTL_EXPR(NOTE, \"note\", \"iuuB0ni\", RTX_EXTRA)\n+   3: note-specific data\n+   4: enum insn_note\n+   5: unique number if insn_note == note_insn_deleted_label.  */\n+DEF_RTL_EXPR(NOTE, \"note\", \"uuB0ni\", RTX_EXTRA)\n \n /* ----------------------------------------------------------------------\n    Top level constituents of INSN, JUMP_INSN and CALL_INSN."}, {"sha": "46d0a118d88471ff9f5b7d92e31bcd2a7cc2e8c0", "filename": "gcc/rtl.h", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8921dc73ef78e96e483df3ea204128d320aca2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ed8921dc73ef78e96e483df3ea204128d320aca2", "patch": "@@ -109,6 +109,10 @@ extern const char * const rtx_format[NUM_RTX_CODE];\n extern const enum rtx_class rtx_class[NUM_RTX_CODE];\n #define GET_RTX_CLASS(CODE)\t\t(rtx_class[(int) (CODE)])\n \n+/* True if CODE is part of the insn chain (i.e. has INSN_UID, PREV_INSN\n+   and NEXT_INSN fields).  */\n+#define INSN_CHAIN_CODE_P(CODE) IN_RANGE (CODE, DEBUG_INSN, NOTE)\n+\n extern const unsigned char rtx_code_size[NUM_RTX_CODE];\n extern const unsigned char rtx_next[NUM_RTX_CODE];\n \f\n@@ -355,6 +359,9 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n     /* The ORIGINAL_REGNO of a REG.  */\n     unsigned int original_regno;\n \n+    /* The INSN_UID of an RTX_INSN-class code.  */\n+    int insn_uid;\n+\n     /* In a CONST_WIDE_INT (aka hwivec_def), this is the number of\n        HOST_WIDE_INTs in the hwivec_def.  */\n     unsigned int num_elem;\n@@ -817,15 +824,12 @@ extern void rtvec_check_failed_bounds (const_rtvec, int, const char *, int,\n \t\t\t     __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n-#define RTL_FLAG_CHECK8(NAME, RTX, C1, C2, C3, C4, C5, C6, C7, C8)\t\\\n+#define RTL_INSN_CHAIN_FLAG_CHECK(NAME, RTX) \t\t\t\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n ({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n-   if (GET_CODE (_rtx) != C1 && GET_CODE (_rtx) != C2\t\t\t\\\n-       && GET_CODE (_rtx) != C3 && GET_CODE (_rtx) != C4\t\t\\\n-       && GET_CODE (_rtx) != C5 && GET_CODE (_rtx) != C6\t\t\\\n-       && GET_CODE (_rtx) != C7 && GET_CODE (_rtx) != C8)\t\t\\\n-     rtl_check_failed_flag  (NAME, _rtx, __FILE__, __LINE__,\t\t\\\n-\t\t\t     __FUNCTION__);\t\t\t\t\\\n+   if (!INSN_CHAIN_CODE_P (GET_CODE (_rtx)))\t\t\t\t\\\n+     rtl_check_failed_flag (NAME, _rtx, __FILE__, __LINE__,\t\t\\\n+\t\t\t    __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n@@ -839,10 +843,10 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n #define RTL_FLAG_CHECK2(NAME, RTX, C1, C2)\t\t\t\t(RTX)\n #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)\t\t\t\t(RTX)\n #define RTL_FLAG_CHECK4(NAME, RTX, C1, C2, C3, C4)\t\t\t(RTX)\n-#define RTL_FLAG_CHECK5(NAME, RTX, C1, C2, C3, C4, C5)\t\t(RTX)\n+#define RTL_FLAG_CHECK5(NAME, RTX, C1, C2, C3, C4, C5)\t\t\t(RTX)\n #define RTL_FLAG_CHECK6(NAME, RTX, C1, C2, C3, C4, C5, C6)\t\t(RTX)\n #define RTL_FLAG_CHECK7(NAME, RTX, C1, C2, C3, C4, C5, C6, C7)\t\t(RTX)\n-#define RTL_FLAG_CHECK8(NAME, RTX, C1, C2, C3, C4, C5, C6, C7, C8)\t(RTX)\n+#define RTL_INSN_CHAIN_FLAG_CHECK(NAME, RTX) \t\t\t\t(RTX)\n #endif\n \n #define XINT(RTX, N)\t(RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)\n@@ -899,18 +903,19 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n /* Holds a unique number for each insn.\n    These are not necessarily sequentially increasing.  */\n-#define INSN_UID(INSN)  XINT (INSN, 0)\n+#define INSN_UID(INSN) \\\n+  (RTL_INSN_CHAIN_FLAG_CHECK (\"INSN_UID\", (INSN))->u2.insn_uid)\n \n /* Chain insns together in sequence.  */\n-#define PREV_INSN(INSN)\tXEXP (INSN, 1)\n-#define NEXT_INSN(INSN)\tXEXP (INSN, 2)\n+#define PREV_INSN(INSN)\tXEXP (INSN, 0)\n+#define NEXT_INSN(INSN)\tXEXP (INSN, 1)\n \n-#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)\n+#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 2)\n \n /* The body of an insn.  */\n-#define PATTERN(INSN)\tXEXP (INSN, 4)\n+#define PATTERN(INSN)\tXEXP (INSN, 3)\n \n-#define INSN_LOCATION(INSN) XUINT (INSN, 5)\n+#define INSN_LOCATION(INSN) XUINT (INSN, 4)\n \n #define INSN_HAS_LOCATION(INSN) ((LOCATION_LOCUS (INSN_LOCATION (INSN)))\\\n   != UNKNOWN_LOCATION)\n@@ -921,17 +926,15 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n /* Code number of instruction, from when it was recognized.\n    -1 means this instruction has not been recognized yet.  */\n-#define INSN_CODE(INSN) XINT (INSN, 6)\n+#define INSN_CODE(INSN) XINT (INSN, 5)\n \n #define RTX_FRAME_RELATED_P(RTX)\t\t\t\t\t\\\n   (RTL_FLAG_CHECK6 (\"RTX_FRAME_RELATED_P\", (RTX), DEBUG_INSN, INSN,\t\\\n \t\t    CALL_INSN, JUMP_INSN, BARRIER, SET)->frame_related)\n \n /* 1 if RTX is an insn that has been deleted.  */\n #define INSN_DELETED_P(RTX)\t\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK8 (\"INSN_DELETED_P\", (RTX), DEBUG_INSN, INSN,\t\t\\\n-\t\t    CALL_INSN, JUMP_INSN, JUMP_TABLE_DATA,\t\t\\\n-\t\t    CODE_LABEL, BARRIER, NOTE)->volatil)\n+  (RTL_INSN_CHAIN_FLAG_CHECK (\"INSN_DELETED_P\", (RTX))->volatil)\n \n /* 1 if RTX is a call to a const function.  Built from ECF_CONST and\n    TREE_READONLY.  */\n@@ -981,7 +984,7 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n    chain pointer and the first operand is the REG being described.\n    The mode field of the EXPR_LIST contains not a real machine mode\n    but a value from enum reg_note.  */\n-#define REG_NOTES(INSN)\tXEXP(INSN, 7)\n+#define REG_NOTES(INSN)\tXEXP(INSN, 6)\n \n /* In an ENTRY_VALUE this is the DECL_INCOMING_RTL of the argument in\n    question.  */\n@@ -1012,12 +1015,12 @@ extern const char * const reg_note_name[];\n      CLOBBER expressions document the registers explicitly clobbered\n    by this CALL_INSN.\n      Pseudo registers can not be mentioned in this list.  */\n-#define CALL_INSN_FUNCTION_USAGE(INSN)\tXEXP(INSN, 8)\n+#define CALL_INSN_FUNCTION_USAGE(INSN)\tXEXP(INSN, 7)\n \n /* The label-number of a code-label.  The assembler label\n    is made from `L' and the label-number printed in decimal.\n    Label numbers are unique in a compilation.  */\n-#define CODE_LABEL_NUMBER(INSN)\tXINT (INSN, 6)\n+#define CODE_LABEL_NUMBER(INSN)\tXINT (INSN, 5)\n \n /* In a NOTE that is a line number, this is a string for the file name that the\n    line is in.  We use the same field to record block numbers temporarily in\n@@ -1026,19 +1029,19 @@ extern const char * const reg_note_name[];\n    */\n \n /* Opaque data.  */\n-#define NOTE_DATA(INSN)\t        RTL_CHECKC1 (INSN, 4, NOTE)\n-#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 4, NOTE)\n+#define NOTE_DATA(INSN)\t        RTL_CHECKC1 (INSN, 3, NOTE)\n+#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 3, NOTE)\n #define SET_INSN_DELETED(INSN) set_insn_deleted (INSN);\n-#define NOTE_BLOCK(INSN)\tXCTREE (INSN, 4, NOTE)\n-#define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 4, NOTE)\n-#define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 4, NOTE)\n-#define NOTE_VAR_LOCATION(INSN)\tXCEXP (INSN, 4, NOTE)\n-#define NOTE_CFI(INSN)\t\tXCCFI (INSN, 4, NOTE)\n-#define NOTE_LABEL_NUMBER(INSN)\tXCINT (INSN, 4, NOTE)\n+#define NOTE_BLOCK(INSN)\tXCTREE (INSN, 3, NOTE)\n+#define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 3, NOTE)\n+#define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 3, NOTE)\n+#define NOTE_VAR_LOCATION(INSN)\tXCEXP (INSN, 3, NOTE)\n+#define NOTE_CFI(INSN)\t\tXCCFI (INSN, 3, NOTE)\n+#define NOTE_LABEL_NUMBER(INSN)\tXCINT (INSN, 3, NOTE)\n \n /* In a NOTE that is a line number, this is the line number.\n    Other kinds of NOTEs are identified by negative numbers here.  */\n-#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)\n+#define NOTE_KIND(INSN) XCINT (INSN, 4, NOTE)\n \n /* Nonzero if INSN is a note marking the beginning of a basic block.  */\n #define NOTE_INSN_BASIC_BLOCK_P(INSN) \\\n@@ -1121,11 +1124,11 @@ extern const char * const note_insn_name[NOTE_INSN_MAX];\n \n /* The name of a label, in case it corresponds to an explicit label\n    in the input source code.  */\n-#define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)\n+#define LABEL_NAME(RTX) XCSTR (RTX, 6, CODE_LABEL)\n \n /* In jump.c, each label contains a count of the number\n    of LABEL_REFs that point at it, so unused labels can be deleted.  */\n-#define LABEL_NUSES(RTX) XCINT (RTX, 5, CODE_LABEL)\n+#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)\n \n /* Labels carry a two-bit field composed of the ->jump and ->call\n    bits.  This field indicates whether the label is an alternate\n@@ -1180,12 +1183,12 @@ enum label_kind\n /* In jump.c, each JUMP_INSN can point to a label that it can jump to,\n    so that if the JUMP_INSN is deleted, the label's LABEL_NUSES can\n    be decremented and possibly the label can be deleted.  */\n-#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)\n+#define JUMP_LABEL(INSN)   XCEXP (INSN, 7, JUMP_INSN)\n \n /* Once basic blocks are found, each CODE_LABEL starts a chain that\n    goes through all the LABEL_REFs that jump to that label.  The chain\n    eventually winds up at the CODE_LABEL: it is circular.  */\n-#define LABEL_REFS(LABEL) XCEXP (LABEL, 4, CODE_LABEL)\n+#define LABEL_REFS(LABEL) XCEXP (LABEL, 3, CODE_LABEL)\n \f\n /* For a REG rtx, REGNO extracts the register number.  REGNO can only\n    be used on RHS.  Use SET_REGNO to change the value.  */"}]}