{"sha": "4744afba0fa727eb34cc673ce51f17648a5731e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0NGFmYmEwZmE3MjdlYjM0Y2M2NzNjZTUxZjE3NjQ4YTU3MzFlMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-19T04:42:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-19T04:42:14Z"}, "message": "re PR middle-end/16417 (crappy code (gcc.c-torture/compile/20020210-1.c) in arguments causes ICE)\n\n        PR middle-end/16417\n        * c-decl.c (store_parm_decls): Clarify get_pending_sizes insertion\n        comment.\n        * c-objc-common.c (c_cannot_inline_tree_fn): Remove pending sizes\n        checks.\n        * c-tree.h (struct lang_decl): Remove pending_sizes.\n        * function.c: Include tree-gimple.h\n        (assign_parm_setup_reg): Remove callee-copies code.\n        (gimplify_parm_type, gimplify_parameters): New functions.\n        (expand_pending_sizes): Remove.\n        (expand_function_start): Don't call it.\n        * gimplify.c (gimplify_expr): Examine DECL_VALUE_EXPR for PARM_DECL.\n        (gimplify_body): Add do_parms argument.  Use gimplify_parameters.\n        (gimplify_function_tree): Setup cfun.  Update gimplify_body call.\n        * tree-gimple.h (gimplify_body): Update decl.\n        * tree-inline.c (initialize_inlined_parameters): Update gimplify_body\n        call.\n        * tree.h (gimplify_parameters): Declare.\n        * Makefile.in (function.o): Depend on TREE_GIMPLE_H.\n\nFrom-SVN: r92373", "tree": {"sha": "f75b535fe61fe21974e49ac55426cc11e7fe84be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f75b535fe61fe21974e49ac55426cc11e7fe84be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4744afba0fa727eb34cc673ce51f17648a5731e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4744afba0fa727eb34cc673ce51f17648a5731e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4744afba0fa727eb34cc673ce51f17648a5731e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4744afba0fa727eb34cc673ce51f17648a5731e3/comments", "author": null, "committer": null, "parents": [{"sha": "ca6af4f857cf2b93e89e99bad1dd2598c0b74f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6af4f857cf2b93e89e99bad1dd2598c0b74f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6af4f857cf2b93e89e99bad1dd2598c0b74f02"}], "stats": {"total": 277, "additions": 169, "deletions": 108}, "files": [{"sha": "60b90b06b8c01eb0124b7598ac3de5f8363cf4f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -1,3 +1,25 @@\n+2004-12-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/16417\n+\t* c-decl.c (store_parm_decls): Clarify get_pending_sizes insertion\n+\tcomment.\n+\t* c-objc-common.c (c_cannot_inline_tree_fn): Remove pending sizes\n+\tchecks.\n+\t* c-tree.h (struct lang_decl): Remove pending_sizes.\n+\t* function.c: Include tree-gimple.h\n+\t(assign_parm_setup_reg): Remove callee-copies code.\n+\t(gimplify_parm_type, gimplify_parameters): New functions.\n+\t(expand_pending_sizes): Remove.\n+\t(expand_function_start): Don't call it.\n+\t* gimplify.c (gimplify_expr): Examine DECL_VALUE_EXPR for PARM_DECL.\n+\t(gimplify_body): Add do_parms argument.  Use gimplify_parameters.\n+\t(gimplify_function_tree): Setup cfun.  Update gimplify_body call.\n+\t* tree-gimple.h (gimplify_body): Update decl.\n+\t* tree-inline.c (initialize_inlined_parameters): Update gimplify_body\n+\tcall.\n+\t* tree.h (gimplify_parameters): Declare.\n+\t* Makefile.in (function.o): Depend on TREE_GIMPLE_H.\n+\n 2004-12-18  Richard Henderson  <rth@redhat.com>\n \n \t* c-decl.c (finish_struct): Add DECL_EXPR for variable sized"}, {"sha": "c73562b6c3c9a49ff382d8f9567115e83bbf7073", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -1843,7 +1843,7 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_\n    output.h $(C_PRAGMA_H) toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h real.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) $(CFGLAYOUT_H) \\\n+   $(TREE_H) $(CFGLAYOUT_H) $(TREE_GIMPLE_H) \\\n    $(FLAGS_H) function.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) \\\n    $(TM_P_H) langhooks.h gt-function.h $(TARGET_H) basic-block.h"}, {"sha": "e6b4cba791294418f96c2b4bc86ebd380a41deb0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -6235,8 +6235,11 @@ store_parm_decls (void)\n   DECL_SAVED_TREE (fndecl) = push_stmt_list ();\n \n   /* ??? Insert the contents of the pending sizes list into the function\n-     to be evaluated.  This just changes mis-behavior until assign_parms\n-     phase ordering problems are resolved.  */\n+     to be evaluated.  The only reason left to have this is\n+\tvoid foo(int n, int array[n++])\n+     because we throw away the array type in favor of a pointer type, and\n+     thus won't naturally see the SAVE_EXPR containing the increment.  All\n+     other pending sizes would be handled by gimplify_parameters.  */\n   {\n     tree t;\n     for (t = nreverse (get_pending_sizes ()); t ; t = TREE_CHAIN (t))"}, {"sha": "35bcf9e327559430e1b9474c1b8b24acfe12b3b2", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -68,7 +68,6 @@ int\n c_cannot_inline_tree_fn (tree *fnp)\n {\n   tree fn = *fnp;\n-  tree t;\n   bool do_warning = (warn_inline\n \t\t     && DECL_INLINE (fn)\n \t\t     && DECL_DECLARED_INLINE_P (fn)\n@@ -101,35 +100,6 @@ c_cannot_inline_tree_fn (tree *fnp)\n       goto cannot_inline;\n     }\n \n-  /* If a function has pending sizes, we must not defer its\n-     compilation, and we can't inline it as a tree.  */\n-  if (fn == current_function_decl)\n-    {\n-      t = get_pending_sizes ();\n-      put_pending_sizes (t);\n-\n-      if (t)\n-\t{\n-\t  if (do_warning)\n-\t    warning (\"%Jfunction %qF can never be inlined because it has \"\n-\t\t     \"pending sizes\", fn, fn);\n-\t  goto cannot_inline;\n-\t}\n-    }\n-\n-  if (!DECL_FILE_SCOPE_P (fn))\n-    {\n-      /* If a nested function has pending sizes, we may have already\n-         saved them.  */\n-      if (DECL_LANG_SPECIFIC (fn)->pending_sizes)\n-\t{\n-\t  if (do_warning)\n-\t    warning (\"%Jnested function %qF can never be inlined because it \"\n-\t\t     \"has possibly saved pending sizes\", fn, fn);\n-\t  goto cannot_inline;\n-\t}\n-    }\n-\n   return 0;\n \n  cannot_inline:"}, {"sha": "43001ca0aa54d3f81bf5df4ea6dc3faf512293d4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -41,10 +41,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct lang_decl GTY(())\n {\n-  /* The return types and parameter types may have variable size.\n-     This is a list of any SAVE_EXPRs that need to be evaluated to\n-     compute those sizes.  */\n-  tree pending_sizes;\n+  char dummy;\n };\n \n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */"}, {"sha": "9251071d6f8bad1e55fa62cf49e86f4a94aaf9e4", "filename": "gcc/function.c", "status": "modified", "additions": 110, "deletions": 63, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -59,6 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"target.h\"\n #include \"cfglayout.h\"\n+#include \"tree-gimple.h\"\n \n #ifndef LOCAL_ALIGNMENT\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n@@ -2804,50 +2805,6 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n       data->stack_parm = NULL;\n     }\n \n-  /* If we are passed an arg by reference and it is our responsibility\n-     to make a copy, do it now.\n-     PASSED_TYPE and PASSED mode now refer to the pointer, not the\n-     original argument, so we must recreate them in the call to\n-     FUNCTION_ARG_CALLEE_COPIES.  */\n-  /* ??? Later add code to handle the case that if the argument isn't\n-     modified, don't do the copy.  */\n-\n-  else if (data->passed_pointer)\n-    {\n-      tree type = TREE_TYPE (data->passed_type);\n-    \n-      if (reference_callee_copied (&all->args_so_far, TYPE_MODE (type),\n-\t\t\t\t   type, data->named_arg))\n-\t{\n-\t  rtx copy;\n-\n-\t  /* This sequence may involve a library call perhaps clobbering\n-\t     registers that haven't been copied to pseudos yet.  */\n-\n-\t  push_to_sequence (all->conversion_insns);\n-\n-\t  if (!COMPLETE_TYPE_P (type)\n-\t      || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n-\t    {\n-\t      /* This is a variable sized object.  */\n-\t      copy = allocate_dynamic_stack_space (expr_size (parm), NULL_RTX,\n-\t\t\t\t\t\t   TYPE_ALIGN (type));\n-\t      copy = gen_rtx_MEM (BLKmode, copy);\n-\t    }\n-\t  else\n-\t    copy = assign_stack_temp (TYPE_MODE (type),\n-\t\t\t\t      int_size_in_bytes (type), 1);\n-\t  set_mem_attributes (copy, parm, 1);\n-\n-\t  store_expr (parm, copy, 0);\n-\t  emit_move_insn (parmreg, XEXP (copy, 0));\n-\t  all->conversion_insns = get_insns ();\n-\t  end_sequence ();\n-\n-\t  did_conversion = true;\n-\t}\n-    }\n-\n   /* Mark the register as eliminable if we did no conversion and it was\n      copied from memory at a fixed offset, and the arg pointer was not\n      copied to a pseudo-reg.  If the arg pointer is a pseudo reg or the\n@@ -3202,6 +3159,115 @@ assign_parms (tree fndecl)\n \t}\n     }\n }\n+\n+/* A subroutine of gimplify_parameters, invoked via walk_tree.\n+   For all seen types, gimplify their sizes.  */\n+\n+static tree\n+gimplify_parm_type (tree *tp, int *walk_subtrees, void *data)\n+{\n+  tree t = *tp;\n+\n+  *walk_subtrees = 0;\n+  if (TYPE_P (t))\n+    {\n+      if (POINTER_TYPE_P (t))\n+\t*walk_subtrees = 1;\n+      else if (TYPE_SIZE (t) && !TREE_CONSTANT (TYPE_SIZE (t)))\n+\t{\n+\t  gimplify_type_sizes (t, (tree *) data);\n+\t  *walk_subtrees = 1;\n+\t}\n+    }\n+\n+  return NULL;\n+}\n+\n+/* Gimplify the parameter list for current_function_decl.  This involves\n+   evaluating SAVE_EXPRs of variable sized parameters and generating code\n+   to implement callee-copies reference parameters.  Returns a list of\n+   statements to add to the beginning of the function, or NULL if nothing\n+   to do.  */\n+\n+tree\n+gimplify_parameters (void)\n+{\n+  struct assign_parm_data_all all;\n+  tree fnargs, parm, stmts = NULL;\n+\n+  assign_parms_initialize_all (&all);\n+  fnargs = assign_parms_augmented_arg_list (&all);\n+\n+  for (parm = fnargs; parm; parm = TREE_CHAIN (parm))\n+    {\n+      struct assign_parm_data_one data;\n+\n+      /* Extract the type of PARM; adjust it according to ABI.  */\n+      assign_parm_find_data_types (&all, parm, &data);\n+\n+      /* Early out for errors and void parameters.  */\n+      if (data.passed_mode == VOIDmode || DECL_SIZE (parm) == NULL)\n+\tcontinue;\n+\n+      /* Update info on where next arg arrives in registers.  */\n+      FUNCTION_ARG_ADVANCE (all.args_so_far, data.promoted_mode,\n+\t\t\t    data.passed_type, data.named_arg);\n+\n+      /* ??? Once upon a time variable_size stuffed parameter list\n+\t SAVE_EXPRs (amongst others) onto a pending sizes list.  This\n+\t turned out to be less than manageable in the gimple world.\n+\t Now we have to hunt them down ourselves.  */\n+      walk_tree_without_duplicates (&data.passed_type,\n+\t\t\t\t    gimplify_parm_type, &stmts);\n+\n+      if (!TREE_CONSTANT (DECL_SIZE (parm)))\n+\t{\n+\t  gimplify_one_sizepos (&DECL_SIZE (parm), &stmts);\n+\t  gimplify_one_sizepos (&DECL_SIZE_UNIT (parm), &stmts);\n+\t}\n+\n+      if (data.passed_pointer)\n+\t{\n+          tree type = TREE_TYPE (data.passed_type);\n+\t  if (reference_callee_copied (&all.args_so_far, TYPE_MODE (type),\n+\t\t\t\t       type, data.named_arg))\n+\t    {\n+\t      tree local, t;\n+\n+\t      /* For constant sized objects, this is trivial; for\n+\t\t variable-sized objects, we have to play games.  */\n+\t      if (TREE_CONSTANT (DECL_SIZE (parm)))\n+\t\t{\n+\t\t  local = create_tmp_var (type, get_name (parm));\n+\t\t  DECL_IGNORED_P (local) = 0;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  tree ptr_type, addr, args;\n+\n+\t\t  ptr_type = build_pointer_type (type);\n+\t\t  addr = create_tmp_var (ptr_type, get_name (parm));\n+\t\t  DECL_IGNORED_P (addr) = 0;\n+\t\t  local = build_fold_indirect_ref (addr);\n+\n+\t\t  args = tree_cons (NULL, DECL_SIZE_UNIT (parm), NULL);\n+\t\t  t = built_in_decls[BUILT_IN_ALLOCA];\n+\t\t  t = build_function_call_expr (t, args);\n+\t\t  t = fold_convert (ptr_type, t);\n+\t\t  t = build2 (MODIFY_EXPR, void_type_node, addr, t);\n+\t\t  gimplify_and_add (t, &stmts);\n+\t\t}\n+\n+\t      t = build2 (MODIFY_EXPR, void_type_node, local, parm);\n+\t      gimplify_and_add (t, &stmts);\n+\n+\t      DECL_VALUE_EXPR (parm) = local;\n+\t    }\n+\t}\n+    }\n+\n+  return stmts;\n+}\n \f\n /* Indicate whether REGNO is an incoming argument to the current function\n    that was promoted to a wider mode.  If so, return the RTX for the\n@@ -3972,22 +4038,6 @@ expand_main_function (void)\n #endif\n }\n \f\n-/* The PENDING_SIZES represent the sizes of variable-sized types.\n-   Create RTL for the various sizes now (using temporary variables),\n-   so that we can refer to the sizes from the RTL we are generating\n-   for the current function.  The PENDING_SIZES are a TREE_LIST.  The\n-   TREE_VALUE of each node is a SAVE_EXPR.  */\n-\n-static void\n-expand_pending_sizes (tree pending_sizes)\n-{\n-  tree tem;\n-\n-  /* Evaluate now the sizes of any types declared among the arguments.  */\n-  for (tem = pending_sizes; tem; tem = TREE_CHAIN (tem))\n-    expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode, 0);\n-}\n-\n /* Start the RTL for a new function, and set variables used for\n    emitting RTL.\n    SUBR is the FUNCTION_DECL node.\n@@ -4152,9 +4202,6 @@ expand_function_start (tree subr)\n      since some things (like trampolines) get placed before this.  */\n   tail_recursion_reentry = emit_note (NOTE_INSN_DELETED);\n \n-  /* Evaluate now the sizes of any types declared among the arguments.  */\n-  expand_pending_sizes (nreverse (get_pending_sizes ()));\n-\n   /* Make sure there is a line number after the function entry setup code.  */\n   force_next_line_note ();\n }"}, {"sha": "55889ea9dcceb0bc0fa5373bfb027362980c7cba", "filename": "gcc/gimplify.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -3832,6 +3832,10 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t      ret = GS_ERROR;\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n+\n+\tcase PARM_DECL:\n+\t  tmp = *expr_p;\n \n \t  /* If this is a local variable sized decl, it must be accessed\n \t     indirectly.  Perform that substitution.  */\n@@ -4213,10 +4217,10 @@ check_pointer_types_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n    function decl containing BODY.  */\n \n void\n-gimplify_body (tree *body_p, tree fndecl)\n+gimplify_body (tree *body_p, tree fndecl, bool do_parms)\n {\n   location_t saved_location = input_location;\n-  tree body;\n+  tree body, parm_stmts;\n \n   timevar_push (TV_TREE_GIMPLIFY);\n   push_gimplify_context ();\n@@ -4231,13 +4235,14 @@ gimplify_body (tree *body_p, tree fndecl)\n   /* Make sure input_location isn't set to something wierd.  */\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n \n+  /* Resolve callee-copies.  This has to be done before processing\n+     the body so that DECL_VALUE_EXPR gets processed correctly.  */\n+  parm_stmts = do_parms ? gimplify_parameters () : NULL;\n+\n   /* Gimplify the function's body.  */\n   gimplify_stmt (body_p);\n   body = *body_p;\n \n-  /* Unshare again, in case gimplification was sloppy.  */\n-  unshare_all_trees (body);\n-\n   if (!body)\n     body = alloc_stmt_list ();\n   else if (TREE_CODE (body) == STATEMENT_LIST)\n@@ -4256,6 +4261,18 @@ gimplify_body (tree *body_p, tree fndecl)\n       append_to_statement_list_force (body, &BIND_EXPR_BODY (b));\n       body = b;\n     }\n+\n+  /* If we had callee-copies statements, insert them at the beginning\n+     of the function.  */\n+  if (parm_stmts)\n+    {\n+      append_to_statement_list_force (BIND_EXPR_BODY (body), &parm_stmts);\n+      BIND_EXPR_BODY (body) = parm_stmts;\n+    }\n+\n+  /* Unshare again, in case gimplification was sloppy.  */\n+  unshare_all_trees (body);\n+\n   *body_p = body;\n \n   pop_gimplify_context (body);\n@@ -4278,8 +4295,11 @@ gimplify_function_tree (tree fndecl)\n \n   oldfn = current_function_decl;\n   current_function_decl = fndecl;\n+  cfun = DECL_STRUCT_FUNCTION (fndecl);\n+  if (cfun == NULL)\n+    allocate_struct_function (fndecl);\n \n-  gimplify_body (&DECL_SAVED_TREE (fndecl), fndecl);\n+  gimplify_body (&DECL_SAVED_TREE (fndecl), fndecl, true);\n \n   /* If we're instrumenting function entry/exit, then prepend the call to\n      the entry hook and wrap the whole function in a TRY_FINALLY_EXPR to\n@@ -4309,6 +4329,7 @@ gimplify_function_tree (tree fndecl)\n     }\n \n   current_function_decl = oldfn;\n+  cfun = oldfn ? DECL_STRUCT_FUNCTION (oldfn) : NULL;\n }\n \n \f"}, {"sha": "de62d29a5f38b1383a94e7f44d16eb879e1298a0", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -113,7 +113,7 @@ extern void gimplify_type_sizes (tree, tree *);\n extern void gimplify_one_sizepos (tree *, tree *);\n extern void gimplify_stmt (tree *);\n extern void gimplify_to_stmt_list (tree *);\n-extern void gimplify_body (tree *, tree);\n+extern void gimplify_body (tree *, tree, bool);\n extern void push_gimplify_context (void);\n extern void pop_gimplify_context (tree);\n extern void gimplify_and_add (tree, tree *);"}, {"sha": "53a16133a6af9d3a2714722123af3fae0f5f555e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -819,7 +819,7 @@ initialize_inlined_parameters (inline_data *id, tree args, tree static_chain,\n     }\n \n   if (gimplify_init_stmts_p)\n-    gimplify_body (&init_stmts, current_function_decl);\n+    gimplify_body (&init_stmts, current_function_decl, false);\n \n   declare_inline_vars (bind_expr, vars);\n   return init_stmts;"}, {"sha": "fa328bedad2ce68fd3ef4fbd3e5ce1310fa730c1", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4744afba0fa727eb34cc673ce51f17648a5731e3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4744afba0fa727eb34cc673ce51f17648a5731e3", "patch": "@@ -3602,6 +3602,7 @@ extern void push_function_context (void);\n extern void pop_function_context (void);\n extern void push_function_context_to (tree);\n extern void pop_function_context_from (tree);\n+extern tree gimplify_parameters (void);\n \n /* In print-rtl.c */\n #ifdef BUFSIZ"}]}