{"sha": "d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhNzY0YzRmYmFmOWRmMjJkNDFjMDBkZjRhMmVjNTMzNTU0NjBkNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:35:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:35:11Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document that Allow_Integer_Address is permitted\n\tonly if System.Address is a private type.\n\t* opt.ads (Allow_Integer_Address): No longer set by -gnates.\n\t* sem_prag.adb (Analyze_Pragma, case Allow_Integer_Address):\n\tAllowed only if type System.Address is private, since otherwise\n\tit makes no sense.\n\t* sem_res.adb: Fix failure to properly Analyze unchecked\n\tconversions that were introduced by Allow_Integer_Address.\n\t* switch-c.adb: Remove -gnates switch.\n\t* usage.adb: Remove -gnates switch.\n\t* gnat_ugn.texi: Remove documentation of -gnates flag.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Pre-analyze and\n\tresolve expression to perform proper name capture.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Semantics): When saving/restoring configuration\n\tswitches, the spec of a pre- defined unit that is the main unit\n\tmust be treated as a predefined unit as well.\n\n2014-01-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch7.adb (Wrap_Transient_Expression): For a Boolean\n\texpression, insert an extra conditional expression when saving\n\tthe value of the expression, for the benefit of control flow\n\tgraph based coverage analysis.\n\t* exp_ch3.adb: Minor reformatting.\n\nFrom-SVN: r206826", "tree": {"sha": "51b0999be81a06ef65f8ab9ba8cfaba112cdf786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51b0999be81a06ef65f8ab9ba8cfaba112cdf786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/comments", "author": null, "committer": null, "parents": [{"sha": "818b578d1524f1aedf2c58ffe3b424023b2a79af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b578d1524f1aedf2c58ffe3b424023b2a79af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818b578d1524f1aedf2c58ffe3b424023b2a79af"}], "stats": {"total": 125, "additions": 88, "deletions": 37}, "files": [{"sha": "3e571ff1193a2f3424e007a6cf0a607767a9c7e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -1,3 +1,36 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document that Allow_Integer_Address is permitted\n+\tonly if System.Address is a private type.\n+\t* opt.ads (Allow_Integer_Address): No longer set by -gnates.\n+\t* sem_prag.adb (Analyze_Pragma, case Allow_Integer_Address):\n+\tAllowed only if type System.Address is private, since otherwise\n+\tit makes no sense.\n+\t* sem_res.adb: Fix failure to properly Analyze unchecked\n+\tconversions that were introduced by Allow_Integer_Address.\n+\t* switch-c.adb: Remove -gnates switch.\n+\t* usage.adb: Remove -gnates switch.\n+\t* gnat_ugn.texi: Remove documentation of -gnates flag.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Pre-analyze and\n+\tresolve expression to perform proper name capture.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Semantics): When saving/restoring configuration\n+\tswitches, the spec of a pre- defined unit that is the main unit\n+\tmust be treated as a predefined unit as well.\n+\n+2014-01-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch7.adb (Wrap_Transient_Expression): For a Boolean\n+\texpression, insert an extra conditional expression when saving\n+\tthe value of the expression, for the benefit of control flow\n+\tgraph based coverage analysis.\n+\t* exp_ch3.adb: Minor reformatting.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat1drv.adb: Set Allow_Integer_Address in relaxed semantics mode."}, {"sha": "087c79149c59842d8cfc49f4bc49556bdb908365", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -941,7 +941,7 @@ package body Exp_Ch3 is\n       Rec_Id            : Entity_Id;\n       Loc               : Source_Ptr;\n       Enclosing_Func_Id : Entity_Id;\n-      Sequence          : Nat     := 1;\n+      Sequence          : Nat := 1;\n       Type_Def          : Node_Id;\n       V                 : Node_Id;\n \n@@ -984,7 +984,7 @@ package body Exp_Ch3 is\n       begin\n          Case_Node := New_Node (N_Case_Statement, Loc);\n \n-         --  Replace the discriminant which controls the variant, with the name\n+         --  Replace the discriminant which controls the variant with the name\n          --  of the formal of the checking function.\n \n          Set_Expression (Case_Node, Make_Identifier (Loc, Chars (Case_Id)));"}, {"sha": "e1a1d87771ad9e6da0350c35a461fc3877b7ca95", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -7960,8 +7960,8 @@ package body Exp_Ch7 is\n    -------------------------------\n \n    procedure Wrap_Transient_Expression (N : Node_Id) is\n-      Expr : constant Node_Id    := Relocate_Node (N);\n       Loc  : constant Source_Ptr := Sloc (N);\n+      Expr : Node_Id             := Relocate_Node (N);\n       Temp : constant Entity_Id  := Make_Temporary (Loc, 'E', N);\n       Typ  : constant Entity_Id  := Etype (N);\n \n@@ -7972,14 +7972,31 @@ package body Exp_Ch7 is\n       --    declare\n       --       M : constant Mark_Id := SS_Mark;\n       --       procedure Finalizer is ...  (See Build_Finalizer)\n-\n+      --\n       --    begin\n-      --       Temp := <Expr>;\n+      --       Temp := <Expr>;                           --  general case\n+      --       Temp := (if <Expr> then True else False); --  boolean case\n       --\n       --    at end\n       --       Finalizer;\n       --    end;\n \n+      --  A special case is made for Boolean expressions so that the back-end\n+      --  knows to generate a conditional branch instruction if running with\n+      --  -fpreserve-control-flow. This ensures that a control flow change\n+      --  signalling the decision outcome occurs before the cleanup actions.\n+      --  In the absence of -fpreserve-control-flow, the back-end will\n+      --  optimize away the extra conditional expression, so we can do this\n+      --  modification unconditionally here.\n+\n+      if Is_Boolean_Type (Typ) then\n+         Expr := Make_If_Expression (Loc,\n+                   Expressions => New_List (\n+                     Expr,\n+                     New_Occurrence_Of (Standard_True, Loc),\n+                     New_Occurrence_Of (Standard_False, Loc)));\n+      end if;\n+\n       Insert_Actions (N, New_List (\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Temp,"}, {"sha": "5e32e74c99ce022375081d1e649da7e006dd94be", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -1231,8 +1231,11 @@ pragma Allow_Integer_Address;\n @end smallexample\n \n @noindent\n-In most versions of GNAT, @code{System.Address} is a private type, which means\n-that integer values are not allowed. If the configuration pragma\n+This configuration pragma is allowed only\n+if type @code{System.Address} is a private type,\n+which is true in most versions of GNAT. which means that integer values,\n+in particular integer literals, are not allowed as address values.\n+If the configuration pragma\n @code{Allow_Integer_Address} is given, then integer expressions may\n be used anywhere a value of type @code{System.Address} is required.\n The effect is to introduce an implicit unchecked conversion from the"}, {"sha": "5acb851375d624fac06c7ae4d3689bc2e6cc1a47", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -3821,13 +3821,6 @@ these errors become warnings (which can be ignored, or suppressed in the usual\n manner). This can be useful in some specialized circumstances such as the\n temporary use of special test software.\n \n-@ifclear vms\n-@item -gnates\n-@cindex @option{-gnates} (@command{gcc})\n-Activates @code{Allow_Integer_Address} mode as though the corresponding\n-configuration pragma was present.\n-@end ifclear\n-\n @item -gnateS\n @cindex @option{-gnateS} (@command{gcc})\n Synonym of @option{-fdump-scos}, kept for backwards compatibility."}, {"sha": "58f0fe6c57c731cdef669081dbe53696a618aa37", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -191,9 +191,8 @@ package Opt is\n    Allow_Integer_Address : Boolean := False;\n    --  GNAT\n    --  Allow use of integer expression in a context requiring System.Address.\n-   --  Set by the use of configuration pragma Allow_Integer_Address, or the\n-   --  compiler switch -gnates. Also set in relaxed semantics mode for use\n-   --  by CodePeer.\n+   --  Set by the use of configuration pragma Allow_Integer_Address Also set\n+   --  in relaxed semantics mode for use by CodePeer or when -gnatd.M is used.\n \n    All_Sources : Boolean := False;\n    --  GNATBIND"}, {"sha": "a17501424607681be6d772c9b73e9623e34a9151", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -1322,6 +1322,16 @@ package body Sem is\n       --  If the main unit is generic, every compiled unit, including its\n       --  context, is compiled with expansion disabled.\n \n+      --  configuration flags have special settings when compiling a predefined\n+      --  file as a main unit. This applies to its spec as well.\n+\n+      Is_Main_Unit : constant Boolean :=\n+         Current_Sem_Unit = Main_Unit\n+           or else\n+             (Nkind (Unit (Cunit (Main_Unit))) = N_Package_Body\n+               and then Library_Unit (Cunit (Main_Unit)) =\n+                  Cunit (Current_Sem_Unit));\n+\n       Ext_Main_Source_Unit : constant Boolean :=\n                                In_Extended_Main_Source_Unit (Comp_Unit);\n       --  Determine if unit is in extended main source unit\n@@ -1421,7 +1431,7 @@ package body Sem is\n       Save_Opt_Config_Switches (Save_Config_Switches);\n       Set_Opt_Config_Switches\n         (Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit)),\n-         Current_Sem_Unit = Main_Unit);\n+          Is_Main_Unit);\n \n       --  Save current non-partition-wide restrictions\n "}, {"sha": "995d0840f1cecd1df7e721008e816759738e9ab5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -452,15 +452,17 @@ package body Sem_Ch6 is\n             Push_Scope (Id);\n             Install_Formals (Id);\n \n-            --  Do a preanalysis of the expression on a separate copy, to\n-            --  prevent visibility issues later with operators in instances.\n-            --  Attach copy to tree so that parent links are available.\n+            --  Preanalyze the expression for name capture, except in an\n+            --  instance, where this has been done during generic analysis,\n+            --  and will be redone when analyzing the body.\n \n             declare\n-               Expr : constant Node_Id := New_Copy_Tree (Expression (Ret));\n+               Expr : Node_Id renames Expression (Ret);\n             begin\n                Set_Parent (Expr, Ret);\n-               Preanalyze_Spec_Expression (Expr, Etype (Id));\n+               if not In_Instance then\n+                  Preanalyze_Spec_Expression (Expr, Etype (Id));\n+               end if;\n             end;\n \n             End_Scope;"}, {"sha": "54ed0b1430b22eceaf30f95faa4332934a894e56", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -9834,6 +9834,12 @@ package body Sem_Prag is\n          when Pragma_Allow_Integer_Address =>\n             GNAT_Pragma;\n             Check_Arg_Count (0);\n+\n+            if not Is_Private_Type (RTE (RE_Address)) then\n+               Error_Pragma\n+                 (\"pragma% allowed only if Address is a private type\");\n+            end if;\n+\n             Opt.Allow_Integer_Address := True;\n \n          --------------"}, {"sha": "c79c788e32d1d12fd6e8cb54f5059853e387d620", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -2625,6 +2625,7 @@ package body Sem_Res is\n                Rewrite\n                  (N, Unchecked_Convert_To (RTE (RE_Address),\n                   Relocate_Node (N)));\n+               Analyze_And_Resolve (N, RTE (RE_Address));\n                return;\n \n             --  OK, not the special case go ahead and issue message\n@@ -11645,6 +11646,7 @@ package body Sem_Res is\n       then\n          Rewrite (N,\n            Unchecked_Convert_To (RTE (RE_Address), Relocate_Node (N)));\n+         Analyze_And_Resolve (N, RTE (RE_Address));\n          return True;\n \n       --  Here we have a real conversion error"}, {"sha": "0d80f44a3a55ca16268ab5537ed601d506031c80", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -660,15 +660,6 @@ package body Switch.C is\n                   when 'P' =>\n                      Treat_Categorization_Errors_As_Warnings := True;\n \n-                  --  -gnates (allow integer expression for System.Address)\n-\n-                  --  Note: there is no VMS equivalent for this switch, since\n-                  --  in VMS, System.Address is an integer type in any case.\n-\n-                  when 's' =>\n-                     Allow_Integer_Address := True;\n-                     Ptr := Ptr + 1;\n-\n                   --  -gnateS (generate SCO information)\n \n                   --  Include Source Coverage Obligation information in ALI"}, {"sha": "3f566f47fb5687b76ae51adc8635d524e727d885", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a764c4fbaf9df22d41c00df4a2ec53355460d5/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "patch": "@@ -236,11 +236,6 @@ begin\n    Write_Switch_Char (\"eP\");\n    Write_Line (\"Pure/Prelaborate errors generate warnings rather than errors\");\n \n-   --  Line fofr -gnates switch\n-\n-   Write_Switch_Char (\"es\");\n-   Write_Line (\"Allow integer expression for System.Address value\");\n-\n    --  Line for -gnateS switch\n \n    Write_Switch_Char (\"eS\");"}]}