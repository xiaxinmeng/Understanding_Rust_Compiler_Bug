{"sha": "e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzYjI4YWU3ZjA5YzBiN2EzMGFiMGRkOTc2ZGI3NjFlZWIxYjBmOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-18T10:22:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-18T10:22:14Z"}, "message": "c++: Abbreviated function template return type [PR92187]\n\nWhen updating an auto return type of an abbreviated function template in\nsplice_late_return_type, we should also propagate PLACEHOLDER_TYPE_CONSTRAINTS\n(and cv-qualifiers) of the original auto node.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/92187\n\t* pt.c (splice_late_return_type): Propagate cv-qualifiers and\n\tPLACEHOLDER_TYPE_CONSTRAINTS from the original auto node to the new one.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92187\n\t* g++.dg/concepts/abbrev5.C: New test.\n\t* g++.dg/concepts/abbrev6.C: New test.", "tree": {"sha": "7f40923470b0d0449338419d8359f2e96011b3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f40923470b0d0449338419d8359f2e96011b3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/comments", "author": null, "committer": null, "parents": [{"sha": "c5bac7d127f288fd2f8a1f15c3f30da5903141c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bac7d127f288fd2f8a1f15c3f30da5903141c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bac7d127f288fd2f8a1f15c3f30da5903141c6"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "45c422f59507e167ea2534a744b3ad0b805dae9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "patch": "@@ -1,3 +1,9 @@\n+2020-04-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92187\n+\t* pt.c (splice_late_return_type): Propagate cv-qualifiers and\n+\tPLACEHOLDER_TYPE_CONSTRAINTS from the original auto node to the new one.\n+\n 2020-04-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94483"}, {"sha": "9e39f46a090c602b52628f89fd30f0388779571a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "patch": "@@ -29032,10 +29032,17 @@ splice_late_return_type (tree type, tree late_return_type)\n     {\n       tree idx = get_template_parm_index (*auto_node);\n       if (TEMPLATE_PARM_LEVEL (idx) <= processing_template_decl)\n-\t/* In an abbreviated function template we didn't know we were dealing\n-\t   with a function template when we saw the auto return type, so update\n-\t   it to have the correct level.  */\n-\t*auto_node = make_auto_1 (TYPE_IDENTIFIER (*auto_node), true);\n+\t{\n+\t  /* In an abbreviated function template we didn't know we were dealing\n+\t     with a function template when we saw the auto return type, so update\n+\t     it to have the correct level.  */\n+\t  tree new_auto = make_auto_1 (TYPE_IDENTIFIER (*auto_node), false);\n+\t  PLACEHOLDER_TYPE_CONSTRAINTS (new_auto)\n+\t    = PLACEHOLDER_TYPE_CONSTRAINTS (*auto_node);\n+\t  TYPE_CANONICAL (new_auto) = canonical_type_parameter (new_auto);\n+\t  new_auto = cp_build_qualified_type (new_auto, TYPE_QUALS (*auto_node));\n+\t  *auto_node = new_auto;\n+\t}\n     }\n   return type;\n }"}, {"sha": "08bef53e9112e5d1d960cd9be60eafafc41e494a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "patch": "@@ -1,3 +1,9 @@\n+2020-04-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92187\n+\t* g++.dg/concepts/abbrev5.C: New test.\n+\t* g++.dg/concepts/abbrev6.C: New test.\n+\n 2020-04-17  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/90275"}, {"sha": "de594b5c1df7268d27427e36b906226aef3d8f9e", "filename": "gcc/testsuite/g++.dg/concepts/abbrev5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev5.C?ref=e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/92187\n+// { dg-do compile { target concepts } }\n+\n+template <typename>\n+concept C = false;\n+\n+C auto f(auto)\n+{\n+  return 42; // { dg-error \"deduced return type\" }\n+}\n+\n+void foo()\n+{\n+  f(0);\n+}"}, {"sha": "862675e5193803fd13a0201103e10d47ff75da7c", "filename": "gcc/testsuite/g++.dg/concepts/abbrev6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev6.C?ref=e43b28ae7f09c0b7a30ab0dd976db761eeb1b0f9", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target concepts } }\n+\n+const auto &f(auto)\n+{\n+  static int n;\n+  return n;\n+}\n+\n+void foo()\n+{\n+  f(5) = 0; // { dg-error \"read-only\" }\n+}"}]}