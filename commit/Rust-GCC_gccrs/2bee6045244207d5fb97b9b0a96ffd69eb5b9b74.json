{"sha": "2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZTYwNDUyNDQyMDdkNWZiOTdiOWIwYTk2ZmZkNjllYjViOWI3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-12-12T19:16:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-12-12T19:16:17Z"}, "message": "dwarf2out.c (dw_val_class): Add dw_val_class_range_list.\n\n\t* dwarf2out.c (dw_val_class): Add dw_val_class_range_list.\n\t(DEBUG_RANGES_SECTION_LABEL): Define.\n\t(ranges_section_label): Add.\n\t(add_AT_range_list): New.\n\t(print_die, sizeof_die, value_format): Handle dw_val_class_range_list.\n\t(output_loc_list): Location expression length is always 2-byte.\n\t(output_die): Handle dw_val_class_range_list.\n\t(gen_lexical_block_die): Call add_AT_range_list.\n\t(dwarf2out_init): Initialize ranges_section_label.\n\t(dwarf2out_finish): Emit ranges_section_label.\n\nFrom-SVN: r47946", "tree": {"sha": "fb5bddf2f140038cabf3aaa14ee8dcc18c92f0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5bddf2f140038cabf3aaa14ee8dcc18c92f0b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59c83dbf283e0dcf89ecfcfcbab856682291842a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c83dbf283e0dcf89ecfcfcbab856682291842a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59c83dbf283e0dcf89ecfcfcbab856682291842a"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "d5046325797639df3289cd084b4e7c0d8d48b736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "patch": "@@ -1,3 +1,16 @@\n+2001-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (dw_val_class): Add dw_val_class_range_list.\n+\t(DEBUG_RANGES_SECTION_LABEL): Define.\n+\t(ranges_section_label): Add.\n+\t(add_AT_range_list): New.\n+\t(print_die, sizeof_die, value_format): Handle dw_val_class_range_list.\n+\t(output_loc_list): Location expression length is always 2-byte.\n+\t(output_die): Handle dw_val_class_range_list.\n+\t(gen_lexical_block_die): Call add_AT_range_list.\n+\t(dwarf2out_init): Initialize ranges_section_label.\n+\t(dwarf2out_finish): Emit ranges_section_label.\n+\n 2001-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (digest_init): Allow initializing"}, {"sha": "0cc41c9ed14735490dc62c4595756de1a474a4fe", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "patch": "@@ -2140,6 +2140,7 @@ typedef enum\n   dw_val_class_offset,\n   dw_val_class_loc,\n   dw_val_class_loc_list,\n+  dw_val_class_range_list,\n   dw_val_class_const,\n   dw_val_class_unsigned_const,\n   dw_val_class_long_long,\n@@ -3447,6 +3448,9 @@ static void add_AT_lbl_offset\t\tPARAMS ((dw_die_ref,\n static void add_AT_offset\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute,\n \t\t\t\t\t\t unsigned long));\n+static void add_AT_range_list\t\tPARAMS ((dw_die_ref,\n+\t\t\t\t\t\t enum dwarf_attribute,\n+\t\t\t\t\t\t unsigned long));\n static dw_attr_ref get_AT\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute));\n static const char *get_AT_low_pc\tPARAMS ((dw_die_ref));\n@@ -3672,6 +3676,9 @@ static char *gen_internal_sym \t\tPARAMS ((const char *));\n #ifndef DEBUG_LOC_SECTION_LABEL\n #define DEBUG_LOC_SECTION_LABEL\t\t\"Ldebug_loc\"\n #endif\n+#ifndef DEBUG_RANGES_SECTION_LABEL\n+#define DEBUG_RANGES_SECTION_LABEL\t\"Ldebug_ranges\"\n+#endif\n #ifndef DEBUG_MACINFO_SECTION_LABEL\n #define DEBUG_MACINFO_SECTION_LABEL     \"Ldebug_macinfo\"\n #endif\n@@ -3689,6 +3696,7 @@ static char debug_info_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n static char debug_line_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n static char macinfo_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n static char loc_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char ranges_section_label[2 * MAX_ARTIFICIAL_LABEL_BYTES];\n #ifndef TEXT_END_LABEL\n #define TEXT_END_LABEL\t\t\"Letext\"\n #endif\n@@ -4699,7 +4707,7 @@ add_AT_lbl_offset (die, attr_kind, label)\n \n /* Add an offset attribute value to a DIE.  */\n \n-static void\n+static inline void\n add_AT_offset (die, attr_kind, offset)\n      dw_die_ref die;\n      enum dwarf_attribute attr_kind;\n@@ -4714,6 +4722,23 @@ add_AT_offset (die, attr_kind, offset)\n   add_dwarf_attr (die, attr);\n }\n \n+/* Add an range_list attribute value to a DIE.  */\n+\n+static void\n+add_AT_range_list (die, attr_kind, offset)\n+     dw_die_ref die;\n+     enum dwarf_attribute attr_kind;\n+     unsigned long offset;\n+{\n+  dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n+\n+  attr->dw_attr_next = NULL;\n+  attr->dw_attr = attr_kind;\n+  attr->dw_attr_val.val_class = dw_val_class_range_list;\n+  attr->dw_attr_val.v.val_offset = offset;\n+  add_dwarf_attr (die, attr);\n+}\n+\n static inline const char *AT_lbl PARAMS ((dw_attr_ref));\n static inline const char *\n AT_lbl (a)\n@@ -5147,6 +5172,9 @@ print_die (die, outfile)\n \t  fprintf (outfile, \"location list -> label:%s\",\n \t\t   AT_loc_list (a)->ll_symbol);\n \t  break;\n+\tcase dw_val_class_range_list:\n+\t  fprintf (outfile, \"range list\");\n+\t  break;\n \tcase dw_val_class_const:\n \t  fprintf (outfile, \"%ld\", AT_int (a));\n \t  break;\n@@ -5818,6 +5846,9 @@ size_of_die (die)\n \tcase dw_val_class_loc_list:\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n+\tcase dw_val_class_range_list:\n+\t  size += DWARF_OFFSET_SIZE;\n+\t  break;\n \tcase dw_val_class_const:\n \t  size += size_of_sleb128 (AT_int (a));\n \t  break;\n@@ -5956,6 +5987,7 @@ value_format (a)\n     {\n     case dw_val_class_addr:\n       return DW_FORM_addr;\n+    case dw_val_class_range_list:\n     case dw_val_class_offset:\n       if (DWARF_OFFSET_SIZE == 4)\n \treturn DW_FORM_data4;\n@@ -6147,7 +6179,7 @@ output_loc_list (list_head)\n     }\n   for (curr = list_head; curr != NULL; curr=curr->dw_loc_next)\n     {\n-      int size;\n+      unsigned long size;\n       dw2_asm_output_delta (DWARF2_ADDR_SIZE, curr->begin, curr->section,\n \t\t\t    \"Location list begin address (%s)\",\n \t\t\t    list_head->ll_symbol);\n@@ -6157,9 +6189,10 @@ output_loc_list (list_head)\n       size = size_of_locs (curr->expr);\n       \n       /* Output the block length for this list of location operations.  */\n-      dw2_asm_output_data (constant_size (size), size, \"%s\",\n-\t\t\t   \"Location expression size\");\n-      \n+      if (size > 0xffff)\n+\tabort ();\n+      dw2_asm_output_data (2, size, \"%s\", \"Location expression size\");\n+\n       output_loc_sequence (curr->expr);\n     }\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, 0,\n@@ -6204,6 +6237,17 @@ output_die (die)\n \t\t\t       \"%s\", name);\n \t  break;\n \n+\tcase dw_val_class_range_list:\n+\t  {\n+\t    char *p = strchr (ranges_section_label, '\\0');\n+\n+\t    sprintf (p, \"+0x%lx\", a->dw_attr_val.v.val_offset);\n+\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, ranges_section_label,\n+\t\t\t\t   \"%s\", name);\n+\t    *p = '\\0';\n+\t  }\n+\t  break;\n+\n \tcase dw_val_class_loc:\n \t  size = size_of_locs (AT_loc (a));\n \n@@ -10388,7 +10432,7 @@ gen_lexical_block_die (stmt, context_die, depth)\n \t{\n \t  tree chain;\n \n-\t  add_AT_offset (stmt_die, DW_AT_ranges, add_ranges (stmt));\n+\t  add_AT_range_list (stmt_die, DW_AT_ranges, add_ranges (stmt));\n \n \t  chain = BLOCK_FRAGMENT_CHAIN (stmt);\n \t  do\n@@ -11832,6 +11876,8 @@ dwarf2out_init (main_input_filename)\n \t\t\t       DEBUG_INFO_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n \t\t\t       DEBUG_LINE_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (ranges_section_label,\n+\t\t\t       DEBUG_RANGES_SECTION_LABEL, 0);\n   named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG);\n   ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);\n   named_section_flags (DEBUG_INFO_SECTION, SECTION_DEBUG);\n@@ -12023,6 +12069,7 @@ dwarf2out_finish (input_filename)\n   if (ranges_table_in_use)\n     {\n       named_section_flags (DEBUG_RANGES_SECTION, SECTION_DEBUG);\n+      ASM_OUTPUT_LABEL (asm_out_file, ranges_section_label);\n       output_ranges ();\n     }\n "}]}