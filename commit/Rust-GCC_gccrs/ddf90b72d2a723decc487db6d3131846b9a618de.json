{"sha": "ddf90b72d2a723decc487db6d3131846b9a618de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmOTBiNzJkMmE3MjNkZWNjNDg3ZGI2ZDMxMzE4NDZiOWE2MThkZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-29T08:46:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-29T10:52:57Z"}, "message": "tree-optimization/95356 - more vectorizable_shift massaging\n\nThe previous fix clashed with the rewrite to emit SLP invariants\nduring the SLP walk.  Thus the following adjusts the SLP tree\nhacking vectorizable_shift does appropriately.\n\nStill resisting the attempt of a rewrite of vectorizable_shift ...\n\n2020-05-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95356\n\t* tree-vect-stmts.c (vectorizable_shift): Do in-place SLP\n\tnode hacking during analysis.", "tree": {"sha": "879c1626bbc9606383230342c1cd4391afbfad39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/879c1626bbc9606383230342c1cd4391afbfad39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf90b72d2a723decc487db6d3131846b9a618de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf90b72d2a723decc487db6d3131846b9a618de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf90b72d2a723decc487db6d3131846b9a618de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf90b72d2a723decc487db6d3131846b9a618de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11041c3151e30d197d1c2774721db24332eeccef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11041c3151e30d197d1c2774721db24332eeccef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11041c3151e30d197d1c2774721db24332eeccef"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "a6c7f333fc7df5b0ca1a404ff2f8d2fac42267a9", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf90b72d2a723decc487db6d3131846b9a618de/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf90b72d2a723decc487db6d3131846b9a618de/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ddf90b72d2a723decc487db6d3131846b9a618de", "patch": "@@ -5696,16 +5696,16 @@ vectorizable_shift (vec_info *vinfo,\n \n       if (!op1_vectype)\n \top1_vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op1),\n-\t\t\t\t\t\t   slp_node);\n+\t\t\t\t\t\t   slp_op1);\n       incompatible_op1_vectype_p\n \t= (op1_vectype == NULL_TREE\n \t   || maybe_ne (TYPE_VECTOR_SUBPARTS (op1_vectype),\n \t\t\tTYPE_VECTOR_SUBPARTS (vectype))\n \t   || TYPE_MODE (op1_vectype) != TYPE_MODE (vectype));\n       if (incompatible_op1_vectype_p\n \t  && (!slp_node\n-\t      || SLP_TREE_DEF_TYPE\n-\t\t   (SLP_TREE_CHILDREN (slp_node)[1]) != vect_constant_def))\n+\t      || SLP_TREE_DEF_TYPE (slp_op1) != vect_constant_def\n+\t      || slp_op1->refcnt != 1))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5808,6 +5808,21 @@ vectorizable_shift (vec_info *vinfo,\n \t\t\t     \"incompatible vector types for invariants\\n\");\n \t  return false;\n \t}\n+      /* Now adjust the constant shift amount in place.  */\n+      if (slp_node\n+\t  && incompatible_op1_vectype_p\n+\t  && dt[1] == vect_constant_def)\n+\t{\n+\t  for (unsigned i = 0;\n+\t       i < SLP_TREE_SCALAR_OPS (slp_op1).length (); ++i)\n+\t    {\n+\t      SLP_TREE_SCALAR_OPS (slp_op1)[i]\n+\t\t= fold_convert (TREE_TYPE (vectype),\n+\t\t\t\tSLP_TREE_SCALAR_OPS (slp_op1)[i]);\n+\t      gcc_assert ((TREE_CODE (SLP_TREE_SCALAR_OPS (slp_op1)[i])\n+\t\t\t   == INTEGER_CST));\n+\t    }\n+\t}\n       STMT_VINFO_TYPE (stmt_info) = shift_vec_info_type;\n       DUMP_VECT_SCOPE (\"vectorizable_shift\");\n       vect_model_simple_cost (vinfo, stmt_info, ncopies, dt,\n@@ -5882,20 +5897,8 @@ vectorizable_shift (vec_info *vinfo,\n \t\t    vec_oprnds1.quick_push (vec_oprnd1);\n \t\t}\n \t      else if (dt[1] == vect_constant_def)\n-\t\t{\n-\t\t  /* Convert the scalar constant shift amounts in-place.  */\n-\t\t  slp_tree shift = SLP_TREE_CHILDREN (slp_node)[1];\n-\t\t  gcc_assert (SLP_TREE_DEF_TYPE (shift) == vect_constant_def);\n-\t\t  for (unsigned i = 0;\n-\t\t       i < SLP_TREE_SCALAR_OPS (shift).length (); ++i)\n-\t\t    {\n-\t\t      SLP_TREE_SCALAR_OPS (shift)[i]\n-\t\t\t  = fold_convert (TREE_TYPE (vectype),\n-\t\t\t\t\t  SLP_TREE_SCALAR_OPS (shift)[i]);\n-\t\t      gcc_assert ((TREE_CODE (SLP_TREE_SCALAR_OPS (shift)[i])\n-\t\t\t\t   == INTEGER_CST));\n-\t\t    }\n-\t\t}\n+\t\t/* The constant shift amount has been adjusted in place.  */\n+\t\t;\n \t      else\n \t\tgcc_assert (TYPE_MODE (op1_vectype) == TYPE_MODE (vectype));\n \t    }"}]}