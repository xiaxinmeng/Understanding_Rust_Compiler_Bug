{"sha": "60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4NjdlOGM2M2E5OWZlNmRmMjRkMGEwYTdmNTNiNjU0NWE5MmNhZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2012-04-26T15:49:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-04-26T15:49:13Z"}, "message": "common.opt (fsched-pressure-algorithm=): New option.\n\ngcc/\n\t* common.opt (fsched-pressure-algorithm=): New option.\n\t* flag-types.h (sched_pressure_algorithm): New enum.\n\t* sched-int.h (sched_pressure_p): Replace with...\n\t(sched_pressure): ...this new variable.\n\t* haifa-sched.c (sched_pressure_p): Replace with...\n\t(sched_pressure): ...this new variable.\n\t(sched_regno_pressure_class, rank_for_schedule, ready_sort)\n\t(update_reg_and_insn_max_reg_pressure, schedule_insn)\n\t(debug_ready_list, prune_ready_list, schedule_block, sched_init)\n\t(sched_finish, fix_tick_ready, haifa_init_insn): Update accordingly.\n\t* sched-deps.c (init_insn_reg_pressure_info): Likewise.\n\t(sched_analyze_insn): Likewise.\n\t* sched-rgn.c (schedule_region): Likewise.\n\t* config/m68k/m68k.c (m68k_sched_variable_issue): Likewise.\n\nFrom-SVN: r186881", "tree": {"sha": "0b3d9999b8df0a4c318f7b17e4768bac0e113eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3d9999b8df0a4c318f7b17e4768bac0e113eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/comments", "author": null, "committer": null, "parents": [{"sha": "2b3ecd379cc9c0425004c4d24bbe805f4ef37650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3ecd379cc9c0425004c4d24bbe805f4ef37650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3ecd379cc9c0425004c4d24bbe805f4ef37650"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "0ed52f54012607c379ec5e90e07b3ef5eb57f32d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -1,3 +1,20 @@\n+2012-04-26  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* common.opt (fsched-pressure-algorithm=): New option.\n+\t* flag-types.h (sched_pressure_algorithm): New enum.\n+\t* sched-int.h (sched_pressure_p): Replace with...\n+\t(sched_pressure): ...this new variable.\n+\t* haifa-sched.c (sched_pressure_p): Replace with...\n+\t(sched_pressure): ...this new variable.\n+\t(sched_regno_pressure_class, rank_for_schedule, ready_sort)\n+\t(update_reg_and_insn_max_reg_pressure, schedule_insn)\n+\t(debug_ready_list, prune_ready_list, schedule_block, sched_init)\n+\t(sched_finish, fix_tick_ready, haifa_init_insn): Update accordingly.\n+\t* sched-deps.c (init_insn_reg_pressure_info): Likewise.\n+\t(sched_analyze_insn): Likewise.\n+\t* sched-rgn.c (schedule_region): Likewise.\n+\t* config/m68k/m68k.c (m68k_sched_variable_issue): Likewise.\n+\n 2012-04-26  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* PR middle-end/52997"}, {"sha": "37e806a1f2ba72857f6e37927884fcecfe2e2c10", "filename": "gcc/common.opt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -1665,6 +1665,19 @@ fsched-pressure\n Common Report Var(flag_sched_pressure) Init(0) Optimization\n Enable register pressure sensitive insn scheduling\n \n+fsched-pressure-algorithm=\n+Common Joined RejectNegative Enum(sched_pressure_algorithm) Var(flag_sched_pressure_algorithm) Init(SCHED_PRESSURE_WEIGHTED)\n+-fsched-pressure-algorithm=[weighted|model] Set the pressure-scheduling algorithm\n+\n+Enum\n+Name(sched_pressure_algorithm) Type(enum sched_pressure_algorithm) UnknownError(unknown %<fsched-pressure%> algorithm %qs)\n+\n+EnumValue\n+Enum(sched_pressure_algorithm) String(weighted) Value(SCHED_PRESSURE_WEIGHTED)\n+\n+EnumValue\n+Enum(sched_pressure_algorithm) String(model) Value(SCHED_PRESSURE_MODEL)\n+\n fsched-spec\n Common Report Var(flag_schedule_speculative) Init(1) Optimization\n Allow speculative motion of non-loads"}, {"sha": "6fbd70016662c0308d2669a4e5ca28264b38d086", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -6090,7 +6090,7 @@ m68k_sched_variable_issue (FILE *sched_dump ATTRIBUTE_UNUSED,\n \t/* Scheduling for register pressure does not always take DFA into\n \t   account.  Workaround instruction buffer not being filled enough.  */\n \t{\n-\t  gcc_assert (sched_pressure_p);\n+\t  gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);\n \t  insn_size = sched_ib.filled;\n \t}\n "}, {"sha": "eb2da4ffed52f32421ffd9d5a597ff7c0a3234c5", "filename": "gcc/flag-types.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -106,6 +106,14 @@ enum symbol_visibility\n };\n #endif\n \n+/* The algorithm used to implement -fsched-pressure.  */\n+enum sched_pressure_algorithm\n+{\n+  SCHED_PRESSURE_NONE,\n+  SCHED_PRESSURE_WEIGHTED,\n+  SCHED_PRESSURE_MODEL\n+};\n+\n /* The algorithm used for the integrated register allocator (IRA).  */\n enum ira_algorithm\n {"}, {"sha": "308141f1c24c79d9e81b16ed0dcfe2158cf41343", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -872,10 +872,10 @@ schedule_insns (void)\n \n /* Do register pressure sensitive insn scheduling if the flag is set\n    up.  */\n-bool sched_pressure_p;\n+enum sched_pressure_algorithm sched_pressure;\n \n /* Map regno -> its pressure class.  The map defined only when\n-   SCHED_PRESSURE_P is true.  */\n+   SCHED_PRESSURE is SCHED_PRESSURE_WEIGHTED.  */\n enum reg_class *sched_regno_pressure_class;\n \n /* The current register pressure.  Only elements corresponding pressure\n@@ -1661,7 +1661,7 @@ rank_for_schedule (const void *x, const void *y)\n   /* Make sure that priority of TMP and TMP2 are initialized.  */\n   gcc_assert (INSN_PRIORITY_KNOWN (tmp) && INSN_PRIORITY_KNOWN (tmp2));\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       int diff;\n \n@@ -1677,7 +1677,7 @@ rank_for_schedule (const void *x, const void *y)\n     }\n \n \n-  if (sched_pressure_p\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED\n       && (INSN_TICK (tmp2) > clock_var || INSN_TICK (tmp) > clock_var))\n     {\n       if (INSN_TICK (tmp) <= clock_var)\n@@ -1995,7 +1995,7 @@ ready_sort (struct ready_list *ready)\n   int i;\n   rtx *first = ready_lastpos (ready);\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       for (i = 0; i < ready->n_ready; i++)\n \tif (!DEBUG_INSN_P (first[i]))\n@@ -2138,7 +2138,7 @@ update_reg_and_insn_max_reg_pressure (rtx insn)\n void\n sched_setup_bb_reg_pressure_info (basic_block bb, rtx after)\n {\n-  gcc_assert (sched_pressure_p);\n+  gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);\n   initiate_bb_reg_pressure_info (bb);\n   setup_insn_max_reg_pressure (after, false);\n }\n@@ -2243,7 +2243,7 @@ schedule_insn (rtx insn)\n       fputc ('\\n', sched_dump);\n     }\n \n-  if (sched_pressure_p && !DEBUG_INSN_P (insn))\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED && !DEBUG_INSN_P (insn))\n     update_reg_and_insn_max_reg_pressure (insn);\n \n   /* Scheduling instruction should have all its dependencies resolved and\n@@ -3366,12 +3366,12 @@ debug_ready_list (struct ready_list *ready)\n       fprintf (sched_dump, \"  %s:%d\",\n \t       (*current_sched_info->print_insn) (p[i], 0),\n \t       INSN_LUID (p[i]));\n-      if (sched_pressure_p)\n+      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n \tfprintf (sched_dump, \"(cost=%d\",\n \t\t INSN_REG_PRESSURE_EXCESS_COST_CHANGE (p[i]));\n       if (INSN_TICK (p[i]) > clock_var)\n \tfprintf (sched_dump, \":delay=%d\", INSN_TICK (p[i]) - clock_var);\n-      if (sched_pressure_p)\n+      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n \tfprintf (sched_dump, \")\");\n     }\n   fprintf (sched_dump, \"\\n\");\n@@ -4001,7 +4001,7 @@ prune_ready_list (state_t temp_state, bool first_cycle_insn_p,\n \t\tcost = 1;\n \t      reason = \"asm\";\n \t    }\n-\t  else if (sched_pressure_p)\n+          else if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n \t    cost = 0;\n \t  else\n \t    {\n@@ -4377,7 +4377,7 @@ schedule_block (basic_block *target_bb)\n \t      fprintf (sched_dump, \";;\\tReady list (t = %3d):  \",\n \t\t       clock_var);\n \t      debug_ready_list (&ready);\n-\t      if (sched_pressure_p)\n+\t      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n \t\tprint_curr_reg_pressure ();\n \t    }\n \n@@ -4420,7 +4420,8 @@ schedule_block (basic_block *target_bb)\n \t  else\n \t    insn = ready_remove_first (&ready);\n \n-\t  if (sched_pressure_p && INSN_TICK (insn) > clock_var)\n+\t  if (sched_pressure == SCHED_PRESSURE_WEIGHTED\n+\t      && INSN_TICK (insn) > clock_var)\n \t    {\n \t      ready_add (&ready, insn, true);\n \t      advance = 1;\n@@ -4497,7 +4498,7 @@ schedule_block (basic_block *target_bb)\n \t    {\n \t      memcpy (temp_state, curr_state, dfa_state_size);\n \t      cost = state_transition (curr_state, insn);\n-\t      if (!sched_pressure_p)\n+\t      if (sched_pressure != SCHED_PRESSURE_WEIGHTED)\n \t\tgcc_assert (cost < 0);\n \t      if (memcmp (temp_state, curr_state, dfa_state_size) != 0)\n \t\tcycle_issued_insns++;\n@@ -4785,10 +4786,14 @@ sched_init (void)\n   if (targetm.sched.dispatch (NULL_RTX, IS_DISPATCH_ON))\n     targetm.sched.dispatch_do (NULL_RTX, DISPATCH_INIT);\n \n-  sched_pressure_p = (flag_sched_pressure && ! reload_completed\n-\t\t      && common_sched_info->sched_pass_id == SCHED_RGN_PASS);\n+  if (flag_sched_pressure\n+      && !reload_completed\n+      && common_sched_info->sched_pass_id == SCHED_RGN_PASS)\n+    sched_pressure = flag_sched_pressure_algorithm;\n+  else\n+    sched_pressure = SCHED_PRESSURE_NONE;\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     ira_setup_eliminable_regset ();\n \n   /* Initialize SPEC_INFO.  */\n@@ -4866,7 +4871,7 @@ sched_init (void)\n   if (targetm.sched.init_global)\n     targetm.sched.init_global (sched_dump, sched_verbose, get_max_uid () + 1);\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       int i, max_regno = max_reg_num ();\n \n@@ -4983,7 +4988,7 @@ void\n sched_finish (void)\n {\n   haifa_finish_h_i_d ();\n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       if (regstat_n_sets_and_refs != NULL)\n \tregstat_free_n_sets_and_refs ();\n@@ -5262,7 +5267,7 @@ fix_tick_ready (rtx next)\n   INSN_TICK (next) = tick;\n \n   delay = tick - clock_var;\n-  if (delay <= 0 || sched_pressure_p)\n+  if (delay <= 0 || sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     delay = QUEUE_READY;\n \n   change_queue_index (next, delay);\n@@ -6688,7 +6693,7 @@ haifa_init_insn (rtx insn)\n       /* Extend dependency caches by one element.  */\n       extend_dependency_caches (1, false);\n     }\n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     init_insn_reg_pressure_info (insn);\n }\n "}, {"sha": "5bc329fc7daa60f21abc38f8ecee220d2164ca24", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -2168,7 +2168,7 @@ init_insn_reg_pressure_info (rtx insn)\n   static struct reg_pressure_data *pressure_info;\n   rtx link;\n \n-  gcc_assert (sched_pressure_p);\n+  gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);\n \n   if (! INSN_P (insn))\n     return;\n@@ -2951,7 +2951,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n       || (NONJUMP_INSN_P (insn) && control_flow_insn_p (insn)))\n     reg_pending_barrier = MOVE_BARRIER;\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       setup_insn_reg_uses (deps, insn);\n       init_insn_reg_pressure_info (insn);"}, {"sha": "691d3ad4d24a0f50da2661aa7b8dfbc907cc5214", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -649,7 +649,7 @@ extern struct haifa_sched_info *current_sched_info;\n \n /* Do register pressure sensitive insn scheduling if the flag is set\n    up.  */\n-extern bool sched_pressure_p;\n+extern enum sched_pressure_algorithm sched_pressure;\n \n /* Map regno -> its pressure class.  The map defined only when\n    SCHED_PRESSURE_P is true.  */"}, {"sha": "268eddcfd9830530c727214aa72f7e26731dd913", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60867e8c63a99fe6df24d0a0a7f53b6545a92cad/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=60867e8c63a99fe6df24d0a0a7f53b6545a92cad", "patch": "@@ -2921,7 +2921,7 @@ schedule_region (int rgn)\n \n   sched_extend_ready_list (rgn_n_insns);\n \n-  if (sched_pressure_p)\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n     {\n       sched_init_region_reg_pressure_info ();\n       for (bb = 0; bb < current_nr_blocks; bb++)"}]}