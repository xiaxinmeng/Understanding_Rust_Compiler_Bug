{"sha": "31b6f0aee8fc46282f06ceadc057e1b623f54872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiNmYwYWVlOGZjNDYyODJmMDZjZWFkYzA1N2UxYjYyM2Y1NDg3Mg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-06-13T17:44:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-06-13T17:44:56Z"}, "message": "re PR target/28014 (space-optimized divide used inconsistently)\n\n        PR target/28014:\n\n        gcc:\n        * config/sh/t-sh (LIB1ASMFUNCS): Add _udiv_qrnnd16\n        * config/sh/sh.c (print_operand): Add !SHMEDIA functionality to 'M'.\n        * config/sh/lib1funcs.h (SL, SL1): Define.\n        * config/sh/lib1funcs.asm (__udiv_qrnnd16): New hidden function.\n        * longlong.h (__sh__): Define umul_ppmm, udiv_qrnnd and sub_ddmmss.\n        * config/sh/t-sh ($(T)unwind-dw2-Os-4-200.o): New rule.\n        (OBJS_Os_4_200): New variable.\n        ($(T)libgcc-Os-4-200.a): Use it.\n        * sh.md (udivsi3): For TARGET_DIVIDE_CALL_TABLE, avoid function call\n        when dividing 1 and/or by 0.\n\n        gcc/testsuite:\n        * g++.dg/eh/div.C: New test.\n\nFrom-SVN: r114616", "tree": {"sha": "77b0e8646b86bb0b70f9dec160ea2b7da24fb530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b0e8646b86bb0b70f9dec160ea2b7da24fb530"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b6f0aee8fc46282f06ceadc057e1b623f54872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b6f0aee8fc46282f06ceadc057e1b623f54872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b6f0aee8fc46282f06ceadc057e1b623f54872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b6f0aee8fc46282f06ceadc057e1b623f54872/comments", "author": null, "committer": null, "parents": [{"sha": "de4fb767a9e80685a673a65b590774336f108c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4fb767a9e80685a673a65b590774336f108c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4fb767a9e80685a673a65b590774336f108c4f"}], "stats": {"total": 188, "additions": 175, "deletions": 13}, "files": [{"sha": "b8a49a4c1d318e76032cf22cdfe96f82a6c26446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -1,3 +1,17 @@\n+2006-06-06  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/28014:\n+\t* config/sh/t-sh (LIB1ASMFUNCS): Add _udiv_qrnnd16\n+\t* config/sh/sh.c (print_operand): Add !SHMEDIA functionality to 'M'.\n+\t* config/sh/lib1funcs.h (SL, SL1): Define.\n+\t* config/sh/lib1funcs.asm (__udiv_qrnnd16): New hidden function.\n+\t* longlong.h (__sh__): Define umul_ppmm, udiv_qrnnd and sub_ddmmss.\n+\t* config/sh/t-sh ($(T)unwind-dw2-Os-4-200.o): New rule.\n+\t(OBJS_Os_4_200): New variable.\n+\t($(T)libgcc-Os-4-200.a): Use it.\n+\t* sh.md (udivsi3): For TARGET_DIVIDE_CALL_TABLE, avoid function call\n+\twhen dividing 1 and/or by 0.\n+\n 2006-06-13  Roger Sayle  <roger@eyesopen.com>\n \n \t* configure.ac (HAS_MCONTEXT_T_UNDERSCORES): Include <sys/signal.h>"}, {"sha": "466b89046f38655f82639ee216a5944923d00081", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -3843,3 +3843,51 @@ LOCAL(div_table_inv):\n #endif /* SH3 / SH4 */\n \n #endif /* L_div_table */\n+\n+#ifdef L_udiv_qrnnd_16\n+#if !__SHMEDIA__\n+\tHIDDEN_FUNC(GLOBAL(udiv_qrnnd_16))\n+\t/* r0: rn r1: qn */ /* r0: n1 r4: n0 r5: d r6: d1 */ /* r2: __m */\n+\t/* n1 < d, but n1 might be larger than d1.  */\n+\t.global GLOBAL(udiv_qrnnd_16)\n+\t.balign 8\n+GLOBAL(udiv_qrnnd_16):\n+\tdiv0u\n+\tcmp/hi r6,r0\n+\tbt .Lots\n+\t.rept 16\n+\tdiv1 r6,r0 \n+\t.endr\n+\textu.w r0,r1\n+\tbt 0f\n+\tadd r6,r0\n+0:\trotcl r1\n+\tmulu.w r1,r5\n+\txtrct r4,r0\n+\tswap.w r0,r0\n+\tsts macl,r2\n+\tcmp/hs r2,r0\n+\tsub r2,r0\n+\tbt 0f\n+\taddc r5,r0\n+\tadd #-1,r1\n+\tbt 0f\n+1:\tadd #-1,r1\n+\trts\n+\tadd r5,r0\n+\t.balign 8\n+.Lots:\n+\tsub r5,r0\n+\tswap.w r4,r1\n+\txtrct r0,r1\n+\tclrt\n+\tmov r1,r0\n+\taddc r5,r0\n+\tmov #-1,r1\n+\tSL1(bf, 1b,\n+\tshlr16 r1)\n+0:\trts\n+\tnop\n+\tENDFUNC(GLOBAL(udiv_qrnnd_16))\n+#endif /* !__SHMEDIA__ */\n+#endif /* L_udiv_qrnnd_16 */"}, {"sha": "0e4100ee9ed99fe93b3676dab242690ca0e3c957", "filename": "gcc/config/sh/lib1funcs.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.h?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -67,3 +67,15 @@ Boston, MA 02110-1301, USA.  */\n #define DR40 fr4\n #define DR41 fr5\n #endif /* !__LITTLE_ENDIAN__ */\n+\n+#ifdef __sh1__\n+#define SL(branch, dest, in_slot, in_slot_arg2) \\\n+\tin_slot, in_slot_arg2; branch dest\n+#define SL1(branch, dest, in_slot) \\\n+\tin_slot; branch dest\n+#else /* ! __sh1__ */\n+#define SL(branch, dest, in_slot, in_slot_arg2) \\\n+\tbranch##.s dest; in_slot, in_slot_arg2\n+#define SL1(branch, dest, in_slot) \\\n+\tbranch##/s dest; in_slot\n+#endif /* !__sh1__ */"}, {"sha": "7e11e3f199d5d5b989ab174784487edd4475bb54", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -662,7 +662,8 @@ print_operand_address (FILE *stream, rtx x)\n    'R'  print the LSW of a dp value - changes if in little endian\n    'S'  print the MSW of a dp value - changes if in little endian\n    'T'  print the next word of a dp value - same as 'R' in big endian mode.\n-   'M'  print an `x' if `m' will print `base,index'.\n+   'M'  SHMEDIA: print an `x' if `m' will print `base,index'.\n+        otherwise: print .b / .w / .l / .s / .d suffix if operand is a MEM.\n    'N'  print 'r63' if the operand is (const_int 0).\n    'd'  print a V2SF reg as dN instead of fpN.\n    'm'  print a pair `base,offset' or `base,index', for LD and ST.\n@@ -820,11 +821,29 @@ print_operand (FILE *stream, rtx x, int code)\n \t}\n       break;\n     case 'M':\n-      if (GET_CODE (x) == MEM\n-\t  && GET_CODE (XEXP (x, 0)) == PLUS\n-\t  && (GET_CODE (XEXP (XEXP (x, 0), 1)) == REG\n-\t      || GET_CODE (XEXP (XEXP (x, 0), 1)) == SUBREG))\n-\tfputc ('x', stream);\n+      if (TARGET_SHMEDIA)\n+\t{\n+\t  if (GET_CODE (x) == MEM\n+\t      && GET_CODE (XEXP (x, 0)) == PLUS\n+\t      && (GET_CODE (XEXP (XEXP (x, 0), 1)) == REG\n+\t\t  || GET_CODE (XEXP (XEXP (x, 0), 1)) == SUBREG))\n+\t    fputc ('x', stream);\n+\t}\n+      else\n+\t{\n+\t  if (GET_CODE (x) == MEM)\n+\t    {\n+\t      switch (GET_MODE (x))\n+\t\t{\n+\t\tcase QImode: fputs (\".b\", stream); break;\n+\t\tcase HImode: fputs (\".w\", stream); break;\n+\t\tcase SImode: fputs (\".l\", stream); break;\n+\t\tcase SFmode: fputs (\".s\", stream); break;\n+\t\tcase DFmode: fputs (\".d\", stream); break;\n+\t\tdefault: gcc_unreachable ();\n+\t\t}\n+\t    }\n+\t}\n       break;\n \n     case 'm':"}, {"sha": "41e06447e7349dfc57703960794133a65cf36a5a", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -1829,6 +1829,21 @@\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n   if (TARGET_DIVIDE_CALL_TABLE)\n     {\n+      /* libgcc2:__udivmoddi4 is not supposed to use an actual division, since\n+\t that causes problems when the divide code is supposed to come from a\n+\t separate library.  Division by zero is undefined, so dividing 1 can be\n+\t implemented by comparing with the divisor.  */\n+      if (operands[1] == const1_rtx && currently_expanding_to_rtl)\n+\t{\n+\t  emit_insn (gen_cmpsi (operands[1], operands[2]));\n+\t  emit_insn (gen_sgeu (operands[0]));\n+\t  DONE;\n+\t}\n+      else if (operands[2] == const0_rtx)\n+\t{\n+\t  emit_move_insn (operands[0], operands[2]);\n+\t  DONE;\n+\t}\n       function_symbol (operands[3], \\\"__udivsi3_i4i\\\", SFUNC_GOT);\n       last = gen_udivsi3_i4_int (operands[0], operands[3]);\n     }"}, {"sha": "3ebc09d6e3cf3b587817245377baa1191710b2ad", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -5,7 +5,7 @@ sh-c.o: $(srcdir)/config/sh/sh-c.c \\\n LIB1ASMSRC = sh/lib1funcs.asm\n LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movmem \\\n   _movmem_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n-  _div_table \\\n+  _div_table _udiv_qrnnd_16 \\\n   $(LIB1ASMFUNCS_CACHE)\n \n # We want fine grained libraries, so use the new code to build the\n@@ -98,8 +98,11 @@ $(T)sdivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PAS\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_sdivsi3_i4i -x assembler-with-cpp $<\n $(T)udivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_udivsi3_i4i -x assembler-with-cpp $<\n-$(T)libgcc-Os-4-200.a: $(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $@ $(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o\n+$(T)unwind-dw2-Os-4-200.o: $(srcdir)/unwind-dw2.c $(srcdir)/unwind-generic.h unwind-pe.h unwind.inc unwind-dw2-fde.h unwind-dw2.h $(CONFIG_H) coretypes.h $(TM_H) $(MACHMODE_H) longlong.h config.status stmp-int-hdrs tsystem.h $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) $(vis_hide) -fexceptions -Os -c -o $@ $<\n+OBJS_Os_4_200=$(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o $(T)unwind-dw2-Os-4-200.o\n+$(T)libgcc-Os-4-200.a: $(OBJS_Os_4_200) $(GCC_PASSES)\n+\t$(AR_CREATE_FOR_TARGET) $@ $(OBJS_Os_4_200)\n \n # Local Variables:\n # mode: Makefile"}, {"sha": "c4131c67b217ab2fe9ecaa523ee2900510dabc6f", "filename": "gcc/longlong.h", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -831,18 +831,51 @@ UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif\n \n-#if defined (__sh2__) && W_TYPE_SIZE == 32\n+#if defined(__sh__) && !__SHMEDIA__ && W_TYPE_SIZE == 32\n+#ifndef __sh1__\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\t\t\t\t\t\t\t\t\\\n-       \"dmulu.l\t%2,%3\\n\\tsts\tmacl,%1\\n\\tsts\tmach,%0\"\t\t\\\n-\t   : \"=r\" ((USItype)(w1)),\t\t\t\t\t\\\n-\t     \"=r\" ((USItype)(w0))\t\t\t\t\t\\\n+       \"dmulu.l\t%2,%3\\n\\tsts%M1\tmacl,%1\\n\\tsts%M0\tmach,%0\"\t\\\n+\t   : \"=r<\" ((USItype)(w1)),\t\t\t\t\t\\\n+\t     \"=r<\" ((USItype)(w0))\t\t\t\t\t\\\n \t   : \"r\" ((USItype)(u)),\t\t\t\t\t\\\n \t     \"r\" ((USItype)(v))\t\t\t\t\t\t\\\n \t   : \"macl\", \"mach\")\n #define UMUL_TIME 5\n #endif\n \n+/* This is the same algorithm as __udiv_qrnnd_c.  */\n+#define UDIV_NEEDS_NORMALIZATION 1\n+\n+#define udiv_qrnnd(q, r, n1, n0, d) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    extern UWtype __udiv_qrnnd_16 (UWtype, UWtype)\t\t\t\\\n+                        __attribute__ ((visibility (\"hidden\")));\t\\\n+    /* r0: rn r1: qn */ /* r0: n1 r4: n0 r5: d r6: d1 */ /* r2: __m */\t\\\n+    __asm__ (\t\t\t\t\t\t\t\t\\\n+\t\"mov%M4 %4,r5\\n\"\t\t\t\t\t\t\\\n+\"\tswap.w %3,r4\\n\"\t\t\t\t\t\t\t\\\n+\"\tswap.w r5,r6\\n\"\t\t\t\t\t\t\t\\\n+\"\tjsr @%5\\n\"\t\t\t\t\t\t\t\\\n+\"\tshll16 r6\\n\"\t\t\t\t\t\t\t\\\n+\"\tswap.w r4,r4\\n\"\t\t\t\t\t\t\t\\\n+\"\tjsr @%5\\n\"\t\t\t\t\t\t\t\\\n+\"\tswap.w r1,%0\\n\"\t\t\t\t\t\t\t\\\n+\"\tor r1,%0\"\t\t\t\t\t\t\t\\\n+\t: \"=r\" (q), \"=&z\" (r)\t\t\t\t\t\t\\\n+\t: \"1\" (n1), \"r\" (n0), \"rm\" (d), \"r\" (&__udiv_qrnnd_16)\t\t\\\n+\t: \"r1\", \"r2\", \"r4\", \"r5\", \"r6\", \"pr\");\t\t\t\t\\\n+  } while (0)\n+\n+#define UDIV_TIME 80\n+\n+#define sub_ddmmss(sh, sl, ah, al, bh, bl)\t\t\t\t\\\n+  __asm__ (\"clrt;subc %5,%1; subc %4,%0\"\t\t\t\t\\\n+\t   : \"=r\" (sh), \"=r\" (sl)\t\t\t\t\t\\\n+\t   : \"0\" (ah), \"1\" (al), \"r\" (bh), \"r\" (bl))\n+\n+#endif /* __sh__ */\n+\n #if defined (__SH5__) && __SHMEDIA__ && W_TYPE_SIZE == 32\n #define __umulsidi3(u,v) ((UDItype)(USItype)u*(USItype)v)\n #define count_leading_zeros(count, x) \\"}, {"sha": "5a547a7db757aae4e68d65a316cc7f59c9439852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -1,3 +1,8 @@\n+2006-06-13  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/28014:\n+\t* g++.dg/eh/div.C: New test.\n+\n 2006-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/27894"}, {"sha": "14d7536ce19070af0a599e6fe1439981e6d48525", "filename": "gcc/testsuite/g++.dg/eh/div.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdiv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6f0aee8fc46282f06ceadc057e1b623f54872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdiv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdiv.C?ref=31b6f0aee8fc46282f06ceadc057e1b623f54872", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do link }\n+// { dg-options \"-Os\" }\n+/* PR target/28014: main references unsigned divide, and the unwinder\n+   references signed divide.\n+   If libgcc contains an object which defines both, and linking is done with\n+   a space-optimized library that defines these functions in separate objects,\n+   you end up with the function for unsigned divide defined twice.  */\n+int\n+main (int c, char **argv)\n+\n+{\n+  return 0xffffU/c;\n+}"}]}