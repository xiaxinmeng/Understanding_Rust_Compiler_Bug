{"sha": "03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmM2YwZjIxYTc2ZjIwMDlkN2I1NTNmZDgwYWZhZTBiZmU3OWM4Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-11-14T17:50:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-11-14T17:50:25Z"}, "message": "parser.c (make_id_declarator): Add location_t parameter.\n\n/cp\n2018-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (make_id_declarator): Add location_t parameter.\n\t(cp_parser_lambda_declarator_opt): Adjust call.\n\t(cp_parser_decomposition_declaration): Likewise.\n\t(cp_parser_alias_declaration): Likewise.\n\t(cp_parser_direct_declarator): Likewise.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_objc_class_ivars): Likewise.\n\t* decl.c (grokdeclarator): Use declarator->id_loc in two error\n\tmessages.\n\n/testsuite\n2018-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/nsdmi-union6.C: Test locations too.\n\t* g++.dg/cpp0x/nsdmi6.C: Likewise.\n\t* g++.dg/ext/flexary4.C: Likewise.\n\t* g++.dg/ext/flexary9.C: Likewise.\n\t* g++.dg/other/incomplete2.C: Likewise.\n\t* g++.dg/parse/friend12.C: Likewise.\n\nFrom-SVN: r266155", "tree": {"sha": "8a0c5a30a61b4d439890fa9db7c18a9808de5d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0c5a30a61b4d439890fa9db7c18a9808de5d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/comments", "author": null, "committer": null, "parents": [{"sha": "357044d275a1f2d50ecd9bade9b8eb18a73cb4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357044d275a1f2d50ecd9bade9b8eb18a73cb4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357044d275a1f2d50ecd9bade9b8eb18a73cb4c6"}], "stats": {"total": 86, "additions": 58, "deletions": 28}, "files": [{"sha": "7e6ba17669df3c355f87082af22dc9f8e23abb02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -1,3 +1,15 @@\n+2018-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (make_id_declarator): Add location_t parameter.\n+\t(cp_parser_lambda_declarator_opt): Adjust call.\n+\t(cp_parser_decomposition_declaration): Likewise.\n+\t(cp_parser_alias_declaration): Likewise.\n+\t(cp_parser_direct_declarator): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_objc_class_ivars): Likewise.\n+\t* decl.c (grokdeclarator): Use declarator->id_loc in two error\n+\tmessages.\n+\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1236R1 - Signed integers are two's complement"}, {"sha": "7d63bbe7f1bb8b43122742bb392c0f1bda9f2e63", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -12408,8 +12408,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\tif (unqualified_id)\n \t\t  {\n-\t\t    error (\"field %qD has incomplete type %qT\",\n-\t\t\t   unqualified_id, type);\n+\t\t    error_at (declarator->id_loc,\n+\t\t\t      \"field %qD has incomplete type %qT\",\n+\t\t\t      unqualified_id, type);\n \t\t    cxx_incomplete_type_inform (strip_array_types (type));\n \t\t  }\n \t\telse\n@@ -12423,8 +12424,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t  {\n \t    if (friendp)\n \t      {\n-\t\terror (\"%qE is neither function nor member function; \"\n-\t\t       \"cannot be declared friend\", unqualified_id);\n+\t\terror_at (declarator->id_loc,\n+\t\t\t  \"%qE is neither function nor member function; \"\n+\t\t\t  \"cannot be declared friend\", unqualified_id);\n \t\treturn error_mark_node;\n \t      }\n \t    decl = NULL_TREE;"}, {"sha": "8833e3db746aab408acde2c8d7b258a65f6d0311", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -1453,7 +1453,7 @@ make_declarator (cp_declarator_kind kind)\n \n static cp_declarator *\n make_id_declarator (tree qualifying_scope, tree unqualified_name,\n-\t\t    special_function_kind sfk)\n+\t\t    special_function_kind sfk, location_t id_location)\n {\n   cp_declarator *declarator;\n \n@@ -1478,7 +1478,8 @@ make_id_declarator (tree qualifying_scope, tree unqualified_name,\n   declarator->u.id.qualifying_scope = qualifying_scope;\n   declarator->u.id.unqualified_name = unqualified_name;\n   declarator->u.id.sfk = sfk;\n-  \n+  declarator->id_loc = id_location;\n+\n   return declarator;\n }\n \n@@ -10686,7 +10687,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n     p = obstack_alloc (&declarator_obstack, 0);\n \n-    declarator = make_id_declarator (NULL_TREE, call_op_identifier, sfk_none);\n+    declarator = make_id_declarator (NULL_TREE, call_op_identifier, sfk_none,\n+\t\t\t\t     LAMBDA_EXPR_LOCATION (lambda_expr));\n \n     quals = (LAMBDA_EXPR_MUTABLE_P (lambda_expr)\n \t     ? TYPE_UNQUALIFIED : TYPE_QUAL_CONST);\n@@ -10697,7 +10699,6 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t\t\t\t       exception_spec,\n                                        return_type,\n                                        /*requires_clause*/NULL_TREE);\n-    declarator->id_loc = LAMBDA_EXPR_LOCATION (lambda_expr);\n     declarator->std_attributes = attributes;\n \n     fco = grokmethod (&return_type_specs,\n@@ -13473,10 +13474,13 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n   FOR_EACH_VEC_ELT (v, i, e)\n     {\n       if (i == 0)\n-\tdeclarator = make_id_declarator (NULL_TREE, e.get_value (), sfk_none);\n+\tdeclarator = make_id_declarator (NULL_TREE, e.get_value (),\n+\t\t\t\t\t sfk_none, e.get_location ());\n       else\n-\tdeclarator->u.id.unqualified_name = e.get_value ();\n-      declarator->id_loc = e.get_location ();\n+\t{\n+\t  declarator->u.id.unqualified_name = e.get_value ();\n+\t  declarator->id_loc = e.get_location ();\n+\t}\n       tree elt_pushed_scope;\n       tree decl2 = start_decl (declarator, &decl_specs, SD_INITIALIZED,\n \t\t\t       NULL_TREE, NULL_TREE, &elt_pushed_scope);\n@@ -19294,8 +19298,7 @@ cp_parser_alias_declaration (cp_parser* parser)\n \t\t\t\t\t       /*declarator=*/NULL))\n     return error_mark_node;\n \n-  declarator = make_id_declarator (NULL_TREE, id, sfk_none);\n-  declarator->id_loc = id_location;\n+  declarator = make_id_declarator (NULL_TREE, id, sfk_none, id_location);\n \n   member_p = at_class_scope_p ();\n   if (member_p)\n@@ -20699,9 +20702,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      }\n \t    declarator = make_id_declarator (qualifying_scope,\n \t\t\t\t\t     unqualified_name,\n-\t\t\t\t\t     sfk);\n+\t\t\t\t\t     sfk, token->location);\n \t    declarator->std_attributes = attrs;\n-\t    declarator->id_loc = token->location;\n \t    declarator->parameter_pack_p = pack_expansion_p;\n \n \t    if (pack_expansion_p)\n@@ -23993,6 +23995,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      tree identifier;\n \t      tree width;\n \t      tree late_attributes = NULL_TREE;\n+\t      location_t id_location\n+\t\t= cp_lexer_peek_token (parser->lexer)->location;\n \n \t      if (named_bitfld)\n \t\tidentifier = cp_parser_identifier (parser);\n@@ -24061,7 +24065,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      decl = grokbitfield (identifier\n \t\t\t\t   ? make_id_declarator (NULL_TREE,\n \t\t\t\t\t\t\t identifier,\n-\t\t\t\t\t\t\t sfk_none)\n+\t\t\t\t\t\t\t sfk_none,\n+\t\t\t\t\t\t\t id_location)\n \t\t\t\t   : NULL,\n \t\t\t\t   &decl_specifiers,\n \t\t\t\t   width, initializer,\n@@ -30608,7 +30613,7 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t      /* Get the name of the bitfield.  */\n \t      declarator = make_id_declarator (NULL_TREE,\n \t\t\t\t\t       cp_parser_identifier (parser),\n-\t\t\t\t\t       sfk_none);\n+\t\t\t\t\t       sfk_none, token->location);\n \n \t     eat_colon:\n \t      cp_lexer_consume_token (parser->lexer);  /* Eat ':'.  */"}, {"sha": "524db2686170cc83fbf9f74c98a1a6530b7b9b43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -1,3 +1,12 @@\n+2018-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/nsdmi-union6.C: Test locations too.\n+\t* g++.dg/cpp0x/nsdmi6.C: Likewise.\n+\t* g++.dg/ext/flexary4.C: Likewise.\n+\t* g++.dg/ext/flexary9.C: Likewise.\n+\t* g++.dg/other/incomplete2.C: Likewise.\n+\t* g++.dg/parse/friend12.C: Likewise.\n+\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1236R1 - Signed integers are two's complement"}, {"sha": "beb6c3864ec88bdf9f7ec95beced0a1c572940b4", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-union6.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -5,7 +5,7 @@ struct F;          // { dg-message \"forward declaration\" }\n \n union U            // { dg-message \"not complete\" }\n {\n-  U u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  U u[1] = { 0 };  // { dg-error \"5:field .u. has incomplete type\" }\n };\n \n template<typename T>\n@@ -18,20 +18,20 @@ template union UT<int>;\n \n union UF\n {\n-  F u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  F u[1] = { 0 };  // { dg-error \"5:field .u. has incomplete type\" }\n };\n \n template<typename T>\n union UFT\n {\n-  F u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  F u[1] = { 0 };  // { dg-error \"5:field .u. has incomplete type\" }\n };\n \n template union UFT<int>;\n \n struct S           // { dg-message \"not complete\" }\n {\n-  S s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  S s[1] = { 0 };  // { dg-error \"5:field .s. has incomplete type\" }\n };\n \n template<typename T>\n@@ -44,13 +44,13 @@ template class ST<int>;\n \n struct SF\n {\n-  F s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  F s[1] = { 0 };  // { dg-error \"5:field .s. has incomplete type\" }\n };\n \n template<typename T>\n struct SFT\n {\n-  F s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+  F s[1] = { 0 };  // { dg-error \"5:field .s. has incomplete type\" }\n };\n \n template class SFT<int>;"}, {"sha": "1988319cf3769b930bea041836394608b776af66", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi6.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -4,5 +4,6 @@\n struct A\n {\n     typedef int int T; // { dg-error \"two or more data types in declaration\" }\n-    struct T x[1] = { 0 }; // { dg-error \"incomplete type|forward\" }\n+    struct T x[1] = { 0 }; // { dg-error \"14:field .x. has incomplete type\" }\n+// { dg-message \"forward declaration\" \"\" { target c++11 } .-1 }  \n };"}, {"sha": "bd28cf55de2bedf4e8c1cd559414ebaafc0b5c8f", "filename": "gcc/testsuite/g++.dg/ext/flexary4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary4.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -143,7 +143,7 @@ struct Sx23 {\n \n struct Sx24 {\n   struct S;\n-  S a_x [];                 // { dg-error \"incomplete type\" }\n+  S a_x [];                 // { dg-error \"5:field .a_x. has incomplete type\" }\n };\n \n struct Sx25 {"}, {"sha": "5ebcdf507575f6341a138d5a59606c9373b0ad67", "filename": "gcc/testsuite/g++.dg/ext/flexary9.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary9.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -136,7 +136,8 @@ struct Sx23 {\n // array warning.\n struct Sx24 {\n   struct S;\n-  S a_x [0];                // { dg-message \"incomplete type|zero-size array\" }\n+  S a_x [0];                // { dg-error \"5:field .a_x. has incomplete type\" }\n+// { dg-warning \"zero-size array\" \"\" { target *-*-* } .-1 }\n };\n \n struct Sx25 {"}, {"sha": "8ea583e52fd68160ae3d89e21068b717341f0603", "filename": "gcc/testsuite/g++.dg/other/incomplete2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincomplete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincomplete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincomplete2.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -5,7 +5,7 @@ struct A;\n \n struct B\n {\n-  A a : 1;  // { dg-error \"incomplete\" }\n+  A a : 1;  // { dg-error \"5:field .a. has incomplete type .A\" }\n };\n \n struct S"}, {"sha": "606122e9840ca5d972d7cfd65277e8ebb0b61d7b", "filename": "gcc/testsuite/g++.dg/parse/friend12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3f0f21a76f2009d7b553fd80afae0bfe79c82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C?ref=03f3f0f21a76f2009d7b553fd80afae0bfe79c82", "patch": "@@ -2,5 +2,5 @@\n \n struct A\n {\n-  friend int i = 0;  // { dg-error \"cannot be declared friend\" }\n+  friend int i = 0;  // { dg-error \"14:.i. is neither function nor member function; cannot be declared friend\" }\n };"}]}