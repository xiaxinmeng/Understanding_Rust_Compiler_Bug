{"sha": "a271e61c6b31a86ec77d60db62ba322574b15881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3MWU2MWM2YjMxYTg2ZWM3N2Q2MGRiNjJiYTMyMjU3NGIxNTg4MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2012-10-22T09:25:02Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-10-22T09:25:02Z"}, "message": "mmix.md (\"nonlocal_goto_receiver\"): Refer to the frame-pointer as an operand.\n\n\t* config/mmix/mmix.md (\"nonlocal_goto_receiver\"): Refer to the\n\tframe-pointer as an operand.\n\t(\"*nonlocal_goto_receiver_expanded\"): Ditto.  Use\n\tmmix_output_register_setting instead of naked output_asm_insn for\n\tthe offset from the frame-pointer to the saved rO.\n\t* config/mmix/mmix.c (mmix_output_register_setting): Emit NEGU for\n\tvalues -255..0.\n\t* config/mmix/predicates.md (\"frame_pointer_operand\"): New.\n\t* config/mmix/constraints.md (\"Yf\"): New.\n\nFrom-SVN: r192677", "tree": {"sha": "9dd3ba4f5ea1d10b1b85ceea37b5854a8590184f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dd3ba4f5ea1d10b1b85ceea37b5854a8590184f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a271e61c6b31a86ec77d60db62ba322574b15881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271e61c6b31a86ec77d60db62ba322574b15881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a271e61c6b31a86ec77d60db62ba322574b15881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271e61c6b31a86ec77d60db62ba322574b15881/comments", "author": null, "committer": null, "parents": [{"sha": "8df7772284a47cf93f4474ab500d5987d2f8ebdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df7772284a47cf93f4474ab500d5987d2f8ebdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df7772284a47cf93f4474ab500d5987d2f8ebdd"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "c5dd80d4e376869f510ebeda0cb9a7789e861595", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a271e61c6b31a86ec77d60db62ba322574b15881", "patch": "@@ -1,5 +1,15 @@\n 2012-10-22  Hans-Peter Nilsson  <hp@bitrange.com>\n \n+\t* config/mmix/mmix.md (\"nonlocal_goto_receiver\"): Refer to the\n+\tframe-pointer as an operand.\n+\t(\"*nonlocal_goto_receiver_expanded\"): Ditto.  Use\n+\tmmix_output_register_setting instead of naked output_asm_insn for\n+\tthe offset from the frame-pointer to the saved rO.\n+\t* config/mmix/mmix.c (mmix_output_register_setting): Emit NEGU for\n+\tvalues -255..0.\n+\t* config/mmix/predicates.md (\"frame_pointer_operand\"): New.\n+\t* config/mmix/constraints.md (\"Yf\"): New.\n+\n \t* stmt.c (expand_nl_goto_receiver): Remove almost-copy of\n \texpand_builtin_setjmp_receiver.\n \t(expand_label): Adjust, call expand_builtin_setjmp_receiver"}, {"sha": "c1d28e858c80f4f48de6bf30de81748200bd7259", "filename": "gcc/config/mmix/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fconstraints.md?ref=a271e61c6b31a86ec77d60db62ba322574b15881", "patch": "@@ -110,3 +110,7 @@\n (define_address_constraint \"U\"\n   \"@internal\"\n   (match_operand 0 \"mmix_address_operand\"))\n+\n+(define_constraint \"Yf\"\n+  \"@internal\"\n+  (match_operand 0 \"frame_pointer_operand\"))"}, {"sha": "7199c5edc2ca6f5fc6c8cdc3ccc633d65c2f99ac", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a271e61c6b31a86ec77d60db62ba322574b15881", "patch": "@@ -2299,7 +2299,9 @@ mmix_output_register_setting (FILE *stream,\n   if (do_begin_end)\n     fprintf (stream, \"\\t\");\n \n-  if (mmix_shiftable_wyde_value ((unsigned HOST_WIDEST_INT) value))\n+  if (insn_const_int_ok_for_constraint (value, CONSTRAINT_K))\n+    fprintf (stream, \"NEGU %s,0,\" HOST_WIDEST_INT_PRINT_DEC, reg_names[regno], -value);\n+  else if (mmix_shiftable_wyde_value ((unsigned HOST_WIDEST_INT) value))\n     {\n       /* First, the one-insn cases.  */\n       mmix_output_shiftvalue_op_from_str (stream, \"SET\","}, {"sha": "587b8f1f492df9285b1ea858d5c63ac9a6e0d898", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=a271e61c6b31a86ec77d60db62ba322574b15881", "patch": "@@ -1120,7 +1120,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; of \"pop 0,0\" until rO equals the saved value.  (If it goes lower, we\n ;; should die with a trap.)\n (define_expand \"nonlocal_goto_receiver\"\n-  [(parallel [(unspec_volatile [(const_int 0)] 1)\n+  [(parallel [(unspec_volatile [(match_dup 1)] 1)\n \t      (clobber (scratch:DI))\n \t      (clobber (reg:DI MMIX_rJ_REGNUM))])\n    (set (reg:DI MMIX_rJ_REGNUM) (match_dup 0))]\n@@ -1131,6 +1131,13 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n     = mmix_get_hard_reg_initial_val (Pmode,\n \t\t\t\t     MMIX_INCOMING_RETURN_ADDRESS_REGNUM);\n \n+  /* We need the frame-pointer to be live or the equivalent\n+     expression, so refer to in in the pattern.  We can't use a MEM\n+     (that may contain out-of-range offsets in the final expression)\n+     for fear that middle-end will legitimize it or replace the address\n+     using temporary registers (which are not revived at this point).  */\n+  operands[1] = frame_pointer_rtx;\n+\n   /* Mark this function as containing a landing-pad.  */\n   cfun->machine->has_landing_pad = 1;\n }\")\n@@ -1140,45 +1147,40 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; address and re-use them after the register stack unwind, so it's best\n ;; to form the address ourselves.\n (define_insn \"*nonlocal_goto_receiver_expanded\"\n-  [(unspec_volatile [(const_int 0)] 1)\n+  [(unspec_volatile [(match_operand:DI 1 \"frame_pointer_operand\" \"Yf\")] 1)\n    (clobber (match_scratch:DI 0 \"=&r\"))\n    (clobber (reg:DI MMIX_rJ_REGNUM))]\n   \"\"\n {\n-  rtx temp_reg = operands[0];\n-  rtx my_operands[2];\n-  HOST_WIDEST_INT offs;\n+  rtx my_operands[3];\n   const char *my_template\n     = \"GETA $255,0f\\;PUT rJ,$255\\;LDOU $255,%a0\\n\\\n 0:\\;GET %1,rO\\;CMPU %1,%1,$255\\;BNP %1,1f\\;POP 0,0\\n1:\";\n \n-  my_operands[1] = temp_reg;\n+  my_operands[1] = operands[0];\n+  my_operands[2] = GEN_INT (-MMIX_fp_rO_OFFSET);\n \n-  /* If we have a frame-pointer (hence unknown stack-pointer offset),\n-     just use the frame-pointer and the known offset.  */\n-  if (frame_pointer_needed)\n+  if (operands[1] == hard_frame_pointer_rtx)\n     {\n-      my_operands[0] = GEN_INT (-MMIX_fp_rO_OFFSET);\n-\n-      output_asm_insn (\"NEGU %1,0,%0\", my_operands);\n-      my_operands[0] = gen_rtx_PLUS (Pmode, frame_pointer_rtx, temp_reg);\n+      mmix_output_register_setting (asm_out_file, REGNO (operands[0]),\n+\t\t\t\t    MMIX_fp_rO_OFFSET, 1);\n+      my_operands[0]\n+\t= gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, operands[0]);\n     }\n   else\n     {\n-      /* We know the fp-based offset, so \"eliminate\" it to be sp-based.  */\n-      offs\n-\t= (mmix_initial_elimination_offset (MMIX_FRAME_POINTER_REGNUM,\n-\t\t\t\t\t    MMIX_STACK_POINTER_REGNUM)\n-\t   + MMIX_fp_rO_OFFSET);\n+      HOST_WIDEST_INT offs = INTVAL (XEXP (operands[1], 1));\n+      offs += MMIX_fp_rO_OFFSET;\n \n-      if (offs >= 0 && offs <= 255)\n+      if (insn_const_int_ok_for_constraint (offs, CONSTRAINT_I))\n \tmy_operands[0]\n \t  = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offs));\n       else\n \t{\n-\t  mmix_output_register_setting (asm_out_file, REGNO (temp_reg),\n+\t  mmix_output_register_setting (asm_out_file, REGNO (operands[0]),\n \t\t\t\t\toffs, 1);\n-\t  my_operands[0] = gen_rtx_PLUS (Pmode, stack_pointer_rtx, temp_reg);\n+\t  my_operands[0]\n+\t    = gen_rtx_PLUS (Pmode, stack_pointer_rtx, operands[0]);\n \t}\n     }\n "}, {"sha": "bf92c86ff0bf8f359cd4cfbaac5f7a848b88a28f", "filename": "gcc/config/mmix/predicates.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e61c6b31a86ec77d60db62ba322574b15881/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fpredicates.md?ref=a271e61c6b31a86ec77d60db62ba322574b15881", "patch": "@@ -161,3 +161,14 @@\n   (if_then_else (match_test \"reload_in_progress || reload_completed\")\n     (match_test \"strict_memory_address_p (Pmode, op)\")\n     (match_test \"memory_address_p (Pmode, op)\")))\n+\n+(define_predicate \"frame_pointer_operand\"\n+  (ior\n+   (and\n+    (match_code \"reg\")\n+    (match_test \"op == hard_frame_pointer_rtx || op == frame_pointer_rtx\"))\n+   (and\n+    (match_code \"plus\")\n+    (match_code \"reg\" \"0\")\n+    (match_code \"const_int\" \"1\")\n+    (match_test \"XEXP (op, 0) == stack_pointer_rtx\"))))"}]}