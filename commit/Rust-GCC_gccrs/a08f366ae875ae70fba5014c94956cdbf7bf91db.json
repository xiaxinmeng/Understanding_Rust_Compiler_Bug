{"sha": "a08f366ae875ae70fba5014c94956cdbf7bf91db", "node_id": "C_kwDOANBUbNoAKGEwOGYzNjZhZTg3NWFlNzBmYmE1MDE0Yzk0OTU2Y2RiZjdiZjkxZGI", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-03-15T20:20:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:41Z"}, "message": "[Ada] Implement calls to abstract subprograms in class-wide pre/post-conditions\n\nIn some special cases involving class-wide pre/post conditions, Ada\nallows a non-dispatching call to an abstract function (which is usually\nillegal).  Fix a bug in the implementation of Ada's rules about the\nrun-time behavior of such a call. Thanks to Javier Miranda for producing\nthis patch.\n\ngcc/ada/\n\n\t* contracts.adb (Build_Call_Helper_Body): Improve handling of\n\tthe case of a (legal) non-dispatching call to an abstract\n\tsubprogram.", "tree": {"sha": "f9d2e24856f8ccc038738adf470396b9d0c30267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9d2e24856f8ccc038738adf470396b9d0c30267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a08f366ae875ae70fba5014c94956cdbf7bf91db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08f366ae875ae70fba5014c94956cdbf7bf91db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08f366ae875ae70fba5014c94956cdbf7bf91db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08f366ae875ae70fba5014c94956cdbf7bf91db/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc021c0988113e1fcc5ec026f2382b074894e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc021c0988113e1fcc5ec026f2382b074894e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc021c0988113e1fcc5ec026f2382b074894e95"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "9463642556f05070141691918d0f626144a6472a", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a08f366ae875ae70fba5014c94956cdbf7bf91db/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a08f366ae875ae70fba5014c94956cdbf7bf91db/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=a08f366ae875ae70fba5014c94956cdbf7bf91db", "patch": "@@ -3899,7 +3899,16 @@ package body Contracts is\n             Set_Corresponding_Body (Helper_Decl, Body_Id);\n             Set_Must_Override (Body_Spec, False);\n \n-            if Present (Class_Preconditions (Subp_Id)) then\n+            if Present (Class_Preconditions (Subp_Id))\n+            --  Evaluate the expression if we are building a dynamic helper\n+            --  or we are building a static helper for a non-abstract tagged\n+            --  type; for abstract tagged types the helper just returns True\n+            --  since it is called by the indirect call wrapper (ICW).\n+              and then\n+                (Is_Dynamic\n+                   or else\n+                      not Is_Abstract_Type (Find_Dispatching_Type (Subp_Id)))\n+            then\n                Return_Expr :=\n                  Copy_And_Update_References (Class_Preconditions (Subp_Id));\n \n@@ -3910,7 +3919,8 @@ package body Contracts is\n             --  enabled.\n \n             else\n-               pragma Assert (Present (Ignored_Class_Preconditions (Subp_Id)));\n+               pragma Assert (Present (Ignored_Class_Preconditions (Subp_Id))\n+                 or else Is_Abstract_Type (Find_Dispatching_Type (Subp_Id)));\n                Return_Expr := New_Occurrence_Of (Standard_True, Loc);\n             end if;\n "}]}