{"sha": "8d75b8830e9dafb4e0c400c723653512adf40295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3NWI4ODMwZTlkYWZiNGUwYzQwMGM3MjM2NTM1MTJhZGY0MDI5NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-12T20:35:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-12T20:35:18Z"}, "message": "c++: permit deduction guides at class scope [PR79501]\n\nThis adds support for declaring (class-scope) deduction guides for a\nmember class template.  Fortunately it seems only a couple of changes\nare needed in order for the existing CTAD machinery to handle them\nproperly: we need to make sure to give them a FUNCTION_TYPE instead of a\nMETHOD_TYPE, and we need to avoid using a BASELINK when looking them up.\n\n\tPR c++/79501\n\tPR c++/100983\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (grokfndecl): Don't require that deduction guides are\n\tdeclared at namespace scope.  Check that class-scope deduction\n\tguides have the same access as the member class template.\n\t(grokdeclarator): Pretend class-scope deduction guides are static.\n\t* search.c (lookup_member): Don't use a BASELINK for (class-scope)\n\tdeduction guides.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction92.C: New test.\n\t* g++.dg/cpp1z/class-deduction93.C: New test.\n\t* g++.dg/cpp1z/class-deduction94.C: New test.\n\t* g++.dg/cpp1z/class-deduction95.C: New test.", "tree": {"sha": "fcd8164e8bbbd2e9178ac9e7eae0035372eb2bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd8164e8bbbd2e9178ac9e7eae0035372eb2bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d75b8830e9dafb4e0c400c723653512adf40295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d75b8830e9dafb4e0c400c723653512adf40295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d75b8830e9dafb4e0c400c723653512adf40295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d75b8830e9dafb4e0c400c723653512adf40295/comments", "author": null, "committer": null, "parents": [{"sha": "8d980e84240c82502661758fbecd5f456018ea89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d980e84240c82502661758fbecd5f456018ea89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d980e84240c82502661758fbecd5f456018ea89"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "01d64a16125ec0bb8e3798136472c30f475f96a2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -10042,12 +10042,6 @@ grokfndecl (tree ctype,\n \n   if (deduction_guide_p (decl))\n     {\n-      if (!DECL_NAMESPACE_SCOPE_P (decl))\n-\t{\n-\t  error_at (location, \"deduction guide %qD must be declared at \"\n-\t\t    \"namespace scope\", decl);\n-\t  return NULL_TREE;\n-\t}\n       tree type = TREE_TYPE (DECL_NAME (decl));\n       if (in_namespace == NULL_TREE\n \t  && CP_DECL_CONTEXT (decl) != CP_TYPE_CONTEXT (type))\n@@ -10057,6 +10051,13 @@ grokfndecl (tree ctype,\n \t  inform (location_of (type), \"  declared here\");\n \t  return NULL_TREE;\n \t}\n+      if (DECL_CLASS_SCOPE_P (decl)\n+\t  && current_access_specifier != declared_access (TYPE_NAME (type)))\n+\t{\n+\t  error_at (location, \"deduction guide %qD must have the same access \"\n+\t\t\t      \"as %qT\", decl, type);\n+\t  inform (location_of (type), \"  declared here\");\n+\t}\n       if (funcdef_flag)\n \terror_at (location,\n \t\t  \"deduction guide %qD must not have a function body\", decl);\n@@ -12037,6 +12038,10 @@ grokdeclarator (const cp_declarator *declarator,\n   storage_class = declspecs->storage_class;\n   if (storage_class == sc_static)\n     staticp = 1 + (decl_context == FIELD);\n+  else if (decl_context == FIELD && sfk == sfk_deduction_guide)\n+    /* Treat class-scope deduction guides as static member functions\n+       so that they get a FUNCTION_TYPE instead of a METHOD_TYPE.  */\n+    staticp = 2;\n \n   if (virtualp)\n     {"}, {"sha": "af41bfe58352295c411609a309a41dee29e81558", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -1226,7 +1226,10 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type,\n       rval = error_mark_node;\n     }\n \n-  if (rval && is_overloaded_fn (rval))\n+  if (rval && is_overloaded_fn (rval)\n+      /* Don't use a BASELINK for class-scope deduction guides since\n+\t they're not actually member functions.  */\n+      && !dguide_name_p (name))\n     rval = build_baselink (rval_binfo, basetype_path, rval,\n \t\t\t   (IDENTIFIER_CONV_OP_P (name)\n \t\t\t   ? TREE_TYPE (name): NULL_TREE));"}, {"sha": "4920ca4f4a0ebc35928b1c1e0b52dde38086ce0f", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction92.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction92.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction92.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction92.C?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/79501\n+// { dg-do compile { target c++17 } }\n+\n+template<auto V>\n+struct X {\n+  template<class T, auto>\n+  struct B { T t; };\n+\n+  template<class T> B(T, decltype(V)=V) -> B<const T, V>;\n+\n+  auto foo() { return B{V}; }\n+};\n+\n+X<42> x;\n+using type = decltype(x.foo());\n+using type = decltype(decltype(x)::B{42});\n+using type = X<42>::B<const int, 42>;"}, {"sha": "9d2db7a55a2275562081f871ffe425e756b31c64", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction93.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction93.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction93.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction93.C?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/79501\n+// { dg-do compile { target c++17 } }\n+// A variant of class-deduction78.C where List and its deduction guides are\n+// defined at class scope.\n+\n+using size_t = decltype(sizeof(42));\n+\n+struct A {\n+  template<typename T, size_t N = 0>\n+  struct List {\n+    T head;\n+    List<T, N-1> tail;\n+  };\n+\n+  template<typename T>\n+  struct List<T, 0> {};\n+\n+  template<typename T> List(T) -> List<T, 1>;\n+  template<typename T, size_t N> List(T, List<T, N>) -> List<T, N+1>;\n+};\n+\n+int main() {\n+  using type = decltype(A::List{0, A::List{1, A::List{2}}});\n+  using type = A::List<int, 3>;\n+}"}, {"sha": "f29ebd2c2b8412a3e670fde80105848a5afb3e83", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction94.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction94.C?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/79501\n+// { dg-do compile { target c++17 } }\n+\n+struct X {\n+protected:\n+  template<class T>\n+  struct B { T t; };\n+\n+  template<class T> B(T) -> B<T>;\n+};\n+\n+struct Y {\n+protected:\n+  template<class T>\n+  struct B { T t; };\n+\n+private:\n+  template<class T> B(T) -> B<T>; // { dg-error \"access\" }\n+};"}, {"sha": "05cbb2babfe11a7ae35cce171864380458fc0469", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction95.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction95.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d75b8830e9dafb4e0c400c723653512adf40295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction95.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction95.C?ref=8d75b8830e9dafb4e0c400c723653512adf40295", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/100983\n+// { dg-do compile { target c++17 } }\n+\n+struct X {\n+  template<int N>\n+  struct Y { template<class... Ts> Y(Ts...); };\n+\n+  template<class... Ts> Y(Ts...) -> Y<sizeof...(Ts)>;\n+};\n+\n+X::Y y{1,2,3};"}]}