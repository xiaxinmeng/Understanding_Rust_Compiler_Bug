{"sha": "18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmZTQwNGZiYzlhODZkMjFiY2I2ZDBmMDJjZjJhMWQ0NDQ4ZDcwNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-24T05:52:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-24T05:52:44Z"}, "message": "re PR fortran/30814 (non-conforming array sizes in PACK should raise an error)\n\n2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/30814\n\t* trans-decl.c (generate_function_code):  Add argument\n\tfor flag_bounds_check to the array for set_options.\n\t* invoke.texi:  Mention that some checks require\n\t-fbounds-check to be set during compilation of the\n\tmain program.\n\n2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/30814\n\t* libgfortran.h:  Add bounds_check to compile_options_t.\n\t* runtime/compile_options.c (set_options):  Add handling\n\tof compile_options.bounds_check.\n\t* intrinsics/pack_generic.c (pack_internal):  Also determine\n\tthe number of elements if compile_options.bounds_check is\n\ttrue.  Raise runtime error if a different array shape is\n\tdetected.\n\n2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/30814\n\t* gfortran.dg/pack_bounds_1.f90:  New test case.\n\nFrom-SVN: r126866", "tree": {"sha": "977427f50ee91accd2a6424d4d19533a4274a057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977427f50ee91accd2a6424d4d19533a4274a057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/comments", "author": null, "committer": null, "parents": [{"sha": "bf3900bf1c5f579776d8aa769b38b19a7a05ccf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3900bf1c5f579776d8aa769b38b19a7a05ccf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3900bf1c5f579776d8aa769b38b19a7a05ccf7"}], "stats": {"total": 89, "additions": 73, "deletions": 16}, "files": [{"sha": "745343ed4e333eda85cf9792ea94da63e415b2e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -1,3 +1,14 @@\n+2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/30814\n+\t* libgfortran.h:  Add bounds_check to compile_options_t.\n+\t* runtime/compile_options.c (set_options):  Add handling\n+\tof compile_options.bounds_check.\n+\t* intrinsics/pack_generic.c (pack_internal):  Also determine\n+\tthe number of elements if compile_options.bounds_check is\n+\ttrue.  Raise runtime error if a different array shape is\n+\tdetected.\n+\n 2007-07-23  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/25104"}, {"sha": "fb0aa8793233a12fce97cec0440f1d22dbcad844", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -828,6 +828,9 @@ and against the declared minimum and maximum values.  It also\n checks array indices for assumed and deferred\n shape arrays against the actual allocated bounds.\n \n+Some checks require that @option{-fbounds-check} is set for\n+the compilation of the main probram.\n+\n In the future this may also include other forms of checking, e.g., checking\n substring references.\n "}, {"sha": "1fd4373ff9ef126a83b1182b006ff207a3083a1d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -3191,9 +3191,13 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t\t build_int_cst (gfc_c_int_type_node,\n \t\t\t\t\tgfc_option.flag_sign_zero), array);\n \n+      array = tree_cons (NULL_TREE,\n+\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t\t\tflag_bounds_check), array);\n+\n       array_type = build_array_type (gfc_c_int_type_node,\n \t\t\t\t     build_index_type (build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t\t      5)));\n+\t\t\t\t\t\t\t\t      6)));\n       array = build_constructor_from_list (array_type, nreverse (array));\n       TREE_CONSTANT (array) = 1;\n       TREE_INVARIANT (array) = 1;\n@@ -3209,7 +3213,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n       var = gfc_build_addr_expr (pvoid_type_node, var);\n \n       tmp = build_call_expr (gfor_fndecl_set_options, 2,\n-\t\t\t     build_int_cst (gfc_c_int_type_node, 6), var);\n+\t\t\t     build_int_cst (gfc_c_int_type_node, 7), var);\n       gfc_add_expr_to_block (&body, tmp);\n     }\n "}, {"sha": "39a1404994609d26b6909d56a3ae08e8eafaaf76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -1,3 +1,8 @@\n+2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/30814\n+\t* gfortran.dg/pack_bounds_1.f90:  New test case.\n+\n 2007-07-23 \ufffdDaniel Franke \ufffd<franke.daniel@gmail.com>\n \n \tPR fortran/31639"}, {"sha": "94c8eb0866b34d18e4580920764ffe020d8b9cf0", "filename": "gcc/testsuite/gfortran.dg/pack_bounds_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_bounds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_bounds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_bounds_1.f90?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Incorrect extent in return value of  PACK intrinsic\" }\n+! PR 30814 - a bounds error with pack was not caught.\n+program main\n+  integer :: a(2,2), b(5)\n+  a = reshape((/ 1, -1, 1, -1 /), shape(a))\n+  b = pack(a, a /= 0)\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return value of PACK intrinsic\" }"}, {"sha": "658d702668f3aee85daa33aa2bf05d2a150bc8f8", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -1,3 +1,14 @@\n+2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/30814\n+\t* libgfortran.h:  Add bounds_check to compile_options_t.\n+\t* runtime/compile_options.c (set_options):  Add handling\n+\tof compile_options.bounds_check.\n+\t* intrinsics/pack_generic.c (pack_internal):  Also determine\n+\tthe number of elements if compile_options.bounds_check is\n+\ttrue.  Raise runtime error if a different array shape is\n+\tdetected.\n+\n 2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/32600"}, {"sha": "104c59f6e4d7de7394d7d74a028317c56a541f0a", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -97,6 +97,7 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n   index_type n;\n   index_type dim;\n   index_type nelem;\n+  index_type total;\n \n   dim = GFC_DESCRIPTOR_RANK (array);\n   zero_sized = 0;\n@@ -127,10 +128,10 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n       mptr = GFOR_POINTER_L8_TO_L4 (mptr);\n     }\n \n-  if (ret->data == NULL)\n+  if (ret->data == NULL || compile_options.bounds_check)\n     {\n-      /* Allocate the memory for the result.  */\n-      int total;\n+      /* Count the elements, either for allocating memory or\n+\t for bounds checking.  */\n \n       if (vector != NULL)\n \t{\n@@ -196,20 +197,30 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n \t    }\n \t}\n \n-      /* Setup the array descriptor.  */\n-      ret->dim[0].lbound = 0;\n-      ret->dim[0].ubound = total - 1;\n-      ret->dim[0].stride = 1;\n+      if (ret->data == NULL)\n+\t{\n+\t  /* Setup the array descriptor.  */\n+\t  ret->dim[0].lbound = 0;\n+\t  ret->dim[0].ubound = total - 1;\n+\t  ret->dim[0].stride = 1;\n \n-      ret->offset = 0;\n-      if (total == 0)\n+\t  ret->offset = 0;\n+\t  if (total == 0)\n+\t    {\n+\t      /* In this case, nothing remains to be done.  */\n+\t      ret->data = internal_malloc_size (1);\n+\t      return;\n+\t    }\n+\t  else\n+\t    ret->data = internal_malloc_size (size * total);\n+\t}\n+      else \n \t{\n-\t  /* In this case, nothing remains to be done.  */\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n+\t  /* We come here because of range checking.  */\n+\t  if (total != ret->dim[0].ubound + 1 - ret->dim[0].lbound)\n+\t    runtime_error (\"Incorrect extent in return value of\"\n+\t\t\t   \" PACK intrinsic\");\n \t}\n-      else\n-\tret->data = internal_malloc_size (size * total);\n     }\n \n   rstride0 = ret->dim[0].stride * size;"}, {"sha": "a6e2a42229ee0f26ab2e3310bdcac605555aaba5", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=18fe404fbc9a86d21bcb6d0f02cf2a1d4448d705", "patch": "@@ -54,6 +54,8 @@ set_options (int num, int options[])\n     compile_options.backtrace = options[4];\n   if (num >= 6)\n     compile_options.sign_zero = options[5];\n+  if (num >= 7)\n+    compile_options.bounds_check = options[6];\n }\n \n "}]}