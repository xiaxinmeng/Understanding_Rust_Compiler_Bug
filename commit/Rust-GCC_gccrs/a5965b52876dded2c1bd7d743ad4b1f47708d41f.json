{"sha": "a5965b52876dded2c1bd7d743ad4b1f47708d41f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5NjViNTI4NzZkZGVkMmMxYmQ3ZDc0M2FkNGIxZjQ3NzA4ZDQxZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2013-05-29T20:48:29Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-05-29T20:48:29Z"}, "message": "vector.md (VEC_I): Add support for new power8 V2DI instructions.\n\n2013-05-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Pat Haugen <pthaugen@us.ibm.com>\n\t    Peter Bergner <bergner@vnet.ibm.com>\n\n\t* config/rs6000/vector.md (VEC_I): Add support for new power8 V2DI\n\tinstructions.\n\t(VEC_A): Likewise.\n\t(VEC_C): Likewise.\n\t(vrotl<mode>3): Likewise.\n\t(vashl<mode>3): Likewise.\n\t(vlshr<mode>3): Likewise.\n\t(vashr<mode>3): Likewise.\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tsupport for power8 V2DI builtins.\n\n\t* config/rs6000/rs6000-builtin.def (abs_v2di): Add support for\n\tpower8 V2DI builtins.\n\t(vupkhsw): Likewise.\n\t(vupklsw): Likewise.\n\t(vaddudm): Likewise.\n\t(vminsd): Likewise.\n\t(vmaxsd): Likewise.\n\t(vminud): Likewise.\n\t(vmaxud): Likewise.\n\t(vpkudum): Likewise.\n\t(vpksdss): Likewise.\n\t(vpkudus): Likewise.\n\t(vpksdus): Likewise.\n\t(vrld): Likewise.\n\t(vsld): Likewise.\n\t(vsrd): Likewise.\n\t(vsrad): Likewise.\n\t(vsubudm): Likewise.\n\t(vcmpequd): Likewise.\n\t(vcmpgtsd): Likewise.\n\t(vcmpgtud): Likewise.\n\t(vcmpequd_p): Likewise.\n\t(vcmpgtsd_p): Likewise.\n\t(vcmpgtud_p): Likewise.\n\t(vupkhsw): Likewise.\n\t(vupklsw): Likewise.\n\t(vaddudm): Likewise.\n\t(vmaxsd): Likewise.\n\t(vmaxud): Likewise.\n\t(vminsd): Likewise.\n\t(vminud): Likewise.\n\t(vpksdss): Likewise.\n\t(vpksdus): Likewise.\n\t(vpkudum): Likewise.\n\t(vpkudus): Likewise.\n\t(vrld): Likewise.\n\t(vsld): Likewise.\n\t(vsrad): Likewise.\n\t(vsrd): Likewise.\n\t(vsubudm): Likewise.\n\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Add\n\tsupport for power8 V2DI instructions.\n\n\t* config/rs6000/altivec.md (UNSPEC_VPKUHUM): Add support for\n\tpower8 V2DI instructions.  Combine pack and unpack insns to use an\n\titerator for each mode.  Check whether a particular mode supports\n\tAltivec instructions instead of just checking TARGET_ALTIVEC.\n\t(UNSPEC_VPKUWUM): Likewise.\n\t(UNSPEC_VPKSHSS): Likewise.\n\t(UNSPEC_VPKSWSS): Likewise.\n\t(UNSPEC_VPKUHUS): Likewise.\n\t(UNSPEC_VPKSHUS): Likewise.\n\t(UNSPEC_VPKUWUS): Likewise.\n\t(UNSPEC_VPKSWUS): Likewise.\n\t(UNSPEC_VPACK_SIGN_SIGN_SAT): Likewise.\n\t(UNSPEC_VPACK_SIGN_UNS_SAT): Likewise.\n\t(UNSPEC_VPACK_UNS_UNS_SAT): Likewise.\n\t(UNSPEC_VPACK_UNS_UNS_MOD): Likewise.\n\t(UNSPEC_VUPKHSB): Likewise.\n\t(UNSPEC_VUNPACK_HI_SIGN): Likewise.\n\t(UNSPEC_VUNPACK_LO_SIGN): Likewise.\n\t(UNSPEC_VUPKHSH): Likewise.\n\t(UNSPEC_VUPKLSB): Likewise.\n\t(UNSPEC_VUPKLSH): Likewise.\n\t(VI2): Likewise.\n\t(VI_char): Likewise.\n\t(VI_scalar): Likewise.\n\t(VI_unit): Likewise.\n\t(VP): Likewise.\n\t(VP_small): Likewise.\n\t(VP_small_lc): Likewise.\n\t(VU_char): Likewise.\n\t(add<mode>3): Likewise.\n\t(altivec_vaddcuw): Likewise.\n\t(altivec_vaddu<VI_char>s): Likewise.\n\t(altivec_vadds<VI_char>s): Likewise.\n\t(sub<mode>3): Likewise.\n\t(altivec_vsubcuw): Likewise.\n\t(altivec_vsubu<VI_char>s): Likewise.\n\t(altivec_vsubs<VI_char>s): Likewise.\n\t(altivec_vavgs<VI_char>): Likewise.\n\t(altivec_vcmpbfp): Likewise.\n\t(altivec_eq<mode>): Likewise.\n\t(altivec_gt<mode>): Likewise.\n\t(altivec_gtu<mode>): Likewise.\n\t(umax<mode>3): Likewise.\n\t(smax<mode>3): Likewise.\n\t(umin<mode>3): Likewise.\n\t(smin<mode>3): Likewise.\n\t(altivec_vpkuhum): Likewise.\n\t(altivec_vpkuwum): Likewise.\n\t(altivec_vpkshss): Likewise.\n\t(altivec_vpkswss): Likewise.\n\t(altivec_vpkuhus): Likewise.\n\t(altivec_vpkshus): Likewise.\n\t(altivec_vpkuwus): Likewise.\n\t(altivec_vpkswus): Likewise.\n\t(altivec_vpks<VI_char>ss): Likewise.\n\t(altivec_vpks<VI_char>us): Likewise.\n\t(altivec_vpku<VI_char>us): Likewise.\n\t(altivec_vpku<VI_char>um): Likewise.\n\t(altivec_vrl<VI_char>): Likewise.\n\t(altivec_vsl<VI_char>): Likewise.\n\t(altivec_vsr<VI_char>): Likewise.\n\t(altivec_vsra<VI_char>): Likewise.\n\t(altivec_vsldoi_<mode>): Likewise.\n\t(altivec_vupkhsb): Likewise.\n\t(altivec_vupkhs<VU_char>): Likewise.\n\t(altivec_vupkls<VU_char>): Likewise.\n\t(altivec_vupkhsh): Likewise.\n\t(altivec_vupklsb): Likewise.\n\t(altivec_vupklsh): Likewise.\n\t(altivec_vcmpequ<VI_char>_p): Likewise.\n\t(altivec_vcmpgts<VI_char>_p): Likewise.\n\t(altivec_vcmpgtu<VI_char>_p): Likewise.\n\t(abs<mode>2): Likewise.\n\t(vec_unpacks_hi_v16qi): Likewise.\n\t(vec_unpacks_hi_v8hi): Likewise.\n\t(vec_unpacks_lo_v16qi): Likewise.\n\t(vec_unpacks_hi_<VP_small_lc>): Likewise.\n\t(vec_unpacks_lo_v8hi): Likewise.\n\t(vec_unpacks_lo_<VP_small_lc>): Likewise.\n\t(vec_pack_trunc_v8h): Likewise.\n\t(vec_pack_trunc_v4si): Likewise.\n\t(vec_pack_trunc_<mode>): Likewise.\n\n\t* config/rs6000/altivec.h (vec_vaddudm): Add defines for power8\n\tV2DI builtins.\n\t(vec_vmaxsd): Likewise.\n\t(vec_vmaxud): Likewise.\n\t(vec_vminsd): Likewise.\n\t(vec_vminud): Likewise.\n\t(vec_vpksdss): Likewise.\n\t(vec_vpksdus): Likewise.\n\t(vec_vpkudum): Likewise.\n\t(vec_vpkudus): Likewise.\n\t(vec_vrld): Likewise.\n\t(vec_vsld): Likewise.\n\t(vec_vsrad): Likewise.\n\t(vec_vsrd): Likewise.\n\t(vec_vsubudm): Likewise.\n\t(vec_vupkhsw): Likewise.\n\t(vec_vupklsw): Likewise.\n\n\nCo-Authored-By: Pat Haugen <pthaugen@us.ibm.com>\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r199423", "tree": {"sha": "ecb7b170d0af16797af894549984bdb11afd42d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb7b170d0af16797af894549984bdb11afd42d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5965b52876dded2c1bd7d743ad4b1f47708d41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5965b52876dded2c1bd7d743ad4b1f47708d41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5965b52876dded2c1bd7d743ad4b1f47708d41f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5965b52876dded2c1bd7d743ad4b1f47708d41f/comments", "author": null, "committer": null, "parents": [{"sha": "e70670cf4db3759336199993451af2739723de87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70670cf4db3759336199993451af2739723de87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70670cf4db3759336199993451af2739723de87"}], "stats": {"total": 973, "additions": 693, "deletions": 280}, "files": [{"sha": "c40662a22c85976f2c8c88d585de6b7bc95e45bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -1,3 +1,164 @@\n+2013-05-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Pat Haugen <pthaugen@us.ibm.com>\n+\t    Peter Bergner <bergner@vnet.ibm.com>\n+\n+\t* config/rs6000/vector.md (VEC_I): Add support for new power8 V2DI\n+\tinstructions.\n+\t(VEC_A): Likewise.\n+\t(VEC_C): Likewise.\n+\t(vrotl<mode>3): Likewise.\n+\t(vashl<mode>3): Likewise.\n+\t(vlshr<mode>3): Likewise.\n+\t(vashr<mode>3): Likewise.\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tsupport for power8 V2DI builtins.\n+\n+\t* config/rs6000/rs6000-builtin.def (abs_v2di): Add support for\n+\tpower8 V2DI builtins.\n+\t(vupkhsw): Likewise.\n+\t(vupklsw): Likewise.\n+\t(vaddudm): Likewise.\n+\t(vminsd): Likewise.\n+\t(vmaxsd): Likewise.\n+\t(vminud): Likewise.\n+\t(vmaxud): Likewise.\n+\t(vpkudum): Likewise.\n+\t(vpksdss): Likewise.\n+\t(vpkudus): Likewise.\n+\t(vpksdus): Likewise.\n+\t(vrld): Likewise.\n+\t(vsld): Likewise.\n+\t(vsrd): Likewise.\n+\t(vsrad): Likewise.\n+\t(vsubudm): Likewise.\n+\t(vcmpequd): Likewise.\n+\t(vcmpgtsd): Likewise.\n+\t(vcmpgtud): Likewise.\n+\t(vcmpequd_p): Likewise.\n+\t(vcmpgtsd_p): Likewise.\n+\t(vcmpgtud_p): Likewise.\n+\t(vupkhsw): Likewise.\n+\t(vupklsw): Likewise.\n+\t(vaddudm): Likewise.\n+\t(vmaxsd): Likewise.\n+\t(vmaxud): Likewise.\n+\t(vminsd): Likewise.\n+\t(vminud): Likewise.\n+\t(vpksdss): Likewise.\n+\t(vpksdus): Likewise.\n+\t(vpkudum): Likewise.\n+\t(vpkudus): Likewise.\n+\t(vrld): Likewise.\n+\t(vsld): Likewise.\n+\t(vsrad): Likewise.\n+\t(vsrd): Likewise.\n+\t(vsubudm): Likewise.\n+\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Add\n+\tsupport for power8 V2DI instructions.\n+\n+\t* config/rs6000/altivec.md (UNSPEC_VPKUHUM): Add support for\n+\tpower8 V2DI instructions.  Combine pack and unpack insns to use an\n+\titerator for each mode.  Check whether a particular mode supports\n+\tAltivec instructions instead of just checking TARGET_ALTIVEC.\n+\t(UNSPEC_VPKUWUM): Likewise.\n+\t(UNSPEC_VPKSHSS): Likewise.\n+\t(UNSPEC_VPKSWSS): Likewise.\n+\t(UNSPEC_VPKUHUS): Likewise.\n+\t(UNSPEC_VPKSHUS): Likewise.\n+\t(UNSPEC_VPKUWUS): Likewise.\n+\t(UNSPEC_VPKSWUS): Likewise.\n+\t(UNSPEC_VPACK_SIGN_SIGN_SAT): Likewise.\n+\t(UNSPEC_VPACK_SIGN_UNS_SAT): Likewise.\n+\t(UNSPEC_VPACK_UNS_UNS_SAT): Likewise.\n+\t(UNSPEC_VPACK_UNS_UNS_MOD): Likewise.\n+\t(UNSPEC_VUPKHSB): Likewise.\n+\t(UNSPEC_VUNPACK_HI_SIGN): Likewise.\n+\t(UNSPEC_VUNPACK_LO_SIGN): Likewise.\n+\t(UNSPEC_VUPKHSH): Likewise.\n+\t(UNSPEC_VUPKLSB): Likewise.\n+\t(UNSPEC_VUPKLSH): Likewise.\n+\t(VI2): Likewise.\n+\t(VI_char): Likewise.\n+\t(VI_scalar): Likewise.\n+\t(VI_unit): Likewise.\n+\t(VP): Likewise.\n+\t(VP_small): Likewise.\n+\t(VP_small_lc): Likewise.\n+\t(VU_char): Likewise.\n+\t(add<mode>3): Likewise.\n+\t(altivec_vaddcuw): Likewise.\n+\t(altivec_vaddu<VI_char>s): Likewise.\n+\t(altivec_vadds<VI_char>s): Likewise.\n+\t(sub<mode>3): Likewise.\n+\t(altivec_vsubcuw): Likewise.\n+\t(altivec_vsubu<VI_char>s): Likewise.\n+\t(altivec_vsubs<VI_char>s): Likewise.\n+\t(altivec_vavgs<VI_char>): Likewise.\n+\t(altivec_vcmpbfp): Likewise.\n+\t(altivec_eq<mode>): Likewise.\n+\t(altivec_gt<mode>): Likewise.\n+\t(altivec_gtu<mode>): Likewise.\n+\t(umax<mode>3): Likewise.\n+\t(smax<mode>3): Likewise.\n+\t(umin<mode>3): Likewise.\n+\t(smin<mode>3): Likewise.\n+\t(altivec_vpkuhum): Likewise.\n+\t(altivec_vpkuwum): Likewise.\n+\t(altivec_vpkshss): Likewise.\n+\t(altivec_vpkswss): Likewise.\n+\t(altivec_vpkuhus): Likewise.\n+\t(altivec_vpkshus): Likewise.\n+\t(altivec_vpkuwus): Likewise.\n+\t(altivec_vpkswus): Likewise.\n+\t(altivec_vpks<VI_char>ss): Likewise.\n+\t(altivec_vpks<VI_char>us): Likewise.\n+\t(altivec_vpku<VI_char>us): Likewise.\n+\t(altivec_vpku<VI_char>um): Likewise.\n+\t(altivec_vrl<VI_char>): Likewise.\n+\t(altivec_vsl<VI_char>): Likewise.\n+\t(altivec_vsr<VI_char>): Likewise.\n+\t(altivec_vsra<VI_char>): Likewise.\n+\t(altivec_vsldoi_<mode>): Likewise.\n+\t(altivec_vupkhsb): Likewise.\n+\t(altivec_vupkhs<VU_char>): Likewise.\n+\t(altivec_vupkls<VU_char>): Likewise.\n+\t(altivec_vupkhsh): Likewise.\n+\t(altivec_vupklsb): Likewise.\n+\t(altivec_vupklsh): Likewise.\n+\t(altivec_vcmpequ<VI_char>_p): Likewise.\n+\t(altivec_vcmpgts<VI_char>_p): Likewise.\n+\t(altivec_vcmpgtu<VI_char>_p): Likewise.\n+\t(abs<mode>2): Likewise.\n+\t(vec_unpacks_hi_v16qi): Likewise.\n+\t(vec_unpacks_hi_v8hi): Likewise.\n+\t(vec_unpacks_lo_v16qi): Likewise.\n+\t(vec_unpacks_hi_<VP_small_lc>): Likewise.\n+\t(vec_unpacks_lo_v8hi): Likewise.\n+\t(vec_unpacks_lo_<VP_small_lc>): Likewise.\n+\t(vec_pack_trunc_v8h): Likewise.\n+\t(vec_pack_trunc_v4si): Likewise.\n+\t(vec_pack_trunc_<mode>): Likewise.\n+\n+\t* config/rs6000/altivec.h (vec_vaddudm): Add defines for power8\n+\tV2DI builtins.\n+\t(vec_vmaxsd): Likewise.\n+\t(vec_vmaxud): Likewise.\n+\t(vec_vminsd): Likewise.\n+\t(vec_vminud): Likewise.\n+\t(vec_vpksdss): Likewise.\n+\t(vec_vpksdus): Likewise.\n+\t(vec_vpkudum): Likewise.\n+\t(vec_vpkudus): Likewise.\n+\t(vec_vrld): Likewise.\n+\t(vec_vsld): Likewise.\n+\t(vec_vsrad): Likewise.\n+\t(vec_vsrd): Likewise.\n+\t(vec_vsubudm): Likewise.\n+\t(vec_vupkhsw): Likewise.\n+\t(vec_vupklsw): Likewise.\n+\n 2013-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (symtab_node_base): Add definition, alias and analyzed"}, {"sha": "19a4ae9297d172891b60b255df1d2f275a190311", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -321,6 +321,26 @@\n #define vec_vsx_st __builtin_vec_vsx_st\n #endif\n \n+#ifdef _ARCH_PWR8\n+/* Vector additions added in ISA 2.07.  */\n+#define vec_vaddudm __builtin_vec_vaddudm\n+#define vec_vmaxsd __builtin_vec_vmaxsd\n+#define vec_vmaxud __builtin_vec_vmaxud\n+#define vec_vminsd __builtin_vec_vminsd\n+#define vec_vminud __builtin_vec_vminud\n+#define vec_vpksdss __builtin_vec_vpksdss\n+#define vec_vpksdus __builtin_vec_vpksdus\n+#define vec_vpkudum __builtin_vec_vpkudum\n+#define vec_vpkudus __builtin_vec_vpkudus\n+#define vec_vrld __builtin_vec_vrld\n+#define vec_vsld __builtin_vec_vsld\n+#define vec_vsrad __builtin_vec_vsrad\n+#define vec_vsrd __builtin_vec_vsrd\n+#define vec_vsubudm __builtin_vec_vsubudm\n+#define vec_vupkhsw __builtin_vec_vupkhsw\n+#define vec_vupklsw __builtin_vec_vupklsw\n+#endif\n+\n /* Predicates.\n    For C++, we use templates in order to allow non-parenthesized arguments.\n    For C, instead, we use macros since non-parenthesized arguments were"}, {"sha": "78d2900144006acc890f98fab040c2c534fa992c", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 178, "deletions": 268, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -41,15 +41,11 @@\n    UNSPEC_VMULOSB\n    UNSPEC_VMULOUH\n    UNSPEC_VMULOSH\n-   UNSPEC_VPKUHUM\n-   UNSPEC_VPKUWUM\n    UNSPEC_VPKPX\n-   UNSPEC_VPKSHSS\n-   UNSPEC_VPKSWSS\n-   UNSPEC_VPKUHUS\n-   UNSPEC_VPKSHUS\n-   UNSPEC_VPKUWUS\n-   UNSPEC_VPKSWUS\n+   UNSPEC_VPACK_SIGN_SIGN_SAT\n+   UNSPEC_VPACK_SIGN_UNS_SAT\n+   UNSPEC_VPACK_UNS_UNS_SAT\n+   UNSPEC_VPACK_UNS_UNS_MOD\n    UNSPEC_VSLV4SI\n    UNSPEC_VSLO\n    UNSPEC_VSR\n@@ -71,12 +67,10 @@\n    UNSPEC_VLOGEFP\n    UNSPEC_VEXPTEFP\n    UNSPEC_VLSDOI\n-   UNSPEC_VUPKHSB\n+   UNSPEC_VUNPACK_HI_SIGN\n+   UNSPEC_VUNPACK_LO_SIGN\n    UNSPEC_VUPKHPX\n-   UNSPEC_VUPKHSH\n-   UNSPEC_VUPKLSB\n    UNSPEC_VUPKLPX\n-   UNSPEC_VUPKLSH\n    UNSPEC_DST\n    UNSPEC_DSTT\n    UNSPEC_DSTST\n@@ -146,6 +140,8 @@\n \n ;; Vec int modes\n (define_mode_iterator VI [V4SI V8HI V16QI])\n+;; Like VI, but add ISA 2.07 integer vector ops\n+(define_mode_iterator VI2 [V4SI V8HI V16QI V2DI])\n ;; Short vec in modes\n (define_mode_iterator VIshort [V8HI V16QI])\n ;; Vec float modes\n@@ -159,8 +155,18 @@\n ;; Like VM, except don't do TImode\n (define_mode_iterator VM2 [V4SI V8HI V16QI V4SF V2DF V2DI])\n \n-(define_mode_attr VI_char [(V4SI \"w\") (V8HI \"h\") (V16QI \"b\")])\n-(define_mode_attr VI_scalar [(V4SI \"SI\") (V8HI \"HI\") (V16QI \"QI\")])\n+(define_mode_attr VI_char [(V2DI \"d\") (V4SI \"w\") (V8HI \"h\") (V16QI \"b\")])\n+(define_mode_attr VI_scalar [(V2DI \"DI\") (V4SI \"SI\") (V8HI \"HI\") (V16QI \"QI\")])\n+(define_mode_attr VI_unit [(V16QI \"VECTOR_UNIT_ALTIVEC_P (V16QImode)\")\n+\t\t\t   (V8HI \"VECTOR_UNIT_ALTIVEC_P (V8HImode)\")\n+\t\t\t   (V4SI \"VECTOR_UNIT_ALTIVEC_P (V4SImode)\")\n+\t\t\t   (V2DI \"VECTOR_UNIT_P8_VECTOR_P (V2DImode)\")])\n+\n+;; Vector pack/unpack\n+(define_mode_iterator VP [V2DI V4SI V8HI])\n+(define_mode_attr VP_small [(V2DI \"V4SI\") (V4SI \"V8HI\") (V8HI \"V16QI\")])\n+(define_mode_attr VP_small_lc [(V2DI \"v4si\") (V4SI \"v8hi\") (V8HI \"v16qi\")])\n+(define_mode_attr VU_char [(V2DI \"w\") (V4SI \"h\") (V8HI \"b\")])\n \n ;; Vector move instructions.\n (define_insn \"*altivec_mov<mode>\"\n@@ -378,10 +384,10 @@\n \n ;; add\n (define_insn \"add<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (plus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                 (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (plus:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vaddu<VI_char>m %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -398,17 +404,17 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n                       (match_operand:V4SI 2 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VADDCUW))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n   \"vaddcuw %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_vaddu<VI_char>s\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n         (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n-                    (match_operand:VI 2 \"register_operand\" \"v\")]\n+\t\t    (match_operand:VI 2 \"register_operand\" \"v\")]\n \t\t   UNSPEC_VADDU))\n    (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n+  \"<VI_unit>\"\n   \"vaddu<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -418,16 +424,16 @@\n                     (match_operand:VI 2 \"register_operand\" \"v\")]\n \t\t   UNSPEC_VADDS))\n    (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vadds<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; sub\n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (minus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                  (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (minus:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t   (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vsubu<VI_char>m %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -444,7 +450,7 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n                       (match_operand:V4SI 2 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VSUBCUW))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n   \"vsubcuw %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -454,7 +460,7 @@\n                     (match_operand:VI 2 \"register_operand\" \"v\")]\n \t\t   UNSPEC_VSUBU))\n    (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vsubu<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -464,7 +470,7 @@\n                     (match_operand:VI 2 \"register_operand\" \"v\")]\n \t\t   UNSPEC_VSUBS))\n    (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vsubs<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -483,7 +489,7 @@\n         (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n                     (match_operand:VI 2 \"register_operand\" \"v\")]\n \t\t   UNSPEC_VAVGS))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vavgs<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -492,31 +498,31 @@\n         (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n                       (match_operand:V4SF 2 \"register_operand\" \"v\")] \n                       UNSPEC_VCMPBFP))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n   \"vcmpbfp %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"*altivec_eq<mode>\"\n-  [(set (match_operand:VI 0 \"altivec_register_operand\" \"=v\")\n-\t(eq:VI (match_operand:VI 1 \"altivec_register_operand\" \"v\")\n-\t       (match_operand:VI 2 \"altivec_register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\" \"=v\")\n+\t(eq:VI2 (match_operand:VI2 1 \"altivec_register_operand\" \"v\")\n+\t\t(match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vcmpequ<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"*altivec_gt<mode>\"\n-  [(set (match_operand:VI 0 \"altivec_register_operand\" \"=v\")\n-\t(gt:VI (match_operand:VI 1 \"altivec_register_operand\" \"v\")\n-\t       (match_operand:VI 2 \"altivec_register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\" \"=v\")\n+\t(gt:VI2 (match_operand:VI2 1 \"altivec_register_operand\" \"v\")\n+\t\t(match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vcmpgts<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"*altivec_gtu<mode>\"\n-  [(set (match_operand:VI 0 \"altivec_register_operand\" \"=v\")\n-\t(gtu:VI (match_operand:VI 1 \"altivec_register_operand\" \"v\")\n-\t\t(match_operand:VI 2 \"altivec_register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\" \"=v\")\n+\t(gtu:VI2 (match_operand:VI2 1 \"altivec_register_operand\" \"v\")\n+\t\t (match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vcmpgtu<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n@@ -744,18 +750,18 @@\n ;; max\n \n (define_insn \"umax<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (umax:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                 (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (umax:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vmaxu<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"smax<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (smax:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                 (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (smax:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vmaxs<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -768,18 +774,18 @@\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"umin<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (umin:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                 (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (umin:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vminu<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"smin<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (smin:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-                 (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (smin:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vmins<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -1058,24 +1064,6 @@\n   \"vandc %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"altivec_vpkuhum\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                       (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VPKUHUM))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkuhum %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vpkuwum\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VPKUWUM))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkuwum %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n (define_insn \"altivec_vpkpx\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n@@ -1085,71 +1073,47 @@\n   \"vpkpx %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vpkshss\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                       (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VPKSHSS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkshss %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vpkswss\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VPKSWSS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkswss %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vpkuhus\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                       (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VPKUHUS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkuhus %0,%1,%2\"\n+(define_insn \"altivec_vpks<VI_char>ss\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+\t(unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+\t\t\t   UNSPEC_VPACK_SIGN_SIGN_SAT))]\n+  \"<VI_unit>\"\n+  \"vpks<VI_char>ss %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vpkshus\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                       (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VPKSHUS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkshus %0,%1,%2\"\n+(define_insn \"altivec_vpks<VI_char>us\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+\t(unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+\t\t\t   UNSPEC_VPACK_SIGN_UNS_SAT))]\n+  \"<VI_unit>\"\n+  \"vpks<VI_char>us %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vpkuwus\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VPKUWUS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkuwus %0,%1,%2\"\n+(define_insn \"altivec_vpku<VI_char>us\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+\t(unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+\t\t\t   UNSPEC_VPACK_UNS_UNS_SAT))]\n+  \"<VI_unit>\"\n+  \"vpku<VI_char>us %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vpkswus\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VPKSWUS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkswus %0,%1,%2\"\n+(define_insn \"altivec_vpku<VI_char>um\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+\t(unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+\t\t\t   UNSPEC_VPACK_UNS_UNS_MOD))]\n+  \"<VI_unit>\"\n+  \"vpku<VI_char>um %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vrl<VI_char>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (rotate:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t   (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (rotate:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vrl<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -1172,26 +1136,26 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vsl<VI_char>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (ashift:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t   (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (ashift:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vsl<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"*altivec_vsr<VI_char>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (lshiftrt:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t     (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (lshiftrt:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vsr<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"*altivec_vsra<VI_char>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (ashiftrt:VI (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t     (match_operand:VI 2 \"register_operand\" \"v\")))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (ashiftrt:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:VI2 2 \"register_operand\" \"v\")))]\n+  \"<VI_unit>\"\n   \"vsra<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -1476,12 +1440,20 @@\n   \"vsldoi %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vupkhsb\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-\t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VUPKHSB))]\n-  \"TARGET_ALTIVEC\"\n-  \"vupkhsb %0,%1\"\n+(define_insn \"altivec_vupkhs<VU_char>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+\t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VUNPACK_HI_SIGN))]\n+  \"<VI_unit>\"\n+  \"vupkhs<VU_char> %0,%1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupkls<VU_char>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+\t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VUNPACK_LO_SIGN))]\n+  \"<VI_unit>\"\n+  \"vupkls<VU_char> %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupkhpx\"\n@@ -1492,22 +1464,6 @@\n   \"vupkhpx %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vupkhsh\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VUPKHSH))]\n-  \"TARGET_ALTIVEC\"\n-  \"vupkhsh %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vupklsb\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-\t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VUPKLSB))]\n-  \"TARGET_ALTIVEC\"\n-  \"vupklsb %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n (define_insn \"altivec_vupklpx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n@@ -1516,49 +1472,41 @@\n   \"vupklpx %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vupklsh\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VUPKLSH))]\n-  \"TARGET_ALTIVEC\"\n-  \"vupklsh %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n ;; Compare vectors producing a vector result and a predicate, setting CR6 to\n ;; indicate a combined status\n (define_insn \"*altivec_vcmpequ<VI_char>_p\"\n   [(set (reg:CC 74)\n-\t(unspec:CC [(eq:CC (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI 2 \"register_operand\" \"v\"))]\n+\t(unspec:CC [(eq:CC (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI2 2 \"register_operand\" \"v\"))]\n \t\t   UNSPEC_PREDICATE))\n-   (set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t(eq:VI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+   (set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+\t(eq:VI2 (match_dup 1)\n+\t\t(match_dup 2)))]\n+  \"<VI_unit>\"\n   \"vcmpequ<VI_char>. %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"*altivec_vcmpgts<VI_char>_p\"\n   [(set (reg:CC 74)\n-\t(unspec:CC [(gt:CC (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI 2 \"register_operand\" \"v\"))]\n+\t(unspec:CC [(gt:CC (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI2 2 \"register_operand\" \"v\"))]\n \t\t   UNSPEC_PREDICATE))\n-   (set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t(gt:VI (match_dup 1)\n-\t       (match_dup 2)))]\n-  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+   (set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+\t(gt:VI2 (match_dup 1)\n+\t\t(match_dup 2)))]\n+  \"<VI_unit>\"\n   \"vcmpgts<VI_char>. %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n (define_insn \"*altivec_vcmpgtu<VI_char>_p\"\n   [(set (reg:CC 74)\n-\t(unspec:CC [(gtu:CC (match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t\t    (match_operand:VI 2 \"register_operand\" \"v\"))]\n+\t(unspec:CC [(gtu:CC (match_operand:VI2 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VI2 2 \"register_operand\" \"v\"))]\n \t\t   UNSPEC_PREDICATE))\n-   (set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t(gtu:VI (match_dup 1)\n-\t\t(match_dup 2)))]\n-  \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+   (set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+\t(gtu:VI2 (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"<VI_unit>\"\n   \"vcmpgtu<VI_char>. %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n@@ -1779,20 +1727,28 @@\n   [(set_attr \"type\" \"vecstore\")])\n \n ;; Generate\n-;;    vspltis? SCRATCH0,0\n+;;    xxlxor/vxor SCRATCH0,SCRATCH0,SCRATCH0\n ;;    vsubu?m SCRATCH2,SCRATCH1,%1\n ;;    vmaxs? %0,%1,SCRATCH2\"\n (define_expand \"abs<mode>2\"\n-  [(set (match_dup 2) (vec_duplicate:VI (const_int 0)))\n-   (set (match_dup 3)\n-        (minus:VI (match_dup 2)\n-                  (match_operand:VI 1 \"register_operand\" \"v\")))\n-   (set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (smax:VI (match_dup 1) (match_dup 3)))]\n-  \"TARGET_ALTIVEC\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4)\n+        (minus:VI2 (match_dup 2)\n+\t\t   (match_operand:VI2 1 \"register_operand\" \"v\")))\n+   (set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+        (smax:VI2 (match_dup 1) (match_dup 4)))]\n+  \"<VI_unit>\"\n {\n-  operands[2] = gen_reg_rtx (GET_MODE (operands[0]));\n-  operands[3] = gen_reg_rtx (GET_MODE (operands[0]));\n+  int i, n_elt = GET_MODE_NUNITS (<MODE>mode);\n+  rtvec v = rtvec_alloc (n_elt);\n+\n+  /* Create an all 0 constant.  */\n+  for (i = 0; i < n_elt; ++i)\n+    RTVEC_ELT (v, i) = const0_rtx;\n+\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+  operands[3] = gen_rtx_CONST_VECTOR (<MODE>mode, v);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n })\n \n ;; Generate\n@@ -1950,49 +1906,19 @@\n   DONE;\n }\")\n \n-(define_expand \"vec_unpacks_hi_v16qi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKHSB))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vupkhsb (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_unpacks_hi_v8hi\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKHSH))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vupkhsh (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_unpacks_lo_v16qi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKLSB))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vupklsb (operands[0], operands[1]));\n-  DONE;\n-}\")\n+(define_expand \"vec_unpacks_hi_<VP_small_lc>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+        (unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VUNPACK_HI_SIGN))]\n+  \"<VI_unit>\"\n+  \"\")\n \n-(define_expand \"vec_unpacks_lo_v8hi\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKLSH))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vupklsh (operands[0], operands[1]));\n-  DONE;\n-}\")\n+(define_expand \"vec_unpacks_lo_<VP_small_lc>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+        (unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VUNPACK_LO_SIGN))]\n+  \"<VI_unit>\"\n+  \"\")\n \n (define_insn \"vperm_v8hiv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n@@ -2291,29 +2217,13 @@\n   DONE;\n }\")\n \n-(define_expand \"vec_pack_trunc_v8hi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                       (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-                      UNSPEC_VPKUHUM))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vpkuhum (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-                                                                                \n-(define_expand \"vec_pack_trunc_v4si\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VPKUWUM))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vpkuwum (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n+(define_expand \"vec_pack_trunc_<mode>\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+        (unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+                      UNSPEC_VPACK_UNS_UNS_MOD))]\n+  \"<VI_unit>\"\n+  \"\")\n \n (define_expand \"altivec_negv4sf2\"\n   [(use (match_operand:V4SF 0 \"register_operand\" \"\"))"}, {"sha": "7a80eff89247de0e4d326f5bc56f845a8b114b72", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -30,7 +30,7 @@\n    RS6000_BUILTIN_A -- ABS builtins\n    RS6000_BUILTIN_D -- DST builtins\n    RS6000_BUILTIN_E -- SPE EVSEL builtins.\n-   RS6000_BUILTIN_P -- Altivec, VSX, Power8 vector predicate builtins\n+   RS6000_BUILTIN_P -- Altivec, VSX, ISA 2.07 vector predicate builtins\n    RS6000_BUILTIN_Q -- Paired floating point VSX predicate builtins\n    RS6000_BUILTIN_S -- SPE predicate builtins\n    RS6000_BUILTIN_X -- special builtins\n@@ -301,7 +301,7 @@\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n-/* Power8 vector convenience macros.  */\n+/* ISA 2.07 (power8) vector convenience macros.  */\n /* For the instructions that are encoded as altivec instructions use\n    __builtin_altivec_ as the builtin name.  */\n #define BU_P8V_AV_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n@@ -1233,6 +1233,58 @@ BU_VSX_OVERLOAD_2 (XXSPLTW,  \"xxspltw\")\n /* VSX builtins that are handled as special cases.  */\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n BU_VSX_OVERLOAD_X (ST,\t     \"st\")\n+\f\n+/* 1 argument altivec instructions added in ISA 2.07.  */\n+BU_P8V_AV_1 (ABS_V2DI,\t      \"abs_v2di\",\tCONST,\tabsv2di2)\n+BU_P8V_AV_1 (VUPKHSW,\t      \"vupkhsw\",\tCONST,\taltivec_vupkhsw)\n+BU_P8V_AV_1 (VUPKLSW,\t      \"vupklsw\",\tCONST,\taltivec_vupklsw)\n+\n+/* 2 argument altivec instructions added in ISA 2.07.  */\n+BU_P8V_AV_2 (VADDUDM,\t\t\"vaddudm\",\tCONST,\taddv2di3)\n+BU_P8V_AV_2 (VMINSD,\t\t\"vminsd\",\tCONST,\tsminv2di3)\n+BU_P8V_AV_2 (VMAXSD,\t\t\"vmaxsd\",\tCONST,\tsmaxv2di3)\n+BU_P8V_AV_2 (VMINUD,\t\t\"vminud\",\tCONST,\tuminv2di3)\n+BU_P8V_AV_2 (VMAXUD,\t\t\"vmaxud\",\tCONST,\tumaxv2di3)\n+BU_P8V_AV_2 (VPKUDUM,\t\t\"vpkudum\",\tCONST,\taltivec_vpkudum)\n+BU_P8V_AV_2 (VPKSDSS,\t\t\"vpksdss\",\tCONST,\taltivec_vpksdss)\n+BU_P8V_AV_2 (VPKUDUS,\t\t\"vpkudus\",\tCONST,\taltivec_vpkudus)\n+BU_P8V_AV_2 (VPKSDUS,\t\t\"vpksdus\",\tCONST,\taltivec_vpkswus)\n+BU_P8V_AV_2 (VRLD,\t\t\"vrld\",\t\tCONST,\tvrotlv2di3)\n+BU_P8V_AV_2 (VSLD,\t\t\"vsld\",\t\tCONST,\tvashlv2di3)\n+BU_P8V_AV_2 (VSRD,\t\t\"vsrd\",\t\tCONST,\tvlshrv2di3)\n+BU_P8V_AV_2 (VSRAD,\t\t\"vsrad\",\tCONST,\tvashrv2di3)\n+BU_P8V_AV_2 (VSUBUDM,\t\t\"vsubudm\",\tCONST,\tsubv2di3)\n+\n+/* Vector comparison instructions added in ISA 2.07.  */\n+BU_P8V_AV_2 (VCMPEQUD,\t\t\"vcmpequd\",\tCONST,\tvector_eqv2di)\n+BU_P8V_AV_2 (VCMPGTSD,\t\t\"vcmpgtsd\",\tCONST,\tvector_gtv2di)\n+BU_P8V_AV_2 (VCMPGTUD,\t\t\"vcmpgtud\",\tCONST,\tvector_gtuv2di)\n+\n+/* Vector comparison predicate instructions added in ISA 2.07.  */\n+BU_P8V_AV_P (VCMPEQUD_P,\t\"vcmpequd_p\",\tCONST,\tvector_eq_v2di_p)\n+BU_P8V_AV_P (VCMPGTSD_P,\t\"vcmpgtsd_p\",\tCONST,\tvector_gt_v2di_p)\n+BU_P8V_AV_P (VCMPGTUD_P,\t\"vcmpgtud_p\",\tCONST,\tvector_gtu_v2di_p)\n+\n+/* ISA 2.07 vector overloaded 1 argument functions.  */\n+BU_P8V_OVERLOAD_1 (VUPKHSW,\t\"vupkhsw\")\n+BU_P8V_OVERLOAD_1 (VUPKLSW,\t\"vupklsw\")\n+\n+/* ISA 2.07 vector overloaded 2 argument functions.  */\n+BU_P8V_OVERLOAD_2 (VADDUDM,\t\"vaddudm\")\n+BU_P8V_OVERLOAD_2 (VMAXSD,\t\"vmaxsd\")\n+BU_P8V_OVERLOAD_2 (VMAXUD,\t\"vmaxud\")\n+BU_P8V_OVERLOAD_2 (VMINSD,\t\"vminsd\")\n+BU_P8V_OVERLOAD_2 (VMINUD,\t\"vminud\")\n+BU_P8V_OVERLOAD_2 (VPKSDSS,\t\"vpksdss\")\n+BU_P8V_OVERLOAD_2 (VPKSDUS,\t\"vpksdus\")\n+BU_P8V_OVERLOAD_2 (VPKUDUM,\t\"vpkudum\")\n+BU_P8V_OVERLOAD_2 (VPKUDUS,\t\"vpkudus\")\n+BU_P8V_OVERLOAD_2 (VRLD,\t\"vrld\")\n+BU_P8V_OVERLOAD_2 (VSLD,\t\"vsld\")\n+BU_P8V_OVERLOAD_2 (VSRAD,\t\"vsrad\")\n+BU_P8V_OVERLOAD_2 (VSRD,\t\"vsrd\")\n+BU_P8V_OVERLOAD_2 (VSUBUDM,\t\"vsubudm\")\n+\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox)"}, {"sha": "801b5bb225d484c5a0958d039a67394bea147dc1", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -511,6 +511,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_ABS, ALTIVEC_BUILTIN_ABS_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ABS, P8V_BUILTIN_ABS_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_ABS, ALTIVEC_BUILTIN_ABS_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_ABS, VSX_BUILTIN_XVABSDP,\n@@ -583,12 +585,24 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VUPKHSH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VUPKHSH, P8V_BUILTIN_VUPKHSW,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHPX, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHPX, ALTIVEC_BUILTIN_VUPKHPX,\n@@ -607,6 +621,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLSH,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKL, P8V_BUILTIN_VUPKLSW,\n+    RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKL, P8V_BUILTIN_VUPKLSW,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n@@ -657,6 +675,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADD, ALTIVEC_BUILTIN_VADDUWM,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADD, P8V_BUILTIN_VADDUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADD, ALTIVEC_BUILTIN_VADDFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADD, VSX_BUILTIN_XVADDDP,\n@@ -943,6 +973,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, P8V_BUILTIN_VCMPEQUD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, P8V_BUILTIN_VCMPEQUD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, VSX_BUILTIN_XVCMPEQDP,\n@@ -981,6 +1015,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTSW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPGT, P8V_BUILTIN_VCMPGTUD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPGT, P8V_BUILTIN_VCMPGTSD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGT, VSX_BUILTIN_XVCMPGTDP,\n@@ -1027,6 +1065,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLT, ALTIVEC_BUILTIN_VCMPGTSW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPLT, P8V_BUILTIN_VCMPGTUD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPLT, P8V_BUILTIN_VCMPGTSD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLT, ALTIVEC_BUILTIN_VCMPGTFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLT, VSX_BUILTIN_XVCMPGTDP,\n@@ -1424,6 +1466,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MAX, ALTIVEC_BUILTIN_VMAXSW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MAX, P8V_BUILTIN_VMAXSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MAX, ALTIVEC_BUILTIN_VMAXFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_MAX, VSX_BUILTIN_XVMAXDP,\n@@ -1610,6 +1664,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MIN, ALTIVEC_BUILTIN_VMINSW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINUD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MIN, P8V_BUILTIN_VMINSD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MIN, ALTIVEC_BUILTIN_VMINFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_MIN, VSX_BUILTIN_XVMINDP,\n@@ -1792,6 +1858,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_PACK, ALTIVEC_BUILTIN_VPKUWUM,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACK, P8V_BUILTIN_VPKUDUM,\n+    RS6000_BTI_V4SI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACK, P8V_BUILTIN_VPKUDUM,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACK, P8V_BUILTIN_VPKUDUM,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKUWUM, ALTIVEC_BUILTIN_VPKUWUM,\n     RS6000_BTI_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKUWUM, ALTIVEC_BUILTIN_VPKUWUM,\n@@ -1818,6 +1890,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKUWUS, ALTIVEC_BUILTIN_VPKUWUS,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACKS, P8V_BUILTIN_VPKUDUS,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACKS, P8V_BUILTIN_VPKSDSS,\n+    RS6000_BTI_V4SI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKSHSS, ALTIVEC_BUILTIN_VPKSHSS,\n     RS6000_BTI_V16QI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKUHUS, ALTIVEC_BUILTIN_VPKUHUS,\n@@ -1830,6 +1906,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_PACKSU, ALTIVEC_BUILTIN_VPKSWUS,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACKSU, P8V_BUILTIN_VPKSDUS,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKSWUS, ALTIVEC_BUILTIN_VPKSWUS,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKSHUS, ALTIVEC_BUILTIN_VPKSHUS,\n@@ -1850,6 +1928,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_RL, ALTIVEC_BUILTIN_VRLW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_RL, P8V_BUILTIN_VRLD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_RL, P8V_BUILTIN_VRLD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VRLW, ALTIVEC_BUILTIN_VRLW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VRLW, ALTIVEC_BUILTIN_VRLW,\n@@ -1874,6 +1956,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SL, ALTIVEC_BUILTIN_VSLW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SL, P8V_BUILTIN_VSLD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SL, P8V_BUILTIN_VSLD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SQRT, VSX_BUILTIN_XVSQRTDP,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_SQRT, VSX_BUILTIN_XVSQRTSP,\n@@ -2038,6 +2124,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SR, ALTIVEC_BUILTIN_VSRW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SR, P8V_BUILTIN_VSRD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SR, P8V_BUILTIN_VSRD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSRW, ALTIVEC_BUILTIN_VSRW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSRW, ALTIVEC_BUILTIN_VSRW,\n@@ -2062,6 +2152,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SRA, ALTIVEC_BUILTIN_VSRAW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRA, P8V_BUILTIN_VSRAD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRA, P8V_BUILTIN_VSRD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSRAW, ALTIVEC_BUILTIN_VSRAW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSRAW, ALTIVEC_BUILTIN_VSRAW,\n@@ -2202,6 +2296,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUB, ALTIVEC_BUILTIN_VSUBUWM,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUB, P8V_BUILTIN_VSUBUDM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUB, ALTIVEC_BUILTIN_VSUBFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUB, VSX_BUILTIN_XVSUBDP,\n@@ -3333,6 +3439,20 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, P8V_BUILTIN_VCMPEQUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, VSX_BUILTIN_XVCMPEQDP_P,\n@@ -3378,6 +3498,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI },\n   { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n   { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGEFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n   { ALTIVEC_BUILTIN_VEC_VCMPGE_P, VSX_BUILTIN_XVCMPGEDP_P,"}, {"sha": "cb6876051d70063dd12703344ec515e52773c284", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -2226,12 +2226,13 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t}\n     }\n \n-  /* V2DImode, only allow under VSX, which can do V2DI insert/splat/extract.\n-     Altivec doesn't have 64-bit support.  */\n+  /* V2DImode, full mode depends on ISA 2.07 vector mode.  Allow under VSX to\n+     do insert/splat/extract.  Altivec doesn't have 64-bit integer support.  */\n   if (TARGET_VSX)\n     {\n       rs6000_vector_mem[V2DImode] = VECTOR_VSX;\n-      rs6000_vector_unit[V2DImode] = VECTOR_NONE;\n+      rs6000_vector_unit[V2DImode]\n+\t= (TARGET_P8_VECTOR) ? VECTOR_P8_VECTOR : VECTOR_NONE;\n       rs6000_vector_align[V2DImode] = align64;\n     }\n "}, {"sha": "8b8b3427454b0262353762ba613550afef6059e6", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -24,13 +24,13 @@\n \n \n ;; Vector int modes\n-(define_mode_iterator VEC_I [V16QI V8HI V4SI])\n+(define_mode_iterator VEC_I [V16QI V8HI V4SI V2DI])\n \n ;; Vector float modes\n (define_mode_iterator VEC_F [V4SF V2DF])\n \n ;; Vector arithmetic modes\n-(define_mode_iterator VEC_A [V16QI V8HI V4SI V4SF V2DF])\n+(define_mode_iterator VEC_A [V16QI V8HI V4SI V2DI V4SF V2DF])\n \n ;; Vector modes that need alginment via permutes\n (define_mode_iterator VEC_K [V16QI V8HI V4SI V4SF])\n@@ -45,7 +45,7 @@\n (define_mode_iterator VEC_N [V4SI V4SF V2DI V2DF])\n \n ;; Vector comparison modes\n-(define_mode_iterator VEC_C [V16QI V8HI V4SI V4SF V2DF])\n+(define_mode_iterator VEC_C [V16QI V8HI V4SI V2DI V4SF V2DF])\n \n ;; Vector init/extract modes\n (define_mode_iterator VEC_E [V16QI V8HI V4SI V2DI V4SF V2DF])\n@@ -1074,31 +1074,31 @@\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(rotate:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t      (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for arithmetic shift left on each vector element\n (define_expand \"vashl<mode>3\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(ashift:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t      (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for logical shift right on each vector element\n (define_expand \"vlshr<mode>3\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(lshiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t\t(match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for arithmetic shift right on each vector element\n (define_expand \"vashr<mode>3\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(ashiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t\t(match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n-  \"TARGET_ALTIVEC\"\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \f\n ;; Vector reduction expanders for VSX"}, {"sha": "e16222c59933c3e0ac2704c0d799ea2b117fdfec", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5965b52876dded2c1bd7d743ad4b1f47708d41f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a5965b52876dded2c1bd7d743ad4b1f47708d41f", "patch": "@@ -13964,6 +13964,143 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} built-in functions always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n+If the ISA 2.07 additions to the vector/scalar (power8-vector)\n+instruction set is available, the following additional functions are\n+available for both 32-bit and 64-bit targets.  For 64-bit targets, you\n+can use @var{vector long} instead of @var{vector long long},\n+@var{vector bool long} instead of @var{vector bool long long}, and\n+@var{vector unsigned long} instead of @var{vector unsigned long long}.\n+\n+@smallexample\n+vector long long vec_abs (vector long long);\n+\n+vector long long vec_add (vector long long, vector long long);\n+vector unsigned long long vec_add (vector unsigned long long,\n+                                   vector unsigned long long);\n+\n+int vec_all_eq (vector long long, vector long long);\n+int vec_all_ge (vector long long, vector long long);\n+int vec_all_gt (vector long long, vector long long);\n+int vec_all_le (vector long long, vector long long);\n+int vec_all_lt (vector long long, vector long long);\n+int vec_all_ne (vector long long, vector long long);\n+int vec_any_eq (vector long long, vector long long);\n+int vec_any_ge (vector long long, vector long long);\n+int vec_any_gt (vector long long, vector long long);\n+int vec_any_le (vector long long, vector long long);\n+int vec_any_lt (vector long long, vector long long);\n+int vec_any_ne (vector long long, vector long long);\n+\n+vector long long vec_max (vector long long, vector long long);\n+vector unsigned long long vec_max (vector unsigned long long,\n+                                   vector unsigned long long);\n+\n+vector long long vec_min (vector long long, vector long long);\n+vector unsigned long long vec_min (vector unsigned long long,\n+                                   vector unsigned long long);\n+\n+vector int vec_pack (vector long long, vector long long);\n+vector unsigned int vec_pack (vector unsigned long long,\n+                              vector unsigned long long);\n+vector bool int vec_pack (vector bool long long, vector bool long long);\n+\n+vector int vec_packs (vector long long, vector long long);\n+vector unsigned int vec_packs (vector unsigned long long,\n+                               vector unsigned long long);\n+\n+vector unsigned int vec_packsu (vector long long, vector long long);\n+\n+vector long long vec_rl (vector long long,\n+                         vector unsigned long long);\n+vector long long vec_rl (vector unsigned long long,\n+                         vector unsigned long long);\n+\n+vector long long vec_sl (vector long long, vector unsigned long long);\n+vector long long vec_sl (vector unsigned long long,\n+                         vector unsigned long long);\n+\n+vector long long vec_sr (vector long long, vector unsigned long long);\n+vector unsigned long long char vec_sr (vector unsigned long long,\n+                                       vector unsigned long long);\n+\n+vector long long vec_sra (vector long long, vector unsigned long long);\n+vector unsigned long long vec_sra (vector unsigned long long,\n+                                   vector unsigned long long);\n+\n+vector long long vec_sub (vector long long, vector long long);\n+vector unsigned long long vec_sub (vector unsigned long long,\n+                                   vector unsigned long long);\n+\n+vector long long vec_unpackh (vector int);\n+vector unsigned long long vec_unpackh (vector unsigned int);\n+\n+vector long long vec_unpackl (vector int);\n+vector unsigned long long vec_unpackl (vector unsigned int);\n+\n+vector long long vec_vaddudm (vector long long, vector long long);\n+vector long long vec_vaddudm (vector bool long long, vector long long);\n+vector long long vec_vaddudm (vector long long, vector bool long long);\n+vector unsigned long long vec_vaddudm (vector unsigned long long,\n+                                       vector unsigned long long);\n+vector unsigned long long vec_vaddudm (vector bool unsigned long long,\n+                                       vector unsigned long long);\n+vector unsigned long long vec_vaddudm (vector unsigned long long,\n+                                       vector bool unsigned long long);\n+\n+vector long long vec_vmaxsd (vector long long, vector long long);\n+\n+vector unsigned long long vec_vmaxud (vector unsigned long long,\n+                                      unsigned vector long long);\n+\n+vector long long vec_vminsd (vector long long, vector long long);\n+\n+vector unsigned long long vec_vminud (vector long long,\n+                                      vector long long);\n+\n+vector int vec_vpksdss (vector long long, vector long long);\n+vector unsigned int vec_vpksdss (vector long long, vector long long);\n+\n+vector unsigned int vec_vpkudus (vector unsigned long long,\n+                                 vector unsigned long long);\n+\n+vector int vec_vpkudum (vector long long, vector long long);\n+vector unsigned int vec_vpkudum (vector unsigned long long,\n+                                 vector unsigned long long);\n+vector bool int vec_vpkudum (vector bool long long, vector bool long long);\n+\n+vector long long vec_vrld (vector long long, vector unsigned long long);\n+vector unsigned long long vec_vrld (vector unsigned long long,\n+                                    vector unsigned long long);\n+\n+vector long long vec_vsld (vector long long, vector unsigned long long);\n+vector long long vec_vsld (vector unsigned long long,\n+                           vector unsigned long long);\n+\n+vector long long vec_vsrad (vector long long, vector unsigned long long);\n+vector unsigned long long vec_vsrad (vector unsigned long long,\n+                                     vector unsigned long long);\n+\n+vector long long vec_vsrd (vector long long, vector unsigned long long);\n+vector unsigned long long char vec_vsrd (vector unsigned long long,\n+                                         vector unsigned long long);\n+\n+vector long long vec_vsubudm (vector long long, vector long long);\n+vector long long vec_vsubudm (vector bool long long, vector long long);\n+vector long long vec_vsubudm (vector long long, vector bool long long);\n+vector unsigned long long vec_vsubudm (vector unsigned long long,\n+                                       vector unsigned long long);\n+vector unsigned long long vec_vsubudm (vector bool long long,\n+                                       vector unsigned long long);\n+vector unsigned long long vec_vsubudm (vector unsigned long long,\n+                                       vector bool long long);\n+\n+vector long long vec_vupkhsw (vector int);\n+vector unsigned long long vec_vupkhsw (vector unsigned int);\n+\n+vector long long vec_vupklsw (vector int);\n+vector unsigned long long vec_vupklsw (vector int);\n+@end smallexample\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}]}