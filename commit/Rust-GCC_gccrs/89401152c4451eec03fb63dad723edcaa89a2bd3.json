{"sha": "89401152c4451eec03fb63dad723edcaa89a2bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0MDExNTJjNDQ1MWVlYzAzZmI2M2RhZDcyM2VkY2FhODlhMmJkMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-01T23:28:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-01T23:28:19Z"}, "message": "re PR c++/44277 ([C++0x] Add warning to facilitate nullptr conversion.)\n\n/cp\n2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44277\n\t* cvt.c (cp_convert_to_pointer): Warn for zero as null pointer\n\tconstant.\n\t* typeck.c (cp_truthvalue_conversion): Handle pointers and member\n\tfunction pointers under c_inhibit_evaluation_warnings; use\n\tnullptr_node for data member pointers.\n\t(cp_build_binary_op): Tweak, just forward to cp_convert op1,\n\teither a nullptr_node or an integer_zero_node.\n\t(build_ptrmemfunc): Use nullptr_node.\n\t* init.c (build_zero_init_1): Likewise.\n\n/c-family\n2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44277\n\t* c.opt: Add Wzero-as-null-pointer-constant.\n\n/gcc\n2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44277\n\t* doc/invoke.texi: Document -Wzero-as-null-pointer-constant.\n\n/testsuite\n2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44277\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-1.C: New.\n\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C: Likewise.\n\nFrom-SVN: r180750", "tree": {"sha": "fa8cf61a13cc6e8d63e6a7ada7b5a330722a63fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa8cf61a13cc6e8d63e6a7ada7b5a330722a63fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89401152c4451eec03fb63dad723edcaa89a2bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89401152c4451eec03fb63dad723edcaa89a2bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89401152c4451eec03fb63dad723edcaa89a2bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89401152c4451eec03fb63dad723edcaa89a2bd3/comments", "author": null, "committer": null, "parents": [{"sha": "a8b5c4e82758a97a945d0e768112be8c85dbf86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b5c4e82758a97a945d0e768112be8c85dbf86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b5c4e82758a97a945d0e768112be8c85dbf86f"}], "stats": {"total": 323, "additions": 320, "deletions": 3}, "files": [{"sha": "9c75318941369e5f4491b7ae10c6e18566f695ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -1,3 +1,8 @@\n+2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44277\n+\t* doc/invoke.texi: Document -Wzero-as-null-pointer-constant.\n+\n 2011-11-01  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/bpabi.h (BE8_LINK_SPEC): Recognize generic-armv7 tuning."}, {"sha": "472ed282d5e08452ebc904e0dc5dc9b0595cb8d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -1,3 +1,8 @@\n+2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44277\n+\t* c.opt: Add Wzero-as-null-pointer-constant.\n+\n 2011-10-31  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (-fdeduce-init-list): Off by default."}, {"sha": "438b8b003e9bbec9d18d3bd3a8e3dbe4db022b82", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -689,6 +689,10 @@ Wpointer-sign\n C ObjC Var(warn_pointer_sign) Init(-1) Warning\n Warn when a pointer differs in signedness in an assignment\n \n+Wzero-as-null-pointer-constant\n+C++ ObjC++ Var(warn_zero_as_null_pointer_constant) Warning\n+Warn when a literal '0' is used as null pointer\n+\n ansi\n C ObjC C++ ObjC++\n A synonym for -std=c89 (for C) or -std=c++98 (for C++)"}, {"sha": "f7328db2bd19d895e81c3731f0f0dc065d966d33", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -1,3 +1,16 @@\n+2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44277\n+\t* cvt.c (cp_convert_to_pointer): Warn for zero as null pointer\n+\tconstant.\n+\t* typeck.c (cp_truthvalue_conversion): Handle pointers and member\n+\tfunction pointers under c_inhibit_evaluation_warnings; use\n+\tnullptr_node for data member pointers.\n+\t(cp_build_binary_op): Tweak, just forward to cp_convert op1,\n+\teither a nullptr_node or an integer_zero_node.\n+\t(build_ptrmemfunc): Use nullptr_node.\n+\t* init.c (build_zero_init_1): Likewise.\n+\n 2011-11-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50500"}, {"sha": "8570e3d45028fd0a47e91521d21bc8a7bcb2b99a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -198,6 +198,11 @@ cp_convert_to_pointer (tree type, tree expr)\n \n   if (null_ptr_cst_p (expr))\n     {\n+      if (c_inhibit_evaluation_warnings == 0\n+\t  && !NULLPTR_TYPE_P (TREE_TYPE (expr)))\n+\twarning (OPT_Wzero_as_null_pointer_constant,\n+\t\t \"zero as null pointer constant\");\n+\n       if (TYPE_PTRMEMFUNC_P (type))\n \treturn build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr, 0,\n \t\t\t\t /*c_cast_p=*/false, tf_warning_or_error);"}, {"sha": "6b57eb60a6543eb852bebd97658ee707acbaa3a9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -176,6 +176,8 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n        items with static storage duration that are not otherwise\n        initialized are initialized to zero.  */\n     ;\n+  else if (TYPE_PTR_P (type) || TYPE_PTR_TO_MEMBER_P (type))\n+    init = convert (type, nullptr_node);\n   else if (SCALAR_TYPE_P (type))\n     init = convert (type, integer_zero_node);\n   else if (CLASS_TYPE_P (type))"}, {"sha": "8d70df5eb75f158c42b7ecf9018d12417dbac5f0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -4058,7 +4058,7 @@ cp_build_binary_op (location_t location,\n      \t  else \n \t    {\n \t      op0 = build_ptrmemfunc_access_expr (op0, pfn_identifier);\n-\t      op1 = cp_convert (TREE_TYPE (op0), integer_zero_node); \n+\t      op1 = cp_convert (TREE_TYPE (op0), op1);\n \t    }\n \t  result_type = TREE_TYPE (op0);\n \t}\n@@ -4668,7 +4668,17 @@ cp_truthvalue_conversion (tree expr)\n   tree type = TREE_TYPE (expr);\n   if (TYPE_PTRMEM_P (type))\n     return build_binary_op (EXPR_LOCATION (expr),\n-\t\t\t    NE_EXPR, expr, integer_zero_node, 1);\n+\t\t\t    NE_EXPR, expr, nullptr_node, 1);\n+  else if (TYPE_PTR_P (type) || TYPE_PTRMEMFUNC_P (type))\n+    {\n+      /* With -Wzero-as-null-pointer-constant do not warn for an\n+\t 'if (p)' or a 'while (!p)', where p is a pointer.  */\n+      tree ret;\n+      ++c_inhibit_evaluation_warnings;\n+      ret = c_common_truthvalue_conversion (input_location, expr);\n+      --c_inhibit_evaluation_warnings;\n+      return ret;\n+    }\n   else\n     return c_common_truthvalue_conversion (input_location, expr);\n }\n@@ -7148,7 +7158,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n   /* Handle null pointer to member function conversions.  */\n   if (null_ptr_cst_p (pfn))\n     {\n-      pfn = build_c_cast (input_location, type, integer_zero_node);\n+      pfn = build_c_cast (input_location, type, nullptr_node);\n       return build_ptrmemfunc1 (to_type,\n \t\t\t\tinteger_zero_node,\n \t\t\t\tpfn);"}, {"sha": "b68f607912e22d173d0002ec94ea8473536b95ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -4142,6 +4142,12 @@ unsigned integers are disabled by default in C++ unless\n Do not warn for conversions between @code{NULL} and non-pointer\n types. @option{-Wconversion-null} is enabled by default.\n \n+@item -Wzero-as-null-pointer-constant @r{(C++ and Objective-C++ only)}\n+@opindex Wzero-as-null-pointer-constant\n+@opindex Wno-zero-as-null-pointer-constant\n+Warn when a literal '0' is used as null pointer constant.  This can\n+be useful to facilitate the conversion to @code{nullptr} in C++11.\n+\n @item -Wempty-body\n @opindex Wempty-body\n @opindex Wno-empty-body"}, {"sha": "bdbdb8e7b1988e73a96e25adf87bf3c9ecbe7ce6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -1,3 +1,9 @@\n+2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44277\n+\t* g++.dg/warn/Wzero-as-null-pointer-constant-1.C: New.\n+\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C: Likewise.\n+\n 2011-11-01  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/50908"}, {"sha": "aad273792ac9245768724a602f10c88c1d783b36", "filename": "gcc/testsuite/g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -0,0 +1,161 @@\n+// { dg-options \"-std=c++0x -Wzero-as-null-pointer-constant\" }\n+\n+struct A;\n+\n+typedef int (A::*pointmemfun) (int);\n+typedef int (A::*pointdmem);\n+typedef int (*pointfun) (int);\n+\n+pointmemfun pmfs;\n+pointdmem   pdms;\n+pointfun    pfs;\n+int*        ps;\n+\n+void f()\n+{\n+  pointmemfun pmf(0);   // { dg-warning \"zero as null pointer\" }\n+  pointdmem   pdm(0);   // { dg-warning \"zero as null pointer\" }\n+  pointfun    pf(0);    // { dg-warning \"zero as null pointer\" }\n+  int*        p(0);     // { dg-warning \"zero as null pointer\" }\n+\n+  pointmemfun pmfn(nullptr);\n+  pointdmem   pdmn(nullptr);\n+  pointfun    pfn(nullptr);\n+  int*        pn(nullptr);\n+\n+  pmf = 0;              // { dg-warning \"zero as null pointer\" }\n+\n+  pdm = 0;              // { dg-warning \"zero as null pointer\" }\n+\n+  pf = 0;               // { dg-warning \"zero as null pointer\" }\n+\n+  p = 0;                // { dg-warning \"zero as null pointer\" }\n+\n+  pmf = nullptr;\n+\n+  pdm = nullptr;\n+\n+  pf = nullptr;\n+\n+  p = nullptr;\n+\n+  if (pmf)\n+    ;\n+  \n+  if (pdm)\n+    ;\n+\n+  if (pf)\n+    ;\n+\n+  if (p)\n+    ;\n+\n+  if (!pmf)\n+    ;\n+  \n+  if (!pdm)\n+    ;\n+\n+  if (!pf)\n+    ;\n+\n+  if (!p)\n+    ;\n+\n+  if (pmf == 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (pdm == 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pf == 0)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (p == 0)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == pmf)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (0 == pdm)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == pf)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == p)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pmf != 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (pdm != 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pf != 0)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (p != 0)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != pmf)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (0 != pdm)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != pf)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != p)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pmf == nullptr)\n+    ;\n+\n+  if (pdm == nullptr)\n+    ;\n+\n+  if (pf == nullptr)\n+    ;\n+\n+  if (p == nullptr)\n+    ;\n+\n+  if (nullptr == pmf)\n+    ;\n+\n+  if (nullptr == pdm)\n+    ;\n+\n+  if (nullptr == pf)\n+    ;\n+\n+  if (nullptr == p)\n+    ;\n+\n+  if (pmf != nullptr)\n+    ;\n+\n+  if (pdm != nullptr)\n+    ;\n+\n+  if (pf != nullptr)\n+    ;\n+\n+  if (p != nullptr)\n+    ;\n+\n+  if (nullptr != pmf)\n+    ;\n+\n+  if (nullptr != pdm)\n+    ;\n+\n+  if (nullptr != pf)\n+    ;\n+\n+  if (nullptr != p)\n+    ;\n+}"}, {"sha": "d0f62b212ec5de6738c6de0e91120caef16f54d9", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-1.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89401152c4451eec03fb63dad723edcaa89a2bd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C?ref=89401152c4451eec03fb63dad723edcaa89a2bd3", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-Wzero-as-null-pointer-constant\" }\n+\n+struct A;\n+\n+typedef int (A::*pointmemfun) (int);\n+typedef int (A::*pointdmem);\n+typedef int (*pointfun) (int);\n+\n+pointmemfun pmfs;\n+pointdmem   pdms;\n+pointfun    pfs;     \n+int*        ps;\n+\n+void f()\n+{\n+  pointmemfun pmf(0);   // { dg-warning \"zero as null pointer\" }\n+  pointdmem   pdm(0);   // { dg-warning \"zero as null pointer\" }\n+  pointfun    pf(0);    // { dg-warning \"zero as null pointer\" }\n+  int*        p(0);     // { dg-warning \"zero as null pointer\" }\n+\n+  pmf = 0;              // { dg-warning \"zero as null pointer\" }\n+\n+  pdm = 0;              // { dg-warning \"zero as null pointer\" }\n+\n+  pf = 0;               // { dg-warning \"zero as null pointer\" }\n+\n+  p = 0;                // { dg-warning \"zero as null pointer\" }\n+\n+  if (pmf)\n+    ;\n+  \n+  if (pdm)\n+    ;\n+\n+  if (pf)\n+    ;\n+\n+  if (p)\n+    ;\n+\n+  if (!pmf)\n+    ;\n+  \n+  if (!pdm)\n+    ;\n+\n+  if (!pf)\n+    ;\n+\n+  if (!p)\n+    ;\n+\n+  if (pmf == 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (pdm == 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pf == 0)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (p == 0)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == pmf)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (0 == pdm)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == pf)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 == p)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pmf != 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (pdm != 0)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (pf != 0)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (p != 0)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != pmf)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+  \n+  if (0 != pdm)         // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != pf)          // { dg-warning \"zero as null pointer\" }\n+    ;\n+\n+  if (0 != p)           // { dg-warning \"zero as null pointer\" }\n+    ;\n+}"}]}