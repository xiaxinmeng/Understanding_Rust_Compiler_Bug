{"sha": "36fe1cdc9534c36c02803ce97557130354d2b2a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmZTFjZGM5NTM0YzM2YzAyODAzY2U5NzU1NzEzMDM1NGQyYjJhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-22T10:50:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-22T10:51:22Z"}, "message": "match.pd: Replace incorrect simplifications into copysign [PR90248]\n\nIn the PR Andrew said he has implemented a simplification that has been\nadded to LLVM, but that actually is not true, what is in there are\nX * (X cmp 0.0 ? +-1.0 : -+1.0) simplifications into +-abs(X)\nbut what has been added into GCC are (X cmp 0.0 ? +-1.0 : -+1.0)\nsimplifications into copysign(1, +-X) and then\nX * copysign (1, +-X) into +-abs (X).\nThe problem is with the (X cmp 0.0 ? +-1.0 : -+1.0) simplifications,\nthey don't work correctly when X is zero.\nE.g.\n(X > 0.0 ? 1.0 : -1.0)\nis -1.0 when X is either -0.0 or 0.0, but copysign will make it return\n1.0 for 0.0 and -1.0 only for -0.0.\n(X >= 0.0 ? 1.0 : -1.0)\nis 1.0 when X is either -0.0 or 0.0, but copysign will make it return\nstill 1.0 for 0.0 and -1.0 for -0.0.\nThe simplifications were guarded on !HONOR_SIGNED_ZEROS, but as discussed in\nthe PR, that option doesn't mean that -0.0 will not ever appear as operand\nof some operation, it is hard to guarantee that without compiler adding\ncanonicalizations of -0.0 to 0.0 after most of the operations and thus\nmaking it very slow, but that the user asserts that he doesn't care if the result\nof operations will be 0.0 or -0.0.  Not to mention that some of the\ntransformations are incorrect even for positive 0.0.\n\nSo, instead of those simplifications this patch recognizes patterns where\nthose ?: expressions are multiplied by X, directly into +-abs.\nThat works fine even for 0.0 and -0.0 (as long as we don't care about\nwhether the result is exactly 0.0 or -0.0 in those cases), because\nwhether the result of copysign is -1.0 or 1.0 doesn't matter when it is\nmultiplied by 0.0 or -0.0.\n\nAs a follow-up, maybe we should add the simplification mentioned in the PR,\nin particular doing copysign by hand through\nVIEW_CONVERT_EXPR <int, float_X> < 0 ? -float_constant : float_constant\ninto copysign (float_constant, float_X).  But I think that would need to be\ndone in phiopt.\n\n2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/90248\n\t* match.pd (X cmp 0.0 ? 1.0 : -1.0 -> copysign(1, +-X),\n\tX cmp 0.0 ? -1.0 : +1.0 -> copysign(1, -+X)): Remove\n\tsimplifications.\n\t(X * (X cmp 0.0 ? 1.0 : -1.0) -> +-abs(X),\n\tX * (X cmp 0.0 ? -1.0 : 1.0) -> +-abs(X)): New simplifications.\n\n\t* gcc.dg/tree-ssa/copy-sign-1.c: Don't expect any copysign\n\tbuiltins.\n\t* gcc.dg/pr90248.c: New test.", "tree": {"sha": "f1b9475408940c2922bb3d9252e236181e7fb495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b9475408940c2922bb3d9252e236181e7fb495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36fe1cdc9534c36c02803ce97557130354d2b2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fe1cdc9534c36c02803ce97557130354d2b2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fe1cdc9534c36c02803ce97557130354d2b2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fe1cdc9534c36c02803ce97557130354d2b2a0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e287a2a11d7958e5d9f7c6172e59cc83495e393a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287a2a11d7958e5d9f7c6172e59cc83495e393a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e287a2a11d7958e5d9f7c6172e59cc83495e393a"}], "stats": {"total": 121, "additions": 90, "deletions": 31}, "files": [{"sha": "17c35ee470eb0bc22ec683c1a02d9dbc714d924a", "filename": "gcc/match.pd", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=36fe1cdc9534c36c02803ce97557130354d2b2a0", "patch": "@@ -253,36 +253,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for cmp (gt ge lt le)\n      outp (convert convert negate negate)\n      outn (negate negate convert convert)\n- /* Transform (X > 0.0 ? 1.0 : -1.0) into copysign(1, X). */\n- /* Transform (X >= 0.0 ? 1.0 : -1.0) into copysign(1, X). */\n- /* Transform (X < 0.0 ? 1.0 : -1.0) into copysign(1,-X). */\n- /* Transform (X <= 0.0 ? 1.0 : -1.0) into copysign(1,-X). */\n- (simplify\n-  (cond (cmp @0 real_zerop) real_onep@1 real_minus_onep)\n-  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type)\n-       && types_match (type, TREE_TYPE (@0)))\n-   (switch\n-    (if (types_match (type, float_type_node))\n-     (BUILT_IN_COPYSIGNF @1 (outp @0)))\n-    (if (types_match (type, double_type_node))\n-     (BUILT_IN_COPYSIGN @1 (outp @0)))\n-    (if (types_match (type, long_double_type_node))\n-     (BUILT_IN_COPYSIGNL @1 (outp @0))))))\n- /* Transform (X > 0.0 ? -1.0 : 1.0) into copysign(1,-X). */\n- /* Transform (X >= 0.0 ? -1.0 : 1.0) into copysign(1,-X). */\n- /* Transform (X < 0.0 ? -1.0 : 1.0) into copysign(1,X). */\n- /* Transform (X <= 0.0 ? -1.0 : 1.0) into copysign(1,X). */\n- (simplify\n-  (cond (cmp @0 real_zerop) real_minus_onep real_onep@1)\n-  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type)\n-       && types_match (type, TREE_TYPE (@0)))\n-   (switch\n-    (if (types_match (type, float_type_node))\n-     (BUILT_IN_COPYSIGNF @1 (outn @0)))\n-    (if (types_match (type, double_type_node))\n-     (BUILT_IN_COPYSIGN @1 (outn @0)))\n-    (if (types_match (type, long_double_type_node))\n-     (BUILT_IN_COPYSIGNL @1 (outn @0)))))))\n+ /* Transform X * (X > 0.0 ? 1.0 : -1.0) into abs(X). */\n+ /* Transform X * (X >= 0.0 ? 1.0 : -1.0) into abs(X). */\n+ /* Transform X * (X < 0.0 ? 1.0 : -1.0) into -abs(X). */\n+ /* Transform X * (X <= 0.0 ? 1.0 : -1.0) into -abs(X). */\n+ (simplify\n+  (mult:c @0 (cond (cmp @0 real_zerop) real_onep@1 real_minus_onep))\n+  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))\n+   (outp (abs @0))))\n+ /* Transform X * (X > 0.0 ? -1.0 : 1.0) into -abs(X). */\n+ /* Transform X * (X >= 0.0 ? -1.0 : 1.0) into -abs(X). */\n+ /* Transform X * (X < 0.0 ? -1.0 : 1.0) into abs(X). */\n+ /* Transform X * (X <= 0.0 ? -1.0 : 1.0) into abs(X). */\n+ (simplify\n+  (mult:c @0 (cond (cmp @0 real_zerop) real_minus_onep real_onep@1))\n+  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))\n+   (outn (abs @0)))))\n \n /* Transform X * copysign (1.0, X) into abs(X). */\n (simplify"}, {"sha": "2c89e1e4a4b4592966814ff8bafc05047ba06164", "filename": "gcc/testsuite/gcc.dg/pr90248.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90248.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90248.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90248.c?ref=36fe1cdc9534c36c02803ce97557130354d2b2a0", "patch": "@@ -0,0 +1,73 @@\n+/* PR tree-optimization/90248 */\n+/* { dg-do run } */\n+/* { dg-options \"-Ofast\" } */\n+\n+volatile float b1 = -1.f;\n+volatile float b2 = 0.f;\n+\n+__attribute__((noipa)) float\n+f1 (float x)\n+{\n+  return x > 0 ? 1.f : -1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f2 (float x)\n+{\n+  return x >= 0 ? 1.f : -1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f3 (float x)\n+{\n+  return x < 0 ? 1.f : -1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f4 (float x)\n+{\n+  return x <= 0 ? 1.f : -1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f5 (float x)\n+{\n+  return x > 0 ? -1.f : 1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f6 (float x)\n+{\n+  return x >= 0 ? -1.f : 1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f7 (float x)\n+{\n+  return x < 0 ? -1.f : 1.f;\n+}\n+\n+__attribute__((noipa)) float\n+f8 (float x)\n+{\n+  return x <= 0 ? -1.f : 1.f;\n+}\n+\n+int\n+main ()\n+{\n+  float a = 0.f;\n+  float b = b1 * b2;\n+  float c = 2.f;\n+  float d = -2.f;\n+  if (f1 (a) != -1.f || f1 (b) != -1.f || f1 (c) != 1.f || f1 (d) != -1.f\n+      || f2 (a) != 1.f || f2 (b) != 1.f || f2 (c) != 1.f || f2 (d) != -1.f\n+      || f3 (a) != -1.f || f3 (b) != -1.f || f3 (c) != -1.f || f3 (d) != 1.f\n+      || f4 (a) != 1.f || f4 (b) != 1.f || f4 (c) != -1.f || f4 (d) != 1.f\n+      || f5 (a) != 1.f || f5 (b) != 1.f || f5 (c) != -1.f || f5 (d) != 1.f\n+      || f6 (a) != -1.f || f6 (b) != -1.f || f6 (c) != -1.f || f6 (d) != 1.f\n+      || f7 (a) != 1.f || f7 (b) != 1.f || f7 (c) != 1.f || f7 (d) != -1.f\n+      || f8 (a) != -1.f || f8 (b) != -1.f || f8 (c) != 1.f || f8 (d) != -1.f)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "617a8411303778d56f397cee50c69c337f207fa8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-sign-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-sign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fe1cdc9534c36c02803ce97557130354d2b2a0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-sign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-sign-1.c?ref=36fe1cdc9534c36c02803ce97557130354d2b2a0", "patch": "@@ -33,4 +33,4 @@ float i1(float x)\n {\n   return (x <= 0.f ? 1.f : -1.f);\n }\n-/* { dg-final { scan-tree-dump-times \"copysign\" 8 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"copysign\" \"gimple\"} } */"}]}