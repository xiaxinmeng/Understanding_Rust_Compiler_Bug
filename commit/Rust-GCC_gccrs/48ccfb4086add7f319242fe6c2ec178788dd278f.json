{"sha": "48ccfb4086add7f319242fe6c2ec178788dd278f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjY2ZiNDA4NmFkZDdmMzE5MjQyZmU2YzJlYzE3ODc4OGRkMjc4Zg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2001-07-13T19:13:55Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2001-07-13T19:13:55Z"}, "message": "avr.md (strlenhi): PARALLEL keyword removed.\n\n\t* config/avr/avr.md (strlenhi): PARALLEL keyword removed.\n\t* config/avr/avr.c (legitimate_address_p): Return value changed\n\tfrom letter to register classes. For better debugging.\n\nFrom-SVN: r43992", "tree": {"sha": "11e866ad6f4b905974579d4a1ec4f4241d46285b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e866ad6f4b905974579d4a1ec4f4241d46285b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48ccfb4086add7f319242fe6c2ec178788dd278f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ccfb4086add7f319242fe6c2ec178788dd278f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ccfb4086add7f319242fe6c2ec178788dd278f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ccfb4086add7f319242fe6c2ec178788dd278f/comments", "author": null, "committer": null, "parents": [{"sha": "5a4aeb03fa1133349f34dc1132cd5c231d2736e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4aeb03fa1133349f34dc1132cd5c231d2736e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4aeb03fa1133349f34dc1132cd5c231d2736e1"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "8be501f37949783d08a77e56b7d8e3a8545eba49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48ccfb4086add7f319242fe6c2ec178788dd278f", "patch": "@@ -1,3 +1,9 @@\n+Fri Jul 13 23:04:00 2001  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.md (strlenhi): PARALLEL keyword removed.\n+\t* config/avr/avr.c (legitimate_address_p): Return value changed\n+\tfrom letter to register classes. For better debugging.\n+\n 2001-07-13  Kazu Hirata  <kazu@hxi.com>\n \n \t* jump.c (reversed_comparison_code_parts): Fix comment typos."}, {"sha": "605360a601b597299135a4d14dc377a0bbf5aa3e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=48ccfb4086add7f319242fe6c2ec178788dd278f", "patch": "@@ -815,13 +815,15 @@ avr_output_function_epilogue (file, size)\n /* Return nonzero if X (an RTX) is a legitimate memory address on the target\n    machine for a memory operand of mode MODE.  */\n \n+int\n int\n legitimate_address_p (mode, x, strict)\n      enum machine_mode mode;\n      rtx x;\n      int strict;\n {\n-  int r = 0;\n+  enum reg_class r = NO_REGS;\n+  \n   if (TARGET_ALL_DEBUG)\n     {\n       fprintf (stderr, \"mode: (%s) %s %s %s %s:\",\n@@ -843,9 +845,9 @@ legitimate_address_p (mode, x, strict)\n     }\n   if (REG_P (x) && (strict ? REG_OK_FOR_BASE_STRICT_P (x)\n                     : REG_OK_FOR_BASE_NOSTRICT_P (x)))\n-    r = 'R';\n+    r = POINTER_REGS;\n   else if (CONSTANT_ADDRESS_P (x))\n-    r = 'S';\n+    r = ALL_REGS;\n   else if (GET_CODE (x) == PLUS\n            && REG_P (XEXP (x, 0))\n \t   && GET_CODE (XEXP (x, 1)) == CONST_INT\n@@ -857,26 +859,26 @@ legitimate_address_p (mode, x, strict)\n \t  if (! strict\n \t      || REGNO (XEXP (x,0)) == REG_Y\n \t      || REGNO (XEXP (x,0)) == REG_Z)\n-\t      r = 'Q';\n+\t    r = BASE_POINTER_REGS;\n \t  if (XEXP (x,0) == frame_pointer_rtx\n \t      || XEXP (x,0) == arg_pointer_rtx)\n-\t    r = 'Q';\n+\t    r = BASE_POINTER_REGS;\n \t}\n       else if (frame_pointer_needed && XEXP (x,0) == frame_pointer_rtx)\n-\tr = 'U';\n+\tr = POINTER_Y_REGS;\n     }\n   else if ((GET_CODE (x) == PRE_DEC || GET_CODE (x) == POST_INC)\n            && REG_P (XEXP (x, 0))\n            && (strict ? REG_OK_FOR_BASE_STRICT_P (XEXP (x, 0))\n                : REG_OK_FOR_BASE_NOSTRICT_P (XEXP (x, 0))))\n     {\n-      r = 'T';\n+      r = POINTER_REGS;\n     }\n   if (TARGET_ALL_DEBUG)\n     {\n       fprintf (stderr, \"   ret = %c\\n\", r);\n     }\n-  return r;\n+  return r == NO_REGS ? 0 : (int)r;\n }\n \n /* Attempts to replace X with a valid"}, {"sha": "a62f679ad2e02ea791e5d326d800046eba0d8f0b", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ccfb4086add7f319242fe6c2ec178788dd278f/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=48ccfb4086add7f319242fe6c2ec178788dd278f", "patch": "@@ -224,7 +224,7 @@\n {\n    /* One of the ops has to be in a register */\n   if (!register_operand(operand0, HImode)\n-      && !(register_operand(operand1, HImode)  || const0_rtx == operands[1]))\n+      && !(register_operand(operand1, HImode) || const0_rtx == operands[1]))\n     {\n       operands[1] = copy_to_mode_reg(HImode, operand1);\n     }\n@@ -475,11 +475,10 @@\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_expand \"strlenhi\"\n-    [(parallel\n-      [(set (match_dup 4)\n-\t    (unspec:HI [(match_operand:BLK 1 \"memory_operand\" \"\")\n-\t\t\t(match_operand:QI 2 \"const_int_operand\" \"\")\n-\t\t\t(match_operand:HI 3 \"immediate_operand\" \"\")] 0))])\n+    [(set (match_dup 4)\n+\t  (unspec:HI [(match_operand:BLK 1 \"memory_operand\" \"\")\n+\t\t      (match_operand:QI 2 \"const_int_operand\" \"\")\n+\t\t      (match_operand:HI 3 \"immediate_operand\" \"\")] 0))\n      (set (match_dup 4) (plus:HI (match_dup 4)\n \t\t\t\t (const_int -1)))\n      (set (match_operand:HI 0 \"register_operand\" \"\")"}]}