{"sha": "43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmOWExM2NlZTM0YmJmM2YwMDc0NjlkNGRkM2MzYTY3ZTZkOGU2ZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-19T22:37:49Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-19T22:37:49Z"}, "message": "re PR preprocessor/60975 (-Wvariadic-macros does not print warning)\n\ngcc/ChangeLog:\n\n2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/60975\n\tPR c/53063\n\t* doc/options.texi (CPP): Document it.\n\t* doc/invoke.texi (Wvariadic-macros): Fix documentation.\n\t* optc-gen.awk: Handle CPP.\n\t* opth-gen.awk: Likewise.\n\ngcc/c-family/ChangeLog:\n\n2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/60975\n\tPR c/53063\n\t* c.opt (Wvariadic-macros): Use CPP and LangEnabledBy.\n\t* c-opts.c (c_common_handle_option): Call cpp_handle_option_auto.\n\t(c_common_post_options): Call init_global_opts_from_cpp.\n\t(sanitize_cpp_opts): Do not handle Wvariadic-macros here.\n\ngcc/testsuite/ChangeLog:\n\n2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/60975\n\tPR c/53063\n\t* gcc.dg/cpp/Wvariadic-1p.c: New test.\n\nFrom-SVN: r214200", "tree": {"sha": "75764dc68d3b47da1315519f474d62d5a2262f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75764dc68d3b47da1315519f474d62d5a2262f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/comments", "author": null, "committer": null, "parents": [{"sha": "cd0059f55fc3e14c2b24a4db084064e0da3295a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0059f55fc3e14c2b24a4db084064e0da3295a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0059f55fc3e14c2b24a4db084064e0da3295a8"}], "stats": {"total": 114, "additions": 104, "deletions": 10}, "files": [{"sha": "91c4a1fda9578096faf5b94cb397c7a2f8a45d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -1,3 +1,12 @@\n+2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/60975\n+\tPR c/53063\n+\t* doc/options.texi (CPP): Document it.\n+\t* doc/invoke.texi (Wvariadic-macros): Fix documentation.\n+\t* optc-gen.awk: Handle CPP.\n+\t* opth-gen.awk: Likewise.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (unlink_insn_chain): Strengthen return type from rtx to"}, {"sha": "34a91c8a74c0d0edc47f1274987467c9b4938b44", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -1,3 +1,12 @@\n+2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/60975\n+\tPR c/53063\n+\t* c.opt (Wvariadic-macros): Use CPP and LangEnabledBy.\n+\t* c-opts.c (c_common_handle_option): Call cpp_handle_option_auto.\n+\t(c_common_post_options): Call init_global_opts_from_cpp.\n+\t(sanitize_cpp_opts): Do not handle Wvariadic-macros here.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/62153"}, {"sha": "2b423e2174b24ee4697f4b3b7cfd7f0e9c9ae246", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -794,7 +794,8 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     default:\n       gcc_unreachable ();\n     }\n-  \n+\n+  cpp_handle_option_auto (&global_options, scode, cpp_opts);\n   return result;\n }\n \n@@ -1030,6 +1031,7 @@ c_common_post_options (const char **pfilename)\n   cb->file_change = cb_file_change;\n   cb->dir_change = cb_dir_change;\n   cpp_post_options (parse_in);\n+  init_global_opts_from_cpp (&global_options, cpp_get_options (parse_in));\n \n   input_location = UNKNOWN_LOCATION;\n \n@@ -1310,11 +1312,6 @@ sanitize_cpp_opts (void)\n \t\t      && (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n   cpp_opts->cpp_warn_long_long = warn_long_long;\n \n-  /* Similarly with -Wno-variadic-macros.  No check for c99 here, since\n-     this also turns off warnings about GCCs extension.  */\n-  cpp_opts->warn_variadic_macros\n-    = cpp_warn_variadic_macros && (pedantic || warn_traditional);\n-\n   /* If we're generating preprocessor output, emit current directory\n      if explicitly requested or if debugging information is enabled.\n      ??? Maybe we should only do it for debugging formats that"}, {"sha": "f33a42578f80cac6893a7778dca1200566fcb3a8", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -838,9 +838,13 @@ C ObjC C++ ObjC++ Var(warn_unused_result) Init(1) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value\n \n Wvariadic-macros\n-C ObjC C++ ObjC++ Var(cpp_warn_variadic_macros) Init(1) Warning\n+C ObjC C++ ObjC++ CPP(warn_variadic_macros) Var(cpp_warn_variadic_macros) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn about using variadic macros\n \n+Wvariadic-macros\n+LangEnabledBy(C ObjC C++ ObjC++,Wtraditional)\n+;\n+\n Wvarargs\n C ObjC C++ ObjC++ Warning Var(warn_varargs) Init(1)\n Warn about questionable usage of the macros used to retrieve variable arguments"}, {"sha": "f8499bc046a68ef34871d874aadfe0bd3fb6d398", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -5127,9 +5127,10 @@ modes.  To inhibit the warning messages, use @option{-Wno-long-long}.\n @item -Wvariadic-macros\n @opindex Wvariadic-macros\n @opindex Wno-variadic-macros\n-Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU\n-alternate syntax when in pedantic ISO C99 mode.  This is default.\n-To inhibit the warning messages, use @option{-Wno-variadic-macros}.\n+Warn if variadic macros are used in ISO C90 mode, or if the GNU\n+alternate syntax is used in ISO C99 mode.  This is enabled by either\n+@option{-Wpedantic} or @option{-Wtraditional}.  To inhibit the warning\n+messages, use @option{-Wno-variadic-macros}.\n \n @item -Wvarargs\n @opindex Wvarargs"}, {"sha": "ac4452e6ff464e18d73d353052692c7d286b9cab", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -482,4 +482,9 @@ The option is omitted from the producer string written by\n @item PchIgnore\n Even if this is a target option, this option will not be recorded / compared\n to determine if a precompiled header file matches.\n+\n+@item CPP(@var{var})\n+The state of this option should be kept in sync with the preprocessor\n+option @var{var}.\n+\n @end table"}, {"sha": "ef80c99b6dc3eda189ac05d420453384d6505f84", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -480,4 +480,55 @@ for (i = 0; i < n_langs; i++) {\n     print \"}               \"\n }\n \n+#Handle CPP()\n+print \"\\n\"\n+print \"#include \" quote \"cpplib.h\" quote;\n+print \"void\"\n+print \"cpp_handle_option_auto (const struct gcc_options * opts,                   \"\n+print \"                        size_t scode, struct cpp_options * cpp_opts)\"    \n+print \"{                                                                     \"\n+print \"  enum opt_code code = (enum opt_code) scode;                         \"\n+print \"                                                                      \"\n+print \"  switch (code)                                                       \"\n+print \"    {                                                                 \"\n+for (i = 0; i < n_opts; i++) {\n+    # With identical flags, pick only the last one.  The\n+    # earlier loop ensured that it has all flags merged,\n+    # and a nonempty help text if one of the texts was nonempty.\n+    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+        i++;\n+    }\n+\n+    cpp_option = nth_arg(0, opt_args(\"CPP\", flags[i]));\n+    opt_var_name = var_name(flags[i]);\n+    if (cpp_option != \"\" && opt_var_name != \"\") {\n+        print \"    case \" opt_enum(opts[i]) \":\"\n+        print \"      cpp_opts->\" cpp_option \" = opts->x_\" opt_var_name \";\"\n+        print \"      break;\"\n+    }\n }\n+print \"    default:    \"\n+print \"      break;    \"\n+print \"    }           \"\n+print \"}\\n\"\n+print \"void\"\n+print \"init_global_opts_from_cpp(struct gcc_options * opts,                   \"\n+print \"                         const struct cpp_options * cpp_opts)\"    \n+print \"{                                                                     \"\n+for (i = 0; i < n_opts; i++) {\n+    # With identical flags, pick only the last one.  The\n+    # earlier loop ensured that it has all flags merged,\n+    # and a nonempty help text if one of the texts was nonempty.\n+    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+        i++;\n+    }\n+    cpp_option = nth_arg(0, opt_args(\"CPP\", flags[i]));\n+    opt_var_name = var_name(flags[i]);\n+    if (cpp_option != \"\" && opt_var_name != \"\") {\n+        print \"  opts->x_\" opt_var_name \" = cpp_opts->\" cpp_option \";\"\n+    }\n+}\n+print \"}               \"\n+\n+}\n+"}, {"sha": "4e8f21f406be7014c2099eaa1b49d3358921cb66", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -315,6 +315,10 @@ for (i = 0; i < n_langs; i++) {\n     print \"                           const struct cl_option_handlers *handlers, \"\n     print \"                           diagnostic_context *dc);                   \"\n }\n+print \"void cpp_handle_option_auto (const struct gcc_options * opts, size_t scode,\"\n+print \"                             struct cpp_options * cpp_opts);\"\n+print \"void init_global_opts_from_cpp(struct gcc_options * opts,      \"\n+print \"                               const struct cpp_options * cpp_opts);\"    \n print \"#endif\";\n print \"#endif\";\n print \"\";"}, {"sha": "94f04227a9f94a645c8e294167fdf5230b1f0d5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -1,3 +1,9 @@\n+2014-08-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/60975\n+\tPR c/53063\n+\t* gcc.dg/cpp/Wvariadic-1p.c: New test.\n+\n 2014-08-19  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* lib/target-supports.exp "}, {"sha": "84a71082e62f986f42caee548415e94339fa9cf6", "filename": "gcc/testsuite/gcc.dg/cpp/Wvariadic-1p.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1p.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1p.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1p.c?ref=43f9a13cee34bbf3f007469d4dd3c3a67e6d8e6d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 \" } */\n+#pragma GCC diagnostic error \"-Wpedantic\"\n+\n+#define f(x,...)\t/* { dg-error \"variadic\" } */\n+#define g(x,y...)\t/* { dg-error \"variadic\" } */\n+int not_empty;\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */"}]}