{"sha": "95b02d7e3aa3830b46325a8c6b090d3ae682e3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTViMDJkN2UzYWEzODMwYjQ2MzI1YThjNmIwOTBkM2FlNjgyZTNlYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2001-07-26T05:04:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2001-07-26T05:04:48Z"}, "message": "configure.target (cpu_include_dir): Set to `config/cpu/mips' for mips.\n\n2001-07-25  H.J. Lu <hjl@gnu.org>\n\n\t* configure.target (cpu_include_dir): Set to `config/cpu/mips'\n\tfor mips.\n\n\t* config/cpu/mips/bits/atomicity.h: New.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r44374.2", "tree": {"sha": "0eebcbabb2e30abe53997dfbc54b2ffff1f332de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eebcbabb2e30abe53997dfbc54b2ffff1f332de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea/comments", "author": null, "committer": null, "parents": [{"sha": "17eee61c6decd3f7797f760f510b78ccf0c9e5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17eee61c6decd3f7797f760f510b78ccf0c9e5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17eee61c6decd3f7797f760f510b78ccf0c9e5cc"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "d3e7743ef7b944547cf123d88e5e8ecc06ed0605", "filename": "libstdc++-v3/config/cpu/mips/bits/atomicity.h", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b02d7e3aa3830b46325a8c6b090d3ae682e3ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fbits%2Fatomicity.h?ref=95b02d7e3aa3830b46325a8c6b090d3ae682e3ea", "patch": "@@ -0,0 +1,138 @@\n+// Low-level functions for atomic operations. Mips version.\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _BITS_ATOMICITY_H \n+#define _BITS_ATOMICITY_H 1\n+\n+#include <sgidefs.h>\n+\n+typedef int _Atomic_word;\n+\n+#if (_MIPS_ISA >= _MIPS_ISA_MIPS2)\n+\n+static inline int\n+__attribute__ ((unused))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  int __result, __tmp;\n+\n+  __asm__ __volatile__\n+    (\"/* Inline exchange & add */\\n\\t\"\n+     \"1:\\n\\t\"\n+     \"ll\t%0,%3\\n\\t\"\n+     \"addu\t%1,%4,%0\\n\\t\"\n+     \"sc\t%1,%2\\n\\t\"\n+     \"beqz\t%1,1b\\n\\t\"\n+     \"/* End exchange & add */\"\n+     : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n+     : \"m\" (*__mem), \"r\"(__val)\n+     : \"memory\");\n+\n+  return __result;\n+}\n+\n+static inline void\n+__attribute__ ((unused))\n+__atomic_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  int __result;\n+\n+  __asm__ __volatile__\n+    (\"/* Inline atomic add */\\n\\t\"\n+     \"1:\\n\\t\"\n+     \"ll\t%0,%2\\n\\t\"\n+     \"addu\t%0,%3,%0\\n\\t\"\n+     \"sc\t%0,%1\\n\\t\"\n+     \"beqz\t%0,1b\\n\\t\"\n+     \"/* End atomic add */\"\n+     : \"=&r\"(__result), \"=m\"(*__mem)\n+     : \"m\" (*__mem), \"r\"(__val)\n+     : \"memory\");\n+}\n+\n+static inline int\n+__attribute__ ((unused))\n+__compare_and_swap (volatile long int *__p, long int __oldval,\n+\t\t    long int __newval)\n+{\n+  long int __ret;\n+\n+  __asm__ __volatile__\n+    (\"/* Inline compare & swap */\\n\\t\"\n+     \"1:\\n\\t\"\n+     \"ll\t%0,%4\\n\\t\"\n+     \".set\tpush\\n\"\n+     \".set\tnoreorder\\n\\t\"\n+     \"bne\t%0,%2,2f\\n\\t\"\n+     \"move\t%0,%3\\n\\t\"\n+     \".set\tpop\\n\\t\"\n+     \"sc\t%0,%1\\n\\t\"\n+     \"beqz\t%0,1b\\n\"\n+     \"2:\\n\\t\"\n+     \"/* End compare & swap */\"\n+     : \"=&r\" (__ret), \"=m\" (*__p)\n+     : \"r\" (__oldval), \"r\" (__newval), \"m\" (*__p)\n+     : \"memory\");\n+\n+  return __ret;\n+}\n+\n+#else /* (_MIPS_ISA >= _MIPS_ISA_MIPS2) */\n+\n+static inline int\n+__attribute__ ((unused))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  int __result = *__mem;\n+  *__mem += __val;\n+  return __result;\n+}\n+\n+static inline void\n+__attribute__ ((unused))\n+__atomic_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  *__mem += __val;\n+}\n+\n+static inline int\n+__attribute__ ((unused))\n+__compare_and_swap (volatile long int *__p, long int __oldval,\n+\t\t    long int __newval)\n+{\n+  if (*__p != __oldval)\n+    return 0;\n+\n+  *__p = __newval;\n+  return 1;\n+}\n+\n+#endif /* !(_MIPS_ISA >= _MIPS_ISA_MIPS2) */\n+\n+#endif /* atomicity.h */"}]}