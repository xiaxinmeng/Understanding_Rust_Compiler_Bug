{"sha": "2414e1d655249938cc53becd63d8fb95db65bbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxNGUxZDY1NTI0OTkzOGNjNTNiZWNkNjNkOGZiOTVkYjY1YmJmZQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-02-10T00:10:47Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-02-10T00:10:47Z"}, "message": "re PR fortran/14771 (frontend doesn't record parentheses)\n\nfortran/\n2006-02-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n\n        PR fortran/14771\n        * gfortran.h (gfc_intrinsic_op): Add INTRINSIC_PARENTHESES.\n        * dump-parse-tree (gfc_show_expr): Handle INTRINSIC_PARENTHESES.\n        * expr.c (simplify_intrinsic_op): Treat INTRINSIC_PARENTHESES as\n        if it were INTRINSIC_UPLUS.\n        * resolve.c (resolve_operator): Handle INTRINSIC_PARENTHESES.\n        * match.c (intrinsic_operators): Add INTRINSIC_PARENTHESES.\n        * matchexp.c (match_primary): Record parentheses surrounding\n        numeric expressions.\n        * module.c (intrinsics): Add INTRINSIC_PARENTHESES for module\n        dumping.\n        * trans-expr.c (gfc_conv_expr_op): Handle INTRINSIC_PARENTHESES.\n\ntestsuite/\n2006-02-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n        Paul Thomas  <pault@gcc.gnu.org>\n\n        PR fortran/14771\n        * gfortran.dg/parens_1.f90: New.\n        * gfortran.dg/parens_2.f90: New.\n        * gfortran.dg/parens_3.f90: New.\n\nFrom-SVN: r110819", "tree": {"sha": "a5d5c040eb2490c1c8811341728f943405f6d7df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d5c040eb2490c1c8811341728f943405f6d7df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2414e1d655249938cc53becd63d8fb95db65bbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2414e1d655249938cc53becd63d8fb95db65bbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2414e1d655249938cc53becd63d8fb95db65bbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2414e1d655249938cc53becd63d8fb95db65bbfe/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a286e145de1b08b1a73d4efe03d36375fa698273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a286e145de1b08b1a73d4efe03d36375fa698273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a286e145de1b08b1a73d4efe03d36375fa698273"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "d175cc4ad33423ae89982979b7acb3c3634a2938", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -1,3 +1,18 @@\n+2006-02-09  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/14771\n+\t* gfortran.h (gfc_intrinsic_op): Add INTRINSIC_PARENTHESES.\n+\t* dump-parse-tree (gfc_show_expr): Handle INTRINSIC_PARENTHESES.\n+\t* expr.c (simplify_intrinsic_op): Treat INTRINSIC_PARENTHESES as\n+\tif it were INTRINSIC_UPLUS.\n+\t* resolve.c (resolve_operator): Handle INTRINSIC_PARENTHESES.\n+\t* match.c (intrinsic_operators): Add INTRINSIC_PARENTHESES.\n+\t* matchexp.c (match_primary): Record parentheses surrounding\n+\tnumeric expressions.\n+\t* module.c (intrinsics): Add INTRINSIC_PARENTHESES for module\n+\tdumping.\n+\t* trans-expr.c (gfc_conv_expr_op): Handle INTRINSIC_PARENTHESES.\n+\n 2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/26038"}, {"sha": "6e2f55f5d7fcfebd51513e4b2ea2a67a3d68ab97", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -478,6 +478,9 @@ gfc_show_expr (gfc_expr * p)\n \tcase INTRINSIC_NOT:\n \t  gfc_status (\"NOT \");\n \t  break;\n+\tcase INTRINSIC_PARENTHESES:\n+\t  gfc_status (\"parens\");\n+\t  break;\n \n \tdefault:\n \t  gfc_internal_error"}, {"sha": "c72281c67583e931f542768902d0edf36c9176ba", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -782,6 +782,7 @@ simplify_intrinsic_op (gfc_expr * p, int type)\n   switch (p->value.op.operator)\n     {\n     case INTRINSIC_UPLUS:\n+    case INTRINSIC_PARENTHESES:\n       result = gfc_uplus (op1);\n       break;\n "}, {"sha": "46141b6184aee45bfd4ae02209dd3eefb8a20252", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -182,7 +182,7 @@ typedef enum\n   INTRINSIC_AND, INTRINSIC_OR, INTRINSIC_EQV, INTRINSIC_NEQV,\n   INTRINSIC_EQ, INTRINSIC_NE, INTRINSIC_GT, INTRINSIC_GE,\n   INTRINSIC_LT, INTRINSIC_LE, INTRINSIC_NOT, INTRINSIC_USER,\n-  INTRINSIC_ASSIGN,\n+  INTRINSIC_ASSIGN, INTRINSIC_PARENTHESES,\n   GFC_INTRINSIC_END /* Sentinel */\n }\n gfc_intrinsic_op;"}, {"sha": "a78cd028ea41860748ae259492004b16cdc04153", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -58,6 +58,7 @@ mstring intrinsic_operators[] = {\n     minit (\".gt.\", INTRINSIC_GT),\n     minit (\">\", INTRINSIC_GT),\n     minit (\".not.\", INTRINSIC_NOT),\n+    minit (\"parens\", INTRINSIC_PARENTHESES),\n     minit (NULL, INTRINSIC_NONE)\n };\n "}, {"sha": "e4bf44e4b613cdc5db01463635e2e3bf314359c2", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -128,6 +128,8 @@ static match\n match_primary (gfc_expr ** result)\n {\n   match m;\n+  gfc_expr *e;\n+  locus where;\n \n   m = gfc_match_literal_constant (result, 0);\n   if (m != MATCH_NO)\n@@ -141,11 +143,13 @@ match_primary (gfc_expr ** result)\n   if (m != MATCH_NO)\n     return m;\n \n-  /* Match an expression in parenthesis.  */\n+  /* Match an expression in parentheses.  */\n+  where = gfc_current_locus;\n+\n   if (gfc_match_char ('(') != MATCH_YES)\n     return MATCH_NO;\n \n-  m = gfc_match_expr (result);\n+  m = gfc_match_expr (&e);\n   if (m == MATCH_NO)\n     goto syntax;\n   if (m == MATCH_ERROR)\n@@ -155,6 +159,26 @@ match_primary (gfc_expr ** result)\n   if (m == MATCH_NO)\n     gfc_error (\"Expected a right parenthesis in expression at %C\");\n \n+  /* Now we have the expression inside the parentheses, build the\n+     expression pointing to it. By 7.1.7.2 the integrity of\n+     parentheses is only conserved in numerical calculations, so we\n+     don't bother to keep the parentheses otherwise.  */\n+  if(!gfc_numeric_ts(&e->ts))\n+    *result = e;\n+  else\n+    {\n+      gfc_expr *e2 = gfc_get_expr();\n+\n+      e2->expr_type = EXPR_OP;\n+      e2->ts = e->ts;\n+      e2->rank = e->rank;\n+      e2->where = where;\n+      e2->value.op.operator = INTRINSIC_PARENTHESES;\n+      e2->value.op.op1 = e;\n+      e2->value.op.op2 = NULL;\n+      *result = e2;\n+    }\n+\n   if (m != MATCH_YES)\n     {\n       gfc_free_expr (*result);"}, {"sha": "8af0c6d964fa05c62e0195e0f55f6ebf1ca9669d", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -2455,6 +2455,7 @@ static const mstring intrinsics[] =\n     minit (\"LT\", INTRINSIC_LT),\n     minit (\"LE\", INTRINSIC_LE),\n     minit (\"NOT\", INTRINSIC_NOT),\n+    minit (\"PARENTHESES\", INTRINSIC_PARENTHESES),\n     minit (NULL, -1)\n };\n "}, {"sha": "f8234bf4bc9f78676b1e79419fe528626821045f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -1692,6 +1692,7 @@ resolve_operator (gfc_expr * e)\n     case INTRINSIC_NOT:\n     case INTRINSIC_UPLUS:\n     case INTRINSIC_UMINUS:\n+    case INTRINSIC_PARENTHESES:\n       if (gfc_resolve_expr (e->value.op.op1) == FAILURE)\n \treturn FAILURE;\n       break;\n@@ -1835,6 +1836,9 @@ resolve_operator (gfc_expr * e)\n \n       goto bad_op;\n \n+    case INTRINSIC_PARENTHESES:\n+      break;\n+\n     default:\n       gfc_internal_error (\"resolve_operator(): Bad intrinsic\");\n     }\n@@ -1911,6 +1915,7 @@ resolve_operator (gfc_expr * e)\n     case INTRINSIC_NOT:\n     case INTRINSIC_UPLUS:\n     case INTRINSIC_UMINUS:\n+    case INTRINSIC_PARENTHESES:\n       e->rank = op1->rank;\n \n       if (e->shape == NULL)"}, {"sha": "d64dabe491fcc0ecdbf7dbcae62fe07b4a9f9b1c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -925,6 +925,7 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   switch (expr->value.op.operator)\n     {\n     case INTRINSIC_UPLUS:\n+    case INTRINSIC_PARENTHESES:\n       gfc_conv_expr (se, expr->value.op.op1);\n       return;\n "}, {"sha": "bf3e0b817e313c28b0c693319830f8907ff517ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -1,3 +1,11 @@\n+2006-02-09  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tPaul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/14771\n+\t* gfortran.dg/parens_1.f90: New.\n+\t* gfortran.dg/parens_2.f90: New.\n+\t* gfortran.dg/parens_3.f90: New.\n+\n 2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/26038"}, {"sha": "91ced3b6da0c110cb5ecac664d11ef057c628ba4", "filename": "gcc/testsuite/gfortran.dg/parens_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_1.f90?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -0,0 +1,8 @@\n+! PR 20894\n+! { dg-do compile }\n+! Originally contributed by Joost VandeVondele\n+INTEGER, POINTER :: I,J\n+INTEGER :: K\n+ALLOCATE(I)\n+J=>(I)   ! { dg-error \"Pointer assignment target is neither TARGET nor POINTER\" }\n+END"}, {"sha": "bc2acd8e71de748aae2fd6cc4a1c862e968ef222", "filename": "gcc/testsuite/gfortran.dg/parens_2.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_2.f90?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -0,0 +1,11 @@\n+! PR 25048\n+! { dg-do compile }\n+! Originally contributed by Joost VandeVondele\n+INTEGER, POINTER :: I\n+CALL S1((I)) ! { dg-error \"Actual argument for .i. must be a pointer\" }\n+CONTAINS\n+ SUBROUTINE S1(I)\n+  INTEGER, POINTER ::I\n+ END SUBROUTINE S1\n+END\n+"}, {"sha": "47bb75e401d6d3d32c2c0b8867da56b3df51f38b", "filename": "gcc/testsuite/gfortran.dg/parens_3.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2414e1d655249938cc53becd63d8fb95db65bbfe/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparens_3.f90?ref=2414e1d655249938cc53becd63d8fb95db65bbfe", "patch": "@@ -0,0 +1,48 @@\n+! PR 14771\n+! { dg-do run }\n+! Originally contributed by Walt Brainerd, modified for the testsuite\n+      PROGRAM fc107\n+\n+! Submitted by Walt Brainerd, The Fortran Company\n+! GNU Fortran 95 (GCC 4.1.0 20050322 (experimental))\n+! Windows XP\n+\n+! Return value should be 3\n+\n+      INTEGER I, J, M(2), N(2)\n+      integer, pointer :: k\n+      integer, target :: l\n+      INTEGER TRYME\n+\n+      interface\n+        FUNCTION TRYyou(RTNME,HITME)\n+          INTEGER RTNME(2),HITME(2), tryyou(2)\n+        END function tryyou\n+      end interface\n+\n+      m = 7\n+      l = 5\n+      I = 3\n+      k => l\n+\n+      j = tryme((i),i)\n+      if (j .ne. 3) call abort ()\n+\n+      j = tryme((k),k)\n+      if (j .ne. 5) call abort ()\n+\n+      n = tryyou((m),m)\n+      if (any(n .ne. 7)) call abort ()\n+      END\n+\n+      INTEGER FUNCTION TRYME(RTNME,HITME)\n+      INTEGER RTNME,HITME\n+      HITME = 999\n+      TRYME = RTNME\n+      END\n+\n+      FUNCTION TRYyou(RTNME,HITME)\n+      INTEGER RTNME(2),HITME(2), tryyou(2)\n+      HITME = 999\n+      TRYyou = RTNME\n+      END"}]}