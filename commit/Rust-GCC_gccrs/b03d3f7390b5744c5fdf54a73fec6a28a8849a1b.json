{"sha": "b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZDNmNzM5MGI1NzQ0YzVmZGY1NGE3M2ZlYzZhMjhhODg0OWExYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:29:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:29:46Z"}, "message": "[multiple changes]\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Build_Initialization_Call): Handle\n\tsubtypes of private types when searching for the underlying full\n\tview of a private type.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Set_Mixed_Mode_Operand): A universal\n\treal conditional expression can appear in a fixed-type context\n\tand must be resolved with that context to facilitate the code\n\tgeneration to the backend.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.adb, einfo.ads (Body_Needed_For_Inlining): New flag,\n\tto indicate whether during inline processing, when some unit U1\n\tappears in the context of a unit U2 compiled for instantiation\n\tor inlining purposes, the body of U1 needs to be compiled as well.\n\t* sem_prag.adb (Process_Inline): Set Body_Needed_For_Inlining if\n\tcontext is a package declaration.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration,\n\tAnalyze_Generic_Package_Declaration): ditto.\n\t* inline.adb (Analyze_Inlined_Bodies): Check\n\tBody_Needed_For_Inlining.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par.adb (Current_Assign_Node): Global variable use to record\n\tthe presence of a target_name in the right hand side of the\n\tassignment being parsed.\n\t* par-ch4.adb (P_Name): If the name is a target_name, mark the\n\tenclosing assignment node accordingly.\n\t* par-ch5.adb (P_Assignment_Statement): Set Current_Assign_Node\n\tappropriately.\n\t* sem_ch5.adb (Analyze_Assignment): Disable expansion before\n\tanalyzing RHS if the statement has target_names.\n\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Handle\n\tproperly choices that are subtype marks.\n\t* exp_ch5.adb: Code cleanup.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* s-memory.adb: Add a comment regarding efficiency.\n\t* atree.adb: Fix the assertion, and combine 2 assertions into one,\n\t\"the source has an extension if and only if the destination does.\"\n\t* sem_ch3.adb, sem_ch13.adb: Address ??? comments.\n\n2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n\n\t* a-tasatt.adb (Set_Value): Fix handling of 32bits -> 64bits\n\tconversion.\n\n2017-04-25  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c (__gnat_error_handler) [vxworks]: Turn on sigtramp\n\thandling for ppc64-vx7.\n\t* sigtramp-vxworks-target.inc\n\t[SIGTRAMP_BODY]: Add section for ppc64-vx7.\n\nFrom-SVN: r247146", "tree": {"sha": "691d77965f13f8c705799f5af8dff2f0c25fc955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/691d77965f13f8c705799f5af8dff2f0c25fc955"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/comments", "author": null, "committer": null, "parents": [{"sha": "18e829474cbb8624570a9836ceee1d8544b0ace7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e829474cbb8624570a9836ceee1d8544b0ace7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e829474cbb8624570a9836ceee1d8544b0ace7"}], "stats": {"total": 249, "additions": 224, "deletions": 25}, "files": [{"sha": "ee46f95f4d5ef78db02b5fed2d4873d71fb6d4c2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -1,3 +1,63 @@\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Initialization_Call): Handle\n+\tsubtypes of private types when searching for the underlying full\n+\tview of a private type.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Set_Mixed_Mode_Operand): A universal\n+\treal conditional expression can appear in a fixed-type context\n+\tand must be resolved with that context to facilitate the code\n+\tgeneration to the backend.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.adb, einfo.ads (Body_Needed_For_Inlining): New flag,\n+\tto indicate whether during inline processing, when some unit U1\n+\tappears in the context of a unit U2 compiled for instantiation\n+\tor inlining purposes, the body of U1 needs to be compiled as well.\n+\t* sem_prag.adb (Process_Inline): Set Body_Needed_For_Inlining if\n+\tcontext is a package declaration.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration,\n+\tAnalyze_Generic_Package_Declaration): ditto.\n+\t* inline.adb (Analyze_Inlined_Bodies): Check\n+\tBody_Needed_For_Inlining.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par.adb (Current_Assign_Node): Global variable use to record\n+\tthe presence of a target_name in the right hand side of the\n+\tassignment being parsed.\n+\t* par-ch4.adb (P_Name): If the name is a target_name, mark the\n+\tenclosing assignment node accordingly.\n+\t* par-ch5.adb (P_Assignment_Statement): Set Current_Assign_Node\n+\tappropriately.\n+\t* sem_ch5.adb (Analyze_Assignment): Disable expansion before\n+\tanalyzing RHS if the statement has target_names.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Handle\n+\tproperly choices that are subtype marks.\n+\t* exp_ch5.adb: Code cleanup.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* s-memory.adb: Add a comment regarding efficiency.\n+\t* atree.adb: Fix the assertion, and combine 2 assertions into one,\n+\t\"the source has an extension if and only if the destination does.\"\n+\t* sem_ch3.adb, sem_ch13.adb: Address ??? comments.\n+\n+2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n+\n+\t* a-tasatt.adb (Set_Value): Fix handling of 32bits -> 64bits\n+\tconversion.\n+\n+2017-04-25  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (__gnat_error_handler) [vxworks]: Turn on sigtramp\n+\thandling for ppc64-vx7.\n+\t* sigtramp-vxworks-target.inc\n+\t[SIGTRAMP_BODY]: Add section for ppc64-vx7.\n+\n 2017-04-25  Arnaud Charlet  <charlet@adacore.com>\n \n \t* ada_get_targ.adb: New file."}, {"sha": "703d1407a98e6652444ed8d075f37ef14699c50e", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -302,7 +302,11 @@ package body Ada.Task_Attributes is\n \n          --  No finalization needed, simply set to Val\n \n-         TT.Attributes (Index) := To_Address (Val);\n+         if Attribute'Size = Integer'Size then\n+            TT.Attributes (Index) := Atomic_Address (To_Int (Val));\n+         else\n+            TT.Attributes (Index) := To_Address (Val);\n+         end if;\n \n       else\n          Self_Id := STPO.Self;"}, {"sha": "9137602b15c6f6e47eccf796601f022cdc75ea4a", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -767,16 +767,12 @@ package body Atree is\n       --  Deal with copying extension nodes if present. No need to copy flags\n       --  table entries, since they are always zero for extending components.\n \n-      if Has_Extension (Source) then\n-         pragma Assert (Has_Extension (Destination));\n+      pragma Assert (Has_Extension (Source) = Has_Extension (Destination));\n \n+      if Has_Extension (Source) then\n          for J in 1 .. Num_Extension_Nodes loop\n             Nodes.Table (Destination + J) := Nodes.Table (Source + J);\n          end loop;\n-\n-      else\n-         pragma Assert (not Has_Extension (Source));\n-         null;\n       end if;\n    end Copy_Node;\n "}, {"sha": "e01abddecead01293a663238148d1b31e599b33e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -615,10 +615,9 @@ package body Einfo is\n    --    Has_Partial_Visible_Refinement  Flag296\n    --    Is_Entry_Wrapper                Flag297\n    --    Is_Underlying_Full_View         Flag298\n+   --    Body_Needed_For_Inlining        Flag299\n \n-   --    (unused)                        Flag299\n    --    (unused)                        Flag300\n-\n    --    (unused)                        Flag301\n    --    (unused)                        Flag302\n    --    (unused)                        Flag303\n@@ -829,6 +828,12 @@ package body Einfo is\n       return Node19 (Id);\n    end Body_Entity;\n \n+   function Body_Needed_For_Inlining (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      return Flag299 (Id);\n+   end Body_Needed_For_Inlining;\n+\n    function Body_Needed_For_SAL (Id : E) return B is\n    begin\n       pragma Assert\n@@ -3861,6 +3866,12 @@ package body Einfo is\n       Set_Node19 (Id, V);\n    end Set_Body_Entity;\n \n+   procedure Set_Body_Needed_For_Inlining (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      Set_Flag299 (Id, V);\n+   end Set_Body_Needed_For_Inlining;\n+\n    procedure Set_Body_Needed_For_SAL (Id : E; V : B := True) is\n    begin\n       pragma Assert\n@@ -9252,6 +9263,7 @@ package body Einfo is\n \n       W (\"Address_Taken\",                   Flag104 (Id));\n       W (\"Body_Needed_For_SAL\",             Flag40  (Id));\n+      W (\"Body_Needed_For_Inlining\",        Flag299 (Id));\n       W (\"C_Pass_By_Copy\",                  Flag125 (Id));\n       W (\"Can_Never_Be_Null\",               Flag38  (Id));\n       W (\"Checks_May_Be_Suppressed\",        Flag31  (Id));"}, {"sha": "a08d5d26d21076f1e72c7f54e7010b521dd59841", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -529,6 +529,14 @@ package Einfo is\n --       units. Indicates that the source for the body must be included\n --       when the unit is part of a standalone library.\n \n+--    Body_Needed_For_Inlining (Flag299)\n+--       Defined in package entities that are compilation units. Used to\n+--       determine whether the body unit needs to be compiled when the\n+--       package declaration appears in the list of units to inline. A body\n+--       is needed for inline processing if the unit declaration contains\n+--       functions that carry pragma Inline or Inline_Always, or if it\n+--       contains a generic unit that requires a body.\n+--\n --    Body_References (Elist16)\n --       Defined in abstract state entities. Contains an element list of\n --       references (identifiers) that appear in a package body whose spec\n@@ -6238,6 +6246,7 @@ package Einfo is\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n    --    Delay_Subprogram_Descriptors        (Flag50)\n+   --    Body_Needed_For_Inlining            (Flag299)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Discard_Names                       (Flag88)\n@@ -6880,6 +6889,7 @@ package Einfo is\n    function Block_Node                          (Id : E) return N;\n    function Body_Entity                         (Id : E) return E;\n    function Body_Needed_For_SAL                 (Id : E) return B;\n+   function Body_Needed_For_Inlining            (Id : E) return B;\n    function Body_References                     (Id : E) return L;\n    function C_Pass_By_Copy                      (Id : E) return B;\n    function Can_Never_Be_Null                   (Id : E) return B;\n@@ -7563,6 +7573,7 @@ package Einfo is\n    procedure Set_BIP_Initialization_Call         (Id : E; V : N);\n    procedure Set_Block_Node                      (Id : E; V : N);\n    procedure Set_Body_Entity                     (Id : E; V : E);\n+   procedure Set_Body_Needed_For_Inlining        (Id : E; V : B := True);\n    procedure Set_Body_Needed_For_SAL             (Id : E; V : B := True);\n    procedure Set_Body_References                 (Id : E; V : L);\n    procedure Set_C_Pass_By_Copy                  (Id : E; V : B := True);\n@@ -8365,6 +8376,7 @@ package Einfo is\n    pragma Inline (BIP_Initialization_Call);\n    pragma Inline (Block_Node);\n    pragma Inline (Body_Entity);\n+   pragma Inline (Body_Needed_For_Inlining);\n    pragma Inline (Body_Needed_For_SAL);\n    pragma Inline (Body_References);\n    pragma Inline (C_Pass_By_Copy);\n@@ -8886,6 +8898,7 @@ package Einfo is\n    pragma Inline (Set_BIP_Initialization_Call);\n    pragma Inline (Set_Block_Node);\n    pragma Inline (Set_Body_Entity);\n+   pragma Inline (Set_Body_Needed_For_Inlining);\n    pragma Inline (Set_Body_Needed_For_SAL);\n    pragma Inline (Set_Body_References);\n    pragma Inline (Set_C_Pass_By_Copy);"}, {"sha": "20331794c97dfcc71ef367dc31bdd7eb9ca5ff74", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -1451,6 +1451,12 @@ package body Exp_Ch3 is\n             elsif Is_Generic_Actual_Type (Full_Type) then\n                Full_Type := Base_Type (Full_Type);\n \n+            elsif Ekind (Full_Type) = E_Private_Subtype\n+              and then (not Has_Discriminants (Full_Type)\n+                         or else No (Discriminant_Constraint (Full_Type)))\n+            then\n+               Full_Type := Etype (Full_Type);\n+\n             --  The loop has recovered the [underlying] full view, stop the\n             --  traversal.\n "}, {"sha": "cd555b42d48db6146940559f2fa6b04a2c084dd0", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -1638,6 +1638,14 @@ package body Exp_Ch5 is\n       begin\n          if Nkind (N) = N_Target_Name then\n             Rewrite (N, New_Occurrence_Of (Ent, Sloc (N)));\n+\n+         --  The expression will be reanalyzed when the enclosing assignment\n+         --  is reanalyzed, so reset the entity, which may be a temporary\n+         --  created during analysis, e.g. a loop variable for an iterated\n+         --  component association.\n+\n+         elsif Is_Entity_Name (N) then\n+            Set_Entity (N, Empty);\n          end if;\n \n          Set_Analyzed (N, False);"}, {"sha": "e180f3cfb09c0277c46df66d076302a57eb29a86", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -2005,7 +2005,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   sigdelset (&mask, sig);\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n-#if defined (__ARMEL__) || (defined (__PPC__) && !defined (__PPC64__)) || defined (__i386__) || defined (__x86_64__)\n+#if defined (__ARMEL__) || defined (__PPC__) || defined (__i386__) || defined (__x86_64__)\n   /* On certain targets, kernel mode, we process signals through a Call Frame\n      Info trampoline, voiding the need for myriads of fallback_frame_state\n      variants in the ZCX runtime.  We have no simple way to distinguish ZCX"}, {"sha": "c20a2df836976c7402179375122d325a0497cea5", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -744,14 +744,18 @@ package body Inline is\n                Comp_Unit := Parent (Comp_Unit);\n             end loop;\n \n-            --  Load the body, unless it is the main unit, or is an instance\n-            --  whose body has already been analyzed.\n+            --  Load the body if it exists and contains inlineable entities,\n+            --  unless it is the main unit, or is an instance whose body has\n+            --  already been analyzed.\n \n             if Present (Comp_Unit)\n               and then Comp_Unit /= Cunit (Main_Unit)\n               and then Body_Required (Comp_Unit)\n               and then (Nkind (Unit (Comp_Unit)) /= N_Package_Declaration\n-                         or else No (Corresponding_Body (Unit (Comp_Unit))))\n+                         or else\n+                          (No (Corresponding_Body (Unit (Comp_Unit)))\n+                             and then Body_Needed_For_Inlining\n+                               (Defining_Entity (Unit (Comp_Unit)))))\n             then\n                declare\n                   Bname : constant Unit_Name_Type :="}, {"sha": "d500e58f36eec0d1e721401ec331077b506d6695", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -235,6 +235,10 @@ package body Ch4 is\n \n       if Token = Tok_At_Sign then\n          Scan_Reserved_Identifier (Force_Msg => False);\n+\n+         if Present (Current_Assign_Node) then\n+            Set_Has_Target_Names (Current_Assign_Node);\n+         end if;\n       end if;\n \n       Name_Node := Token_Node;"}, {"sha": "2d975efff5980a1b4bfd01b496b0b6076a453124", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -1067,9 +1067,11 @@ package body Ch5 is\n \n    begin\n       Assign_Node := New_Node (N_Assignment_Statement, Prev_Token_Ptr);\n+      Current_Assign_Node := Assign_Node;\n       Set_Name (Assign_Node, LHS);\n       Set_Expression (Assign_Node, P_Expression_No_Right_Paren);\n       TF_Semicolon;\n+      Current_Assign_Node := Empty;\n       return Assign_Node;\n    end P_Assignment_Statement;\n "}, {"sha": "6c39e330dc749943bd51d3b8f758f08920e5efd0", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -595,6 +595,12 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    --  this may not be worth the effort. Also we could deal with the same\n    --  situation for EXIT with a label, but for now don't bother with that.\n \n+   Current_Assign_Node : Node_Id := Empty;\n+   --  This is the node of the current assignment statement being compiled.\n+   --  It is used to record the presence of target_names on its RHS. This\n+   --  context-dependent trick simplifies the analysis of such nodes, where\n+   --  the RHS must first be analyzed with expansion disabled.\n+\n    ---------------------------------\n    -- Parsing Routines by Chapter --\n    ---------------------------------"}, {"sha": "870b68a85cc18b07684d89f80ac101bf1a78764a", "filename": "gcc/ada/s-memory.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fs-memory.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fs-memory.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-memory.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -73,6 +73,8 @@ package body System.Memory is\n       --  return Null_Address, and then we can check for that special value.\n       --  However, that doesn't work on VxWorks, because malloc(size_t'Last)\n       --  prints an unwanted warning message before returning Null_Address.\n+      --  Note that the branch is correctly predicted on modern hardware, so\n+      --  there is negligible overhead.\n \n       if Size = size_t'Last then\n          raise Storage_Error with \"object too large\";"}, {"sha": "223a59fcab85a61967c5cfe03cdd4d8774fbd6fc", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -1664,7 +1664,19 @@ package body Sem_Aggr is\n                Others_Present := True;\n \n             else\n-               Analyze_And_Resolve (Choice, Index_Typ);\n+               Analyze (Choice);\n+\n+               --  Choice can be a subtype name, a range, or an expression.\n+\n+               if Is_Entity_Name (Choice)\n+                 and then Is_Type (Entity (Choice))\n+                 and then Base_Type (Entity (Choice)) = Base_Type (Index_Typ)\n+               then\n+                  null;\n+\n+               else\n+                  Analyze_And_Resolve (Choice, Index_Typ);\n+               end if;\n             end if;\n \n             Next (Choice);\n@@ -1681,6 +1693,8 @@ package body Sem_Aggr is\n          --  Decorate the index variable in the current scope. The association\n          --  may have several choices, each one leading to a loop, so we create\n          --  this variable only once to prevent homonyms in this scope.\n+         --  The expression has to be analyzed once the index variable is\n+         --  directly visible.\n \n          if No (Scope (Id)) then\n             Enter_Name (Id);"}, {"sha": "bc824103ec9f52ef5ec3e1455399d6a70a3a2bd1", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -3374,6 +3374,14 @@ package body Sem_Ch12 is\n       End_Package_Scope (Id);\n       Exit_Generic_Scope (Id);\n \n+      --  If the generic appears within a package unit, the body of that unit\n+      --  has to be present for instantiation and inlining.\n+\n+      if Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Declaration then\n+         Set_Body_Needed_For_Inlining\n+           (Defining_Entity (Unit (Cunit (Current_Sem_Unit))));\n+      end if;\n+\n       if Nkind (Parent (N)) /= N_Compilation_Unit then\n          Move_Freeze_Nodes (Id, N, Visible_Declarations (Specification (N)));\n          Move_Freeze_Nodes (Id, N, Private_Declarations (Specification (N)));\n@@ -3552,6 +3560,16 @@ package body Sem_Ch12 is\n          Set_Body_Required (Parent (N), Unit_Requires_Body (Id));\n       end if;\n \n+      --  If the generic appears within a package unit, the body of that unit\n+      --  has to be present for instantiation and inlining.\n+\n+      if Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Declaration\n+        and then Unit_Requires_Body (Id)\n+      then\n+         Set_Body_Needed_For_Inlining\n+           (Defining_Entity (Unit (Cunit (Current_Sem_Unit))));\n+      end if;\n+\n       Set_Categorization_From_Pragmas (N);\n       Validate_Categorization_Dependency (N, Id);\n \n@@ -3724,6 +3742,8 @@ package body Sem_Ch12 is\n       --  Turn off style checking in instances. If the check is enabled on the\n       --  generic unit, a warning in an instance would just be noise. If not\n       --  enabled on the generic, then a warning in an instance is just wrong.\n+      --  This must be done after analyzing the actuals, which do come from\n+      --  source and are subject to style checking.\n \n       Style_Check := False;\n "}, {"sha": "ce47fd8433a06b1823b9ebd05a78f245ea75a688", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -12754,7 +12754,7 @@ package body Sem_Ch13 is\n          elsif Nkind (N) = N_Identifier and then Chars (N) /= Chars (E) then\n             Find_Direct_Name (N);\n \n-            if True or else not ASIS_Mode then -- ????\n+            if not ASIS_Mode then\n                Set_Entity (N, Empty);\n             end if;\n "}, {"sha": "ed385dd5e0a61af6bbef29d8dbbb123588f19a4e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -2574,7 +2574,7 @@ package body Sem_Ch3 is\n                --  rejected. Pending notification we restrict this call to\n                --  ASIS mode.\n \n-               if False and then ASIS_Mode then -- ????\n+               if ASIS_Mode then\n                   Resolve_Aspects;\n                end if;\n "}, {"sha": "8babb8ac25185cb54caa85e995bcea8faad250a7", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -300,6 +300,10 @@ package body Sem_Ch5 is\n       --  Ghost entity. Set the mode now to ensure that any nodes generated\n       --  during analysis and expansion are properly marked as Ghost.\n \n+      if Has_Target_Names (N) then\n+         Expander_Mode_Save_And_Set (False);\n+      end if;\n+\n       Mark_And_Set_Ghost_Assignment (N, Mode);\n       Analyze (Rhs);\n \n@@ -3546,15 +3550,6 @@ package body Sem_Ch5 is\n       else\n          Set_Has_Target_Names (Parent (Current_LHS));\n          Set_Etype (N, Etype (Current_LHS));\n-\n-         --  Disable expansion for the rest of the analysis of the current\n-         --  right-hand side. The enclosing assignment statement will be\n-         --  rewritten during expansion, together with occurrences of the\n-         --  target name.\n-\n-         if Expander_Active then\n-            Expander_Mode_Save_And_Set (False);\n-         end if;\n       end if;\n    end Analyze_Target_Name;\n "}, {"sha": "e9c941986751b25440ab04abe6c6f88610066803", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -9112,6 +9112,17 @@ package body Sem_Prag is\n \n             Next (Assoc);\n          end loop;\n+\n+         --  If the context is a package declaration, the pragma indicates\n+         --  that inlining will require the presence of the corresponding\n+         --  body. (this may be further refined).\n+\n+         if not In_Instance\n+           and then Nkind (Unit (Cunit (Current_Sem_Unit)))\n+                      = N_Package_Declaration\n+         then\n+            Set_Body_Needed_For_Inlining (Cunit_Entity (Current_Sem_Unit));\n+         end if;\n       end Process_Inline;\n \n       ----------------------------"}, {"sha": "337b1228ab1c2b97b2ffb29286aff4c64e9fdaa8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -5353,6 +5353,16 @@ package body Sem_Res is\n                Resolve (Op2, T2);\n             end;\n \n+         --  A universal real conditional expression can appear in a fixed-type\n+         --  context and must be resolved with that context to facilitate the\n+         --  code generation to the backend.\n+\n+         elsif Nkind_In (N, N_Case_Expression, N_If_Expression)\n+           and then Etype (N) = Universal_Real\n+           and then Is_Fixed_Point_Type (B_Typ)\n+         then\n+            Resolve (N, B_Typ);\n+\n          else\n             Resolve (N);\n          end if;"}, {"sha": "8eacfd82ef2ae4408ead07e4352c0975cadb5471", "filename": "gcc/ada/sigtramp-vxworks-target.inc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-target.inc?ref=b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "patch": "@@ -274,6 +274,7 @@ TCR(\".cfi_return_column \" S(REGNO_PC))\n /* Trampoline body block\n    ---------------------  */\n \n+#if !defined (__PPC64__)\n #define SIGTRAMP_BODY \\\n CR(\"\") \\\n TCR(\"# Allocate frame and save the non-volatile\") \\\n@@ -298,6 +299,37 @@ TCR(\"mtlr %r0\")\t\t\\\n TCR(\"\")\t\t\t\\\n TCR(\"addi %r1,%r1,16\")\t\\\n TCR(\"blr\")\n+#else\n+#define SIGTRAMP_BODY \\\n+CR(\"\") \\\n+TCR(\"0:\") \\\n+TCR(\"addis 2,12,.TOC.-0@ha\") \\\n+TCR(\"addi 2,2,.TOC.-0@l\") \\\n+TCR(\"# Allocate frame and save the non-volatile\") \\\n+TCR(\"# registers we're going to modify\") \\\n+TCR(\"mflr %r0\")\t\\\n+TCR(\"std %r0,16(%r1)\")\t\\\n+TCR(\"stdu %r1,-32(%r1)\")  \\\n+TCR(\"std %r2,24(%r1)\")\t\\\n+TCR(\"std %r\" S(CFA_REG) \",8(%r1)\")\t\\\n+TCR(\"\")\t\t\t\\\n+TCR(\"# Setup CFA_REG = context, which we'll retrieve as our CFA value\") \\\n+TCR(\"mr %r\" S(CFA_REG) \", %r7\") \\\n+TCR(\"\")\t\t\t\\\n+TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\\n+TCR(\"# arguments are the same as those we received in r3, r4 and r5\") \\\n+TCR(\"mr %r12,%r6\") \\\n+TCR(\"mtctr %r6\") \\\n+TCR(\"bctrl\")\t\\\n+TCR(\"\")\t\t\\\n+TCR(\"# Restore our callee-saved items, release our frame and return\") \\\n+TCR(\"ld %r\" S(CFA_REG) \",8(%r1)\")\t\\\n+TCR(\"ld %r2,24(%r1)\")\t\\\n+TCR(\"addi %r1,%r1,32\")  \\\n+TCR(\"ld %r0,16(%r1)\")\t\\\n+TCR(\"mtlr %r0\")\t\t\\\n+TCR(\"blr\")\n+#endif\n \n #elif defined (__ARMEL__)\n "}]}