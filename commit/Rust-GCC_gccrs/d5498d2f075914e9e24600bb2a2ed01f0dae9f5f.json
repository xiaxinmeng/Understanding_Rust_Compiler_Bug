{"sha": "d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0OThkMmYwNzU5MTRlOWUyNDYwMGJiMmEyZWQwMWYwZGFlOWY1Zg==", "commit": {"author": {"name": "Brad Spengler", "email": "spender@grsecurity.net", "date": "2017-03-21T11:50:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-21T11:50:18Z"}, "message": "re PR plugins/80094 (GCC plugin hash table corruption on hash table expansion (>10 plugins) on GCC 4.5+)\n\n2017-03-21  Brad Spengler <spender@grsecurity.net>\n\n\tPR plugins/80094\n\t* plugin.c (htab_hash_plugin): New function.\n\t(add_new_plugin): Use it and adjust.\n\t(parse_plugin_arg_opt): Adjust.\n\t(init_one_plugin): Likewise.\n\nFrom-SVN: r246315", "tree": {"sha": "b3ca195c919e915f7ddb405fa8152ddfae854333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ca195c919e915f7ddb405fa8152ddfae854333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f/comments", "author": {"login": "spendergrsec", "id": 6294002, "node_id": "MDQ6VXNlcjYyOTQwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6294002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spendergrsec", "html_url": "https://github.com/spendergrsec", "followers_url": "https://api.github.com/users/spendergrsec/followers", "following_url": "https://api.github.com/users/spendergrsec/following{/other_user}", "gists_url": "https://api.github.com/users/spendergrsec/gists{/gist_id}", "starred_url": "https://api.github.com/users/spendergrsec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spendergrsec/subscriptions", "organizations_url": "https://api.github.com/users/spendergrsec/orgs", "repos_url": "https://api.github.com/users/spendergrsec/repos", "events_url": "https://api.github.com/users/spendergrsec/events{/privacy}", "received_events_url": "https://api.github.com/users/spendergrsec/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "225b189d080069dc3aecde3238e8fca01f2f49b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "patch": "@@ -1,3 +1,11 @@\n+2017-03-21  Brad Spengler <spender@grsecurity.net>\n+\n+\tPR plugins/80094\n+\t* plugin.c (htab_hash_plugin): New function.\n+\t(add_new_plugin): Use it and adjust.\n+\t(parse_plugin_arg_opt): Adjust.\n+\t(init_one_plugin): Likewise.\n+\n 2017-03-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80032"}, {"sha": "cfd6ef25036915e7b080cb8d4a50c70060c13d75", "filename": "gcc/plugin.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5498d2f075914e9e24600bb2a2ed01f0dae9f5f/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=d5498d2f075914e9e24600bb2a2ed01f0dae9f5f", "patch": "@@ -114,6 +114,16 @@ static const char *str_plugin_init_func_name = \"plugin_init\";\n static const char *str_license = \"plugin_is_GPL_compatible\";\n #endif\n \n+/* Helper function for hashing the base_name of the plugin_name_args\n+   structure to be inserted into the hash table.  */\n+\n+static hashval_t\n+htab_hash_plugin (const PTR p)\n+{\n+  const struct plugin_name_args *plugin = (const struct plugin_name_args *) p;\n+  return htab_hash_string (plugin->base_name);\n+ }\n+\n /* Helper function for the hash table that compares the base_name of the\n    existing entry (S1) with the given string (S2).  */\n \n@@ -183,10 +193,11 @@ add_new_plugin (const char* plugin_name)\n   /* If this is the first -fplugin= option we encounter, create\n      'plugin_name_args_tab' hash table.  */\n   if (!plugin_name_args_tab)\n-    plugin_name_args_tab = htab_create (10, htab_hash_string, htab_str_eq,\n+    plugin_name_args_tab = htab_create (10, htab_hash_plugin, htab_str_eq,\n                                         NULL);\n \n-  slot = htab_find_slot (plugin_name_args_tab, base_name, INSERT);\n+  slot = htab_find_slot_with_hash (plugin_name_args_tab, base_name,\n+\t\t\t\t   htab_hash_string (base_name), INSERT);\n \n   /* If the same plugin (name) has been specified earlier, either emit an\n      error or a warning message depending on if they have identical full\n@@ -273,7 +284,8 @@ parse_plugin_arg_opt (const char *arg)\n   /* Check if the named plugin has already been specified earlier in the\n      command-line.  */\n   if (plugin_name_args_tab\n-      && ((slot = htab_find_slot (plugin_name_args_tab, name, NO_INSERT))\n+      && ((slot = htab_find_slot_with_hash (plugin_name_args_tab, name,\n+\t\t\t\t\t    htab_hash_string (name), NO_INSERT))\n           != NULL))\n     {\n       struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n@@ -329,7 +341,8 @@ parse_plugin_arg_opt (const char *arg)\n static void\n register_plugin_info (const char* name, struct plugin_info *info)\n {\n-  void **slot = htab_find_slot (plugin_name_args_tab, name, NO_INSERT);\n+  void **slot = htab_find_slot_with_hash (plugin_name_args_tab, name,\n+\t\t\t\t\t  htab_hash_string (name), NO_INSERT);\n   struct plugin_name_args *plugin;\n \n   if (slot == NULL)\n@@ -635,7 +648,8 @@ init_one_plugin (void **slot, void * ARG_UNUSED (info))\n   bool ok = try_init_one_plugin (plugin);\n   if (!ok)\n     {\n-      htab_remove_elt (plugin_name_args_tab, plugin->base_name);\n+      htab_remove_elt_with_hash (plugin_name_args_tab, plugin->base_name,\n+\t\t\t\t htab_hash_string (plugin->base_name));\n       XDELETE (plugin);\n     }\n   return 1;"}]}