{"sha": "6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4NDg2NTIzZjYxYmYwYWE0NzZkZmE0MTk3ZDFlM2I3MWEwYThmMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-17T03:43:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-17T03:43:20Z"}, "message": "test: add new Go tests from source repo", "tree": {"sha": "a541a5fce8cdbf530f16fcc13597bda0b67a5471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a541a5fce8cdbf530f16fcc13597bda0b67a5471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b"}], "stats": {"total": 13602, "additions": 13602, "deletions": 0}, "files": [{"sha": "e175f83633919ab8a5f28611c6bdab6b9062922f", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61204.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61204.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61204.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61204.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61204: Making temporaries for zero-sized types caused an ICE in gccgo.\n+// This is a reduction of a program reported by GoSmith.\n+\n+package main\n+\n+func main() {\n+\ttype t [0]int\n+\tvar v t\n+\tv, _ = [0]int{}, 0\n+\t_ = v\n+}"}, {"sha": "642bc610bbf7e7d37727d4425190366fb0101fbb", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61244.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61244.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61244.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61244.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61244: Type descriptors expressions were not traversed, causing an ICE\n+// in gccgo when producing the backend representation.\n+// This is a reduction of a program reported by GoSmith.\n+\n+package main\n+\n+const a = 0\n+\n+func main() {\n+\tswitch i := (interface{})(a); i.(type) {\n+\tcase [0]string:\n+\t}\n+}"}, {"sha": "797d6c7ffca829178c0bb6d0ed6c11d2e113a7a8", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61246.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61246.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61246.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61246.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61246: Switch conditions could be untyped, causing an ICE when the\n+// conditions were lowered into temporaries.\n+// This is a reduction of a program reported by GoSmith.\n+\n+package main\n+\n+func main() {\n+\tswitch 1 != 1 {\n+\tdefault:\n+\t}\n+}"}, {"sha": "cb59c9fa7c85c5cf13c9308952e731db752f3e16", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61248.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61248.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61248.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61248.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61248: Transformations to recover calls made them fail typechecking in gccgo.\n+\n+package main\n+\n+func main() {\n+\tvar f func(int, interface{})\n+\tgo f(0, recover())\n+}"}, {"sha": "696b26e64d304ca5ba212b1420230b2fd35fab08", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61253.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61253.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61253.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61253.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61253: gccgo incorrectly parsed the\n+// `RecvStmt = ExpressionList \"=\" RecvExpr` production.\n+\n+package main\n+\n+func main() {\n+\tc := make(chan int)\n+\tv := new(int)\n+\tb := new(bool)\n+\tselect {\n+\tcase (*v), (*b) = <-c:\n+\t}\n+\n+}"}, {"sha": "82e666e5c2980b5dd4d470aedc713424569eb24d", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61254.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61254.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61254.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61254.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61254: gccgo failed to compile a slice expression with missing indices.\n+\n+package main\n+\n+func main() {\n+\t[][]int{}[:][0][0]++\n+}"}, {"sha": "288fb54e517f319374046bd365a79903ab7cb78a", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61255.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61255.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61255.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61255.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61255: gccgo failed to compile IncDec statements on variadic functions.\n+\n+package main\n+\n+func main() {\n+\tappend([]byte{}, 0)[0]++\n+}"}, {"sha": "e4dcb3376ab63b29358ab1ddcfc01d3d31f11101", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61258.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61258.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61258.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61258.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61258: gccgo crashed when deleting a zero-sized key from a map.\n+\n+package main\n+\n+func main() {\n+\tdelete(make(map[[0]bool]int), [0]bool{})\n+}"}, {"sha": "a4092f5bec31350d004553804609c72c2cef4ef1", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61264.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61264.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61264.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61264.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61264: IncDec statements involving composite literals caused in ICE in gccgo.\n+\n+package main\n+\n+func main() {\n+        map[int]int{}[0]++\n+}"}, {"sha": "be792332f58c7799cee2635c5a8d9f5f0f51215f", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61265.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61265.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61265.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61265.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61265: The gccgo middle-end failed to represent array composite literals\n+// where the elements are zero-sized values.\n+// This is a reduction of a program reported by GoSmith.\n+\n+package p\n+\n+var a = [1][0]int{B}[0]\n+var B = [0]int{}\n+var c = [1]struct{}{D}[0]\n+var D = struct{}{}"}, {"sha": "ed78b1ed2cd2c53858775cbc76e5109feddd8050", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc61273.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61273.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61273.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc61273.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR61273: gccgo failed to compile a SendStmt in the PostStmt of a ForClause\n+// that involved predefined constants.\n+\n+package main\n+\n+func main() {\n+\tc := make(chan bool, 1)\n+\tfor ; false; c <- false {\n+\t}\n+}"}, {"sha": "1e5d11605f0ec1d75659184de20134f8a05bf036", "filename": "gcc/testsuite/go.test/test/fixedbugs/gcc65755.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc65755.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc65755.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fgcc65755.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// PR65755: Incorrect type descriptor for type defined within method.\n+\n+package main\n+\n+import \"reflect\"\n+\n+type S1 struct{}\n+\n+func (S1) Fix() string {\n+\ttype s struct {\n+\t\tf int\n+\t}\n+\treturn reflect.TypeOf(s{}).Field(0).Name\n+}\n+\n+type S2 struct{}\n+\n+func (S2) Fix() string {\n+\ttype s struct {\n+\t\tg bool\n+\t}\n+\treturn reflect.TypeOf(s{}).Field(0).Name\n+}\n+\n+func main() {\n+\tf1 := S1{}.Fix()\n+\tf2 := S2{}.Fix()\n+\tif f1 != \"f\" || f2 != \"g\" {\n+\t\tpanic(f1 + f2)\n+\t}\n+}"}, {"sha": "db3f8aa5ddd00353874dd6dafe576ad15f1d4b70", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20029.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20029.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20029.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20029.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,32 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20029: make sure we zero at VARKILLs of\n+// ambiguously live variables.\n+// The ambiguously live variable here is the hiter\n+// for the inner range loop.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func f(m map[int]int) {\n+outer:\n+\tfor i := 0; i < 10; i++ {\n+\t\tfor k := range m {\n+\t\t\tif k == 5 {\n+\t\t\t\tcontinue outer\n+\t\t\t}\n+\t\t}\n+\t\truntime.GC()\n+\t\tbreak\n+\t}\n+\truntime.GC()\n+}\n+func main() {\n+\tm := map[int]int{1: 2, 2: 3, 3: 4}\n+\tf(m)\n+}"}, {"sha": "236a1bd40a73d5b841068ad855b199cf42d77688", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20097.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20097.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20097.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20097.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20097: ensure that we CSE multiple Select ops with\n+// the same underlying type\n+\n+package main\n+\n+type T int64\n+\n+func f(x, y int64) (int64, T) {\n+\ta := x / y\n+\tb := T(x) / T(y)\n+\treturn a, b\n+}"}, {"sha": "67ba5aee9a81e1e7cf2a39ad3393ec643802b77e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20145.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20145.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20145.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20145.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20145: some func types weren't dowidth-ed by the front end,\n+// leading to races in the backend.\n+\n+package p\n+\n+func f() {\n+\t_ = (func())(nil)\n+}"}, {"sha": "9065868d7f2ba1c3690e860efc4bc754671f77a7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20185.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20185.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20185.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20185.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20185: type switching on untyped values (e.g. nil or consts)\n+// caused an internal compiler error.\n+\n+package p\n+\n+func F() {\n+\tswitch t := nil.(type) { // ERROR \"cannot type switch on non-interface value\"\n+\tdefault:\n+\t\t_ = t\n+\t}\n+}\n+\n+const x = 1\n+\n+func G() {\n+\tswitch t := x.(type) { // ERROR \"cannot type switch on non-interface value|declared but not used\"\n+\tdefault:\n+\t}\n+}"}, {"sha": "f59923106dd9521bc239ce81060908b9e710cd00", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20227.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20227.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20227.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20227.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20227: panic while constructing constant \"1i/1e-600000000\"\n+\n+package p\n+\n+var _ = 1 / 1e-600000000i  // ERROR \"division by zero\"\n+var _ = 1i / 1e-600000000  // ERROR \"division by zero\"\n+var _ = 1i / 1e-600000000i // ERROR \"division by zero\"\n+\n+var _ = 1 / (1e-600000000 + 1e-600000000i)  // ERROR \"division by zero\"\n+var _ = 1i / (1e-600000000 + 1e-600000000i) // ERROR \"division by zero\""}, {"sha": "8202ab3e2215467a36405b0a7ca232220edb376e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20333.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20333.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20333.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20333.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20333: early checkwidth of [...] arrays led to compilation errors.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfmt.Println(&[...]string{\"abc\", \"def\", \"ghi\"})\n+}"}, {"sha": "185c2f06ea7a68c698876c7e23a3da7a82c18a09", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20335.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20335.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20335.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20335.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20335: don't reorder loads with stores.\n+// This test should fail on the ssacheck builder\n+// without the fix in the CL that added this file.\n+// TODO: check the generated assembly?\n+\n+package a\n+\n+import \"sync/atomic\"\n+\n+func f(p, q *int32) bool {\n+\tx := *q\n+\treturn atomic.AddInt32(p, 1) == x\n+}"}, {"sha": "9e7649fc9589dac3b275da6a2972b2404774d1e7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20415.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20415.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20415.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20415.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,33 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure redeclaration errors report correct position.\n+\n+package p\n+\n+// 1\n+var f byte\n+\n+var f interface{} // ERROR \"previous declaration at issue20415.go:12|redefinition\"\n+\n+func _(f int) {\n+}\n+\n+// 2\n+var g byte\n+\n+func _(g int) {\n+}\n+\n+var g interface{} // ERROR \"previous declaration at issue20415.go:20|redefinition\"\n+\n+// 3\n+func _(h int) {\n+}\n+\n+var h byte\n+\n+var h interface{} // ERROR \"previous declaration at issue20415.go:31|redefinition\""}, {"sha": "eeaaf37358f8a55d02b44e6503112b774c7f6be4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20529.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20529.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20529.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20529.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,21 @@\n+// errorcheck\n+\n+// +build amd64\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20529: Large stack frames caused compiler panics.\n+// Only tested on amd64 because the test only makes sense\n+// on a 64 bit system, and it is platform-agnostic,\n+// so testing one suffices.\n+\n+package p\n+\n+import \"runtime\"\n+\n+func f() { // GC_ERROR \"stack frame too large\"\n+\tx := [][]int{1e9: []int{}}\n+\truntime.KeepAlive(x)\n+}"}, {"sha": "51f0bd8e39d1632f0973b9bb2026b35a977c0d8f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20530.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20530.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20530.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20530.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var a uint8\n+\n+//go:noinline\n+func f() {\n+\tb := int8(func() int32 { return -1 }())\n+\ta = uint8(b)\n+\tif int32(a) != 255 {\n+\t\t// Failing case prints 'got 255 expected 255'\n+\t\tprintln(\"got\", a, \"expected 255\")\n+\t}\n+}\n+\n+//go:noinline\n+func g() {\n+\tb := int8(func() uint32 { return 0xffffffff }())\n+\ta = uint8(b)\n+\tif int32(a) != 255 {\n+\t\t// Failing case prints 'got 255 expected 255'\n+\t\tprintln(\"got\", a, \"expected 255\")\n+\t}\n+}\n+\n+func main() {\n+\tf()\n+\tg()\n+}"}, {"sha": "d4d513b0509163bb954accfe4382f80edf961e0e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20602.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20602.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20602.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20602.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that the correct (not implicitly dereferenced)\n+// type is reported in the error message.\n+\n+package p\n+\n+var p = &[1]complex128{0}\n+var _ = real(p)  // ERROR \"type \\*\\[1\\]complex128|argument must have complex type\"\n+var _ = imag(p)\t // ERROR \"type \\*\\[1\\]complex128|argument must have complex type\""}, {"sha": "fc37136d906bf26069d1fb212cd8dd7f0b60456c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20682.dir/p.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fp.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"strings\"\n+\n+type T struct{}\n+\n+func (T) M() {\n+\tstrings.HasPrefix(\"\", \"\")\n+}"}, {"sha": "9554569de0d9ae05c6f11f0668ab93c488b1eea4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20682.dir/q.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fq.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fq.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fq.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package q\n+\n+import \"./p\"\n+\n+type T struct{}\n+\n+func (T) M() interface{} {\n+\treturn &p.T{}\n+}"}, {"sha": "73dfe1b3af2cab0ad473d181db19b344f173817a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20682.dir/r.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.dir%2Fr.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package r\n+\n+import \"./q\"\n+\n+type T struct {\n+\tq.T\n+}"}, {"sha": "8000a5224ffba9b9d443462063c8bc838f6a2968", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20682.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20682.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "b71a25dc4242beb5919bc8502c3055198e25ef4e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20739.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20739.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20739.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20739.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func F() {\n+\tvar x struct {\n+\t\tx *int\n+\t\tw [1e9][1e9][1e9][0]*int\n+\t\ty *int\n+\t}\n+\tprintln(&x)\n+}"}, {"sha": "de2d3ad16a854980338b7c63330123fcfc64b752", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20749.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20749.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20749.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20749.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+// Verify that the compiler complains even if the array\n+// has length 0.\n+var a [0]int\n+var _ = a[2:] // ERROR \"invalid slice index 2|array index out of bounds\"\n+\n+var b [1]int\n+var _ = b[2:] // ERROR \"invalid slice index 2|array index out of bounds\""}, {"sha": "53c4f615e17fadd2e3e6ff17a2e2884c439a6935", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20780.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20780.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20780.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20780.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// We have a limit of 1GB for stack frames.\n+// Make sure we include the callee args section.\n+\n+package main\n+\n+func f() { // GC_ERROR \"stack frame too large\"\n+\tvar x [800e6]byte\n+\tg(x)\n+\treturn\n+}\n+\n+//go:noinline\n+func g([800e6]byte) {}"}, {"sha": "96b61ec728912c4acc569c7f53e2da492878cd46", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20811.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20811.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20811.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20811.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 20811: slice-in-bound check is lowered incorrectly on\n+// amd64p32.\n+\n+package main\n+\n+func main() {\n+\ti := g()\n+\t_ = \"x\"[int32(i)]\n+\tj := g()\n+\t_ = \"x\"[:int32(j)]\n+}\n+\n+//go:noinline\n+func g() int64 {\n+\treturn 4398046511104\n+}\n+"}, {"sha": "d0df831dfddd53c479dbfd80c4d13d8aacf46625", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20812.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20812.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20812.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20812.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\t_ = int(\"1\")      // ERROR \"cannot convert|invalid type conversion\"\n+\t_ = bool(0)       // ERROR \"cannot convert|invalid type conversion\"\n+\t_ = bool(\"false\") // ERROR \"cannot convert|invalid type conversion\"\n+\t_ = int(false)    // ERROR \"cannot convert|invalid type conversion\"\n+\t_ = string(true)  // ERROR \"cannot convert|invalid type conversion\"\n+}"}, {"sha": "b147a8903ce9776a31b24fda9aa5f5f201de3931", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue20813.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20813.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20813.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue20813.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\t1 = 2 // ERROR \"cannot assign to 1|invalid left hand side\"\n+}"}, {"sha": "e365a5e14fc937b566e9c135b574bcb4cde69600", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21048.go", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21048.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21048.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21048.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,72 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 21048: s390x merged address generation into stores\n+// to unaligned global variables. This resulted in an illegal\n+// instruction.\n+\n+package main\n+\n+type T struct {\n+\t_ [1]byte\n+\ta [2]byte // offset: 1\n+\t_ [3]byte\n+\tb [2]uint16 // offset: 6\n+\t_ [2]byte\n+\tc [2]uint32 // offset: 12\n+\t_ [2]byte\n+\td [2]int16 // offset: 22\n+\t_ [2]byte\n+\te [2]int32 // offset: 28\n+}\n+\n+var Source, Sink T\n+\n+func newT() T {\n+\treturn T{\n+\t\ta: [2]byte{1, 2},\n+\t\tb: [2]uint16{1, 2},\n+\t\tc: [2]uint32{1, 2},\n+\t\td: [2]int16{1, 2},\n+\t\te: [2]int32{1, 2},\n+\t}\n+}\n+\n+//go:noinline\n+func moves() {\n+\tSink.a = Source.a\n+\tSink.b = Source.b\n+\tSink.c = Source.c\n+\tSink.d = Source.d\n+\tSink.e = Source.e\n+}\n+\n+//go:noinline\n+func loads() *T {\n+\tt := newT()\n+\tt.a = Source.a\n+\tt.b = Source.b\n+\tt.c = Source.c\n+\tt.d = Source.d\n+\tt.e = Source.e\n+\treturn &t\n+}\n+\n+//go:noinline\n+func stores() {\n+\tt := newT()\n+\tSink.a = t.a\n+\tSink.b = t.b\n+\tSink.c = t.c\n+\tSink.d = t.d\n+\tSink.e = t.e\n+}\n+\n+func main() {\n+\tmoves()\n+\tloads()\n+\tstores()\n+}"}, {"sha": "f2ee2526717fa863ccc0f3a959bb0c2210a77bfd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21120.dir/a.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type S struct {\n+\tx int\n+}\n+\n+func V() interface{} {\n+\treturn S{0}\n+}"}, {"sha": "b00bd53a5d58ebacff622d1f80682a0b956fb559", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21120.dir/b.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"reflect\"\n+\n+type X int\n+\n+func F1() string {\n+\ttype x X\n+\n+\ts := struct {\n+\t\t*x\n+\t}{nil}\n+\tv := reflect.TypeOf(s)\n+\treturn v.Field(0).PkgPath\n+}\n+\n+func F2() string {\n+\ttype y X\n+\n+\ts := struct {\n+\t\t*y\n+\t}{nil}\n+\tv := reflect.TypeOf(s)\n+\treturn v.Field(0).PkgPath\n+}"}, {"sha": "1f1ec30e567200df91c8cd5339feb2aa03f22721", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21120.dir/main.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\n+\t\"./a\"\n+\t\"./b\"\n+)\n+\n+func main() {\n+\t// Make sure the reflect information for a.S is in the executable.\n+\t_ = a.V()\n+\n+\tb1 := b.F1()\n+\tb2 := b.F2()\n+\tif b1 != b2 {\n+\t\tfmt.Printf(\"%q (from b.F1()) != %q (from b.F2())\\n\", b1, b2)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "ea896ce8e1a788ec3d591416729609c522768d0c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21120.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21120.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// rundir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The compiler was using an incomplete symbol name for reflect name data,\n+// permitting an invalid merge in the linker, producing an incorrect\n+// exported flag bit.\n+\n+package ignored"}, {"sha": "bd5a4b550eaa9d82bc30d0f72d7f10105adec2f1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21221.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21221.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21221.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21221.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tif unsafe.Pointer(uintptr(0)) != unsafe.Pointer(nil) {\n+\t\tpanic(\"fail\")\n+\t}\n+\tif (*int)(unsafe.Pointer(uintptr(0))) != (*int)(nil) {\n+\t\tpanic(\"fail\")\n+\t}\n+}"}, {"sha": "c845ec52b3876fc5a9a470c9ddecf8d71b0a2a04", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21256.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21256.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21256.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21256.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var main = func() {} // ERROR \"must be func|redefinition\""}, {"sha": "77a1abad9bb3b7ad5306a8b84fc2f5f5e05f8ad2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21273.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21273.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21273.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21273.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T0 T0 // ERROR \"invalid recursive type\"\n+type _ map[T0]int\n+\n+type T1 struct{ T1 } // ERROR \"invalid recursive type\"\n+type _ map[T1]int\n+\n+func f() {\n+\ttype T2 T2 // ERROR \"invalid recursive type\"\n+\ttype _ map[T2]int\n+}\n+\n+func g() {\n+\ttype T3 struct{ T3 } // ERROR \"invalid recursive type\"\n+\ttype _ map[T3]int\n+}\n+\n+func h() {\n+\ttype T4 struct{ m map[T4]int } // ERROR \"invalid map key\"\n+\ttype _ map[T4]int              // GC_ERROR \"invalid map key\"\n+}"}, {"sha": "f4ec422371349079eda33dbd999fc9b493bdd7ce", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21317.go", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21317.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21317.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21317.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,60 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// As of \"Mon 6 Nov 2017\", run.go doesn't yet have proper\n+// column matching so instead match the output manually\n+// by exec-ing\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\tif runtime.Compiler != \"gc\" || runtime.GOOS == \"js\" {\n+\t\treturn\n+\t}\n+\n+\tf, err := ioutil.TempFile(\"\", \"issue21317.go\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tfmt.Fprintf(f, `\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+        n, err := fmt.Println(1)\n+}\n+`)\n+\tf.Close()\n+\tdefer os.RemoveAll(f.Name())\n+\n+\t// compile and test output\n+\tcmd := exec.Command(\"go\", \"tool\", \"compile\", f.Name())\n+\tout, err := cmd.CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatalf(\"expected cmd/compile to fail\")\n+\t}\n+\twantErrs := []string{\n+\t\t\"7:9: n declared but not used\",\n+\t\t\"7:12: err declared but not used\",\n+\t}\n+\toutStr := string(out)\n+\tfor _, want := range wantErrs {\n+\t\tif !strings.Contains(outStr, want) {\n+\t\t\tlog.Fatalf(\"failed to match %q\\noutput: %q\", want, outStr)\n+\t\t}\n+\t}\n+}"}, {"sha": "ae6161ccf52d3926a8030607f231e3b7511900fb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21576.go", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21576.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21576.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21576.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,63 @@\n+// run\n+\n+// +build !nacl,!js\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+//\n+// Ensure that deadlock detection can still\n+// run even with an import of \"_ os/signal\".\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"time\"\n+)\n+\n+const prog = `\n+package main\n+\n+import _ \"os/signal\"\n+\n+func main() {\n+  c := make(chan int)\n+  c <- 1\n+}\n+`\n+\n+func main() {\n+\tdir, err := ioutil.TempDir(\"\", \"21576\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\tfile := filepath.Join(dir, \"main.go\")\n+\tif err := ioutil.WriteFile(file, []byte(prog), 0655); err != nil {\n+\t\tlog.Fatalf(\"Write error %v\", err)\n+\t}\n+\n+\t// Using a timeout of 1 minute in case other factors might slow\n+\t// down the start of \"go run\". See https://golang.org/issue/34836.\n+\tctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n+\tdefer cancel()\n+\n+\tcmd := exec.CommandContext(ctx, \"go\", \"run\", file)\n+\toutput, err := cmd.CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatalf(\"Passed, expected an error\")\n+\t}\n+\n+\twant := []byte(\"fatal error: all goroutines are asleep - deadlock!\")\n+\tif !bytes.Contains(output, want) {\n+\t\tlog.Fatalf(\"Unmatched error message %q:\\nin\\n%s\\nError: %v\", want, output, err)\n+\t}\n+}"}, {"sha": "66d4e3a7f5ab51357f44452c56880c1ebde8d02d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21655.go", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21655.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21655.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21655.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,62 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure assembly offsets don't get too large.\n+\n+// To trigger issue21655, the index offset needs to be small\n+// enough to fit into an int32 (to get rewritten to an ADDQconst)\n+// but large enough to overflow an int32 after multiplying by the stride.\n+\n+package main\n+\n+func f1(a []int64, i int64) int64 {\n+\treturn a[i+1<<30]\n+}\n+func f2(a []int32, i int64) int32 {\n+\treturn a[i+1<<30]\n+}\n+func f3(a []int16, i int64) int16 {\n+\treturn a[i+1<<30]\n+}\n+func f4(a []int8, i int64) int8 {\n+\treturn a[i+1<<31]\n+}\n+func f5(a []float64, i int64) float64 {\n+\treturn a[i+1<<30]\n+}\n+func f6(a []float32, i int64) float32 {\n+\treturn a[i+1<<30]\n+}\n+\n+// Note: Before the fix for issue 21655, f{1,2,5,6} made\n+// the compiler crash. f3 silently generated the wrong\n+// code, using an offset of -1<<31 instead of 1<<31.\n+// (This is due to the assembler accepting offsets\n+// like 0x80000000 and silently using them as\n+// signed 32 bit offsets.)\n+// f4 was ok, but testing it can't hurt.\n+\n+func f7(ss []*string, i int) string {\n+\tconst offset = 3 << 29 // 3<<29 * 4 = 3<<31 = 1<<31 mod 1<<32.\n+\tif i > offset {\n+\t\treturn *ss[i-offset]\n+\t}\n+\treturn \"\"\n+}\n+func f8(ss []*string, i int) string {\n+\tconst offset = 3<<29 + 10\n+\tif i > offset {\n+\t\treturn *ss[i-offset]\n+\t}\n+\treturn \"\"\n+}\n+func f9(ss []*string, i int) string {\n+\tconst offset = 3<<29 - 10\n+\tif i > offset {\n+\t\treturn *ss[i-offset]\n+\t}\n+\treturn \"\"\n+}"}, {"sha": "2f07d640d98e64535007dd0dbb9dd01a4cd085e8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21770.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21770.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21770.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21770.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 21770: gccgo incorrectly accepts \"p.f = 0\" where p is **struct\n+\n+package p\n+\n+type PP **struct{ f int }\n+\n+func f() {\n+\t// anonymous type\n+\tvar p **struct{ f int }\n+\tp.f = 0 // ERROR \"field\"\n+\t// named type\n+\tvar p2 PP\n+\tp2.f = 0 // ERROR \"field\"\n+}"}, {"sha": "d146200eaee7d53372fa4c9aab593264eb608e5d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21808.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure println() prints a blank line.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfmt.Println(\"A\")\n+\tprintln()\n+\tfmt.Println(\"B\")\n+}"}, {"sha": "655da036b23d6843b0cc803ed210fdc921ed1d12", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21808.out", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21808.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,3 @@\n+A\n+\n+B"}, {"sha": "1029ca044b6a53d179d867548c1f60b517ad84ac", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21879.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+)\n+\n+func main() {\n+\tprintln(caller().frame.Function)\n+\n+\t// Used to erroneously print \"main.call.name\" instead of\n+\t// \"main.main\".\n+\tprintln(caller().name())\n+}\n+\n+func caller() call {\n+\tvar pcs [3]uintptr\n+\tn := runtime.Callers(1, pcs[:])\n+\tframes := runtime.CallersFrames(pcs[:n])\n+\tframe, _ := frames.Next()\n+\tframe, _ = frames.Next()\n+\n+\treturn call{frame: frame}\n+}\n+\n+type call struct {\n+\tframe runtime.Frame\n+}\n+\n+func (c call) name() string {\n+\treturn c.frame.Function\n+}"}, {"sha": "066f1a838715bc77136e2668453f284300ab9da0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21879.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21879.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,2 @@\n+main.main\n+main.main"}, {"sha": "f77e046960b6dddc11b5d6e3d4e295f8391286ed", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21882.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21882.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21882.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21882.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T [2]T // ERROR \"invalid recursive type\""}, {"sha": "73c3f43596ff406d3ad4c6230231a30c59a19405", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21887.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 21887: println(^uint(0)) fails to compile\n+\n+package main\n+\n+import \"strconv\"\n+\n+func main() {\n+\tif strconv.IntSize == 32 {\n+\t\tprintln(^uint(0))\n+\t} else {\n+\t\tprintln(^uint32(0))\n+\t}\n+\n+\tif strconv.IntSize == 64 {\n+\t\tprintln(^uint(0))\n+\t} else {\n+\t\tprintln(^uint64(0))\n+\t}\n+}"}, {"sha": "664b67d742248ca1f9d455b8bcd1931fe10b9357", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21887.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21887.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,2 @@\n+4294967295\n+18446744073709551615"}, {"sha": "996bd63d09d82de6bb1279d06d1798d91137b690", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21963.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21963.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21963.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21963.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+//go:noinline\n+func f(x []int32, y *int8) int32 {\n+\tc := int32(int16(*y))\n+\truntime.GC()\n+\treturn x[0] * c\n+}\n+\n+func main() {\n+\tvar x = [1]int32{5}\n+\tvar y int8 = -1\n+\tif got, want := f(x[:], &y), int32(-5); got != want {\n+\t\tpanic(fmt.Sprintf(\"wanted %d, got %d\", want, got))\n+\t}\n+}"}, {"sha": "addf786c037a062caacaf378d7d505fb4a5460d3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21979.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21979.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21979.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21979.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,46 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\t_ = bool(\"\")      // ERROR \"cannot convert .. \\(type untyped string\\) to type bool|invalid type conversion\"\n+\t_ = bool(1)       // ERROR \"cannot convert 1 \\(type untyped int\\) to type bool|invalid type conversion\"\n+\t_ = bool(1.0)     // ERROR \"cannot convert 1 \\(type untyped float\\) to type bool|invalid type conversion\"\n+\t_ = bool(-4 + 2i) // ERROR \"cannot convert -4 \\+ 2i \\(type untyped complex\\) to type bool|invalid type conversion\"\n+\n+\t_ = string(true) // ERROR \"cannot convert true \\(type untyped bool\\) to type string|invalid type conversion\"\n+\t_ = string(-1)\n+\t_ = string(1.0)     // ERROR \"cannot convert 1 \\(type untyped float\\) to type string|invalid type conversion\"\n+\t_ = string(-4 + 2i) // ERROR \"cannot convert -4 \\+ 2i \\(type untyped complex\\) to type string|invalid type conversion\"\n+\n+\t_ = int(\"\")   // ERROR \"cannot convert .. \\(type untyped string\\) to type int|invalid type conversion\"\n+\t_ = int(true) // ERROR \"cannot convert true \\(type untyped bool\\) to type int|invalid type conversion\"\n+\t_ = int(-1)\n+\t_ = int(1)\n+\t_ = int(1.0)\n+\t_ = int(-4 + 2i) // ERROR \"truncated to integer\"\n+\n+\t_ = uint(\"\")   // ERROR \"cannot convert .. \\(type untyped string\\) to type uint|invalid type conversion\"\n+\t_ = uint(true) // ERROR \"cannot convert true \\(type untyped bool\\) to type uint|invalid type conversion\"\n+\t_ = uint(-1)   // ERROR \"constant -1 overflows uint|integer constant overflow\"\n+\t_ = uint(1)\n+\t_ = uint(1.0)\n+\t_ = uint(-4 + 2i) // ERROR \"constant -4 overflows uint\" \"truncated to integer\"\n+\n+\t_ = float64(\"\")   // ERROR \"cannot convert .. \\(type untyped string\\) to type float64|invalid type conversion\"\n+\t_ = float64(true) // ERROR \"cannot convert true \\(type untyped bool\\) to type float64|invalid type conversion\"\n+\t_ = float64(-1)\n+\t_ = float64(1)\n+\t_ = float64(1.0)\n+\t_ = float64(-4 + 2i) // ERROR \"truncated to\"\n+\n+\t_ = complex128(\"\")   // ERROR \"cannot convert .. \\(type untyped string\\) to type complex128|invalid type conversion\"\n+\t_ = complex128(true) // ERROR \"cannot convert true \\(type untyped bool\\) to type complex128|invalid type conversion\"\n+\t_ = complex128(-1)\n+\t_ = complex128(1)\n+\t_ = complex128(1.0)\n+}"}, {"sha": "4dbf06ee315bf57dfefbf029810ce07283e88c67", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue21988.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21988.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21988.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue21988.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 21988: panic on switch case with invalid value\n+\n+package p\n+\n+const X = Wrong(0) // ERROR \"undefined: Wrong|undefined name .*Wrong\"\n+\n+func _() {\n+\tswitch 0 {\n+\tcase X:\n+\t}\n+}"}, {"sha": "8d84047e078e24c337f9570a52c6600ed8dd8509", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22063.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22063.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22063.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22063.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 22063: panic on interface switch case with invalid name\n+\n+package p\n+\n+const X = Wrong(0) // ERROR \"undefined: Wrong|reference to undefined name .*Wrong\"\n+\n+func _() {\n+\tswitch interface{}(nil) {\n+\tcase X:\n+\t}\n+}"}, {"sha": "5d628b96bd3a08b574c1a156e72565c5f1115745", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22076.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22076.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22076.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22076.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 22076: Couldn't use \":=\" to declare names that refer to\n+// dot-imported symbols.\n+\n+package p\n+\n+import . \"bytes\"\n+\n+var _ Reader // use \"bytes\" import\n+\n+func _() {\n+\tBuffer := 0\n+\t_ = Buffer\n+}\n+\n+func _() {\n+\tfor Buffer := range []int{} {\n+\t\t_ = Buffer\n+\t}\n+}"}, {"sha": "a385102d08199fa52bb8e3556da1b68164629390", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22083.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22083.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22083.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22083.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,41 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The compiler was panicking on the wrong line number, where\n+// the panic was occurring in an inlined call.\n+\n+package main\n+\n+import (\n+\t\"runtime/debug\"\n+\t\"strings\"\n+)\n+\n+type Wrapper struct {\n+\ta []int\n+}\n+\n+func (w Wrapper) Get(i int) int {\n+\treturn w.a[i]\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\te := recover()\n+\t\tif e == nil {\n+\t\t\tpanic(\"bounds check didn't fail\")\n+\t\t}\n+\t\tstk := string(debug.Stack())\n+\t\tif !strings.Contains(stk, \"issue22083.go:40\") {\n+\t\t\tpanic(\"wrong stack trace: \" + stk)\n+\t\t}\n+\t}()\n+\tfoo := Wrapper{a: []int{0, 1, 2}}\n+\t_ = foo.Get(0)\n+\t_ = foo.Get(1)\n+\t_ = foo.Get(2)\n+\t_ = foo.Get(3) // stack trace should mention this line\n+}"}, {"sha": "c874c1caa100d0bf0fdf9a8c8846da71d9a1956a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22198.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22198.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22198.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22198.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package issue22198\n+\n+func f(a *bool, b bool) {\n+\tif b {\n+\t\treturn\n+\t}\n+\tc := '\\n'\n+\tif b {\n+\t\tc = ' '\n+\t}\n+\t*a = c == '\\n'\n+}"}, {"sha": "37440d9bf0ec4e27f1373a8f383c1f6033cbed4f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22200.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f1(x *[1<<30 - 1e6]byte) byte {\n+\tfor _, b := range *x {\n+\t\treturn b\n+\t}\n+\treturn 0\n+}\n+func f2(x *[1<<30 + 1e6]byte) byte { // GC_ERROR \"stack frame too large\"\n+\tfor _, b := range *x {\n+\t\treturn b\n+\t}\n+\treturn 0\n+}"}, {"sha": "ce20923334c03230c05ee428fda2a0fb24a0ccaf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22200b.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22200b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build !386,!amd64p32,!arm,!mips,!mipsle\n+\n+package p\n+\n+func f3(x *[1 << 31]byte) byte { // GC_ERROR \"stack frame too large\"\n+\tfor _, b := range *x {\n+\t\treturn b\n+\t}\n+\treturn 0\n+}\n+func f4(x *[1 << 32]byte) byte { // GC_ERROR \"stack frame too large\"\n+\tfor _, b := range *x {\n+\t\treturn b\n+\t}\n+\treturn 0\n+}\n+func f5(x *[1 << 33]byte) byte { // GC_ERROR \"stack frame too large\"\n+\tfor _, b := range *x {\n+\t\treturn b\n+\t}\n+\treturn 0\n+}"}, {"sha": "a675655b235af6b1c05df607d75912e5a78a4826", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22326.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var (\n+\t_ = d\n+\t_ = f(\"_\", c, b)\n+\ta = f(\"a\")\n+\tb = f(\"b\")\n+\tc = f(\"c\")\n+\td = f(\"d\")\n+)\n+\n+func f(s string, rest ...int) int {\n+\tprint(s)\n+\treturn 0\n+}\n+\n+func main() {\n+\tprintln()\n+}"}, {"sha": "f02043893cb5fa02ae500680282b8d9e04a6b714", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22326.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22326.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+abc_d"}, {"sha": "7b21d834029d843ab3df674e2d849dea378eb237", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22327.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22327.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22327.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22327.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Using a multi-result function as an argument to\n+// append should compile successfully. Previously there\n+// was a missing *int -> interface{} conversion that caused\n+// the compiler to ICE.\n+\n+package p\n+\n+func f() ([]interface{}, *int) {\n+\treturn nil, nil\n+}\n+\n+var _ = append(f())"}, {"sha": "289b434a74ced95b0619a58b52174ee1aff54462", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22429.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22429.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22429.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22429.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure SSA->assembly pass can handle SP as an index register.\n+\n+package p\n+\n+type T struct {\n+\ta,b,c,d float32\n+}\n+\n+func f(a *[8]T, i,j,k int) float32 {\n+\tb := *a\n+\treturn b[i].a + b[j].b + b[k].c\n+}"}, {"sha": "5c899295771dacd11776990d3a9d40bb88670229", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22458.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22458.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22458.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22458.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure KeepAlive introduces a use of the spilled variable.\n+\n+package main\n+\n+import \"runtime\"\n+\n+type node struct {\n+        next *node\n+}\n+\n+var x bool\n+\n+func main() {\n+        var head *node\n+        for x {\n+                head = &node{head}\n+        }\n+\n+        runtime.KeepAlive(head)\n+}"}, {"sha": "9e726f353cbc1327a9ce9a0061a57d9344f11271", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22605.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22605.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22605.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22605.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// We were picking up a special noalg type from typelinks.\n+\n+package main\n+\n+import \"reflect\"\n+\n+func f(m map[string]int) int {\n+\treturn m[\"a\"]\n+}\n+\n+func g(m map[[8]string]int) int {\n+\tt := reflect.ArrayOf(8, reflect.TypeOf(\"\"))\n+\ta := reflect.New(t).Elem()\n+\treturn m[a.Interface().([8]string)]\n+}\n+\n+func main() {\n+\tm := map[[8]string]int{}\n+\tg(m)\n+}"}, {"sha": "44ba42ac968cca00dc93b8476e8954ae063399c1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22660.go", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22660.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22660.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22660.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,50 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\tif runtime.GOOS == \"js\" {\n+\t\treturn // no file system available on builders\n+\t}\n+\n+\tf, err := ioutil.TempFile(\"\", \"issue22660.go\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tf.Close()\n+\tdefer os.Remove(f.Name())\n+\n+\t// path must appear in error messages even if we strip them with -trimpath\n+\tpath := filepath.Join(\"users\", \"xxx\", \"go\")\n+\tvar src bytes.Buffer\n+\tfmt.Fprintf(&src, \"//line %s:1\\n\", filepath.Join(path, \"foo.go\"))\n+\n+\tif err := ioutil.WriteFile(f.Name(), src.Bytes(), 0660); err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tout, err := exec.Command(\"go\", \"tool\", \"compile\", fmt.Sprintf(\"-trimpath=%s\", path), f.Name()).CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatalf(\"expected compiling %s to fail\", f.Name())\n+\t}\n+\n+\tif !strings.HasPrefix(string(out), path) {\n+\t\tlog.Fatalf(\"expected full path (%s) in error message, got:\\n%s\", path, out)\n+\t}\n+}"}, {"sha": "47c7f6513d9f3f1d6fd3367a62d086df439c80d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22683.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+type foo struct {\n+\tbar [1]*int\n+}\n+\n+func main() {\n+\tch := make(chan foo, 2)\n+\tvar a int\n+\tvar b [1]*int\n+\tb[0] = &a\n+\tch <- foo{bar: b}\n+\tclose(ch)\n+\n+\tfor v := range ch {\n+\t\tfor i := 0; i < 1; i++ {\n+\t\t\tfmt.Println(v.bar[0] != nil)\n+\t\t}\n+\t}\n+}"}, {"sha": "27ba77ddaf61532f217964734769a42cdabc17dc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22683.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22683.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+true"}, {"sha": "5ad82398bbc332f40c80b28f4a06511f3f5434d5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22781.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22781.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22781.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22781.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"runtime/debug\"\n+\n+type T struct {\n+\t// >= 16 bytes to avoid tiny alloc.\n+\ta, b int\n+}\n+\n+func main() {\n+\tdebug.SetGCPercent(1)\n+\tfor i := 0; i < 100000; i++ {\n+\t\tm := make(map[*T]struct{}, 0)\n+\t\tfor j := 0; j < 20; j++ {\n+\t\t\t// During the call to mapassign_fast64, the key argument\n+\t\t\t// was incorrectly treated as a uint64. If the stack was\n+\t\t\t// scanned during that call, the only pointer to k was\n+\t\t\t// missed, leading to *k being collected prematurely.\n+\t\t\tk := new(T)\n+\t\t\tm[k] = struct{}{}\n+\t\t}\n+\t}\n+}"}, {"sha": "2ac31ef0c75782f7e6532ba63e2cd9310948185b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22794.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22794.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22794.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22794.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type it struct {\n+\tFloats bool\n+\tinner  string\n+}\n+\n+func main() {\n+\ti1 := it{Floats: true}\n+\tif i1.floats { // ERROR \"(type it .* field or method floats, but does have Floats)|undefined field or method\"\n+\t}\n+\ti2 := &it{floats: false} // ERROR \"(but does have Floats)|unknown field|declared but not used\"\n+\t_ = &it{InneR: \"foo\"}    // ERROR \"(but does have inner)|unknown field\"\n+}"}, {"sha": "ea53452f09b762946097da0774acf4f3f3f7efe4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22822.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22822.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22822.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22822.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that calling a function shadowing a built-in provides a good\n+// error message.\n+\n+package main\n+\n+func F() {\n+\tslice := []int{1, 2, 3}\n+\tlen := int(2)\n+\tprintln(len(slice)) // ERROR \"cannot call non-function len .type int., declared at|expected function\"\n+}"}, {"sha": "645f2d4b87d5e2514630b627576ec42cc6636868", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22881.go", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22881.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22881.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22881.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,117 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test to make sure RHS is evaluated before map insert is started.\n+// The RHS panics in all of these cases.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfor i, f := range []func(map[int]int){\n+\t\tf0, f1, f2, f3, f4, f5, f6, f7, f8,\n+\t} {\n+\t\tm := map[int]int{}\n+\t\tfunc() { // wrapper to scope the defer.\n+\t\t\tdefer func() {\n+\t\t\t\trecover()\n+\t\t\t}()\n+\t\t\tf(m) // Will panic. Shouldn't modify m.\n+\t\t\tfmt.Printf(\"RHS didn't panic, case f%d\\n\", i)\n+\t\t}()\n+\t\tif len(m) != 0 {\n+\t\t\tfmt.Printf(\"map insert happened, case f%d\\n\", i)\n+\t\t}\n+\t}\n+\n+\t// Append slice.\n+\tfor i, f := range []func(map[int][]int){\n+\t\tfa0, fa1, fa2, fa3,\n+\t} {\n+\t\tm := map[int][]int{}\n+\t\tfunc() { // wrapper to scope the defer.\n+\t\t\tdefer func() {\n+\t\t\t\trecover()\n+\t\t\t}()\n+\t\t\tf(m) // Will panic. Shouldn't modify m.\n+\t\t\tfmt.Printf(\"RHS didn't panic, case fa%d\\n\", i)\n+\t\t}()\n+\t\tif len(m) != 0 {\n+\t\t\tfmt.Printf(\"map insert happened, case fa%d\\n\", i)\n+\t\t}\n+\t}\n+}\n+\n+func f0(m map[int]int) {\n+\tvar p *int\n+\tm[0] = *p\n+}\n+\n+func f1(m map[int]int) {\n+\tvar p *int\n+\tm[0] += *p\n+}\n+\n+func f2(m map[int]int) {\n+\tvar p *int\n+\tsink, m[0] = sink, *p\n+}\n+\n+func f3(m map[int]int) {\n+\tvar p *chan int\n+\tm[0], sink = <-(*p)\n+}\n+\n+func f4(m map[int]int) {\n+\tvar p *interface{}\n+\tm[0], sink = (*p).(int)\n+}\n+\n+func f5(m map[int]int) {\n+\tvar p *map[int]int\n+\tm[0], sink = (*p)[0]\n+}\n+\n+func f6(m map[int]int) {\n+\tvar z int\n+\tm[0] /= z\n+}\n+\n+func f7(m map[int]int) {\n+\tvar a []int\n+\tm[0] = a[0]\n+}\n+\n+func f8(m map[int]int) {\n+\tvar z int\n+\tm[0] %= z\n+}\n+\n+func fa0(m map[int][]int) {\n+\tvar p *int\n+\tm[0] = append(m[0], *p)\n+}\n+\n+func fa1(m map[int][]int) {\n+\tvar p *int\n+\tsink, m[0] = !sink, append(m[0], *p)\n+}\n+\n+func fa2(m map[int][]int) {\n+\tvar p *int\n+\tm[0], _ = append(m[0], 0), *p\n+}\n+\n+func fa3(m map[int][]int) {\n+\t// OSLICE has similar in-place-reassignment\n+\t// optimizations as OAPPEND, but we need to make sure\n+\t// to *not* optimize them, because we can't guarantee\n+\t// the slice indices are within bounds.\n+\tm[0] = m[0][:1]\n+}\n+\n+var sink bool"}, {"sha": "02459c6a4e80201541dec58f37028a63d2f00947", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22904.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22904.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22904.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22904.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 22904: Make sure the compiler emits a proper error message about\n+// invalid recursive types rather than crashing.\n+\n+package p\n+\n+type a struct{ b } // ERROR \"invalid recursive type\"\n+type b struct{ a } // GCCGO_ERROR \"invalid recursive type\"\n+\n+var x interface{}\n+\n+func f() {\n+\tx = a{}\n+}"}, {"sha": "5336ba34109f9945db72870fe14642eb2ce57d7f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22921.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22921.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22921.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22921.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"bytes\"\n+\n+type _ struct{ bytes.nonexist } // ERROR \"unexported|undefined\"\n+\n+type _ interface{ bytes.nonexist } // ERROR \"unexported|undefined|expected signature or type name\"\n+\n+func main() {\n+\tvar _ bytes.Buffer\n+\tvar _ bytes.buffer // ERROR \"unexported|undefined\"\n+}"}, {"sha": "7a4ede438fabee33a59247a2a78cc6854165b619", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22941.dir/a.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package q\n+\n+type P int"}, {"sha": "87d59a6764a462ed51aedb25e730c763f0787659", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22941.dir/b.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import q \"./a\"\n+\n+type T struct {\n+\tX *q.P\n+}\n+\n+func F(in, out *T) {\n+\t*out = *in\n+\tif in.X != nil {\n+\t\tin, out := &in.X, &out.X\n+\t\tif *in == nil {\n+\t\t\t*out = nil\n+\t\t} else {\n+\t\t\t*out = new(q.P)\n+\t\t\t**out = **in\n+\t\t}\n+\t}\n+\treturn\n+}\n+\n+//go:noinline\n+func G(x, y *T) {\n+\tF(x, y)\n+}"}, {"sha": "84666adf0df67324eca22169f903966d6c4f302c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22941.dir/main.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import p \"./b\"\n+\n+var G int\n+\n+func main() {\n+\tif G == 101 {\n+\t\tp.G(nil, nil)\n+\t}\n+}"}, {"sha": "c3732c311b75f5a3b24749ddd578a8ddd5281651", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22941.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22941.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// rundir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "7257d7dfabb9c642857240e37d16bc9b0ec3bac4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22962.dir/a.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+func F() {\n+\tif x := 0; false {\n+\t\t_ = x\n+\t}\n+}"}, {"sha": "e1568c8fe9b3233fab04143d8070383cba2fe60e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22962.dir/b.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"a\"\n+\n+var V = func() { a.F() }"}, {"sha": "8000a5224ffba9b9d443462063c8bc838f6a2968", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue22962.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue22962.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "7b2865ca41de6b7394b6dd0da7124b6a671a7b20", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23093.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23093.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23093.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23093.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var f = func() { f() } // ERROR \"initialization loop|initialization expression for .*f.* depends upon itself\""}, {"sha": "b4b36d4ba97a51161e97efc80fa901310f5abfd3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23116.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23116.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23116.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23116.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(x interface{}) {\n+\tswitch x.(type) {\n+\t}\n+\n+\tswitch t := x.(type) { // ERROR \"declared but not used\"\n+\t}\n+}"}, {"sha": "3d2816fc69d3c187c48518873278b8a3134e3788", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23179.dir/a.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Large struct {\n+\tx [256]int\n+}\n+\n+func F(x int, _ int, _ bool, _ Large) int {\n+\treturn x\n+}"}, {"sha": "bec3d15e1e1f5c24497a1a9be8bc370e4c9d3f7e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23179.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"a\"\n+\n+func G(x int) int {\n+\treturn a.F(x, 1, false, a.Large{})\n+}"}, {"sha": "8000a5224ffba9b9d443462063c8bc838f6a2968", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23179.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23179.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "be00a8ec67faa0ed44a7eacad40ac82d470f8008", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23298.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23298.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23298.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23298.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T string\n+\n+var (\n+\tt = T(\"T\")\n+\tr = []rune(t)\n+)"}, {"sha": "28f400c5e8168bf1efa5af38433c6809ff6bf9ce", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23305.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23305.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23305.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23305.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func mask1(a, b uint64) uint64 {\n+\top1 := int32(a)\n+\top2 := int32(b)\n+\treturn uint64(uint32(op1 / op2))\n+}\n+\n+var mask2 = mask1\n+\n+func main() {\n+\tres1 := mask1(0x1, 0xfffffffeffffffff)\n+\tres2 := mask2(0x1, 0xfffffffeffffffff)\n+\tif res1 != 0xffffffff {\n+\t\tprintln(\"got\", res1, \"want\", 0xffffffff)\n+\t\tpanic(\"FAIL\")\n+\t}\n+\tif res2 != 0xffffffff {\n+\t\tprintln(\"got\", res2, \"want\", 0xffffffff)\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "fa4cf76b89a7a07faff2bdc5b0506625ca607344", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23311.dir/main.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import _ \"unsafe\" // for linkname\n+\n+//go:linkname f runtime.GC\n+func f()\n+\n+func main() {\n+\tf()\n+}"}, {"sha": "128cf9d06ad6ed5c0d03c3889cf3ea483ad289af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23311.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23311.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "7ef3d831fd9a2e4456797184da80127c04c5c07c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23414.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23414.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23414.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23414.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var x struct{}\n+\n+func f() bool {\n+\treturn x == x && x == x\n+}"}, {"sha": "77f3184149bd4ee0d59ef0cdda09c2dc965ffc81", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23504.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23504.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23504.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23504.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\tvar B bool\n+\tB2 := (B || B && !B) && !B\n+\tB3 := B2 || B\n+\tfor (B3 || B2) && !B2 && B {\n+\t}\n+}"}, {"sha": "159e03238c3ceab41de2e90b14dc0b8d1ab8229d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23521.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23521.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23521.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23521.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,43 @@\n+// errorcheck -0 -m\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 23521: improve early DCE for if without explicit else.\n+\n+package p\n+\n+//go:noinline\n+func nonleaf() {}\n+\n+const truth = true\n+\n+func f() int { // ERROR \"can inline f\"\n+\tif truth {\n+\t\treturn 0\n+\t}\n+\t// If everything below is removed, as it should,\n+\t// function f should be inlineable.\n+\tnonleaf()\n+\tfor {\n+\t\tpanic(\"\")\n+\t}\n+}\n+\n+func g() int { // ERROR \"can inline g\"\n+\treturn f() // ERROR \"inlining call to f\"\n+}\n+\n+func f2() int { // ERROR \"can inline f2\"\n+\tif !truth {\n+\t\tnonleaf()\n+\t} else {\n+\t\treturn 0\n+\t}\n+\tpanic(\"\")\n+}\n+\n+func g2() int { // ERROR \"can inline g2\"\n+\treturn f2() // ERROR \"inlining call to f2\"\n+}"}, {"sha": "cace86c8abb016c66ba030474812bf5d854b4645", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23522.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23522.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23522.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23522.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,46 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"math\"\n+)\n+\n+type S struct {\n+\tu int64\n+\tn int32\n+}\n+\n+func F1(f float64) *S {\n+\ts := f\n+\tpf := math.Copysign(f, 1)\n+\tu := math.Floor(pf)\n+\treturn &S{\n+\t\tu: int64(math.Copysign(u, s)),\n+\t\tn: int32(math.Copysign((pf-u)*1e9, s)),\n+\t}\n+}\n+\n+func F2(f float64) *S {\n+\ts := f\n+\tf = math.Copysign(f, 1)\n+\tu := math.Floor(f)\n+\treturn &S{\n+\t\tu: int64(math.Copysign(u, s)),\n+\t\tn: int32(math.Copysign((f-u)*1e9, s)),\n+\t}\n+}\n+\n+func main() {\n+\ts1 := F1(-1)\n+\ts2 := F2(-1)\n+\tif *s1 != *s2 {\n+\t\tprintln(\"F1:\", s1.u, s1.n)\n+\t\tprintln(\"F2:\", s2.u, s2.n)\n+\t\tpanic(\"different\")\n+\t}\n+}"}, {"sha": "d97f64af5a0ed4810376deabf5a9605492bc6dbf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23545.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23545.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23545.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23545.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,31 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 23545: gccgo didn't lower array comparison to\n+// proper equality function in some case.\n+\n+package main\n+\n+func main() {\n+\tif a := Get(); a != dummyID(1234) {\n+\t\tpanic(\"FAIL\")\n+\t}\n+}\n+\n+func dummyID(x int) [Size]interface{} {\n+\tvar out [Size]interface{}\n+\tout[0] = x\n+\treturn out\n+}\n+\n+const Size = 32\n+\n+type OutputID [Size]interface{}\n+\n+//go:noinline\n+func Get() OutputID {\n+\treturn dummyID(1234)\n+}"}, {"sha": "818f0cd6bfaba8705fa01e877d04fd0a1c132ee0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23546.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23546.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23546.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23546.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,22 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 23546: type..eq function not generated when\n+// DWARF is disabled.\n+\n+package main\n+\n+func main() {\n+\tuse(f() == f())\n+}\n+\n+func f() [2]interface{} {\n+\tvar out [2]interface{}\n+\treturn out\n+}\n+\n+//go:noinline\n+func use(bool) {}"}, {"sha": "c2d4c9ffb59351996488f966f4ecf7dd51547f8f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23586.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23586.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23586.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23586.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that we type-check deferred/go functions even\n+// if they are not called (a common error). Specifically,\n+// we don't want to see errors such as import or variable\n+// declared but not used.\n+\n+package p\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+)\n+\n+func f() {\n+\tvar i int\n+\tdefer func() { fmt.Println() } // ERROR \"must be function call\"\n+\tgo func() { _ = math.Sin(0) }  // ERROR \"must be function call\"\n+\tgo func() { _ = i}             // ERROR \"must be function call\"\n+}"}, {"sha": "c97e63636c06f6cdc0dbe6c4c662b214fd013aed", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23719.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23719.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23719.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23719.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,42 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tv1 := [2]int32{-1, 88}\n+\tv2 := [2]int32{-1, 99}\n+\tif v1 == v2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+\n+\tw1 := [2]int16{-1, 88}\n+\tw2 := [2]int16{-1, 99}\n+\tif w1 == w2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+\tx1 := [4]int16{-1, 88, 88, 88}\n+\tx2 := [4]int16{-1, 99, 99, 99}\n+\tif x1 == x2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+\n+\ta1 := [2]int8{-1, 88}\n+\ta2 := [2]int8{-1, 99}\n+\tif a1 == a2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+\tb1 := [4]int8{-1, 88, 88, 88}\n+\tb2 := [4]int8{-1, 99, 99, 99}\n+\tif b1 == b2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+\tc1 := [8]int8{-1, 88, 88, 88, 88, 88, 88, 88}\n+\tc2 := [8]int8{-1, 99, 99, 99, 99, 99, 99, 99}\n+\tif c1 == c2 {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+}"}, {"sha": "db2d182234100e0ef4f485f00289179eda919944", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23732.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23732.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23732.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23732.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,42 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 23732: Give better details about which struct\n+// initializer has the wrong number of values.\n+\n+package main\n+\n+type Foo struct {\n+\tA int\n+\tB int\n+\tC interface{}\n+\tBar\n+}\n+\n+type Bar struct {\n+\tA string\n+}\n+\n+func main() {\n+\t_ = Foo{ // GCCGO_ERROR \"too few expressions\"\n+\t\t1,\n+\t\t2,\n+\t\t3, // GC_ERROR \"too few values in Foo{...}\"\n+\t}\n+\n+\t_ = Foo{\n+\t\t1,\n+\t\t2,\n+\t\t3,\n+\t\tBar{\"A\", \"B\"}, // ERROR \"too many values in Bar{...}|too many expressions\"\n+\t}\n+\n+\t_ = Foo{ // GCCGO_ERROR \"too few expressions\"\n+\t\t1,\n+\t\t2,\n+\t\tBar{\"A\", \"B\"}, // ERROR \"too many values in Bar{...}|too many expressions\" \"too few values in Foo{...}\"\n+\t}\n+}"}, {"sha": "dd5869b8f00390916b0f493bf5acc2427110ece2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23734.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23734.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23734.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23734.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,32 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tm := map[interface{}]int{}\n+\tk := []int{}\n+\n+\tmustPanic(func() {\n+\t\t_ = m[k]\n+\t})\n+\tmustPanic(func() {\n+\t\t_, _ = m[k]\n+\t})\n+\tmustPanic(func() {\n+\t\tdelete(m, k)\n+\t})\n+}\n+\n+func mustPanic(f func()) {\n+\tdefer func() {\n+\t\tr := recover()\n+\t\tif r == nil {\n+\t\t\tpanic(\"didn't panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "71fc2d9ed6f3a035eb5b73c18ba5108afddc861f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23780.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23780.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23780.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23780.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\t_ = []byte{1 << 30: 1}\n+}\n+\n+func g() {\n+\tsink = []byte{1 << 30: 1}\n+}\n+\n+var sink []byte"}, {"sha": "5c03cf7e4ef530906d1a62d89d8ad4efc2a01041", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23781.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23781.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23781.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23781.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,10 @@\n+// +build amd64\n+// compile\n+\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var _ = []int{1 << 31: 1} // ok on machines with 64bit int"}, {"sha": "0a40deb212e8e5a885165e91c2c6a528379b9a73", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23812.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23812.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23812.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23812.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\twant := int32(0x3edae8)\n+\tgot := foo(1)\n+\tif want != got {\n+\t\tpanic(fmt.Sprintf(\"want %x, got %x\", want, got))\n+\t}\n+}\n+\n+func foo(a int32) int32 {\n+\treturn shr1(int32(shr2(int64(0x14ff6e2207db5d1f), int(a))), 4)\n+}\n+\n+func shr1(n int32, m int) int32 { return n >> uint(m) }\n+\n+func shr2(n int64, m int) int64 {\n+\tif m < 0 {\n+\t\tm = -m\n+\t}\n+\tif m >= 64 {\n+\t\treturn n\n+\t}\n+\n+\treturn n >> uint(m)\n+}"}, {"sha": "067a8f1638c26c4ae33fe5c116d2c0c0c14d8fdf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue23823.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23823.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23823.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue23823.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type I1 = interface {\n+\tI2\n+}\n+\n+// BAD: type loop should mention I1; see also #41669\n+type I2 interface { // GC_ERROR \"invalid recursive type I2\\n\\tLINE: I2 refers to\\n\\tLINE: I2$\"\n+\tI1 // GCCGO_ERROR \"invalid recursive interface\"\n+}"}, {"sha": "6c7d871b768859b57db6cf294880774f8af27f6d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24120.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24120.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24120.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24120.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var F func(int)\n+\n+func G() {\n+\tif F(func() int { return 1 }()); false {\n+\t}\n+}"}, {"sha": "4c19e05ef0a72b23f57f8766b55515c676f8be21", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24173.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24173.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24173.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24173.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type arrayAlias = [10]int\n+type mapAlias = map[int]int\n+type sliceAlias = []int\n+type structAlias = struct{}\n+\n+func Exported() {\n+\t_ = arrayAlias{}\n+\t_ = mapAlias{}\n+\t_ = sliceAlias{}\n+\t_ = structAlias{}\n+}"}, {"sha": "45fc92971072fdb257700bafd93490c509020e29", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24187.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24187.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24187.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24187.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,33 @@\n+// +build amd64p32\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"unsafe\"\n+)\n+\n+func main() {\n+\tb := make([]byte, 128)\n+\tfor i := range b {\n+\t\tb[i] = 1\n+\t}\n+\tif bytes.IndexByte(b, 0) != -1 {\n+\t\tpanic(\"found 0\")\n+\t}\n+\tfor i := range b {\n+\t\tb[i] = 0\n+\t\tc := b\n+\t\t*(*int)(unsafe.Pointer(uintptr(unsafe.Pointer(&c)) + unsafe.Sizeof(uintptr(0)))) = 1<<31 - 1\n+\t\tif bytes.IndexByte(c, 0) != i {\n+\t\t\tpanic(fmt.Sprintf(\"missing 0 at %d\\n\", i))\n+\t\t}\n+\t\tb[i] = 1\n+\t}\n+}"}, {"sha": "73b7783e07740f6eda7bc2a632d4b8abb7d441fa", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24419.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24419.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24419.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24419.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,51 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"strings\"\n+)\n+\n+func growstack(n int) {\n+\tif n > 0 {\n+\t\tgrowstack(n - 1)\n+\t}\n+}\n+\n+func main() {\n+\tc := make(chan struct{})\n+\tgo compare(c)\n+\tgo equal(c)\n+\tgo indexByte(c)\n+\tgo indexByteString(c)\n+\t<-c\n+\t<-c\n+\t<-c\n+\t<-c\n+}\n+\n+func compare(c chan struct{}) {\n+\tdefer bytes.Compare(nil, nil)\n+\tgrowstack(10000)\n+\tc <- struct{}{}\n+}\n+func equal(c chan struct{}) {\n+\tdefer bytes.Equal(nil, nil)\n+\tgrowstack(10000)\n+\tc <- struct{}{}\n+}\n+func indexByte(c chan struct{}) {\n+\tdefer bytes.IndexByte(nil, 0)\n+\tgrowstack(10000)\n+\tc <- struct{}{}\n+}\n+func indexByteString(c chan struct{}) {\n+\tdefer strings.IndexByte(\"\", 0)\n+\tgrowstack(10000)\n+\tc <- struct{}{}\n+}"}, {"sha": "b236645103961b30da8d5db7f2c1bf255c096276", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24449.go", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24449.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24449.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24449.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,62 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"sync/atomic\"\n+)\n+\n+var cnt32 int32\n+\n+//go:noinline\n+func test32(a, b []int) bool {\n+\t// Try to generate flag value, issue atomic\n+\t// adds and then re-use the flag value to see if\n+\t// the atomic add has clobbered them.\n+\tatomic.AddInt32(&cnt32, 1)\n+\tif len(a) == len(b) {\n+\t\tatomic.AddInt32(&cnt32, 2)\n+\t}\n+\tatomic.AddInt32(&cnt32, 4)\n+\tif len(a) >= len(b) {\n+\t\tatomic.AddInt32(&cnt32, 8)\n+\t}\n+\tif len(a) <= len(b) {\n+\t\tatomic.AddInt32(&cnt32, 16)\n+\t}\n+\treturn atomic.LoadInt32(&cnt32) == 31\n+}\n+\n+var cnt64 int64\n+\n+//go:noinline\n+func test64(a, b []int) bool {\n+\t// Try to generate flag value, issue atomic\n+\t// adds and then re-use the flag value to see if\n+\t// the atomic add has clobbered them.\n+\tatomic.AddInt64(&cnt64, 1)\n+\tif len(a) == len(b) {\n+\t\tatomic.AddInt64(&cnt64, 2)\n+\t}\n+\tatomic.AddInt64(&cnt64, 4)\n+\tif len(a) >= len(b) {\n+\t\tatomic.AddInt64(&cnt64, 8)\n+\t}\n+\tif len(a) <= len(b) {\n+\t\tatomic.AddInt64(&cnt64, 16)\n+\t}\n+\treturn atomic.LoadInt64(&cnt64) == 31\n+}\n+\n+func main() {\n+\tif !test32([]int{}, []int{}) {\n+\t\tpanic(\"test32\")\n+\t}\n+\tif !test64([]int{}, []int{}) {\n+\t\tpanic(\"test64\")\n+\t}\n+}"}, {"sha": "d0e5e23fa90840208aa2fa069a3e93f3aff6362b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24470.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24470.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24470.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24470.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we get \"use of .(type) outside type switch\"\n+// before any other (misleading) errors. Test case from issue.\n+\n+package p\n+\n+func f(i interface{}) {\n+\tif x, ok := i.(type); ok { // ERROR \"outside type switch\"\n+\t}\n+}"}, {"sha": "b3deab48228d84c52fc02e6cea4354aa4ff95280", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24488.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24488.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24488.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24488.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,38 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+type Func func()\n+\n+func (f Func) Foo() {\n+\tif f != nil {\n+\t\tf()\n+\t}\n+}\n+\n+func (f Func) Bar() {\n+\tif f != nil {\n+\t\tf()\n+\t}\n+\tbuf := make([]byte, 4000)\n+\tn := runtime.Stack(buf, true)\n+\ts := string(buf[:n])\n+\tif strings.Contains(s, \"-fm\") {\n+\t\tpanic(\"wrapper present in stack trace:\\n\" + s)\n+\t}\n+}\n+\n+func main() {\n+\tfoo := Func(func() {})\n+\tfoo = foo.Bar\n+\tfoo.Foo()\n+}"}, {"sha": "933ce70dbdc58423a36c9428c5a46c6180d0f5f2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24503.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24503.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24503.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24503.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 24503: Handle == and != of addresses taken of symbols consistently.\n+\n+package main\n+\n+func test() string {\n+\ttype test struct{}\n+\to1 := test{}\n+\to2 := test{}\n+\tif &o1 == &o2 {\n+\t\treturn \"equal\"\n+\t}\n+\tif &o1 != &o2 {\n+\t\treturn \"unequal\"\n+\t}\n+\treturn \"failed\"\n+}\n+\n+func main() {\n+\tif test() == \"failed\" {\n+\t\tpanic(\"expected either 'equal' or 'unequal'\")\n+\t}\n+}"}, {"sha": "47d94a9f9fbb417d330ac45c148e5600720b2466", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24547.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24547.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24547.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24547.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,46 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// When computing method sets with shadowed methods, make sure we\n+// compute whether a method promotion involved a pointer traversal\n+// based on the promoted method, not the shadowed method.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+)\n+\n+type mystruct struct {\n+\tf int\n+}\n+\n+func (t mystruct) String() string {\n+\treturn \"FAIL\"\n+}\n+\n+func main() {\n+\ttype deep struct {\n+\t\tmystruct\n+\t}\n+\ts := struct {\n+\t\tdeep\n+\t\t*bytes.Buffer\n+\t}{\n+\t\tdeep{},\n+\t\tbytes.NewBufferString(\"ok\"),\n+\t}\n+\n+\tif got := s.String(); got != \"ok\" {\n+\t\tpanic(got)\n+\t}\n+\n+\tvar i fmt.Stringer = s\n+\tif got := i.String(); got != \"ok\" {\n+\t\tpanic(got)\n+\t}\n+}"}, {"sha": "cd6f124517a5c7381108086227f7694f71ce1a0b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24760.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24760.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24760.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24760.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,12 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+var _ = string([]byte(nil))[0]\n+var _ = uintptr(unsafe.Pointer(uintptr(1))) << 100"}, {"sha": "623ab489e8e9adb043cc8eac52600e82bed7f0fa", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24763.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24763.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24763.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24763.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,21 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tvar s uint\n+\tvar x = interface{}(1<<s + 1<<s) // compiler must not crash here\n+\tif x.(int) != 2 {\n+\t\tpanic(\"x not int or not 2\")\n+\t}\n+\n+\tvar y interface{}\n+\ty = 1<<s + 1 // compiler must not crash here\n+\tif y.(int) != 2 {\n+\t\tpanic(\"y not int or not 2\")\n+\t}\n+}"}, {"sha": "c805c86dda8d78147bd371eee5e556b42d67aa32", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24799.go", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24799.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24799.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24799.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,58 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Loads of 8 byte go.strings cannot use DS relocation\n+// in case the alignment is not a multiple of 4.\n+\n+package main\n+\n+import (\n+        \"fmt\"\n+)\n+\n+type Level string\n+\n+// The following are all go.strings. A link time error can\n+// occur if an 8 byte load is used to load a go.string that is\n+// not aligned to 4 bytes due to the type of relocation that\n+// is generated for the instruction. A fix was made to avoid\n+// generating an instruction with DS relocation for go.strings\n+// since their alignment is not known until link time. \n+\n+// This problem only affects go.string since other types have\n+// correct alignment.\n+\n+const (\n+        LevelBad Level = \"badvals\"\n+        LevelNone Level = \"No\"\n+        LevelMetadata Level = \"Metadata\"\n+        LevelRequest Level = \"Request\"\n+        LevelRequestResponse Level = \"RequestResponse\"\n+)\n+\n+func ordLevel(l Level) int {\n+        switch l {\n+        case LevelMetadata:\n+                return 1\n+        case LevelRequest:\n+                return 2\n+        case LevelRequestResponse:\n+                return 3\n+        default:\n+                return 0\n+        }\n+}\n+\n+//go:noinline\n+func test(l Level) {\n+        if ordLevel(l) < ordLevel(LevelMetadata) {\n+                fmt.Printf(\"OK\\n\")\n+        }\n+}\n+\n+func main() {\n+        test(LevelMetadata)\n+}"}, {"sha": "58e6240d8c165c097542dd082788a335d9802e05", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24801.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type main int\n+\n+var X main"}, {"sha": "5c7db7b4d1f97fcecf66dbde2088edd768c3f7fd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24801.dir/main.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\ta.X = 1\n+}"}, {"sha": "9b05db8eae9b7f7d0c0e81bd77b575bae666eded", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24801.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24801.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,5 @@\n+// compiledir\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file."}, {"sha": "ba2a138ed38ea526162e4ca0d43fc3b8b5d11f9d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24817.go", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24817.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24817.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24817.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,64 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check all ways to compare a non-constant string to the empty string.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+)\n+\n+var (\n+\ts      = \"abc\"\n+\te      = \"\"\n+\tfailed bool\n+)\n+\n+func main() {\n+\twant(true, \"\" < s, `\"\" < s`)\n+\twant(false, s < \"\", `s < \"\"`)\n+\twant(false, \"\" < e, `\"\" < e`)\n+\twant(false, e < \"\", `e < \"\"`)\n+\n+\twant(true, \"\" <= s, `\"\" <= s`)\n+\twant(false, s <= \"\", `s <= \"\"`)\n+\twant(true, \"\" <= e, `\"\" <= e`)\n+\twant(true, e <= \"\", `e <= \"\"`)\n+\n+\twant(false, \"\" > s, `\"\" > s`)\n+\twant(true, s > \"\", `s > \"\"`)\n+\twant(false, \"\" > e, `\"\" > e`)\n+\twant(false, e > \"\", `e > \"\"`)\n+\n+\twant(false, \"\" >= s, `\"\" >= s`)\n+\twant(true, s >= \"\", `s >= \"\"`)\n+\twant(true, \"\" >= e, `\"\" >= e`)\n+\twant(true, e >= \"\", `e >= \"\"`)\n+\n+\twant(false, \"\" == s, `\"\" == s`)\n+\twant(false, s == \"\", `s == \"\"`)\n+\twant(true, \"\" == e, `\"\" == e`)\n+\twant(true, e == \"\", `e == \"\"`)\n+\n+\twant(true, \"\" != s, `\"\" != s`)\n+\twant(true, s != \"\", `s != \"\"`)\n+\twant(false, \"\" != e, `\"\" != e`)\n+\twant(false, e != \"\", `e != \"\"`)\n+\n+\tif failed {\n+\t\tos.Exit(1)\n+\t}\n+}\n+\n+//go:noinline\n+func want(b bool, have bool, msg string) {\n+\tif b != have {\n+\t\tfmt.Println(msg)\n+\t\tfailed = true\n+\t}\n+}"}, {"sha": "7d8460f61ece2f094414a49b9184238e3edc370f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24937.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24937.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24937.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24937.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tx := []byte{'a'}\n+\tswitch string(x) {\n+\tcase func() string { x[0] = 'b'; return \"b\" }():\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "0ae6f2b9f2600550e3aca2a0c41e9ce2a3329f7c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue24939.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24939.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24939.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue24939.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T interface {\n+\tM(P)\n+}\n+\n+type M interface {\n+\tF() P\n+}\n+\n+type P = interface {\n+\t// The compiler cannot handle this case. Disabled for now.\n+\t// See issue #25838.\n+\t// I() M\n+}\n+\n+func main() {}"}, {"sha": "570fdca5c2d2dd38b68a9f2bc671b57864c86318", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25006.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25006.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25006.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25006.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func spin() {\n+\tvar i int\n+\tvar b bool\n+\n+\tswitch 1 {\n+\tcase 0:\n+\t\ti = 1\n+\t}\n+\tswitch 1 {\n+\tcase i:\n+\tdefault:\n+\t\ti = 1\n+\t\tb = !b && (b && !b) && b\n+\t}\n+\tswitch false {\n+\tcase false:\n+\t\ti = 3 + -i\n+\t\tswitch 0 {\n+\t\tcase 1 - i:\n+\t\t}\n+\t}\n+}"}, {"sha": "4fd6bed92b3273c46752682919127aadaaa7dcb4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25101.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25101.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25101.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25101.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Indexed export format must not crash when writing\n+// the anonymous parameter for m.\n+\n+package p\n+\n+var x interface {\n+\tm(int)\n+}\n+\n+var M = x.m"}, {"sha": "ee4ff53e2eedfdb5036785195d6a549a0139f91a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25322.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Missing zero extension when converting a float32\n+// to a uint64.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+)\n+\n+func Foo(v float32) {\n+\tfmt.Printf(\"%x\\n\", uint64(math.Float32bits(v)))\n+}\n+\n+func main() {\n+\tFoo(2.0)\n+}"}, {"sha": "52f3f6a74518f6f135a1ee2207cbea4e03ff6e89", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25322.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25322.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+40000000"}, {"sha": "9143a73397d91466416e566623a8285299fc5c0c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25507.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25507.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25507.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25507.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// We have a limit of 1GB for stack frames.\n+// Test that we extend that limit to include large argument/return areas.\n+// Argument/return areas are part of the parent frame, not the frame itself,\n+// so they need to be handled separately.\n+\n+package main\n+\n+// >1GB to trigger failure, <2GB to work on 32-bit platforms.\n+type large struct {\n+\tb [1500000000]byte\n+}\n+\n+func (x large) f1() int { // GC_ERROR \"stack frame too large\"\n+\treturn 5\n+}\n+\n+func f2(x large) int { // GC_ERROR \"stack frame too large\"\n+\treturn 5\n+}\n+\n+func f3() (x large, i int) { // GC_ERROR \"stack frame too large\"\n+\treturn\n+}"}, {"sha": "8326ef953f08cdcb1ca17d59371754a01b8d5771", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25516.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25516.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25516.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25516.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure dead write barriers are handled correctly.\n+\n+package main\n+\n+func f(p **int) {\n+\t// The trick here is to eliminate the block containing the write barrier,\n+\t// but only after the write barrier branches are inserted.\n+\t// This requires some delicate code.\n+\ti := 0\n+\tvar b []bool\n+\tvar s string\n+\tfor true {\n+\t\tif b[i] {\n+\t\t\tvar a []string\n+\t\t\ts = a[len(s)]\n+\t\t\ti = 0\n+\t\t}\n+\t\t*p = nil\n+\t}\n+}"}, {"sha": "936b9f8ff5cd65e99ff2ea5e2f16f228ed226c93", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25727.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25727.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25727.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25727.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,21 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"net/http\"\n+\n+var s = http.Server{}\n+var _ = s.doneChan                  // ERROR \"s.doneChan undefined .cannot refer to unexported field or method doneChan.$|unexported field or method\"\n+var _ = s.DoneChan                  // ERROR \"s.DoneChan undefined .type http.Server has no field or method DoneChan.$|undefined field or method\"\n+var _ = http.Server{tlsConfig: nil} // ERROR \"unknown field 'tlsConfig' in struct literal.+ .but does have TLSConfig.$|unknown field .?tlsConfig.? in .?http.Server\"\n+var _ = http.Server{DoneChan: nil}  // ERROR \"unknown field 'DoneChan' in struct literal of type http.Server$|unknown field .?DoneChan.? in .?http.Server\"\n+\n+type foo struct {\n+\tbar int\n+}\n+\n+var _ = &foo{bAr: 10} // ERROR \"unknown field 'bAr' in struct literal.+ .but does have bar.$|unknown field .?bAr.? in .?foo\""}, {"sha": "c76e9759460a3ca8e96eda36b3e24cbc0e2c389d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25741.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25741.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25741.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25741.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var s []int\n+\n+func main() {\n+\ti := -1\n+\ts[i] = 0\n+}"}, {"sha": "e05c0bce4d72398b1d526b1f13a1e2f4e5b81dc8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25776.go", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25776.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25776.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25776.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,99 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+const (\n+\tUpper       = true\n+\tblas_Upper  = 121\n+\tbadTriangle = \"bad triangle\"\n+)\n+\n+// Triangular represents a triangular matrix. Triangular matrices are always square.\n+type Triangular interface {\n+\t// Triangular returns the number of rows/columns in the matrix and its\n+\t// orientation.\n+\tTryangle() (mmmm int, kynd bool)\n+\tTriangle() (mmmm int, kynd bool)\n+}\n+\n+// blas64_Triangular represents a triangular matrix using the conventional storage scheme.\n+type blas64_Triangular struct {\n+\tStride int\n+\tUplo   int\n+}\n+\n+// TriDense represents an upper or lower triangular matrix in dense storage\n+// format.\n+type TriDense struct {\n+\tmat blas64_Triangular\n+}\n+\n+func NewTriDense() *TriDense {\n+\treturn &TriDense{\n+\t\tmat: blas64_Triangular{\n+\t\t\tStride: 3,\n+\t\t\tUplo:   blas_Upper,\n+\t\t},\n+\t}\n+}\n+\n+func (t *TriDense) isUpper() bool {\n+\treturn isUpperUplo(t.mat.Uplo)\n+}\n+\n+func (t *TriDense) triKind() bool {\n+\treturn isUpperUplo(t.mat.Uplo)\n+}\n+\n+func isUpperUplo(u int) bool {\n+\tswitch u {\n+\tcase blas_Upper:\n+\t\treturn true\n+\tdefault:\n+\t\tpanic(badTriangle)\n+\t}\n+}\n+\n+func (t *TriDense) IsZero() bool {\n+\treturn t.mat.Stride == 0\n+}\n+\n+//go:noinline\n+func (t *TriDense) ScaleTri(f float64, a Triangular) {\n+\tn, kind := a.Triangle()\n+\tif kind == false {\n+\t\tprintln(\"ScaleTri n, kind=\", n, \", \", kind, \" (FAIL, expected true)\")\n+\t}\n+}\n+\n+//go:noinline\n+func (t *TriDense) ScaleTry(f float64, a Triangular) {\n+\tn, kind := a.Tryangle()\n+\tif kind == false {\n+\t\tprintln(\"ScaleTry n, kind=\", n, \", \", kind, \" (FAIL, expected true)\")\n+\t}\n+}\n+\n+// Triangle failed (before fix)\n+func (t *TriDense) Triangle() (nnnn int, kind bool) {\n+\treturn 3, !t.IsZero() && t.triKind()\n+}\n+\n+// Tryangle works -- difference is not-named output parameters.\n+func (t *TriDense) Tryangle() (int, bool) {\n+\treturn 3, !t.IsZero() && t.triKind()\n+}\n+\n+func main() {\n+\tta := NewTriDense()\n+\tn, kind := ta.Triangle()\n+\tif kind == false {\n+\t\tprintln(\"    main n, kind=\", n, \", \", kind, \" (FAIL, expected true)\")\n+\t}\n+\tta.ScaleTri(1, ta)\n+\tta.ScaleTry(1, ta)\n+}"}, {"sha": "6a724a79a59eb73aaa80b5ceeeaaea61a976f204", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25897a.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure the runtime can scan args of an unstarted goroutine\n+// which starts with a reflect-generated function.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"runtime\"\n+)\n+\n+const N = 100\n+\n+func main() {\n+\truntime.GOMAXPROCS(1)\n+\tc := make(chan bool, N)\n+\tfor i := 0; i < N; i++ {\n+\t\tf := reflect.MakeFunc(reflect.TypeOf(((func(*int))(nil))),\n+\t\t\tfunc(args []reflect.Value) []reflect.Value {\n+\t\t\t\tc <- true\n+\t\t\t\treturn nil\n+\t\t\t}).Interface().(func(*int))\n+\t\tgo f(nil)\n+\t}\n+\truntime.GC()\n+\tfor i := 0; i < N; i++ {\n+\t\t<-c\n+\t}\n+}"}, {"sha": "09a9673a60fd3685e066f74d65e21119e8e52d89", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25897b.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25897b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,38 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure the runtime can scan args of an unstarted goroutine\n+// which starts with a reflect-generated function.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"runtime\"\n+)\n+\n+const N = 100\n+\n+type T struct {\n+}\n+\n+func (t *T) Foo(c chan bool) {\n+\tc <- true\n+}\n+\n+func main() {\n+\tt := &T{}\n+\truntime.GOMAXPROCS(1)\n+\tc := make(chan bool, N)\n+\tfor i := 0; i < N; i++ {\n+\t\tf := reflect.ValueOf(t).MethodByName(\"Foo\").Interface().(func(chan bool))\n+\t\tgo f(c)\n+\t}\n+\truntime.GC()\n+\tfor i := 0; i < N; i++ {\n+\t\t<-c\n+\t}\n+}"}, {"sha": "90fcee15fd0b900a1f6448df11a048793f4f7667", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25958.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25958.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25958.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25958.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+// Verify that the \"must be receive\" error for \"case done:\" appears\n+// on the line of the case clause, not the line of the done declaration.\n+\n+func f(done chan struct{}) {\n+\tselect {\n+\tcase done: // ERROR \"must be receive|expected .*<-.* or .*=\" \"not used\"\n+\tcase (chan struct{})(done): // ERROR \"must be receive|expected .*<-.* or .*=\"\n+\t}\n+}"}, {"sha": "306d6a489fd61d372c1c97b146fc940c3313f3da", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25984.dir/p.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fp.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type m struct {\n+\tlink *m\n+}\n+\n+var head *m\n+\n+func F(m *int) bool {\n+\treturn head != nil\n+}"}, {"sha": "64d25870b7856c33cb04d0cc55f775b79011c02e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25984.dir/q.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fq.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fq.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.dir%2Fq.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package q\n+\n+import \"./p\"\n+\n+func G() {\n+\tp.F(nil)\n+}"}, {"sha": "128cf9d06ad6ed5c0d03c3889cf3ea483ad289af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue25984.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue25984.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "78877b21fe5de80815746f4c86cdd77812a7835c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26024.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26024.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26024.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26024.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// compile\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package r\n+\n+// f compiles into code where no stores remain in the two successors\n+// of a write barrier block; i.e., they are empty. Pre-fix, this\n+// results in an unexpected input to markUnsafePoints, that expects to\n+// see a pair of non-empty plain blocks.\n+func f() {\n+\tvar i int\n+\tvar s string\n+\tfor len(s) < len(s) {\n+\t\ti++\n+\t\ts = \"a\"\n+\t}\n+\tvar b bool\n+\tvar sa []string\n+\tfor true {\n+\t\tsa = []string{\"\"}\n+\t\tfor b || i == 0 {\n+\t\t}\n+\t\tb = !b\n+\t\t_ = sa\n+\t}\n+}"}, {"sha": "fe32947b07ddb37b34fa13d2fccec4c092cf501e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26043.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26043.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26043.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26043.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,32 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This program results in a loop inferred to increment\n+// j by 0, causing bounds check elimination to attempt\n+// something%0, which panics (in the bug).\n+\n+package q\n+\n+func f() {\n+\tvar s1 string\n+\tvar b bool\n+\tif b {\n+\t\tb = !b\n+\t\ts1 += \"a\"\n+\t}\n+\n+\tvar s2 string\n+\tvar i, j int\n+\tif (s1 <= \"\") || (s2 >= \"\") {\n+\t\tj = len(s1[:6])\n+\t} else {\n+\t\ti = len(\"b\")\n+\t}\n+\n+\tfor j < 0 {\n+\t\tj += i\n+\t}\n+}"}, {"sha": "eedd6bacd0449824031f046a012a651ce5c71f18", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26097.go", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26097.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26097.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26097.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,47 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+//go:noinline\n+func cmovClobberAX64(v1, v2 int64, x1, x2 float64) int64 {\n+\tr := v1\n+\tif x1 == x2 {\n+\t\tr = v2\n+\t}\n+\treturn r\n+}\n+\n+//go:noinline\n+func cmovClobberAX32(v1, v2 int32, x1, x2 float64) int32 {\n+\tr := v1\n+\tif x1 == x2 {\n+\t\tr = v2\n+\t}\n+\treturn r\n+}\n+\n+//go:noinline\n+func cmovClobberAX16(v1, v2 int16, x1, x2 float64) int16 {\n+\tr := v1\n+\tif x1 == x2 {\n+\t\tr = v2\n+\t}\n+\treturn r\n+}\n+\n+func main() {\n+\tif cmovClobberAX16(1, 2, 4.0, 5.0) != 1 {\n+\t\tpanic(\"CMOVQEQF causes incorrect code\")\n+\t}\n+\tif cmovClobberAX32(1, 2, 4.0, 5.0) != 1 {\n+\t\tpanic(\"CMOVQEQF causes incorrect code\")\n+\t}\n+\tif cmovClobberAX64(1, 2, 4.0, 5.0) != 1 {\n+\t\tpanic(\"CMOVQEQF causes incorrect code\")\n+\t}\n+\n+}"}, {"sha": "88a5f162f33cd2c6e8da92e5f182bb62bb01f742", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26105.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26105.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26105.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26105.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Triggers a bug in writebarrier, which inserts one\n+// between (first block) OpAddr x and (second block) a VarDef x,\n+// which are then in the wrong order and unable to be\n+// properly scheduled.\n+\n+package q\n+\n+var S interface{}\n+\n+func F(n int) {\n+\tfun := func(x int) int {\n+\t\tS = 1\n+\t\treturn n\n+\t}\n+\ti := fun(([]int{})[n])\n+\n+\tvar fc [2]chan int\n+\tS = (([1][2]chan int{fc})[i][i])\n+}"}, {"sha": "8a6348181c710a2772bce98b748d3d62a068d558", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26116.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26116.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26116.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26116.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\ts := []int{0, 1, 2}\n+\ti := 1\n+\tfor i > 0 && s[i] != 2 {\n+\t\ti++\n+\t}\n+\tif i != 2 {\n+\t\tpanic(\"loop didn't run\")\n+\t}\n+}"}, {"sha": "94bf7d9cb784be0b16c95fef2e8b1d8a806244bd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26120.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26120.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26120.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26120.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26120: INDEX of 1-element but non-SSAable array\n+// is mishandled when building SSA.\n+\n+package p\n+\n+type T [1]struct {\n+\tf    []int\n+\ti, j int\n+}\n+\n+func F() {\n+\tvar v T\n+\tf := func() T {\n+\t\treturn v\n+\t}\n+\t_ = []int{}[f()[0].i]\n+}"}, {"sha": "53f53cf8a66fd49de17682e792f2783705fea2be", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26153.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26153.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26153.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26153.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26153. The write to ps was incorrectly\n+// removed by the dead auto elimination pass.\n+\n+package main\n+\n+const hello = \"hello world\"\n+\n+func main() {\n+\tvar s string\n+\tmangle(&s)\n+\tif s != hello {\n+\t\tpanic(\"write incorrectly elided\")\n+\t}\n+}\n+\n+//go:noinline\n+func mangle(ps *string) {\n+\tif ps == nil {\n+\t\tvar s string\n+\t\tps = &s\n+\t}\n+\t*ps = hello\n+}"}, {"sha": "2f04e48224c79448110677efc2580b02b65c80c4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26248.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26248.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26248.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26248.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,39 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26248: gccgo miscompiles interface field expression.\n+// In G().M where G returns an interface, G() is evaluated twice.\n+\n+package main\n+\n+type I interface {\n+\tM()\n+}\n+\n+type T struct{}\n+\n+func (T) M() {}\n+\n+var g = 0\n+\n+//go:noinline\n+func G() I {\n+\tg++\n+\treturn T{}\n+}\n+\n+//go:noinline\n+func Use(interface{}) {}\n+\n+func main() {\n+\tx := G().M\n+\tUse(x)\n+\n+\tif g != 1 {\n+\t\tprintln(\"want 1, got\", g)\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "4fd23c796ba89570d00ffca55c8b0f3e5c27b5b8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26341.dir/a.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type k int\n+\n+func (k) F() {}\n+\n+type M map[k]int"}, {"sha": "30b8c25a5cf7c4526f6c64e0f43d653e6bab352d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26341.dir/b.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func f() {\n+\tfor k := range (a.M{}) {\n+\t\tk.F()\n+\t}\n+}"}, {"sha": "128cf9d06ad6ed5c0d03c3889cf3ea483ad289af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26341.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26341.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "aa8e79c1e6ada0184b3839974614d2187d4e9b74", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26407.go", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26407.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26407.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26407.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,58 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26407: ensure that stack variables which have\n+// had their address taken and then used in a comparison,\n+// but are otherwise unused, are cleared.\n+\n+package main\n+\n+func main() {\n+\tpoison()\n+\ttest()\n+}\n+\n+//go:noinline\n+func poison() {\n+\t// initialise the stack with invalid pointers\n+\tvar large [256]uintptr\n+\tfor i := range large {\n+\t\tlarge[i] = 1\n+\t}\n+\tuse(large[:])\n+}\n+\n+//go:noinline\n+func test() {\n+\ta := 2\n+\tx := &a\n+\tif x != compare(&x) {\n+\t\tpanic(\"not possible\")\n+\t}\n+}\n+\n+//go:noinline\n+func compare(x **int) *int {\n+\tvar y *int\n+\tif x == &y {\n+\t\tpanic(\"not possible\")\n+\t}\n+\t// grow the stack to trigger a check for invalid pointers\n+\tgrow()\n+\tif x == &y {\n+\t\tpanic(\"not possible\")\n+\t}\n+\treturn *x\n+}\n+\n+//go:noinline\n+func grow() {\n+\tvar large [1 << 16]uintptr\n+\tuse(large[:])\n+}\n+\n+//go:noinline\n+func use(_ []uintptr) { }"}, {"sha": "5f40bf25229a1a1ef400dc6e71408fffdbaaa0a3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26411.go", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26411.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26411.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26411.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,92 @@\n+// +build !nacl,!js\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Ensure that label redefinition errors print out\n+// a column number that matches the start of the current label's\n+// definition instead of the label delimiting token \":\"\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"regexp\"\n+)\n+\n+func main() {\n+\ttmpdir, err := ioutil.TempDir(\"\", \"issue26411\")\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Failed to create temporary directory: %v\", err)\n+\t}\n+\tdefer os.RemoveAll(tmpdir)\n+\n+\ttests := []struct {\n+\t\tcode   string\n+\t\terrors []string\n+\t}{\n+\t\t{\n+\t\t\tcode: `\n+package main\n+\n+func main() {\n+foo:\n+foo:\n+}\n+`,\n+\t\t\terrors: []string{\n+\t\t\t\t\"^.+:5:1: label foo defined and not used\\n\",\n+\t\t\t\t\".+:6:1: label foo already defined at .+:5:1\\n$\",\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tcode: `\n+package main\n+\n+func main() {\n+\n+            bar:\n+   bar:\n+bar:\n+bar            :\n+}\n+`,\n+\n+\t\t\terrors: []string{\n+\t\t\t\t\"^.+:6:13: label bar defined and not used\\n\",\n+\t\t\t\t\".+:7:4: label bar already defined at .+:6:13\\n\",\n+\t\t\t\t\".+:8:1: label bar already defined at .+:6:13\\n\",\n+\t\t\t\t\".+:9:1: label bar already defined at .+:6:13\\n$\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tfor i, test := range tests {\n+\t\tfilename := filepath.Join(tmpdir, fmt.Sprintf(\"%d.go\", i))\n+\t\tif err := ioutil.WriteFile(filename, []byte(test.code), 0644); err != nil {\n+\t\t\tlog.Printf(\"#%d: failed to create file %s\", i, filename)\n+\t\t\tcontinue\n+\t\t}\n+\t\toutput, _ := exec.Command(\"go\", \"tool\", \"compile\", filename).CombinedOutput()\n+\n+\t\t// remove each matching error from the output\n+\t\tfor _, err := range test.errors {\n+\t\t\trx := regexp.MustCompile(err)\n+\t\t\tmatch := rx.Find(output)\n+\t\t\toutput = bytes.Replace(output, match, nil, 1) // remove match (which might be nil) from output\n+\t\t}\n+\n+\t\t// at this point all output should have been consumed\n+\t\tif len(output) != 0 {\n+\t\t\tlog.Printf(\"Test case %d has unmatched errors:\\n%s\", i, output)\n+\t\t}\n+\t}\n+}"}, {"sha": "44a4fc73b777f152f4b1371e456b0527af8efe70", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26416.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26416.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26416.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26416.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,27 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type t1 struct {\n+\tt1f1 int\n+\tt1f2 int\n+}\n+type t2 struct {\n+\tt2f1 int\n+\tt2f2 int\n+\t*t1\n+}\n+type t3 struct {\n+\tt3f1 int\n+\t*t2\n+}\n+\n+var (\n+\t_ = t2{t1f1: 600} // ERROR \"cannot use promoted field t1.t1f1 in struct literal of type t2|unknown field\"\n+\t_ = t3{t1f2: 800} // ERROR \"cannot use promoted field t2.t1.t1f2 in struct literal of type t3|unknown field\"\n+\t_ = t3{t2f1: 900} // ERROR \"cannot use promoted field t2.t2f1 in struct literal of type t3|unknown field\"\n+)"}, {"sha": "d44da21eb07cbaa7412e28489cd1be907e2a2e08", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26438.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26438.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26438.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26438.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26438: arm64 backend may use 64-bit TST for\n+// \"if uint32(a)&uint32(b) == 0\", which should be\n+// 32-bit TSTW\n+\n+package main\n+\n+//go:noinline\n+func tstw(a, b uint64) uint64 {\n+\tif uint32(a)&uint32(b) == 0 {\n+\t\treturn 100\n+\t} else {\n+\t\treturn 200\n+\t}\n+}\n+\n+func main() {\n+\tif tstw(0xff00000000, 0xaa00000000) == 200 {\n+\t\tpanic(\"impossible\")\n+\t}\n+}"}, {"sha": "11ea360173f6c44398a6a0b554627d5c71980ae9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26495.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26495.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26495.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26495.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,36 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 26495: gccgo produces incorrect order of evaluation\n+// for expressions involving &&, || subexpressions.\n+\n+package main\n+\n+var i int\n+\n+func checkorder(order int) {\n+\tif i != order {\n+\t\tpanic(\"FAIL: wrong evaluation order\")\n+\t}\n+\ti++\n+}\n+\n+func A() bool              { checkorder(1); return true }\n+func B() bool              { checkorder(2); return true }\n+func C() bool              { checkorder(5); return false }\n+func D() bool              { panic(\"FAIL: D should not be called\") }\n+func E() int               { checkorder(3); return 0 }\n+func F() int               { checkorder(0); return 0 }\n+func G(bool) int           { checkorder(9); return 0 }\n+func H(int, bool, int) int { checkorder(7); return 0 }\n+func I(int) bool           { checkorder(8); return true }\n+func J() int               { checkorder(4); return 0 }\n+func K() int               { checkorder(6); return 0 }\n+func L() int               { checkorder(10); return 0 }\n+\n+func main() {\n+\t_ = F() + G(A() && B() && I(E()+H(J(), C() && D(), K()))) + L()\n+}"}, {"sha": "87c0293661f8ad8dadf1aa3f15ad8b2007d6c674", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26616.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26616.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26616.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26616.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var x int = three() // ERROR \"assignment mismatch: 1 variable but three returns 3 values|multiple-value function call in single-value context\"\n+\n+func f() {\n+\tvar _ int = three() // ERROR \"assignment mismatch: 1 variable but three returns 3 values|multiple-value function call in single-value context\"\n+\tvar a int = three() // ERROR \"assignment mismatch: 1 variable but three returns 3 values|multiple-value function call in single-value context\"\n+\ta = three()         // ERROR \"assignment mismatch: 1 variable but three returns 3 values|multiple-value function call in single-value context\"\n+\tb := three()        // ERROR \"assignment mismatch: 1 variable but three returns 3 values|single variable set to multiple-value|multiple-value function call in single-value context\"\n+\n+\t_, _ = a, b\n+}\n+\n+func three() (int, int, int)"}, {"sha": "b965635a65ce3ad9c585fe54aa9d02ba185f8aaa", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue26855.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26855.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26855.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue26855.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we get the correct (T vs &T) literal specification\n+// in the error message.\n+\n+package p\n+\n+type S struct {\n+\tf T\n+}\n+\n+type P struct {\n+\tf *T\n+}\n+\n+type T struct{}\n+\n+var _ = S{\n+\tf: &T{}, // ERROR \"cannot use &T{}|incompatible type\"\n+}\n+\n+var _ = P{\n+\tf: T{}, // ERROR \"cannot use T{}|incompatible type\"\n+}"}, {"sha": "009ec9f6c255efd23cb5b9ff6f18a6f454e71cba", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27143.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27143.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27143.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27143.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 27143: cmd/compile: erroneous application of walkinrange\n+// optimization for const over 2**63\n+\n+package p\n+\n+var c uint64\n+\n+var b1 bool = 0x7fffffffffffffff < c && c < 0x8000000000000000\n+var b2 bool = c < 0x8000000000000000 && 0x7fffffffffffffff < c\n+var b3 bool = 0x8000000000000000 < c && c < 0x8000000000000001\n+var b4 bool = c < 0x8000000000000001 && 0x8000000000000000 < c"}, {"sha": "3a1cc87e4cb964ad0e3cf3dd5a490ef371f2b713", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27232.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27232.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27232.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27232.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type F = func(T)\n+\n+type T interface {\n+\tm(F)\n+}\n+\n+type t struct{}\n+\n+func (t) m(F) {}\n+\n+var _ T = &t{}"}, {"sha": "ebae44f48fefc89406f178be669b8a07df32c3c9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27267.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27267.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27267.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27267.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+// 1st test case from issue\n+type F = func(E) // compiles if not type alias or moved below E struct\n+type E struct {\n+\tf F\n+}\n+\n+var x = E{func(E) {}}\n+\n+// 2nd test case from issue\n+type P = *S\n+type S struct {\n+\tp P\n+}"}, {"sha": "73f7c755e1e3e422599283a1f3adf217217ac7fd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27278.go", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27278.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27278.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27278.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,63 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 27278: dead auto elim deletes an auto and its\n+// initialization, but it is live because of a nil check.\n+\n+package main\n+\n+type T struct {\n+\t_ [3]string\n+\tT2\n+}\n+\n+func (t *T) M() []string {\n+\treturn t.T2.M()\n+}\n+\n+type T2 struct {\n+\tT3\n+}\n+\n+func (t *T2) M() []string {\n+\treturn t.T3.M()\n+}\n+\n+type T3 struct {\n+\ta string\n+}\n+\n+func (t *T3) M() []string {\n+\treturn []string{}\n+}\n+\n+func main() {\n+\tpoison()\n+\tf()\n+}\n+\n+//go:noinline\n+func f() {\n+\t(&T{}).M()\n+\tgrow(10000)\n+}\n+\n+// grow stack, triggers stack copy\n+func grow(n int) {\n+\tif n == 0 {\n+\t\treturn\n+\t}\n+\tgrow(n-1)\n+}\n+\n+// put some junk on stack, which cannot be valid address\n+//go:noinline\n+func poison() {\n+\tx := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tg = x\n+}\n+\n+var g [10]int"}, {"sha": "293b9d005570f8b3fad054759d6337fda8f35bb6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27289.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27289.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27289.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27289.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we don't prove that the bounds check failure branch is unreachable.\n+\n+package main\n+\n+//go:noinline\n+func f(a []int) {\n+\t_ = a[len(a)-1]\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\tif err := recover(); err != nil {\n+\t\t\treturn\n+\t\t}\n+\t\tpanic(\"f should panic\")\n+\t}()\n+\tf(nil)\n+}"}, {"sha": "c3e686df339544ff8f7b6954a35420a5ca310120", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27356.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27356.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27356.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27356.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 27356: function parameter hiding built-in function results in compiler crash\n+\n+package p\n+\n+var a = []int{1,2,3}\n+\n+func _(len int) {\n+\t_ =  len(a) // ERROR \"cannot call non-function|expected function\"\n+}\n+\n+var cap = false\n+var _ = cap(a) // ERROR \"cannot call non-function|expected function\"\n+"}, {"sha": "8bd4939e7ecb4b0862f9b575ee804aaba94d0c25", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27695.go", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,62 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure return values are always scanned, when\n+// calling methods (+functions, TODO) with reflect.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"runtime/debug\"\n+\t\"sync\"\n+)\n+\n+func main() {\n+\tdebug.SetGCPercent(1) // run GC frequently\n+\tvar wg sync.WaitGroup\n+\tfor i := 0; i < 20; i++ {\n+\t\twg.Add(1)\n+\t\tgo func() {\n+\t\t\tdefer wg.Done()\n+\t\t\tfor i := 0; i < 2000; i++ {\n+\t\t\t\t_test()\n+\t\t\t}\n+\t\t}()\n+\t}\n+\twg.Wait()\n+}\n+\n+type Stt struct {\n+\tData interface{}\n+}\n+\n+type My struct {\n+\tb byte\n+}\n+\n+func (this *My) Run(rawData []byte) (Stt, error) {\n+\tvar data string = \"hello\"\n+\tstt := Stt{\n+\t\tData: data,\n+\t}\n+\treturn stt, nil\n+}\n+\n+func _test() (interface{}, error) {\n+\tf := reflect.ValueOf(&My{}).MethodByName(\"Run\")\n+\tif method, ok := f.Interface().(func([]byte) (Stt, error)); ok {\n+\t\ts, e := method(nil)\n+\t\t// The bug in issue27695 happens here, during the return\n+\t\t// from the above call (at the end of reflect.callMethod\n+\t\t// when preparing to return). The result value that\n+\t\t// is assigned to s was not being scanned if GC happens\n+\t\t// to occur there.\n+\t\ti := interface{}(s)\n+\t\treturn i, e\n+\t}\n+\treturn nil, nil\n+}"}, {"sha": "d80acfb8b40eef0d7114083610f998af910cbd3d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27695b.go", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,64 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure return values aren't scanned until they\n+// are initialized, when calling functions and methods\n+// via reflect.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n+\n+var badPtr uintptr\n+\n+var sink []byte\n+\n+func init() {\n+\t// Allocate large enough to use largeAlloc.\n+\tb := make([]byte, 1<<16-1)\n+\tsink = b // force heap allocation\n+\t//  Any space between the object and the end of page is invalid to point to.\n+\tbadPtr = uintptr(unsafe.Pointer(&b[len(b)-1])) + 1\n+}\n+\n+func f(d func() *byte) *byte {\n+\t// Initialize callee args section with a bad pointer.\n+\tg(badPtr)\n+\n+\t// Then call a function which returns a pointer.\n+\t// That return slot starts out holding a bad pointer.\n+\treturn d()\n+}\n+\n+//go:noinline\n+func g(x uintptr) {\n+}\n+\n+type T struct {\n+}\n+\n+func (t *T) Foo() *byte {\n+\truntime.GC()\n+\treturn nil\n+}\n+\n+func main() {\n+\t// Functions\n+\td := reflect.MakeFunc(reflect.TypeOf(func() *byte { return nil }),\n+\t\tfunc(args []reflect.Value) []reflect.Value {\n+\t\t\truntime.GC()\n+\t\t\treturn []reflect.Value{reflect.ValueOf((*byte)(nil))}\n+\t\t}).Interface().(func() *byte)\n+\tf(d)\n+\n+\t// Methods\n+\te := reflect.ValueOf(&T{}).Method(0).Interface().(func() *byte)\n+\tf(e)\n+}"}, {"sha": "948191cc9668689db2dfd5af3960d406d93d8d18", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27695c.go", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695c.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695c.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27695c.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,65 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure return values aren't scanned until they\n+// are initialized, when calling functions and methods\n+// via reflect.\n+\n+package main\n+\n+import (\n+\t\"io\"\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n+\n+var badPtr uintptr\n+\n+var sink []byte\n+\n+func init() {\n+\t// Allocate large enough to use largeAlloc.\n+\tb := make([]byte, 1<<16-1)\n+\tsink = b // force heap allocation\n+\t//  Any space between the object and the end of page is invalid to point to.\n+\tbadPtr = uintptr(unsafe.Pointer(&b[len(b)-1])) + 1\n+}\n+\n+func f(d func(error) error) error {\n+\t// Initialize callee args section with a bad pointer.\n+\tg(badPtr, badPtr, badPtr, badPtr)\n+\n+\t// Then call a function which returns a pointer.\n+\t// That return slot starts out holding a bad pointer.\n+\treturn d(io.EOF)\n+}\n+\n+//go:noinline\n+func g(x, y, z, w uintptr) {\n+}\n+\n+type T struct {\n+}\n+\n+func (t *T) Foo(e error) error {\n+\truntime.GC()\n+\treturn e\n+}\n+\n+func main() {\n+\t// Functions\n+\td := reflect.MakeFunc(reflect.TypeOf(func(e error) error { return e }),\n+\t\tfunc(args []reflect.Value) []reflect.Value {\n+\t\t\truntime.GC()\n+\t\t\treturn args\n+\t\t}).Interface().(func(error) error)\n+\tf(d)\n+\n+\t// Methods\n+\tx := reflect.ValueOf(&T{}).Method(0).Interface().(func(error) error)\n+\tf(x)\n+}"}, {"sha": "ff616fb0f29043f183c6a0aaeb85ffaa3c8ed3c9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27718.go", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27718.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27718.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27718.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,102 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// (-0)+0 should be 0, not -0.\n+\n+package main\n+\n+//go:noinline\n+func add64(x float64) float64 {\n+\treturn x + 0\n+}\n+\n+func testAdd64() {\n+\tvar zero float64\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/add64(negZero) != inf {\n+\t\tpanic(\"negZero+0 != posZero (64 bit)\")\n+\t}\n+}\n+\n+//go:noinline\n+func sub64(x float64) float64 {\n+\treturn x - 0\n+}\n+\n+func testSub64() {\n+\tvar zero float64\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/sub64(negZero) != -inf {\n+\t\tpanic(\"negZero-0 != negZero (64 bit)\")\n+\t}\n+}\n+\n+//go:noinline\n+func neg64(x float64) float64 {\n+\treturn -x\n+}\n+\n+func testNeg64() {\n+\tvar zero float64\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/neg64(negZero) != inf {\n+\t\tpanic(\"-negZero != posZero (64 bit)\")\n+\t}\n+}\n+\n+//go:noinline\n+func add32(x float32) float32 {\n+\treturn x + 0\n+}\n+\n+func testAdd32() {\n+\tvar zero float32\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/add32(negZero) != inf {\n+\t\tpanic(\"negZero+0 != posZero (32 bit)\")\n+\t}\n+}\n+\n+//go:noinline\n+func sub32(x float32) float32 {\n+\treturn x - 0\n+}\n+\n+func testSub32() {\n+\tvar zero float32\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/sub32(negZero) != -inf {\n+\t\tpanic(\"negZero-0 != negZero (32 bit)\")\n+\t}\n+}\n+\n+//go:noinline\n+func neg32(x float32) float32 {\n+\treturn -x\n+}\n+\n+func testNeg32() {\n+\tvar zero float32\n+\tinf := 1.0 / zero\n+\tnegZero := -1 / inf\n+\tif 1/neg32(negZero) != inf {\n+\t\tpanic(\"-negZero != posZero (32 bit)\")\n+\t}\n+}\n+\n+func main() {\n+\ttestAdd64()\n+\ttestSub64()\n+\ttestNeg64()\n+\ttestAdd32()\n+\ttestSub32()\n+\ttestNeg32()\n+}"}, {"sha": "920404320285288459046467686bb878c57017e2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27829.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27829.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27829.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27829.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Bad AND/BTR combination rule.\n+\n+package main\n+\n+import \"fmt\"\n+\n+//go:noinline\n+func f(x uint64) uint64 {\n+\treturn (x >> 48) &^ (uint64(0x4000))\n+}\n+\n+func main() {\n+\tbad := false\n+\tif got, want := f(^uint64(0)), uint64(0xbfff); got != want {\n+\t\tfmt.Printf(\"got %x, want %x\\n\", got, want)\n+\t\tbad = true\n+\t}\n+\tif bad {\n+\t\tpanic(\"bad\")\n+\t}\n+}"}, {"sha": "ed974e642df576a34a1fdfca8e7b55672eecf819", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27938.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27938.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27938.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27938.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we get a single non-confusing error\n+// message for embedded fields/interfaces that use\n+// a qualified identifier with non-existing package.\n+\n+package p\n+\n+type _ struct {\n+\tF sync.Mutex // ERROR \"undefined: sync|expected package\"\n+}\n+\n+type _ struct {\n+\tsync.Mutex // ERROR \"undefined: sync|expected package\"\n+}\n+\n+type _ interface {\n+\tsync.Mutex // ERROR \"undefined: sync|expected package|expected signature or type name\"\n+}"}, {"sha": "f8b4f669c482853bfc70f9ed9b7e1756256ce2eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue27961.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27961.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27961.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue27961.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,35 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 27961: some optimizations generate OffPtr with wrong\n+// types, which causes invalid bytecode on Wasm.\n+\n+package main\n+\n+import \"math\"\n+\n+type Vec2 [2]float64\n+\n+func main() {\n+\tvar a Vec2\n+\ta.A().B().C().D()\n+}\n+\n+func (v Vec2) A() Vec2 {\n+\treturn Vec2{v[0], v[0]}\n+}\n+\n+func (v Vec2) B() Vec2 {\n+\treturn Vec2{1.0 / v.D(), 0}\n+}\n+\n+func (v Vec2) C() Vec2 {\n+\treturn Vec2{v[0], v[0]}\n+}\n+\n+func (v Vec2) D() float64 {\n+\treturn math.Sqrt(v[0])\n+}"}, {"sha": "d4889d54d4530bf8b4fa017f6960abd9d6e43d8e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28055.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28055.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28055.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28055.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure VARDEF can be a top-level statement.\n+\n+package p\n+\n+func f() {\n+\tvar s string\n+\tvar as []string\n+\tswitch false && (s+\"a\"+as[0]+s+as[0]+s == \"\") {\n+\t}\n+}"}, {"sha": "d8206e73576c4e2fa2c03afe332368217082caa3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28058.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28058.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28058.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28058.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 14988: declaring a map with an invalid key type should not cause a\n+//              fatal panic.\n+\n+package main\n+\n+var x map[func()]int // ERROR \"invalid map key type\"\n+var X map[func()]int // ERROR \"invalid map key type\""}, {"sha": "2e4c4b55164e7febabdf2fe0f0c7092b7b2aba6f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28078.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28078.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28078.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28078.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,34 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Non-constant duplicate keys/cases should not be reported\n+// as errors by the compiler.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+func f() {\n+\t_ = map[uintptr]int{\n+\t\t0:                            0,\n+\t\tuintptr(unsafe.Pointer(nil)): 0,\n+\t}\n+\n+\tswitch uintptr(0) {\n+\tcase 0:\n+\tcase uintptr(unsafe.Pointer(nil)):\n+\t}\n+\n+\tswitch interface{}(nil) {\n+\tcase nil:\n+\tcase nil:\n+\t}\n+\n+\t_ = map[interface{}]int{\n+\t\tnil: 0,\n+\t\tnil: 0,\n+\t}\n+}"}, {"sha": "b0631bbd86b8eb1fed4a6f0bed33fc402865c51b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28079a.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Non-Go-constant but constant indexes are ok at compile time.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+func f() {\n+\tvar x [0]int\n+\tx[uintptr(unsafe.Pointer(nil))] = 0\n+}\n+func g() {\n+\tvar x [10]int\n+\t_ = x[3:uintptr(unsafe.Pointer(nil))]\n+}"}, {"sha": "d1992e1d0942aa337deb2cdea13f245962094a4a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28079b.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Non-Go-constant but constant values aren't ok for array sizes.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+type T [uintptr(unsafe.Pointer(nil))]int // ERROR \"non-constant array bound|array bound is not constant\"\n+\n+func f() {\n+\t_ = complex(1<<uintptr(unsafe.Pointer(nil)), 0) // GCCGO_ERROR \"non-integer type for left operand of shift\"\n+}"}, {"sha": "dfac8d01554737f8ebdc93f51b522a562479a272", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28079c.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079c.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079c.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28079c.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Non-Go-constant but constant values aren't ok for shifts.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+func f() {\n+\t_ = complex(1<<uintptr(unsafe.Pointer(nil)), 0) // ERROR \"invalid operation: .*shift of type float64.*|non-integer type for left operand of shift\"\n+}"}, {"sha": "59a4c57c6727b35cda2538f139432a20c1571387", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28268.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28268.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28268.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28268.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that follow-on errors due to conflicting\n+// struct field and method names are suppressed.\n+\n+package p\n+\n+type T struct {\n+\ta, b, c int\n+\tE\n+}\n+\n+type E struct{}\n+\n+func (T) b()  {} // ERROR \"field and method named b|redeclares struct field name\"\n+func (*T) E() {} // ERROR \"field and method named E|redeclares struct field name\"\n+\n+func _() {\n+\tvar x T\n+\t_ = x.a\n+\t_ = x.b // no follow-on error here\n+\tx.b()   // no follow-on error here\n+\t_ = x.c\n+\t_ = x.E // no follow-on error here\n+\tx.E()   // no follow-on error here\n+}"}, {"sha": "0a4d873182d48fa75f05506778d1c91e21ce3727", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28390.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,39 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 28390/28430: Function call arguments were not\n+// converted correctly under some circumstances.\n+\n+package main\n+\n+import \"fmt\"\n+\n+type A struct {\n+\tK int\n+\tS string\n+\tM map[string]string\n+}\n+\n+func newA(k int, s string) (a A) {\n+\ta.K = k\n+\ta.S = s\n+\ta.M = make(map[string]string)\n+\ta.M[s] = s\n+\treturn\n+}\n+\n+func proxy() (x int, a A) {\n+\treturn 1, newA(2, \"3\")\n+}\n+\n+func consume(x int, a interface{}) {\n+\tfmt.Println(x)\n+\tfmt.Println(a) // used to panic here\n+}\n+\n+func main() {\n+\tconsume(proxy())\n+}"}, {"sha": "c923108f817adef6c109020611e08dfc68bef179", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28390.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28390.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,2 @@\n+1\n+{2 3 map[3:3]}"}, {"sha": "b59259abdc0f03ca0147a0042ea19406ee808389", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28430.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28430.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28430.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28430.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 28390/28430: Function call arguments were not\n+// converted correctly under some circumstances.\n+\n+package main\n+\n+func g(_ interface{}, e error)\n+func h() (int, error)\n+\n+func f() {\n+\tg(h())\n+}"}, {"sha": "572614051e141bf157ff73167caa5f816b1a4d3c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28445.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28445.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28445.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28445.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var fp = (**float64)(nil)\n+\n+func f() {\n+\tswitch fp {\n+\tcase new(*float64):\n+\t\tprintln()\n+\t}\n+}"}, {"sha": "2acfe39177a04d68b98eeb3ac772760beaab058c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28450.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28450.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28450.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28450.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(a, b, c, d ...int)       {} // ERROR \"non-final parameter a|only permits one name\"\n+func g(a ...int, b ...int)      {} // ERROR \"non-final parameter a|must be last parameter\"\n+func h(...int, ...int, float32) {} // ERROR \"non-final parameter|must be last parameter\"\n+\n+type a func(...float32, ...interface{}) // ERROR \"non-final parameter|must be last parameter\"\n+type b interface {\n+\tf(...int, ...int)                // ERROR \"non-final parameter|must be last parameter\"\n+\tg(a ...int, b ...int, c float32) // ERROR \"non-final parameter a|must be last parameter\"\n+\tvalid(...int)\n+}"}, {"sha": "f1ba97479756e40d890c1456fa4d758c1fd62a8a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28616.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28616.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28616.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28616.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we don't dead code eliminate a label.\n+\n+package p\n+\n+var i int\n+\n+func f() {\n+\n+\tif true {\n+\n+\t\tif i == 1 {\n+\t\t\tgoto label\n+\t\t}\n+\n+\t\treturn\n+\t}\n+\n+label:\n+}"}, {"sha": "0d2000e149872f2d0d5496e64123bbcd0f491d8f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28688.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28688.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28688.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28688.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,31 @@\n+// run -gcflags=-d=softfloat\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+// When using soft-float, OMUL might be rewritten to function\n+// call so we should ensure it was evaluated first. Stack frame\n+// setup for \"test\" function call should happen after call to runtime.fmul32\n+\n+var x int32 = 1\n+\n+func main() {\n+\tvar y float32 = 1.0\n+\ttest(x, y*y)\n+}\n+\n+//go:noinline\n+func test(id int32, a float32) {\n+\n+\tif id != x {\n+\t\tfmt.Printf(\"got: %d, want: %d\\n\", id, x)\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "480c1059b8b255ca21631b56470260dc789e64c7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue28797.go", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28797.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28797.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue28797.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,53 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+// test expects f to panic, but not to run out of memory,\n+// which is a non-panic fatal error.  OOM results from failure\n+// to properly check negative limit.\n+func test(f func()) {\n+\tdefer func() {\n+\t\tr := recover()\n+\t\tif r == nil {\n+\t\t\tpanic(\"panic wasn't recoverable\")\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n+//go:noinline\n+func id(x int) int {\n+\treturn x\n+}\n+\n+func main() {\n+\ttest(foo)\n+\ttest(bar)\n+}\n+\n+func foo() {\n+\tb := make([]byte, 0)\n+\tb = append(b, 1)\n+\tid(len(b))\n+\tid(len(b) - 2)\n+\ts := string(b[1 : len(b)-2])\n+\tfmt.Println(s)\n+}\n+\n+func bar() {\n+\tb := make([]byte, 1)\n+\tb = append(b, 1)\n+\ti := id(-1)\n+\tif i < len(b) { // establish value is not too large.\n+\t\ts := string(b[1:i]) // should check for negative also.\n+\t\tfmt.Println(s)\n+\t}\n+}"}, {"sha": "efc50dfb1f2810a749894ca044dd8ea273d87346", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29013a.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type TestSuite struct {\n+\tTests []int\n+}\n+\n+var Suites = []TestSuite{\n+\tDicts,\n+}\n+var Dicts = TestSuite{\n+\tTests: []int{0},\n+}\n+\n+func main() {\n+\tif &Dicts.Tests[0] != &Suites[0].Tests[0] {\n+\t\tpanic(\"bad\")\n+\t}\n+}"}, {"sha": "b8502dad9b5a164c993678cbdd7f68ebf45694a8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29013b.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29013b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,43 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type TestSuite struct {\n+\tTests []Test\n+}\n+type Test struct {\n+\tWant interface{}\n+}\n+type Int struct {\n+\ti int\n+}\n+\n+func NewInt(v int) Int {\n+\treturn Int{i: v}\n+}\n+\n+var Suites = []TestSuite{\n+\tDicts,\n+}\n+var Dicts = TestSuite{\n+\tTests: []Test{\n+\t\t{\n+\t\t\tWant: map[Int]bool{NewInt(1): true},\n+\t\t},\n+\t\t{\n+\t\t\tWant: map[Int]string{\n+\t\t\t\tNewInt(3): \"3\",\n+\t\t\t},\n+\t\t},\n+\t},\n+}\n+\n+func main() {\n+\tif Suites[0].Tests[0].Want.(map[Int]bool)[NewInt(3)] {\n+\t\tpanic(\"bad\")\n+\t}\n+}"}, {"sha": "c0c4bb12b4df03ba862c4884b33e664a593a616a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29190.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29190.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29190.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29190.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"strings\"\n+)\n+\n+type T struct{}\n+\n+const maxInt = int(^uint(0) >> 1)\n+\n+func main() {\n+\ts := make([]T, maxInt)\n+\tshouldPanic(\"cap out of range\", func() { s = append(s, T{}) })\n+\tvar oneElem = make([]T, 1)\n+\tshouldPanic(\"cap out of range\", func() { s = append(s, oneElem...) })\n+}\n+\n+func shouldPanic(str string, f func()) {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tpanic(\"did not panic\")\n+\t\t}\n+\t\ts := err.(error).Error()\n+\t\tif !strings.Contains(s, str) {\n+\t\t\tpanic(\"got panic \" + s + \", want \" + str)\n+\t\t}\n+\t}()\n+\n+\tf()\n+}"}, {"sha": "4e8f107aee585b7a6e87354ac7dcffbb96c43c79", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29215.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29215.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29215.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29215.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,35 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func f() {\n+        var s string\n+        var p, q bool\n+        s = \"a\"\n+        for p {\n+                p = false == (true != q)\n+                s = \"\"\n+        }\n+        _ = s == \"bbb\"\n+}\n+\n+// Another case: load from negative offset of a symbol\n+// in dead code (issue 30257).\n+func g() {\n+\tvar i int\n+\tvar s string\n+\n+\tif true {\n+\t\ts = \"a\"\n+\t}\n+\n+\tif f := 0.0; -f < 0 {\n+\t\ti = len(s[:4])\n+\t}\n+\n+\t_ = s[i-1:0] != \"bb\" && true\n+}"}, {"sha": "ac9fed75f23159886fe4dce29b0518dd949ccde7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29218.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29218.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29218.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29218.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T struct {\n+\tb bool\n+\tstring\n+}\n+\n+func f() {\n+\tvar b bool\n+\tvar t T\n+\tfor {\n+\t\tswitch &t.b {\n+\t\tcase &b:\n+\t\t\tif b {\n+\t\t\t}\n+\t\t}\n+\t}\n+}"}, {"sha": "bbfe930786e09a2009a853b1576fd08c1e25689c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29220.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29220.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29220.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29220.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func ascii(r rune) rune {\n+\tswitch {\n+\tcase 97 <= r && r <= 122:\n+\t\treturn r - 32\n+\tcase 65 <= r && r <= 90:\n+\t\treturn r + 32\n+\tdefault:\n+\t\treturn r\n+\t}\n+}\n+\n+func main() {\n+\tnomeObjeto := \"ABE1FK21\"\n+\tprintln(string(nomeObjeto[1:4]))\n+\tprintln(ascii(rune(nomeObjeto[4])) >= 48 && ascii(rune(nomeObjeto[4])) <= 57)\n+\tprintln(string(nomeObjeto[5]))\n+\tprintln(string(nomeObjeto[6:10]))\n+}"}, {"sha": "3781559ada315a4b6f913a4ea1ee20f4583d4bc8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29264.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29264.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29264.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29264.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,22 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we emit a valid type descriptor for\n+// a fairly deeply nested type.\n+\n+package main\n+\n+import \"fmt\"\n+import \"strings\"\n+\n+func main() {\n+\ta := [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]int{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{42}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n+\tgot := fmt.Sprint(a)\n+\twant := strings.Repeat(\"[\", 100) + \"42\" + strings.Repeat(\"]\", 100)\n+\tif got != want {\n+\t\tfmt.Printf(\"got  %q\\nwant %q\\n\", got, want)\n+\t}\n+}"}, {"sha": "47bc99f9ca20e0ca50cc62ad7cf14130f33dd724", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29304.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29304.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29304.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29304.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that relocation target go.builtin.error.Error\n+// is defined and the code links and runs correctly.\n+\n+package main\n+\n+import \"errors\"\n+\n+func main() {\n+\terr := errors.New(\"foo\")\n+\tif error.Error(err) != \"foo\" {\n+\t\tpanic(\"FAILED\")\n+\t}\n+}"}, {"sha": "4293e0100421b4af1e08073f237ae6b965d1bc4f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29312.go", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29312.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29312.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29312.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,70 @@\n+// run\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test is not for a fix of 29312 proper, but for the patch that\n+// makes sure we at least don't have a security hole because of 29312.\n+\n+// This code generates lots of types. The binary should contain\n+// a runtime.slicetype for each of the following 253 types:\n+//\n+//     []*pwn\n+//     [][]*pwn\n+//     ...\n+//     [][]...[][]*pwn          - 249 total \"[]\"\n+//     [][]...[][][]*pwn        - 250 total \"[]\"\n+//     [][]...[][][][]*pwn      - 251 total \"[]\"\n+//     [][]...[][][][][]*pwn    - 252 total \"[]\"\n+//     [][]...[][][][][][]*pwn  - 253 total \"[]\"\n+//\n+// The type names for these types are as follows. Because we truncate\n+// the name at depth 250, the last few names are all identical:\n+//\n+//     type.[]*\"\".pwn\n+//     type.[][]*\"\".pwn\n+//     ...\n+//     type.[][]...[][]*pwn       - 249 total \"[]\"\n+//     type.[][]...[][][]*<...>   - 250 total \"[]\"\n+//     type.[][]...[][][][]<...>  - 251 total \"[]\"\n+//     type.[][]...[][][][]<...>  - 252 total \"[]\" (but only 251 \"[]\" in the name)\n+//     type.[][]...[][][][]<...>  - 253 total \"[]\" (but only 251 \"[]\" in the name)\n+//\n+// Because the names of the last 3 types are all identical, the\n+// compiler will generate only a single runtime.slicetype data\n+// structure for all 3 underlying types. It turns out the compiler\n+// generates just the 251-entry one. There aren't any\n+// runtime.slicetypes generated for the final two types.\n+//\n+// The compiler passes type.[]...[]<...> (251 total \"[]\") to\n+// fmt.Sprintf (instead of the correct 253 one). But the data\n+// structure at runtime actually has 253 nesting levels. So we end up\n+// calling String on something that is of type [][]*pwn instead of\n+// something of type *pwn. The way arg passing in Go works, the\n+// backing store pointer for the outer slice becomes the \"this\"\n+// pointer of the String method, which points to the inner []*pwn\n+// slice.  The String method then modifies the length of that inner\n+// slice.\n+package main\n+\n+import \"fmt\"\n+\n+type pwn struct {\n+\ta [3]uint\n+}\n+\n+func (this *pwn) String() string {\n+\tthis.a[1] = 7 // update length\n+\treturn \"\"\n+}\n+\n+func main() {\n+\tvar a pwn\n+\tspwn{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{&a}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} // depth 253\n+\tfmt.Sprint(s)\n+\tn := len(sdepth 252, type []*pwn\n+\tif n != 1 {\n+\t\tpanic(fmt.Sprintf(\"length was changed, want 1 got %d\", n))\n+\t}\n+}"}, {"sha": "7818bca30a02e657bf357c55fe0e3b74fd7ea3d8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29329.go", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29329.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29329.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29329.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,107 @@\n+// +build cgo\n+// run -race\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build linux,amd64\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+type LineString []Point\n+type Point [2]float64\n+\n+//go:noinline\n+func benchmarkData() LineString {\n+\treturn LineString{{1.0, 2.0}}\n+}\n+\n+func (ls LineString) Clone() LineString {\n+\tps := MultiPoint(ls)\n+\treturn LineString(ps.Clone())\n+}\n+\n+type MultiPoint []Point\n+\n+func (mp MultiPoint) Clone() MultiPoint {\n+\tif mp == nil {\n+\t\treturn nil\n+\t}\n+\n+\tpoints := make([]Point, len(mp))\n+\tcopy(points, mp)\n+\n+\treturn MultiPoint(points)\n+}\n+\n+func F1() {\n+\tcases := []struct {\n+\t\tthreshold float64\n+\t\tlength    int\n+\t}{\n+\t\t{0.1, 1118},\n+\t\t{0.5, 257},\n+\t\t{1.0, 144},\n+\t\t{1.5, 95},\n+\t\t{2.0, 71},\n+\t\t{3.0, 46},\n+\t\t{4.0, 39},\n+\t\t{5.0, 33},\n+\t}\n+\n+\tls := benchmarkData()\n+\n+\tfor k := 0; k < 100; k++ {\n+\t\tfor i, tc := range cases {\n+\t\t\tr := DouglasPeucker(tc.threshold).LineString(ls.Clone())\n+\t\t\tif len(r) == tc.length {\n+\t\t\t\tfmt.Printf(\"%d: unexpected\\n\", i)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+// A DouglasPeuckerSimplifier wraps the DouglasPeucker function.\n+type DouglasPeuckerSimplifier struct {\n+\tThreshold float64\n+}\n+\n+// DouglasPeucker creates a new DouglasPeuckerSimplifier.\n+func DouglasPeucker(threshold float64) *DouglasPeuckerSimplifier {\n+\treturn &DouglasPeuckerSimplifier{\n+\t\tThreshold: threshold,\n+\t}\n+}\n+\n+func (s *DouglasPeuckerSimplifier) LineString(ls LineString) LineString {\n+\treturn lineString(s, ls)\n+}\n+\n+type simplifier interface {\n+\tsimplify(LineString, bool) (LineString, []int)\n+}\n+\n+func lineString(s simplifier, ls LineString) LineString {\n+\treturn runSimplify(s, ls)\n+}\n+\n+func runSimplify(s simplifier, ls LineString) LineString {\n+\tif len(ls) <= 2 {\n+\t\treturn ls\n+\t}\n+\tls, _ = s.simplify(ls, false)\n+\treturn ls\n+}\n+\n+func (s *DouglasPeuckerSimplifier) simplify(ls LineString, wim bool) (LineString, []int) {\n+\treturn nil, nil\n+}\n+\n+func main() {\n+\tF1()\n+}"}, {"sha": "9d59f6f6c0f10b6781e94ab3628c2a9a48f45ea4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29350.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29350.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29350.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29350.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var X interface{} = 'x'"}, {"sha": "a8bd607c4a29b0c3b8cb6440c305c81a202e44f2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29362.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,42 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we don't consider a Go'd function's\n+// arguments as pointers when they aren't.\n+\n+package main\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+var badPtr uintptr\n+\n+var sink []byte\n+\n+func init() {\n+\t// Allocate large enough to use largeAlloc.\n+\tb := make([]byte, 1<<16-1)\n+\tsink = b // force heap allocation\n+\t//  Any space between the object and the end of page is invalid to point to.\n+\tbadPtr = uintptr(unsafe.Pointer(&b[len(b)-1])) + 1\n+}\n+\n+var throttle = make(chan struct{}, 10)\n+\n+func noPointerArgs(a, b, c, d uintptr) {\n+\tsink = make([]byte, 4096)\n+\t<-throttle\n+}\n+\n+func main() {\n+\tconst N = 1000\n+\tfor i := 0; i < N; i++ {\n+\t\tthrottle <- struct{}{}\n+\t\tgo noPointerArgs(badPtr, badPtr, badPtr, badPtr)\n+\t\tsink = make([]byte, 4096)\n+\t}\n+}"}, {"sha": "d1e3b4733f8ab338596587f500b3c04bf728c8c8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29362b.go", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29362b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,53 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we don't consider a Go'd function's\n+// arguments as pointers when they aren't.\n+\n+package main\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+var badPtr uintptr\n+\n+var sink []byte\n+\n+func init() {\n+\t// Allocate large enough to use largeAlloc.\n+\tb := make([]byte, 1<<16-1)\n+\tsink = b // force heap allocation\n+\t//  Any space between the object and the end of page is invalid to point to.\n+\tbadPtr = uintptr(unsafe.Pointer(&b[len(b)-1])) + 1\n+}\n+\n+var throttle = make(chan struct{}, 10)\n+\n+// There are 2 arg bitmaps for this function, each with 2 bits.\n+// In the first, p and q are both live, so that bitmap is 11.\n+// In the second, only p is live, so that bitmap is 10.\n+// Bitmaps are byte aligned, so if the first bitmap is interpreted as\n+// extending across the entire argument area, we incorrectly concatenate\n+// the bitmaps and end up using 110000001. That bad bitmap causes a6\n+// to be considered a pointer.\n+func noPointerArgs(p, q *byte, a0, a1, a2, a3, a4, a5, a6 uintptr) {\n+\tsink = make([]byte, 4096)\n+\tsinkptr = q\n+\t<-throttle\n+\tsinkptr = p\n+}\n+\n+var sinkptr *byte\n+\n+func main() {\n+\tconst N = 1000\n+\tfor i := 0; i < N; i++ {\n+\t\tthrottle <- struct{}{}\n+\t\tgo noPointerArgs(nil, nil, badPtr, badPtr, badPtr, badPtr, badPtr, badPtr, badPtr)\n+\t\tsink = make([]byte, 4096)\n+\t}\n+}"}, {"sha": "43859fd38f0852c6015a8f30e94c0ae952a30357", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29389.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29389.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29389.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29389.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we can correctly compile method expressions\n+// where the method is implicitly declared.\n+\n+package main\n+\n+import \"io\"\n+\n+func main() {\n+\terr := io.EOF\n+\t_ = err.Error\n+}"}, {"sha": "8a1f959d8428074b459fc632f9cea6f527fd16b3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29402.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29402.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29402.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29402.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run\n+  \n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 29402: wrong optimization of comparison of\n+// constant and shift on MIPS.\n+\n+package main\n+\n+//go:noinline\n+func F(s []int) bool {\n+\thalf := len(s) / 2\n+\treturn half >= 0\n+}\n+\n+func main() {\n+\tb := F([]int{1, 2, 3, 4})\n+\tif !b {\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "cbcd77d5df76b062c5eda1a83e3a5c519d977831", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29562.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29562.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29562.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29562.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Triggers a double walk of the (inlined) switch in il\n+\n+package p\n+\n+func il(s string) string {\n+\tswitch len(s) {\n+\tcase 0:\n+\t\treturn \"zero\"\n+\tcase 1:\n+\t\treturn \"one\"\n+\t}\n+\treturn s\n+}\n+\n+func f() {\n+\tvar s string\n+\tvar as []string\n+\tswitch false && (s+\"a\"+as[0]+il(s)+as[0]+s == \"\") {\n+\t}\n+}"}, {"sha": "ccbe451bca9cbfe427d0ba523e7442dd30d6b7ea", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29610.dir/a.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type I interface {\n+\tM(init bool)\n+}\n+\n+var V I\n+\n+func init() {\n+\tV = nil\n+}"}, {"sha": "c2016de3d05ca6ab7df42d7f20d45f5976004319", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29610.dir/b.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+type S struct {\n+\ta.I\n+}\n+\n+var V a.I\n+\n+func init() {\n+\tV = S{}\n+}"}, {"sha": "29437bfa618638b5f740d63a0a5893e4dce4e1d1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29610.dir/main.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./b\"\n+\n+var v b.S\n+\n+func main() {}"}, {"sha": "8d49ba6b8c19c38532946d3bccb26b6f381ca5b4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29610.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29610.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// rundir\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 29610: Symbol import and initialization order caused function\n+// symbols to be recorded as non-function symbols.\n+\n+// This uses rundir not because we actually want to run the final\n+// binary, but because we need to at least link it.\n+\n+package ignored"}, {"sha": "7a0381d533effcf5f8b8b52c81c435186fdde8c7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29735.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29735.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29735.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29735.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,33 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure FuncForPC won't panic when given a pc which\n+// lies between two functions.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+)\n+\n+func main() {\n+\tvar stack [1]uintptr\n+\truntime.Callers(1, stack[:])\n+\tf() // inlined function, to give main some inlining info\n+\tfor i := uintptr(0); true; i++ {\n+\t\tf := runtime.FuncForPC(stack[0] + i)\n+\t\tif f.Name() != \"main.main\" && f.Name() != \"main.f\" {\n+\t\t\t// Reached next function successfully.\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+func f() {\n+\tsink = 0 // one instruction which can't be removed\n+}\n+\n+var sink int"}, {"sha": "402093c160257ce9a0b7c52e0a5c32dfe015c251", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29855.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29855.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29855.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29855.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T struct {\n+\tGlobalName string\n+}\n+\n+var t = T{Name: \"foo\"} // ERROR \"unknown field 'Name' in struct literal of type T|unknown field .*Name.* in .*T\"\n+\n+func (t T) Name() string {\n+\treturn t.GlobalName\n+}"}, {"sha": "b79860ca2bb9ed71d5bf28926029a9fc46771427", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29870.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we can compile \"_\" functions without crashing.\n+\n+package main\n+\n+import \"log\"\n+\n+func _() {\n+\tlog.Println(\"%2F\")\n+}"}, {"sha": "0a83489d96322f3d1005b99048ba03c553da1821", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29870b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29870b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we're compiling \"_\" functions at least enough\n+// to get to an error which is generated during walk.\n+\n+package main\n+\n+func _() {\n+\tx := 7 // ERROR \".*x.* declared but not used\"\n+}"}, {"sha": "ff47de55d524e23b12c8aa2569419d89b103aeb5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue29943.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29943.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29943.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue29943.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Code was miscompiled on ppc64le due to incorrect zero-extension\n+// that was CSE'd.\n+\n+package main\n+\n+//go:noinline\n+func g(i uint64) uint64 {\n+\treturn uint64(uint32(i))\n+}\n+\n+var sink uint64\n+\n+func main() {\n+\tfor i := uint64(0); i < 1; i++ {\n+\t\ti32 := int32(i - 1)\n+\t\tsink = uint64((uint32(i32) << 1) ^ uint32((i32 >> 31)))\n+\t\tx := g(uint64(i32))\n+\t\tif x != uint64(uint32(i32)) {\n+\t\t\tpanic(x)\n+\t\t}\n+\t}\n+}"}, {"sha": "7d8a1698cbc2882e2e7b3a06cd7007d642752b08", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30041.go", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30041.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30041.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30041.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,63 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 30041: copying results of a reflect-generated\n+// call on stack should not have write barrier.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n+\n+var badPtr uintptr\n+\n+var sink []byte\n+\n+func init() {\n+\t// Allocate large enough to use largeAlloc.\n+\tb := make([]byte, 1<<16-1)\n+\tsink = b // force heap allocation\n+\t//  Any space between the object and the end of page is invalid to point to.\n+\tbadPtr = uintptr(unsafe.Pointer(&b[len(b)-1])) + 1\n+}\n+\n+type ft func() *int\n+\n+var fn ft\n+\n+func rf([]reflect.Value) []reflect.Value {\n+\ta := reflect.ValueOf((*int)(nil))\n+\treturn []reflect.Value{a}\n+}\n+\n+const N = 1000\n+\n+func main() {\n+\tfn = reflect.MakeFunc(reflect.TypeOf(fn), rf).Interface().(ft)\n+\n+\t// Keep running GC so the write barrier is on.\n+\tgo func() {\n+\t\tfor i := 0; i < N; i++ {\n+\t\t\truntime.GC()\n+\t\t}\n+\t}()\n+\n+\tvar x [10]uintptr\n+\tfor i := range x {\n+\t\tx[i] = badPtr\n+\t}\n+\tfor i := 0; i < N; i++ {\n+\t\truntime.Gosched()\n+\t\tuse(x) // prepare bad pointers on stack\n+\t\tfn()\n+\t}\n+}\n+\n+//go:noinline\n+func use([10]uintptr) {}"}, {"sha": "5092b01799ef0fd3929c97dc4c3c6bf3fe21a254", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30061.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30061.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30061.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30061.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we can linkname to memmove with an unsafe.Pointer argument.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+//go:linkname memmove runtime.memmove\n+func memmove(to, from unsafe.Pointer, n uintptr)\n+\n+var V1, V2 int\n+\n+func F() {\n+\tmemmove(unsafe.Pointer(&V1), unsafe.Pointer(&V2), unsafe.Sizeof(int(0)))\n+}"}, {"sha": "d2ac4cfbfa7a06bb598fb4b7e20d9aa4799a61eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30085.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30085.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30085.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30085.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,12 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tvar c, d = 1, 2, 3 // ERROR \"assignment mismatch: 2 variables but 3 values|wrong number of initializations\"\n+\tvar e, f, g = 1, 2 // ERROR \"assignment mismatch: 3 variables but 2 values|wrong number of initializations\"\n+}"}, {"sha": "3ad9c8c8d90c0c32479a5d48b1bf72845df19171", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30087.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30087.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30087.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30087.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tvar a, b = 1    // ERROR \"assignment mismatch: 2 variables but 1 values|wrong number of initializations\"\n+\t_ = 1, 2        // ERROR \"assignment mismatch: 1 variables but 2 values|number of variables does not match\"\n+\tc, d := 1       // ERROR \"assignment mismatch: 2 variables but 1 values|wrong number of initializations\"\n+\te, f := 1, 2, 3 // ERROR \"assignment mismatch: 2 variables but 3 values|wrong number of initializations\"\n+}"}, {"sha": "51fd204cbc6decb3690f0a940c2b369c3f83bd27", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30243.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30243.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30243.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30243.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Compile-time constants, even if they cannot be represented\n+// accurately, should remain the same in operations that don't\n+// affect their values.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tconst x = 0.01\n+\tconst xi = 0.01i\n+\tconst xc = complex(0, x)\n+\n+\tif imag(xi) != x {\n+\t\tfmt.Printf(\"FAILED: %g != %g\\n\", imag(xi), x)\n+\t}\n+\n+\tif xi != complex(0, x) {\n+\t\tfmt.Printf(\"FAILED: %g != %g\\n\", xi, complex(0, x))\n+\t}\n+}"}, {"sha": "6c27b82881a07ca218b60a88839dfc0a6dc7edcc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30430.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30430.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30430.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30430.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 30430: isGoConst returned true for non-const variables,\n+// resulting in ICE.\n+\n+package p\n+\n+func f() {\n+\tvar s string\n+\t_ = map[string]string{s: \"\"}\n+}\n+\n+const s = \"\""}, {"sha": "a2147ec0c1e608dac26de995988f37c5de3de0d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30476.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30476.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30476.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30476.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 30476: KeepAlive didn't keep stack object alive.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func main() {\n+\tx := new([10]int)\n+\truntime.SetFinalizer(x, func(*[10]int) { panic(\"FAIL: finalizer runs\") })\n+\tp := &T{x, 0}\n+\tuse(p)\n+\truntime.GC()\n+\truntime.GC()\n+\truntime.GC()\n+\truntime.KeepAlive(p)\n+}\n+\n+type T struct {\n+\tx *[10]int\n+\ty int\n+}\n+\n+//go:noinline\n+func use(*T) {}"}, {"sha": "5d736ccd0dc44587c5dac72a156560e495c475cb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30566a.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+//go:noinline\n+func ident(s string) string { return s }\n+\n+func returnSecond(x bool, s string) string { return s }\n+\n+func identWrapper(s string) string { return ident(s) }\n+\n+func main() {\n+\tgot := returnSecond((false || identWrapper(\"bad\") != \"\"), ident(\"good\"))\n+\tif got != \"good\" {\n+\t\tpanic(fmt.Sprintf(\"wanted \\\"good\\\", got \\\"%s\\\"\", got))\n+\t}\n+}"}, {"sha": "92e064436dd83ae7468ee9ac76d9a32efe017511", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30566b.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30566b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+)\n+\n+func main() {\n+\t_, _ = false || g(1), g(2)\n+\tif !bytes.Equal(x, []byte{1, 2}) {\n+\t\tpanic(fmt.Sprintf(\"wanted [1,2], got %v\", x))\n+\t}\n+}\n+\n+var x []byte\n+\n+//go:noinline\n+func g(b byte) bool {\n+\tx = append(x, b)\n+\treturn false\n+}"}, {"sha": "bc31982e10f5e5e17d94cff12a48d22100a1b8f4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30606.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"reflect\"\n+\n+func main() {}\n+\n+func typ(x interface{}) reflect.Type { return reflect.ValueOf(x).Type() }\n+\n+var x = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F5\", Type: reflect.StructOf([]reflect.StructField{\n+\t\t{Name: \"F4\", Type: reflect.ArrayOf(5462,\n+\t\t\treflect.SliceOf(typ(uint64(0))))},\n+\t})},\n+}))"}, {"sha": "2ce2804ad8dafd7f0a823dd0ea19e263b35d6547", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30606b.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30606b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,51 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"reflect\"\n+\n+func main() {}\n+\n+func typ(x interface{}) reflect.Type { return reflect.ValueOf(x).Type() }\n+\n+var byteType = typ((byte)(0))\n+var ptrType = typ((*byte)(nil))\n+\n+// Arrays of pointers. There are two size thresholds.\n+// Bit masks are chunked in groups of 120 pointers.\n+// Array types with >16384 pointers have a GC program instead of a bitmask.\n+var smallPtrType = reflect.ArrayOf(100, ptrType)\n+var mediumPtrType = reflect.ArrayOf(1000, ptrType)\n+var bigPtrType = reflect.ArrayOf(16385, ptrType)\n+\n+var x0 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: byteType},\n+\t{Name: \"F2\", Type: bigPtrType},\n+}))\n+var x1 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: smallPtrType},\n+\t{Name: \"F2\", Type: bigPtrType},\n+}))\n+var x2 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: mediumPtrType},\n+\t{Name: \"F2\", Type: bigPtrType},\n+}))\n+var x3 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: ptrType},\n+\t{Name: \"F2\", Type: byteType},\n+\t{Name: \"F3\", Type: bigPtrType},\n+}))\n+var x4 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: ptrType},\n+\t{Name: \"F2\", Type: smallPtrType},\n+\t{Name: \"F3\", Type: bigPtrType},\n+}))\n+var x5 = reflect.New(reflect.StructOf([]reflect.StructField{\n+\t{Name: \"F1\", Type: ptrType},\n+\t{Name: \"F2\", Type: mediumPtrType},\n+\t{Name: \"F3\", Type: bigPtrType},\n+}))"}, {"sha": "4d0df18f45faf5e7a0d7d392ed96da5d7ec49631", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30679.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30679.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30679.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30679.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tvar f float64\n+\tvar p, q *float64\n+\n+\tp = &f\n+\tif *q > 0 {\n+\t\tp = q\n+\t}\n+\t_ = *p\n+}"}, {"sha": "49524540ed31e30a6376a3a26107cb5b97a5fbbf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30709.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,33 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check closure in const declaration group can be compiled\n+// and set correct value\n+\n+package main\n+\n+import \"unsafe\"\n+\n+const (\n+\tx = unsafe.Sizeof(func() {})\n+\ty\n+)\n+\n+func main() {\n+\tconst (\n+\t\tz = unsafe.Sizeof(func() {})\n+\t\tt\n+\t)\n+\n+\t// x and y must be equal\n+\tprintln(x == y)\n+\t// size must be greater than zero\n+\tprintln(y > 0)\n+\n+\t// Same logic as x, y above\n+\tprintln(z == t)\n+\tprintln(t > 0)\n+}"}, {"sha": "1140ff52e2ba1f46b1315269500c551a9bd48768", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30709.out", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30709.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,4 @@\n+true\n+true\n+true\n+true"}, {"sha": "c23f4de1efd1a91bdf42ab66e1dd3afe551fdafc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30862.dir/a.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+var pl int\n+\n+type NoitfStruct struct {\n+\tF int\n+\tG int\n+}\n+\n+//go:nointerface\n+func (t *NoitfStruct) NoInterfaceMethod() {}"}, {"sha": "3e501bb8dcbdc7c853f614fba5b360d50d87c044", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30862.dir/b.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+type EmbedImported struct {\n+\ta.NoitfStruct\n+}\n+\n+func Test() []string {\n+\tbad := []string{}\n+\tx := interface{}(new(a.NoitfStruct))\n+\tif _, ok := x.(interface {\n+\t\tNoInterfaceMethod()\n+\t}); ok {\n+\t\tbad = append(bad, \"fail 1\")\n+\t}\n+\n+\tx = interface{}(new(EmbedImported))\n+\tif _, ok := x.(interface {\n+\t\tNoInterfaceMethod()\n+\t}); ok {\n+\t\tbad = append(bad, \"fail 2\")\n+\t}\n+\treturn bad\n+}"}, {"sha": "80db0e13a84753fda986ebfc40c0bd3bdcda44d4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30862.dir/main.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\n+\t\"./b\"\n+)\n+\n+// Test case for issue 30862.\n+\n+// Be aware that unless GOEXPERIMENT=fieldtrack is set when building\n+// the compiler, this test will fail if executed with a regular GC\n+// compiler.\n+\n+func main() {\n+\tbad := b.Test()\n+\tif len(bad) > 0 {\n+\t\tfor _, s := range bad {\n+\t\t\tfmt.Fprintf(os.Stderr, \"test failed: %s\\n\", s)\n+\t\t}\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "ba122cc3c8b805b931660d3c39c36db48ddb2e9c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30862.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30862.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// rundir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test case for issue 30862.  This test as written will\n+// fail for the main 'gc' compiler unless GOEXPERIMENT=fieldtrack\n+// is set when building it, whereas gccgo has field tracking\n+// enabled by default (hence the build tag below).\n+\n+// +build gccgo\n+\n+package ignored"}, {"sha": "b6376d3f9e7a7fe0ae223db0c869bd9a0dc6c9fa", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30898.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30898.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30898.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30898.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck -0 -m\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test escape analysis for functions with variadic arguments\n+\n+package foo\n+\n+func debugf(format string, args ...interface{}) { // ERROR \"can inline debugf\" \"format does not escape\" \"args does not escape\"\n+\t// Dummy implementation for non-debug build.\n+\t// A non-empty implementation would be enabled with a build tag.\n+}\n+\n+func bar() { // ERROR \"can inline bar\"\n+\tvalue := 10\n+\tdebugf(\"value is %d\", value) // ERROR \"inlining call to debugf\" \"value does not escape\" \"\\[\\]interface {}{...} does not escape\"\n+}"}, {"sha": "e1a5c0cc3b6fbea2d4d8fc9835ce7ee3b8c4bb33", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30907.dir/a.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type UUID string\n+\n+func New() UUID {\n+\treturn Must(NewRandom())\n+}\n+\n+func NewRandom() (UUID, error) {\n+\treturn \"\", nil\n+}\n+\n+func Must(uuid UUID, err error) UUID {\n+\treturn uuid\n+}"}, {"sha": "f4f5fc4fdd12714522a02d41543bdd7e08aaf6df", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30907.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"./a\"\n+\n+func F() {\n+\ta.New()\n+}"}, {"sha": "973ae1dcef229fff93cfeb070dc2b64f1ccfd0e0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30907.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30907.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "021e6c5d47bbdec4ea666f984041e0536f43c503", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30956.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,32 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check for compile generated static data for literal\n+// composite struct\n+\n+package main\n+\n+import \"fmt\"\n+\n+type X struct {\n+\tV interface{}\n+\n+\ta int\n+\tb int\n+\tc int\n+}\n+\n+func pr(x X) {\n+\tfmt.Println(x.V)\n+}\n+\n+func main() {\n+\tpr(X{\n+\t\tV: struct {\n+\t\t\tA int\n+\t\t}{42},\n+\t})\n+}"}, {"sha": "04f25e8ae79c03312a173a68cab043cd42e2dd28", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30956.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30956.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+{42}"}, {"sha": "2ca040d79a1c78ffb69245275c6bdd881efb59e6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue30977.go", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30977.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30977.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue30977.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,52 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 30977: write barrier call clobbers volatile\n+// value when there are multiple uses of the value.\n+\n+package main\n+\n+import \"runtime\"\n+\n+type T struct {\n+\ta, b, c, d, e string\n+}\n+\n+//go:noinline\n+func g() T {\n+\treturn T{\"a\", \"b\", \"c\", \"d\", \"e\"}\n+}\n+\n+//go:noinline\n+func f() {\n+\t// The compiler optimizes this to direct copying\n+\t// the call result to both globals, with write\n+\t// barriers. The first write barrier call clobbers\n+\t// the result of g on stack.\n+\tX = g()\n+\tY = X\n+}\n+\n+var X, Y T\n+\n+const N = 1000\n+\n+func main() {\n+\t// Keep GC running so the write barrier is on.\n+\tgo func() {\n+\t\tfor {\n+\t\t\truntime.GC()\n+\t\t}\n+\t}()\n+\n+\tfor i := 0; i < N; i++ {\n+\t\truntime.Gosched()\n+\t\tf()\n+\t\tif X != Y {\n+\t\t\tpanic(\"FAIL\")\n+\t\t}\n+\t}\n+}"}, {"sha": "836e85fd12321b8a42ac62b53540f7dbf346e663", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31010.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31010.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31010.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31010.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var (\n+\tx  int\n+\txs []int\n+)\n+\n+func a([]int) (int, error)\n+\n+func b() (int, error) {\n+\treturn a(append(xs, x))\n+}\n+\n+func c(int, error) (int, error)\n+\n+func d() (int, error) {\n+\treturn c(b())\n+}"}, {"sha": "a1ba705160a2d9db7615d86d828eecd01d22190b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31060.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31060.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31060.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31060.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,30 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+const (\n+\tf = 1.0\n+\tc = 1.0i\n+\n+\t_ = ^f // ERROR \"invalid operation|expected integer\"\n+\t_ = ^c // ERROR \"invalid operation|expected integer\"\n+\n+\t_ = f % f // ERROR \"invalid operation|expected integer\"\n+\t_ = c % c // ERROR \"invalid operation|expected integer\"\n+\n+\t_ = f & f // ERROR \"invalid operation|expected integer\"\n+\t_ = c & c // ERROR \"invalid operation|expected integer\"\n+\n+\t_ = f | f // ERROR \"invalid operation|expected integer\"\n+\t_ = c | c // ERROR \"invalid operation|expected integer\"\n+\n+\t_ = f ^ f // ERROR \"invalid operation|expected integer\"\n+\t_ = c ^ c // ERROR \"invalid operation|expected integer\"\n+\n+\t_ = f &^ f // ERROR \"invalid operation|expected integer\"\n+\t_ = c &^ c // ERROR \"invalid operation|expected integer\"\n+)"}, {"sha": "fa431502c087b88f118646f84cf5904fa8edeeaf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31252.dir/a.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+import \"fmt\"\n+\n+type IndexController struct{}\n+\n+func (this *IndexController) Index(m *string) {\n+\tfmt.Println(m)\n+}"}, {"sha": "9bfc0ff92eabf7c8fc84b5d2eb3b95f216813edd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31252.dir/b.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"fmt\"\n+\n+type IndexController struct{}\n+\n+func (this *IndexController) Index(m *string) {\n+\tfmt.Println(m)\n+}"}, {"sha": "928c8eee1cde60c33cd0ddf52d2945aa042f7f37", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31252.dir/c.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fc.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package c\n+\n+import (\n+\t\"a\"\n+\t\"b\"\n+)\n+\n+type HandlerFunc func(*string)\n+\n+func RouterInit() {\n+\t//home API\n+\thomeIndex := &a.IndexController{}\n+\tGET(\"/home/index/index\", homeIndex.Index)\n+\t//admin API\n+\tadminIndex := &b.IndexController{}\n+\tGET(\"/admin/index/index\", adminIndex.Index)\n+\treturn\n+}\n+\n+func GET(path string, handlers ...HandlerFunc) {\n+\treturn\n+}"}, {"sha": "25a7548668897ef789580ce0c0251c651e489ada", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31252.dir/main.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"c\"\n+\n+func main() {\n+\tc.RouterInit()\n+}"}, {"sha": "973ae1dcef229fff93cfeb070dc2b64f1ccfd0e0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31252.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31252.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "75021c68d268a4ac3693d6ddc3e0bc5e77d16868", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31412a.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,32 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This code was incorrectly flagged as erroneous by gccgo.\n+\n+package main\n+\n+type Name string\n+\n+type EFunc func(int) int\n+\n+func Register(f EFunc, names ...Name) int {\n+\treturn f(len(names))\n+}\n+\n+const (\n+\tB Name = \"B\"\n+)\n+\n+func RegisterIt() {\n+\tn := B + \"Duck\"\n+\td := B + \"Goose\"\n+\tf := func(x int) int { return x + 9 }\n+\tRegister(f, n, d)\n+}\n+\n+func main() {\n+\tRegisterIt()\n+}"}, {"sha": "6c4ec00dc9bc74ec86b718d1b2bff6df86be4b62", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31412b.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31412b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This code was incorrectly accepted by gccgo.\n+\n+package main\n+\n+type N string\n+type M string\n+\n+const B N = \"B\"\n+const C M = \"C\"\n+\n+func main() {\n+\tq := B + C // ERROR \"mismatched types|incompatible types\"\n+\tprintln(q)\n+}"}, {"sha": "233111ae14869e15468073c7d690528d93e0aa0a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31419.go", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31419.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31419.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31419.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,58 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 31419: race in getitab when two goroutines try\n+// to do the same failed interface conversion.\n+\n+package main\n+\n+type T int\n+\n+func (t T) M() {}\n+\n+type I interface {\n+\tM()\n+\tM2()\n+}\n+\n+var t T\n+var e interface{} = &t\n+var ok = false\n+var ch = make(chan int)\n+\n+func main() {\n+\t_, ok = e.(I) // populate itab cache with a false result\n+\n+\tgo f() // get itab in a loop\n+\n+\tvar i I\n+\tfor k := 0; k < 10000; k++ {\n+\t\ti, ok = e.(I) // read the cached itab\n+\t\tif ok {\n+\t\t\tprintln(\"iteration\", k, \"i =\", i, \"&t =\", &t)\n+\t\t\tpanic(\"conversion succeeded\")\n+\t\t}\n+\t}\n+\t<-ch\n+}\n+\n+func f() {\n+\tfor i := 0; i < 10000; i++ {\n+\t\tf1()\n+\t}\n+\tch <- 1\n+}\n+\n+func f1() {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tpanic(\"did not panic\")\n+\t\t}\n+\t}()\n+\ti := e.(I) // triggers itab.init, for getting the panic string\n+\t_ = i\n+}"}, {"sha": "005910e00d16b8b6b8727e42163457cbadefcf9b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31573.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31573.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31573.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31573.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,49 @@\n+// errorcheck -0 -m\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(...*int) {} // ERROR \"can inline f$\"\n+\n+func g() {\n+\tdefer f()\n+\tdefer f(new(int))           // ERROR \"... argument does not escape$\" \"new\\(int\\) does not escape$\"\n+\tdefer f(new(int), new(int)) // ERROR \"... argument does not escape$\" \"new\\(int\\) does not escape$\"\n+\n+\tdefer f(nil...)\n+\tdefer f([]*int{}...)                   // ERROR \"\\[\\]\\*int{} does not escape$\"\n+\tdefer f([]*int{new(int)}...)           // ERROR \"\\[\\]\\*int{...} does not escape$\" \"new\\(int\\) does not escape$\"\n+\tdefer f([]*int{new(int), new(int)}...) // ERROR \"\\[\\]\\*int{...} does not escape$\" \"new\\(int\\) does not escape$\"\n+\n+\tgo f()\n+\tgo f(new(int))           // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\tgo f(new(int), new(int)) // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\n+\tgo f(nil...)\n+\tgo f([]*int{}...)                   // ERROR \"\\[\\]\\*int{} escapes to heap$\"\n+\tgo f([]*int{new(int)}...)           // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\tgo f([]*int{new(int), new(int)}...) // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\n+\tfor {\n+\t\tdefer f()\n+\t\tdefer f(new(int))           // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\t\tdefer f(new(int), new(int)) // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\n+\t\tdefer f(nil...)\n+\t\tdefer f([]*int{}...)                   // ERROR \"\\[\\]\\*int{} escapes to heap$\"\n+\t\tdefer f([]*int{new(int)}...)           // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\t\tdefer f([]*int{new(int), new(int)}...) // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\n+\t\tgo f()\n+\t\tgo f(new(int))           // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\t\tgo f(new(int), new(int)) // ERROR \"... argument escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\n+\t\tgo f(nil...)\n+\t\tgo f([]*int{}...)                   // ERROR \"\\[\\]\\*int{} escapes to heap$\"\n+\t\tgo f([]*int{new(int)}...)           // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\t\tgo f([]*int{new(int), new(int)}...) // ERROR \"\\[\\]\\*int{...} escapes to heap$\" \"new\\(int\\) escapes to heap$\"\n+\t}\n+}"}, {"sha": "71f392697c4967a2d384c56e0667636b109b9782", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31637.dir/a.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type dO struct {\n+\tx int\n+}\n+\n+type EDO struct{}\n+\n+func (EDO) Apply(*dO) {}\n+\n+var X EDO"}, {"sha": "ce83b000df8376167409ad531ff82456db1d10b5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31637.dir/b.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+type No struct {\n+\ta.EDO\n+}\n+\n+func X() No {\n+\treturn No{}\n+}\n+\n+func main() {\n+\tX()\n+}"}, {"sha": "dcfb4a7e53d19e1840c9b944c50ebce9458c5e71", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31637.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31637.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This directory contains a pair of packages that triggered\n+// a compiler crash in gollvm (problem in handling an inlinable\n+// method with unnamed parameter). See issue 31637 for details.\n+\n+package ignored"}, {"sha": "839e242c95cdb299ed53f419d54f52c6141c6016", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31777.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31777.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31777.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31777.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Compile with static map literal.\n+\n+package p\n+\n+type i interface {\n+\tj()\n+}\n+\n+type s struct{}\n+\n+func (s) j() {}\n+\n+type foo map[string]i\n+\n+var f = foo{\n+\t\"1\": s{},\n+\t\"2\": s{},\n+}"}, {"sha": "a42001ea0ea1aa8cb473fa7a1dcc887e452ceb82", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31782.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,24 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check static composite literal reports wrong for struct\n+// field.\n+\n+package main\n+\n+type one struct {\n+\ti interface{}\n+}\n+\n+type two struct {\n+\ti interface{}\n+\ts []string\n+}\n+\n+func main() {\n+\to := one{i: two{i: 42}.i}\n+\tprintln(o.i.(int))\n+}"}, {"sha": "d81cc0710eb6cf9efd5b920a8453e1e07157b6cd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31782.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31782.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+42"}, {"sha": "372289b52d3689db918d3de94f6cea522831caab", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue31987.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31987.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31987.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue31987.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,22 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+type container struct {\n+\tValue string\n+}\n+\n+func main() {\n+\ts := []container{\n+\t\t7: {Value: \"string value\"},\n+\t}\n+\tif s[7].Value != \"string value\" {\n+\t\tpanic(fmt.Errorf(\"wanted \\\"string value\\\", got \\\"%s\\\"\", s[7].Value))\n+\t}\n+}"}, {"sha": "a67735148e2b084b7e7a7cda1e2dc6e5ad19e827", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32175.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,22 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// This used to print 0, because x was incorrectly captured by value.\n+\n+func f() (x int) {\n+\tdefer func() func() {\n+\t\treturn func() {\n+\t\t\tprintln(x)\n+\t\t}\n+\t}()()\n+\treturn 42\n+}\n+\n+func main() {\n+\tf()\n+}"}, {"sha": "d81cc0710eb6cf9efd5b920a8453e1e07157b6cd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32175.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32175.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+42"}, {"sha": "91c930c0b506bca704a30b9ad15bb1d6722cbac4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32288.go", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32288.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32288.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32288.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,48 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T struct {\n+\ts   [1]string\n+\tpad [16]uintptr\n+}\n+\n+//go:noinline\n+func f(t *int, p *int) []T {\n+\tvar res []T\n+\tfor {\n+\t\tvar e *T\n+\t\tres = append(res, *e)\n+\t}\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\tuseStack(100) // force a stack copy\n+\t\t// We're expecting a panic.\n+\t\t// The bug in this issue causes a throw, which this recover() will not squash.\n+\t\trecover()\n+\t}()\n+\tjunk() // fill the stack with invalid pointers\n+\tf(nil, nil)\n+}\n+\n+func useStack(n int) {\n+\tif n == 0 {\n+\t\treturn\n+\t}\n+\tuseStack(n - 1)\n+}\n+\n+//go:noinline\n+func junk() uintptr {\n+\tvar a [128]uintptr // 1k of bad pointers on the stack\n+\tfor i := range a {\n+\t\ta[i] = 0xaa\n+\t}\n+\treturn a[12]\n+}"}, {"sha": "91c038a588fd34916df25bf55ad01e44a0b834cf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32347.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32347.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32347.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32347.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 32347: gccgo compiler crashes with int-to-string conversion\n+// with large integer constant operand.\n+\n+package p\n+\n+const (\n+\tX1 = string(128049)\n+\tX2 = string(-1)\n+\tX3 = string(1<<48)\n+)\n+\n+var S1, S2, S3 = X1, X2, X3"}, {"sha": "70895c97fa4cb7074e0efbd65b2e0d94de785b5c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32454.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32454.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32454.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32454.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T struct {\n+\ts string\n+\tf float64\n+}\n+\n+func f() {\n+\tvar f float64\n+\tvar st T\n+\tfor {\n+\t\tswitch &st.f {\n+\t\tcase &f:\n+\t\t\tf = 1\n+\t\t}\n+\t}\n+}"}, {"sha": "c6f72b6b55062a4772201617ac70939a870299a8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32560.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32560.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32560.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32560.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,51 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Values smaller than 64-bits were mistakenly always proven to be\n+// non-negative.\n+//\n+// The tests here are marked go:noinline to ensure they're\n+// independently optimized by SSA.\n+\n+package main\n+\n+var x int32 = -1\n+\n+//go:noinline\n+func a() {\n+\tif x != -1 {\n+\t\tpanic(1)\n+\t}\n+\tif x > 0 || x != -1 {\n+\t\tpanic(2)\n+\t}\n+}\n+\n+//go:noinline\n+func b() {\n+\tif x != -1 {\n+\t\tpanic(3)\n+\t}\n+\tif x > 0 {\n+\t\tpanic(4)\n+\t}\n+}\n+\n+//go:noinline\n+func c() {\n+\tif x > 0 || x != -1 {\n+\t\tpanic(5)\n+\t}\n+\tif x > 0 || x != -1 {\n+\t\tpanic(6)\n+\t}\n+}\n+\n+func main() {\n+\ta()\n+\tb()\n+\tc()\n+}"}, {"sha": "8342dd5cbcff84c39e6fcdb142c6ddf94bdcd122", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32595.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+func A() {\n+\tdefer func() {}()\n+}"}, {"sha": "9a13a575a87ff4b07da757e8b6e3ecb4e2aa3a34", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32595.dir/b.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"reflect\"\n+\n+func B() {\n+\tt1 := reflect.TypeOf([0]byte{})\n+\tt2 := reflect.TypeOf(new([0]byte)).Elem()\n+\tif t1 != t2 {\n+\t\tpanic(\"[0]byte types do not match\")\n+\t}\n+}"}, {"sha": "20472cd72a4a53605b2f5489302f2215aeb9a0cf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32595.dir/main.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.dir%2Fmain.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"a\"\n+\t\"b\"\n+)\n+\n+func main() {\n+\ta.A()\n+\tb.B()\n+}"}, {"sha": "af6f1341729458e04aba9a8a7110ec999540bc2a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32595.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32595.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,7 @@\n+// rundir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "27cba6bf78731a2c76be5bc9cb8aeecf7c737a6a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32680.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run -gcflags=-d=ssa/check/on\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// As of 2019-06, bug affects/ed amd64 and s390x.\n+\n+package main\n+\n+var foo = []byte{105, 57, 172, 152}\n+\n+func main() {\n+\tfor i := 0; i < len(foo); i += 4 {\n+\t\t// Requires inlining and non-constant i\n+\t\t// Note the bug/fix also apply to different widths, but was unable to reproduce for those.\n+\t\tprintln(readLittleEndian32_2(foo[i], foo[i+1], foo[i+2], foo[i+3]))\n+\t}\n+}\n+\n+func readLittleEndian32_2(a, b, c, d byte) uint32 {\n+\treturn uint32(a) | (uint32(b) << 8) | (uint32(c) << 16) | (uint32(d) << 24)\n+}"}, {"sha": "4d60a97392c1affc1f82b199fe50ebbb266fedf9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32680.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+2561423721"}, {"sha": "61e531701abcff474f53361554e212c81f3700de", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32680b.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32680b.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func hashBytesRaw(b0, b1, b2, b3, b7 byte) uint64 {\n+\treturn (uint64(b0) | uint64(b1)<<8 | uint64(b2)<<16 | uint64(b3)<<24)\n+}\n+\n+func doStuff(data []byte) uint64 {\n+\treturn hashBytesRaw(data[0], data[1], data[2], data[3], data[7])\n+\n+}"}, {"sha": "850334d7024ef454e90e3630e97baae5e4a8a0ec", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32723.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32723.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32723.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32723.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,22 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Complex literal comparison\n+\n+package p\n+\n+const x = 1i\n+const y = 1i < 2i // ERROR \"invalid operation: .*not defined on untyped complex|non-ordered type\"\n+const z = x < 2i  // ERROR \"invalid operation: .*not defined on untyped complex|non-ordered type\"\n+\n+func f() {\n+\t_ = 1i < 2i // ERROR \"invalid operation: .*not defined on untyped complex|non-ordered type\"\n+\t_ = 1i < 2  // ERROR \"invalid operation: .*not defined on untyped complex|non-ordered type\"\n+\t_ = 1 < 2i  // ERROR \"invalid operation: .*not defined on untyped complex|non-ordered type\"\n+\n+\tc := 1i\n+\t_ = c < 2i // ERROR \"invalid operation: .*not defined on complex128|non-ordered type\"\n+}"}, {"sha": "1e6ac012334c507be36315a7b03cbeba47c42696", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32778.dir/a.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2019 The Go Authors. All rights reserved. Use of this\n+// source code is governed by a BSD-style license that can be found in\n+// the LICENSE file.\n+\n+package a\n+\n+import \"strings\"\n+\n+type Name string\n+\n+type FullName string\n+\n+func (n FullName) Name() Name {\n+\tif i := strings.LastIndexByte(string(n), '.'); i >= 0 {\n+\t\treturn Name(n[i+1:])\n+\t}\n+\treturn Name(n)\n+}"}, {"sha": "a0ee398d268c3ff7475652e68362fba66953b9b1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32778.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved. Use of this\n+// source code is governed by a BSD-style license that can be found in\n+// the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func Expo(fn a.FullName) a.Name {\n+\treturn fn.Name()\n+}"}, {"sha": "83456d4a999680844390bb040ab2986ce2e3ec78", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32778.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32778.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved. Use of this\n+// source code is governed by a BSD-style license that can be found in\n+// the LICENSE file.\n+\n+// This directory contains a pair of packages that triggers a compiler\n+// crash in gccgo (problem with tracking indirectly referenced\n+// packages during exporting). See issue 32778 for details.\n+\n+package ignored"}, {"sha": "a0dc789a0438a500cad8a227853daaaa46d5d929", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue32959.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32959.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32959.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue32959.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test escape analysis with shifting constant\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar l uint64\n+\tvar p unsafe.Pointer\n+\t_ = unsafe.Pointer(uintptr(p) + (uintptr(l) >> 1))\n+}"}, {"sha": "91764982dc456a26f42ffd042c8945ae7881deed", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33020a.dir/a.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type FArg func(args []string) error\n+\n+type Command struct {\n+\tName string\n+\tArg1 FArg\n+\tArg2 func(args []string) error\n+}"}, {"sha": "5b0f9d86d72acd9cb40ae5d3d8ba2606df8c0f40", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33020a.dir/b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+var Cmd = &a.Command{\n+\tName: \"test\",\n+}\n+\n+func main() {\n+}"}, {"sha": "cfe010e92f161640192c11f64c33e9c280cb5bbe", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33020a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33020a.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 33020: gollvm assert in Llvm_backend::materializeComposite\n+\n+package ignored"}, {"sha": "f2ec24dbc28544fca53c6f120bdb23a27e2a1f97", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33275.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,34 @@\n+// skip\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"time\"\n+)\n+\n+func main() {\n+\t// Make a big map.\n+\tm := map[int]int{}\n+\tfor i := 0; i < 100000; i++ {\n+\t\tm[i] = i\n+\t}\n+\tc := make(chan string)\n+\tgo func() {\n+\t\t// Print the map.\n+\t\ts := fmt.Sprintln(m)\n+\t\tc <- s\n+\t}()\n+\tgo func() {\n+\t\ttime.Sleep(1 * time.Millisecond)\n+\t\t// Add an extra item to the map while iterating.\n+\t\tm[-1] = -1\n+\t\tc <- \"\"\n+\t}()\n+\t<-c\n+\t<-c\n+}"}, {"sha": "f3e2e14f392eb7177dacdced583902b99b545e5f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33275_run.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275_run.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275_run.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33275_run.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,25 @@\n+// +build !nacl,!js\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we don't get an index out of bounds error\n+// while trying to print a map that is concurrently modified.\n+// The runtime might complain (throw) if it detects the modification,\n+// so we have to run the test as a subprocess.\n+\n+package main\n+\n+import (\n+\t\"os/exec\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\tout, _ := exec.Command(\"go\", \"run\", \"fixedbugs/issue33275.go\").CombinedOutput()\n+\tif strings.Contains(string(out), \"index out of range\") {\n+\t\tpanic(`go run issue33275.go reported \"index out of range\"`)\n+\t}\n+}"}, {"sha": "5821099e3d36599e3944e2cce841709b0bdc8403", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33308.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33308.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33308.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33308.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,12 @@\n+// errorcheck\n+\n+// Copyright 2020 The Go Authors. All rights reserved.  Use of this\n+// source code is governed by a BSD-style license that can be found in\n+// the LICENSE file.\n+\n+// Test that the compiler does not crash on a []byte conversion of an\n+// untyped expression.\n+package p\n+\n+var v uint\n+var x = []byte((1 << v) + 1) // ERROR \"cannot convert|non-integer type for left operand of shift\""}, {"sha": "c4b1e2e1a23ba42c13c28e2e286f8ed113a3414c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33355.go", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33355.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33355.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33355.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,147 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This code failed on arm64 in the register allocator.\n+// See issue 33355.\n+\n+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"sync\"\n+)\n+\n+type client struct {\n+\tjunk [4]int\n+\tmu   sync.Mutex\n+\tsrv  *Server\n+\tgw   *gateway\n+\tmsgb [100]byte\n+}\n+\n+type gateway struct {\n+\tcfg    *gatewayCfg\n+\toutsim *sync.Map\n+}\n+\n+type gatewayCfg struct {\n+\treplyPfx []byte\n+}\n+\n+type Account struct {\n+\tName string\n+}\n+\n+type Server struct {\n+\tgateway *srvGateway\n+}\n+\n+type srvGateway struct {\n+\touto     []*client\n+}\n+\n+type subscription struct {\n+\tqueue   []byte\n+\tclient  *client\n+}\n+\n+type outsie struct {\n+\tni    map[string]struct{}\n+\tsl    *Sublist\n+\tqsubs int\n+}\n+\n+type Sublist struct {\n+}\n+\n+type SublistResult struct {\n+\tpsubs []*subscription\n+\tqsubs [][]*subscription\n+}\n+\n+var subPool = &sync.Pool{}\n+\n+func (c *client) sendMsgToGateways(acc *Account, msg, subject, reply []byte, qgroups [][]byte) {\n+\tvar gws []*client\n+\tgw := c.srv.gateway\n+\tfor i := 0; i < len(gw.outo); i++ {\n+\t\tgws = append(gws, gw.outo[i])\n+\t}\n+\tvar (\n+\t\tsubj       = string(subject)\n+\t\tqueuesa    = [512]byte{}\n+\t\tqueues     = queuesa[:0]\n+\t\tmreply     []byte\n+\t\tdstPfx     []byte\n+\t\tcheckReply = len(reply) > 0\n+\t)\n+\n+\tsub := subPool.Get().(*subscription)\n+\n+\tif subjectStartsWithGatewayReplyPrefix(subject) {\n+\t\tdstPfx = subject[:8]\n+\t}\n+\tfor i := 0; i < len(gws); i++ {\n+\t\tgwc := gws[i]\n+\t\tif dstPfx != nil {\n+\t\t\tgwc.mu.Lock()\n+\t\t\tok := bytes.Equal(dstPfx, gwc.gw.cfg.replyPfx)\n+\t\t\tgwc.mu.Unlock()\n+\t\t\tif !ok {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t} else {\n+\t\t\tqr := gwc.gatewayInterest(acc.Name, subj)\n+\t\t\tqueues = queuesa[:0]\n+\t\t\tfor i := 0; i < len(qr.qsubs); i++ {\n+\t\t\t\tqsubs := qr.qsubs[i]\n+\t\t\t\tqueue := qsubs[0].queue\n+\t\t\t\tadd := true\n+\t\t\t\tfor _, qn := range qgroups {\n+\t\t\t\t\tif bytes.Equal(queue, qn) {\n+\t\t\t\t\t\tadd = false\n+\t\t\t\t\t\tbreak\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif add {\n+\t\t\t\t\tqgroups = append(qgroups, queue)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif len(queues) == 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\t\tif checkReply {\n+\t\t\tcheckReply = false\n+\t\t\tmreply = reply\n+\t\t}\n+\t\tmh := c.msgb[:10]\n+\t\tmh = append(mh, subject...)\n+\t\tif len(queues) > 0 {\n+\t\t\tmh = append(mh, mreply...)\n+\t\t\tmh = append(mh, queues...)\n+\t\t}\n+\t\tsub.client = gwc\n+\t}\n+\tsubPool.Put(sub)\n+}\n+\n+func subjectStartsWithGatewayReplyPrefix(subj []byte) bool {\n+\treturn len(subj) > 8 && string(subj[:4]) == \"foob\"\n+}\n+\n+func (c *client) gatewayInterest(acc, subj string) *SublistResult {\n+\tei, _ := c.gw.outsim.Load(acc)\n+\tvar r *SublistResult\n+\te := ei.(*outsie)\n+\tr = e.sl.Match(subj)\n+\treturn r\n+}\n+\n+func (s *Sublist) Match(subject string) *SublistResult {\n+\treturn nil\n+}\n+"}, {"sha": "7b2f565285e6f8290979fcd69d4dcc830b08c9d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33386.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33386.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,29 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that we don't get spurious follow-on errors\n+// after a missing expression. Specifically, the parser\n+// shouldn't skip over closing parentheses of any kind.\n+\n+package p\n+\n+func _() {\n+\tgo func() {     // no error here about goroutine\n+\t\tsend <- // GCCGO_ERROR \"undefined name\"\n+\t}()             // ERROR \"expecting expression|expected operand\"\n+}\n+\n+func _() {\n+\tdefer func() { // no error here about deferred function\n+\t\t1 +    // GCCGO_ERROR \"value computed is not used\"\n+\t}()            // ERROR \"expecting expression|expected operand\"\n+}\n+\n+func _() {\n+\t_ = (1 +)             // ERROR \"expecting expression|expected operand\"\n+\t_ = a[2 +]            // ERROR \"expecting expression|expected operand|undefined name\"\n+\t_ = []int{1, 2, 3 + } // ERROR \"expecting expression|expected operand\"\n+}"}, {"sha": "e4206d7bcfddb386a8360ada38e94d3dccbca21f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33438.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33438.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33438.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33438.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type hasPtrs struct {\n+        x [2]*int\n+\t// Note: array size needs to be >1 to force this type to be not SSAable.\n+\t// The bug triggers only for OpMove, which is only used for unSSAable types.\n+}\n+\n+func main() {\n+        var x *hasPtrs       // Can be local, global, or arg; nil or non-nil.\n+        var y *hasPtrs = nil // Must initialize to nil.\n+        *x = *y\n+}"}, {"sha": "d90b0a43489d4baf66681f789cef1f0f9e065abb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33460.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33460.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33460.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33460.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,37 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+const (\n+\tzero = iota\n+\tone\n+\ttwo\n+\tthree\n+)\n+\n+const iii int = 0x3\n+\n+func f(v int) {\n+\tswitch v {\n+\tcase zero, one:\n+\tcase two, one: // ERROR \"previous case at LINE-1|duplicate case in switch\"\n+\n+\tcase three:\n+\tcase 3: // ERROR \"previous case at LINE-1|duplicate case in switch\"\n+\tcase iii: // ERROR \"previous case at LINE-2|duplicate case in switch\"\n+\t}\n+}\n+\n+const b = \"b\"\n+\n+var _ = map[string]int{\n+\t\"a\": 0,\n+\tb:   1,\n+\t\"a\": 2, // ERROR \"previous key at LINE-2|duplicate key in map literal\"\n+\t\"b\": 3, // GC_ERROR \"previous key at LINE-2\"\n+\t\"b\": 4, // GC_ERROR \"previous key at LINE-3\"\n+}"}, {"sha": "7debd2049cd956468b9022951e1074e37abd439b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33555.go", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33555.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33555.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33555.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,81 @@\n+// +build !nacl,!js\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that the linker permits long call sequences.\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"strconv\"\n+)\n+\n+const start = `\n+package main\n+\n+func main() {\n+\tprintln(f0() + 1)\n+}\n+`\n+\n+const fn = `\n+//go:noinline\n+func f%d() int {\n+\treturn f%d() + 1\n+}`\n+\n+const fnlast = `\n+//go:noinline\n+func f%d() int {\n+\treturn 0\n+}\n+`\n+\n+const count = 400\n+\n+func main() {\n+\tif err := test(); err != nil {\n+\t\tfmt.Fprintln(os.Stderr, err)\n+\t\tos.Exit(1)\n+\t}\n+}\n+\n+func test() error {\n+\tvar buf bytes.Buffer\n+\tbuf.WriteString(start)\n+\tfor i := 0; i < count; i++ {\n+\t\tfmt.Fprintf(&buf, fn, i, i + 1)\n+\t}\n+\tfmt.Fprintf(&buf, fnlast, count)\n+\n+\tdir, err := ioutil.TempDir(\"\", \"issue33555\")\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\tfn := filepath.Join(dir, \"x.go\")\n+\tif err := ioutil.WriteFile(fn, buf.Bytes(), 0644); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tout, err := exec.Command(\"go\", \"run\", fn).CombinedOutput()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\twant := strconv.Itoa(count + 1)\n+\tif got := string(bytes.TrimSpace(out)); got != want {\n+\t\treturn fmt.Errorf(\"got %q want %q\", got, want)\n+\t}\n+\n+\treturn nil\n+}"}, {"sha": "a4ecddc0b32b1ea69ecf54e805ae2ee1609e97a4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33724.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33724.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33724.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33724.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,45 @@\n+// run\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime/debug\"\n+\t\"strings\"\n+)\n+\n+type Inner struct {\n+\tErr int\n+}\n+\n+func (i *Inner) NotExpectedInStackTrace() int {\n+\tif i == nil {\n+\t\treturn 86\n+\t}\n+\treturn 17 + i.Err\n+}\n+\n+type Outer struct {\n+\tInner\n+}\n+\n+func ExpectedInStackTrace() {\n+\tvar o *Outer\n+\tprintln(o.NotExpectedInStackTrace())\n+}\n+\n+func main() {\n+    defer func() {\n+        if r := recover(); r != nil {\n+        \tstacktrace := string(debug.Stack())\n+        \tif strings.Contains(stacktrace, \"NotExpectedInStackTrace\") {\n+        \t\tfmt.Println(\"FAIL, stacktrace contains NotExpectedInStackTrace\")\n+        \t}\n+        \tif !strings.Contains(stacktrace, \"ExpectedInStackTrace\") {\n+        \t\tfmt.Println(\"FAIL, stacktrace does not contain ExpectedInStackTrace\")\n+        \t}\n+        } else {\n+        \tfmt.Println(\"FAIL, should have panicked but did not\")\n+        }\n+    }()\n+    ExpectedInStackTrace()\n+}"}, {"sha": "9c782c5eedf37c331a0b307fc43f22d5b3ac8fcf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33866.dir/a.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Builder struct {\n+\tx int\n+}\n+\n+func (tb Builder) Build() (out struct {\n+\tx interface{}\n+\ts string\n+}) {\n+\tout.x = nil\n+\tout.s = \"hello!\"\n+\treturn\n+}"}, {"sha": "aa2a32271c738a922412591472a8ae9308a93c71", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33866.dir/b.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+type (\n+\tABuilder = a.Builder\n+)\n+\n+func Bfunc() ABuilder {\n+\treturn ABuilder{}\n+}"}, {"sha": "220c732a9a07c2a01c6768fa0f736392abcfa1e9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33866.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33866.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 33866: assert in gccgo during compilation\n+\n+package ignored"}, {"sha": "de03282264f8d718963841650c57ed1cbab400b7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue33903.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33903.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33903.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue33903.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that the shortcircuit pass correctly handles infinite loops.\n+\n+package p\n+\n+func f() {\n+\tvar p, q bool\n+\tfor {\n+\t\tp = p && q\n+\t}\n+}"}, {"sha": "f50cd02aacf68e5e87f87cc8ac72947b3ae4d34d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue34123.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34123.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34123.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34123.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,43 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure that the line number is reported correctly\n+// for faulting instructions.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+var x byte\n+var p *byte\n+\n+//go:noinline\n+func f() {\n+\tq := p\n+\tx = 11  // line 23\n+\t*q = 12 // line 24\n+}\n+func main() {\n+\tdefer func() {\n+\t\trecover()\n+\t\tvar pcs [10]uintptr\n+\t\tn := runtime.Callers(1, pcs[:])\n+\t\tframes := runtime.CallersFrames(pcs[:n])\n+\t\tfor {\n+\t\t\tf, more := frames.Next()\n+\t\t\tif f.Function == \"main.f\" && f.Line != 24 {\n+\t\t\t\tpanic(fmt.Errorf(\"expected line 24, got line %d\", f.Line))\n+\t\t\t}\n+\t\t\tif !more {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "eb5a8558e189e4d6d510e7df92e782cabfbf61f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue34395.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34395.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34395.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34395.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,17 @@\n+// run\n+\n+// Copyright 2019 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that a binary with a large data section can load. This failed on wasm.\n+\n+package main\n+\n+var test = [100 * 1024 * 1024]byte{42}\n+\n+func main() {\n+\tif test[0] != 42 {\n+\t\tpanic(\"bad\")\n+\t}\n+}"}, {"sha": "d92d4ccbc52613697bcf63b5c635e3d7d415cfe3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue34520.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34520.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34520.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34520.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,12 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\tfor true {\n+\t}\n+}"}, {"sha": "6b1dbd16edd2d03a962e966d75b9cd0b1e82dfe8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue34968.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34968.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34968.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue34968.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,15 @@\n+// +build cgo\n+// run -gcflags=all=-d=checkptr\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// #include <stdlib.h>\n+import \"C\"\n+\n+func main() {\n+\tC.malloc(100)\n+}"}, {"sha": "d4b0be52c108bf71a1db94c76637c95d651f3ca0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35027.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35027.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35027.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35027.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run -gcflags=-d=checkptr\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"unsafe\"\n+)\n+\n+var s []int\n+\n+func main() {\n+\ts = []int{42}\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&s))\n+\tx := *(*int)(unsafe.Pointer(h.Data))\n+\tif x != 42 {\n+\t\tpanic(x)\n+\t}\n+}"}, {"sha": "dc8ce3a987530559f52b4477c45ba7bc85ce97fc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35073.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35073.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35073.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35073.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,23 @@\n+// run -gcflags=-d=checkptr\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that reflect.Value.UnsafeAddr/Pointer is handled\n+// correctly by -d=checkptr\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\t\"unsafe\"\n+)\n+\n+func main() {\n+\tn := 10\n+\tm := make(map[string]string)\n+\n+\t_ = unsafe.Pointer(reflect.ValueOf(&n).Elem().UnsafeAddr())\n+\t_ = unsafe.Pointer(reflect.ValueOf(&m).Elem().Pointer())\n+}"}, {"sha": "c9c4899e0c855f9e521af407f8deabc70a41d727", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35157.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35157.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35157.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35157.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\tvar i int\n+\tvar b *bool\n+\tvar s0, s1, s2 string\n+\n+\tif *b {\n+\t\ts2 = s2[:1]\n+\t\ti = 1\n+\t}\n+\ts1 = s1[i:-i+i] + s1[-i+i:i+2]\n+\ts1 = s0[i:-i]\n+}"}, {"sha": "5d8381c244e3e663edd36c58b03e6293cc9ddd40", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35291.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35291.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35291.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35291.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check error message for duplicated index in slice literal\n+\n+package p\n+\n+var s = []string{\n+\t1: \"dup\",\n+\t1: \"dup\", // ERROR \"duplicate index in slice literal: 1|duplicate value for index 1\"\n+}"}, {"sha": "8228555c9ac42ea0b9f711a5e9c101362f70f2b2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35576.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,16 @@\n+// run\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check print/println(f()) is allowed where f() is multi-value.\n+\n+package main\n+\n+func f() (int16, float64, string) { return -42, 42.0, \"x\" }\n+\n+func main() {\n+\tprint(f())\n+\tprintln(f())\n+}"}, {"sha": "2aefe3edc5a99c5e72729f86effa34d9ba8232f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35576.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35576.out?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1 @@\n+-42+4.200000e+001x-42 +4.200000e+001 x"}, {"sha": "f509b25473bfc9a7b324143f2d9e1983bda123ec", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35586.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fa.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+func D(_ string, _ int) (uint64, string) {\n+\treturn 101, \"bad\"\n+}"}, {"sha": "e8b674fe30a9614a3108d20efd9a4178a479f1a4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35586.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.dir%2Fb.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"a\"\n+\n+func F(addr string) (uint64, string) {\n+\treturn a.D(addr, 32)\n+}"}, {"sha": "0d522b171427ec34c4c32df09a480b074680f6a3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue35586.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue35586.go?ref=6f8486523f61bf0aa476dfa4197d1e3b71a0a8f3", "patch": "@@ -0,0 +1,11 @@\n+// compiledir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 35586: gollvm compiler crash building docker-ce; the problem\n+// involves inlining a function that has multiple no-name (\"_\") parameters.\n+//\n+\n+package ignored"}]}