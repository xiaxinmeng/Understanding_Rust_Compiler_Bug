{"sha": "70a1c2f9595135edb6224c2cc1006968f3416cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhMWMyZjk1OTUxMzVlZGI2MjI0YzJjYzEwMDY5NjhmMzQxNmNiMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-08-13T18:25:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-13T18:25:14Z"}, "message": "dwarf2out.c (dwarf_stack_op_name): Remove prototype.\n\n2008-08-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* dwarf2out.c (dwarf_stack_op_name): Remove prototype.\n\t(new_loc_descr): Likewise.\n\t(add_loc_descr): Likewise.\n\t(size_of_loc_descr): Likewise.\n\t(size_of_locs): Likewise.\n\t(output_loc_operands): Likewise.\n\t(output_loc_sequence): Likewise.\n\t(new_reg_loc_descr): New.\n\t(build_cfa_loc): Use it.\n\t(build_cfa_aligned_loc): Likewise.\n\t(one_reg_loc_descriptor): Likewise.\n\t(based_loc_descr): Likewise.\n\nFrom-SVN: r139065", "tree": {"sha": "5f39f7ccfb5e33dacaf4b539035b03f007ccf971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f39f7ccfb5e33dacaf4b539035b03f007ccf971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a1c2f9595135edb6224c2cc1006968f3416cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a1c2f9595135edb6224c2cc1006968f3416cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a1c2f9595135edb6224c2cc1006968f3416cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a1c2f9595135edb6224c2cc1006968f3416cb2/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0292e6d2bbadd4f0c49b048b3bfa1c0c5e334197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0292e6d2bbadd4f0c49b048b3bfa1c0c5e334197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0292e6d2bbadd4f0c49b048b3bfa1c0c5e334197"}], "stats": {"total": 88, "additions": 40, "deletions": 48}, "files": [{"sha": "ad4b63bc675eb73c8d0a630564265ac18075da73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a1c2f9595135edb6224c2cc1006968f3416cb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a1c2f9595135edb6224c2cc1006968f3416cb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70a1c2f9595135edb6224c2cc1006968f3416cb2", "patch": "@@ -1,3 +1,18 @@\n+2008-08-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* dwarf2out.c (dwarf_stack_op_name): Remove prototype.\n+\t(new_loc_descr): Likewise.\n+\t(add_loc_descr): Likewise.\n+\t(size_of_loc_descr): Likewise.\n+\t(size_of_locs): Likewise.\n+\t(output_loc_operands): Likewise.\n+\t(output_loc_sequence): Likewise.\n+\t(new_reg_loc_descr): New.\n+\t(build_cfa_loc): Use it.\n+\t(build_cfa_aligned_loc): Likewise.\n+\t(one_reg_loc_descriptor): Likewise.\n+\t(based_loc_descr): Likewise.\n+\n 2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 30551"}, {"sha": "fff0859e0be26f462ef573610593b6840bea3425", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a1c2f9595135edb6224c2cc1006968f3416cb2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a1c2f9595135edb6224c2cc1006968f3416cb2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=70a1c2f9595135edb6224c2cc1006968f3416cb2", "patch": "@@ -3472,15 +3472,7 @@ typedef struct dw_loc_list_struct GTY(())\n \n #if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n \n-static const char *dwarf_stack_op_name (unsigned);\n-static dw_loc_descr_ref new_loc_descr (enum dwarf_location_atom,\n-\t\t\t\t       unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static dw_loc_descr_ref int_loc_descriptor (HOST_WIDE_INT);\n-static void add_loc_descr (dw_loc_descr_ref *, dw_loc_descr_ref);\n-static unsigned long size_of_loc_descr (dw_loc_descr_ref);\n-static unsigned long size_of_locs (dw_loc_descr_ref);\n-static void output_loc_operands (dw_loc_descr_ref);\n-static void output_loc_sequence (dw_loc_descr_ref);\n \n /* Convert a DWARF stack opcode into its string name.  */\n \n@@ -3816,6 +3808,25 @@ new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n   return descr;\n }\n \n+/* Return a pointer to a newly allocated location description for\n+   REG and OFFSET.  */\n+\n+static inline dw_loc_descr_ref\n+new_reg_loc_descr (unsigned int reg,  unsigned HOST_WIDE_INT offset)\n+{\n+  if (offset)\n+    {\n+      if (reg <= 31)\n+\treturn new_loc_descr (DW_OP_breg0 + reg, offset, 0);\n+      else\n+\treturn new_loc_descr (DW_OP_bregx, reg, offset);\n+    }\n+  else if (reg <= 31)\n+    return new_loc_descr (DW_OP_reg0 + reg, 0, 0);\n+  else\n+   return new_loc_descr (DW_OP_regx, reg, 0);\n+}\n+\n /* Add a location description term to a location description expression.  */\n \n static inline void\n@@ -4316,18 +4327,7 @@ build_cfa_loc (dw_cfa_location *cfa, HOST_WIDE_INT offset)\n \n   if (cfa->indirect)\n     {\n-      if (cfa->base_offset)\n-\t{\n-\t  if (cfa->reg <= 31)\n-\t    head = new_loc_descr (DW_OP_breg0 + cfa->reg, cfa->base_offset, 0);\n-\t  else\n-\t    head = new_loc_descr (DW_OP_bregx, cfa->reg, cfa->base_offset);\n-\t}\n-      else if (cfa->reg <= 31)\n-\thead = new_loc_descr (DW_OP_reg0 + cfa->reg, 0, 0);\n-      else\n-\thead = new_loc_descr (DW_OP_regx, cfa->reg, 0);\n-\n+      head = new_reg_loc_descr (cfa->reg, cfa->base_offset);\n       head->dw_loc_oprnd1.val_class = dw_val_class_const;\n       tmp = new_loc_descr (DW_OP_deref, 0, 0);\n       add_loc_descr (&head, tmp);\n@@ -4338,17 +4338,7 @@ build_cfa_loc (dw_cfa_location *cfa, HOST_WIDE_INT offset)\n \t}\n     }\n   else\n-    {\n-      if (offset == 0)\n-\tif (cfa->reg <= 31)\n-\t  head = new_loc_descr (DW_OP_reg0 + cfa->reg, 0, 0);\n-\telse\n-\t  head = new_loc_descr (DW_OP_regx, cfa->reg, 0);\n-      else if (cfa->reg <= 31)\n-\thead = new_loc_descr (DW_OP_breg0 + cfa->reg, offset, 0);\n-      else\n-\thead = new_loc_descr (DW_OP_bregx, cfa->reg, offset);\n-    }\n+    head = new_reg_loc_descr (cfa->reg, offset);\n \n   return head;\n }\n@@ -4367,21 +4357,15 @@ build_cfa_aligned_loc (HOST_WIDE_INT offset, HOST_WIDE_INT alignment)\n  /* When CFA is defined as FP+OFFSET, emulate stack alignment.  */\n   if (cfa.reg == HARD_FRAME_POINTER_REGNUM && cfa.indirect == 0)\n     {\n-      if (dwarf_fp <= 31)\n-\thead = new_loc_descr (DW_OP_breg0 + dwarf_fp, 0, 0);\n-      else\n-\thead = new_loc_descr (DW_OP_bregx, dwarf_fp, 0);\n-\n+      head = new_reg_loc_descr (dwarf_fp, 0);\n       add_loc_descr (&head, int_loc_descriptor (alignment));\n       add_loc_descr (&head, new_loc_descr (DW_OP_and, 0, 0));\n \n       add_loc_descr (&head, int_loc_descriptor (offset));\n       add_loc_descr (&head, new_loc_descr (DW_OP_plus, 0, 0));\n     }\n-  else if (dwarf_fp <= 31)\n-    head = new_loc_descr (DW_OP_breg0 + dwarf_fp, offset, 0);\n   else\n-    head = new_loc_descr (DW_OP_bregx, dwarf_fp, offset);\n+    head = new_reg_loc_descr (dwarf_fp, offset);\n   return head;\n }\n \n@@ -9663,11 +9647,7 @@ reg_loc_descriptor (rtx rtl, enum var_init_status initialized)\n static dw_loc_descr_ref\n one_reg_loc_descriptor (unsigned int regno, enum var_init_status initialized)\n {\n-  dw_loc_descr_ref reg_loc_descr;\n-  if (regno <= 31)\n-    reg_loc_descr = new_loc_descr (DW_OP_reg0 + regno, 0, 0);\n-  else\n-    reg_loc_descr = new_loc_descr (DW_OP_regx, regno, 0);\n+  dw_loc_descr_ref reg_loc_descr = new_reg_loc_descr (regno, 0);\n \n   if (initialized == VAR_INIT_STATUS_UNINITIALIZED)\n     add_loc_descr (&reg_loc_descr, new_loc_descr (DW_OP_GNU_uninit, 0, 0));\n@@ -9830,10 +9810,7 @@ based_loc_descr (rtx reg, HOST_WIDE_INT offset,\n \t\t= DWARF_FRAME_REGNUM (cfa.indirect\n \t\t\t\t      ? HARD_FRAME_POINTER_REGNUM\n \t\t\t\t      : STACK_POINTER_REGNUM);\n-\t      if (base_reg <= 31)\n-\t\treturn new_loc_descr (DW_OP_breg0 + base_reg, offset, 0);\n-\t      else\n-\t\treturn new_loc_descr (DW_OP_bregx, base_reg, offset);\n+\t      return new_reg_loc_descr (base_reg, offset);\n \t    }\n \n \t  offset += frame_pointer_fb_offset;"}]}