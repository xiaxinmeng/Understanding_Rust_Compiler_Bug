{"sha": "01b9e84eb15daf5a420fa956d3289f30a08884e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiOWU4NGViMTVkYWY1YTQyMGZhOTU2ZDMyODlmMzBhMDg4ODRlMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-27T10:17:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-27T10:17:37Z"}, "message": "alpha.c (alpha_emit_conditional_move): Use VOIDmode when testing for a signed comparison.\n\n        * alpha.c (alpha_emit_conditional_move): Use VOIDmode when\n        testing for a signed comparison.\n        (alpha_emit_floatuns): New.\n        * alpha-protos.h: Declare it.\n        * alpha.md (floatunsdisf2, floatunsdidf2): New.\n        (extendsfdf2): Tidy.\n\nFrom-SVN: r31643", "tree": {"sha": "3436d2ced5898a9ecb764817218ed0c79bf19f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3436d2ced5898a9ecb764817218ed0c79bf19f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b9e84eb15daf5a420fa956d3289f30a08884e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9e84eb15daf5a420fa956d3289f30a08884e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b9e84eb15daf5a420fa956d3289f30a08884e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9e84eb15daf5a420fa956d3289f30a08884e3/comments", "author": null, "committer": null, "parents": [{"sha": "ee8b0e7c08a351c6948cfd05290926881cb57774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8b0e7c08a351c6948cfd05290926881cb57774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8b0e7c08a351c6948cfd05290926881cb57774"}], "stats": {"total": 128, "additions": 113, "deletions": 15}, "files": [{"sha": "fca0d65572b8830df97ac9d0c5850e11d5e99ba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01b9e84eb15daf5a420fa956d3289f30a08884e3", "patch": "@@ -1,3 +1,12 @@\n+2000-01-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_emit_conditional_move): Use VOIDmode when\n+\ttesting for a signed comparison.\n+\t(alpha_emit_floatuns): New.\n+\t* alpha-protos.h: Declare it.\n+\t* alpha.md (floatunsdisf2, floatunsdidf2): New.\n+\t(extendsfdf2): Tidy.\n+\n 2000-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/linux64.h (CC1_SPEC): If compiling -m32 with -g but"}, {"sha": "d4a6b65fe870eec184e283d07077efc231fd69ee", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=01b9e84eb15daf5a420fa956d3289f30a08884e3", "patch": "@@ -79,6 +79,7 @@ extern rtx alpha_emit_set_const PARAMS ((rtx, enum machine_mode,\n \t\t\t\t\tHOST_WIDE_INT, int));\n extern rtx alpha_emit_set_long_const PARAMS ((rtx, HOST_WIDE_INT,\n \t\t\t\t\t     HOST_WIDE_INT));\n+extern void alpha_emit_floatuns PARAMS ((rtx[]));\n extern rtx alpha_emit_conditional_branch PARAMS ((enum rtx_code));\n extern rtx alpha_emit_conditional_move PARAMS ((rtx, enum machine_mode));\n extern void alpha_emit_xfloating_arith PARAMS ((enum rtx_code, rtx[]));"}, {"sha": "6e4dddeb4f61c5a34154254a87e7a7c821524c0d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=01b9e84eb15daf5a420fa956d3289f30a08884e3", "patch": "@@ -1464,6 +1464,88 @@ alpha_emit_set_long_const (target, c1, c2)\n   return target;\n }\n \n+/* Generate an unsigned DImode to FP conversion.  This is the same code\n+   optabs would emit if we didn't have TFmode patterns.\n+\n+   For SFmode, this is the only construction I've found that can pass\n+   gcc.c-torture/execute/ieee/rbug.c.  No scenario that uses DFmode\n+   intermediates will work, because you'll get intermediate rounding\n+   that ruins the end result.  Some of this could be fixed by turning\n+   on round-to-positive-infinity, but that requires diddling the fpsr,\n+   which kills performance.  I tried turning this around and converting\n+   to a negative number, so that I could turn on /m, but either I did\n+   it wrong or there's something else cause I wound up with the exact\n+   same single-bit error.  There is a branch-less form of this same code:\n+\n+\tsrl     $16,1,$1\n+\tand     $16,1,$2\n+\tcmplt   $16,0,$3\n+\tor      $1,$2,$2\n+\tcmovge  $16,$16,$2\n+\titoft\t$3,$f10\n+\titoft\t$2,$f11\n+\tcvtqs   $f11,$f11\n+\tadds    $f11,$f11,$f0\n+\tfcmoveq $f10,$f11,$f0\n+\n+   I'm not using it because it's the same number of instructions as\n+   this branch-full form, and it has more serialized long latency\n+   instructions on the critical path.\n+\n+   For DFmode, we can avoid rounding errors by breaking up the word\n+   into two pieces, converting them separately, and adding them back:\n+\n+   LC0: .long 0,0x5f800000\n+\n+\titoft\t$16,$f11\n+\tlda\t$2,LC0\n+\tcpyse\t$f11,$f31,$f10\n+\tcpyse\t$f31,$f11,$f11\n+\ts4addq\t$1,$2,$1\n+\tlds\t$f12,0($1)\n+\tcvtqt\t$f10,$f10\n+\tcvtqt\t$f11,$f11\n+\taddt\t$f12,$f10,$f0\n+\taddt\t$f0,$f11,$f0\n+\n+   This doesn't seem to be a clear-cut win over the optabs form.\n+   It probably all depends on the distribution of numbers being\n+   converted -- in the optabs form, all but high-bit-set has a\n+   much lower minimum execution time.  */\n+\n+void\n+alpha_emit_floatuns (operands)\n+     rtx operands[2];\n+{\n+  rtx neglab, donelab, i0, i1, f0, in, out;\n+  enum machine_mode mode;\n+\n+  out = operands[0];\n+  in = operands[1];\n+  mode = GET_MODE (out);\n+  neglab = gen_label_rtx ();\n+  donelab = gen_label_rtx ();\n+  i0 = gen_reg_rtx (DImode);\n+  i1 = gen_reg_rtx (DImode);\n+  f0 = gen_reg_rtx (mode);\n+\n+  emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0,\n+\t\t\t   8, neglab);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n+  emit_jump_insn (gen_jump (donelab));\n+\n+  emit_label (neglab);\n+\n+  emit_insn (gen_lshrdi3 (i0, in, const1_rtx));\n+  emit_insn (gen_anddi3 (i1, in, const1_rtx));\n+  emit_insn (gen_iordi3 (i0, i0, i1));\n+  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_FLOAT (mode, i0)));\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+\n+  emit_label (donelab);\n+}\n+\n /* Generate the comparison for a conditional branch.  */\n \n rtx\n@@ -1676,7 +1758,7 @@ alpha_emit_conditional_move (cmp, mode)\n \n   /* We may be able to use a conditional move directly.\n      This avoids emitting spurious compares. */\n-  if (signed_comparison_operator (cmp, cmp_op_mode)\n+  if (signed_comparison_operator (cmp, VOIDmode)\n       && (!fp_p || local_fast_math)\n       && (op0 == CONST0_RTX (cmp_mode) || op1 == CONST0_RTX (cmp_mode)))\n     return gen_rtx_fmt_ee (code, VOIDmode, op0, op1);"}, {"sha": "4fa6e563b1c057d94bc54220412a9a3c1e629393", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9e84eb15daf5a420fa956d3289f30a08884e3/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=01b9e84eb15daf5a420fa956d3289f30a08884e3", "patch": "@@ -2133,45 +2133,51 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT, operands); DONE;\")\n \n+(define_expand \"floatunsdisf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"\"\n+  \"alpha_emit_floatuns (operands); DONE;\")\n+\n+(define_expand \"floatunsdidf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"\"\n+  \"alpha_emit_floatuns (operands); DONE;\")\n+\n (define_expand \"floatunsditf2\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))\n    (use (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (UNSIGNED_FLOAT, operands); DONE;\")\n \n (define_expand \"extendsfdf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SF 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_FP\"\n-\"\n+  \"\n {\n   if (alpha_fptm >= ALPHA_FPTM_SU)\n-    emit_insn (gen_extendsfdf2_tp (operands[0],\n-\t\t\t\t   force_reg (SFmode, operands[1])));\n-  else\n-    emit_insn (gen_extendsfdf2_no_tp (operands[0], operands[1]));\n-\n-  DONE;\n+    operands[1] = force_reg (SFmode, operands[1]);\n }\")\n-;; FIXME\n-(define_insn \"extendsfdf2_tp\"\n+\n+(define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"cvtsts %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"extendsfdf2_no_tp\"\n+(define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,m\")\n \t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"f,m,f\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"@\n    fmov %1,%0\n    ld%, %0,%1\n    st%- %1,%0\"\n-  [(set_attr \"type\" \"fcpys,fld,fst\")\n-   (set_attr \"trap\" \"yes\")])\n+  [(set_attr \"type\" \"fcpys,fld,fst\")])\n \n (define_expand \"extenddftf2\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))"}]}