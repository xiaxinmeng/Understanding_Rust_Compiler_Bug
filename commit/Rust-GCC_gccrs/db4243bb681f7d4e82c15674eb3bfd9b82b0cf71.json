{"sha": "db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "node_id": "C_kwDOANBUbNoAKGRiNDI0M2JiNjgxZjdkNGU4MmMxNTY3NGViM2JmZDliODJiMGNmNzE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-01T20:13:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-02T19:15:26Z"}, "message": "c++: constexpr empty aggr [PR105795]\n\nIn this testcase, leaving ctx->ctor pointing to the enclosing object meant\nthat evaluating the initializer for the subobject clobbered previous\ninitializers for the enclosing object.  So do update ctx->ctor, just don't\nadd it to the enclosing object ctor.\n\n\tPR c++/105795\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_bare_aggregate): Always call\n\tinit_subob_ctx.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-aggr-base1.C: New test.", "tree": {"sha": "37a403616ad4e7c5d037270e9a1708150c619a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a403616ad4e7c5d037270e9a1708150c619a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "021eaa34920589c9697b6a4bcc9030cf85a24f61", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "patch": "@@ -4777,12 +4777,9 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n       tree orig_value = value;\n       /* Like in cxx_eval_store_expression, omit entries for empty fields.  */\n       bool no_slot = TREE_CODE (type) == RECORD_TYPE && is_empty_field (index);\n-      if (no_slot)\n-\tnew_ctx = *ctx;\n-      else\n-\tinit_subob_ctx (ctx, new_ctx, index, value);\n+      init_subob_ctx (ctx, new_ctx, index, value);\n       int pos_hint = -1;\n-      if (new_ctx.ctor != ctx->ctor)\n+      if (new_ctx.ctor != ctx->ctor && !no_slot)\n \t{\n \t  /* If we built a new CONSTRUCTOR, attach it now so that other\n \t     initializers can refer to it.  */"}, {"sha": "06acb4a9f78fa6a9090a1d5e4b8e00640f5d83b7", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-aggr-base1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-aggr-base1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4243bb681f7d4e82c15674eb3bfd9b82b0cf71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-aggr-base1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-aggr-base1.C?ref=db4243bb681f7d4e82c15674eb3bfd9b82b0cf71", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/105795\n+// { dg-do compile { target c++17 } }\n+\n+struct empty\n+{};\n+\n+template <typename T>\n+struct tuple_holder\n+{\n+    [[no_unique_address]] T value;\n+};\n+\n+struct tuple : tuple_holder<int>, tuple_holder<empty>\n+{};\n+\n+constexpr auto make_tuple(int&& i, empty&& e)\n+{\n+    return tuple{i, e};\n+}\n+\n+constexpr int foo()\n+{\n+    auto tuple = make_tuple(1, empty{});\n+    return static_cast<const tuple_holder<int>&>(tuple).value;\n+}\n+\n+static_assert (foo() == 1);"}]}