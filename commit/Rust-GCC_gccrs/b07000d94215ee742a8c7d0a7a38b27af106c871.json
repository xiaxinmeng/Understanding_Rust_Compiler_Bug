{"sha": "b07000d94215ee742a8c7d0a7a38b27af106c871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3MDAwZDk0MjE1ZWU3NDJhOGM3ZDBhN2EzOGIyN2FmMTA2Yzg3MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-23T22:23:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-23T22:23:19Z"}, "message": "Better parsing of erroneous expression on left of :=.\n\nBetter parsing of erroneous non-type in type switch.\n\nFrom-SVN: r179133", "tree": {"sha": "c8ae1047860b8cdc7ce0d2fdde972bf4d49f6646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8ae1047860b8cdc7ce0d2fdde972bf4d49f6646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b07000d94215ee742a8c7d0a7a38b27af106c871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07000d94215ee742a8c7d0a7a38b27af106c871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07000d94215ee742a8c7d0a7a38b27af106c871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07000d94215ee742a8c7d0a7a38b27af106c871/comments", "author": null, "committer": null, "parents": [{"sha": "2d2b02c4da9e66531c8e56703273f447fb8d49a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2b02c4da9e66531c8e56703273f447fb8d49a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2b02c4da9e66531c8e56703273f447fb8d49a9"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "8c42fa2b24f3d9a731368bee00e8e4686b7e282e", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07000d94215ee742a8c7d0a7a38b27af106c871/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07000d94215ee742a8c7d0a7a38b27af106c871/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=b07000d94215ee742a8c7d0a7a38b27af106c871", "patch": "@@ -3506,7 +3506,21 @@ Parse::simple_stat(bool may_be_composite_lit, bool* return_exp,\n   else if (return_exp != NULL)\n     return this->verify_not_sink(exp);\n   else\n-    this->expression_stat(this->verify_not_sink(exp));\n+    {\n+      exp = this->verify_not_sink(exp);\n+\n+      if (token->is_op(OPERATOR_COLONEQ))\n+\t{\n+\t  if (!exp->is_error_expression())\n+\t    error_at(token->location(), \"non-name on left side of %<:=%>\");\n+\t  while (!token->is_op(OPERATOR_SEMICOLON)\n+\t\t && !token->is_eof())\n+\t    token = this->advance_token();\n+\t  return NULL;\n+\t}\n+\n+      this->expression_stat(exp);\n+    }\n \n   return NULL;\n }\n@@ -4287,8 +4301,19 @@ Parse::type_switch_case(std::vector<Type*>* types, bool* is_default)\n       while (true)\n \t{\n \t  Type* t = this->type();\n+\n \t  if (!t->is_error_type())\n \t    types->push_back(t);\n+\t  else\n+\t    {\n+\t      token = this->peek_token();\n+\t      while (!token->is_op(OPERATOR_COLON)\n+\t\t     && !token->is_op(OPERATOR_COMMA)\n+\t\t     && !token->is_op(OPERATOR_RCURLY)\n+\t\t     && !token->is_eof())\n+\t\ttoken = this->advance_token();\n+\t    }\n+\n \t  if (!this->peek_token()->is_op(OPERATOR_COMMA))\n \t    break;\n \t  this->advance_token();"}]}