{"sha": "a85d87b20c607cdcb878901cee8535bdd35489d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1ZDg3YjIwYzYwN2NkY2I4Nzg5MDFjZWU4NTM1YmRkMzU0ODlkNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:56:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:56:12Z"}, "message": "poly_int: get_inner_reference_aff\n\nThis patch makes get_inner_reference_aff return the size as a\npoly_widest_int rather than a widest_int.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-affine.h (get_inner_reference_aff): Return the size as a\n\tpoly_widest_int.\n\t* tree-affine.c (get_inner_reference_aff): Likewise.\n\t* tree-data-ref.c (dr_may_alias_p): Update accordingly.\n\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255891", "tree": {"sha": "078faf71983d09893b8c5e739f41a6643dd7b2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078faf71983d09893b8c5e739f41a6643dd7b2c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a85d87b20c607cdcb878901cee8535bdd35489d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85d87b20c607cdcb878901cee8535bdd35489d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85d87b20c607cdcb878901cee8535bdd35489d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85d87b20c607cdcb878901cee8535bdd35489d4/comments", "author": null, "committer": null, "parents": [{"sha": "c036acdeecba22a4cb826a3dd21904154265a581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c036acdeecba22a4cb826a3dd21904154265a581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c036acdeecba22a4cb826a3dd21904154265a581"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "70e8c1a5e46270053b93f1f31a14f779411bb893", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a85d87b20c607cdcb878901cee8535bdd35489d4", "patch": "@@ -1,3 +1,13 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-affine.h (get_inner_reference_aff): Return the size as a\n+\tpoly_widest_int.\n+\t* tree-affine.c (get_inner_reference_aff): Likewise.\n+\t* tree-data-ref.c (dr_may_alias_p): Update accordingly.\n+\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Likewise.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5c6bb7d09063d3e5712348cabbe3229602709ed1", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=a85d87b20c607cdcb878901cee8535bdd35489d4", "patch": "@@ -927,7 +927,7 @@ debug_aff (aff_tree *val)\n    which REF refers.  */\n \n tree\n-get_inner_reference_aff (tree ref, aff_tree *addr, widest_int *size)\n+get_inner_reference_aff (tree ref, aff_tree *addr, poly_widest_int *size)\n {\n   HOST_WIDE_INT bitsize, bitpos;\n   tree toff;"}, {"sha": "d2140b7262d6dbd604f24a61d92f4db3e16c4794", "filename": "gcc/tree-affine.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-affine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-affine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.h?ref=a85d87b20c607cdcb878901cee8535bdd35489d4", "patch": "@@ -80,7 +80,7 @@ bool aff_combination_constant_multiple_p (aff_tree *, aff_tree *,\n void aff_combination_expand (aff_tree *, hash_map<tree, name_expansion *> **);\n void tree_to_aff_combination_expand (tree, tree, aff_tree *,\n \t\t\t\t     hash_map<tree, name_expansion *> **);\n-tree get_inner_reference_aff (tree, aff_tree *, widest_int *);\n+tree get_inner_reference_aff (tree, aff_tree *, poly_widest_int *);\n void free_affine_expand_cache (hash_map<tree, name_expansion *> **);\n bool aff_comb_cannot_overlap_p (aff_tree *, const poly_widest_int &,\n \t\t\t\tconst poly_widest_int &);"}, {"sha": "4b805aaa612e78a6c07a710bcf4a0e4027bc3834", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=a85d87b20c607cdcb878901cee8535bdd35489d4", "patch": "@@ -2134,7 +2134,7 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n   if (!loop_nest)\n     {\n       aff_tree off1, off2;\n-      widest_int size1, size2;\n+      poly_widest_int size1, size2;\n       get_inner_reference_aff (DR_REF (a), &off1, &size1);\n       get_inner_reference_aff (DR_REF (b), &off2, &size2);\n       aff_combination_scale (&off1, -1);"}, {"sha": "e62759b4bd4a551578af06a93d1a2ec58e7331d3", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85d87b20c607cdcb878901cee8535bdd35489d4/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=a85d87b20c607cdcb878901cee8535bdd35489d4", "patch": "@@ -1581,7 +1581,7 @@ mem_refs_may_alias_p (im_mem_ref *mem1, im_mem_ref *mem2,\n   /* Perform BASE + OFFSET analysis -- if MEM1 and MEM2 are based on the same\n      object and their offset differ in such a way that the locations cannot\n      overlap, then they cannot alias.  */\n-  widest_int size1, size2;\n+  poly_widest_int size1, size2;\n   aff_tree off1, off2;\n \n   /* Perform basic offset and type-based disambiguation.  */"}]}