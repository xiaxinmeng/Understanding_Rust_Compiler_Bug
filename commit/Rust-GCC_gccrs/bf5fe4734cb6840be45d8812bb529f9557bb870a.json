{"sha": "bf5fe4734cb6840be45d8812bb529f9557bb870a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1ZmU0NzM0Y2I2ODQwYmU0NWQ4ODEyYmI1MjlmOTU1N2JiODcwYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-10-22T18:58:35Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-22T18:58:35Z"}, "message": "locale_facets.h: Correct byname facets for \"C\" locale.\n\n\n2003-10-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.h: Correct byname facets for \"C\"\n\tlocale.\n\t* config/locale/generic/ctype_members.cc: Same.\n\t* config/locale/generic/messages_members.h: Same.\n\t* config/locale/gnu/ctype_members.cc: Same.\n\t* config/locale/gnu/messages_members.h: Same.\n\t* include/bits/codecvt.h: Same.\n\t* src/ctype.cc: Same.\n\t* testsuite/22_locale/codecvt_byname/1.cc: New.\n\t* testsuite/22_locale/collate/1.cc: Edit.\n\t* testsuite/22_locale/collate_byname/1.cc: Derivation tests, move to...\n\t* testsuite/22_locale/collate_byname/named_equivalence.cc: ...here.\n\t* testsuite/22_locale/ctype/1.cc: Derivation tests.\n\t* testsuite/22_locale/ctype/11844.cc: Move...\n\t* testsuite/22_locale/ctype_base/11844.cc: ...here.\n\t* testsuite/22_locale/ctype_base/1.cc: Move mask bits here.\n\t* testsuite/22_locale/ctype_byname/1.cc: Name.\n\t* testsuite/22_locale/messages_byname/1.cc: New.\n\t* testsuite/22_locale/messages_byname/named_equivalence.cc: New.\n\t* testsuite/22_locale/moneypunct_byname/1.cc: Derivation test.\n\t* testsuite/22_locale/moneypunct_byname/named_equivalence.cc: New.\n\t* testsuite/22_locale/numpunct/1.cc: Edit.\n\t* testsuite/22_locale/numpunct_byname/2.cc: Move...\n\t* testsuite/22_locale/numpunct/members/char/3.cc: ...here.\n\t* testsuite/22_locale/numpunct_byname/1.cc: Derivation tests.\n\t* testsuite/22_locale/numpunct_byname/named_equivalence.cc: New.\n\nFrom-SVN: r72814", "tree": {"sha": "565106ab5ef326904ca37ed08d4de1e92243f62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/565106ab5ef326904ca37ed08d4de1e92243f62f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf5fe4734cb6840be45d8812bb529f9557bb870a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5fe4734cb6840be45d8812bb529f9557bb870a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5fe4734cb6840be45d8812bb529f9557bb870a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5fe4734cb6840be45d8812bb529f9557bb870a/comments", "author": null, "committer": null, "parents": [{"sha": "dbacaa98b66b5651310e2dde4ed7c9e1d4115937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbacaa98b66b5651310e2dde4ed7c9e1d4115937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbacaa98b66b5651310e2dde4ed7c9e1d4115937"}], "stats": {"total": 1118, "additions": 686, "deletions": 432}, "files": [{"sha": "9100bb19a60e742a583ff994c26fadf72c0c33a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,3 +1,32 @@\n+2003-10-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.h: Correct byname facets for \"C\"\n+\tlocale.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t* config/locale/generic/messages_members.h: Same.\n+\t* config/locale/gnu/ctype_members.cc: Same.\n+\t* config/locale/gnu/messages_members.h: Same.\n+\t* include/bits/codecvt.h: Same.\n+\t* src/ctype.cc: Same.\n+\t* testsuite/22_locale/codecvt_byname/1.cc: New.\n+\t* testsuite/22_locale/collate/1.cc: Edit.\n+\t* testsuite/22_locale/collate_byname/1.cc: Derivation tests, move to...\n+\t* testsuite/22_locale/collate_byname/named_equivalence.cc: ...here.\n+\t* testsuite/22_locale/ctype/1.cc: Derivation tests.\n+\t* testsuite/22_locale/ctype/11844.cc: Move...\n+\t* testsuite/22_locale/ctype_base/11844.cc: ...here.\n+\t* testsuite/22_locale/ctype_base/1.cc: Move mask bits here.\n+\t* testsuite/22_locale/ctype_byname/1.cc: Name.\n+\t* testsuite/22_locale/messages_byname/1.cc: New.\n+\t* testsuite/22_locale/messages_byname/named_equivalence.cc: New.\n+\t* testsuite/22_locale/moneypunct_byname/1.cc: Derivation test.\n+\t* testsuite/22_locale/moneypunct_byname/named_equivalence.cc: New.\n+\t* testsuite/22_locale/numpunct/1.cc: Edit.\n+\t* testsuite/22_locale/numpunct_byname/2.cc: Move...\n+\t* testsuite/22_locale/numpunct/members/char/3.cc: ...here.\n+\t* testsuite/22_locale/numpunct_byname/1.cc: Derivation tests.\n+\t* testsuite/22_locale/numpunct_byname/named_equivalence.cc: New.\n+\n 2003-10-22  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/8610"}, {"sha": "71175f145595c008aa7a2730cce7bfb6bc60fa16", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -43,8 +43,11 @@ namespace std\n     ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<char>(0, false, __refs) \n     { \t\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n-      _S_create_c_locale(_M_c_locale_ctype, __s); \n+      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t{\n+\t  _S_destroy_c_locale(_M_c_locale_ctype);\n+\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n+\t}\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T  "}, {"sha": "cecc6446c7120632caf8839480b9401368f13d8e", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -76,6 +76,9 @@\n      messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n      : messages<_CharT>(__refs) \n      { \n-       _S_destroy_c_locale(this->_M_c_locale_messages);\n-       _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    _S_destroy_c_locale(this->_M_c_locale_messages);\n+\t    _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t  }\n      }"}, {"sha": "a5394b53828b487bbee191ca75e83e4e38b2b0aa", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -43,12 +43,15 @@ namespace std\n   template<>\n     ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<char>(0, false, __refs) \n-    { \t\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n-      _S_create_c_locale(_M_c_locale_ctype, __s); \n-      _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n-      _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n-      _M_table = _M_c_locale_ctype->__ctype_b;\n+    { \t\t\n+      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t{\n+\t  _S_destroy_c_locale(_M_c_locale_ctype);\n+\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n+\t  _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n+\t  _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n+\t  _M_table = _M_c_locale_ctype->__ctype_b;\n+\t}\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T  "}, {"sha": "ed95dfb4c43cbfd85269fbeabe899a25c05ca69b", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -106,6 +106,9 @@\n        std::strcpy(__tmp, __s);\n        this->_M_name_messages = __tmp;\n #endif\n-       _S_destroy_c_locale(this->_M_c_locale_messages);\n-       _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    _S_destroy_c_locale(this->_M_c_locale_messages);\n+\t    _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t  }\n      }"}, {"sha": "80f9cba0b3589a1d65f35e19856b0b2e046bf05e", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -341,8 +341,11 @@\n       codecvt_byname(const char* __s, size_t __refs = 0) \n       : codecvt<_InternT, _ExternT, _StateT>(__refs)\n       { \n-\t_S_destroy_c_locale(this->_M_c_locale_codecvt);\n-\t_S_create_c_locale(this->_M_c_locale_codecvt, __s); \n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    _S_destroy_c_locale(this->_M_c_locale_codecvt);\n+\t    _S_create_c_locale(this->_M_c_locale_codecvt, __s); \n+\t  }\n       }\n \n     protected:"}, {"sha": "abb9d143c61e9bb60f569b05b3358faa841ff8d4", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -795,9 +795,6 @@ namespace std\n   template<typename _CharT>\n     class numpunct_byname : public numpunct<_CharT>\n     {\n-      // Data Member.\n-      __c_locale\t\t\t_M_c_locale_numpunct;\n-\n     public:\n       typedef _CharT               \tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n@@ -806,14 +803,18 @@ namespace std\n       numpunct_byname(const char* __s, size_t __refs = 0)\n       : numpunct<_CharT>(__refs)\n       {\n-\tthis->_S_create_c_locale(_M_c_locale_numpunct, __s);\n-\tthis->_M_initialize_numpunct(_M_c_locale_numpunct);\t\n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    __c_locale __tmp;\n+\t    this->_S_create_c_locale(__tmp, __s);\n+\t    this->_M_initialize_numpunct(__tmp);\t\n+\t    this->_S_destroy_c_locale(__tmp); \n+\t  }\n       }\n \n     protected:\n       virtual \n-      ~numpunct_byname() \n-      { this->_S_destroy_c_locale(_M_c_locale_numpunct); }\n+      ~numpunct_byname() { }\t\n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -1151,8 +1152,11 @@ namespace std\n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs) \n       { \n-\tthis->_S_destroy_c_locale(this->_M_c_locale_collate);\n-\tthis->_S_create_c_locale(this->_M_c_locale_collate, __s); \n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    this->_S_destroy_c_locale(this->_M_c_locale_collate);\n+\t    this->_S_create_c_locale(this->_M_c_locale_collate, __s); \n+\t  }\n       }\n \n     protected:\n@@ -1589,7 +1593,7 @@ namespace std\n       typedef _OutIter   \t\titer_type;\n \n       explicit \n-      time_put_byname(const char* /*__s*/, size_t __refs = 0) \n+      time_put_byname(const char*, size_t __refs = 0) \n       : time_put<_CharT, _OutIter>(__refs) \n       { };\n \n@@ -1805,8 +1809,6 @@ namespace std\n   template<typename _CharT, bool _Intl>\n     class moneypunct_byname : public moneypunct<_CharT, _Intl>\n     {\n-      __c_locale\t\t\t_M_c_locale_moneypunct;\n-\n     public:\n       typedef _CharT \t\t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n@@ -1817,14 +1819,18 @@ namespace std\n       moneypunct_byname(const char* __s, size_t __refs = 0)\n       : moneypunct<_CharT, _Intl>(__refs)\n       {\n-\tthis->_S_create_c_locale(_M_c_locale_moneypunct, __s);\n-\tthis->_M_initialize_moneypunct(_M_c_locale_moneypunct);\t\n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    __c_locale __tmp;\n+\t    this->_S_create_c_locale(__tmp, __s);\n+\t    this->_M_initialize_moneypunct(__tmp);\t\n+\t    this->_S_destroy_c_locale(__tmp); \n+\t  }\n       }\n \n     protected:\n       virtual \n-      ~moneypunct_byname() \n-      { this->_S_destroy_c_locale(_M_c_locale_moneypunct); }\n+      ~moneypunct_byname() { }\n     };\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "7fb5c2da81fc3119609b8f8d7d554453e3d50527", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -99,9 +99,12 @@ namespace std\n   template<>\n     ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<wchar_t>(__refs) \n-    { \t\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n-      _S_create_c_locale(_M_c_locale_ctype, __s); \n+    { \t\t\n+      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t{\n+\t  _S_destroy_c_locale(_M_c_locale_ctype);\n+\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n+\t}\n     }\n #endif\n } // namespace std"}, {"sha": "a17c841466b35dd38eac979e378af10f8faecd17", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5  Template class codecvt\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::codecvt_byname<char, char, mbstate_t> test_type;\n+  typedef std::codecvt<char, char, mbstate_t> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::intern_type intern_type;\n+  typedef test_type::extern_type extern_type;\n+  typedef test_type::state_type state_type;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "41f615e3dde058bc52380d5a12ce7d6012b70bbf", "filename": "libstdc++-v3/testsuite/22_locale/collate/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -26,7 +26,7 @@\n void test01()\n {\n   // Check for required base class.\n-  typedef std::messages<char> test_type;\n+  typedef std::collate<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;"}, {"sha": "6f1f6432ae62539af33aa8677abace452a005e0f", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/1.cc", "status": "modified", "additions": 13, "deletions": 105, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,6 +1,7 @@\n-// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,114 +19,21 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.4.2 Template class collate_byname\n+// 22.2.4 The collate category\n \n #include <locale>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n-  using namespace std;\n-  typedef std::collate<char>::string_type string_type;\n-\n-  bool test __attribute__((unused)) = true;\n-  string str;\n-  locale loc_c = locale::classic();\n-\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n-  str = loc_de.name();\n-\n-  locale loc_byname(locale::classic(), new collate_byname<char>(\"de_DE\"));\n-  str = loc_byname.name();\n-\n-  VERIFY( loc_de != loc_byname );\n-\n-  // cache the collate facets\n-  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n-\n-  // Check German \"de_DE\" locale.\n-  int i1;\n-  int i2;\n-  long l1;\n-  long l2;\n-  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n-  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n-\n-  int size3 = strlen(strlit3) - 1;\n-  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size3);\n-  VERIFY ( i1 == -1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 0 );\n-\n-  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n-  VERIFY ( i1 == -1 );\n-\n-  int size4 = strlen(strlit4) - 1;\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n-  VERIFY ( i2 == 1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == 0 );\n-\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n-  VERIFY ( l1 != l2 );\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit4, strlit4 + size4);\n-  VERIFY ( l1 != l2 );\n-\n-  string str3 = coll_de.transform(strlit3, strlit3 + size3);\n-  string str4 = coll_de.transform(strlit4, strlit4 + size4);\n-  i1 = str3.compare(str4);\n-  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  VERIFY ( i1 * i2 > 0 );\n-\n-\n-  // Check byname locale\n-  int i3;\n-  int i4;\n-  long l3;\n-  long l4;\n-  size4 = strlen(strlit3) - 1;\n-  i3 = coll_de.compare(strlit3, strlit3 + size4, strlit3, strlit3 + 7);\n-  VERIFY ( i3 == 1 );\n-  i3 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size4);\n-  VERIFY ( i3 == -1 );\n-  i3 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n-  VERIFY ( i3 == 0 );\n-\n-  i3 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n-  VERIFY ( i3 == -1 );\n-\n-  size4 = strlen(strlit4) - 1;\n-  i4 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n-  VERIFY ( i4 == 1 );\n-  i4 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n-  VERIFY ( i4 == -1 );\n-  i4 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n-  VERIFY ( i4 == 0 );\n-\n-  l3 = coll_de.hash(strlit3, strlit3 + size4);\n-  l4 = coll_de.hash(strlit3, strlit3 + size4 - 1);\n-  VERIFY ( l3 != l4 );\n-  l3 = coll_de.hash(strlit3, strlit3 + size4);\n-  l4 = coll_de.hash(strlit4, strlit4 + size4);\n-  VERIFY ( l3 != l4 );\n-\n-  string str5 = coll_de.transform(strlit3, strlit3 + size3);\n-  string str6 = coll_de.transform(strlit4, strlit4 + size4);\n-  i3 = str5.compare(str6);\n-  i4 = coll_de.compare(strlit3, strlit3 + size4, strlit4, strlit4 + size4);\n-  VERIFY ( i4 == -1 );\n-  VERIFY ( i3 * i4 > 0 );\n-\n-  // Verify byname == de\n-  VERIFY ( str5 == str3 );\n-  VERIFY ( str6 == str4 );\n+  // Check for required base class.\n+  typedef std::collate_byname<char> test_type;\n+  typedef std::collate<char> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n }\n \n int main()"}, {"sha": "be4524f9ca6532f060a81472ee1a3d5bf1bd242b", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/named_equivalence.cc", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Fnamed_equivalence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Fnamed_equivalence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Fnamed_equivalence.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,135 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.2 Template class collate_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  string str;\n+  locale loc_c = locale::classic();\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  str = loc_de.name();\n+\n+  locale loc_byname(locale::classic(), new collate_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // Check German \"de_DE\" locale.\n+  int i1;\n+  int i2;\n+  long l1;\n+  long l2;\n+  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int size3 = strlen(strlit3) - 1;\n+  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size3);\n+  VERIFY ( i1 == -1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i1 == -1 );\n+\n+  int size4 = strlen(strlit4) - 1;\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i2 == 1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == 0 );\n+\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l1 != l2 );\n+\n+  string str3 = coll_de.transform(strlit3, strlit3 + size3);\n+  string str4 = coll_de.transform(strlit4, strlit4 + size4);\n+  i1 = str3.compare(str4);\n+  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  VERIFY ( i1 * i2 > 0 );\n+\n+\n+  // Check byname locale\n+  int i3;\n+  int i4;\n+  long l3;\n+  long l4;\n+  size4 = strlen(strlit3) - 1;\n+  i3 = coll_de.compare(strlit3, strlit3 + size4, strlit3, strlit3 + 7);\n+  VERIFY ( i3 == 1 );\n+  i3 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size4);\n+  VERIFY ( i3 == -1 );\n+  i3 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i3 == 0 );\n+\n+  i3 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i3 == -1 );\n+\n+  size4 = strlen(strlit4) - 1;\n+  i4 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i4 == 1 );\n+  i4 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i4 == -1 );\n+  i4 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i4 == 0 );\n+\n+  l3 = coll_de.hash(strlit3, strlit3 + size4);\n+  l4 = coll_de.hash(strlit3, strlit3 + size4 - 1);\n+  VERIFY ( l3 != l4 );\n+  l3 = coll_de.hash(strlit3, strlit3 + size4);\n+  l4 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l3 != l4 );\n+\n+  string str5 = coll_de.transform(strlit3, strlit3 + size3);\n+  string str6 = coll_de.transform(strlit4, strlit4 + size4);\n+  i3 = str5.compare(str6);\n+  i4 = coll_de.compare(strlit3, strlit3 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i4 == -1 );\n+  VERIFY ( i3 * i4 > 0 );\n+\n+  // Verify byname == de\n+  VERIFY ( str5 == str3 );\n+  VERIFY ( str6 == str4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ed8122121da4ebb04cb2a70c9d25039fa59b2d4b", "filename": "libstdc++-v3/testsuite/22_locale/ctype/1.cc", "status": "modified", "additions": 16, "deletions": 134, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n-// 1999-08-24 bkoz\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 1999, 2000, 2003 Free Software Foundation\n+// Copyright (C) 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,144 +19,26 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.1 The ctype category\n-\n-// 1: Test that the locale headers are picking up the correct declaration\n-// of the internal type `ctype_base::mask'.\n-int mask ();\n+// 22.2.1.1 - Template class ctype\n \n #include <locale>\n \n-// 2: Should be able to instantiate this for other types besides char, wchar_t\n-typedef std::ctype<char> cctype;\n-\n-class gnu_ctype: public std::ctype<unsigned char> \n-{ \n-private:\n-  const cctype& _M_cctype;\n-\n-public:\n-  explicit \n-  gnu_ctype(size_t __refs = 0) \n-  : std::ctype<unsigned char>(__refs), \n-    _M_cctype(std::use_facet<cctype>(std::locale::classic())) \n-  { }\n-\n-  ~gnu_ctype();\n-\n-protected:\n-  virtual bool \n-  do_is(mask __m, char_type __c) const\n-  { return _M_cctype.is(__m, __c); }\n-\n-  virtual const char_type*\n-  do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n-  { \n-    const char* __c = _M_cctype.is(reinterpret_cast<const char*>(__lo), \n-\t\t\t\t   reinterpret_cast<const char*>(__hi), __vec);\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-  \n-  virtual const char_type*\n-  do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n-  {\n-    const char* __c = _M_cctype.scan_is(__m, \n-\t\t\t\t\treinterpret_cast<const char*>(__lo), \n-\t\t\t\t\treinterpret_cast<const char*>(__hi));\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-\n-  virtual const char_type*\n-  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n-  {\n-    const char* __c = _M_cctype.scan_is(__m, \n-\t\t\t\t\treinterpret_cast<const char*>(__lo), \n-\t\t\t\t\treinterpret_cast<const char*>(__hi));\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-\n-  virtual char_type \n-  do_toupper(char_type __c) const\n-  { return _M_cctype.toupper(__c); }\n-\n-  virtual const char_type*\n-  do_toupper(char_type* __lo, const char_type* __hi) const\n-  {\n-    const char* __c = _M_cctype.toupper(reinterpret_cast<char*>(__lo), \n-\t\t\t\t\treinterpret_cast<const char*>(__hi));\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-\n-  virtual char_type \n-  do_tolower(char_type __c) const\n-  { return _M_cctype.tolower(__c); }\n-\n-  virtual const char_type*\n-  do_tolower(char_type* __lo, const char_type* __hi) const\n-  {\n-    const char* __c = _M_cctype.toupper(reinterpret_cast<char*>(__lo), \n-\t\t\t\t\treinterpret_cast<const char*>(__hi));\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-\n-  virtual char_type \n-  do_widen(char __c) const\n-  { return _M_cctype.widen(__c); }\n-\n-  virtual const char*\n-  do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n-  {\n-    const char* __c = _M_cctype.widen(reinterpret_cast<const char*>(__lo), \n-\t\t\t\t      reinterpret_cast<const char*>(__hi),\n-\t\t\t\t      reinterpret_cast<char*>(__dest));\n-    return __c;\n-  }\n-\n-  virtual char \n-  do_narrow(char_type __c, char __dfault) const\n-  { return _M_cctype.narrow(__c, __dfault); }\n-\n-  virtual const char_type*\n-  do_narrow(const char_type* __lo, const char_type* __hi, char __dfault, \n-\t    char* __dest) const\n-  {\n-    const char* __c = _M_cctype.narrow(reinterpret_cast<const char*>(__lo), \n-\t\t\t\t       reinterpret_cast<const char*>(__hi),\n-\t\t\t\t       __dfault,\n-\t\t\t\t       reinterpret_cast<char*>(__dest));\n-    return reinterpret_cast<const char_type*>(__c);\n-  }\n-\n-};\n-\n-gnu_ctype::~gnu_ctype() { }\n-\n-gnu_ctype facet01;\n-\n-// 3: Sanity check ctype_base::mask bitmask requirements\n-void\n-test01()\n+void test01()\n {\n-  using namespace std;\n-\n-  ctype_base::mask m01;\n-  ctype_base::mask m02;\n-  ctype_base::mask res;\n-\n-  m01 = ctype_base::space;\n-  m02 = ctype_base::xdigit;\n-\n-  res = m01 & m02;\n-  res = m01 | m02;\n-  res = m01 ^ m02;\n-  res = ~m01;\n-  m01 &= m02;\n-  m01 |= m02;\n-  m01 ^= m02;\n+  // Check for required base class.\n+  typedef std::ctype<char> test_type;\n+  typedef std::locale::facet base_type1;\n+  typedef std::ctype_base base_type2;\n+  const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n+  const base_type1* base1 __attribute__((unused)) = &obj;\n+  const base_type2* base2 __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n }\n \n-int main() \n-{ \n+int main()\n+{\n   test01();\n   return 0;\n }"}, {"sha": "76de50088849ad53b8070221fdac2f061c74a528", "filename": "libstdc++-v3/testsuite/22_locale/ctype_base/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+// 1999-08-24 bkoz\n+\n+// Copyright (C) 1999, 2000, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1 The ctype category\n+\n+// 1: Test that the locale headers are picking up the correct declaration\n+// of the internal type `ctype_base::mask'.\n+int mask ();\n+\n+#include <locale>\n+\n+// 2: Sanity check ctype_base::mask bitmask requirements\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  ctype_base::mask m01;\n+  ctype_base::mask m02;\n+  ctype_base::mask res;\n+\n+  m01 = ctype_base::space;\n+  m02 = ctype_base::xdigit;\n+\n+  res = m01 & m02;\n+  res = m01 | m02;\n+  res = m01 ^ m02;\n+  res = ~m01;\n+  m01 &= m02;\n+  m01 |= m02;\n+  m01 ^= m02;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "894fdfc85b74b234b707fefcc40261972fcb391f", "filename": "libstdc++-v3/testsuite/22_locale/ctype_base/11844.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F11844.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F11844.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2F11844.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype/11844.cc"}, {"sha": "61fa30d250ff7ce1030304923f6c94c159a3b522", "filename": "libstdc++-v3/testsuite/22_locale/ctype_byname/1.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.1 - Template class ctype\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ctype_byname<char> test_type;\n+  typedef std::ctype<char> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5b9b5d7324cf4df1b52626f825e5f1585ea5028e", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/1.cc", "status": "modified", "additions": 12, "deletions": 47, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,4 +1,5 @@\n-// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2003 Free Software Foundation\n //\n@@ -18,57 +19,21 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.7.2 Template class messages_byname\n+// 22.2.7 The message retrieval category\n \n #include <locale>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n-  using namespace std;\n-  typedef std::messages<char>::catalog catalog;\n-  typedef std::messages<char>::string_type string_type;\n-\n-  bool test __attribute__((unused)) = true;\n-  string str;\n-  // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n-  const char* dir = LOCALEDIR;\n-  locale loc_c = locale::classic();\n-\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n-  str = loc_de.name();\n-\n-  locale loc_byname(locale::classic(), new messages_byname<char>(\"de_DE\"));\n-  str = loc_byname.name();\n-\n-  VERIFY( loc_de != loc_byname );\n-\n-  // cache the messages facets\n-  const messages<char>& mssg_byname = use_facet<messages<char> >(loc_byname); \n-  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n-\n-  // catalog open(const string&, const locale&) const;\n-  // string_type get(catalog, int, int, const string_type& ) const; \n-  // void close(catalog) const;\n-\n-  // Check German (de_DE) locale.\n-  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n-  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n-  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n-  VERIFY ( s01 == \"bitte\" );\n-  VERIFY ( s02 == \"danke\" );\n-  mssg_de.close(cat_de);\n-\n-  // Check byname locale.\n-  catalog cat_byname = mssg_byname.open(\"libstdc++\", loc_c, dir);\n-  string s03 = mssg_byname.get(cat_de, 0, 0, \"please\");\n-  string s04 = mssg_byname.get(cat_de, 0, 0, \"thank you\");\n-  VERIFY ( s03 == \"bitte\" );\n-  VERIFY ( s04 == \"danke\" );\n-  mssg_byname.close(cat_byname);\n-\n-  VERIFY ( s01 == s03 );\n-  VERIFY ( s02 == s04 );\n+  // Check for required base class.\n+  typedef std::messages_byname<char> test_type;\n+  typedef std::messages<char> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n }\n \n int main()"}, {"sha": "3072383a9883b5013d3c248d2feee6650bf2011e", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/named_equivalence.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Fnamed_equivalence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Fnamed_equivalence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Fnamed_equivalence.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,78 @@\n+// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7.2 Template class messages_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+  typedef std::messages<char>::string_type string_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  string str;\n+  // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n+  const char* dir = LOCALEDIR;\n+  locale loc_c = locale::classic();\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  str = loc_de.name();\n+\n+  locale loc_byname(locale::classic(), new messages_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the messages facets\n+  const messages<char>& mssg_byname = use_facet<messages<char> >(loc_byname); \n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // catalog open(const string&, const locale&) const;\n+  // string_type get(catalog, int, int, const string_type& ) const; \n+  // void close(catalog) const;\n+\n+  // Check German (de_DE) locale.\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"bitte\" );\n+  VERIFY ( s02 == \"danke\" );\n+  mssg_de.close(cat_de);\n+\n+  // Check byname locale.\n+  catalog cat_byname = mssg_byname.open(\"libstdc++\", loc_c, dir);\n+  string s03 = mssg_byname.get(cat_de, 0, 0, \"please\");\n+  string s04 = mssg_byname.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s03 == \"bitte\" );\n+  VERIFY ( s04 == \"danke\" );\n+  mssg_byname.close(cat_byname);\n+\n+  VERIFY ( s01 == s03 );\n+  VERIFY ( s02 == s04 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e85bf230a8d63c04f8d1dd041593c0a1381774e2", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/1.cc", "status": "modified", "additions": 12, "deletions": 66, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,4 +1,5 @@\n-// 2001-08-24 Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2003 Free Software Foundation\n //\n@@ -18,77 +19,22 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.6.4 Template class moneypunct_byname\n+// 22.2.6.3  Template class moneypunct\n \n #include <locale>\n #include <testsuite_hooks.h>\n \n void test01()\n {\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-\n-  bool test __attribute__((unused)) = true;\n-  string str;\n-\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n-  str = loc_de.name();\n-\n-  locale loc_byname(locale::classic(), new moneypunct_byname<char>(\"de_DE\"));\n-  str = loc_byname.name();\n-\n-  locale loc_c = locale::classic();\n-\n-  VERIFY( loc_de != loc_byname );\n-\n-  // cache the moneypunct facets\n-  const moneypunct<char>& monp_c = use_facet<moneypunct<char> >(loc_c); \n-  const moneypunct<char>& monp_byname = \n-                                    use_facet<moneypunct<char> >(loc_byname); \n-  const moneypunct<char>& monp_de = use_facet<moneypunct<char> >(loc_de); \n-\n-  // sanity check that the data match\n-  char dp1 = monp_de.decimal_point();\n-  char th1 = monp_de.thousands_sep();\n-  string g1 = monp_de.grouping();\n-  string cs1 = monp_de.curr_symbol();\n-  string ps1 = monp_de.positive_sign();\n-  string ns1 = monp_de.negative_sign();\n-  int fd1 = monp_de.frac_digits();\n-  pattern pos1 = monp_de.pos_format();\n-  pattern neg1 = monp_de.neg_format();\n-\n-  char dp2 = monp_byname.decimal_point();\n-  char th2 = monp_byname.thousands_sep();\n-  string g2 = monp_byname.grouping();\n-  string cs2 = monp_byname.curr_symbol();\n-  string ps2 = monp_byname.positive_sign();\n-  string ns2 = monp_byname.negative_sign();\n-  int fd2 = monp_byname.frac_digits();\n-  pattern pos2 = monp_byname.pos_format();\n-  pattern neg2 = monp_byname.neg_format();\n-\n-  VERIFY( dp1 == dp2 );\n-  VERIFY( th1 == th2 );\n-  VERIFY( g1 == g2 );\n-  VERIFY( cs1 == cs2 );\n-  VERIFY( ps1 == ps2 );\n-  VERIFY( ns1 == ns2 );\n-  VERIFY( fd1 == fd2 );\n-  VERIFY(static_cast<part>(pos1.field[0]) == static_cast<part>(pos2.field[0]));\n-  VERIFY(static_cast<part>(pos1.field[1]) == static_cast<part>(pos2.field[1]));\n-  VERIFY(static_cast<part>(pos1.field[2]) == static_cast<part>(pos2.field[2]));\n-  VERIFY(static_cast<part>(pos1.field[3]) == static_cast<part>(pos2.field[3]));\n-\n-  VERIFY(static_cast<part>(neg1.field[0]) == static_cast<part>(neg2.field[0]));\n-  VERIFY(static_cast<part>(neg1.field[1]) == static_cast<part>(neg2.field[1]));\n-  VERIFY(static_cast<part>(neg1.field[2]) == static_cast<part>(neg2.field[2]));\n-  VERIFY(static_cast<part>(neg1.field[3]) == static_cast<part>(neg2.field[3]));\n-\n-  // ...and don't match \"C\"\n-  char dp3 = monp_c.decimal_point();\n-  VERIFY( dp1 != dp3 );\n+  // Check for required base class.\n+  typedef std::moneypunct_byname<char, true> test_type;\n+  typedef std::moneypunct<char, true> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n }\n \n int main()"}, {"sha": "2cdef4b1abc1385ebf6a8b82c72333d7ded7a706", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/named_equivalence.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Fnamed_equivalence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Fnamed_equivalence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Fnamed_equivalence.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,98 @@\n+// 2001-08-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.4 Template class moneypunct_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test __attribute__((unused)) = true;\n+  string str;\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  str = loc_de.name();\n+\n+  locale loc_byname(locale::classic(), new moneypunct_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  locale loc_c = locale::classic();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the moneypunct facets\n+  const moneypunct<char>& monp_c = use_facet<moneypunct<char> >(loc_c); \n+  const moneypunct<char>& monp_byname = \n+                                    use_facet<moneypunct<char> >(loc_byname); \n+  const moneypunct<char>& monp_de = use_facet<moneypunct<char> >(loc_de); \n+\n+  // sanity check that the data match\n+  char dp1 = monp_de.decimal_point();\n+  char th1 = monp_de.thousands_sep();\n+  string g1 = monp_de.grouping();\n+  string cs1 = monp_de.curr_symbol();\n+  string ps1 = monp_de.positive_sign();\n+  string ns1 = monp_de.negative_sign();\n+  int fd1 = monp_de.frac_digits();\n+  pattern pos1 = monp_de.pos_format();\n+  pattern neg1 = monp_de.neg_format();\n+\n+  char dp2 = monp_byname.decimal_point();\n+  char th2 = monp_byname.thousands_sep();\n+  string g2 = monp_byname.grouping();\n+  string cs2 = monp_byname.curr_symbol();\n+  string ps2 = monp_byname.positive_sign();\n+  string ns2 = monp_byname.negative_sign();\n+  int fd2 = monp_byname.frac_digits();\n+  pattern pos2 = monp_byname.pos_format();\n+  pattern neg2 = monp_byname.neg_format();\n+\n+  VERIFY( dp1 == dp2 );\n+  VERIFY( th1 == th2 );\n+  VERIFY( g1 == g2 );\n+  VERIFY( cs1 == cs2 );\n+  VERIFY( ps1 == ps2 );\n+  VERIFY( ns1 == ns2 );\n+  VERIFY( fd1 == fd2 );\n+  VERIFY(static_cast<part>(pos1.field[0]) == static_cast<part>(pos2.field[0]));\n+  VERIFY(static_cast<part>(pos1.field[1]) == static_cast<part>(pos2.field[1]));\n+  VERIFY(static_cast<part>(pos1.field[2]) == static_cast<part>(pos2.field[2]));\n+  VERIFY(static_cast<part>(pos1.field[3]) == static_cast<part>(pos2.field[3]));\n+\n+  VERIFY(static_cast<part>(neg1.field[0]) == static_cast<part>(neg2.field[0]));\n+  VERIFY(static_cast<part>(neg1.field[1]) == static_cast<part>(neg2.field[1]));\n+  VERIFY(static_cast<part>(neg1.field[2]) == static_cast<part>(neg2.field[2]));\n+  VERIFY(static_cast<part>(neg1.field[3]) == static_cast<part>(neg2.field[3]));\n+\n+  // ...and don't match \"C\"\n+  char dp3 = monp_c.decimal_point();\n+  VERIFY( dp1 != dp3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9c2b6925bcc65ce61d711d1f9a2f78735ad5799a", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/1.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -30,6 +30,10 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n }\n \n int main()"}, {"sha": "57e7f3019845e92265a69b19036562bf97f7c446", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F3.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/2.cc"}, {"sha": "8167788cdd5918e867084bca13790fb16200eda1", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/1.cc", "status": "modified", "additions": 13, "deletions": 46, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -1,6 +1,7 @@\n-// 2001-01-24 Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2003  Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,55 +19,21 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.3.2 Template class numpunct_byname\n+// 22.2.3  The numeric punctuation facet\n \n #include <locale>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n-  using namespace std;\n-  \n-  bool test __attribute__((unused)) = true;\n-  string str;\n-\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n-  str = loc_de.name();\n-\n-  locale loc_byname(locale::classic(), new numpunct_byname<char>(\"de_DE\"));\n-  str = loc_byname.name();\n-\n-  locale loc_c = locale::classic();\n-\n-  VERIFY( loc_de != loc_byname );\n-\n-  // cache the numpunct facets\n-  const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& nump_byname = use_facet<numpunct<char> >(loc_byname); \n-  const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n-\n-  // sanity check that the data match\n-  char dp1 = nump_byname.decimal_point();\n-  char th1 = nump_byname.thousands_sep();\n-  string g1 = nump_byname.grouping();\n-  string t1 = nump_byname.truename();\n-  string f1 = nump_byname.falsename();\n-\n-  char dp2 = nump_de.decimal_point();\n-  char th2 = nump_de.thousands_sep();\n-  string g2 = nump_de.grouping();\n-  string t2 = nump_de.truename();\n-  string f2 = nump_de.falsename();\n-\n-  VERIFY( dp1 == dp2 );\n-  VERIFY( th1 == th2 );\n-  VERIFY( g1 == g2 );\n-  VERIFY( t1 == t2 );\n-  VERIFY( f1 == f2 );\n-\n-  // ...and don't match \"C\"\n-  char dp3 = nump_c.decimal_point();\n-  VERIFY( dp1 != dp3 );\n+  // Check for required base class.\n+  typedef std::numpunct_byname<char> test_type;\n+  typedef std::numpunct<char> base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base __attribute__((unused)) = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n }\n \n int main()"}, {"sha": "171149ec76750ba49d11bfc00363d9f44d42ce8e", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/named_equivalence.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Fnamed_equivalence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5fe4734cb6840be45d8812bb529f9557bb870a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Fnamed_equivalence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Fnamed_equivalence.cc?ref=bf5fe4734cb6840be45d8812bb529f9557bb870a", "patch": "@@ -0,0 +1,76 @@\n+// 2001-01-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.3.2 Template class numpunct_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  \n+  bool test __attribute__((unused)) = true;\n+  string str;\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  str = loc_de.name();\n+\n+  locale loc_byname(locale::classic(), new numpunct_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  locale loc_c = locale::classic();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& nump_byname = use_facet<numpunct<char> >(loc_byname); \n+  const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n+\n+  // sanity check that the data match\n+  char dp1 = nump_byname.decimal_point();\n+  char th1 = nump_byname.thousands_sep();\n+  string g1 = nump_byname.grouping();\n+  string t1 = nump_byname.truename();\n+  string f1 = nump_byname.falsename();\n+\n+  char dp2 = nump_de.decimal_point();\n+  char th2 = nump_de.thousands_sep();\n+  string g2 = nump_de.grouping();\n+  string t2 = nump_de.truename();\n+  string f2 = nump_de.falsename();\n+\n+  VERIFY( dp1 == dp2 );\n+  VERIFY( th1 == th2 );\n+  VERIFY( g1 == g2 );\n+  VERIFY( t1 == t2 );\n+  VERIFY( f1 == f2 );\n+\n+  // ...and don't match \"C\"\n+  char dp3 = nump_c.decimal_point();\n+  VERIFY( dp1 != dp3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}