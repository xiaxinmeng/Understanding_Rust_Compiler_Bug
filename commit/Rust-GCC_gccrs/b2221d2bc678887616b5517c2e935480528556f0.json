{"sha": "b2221d2bc678887616b5517c2e935480528556f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyMjFkMmJjNjc4ODg3NjE2YjU1MTdjMmU5MzU0ODA1Mjg1NTZmMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-07-10T21:08:04Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-07-10T21:08:04Z"}, "message": "cp-tree.h (cp_operator_id, [...]): Document.\n\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (cp_operator_id, cp_assignment_operator_id): Document.\n\nFrom-SVN: r250105", "tree": {"sha": "d61dc35b728598ea412e3bde0b0f779e7d35b815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61dc35b728598ea412e3bde0b0f779e7d35b815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2221d2bc678887616b5517c2e935480528556f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2221d2bc678887616b5517c2e935480528556f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2221d2bc678887616b5517c2e935480528556f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2221d2bc678887616b5517c2e935480528556f0/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "281ac396d1715da56e1098032de9d0b747fcace9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281ac396d1715da56e1098032de9d0b747fcace9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281ac396d1715da56e1098032de9d0b747fcace9"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "56c2448833f539bdc0a19a471a7710e1264a2a4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2221d2bc678887616b5517c2e935480528556f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2221d2bc678887616b5517c2e935480528556f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2221d2bc678887616b5517c2e935480528556f0", "patch": "@@ -1,3 +1,7 @@\n+2017-07-10  Martin Sebor  <msebor@redhat.com>\n+\n+\t* cp-tree.h (cp_operator_id, cp_assignment_operator_id): Document.\n+\n 2017-07-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81204 - parse error with dependent template-name"}, {"sha": "b58cfcecc6e417f801723b7e3a504ece1ba0abd4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2221d2bc678887616b5517c2e935480528556f0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2221d2bc678887616b5517c2e935480528556f0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2221d2bc678887616b5517c2e935480528556f0", "patch": "@@ -206,8 +206,19 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* std::align_val_t */\n #define align_type_node\t\t\tcp_global_trees[CPTI_ALIGN_TYPE]\n \n-/* We cache these tree nodes so as to call get_identifier less\n-   frequently.  */\n+/* We cache these tree nodes so as to call get_identifier less frequently.\n+   For identifiers for functions, including special member functions such\n+   as ctors and assignment operators, the nodes can be used (among other\n+   things) to iterate over their overloads defined by/for a type.  For\n+   example:\n+\n+     tree ovlid = cp_assignment_operator_id (NOP_EXPR);\n+     tree overloads = lookup_fnfields_slot (type, ovlid);\n+     for (ovl_iterator it (overloads); it; ++it) { ... }\n+\n+   iterates over the set of implicitly and explicitly defined overloads\n+   of the assignment operator for type (including the copy and move\n+   assignment operators, whether deleted or not).  */\n \n /* The name of a constructor that takes an in-charge parameter to\n    decide whether or not to construct virtual base classes.  */\n@@ -228,6 +239,18 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* The name of a destructor that destroys virtual base classes, and\n    then deletes the entire object.  */\n #define deleting_dtor_identifier\tcp_global_trees[CPTI_DELETING_DTOR_IDENTIFIER]\n+\n+/* The name of the identifier used internally to represent operator CODE.  */\n+#define cp_operator_id(CODE) \\\n+  (operator_name_info[(int) (CODE)].identifier)\n+\n+/* The name of the identifier used to represent assignment operator CODE,\n+   both simple (i.e., operator= with CODE == NOP_EXPR) and compound (e.g.,\n+   operator+= with CODE == PLUS_EXPR).  Includes copy and move assignment.\n+   Use copy_fn_p() to test specifically for copy assignment.  */\n+#define cp_assignment_operator_id(CODE)\t\t\t\t\\\n+  (assignment_operator_name_info[(int) (CODE)].identifier)\n+\n #define delta_identifier\t\tcp_global_trees[CPTI_DELTA_IDENTIFIER]\n #define in_charge_identifier\t\tcp_global_trees[CPTI_IN_CHARGE_IDENTIFIER]\n /* The name of the parameter that contains a pointer to the VTT to use\n@@ -1768,11 +1791,6 @@ struct GTY(()) language_function {\n #define current_function_auto_return_pattern \\\n   (cp_function_chain->x_auto_return_pattern)\n \n-#define cp_operator_id(CODE) \\\n-  (operator_name_info[(int) (CODE)].identifier)\n-#define cp_assignment_operator_id(CODE) \\\n-  (assignment_operator_name_info[(int) (CODE)].identifier)\n-\n /* In parser.c.  */\n extern tree cp_literal_operator_id (const char *);\n "}]}