{"sha": "dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhNmVjYWVhOGJlNmYwZGQ0YTNiN2NhNTQ5ODY5ODcwMmEzMmVjZg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-01-25T20:32:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-01-25T20:32:57Z"}, "message": "re PR lto/51698 ([trans-mem] TM runtime and application with LTO)\n\n        PR lto/51698\n        * builtin-types.def: (BT_CONST_DOUBLE_PTR): New.\n        (BT_FN_VOID_PTR_CONST_PTR_SIZE): New.\n        (BT_FN_VOID_PTR_INT_SIZE): New.\n        (BT_FN_UINT_UINT_VAR): Remove.\n        (BT_FN_UINT32_UINT32_VAR): New.\n        (BT_FN_DOUBLE_VPTR): Remove.\n        (BT_FN_DOUBLE_CONST_DOUBLE_PTR): New.\n        * gtm-builtins.def (_ITM_abortTransaction): Set return type to\n        void.\n        (_ITM_changeTransactionMode): Same.\n        (_ITM_memmoveRtWt): Change return type to void.\n        (_ITM_memcpyRtWt): Same.\n        (_ITM_memsetW): Same.\n        (_ITM_RaRD): Change types to double.\n        (_ITM_RD): Same.\n        (_ITM_RaWD): Same.\n        (_ITM_RfWD): Same.\n        * builtins.def (DEF_TM_BUILTIN): Set BOTH_P to true.\ntestsuite/\n        PR lto/51698\n        * gcc.dg/lto/trans-mem-4_0.c: New.\n        * gcc.dg/lto/trans-mem-4_1.c: New.\n        * gcc.dg/lto/trans-mem-2_0.c: Provide correct argument types for\n        TM builtins.\n        * gcc.dg/lto/trans-mem-1_0.c: Require stdint_types.\n        * gcc.dg/lto/trans-mem-1_1.c: Provide correct argument types for\n        TM builtins.\n        * gcc.dg/lto/trans-mem-3_0.c: Require stdint_types.\n        * gcc.dg/lto/trans-mem-3_1.c: Provide correct argument types for\n        TM builtins.\n\nFrom-SVN: r183537", "tree": {"sha": "cb6bef74675c93b0a3d09cce2920aed03d5a155f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6bef74675c93b0a3d09cce2920aed03d5a155f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21ae439c983250880d3549e89015eea76c7bdbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ae439c983250880d3549e89015eea76c7bdbc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ae439c983250880d3549e89015eea76c7bdbc4"}], "stats": {"total": 154, "additions": 116, "deletions": 38}, "files": [{"sha": "a044b132eabb3941563251c2be61589cd8431836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -164,6 +164,30 @@\n \t* config/arm/arm.c (neon_split_vcombine): Emit deleted note\n \tto effect no-op split.\n \n+2012-01-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR lto/51698\n+\t* builtin-types.def: (BT_CONST_DOUBLE_PTR): New.\n+\t(BT_FN_VOID_PTR_CONST_PTR_SIZE): New.\n+\t(BT_FN_VOID_PTR_INT_SIZE): New.\n+\t(BT_FN_UINT_UINT_VAR): Remove.\n+\t(BT_FN_UINT32_UINT32_VAR): New.\n+\t(BT_FN_DOUBLE_VPTR): Remove.\n+\t(BT_FN_DOUBLE_CONST_DOUBLE_PTR): New.\n+\n+\t* gtm-builtins.def (_ITM_abortTransaction): Set return type to\n+\tvoid.\n+\t(_ITM_changeTransactionMode): Same.\n+\t(_ITM_memmoveRtWt): Change return type to void.\n+\t(_ITM_memcpyRtWt): Same.\n+\t(_ITM_memsetW): Same.\n+\t(_ITM_RaRD): Change types to double.\n+\t(_ITM_RD): Same.\n+\t(_ITM_RaWD): Same.\n+\t(_ITM_RfWD): Same.\n+\n+\t* builtins.def (DEF_TM_BUILTIN): Set BOTH_P to true.\n+\n 2012-01-24  Aldy Hernandez  <aldyh@redhat.com>\n \t    Patrick Marlier  <patrick.marlier@gmail.com>\n "}, {"sha": "fd37c2ca83ae3d030235d97376efc756fb5b9000", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -103,6 +103,10 @@ DEF_PRIMITIVE_TYPE (BT_PTRMODE, (*lang_hooks.types.type_for_mode)(ptr_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_INT_PTR, integer_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_FLOAT_PTR, float_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE_PTR, double_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_CONST_DOUBLE_PTR,\n+\t\t    build_pointer_type\n+\t\t     (build_qualified_type (double_type_node,\n+\t\t     \t\t\t    TYPE_QUAL_CONST)))\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE_PTR, long_double_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_PID, pid_type_node)\n DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n@@ -342,10 +346,14 @@ DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_CONST_STRING_SIZE,\n \t\t     BT_INT, BT_CONST_STRING, BT_CONST_STRING, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_CONST_PTR_SIZE,\n \t\t     BT_PTR, BT_PTR, BT_CONST_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_CONST_PTR_SIZE,\n+\t\t     BT_VOID, BT_PTR, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t\t     BT_INT, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_INT_SIZE,\n \t\t     BT_PTR, BT_PTR, BT_INT, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_INT_SIZE,\n+\t\t     BT_VOID, BT_PTR, BT_INT, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_INT_INT,\n \t\t     BT_VOID, BT_PTR, BT_INT, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_CONST_PTR_PTR_SIZE,\n@@ -498,8 +506,8 @@ DEF_FUNCTION_TYPE_VAR_1 (BT_FN_VOID_CONST_PTR_VAR,\n \t\t\t BT_VOID, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_CONST_STRING)\n-DEF_FUNCTION_TYPE_VAR_1 (BT_FN_UINT_UINT_VAR,\n-\t\t\t BT_UINT, BT_UINT)\n+DEF_FUNCTION_TYPE_VAR_1 (BT_FN_UINT32_UINT32_VAR,\n+\t\t\t BT_UINT32, BT_UINT32)\n \n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_FILEPTR_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_FILEPTR, BT_CONST_STRING)\n@@ -539,7 +547,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_I2_VPTR, BT_I2, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_I4_VPTR, BT_I4, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_I8_VPTR, BT_I8, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_VPTR, BT_FLOAT, BT_VOLATILE_PTR)\n-DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_VPTR, BT_DOUBLE, BT_VOLATILE_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_CONST_DOUBLE_PTR, BT_DOUBLE, BT_DOUBLE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_LDOUBLE_VPTR, BT_LONGDOUBLE, BT_VOLATILE_PTR)\n \n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_VPTR_I1, BT_VOID, BT_VOLATILE_PTR, BT_I1)"}, {"sha": "0fb92860933e2afafb192521cc785024ffcbc08d", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -147,7 +147,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEF_TM_BUILTIN\n #define DEF_TM_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n-\t       false, true, true, ATTRS, false, flag_tm)\n+\t       true, true, true, ATTRS, false, flag_tm)\n \n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for"}, {"sha": "171019ef7d07ed0c12266e54516706d252872fe3", "filename": "gcc/gtm-builtins.def", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fgtm-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Fgtm-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgtm-builtins.def?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,21 +1,21 @@\n DEF_TM_BUILTIN (BUILT_IN_TM_START, \"_ITM_beginTransaction\",\n-\t\tBT_FN_UINT_UINT_VAR, ATTR_TM_NOTHROW_RT_LIST)\n+\t\tBT_FN_UINT32_UINT32_VAR, ATTR_TM_NOTHROW_RT_LIST)\n \n DEF_TM_BUILTIN (BUILT_IN_TM_COMMIT, \"_ITM_commitTransaction\",\n \t\tBT_FN_VOID, ATTR_TM_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_COMMIT_EH, \"_ITM_commitTransactionEH\",\n \t\tBT_FN_VOID_PTR, ATTR_TM_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_ABORT, \"_ITM_abortTransaction\",\n-\t\tBT_FN_INT, ATTR_TM_NORETURN_NOTHROW_LIST)\n+\t\tBT_FN_VOID_INT, ATTR_TM_NORETURN_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_IRREVOCABLE, \"_ITM_changeTransactionMode\",\n-\t\tBT_FN_INT_INT, ATTR_TM_NOTHROW_LIST)\n+\t\tBT_FN_VOID_INT, ATTR_TM_NOTHROW_LIST)\n \n DEF_TM_BUILTIN (BUILT_IN_TM_MEMCPY, \"_ITM_memcpyRtWt\",\n-\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_VOID_PTR_CONST_PTR_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_MEMMOVE, \"_ITM_memmoveRtWt\",\n-\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_VOID_PTR_CONST_PTR_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_MEMSET, \"_ITM_memsetW\",\n-\t       \tBT_FN_PTR_PTR_INT_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n+\t       \tBT_FN_VOID_PTR_INT_SIZE, ATTR_TM_TMPURE_NOTHROW_LIST)\n \n DEF_TM_BUILTIN (BUILT_IN_TM_GETTMCLONE_IRR, \"_ITM_getTMCloneOrIrrevocable\",\n \t\tBT_FN_PTR_PTR, ATTR_TM_CONST_NOTHROW_LIST)\n@@ -172,13 +172,13 @@ DEF_TM_BUILTIN (BUILT_IN_TM_LOAD_RFW_FLOAT, \"_ITM_RfWF\",\n \t\tBT_FN_FLOAT_VPTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n \n DEF_TM_BUILTIN (BUILT_IN_TM_LOAD_DOUBLE, \"_ITM_RD\",\n-\t\tBT_FN_DOUBLE_VPTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_DOUBLE_CONST_DOUBLE_PTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_LOAD_RAR_DOUBLE, \"_ITM_RaRD\",\n-\t\tBT_FN_FLOAT_VPTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_DOUBLE_CONST_DOUBLE_PTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_LOAD_RAW_DOUBLE, \"_ITM_RaWD\",\n-\t\tBT_FN_FLOAT_VPTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_DOUBLE_CONST_DOUBLE_PTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n DEF_TM_BUILTIN (BUILT_IN_TM_LOAD_RFW_DOUBLE, \"_ITM_RfWD\",\n-\t\tBT_FN_FLOAT_VPTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n+\t\tBT_FN_DOUBLE_CONST_DOUBLE_PTR, ATTR_TM_PURE_TMPURE_NOTHROW_LIST)\n \n /* These stubs should get defined in the backend if applicable.  */\n DEF_BUILTIN_STUB (BUILT_IN_TM_LOAD_M64, \"__builtin__ITM_RM64\")"}, {"sha": "60e392b3341467cb405d76cae74a481b1f0cf62d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,3 +1,17 @@\n+2012-01-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR lto/51698\n+\t* gcc.dg/lto/trans-mem-4_0.c: New.\n+\t* gcc.dg/lto/trans-mem-4_1.c: New.\n+\t* gcc.dg/lto/trans-mem-2_0.c: Provide correct argument types for\n+\tTM builtins.\n+\t* gcc.dg/lto/trans-mem-1_0.c: Require stdint_types.\n+\t* gcc.dg/lto/trans-mem-1_1.c: Provide correct argument types for\n+\tTM builtins.\n+\t* gcc.dg/lto/trans-mem-3_0.c: Require stdint_types.\n+\t* gcc.dg/lto/trans-mem-3_1.c: Provide correct argument types for\n+\tTM builtins.\n+\n 2012-01-25    Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.target/avr/torture/int24-mul.c: Rename __pgm to __flash."}, {"sha": "556c99bbe6c0a271f4a79ff5dcfea79084928ae3", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-1_0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_0.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,5 +1,6 @@\n /* { dg-lto-options {{-flto -fgnu-tm}} } */\n /* { dg-lto-do link } */\n+/* { dg-require-effective-target stdint_types } */\n \n int i;\n "}, {"sha": "6dba2527cd8857bb4a8d1aafc408084cbf612833", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-1_1.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-1_1.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,9 +1,10 @@\n-#define dummy(func) \\\n-  __attribute__((noinline,noclone,used)) void func() { asm (\"\"); }\n+#include <stdint.h>\n \n-dummy(_ITM_beginTransaction)\n-dummy(_ITM_commitTransaction)\n-dummy(_ITM_WU4)\n-dummy(_ITM_WU8)\n-dummy(_ITM_registerTMCloneTable)\n-dummy(_ITM_deregisterTMCloneTable)\n+#define noinline __attribute__((noinline,noclone,used))\n+\n+noinline uint32_t _ITM_beginTransaction(uint32_t a, ...) { asm(\"\"); }\n+noinline void _ITM_commitTransaction (void) { asm(\"\"); }\n+noinline void _ITM_WU4 (void *a, uint32_t b) { asm(\"\"); }\n+noinline void _ITM_WU8 (void *a, uint64_t b) { asm(\"\"); }\n+noinline void _ITM_registerTMCloneTable (void) { asm(\"\"); }\n+noinline void _ITM_deregisterTMCloneTable (void) { asm(\"\"); }"}, {"sha": "b99c5bf95e93de2cade7c49db5e3b8078725750a", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-2_0.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-2_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-2_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-2_0.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,17 +1,19 @@\n /* { dg-lto-options {{-flto -fgnu-tm}} } */\n /* { dg-lto-do link } */\n+/* { dg-require-effective-target stdint_types } */\n+\n+#include <stdint.h>\n \n extern void foobar() __attribute__((transaction_callable));\n \n-#define dummy(func) \\\n-  __attribute__((noinline,noclone,used)) void func() { asm (\"\"); }\n+#define noinline __attribute__((noinline,noclone,used))\n \n-dummy(_ITM_beginTransaction)\n-dummy(_ITM_commitTransaction)\n-dummy(_ITM_WU4)\n-dummy(_ITM_WU8)\n-dummy(_ITM_registerTMCloneTable)\n-dummy(_ITM_deregisterTMCloneTable)\n+noinline uint32_t _ITM_beginTransaction(uint32_t a, ...) { asm(\"\"); }\n+noinline void _ITM_commitTransaction (void) { asm(\"\"); }\n+noinline void _ITM_WU4 (void *a, uint32_t b) { asm(\"\"); }\n+noinline void _ITM_WU8 (void *a, uint64_t b) { asm(\"\"); }\n+noinline void _ITM_registerTMCloneTable (void) { asm(\"\"); }\n+noinline void _ITM_deregisterTMCloneTable (void) { asm(\"\"); }\n \n main()\n {"}, {"sha": "8a5ca75c04329ab1aa70bba4b7047cb217070d3a", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-3_0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_0.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,5 +1,6 @@\n /* { dg-lto-options {{-flto}} } */\n /* { dg-lto-do link } */\n+/* { dg-require-effective-target stdint_types } */\n \n /* Test that we can build one object file with -fgnu-tm\n    (trans-mem-3_1.c), but do the final link of all objects without"}, {"sha": "6373ecc12ac955c1d9f4a6303076fa7468781537", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-3_1.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-3_1.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,18 +1,19 @@\n /* { dg-options \"-fgnu-tm\" } */\n \n+#include <stdint.h>\n+\n extern int i;\n \n main()\n {\n   __transaction_atomic { i = 0; }\n }\n \n-#define dummy(func)\t\t\t\t\t\t\t\\\n-  __attribute__((noinline,noclone,used)) void func() { asm (\"\"); }\n+#define noinline __attribute__((noinline,noclone,used))\n \n-dummy(_ITM_beginTransaction)\n-dummy(_ITM_commitTransaction)\n-dummy(_ITM_WU4)\n-dummy(_ITM_WU8)\n-dummy(_ITM_registerTMCloneTable)\n-dummy(_ITM_deregisterTMCloneTable)\n+noinline uint32_t _ITM_beginTransaction(uint32_t a, ...) { asm(\"\"); }\n+noinline void _ITM_commitTransaction (void) { asm(\"\"); }\n+noinline void _ITM_WU4 (void *a, uint32_t b) { asm(\"\"); }\n+noinline void _ITM_WU8 (void *a, uint64_t b) { asm(\"\"); }\n+noinline void _ITM_registerTMCloneTable (void) { asm(\"\"); }\n+noinline void _ITM_deregisterTMCloneTable (void) { asm(\"\"); }"}, {"sha": "16332ee059d5e0d3a0e4da4205e8fda86a54e661", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-4_0.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_0.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-lto-options {{-flto -fgnu-tm}} } */\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target stdint_types } */\n+\n+extern void foo() __attribute__((transaction_safe));\n+\n+int main()\n+{\n+  __transaction_atomic {\n+      foo();\n+  }\n+}"}, {"sha": "a377e666605b583d5bfd499a7b614a4b3271d84c", "filename": "gcc/testsuite/gcc.dg/lto/trans-mem-4_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftrans-mem-4_1.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -0,0 +1,14 @@\n+#include <stdint.h>\n+\n+__attribute__((transaction_safe))\n+void foo() \n+{\n+}\n+\n+uint32_t _ITM_beginTransaction(uint32_t prop, ...)\n+{\n+}\n+\n+void __builtin__ITM_commitTransaction (void)\n+{\n+}"}]}