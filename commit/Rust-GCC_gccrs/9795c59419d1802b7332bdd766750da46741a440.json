{"sha": "9795c59419d1802b7332bdd766750da46741a440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5NWM1OTQxOWQxODAyYjczMzJiZGQ3NjY3NTBkYTQ2NzQxYTQ0MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-09-11T20:12:24Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-09-11T20:12:24Z"}, "message": "re PR fortran/35831 ([F95] Shape mismatch check missing for dummy procedure argument)\n\n2011-09-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/35831\n\tPR fortran/47978\n\t* interface.c (check_dummy_characteristics): New function to check the\n\tcharacteristics of dummy arguments.\n\t(gfc_compare_interfaces,gfc_check_typebound_override): Call it here.\n\n\n2011-09-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/35831\n\tPR fortran/47978\n\t* gfortran.dg/dynamic_dispatch_5.f03: Fix invalid test case.\n\t* gfortran.dg/proc_decl_26.f90: New.\n\t* gfortran.dg/typebound_override_2.f90: New.\n\t* gfortran.dg/typebound_proc_6.f03: Changed wording in error message.\n\nFrom-SVN: r178767", "tree": {"sha": "8ef05aa37e1c9b903e8521f91a239a1c29bb4eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef05aa37e1c9b903e8521f91a239a1c29bb4eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9795c59419d1802b7332bdd766750da46741a440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9795c59419d1802b7332bdd766750da46741a440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9795c59419d1802b7332bdd766750da46741a440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9795c59419d1802b7332bdd766750da46741a440/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e169899559dd04cbde3bf6e0599720e6918a461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e169899559dd04cbde3bf6e0599720e6918a461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e169899559dd04cbde3bf6e0599720e6918a461"}], "stats": {"total": 251, "additions": 216, "deletions": 35}, "files": [{"sha": "96af79e04f87dad829c1258ed499d664f9c902c5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -1,3 +1,11 @@\n+2011-09-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/35831\n+\tPR fortran/47978\n+\t* interface.c (check_dummy_characteristics): New function to check the\n+\tcharacteristics of dummy arguments.\n+\t(gfc_compare_interfaces,gfc_check_typebound_override): Call it here.\n+\n 2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans-array.c (gfc_trans_constant_array_constructor): Remove"}, {"sha": "a9b3d7027274b0f465aa9bcec6b327e5daec46e7", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 127, "deletions": 32, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -977,6 +977,113 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n }\n \n \n+/* Check if the characteristics of two dummy arguments match,\n+   cf. F08:12.3.2.  */\n+\n+static gfc_try\n+check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n+\t\t\t     bool type_must_agree, char *errmsg, int err_len)\n+{\n+  /* Check type and rank.  */\n+  if (type_must_agree && !compare_type_rank (s2, s1))\n+    {\n+      if (errmsg != NULL)\n+\tsnprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n+\t\t  s1->name);\n+      return FAILURE;\n+    }\n+\n+  /* Check INTENT.  */\n+  if (s1->attr.intent != s2->attr.intent)\n+    {\n+      snprintf (errmsg, err_len, \"INTENT mismatch in argument '%s'\",\n+\t\ts1->name);\n+      return FAILURE;\n+    }\n+\n+  /* Check OPTIONAL attribute.  */\n+  if (s1->attr.optional != s2->attr.optional)\n+    {\n+      snprintf (errmsg, err_len, \"OPTIONAL mismatch in argument '%s'\",\n+\t\ts1->name);\n+      return FAILURE;\n+    }\n+\n+  /* Check ALLOCATABLE attribute.  */\n+  if (s1->attr.allocatable != s2->attr.allocatable)\n+    {\n+      snprintf (errmsg, err_len, \"ALLOCATABLE mismatch in argument '%s'\",\n+\t\ts1->name);\n+      return FAILURE;\n+    }\n+\n+  /* Check POINTER attribute.  */\n+  if (s1->attr.pointer != s2->attr.pointer)\n+    {\n+      snprintf (errmsg, err_len, \"POINTER mismatch in argument '%s'\",\n+\t\ts1->name);\n+      return FAILURE;\n+    }\n+\n+  /* Check TARGET attribute.  */\n+  if (s1->attr.target != s2->attr.target)\n+    {\n+      snprintf (errmsg, err_len, \"TARGET mismatch in argument '%s'\",\n+\t\ts1->name);\n+      return FAILURE;\n+    }\n+\n+  /* FIXME: Do more comprehensive testing of attributes, like e.g.\n+\t    ASYNCHRONOUS, CONTIGUOUS, VALUE, VOLATILE, etc.  */\n+\n+  /* Check string length.  */\n+  if (s1->ts.type == BT_CHARACTER\n+      && s1->ts.u.cl && s1->ts.u.cl->length\n+      && s2->ts.u.cl && s2->ts.u.cl->length)\n+    {\n+      int compval = gfc_dep_compare_expr (s1->ts.u.cl->length,\n+\t\t\t\t\t  s2->ts.u.cl->length);\n+      switch (compval)\n+      {\n+\tcase -1:\n+\tcase  1:\n+\tcase -3:\n+\t  snprintf (errmsg, err_len, \"Character length mismatch \"\n+\t\t    \"in argument '%s'\", s1->name);\n+\t  return FAILURE;\n+\n+\tcase -2:\n+\t  /* FIXME: Implement a warning for this case.\n+\t  gfc_warning (\"Possible character length mismatch in argument '%s'\",\n+\t\t       s1->name);*/\n+\t  break;\n+\n+\tcase 0:\n+\t  break;\n+\n+\tdefault:\n+\t  gfc_internal_error (\"check_dummy_characteristics: Unexpected result \"\n+\t\t\t      \"%i of gfc_dep_compare_expr\", compval);\n+\t  break;\n+      }\n+    }\n+\n+  /* Check array shape.  */\n+  if (s1->as && s2->as)\n+    {\n+      if (s1->as->type != s2->as->type)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Shape mismatch in argument '%s'\",\n+\t\t    s1->name);\n+\t  return FAILURE;\n+\t}\n+      /* FIXME: Check exact shape.  */\n+    }\n+    \n+  return SUCCESS;\n+}\n+\n+\n /* 'Compare' two formal interfaces associated with a pair of symbols.\n    We return nonzero if there exists an actual argument list that\n    would be ambiguous between the two interfaces, zero otherwise.\n@@ -1059,31 +1166,22 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t    return 0;\n \t  }\n \n-\t/* Check type and rank.  */\n-\tif (!compare_type_rank (f2->sym, f1->sym))\n+\tif (intent_flag)\n \t  {\n+\t    /* Check all characteristics.  */\n+\t    if (check_dummy_characteristics (f1->sym, f2->sym,\n+\t\t\t\t\t     true, errmsg, err_len) == FAILURE)\n+\t      return 0;\n+\t  }\n+\telse if (!compare_type_rank (f2->sym, f1->sym))\n+\t  {\n+\t    /* Only check type and rank.  */\n \t    if (errmsg != NULL)\n \t      snprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n \t\t\tf1->sym->name);\n \t    return 0;\n \t  }\n \n-\t/* Check INTENT.  */\n-\tif (intent_flag && (f1->sym->attr.intent != f2->sym->attr.intent))\n-\t  {\n-\t    snprintf (errmsg, err_len, \"INTENT mismatch in argument '%s'\",\n-\t\t      f1->sym->name);\n-\t    return 0;\n-\t  }\n-\n-\t/* Check OPTIONAL.  */\n-\tif (intent_flag && (f1->sym->attr.optional != f2->sym->attr.optional))\n-\t  {\n-\t    snprintf (errmsg, err_len, \"OPTIONAL mismatch in argument '%s'\",\n-\t\t      f1->sym->name);\n-\t    return 0;\n-\t  }\n-\n \tf1 = f1->next;\n \tf2 = f2->next;\n       }\n@@ -3468,18 +3566,18 @@ gfc_free_formal_arglist (gfc_formal_arglist *p)\n }\n \n \n-/* Check that it is ok for the typebound procedure proc to override the\n-   procedure old.  */\n+/* Check that it is ok for the type-bound procedure 'proc' to override the\n+   procedure 'old', cf. F08:4.5.7.3.  */\n \n gfc_try\n gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n {\n   locus where;\n-  const gfc_symbol* proc_target;\n-  const gfc_symbol* old_target;\n+  const gfc_symbol *proc_target, *old_target;\n   unsigned proc_pass_arg, old_pass_arg, argpos;\n-  gfc_formal_arglist* proc_formal;\n-  gfc_formal_arglist* old_formal;\n+  gfc_formal_arglist *proc_formal, *old_formal;\n+  bool check_type;\n+  char err[200];\n \n   /* This procedure should only be called for non-GENERIC proc.  */\n   gcc_assert (!proc->n.tb->is_generic);\n@@ -3637,15 +3735,12 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n \t  return FAILURE;\n \t}\n \n-      /* Check that the types correspond if neither is the passed-object\n-\t argument.  */\n-      /* FIXME:  Do more comprehensive testing here.  */\n-      if (proc_pass_arg != argpos && old_pass_arg != argpos\n-\t  && !gfc_compare_types (&proc_formal->sym->ts, &old_formal->sym->ts))\n+      check_type = proc_pass_arg != argpos && old_pass_arg != argpos;\n+      if (check_dummy_characteristics (proc_formal->sym, old_formal->sym,\n+\t\t\t\t       check_type, err, sizeof(err)) == FAILURE)\n \t{\n-\t  gfc_error (\"Types mismatch for dummy argument '%s' of '%s' %L \"\n-\t\t     \"in respect to the overridden procedure\",\n-\t\t     proc_formal->sym->name, proc->name, &where);\n+\t  gfc_error (\"Argument mismatch for the overriding procedure \"\n+\t\t     \"'%s' at %L: %s\", proc->name, &where, err);\n \t  return FAILURE;\n \t}\n "}, {"sha": "2a5096970bce9798a29e40592feadab77b98e54e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -1,3 +1,12 @@\n+2011-09-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/35831\n+\tPR fortran/47978\n+\t* gfortran.dg/dynamic_dispatch_5.f03: Fix invalid test case.\n+\t* gfortran.dg/proc_decl_26.f90: New.\n+\t* gfortran.dg/typebound_override_2.f90: New.\n+\t* gfortran.dg/typebound_proc_6.f03: Changed wording in error message.\n+\n 2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/cond_expr2.ad[sb]: New test."}, {"sha": "9cc16bc1c0973283573de2981dd14f04089dc98e", "filename": "gcc/testsuite/gfortran.dg/dynamic_dispatch_5.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_5.f03?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -56,7 +56,7 @@ module s_base_mat_mod\n contains \n   subroutine s_scals(d,a,info) \n     implicit none \n-    class(s_base_sparse_mat), intent(in) :: a\n+    class(s_base_sparse_mat), intent(inout) :: a\n     real(spk_), intent(in)      :: d\n     integer, intent(out)            :: info\n \n@@ -73,7 +73,7 @@ end subroutine s_scals\n \n   subroutine s_scal(d,a,info) \n     implicit none \n-    class(s_base_sparse_mat), intent(in) :: a\n+    class(s_base_sparse_mat), intent(inout) :: a\n     real(spk_), intent(in)      :: d(:)\n     integer, intent(out)            :: info\n "}, {"sha": "be983f8b022084406a5b8681554a7199b18add58", "filename": "gcc/testsuite/gfortran.dg/proc_decl_26.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_26.f90?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+!\n+! PR 35831: [F95] Shape mismatch check missing for dummy procedure argument\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+program test\n+\n+  implicit none\n+\n+  interface\n+    subroutine one(a)\n+      integer a(:)\n+    end subroutine\n+    subroutine two(a)\n+      integer a(2)\n+    end subroutine\n+  end interface\n+\n+  call foo(two)  ! { dg-error \"Shape mismatch in argument\" }\n+  call bar(two)  ! { dg-error \"Shape mismatch in argument\" }\n+\n+contains\n+\n+  subroutine foo(f1)\n+    procedure(one) :: f1\n+  end subroutine foo\n+\n+  subroutine bar(f2)\n+    interface\n+      subroutine f2(a)\n+        integer a(:)\n+      end subroutine\n+    end interface\n+  end subroutine bar\n+\n+end program "}, {"sha": "98146b68141c41aec3d692178ddf6df3f4cd1a1e", "filename": "gcc/testsuite/gfortran.dg/typebound_override_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_2.f90?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR 47978: [OOP] Invalid INTENT in overriding TBP not detected\n+!\n+! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+\n+module foo_mod\n+  type foo\n+  contains\n+    procedure, pass(f) :: bar => base_bar\n+  end type foo\n+contains \n+  subroutine base_bar(f,j)\n+    class(foo), intent(inout) :: f\n+    integer, intent(in)    :: j\n+  end subroutine base_bar\n+end module foo_mod\n+\n+module extfoo_mod\n+  use foo_mod\n+  type, extends(foo) :: extfoo\n+  contains\n+    procedure, pass(f) :: bar => ext_bar  ! { dg-error \"INTENT mismatch in argument\" }\n+  end type extfoo\n+contains \n+  subroutine ext_bar(f,j)\n+    class(extfoo), intent(inout) :: f\n+    integer, intent(inout) :: j\n+  end subroutine ext_bar\n+end module extfoo_mod \n+\n+! { dg-final { cleanup-modules \"foo_mod extfoo_mod\" } }"}, {"sha": "36dc9b1ca86eb2095e233f5ee346bbab90cac127", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_6.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9795c59419d1802b7332bdd766750da46741a440/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03?ref=9795c59419d1802b7332bdd766750da46741a440", "patch": "@@ -89,7 +89,7 @@ MODULE testmod\n     ! For corresponding dummy arguments.\n     PROCEDURE, PASS :: corresp1 => proc_tmeint ! Ok.\n     PROCEDURE, PASS :: corresp2 => proc_tmeintx ! { dg-error \"should be named 'a'\" }\n-    PROCEDURE, PASS :: corresp3 => proc_tmereal ! { dg-error \"Types mismatch for dummy argument 'a'\" }\n+    PROCEDURE, PASS :: corresp3 => proc_tmereal ! { dg-error \"Type/rank mismatch in argument 'a'\" }\n \n   END TYPE t\n "}]}