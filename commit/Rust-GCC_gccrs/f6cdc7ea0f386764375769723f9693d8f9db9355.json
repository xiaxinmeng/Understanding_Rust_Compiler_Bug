{"sha": "f6cdc7ea0f386764375769723f9693d8f9db9355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjZGM3ZWEwZjM4Njc2NDM3NTc2OTcyM2Y5NjkzZDhmOWRiOTM1NQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T08:03:05Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T08:03:05Z"}, "message": "(multilib.h, stmp-multilib, install-multilib): New targets.\n\n(gcc.o): Depend on multilib.h.\n(clean): Remove multilib.h and tmpmultilib*.\n\nFrom-SVN: r7490", "tree": {"sha": "486fbf1eab9f784404e6a1352d84fed39c9e7e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486fbf1eab9f784404e6a1352d84fed39c9e7e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6cdc7ea0f386764375769723f9693d8f9db9355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cdc7ea0f386764375769723f9693d8f9db9355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6cdc7ea0f386764375769723f9693d8f9db9355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cdc7ea0f386764375769723f9693d8f9db9355/comments", "author": null, "committer": null, "parents": [{"sha": "08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b28cd3a28cb9e95f14968cfd16f666e025c6a3"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "00c0a17d295f32fd9c508f32462e252c41f8aff3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6cdc7ea0f386764375769723f9693d8f9db9355/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6cdc7ea0f386764375769723f9693d8f9db9355/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f6cdc7ea0f386764375769723f9693d8f9db9355", "patch": "@@ -819,6 +819,50 @@ libgcc.a: $(LIBGCC1) $(LIBGCC2)\n # so that libgcc.a itself remains nonexistent if compilation is aborted.\n \tmv tmplibgcc.a libgcc.a\n \n+# Use the genmultilib shell script to generate the information the gcc\n+# driver program needs to select the library directory based on the\n+# switches.\n+multilib.h: $(srcdir)/genmultilib config.status\n+\t$(SHELL) $(srcdir)/genmultilib \"$(MULTILIB_OPTIONS)\" \\\n+\t  \"$(MULTILIB_DIRNAMES)\" \"$(MULTILIB_MATCHES)\" > multilib.h\n+\n+# Build multiple copies of libgcc.a, one for each target switch.\n+stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n+   $(LIB2FUNCS_EXTRA) machmode.h longlong.h gbl-ctors.h config.status\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n+\t  rm -f $${dir}/libgcc.a $(LIBGCC2); \\\n+\t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t    AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n+\t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t    LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS) $${flags}\" $(LIBGCC2); \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t  if [ x$(LIBGCC1) != xlibgcc1-asm.a ]; \\\n+\t  then true; \\\n+\t  else (rm -f $(LIBGCC1); \\\n+\t\t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t    \t  AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n+\t\t  HOST_PREFIX=\"$(HOST_PREFIX)\" \\\n+\t\t  HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t    \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS) $${flags}\" $(LIBGCC1) ) \\\n+\t  fi; \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t  rm -rf tmpcopy; \\\n+\t  mkdir tmpcopy; \\\n+\t  if [ x$(LIBGCC1) != x ]; \\\n+\t  then (cd tmpcopy; $(AR) x ../$(LIBGCC1)); \\\n+\t  else true; \\\n+\t  fi; \\\n+\t  (cd tmpcopy; $(AR) x ../$(LIBGCC2)); \\\n+\t  (cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *.o); \\\n+\t  rm -rf libgcc2.a tmpcopy; \\\n+\t  if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi; \\\n+\t  if [ -d $${dir} ]; then true; else mkdir $${dir}; fi; \\\n+\t  mv tmplibgcc.a $${dir}/libgcc.a; \\\n+\tdone\n+\ttouch stmp-multilib\n+\n objc-runtime: libobjc.a\n \n # Build the Objective C runtime library.\n@@ -924,7 +968,7 @@ c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n \n # Language-independent files.\n \n-gcc.o: gcc.c $(CONFIG_H) config.status\n+gcc.o: gcc.c $(CONFIG_H) multilib.h config.status\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   -DSTANDARD_STARTFILE_PREFIX=\\\"$(libdir)/\\\" \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc-lib/\\\" \\\n@@ -1726,6 +1770,7 @@ clean: mostlyclean bytecode.clean lang.clean\n # Delete the include directory.\n \t-rm -rf stmp-* include objc-headers\n \t-rm -f */stmp-*\n+\t-rm -f multilib.h tmpmultilib*\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -1901,6 +1946,18 @@ install-libgcc: libgcc.a install-dir\n \t  chmod a-x $(libsubdir)/libgcc.a; \\\n \telse true; fi\n \n+# Install multiple versions of libgcc.a.\n+install-multilib: stmp-multilib install-dir\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  if [ -d $(libsubdir)/$${dir} ]; then true; else mkdir $(libsubdir)/$${dir}; fi; \\\n+\t  rm -f $(libsubdir)/$${dir}/libgcc.a; \\\n+\t  $(INSTALL_DATA) $${dir}/libgcc.a $(libsubdir)/$${dir}/libgcc.a; \\\n+\t  if $(RANLIB_TEST); then \\\n+\t    (cd $(libsubdir)/$${dir}; $(RANLIB) libgcc.a); else true; fi; \\\n+\t  chmod a-x $(libsubdir)/$${dir}/libgcc.a; \\\n+\tdone\n+\n # Install the objc run time library.\n install-libobjc: libobjc.a install-dir\n \t-if [ -f libobjc.a ] ; then \\"}]}