{"sha": "a318e3acf8617f5bc13484b821431a02c65af200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxOGUzYWNmODYxN2Y1YmMxMzQ4NGI4MjE0MzFhMDJjNjVhZjIwMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-08-17T07:27:47Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-08-17T07:27:47Z"}, "message": "re PR tree-optimization/21574 (store_ccp doesn't see through a store.)\n\n\tPR tree-optimization/21574\n\t* tree-ssa-ccp.c (likely_value): If the right hand side is a\n\tconstant, return CONSTANT.\n\t(ccp_lattice_meet): Use operand_equal_p instead of simple_cst_equal.\n\t(ccp_fold, visit_assignment): Likewise.\n\t(evaluate_stmt): Handle UNDEFINED and UNKNOWN_VAL the same way.\n\nFrom-SVN: r103206", "tree": {"sha": "f3af9a3da3ad3d027544e4a1675247dac1d70538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3af9a3da3ad3d027544e4a1675247dac1d70538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a318e3acf8617f5bc13484b821431a02c65af200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a318e3acf8617f5bc13484b821431a02c65af200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a318e3acf8617f5bc13484b821431a02c65af200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a318e3acf8617f5bc13484b821431a02c65af200/comments", "author": null, "committer": null, "parents": [{"sha": "a7edd66b06ff2f0e6510e3d4c71564f4fd5d0cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7edd66b06ff2f0e6510e3d4c71564f4fd5d0cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7edd66b06ff2f0e6510e3d4c71564f4fd5d0cef"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "226422afa1fde79132c7734a3423323a22c7decd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a318e3acf8617f5bc13484b821431a02c65af200", "patch": "@@ -1,3 +1,12 @@\n+2005-08-17  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/21574\n+\t* tree-ssa-ccp.c (likely_value): If the right hand side is a\n+\tconstant, return CONSTANT.\n+\t(ccp_lattice_meet): Use operand_equal_p instead of simple_cst_equal.\n+\t(ccp_fold, visit_assignment): Likewise.\n+\t(evaluate_stmt): Handle UNDEFINED and UNKNOWN_VAL the same way.\n+\n 2005-08-16  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* c-typeck.c (build_function_call): Call fold_buildN_initializer or"}, {"sha": "e631fefb03a10ae23b9052e2fc0469416f4c0f6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a318e3acf8617f5bc13484b821431a02c65af200", "patch": "@@ -1,3 +1,8 @@\n+2005-08-17  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/21574\n+\t* gcc.dg/tree-ssa/pr21574.c: New test.\n+\n 2005-08-16  James E Wilson  <wilson@specifix.com>\n \n \t* gcc.dg/large-size-array.c (DIM): Use USHRT_MAX not USHORT_MAX."}, {"sha": "6e3a5fb2ec44ee87a0177f29f495b2ee341c09e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21574.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c?ref=a318e3acf8617f5bc13484b821431a02c65af200", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-store_ccp\" } */\n+\n+int\n+foo (int *p)\n+{\n+  *p = 0;\n+  return *p;\n+}\n+\n+/* The store to *p should be propagated to the return statement.  */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"store_ccp\" } } */\n+/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */"}, {"sha": "1ff15287345f370e960611989ffed523f0180007", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318e3acf8617f5bc13484b821431a02c65af200/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=a318e3acf8617f5bc13484b821431a02c65af200", "patch": "@@ -473,6 +473,9 @@ likely_value (tree stmt)\n       && TREE_CODE (stmt) != SWITCH_EXPR)\n     return VARYING;\n \n+  if (is_gimple_min_invariant (get_rhs (stmt)))\n+    return CONSTANT;\n+\n   found_constant = false;\n   FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE|SSA_OP_VUSE)\n     {\n@@ -658,7 +661,8 @@ ccp_lattice_meet (prop_value_t *val1, prop_value_t *val2)\n \t   && val2->lattice_val == CONSTANT\n \t   && simple_cst_equal (val1->value, val2->value) == 1\n \t   && (!do_store_ccp\n-\t       || simple_cst_equal (val1->mem_ref, val2->mem_ref) == 1))\n+\t       || (val1->mem_ref && val2->mem_ref\n+\t\t   && operand_equal_p (val1->mem_ref, val2->mem_ref, 0))))\n     {\n       /* Ci M Cj = Ci\t\tif (i == j)\n \t Ci M Cj = VARYING\tif (i != j)\n@@ -826,7 +830,8 @@ ccp_fold (tree stmt)\n       /* If the RHS is a memory load, see if the VUSEs associated with\n \t it are a valid constant for that memory load.  */\n       prop_value_t *val = get_value_loaded_by (stmt, const_val);\n-      if (val && simple_cst_equal (val->mem_ref, rhs) == 1)\n+      if (val && val->mem_ref\n+\t  && operand_equal_p (val->mem_ref, rhs, 0))\n \treturn val->value;\n       else\n \treturn NULL_TREE;\n@@ -1085,7 +1090,11 @@ evaluate_stmt (tree stmt)\n       /* The statement produced a nonconstant value.  If the statement\n \t had UNDEFINED operands, then the result of the statement\n \t should be UNDEFINED.  Otherwise, the statement is VARYING.  */\n-      val.lattice_val = (likelyvalue == UNDEFINED) ? UNDEFINED : VARYING;\n+      if (likelyvalue == UNDEFINED || likelyvalue == UNKNOWN_VAL)\n+\tval.lattice_val = likelyvalue;\n+      else\n+\tval.lattice_val = VARYING;\n+\n       val.value = NULL_TREE;\n     }\n \n@@ -1122,7 +1131,8 @@ visit_assignment (tree stmt, tree *output_p)\n \t we can propagate the value on the RHS.  */\n       prop_value_t *nval = get_value_loaded_by (stmt, const_val);\n \n-      if (nval && simple_cst_equal (nval->mem_ref, rhs) == 1)\n+      if (nval && nval->mem_ref\n+\t  && operand_equal_p (nval->mem_ref, rhs, 0))\n \tval = *nval;\n       else\n \tval = evaluate_stmt (stmt);"}]}