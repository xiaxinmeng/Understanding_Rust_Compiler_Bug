{"sha": "df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "node_id": "C_kwDOANBUbNoAKGRmM2UwZWMyMzJiODc4ZmIxZjIyMjhlNWY2ZWY2ZWMwODc0ZDE2NjU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T13:33:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T14:06:11Z"}, "message": "Add new TypeCheckContextItem to track current context\n\nFIXME", "tree": {"sha": "cef7cd4c5d43e2f61a314287c8182434fde47ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef7cd4c5d43e2f61a314287c8182434fde47ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3fc1983d6e322b2f85b0c81b77fbfc0a1c280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3fc1983d6e322b2f85b0c81b77fbfc0a1c280a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3fc1983d6e322b2f85b0c81b77fbfc0a1c280a"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "b2deb91045f332bdc1817ccb385e4c4257db2ad4", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -116,7 +116,7 @@ TraitItemReference::resolve_item (HIR::TraitItemFunc &func)\n   // need to get the return type from this\n   TyTy::FnType *resolved_fn_type = static_cast<TyTy::FnType *> (item_tyty);\n   auto expected_ret_tyty = resolved_fn_type->get_return_type ();\n-  context->push_return_type (expected_ret_tyty);\n+  context->push_return_type (TypeCheckContextItem (&func), expected_ret_tyty);\n \n   auto block_expr_ty\n     = TypeCheckExpr::Resolve (func.get_block_expr ().get (), false);"}, {"sha": "64853f5d013dc888276d27096ca125f39140538c", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -310,9 +310,10 @@ class TypeCheckImplItem : public TypeCheckBase\n public:\n   using Rust::Resolver::TypeCheckBase::visit;\n \n-  static void Resolve (HIR::ImplItem *item, TyTy::BaseType *self)\n+  static void Resolve (HIR::ImplBlock *parent, HIR::ImplItem *item,\n+\t\t       TyTy::BaseType *self)\n   {\n-    TypeCheckImplItem resolver (self);\n+    TypeCheckImplItem resolver (parent, self);\n     item->accept_vis (resolver);\n   }\n \n@@ -336,7 +337,8 @@ class TypeCheckImplItem : public TypeCheckBase\n     // need to get the return type from this\n     TyTy::FnType *resolve_fn_type = static_cast<TyTy::FnType *> (lookup);\n     auto expected_ret_tyty = resolve_fn_type->get_return_type ();\n-    context->push_return_type (expected_ret_tyty);\n+    context->push_return_type (TypeCheckContextItem (parent, &function),\n+\t\t\t       expected_ret_tyty);\n \n     auto block_expr_ty\n       = TypeCheckExpr::Resolve (function.get_definition ().get (), false);\n@@ -346,8 +348,11 @@ class TypeCheckImplItem : public TypeCheckBase\n   }\n \n protected:\n-  TypeCheckImplItem (TyTy::BaseType *self) : TypeCheckBase (), self (self) {}\n+  TypeCheckImplItem (HIR::ImplBlock *parent, TyTy::BaseType *self)\n+    : TypeCheckBase (), parent (parent), self (self)\n+  {}\n \n+  HIR::ImplBlock *parent;\n   TyTy::BaseType *self;\n };\n \n@@ -357,11 +362,12 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n \n public:\n   static const TraitItemReference &\n-  Resolve (HIR::ImplItem *item, TyTy::BaseType *self,\n+  Resolve (HIR::ImplBlock *parent, HIR::ImplItem *item, TyTy::BaseType *self,\n \t   TraitReference &trait_reference,\n \t   std::vector<TyTy::SubstitutionParamMapping> substitutions)\n   {\n-    TypeCheckImplItemWithTrait resolver (self, trait_reference, substitutions);\n+    TypeCheckImplItemWithTrait resolver (parent, self, trait_reference,\n+\t\t\t\t\t substitutions);\n     item->accept_vis (resolver);\n     return resolver.resolved_trait_item;\n   }\n@@ -514,9 +520,10 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n \n private:\n   TypeCheckImplItemWithTrait (\n-    TyTy::BaseType *self, TraitReference &trait_reference,\n+    HIR::ImplBlock *parent, TyTy::BaseType *self,\n+    TraitReference &trait_reference,\n     std::vector<TyTy::SubstitutionParamMapping> substitutions)\n-    : TypeCheckImplItem (self), trait_reference (trait_reference),\n+    : TypeCheckImplItem (parent, self), trait_reference (trait_reference),\n       resolved_trait_item (TraitItemReference::error_node ()),\n       substitutions (substitutions)\n   {"}, {"sha": "cc102dff63877533e5600392442b3d3e11f0256d", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -118,11 +118,12 @@ class TypeCheckItem : public TypeCheckBase\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n \tif (!is_trait_impl_block)\n-\t  TypeCheckImplItem::Resolve (impl_item.get (), self);\n+\t  TypeCheckImplItem::Resolve (&impl_block, impl_item.get (), self);\n \telse\n \t  {\n \t    auto &trait_item_ref\n-\t      = TypeCheckImplItemWithTrait::Resolve (impl_item.get (), self,\n+\t      = TypeCheckImplItemWithTrait::Resolve (&impl_block,\n+\t\t\t\t\t\t     impl_item.get (), self,\n \t\t\t\t\t\t     *trait_reference,\n \t\t\t\t\t\t     substitutions);\n \t    trait_item_refs.push_back (trait_item_ref);\n@@ -210,7 +211,8 @@ class TypeCheckItem : public TypeCheckBase\n     // need to get the return type from this\n     TyTy::FnType *resolved_fn_type = static_cast<TyTy::FnType *> (lookup);\n     auto expected_ret_tyty = resolved_fn_type->get_return_type ();\n-    context->push_return_type (expected_ret_tyty);\n+    context->push_return_type (TypeCheckContextItem (&function),\n+\t\t\t       expected_ret_tyty);\n \n     auto block_expr_ty\n       = TypeCheckExpr::Resolve (function.get_definition ().get (), false);"}, {"sha": "fb0e04758212c2d40631ad5ca7fe8c03f4e8ad4b", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -424,7 +424,8 @@ class TypeCheckStmt : public TypeCheckBase\n \n     TyTy::FnType *resolved_fn_type = fnType;\n     auto expected_ret_tyty = resolved_fn_type->get_return_type ();\n-    context->push_return_type (expected_ret_tyty);\n+    context->push_return_type (TypeCheckContextItem (&function),\n+\t\t\t       expected_ret_tyty);\n \n     auto block_expr_ty\n       = TypeCheckExpr::Resolve (function.get_definition ().get (), false);"}, {"sha": "b165f9cb041fb290d9601c91e83da7a73ced88c4", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -28,6 +28,68 @@\n namespace Rust {\n namespace Resolver {\n \n+class TypeCheckContextItem\n+{\n+public:\n+  enum ItemType\n+  {\n+    ITEM,\n+    IMPL_ITEM,\n+    TRAIT_ITEM,\n+  };\n+\n+  TypeCheckContextItem (HIR::Function *item)\n+    : type (ItemType::ITEM), item (item)\n+  {}\n+\n+  TypeCheckContextItem (HIR::ImplBlock *impl_block, HIR::Function *item)\n+    : type (ItemType::IMPL_ITEM), item (impl_block, item)\n+  {}\n+\n+  TypeCheckContextItem (HIR::TraitItemFunc *trait_item)\n+    : type (ItemType::TRAIT_ITEM), item (trait_item)\n+  {}\n+\n+  ItemType get_type () const { return type; }\n+\n+  HIR::Function *get_item ()\n+  {\n+    rust_assert (get_type () == ItemType::ITEM);\n+    return item.item;\n+  }\n+\n+  std::pair<HIR::ImplBlock *, HIR::Function *> &get_impl_item ()\n+  {\n+    rust_assert (get_type () == ItemType::IMPL_ITEM);\n+    return item.impl_item;\n+  };\n+\n+  HIR::TraitItemFunc *get_trait_item ()\n+  {\n+    rust_assert (get_type () == ItemType::TRAIT_ITEM);\n+    return item.trait_item;\n+  }\n+\n+private:\n+  union Item\n+  {\n+    HIR::Function *item;\n+    std::pair<HIR::ImplBlock *, HIR::Function *> impl_item;\n+    HIR::TraitItemFunc *trait_item;\n+\n+    Item (HIR::Function *item) : item (item) {}\n+\n+    Item (HIR::ImplBlock *impl_block, HIR::Function *item)\n+      : impl_item ({impl_block, item})\n+    {}\n+\n+    Item (HIR::TraitItemFunc *trait_item) : trait_item (trait_item) {}\n+  };\n+\n+  ItemType type;\n+  Item item;\n+};\n+\n class TypeCheckContext\n {\n public:\n@@ -49,7 +111,9 @@ class TypeCheckContext\n   bool lookup_type_by_node_id (NodeId ref, HirId *id);\n \n   TyTy::BaseType *peek_return_type ();\n-  void push_return_type (TyTy::BaseType *return_type);\n+  TypeCheckContextItem &peek_context ();\n+  void push_return_type (TypeCheckContextItem item,\n+\t\t\t TyTy::BaseType *return_type);\n   void pop_return_type ();\n \n   void iterate (std::function<bool (HirId, TyTy::BaseType *)> cb)\n@@ -238,7 +302,8 @@ class TypeCheckContext\n   std::map<NodeId, HirId> node_id_refs;\n   std::map<HirId, TyTy::BaseType *> resolved;\n   std::vector<std::unique_ptr<TyTy::BaseType>> builtins;\n-  std::vector<TyTy::BaseType *> return_type_stack;\n+  std::vector<std::pair<TypeCheckContextItem, TyTy::BaseType *>>\n+    return_type_stack;\n   std::vector<TyTy::BaseType *> loop_type_stack;\n   std::map<DefId, TraitReference> trait_context;\n   std::map<HirId, TyTy::BaseType *> receiver_context;"}, {"sha": "31f8ae571cbd63ce3492b422434e597cfebe684b", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3e0ec232b878fb1f2228e5f6ef6ec0874d1665/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=df3e0ec232b878fb1f2228e5f6ef6ec0874d1665", "patch": "@@ -122,13 +122,14 @@ TypeCheckContext::lookup_type_by_node_id (NodeId ref, HirId *id)\n TyTy::BaseType *\n TypeCheckContext::peek_return_type ()\n {\n-  return return_type_stack.back ();\n+  return return_type_stack.back ().second;\n }\n \n void\n-TypeCheckContext::push_return_type (TyTy::BaseType *return_type)\n+TypeCheckContext::push_return_type (TypeCheckContextItem item,\n+\t\t\t\t    TyTy::BaseType *return_type)\n {\n-  return_type_stack.push_back (return_type);\n+  return_type_stack.push_back ({std::move (item), return_type});\n }\n \n void\n@@ -137,5 +138,11 @@ TypeCheckContext::pop_return_type ()\n   return_type_stack.pop_back ();\n }\n \n+TypeCheckContextItem &\n+TypeCheckContext::peek_context ()\n+{\n+  return return_type_stack.back ().first;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}]}