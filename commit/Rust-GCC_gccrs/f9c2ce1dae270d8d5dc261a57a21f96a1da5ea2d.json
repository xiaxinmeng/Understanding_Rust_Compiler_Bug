{"sha": "f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljMmNlMWRhZTI3MGQ4ZDVkYzI2MWE1N2EyMWY5NmExZGE1ZWEyZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-14T10:03:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-14T11:23:33Z"}, "message": "libstdc++: Add noexcept-specifier to basic_string_view(It, End)\n\nThis adds a conditional noexcept to the C++20 constructor. The\nstd::to_address call cannot throw, so only taking the difference of the\ntwo iterators can throw.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/string_view (basic_string_view(It, End)): Add\n\tnoexcept-specifier.\n\t* testsuite/21_strings/basic_string_view/cons/char/range.cc:\n\tCheck noexcept-specifier. Also check construction without CTAD.", "tree": {"sha": "6eba485c5f94f880078818b4ab5572108e67aff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eba485c5f94f880078818b4ab5572108e67aff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a967a3efd39280fe3f5774e45490e991f8e99059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a967a3efd39280fe3f5774e45490e991f8e99059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a967a3efd39280fe3f5774e45490e991f8e99059"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "d8cbee9bee092f9317f5c0b1d0c9889b90521524", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "patch": "@@ -144,6 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  && (!convertible_to<_End, size_type>)\n \tconstexpr\n \tbasic_string_view(_It __first, _End __last)\n+\tnoexcept(noexcept(__last - __first))\n \t: _M_len(__last - __first), _M_str(std::to_address(__first))\n \t{ }\n "}, {"sha": "7376e2fa3f40159acb5bdc434ae9d7ce1fafdaf5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/range.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc?ref=f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "patch": "@@ -15,24 +15,34 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do run { target c++2a } }\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n \n #include <string_view>\n #include <vector>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n constexpr char str[] = \"abcdefg\";\n-constexpr std::basic_string_view s(std::begin(str), std::cend(str) - 1);\n+constexpr std::basic_string_view<char> s(std::begin(str), std::cend(str) - 1);\n static_assert( s == str );\n static_assert( s.data() == str );\n+constexpr std::basic_string_view ctad(std::begin(str), std::cend(str) - 1);\n+static_assert( ctad == s );\n+\n+// The standard does not require this constructor to have a noexcept-specifier.\n+static_assert( noexcept(std::basic_string_view<char>(str, str)) );\n+using I = __gnu_test::contiguous_iterator_wrapper<char>;\n+static_assert( ! noexcept(std::basic_string_view<char>(I{}, I{})) );\n \n void\n test01()\n {\n   std::vector<char> v{'a', 'b', 'c'};\n-  std::basic_string_view s(v.begin(), v.end());\n+  std::basic_string_view<char> s(v.begin(), v.end());\n   VERIFY( s.data() == v.data() );\n+  std::basic_string_view ctad(v.begin(), v.end());\n+  VERIFY( ctad == s );\n }\n \n int"}]}