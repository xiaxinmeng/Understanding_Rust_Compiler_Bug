{"sha": "ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyYjljYjY2MjU4NTE2ZGZmNzExYjIyYWNmNGQwZGZkYzRhZmNmOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-12-22T15:01:25Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-12-22T15:01:25Z"}, "message": "tree-pass.h (pass_reload): Declare.\n\n\t* tree-pass.h (pass_reload): Declare.\n\t* ira.c (overall_cost_before, saved_flag_ira_share_spill_slots):\n\tNew global variables, moved out of ira.\n\t(do_reload): New static function, split off from the second half\n\tof ...\n\t(ira): ... here.\n\t(gate_ira): Remove.\n\t(pass_ira): Use TV_IRA, set gate to NULL, and set flags to\n\tTODO_dump_func.\n\t(rest_of_handle_reload): New static function.\n\t(pass_reload): New.\n\nFrom-SVN: r182624", "tree": {"sha": "5d65634c3462630f8b0668feee881303171c4bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d65634c3462630f8b0668feee881303171c4bb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/comments", "author": null, "committer": null, "parents": [{"sha": "95c6483002b6849c855db603b44b7e9972bf2292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c6483002b6849c855db603b44b7e9972bf2292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c6483002b6849c855db603b44b7e9972bf2292"}], "stats": {"total": 91, "additions": 64, "deletions": 27}, "files": [{"sha": "dfb2388697c52c33f2a9dff520fd0be158d1072e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "patch": "@@ -1,3 +1,17 @@\n+2011-12-22  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* tree-pass.h (pass_reload): Declare.\n+\t* ira.c (overall_cost_before, saved_flag_ira_share_spill_slots):\n+\tNew global variables, moved out of ira.\n+\t(do_reload): New static function, split off from the second half\n+\tof ...\n+\t(ira): ... here.\n+\t(gate_ira): Remove.\n+\t(pass_ira): Use TV_IRA, set gate to NULL, and set flags to\n+\tTODO_dump_func.\n+\t(rest_of_handle_reload): New static function.\n+\t(pass_reload): New.\n+\n 2011-12-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* common/config/i386/i386-common.c (ix86_option_optimization_table):"}, {"sha": "e848b358f350b8f7bb1afe59f6b10301203c448a", "filename": "gcc/ira.c", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "patch": "@@ -406,11 +406,12 @@ int ira_spilled_reg_stack_slots_num;\n    stack slots used in current function so far.  */\n struct ira_spilled_reg_stack_slot *ira_spilled_reg_stack_slots;\n \n-/* Correspondingly overall cost of the allocation, cost of the\n-   allocnos assigned to hard-registers, cost of the allocnos assigned\n-   to memory, cost of loads, stores and register move insns generated\n-   for pseudo-register live range splitting (see ira-emit.c).  */\n-int ira_overall_cost;\n+/* Correspondingly overall cost of the allocation, overall cost before\n+   reload, cost of the allocnos assigned to hard-registers, cost of\n+   the allocnos assigned to memory, cost of loads, stores and register\n+   move insns generated for pseudo-register live range splitting (see\n+   ira-emit.c).  */\n+int ira_overall_cost, overall_cost_before;\n int ira_reg_cost, ira_mem_cost;\n int ira_load_cost, ira_store_cost, ira_shuffle_cost;\n int ira_move_loops_num, ira_additional_jumps_num;\n@@ -3521,19 +3522,17 @@ struct loops ira_loops;\n    mode or when the conflict table is too big.  */\n bool ira_conflicts_p;\n \n+/* Saved between IRA and reload.  */\n+static int saved_flag_ira_share_spill_slots;\n+\n /* This is the main entry of IRA.  */\n static void\n ira (FILE *f)\n {\n-  int overall_cost_before, allocated_reg_info_size;\n+  int allocated_reg_info_size;\n   bool loops_p;\n   int max_regno_before_ira, ira_max_point_before_emit;\n   int rebuild_p;\n-  int saved_flag_ira_share_spill_slots;\n-  basic_block bb;\n-  bool need_dce;\n-\n-  timevar_push (TV_IRA);\n \n   if (flag_caller_saves)\n     init_caller_save ();\n@@ -3715,25 +3714,29 @@ ira (FILE *f)\n \t      max_regno * sizeof (struct ira_spilled_reg_stack_slot));\n     }\n   allocate_initial_values (reg_equivs);\n+}\n \n-  timevar_pop (TV_IRA);\n+static void\n+do_reload (void)\n+{\n+  basic_block bb;\n+  bool need_dce;\n+\n+  if (flag_ira_verbose < 10 && dump_file)\n+    ira_dump_file = dump_file;\n \n-  timevar_push (TV_RELOAD);\n   df_set_flags (DF_NO_INSN_RESCAN);\n   build_insn_chain ();\n \n   need_dce = reload (get_insns (), ira_conflicts_p);\n \n-  timevar_pop (TV_RELOAD);\n-\n   timevar_push (TV_IRA);\n \n   if (ira_conflicts_p)\n     {\n       ira_free (ira_spilled_reg_stack_slots);\n \n       ira_finish_assign ();\n-\n     }\n   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL\n       && overall_cost_before != ira_overall_cost)\n@@ -3782,15 +3785,7 @@ ira (FILE *f)\n \n   timevar_pop (TV_IRA);\n }\n-\n \f\n-\n-static bool\n-gate_ira (void)\n-{\n-  return true;\n-}\n-\n /* Run the integrated register allocator.  */\n static unsigned int\n rest_of_handle_ira (void)\n@@ -3804,16 +3799,42 @@ struct rtl_opt_pass pass_ira =\n  {\n   RTL_PASS,\n   \"ira\",                                /* name */\n-  gate_ira,                             /* gate */\n+  NULL,                                 /* gate */\n   rest_of_handle_ira,\t\t        /* execute */\n   NULL,                                 /* sub */\n   NULL,                                 /* next */\n   0,                                    /* static_pass_number */\n-  TV_NONE,\t                        /* tv_id */\n+  TV_IRA,\t                        /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n+};\n+\n+static unsigned int\n+rest_of_handle_reload (void)\n+{\n+  do_reload ();\n+  return 0;\n+}\n+\n+struct rtl_opt_pass pass_reload =\n+{\n+ {\n+  RTL_PASS,\n+  \"reload\",                             /* name */\n+  NULL,                                 /* gate */\n+  rest_of_handle_reload,\t        /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_RELOAD,\t                        /* tv_id */\n   0,                                    /* properties_required */\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect                      /* todo_flags_finish */\n+  TODO_dump_func | TODO_ggc_collect     /* todo_flags_finish */\n  }\n };"}, {"sha": "e21971cf7c202f032913e11999567bc9c68b57b1", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "patch": "@@ -1484,6 +1484,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_sms);\n       NEXT_PASS (pass_sched);\n       NEXT_PASS (pass_ira);\n+      NEXT_PASS (pass_reload);\n       NEXT_PASS (pass_postreload);\n \t{\n \t  struct opt_pass **p = &pass_postreload.pass.sub;"}, {"sha": "6f1fd6aca691d93e3f7f0a77be8982a2c930baa0", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b9cb66258516dff711b22acf4d0dfdc4afcf9/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ae2b9cb66258516dff711b22acf4d0dfdc4afcf9", "patch": "@@ -541,6 +541,7 @@ extern struct rtl_opt_pass pass_mode_switching;\n extern struct rtl_opt_pass pass_sms;\n extern struct rtl_opt_pass pass_sched;\n extern struct rtl_opt_pass pass_ira;\n+extern struct rtl_opt_pass pass_reload;\n extern struct rtl_opt_pass pass_postreload;\n extern struct rtl_opt_pass pass_clean_state;\n extern struct rtl_opt_pass pass_branch_prob;"}]}