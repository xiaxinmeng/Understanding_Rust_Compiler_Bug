{"sha": "42d085c1aa40b639b424f2b379eb4e464e3d86c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJkMDg1YzFhYTQwYjYzOWI0MjRmMmIzNzllYjRlNDY0ZTNkODZjOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-22T23:08:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-22T23:08:16Z"}, "message": "Avoid !TARGET_ABI_OPEN_VMS in favor of a positive test for TARGET_ABI_OSF.\n\nFrom-SVN: r171331", "tree": {"sha": "f3f5defa1bbc448e8a43f475e675698381d2b753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3f5defa1bbc448e8a43f475e675698381d2b753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42d085c1aa40b639b424f2b379eb4e464e3d86c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d085c1aa40b639b424f2b379eb4e464e3d86c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d085c1aa40b639b424f2b379eb4e464e3d86c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d085c1aa40b639b424f2b379eb4e464e3d86c8/comments", "author": null, "committer": null, "parents": [{"sha": "cabbe12a2501a0774661a18887da3c55a28f5da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabbe12a2501a0774661a18887da3c55a28f5da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabbe12a2501a0774661a18887da3c55a28f5da8"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "430f2932c04d2f5984dcd747238e04f69cc9f3c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42d085c1aa40b639b424f2b379eb4e464e3d86c8", "patch": "@@ -1,3 +1,15 @@\n+2011-03-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (direct_return): Use TARGET_ABI_OSF instead\n+\tof !TARGET_ABI_OPEN_VMS.\n+\t(alpha_trampoline_init, alpha_start_function): Likewise.\n+\t(alpha_expand_epilogue, alpha_file_start): Likewise.\n+\t* config/alpha/alpha.md (divsi3, modsi3): Likewise.\n+\t(udivsi3, umodsi3, divdi3, moddi3, udivdi3, umoddi3): Likewise.\n+\t(*divmodsi_internal_er, *divmodsi_internal_er_1): Likewise.\n+\t(*divmodsi_internal, *divmoddi_internal_er): Likewise.\n+\t(*divmoddi_internal_er_1, *divmoddi_internal): Likewise.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/s390/s390-opts.h: New."}, {"sha": "d8d2f4126d1856dc4d290f3831ce825a957feb9f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=42d085c1aa40b639b424f2b379eb4e464e3d86c8", "patch": "@@ -607,7 +607,7 @@ alpha_vector_mode_supported_p (enum machine_mode mode)\n int\n direct_return (void)\n {\n-  return (!TARGET_ABI_OPEN_VMS\n+  return (TARGET_ABI_OSF\n \t  && reload_completed\n \t  && alpha_sa_size () == 0\n \t  && get_frame_size () == 0\n@@ -5553,7 +5553,7 @@ alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   mem = adjust_address (m_tramp, Pmode, 24);\n   emit_move_insn (mem, chain_value);\n \n-  if (!TARGET_ABI_OPEN_VMS)\n+  if (TARGET_ABI_OSF)\n     {\n       emit_insn (gen_imb ());\n #ifdef ENABLE_EXECUTE_STACK\n@@ -8046,7 +8046,8 @@ alpha_start_function (FILE *file, const char *fnname,\n   if (TARGET_ABI_OPEN_VMS)\n     fprintf (file, \"\\t.base $%d\\n\", vms_base_regno);\n \n-  if (!TARGET_ABI_OPEN_VMS && TARGET_IEEE_CONFORMANT\n+  if (TARGET_ABI_OSF\n+      && TARGET_IEEE_CONFORMANT\n       && !flag_inhibit_size_directive)\n     {\n       /* Set flags in procedure descriptor to request IEEE-conformant\n@@ -8176,8 +8177,9 @@ alpha_expand_epilogue (void)\n   alpha_sa_mask (&imask, &fmask);\n \n   fp_is_frame_pointer\n-    = ((TARGET_ABI_OPEN_VMS && alpha_procedure_type == PT_STACK)\n-       || (!TARGET_ABI_OPEN_VMS && frame_pointer_needed));\n+    = (TARGET_ABI_OPEN_VMS\n+       ? alpha_procedure_type == PT_STACK\n+       : frame_pointer_needed);\n   fp_offset = 0;\n   sa_reg = stack_pointer_rtx;\n \n@@ -8189,9 +8191,9 @@ alpha_expand_epilogue (void)\n   if (sa_size)\n     {\n       /* If we have a frame pointer, restore SP from it.  */\n-      if ((TARGET_ABI_OPEN_VMS\n-\t   && vms_unwind_regno == HARD_FRAME_POINTER_REGNUM)\n-\t  || (!TARGET_ABI_OPEN_VMS && frame_pointer_needed))\n+      if (TARGET_ABI_OPEN_VMS\n+\t  ? vms_unwind_regno == HARD_FRAME_POINTER_REGNUM\n+\t  : frame_pointer_needed)\n \temit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n \n       /* Cope with very large offsets to the register save area.  */\n@@ -9495,7 +9497,7 @@ alpha_file_start (void)\n \n   fputs (\"\\t.set noreorder\\n\", asm_out_file);\n   fputs (\"\\t.set volatile\\n\", asm_out_file);\n-  if (!TARGET_ABI_OPEN_VMS)\n+  if (TARGET_ABI_OSF)\n     fputs (\"\\t.set noat\\n\", asm_out_file);\n   if (TARGET_EXPLICIT_RELOCS)\n     fputs (\"\\t.set nomacro\\n\", asm_out_file);"}, {"sha": "38d40b55f7e36bd4ae4546dcc44884682f27709b", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d085c1aa40b639b424f2b379eb4e464e3d86c8/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=42d085c1aa40b639b424f2b379eb4e464e3d86c8", "patch": "@@ -799,7 +799,7 @@\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(subreg:SI (match_dup 5) 0))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n {\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n@@ -817,7 +817,7 @@\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(subreg:SI (match_dup 5) 0))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n {\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n@@ -835,7 +835,7 @@\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(subreg:SI (match_dup 5) 0))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n {\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n@@ -853,7 +853,7 @@\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(subreg:SI (match_dup 5) 0))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n {\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n@@ -866,7 +866,7 @@\n \t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"\")\n \n (define_expand \"udivdi3\"\n@@ -875,7 +875,7 @@\n \t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"\")\n \n (define_expand \"moddi3\"\n@@ -884,7 +884,7 @@\n \t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"\")\n \n (define_expand \"umoddi3\"\n@@ -893,7 +893,7 @@\n \t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"\")\n \n ;; Lengths of 8 for ldq $t12,__divq($gp); jsr $t9,($t12),__divq as\n@@ -906,7 +906,7 @@\n \t\t\t (match_operand:DI 2 \"register_operand\" \"b\")])))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0)\n@@ -951,7 +951,7 @@\n    (use (match_operand 5 \"const_int_operand\" \"\"))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"TARGET_EXPLICIT_RELOCS && !TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $23,($27),__%E3%j5\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"4\")])\n@@ -963,7 +963,7 @@\n \t\t\t (match_operand:DI 2 \"register_operand\" \"b\")])))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"%E3 %1,%2,%0\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n@@ -975,7 +975,7 @@\n \t\t\t (match_operand:DI 2 \"register_operand\" \"b\")]))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 3))\n@@ -1019,7 +1019,7 @@\n    (use (match_operand 5 \"const_int_operand\" \"\"))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"TARGET_EXPLICIT_RELOCS && !TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $23,($27),__%E3%j5\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"4\")])\n@@ -1031,7 +1031,7 @@\n \t\t\t (match_operand:DI 2 \"register_operand\" \"b\")]))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n-  \"!TARGET_ABI_OPEN_VMS\"\n+  \"TARGET_ABI_OSF\"\n   \"%E3 %1,%2,%0\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])"}]}