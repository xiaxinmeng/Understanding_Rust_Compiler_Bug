{"sha": "1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5YTAyNTFhYTZkMWRkNmQxN2IxYzY2NzZhNzdjMWZkZDVlZGE5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-19T22:37:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-19T22:37:37Z"}, "message": "re PR c++/81167 (ICE on valid C++ code in deferred_printed_type, at cp/error.c:118)\n\n\tPR c++/81167\n\t* call.c (joust): Use TREE_TYPE (source) if source is\n\ta POINTER_TYPE_P rather than if ! DECL_CONSTRUCTOR_P (w->fn).\n\n\t* g++.dg/cpp0x/pr81167.C: New test.\n\nFrom-SVN: r256905", "tree": {"sha": "2347d1777d6edb09aaecca8145dcef87ec9c64f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2347d1777d6edb09aaecca8145dcef87ec9c64f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "5bad14dadd0940e52cbeb36cc95745602945c445", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "patch": "@@ -1,5 +1,9 @@\n 2018-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/81167\n+\t* call.c (joust): Use TREE_TYPE (source) if source is\n+\ta POINTER_TYPE_P rather than if ! DECL_CONSTRUCTOR_P (w->fn).\n+\n \tPR c++/83919\n \t* typeck.c (convert_for_assignment): Suppress warn_ignored_qualifiers\n \tfor direct enum init."}, {"sha": "46d5ef5e7c0bfc06855a297f7bbfc660962b2594", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "patch": "@@ -10090,7 +10090,7 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n       else if (warn)\n \t{\n \t  tree source = source_type (w->convs[0]);\n-\t  if (! DECL_CONSTRUCTOR_P (w->fn))\n+\t  if (POINTER_TYPE_P (source))\n \t    source = TREE_TYPE (source);\n \t  if (warning (OPT_Wconversion, \"choosing %qD over %qD\", w->fn, l->fn)\n \t      && warning (OPT_Wconversion, \"  for conversion from %qH to %qI\","}, {"sha": "ceb16e567729af2557336cc0511ae9bf33ac3061", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "patch": "@@ -1,5 +1,8 @@\n 2018-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/81167\n+\t* g++.dg/cpp0x/pr81167.C: New test.\n+\n \tPR c++/83919\n \t* g++.dg/cpp0x/pr83919.C: New test.\n "}, {"sha": "d0c9d233c4970bcf6997bd6646fbd4f1ad4abfeb", "filename": "gcc/testsuite/g++.dg/cpp0x/pr81167.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81167.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81167.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81167.C?ref=1c9a0251aa6d1dd6d17b1c6676a77c1fdd5eda9b", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/81167\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wconversion\" }\n+\n+struct bar;\n+\n+struct foo\n+{\n+  foo () {}\n+  foo (const bar &) {}\n+};\n+\n+struct bar\n+{\n+  operator foo () && { return foo (); }\n+};\n+\n+void test ()\n+{\n+  foo f = bar ();\n+// { dg-warning \"choosing 'bar::operator foo\\\\(\\\\) &&' over 'foo::foo\\\\(const bar&\\\\)'\" \"\" { target *-*-* } .-1 }\n+// { dg-warning \"for conversion from 'bar' to 'foo'\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"because conversion sequence for the argument is better\" \"\" { target *-*-* } .-3 }\n+}"}]}