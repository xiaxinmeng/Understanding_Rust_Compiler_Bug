{"sha": "033425d0ed0092748fc919e5c40dc47421dcdd89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzNDI1ZDBlZDAwOTI3NDhmYzkxOWU1YzQwZGM0NzQyMWRjZGQ4OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-17T20:24:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-17T20:24:00Z"}, "message": "re PR go/91781 (r275691 breaks go test \"reflect\")\n\n\tPR go/91781\n    reflect: promote integer closure return to full word\n    \n    The libffi library expects an integer return type to be promoted to a\n    full word.  Implement that when returning from a closure written in Go.\n    This only matters on big-endian systems when returning an integer smaller\n    than the pointer size, which is why we didn't notice it until now.\n    \n    Fixes https://gcc.gnu.org/PR91781.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/195858\n\nFrom-SVN: r275813", "tree": {"sha": "7ff26ef5001f70214c75d5fe6546930b57a52d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff26ef5001f70214c75d5fe6546930b57a52d4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033425d0ed0092748fc919e5c40dc47421dcdd89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033425d0ed0092748fc919e5c40dc47421dcdd89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033425d0ed0092748fc919e5c40dc47421dcdd89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033425d0ed0092748fc919e5c40dc47421dcdd89/comments", "author": null, "committer": null, "parents": [{"sha": "99a28ee8c18fd1f452c002f0548c54eb0a7be817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a28ee8c18fd1f452c002f0548c54eb0a7be817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a28ee8c18fd1f452c002f0548c54eb0a7be817"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "4a81caa228dd00acf880ca17255c25deed5f2cbc", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033425d0ed0092748fc919e5c40dc47421dcdd89/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033425d0ed0092748fc919e5c40dc47421dcdd89/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=033425d0ed0092748fc919e5c40dc47421dcdd89", "patch": "@@ -1,4 +1,4 @@\n-ff18e041624b8c23ffcd747f51e9dda945777d2a\n+7aabaf8623cf88e2378057476a034093abbe5aab\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "05c5bc003427e3db1e63535ecf2f73647b119e08", "filename": "libgo/go/reflect/makefunc_ffi.go", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fgo%2Freflect%2Fmakefunc_ffi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fgo%2Freflect%2Fmakefunc_ffi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_ffi.go?ref=033425d0ed0092748fc919e5c40dc47421dcdd89", "patch": "@@ -28,7 +28,7 @@ func makeCIF(ft *funcType) unsafe.Pointer\n //\n // The ffi_callback handles __go_makefunc_can_recover, and\n // then passes off the data as received from ffi here.\n-func ffiCallbackGo(results unsafe.Pointer, params unsafe.Pointer, impl *makeFuncImpl) {\n+func ffiCallbackGo(results unsafe.Pointer, params unsafe.Pointer, impl *makeFuncImpl, wordsize int32, bigEndian bool) {\n \tftyp := impl.typ\n \tin := make([]Value, 0, len(ftyp.in))\n \tap := params\n@@ -42,21 +42,46 @@ func ffiCallbackGo(results unsafe.Pointer, params unsafe.Pointer, impl *makeFunc\n \n \tout := impl.call(in)\n \n-\toff := uintptr(0)\n-\tfor i, typ := range ftyp.out {\n-\t\tv := out[i]\n+\tcheckValue := func(v Value, typ *rtype, addr unsafe.Pointer) {\n \t\tif v.flag&flagRO != 0 {\n \t\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(impl.fn) +\n \t\t\t\t\" returned value obtained from unexported field\")\n \t\t}\n \n-\t\toff = align(off, uintptr(typ.fieldAlign))\n-\t\taddr := unsafe.Pointer(uintptr(results) + off)\n-\n \t\t// Convert v to type typ if v is assignable to a variable\n \t\t// of type t in the language spec.\n \t\t// See issue 28761.\n \t\tv = v.assignTo(\"reflect.MakeFunc\", typ, addr)\n+\t}\n+\n+\t// In libffi a single integer return value is always promoted\n+\t// to a full word. This only matters for integers whose size\n+\t// is less than the size of a full word. There is similar code\n+\t// in libgo/runtime/go-reflect-call.c.\n+\tif len(ftyp.out) == 1 {\n+\t\ttyp := ftyp.out[0]\n+\t\tswitch typ.Kind() {\n+\t\tcase Bool, Int8, Int16, Int32, Uint8, Uint16, Uint32:\n+\t\t\tv := out[0]\n+\t\t\tcheckValue(v, typ, nil)\n+\n+\t\t\tif bigEndian {\n+\t\t\t\tresults = unsafe.Pointer(uintptr(results) + uintptr(wordsize) - typ.size)\n+\t\t\t}\n+\n+\t\t\tmemmove(results, v.ptr, typ.size)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\toff := uintptr(0)\n+\tfor i, typ := range ftyp.out {\n+\t\tv := out[i]\n+\n+\t\toff = align(off, uintptr(typ.fieldAlign))\n+\t\taddr := unsafe.Pointer(uintptr(results) + off)\n+\n+\t\tcheckValue(v, typ, addr)\n \n \t\tif v.flag&flagIndir == 0 && (v.kind() == Ptr || v.kind() == UnsafePointer) {\n \t\t\t*(*unsafe.Pointer)(addr) = v.ptr"}, {"sha": "f1890264d7f431776f0edccefe321b7af18b20b9", "filename": "libgo/go/reflect/makefunc_ffi_c.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c?ref=033425d0ed0092748fc919e5c40dc47421dcdd89", "patch": "@@ -25,7 +25,8 @@ void makeFuncFFI(void *cif, void *impl)\n    function ffiCall with the pointer to the arguments, the results area,\n    and the closure structure.  */\n \n-extern void ffiCallbackGo(void *result, void **args, ffi_go_closure *closure)\n+extern void ffiCallbackGo(void *result, void **args, ffi_go_closure *closure,\n+                          int32 wordsize, _Bool big_endian)\n   __asm__ (GOSYM_PREFIX \"reflect.ffiCallbackGo\");\n \n extern void makefuncfficanrecover(Slice)\n@@ -72,7 +73,8 @@ ffi_callback (ffi_cif* cif __attribute__ ((unused)), void *results,\n       makefuncfficanrecover (s);\n     }\n \n-  ffiCallbackGo(results, args, closure);\n+  ffiCallbackGo(results, args, closure, sizeof(ffi_arg),\n+                __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__);\n \n   if (i < n)\n     makefuncreturning ();"}, {"sha": "4d887eb87181f137d8a7ee52d23d2ee09ff76021", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033425d0ed0092748fc919e5c40dc47421dcdd89/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=033425d0ed0092748fc919e5c40dc47421dcdd89", "patch": "@@ -44,8 +44,8 @@ go_results_size (const struct functype *func)\n \n   types = (const struct _type **) func->out.__values;\n \n-  /* A single integer return value is always promoted to a full\n-     word.  */\n+  /* A single integer return value is always promoted to a full word.\n+     There is similar code below and in libgo/go/reflect/makefunc_ffi.go.*/\n   if (count == 1)\n     {\n       switch (types[0]->kind & kindMask)\n@@ -57,8 +57,6 @@ go_results_size (const struct functype *func)\n \tcase kindUint8:\n \tcase kindUint16:\n \tcase kindUint32:\n-\tcase kindInt:\n-\tcase kindUint:\n \t  return sizeof (ffi_arg);\n \n \tdefault:\n@@ -108,8 +106,8 @@ go_set_results (const struct functype *func, unsigned char *call_result,\n \n   types = (const struct _type **) func->out.__values;\n \n-  /* A single integer return value is always promoted to a full\n-     word.  */\n+  /* A single integer return value is always promoted to a full word.\n+     There is similar code above and in libgo/go/reflect/makefunc_ffi.go.*/\n   if (count == 1)\n     {\n       switch (types[0]->kind & kindMask)\n@@ -121,8 +119,6 @@ go_set_results (const struct functype *func, unsigned char *call_result,\n \tcase kindUint8:\n \tcase kindUint16:\n \tcase kindUint32:\n-\tcase kindInt:\n-\tcase kindUint:\n \t  {\n \t    union\n \t    {"}]}