{"sha": "1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjMDFhYjJmYjFkY2YyY2Y3MWUxOTI2YmU0NTk5MzU0NzRmZTY4ZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-29T07:35:16Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-29T07:35:16Z"}, "message": "Add sparc 3D array addressing VIS intrinsics.\n\ngcc/\n\n\t* config/sparc/sparc.md (UNSPEC_ARRAY8, UNSPEC_ARRAY16,\n\tUNSPEC_ARRAY32): New unspec.\n\t(define_attr type): New type 'array'.\n\t(array{8,16,32}<P:mode>_vis): New patterns.\n\t* config/sparc/ultra1_2.md: Add reservations for 'array'.\n\t* config/sparc/ultra3.md: Likewise.\n\t* config/sparc/niagara.md: Likewise.\n\t* config/sparc/niagara2.md: Likewise.\n\t* config/sparc/sparc.c (sparc_vis_init_builtins): Build new\n\tarray builtins.\n\t* config/sparc/visintrin.h (__vis_array8, __vis_array16,\n\t__vis_array32): New.\n\t* doc/extend.texi: Document new VIS builtins.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/array.c: New test.\n\nFrom-SVN: r179334", "tree": {"sha": "31a4841ddb0d4032d26c50c2cc01d6b885e04a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a4841ddb0d4032d26c50c2cc01d6b885e04a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f931effcacb48453319c1f9c9faec151c742e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f931effcacb48453319c1f9c9faec151c742e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f931effcacb48453319c1f9c9faec151c742e25"}], "stats": {"total": 134, "additions": 129, "deletions": 5}, "files": [{"sha": "f4b9c8a6a52ad93f54185866d57e9bd92c07b3cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -1,3 +1,19 @@\n+2011-09-29  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (UNSPEC_ARRAY8, UNSPEC_ARRAY16,\n+\tUNSPEC_ARRAY32): New unspec.\n+\t(define_attr type): New type 'array'.\n+\t(array{8,16,32}<P:mode>_vis): New patterns.\n+\t* config/sparc/ultra1_2.md: Add reservations for 'array'.\n+\t* config/sparc/ultra3.md: Likewise.\n+\t* config/sparc/niagara.md: Likewise.\n+\t* config/sparc/niagara2.md: Likewise.\n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Build new\n+\tarray builtins.\n+\t* config/sparc/visintrin.h (__vis_array8, __vis_array16,\n+\t__vis_array32): New.\n+\t* doc/extend.texi: Document new VIS builtins.\n+\n 2011-09-29  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin9.h (STACK_CHECK_STATIC_BUILTIN): Enable for"}, {"sha": "a75088b9c9bef89418814ae2300366ee111eaffd", "filename": "gcc/config/sparc/niagara.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fniagara.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fniagara.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara.md?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -114,5 +114,5 @@\n  */\n (define_insn_reservation \"niag_vis\" 8\n   (and (eq_attr \"cpu\" \"niagara\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,gsr\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,gsr,array\"))\n   \"niag_pipe*8\")"}, {"sha": "f261ac1ec5a3f8b076f05241c6eaa74f2d6255f8", "filename": "gcc/config/sparc/niagara2.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -111,10 +111,10 @@\n \n (define_insn_reservation \"niag2_vis\" 6\n   (and (eq_attr \"cpu\" \"niagara2\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,gsr\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,array,gsr\"))\n   \"niag2_pipe*6\")\n \n (define_insn_reservation \"niag3_vis\" 9\n   (and (eq_attr \"cpu\" \"niagara3\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,gsr\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,array,gsr\"))\n   \"niag2_pipe*9\")"}, {"sha": "c8c0677b4b8b7cb0b865c64d9db1acc01fc4a19d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -9195,6 +9195,9 @@ sparc_vis_init_builtins (void)\n   tree di_ftype_di_di = build_function_type_list (intDI_type_node,\n \t\t\t\t\t\t  intDI_type_node,\n \t\t\t\t\t\t  intDI_type_node, 0);\n+  tree si_ftype_si_si = build_function_type_list (intSI_type_node,\n+\t\t\t\t\t\t  intSI_type_node,\n+\t\t\t\t\t\t  intSI_type_node, 0);\n   tree ptr_ftype_ptr_si = build_function_type_list (ptr_type_node,\n \t\t        \t\t\t    ptr_type_node,\n \t\t\t\t\t            intSI_type_node, 0);\n@@ -9371,6 +9374,26 @@ sparc_vis_init_builtins (void)\n \t\t     v2si_ftype_v2si_v2si);\n   def_builtin_const (\"__builtin_vis_fpsub32s\", CODE_FOR_subsi3,\n \t\t     v1si_ftype_v1si_v1si);\n+\n+  /* Three-dimensional array addressing.  */\n+  if (TARGET_ARCH64)\n+    {\n+      def_builtin_const (\"__builtin_vis_array8\", CODE_FOR_array8di_vis,\n+\t\t\t di_ftype_di_di);\n+      def_builtin_const (\"__builtin_vis_array16\", CODE_FOR_array16di_vis,\n+\t\t\t di_ftype_di_di);\n+      def_builtin_const (\"__builtin_vis_array32\", CODE_FOR_array32di_vis,\n+\t\t\t di_ftype_di_di);\n+    }\n+  else\n+    {\n+      def_builtin_const (\"__builtin_vis_array8\", CODE_FOR_array8si_vis,\n+\t\t\t si_ftype_si_si);\n+      def_builtin_const (\"__builtin_vis_array16\", CODE_FOR_array16si_vis,\n+\t\t\t si_ftype_si_si);\n+      def_builtin_const (\"__builtin_vis_array32\", CODE_FOR_array32si_vis,\n+\t\t\t si_ftype_si_si);\n+  }\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook."}, {"sha": "ee772d66174ffdab7d34ecbc14e6877f3488fc02", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -66,6 +66,9 @@\n    (UNSPEC_EDGE16L\t\t54)\n    (UNSPEC_EDGE32\t\t55)\n    (UNSPEC_EDGE32L\t\t56)\n+   (UNSPEC_ARRAY8\t\t57)\n+   (UNSPEC_ARRAY16\t\t58)\n+   (UNSPEC_ARRAY32\t\t59)\n \n    (UNSPEC_SP_SET\t\t60)\n    (UNSPEC_SP_TEST\t\t61)\n@@ -237,7 +240,7 @@\n    fpcmp,\n    fpmul,fpdivs,fpdivd,\n    fpsqrts,fpsqrtd,\n-   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,edge,gsr,\n+   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,edge,gsr,array,\n    cmove,\n    ialuX,\n    multi,savew,flushw,iflush,trap\"\n@@ -8159,4 +8162,31 @@\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_insn \"array8<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_ARRAY8))]\n+  \"TARGET_VIS\"\n+  \"array8\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"array\")])\n+\n+(define_insn \"array16<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_ARRAY16))]\n+  \"TARGET_VIS\"\n+  \"array16\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"array\")])\n+\n+(define_insn \"array32<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_ARRAY32))]\n+  \"TARGET_VIS\"\n+  \"array32\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"array\")])\n+\n (include \"sync.md\")"}, {"sha": "4600205571685d2af5297ea42f6bec370f77a794", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -94,7 +94,7 @@\n \n (define_insn_reservation \"us1_simple_ieu1\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n-    (eq_attr \"type\" \"compare,edge\"))\n+    (eq_attr \"type\" \"compare,edge,array\"))\n   \"us1_ieu1 + us1_slot012\")\n \n (define_insn_reservation \"us1_ialuX\" 1"}, {"sha": "c6a9f89ea1a0edd2a203d9464acc509e6832b13b", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -54,6 +54,11 @@\n     (eq_attr \"type\" \"cmove\"))\n   \"us3_ms + us3_br + us3_slotany, nothing\")\n \n+(define_insn_reservation \"us3_array\" 2\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+    (eq_attr \"type\" \"array\"))\n+  \"us3_ms + us3_slotany, nothing\")\n+\n ;; ??? Not entirely accurate.\n ;; ??? It can run from 6 to 9 cycles.  The first cycle the MS pipe\n ;; ??? is needed, and the instruction group is broken right after"}, {"sha": "3bef099c7e6335a7894c9540f9a8478a4cd2d484", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -333,4 +333,25 @@ __vis_fpsub32s (__v1si __A, __v1si __B)\n   return __builtin_vis_fpsub32s (__A, __B);\n }\n \n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_array8 (long __A, long __B)\n+{\n+  return __builtin_vis_array8 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_array16 (long __A, long __B)\n+{\n+  return __builtin_vis_array16 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_array32 (long __A, long __B)\n+{\n+  return __builtin_vis_array32 (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "f59333c18d6d6cfa3f5af4f7c93ac2c0ab50586d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -12987,6 +12987,10 @@ v4hi __builtin_vis_fpsub16 (v4hi, v4hi);\n v2hi __builtin_vis_fpsub16s (v2hi, v2hi);\n v2si __builtin_vis_fpsub32 (v2si, v2si);\n v1si __builtin_vis_fpsub32s (v1si, v1si);\n+\n+long __builtin_vis_array8 (long, long);\n+long __builtin_vis_array16 (long, long);\n+long __builtin_vis_array32 (long, long);\n @end smallexample\n \n @node SPU Built-in Functions"}, {"sha": "887ce8f291bb85925aa730b0008fee25d2c25cd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -1,3 +1,7 @@\n+2011-09-29  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/array.c: New test.\n+\n 2011-09-29  Jiangning Liu  <jiangning.liu@arm.com>\n \n \t* gcc/testsuite/gcc.dg/tree-ssa/predcom-1.c: Explicitly turn on"}, {"sha": "e382e22f3fe7254424141d88bb5e12091262db8b", "filename": "gcc/testsuite/gcc.target/sparc/array.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec01ab2fb1dcf2cf71e1926be459935474fe68e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Farray.c?ref=1ec01ab2fb1dcf2cf71e1926be459935474fe68e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+\n+long test_array8 (long a, long b)\n+{\n+  return __builtin_vis_array8 (a, b);\n+}\n+\n+long test_array16 (long a, long b)\n+{\n+  return __builtin_vis_array16 (a, b);\n+}\n+\n+long test_array32 (long a, long b)\n+{\n+  return __builtin_vis_array32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"array8\\t%\" } } */\n+/* { dg-final { scan-assembler \"array16\\t%\" } } */\n+/* { dg-final { scan-assembler \"array32\\t%\" } } */"}]}