{"sha": "ad4f99101437a6adc0f481a0d8902a78fd64f441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0Zjk5MTAxNDM3YTZhZGMwZjQ4MWEwZDg5MDJhNzhmZDY0ZjQ0MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-22T23:44:25Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-22T23:44:25Z"}, "message": "re PR c++/6579 (Infinite loop with statement expressions in member initialization)\n\n\tPR c++/6579\n\t* spew.c (snarf_parenthesized_expression): New function.\n\t(snarf_block): Use it.\n\n\tPR c++/6579\n\t* g++.dg/parse/stmtexpr3.C: New test.\n\nFrom-SVN: r58427", "tree": {"sha": "2f55c95f7ee50b771fd702cf463eee9b0a5f200c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f55c95f7ee50b771fd702cf463eee9b0a5f200c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4f99101437a6adc0f481a0d8902a78fd64f441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4f99101437a6adc0f481a0d8902a78fd64f441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4f99101437a6adc0f481a0d8902a78fd64f441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4f99101437a6adc0f481a0d8902a78fd64f441/comments", "author": null, "committer": null, "parents": [{"sha": "3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "2529697ba4af5b49a3994a8fae68b3fa74819a99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad4f99101437a6adc0f481a0d8902a78fd64f441", "patch": "@@ -1,3 +1,9 @@\n+2002-10-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6579\n+\t* spew.c (snarf_parenthesized_expression): New function.\n+\t(snarf_block): Use it.\n+\n 2002-10-22  Richard Henderson  <rth@redhat.com>\n \n \t* method.c (use_thunk): Always compute vcall_value; assert that"}, {"sha": "1d6712521268998045ca6f1cfd5d1539a1f52a99", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=ad4f99101437a6adc0f481a0d8902a78fd64f441", "patch": "@@ -133,6 +133,7 @@ static struct unparsed_text * alloc_unparsed_text\n \n static void snarf_block PARAMS ((struct unparsed_text *t));\n static tree snarf_defarg PARAMS ((void));\n+static void snarf_parenthesized_expression (struct unparsed_text *);\n static int frob_id PARAMS ((int, int, tree *));\n \n /* The list of inline functions being held off until we reach the end of\n@@ -1067,6 +1068,30 @@ alloc_unparsed_text (locus, decl, interface)\n   return r;\n }\n \n+/* Accumulate the tokens that make up a parenthesized expression in T,\n+   having already read the opening parenthesis.  */\n+\n+static void\n+snarf_parenthesized_expression (struct unparsed_text *t)\n+{\n+  int yyc;\n+  int level = 1;\n+\n+  while (1)\n+    {\n+      yyc = next_token (space_for_token (t));\n+      if (yyc == '(')\n+\t++level;\n+      else if (yyc == ')' && --level == 0)\n+\tbreak;\n+      else if (yyc == 0)\n+\t{\n+\t  error (\"%Hend of file read inside definition\", &t->locus);\n+\t  break;\n+\t}\n+    }\n+}\n+\n /* Subroutine of snarf_method, deals with actual absorption of the block.  */\n \n static void\n@@ -1145,6 +1170,8 @@ snarf_block (t)\n \t  else if (look_for_semicolon && blev == 0)\n \t    break;\n \t}\n+      else if (yyc == '(' && blev == 0)\n+\tsnarf_parenthesized_expression (t);\n       else if (yyc == 0)\n \t{\n \t  error (\"%Hend of file read inside definition\", &t->locus);"}, {"sha": "8635fdc2c81429e77615ff3b7dc52d699c1c8980", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad4f99101437a6adc0f481a0d8902a78fd64f441", "patch": "@@ -1,3 +1,8 @@\n+2002-10-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6579\n+\t* g++.dg/parse/stmtexpr3.C: New test.\n+\n 2002-10-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/expr/cond1.C: New test."}, {"sha": "79f689316aec042431c2ba3439b892baf995669f", "filename": "gcc/testsuite/g++.dg/parse/stmtexpr3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstmtexpr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f99101437a6adc0f481a0d8902a78fd64f441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstmtexpr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstmtexpr3.C?ref=ad4f99101437a6adc0f481a0d8902a78fd64f441", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+struct B\n+{\n+  int a;\n+  B() : a(({ 1; })) {}\n+};"}]}