{"sha": "05ef31736c431ca4721ba8d05156e99af79a5aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlZjMxNzM2YzQzMWNhNDcyMWJhOGQwNTE1NmU5OWFmNzlhNWFhYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gmail.com", "date": "2018-01-11T04:37:48Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2018-01-11T04:37:48Z"}, "message": "re PR tree-optimization/83501 (strlen(a) not folded after strcpy(a, \"...\"))\n\n2018-01-11  Martin Sebor  <msebor@gmail.com>\n\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR tree-optimization/83501\n\tPR tree-optimization/81703\n\n\t* tree-ssa-strlen.c (get_string_cst): Rename...\n\t(get_string_len): ...to this.  Handle global constants.\n\t(handle_char_store): Adjust.\n\ntestsuite/\n\t* gcc.dg/strlenopt-39.c: New test-case.\n\t* gcc.dg/pr81703.c: Likewise.\n\nCo-Authored-By: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>\n\nFrom-SVN: r256475", "tree": {"sha": "8e4795ba658e8de4ed56247873a0632d4efd2ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e4795ba658e8de4ed56247873a0632d4efd2ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ef31736c431ca4721ba8d05156e99af79a5aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ef31736c431ca4721ba8d05156e99af79a5aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ef31736c431ca4721ba8d05156e99af79a5aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ef31736c431ca4721ba8d05156e99af79a5aac/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "840573729e5fa22ebea44e0c580efd14b46f111e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840573729e5fa22ebea44e0c580efd14b46f111e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840573729e5fa22ebea44e0c580efd14b46f111e"}], "stats": {"total": 139, "additions": 130, "deletions": 9}, "files": [{"sha": "bb6bf49107df2de756470a9411da6d6aec0ff728", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ef31736c431ca4721ba8d05156e99af79a5aac", "patch": "@@ -1,3 +1,13 @@\n+2018-01-11  Martin Sebor  <msebor@gmail.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/83501\n+\tPR tree-optimization/81703\n+\n+\t* tree-ssa-strlen.c (get_string_cst): Rename...\n+\t(get_string_len): ...to this.  Handle global constants.\n+\t(handle_char_store): Adjust.\n+\n 2018-01-10  Kito Cheng  <kito.cheng@gmail.com>\n \t    Jim Wilson  <jimw@sifive.com>\n "}, {"sha": "dd4bfcec00ca1eb3d12737170ed54a60bf6dba2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05ef31736c431ca4721ba8d05156e99af79a5aac", "patch": "@@ -1,3 +1,12 @@\n+2018-01-11  Martin Sebor  <msebor@gmail.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/83501\n+\tPR tree-optimization/81703\n+\n+\t* gcc.dg/strlenopt-39.c: New test-case.\n+\t* gcc.dg/pr81703.c: Likewise.\n+\n 2018-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/atomic10.adb: New test."}, {"sha": "190f4a833ddd6ca3ca96992a5592da22354e2269", "filename": "gcc/testsuite/gcc.dg/pr81703.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81703.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81703.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81703.c?ref=05ef31736c431ca4721ba8d05156e99af79a5aac", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+unsigned g (void)\n+{\n+  char d[8];\n+  const char s[] = \"0123\";\n+  __builtin_memcpy (d, s, sizeof s);\n+  return __builtin_strlen (d);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_strlen\" \"strlen\" } } */"}, {"sha": "a4177c918ad0dcd91aa9661e240c449f1becd70d", "filename": "gcc/testsuite/gcc.dg/strlenopt-39.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-39.c?ref=05ef31736c431ca4721ba8d05156e99af79a5aac", "patch": "@@ -0,0 +1,66 @@\n+/* PR tree-optimization/83444\n+   { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+#define STR \"1234567\"\n+\n+const char str[] = STR;\n+\n+char dst[10];\n+\n+void copy_from_global_str (void)\n+{\n+  strcpy (dst, str);\n+\n+  if (strlen (dst) != sizeof str - 1)\n+    abort ();\n+}\n+\n+void copy_from_local_str (void)\n+{\n+  const char s[] = STR;\n+\n+  strcpy (dst, s);\n+\n+  if (strlen (dst) != sizeof s - 1)\n+    abort ();\n+}\n+\n+void copy_from_local_memstr (void)\n+{\n+  struct {\n+    char s[sizeof STR];\n+  } x = { STR };\n+\n+  strcpy (dst, x.s);\n+\n+  if (strlen (dst) != sizeof x.s - 1)\n+    abort ();\n+}\n+\n+void copy_to_local_str (void)\n+{\n+  char d[sizeof STR];\n+\n+  strcpy (d, str);\n+\n+  if (strlen (d) != sizeof str - 1)\n+    abort ();\n+}\n+\n+void copy_to_local_memstr (void)\n+{\n+  struct {\n+    char d[sizeof STR];\n+  } x;\n+\n+  strcpy (x.d, str);\n+\n+  if (strlen (x.d) != sizeof str- 1)\n+    abort ();\n+}\n+\n+/* Verify that all calls to strlen have been eliminated.\n+  { dg-final { scan-tree-dump-not \"(abort|strlen) \\\\(\\\\)\" \"optimized\" } } */"}, {"sha": "4e363278ea21792b6a148a387ec169e3c1646dfd", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef31736c431ca4721ba8d05156e99af79a5aac/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=05ef31736c431ca4721ba8d05156e99af79a5aac", "patch": "@@ -2773,18 +2773,40 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n }\n \n /* Check if RHS is string_cst possibly wrapped by mem_ref.  */\n-static tree\n-get_string_cst (tree rhs)\n+static int\n+get_string_len (tree rhs)\n {\n   if (TREE_CODE (rhs) == MEM_REF\n       && integer_zerop (TREE_OPERAND (rhs, 1)))\n     {\n-      rhs = TREE_OPERAND (rhs, 0);\n+      tree rhs_addr = rhs = TREE_OPERAND (rhs, 0);\n       if (TREE_CODE (rhs) == ADDR_EXPR)\n-\trhs = TREE_OPERAND (rhs, 0);\n+\t{\n+\t  rhs = TREE_OPERAND (rhs, 0);\n+\t  if (TREE_CODE (rhs) != STRING_CST)\n+\t    {\n+\t      int idx = get_stridx (rhs_addr);\n+\t      if (idx > 0)\n+\t\t{\n+\t\t  strinfo *si = get_strinfo (idx);\n+\t\t  if (si && si->full_string_p)\n+\t\t    return tree_to_shwi (si->nonzero_chars);\n+\t\t}\n+\t    }\n+\t}\n     }\n \n-  return (TREE_CODE (rhs) == STRING_CST) ? rhs : NULL_TREE;\n+  if (TREE_CODE (rhs) == VAR_DECL\n+      && TREE_READONLY (rhs))\n+    rhs = DECL_INITIAL (rhs);\n+\n+  if (rhs && TREE_CODE (rhs) == STRING_CST)\n+    {\n+      unsigned HOST_WIDE_INT ilen = strlen (TREE_STRING_POINTER (rhs));\n+      return ilen <= INT_MAX ? ilen : -1;\n+    }\n+\n+  return -1;\n }\n \n /* Handle a single character store.  */\n@@ -2799,6 +2821,9 @@ handle_char_store (gimple_stmt_iterator *gsi)\n   tree rhs = gimple_assign_rhs1 (stmt);\n   unsigned HOST_WIDE_INT offset = 0;\n \n+  /* Set to the length of the string being assigned if known.  */\n+  int rhslen;\n+\n   if (TREE_CODE (lhs) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (lhs, 0)) == SSA_NAME)\n     {\n@@ -2942,19 +2967,18 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t}\n     }\n   else if (idx == 0\n-\t   && (rhs = get_string_cst (gimple_assign_rhs1 (stmt)))\n+\t   && (rhslen = get_string_len (gimple_assign_rhs1 (stmt))) >= 0\n \t   && ssaname == NULL_TREE\n \t   && TREE_CODE (TREE_TYPE (lhs)) == ARRAY_TYPE)\n     {\n-      size_t l = strlen (TREE_STRING_POINTER (rhs));\n       HOST_WIDE_INT a = int_size_in_bytes (TREE_TYPE (lhs));\n-      if (a > 0 && (unsigned HOST_WIDE_INT) a > l)\n+      if (a > 0 && (unsigned HOST_WIDE_INT) a > (unsigned HOST_WIDE_INT) rhslen)\n \t{\n \t  int idx = new_addr_stridx (lhs);\n \t  if (idx != 0)\n \t    {\n \t      si = new_strinfo (build_fold_addr_expr (lhs), idx,\n-\t\t\t\tbuild_int_cst (size_type_node, l), true);\n+\t\t\t\tbuild_int_cst (size_type_node, rhslen), true);\n \t      set_strinfo (idx, si);\n \t      si->dont_invalidate = true;\n \t    }"}]}