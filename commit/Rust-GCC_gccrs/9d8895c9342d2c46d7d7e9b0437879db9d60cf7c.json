{"sha": "9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4ODk1YzkzNDJkMmM0NmQ3ZDdlOWIwNDM3ODc5ZGI5ZDYwY2Y3Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-26T10:06:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-26T10:06:56Z"}, "message": "rtl.h (emit): Add an optional boolean parameter to control whether barriers are emitted.\n\ngcc/\n\t* rtl.h (emit): Add an optional boolean parameter to control\n\twhether barriers are emitted.\n\t* emit-rtl.c (emit): Likewise.\n\t* gensupport.c (get_emit_function): Return null rather than \"emit\".\n\t* genemit.c (gen_emit_seq): Handle the null return value.\n\tDon't emit barriers after the final instruction in the sequence.\n\t* gentarget-def.c (main): Don't emit barriers after the instruction.\n\nFrom-SVN: r225000", "tree": {"sha": "8a2e3d3e02ca429c89dc152311efede46fcf29ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2e3d3e02ca429c89dc152311efede46fcf29ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "311bd4d8973d4ad8727e3dcf842fbc4bcfd12d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311bd4d8973d4ad8727e3dcf842fbc4bcfd12d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311bd4d8973d4ad8727e3dcf842fbc4bcfd12d7b"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "bd9abfc6702a91004925f3a26777c2d649a4e663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -1,3 +1,13 @@\n+2015-06-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (emit): Add an optional boolean parameter to control\n+\twhether barriers are emitted.\n+\t* emit-rtl.c (emit): Likewise.\n+\t* gensupport.c (get_emit_function): Return null rather than \"emit\".\n+\t* genemit.c (gen_emit_seq): Handle the null return value.\n+\tDon't emit barriers after the final instruction in the sequence.\n+\t* gentarget-def.c (main): Don't emit barriers after the instruction.\n+\n 2015-06-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (arm_output_multireg_pop): Fix use of"}, {"sha": "80c0adb1a3549e0d4dbb1ad0b5f452ba10cd97f7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -5303,11 +5303,14 @@ set_dst_reg_note (rtx insn, enum reg_note kind, rtx datum, rtx dst)\n   return NULL_RTX;\n }\n \f\n-/* Emit the rtl pattern X as an appropriate kind of insn.\n+/* Emit the rtl pattern X as an appropriate kind of insn.  Also emit a\n+   following barrier if the instruction needs one and if ALLOW_BARRIER_P\n+   is true.\n+\n    If X is a label, it is simply added into the insn chain.  */\n \n rtx_insn *\n-emit (rtx x)\n+emit (rtx x, bool allow_barrier_p)\n {\n   enum rtx_code code = classify_insn (x);\n \n@@ -5320,7 +5323,8 @@ emit (rtx x)\n     case  JUMP_INSN:\n       {\n \trtx_insn *insn = emit_jump_insn (x);\n-\tif (any_uncondjump_p (insn) || GET_CODE (x) == RETURN)\n+\tif (allow_barrier_p\n+\t    && (any_uncondjump_p (insn) || GET_CODE (x) == RETURN))\n \t  return emit_barrier ();\n \treturn insn;\n       }"}, {"sha": "4ee07a0f3bca22773766aa33ad58e1f5185afe31", "filename": "gcc/genemit.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -277,12 +277,22 @@ gen_emit_seq (rtvec vec, char *used)\n {\n   for (int i = 0, len = GET_NUM_ELEM (vec); i < len; ++i)\n     {\n+      bool last_p = (i == len - 1);\n       rtx next = RTVEC_ELT (vec, i);\n-      printf (\"  %s (\", get_emit_function (next));\n-      gen_exp (next, DEFINE_EXPAND, used);\n-      printf (\");\\n\");\n-      if (needs_barrier_p (next))\n-\tprintf (\"  emit_barrier ();\");\n+      if (const char *name = get_emit_function (next))\n+\t{\n+\t  printf (\"  %s (\", name);\n+\t  gen_exp (next, DEFINE_EXPAND, used);\n+\t  printf (\");\\n\");\n+\t  if (!last_p && needs_barrier_p (next))\n+\t    printf (\"  emit_barrier ();\");\n+\t}\n+      else\n+\t{\n+\t  printf (\"  emit (\");\n+\t  gen_exp (next, DEFINE_EXPAND, used);\n+\t  printf (\", %s);\\n\", last_p ? \"false\" : \"true\");\n+\t}\n     }\n }\n \f"}, {"sha": "729366c95461794ab195939aad58a99e6d95380f", "filename": "gcc/gensupport.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -2983,7 +2983,9 @@ get_pattern_stats (struct pattern_stats *stats, rtvec pattern)\n \t\t\t\t       stats->max_scratch_opno)) + 1;\n }\n \n-/* Return the emit_* function that should be used for pattern X.  */\n+/* Return the emit_* function that should be used for pattern X, or NULL\n+   if we can't pick a particular type at compile time and should instead\n+   fall back to \"emit\".  */\n \n const char *\n get_emit_function (rtx x)\n@@ -3000,7 +3002,7 @@ get_emit_function (rtx x)\n       return \"emit_jump_insn\";\n \n     case UNKNOWN:\n-      return \"emit\";\n+      return NULL;\n \n     default:\n       gcc_unreachable ();"}, {"sha": "c1125dde2fecdb163f2e7dc5e31bf77f25fd4e8b", "filename": "gcc/gentarget-def.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgentarget-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Fgentarget-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgentarget-def.c?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -245,7 +245,7 @@ main (int argc, char **argv)\n   printf (\"  if (rtx_insn *insn = dyn_cast <rtx_insn *> (x))\\n\");\n   printf (\"    return insn;\\n\");\n   printf (\"  start_sequence ();\\n\");\n-  printf (\"  emit (x);\\n\");\n+  printf (\"  emit (x, false);\\n\");\n   printf (\"  rtx_insn *res = get_insns ();\\n\");\n   printf (\"  end_sequence ();\\n\");\n   printf (\"  return res;\\n\");"}, {"sha": "d74c20fbed10d21c56c9e55d5794764282e02496", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8895c9342d2c46d7d7e9b0437879db9d60cf7c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9d8895c9342d2c46d7d7e9b0437879db9d60cf7c", "patch": "@@ -3494,7 +3494,7 @@ extern void add_insn (rtx_insn *);\n extern void add_insn_before (rtx, rtx, basic_block);\n extern void add_insn_after (rtx, rtx, basic_block);\n extern void remove_insn (rtx);\n-extern rtx_insn *emit (rtx);\n+extern rtx_insn *emit (rtx, bool = true);\n extern void emit_insn_at_entry (rtx);\n extern rtx gen_lowpart_SUBREG (machine_mode, rtx);\n extern rtx gen_const_mem (machine_mode, rtx);"}]}