{"sha": "97d36f455e71c16d284bc5e2735fd174673b9e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkMzZmNDU1ZTcxYzE2ZDI4NGJjNWUyNzM1ZmQxNzQ2NzNiOWUwZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-17T21:01:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-17T21:01:07Z"}, "message": "toplev.c (rest_of_compilation): Don't call optimize_mode_switching unless OPTIMIZE_MODE_SWITCHING.\n\n        * toplev.c (rest_of_compilation): Don't call optimize_mode_switching\n        unless OPTIMIZE_MODE_SWITCHING.  Conditionally set no_new_pseudos.\n        Don't call recompute_reg_usage if no_new_pseudos is true.\n        * lcm.c (optimize_mode_switching): Move ifdefs outside function.\n        Return true if we did work; update global life information.\n        * basic-block.h (optimize_mode_switching): Update decl.\n\nFrom-SVN: r33965", "tree": {"sha": "29b79c5c989692d01b7a5e6d73a5c535c51e4e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b79c5c989692d01b7a5e6d73a5c535c51e4e48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97d36f455e71c16d284bc5e2735fd174673b9e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d36f455e71c16d284bc5e2735fd174673b9e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d36f455e71c16d284bc5e2735fd174673b9e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d36f455e71c16d284bc5e2735fd174673b9e0f/comments", "author": null, "committer": null, "parents": [{"sha": "79f50f2abde174891bd80390909c410c2296fa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f50f2abde174891bd80390909c410c2296fa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f50f2abde174891bd80390909c410c2296fa10"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "577189f75aa0f70a7bf75ba2e39fa618f593c974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97d36f455e71c16d284bc5e2735fd174673b9e0f", "patch": "@@ -1,3 +1,12 @@\n+2000-05-17  Richard Henderson  <rth@cygnus.com>\n+\n+\t* toplev.c (rest_of_compilation): Don't call optimize_mode_switching\n+\tunless OPTIMIZE_MODE_SWITCHING.  Conditionally set no_new_pseudos.\n+\tDon't call recompute_reg_usage if no_new_pseudos is true.\n+\t* lcm.c (optimize_mode_switching): Move ifdefs outside function.\n+\tReturn true if we did work; update global life information.\n+\t* basic-block.h (optimize_mode_switching): Update decl.\n+\n 2000-05-17  Neil Booth  <neilb@earthling.net>\n \n \t* cpplex.c (expand_name_space): Don't use ptrdiff_t."}, {"sha": "c7ae0f863839d2dcceed9c62449b44e81fb6bd93", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=97d36f455e71c16d284bc5e2735fd174673b9e0f", "patch": "@@ -450,7 +450,7 @@ extern struct edge_list *pre_edge_rev_lcm PARAMS ((FILE *, int, sbitmap *,\n \t\t\t\t\t\t   sbitmap **));\n extern void compute_available\t\tPARAMS ((sbitmap *, sbitmap *,\n \t\t\t\t\t\t sbitmap *, sbitmap *));\n-extern void optimize_mode_switching\tPARAMS ((FILE *));\n+extern int optimize_mode_switching\tPARAMS ((FILE *));\n \n /* In emit-rtl.c.  */\n extern rtx emit_block_insn_after\tPARAMS ((rtx, rtx, basic_block));"}, {"sha": "2f9aaa8af5d50db4e5e93e0124fc6fb4d6d26a51", "filename": "gcc/lcm.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=97d36f455e71c16d284bc5e2735fd174673b9e0f", "patch": "@@ -958,16 +958,14 @@ reg_becomes_live (reg, setter, live)\n \t nregs--)\n       SET_HARD_REG_BIT (* (HARD_REG_SET *) live, regno + nregs);\n }\n-#endif\n \n-/* Find all insns that need a particular mode\n-   setting, and insert the necessary mode switches.  */\n+/* Find all insns that need a particular mode setting, and insert the\n+   necessary mode switches.  Return true if we did work.  */\n \n-void\n+int\n optimize_mode_switching (file)\n-     FILE *file ATTRIBUTE_UNUSED;\n+     FILE *file;\n {\n-#ifdef OPTIMIZE_MODE_SWITCHING\n   rtx insn;\n   int bb, e;\n   edge eg;\n@@ -994,7 +992,7 @@ optimize_mode_switching (file)\n       }\n \n   if (! n_entities)\n-    return;\n+    return 0;\n \n #ifdef MODE_USES_IN_EXIT_BLOCK\n   /* For some ABIs a particular mode setting is required at function exit.  */\n@@ -1017,7 +1015,7 @@ optimize_mode_switching (file)\n       else if (NEXT_INSN (use) == BLOCK_HEAD (bb))\n \tBLOCK_HEAD (bb) = NEXT_INSN (insn);\n     }\n-#endif\n+#endif /* MODE_USES_IN_EXIT_BLOCK */\n \n   /* Create the bitmap vectors.  */\n \n@@ -1034,7 +1032,7 @@ optimize_mode_switching (file)\n       struct bb_info *info = bb_info[j];\n \n       /* Determine what the first use (if any) need for a mode of entity E is.\n-\t This will be th mode that is anticipatable for this block.\n+\t This will be the mode that is anticipatable for this block.\n \t Also compute the initial transparency settings.  */\n       for (bb = 0 ; bb < n_basic_blocks; bb++)\n \t{\n@@ -1253,5 +1251,18 @@ optimize_mode_switching (file)\n \n   if (need_commit)\n     commit_edge_insertions ();\n-#endif /* OPTIMIZE_MODE_SWITCHING */\n+\n+  /* Ideally we'd figure out what blocks were affected and start from\n+     there, but this is enormously complicated by commit_edge_insertions,\n+     which would screw up any indicies we'd collected, and also need to\n+     be involved in the update.  Bail and recompute global life info for\n+     everything.  */\n+\n+  allocate_reg_life_data ();\n+  update_life_info (NULL, UPDATE_LIFE_GLOBAL_RM_NOTES,\n+\t\t    (PROP_DEATH_NOTES | PROP_KILL_DEAD_CODE\n+\t\t     | PROP_SCAN_DEAD_CODE | PROP_REG_INFO));\n+\n+  return 1;\n }\n+#endif /* OPTIMIZE_MODE_SWITCHING */"}, {"sha": "52f6cb821a1c0eca54fed74e04da26ba1e89d513", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d36f455e71c16d284bc5e2735fd174673b9e0f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=97d36f455e71c16d284bc5e2735fd174673b9e0f", "patch": "@@ -3234,12 +3234,22 @@ rest_of_compilation (decl)\n \tggc_collect ();\n     }\n \n-  if (optimize && n_basic_blocks)\n+#ifdef OPTIMIZE_MODE_SWITCHING\n+  if (optimize)\n     {\n       timevar_push (TV_GCSE);\n-      optimize_mode_switching (NULL_PTR);\n+\n+      if (optimize_mode_switching (NULL_PTR))\n+\t{\n+\t  /* We did work, and so had to regenerate global life information.\n+\t     Take advantage of this and don't re-recompute register life\n+\t     information below.  */\n+\t  no_new_pseudos = 1;\n+\t}\n+\n       timevar_pop (TV_GCSE);\n     }\n+#endif\n \n #ifdef INSN_SCHEDULING\n \n@@ -3280,9 +3290,7 @@ rest_of_compilation (decl)\n      RUN_JUMP_AFTER_RELOAD records whether or not we need to rerun the\n      jump optimizer after register allocation and reloading are finished.  */\n \n-  /* We recomputed reg usage as part of updating the rest\n-     of life info during sched.  */\n-  if (! flag_schedule_insns)\n+  if (! no_new_pseudos)\n     {\n       recompute_reg_usage (insns, ! optimize_size);\n "}]}