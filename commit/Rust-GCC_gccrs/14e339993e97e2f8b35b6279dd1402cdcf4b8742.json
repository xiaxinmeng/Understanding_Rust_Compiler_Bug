{"sha": "14e339993e97e2f8b35b6279dd1402cdcf4b8742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlMzM5OTkzZTk3ZTJmOGIzNWI2Mjc5ZGQxNDAyY2RjZjRiODc0Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-23T10:27:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-23T10:27:31Z"}, "message": "[multiple changes]\n\n2009-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Valid_Conversion, Full_Designated_Type): Use\n\tAvailable_View only when designated type of an anonymous access type\n\tis  limited view.\n\n2009-06-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch10.adb: Minor reformatting\n\n\t* gnat1drv.adb (Adjust_Global_Switches): New procedure (take care of\n\tturning off inlining if ASIS mode active).\n\t\n\t* switch-c.adb: Remove fiddling with Inspector_Mode and ASIS_Mode\n\tThis belongs in gnat1drv.adb after switches are scanned.\n\nFrom-SVN: r148846", "tree": {"sha": "f0311b1e502afa7ff259258722c48b933768c5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0311b1e502afa7ff259258722c48b933768c5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e339993e97e2f8b35b6279dd1402cdcf4b8742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e339993e97e2f8b35b6279dd1402cdcf4b8742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e339993e97e2f8b35b6279dd1402cdcf4b8742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e339993e97e2f8b35b6279dd1402cdcf4b8742/comments", "author": null, "committer": null, "parents": [{"sha": "b6d83244a33d27cfbe781ea4ce693cd9280f1860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d83244a33d27cfbe781ea4ce693cd9280f1860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d83244a33d27cfbe781ea4ce693cd9280f1860"}], "stats": {"total": 283, "additions": 156, "deletions": 127}, "files": [{"sha": "3c43824fc7f5c5b9610f6ac5ed18571d69cedd63", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=14e339993e97e2f8b35b6279dd1402cdcf4b8742", "patch": "@@ -1,3 +1,19 @@\n+2009-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion, Full_Designated_Type): Use\n+\tAvailable_View only when designated type of an anonymous access type\n+\tis  limited view.\n+\n+2009-06-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch10.adb: Minor reformatting\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): New procedure (take care of\n+\tturning off inlining if ASIS mode active).\n+\t\n+\t* switch-c.adb: Remove fiddling with Inspector_Mode and ASIS_Mode\n+\tThis belongs in gnat1drv.adb after switches are scanned.\n+\n 2009-06-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_attr.adb: Add with and use clauses for Sem_Ch10."}, {"sha": "93f2297bc0235784b7f20507fad6fe4ddf7406bf", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 123, "deletions": 78, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=14e339993e97e2f8b35b6279dd1402cdcf4b8742", "patch": "@@ -83,6 +83,13 @@ procedure Gnat1drv is\n    Back_End_Mode : Back_End.Back_End_Mode_Type;\n    --  Record back end mode\n \n+   procedure Adjust_Global_Switches;\n+   --  There are various interactions between front end switch settings,\n+   --  including debug switch settings and target dependent parameters.\n+   --  This procedure takes care of properly handling these interactions.\n+   --  We do it after scanning out all the switches, that way we are not\n+   --  depending on the order in which switches appear.\n+\n    procedure Check_Bad_Body;\n    --  Called to check if the unit we are compiling has a bad body\n \n@@ -95,6 +102,121 @@ procedure Gnat1drv is\n    pragma Warnings (Off, Check_Library_Items);\n    --  In case the call below is commented out\n \n+   ----------------------------\n+   -- Adjust_Global_Switches --\n+   ----------------------------\n+\n+   procedure Adjust_Global_Switches is\n+   begin\n+\n+      --  Set ASIS mode if -gnatt and -gnatc are set\n+\n+      if Operating_Mode = Check_Semantics and then Tree_Output then\n+         ASIS_Mode := True;\n+\n+         --  Turn off inlining in ASIS mode, since ASIS cannot handle the extra\n+         --  information in the trees caused by inlining being active.\n+\n+         --  More specifically, the tree seems to malformed from the ASIS point\n+         --  of view if -gnatc and -gnatn appear together ???\n+\n+         Inline_Active := False;\n+\n+         --  Turn off inspector mode in ASIS mode. For reasons that need\n+         --  clearer documentation, Inspector cannot function in this mode ???\n+\n+         Inspector_Mode := False;\n+      end if;\n+\n+      --  Inspeector mode requires back-end rep info and also needs to disable\n+      --  front-end inlining (but -gnatn does not need to be disabled).\n+\n+      if Inspector_Mode then\n+         Back_Annotate_Rep_Info := True;\n+         Front_End_Inlining := False;\n+      end if;\n+\n+      --  Set Configurable_Run_Time mode if system.ads flag set\n+\n+      if Targparm.Configurable_Run_Time_On_Target or Debug_Flag_YY then\n+         Configurable_Run_Time_Mode := True;\n+      end if;\n+\n+      --  Set -gnatR3m mode if debug flag A set\n+\n+      if Debug_Flag_AA then\n+         Back_Annotate_Rep_Info := True;\n+         List_Representation_Info := 1;\n+         List_Representation_Info_Mechanisms := True;\n+      end if;\n+\n+      --  Force Target_Strict_Alignment true if debug flag -gnatd.a is set\n+\n+      if Debug_Flag_Dot_A then\n+         Ttypes.Target_Strict_Alignment := True;\n+      end if;\n+\n+      --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n+      --  is enabled. The front end's layout phase currently treats types that\n+      --  have discriminant-dependent arrays as not being static even when a\n+      --  discriminant constraint on the type is static, and this leads to\n+      --  problems with subtypes of type Ada.Tags.Dispatch_Table_Wrapper. ???\n+\n+      if Debug_Flag_Dot_T or else Frontend_Layout_On_Target then\n+         Static_Dispatch_Tables := False;\n+      end if;\n+\n+      --  Flip endian mode if -gnatd8 set\n+\n+      if Debug_Flag_8 then\n+         Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n+      end if;\n+\n+      --  Deal with forcing OpenVMS switches True if debug flag M is set, but\n+      --  record the setting of Targparm.Open_VMS_On_Target in True_VMS_Target\n+      --  before doing this, so we know if we are in real openVMS or not!\n+\n+      Opt.True_VMS_Target := Targparm.OpenVMS_On_Target;\n+\n+      if Debug_Flag_M then\n+         Targparm.OpenVMS_On_Target := True;\n+         Hostparm.OpenVMS := True;\n+      end if;\n+\n+      --  Activate front end layout if debug flag -gnatdF is set\n+\n+      if Debug_Flag_FF then\n+         Targparm.Frontend_Layout_On_Target := True;\n+      end if;\n+\n+      --  Set and check exception mechnism\n+\n+      if Targparm.ZCX_By_Default_On_Target then\n+         if Targparm.GCC_ZCX_Support_On_Target then\n+            Exception_Mechanism := Back_End_Exceptions;\n+         else\n+            Osint.Fail (\"Zero Cost Exceptions not supported on this target\");\n+         end if;\n+      end if;\n+\n+      --  Set proper status for overflow checks. We turn on overflow checks\n+      --  if -gnatp was not specified, and either -gnato is set or the back\n+      --  end takes care of overflow checks. Otherwise we suppress overflow\n+      --  checks by default (since front end checks are expensive).\n+\n+      if not Opt.Suppress_Checks\n+        and then (Opt.Enable_Overflow_Checks\n+                    or else\n+                      (Targparm.Backend_Divide_Checks_On_Target\n+                        and\n+                       Targparm.Backend_Overflow_Checks_On_Target))\n+      then\n+         Suppress_Options (Overflow_Check) := False;\n+      else\n+         Suppress_Options (Overflow_Check) := True;\n+      end if;\n+   end Adjust_Global_Switches;\n+\n    --------------------\n    -- Check_Bad_Body --\n    --------------------\n@@ -359,35 +481,7 @@ begin\n          Restrict.Restrictions := Targparm.Restrictions_On_Target;\n       end;\n \n-      --  Set Configurable_Run_Time mode if system.ads flag set\n-\n-      if Targparm.Configurable_Run_Time_On_Target or Debug_Flag_YY then\n-         Configurable_Run_Time_Mode := True;\n-      end if;\n-\n-      --  Set -gnatR3m mode if debug flag A set\n-\n-      if Debug_Flag_AA then\n-         Back_Annotate_Rep_Info := True;\n-         List_Representation_Info := 1;\n-         List_Representation_Info_Mechanisms := True;\n-      end if;\n-\n-      --  Force Target_Strict_Alignment true if debug flag -gnatd.a is set\n-\n-      if Debug_Flag_Dot_A then\n-         Ttypes.Target_Strict_Alignment := True;\n-      end if;\n-\n-      --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n-      --  is enabled. The front end's layout phase currently treats types that\n-      --  have discriminant-dependent arrays as not being static even when a\n-      --  discriminant constraint on the type is static, and this leads to\n-      --  problems with subtypes of type Ada.Tags.Dispatch_Table_Wrapper. ???\n-\n-      if Debug_Flag_Dot_T or else Frontend_Layout_On_Target then\n-         Static_Dispatch_Tables := False;\n-      end if;\n+      Adjust_Global_Switches;\n \n       --  Output copyright notice if full list mode unless we have a list\n       --  file, in which case we defer this so that it is output in the file\n@@ -405,55 +499,6 @@ begin\n          Write_Eol;\n       end if;\n \n-      --  Before we do anything else, adjust certain global values for\n-      --  debug switches which modify their normal natural settings.\n-\n-      if Debug_Flag_8 then\n-         Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n-      end if;\n-\n-      --  Deal with forcing OpenVMS switches Ture if debug flag M is set, but\n-      --  record the setting of Targparm.Open_VMS_On_Target in True_VMS_Target\n-      --  before doing this.\n-\n-      Opt.True_VMS_Target := Targparm.OpenVMS_On_Target;\n-\n-      if Debug_Flag_M then\n-         Targparm.OpenVMS_On_Target := True;\n-         Hostparm.OpenVMS := True;\n-      end if;\n-\n-      if Debug_Flag_FF then\n-         Targparm.Frontend_Layout_On_Target := True;\n-      end if;\n-\n-      --  We take the default exception mechanism into account\n-\n-      if Targparm.ZCX_By_Default_On_Target then\n-         if Targparm.GCC_ZCX_Support_On_Target then\n-            Exception_Mechanism := Back_End_Exceptions;\n-         else\n-            Osint.Fail (\"Zero Cost Exceptions not supported on this target\");\n-         end if;\n-      end if;\n-\n-      --  Set proper status for overflow checks. We turn on overflow checks\n-      --  if -gnatp was not specified, and either -gnato is set or the back\n-      --  end takes care of overflow checks. Otherwise we suppress overflow\n-      --  checks by default (since front end checks are expensive).\n-\n-      if not Opt.Suppress_Checks\n-        and then (Opt.Enable_Overflow_Checks\n-                    or else\n-                      (Targparm.Backend_Divide_Checks_On_Target\n-                        and\n-                       Targparm.Backend_Overflow_Checks_On_Target))\n-      then\n-         Suppress_Options (Overflow_Check) := False;\n-      else\n-         Suppress_Options (Overflow_Check) := True;\n-      end if;\n-\n       --  Check we do not have more than one source file, this happens only in\n       --  the case where the driver is called directly, it cannot happen when\n       --  gnat1 is invoked from gcc in the normal case."}, {"sha": "6e7789914cb989e83daee50057182d195cb7cc88", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=14e339993e97e2f8b35b6279dd1402cdcf4b8742", "patch": "@@ -4915,7 +4915,6 @@ package body Sem_Ch10 is\n \n    function Is_Legal_Shadow_Entity_In_Body (T : Entity_Id) return Boolean is\n       C_Unit : constant Node_Id := Cunit (Current_Sem_Unit);\n-\n    begin\n       return Nkind (Unit (C_Unit)) = N_Package_Body\n         and then Has_With_Clause (C_Unit,"}, {"sha": "a662d5bf46a40ead89bbf54b83d9e56866ce9b23", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=14e339993e97e2f8b35b6279dd1402cdcf4b8742", "patch": "@@ -57,7 +57,6 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n-with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n@@ -9609,9 +9608,10 @@ package body Sem_Res is\n             end if;\n          end if;\n \n-         --  Need some comments here, and a name for this block ???\n+         --  In the presence of limited_with clauses we have to use non-limited\n+         --  views, if available.\n \n-         declare\n+         Check_Limited : declare\n             function Full_Designated_Type (T : Entity_Id) return Entity_Id;\n             --  Helper function to handle limited views\n \n@@ -9623,17 +9623,23 @@ package body Sem_Res is\n                Desig : Entity_Id := Designated_Type (T);\n \n             begin\n-               --  Detect a legal use of a shadow entity\n-\n                if Is_Incomplete_Type (Desig)\n                  and then From_With_Type (Desig)\n                  and then Present (Non_Limited_View (Desig))\n-                 and then Is_Legal_Shadow_Entity_In_Body (Desig)\n                then\n                   Desig := Non_Limited_View (Desig);\n+\n+                  --  The shadow entity's non-limited view may designate an\n+                  --  incomplete type.\n+\n+                  if Is_Incomplete_Type (Desig)\n+                    and then Present (Full_View (Desig))\n+                  then\n+                     Desig := Full_View (Desig);\n+                  end if;\n                end if;\n \n-               return Available_View (Desig);\n+               return Desig;\n             end Full_Designated_Type;\n \n             --  Local Declarations\n@@ -9644,7 +9650,7 @@ package body Sem_Res is\n             Same_Base : constant Boolean :=\n                           Base_Type (Target) = Base_Type (Opnd);\n \n-         --  Start of processing for ???\n+         --  Start of processing for Check_Limited\n \n          begin\n             if Is_Tagged_Type (Target) then\n@@ -9698,7 +9704,7 @@ package body Sem_Res is\n                   return False;\n                end if;\n             end if;\n-         end;\n+         end Check_Limited;\n \n       --  Access to subprogram types. If the operand is an access parameter,\n       --  the type has a deeper accessibility that any master, and cannot"}, {"sha": "c860af4e4101dac3804911ecf525fb0db66ed4e6", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e339993e97e2f8b35b6279dd1402cdcf4b8742/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=14e339993e97e2f8b35b6279dd1402cdcf4b8742", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -228,11 +228,6 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Operating_Mode := Check_Semantics;\n \n-               if Tree_Output then\n-                  ASIS_Mode := True;\n-                  Inspector_Mode := False;\n-               end if;\n-\n             --  Processing for d switch\n \n             when 'd' =>\n@@ -257,25 +252,6 @@ package body Switch.C is\n                      if Dot then\n                         Set_Dotted_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd.\" & C);\n-\n-                        --  ??? Change this when we use a non debug flag to\n-                        --  enable inspector mode.\n-\n-                        if C = 'I' then\n-                           if ASIS_Mode then\n-                              --  Do not enable inspector mode in ASIS mode,\n-                              --  since the two switches are incompatible.\n-\n-                              Inspector_Mode := False;\n-\n-                           else\n-                              --  In inspector mode, we need back-end rep info\n-                              --  annotations and disable front-end inlining.\n-\n-                              Back_Annotate_Rep_Info := True;\n-                              Front_End_Inlining := False;\n-                           end if;\n-                        end if;\n                      else\n                         Set_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd\" & C);\n@@ -652,14 +628,7 @@ package body Switch.C is\n             when 'N' =>\n                Ptr := Ptr + 1;\n                Inline_Active := True;\n-\n-               --  Do not enable front-end inlining in inspector mode, to\n-               --  generate trees that can be converted to SCIL. We still\n-               --  enable back-end inlining which is fine.\n-\n-               if not Inspector_Mode then\n-                  Front_End_Inlining := True;\n-               end if;\n+               Front_End_Inlining := True;\n \n             --  Processing for o switch\n \n@@ -769,12 +738,6 @@ package body Switch.C is\n             when 't' =>\n                Ptr := Ptr + 1;\n                Tree_Output := True;\n-\n-               if Operating_Mode = Check_Semantics then\n-                  ASIS_Mode := True;\n-                  Inspector_Mode := False;\n-               end if;\n-\n                Back_Annotate_Rep_Info := True;\n \n             --  Processing for T switch"}]}