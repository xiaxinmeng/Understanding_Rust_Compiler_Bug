{"sha": "77bce07cce1eee85627b0deb61f3ecf6e0da461f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiY2UwN2NjZTFlZWU4NTYyN2IwZGViNjFmM2VjZjZlMGRhNDYxZg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-04-24T20:27:33Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-04-24T20:27:33Z"}, "message": "re PR rtl-optimization/57046 (wrong code generated by gcc 4.8.0 on i686)\n\n2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimizations/57046\n\t* lra-constraints (split_reg): Set up lra_risky_transformations_p\n\tfor multi-reg splits.\n\n2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimizations/57046\n\t* gcc.target/i386/pr57046.c: New test.\n\nFrom-SVN: r198263", "tree": {"sha": "b6ddc9d79010428fd98fc997fa4e36e433e28267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ddc9d79010428fd98fc997fa4e36e433e28267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77bce07cce1eee85627b0deb61f3ecf6e0da461f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bce07cce1eee85627b0deb61f3ecf6e0da461f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bce07cce1eee85627b0deb61f3ecf6e0da461f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bce07cce1eee85627b0deb61f3ecf6e0da461f/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0db63e7fd0cb07d6882cd78f79fcfe067145a334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db63e7fd0cb07d6882cd78f79fcfe067145a334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db63e7fd0cb07d6882cd78f79fcfe067145a334"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "b812431d1d46281239d3169ac898eb120e11e9f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77bce07cce1eee85627b0deb61f3ecf6e0da461f", "patch": "@@ -1,3 +1,9 @@\n+2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimizations/57046\n+\t* lra-constraints (split_reg): Set up lra_risky_transformations_p\n+\tfor multi-reg splits.\n+\n 2013-04-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/x86-64.h (ASM_SPEC): Support -mx32."}, {"sha": "d364ef3407f08458637846814726316b4039b75f", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=77bce07cce1eee85627b0deb61f3ecf6e0da461f", "patch": "@@ -4198,7 +4198,7 @@ split_reg (bool before_p, int original_regno, rtx insn, rtx next_usage_insns)\n {\n   enum reg_class rclass;\n   rtx original_reg;\n-  int hard_regno;\n+  int hard_regno, nregs;\n   rtx new_reg, save, restore, usage_insn;\n   bool after_p;\n   bool call_save_p;\n@@ -4208,10 +4208,12 @@ split_reg (bool before_p, int original_regno, rtx insn, rtx next_usage_insns)\n       rclass = ira_allocno_class_translate[REGNO_REG_CLASS (original_regno)];\n       hard_regno = original_regno;\n       call_save_p = false;\n+      nregs = 1;\n     }\n   else\n     {\n       hard_regno = reg_renumber[original_regno];\n+      nregs = hard_regno_nregs[hard_regno][PSEUDO_REGNO_MODE (original_regno)];\n       rclass = lra_get_allocno_class (original_regno);\n       original_reg = regno_reg_rtx[original_regno];\n       call_save_p = need_for_call_save_p (original_regno);\n@@ -4324,6 +4326,13 @@ split_reg (bool before_p, int original_regno, rtx insn, rtx next_usage_insns)\n \t\t\t before_p ? NULL_RTX : save,\n \t\t\t call_save_p\n \t\t\t ?  \"Add save<-reg\" : \"Add split<-reg\");\n+  if (nregs > 1)\n+    /* If we are trying to split multi-register.  We should check\n+       conflicts on the next assignment sub-pass.  IRA can allocate on\n+       sub-register levels, LRA do this on pseudos level right now and\n+       this discrepancy may create allocation conflicts after\n+       splitting.  */\n+    lra_risky_transformations_p = true;\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file,\n \t     \"\t  ))))))))))))))))))))))))))))))))))))))))))))))))\\n\");"}, {"sha": "2eaa45366e01869c7b73eae37f1fefb5084bd8ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77bce07cce1eee85627b0deb61f3ecf6e0da461f", "patch": "@@ -1,3 +1,8 @@\n+2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimizations/57046\n+\t* gcc.target/i386/pr57046.c: New test.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp1y/cplusplus.C: New."}, {"sha": "0aa43f9df6a6b9ad5e023e33c7b267895b23280f", "filename": "gcc/testsuite/gcc.target/i386/pr57046.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57046.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bce07cce1eee85627b0deb61f3ecf6e0da461f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57046.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57046.c?ref=77bce07cce1eee85627b0deb61f3ecf6e0da461f", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct emac {\n+        unsigned reg[23];\n+};\n+\n+struct mop {\n+        unsigned long long addr;\n+        unsigned int size;\n+};\n+\n+unsigned int __attribute__((__noinline__))\n+level(const struct emac *obj)\n+{\n+\treturn 0;\n+}\n+\n+void __attribute__((__noinline__))\n+info(struct emac *dev, unsigned long long addr)\n+{\n+\tasm(\"\" : : : \"memory\");\n+}\n+\n+unsigned long long __attribute__((__noinline__))\n+get_value(const struct mop *mop)\n+{\n+        return 0x1234567890abcdefull;\n+}\n+\n+int __attribute__((__noinline__))\n+emac_operation(struct emac *obj, struct mop *mop)\n+{\n+        unsigned long long addr = mop->addr;\n+        int index = addr >> 2;\n+\tunsigned int value, old_value;\n+\n+        if (mop->size != 4)\n+                return 0;\n+\n+        if (index >= 23) {\n+                if (level(obj) >= 1)\n+                        info(obj, addr);\n+                return 0;\n+        }\n+\n+        value = get_value(mop);\n+        old_value = obj->reg[index];\n+\n+        info(obj, 0);\n+\n+        switch (index) {\n+        case 0:\n+                obj->reg[0] = old_value;\n+                break;\n+        case 7:\n+        case 8:\n+                obj->reg[index] = value;\n+                break;\n+        }\n+\n+        return 0;\n+}\n+\n+int main(void)\n+{\n+\tstruct emac e = { { 0 } };\n+\tstruct mop mop = { 32, 4 };\n+\n+\te.reg[8] = 0xdeadbeef;\n+\temac_operation(&e, &mop);\n+\n+\tif (e.reg[8] != 0x90abcdef)\n+\t   __builtin_abort();\n+\n+\t   return 0;\n+}"}]}