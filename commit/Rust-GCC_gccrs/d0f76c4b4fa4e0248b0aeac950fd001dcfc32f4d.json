{"sha": "d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmNzZjNGI0ZmE0ZTAyNDhiMGFlYWM5NTBmZDAwMWRjZmMzMmY0ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-10T16:59:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-10T16:59:06Z"}, "message": "re PR tree-optimization/34683 (SSA rewriting in the loop unroller causes quadratic behavior)\n\n2008-01-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34683\n\t* tree-cfg.c (tree_merge_blocks): Do not go through the\n\tfull-blown folding and stmt updating path if we just deal\n\twith virtual operands.\n\t* tree-ssa-copy.c (may_propagate_copy): Do not short-cut\n\ttest for abnormal SSA_NAMEs.\n\nFrom-SVN: r131446", "tree": {"sha": "afc9546800253c22fc041a6064d3cc8ed6f5848e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc9546800253c22fc041a6064d3cc8ed6f5848e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90d12f1f04dc8a9e11716c79d2411eb922c13b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d12f1f04dc8a9e11716c79d2411eb922c13b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d12f1f04dc8a9e11716c79d2411eb922c13b49"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "b5a0c314fbf66c53a6672b6a4c958fc5922fa5f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "patch": "@@ -1,3 +1,12 @@\n+2008-01-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34683\n+\t* tree-cfg.c (tree_merge_blocks): Do not go through the\n+\tfull-blown folding and stmt updating path if we just deal\n+\twith virtual operands.\n+\t* tree-ssa-copy.c (may_propagate_copy): Do not short-cut\n+\ttest for abnormal SSA_NAMEs.\n+\n 2008-01-10  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR middle-end/34641"}, {"sha": "8da55ff7cd958418654b69517ee6d24fc9e8feff", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "patch": "@@ -1322,7 +1322,21 @@ tree_merge_blocks (basic_block a, basic_block b)\n \t}\n       else\n         {\n-          replace_uses_by (def, use);\n+\t  /* If we deal with a PHI for virtual operands, we can simply\n+\t     propagate these without fussing with folding or updating\n+\t     the stmt.  */\n+\t  if (!is_gimple_reg (def))\n+\t    {\n+\t      imm_use_iterator iter;\n+\t      use_operand_p use_p;\n+\t      tree stmt;\n+\n+\t      FOR_EACH_IMM_USE_STMT (stmt, iter, def)\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t  SET_USE (use_p, use);\n+\t    }\n+\t  else\n+            replace_uses_by (def, use);\n           remove_phi_node (phi, NULL, true);\n         }\n     }"}, {"sha": "7ae6825d3e6b92ac0fb7c091a8d09681fcaecb17", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=d0f76c4b4fa4e0248b0aeac950fd001dcfc32f4d", "patch": "@@ -62,6 +62,17 @@ may_propagate_copy (tree dest, tree orig)\n   tree type_d = TREE_TYPE (dest);\n   tree type_o = TREE_TYPE (orig);\n \n+  /* If ORIG flows in from an abnormal edge, it cannot be propagated.  */\n+  if (TREE_CODE (orig) == SSA_NAME\n+      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig))\n+    return false;\n+\n+  /* If DEST is an SSA_NAME that flows from an abnormal edge, then it\n+     cannot be replaced.  */\n+  if (TREE_CODE (dest) == SSA_NAME\n+      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n+    return false;\n+\n   /* For memory partitions, copies are OK as long as the memory symbol\n      belongs to the partition.  */\n   if (TREE_CODE (dest) == SSA_NAME\n@@ -164,17 +175,6 @@ may_propagate_copy (tree dest, tree orig)\n       return false;\n     }\n \n-  /* If ORIG flows in from an abnormal edge, it cannot be propagated.  */\n-  if (TREE_CODE (orig) == SSA_NAME\n-      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig))\n-    return false;\n-\n-  /* If DEST is an SSA_NAME that flows from an abnormal edge, then it\n-     cannot be replaced.  */\n-  if (TREE_CODE (dest) == SSA_NAME\n-      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n-    return false;\n-\n   /* Anything else is OK.  */\n   return true;\n }"}]}