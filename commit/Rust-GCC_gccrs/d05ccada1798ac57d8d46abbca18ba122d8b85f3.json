{"sha": "d05ccada1798ac57d8d46abbca18ba122d8b85f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1Y2NhZGExNzk4YWM1N2Q4ZDQ2YWJiY2ExOGJhMTIyZDhiODVmMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-05-19T12:32:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-05-19T12:32:55Z"}, "message": "re PR fortran/90498 (ICE with select type/associate and derived type argument containing class(*))\n\n2019-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/90498\n\t* trans-stmt.c (trans_associate_var) Do not use the saved\n\tdescriptor if the expression is a COMPONENT_REF.\n\n2019-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/90498\n\t* gfortran.dg/associate_48.f90 : New test.\n\nFrom-SVN: r271380", "tree": {"sha": "41db59a00a654e2f7ceec3eb942d0ed4fd6def26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41db59a00a654e2f7ceec3eb942d0ed4fd6def26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d05ccada1798ac57d8d46abbca18ba122d8b85f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05ccada1798ac57d8d46abbca18ba122d8b85f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05ccada1798ac57d8d46abbca18ba122d8b85f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05ccada1798ac57d8d46abbca18ba122d8b85f3/comments", "author": null, "committer": null, "parents": [{"sha": "20733f1b0db2770532afaff274e9231de37e50fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20733f1b0db2770532afaff274e9231de37e50fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20733f1b0db2770532afaff274e9231de37e50fc"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "dd54e59de674df00b89a5319cc0c397bfd88a462", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d05ccada1798ac57d8d46abbca18ba122d8b85f3", "patch": "@@ -1,3 +1,9 @@\n+2019-05-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/90498\n+\t* trans-stmt.c (trans_associate_var) Do not use the saved\n+\tdescriptor if the expression is a COMPONENT_REF.\n+\n 2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90329"}, {"sha": "5fa182bf05a936116d9b5105954072754c87d891", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d05ccada1798ac57d8d46abbca18ba122d8b85f3", "patch": "@@ -1858,7 +1858,8 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t    {\n \t      if (e->symtree\n \t\t  && DECL_LANG_SPECIFIC (e->symtree->n.sym->backend_decl)\n-\t\t && GFC_DECL_SAVED_DESCRIPTOR (e->symtree->n.sym->backend_decl))\n+\t\t  && GFC_DECL_SAVED_DESCRIPTOR (e->symtree->n.sym->backend_decl)\n+\t\t  && TREE_CODE (target_expr) != COMPONENT_REF)\n \t\t/* Use the original class descriptor stored in the saved\n \t\t   descriptor to get the target_expr.  */\n \t\ttarget_expr ="}, {"sha": "fe971aa85d313386e63972446f53b0a4b251d1b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d05ccada1798ac57d8d46abbca18ba122d8b85f3", "patch": "@@ -1,3 +1,8 @@\n+2019-05-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/90498\n+\t* gfortran.dg/associate_48.f90 : New test.\n+\n 2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/78290\n@@ -429,7 +434,7 @@\n \n 2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>\n \n-\t* lib/target-supports.exp \n+\t* lib/target-supports.exp\n \t(check_effective_target_powerpc_p8vector_ok): No support for Darwin.\n \t(check_effective_target_powerpc_p9vector_ok): Likewise.\n \t(check_effective_target_powerpc_float128_sw_ok): Likewise."}, {"sha": "5ce3a496d14a4c3f8e6b3a7d908a6cf5ff142a69", "filename": "gcc/testsuite/gfortran.dg/associate_48.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05ccada1798ac57d8d46abbca18ba122d8b85f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_48.f90?ref=d05ccada1798ac57d8d46abbca18ba122d8b85f3", "patch": "@@ -0,0 +1,41 @@\n+! { dg=do run }\n+!\n+! Test the fix for PR90498.\n+!\n+! Contributed by Vladimir Fuka  <vladimir.fuka@gmail.com>\n+!\n+  type field_names_a\n+    class(*), pointer :: var(:) =>null()\n+  end type\n+\n+  type(field_names_a),pointer :: a(:)\n+  allocate (a(2))\n+\n+  allocate (a(1)%var(2), source = [\"hello\",\" vlad\"])\n+  allocate (a(2)%var(2), source = [\"HELLO\",\" VLAD\"])\n+  call s(a)\n+  deallocate (a(1)%var)\n+  deallocate (a(2)%var)\n+  deallocate (a)\n+contains\n+  subroutine s(a)\n+\n+    type(field_names_a) :: a(:)\n+\n+    select type (var => a(1)%var)\n+      type is (character(*))\n+        if (any (var .ne. [\"hello\",\" vlad\"])) stop 1\n+      class default\n+        stop\n+    end select\n+\n+    associate (var => a(2)%var)\n+      select type (var)\n+        type is (character(*))\n+          if (any (var .ne. [\"HELLO\",\" VLAD\"])) stop 2\n+        class default\n+          stop\n+      end select\n+    end associate\n+  end\n+end"}]}