{"sha": "f91caacb455ba93610b3cb751d88d36aa58b3a58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxY2FhY2I0NTViYTkzNjEwYjNjYjc1MWQ4OGQzNmFhNThiM2E1OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-16T11:20:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-16T11:20:45Z"}, "message": "freeze.adb (Freeze_Record_Type): Extend pragma Implicit_Packing to components of any elementary types and of...\n\n\t* freeze.adb (Freeze_Record_Type): Extend pragma Implicit_Packing to\n\tcomponents of any elementary types and of composite types.\n\nFrom-SVN: r236282", "tree": {"sha": "7f841b94ecb28b1afec0bf503348e58216209352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f841b94ecb28b1afec0bf503348e58216209352"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f91caacb455ba93610b3cb751d88d36aa58b3a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91caacb455ba93610b3cb751d88d36aa58b3a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91caacb455ba93610b3cb751d88d36aa58b3a58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91caacb455ba93610b3cb751d88d36aa58b3a58/comments", "author": null, "committer": null, "parents": [{"sha": "3d626f94a57abb404b6693538471d92977a97567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d626f94a57abb404b6693538471d92977a97567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d626f94a57abb404b6693538471d92977a97567"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "246c7703490b73525cacd98ac8e23143d08aee57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91caacb455ba93610b3cb751d88d36aa58b3a58/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91caacb455ba93610b3cb751d88d36aa58b3a58/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f91caacb455ba93610b3cb751d88d36aa58b3a58", "patch": "@@ -1,3 +1,8 @@\n+2016-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Extend pragma Implicit_Packing to\n+\tcomponents of any elementary types and of composite types.\n+\n 2016-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* freeze.adb (Freeze_Array_Type): Call Addressable predicate instead"}, {"sha": "ec8ea2c3a4e0a08423dfca5cd335c43d8b93afa1", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91caacb455ba93610b3cb751d88d36aa58b3a58/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91caacb455ba93610b3cb751d88d36aa58b3a58/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f91caacb455ba93610b3cb751d88d36aa58b3a58", "patch": "@@ -3534,13 +3534,23 @@ package body Freeze is\n          --  Set True if we find at least one component whose type has a\n          --  Scalar_Storage_Order attribute definition clause.\n \n-         All_Scalar_Components : Boolean := True;\n-         --  Set False if we encounter a component of a non-scalar type\n+         All_Elem_Components : Boolean := True;\n+         --  Set False if we encounter a component of a composite type\n \n-         Scalar_Component_Total_RM_Size : Uint := Uint_0;\n-         Scalar_Component_Total_Esize   : Uint := Uint_0;\n-         --  Accumulates total RM_Size values and total Esize values of all\n-         --  scalar components. Used for processing of Implicit_Packing.\n+         All_Sized_Components : Boolean := True;\n+         --  Set False if we encounter a component with unknown RM_Size\n+\n+         All_Storage_Unit_Components : Boolean := True;\n+         --  Set False if we encounter a component of a composite type whose\n+         --  RM_Size is not a multiple of the storage unit.\n+\n+         Elem_Component_Total_Esize : Uint := Uint_0;\n+         --  Accumulates total Esize values of all elementary components. Used\n+         --  for processing of Implicit_Packing.\n+\n+         Sized_Component_Total_RM_Size : Uint := Uint_0;\n+         --  Accumulates total RM_Size values of all sized components. Used\n+         --  for processing of Implicit_Packing.\n \n          function Check_Allocator (N : Node_Id) return Node_Id;\n          --  If N is an allocator, possibly wrapped in one or more level of\n@@ -3835,13 +3845,22 @@ package body Freeze is\n             --  this stage we might be dealing with a real component, or with\n             --  an implicit subtype declaration.\n \n-            if not Is_Scalar_Type (Etype (Comp)) then\n-               All_Scalar_Components := False;\n+            if Known_Static_RM_Size (Etype (Comp)) then\n+               Sized_Component_Total_RM_Size :=\n+                 Sized_Component_Total_RM_Size + RM_Size (Etype (Comp));\n+\n+               if Is_Elementary_Type (Etype (Comp)) then\n+                  Elem_Component_Total_Esize :=\n+                    Elem_Component_Total_Esize + Esize (Etype (Comp));\n+               else\n+                  All_Elem_Components := False;\n+\n+                  if RM_Size (Etype (Comp)) mod System_Storage_Unit /= 0 then\n+                     All_Storage_Unit_Components := False;\n+                  end if;\n+               end if;\n             else\n-               Scalar_Component_Total_RM_Size :=\n-                 Scalar_Component_Total_RM_Size + RM_Size (Etype (Comp));\n-               Scalar_Component_Total_Esize :=\n-                 Scalar_Component_Total_Esize + Esize (Etype (Comp));\n+               All_Sized_Components := False;\n             end if;\n \n             --  If the component is an Itype with Delayed_Freeze and is either\n@@ -4312,26 +4331,33 @@ package body Freeze is\n \n            and then not Aliased_Component\n \n-           --  Must have size clause and all scalar components\n+           --  Must have size clause and all sized components\n \n            and then Has_Size_Clause (Rec)\n-           and then All_Scalar_Components\n+           and then All_Sized_Components\n \n            --  Do not try implicit packing on records with discriminants, too\n            --  complicated, especially in the variant record case.\n \n            and then not Has_Discriminants (Rec)\n \n-           --  We can implicitly pack if the specified size of the record is\n-           --  less than the sum of the object sizes (no point in packing if\n-           --  this is not the case).\n+           --  We want to implicitly pack if the specified size of the record\n+           --  is less than the sum of the object sizes (no point in packing\n+           --  if this is not the case) if we can compute it, i.e. if we have\n+           --  only elementary components. Otherwise, we have at least one\n+           --  composite component and we want to implicit pack only if bit\n+           --  packing is required for it, as we are sure in this case that\n+           --  the back end cannot do the expected layout without packing.\n \n-           and then RM_Size (Rec) < Scalar_Component_Total_Esize\n+           and then ((All_Elem_Components\n+                       and then RM_Size (Rec) < Elem_Component_Total_Esize)\n+                     or else (not All_Elem_Components\n+                               and then not All_Storage_Unit_Components))\n \n            --  And the total RM size cannot be greater than the specified size\n            --  since otherwise packing will not get us where we have to be.\n \n-           and then RM_Size (Rec) >= Scalar_Component_Total_RM_Size\n+           and then RM_Size (Rec) >= Sized_Component_Total_RM_Size\n \n            --  Never do implicit packing in CodePeer or SPARK modes since\n            --  we don't do any packing in these modes, since this generates"}]}