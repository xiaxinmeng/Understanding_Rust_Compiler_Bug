{"sha": "9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQwZGM0N2RlNmVkOTYwOWZlNzQ0NWVhMDk0MWE2YTgyMmM4MGY4OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-26T03:14:31Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-26T03:41:15Z"}, "message": "Fix non-comforming expander for floatv2div2sf2,floatunsv2div2sf2,fix_truncv2sfv2di,fixuns_truncv2sfv2di.\n\n2020-05-26  Hongtao Liu  <hongtao.liu@intel.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/95211\n\tPR target/95256\n\t* config/i386/sse.md (<floatunssuffix>v2div2sf2): New expander.\n\t(fix<fixunssuffix>_truncv2sfv2di2): Ditto.\n\t(avx512dq_float<floatunssuffix>v2div2sf2): Renaming from\n\tfloat<floatunssuffix>v2div2sf2.\n\t(avx512dq_fix<fixunssuffix>_truncv2sfv2di2<mask_name>):\n\tRenaming from fix<fixunssuffix>_truncv2sfv2di2<mask_name>.\n\t(vec_pack<floatprefix>_float_<mode>): Adjust icode name.\n\t(vec_unpack_<fixprefix>fix_trunc_lo_<mode>): Ditto.\n\t(vec_unpack_<fixprefix>fix_trunc_hi_<mode>): Ditto.\n\t* config/i386/i386-builtin.def: Ditto.\n\t* emit-rtl.c (validate_subreg): Allow use of *paradoxical* vector\n\tsubregs when both omode and imode are vector mode and\n\thave the same inner mode.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/pr95211.c: New test.", "tree": {"sha": "42c72bdd1af98da7af0e6f454ecd133ebde4eb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42c72bdd1af98da7af0e6f454ecd133ebde4eb41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0d9a77d0a00b79b5f19e7428d8004a68f00180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0d9a77d0a00b79b5f19e7428d8004a68f00180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0d9a77d0a00b79b5f19e7428d8004a68f00180"}], "stats": {"total": 105, "additions": 90, "deletions": 15}, "files": [{"sha": "b873498f3ab976aa1c2629c107171427b1a4a7b7", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "patch": "@@ -1649,9 +1649,9 @@ BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_not\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv4dfv4si2_mask, \"__builtin_ia32_cvtpd2udq256_mask\", IX86_BUILTIN_CVTPD2UDQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv2dfv2si2_mask, \"__builtin_ia32_cvtpd2udq128_mask\", IX86_BUILTIN_CVTPD2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv4sfv4di2_mask, \"__builtin_ia32_cvttps2qq256_mask\", IX86_BUILTIN_CVTTPS2QQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2qq128_mask\", IX86_BUILTIN_CVTTPS2QQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_fix_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2qq128_mask\", IX86_BUILTIN_CVTTPS2QQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv4sfv4di2_mask, \"__builtin_ia32_cvttps2uqq256_mask\", IX86_BUILTIN_CVTTPS2UQQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2uqq128_mask\", IX86_BUILTIN_CVTTPS2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_fixuns_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2uqq128_mask\", IX86_BUILTIN_CVTTPS2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv8sfv8si2_mask, \"__builtin_ia32_cvttps2dq256_mask\", IX86_BUILTIN_CVTTPS2DQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv4sfv4si2_mask, \"__builtin_ia32_cvttps2dq128_mask\", IX86_BUILTIN_CVTTPS2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_truncv8sfv8si2_mask, \"__builtin_ia32_cvttps2udq256_mask\", IX86_BUILTIN_CVTTPS2UDQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)"}, {"sha": "fde65391d7d4279aa01e9656b63ef633ecfb679b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "patch": "@@ -5795,15 +5795,15 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"float<floatunssuffix>v2div2sf2\"\n+(define_expand \"avx512dq_float<floatunssuffix>v2div2sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n \t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n \t    (match_dup 2)))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"operands[2] = CONST0_RTX (V2SFmode);\")\n \n-(define_insn \"*float<floatunssuffix>v2div2sf2\"\n+(define_insn \"*avx512dq_float<floatunssuffix>v2div2sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n \t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n@@ -5814,6 +5814,17 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_expand \"float<floatunssuffix>v2div2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+{\n+  operands[0] = simplify_gen_subreg (V4SFmode, operands[0], V2SFmode, 0);\n+  emit_insn (gen_avx512dq_float<floatunssuffix>v2div2sf2\n+\t     (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_mode_attr vpckfloat_concat_mode\n   [(V8DI \"v16sf\") (V4DI \"v8sf\") (V2DI \"v8sf\")])\n (define_mode_attr vpckfloat_temp_mode\n@@ -5830,7 +5841,12 @@\n {\n   rtx r1 = gen_reg_rtx (<vpckfloat_temp_mode>mode);\n   rtx r2 = gen_reg_rtx (<vpckfloat_temp_mode>mode);\n-  rtx (*gen) (rtx, rtx) = gen_float<floatunssuffix><mode><vpckfloat_op_mode>2;\n+  rtx (*gen) (rtx, rtx);\n+\n+  if (<MODE>mode == V2DImode)\n+    gen = gen_avx512dq_float<floatunssuffix>v2div2sf2;\n+  else\n+    gen = gen_float<floatunssuffix><mode><vpckfloat_op_mode>2;\n   emit_insn (gen (r1, operands[1]));\n   emit_insn (gen (r2, operands[2]));\n   if (<MODE>mode == V2DImode)\n@@ -6217,7 +6233,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseintvecmode3>\")])\n \n-(define_insn \"fix<fixunssuffix>_truncv2sfv2di2<mask_name>\"\n+(define_insn \"avx512dq_fix<fixunssuffix>_truncv2sfv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n \t(any_fix:V2DI\n \t  (vec_select:V2SF\n@@ -6229,6 +6245,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"fix<fixunssuffix>_truncv2sfv2di2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_fix:V2DI\n+\t  (match_operand:V2SF 1 \"register_operand\")))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+{\n+  operands[1] = simplify_gen_subreg (V4SFmode, operands[1], V2SFmode, 0);\n+  emit_insn (gen_avx512dq_fix<fixunssuffix>_truncv2sfv2di2\n+\t     (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_mode_attr vunpckfixt_mode\n   [(V16SF \"V8DI\") (V8SF \"V4DI\") (V4SF \"V2DI\")])\n (define_mode_attr vunpckfixt_model\n@@ -6243,14 +6271,18 @@\n   \"TARGET_AVX512DQ\"\n {\n   rtx tem = operands[1];\n+  rtx (*gen) (rtx, rtx);\n+\n   if (<MODE>mode != V4SFmode)\n     {\n       tem = gen_reg_rtx (<ssehalfvecmode>mode);\n       emit_insn (gen_vec_extract_lo_<vunpckfixt_extract_mode> (tem,\n \t\t\t\t\t\t\t       operands[1]));\n+      gen = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n     }\n-  rtx (*gen) (rtx, rtx)\n-    = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n+  else\n+    gen = gen_avx512dq_fix<fixunssuffix>_truncv2sfv2di2;\n+\n   emit_insn (gen (operands[0], tem));\n   DONE;\n })\n@@ -6262,19 +6294,22 @@\n   \"TARGET_AVX512DQ\"\n {\n   rtx tem;\n+  rtx (*gen) (rtx, rtx);\n+\n   if (<MODE>mode != V4SFmode)\n     {\n       tem = gen_reg_rtx (<ssehalfvecmode>mode);\n       emit_insn (gen_vec_extract_hi_<vunpckfixt_extract_mode> (tem,\n \t\t\t\t\t\t\t       operands[1]));\n+      gen = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n     }\n   else\n     {\n       tem = gen_reg_rtx (V4SFmode);\n       emit_insn (gen_avx_vpermilv4sf (tem, operands[1], GEN_INT (0x4e)));\n+      gen = gen_avx512dq_fix<fixunssuffix>_truncv2sfv2di2;\n     }\n-  rtx (*gen) (rtx, rtx)\n-    = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n+\n   emit_insn (gen (operands[0], tem));\n   DONE;\n })"}, {"sha": "2b79063636682ddd61605e64276f2bd484145ed7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "patch": "@@ -939,11 +939,13 @@ validate_subreg (machine_mode omode, machine_mode imode,\n \t   && GET_MODE_INNER (imode) == omode)\n     ;\n   /* ??? x86 sse code makes heavy use of *paradoxical* vector subregs,\n-     i.e. (subreg:V4SF (reg:SF) 0).  This surely isn't the cleanest way to\n-     represent this.  It's questionable if this ought to be represented at\n-     all -- why can't this all be hidden in post-reload splitters that make\n-     arbitrarily mode changes to the registers themselves.  */\n-  else if (VECTOR_MODE_P (omode) && GET_MODE_INNER (omode) == imode)\n+     i.e. (subreg:V4SF (reg:SF) 0) or (subreg:V4SF (reg:V2SF) 0).  This\n+     surely isn't the cleanest way to represent this.  It's questionable\n+     if this ought to be represented at all -- why can't this all be hidden\n+     in post-reload splitters that make arbitrarily mode changes to the\n+     registers themselves.  */\n+  else if (VECTOR_MODE_P (omode)\n+\t   && GET_MODE_INNER (omode) == GET_MODE_INNER (imode))\n     ;\n   /* Subregs involving floating point modes are not allowed to\n      change size.  Therefore (subreg:DI (reg:DF) 0) is fine, but"}, {"sha": "dc10f8f4659268dbb303c65f43301cb123c88093", "filename": "gcc/testsuite/gcc.target/i386/pr95211.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0dc47de6ed9609fe7445ea0941a6a822c80f88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95211.c?ref=9d0dc47de6ed9609fe7445ea0941a6a822c80f88", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/95211 target/95256 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize -march=skylake-avx512\" } */\n+\n+extern float f[4];\n+extern long long l[2];\n+extern long long ul[2];\n+\n+void\n+fix_128 (void)\n+{\n+  l[0] = f[0];\n+  l[1] = f[1];\n+}\n+\n+void\n+fixuns_128 (void)\n+{\n+  ul[0] = f[0];\n+  ul[1] = f[1];\n+}\n+\n+void\n+float_128 (void)\n+{\n+  f[0] = l[0];\n+  f[1] = l[1];\n+}\n+\n+void\n+floatuns_128 (void)\n+{\n+  f[0] = ul[0];\n+  f[1] = ul[1];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\" 2 } } */"}]}