{"sha": "9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiNzBhOWJkN2M4ZWU0ZmNmMmYwNzQ0NTk1MjVlOTgxZWQxY2EyZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-02-25T14:02:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-02-25T14:02:32Z"}, "message": "sh.h (PASS_IN_REG_P): For TARGET_HITACHI, don't pass structures in registers.\n\n\t* sh.h (PASS_IN_REG_P):  For TARGET_HITACHI, don't pass structures\n\tin registers.\n\t* expr.h (PRETEND_OUTGOING_VARARGS_NAMED): Provide default definition.\n\t* function.c (assign_parms): Honour PRETEND_OUTGOING_VARARGS_NAMED.\n\t* calls.c (expand_call): Likewise.\n\t* sh.c (sh_expand_prologue): For TARGET_HITACHI, don't push varargs /\n\tstdarg arguments.\n\t* sh.h (CPP_SPEC): Add -D__HITACHI__ for -mhitachi.\n\t(FUNCTION_ARG):  For TARGET_HITACHI, don't pass unnamed\n\targuments in registers.\n\t(PRETEND_OUTGOING_VARARGS_NAMED): Define.\n\t* va-sh.h (entire file): If __HITACHI__ is defined, use sh[123]\n\tflavour varargs.\n\nFrom-SVN: r25440", "tree": {"sha": "4b4ce259afa9f7f20acfba1fca1ef92f60b9c55f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b4ce259afa9f7f20acfba1fca1ef92f60b9c55f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/comments", "author": null, "committer": null, "parents": [{"sha": "345137c78a04d79092b6c8633dd11470f30e7267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345137c78a04d79092b6c8633dd11470f30e7267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345137c78a04d79092b6c8633dd11470f30e7267"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "83e85e32afa5da27c0f679d976edb657a2fa078a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -1,3 +1,21 @@\n+Thu Feb 25 21:52:54 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.h (PASS_IN_REG_P):  For TARGET_HITACHI, don't pass structures\n+\tin registers.\n+\n+\t* expr.h (PRETEND_OUTGOING_VARARGS_NAMED): Provide default definition.\n+\t* function.c (assign_parms): Honour PRETEND_OUTGOING_VARARGS_NAMED.\n+\t* calls.c (expand_call): Likewise.\n+\n+\t* sh.c (sh_expand_prologue): For TARGET_HITACHI, don't push varargs /\n+\tstdarg arguments.\n+\t* sh.h (CPP_SPEC): Add -D__HITACHI__ for -mhitachi.\n+\t(FUNCTION_ARG):  For TARGET_HITACHI, don't pass unnamed\n+\targuments in registers.\n+\t(PRETEND_OUTGOING_VARARGS_NAMED): Define.\n+\t* va-sh.h (entire file): If __HITACHI__ is defined, use sh[123]\n+\tflavour varargs.\n+\n Thu Feb 25 14:32:40 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cse.c (dump_class): Revert last change and make the prototype"}, {"sha": "86a87ff4f2da55e3c700fcd55e6468e8d2d47bc0", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -1731,21 +1731,18 @@ expand_call (exp, target, ignore)\n      (If no anonymous args follow, the result of list_length is actually\n      one too large.  This is harmless.)\n \n-     If SETUP_INCOMING_VARARGS is defined and STRICT_ARGUMENT_NAMING is zero,\n-     this machine will be able to place unnamed args that were passed in\n+     If PRETEND_OUTGOING_VARARGS_NAMED is set and STRICT_ARGUMENT_NAMING is\n+     zero, this machine will be able to place unnamed args that were passed in\n      registers into the stack.  So treat all args as named.  This allows the\n      insns emitting for a specific argument list to be independent of the\n      function declaration.\n \n-     If SETUP_INCOMING_VARARGS is not defined, we do not have any reliable\n+     If PRETEND_OUTGOING_VARARGS_NAMED is not set, we do not have any reliable\n      way to pass unnamed args in registers, so we must force them into\n      memory.  */\n \n   if ((STRICT_ARGUMENT_NAMING\n-#ifndef SETUP_INCOMING_VARARGS\n-       || 1\n-#endif\n-       )\n+       || ! PRETEND_OUTGOING_VARARGS_NAMED)\n       && TYPE_ARG_TYPES (funtype) != 0)\n     n_named_args\n       = (list_length (TYPE_ARG_TYPES (funtype))"}, {"sha": "6ddf43958b0ec47a565810c1172c46b647e1dd12", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -3717,7 +3717,7 @@ sh_expand_prologue ()\n       current_function_anonymous_args = 0;\n \n       /* This is not used by the SH3E calling convention  */\n-      if (!TARGET_SH3E)\n+      if (! TARGET_SH3E && ! TARGET_HITACHI)\n \t{\n \t  /* Push arg regs as if they'd been provided by caller in stack.  */\n \t  for (i = 0; i < NPARM_REGS(SImode); i++)"}, {"sha": "25416607347de2de03b17b2c26d15d1f9fdf0446", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -46,7 +46,8 @@ extern int code_for_indirect_jump_scratch;\n %{m4-single-only:-D__SH4_SINGLE_ONLY__} \\\n %{m4-single:-D__SH4_SINGLE__} \\\n %{m4:-D__SH4__} \\\n-%{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:-D__sh1__}}}}}}}\"\n+%{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:-D__sh1__}}}}}}} \\\n+%{mhitachi:-D__HITACHI__}\"\n \n #define CPP_PREDEFINES \"-D__sh__ -Acpu(sh) -Amachine(sh)\"\n \n@@ -1004,7 +1005,9 @@ struct sh_args {\n    This macro is only used in this file. */\n \n #define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n-  (((TYPE) == 0 || ! TREE_ADDRESSABLE ((tree)(TYPE))) \\\n+  (((TYPE) == 0 \\\n+    || (! TREE_ADDRESSABLE ((tree)(TYPE))) \\\n+\t&& (! TARGET_HITACHI || ! AGGREGATE_TYPE_P (TYPE))) \\\n    && (TARGET_SH3E \\\n        ? ((MODE) == BLKmode \\\n \t  ? (((CUM).arg_count[(int) SH_ARG_INT] * UNITS_PER_WORD \\\n@@ -1037,13 +1040,16 @@ extern int current_function_varargs;\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   ((PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\t\\\n-    && ((NAMED) || TARGET_SH3E || ! current_function_varargs))\t\t\\\n+    && ((NAMED)\t\t\t\t\t\t\t\t\\\n+\t|| (! TARGET_HITACHI && (TARGET_SH3E || ! current_function_varargs)))) \\\n    ? gen_rtx (REG, (MODE),\t\t\t\t\t\t\\\n \t      ((BASE_ARG_REG (MODE) + ROUND_REG ((CUM), (MODE))) \t\\\n \t       ^ ((MODE) == SFmode && TARGET_SH4\t\t\t\\\n \t\t  && TARGET_LITTLE_ENDIAN != 0)))\t\t\t\\\n    : 0)\n \n+#define PRETEND_OUTGOING_VARARGS_NAMED (! TARGET_HITACHI)\n+\n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used.\n    For args passed entirely in registers or entirely in memory, zero."}, {"sha": "e4f709a143e0ee196c1d6fa9141cfa1570a3a05f", "filename": "gcc/expr.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -216,6 +216,17 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n #define STRICT_ARGUMENT_NAMING 0\n #endif\n \n+/* Provide a default value for PRETEND_OUTGOING_VARARGS_NAMED.  */\n+#ifdef SETUP_INCOMING_VARARGS\n+#ifndef PRETEND_OUTGOING_VARARGS_NAMED\n+#define PRETEND_OUTGOING_VARARGS_NAMED 1\n+#endif\n+#else\n+/* It is an error to define PRETEND_OUTGOING_VARARGS_NAMED without\n+   defining SETUP_INCOMING_VARARGS.  */\n+#define PRETEND_OUTGOING_VARARGS_NAMED 0\n+#endif\n+\n /* Nonzero if we do not know how to pass TYPE solely in registers.\n    We cannot do so in the following cases:\n "}, {"sha": "75b47bd1b49d9695b85a1ac9e6d55a90761f84da", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -4096,6 +4096,7 @@ assign_parms (fndecl, second_time)\n       int did_conversion = 0;\n       tree passed_type = DECL_ARG_TYPE (parm);\n       tree nominal_type = TREE_TYPE (parm);\n+      int pretend_named;\n \n       /* Set LAST_NAMED if this is last named arg before some\n \t anonymous args.  */\n@@ -4217,19 +4218,19 @@ assign_parms (fndecl, second_time)\n \t In this case, we call FUNCTION_ARG with NAMED set to 1 instead of\n \t 0 as it was the previous time.  */\n \n+      pretend_named = named_arg || PRETEND_OUTGOING_VARARGS_NAMED;\n       locate_and_pad_parm (nominal_mode, passed_type,\n #ifdef STACK_PARMS_IN_REG_PARM_AREA\n \t\t\t   1,\n #else\n #ifdef FUNCTION_INCOMING_ARG\n \t\t\t   FUNCTION_INCOMING_ARG (args_so_far, promoted_mode,\n \t\t\t\t\t\t  passed_type,\n-\t\t\t\t\t\t  (named_arg\n-\t\t\t\t\t\t   || varargs_setup)) != 0,\n+\t\t\t\t\t\t  pretend_named) != 0,\n #else\n \t\t\t   FUNCTION_ARG (args_so_far, promoted_mode,\n \t\t\t\t\t passed_type,\n-\t\t\t\t\t named_arg || varargs_setup) != 0,\n+\t\t\t\t\t pretend_named) != 0,\n #endif\n #endif\n \t\t\t   fndecl, &stack_args_size, &stack_offset, &arg_size);"}, {"sha": "dc4e3ae8079f5eabd8f31141b7fff79e561f8df9", "filename": "gcc/ginclude/va-sh.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fginclude%2Fva-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Fginclude%2Fva-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sh.h?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -1,12 +1,15 @@\n-/* This is just like the default gvarargs.h\n-   except for differences described below.  */\n+/* The ! __SH3E_VARG case is similar to the default gvarargs.h .  */\n+\n+#if (defined (__SH3E__) || defined (__SH4_SINGLE__) || defined (__SH4__) || defined (__SH4_SINGLE_ONLY__)) && ! defined (__HITACHI__)\n+#define __SH3E_VARG\n+#endif\n \n /* Define __gnuc_va_list.  */\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n \n-#if defined (__SH3E__) || defined (__SH4_SINGLE__) || defined (__SH4__) || defined (__SH4_SINGLE_ONLY__)\n+#ifdef __SH3E_VARG\n \n typedef long __va_greg;\n typedef float __va_freg;\n@@ -33,7 +36,7 @@ typedef void *__gnuc_va_list;\n \n #ifdef _STDARG_H\n \n-#if defined (__SH3E__) || defined (__SH4_SINGLE__) || defined (__SH4__) || defined (__SH4_SINGLE_ONLY__)\n+#ifdef __SH3E_VARG\n \n #define va_start(AP, LASTARG) \\\n __extension__ \\\n@@ -59,7 +62,7 @@ __extension__ \\\n #define va_alist  __builtin_va_alist\n #define va_dcl    int __builtin_va_alist;...\n \n-#if defined (__SH3E__) || defined (__SH4_SINGLE__) || defined (__SH4__) || defined (__SH4_SINGLE_ONLY__)\n+#ifdef __SH3E_VARG\n \n #define va_start(AP) \\\n __extension__ \\\n@@ -164,7 +167,7 @@ enum __va_type_classes {\n    ? (((union { TYPE t; int i;} *__VA_REF) (AP))++)->t\t\t\t\\\n    : ((union {TYPE t;TYPE u;}*) ((char *)++(int *__VA_REF)(AP) - sizeof (TYPE)))->t);})\n \n-#if defined (__SH3E__) || defined (__SH4_SINGLE__) || defined (__SH4__) || defined (__SH4_SINGLE_ONLY__)\n+#ifdef __SH3E_VARG\n \n #define __PASS_AS_FLOAT(TYPE_CLASS,SIZE) \\\n   (TYPE_CLASS == __real_type_class && SIZE == 4)"}, {"sha": "45e3deef75d8224edc3fa9acd772befd200c6416", "filename": "gcc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "patch": "@@ -3789,6 +3789,15 @@ are treated as named.  Otherwise, all named arguments except the last\n are treated as named.\n \n You need not define this macro if it always returns zero.\n+\n+@findex PRETEND_OUTGOING_VARARGS_NAMED\n+@item PRETEND_OUTGOING_VARARGS_NAMED\n+If you need to conditionally change ABIs so that one works with\n+@code{SETUP_INCOMING_VARARGS}, but the other works like neither\n+@code{SETUP_INCOMING_VARARGS} nor @code{STRICT_ARGUMENT_NAMING} was\n+defined, then define this macro to return nonzero if\n+@code{SETUP_INCOMING_VARARGS} is used, zero otherwise.\n+Otherwise, you should not define this macro.\n @end table\n \n @node Trampolines"}]}