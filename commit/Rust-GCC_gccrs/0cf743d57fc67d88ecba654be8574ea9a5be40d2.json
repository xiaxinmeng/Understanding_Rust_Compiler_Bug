{"sha": "0cf743d57fc67d88ecba654be8574ea9a5be40d2", "node_id": "C_kwDOANBUbNoAKDBjZjc0M2Q1N2ZjNjdkODhlY2JhNjU0YmU4NTc0ZWE5YTViZTQwZDI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-25T17:24:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-25T17:24:06Z"}, "message": "Merge #1614\n\n1614: intrinsics: Add rust_sorry wrapper for unimplemented intrinsics r=CohenArthur a=CohenArthur\n\nThis allows us to define intrinsics without implementing their body. This will be useful for atomic intrinsics for example, as there are a lot of them and we should work on implementing them one by one properly and slowly\r\n\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "a1fc9fccc5c3d3024b08bbed8da8ccc71c20f58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1fc9fccc5c3d3024b08bbed8da8ccc71c20f58e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cf743d57fc67d88ecba654be8574ea9a5be40d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWBu2CRBK7hj4Ov3rIwAA9GoIAHHskPNrtHwGJt3BqAuq5KD5\nHQB/KZlW/THIdGm4mCM79BNyvCjnn5Mr7jlFKmlk3KzMGuJroczZtZUtO2t27KEY\nEdqcaFXk5ysaoz0//2AFsilHUNSIUFSrKr3RW2zf7riGgBw8okP8Ez5UumnfP9Rh\nGFV+0UGWHcXISyW3laXn0a4zFse6PEzDU5N8pDenoSxBGRv/jOkWipjBTpPT2KKe\ntH6J2YLGsy/jrEqmgz2tKM6ZPUXqjB8RobUkfb3sll0pg/CqpDdZUfbE6F3VROLF\nvoxNgSDL8qvITv0zwGwetinagapKmIuGtINMgl833ynZuF6EJduLh3zgeHl8sbM=\n=gbsz\n-----END PGP SIGNATURE-----\n", "payload": "tree a1fc9fccc5c3d3024b08bbed8da8ccc71c20f58e\nparent 6c7841a3ac51588c93543361d8906ab4daa2d034\nparent 83e5265d6af48e1572cbe019b4b7f7a5603086a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1666718646 +0000\ncommitter GitHub <noreply@github.com> 1666718646 +0000\n\nMerge #1614\n\n1614: intrinsics: Add rust_sorry wrapper for unimplemented intrinsics r=CohenArthur a=CohenArthur\n\nThis allows us to define intrinsics without implementing their body. This will be useful for atomic intrinsics for example, as there are a lot of them and we should work on implementing them one by one properly and slowly\r\n\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf743d57fc67d88ecba654be8574ea9a5be40d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf743d57fc67d88ecba654be8574ea9a5be40d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf743d57fc67d88ecba654be8574ea9a5be40d2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c7841a3ac51588c93543361d8906ab4daa2d034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7841a3ac51588c93543361d8906ab4daa2d034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7841a3ac51588c93543361d8906ab4daa2d034"}, {"sha": "83e5265d6af48e1572cbe019b4b7f7a5603086a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e5265d6af48e1572cbe019b4b7f7a5603086a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e5265d6af48e1572cbe019b4b7f7a5603086a9"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "2a2091ccc257c450d07368ce02df674fcc4393fd", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf743d57fc67d88ecba654be8574ea9a5be40d2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf743d57fc67d88ecba654be8574ea9a5be40d2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=0cf743d57fc67d88ecba654be8574ea9a5be40d2", "patch": "@@ -93,6 +93,15 @@ prefetch_write_data (Context *ctx, TyTy::FnType *fntype)\n   return prefetch_data_handler (ctx, fntype, Prefetch::Write);\n }\n \n+static inline tree\n+sorry_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  rust_sorry_at (fntype->get_locus (), \"intrinsic %qs is not yet implemented\",\n+\t\t fntype->get_identifier ().c_str ());\n+\n+  return error_mark_node;\n+}\n+\n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::FnType *)>>\n   generic_intrinsics = {\n@@ -107,6 +116,7 @@ static const std::map<std::string,\n     {\"copy_nonoverlapping\", &copy_nonoverlapping_handler},\n     {\"prefetch_read_data\", &prefetch_read_data},\n     {\"prefetch_write_data\", &prefetch_write_data},\n+    {\"atomic_load\", &sorry_handler},\n };\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}"}, {"sha": "1acb3533c0894db17e25859d6c5b820bdcc836ff", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf743d57fc67d88ecba654be8574ea9a5be40d2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf743d57fc67d88ecba654be8574ea9a5be40d2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs?ref=0cf743d57fc67d88ecba654be8574ea9a5be40d2", "patch": "@@ -0,0 +1,9 @@\n+extern \"rust-intrinsic\" {\n+    fn not_an_intrinsic();\n+    fn atomic_load(); // { dg-message \"sorry, unimplemented: intrinsic .atomic_load. is not yet implemented\" }\n+}\n+\n+fn main() {\n+    unsafe { not_an_intrinsic() }; // { dg-error \"unknown builtin intrinsic: not_an_intrinsic\" }\n+    unsafe { atomic_load() };\n+}"}]}