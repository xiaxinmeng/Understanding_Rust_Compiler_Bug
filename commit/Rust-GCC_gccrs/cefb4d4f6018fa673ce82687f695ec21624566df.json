{"sha": "cefb4d4f6018fa673ce82687f695ec21624566df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmYjRkNGY2MDE4ZmE2NzNjZTgyNjg3ZjY5NWVjMjE2MjQ1NjZkZg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2011-08-19T14:31:30Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-08-19T14:31:30Z"}, "message": "tree-ssa-math-opts.c (convert_plusminus_to_widen): Permit a single conversion statement separating multiply-and-accumulate.\n\n2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Permit a single\n\tconversion statement separating multiply-and-accumulate.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/wmul-5.c: New file.\n\t* gcc.target/arm/no-wmla-1.c: New file.\n\nFrom-SVN: r177904", "tree": {"sha": "74ae1230ceccd626c6d2c5797696358376ab4582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ae1230ceccd626c6d2c5797696358376ab4582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cefb4d4f6018fa673ce82687f695ec21624566df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefb4d4f6018fa673ce82687f695ec21624566df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefb4d4f6018fa673ce82687f695ec21624566df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefb4d4f6018fa673ce82687f695ec21624566df/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2946bd342db2de4c95a6b33481d05b0c9109d517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2946bd342db2de4c95a6b33481d05b0c9109d517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2946bd342db2de4c95a6b33481d05b0c9109d517"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "65d81c9c8dc032d8153f16ffcadb1dfd0b537112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cefb4d4f6018fa673ce82687f695ec21624566df", "patch": "@@ -1,3 +1,8 @@\n+2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Permit a single\n+\tconversion statement separating multiply-and-accumulate.\n+\n 2011-08-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50067"}, {"sha": "d17dcac03c46274bdda17d6d002c9f011e2c5c53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cefb4d4f6018fa673ce82687f695ec21624566df", "patch": "@@ -1,3 +1,8 @@\n+2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.target/arm/wmul-5.c: New file.\n+\t* gcc.target/arm/no-wmla-1.c: New file.\n+\n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.target/arm/wmul-bitfield-1.c: New file."}, {"sha": "1be162e055287eb59826415af1185421c8bda80c", "filename": "gcc/testsuite/gcc.target/arm/no-wmla-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-wmla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-wmla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-wmla-1.c?ref=cefb4d4f6018fa673ce82687f695ec21624566df", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_dsp } */\n+\n+int\n+foo (int a, short b, short c)\n+{\n+     int bc = b * c;\n+        return a + (short)bc;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tmul\\t\" } } */"}, {"sha": "9f29a81c0b8bdea01a6e561ac762744327be2f8f", "filename": "gcc/testsuite/gcc.target/arm/wmul-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-5.c?ref=cefb4d4f6018fa673ce82687f695ec21624566df", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_dsp } */\n+\n+long long\n+foo (long long a, char *b, char *c)\n+{\n+  return a + *b * *c;\n+}\n+\n+/* { dg-final { scan-assembler \"umlal\" } } */"}, {"sha": "4bd590c33ebce0167fe52b0f941061e9767e2192", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefb4d4f6018fa673ce82687f695ec21624566df/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=cefb4d4f6018fa673ce82687f695ec21624566df", "patch": "@@ -2136,6 +2136,7 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n \t\t\t    enum tree_code code)\n {\n   gimple rhs1_stmt = NULL, rhs2_stmt = NULL;\n+  gimple conv1_stmt = NULL, conv2_stmt = NULL, conv_stmt;\n   tree type, type1, type2, tmp;\n   tree lhs, rhs1, rhs2, mult_rhs1, mult_rhs2, add_rhs;\n   enum tree_code rhs1_code = ERROR_MARK, rhs2_code = ERROR_MARK;\n@@ -2178,6 +2179,38 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   else\n     return false;\n \n+  /* Allow for one conversion statement between the multiply\n+     and addition/subtraction statement.  If there are more than\n+     one conversions then we assume they would invalidate this\n+     transformation.  If that's not the case then they should have\n+     been folded before now.  */\n+  if (CONVERT_EXPR_CODE_P (rhs1_code))\n+    {\n+      conv1_stmt = rhs1_stmt;\n+      rhs1 = gimple_assign_rhs1 (rhs1_stmt);\n+      if (TREE_CODE (rhs1) == SSA_NAME)\n+\t{\n+\t  rhs1_stmt = SSA_NAME_DEF_STMT (rhs1);\n+\t  if (is_gimple_assign (rhs1_stmt))\n+\t    rhs1_code = gimple_assign_rhs_code (rhs1_stmt);\n+\t}\n+      else\n+\treturn false;\n+    }\n+  if (CONVERT_EXPR_CODE_P (rhs2_code))\n+    {\n+      conv2_stmt = rhs2_stmt;\n+      rhs2 = gimple_assign_rhs1 (rhs2_stmt);\n+      if (TREE_CODE (rhs2) == SSA_NAME)\n+\t{\n+\t  rhs2_stmt = SSA_NAME_DEF_STMT (rhs2);\n+\t  if (is_gimple_assign (rhs2_stmt))\n+\t    rhs2_code = gimple_assign_rhs_code (rhs2_stmt);\n+\t}\n+      else\n+\treturn false;\n+    }\n+\n   /* If code is WIDEN_MULT_EXPR then it would seem unnecessary to call\n      is_widening_mult_p, but we still need the rhs returns.\n \n@@ -2191,13 +2224,15 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n       add_rhs = rhs2;\n+      conv_stmt = conv1_stmt;\n     }\n   else if (rhs2_code == MULT_EXPR || rhs2_code == WIDEN_MULT_EXPR)\n     {\n       if (!is_widening_mult_p (rhs2_stmt, &type1, &mult_rhs1,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n       add_rhs = rhs1;\n+      conv_stmt = conv2_stmt;\n     }\n   else\n     return false;\n@@ -2208,6 +2243,33 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   if (TYPE_UNSIGNED (type1) != TYPE_UNSIGNED (type2))\n     return false;\n \n+  /* If there was a conversion between the multiply and addition\n+     then we need to make sure it fits a multiply-and-accumulate.\n+     The should be a single mode change which does not change the\n+     value.  */\n+  if (conv_stmt)\n+    {\n+      tree from_type = TREE_TYPE (gimple_assign_rhs1 (conv_stmt));\n+      tree to_type = TREE_TYPE (gimple_assign_lhs (conv_stmt));\n+      int data_size = TYPE_PRECISION (type1) + TYPE_PRECISION (type2);\n+      bool is_unsigned = TYPE_UNSIGNED (type1) && TYPE_UNSIGNED (type2);\n+\n+      if (TYPE_PRECISION (from_type) > TYPE_PRECISION (to_type))\n+\t{\n+\t  /* Conversion is a truncate.  */\n+\t  if (TYPE_PRECISION (to_type) < data_size)\n+\t    return false;\n+\t}\n+      else if (TYPE_PRECISION (from_type) < TYPE_PRECISION (to_type))\n+\t{\n+\t  /* Conversion is an extend.  Check it's the right sort.  */\n+\t  if (TYPE_UNSIGNED (from_type) != is_unsigned\n+\t      && !(is_unsigned && TYPE_PRECISION (from_type) > data_size))\n+\t    return false;\n+\t}\n+      /* else convert is a no-op for our purposes.  */\n+    }\n+\n   /* Verify that the machine can perform a widening multiply\n      accumulate in this mode/signedness combination, otherwise\n      this transformation is likely to pessimize code.  */"}]}