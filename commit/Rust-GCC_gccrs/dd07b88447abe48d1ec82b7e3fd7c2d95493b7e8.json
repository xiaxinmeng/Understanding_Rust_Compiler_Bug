{"sha": "dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwN2I4ODQ0N2FiZTQ4ZDFlYzgyYjdlM2ZkN2MyZDk1NDkzYjdlOA==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-20T18:27:32Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-20T18:27:32Z"}, "message": "c-lang.c (lang_init_options): Update call to cpp_reader_init.\n\n\t* c-lang.c (lang_init_options): Update call to\n\tcpp_reader_init.\n\t* cppmain.c (main): Similarly.\n\t* fix-header.c (read_scan_file): Similarly.\n\t* cp/lex.c (lang_init_options): Similarly.\n\t* objc/objc-act.c (lang_init_options): Similarly.\n\t* cppexp.c (parse_number): Only warn for unextended C89.\n\t* cppinit.c (set_lang): New function.\n\t(cpp_reader_init): Take a LANG argument and pass it to set_lang.\n\t(COMMAND_LINE_OPTIONS): New option std=c++98.\n\t(cpp_handle_option): Use set_lang.\n\t* cpplib.h (enum_c_lang): New enumeration.  Update comments.\n\nFrom-SVN: r37587", "tree": {"sha": "24d965cfca605ecaa67abda32d7a2c64f3ee143c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d965cfca605ecaa67abda32d7a2c64f3ee143c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/comments", "author": null, "committer": null, "parents": [{"sha": "4de5a4d99adf55dc93302dd284123dca93f50896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de5a4d99adf55dc93302dd284123dca93f50896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de5a4d99adf55dc93302dd284123dca93f50896"}], "stats": {"total": 266, "additions": 175, "deletions": 91}, "files": [{"sha": "6bc280d66b2cdaa3fb44978f92ff818bb5894b6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -1,3 +1,19 @@\n+2000-11-20  Neil Booth  <neilb@earthling.net>\n+\n+\t* c-lang.c (lang_init_options): Update call to\n+\tcpp_reader_init.\n+\t* cppmain.c (main): Similarly.\n+\t* fix-header.c (read_scan_file): Similarly.\n+\t* cp/lex.c (lang_init_options): Similarly.\n+\t* objc/objc-act.c (lang_init_options): Similarly.\n+\t* cppexp.c (parse_number): Only warn for unextended C89.\n+\t* cppinit.c (set_lang): New function.\n+\t(cpp_reader_init): Take a LANG argument and pass it to set_lang.\n+\t(COMMAND_LINE_OPTIONS): New option std=c++98.\n+\t(cpp_handle_option): Use set_lang.\n+\t* cpplex.c (_cpp_lex_token): Warn pedantically if not C99.\n+\t* cppib.h (enum_c_lang): New enumeration.  Update comments.\n+\n 2000-11-20  Will Cohen  <wcohen@redhat.com>\n \n \t* calls.c (expand_call): Clear target only when target is in"}, {"sha": "1c9fe38f1337bcb43892828ca6f173639475f92a", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -58,7 +58,7 @@ lang_init_options ()\n {\n #if USE_CPPLIB\n   cpp_init ();\n-  cpp_reader_init (&parse_in);\n+  cpp_reader_init (&parse_in, CLK_GNUC89);\n #endif\n   /* Mark as \"unspecified\".  */\n   flag_bounds_check = -1;"}, {"sha": "7e7da03865b3f06ea4a484a6c796cc8ba2582447", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -254,7 +254,7 @@ lang_init_options ()\n {\n #if USE_CPPLIB\n   cpp_init ();\n-  cpp_reader_init (&parse_in);\n+  cpp_reader_init (&parse_in, CLK_GNUC89);\n #endif\n \n   /* Default exceptions on.  */"}, {"sha": "6665380c3a80c3a42d15a880e2cc7c85a88fe9b5", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -205,7 +205,9 @@ parse_number (pfile, tok)\n \n       if (CPP_WTRADITIONAL (pfile) && sufftab[i].u)\n \tcpp_warning (pfile, \"traditional C rejects the `U' suffix\");\n-      if (CPP_OPTION (pfile, c89) && sufftab[i].l == 2)\n+      if (CPP_OPTION (pfile, c89)\n+\t  && sufftab[i].l == 2\n+\t  && pfile->spec_nodes.n__STRICT_ANSI__->type == NT_MACRO)\n \tSYNTAX_ERROR (\"too many 'l' suffixes in integer constant\");\n     }\n   "}, {"sha": "f8394e4a70857105e4526235a83b7a3966598b33", "filename": "gcc/cppinit.c", "status": "modified", "additions": 129, "deletions": 69, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -105,6 +105,7 @@ static void merge_include_chains\tPARAMS ((cpp_reader *));\n static void do_includes\t\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct pending_option *,\n \t\t\t\t\t\t int));\n+static void set_lang\t\t\tPARAMS ((cpp_reader *, enum c_lang));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n@@ -421,10 +422,111 @@ cpp_init ()\n   cpp_init_completed = 1;\n }\n \n+/* Sets internal flags correctly for a given language, and defines\n+   macros if necessary.  */\n+static void\n+set_lang (pfile, lang)\n+     cpp_reader *pfile;\n+     enum c_lang lang;\n+{\n+  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n+\n+  /* Default to zero.  */\n+  CPP_OPTION (pfile, lang_asm) = 0;\n+  CPP_OPTION (pfile, objc) = 0;\n+  CPP_OPTION (pfile, cplusplus) = 0;\n+\n+  switch (lang)\n+    {\n+      /* GNU C.  */\n+    case CLK_GNUC99:\n+      CPP_OPTION (pfile, trigraphs) = 0;\n+      CPP_OPTION (pfile, dollars_in_ident) = 1;\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 1;\n+      CPP_OPTION (pfile, c89) = 0;\n+      CPP_OPTION (pfile, c99) = 1;\n+      new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n+      break;\n+    case CLK_GNUC89:\n+      CPP_OPTION (pfile, trigraphs) = 0;\n+      CPP_OPTION (pfile, dollars_in_ident) = 1;\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 1;\n+      CPP_OPTION (pfile, c89) = 1;\n+      CPP_OPTION (pfile, c99) = 0;\n+      break;\n+\n+      /* ISO C.  */\n+    case CLK_STDC94:\n+      new_pending_directive (pend, \"__STDC_VERSION__=199409L\", cpp_define);\n+    case CLK_STDC89:\n+      CPP_OPTION (pfile, trigraphs) = 1;\n+      CPP_OPTION (pfile, dollars_in_ident) = 0;\n+      CPP_OPTION (pfile, cplusplus_comments) = 0;\n+      CPP_OPTION (pfile, digraphs) = lang == CLK_STDC94;\n+      CPP_OPTION (pfile, c89) = 1;\n+      CPP_OPTION (pfile, c99) = 0;\n+      new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n+      break;\n+    case CLK_STDC99:\n+      CPP_OPTION (pfile, trigraphs) = 1;\n+      CPP_OPTION (pfile, dollars_in_ident) = 0;\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 1;\n+      CPP_OPTION (pfile, c89) = 0;\n+      CPP_OPTION (pfile, c99) = 1;\n+      new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n+      new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n+      break;\n+\n+      /* Objective C.  */\n+    case CLK_OBJCXX:\n+      new_pending_directive (pend, \"__cplusplus\", cpp_define);\n+      CPP_OPTION (pfile, cplusplus) = 1;\n+    case CLK_OBJC:\n+      CPP_OPTION (pfile, trigraphs) = 0;\n+      CPP_OPTION (pfile, dollars_in_ident) = 1;\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 1;\n+      CPP_OPTION (pfile, c89) = 0;\n+      CPP_OPTION (pfile, c99) = 0;\n+      CPP_OPTION (pfile, objc) = 1;\n+      new_pending_directive (pend, \"__OBJC__\", cpp_define);\n+      break;\n+\n+      /* C++.  */\n+    case CLK_GNUCXX:\n+    case CLK_CXX98:\n+      CPP_OPTION (pfile, cplusplus) = 1;\n+      CPP_OPTION (pfile, trigraphs) = lang == CLK_CXX98;\n+      CPP_OPTION (pfile, dollars_in_ident) = lang == CLK_GNUCXX;\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 1;\n+      CPP_OPTION (pfile, c89) = 0;\n+      CPP_OPTION (pfile, c99) = 0;\n+      new_pending_directive (pend, \"__cplusplus\", cpp_define);\n+      break;\n+\n+      /* Assembler.  */\n+    case CLK_ASM:\n+      CPP_OPTION (pfile, trigraphs) = 0;\n+      CPP_OPTION (pfile, dollars_in_ident) = 0;\t/* Maybe not?  */\n+      CPP_OPTION (pfile, cplusplus_comments) = 1;\n+      CPP_OPTION (pfile, digraphs) = 0; \n+     CPP_OPTION (pfile, c89) = 0;\n+      CPP_OPTION (pfile, c99) = 0;\n+      CPP_OPTION (pfile, lang_asm) = 1;\n+      new_pending_directive (pend, \"__ASSEMBLER__\", cpp_define);\n+      break;\n+    }\n+}\n+\n /* Initialize a cpp_reader structure. */\n void\n-cpp_reader_init (pfile)\n+cpp_reader_init (pfile, lang)\n      cpp_reader *pfile;\n+     enum c_lang lang;\n {\n   struct spec_nodes *s;\n \n@@ -439,11 +541,9 @@ cpp_reader_init (pfile)\n       cpp_init ();\n     }\n \n-  CPP_OPTION (pfile, dollars_in_ident) = 1;\n-  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+  set_lang (pfile, lang);\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, warn_paste) = 1;\n-  CPP_OPTION (pfile, digraphs) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, show_column) = 1;\n   CPP_OPTION (pfile, tabstop) = 8;\n@@ -1077,6 +1177,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"pedantic\",                 0,      OPT_pedantic)                   \\\n   DEF_OPT(\"pedantic-errors\",          0,      OPT_pedantic_errors)            \\\n   DEF_OPT(\"remap\",                    0,      OPT_remap)                      \\\n+  DEF_OPT(\"std=c++98\",                0,      OPT_std_cplusplus98)            \\\n   DEF_OPT(\"std=c89\",                  0,      OPT_std_c89)                    \\\n   DEF_OPT(\"std=c99\",                  0,      OPT_std_c99)                    \\\n   DEF_OPT(\"std=c9x\",                  0,      OPT_std_c9x)                    \\\n@@ -1324,93 +1425,52 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n \t  break;\n \tcase OPT_lang_c:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 0;\n-\t  CPP_OPTION (pfile, c99) = 1;\n-\t  CPP_OPTION (pfile, digraphs) = 1;\n-\t  CPP_OPTION (pfile, objc) = 0;\n+\t  set_lang (pfile, CLK_GNUC89);\n \t  break;\n \tcase OPT_lang_cplusplus:\n-\t  CPP_OPTION (pfile, cplusplus) = 1;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 0;\n-\t  CPP_OPTION (pfile, c99) = 0;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  CPP_OPTION (pfile, digraphs) = 1;\n-\t  new_pending_directive (pend, \"__cplusplus\", cpp_define);\n+\t  set_lang (pfile, CLK_GNUCXX);\n \t  break;\n-\tcase OPT_lang_objcplusplus:\n-\t  CPP_OPTION (pfile, cplusplus) = 1;\n-\t  new_pending_directive (pend, \"__cplusplus\", cpp_define);\n-\t  /* fall through */\n \tcase OPT_lang_objc:\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 0;\n-\t  CPP_OPTION (pfile, c99) = 0;\n-\t  CPP_OPTION (pfile, objc) = 1;\n-\t  new_pending_directive (pend, \"__OBJC__\", cpp_define);\n+\t  set_lang (pfile, CLK_OBJC);\n \t  break;\n-\tcase OPT_lang_asm:\n- \t  CPP_OPTION (pfile, lang_asm) = 1;\n-\t  CPP_OPTION (pfile, dollars_in_ident) = 0;\n-\t  new_pending_directive (pend, \"__ASSEMBLER__\", cpp_define);\n+\tcase OPT_lang_objcplusplus:\n+\t  set_lang (pfile, CLK_OBJCXX);\n \t  break;\n-\tcase OPT_nostdinc:\n-\t  /* -nostdinc causes no default include directories.\n-\t     You must specify all include-file directories with -I.  */\n-\t  CPP_OPTION (pfile, no_standard_includes) = 1;\n+\tcase OPT_lang_asm:\n+\t  set_lang (pfile, CLK_ASM);\n \t  break;\n-\tcase OPT_nostdincplusplus:\n-\t  /* -nostdinc++ causes no default C++-specific include directories. */\n-\t  CPP_OPTION (pfile, no_standard_cplusplus_includes) = 1;\n+\tcase OPT_std_cplusplus98:\n+\t  set_lang (pfile, CLK_CXX98);\n \t  break;\n \tcase OPT_std_gnu89:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 1;\n-\t  CPP_OPTION (pfile, c99) = 0;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  CPP_OPTION (pfile, digraphs) = 1;\n+\t  set_lang (pfile, CLK_GNUC89);\n \t  break;\n \tcase OPT_std_gnu9x:\n \tcase OPT_std_gnu99:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 0;\n-\t  CPP_OPTION (pfile, c99) = 1;\n-\t  CPP_OPTION (pfile, digraphs) = 1;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  set_lang (pfile, CLK_GNUC99);\n \t  break;\n \tcase OPT_std_iso9899_199409:\n-\t  new_pending_directive (pend, \"__STDC_VERSION__=199409L\", cpp_define);\n-\t  /* Fall through */\n+\t  set_lang (pfile, CLK_STDC94);\n+\t  break;\n \tcase OPT_std_iso9899_1990:\n \tcase OPT_std_c89:\n \tcase OPT_lang_c89:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n-\t  CPP_OPTION (pfile, c89) = 1;\n-\t  CPP_OPTION (pfile, c99) = 0;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  CPP_OPTION (pfile, digraphs) = opt_code == OPT_std_iso9899_199409;\n-\t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n+\t  set_lang (pfile, CLK_STDC89);\n \t  break;\n \tcase OPT_std_iso9899_199x:\n \tcase OPT_std_iso9899_1999:\n \tcase OPT_std_c9x:\n \tcase OPT_std_c99:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  CPP_OPTION (pfile, c89) = 0;\n-\t  CPP_OPTION (pfile, c99) = 1;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  CPP_OPTION (pfile, digraphs) = 1;\n-\t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n-\t  new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  set_lang (pfile, CLK_STDC99);\n+\t  break;\n+\tcase OPT_nostdinc:\n+\t  /* -nostdinc causes no default include directories.\n+\t     You must specify all include-file directories with -I.  */\n+\t  CPP_OPTION (pfile, no_standard_includes) = 1;\n+\t  break;\n+\tcase OPT_nostdincplusplus:\n+\t  /* -nostdinc++ causes no default C++-specific include directories. */\n+\t  CPP_OPTION (pfile, no_standard_cplusplus_includes) = 1;\n \t  break;\n \tcase OPT_o:\n \t  if (CPP_OPTION (pfile, out_fname) != NULL)"}, {"sha": "5922f94290f1f2f0f8dfe130cceeacea7e641fcb", "filename": "gcc/cpplib.h", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -152,6 +152,10 @@ enum cpp_ttype\n #undef OP\n #undef TK\n \n+/* C language kind, used when calling cpp_reader_init.  */\n+enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_STDC89, CLK_STDC94, CLK_STDC99,\n+\t     CLK_GNUCXX, CLK_CXX98, CLK_OBJC, CLK_OBJCXX, CLK_ASM};\n+\n /* Multiple-include optimisation.  */\n enum mi_state {MI_FAILED = 0, MI_OUTSIDE};\n enum mi_ind {MI_IND_NONE = 0, MI_IND_NOT};\n@@ -168,7 +172,7 @@ struct cpp_string\n #define DIGRAPH\t\t(1 << 1) /* If it was a digraph.  */\n #define STRINGIFY_ARG\t(1 << 2) /* If macro argument to be stringified.  */\n #define PASTE_LEFT\t(1 << 3) /* If on LHS of a ## operator.  */\n-#define NAMED_OP\t(1 << 4) /* C++ named operators, also \"defined\".  */\n+#define NAMED_OP\t(1 << 4) /* C++ named operators.  */\n #define NO_EXPAND\t(1 << 5) /* Do not macro-expand this token.  */\n \n /* A preprocessing token.  This has been carefully packed and should\n@@ -518,7 +522,7 @@ struct spec_nodes\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n };\n \n-/* a cpp_reader encapsulates the \"state\" of a pre-processor run.\n+/* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n    Applying cpp_get_token repeatedly yields a stream of pre-processor\n    tokens.  Usually, there is only one cpp_reader object active.  */\n \n@@ -711,33 +715,34 @@ union tree_node;\n \n struct cpp_hashnode\n {\n-  const unsigned char *name;\t\t/* null-terminated name */\n-  unsigned int hash;\t\t\t/* cached hash value */\n-  unsigned short length;\t\t/* length of name excluding null */\n-  unsigned short arg_index;\t\t/* macro argument index */\n-  unsigned char directive_index;\t/* index into directive table.  */\n-  ENUM_BITFIELD(node_type) type : 8;\t/* node type.  */\n-  unsigned char flags;\t\t\t/* node flags.  */\n+  const unsigned char *name;\t\t/* Null-terminated name.  */\n+  unsigned int hash;\t\t\t/* Cached hash value.  */\n+  unsigned short length;\t\t/* Length of name excluding null.  */\n+  unsigned short arg_index;\t\t/* Macro argument index.  */\n+  unsigned char directive_index;\t/* Index into directive table.  */\n+  ENUM_BITFIELD(node_type) type : 8;\t/* Node type.  */\n+  unsigned char flags;\t\t\t/* Node flags.  */\n \n   union\n   {\n-    cpp_macro *macro;\t\t\t/* a macro.  */\n-    struct answer *answers;\t\t/* answers to an assertion.  */\n-    enum cpp_ttype operator;\t\t/* code for a named operator.  */\n-    enum builtin_type builtin;\t\t/* code for a builtin macro.  */\n+    cpp_macro *macro;\t\t\t/* If a macro.  */\n+    struct answer *answers;\t\t/* Answers to an assertion.  */\n+    enum cpp_ttype operator;\t\t/* Code for a named operator.  */\n+    enum builtin_type builtin;\t\t/* Code for a builtin macro.  */\n   } value;\n \n-  union tree_node *fe_value;\t\t/* front end value */\n+  union tree_node *fe_value;\t\t/* Front end value.  */\n };\n \n extern unsigned int cpp_token_len PARAMS ((const cpp_token *));\n-extern unsigned char *cpp_token_as_text PARAMS ((cpp_reader *, const cpp_token *));\n+extern unsigned char *cpp_token_as_text PARAMS ((cpp_reader *,\n+\t\t\t\t\t\t const cpp_token *));\n extern unsigned char *cpp_spell_token PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t\t       unsigned char *));\n extern void cpp_init PARAMS ((void));\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n-extern void cpp_reader_init PARAMS ((cpp_reader *));\n+extern void cpp_reader_init PARAMS ((cpp_reader *, enum c_lang));\n \n extern void cpp_register_pragma PARAMS ((cpp_reader *,\n \t\t\t\t\t const char *, const char *,"}, {"sha": "d530e7d8427e268e881c4b172264cfa7e856a2bf", "filename": "gcc/cppmain.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -87,7 +87,8 @@ main (argc, argv)\n   (void) textdomain (PACKAGE);\n \n   cpp_init ();\n-  cpp_reader_init (pfile);\n+  /* Default language is GNU C89.  */\n+  cpp_reader_init (pfile, CLK_GNUC89);\n   \n   argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n   if (argi < argc && ! CPP_FATAL_ERRORS (pfile))"}, {"sha": "b3138488086a63b51ab21a0b1c4ebfa6bc369027", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -611,7 +611,7 @@ read_scan_file (in_fname, argc, argv)\n   obstack_init (&scan_file_obstack); \n \n   cpp_init ();\t\t\t/* Initialize cpplib.   */\n-  cpp_reader_init (&scan_in);\n+  cpp_reader_init (&scan_in, CLK_GNUC89);\n \n   /* We are going to be scanning a header file out of its proper context,\n      so ignore warnings and errors.  */"}, {"sha": "b1b0279fbd7283bef9ef86c63b582e7a398a648e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=dd07b88447abe48d1ec82b7e3fd7c2d95493b7e8", "patch": "@@ -700,7 +700,7 @@ lang_init_options ()\n {\n #if USE_CPPLIB\n   cpp_init ();\n-  cpp_reader_init (&parse_in);\n+  cpp_reader_init (&parse_in, CLK_GNUC89);\n #endif\n }\n "}]}