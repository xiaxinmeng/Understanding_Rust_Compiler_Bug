{"sha": "0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyYzJmZDFjMmQ3NmI4ZTUxOTkzNTljYzU4OWM1MDBiNjM4ZjZiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-29T22:52:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-29T22:52:57Z"}, "message": "class.c (class_cache_obstack, [...]): Remove.\n\n\t* class.c (class_cache_obstack, class_obstack): Remove.\n\t(init_class_processing): Don't initialize class_obstack.\n\t(push_cache_obstack): Remove.\n\t(pushclass): Don't call it.\n\t* cp-tree.h: Remove prototype for push_cache_obstack.\n\t* decl.c (decl_obstack, decl_stack, push_decl_level): Remove.\n\t(pushlevel_class): Don't push_decl_level.\n\t(poplevel_class): Don't pop_stack_level.\n\t(push_class_level_binding): Don't push_cache_obstack.\n\t(init_decl_processing): Don't intialize decl_obstack.\n\t* search.c (push_class_decls): Don't push_cache_obstack.\n\t* tree.c (list_hash_add): Put hash node on permanent_obstack.\n\t(hash_tree_cons): Don't mess with obstacks.\n\t(print_lang_statistics): Don't print stats for class_obstack and\n\tdecl_obstack.\n\nFrom-SVN: r29711", "tree": {"sha": "e423e74ff563694236590b09b2e3b7dc40c26211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e423e74ff563694236590b09b2e3b7dc40c26211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/comments", "author": null, "committer": null, "parents": [{"sha": "3bc6a13bb6b227b0a58b0662fc527e1d73d1bfff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc6a13bb6b227b0a58b0662fc527e1d73d1bfff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc6a13bb6b227b0a58b0662fc527e1d73d1bfff"}], "stats": {"total": 105, "additions": 21, "deletions": 84}, "files": [{"sha": "905047b6c5e72e3b05b9262979c593a6a64bce73", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -1,3 +1,21 @@\n+1999-09-29  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (class_cache_obstack, class_obstack): Remove.\n+\t(init_class_processing): Don't initialize class_obstack.\n+\t(push_cache_obstack): Remove.\n+\t(pushclass): Don't call it.\n+\t* cp-tree.h: Remove prototype for push_cache_obstack.\n+\t* decl.c (decl_obstack, decl_stack, push_decl_level): Remove.\n+\t(pushlevel_class): Don't push_decl_level.\n+\t(poplevel_class): Don't pop_stack_level.\n+\t(push_class_level_binding): Don't push_cache_obstack.\n+\t(init_decl_processing): Don't intialize decl_obstack.\n+\t* search.c (push_class_decls): Don't push_cache_obstack.\n+\t* tree.c (list_hash_add): Put hash node on permanent_obstack.\n+\t(hash_tree_cons): Don't mess with obstacks.\n+\t(print_lang_statistics): Don't print stats for class_obstack and\n+\tdecl_obstack.\n+\n 1999-09-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* dump.c (dequeue_and_dump): Dump DECL_EXTERNAL."}, {"sha": "afe33462702e1b77b8c766760c19a045c99009f6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -72,9 +72,6 @@ typedef struct class_stack_node {\n static int current_class_stack_size;\n static class_stack_node_t current_class_stack;\n \n-/* The obstack on which the cached class declarations are kept.  */\n-static struct obstack class_cache_obstack;\n-\n struct base_info;\n \n static tree get_vfield_name PROTO((tree));\n@@ -1055,8 +1052,6 @@ add_virtual_function (pv, phv, has_virtual, fndecl, t)\n   *phv = pending_hard_virtuals;\n }\n \f\n-/* Obstack on which to build the vector of class methods.  */\n-struct obstack class_obstack;\n extern struct obstack *current_obstack;\n \n /* Add method METHOD to class TYPE.\n@@ -4412,8 +4407,6 @@ init_class_processing ()\n   access_public_virtual_node = build_int_2 (5, 0);\n   access_protected_virtual_node = build_int_2 (6, 0);\n   access_private_virtual_node = build_int_2 (7, 0);\n-\n-  gcc_obstack_init (&class_obstack);\n }\n \n /* Set current scope to NAME. CODE tells us if this is a\n@@ -4493,12 +4486,6 @@ pushclass (type, modify)\n     {\n       /* Forcibly remove any old class remnants.  */\n       invalidate_class_lookup_cache ();\n-\n-      /* Now, free the obstack on which we cached all the values.  */\n-      if (class_cache_firstobj)\n-\tobstack_free (&class_cache_obstack, class_cache_firstobj);\n-      class_cache_firstobj \n-\t= (char*) obstack_finish (&class_cache_obstack);\n     }\n \n   /* If we're about to enter a nested class, clear\n@@ -5246,27 +5233,6 @@ print_class_statistics ()\n #endif\n }\n \n-/* Push an obstack which is sufficiently long-lived to hold such class\n-   decls that may be cached in the previous_class_values list. The\n-   effect is undone by pop_obstacks.  */\n-\n-void\n-push_cache_obstack ()\n-{\n-  static int cache_obstack_initialized;\n-\n-  if (!cache_obstack_initialized)\n-    {\n-      gcc_obstack_init (&class_cache_obstack);\n-      class_cache_firstobj \n-\t= (char*) obstack_finish (&class_cache_obstack);\n-      cache_obstack_initialized = 1;\n-    }\n-\n-  push_obstacks_nochange ();\n-  current_obstack = &class_cache_obstack;\n-}\n-\n /* Build a dummy reference to ourselves so Derived::Base (and A::A) works,\n    according to [class]:\n                                           The class-name is also inserted"}, {"sha": "cd3a2dd5e142e119018594fc6408156521673940", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -3264,7 +3264,6 @@ extern void push_lang_context\t\t\tPROTO((tree));\n extern void pop_lang_context\t\t\tPROTO((void));\n extern tree instantiate_type\t\t\tPROTO((tree, tree, int));\n extern void print_class_statistics\t\tPROTO((void));\n-extern void push_cache_obstack\t\t        PROTO((void));\n extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *, tree));\n extern void build_self_reference\t\tPROTO((void));\n extern void warn_hidden\t\t\t\tPROTO((tree));"}, {"sha": "9ff542ef0fc5fa266f0cdf3b1173f099a5ae6b69", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -63,12 +63,6 @@ extern int (*valid_lang_attribute) PROTO ((tree, tree, tree, tree));\n \n int ggc_p = 1;\n \n-/* Obstack used for remembering local class declarations (like\n-   enums and static (const) members.  */\n-#include \"stack.h\"\n-struct obstack decl_obstack;\n-static struct stack_level *decl_stack;\n-\n #ifndef WCHAR_UNSIGNED\n #define WCHAR_UNSIGNED 0\n #endif\n@@ -106,8 +100,6 @@ static struct stack_level *decl_stack;\n static tree grokparms\t\t\t\tPROTO((tree, int));\n static const char *redeclaration_error_message\tPROTO((tree, tree));\n \n-static struct stack_level *push_decl_level PROTO((struct stack_level *,\n-\t\t\t\t\t\t  struct obstack *));\n static void push_binding_level PROTO((struct binding_level *, int,\n \t\t\t\t      int));\n static void pop_binding_level PROTO((void));\n@@ -385,20 +377,6 @@ tree signed_size_zero_node;\n    unit.  */\n tree anonymous_namespace_name;\n \n-\f\n-/* Allocate a level of searching.  */\n-\n-static\n-struct stack_level *\n-push_decl_level (stack, obstack)\n-     struct stack_level *stack;\n-     struct obstack *obstack;\n-{\n-  struct stack_level tem;\n-  tem.prev = stack;\n-\n-  return push_stack_level (obstack, (char *)&tem, sizeof (tem));\n-}\n \f\n /* For each binding contour we allocate a binding_level structure\n    which records the names defined in that contour.\n@@ -1569,7 +1547,6 @@ pushlevel_class ()\n \n   push_binding_level (newlevel, 0, 0);\n \n-  decl_stack = push_decl_level (decl_stack, &decl_obstack);\n   class_binding_level = current_binding_level;\n   class_binding_level->parm_flag = 2;\n }\n@@ -1584,7 +1561,6 @@ poplevel_class ()\n \n   my_friendly_assert (level != 0, 354);\n   \n-  decl_stack = pop_stack_level (decl_stack);\n   /* If we're leaving a toplevel class, don't bother to do the setting\n      of IDENTIFIER_CLASS_VALUE to NULL_TREE, since first of all this slot\n      shouldn't even be used when current_class_type isn't set, and second,\n@@ -4316,11 +4292,9 @@ push_class_level_binding (name, x)\n      IDENTIFIER_CLASS_VALUE.  */\n   if (push_class_binding (name, x))\n     {\n-      push_cache_obstack ();\n       class_binding_level->class_shadowed\n \t= tree_cons (name, IDENTIFIER_CLASS_VALUE (name),\n \t\t     class_binding_level->class_shadowed);\n-      pop_obstacks ();\n       /* Record the value we are binding NAME to so that we can know\n \t what to pop later.  */\n       TREE_TYPE (class_binding_level->class_shadowed) = x;\n@@ -6062,8 +6036,6 @@ init_decl_processing ()\n   signal (SIGBUS, signal_catch);\n #endif\n \n-  gcc_obstack_init (&decl_obstack);\n-\n   build_common_tree_nodes (flag_signed_char);\n \n   error_mark_list = build_tree_list (error_mark_node, error_mark_node);"}, {"sha": "5b7c181ab947da0a13c87c45bbf26b8c34d98bdd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -3623,7 +3623,7 @@ maybe_get_template_decl_from_type_decl (decl)\n    D1 is the PTYPENAME terminal, and ARGLIST is the list of arguments.\n    (Actually ARGLIST may be either a TREE_LIST or a TREE_VEC.  It will\n    be a TREE_LIST if called directly from the parser, and a TREE_VEC\n-   otherwise.)  Since ARGLIST is build on the decl_obstack, we must\n+   otherwise.)  Since ARGLIST is build on the temp_decl_obstack, we must\n    copy it here to keep it from being reclaimed when the decl storage\n    is reclaimed.\n "}, {"sha": "2b31af0406e114abff9e47e85eac354691951511", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -3125,24 +3125,13 @@ void\n push_class_decls (type)\n      tree type;\n {\n-  struct obstack *ambient_obstack = current_obstack;\n   search_stack = push_search_level (search_stack, &search_obstack);\n \n-  /* Build up all the relevant bindings and such on the cache\n-     obstack.  That way no memory is wasted when we throw away the\n-     cache later.  */\n-  push_cache_obstack ();\n-\n   /* Enter type declarations and mark.  */\n   dfs_walk (TYPE_BINFO (type), dfs_push_type_decls, unmarked_pushdecls_p, 0);\n \n   /* Enter non-type declarations and unmark.  */\n   dfs_walk (TYPE_BINFO (type), dfs_push_decls, marked_pushdecls_p, 0);\n-\n-  /* Undo the call to push_cache_obstack above.  */\n-  pop_obstacks ();\n-\n-  current_obstack = ambient_obstack;\n }\n \n /* Here's a subroutine we need because C lacks lambdas.  */"}, {"sha": "8e4f2daa0dcccd32f1dc0d6d38fcea7dea6767ad", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c2fd1c2d76b8e5199359cc589c500b638f6b1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0a2c2fd1c2d76b8e5199359cc589c500b638f6b1", "patch": "@@ -398,7 +398,7 @@ break_out_calls (exp)\n }\n \f\n extern struct obstack *current_obstack;\n-extern struct obstack permanent_obstack, class_obstack;\n+extern struct obstack permanent_obstack;\n extern struct obstack *saveable_obstack;\n extern struct obstack *expression_obstack;\n \n@@ -1110,7 +1110,7 @@ list_hash_add (hashcode, list)\n {\n   register struct list_hash *h;\n \n-  h = (struct list_hash *) obstack_alloc (&class_obstack, sizeof (struct list_hash));\n+  h = (struct list_hash *) obstack_alloc (&permanent_obstack, sizeof (struct list_hash));\n   h->hashcode = hashcode;\n   h->list = list;\n   h->next = list_hash_table[hashcode % TYPE_HASH_SIZE];\n@@ -1129,7 +1129,6 @@ tree\n hash_tree_cons (purpose, value, chain)\n      tree purpose, value, chain;\n {\n-  struct obstack *ambient_obstack = current_obstack;\n   tree t;\n   int hashcode = 0;\n \n@@ -1141,15 +1140,12 @@ hash_tree_cons (purpose, value, chain)\n \treturn t;\n     }\n \n-  current_obstack = &class_obstack;\n-\n   t = tree_cons (purpose, value, chain);\n \n   /* If this is a new list, record it for later reuse.  */\n   if (! debug_no_list_hash)\n     list_hash_add (hashcode, t);\n \n-  current_obstack = ambient_obstack;\n   return t;\n }\n \n@@ -2040,9 +2036,6 @@ extern int depth_reached;\n void\n print_lang_statistics ()\n {\n-  extern struct obstack decl_obstack;\n-  print_obstack_statistics (\"class_obstack\", &class_obstack);\n-  print_obstack_statistics (\"decl_obstack\", &decl_obstack);\n   print_search_statistics ();\n   print_class_statistics ();\n #ifdef GATHER_STATISTICS"}]}