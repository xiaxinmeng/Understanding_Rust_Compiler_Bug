{"sha": "b89723546a9acd531f110e9a8a481a300b918822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5NzIzNTQ2YTlhY2Q1MzFmMTEwZTlhOGE0ODFhMzAwYjkxODgyMg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-12T13:27:30Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-12T13:27:30Z"}, "message": "defaults.h (TARGET_FLOAT_FORMAT): Remove.\n\nChangeLog:\n\n\t* defaults.h (TARGET_FLOAT_FORMAT): Remove.\n\t(UNKNOWN_FLOAT_FORMAT, IEEE_FLOAT_FORMAT, VAX_FLOAT_FORMAT): Remove.\n\n\t* config/alpha/alpha.h (TARGET_FLOAT_FORMAT): Remove.\n\t* config/iq2000/iq2000.h (TARGET_FLOAT_FORMAT): Remove.\n\t* config/pdp11/pdp11.h (TARGET_FLOAT_FORMAT): Remove.\n\t* config/score/score.h (TARGET_FLOAT_FORMAT): Remove.\n\t* config/vax/vax.h (TARGET_FLOAT_FORMAT): Remove.\n\n\t* doc/tm.texi (Storage Layout): Remove documentation for\n\tTARGET_FLOAT_FORMAT.\n\n\t* simplify-rtx.c (simplify_binary_operation_1): Replace\n\tTARGET_FLOAT_FORMAT check by appropriate HONOR_... checks.\n\njava/ChangeLog:\n\n\t* typeck.c (convert): Do not check for TARGET_FLOAT_FORMAT.\n\nFrom-SVN: r139017", "tree": {"sha": "d28f6f2e60f4c6ef701862e04393f7d34f05dddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d28f6f2e60f4c6ef701862e04393f7d34f05dddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89723546a9acd531f110e9a8a481a300b918822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89723546a9acd531f110e9a8a481a300b918822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89723546a9acd531f110e9a8a481a300b918822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89723546a9acd531f110e9a8a481a300b918822/comments", "author": null, "committer": null, "parents": [{"sha": "4099e2c2bb7e81926d3ee91a856834ee7672c694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099e2c2bb7e81926d3ee91a856834ee7672c694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4099e2c2bb7e81926d3ee91a856834ee7672c694"}], "stats": {"total": 75, "additions": 24, "deletions": 51}, "files": [{"sha": "45f2cb97e722f7263bba62544ddb8f435e0f4090", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -1,3 +1,20 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* defaults.h (TARGET_FLOAT_FORMAT): Remove.\n+\t(UNKNOWN_FLOAT_FORMAT, IEEE_FLOAT_FORMAT, VAX_FLOAT_FORMAT): Remove.\n+\n+\t* config/alpha/alpha.h (TARGET_FLOAT_FORMAT): Remove.\n+\t* config/iq2000/iq2000.h (TARGET_FLOAT_FORMAT): Remove.\n+\t* config/pdp11/pdp11.h (TARGET_FLOAT_FORMAT): Remove.\n+\t* config/score/score.h (TARGET_FLOAT_FORMAT): Remove.\n+\t* config/vax/vax.h (TARGET_FLOAT_FORMAT): Remove.\n+\n+\t* doc/tm.texi (Storage Layout): Remove documentation for\n+\tTARGET_FLOAT_FORMAT.\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1): Replace\n+\tTARGET_FLOAT_FORMAT check by appropriate HONOR_... checks.\n+\n 2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* real.h (struct real_format): New member has_sign_dependent_rounding."}, {"sha": "b37a19d1e44de82db3c7a544ac7b61d6ef62e177", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -245,10 +245,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n /* Define the size of `long long'.  The default is the twice the word size.  */\n #define LONG_LONG_TYPE_SIZE 64\n \n-/* We're IEEE unless someone says to use VAX.  */\n-#define TARGET_FLOAT_FORMAT \\\n-  (TARGET_FLOAT_VAX ? VAX_FLOAT_FORMAT : IEEE_FLOAT_FORMAT)\n-\n /* The two floating-point formats we support are S-floating, which is\n    4 bytes, and T-floating, which is 8 bytes.  `float' is S and `double'\n    and `long double' are T.  */"}, {"sha": "f99a85d9593c7cf3f211455709061835a2127375", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -128,8 +128,6 @@\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-#define TARGET_FLOAT_FORMAT IEEE_FLOAT_FORMAT\n-\n \f\n /* Layout of Source Language Data Types.  */\n "}, {"sha": "662886cf8dbf7b9701905f736020c35aa840fdf8", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -100,8 +100,6 @@ along with GCC; see the file COPYING3.  If not see\n    big endian, opposite for what you need for float, the vax float\n    conversion routines aren't actually used directly.  But the underlying\n    format is indeed the vax/pdp11 float format.  */\n-#define TARGET_FLOAT_FORMAT VAX_FLOAT_FORMAT\n-\n extern const struct real_format pdp11_f_format;\n extern const struct real_format pdp11_d_format;\n "}, {"sha": "d400f6ab0ce6d35e02fe54a6941995fd28eb9000", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -198,8 +198,6 @@\n    support long double, we also want a 128-bit integer type.  */\n #define MAX_FIXED_MODE_SIZE            LONG_DOUBLE_TYPE_SIZE\n \n-#define TARGET_FLOAT_FORMAT            IEEE_FLOAT_FORMAT\n-\n /* Layout of Data Type.  */\n /* Set the sizes of the core types.  */\n #define INT_TYPE_SIZE                   32"}, {"sha": "84a6ba4bd1a3afe08ea0ed157eabd7e3c34705fb", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -642,10 +642,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n-/* This machine doesn't use IEEE floats.  */\n-\n-#define TARGET_FLOAT_FORMAT VAX_FLOAT_FORMAT\n-\n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch.\n "}, {"sha": "282a14ac00a063e024864fc6c578c62229bd9ae7", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -663,16 +663,6 @@ along with GCC; see the file COPYING3.  If not see\n #define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n #endif\n \n-/* Define codes for all the float formats that we know of.  */\n-#define UNKNOWN_FLOAT_FORMAT 0\n-#define IEEE_FLOAT_FORMAT 1\n-#define VAX_FLOAT_FORMAT 2\n-\n-/* Default to IEEE float if not specified.  Nearly all machines use it.  */\n-#ifndef TARGET_FLOAT_FORMAT\n-#define\tTARGET_FLOAT_FORMAT\tIEEE_FLOAT_FORMAT\n-#endif\n-\n #ifndef LARGEST_EXPONENT_IS_NORMAL\n #define LARGEST_EXPONENT_IS_NORMAL(SIZE) 0\n #endif"}, {"sha": "5decc331bd425e420bbc16d56bcfef423d6cd9b4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -1385,28 +1385,6 @@ of shift instructions expanded to libgcc calls.  If not defined\n targets.\n @end deftypefn\n \n-@defmac TARGET_FLOAT_FORMAT\n-A code distinguishing the floating point format of the target machine.\n-There are two defined values:\n-\n-@ftable @code\n-@item IEEE_FLOAT_FORMAT\n-This code indicates IEEE floating point.  It is the default; there is no\n-need to define @code{TARGET_FLOAT_FORMAT} when the format is IEEE@.\n-\n-@item VAX_FLOAT_FORMAT\n-This code indicates the ``F float'' (for @code{float}) and ``D float''\n-or ``G float'' formats (for @code{double}) used on the VAX and PDP-11@.\n-@end ftable\n-\n-If your target uses a floating point format other than these, you must\n-define a new @var{name}_FLOAT_FORMAT code for it, and add support for\n-it to @file{real.c}.\n-\n-The ordering of the component words of floating point values stored in\n-memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN}.\n-@end defmac\n-\n @defmac ROUND_TOWARDS_ZERO\n If defined, this macro should be true if the prevailing rounding\n mode is towards zero."}, {"sha": "f1ee4d6febc33ccbda643458c2d9f54263293574", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -1,3 +1,7 @@\n+2008-08-12  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* typeck.c (convert): Do not check for TARGET_FLOAT_FORMAT.\n+\n 2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 28875"}, {"sha": "e812f31b829091bc453f2adde483ad8bd3173108", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -131,8 +131,7 @@ convert (tree type, tree expr)\n       if (type == char_type_node || type == promoted_char_type_node)\n \treturn fold_convert (type, expr);\n       if ((really_constant_p (expr) || ! flag_unsafe_math_optimizations)\n-\t  && TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n-\t  && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\t  && TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE)\n \treturn convert_ieee_real_to_integer (type, expr);\n       else\n \t{"}, {"sha": "6fd77ff1543be2e63243b773b13fd0a58e9be8cd", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89723546a9acd531f110e9a8a481a300b918822/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b89723546a9acd531f110e9a8a481a300b918822", "patch": "@@ -1740,9 +1740,8 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t so we can distinguish it from a register-register-copy.\n \n \t In IEEE floating point, x-0 is not the same as x.  */\n-\n-      if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t   || ! FLOAT_MODE_P (mode) || flag_unsafe_math_optimizations)\n+      if (!(HONOR_SIGNED_ZEROS (mode)\n+\t    && HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n \t  && trueop1 == CONST0_RTX (mode))\n \treturn op0;\n #endif"}]}