{"sha": "8b1a5da38e00348dfc359ef8418de344356ef78e", "node_id": "C_kwDOANBUbNoAKDhiMWE1ZGEzOGUwMDM0OGRmYzM1OWVmODQxOGRlMzQ0MzU2ZWY3OGU", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-08-11T16:52:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:37Z"}, "message": "[Ada] Implementation of AI12-0212: iterator specs in array aggregates (II)\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Array_Aggregate,\n\tTwo_Pass_Aggregate_Expansion): Increment index for element\n\tinsertion within the loop, only if upper bound has not been\n\treached.", "tree": {"sha": "5a55950de3fdcf86dded4cc8f708c13a8a4f227b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a55950de3fdcf86dded4cc8f708c13a8a4f227b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b1a5da38e00348dfc359ef8418de344356ef78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1a5da38e00348dfc359ef8418de344356ef78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1a5da38e00348dfc359ef8418de344356ef78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1a5da38e00348dfc359ef8418de344356ef78e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475e1d240086365da3e240fb9199eb1c5ad511f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/475e1d240086365da3e240fb9199eb1c5ad511f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/475e1d240086365da3e240fb9199eb1c5ad511f8"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "71bad3cb6765086c5a7a4e2c107dcd34b0a642e3", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1a5da38e00348dfc359ef8418de344356ef78e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1a5da38e00348dfc359ef8418de344356ef78e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=8b1a5da38e00348dfc359ef8418de344356ef78e", "patch": "@@ -6504,6 +6504,18 @@ package body Exp_Aggr is\n                           Expressions =>\n                             New_List (New_Occurrence_Of (Index_Id, Loc))));\n \n+            --  Add guard to skip last increment when upper bound is reached.\n+\n+            Incr := Make_If_Statement (Loc,\n+               Condition =>\n+                  Make_Op_Ne (Loc,\n+                  Left_Opnd  => New_Occurrence_Of (Index_Id, Loc),\n+                  Right_Opnd =>\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix => New_Occurrence_Of (Index_Type, Loc),\n+                      Attribute_Name => Name_Last)),\n+               Then_Statements => New_List (Incr));\n+\n             One_Loop := Make_Loop_Statement (Loc,\n               Iteration_Scheme =>\n                 Make_Iteration_Scheme (Loc,\n@@ -6561,11 +6573,10 @@ package body Exp_Aggr is\n          return;\n \n       elsif Present (Component_Associations (N))\n-         and then\n-            Nkind (First (Component_Associations (N)))\n-               = N_Iterated_Component_Association\n-           and then Present\n-             (Iterator_Specification (First (Component_Associations (N))))\n+        and then Nkind (First (Component_Associations (N))) =\n+                 N_Iterated_Component_Association\n+        and then\n+          Present (Iterator_Specification (First (Component_Associations (N))))\n       then\n          Two_Pass_Aggregate_Expansion (N);\n          return;\n@@ -7389,7 +7400,7 @@ package body Exp_Aggr is\n          elsif Nkind (Comp) = N_Iterated_Element_Association then\n             return -1;\n \n-            --  TBD : Create code for a loop and add to generated code,\n+            --  ??? Need to create code for a loop and add to generated code,\n             --  as is done for array aggregates with iterated element\n             --  associations, instead of using Append operations.\n "}]}