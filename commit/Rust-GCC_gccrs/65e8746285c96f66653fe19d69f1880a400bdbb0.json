{"sha": "65e8746285c96f66653fe19d69f1880a400bdbb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlODc0NjI4NWM5NmY2NjY1M2ZlMTlkNjlmMTg4MGE0MDBiZGJiMA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-08-02T22:39:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-08-02T22:39:59Z"}, "message": "nds32.c (nds32_hard_regno_mode_ok): Replace > with >=.\n\n\t* config/nds32/nds32.c (nds32_hard_regno_mode_ok): Replace > with >=.\n\t* df-problems.c (df_remove_dead_eq_notes): Replace > with >=.\n\t* dwarf2out.c (mem_loc_descriptor): Replace > with >=.\n\t* lra-constraints.c (spill_hard_reg_in_range): Replace <= with <.\n\t* lra-remat.c (call_used_input_regno_present_p): Replace <= with <.\n\nFrom-SVN: r263280", "tree": {"sha": "3c741572febf94789ee04e248dbfec94bf30b93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c741572febf94789ee04e248dbfec94bf30b93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e8746285c96f66653fe19d69f1880a400bdbb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8746285c96f66653fe19d69f1880a400bdbb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e8746285c96f66653fe19d69f1880a400bdbb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8746285c96f66653fe19d69f1880a400bdbb0/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "653fee1961981f1fee3a0ced7ac4d36b4cec2064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653fee1961981f1fee3a0ced7ac4d36b4cec2064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653fee1961981f1fee3a0ced7ac4d36b4cec2064"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "80685cdd84d09f248d8b70ab335002bd5bc5145d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -1,3 +1,11 @@\n+2018-07-19  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/nds32/nds32.c (nds32_hard_regno_mode_ok): Replace > with >=.\n+\t* df-problems.c (df_remove_dead_eq_notes): Replace > with >=.\n+\t* dwarf2out.c (mem_loc_descriptor): Replace > with >=.\n+\t* lra-constraints.c (spill_hard_reg_in_range): Replace <= with <.\n+\t* lra-remat.c (call_used_input_regno_present_p): Replace <= with <.\n+\n 2018-08-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c (diagnostic_show_locus): Use"}, {"sha": "721135e6ba182bb7d0c30a92754220e3d38a2f3a", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -4342,7 +4342,7 @@ nds32_hard_regno_nregs (unsigned regno ATTRIBUTE_UNUSED,\n static bool\n nds32_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n {\n-  if (regno > FIRST_PSEUDO_REGISTER)\n+  if (regno >= FIRST_PSEUDO_REGISTER)\n     return true;\n \n   if ((TARGET_FPU_SINGLE || TARGET_FPU_DOUBLE) && NDS32_IS_FPR_REGNUM (regno))"}, {"sha": "7ccb57c287aed5d2bbde17f3d3757b6050c951ab", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -3205,7 +3205,7 @@ df_remove_dead_eq_notes (rtx_insn *insn, bitmap live)\n \t    bool deleted = false;\n \n \t    FOR_EACH_INSN_EQ_USE (use, insn)\n-\t      if (DF_REF_REGNO (use) > FIRST_PSEUDO_REGISTER\n+\t      if (DF_REF_REGNO (use) >= FIRST_PSEUDO_REGISTER\n \t\t  && DF_REF_LOC (use)\n \t\t  && (DF_REF_FLAGS (use) & DF_REF_IN_NOTE)\n \t\t  && !bitmap_bit_p (live, DF_REF_REGNO (use))"}, {"sha": "1850a0f93e798cd7cf57d9ccce2e0725de109ec5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -15476,7 +15476,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \n \t  if (dwarf_strict && dwarf_version < 5)\n \t    break;\n-\t  if (REGNO (rtl) > FIRST_PSEUDO_REGISTER)\n+\t  if (REGNO (rtl) >= FIRST_PSEUDO_REGISTER)\n \t    break;\n \t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)"}, {"sha": "8be4d46c8ad79b68397e9ec6ab49a262ccec36d1", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -5709,7 +5709,7 @@ spill_hard_reg_in_range (int regno, enum reg_class rclass, rtx_insn *from, rtx_i\n       struct lra_insn_reg *reg;\n       \n       for (reg = id->regs; reg != NULL; reg = reg->next)\n-\tif (reg->regno <= FIRST_PSEUDO_REGISTER)\n+\tif (reg->regno < FIRST_PSEUDO_REGISTER)\n \t  SET_HARD_REG_BIT (ignore, reg->regno);\n       for (reg = static_id->hard_regs; reg != NULL; reg = reg->next)\n \tSET_HARD_REG_BIT (ignore, reg->regno);"}, {"sha": "faf74ca8de766f20cf028bc13aca1f6dba01fefa", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8746285c96f66653fe19d69f1880a400bdbb0/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=65e8746285c96f66653fe19d69f1880a400bdbb0", "patch": "@@ -708,7 +708,7 @@ call_used_input_regno_present_p (rtx_insn *insn)\n     for (reg = (iter == 0 ? id->regs : static_id->hard_regs);\n \t reg != NULL;\n \t reg = reg->next)\n-      if (reg->type == OP_IN && reg->regno <= FIRST_PSEUDO_REGISTER\n+      if (reg->type == OP_IN && reg->regno < FIRST_PSEUDO_REGISTER\n \t  && TEST_HARD_REG_BIT (call_used_reg_set, reg->regno))\n \treturn true;\n   return false;"}]}