{"sha": "a312c80194685790aec7cf678eba83a536031cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxMmM4MDE5NDY4NTc5MGFlYzdjZjY3OGViYTgzYTUzNjAzMWNiZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-01-21T20:42:17Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-01-21T20:57:30Z"}, "message": "[coro] Fix co_await of void type.\n\ngcc/cp\n2020-01-21  Iain Sandoe  <iain@sandoe.co.uk>\n    Bin Cheng  <bin.cheng@linux.alibaba.com>\n\n* coroutines.cc (coro_promise_type_found_p): Check for NULL return\nfrom complete_type_or_else.\n(register_param_uses): Likewise.\n(build_co_await): Do not try to use complete_type_or_else for void\ntypes, otherwise for incomplete types, check for NULL return from\ncomplete_type_or_else.\n\ngcc/testsuite\n2020-01-21  Bin Cheng  <bin.linux@linux.alibaba.com>\n\n* g++.dg/coroutines/co-await-void_type.C: New test.", "tree": {"sha": "80541e1c9df1ce219287468f736a8f2042f336f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80541e1c9df1ce219287468f736a8f2042f336f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a312c80194685790aec7cf678eba83a536031cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312c80194685790aec7cf678eba83a536031cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a312c80194685790aec7cf678eba83a536031cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312c80194685790aec7cf678eba83a536031cbf/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0a3e244d94ad4a5e41f01ebf285f0861cb4a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0a3e244d94ad4a5e41f01ebf285f0861cb4a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0a3e244d94ad4a5e41f01ebf285f0861cb4a03"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "3fc1b31e5cd4bb475174c3a4d4c9d752ead973a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a312c80194685790aec7cf678eba83a536031cbf", "patch": "@@ -1,3 +1,13 @@\n+2020-01-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\t    Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* coroutines.cc (coro_promise_type_found_p): Check for NULL return\n+\tfrom complete_type_or_else.\n+\t(register_param_uses): Likewise.\n+\t(build_co_await): Do not try to use complete_type_or_else for void\n+\ttypes, otherwise for incomplete types, check for NULL return from\n+\tcomplete_type_or_else.\n+\n 2020-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91476 - anon-namespace reference temp clash between TUs."}, {"sha": "b99e7215639589f942ec6fa06520dc16d6d6eabf", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=a312c80194685790aec7cf678eba83a536031cbf", "patch": "@@ -428,8 +428,9 @@ coro_promise_type_found_p (tree fndecl, location_t loc)\n \n       /* Complete this, we're going to use it.  */\n       coro_info->handle_type = complete_type_or_else (handle_type, fndecl);\n+\n       /* Diagnostic would be emitted by complete_type_or_else.  */\n-      if (coro_info->handle_type == error_mark_node)\n+      if (!coro_info->handle_type)\n \treturn false;\n \n       /* Build a proxy for a handle to \"self\" as the param to\n@@ -633,7 +634,13 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n   else\n     o = a; /* This is most likely about to fail anyway.  */\n \n-  tree o_type = complete_type_or_else (TREE_TYPE (o), o);\n+  tree o_type = TREE_TYPE (o);\n+  if (o_type && !VOID_TYPE_P (o_type))\n+    o_type = complete_type_or_else (o_type, o);\n+\n+  if (!o_type)\n+    return error_mark_node;\n+\n   if (TREE_CODE (o_type) != RECORD_TYPE)\n     {\n       error_at (loc, \"awaitable type %qT is not a structure\",\n@@ -2730,6 +2737,10 @@ register_param_uses (tree *stmt, int *do_subtree ATTRIBUTE_UNUSED, void *d)\n       if (!COMPLETE_TYPE_P (actual_type))\n \tactual_type = complete_type_or_else (actual_type, *stmt);\n \n+      if (actual_type == NULL_TREE)\n+\t/* Diagnostic emitted by complete_type_or_else.  */\n+\tactual_type = error_mark_node;\n+\n       if (TREE_CODE (actual_type) == REFERENCE_TYPE)\n \tactual_type = build_pointer_type (TREE_TYPE (actual_type));\n "}, {"sha": "f4f11a98ae7d740c2a3ca5eaa3e3eefc4fa72052", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a312c80194685790aec7cf678eba83a536031cbf", "patch": "@@ -1,3 +1,7 @@\n+2020-01-21  Bin Cheng  <bin.linux@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/co-await-void_type.C: New test.\n+\n 2020-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93333"}, {"sha": "0bb8818133e6c374345627d0bfc65cb03b7beaa7", "filename": "gcc/testsuite/g++.dg/coroutines/co-await-void_type.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-void_type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312c80194685790aec7cf678eba83a536031cbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-void_type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-void_type.C?ref=a312c80194685790aec7cf678eba83a536031cbf", "patch": "@@ -0,0 +1,44 @@\n+//  { dg-additional-options \"-std=c++17 -fsyntax-only -w\" }\n+\n+#include <coroutine>\n+\n+class resumable {\n+public:\n+  struct promise_type;\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  resumable(coro_handle handle) : handle_(handle) {}\n+  resumable(resumable&) = delete;\n+  resumable(resumable&&) = delete;\n+  bool resume() {\n+    if (not handle_.done())\n+      handle_.resume();\n+    return not handle_.done();\n+  }\n+  int recent_val();\n+  ~resumable() { handle_.destroy(); }\n+private:\n+  coro_handle handle_;\n+};\n+\n+struct resumable::promise_type {\n+  int value_;\n+\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  auto get_return_object() {\n+    return coro_handle::from_promise(*this);\n+  }\n+  auto initial_suspend() { return std::suspend_always(); }\n+  auto final_suspend() { return std::suspend_always(); }\n+  void yield_value(int v) { value_ = v; }\n+  void unhandled_exception() {}\n+};\n+\n+int resumable::recent_val(){return handle_.promise().value_;}\n+\n+resumable foo(int n){\n+  int x = 1;\n+  co_await std::suspend_always();\n+  int y = 2;\n+  co_yield n + x + y;  // { dg-error \"awaitable type 'void' is not a structure\" }\n+}\n+"}]}