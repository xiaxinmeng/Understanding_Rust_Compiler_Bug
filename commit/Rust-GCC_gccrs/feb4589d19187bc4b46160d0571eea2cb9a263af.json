{"sha": "feb4589d19187bc4b46160d0571eea2cb9a263af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViNDU4OWQxOTE4N2JjNGI0NjE2MGQwNTcxZWVhMmNiOWEyNjNhZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-05-18T13:06:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-05-18T13:06:31Z"}, "message": "gcov: add new option -t that prints output to stdout (PR gcov-profile/84846).\n\n2018-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/84846\n\t* gcov.c (print_usage): Add new -t option.\n\t(process_args): Handle the option.\n\t(generate_results): Use stdout as output when requested by\n\tthe option.\n2018-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/84846\n\t* doc/gcov.texi: Document -t option of gcov tool.\n\nFrom-SVN: r260361", "tree": {"sha": "607bdc6d8962dc7e45630f718039a30d4ca6e05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607bdc6d8962dc7e45630f718039a30d4ca6e05c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feb4589d19187bc4b46160d0571eea2cb9a263af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb4589d19187bc4b46160d0571eea2cb9a263af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb4589d19187bc4b46160d0571eea2cb9a263af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb4589d19187bc4b46160d0571eea2cb9a263af/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c74bd3fba3572d5825fcc7fabfd136b22c7981ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74bd3fba3572d5825fcc7fabfd136b22c7981ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74bd3fba3572d5825fcc7fabfd136b22c7981ad"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "da16d874974de84642075053084d0a6725318b59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feb4589d19187bc4b46160d0571eea2cb9a263af", "patch": "@@ -1,3 +1,16 @@\n+2018-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/84846\n+\t* doc/gcov.texi: Document -t option of gcov tool.\n+\n+2018-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/84846\n+\t* gcov.c (print_usage): Add new -t option.\n+\t(process_args): Handle the option.\n+\t(generate_results): Use stdout as output when requested by\n+\tthe option.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/84846"}, {"sha": "4bd976db0b5dfcf54a9592215cfe2641f23d1bef", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=feb4589d19187bc4b46160d0571eea2cb9a263af", "patch": "@@ -134,6 +134,7 @@ gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n      [@option{-p}|@option{--preserve-paths}]\n      [@option{-r}|@option{--relative-only}]\n      [@option{-s}|@option{--source-prefix} @var{directory}]\n+     [@option{-t}|@option{--stdout}]\n      [@option{-u}|@option{--unconditional-branches}]\n      [@option{-x}|@option{--hash-filenames}]\n      @var{files}\n@@ -319,6 +320,10 @@ directory, and the pathname to the source directory is not wanted when\n determining the output file names.  Note that this prefix detection is\n applied before determining whether the source file is absolute.\n \n+@item -t\n+@itemx --stdout\n+Output to standard output instead of output files.\n+\n @item -u\n @itemx --unconditional-branches\n When branch probabilities are given, include those of unconditional branches."}, {"sha": "887972a1fcd9a1fc00f5814a00b0449b954509f2", "filename": "gcc/gcov.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=feb4589d19187bc4b46160d0571eea2cb9a263af", "patch": "@@ -462,6 +462,10 @@ static int flag_unconditional = 0;\n \n static int flag_gcov_file = 1;\n \n+/* Output to stdout instead to a gcov file.  */\n+\n+static int flag_use_stdout = 0;\n+\n /* Output progress indication if this is true.  This is off by default\n    and can be turned on by the -d option.  */\n \n@@ -831,6 +835,7 @@ print_usage (int error_p)\n   fnotice (file, \"  -p, --preserve-paths            Preserve all pathname components\\n\");\n   fnotice (file, \"  -r, --relative-only             Only show data for relative sources\\n\");\n   fnotice (file, \"  -s, --source-prefix DIR         Source prefix to elide\\n\");\n+  fnotice (file, \"  -t, --stdout                    Output to stdout instead of a file\\n\");\n   fnotice (file, \"  -u, --unconditional-branches    Show unconditional branch counts too\\n\");\n   fnotice (file, \"  -v, --version                   Print version number, then exit\\n\");\n   fnotice (file, \"  -w, --verbose                   Print verbose informations\\n\");\n@@ -874,6 +879,7 @@ static const struct option options[] =\n   { \"object-directory\",     required_argument, NULL, 'o' },\n   { \"object-file\",          required_argument, NULL, 'o' },\n   { \"source-prefix\",        required_argument, NULL, 's' },\n+  { \"stdout\",\t\t    no_argument,       NULL, 't' },\n   { \"unconditional-branches\", no_argument,     NULL, 'u' },\n   { \"display-progress\",     no_argument,       NULL, 'd' },\n   { \"hash-filenames\",\t    no_argument,       NULL, 'x' },\n@@ -888,7 +894,7 @@ process_args (int argc, char **argv)\n {\n   int opt;\n \n-  const char *opts = \"abcdfhijklmno:prs:uvwx\";\n+  const char *opts = \"abcdfhijklmno:prs:tuvwx\";\n   while ((opt = getopt_long (argc, argv, opts, options, NULL)) != -1)\n     {\n       switch (opt)\n@@ -952,6 +958,9 @@ process_args (int argc, char **argv)\n \tcase 'w':\n \t  flag_verbose = 1;\n \t  break;\n+\tcase 't':\n+\t  flag_use_stdout = 1;\n+\t  break;\n \tcase 'v':\n \t  print_version ();\n \t  /* print_version will exit.  */\n@@ -1293,7 +1302,7 @@ generate_results (const char *file_name)\n \tfile_name = canonicalize_name (file_name);\n     }\n \n-  if (flag_gcov_file && flag_intermediate_format)\n+  if (flag_gcov_file && flag_intermediate_format && !flag_use_stdout)\n     {\n       /* Open the intermediate file.  */\n       gcov_intermediate_filename = get_gcov_intermediate_filename (file_name);\n@@ -1325,22 +1334,35 @@ generate_results (const char *file_name)\n \t}\n \n       accumulate_line_counts (src);\n-      function_summary (&src->coverage, \"File\");\n+\n+      if (!flag_use_stdout)\n+\tfunction_summary (&src->coverage, \"File\");\n       total_lines += src->coverage.lines;\n       total_executed += src->coverage.lines_executed;\n       if (flag_gcov_file)\n \t{\n \t  if (flag_intermediate_format)\n \t    /* Output the intermediate format without requiring source\n \t       files.  This outputs a section to a *single* file.  */\n-\t    output_intermediate_file (gcov_intermediate_file, src);\n+\t    output_intermediate_file ((flag_use_stdout\n+\t\t\t\t       ? stdout : gcov_intermediate_file), src);\n \t  else\n-\t    output_gcov_file (file_name, src);\n-\t  fnotice (stdout, \"\\n\");\n+\t    {\n+\t      if (flag_use_stdout)\n+\t\t{\n+\t\t  if (src->coverage.lines)\n+\t\t    output_lines (stdout, src);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  output_gcov_file (file_name, src);\n+\t\t  fnotice (stdout, \"\\n\");\n+\t\t}\n+\t    }\n \t}\n     }\n \n-  if (flag_gcov_file && flag_intermediate_format)\n+  if (flag_gcov_file && flag_intermediate_format && !flag_use_stdout)\n     {\n       /* Now we've finished writing the intermediate file.  */\n       fclose (gcov_intermediate_file);"}]}