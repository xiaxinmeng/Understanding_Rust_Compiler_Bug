{"sha": "65e63687ff9b98601eef44c372bb5fa3df89b03a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNjM2ODdmZjliOTg2MDFlZWY0NGMzNzJiYjVmYTNkZjg5YjAzYQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-25T18:01:24Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-25T18:01:24Z"}, "message": "Remove Cygnus cruft.\n\n(config.status): Delete.\n(RTL_H): Define.\n(TREE_H): Use complete pathname, some native makes have minimal VPATH support.\n(*.o): Use complete pathname to headers in parent dir.\n(doc, info, dvi): Delete.\n\nFrom-SVN: r7148", "tree": {"sha": "a497f6704d63120be419a50561c0409a4f020680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a497f6704d63120be419a50561c0409a4f020680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e63687ff9b98601eef44c372bb5fa3df89b03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e63687ff9b98601eef44c372bb5fa3df89b03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e63687ff9b98601eef44c372bb5fa3df89b03a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e63687ff9b98601eef44c372bb5fa3df89b03a/comments", "author": null, "committer": null, "parents": [{"sha": "2fe8d2d69a0105c78b0c3d9e7e268e278fed988e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe8d2d69a0105c78b0c3d9e7e268e278fed988e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe8d2d69a0105c78b0c3d9e7e268e278fed988e"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "d9e4cf179e76975cbf65e61f56c8becba52e3b86", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e63687ff9b98601eef44c372bb5fa3df89b03a/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e63687ff9b98601eef44c372bb5fa3df89b03a/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=65e63687ff9b98601eef44c372bb5fa3df89b03a", "patch": "@@ -79,12 +79,6 @@ GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n # These are used because `configure' appends `cross-make'\n # to the makefile when making a cross-compiler.\n \n-# CYGNUS LOCAL: we don't use cross-make.  Instead we use the tools\n-# from the build tree, if they are available.\n-# program_transform_name and objdir are set by configure.in.\n-program_transform_name =\n-objdir = .\n-\n target= ... `configure' substitutes actual target name here.\n xmake_file= ... `configure' substitutes actual x- file name here.\n tmake_file= ... `configure' substitutes actual t- file name here.\n@@ -177,23 +171,10 @@ compiler: ../cc1plus\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o ../cc1plus \\\n \t      $(CXX_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n \n-\f\n Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure\n \tcd ..; $(SHELL) config.status\n \n native: config.status ../cc1plus\n-\n-# Really, really stupid make features, such as SUN's KEEP_STATE, may force\n-# a target to build even if it is up-to-date.  So we must verify that\n-# config.status does not exist before failing.\n-config.status:\n-\t@if [ ! -f config.status ] ; then \\\n-\t  echo You must configure gcc.  Look at the ../INSTALL file for details.; \\\n-\t  false; \\\n-\telse \\\n-\t  true; \\\n-\tfi\n-\n \f\n # Compiling object files from source files.\n \n@@ -202,10 +183,13 @@ config.status:\n \n # C++ language specific files.\n \n-TREE_H = ../tree.h ../real.h ../tree.def ../machmode.h ../machmode.def\n+RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \\\n+\t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n+TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \\\n+\t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n CXX_TREE_H = $(TREE_H) cp-tree.h tree.def\n \n-parse.o : $(srcdir)/parse.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h lex.h\n+parse.o : $(srcdir)/parse.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(srcdir)/parse.c | sed 's,^\\./,,'`\n \n@@ -223,39 +207,33 @@ $(srcdir)/hash.h:\n \t\t$(srcdir)/gxx.gperf >$(srcdir)/hash.h\n \n spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) \\\n-  parse.h ../flags.h lex.h\n+  parse.h $(srcdir)/../flags.h lex.h\n lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n-  parse.h input.c ../flags.h hash.h lex.h\n-decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h \\\n-  lex.h decl.h ../stack.h\n-decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h \\\n+  parse.h input.c $(srcdir)/../flags.h hash.h lex.h\n+decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n+  lex.h decl.h $(srcdir)/../stack.h\n+decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h\n-typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h\n-typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h $(RTL_H)\n-class.o : class.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h\n-call.o : call.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h class.h\n-init.o : init.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h $(RTL_H)\n+typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n+typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n+class.o : class.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n+call.o : call.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h class.h\n+init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n method.o : method.c $(CONFIG_H) $(CXX_TREE_H) class.h\n cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) class.h\n-search.o : search.c $(CONFIG_H) $(CXX_TREE_H) ../stack.h ../flags.h\n-tree.o : tree.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h\n+search.o : search.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h $(srcdir)/../flags.h\n+tree.o : tree.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n ptree.o : ptree.c $(CONFIG_H) $(CXX_TREE_H)\n-gc.o : gc.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h\n-except.o : except.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h $(RTL_H)\n-expr.o : expr.c $(CONFIG_H) $(CXX_TREE_H) $(RTL_H) ../flags.h \\\n-  ../expr.h ../insn-codes.h\n-edsel.o : edsel.c $(CONFIG_H) $(CXX_TREE_H) ../stack.h ../flags.h\n-xref.o : xref.c $(CONFIG_H) $(CXX_TREE_H) ../input.h\n+gc.o : gc.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n+except.o : except.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n+expr.o : expr.c $(CONFIG_H) $(CXX_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n+  $(srcdir)/../expr.h ../insn-codes.h\n+edsel.o : edsel.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h $(srcdir)/../flags.h\n+xref.o : xref.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../input.h\n pt.o : pt.c $(CONFIG_H) $(CXX_TREE_H) decl.h parse.h\n error.o : error.c $(CONFIG_H) $(CXX_TREE_H)\n errfn.o : errfn.c $(CONFIG_H) $(CXX_TREE_H)\n-sig.o : sig.c $(CONFIG_H) $(CXX_TREE_H) ../flags.h\n-\n-doc: info\n-info:\n-\n-dvi:\n-\n+sig.o : sig.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n \f\n # These exist for maintenance purposes.\n "}]}