{"sha": "cb2cab79ebd72e07221b068cfef138bc708fc426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyY2FiNzllYmQ3MmUwNzIyMWIwNjhjZmVmMTM4YmM3MDhmYzQyNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-12T21:58:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-12T21:58:58Z"}, "message": "(emit_float_lib_cmp): Add declaration here.\n\nFrom-SVN: r6759", "tree": {"sha": "262e1d0af2484707eb241658e8ff597cd541c214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/262e1d0af2484707eb241658e8ff597cd541c214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2cab79ebd72e07221b068cfef138bc708fc426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2cab79ebd72e07221b068cfef138bc708fc426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2cab79ebd72e07221b068cfef138bc708fc426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2cab79ebd72e07221b068cfef138bc708fc426/comments", "author": null, "committer": null, "parents": [{"sha": "b1f99e2f89ecca4259768a58b9e7ee672cd06f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f99e2f89ecca4259768a58b9e7ee672cd06f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f99e2f89ecca4259768a58b9e7ee672cd06f0e"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "d94d1f9d15cb3aa973ebe2578b84bdc3eda5407f", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2cab79ebd72e07221b068cfef138bc708fc426/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2cab79ebd72e07221b068cfef138bc708fc426/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=cb2cab79ebd72e07221b068cfef138bc708fc426", "patch": "@@ -506,6 +506,10 @@ extern void emit_cmp_insn PROTO((rtx, rtx, enum rtx_code, rtx,\n    (without splitting it into pieces).  */\n extern int can_compare_p PROTO((enum machine_mode));\n \n+/* Emit a library call comparison between floating point X and Y.\n+   COMPARISON is the rtl operator to compare with (EQ, NE, GT, etc.).  */\n+extern void emit_float_lib_cmp PROTO((rtx, rtx, enum rtx_code));\n+\n /* Generate code to indirectly jump to a location given in the rtx LOC.  */\n extern void emit_indirect_jump PROTO((rtx));\n "}]}