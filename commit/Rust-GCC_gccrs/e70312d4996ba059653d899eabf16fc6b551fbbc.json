{"sha": "e70312d4996ba059653d899eabf16fc6b551fbbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwMzEyZDQ5OTZiYTA1OTY1M2Q4OTllYWJmMTZmYzZiNTUxZmJiYw==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2007-06-19T17:58:13Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2007-06-19T17:58:13Z"}, "message": "xtensa.c: Include \"df.h\".\n\n\t* config/xtensa/xtensa.c: Include \"df.h\".\n\t(xtensa_builtin_saveregs): Use adjust_address instead of change_address.\n\t(xtensa_va_start): Invoke make_tree with sizetype for\n\texpand_builtin_saveregs and then convert the result to a pointer.\n\tUse POINTER_PLUS_EXPR.  Use size_int instead of build_int_cst.\n\t(xtensa_gimplify_va_arg_expr): Use size_int instead of build_int_cst.\n\tSubtract argument size from index value as integers and then use\n\tPOINTER_PLUS_EXPR to add the result to the array address.\n\nFrom-SVN: r125854", "tree": {"sha": "f085339369c5780b23d870ea7606e1757629e4bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f085339369c5780b23d870ea7606e1757629e4bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e70312d4996ba059653d899eabf16fc6b551fbbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70312d4996ba059653d899eabf16fc6b551fbbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70312d4996ba059653d899eabf16fc6b551fbbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70312d4996ba059653d899eabf16fc6b551fbbc/comments", "author": null, "committer": null, "parents": [{"sha": "fa9fd28acfcf14ea100312aece861fce68229be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9fd28acfcf14ea100312aece861fce68229be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9fd28acfcf14ea100312aece861fce68229be9"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "200014519339538b9504f01658393c652e7fa4f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70312d4996ba059653d899eabf16fc6b551fbbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70312d4996ba059653d899eabf16fc6b551fbbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e70312d4996ba059653d899eabf16fc6b551fbbc", "patch": "@@ -1,3 +1,14 @@\n+2007-06-19  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa.c: Include \"df.h\".\n+\t(xtensa_builtin_saveregs): Use adjust_address instead of change_address.\n+\t(xtensa_va_start): Invoke make_tree with sizetype for\n+\texpand_builtin_saveregs and then convert the result to a pointer.\n+\tUse POINTER_PLUS_EXPR.  Use size_int instead of build_int_cst.\n+\t(xtensa_gimplify_va_arg_expr): Use size_int instead of build_int_cst.\n+\tSubtract argument size from index value as integers and then use\n+\tPOINTER_PLUS_EXPR to add the result to the array address.\n+\t\n 2007-06-19  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \tPR target/32335"}, {"sha": "186872712dae651a132378a22c47d01211e7ba3e", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70312d4996ba059653d899eabf16fc6b551fbbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70312d4996ba059653d899eabf16fc6b551fbbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=e70312d4996ba059653d899eabf16fc6b551fbbc", "patch": "@@ -50,6 +50,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"tree-gimple.h\"\n+#include \"df.h\"\n \n \n /* Enumeration for all of the relational tests, so that we can build\n@@ -2178,7 +2179,7 @@ xtensa_build_builtin_va_list (void)\n static rtx\n xtensa_builtin_saveregs (void)\n {\n-  rtx gp_regs, dest;\n+  rtx gp_regs;\n   int arg_words = current_function_args_info.arg_words;\n   int gp_left = MAX_ARGS_IN_REGISTERS - arg_words;\n \n@@ -2191,12 +2192,12 @@ xtensa_builtin_saveregs (void)\n   set_mem_alias_set (gp_regs, get_varargs_alias_set ());\n \n   /* Now store the incoming registers.  */\n-  dest = change_address (gp_regs, SImode,\n-\t\t\t plus_constant (XEXP (gp_regs, 0),\n-\t\t\t\t\targ_words * UNITS_PER_WORD));\n   cfun->machine->need_a7_copy = true;\n   cfun->machine->vararg_a7 = true;\n-  move_block_from_reg (GP_ARG_FIRST + arg_words, dest, gp_left);\n+  move_block_from_reg (GP_ARG_FIRST + arg_words,\n+\t\t       adjust_address (gp_regs, BLKmode,\n+\t\t\t\t       arg_words * UNITS_PER_WORD),\n+\t\t       gp_left);\n \n   return XEXP (gp_regs, 0);\n }\n@@ -2225,15 +2226,15 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   ndx = build3 (COMPONENT_REF, TREE_TYPE (f_ndx), valist, f_ndx, NULL_TREE);\n \n   /* Call __builtin_saveregs; save the result in __va_reg */\n-  u = make_tree (ptr_type_node, expand_builtin_saveregs ());\n+  u = make_tree (sizetype, expand_builtin_saveregs ());\n+  u = fold_convert (ptr_type_node, u);\n   t = build2 (GIMPLE_MODIFY_STMT, ptr_type_node, reg, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* Set the __va_stk member to ($arg_ptr - 32).  */\n   u = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-  u = fold_build2 (PLUS_EXPR, ptr_type_node, u,\n-\t\t   build_int_cst (NULL_TREE, -32));\n+  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u, size_int (-32));\n   t = build2 (GIMPLE_MODIFY_STMT, ptr_type_node, stk, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2243,8 +2244,8 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n      alignment offset for __va_stk.  */\n   if (arg_words >= MAX_ARGS_IN_REGISTERS)\n     arg_words += 2;\n-  u = build_int_cst (NULL_TREE, arg_words * UNITS_PER_WORD);\n-  t = build2 (GIMPLE_MODIFY_STMT, integer_type_node, ndx, u);\n+  t = build2 (GIMPLE_MODIFY_STMT, integer_type_node, ndx,\n+\t      size_int (arg_words * UNITS_PER_WORD));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n }\n@@ -2309,10 +2310,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n     {\n       int align = MIN (TYPE_ALIGN (type), STACK_BOUNDARY) / BITS_PER_UNIT;\n \n-      t = build2 (PLUS_EXPR, integer_type_node, orig_ndx,\n-\t\t  build_int_cst (NULL_TREE, align - 1));\n-      t = build2 (BIT_AND_EXPR, integer_type_node, t,\n-\t\t  build_int_cst (NULL_TREE, -align));\n+      t = build2 (PLUS_EXPR, integer_type_node, orig_ndx, size_int (align - 1));\n+      t = build2 (BIT_AND_EXPR, integer_type_node, t, size_int (-align));\n       t = build2 (GIMPLE_MODIFY_STMT, integer_type_node, orig_ndx, t);\n       gimplify_and_add (t, pre_p);\n     }\n@@ -2342,8 +2341,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       lab_false = create_artificial_label ();\n       lab_over = create_artificial_label ();\n \n-      t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD);\n-      t = build2 (GT_EXPR, boolean_type_node, ndx, t);\n+      t = build2 (GT_EXPR, boolean_type_node, ndx,\n+\t\t  size_int (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD));\n       t = build3 (COND_EXPR, void_type_node, t,\n \t\t  build1 (GOTO_EXPR, void_type_node, lab_false),\n \t\t  NULL_TREE);\n@@ -2372,8 +2371,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \n   lab_false2 = create_artificial_label ();\n \n-  t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD);\n-  t = build2 (GT_EXPR, boolean_type_node, orig_ndx, t);\n+  t = build2 (GT_EXPR, boolean_type_node, orig_ndx,\n+\t      size_int (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD));\n   t = build3 (COND_EXPR, void_type_node, t,\n \t      build1 (GOTO_EXPR, void_type_node, lab_false2),\n \t      NULL_TREE);\n@@ -2410,18 +2409,16 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \n   if (BYTES_BIG_ENDIAN && TREE_CODE (type_size) == INTEGER_CST)\n     {\n-      t = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n-      t = fold_build2 (GE_EXPR, boolean_type_node, type_size, t);\n+      t = fold_build2 (GE_EXPR, boolean_type_node, type_size,\n+\t\t       size_int (PARM_BOUNDARY / BITS_PER_UNIT));\n       t = fold_build3 (COND_EXPR, sizetype, t, va_size, type_size);\n       size = t;\n     }\n   else\n     size = va_size;\n \n-  t = fold_convert (ptr_type_node, ndx);\n-  addr = build2 (PLUS_EXPR, ptr_type_node, array, t);\n-  t = fold_convert (ptr_type_node, size);\n-  addr = build2 (MINUS_EXPR, ptr_type_node, addr, t);\n+  t = build2 (MINUS_EXPR, sizetype, ndx, size);\n+  addr = build2 (POINTER_PLUS_EXPR, ptr_type_node, array, t);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n   if (indirect)"}]}