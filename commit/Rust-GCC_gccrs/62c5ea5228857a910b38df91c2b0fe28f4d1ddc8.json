{"sha": "62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjNWVhNTIyODg1N2E5MTBiMzhkZjkxYzJiMGZlMjhmNGQxZGRjOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-14T15:21:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-14T15:23:59Z"}, "message": "preprocessor: Deferred macro support\n\nFor deferred macros we also need a new field on the macro itself, so\nthat the module machinery can determine the macro was imported.  Also\nthe documentation for the hashnode's deferred field was incomplete.\n\n\tlibcpp/\n\t* include/cpplib.h (struct cpp_macro): Add imported_p field.\n\t(struct cpp_hashnode): Tweak deferred field documentation.\n\t* macro.c (_cpp_new_macro): Clear new field.\n\t(cpp_get_deferred_macro, get_deferred_or_lazy_macro): Assert\n\tmore.", "tree": {"sha": "617d39cb5f141236757bee418fbbeab8ea407084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617d39cb5f141236757bee418fbbeab8ea407084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159b0bd9ce263dfb791eff5133b0ca0207201c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159b0bd9ce263dfb791eff5133b0ca0207201c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159b0bd9ce263dfb791eff5133b0ca0207201c84"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "50d28dc9d5a3f44b23c8e1582ea0d6208897558c", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "patch": "@@ -826,7 +826,10 @@ struct GTY(()) cpp_macro {\n      tokens.  */\n   unsigned int extra_tokens : 1;\n \n-  /* 1 bits spare (32-bit). 33 on 64-bit target.  */\n+  /* Imported C++20 macro (from a header unit).  */\n+  unsigned int imported_p : 1;\n+\n+  /* 0 bits spare (32-bit). 32 on 64-bit target.  */\n \n   union cpp_exp_u\n   {\n@@ -921,9 +924,11 @@ struct GTY(()) cpp_hashnode {\n \n   /* 5 bits spare.  */\n \n-  /* On a 64-bit system there would be 32-bits of padding to the value\n+  /* The deferred cookie is applicable to NT_USER_MACRO or NT_VOID.\n+     The latter for when a macro had a prevailing undef.\n+     On a 64-bit system there would be 32-bits of padding to the value\n      field.  So placing the deferred index here is not costly.   */\n-  unsigned deferred;\t\t\t/* Deferred index, (unless zero).  */\n+  unsigned deferred;\t\t\t/* Deferred cookie  */\n \n   union _cpp_hashnode_value GTY ((desc (\"%1.type\"))) value;\n };"}, {"sha": "cdb182112bcb4bba4af0aed1d9d61d15b160aed7", "filename": "libcpp/macro.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c5ea5228857a910b38df91c2b0fe28f4d1ddc8/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=62c5ea5228857a910b38df91c2b0fe28f4d1ddc8", "patch": "@@ -3708,6 +3708,7 @@ _cpp_new_macro (cpp_reader *pfile, cpp_macro_kind kind, void *placement)\n   macro->used = !CPP_OPTION (pfile, warn_unused_macros);\n   macro->count = 0;\n   macro->fun_like = 0;\n+  macro->imported_p = false;\n   macro->extra_tokens = 0;\n   /* To suppress some diagnostics.  */\n   macro->syshdr = pfile->buffer && pfile->buffer->sysp != 0;\n@@ -3791,6 +3792,8 @@ cpp_macro *\n cpp_get_deferred_macro (cpp_reader *pfile, cpp_hashnode *node,\n \t\t\tlocation_t loc)\n {\n+  gcc_checking_assert (node->type == NT_USER_MACRO);\n+\n   node->value.macro = pfile->cb.user_deferred_macro (pfile, loc, node);\n \n   if (!node->value.macro)\n@@ -3807,11 +3810,9 @@ get_deferred_or_lazy_macro (cpp_reader *pfile, cpp_hashnode *node,\n   if (!macro)\n     {\n       macro = cpp_get_deferred_macro (pfile, node, loc);\n-      if (!macro)\n-\treturn NULL;\n+      gcc_checking_assert (!macro || !macro->lazy);\n     }\n-\n-  if (macro->lazy)\n+  else if (macro->lazy)\n     {\n       pfile->cb.user_lazy_macro (pfile, macro, macro->lazy - 1);\n       macro->lazy = 0;"}]}