{"sha": "695edbac5c1b02ac162a301d6886dc073b0361fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1ZWRiYWM1YzFiMDJhYzE2MmEzMDFkNjg4NmRjMDczYjAzNjFmYg==", "commit": {"author": {"name": "Kostya Serebryany", "email": "kcc@google.com", "date": "2012-12-06T14:43:11Z"}, "committer": {"name": "Kostya Serebryany", "email": "kcc@gcc.gnu.org", "date": "2012-12-06T14:43:11Z"}, "message": "[libsanitizer] merge from upstream r169392\n\nFrom-SVN: r194255", "tree": {"sha": "1f745ce7339c78271d4e10927b85f87464a29e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f745ce7339c78271d4e10927b85f87464a29e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/695edbac5c1b02ac162a301d6886dc073b0361fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695edbac5c1b02ac162a301d6886dc073b0361fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695edbac5c1b02ac162a301d6886dc073b0361fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695edbac5c1b02ac162a301d6886dc073b0361fb/comments", "author": {"login": "kcc", "id": 1789297, "node_id": "MDQ6VXNlcjE3ODkyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kcc", "html_url": "https://github.com/kcc", "followers_url": "https://api.github.com/users/kcc/followers", "following_url": "https://api.github.com/users/kcc/following{/other_user}", "gists_url": "https://api.github.com/users/kcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kcc/subscriptions", "organizations_url": "https://api.github.com/users/kcc/orgs", "repos_url": "https://api.github.com/users/kcc/repos", "events_url": "https://api.github.com/users/kcc/events{/privacy}", "received_events_url": "https://api.github.com/users/kcc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8211767c5f4e6bcce383122cddcbe812b871182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8211767c5f4e6bcce383122cddcbe812b871182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8211767c5f4e6bcce383122cddcbe812b871182"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "ff5188f26cfe570868a006fb238b26419af13d90", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -1,3 +1,7 @@\n+2012-12-06  Kostya Serebryany  <kcc@google.com>\n+\n+\t* All files: Merge from upstream r169392.\n+\n 2012-12-05  Kostya Serebryany  <kcc@google.com>\n \n \t* All files: Merge from upstream r169371."}, {"sha": "071edae3249b5c9c579aefda9e4bd58e0fca4239", "filename": "libsanitizer/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FMERGE?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -1,4 +1,4 @@\n-169371\n+169392\n \n The first line of this file holds the svn revision number of the\n last merge done from the master library sources."}, {"sha": "5b544c87fcb85adcae8f5ecfa31c14498545ff10", "filename": "libsanitizer/asan/asan_interceptors.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Fasan%2Fasan_interceptors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Fasan%2Fasan_interceptors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.cc?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -177,8 +177,6 @@ INTERCEPTOR(void, siglongjmp, void *env, int val) {\n \n #if ASAN_INTERCEPT___CXA_THROW\n INTERCEPTOR(void, __cxa_throw, void *a, void *b, void *c) {\n-  Printf(\"__asan's __cxa_throw %p; REAL(__cxa_throw) %p PLAIN %p\\n\",\n-         __interceptor___cxa_throw, REAL(__cxa_throw), __cxa_throw);\n   CHECK(REAL(__cxa_throw));\n   __asan_handle_no_return();\n   REAL(__cxa_throw)(a, b, c);"}, {"sha": "dea6415078636524e4f04dfddbb081a797eaf157", "filename": "libsanitizer/tsan/tsan_interceptors.cc", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_interceptors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_interceptors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_interceptors.cc?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -617,21 +617,31 @@ TSAN_INTERCEPTOR(int, posix_memalign, void **memptr, uptr align, uptr sz) {\n }\n \n // Used in thread-safe function static initialization.\n-TSAN_INTERCEPTOR(int, __cxa_guard_acquire, char *m) {\n-  SCOPED_TSAN_INTERCEPTOR(__cxa_guard_acquire, m);\n-  int res = REAL(__cxa_guard_acquire)(m);\n-  if (res) {\n-    // This thread does the init.\n-  } else {\n-    Acquire(thr, pc, (uptr)m);\n+extern \"C\" int INTERFACE_ATTRIBUTE __cxa_guard_acquire(atomic_uint32_t *g) {\n+  SCOPED_INTERCEPTOR_RAW(__cxa_guard_acquire, g);\n+  for (;;) {\n+    u32 cmp = atomic_load(g, memory_order_acquire);\n+    if (cmp == 0) {\n+      if (atomic_compare_exchange_strong(g, &cmp, 1<<16, memory_order_relaxed))\n+        return 1;\n+    } else if (cmp == 1) {\n+      Acquire(thr, pc, (uptr)g);\n+      return 0;\n+    } else {\n+      internal_sched_yield();\n+    }\n   }\n-  return res;\n }\n \n-TSAN_INTERCEPTOR(void, __cxa_guard_release, char *m) {\n-  SCOPED_TSAN_INTERCEPTOR(__cxa_guard_release, m);\n-  Release(thr, pc, (uptr)m);\n-  REAL(__cxa_guard_release)(m);\n+extern \"C\" void INTERFACE_ATTRIBUTE __cxa_guard_release(atomic_uint32_t *g) {\n+  SCOPED_INTERCEPTOR_RAW(__cxa_guard_release, g);\n+  Release(thr, pc, (uptr)g);\n+  atomic_store(g, 1, memory_order_release);\n+}\n+\n+extern \"C\" void INTERFACE_ATTRIBUTE __cxa_guard_abort(atomic_uint32_t *g) {\n+  SCOPED_INTERCEPTOR_RAW(__cxa_guard_abort, g);\n+  atomic_store(g, 0, memory_order_relaxed);\n }\n \n static void thread_finalize(void *v) {\n@@ -1508,9 +1518,6 @@ void InitializeInterceptors() {\n   TSAN_INTERCEPT(strncpy);\n   TSAN_INTERCEPT(strstr);\n \n-  TSAN_INTERCEPT(__cxa_guard_acquire);\n-  TSAN_INTERCEPT(__cxa_guard_release);\n-\n   TSAN_INTERCEPT(pthread_create);\n   TSAN_INTERCEPT(pthread_join);\n   TSAN_INTERCEPT(pthread_detach);"}, {"sha": "63860edcfbb2419249bc4c3e4737e1995c9e4656", "filename": "libsanitizer/tsan/tsan_interface_atomic.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_interface_atomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_interface_atomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_interface_atomic.cc?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -113,7 +113,10 @@ static morder ConvertOrder(morder mo) {\n }\n \n template<typename T> T func_xchg(volatile T *v, T op) {\n-  return __sync_lock_test_and_set(v, op);\n+  T res = __sync_lock_test_and_set(v, op);\n+  // __sync_lock_test_and_set does not contain full barrier.\n+  __sync_synchronize();\n+  return res;\n }\n \n template<typename T> T func_add(volatile T *v, T op) {\n@@ -253,6 +256,9 @@ static void AtomicStore(ThreadState *thr, uptr pc, volatile T *a, T v,\n   thr->clock.ReleaseStore(&s->clock);\n   *a = v;\n   s->mtx.Unlock();\n+  // Trainling memory barrier to provide sequential consistency\n+  // for Dekker-like store-load synchronization.\n+  __sync_synchronize();\n }\n \n template<typename T, T (*F)(volatile T *v, T op)>"}, {"sha": "7b9133066739909b2aab54b5dcf0431525f001f0", "filename": "libsanitizer/tsan/tsan_stat.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_stat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_stat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_stat.cc?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -136,6 +136,7 @@ void StatOutput(u64 *stat) {\n   name[StatInt_atexit]                   = \"  atexit                          \";\n   name[StatInt___cxa_guard_acquire]      = \"  __cxa_guard_acquire             \";\n   name[StatInt___cxa_guard_release]      = \"  __cxa_guard_release             \";\n+  name[StatInt___cxa_guard_abort]        = \"  __cxa_guard_abort               \";\n   name[StatInt_pthread_create]           = \"  pthread_create                  \";\n   name[StatInt_pthread_join]             = \"  pthread_join                    \";\n   name[StatInt_pthread_detach]           = \"  pthread_detach                  \";"}, {"sha": "0dc1cd9a90ddb674c05adce03c376ad80fdccf5c", "filename": "libsanitizer/tsan/tsan_stat.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_stat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695edbac5c1b02ac162a301d6886dc073b0361fb/libsanitizer%2Ftsan%2Ftsan_stat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_stat.h?ref=695edbac5c1b02ac162a301d6886dc073b0361fb", "patch": "@@ -133,6 +133,7 @@ enum StatType {\n   StatInt_atexit,\n   StatInt___cxa_guard_acquire,\n   StatInt___cxa_guard_release,\n+  StatInt___cxa_guard_abort,\n   StatInt_pthread_create,\n   StatInt_pthread_join,\n   StatInt_pthread_detach,"}]}