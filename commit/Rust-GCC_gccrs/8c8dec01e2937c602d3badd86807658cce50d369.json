{"sha": "8c8dec01e2937c602d3badd86807658cce50d369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4ZGVjMDFlMjkzN2M2MDJkM2JhZGQ4NjgwNzY1OGNjZTUwZDM2OQ==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-09-10T13:43:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-09-10T13:43:15Z"}, "message": "fstream.tcc (basic_filebuf::seekoff): Use codecvt::length to handle variable-width stateless encodings correctly.\n\n\n2003-09-10  Petur Runolfsson  <peturr02@ru.is>\n\n\t* include/bits/fstream.tcc (basic_filebuf::seekoff):\n\tUse codecvt::length to handle variable-width stateless encodings\n\tcorrectly.\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/1.cc: New test.\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/2.cc: New test.\n\nFrom-SVN: r71271", "tree": {"sha": "439e3ca01f8b30128125a51244a3e16e768d932a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439e3ca01f8b30128125a51244a3e16e768d932a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c8dec01e2937c602d3badd86807658cce50d369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8dec01e2937c602d3badd86807658cce50d369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8dec01e2937c602d3badd86807658cce50d369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8dec01e2937c602d3badd86807658cce50d369/comments", "author": null, "committer": null, "parents": [{"sha": "1c8b4e29cc037130c30a057b0f2b8e92d933276b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8b4e29cc037130c30a057b0f2b8e92d933276b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8b4e29cc037130c30a057b0f2b8e92d933276b"}], "stats": {"total": 252, "additions": 249, "deletions": 3}, "files": [{"sha": "d99e42b4845956c3c2971b2a98726c2613889263", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c8dec01e2937c602d3badd86807658cce50d369", "patch": "@@ -1,3 +1,11 @@\n+2003-09-10  Petur Runolfsson  <peturr02@ru.is>\n+\n+\t* include/bits/fstream.tcc (basic_filebuf::seekoff):\n+\tUse codecvt::length to handle variable-width stateless encodings\n+\tcorrectly.\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/1.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/2.cc: New test.\n+\n 2003-09-10  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/io/basic_file_stdio.cc (_M_open_mode): Assign __p_mode"}, {"sha": "31175559bb96e8e377d8f883249349be832ff2ca", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=8c8dec01e2937c602d3badd86807658cce50d369", "patch": "@@ -593,7 +593,7 @@ namespace std\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n \n-\t  off_type __computed_off = __off;\t  \n+\t  off_type __computed_off = __off * __width;\n \t  if (this->pbase() < this->pptr())\n \t    {\n \t      // Part one: update the output sequence.\n@@ -603,13 +603,26 @@ namespace std\n \t      _M_output_unshift();\n \t    }\n \t  else if (_M_reading && __way == ios_base::cur)\n-\t    __computed_off += this->gptr() - this->egptr();\n+\t    {\n+\t      if (_M_codecvt->always_noconv())\n+\t\t__computed_off += this->gptr() - this->egptr();\n+\t      else\n+\t\t{\n+\t\t  // Calculate offset from _M_ext_buf that corresponds\n+\t\t  // to gptr().\n+\t\t  const int __gptr_off =\n+\t\t    _M_codecvt->length(_M_state_cur, _M_ext_buf, _M_ext_next,\n+\t\t\t\t       this->gptr() - this->eback());\n+\t\t  __computed_off += _M_ext_buf + __gptr_off - _M_ext_end;\n+\t\t}\n+\t    }\n \t  \n \t  // Returns pos_type(off_type(-1)) in case of failure.\n-\t  __ret = _M_file.seekoff(__computed_off * __width, __way, __mode);\n+\t  __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t  \n \t  _M_reading = false;\n \t  _M_writing = false;\n+\t  _M_ext_next = _M_ext_end = _M_ext_buf;\n \t  _M_set_buffer(-1);\n \t}\n       _M_last_overflowed = false;\t"}, {"sha": "f3f3cc712d484757991bed980742c4d30db05ba7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/1.cc", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F1.cc?ref=8c8dec01e2937c602d3badd86807658cce50d369", "patch": "@@ -0,0 +1,136 @@\n+// 2003-09-08  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Check that basic_filebuf::seekoff handles UTF-8 when open for input.\n+void test01()\n+{\n+  using namespace std;\n+  typedef wfilebuf::pos_type pos_type;\n+  typedef wfilebuf::int_type int_type;\n+\n+  bool test = true;\n+  const char name[] = \"tmp_seekoff-1.tst\";\n+  const int_type eof = wfilebuf::traits_type::eof();\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  const int loops = 2 * BUFSIZ / wlen;\n+  locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n+\n+  FILE* file = fopen(name, \"w\");\n+  for (int i = 0; i < loops; ++i)\n+    fwrite(cstr, 1, clen, file);\n+  fclose(file);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.open(name, ios_base::in);\n+\n+  pos_type p1 = fb.pubseekoff(0, ios_base::cur);\n+  pos_type end = fb.pubseekoff(0, ios_base::end);\n+  pos_type beg = fb.pubseekoff(0, ios_base::beg);\n+  VERIFY( p1 == beg );\n+\n+  const size_t limit = wlen * loops;\n+  for (size_t index = 0; index < limit; ++index)\n+    {\n+      // Call seekoff at pseudo-random intervals.\n+      if (index % 5 == 0 || index % 7 == 0)\n+\t{\n+\t  pos_type p2 = fb.pubseekoff(0, ios_base::cur);\n+\t  VERIFY( p2 != pos_type(-1) );\n+\t}\n+      int_type c1 = fb.sbumpc();\n+      VERIFY( c1 != eof );\n+      VERIFY( c1 == wstr[index % wlen] );\n+    }\n+\n+  pos_type p3 = fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( p3 == end );\n+\n+  int_type c2 = fb.sbumpc();\n+  VERIFY( c2 == eof );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ad978bee9f0b3b12461547762576005e6f615f9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/2.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8dec01e2937c602d3badd86807658cce50d369/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F2.cc?ref=8c8dec01e2937c602d3badd86807658cce50d369", "patch": "@@ -0,0 +1,89 @@\n+// 2003-09-08  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Check that basic_filebuf::seekoff handles UTF-8 when open for input and\n+// output.\n+void test02()\n+{\n+  using namespace std;\n+  typedef wfilebuf::int_type int_type;\n+  bool test = true;\n+  const char name[] = \"tmp_seekoff-2.tst\";\n+\n+  locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n+\n+  const size_t size = 10;\n+  wchar_t buf[size];\n+  streamsize n;\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+\n+  n = fb.sputn(L\"\\xa0st\", 3);\n+  VERIFY( n == 3 );\n+  \n+  fb.pubseekoff(0, ios_base::beg);\n+  n = fb.sgetn(buf, 2);\n+  VERIFY( n == 2 );\n+  VERIFY( !wmemcmp(buf, L\"\\xa0s\", 2) );\n+\n+  fb.pubseekoff(0, ios_base::cur);\n+  n = fb.sputn(L\"\\xb2R\", 2);\n+  VERIFY( n == 2 );\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  n = fb.sgetn(buf, size);\n+  VERIFY( n == 4 );\n+  VERIFY( !wmemcmp(buf, L\"\\xa0s\\xb2R\", 4) );\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  n = fb.sputn(L\"\\x90m\\x92n\\x94\", 5);\n+  VERIFY( n == 5 );\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  n = fb.sgetn(buf, 2);\n+  VERIFY( n == 2 );\n+  VERIFY( !wmemcmp(buf, L\"\\x90m\", 2) );\n+\n+  fb.pubseekoff(0, ios_base::end);\n+  n = fb.sputn(L\"I\\xbfJ\", 3);\n+  VERIFY( n == 3 );\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  n = fb.sgetn(buf, size);\n+  VERIFY( n == 8 );\n+  VERIFY( !wmemcmp(buf, L\"\\x90m\\x92n\\x94I\\xbfJ\", 8) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}]}