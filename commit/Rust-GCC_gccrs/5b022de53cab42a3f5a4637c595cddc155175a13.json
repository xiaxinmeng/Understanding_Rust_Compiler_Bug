{"sha": "5b022de53cab42a3f5a4637c595cddc155175a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwMjJkZTUzY2FiNDJhM2Y1YTQ2MzdjNTk1Y2RkYzE1NTE3NWExMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-10-01T21:48:13Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-10-01T21:48:13Z"}, "message": "s390-protos.h (s390_comparison): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_comparison): Add prototype.\n\t* config/s390/s390.c (s390_comparison): New function.\n\t(s390_branch_condition_mask): Return -1 for invalid comparisons.\n\t(s390_branch_condition_mnemonic): Assert valid comparison.\n\t* config/s390/s390.h (PREDICATE_CODES): Add s390_comparison.\n\t* config/s390/s390.md (\"*cjump_64\", \"*cjump_31\", \"*cjump_long\",\n\t\"*icjump_64\", \"*icjump_31\", \"*icjump_long\", \"*trap\"): Use\n\ts390_comparison instead of comparison_operator.\n\n\t* config/s390/s390.md (UNSPEC_CMPINT): New constant.\n\t(\"cmpmemdi\"): Remove.\n\t(\"cmpmem_short\", \"*cmpmem_short\"): Use CCUmode instead of CCSmode.\n\t(\"cmpmem_long\", \"*cmpmem_long_64\", \"*cmpmem_long_31\"): Likewise.\n\t(\"cmpint_si\"): Rename to ...\n\t(\"*cmpint_si\"): ... this.  Use UNSPEC_CMPINT.\n\t(\"cmpint_di\", \"*cmpint_di\"): Likewise.\n\t* config/s390/s390.c (s390_canonicalize_comparison): Remove\n\tredundant UNSPEC_CMPINT conversions.\n\t(s390_expand_cmpmem): Adapt to cmpint pattern changes.\n\nFrom-SVN: r88410", "tree": {"sha": "979c2e664ba91ff465eec4d87e6f8ac3ecd5d58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/979c2e664ba91ff465eec4d87e6f8ac3ecd5d58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b022de53cab42a3f5a4637c595cddc155175a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b022de53cab42a3f5a4637c595cddc155175a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b022de53cab42a3f5a4637c595cddc155175a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b022de53cab42a3f5a4637c595cddc155175a13/comments", "author": null, "committer": null, "parents": [{"sha": "abccc4f66c34723d4f91654a3a52cc1b50effebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc4f66c34723d4f91654a3a52cc1b50effebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abccc4f66c34723d4f91654a3a52cc1b50effebc"}], "stats": {"total": 188, "additions": 120, "deletions": 68}, "files": [{"sha": "9e3acb9c7c6d334796baa114aab72de98df26ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b022de53cab42a3f5a4637c595cddc155175a13", "patch": "@@ -1,3 +1,25 @@\n+2004-10-01  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_comparison): Add prototype.\n+\t* config/s390/s390.c (s390_comparison): New function.\n+\t(s390_branch_condition_mask): Return -1 for invalid comparisons.\n+\t(s390_branch_condition_mnemonic): Assert valid comparison.\n+\t* config/s390/s390.h (PREDICATE_CODES): Add s390_comparison.\n+\t* config/s390/s390.md (\"*cjump_64\", \"*cjump_31\", \"*cjump_long\",\n+\t\"*icjump_64\", \"*icjump_31\", \"*icjump_long\", \"*trap\"): Use\n+\ts390_comparison instead of comparison_operator.\n+\n+\t* config/s390/s390.md (UNSPEC_CMPINT): New constant.\n+\t(\"cmpmemdi\"): Remove.\n+\t(\"cmpmem_short\", \"*cmpmem_short\"): Use CCUmode instead of CCSmode.\n+\t(\"cmpmem_long\", \"*cmpmem_long_64\", \"*cmpmem_long_31\"): Likewise.\n+\t(\"cmpint_si\"): Rename to ...\n+\t(\"*cmpint_si\"): ... this.  Use UNSPEC_CMPINT.\n+\t(\"cmpint_di\", \"*cmpint_di\"): Likewise.\n+\t* config/s390/s390.c (s390_canonicalize_comparison): Remove\n+\tredundant UNSPEC_CMPINT conversions.\n+\t(s390_expand_cmpmem): Adapt to cmpint pattern changes.\n+\n 2004-10-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* collect2.c (COLLECT_PARSE_FLAG): Remove."}, {"sha": "78b90a8b32c2fdebed7e536c84ceaf0934b3e3eb", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=5b022de53cab42a3f5a4637c595cddc155175a13", "patch": "@@ -51,6 +51,7 @@ extern int s390_match_ccmode (rtx, enum machine_mode);\n extern enum machine_mode s390_tm_ccmode (rtx, rtx, int);\n extern enum machine_mode s390_select_ccmode (enum rtx_code, rtx, rtx);\n extern void s390_canonicalize_comparison (enum rtx_code *, rtx *, rtx *);\n+extern int s390_comparison (rtx op, enum machine_mode mode);\n extern int s390_alc_comparison (rtx op, enum machine_mode mode);\n extern int s390_slb_comparison (rtx op, enum machine_mode mode);\n extern rtx s390_emit_compare (enum rtx_code, rtx, rtx);"}, {"sha": "21679c3ea81c52a8b1dc03d7e02c4dbf2a18c502", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 72, "deletions": 37, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5b022de53cab42a3f5a4637c595cddc155175a13", "patch": "@@ -592,7 +592,6 @@ s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n     }\n \n   /* Narrow comparisons against 0xffff to HImode if possible.  */\n-\n   if ((*code == EQ || *code == NE)\n       && GET_CODE (*op1) == CONST_INT\n       && INTVAL (*op1) == 0xffff\n@@ -603,6 +602,35 @@ s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n       *op0 = gen_lowpart (HImode, *op0);\n       *op1 = constm1_rtx;\n     }\n+\n+\n+  /* Remove redundant UNSPEC_CMPINT conversions if possible.  */\n+  if (GET_CODE (*op0) == UNSPEC\n+      && XINT (*op0, 1) == UNSPEC_CMPINT\n+      && XVECLEN (*op0, 0) == 1\n+      && GET_MODE (XVECEXP (*op0, 0, 0)) == CCUmode\n+      && GET_CODE (XVECEXP (*op0, 0, 0)) == REG\n+      && REGNO (XVECEXP (*op0, 0, 0)) == CC_REGNUM\n+      && *op1 == const0_rtx)\n+    {\n+      enum rtx_code new_code = UNKNOWN;\n+      switch (*code)\n+\t{\n+\t  case EQ: new_code = EQ;  break;\n+\t  case NE: new_code = NE;  break;\n+\t  case LT: new_code = LTU; break;\n+\t  case GT: new_code = GTU; break;\n+\t  case LE: new_code = LEU; break;\n+\t  case GE: new_code = GEU; break;\n+\t  default: break;\n+\t}\n+\n+      if (new_code != UNKNOWN)\n+\t{\n+\t  *op0 = XVECEXP (*op0, 0, 0);\n+\t  *code = new_code;\n+\t}\n+    }\n }\n \n /* Emit a compare instruction suitable to implement the comparison\n@@ -635,6 +663,26 @@ s390_emit_jump (rtx target, rtx cond)\n   emit_jump_insn (insn);\n }\n \n+/* Return nonzero if OP is a valid comparison operator\n+   for a branch condition in mode MODE.  */\n+\n+int\n+s390_comparison (rtx op, enum machine_mode mode)\n+{\n+  if (mode != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+\n+  if (!COMPARISON_P (op))\n+    return 0;\n+\n+  if (GET_CODE (XEXP (op, 0)) != REG\n+      || REGNO (XEXP (op, 0)) != CC_REGNUM\n+      || XEXP (op, 1) != const0_rtx)\n+    return 0;\n+\n+  return s390_branch_condition_mask (op) >= 0;\n+}\n+\n /* Return nonzero if OP is a valid comparison operator\n    for an ALC condition in mode MODE.  */\n \n@@ -732,7 +780,7 @@ s390_slb_comparison (rtx op, enum machine_mode mode)\n }\n \n /* Return branch condition mask to implement a branch\n-   specified by CODE.  */\n+   specified by CODE.  Return -1 for invalid comparisons.  */\n \n static int\n s390_branch_condition_mask (rtx code)\n@@ -754,8 +802,7 @@ s390_branch_condition_mask (rtx code)\n         {\n         case EQ:\treturn CC0;\n \tcase NE:\treturn CC1 | CC2 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -764,8 +811,7 @@ s390_branch_condition_mask (rtx code)\n         {\n         case EQ:\treturn CC1;\n \tcase NE:\treturn CC0 | CC2 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -774,8 +820,7 @@ s390_branch_condition_mask (rtx code)\n         {\n         case EQ:\treturn CC2;\n \tcase NE:\treturn CC0 | CC1 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -784,8 +829,7 @@ s390_branch_condition_mask (rtx code)\n         {\n         case EQ:\treturn CC3;\n \tcase NE:\treturn CC0 | CC1 | CC2;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -794,8 +838,7 @@ s390_branch_condition_mask (rtx code)\n         {\n         case EQ:\treturn CC0 | CC2;\n \tcase NE:\treturn CC1 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -804,8 +847,7 @@ s390_branch_condition_mask (rtx code)\n         {\n \tcase LTU:\treturn CC2 | CC3;  /* carry */\n \tcase GEU:\treturn CC0 | CC1;  /* no carry */\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -814,8 +856,7 @@ s390_branch_condition_mask (rtx code)\n         {\n \tcase GTU:\treturn CC0 | CC1;  /* borrow */\n \tcase LEU:\treturn CC2 | CC3;  /* no borrow */\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -828,8 +869,7 @@ s390_branch_condition_mask (rtx code)\n \tcase GTU:\treturn CC3;\n \tcase LEU:\treturn CC1 | CC2;\n \tcase GEU:\treturn CC2 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n \t}\n \n     case CCUmode:\n@@ -841,8 +881,7 @@ s390_branch_condition_mask (rtx code)\n         case GTU:\treturn CC2;\n         case LEU:\treturn CC0 | CC1;\n         case GEU:\treturn CC0 | CC2;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -855,8 +894,7 @@ s390_branch_condition_mask (rtx code)\n         case GTU:\treturn CC1;\n         case LEU:\treturn CC0 | CC2;\n         case GEU:\treturn CC0 | CC1;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -869,8 +907,7 @@ s390_branch_condition_mask (rtx code)\n         case GT:\treturn CC2;\n         case LE:\treturn CC0 | CC1 | CC3;\n         case GE:\treturn CC0 | CC2;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -883,8 +920,7 @@ s390_branch_condition_mask (rtx code)\n         case GT:\treturn CC2 | CC3;\n         case LE:\treturn CC0 | CC1;\n         case GE:\treturn CC0 | CC2 | CC3;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -905,8 +941,7 @@ s390_branch_condition_mask (rtx code)\n         case UNLE:\treturn CC0 | CC1 | CC3;\n         case UNGE:\treturn CC0 | CC2 | CC3;\n \tcase LTGT:\treturn CC1 | CC2;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n@@ -927,13 +962,12 @@ s390_branch_condition_mask (rtx code)\n         case UNLE:\treturn CC0 | CC2 | CC3;\n         case UNGE:\treturn CC0 | CC1 | CC3;\n \tcase LTGT:\treturn CC2 | CC1;\n-\tdefault:\n-\t  abort ();\n+\tdefault:\treturn -1;\n         }\n       break;\n \n     default:\n-      abort ();\n+      return -1;\n     }\n }\n \n@@ -953,6 +987,7 @@ s390_branch_condition_mnemonic (rtx code, int inv)\n     };\n \n   int mask = s390_branch_condition_mask (code);\n+  gcc_assert (mask >= 0);\n \n   if (inv)\n     mask ^= 15;\n@@ -3486,15 +3521,15 @@ s390_expand_clrmem (rtx dst, rtx len)\n void\n s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n {\n-  rtx (*gen_result) (rtx) =\n-    GET_MODE (target) == DImode ? gen_cmpint_di : gen_cmpint_si;\n+  rtx ccreg = gen_rtx_REG (CCUmode, CC_REGNUM);\n+  rtx result = gen_rtx_UNSPEC (SImode, gen_rtvec (1, ccreg), UNSPEC_CMPINT);\n \n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n         {\n           emit_insn (gen_cmpmem_short (op0, op1, GEN_INT (INTVAL (len) - 1)));\n-          emit_insn (gen_result (target));\n+          emit_move_insn (target, result);\n         }\n       else\n         emit_move_insn (target, const0_rtx);\n@@ -3503,7 +3538,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n   else /* if (TARGET_MVCLE) */\n     {\n       emit_insn (gen_cmpmem_long (op0, op1, convert_to_mode (Pmode, len, 1)));\n-      emit_insn (gen_result (target));\n+      emit_move_insn (target, result);\n     }\n \n #if 0\n@@ -3549,7 +3584,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n       emit_label (loop_start_label);\n \n       emit_insn (gen_cmpmem_short (op0, op1, GEN_INT (255)));\n-      temp = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCSmode, 33), const0_rtx);\n+      temp = gen_rtx_NE (VOIDmode, ccreg, const0_rtx);\n       temp = gen_rtx_IF_THEN_ELSE (VOIDmode, temp,\n \t\t\tgen_rtx_LABEL_REF (VOIDmode, end_label), pc_rtx);\n       temp = gen_rtx_SET (VOIDmode, pc_rtx, temp);\n@@ -3574,7 +3609,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \t\t\t\t   convert_to_mode (Pmode, count, 1)));\n       emit_label (end_label);\n \n-      emit_insn (gen_result (target));\n+      emit_move_insn (target, result);\n     }\n #endif\n }"}, {"sha": "4d50395b67c450c180bf1799ec38383e93317ba0", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=5b022de53cab42a3f5a4637c595cddc155175a13", "patch": "@@ -1025,6 +1025,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"consttable_operand\", { SYMBOL_REF, LABEL_REF, CONST, \t\t\\\n \t\t\t   CONST_INT, CONST_DOUBLE }},\t\t\t\\\n   {\"s390_plus_operand\", { PLUS }},\t\t\t\t\t\\\n+  {\"s390_comparison\",     { EQ, NE, LT, GT, LE, GE, LTU, GTU, LEU, GEU,\t\\\n+\t\t\t    UNEQ, UNLT, UNGT, UNLE, UNGE, LTGT,\t\t\\\n+\t\t\t    UNORDERED, ORDERED }},\t\t\t\\\n   {\"s390_alc_comparison\", { ZERO_EXTEND, SIGN_EXTEND, \t\t\t\\\n \t\t\t    LTU, GTU, LEU, GEU }},\t\t\t\\\n   {\"s390_slb_comparison\", { ZERO_EXTEND, SIGN_EXTEND,\t\t\t\\"}, {"sha": "a2408d751964d45d5ceda7bf89dec16c0995d37d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b022de53cab42a3f5a4637c595cddc155175a13/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=5b022de53cab42a3f5a4637c595cddc155175a13", "patch": "@@ -78,6 +78,7 @@\n (define_constants\n   [; Miscellaneous\n    (UNSPEC_ROUND\t\t1)\n+   (UNSPEC_CMPINT\t\t2)\n    (UNSPEC_SETHIGH\t\t10)\n \n    ; GOT/PLT and lt-relative accesses\n@@ -1911,16 +1912,6 @@\n ; cmpmemM instruction pattern(s).\n ;\n \n-(define_expand \"cmpmemdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (compare:DI (match_operand:BLK 1 \"memory_operand\" \"\")\n-                    (match_operand:BLK 2 \"memory_operand\" \"\") ) )\n-   (use (match_operand:DI 3 \"general_operand\" \"\"))\n-   (use (match_operand:DI 4 \"\" \"\"))]\n-  \"TARGET_64BIT\"\n-  \"s390_expand_cmpmem (operands[0], operands[1],\n-                       operands[2], operands[3]); DONE;\")\n-\n (define_expand \"cmpmemsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (compare:SI (match_operand:BLK 1 \"memory_operand\" \"\")\n@@ -1936,17 +1927,17 @@\n \n (define_expand \"cmpmem_short\"\n   [(parallel\n-    [(set (reg:CCS 33)\n-          (compare:CCS (match_operand:BLK 0 \"memory_operand\" \"\")\n+    [(set (reg:CCU 33)\n+          (compare:CCU (match_operand:BLK 0 \"memory_operand\" \"\")\n                        (match_operand:BLK 1 \"memory_operand\" \"\")))\n      (use (match_operand 2 \"nonmemory_operand\" \"\"))\n      (clobber (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_rtx_SCRATCH (Pmode);\")\n \n (define_insn \"*cmpmem_short\"\n-  [(set (reg:CCS 33)\n-        (compare:CCS (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n+  [(set (reg:CCU 33)\n+        (compare:CCU (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n                      (match_operand:BLK 1 \"memory_operand\" \"Q,Q\")))\n    (use (match_operand 2 \"nonmemory_operand\" \"n,a\"))\n    (clobber (match_scratch 3 \"=X,&a\"))]\n@@ -1978,8 +1969,8 @@\n   [(parallel\n     [(clobber (match_dup 2))\n      (clobber (match_dup 3))\n-     (set (reg:CCS 33)\n-          (compare:CCS (match_operand:BLK 0 \"memory_operand\" \"\")\n+     (set (reg:CCU 33)\n+          (compare:CCU (match_operand:BLK 0 \"memory_operand\" \"\")\n                        (match_operand:BLK 1 \"memory_operand\" \"\")))\n      (use (match_operand 2 \"general_operand\" \"\"))\n      (use (match_dup 3))])]\n@@ -2010,8 +2001,8 @@\n (define_insn \"*cmpmem_long_64\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:TI 1 \"register_operand\" \"=d\"))\n-   (set (reg:CCS 33)\n-        (compare:CCS (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n+   (set (reg:CCU 33)\n+        (compare:CCU (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n                      (mem:BLK (subreg:DI (match_operand:TI 3 \"register_operand\" \"1\") 0))))\n    (use (match_dup 2))\n    (use (match_dup 3))]\n@@ -2024,8 +2015,8 @@\n (define_insn \"*cmpmem_long_31\"\n   [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=d\"))\n-   (set (reg:CCS 33)\n-        (compare:CCS (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n+   (set (reg:CCU 33)\n+        (compare:CCU (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n                      (mem:BLK (subreg:SI (match_operand:DI 3 \"register_operand\" \"1\") 0))))\n    (use (match_dup 2))\n    (use (match_dup 3))]\n@@ -2037,9 +2028,9 @@\n \n ; Convert condition code to integer in range (-1, 0, 1)\n \n-(define_insn \"cmpint_si\"\n+(define_insn \"*cmpint_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (compare:SI (reg:CCS 33) (const_int 0)))]\n+        (unspec:SI [(reg:CCU 33)] UNSPEC_CMPINT))]\n   \"\"\n {\n    output_asm_insn (\"lhi\\t%0,1\", operands);\n@@ -2052,9 +2043,9 @@\n    (set_attr \"length\"  \"16\")\n    (set_attr \"type\"    \"other\")])\n \n-(define_insn \"cmpint_di\"\n+(define_insn \"*cmpint_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (compare:DI (reg:CCS 33) (const_int 0)))]\n+        (sign_extend:DI (unspec:SI [(reg:CCU 33)] UNSPEC_CMPINT)))]\n   \"TARGET_64BIT\"\n {\n    output_asm_insn (\"lghi\\t%0,1\", operands);\n@@ -6232,7 +6223,7 @@\n (define_insn \"*cjump_64\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (label_ref (match_operand 0 \"\" \"\"))\n           (pc)))]\n   \"TARGET_CPU_ZARCH\"\n@@ -6251,7 +6242,7 @@\n (define_insn \"*cjump_31\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (label_ref (match_operand 0 \"\" \"\"))\n           (pc)))]\n   \"!TARGET_CPU_ZARCH\"\n@@ -6273,7 +6264,7 @@\n (define_insn \"*cjump_long\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (match_operand 0 \"address_operand\" \"U\")\n           (pc)))]\n   \"\"\n@@ -6297,7 +6288,7 @@\n (define_insn \"*icjump_64\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (pc)\n           (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_CPU_ZARCH\"\n@@ -6316,7 +6307,7 @@\n (define_insn \"*icjump_31\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (pc)\n           (label_ref (match_operand 0 \"\" \"\"))))]\n   \"!TARGET_CPU_ZARCH\"\n@@ -6338,7 +6329,7 @@\n (define_insn \"*icjump_long\"\n   [(set (pc)\n         (if_then_else\n-          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operator 1 \"s390_comparison\" [(reg 33) (const_int 0)])\n           (pc)\n           (match_operand 0 \"address_operand\" \"U\")))]\n   \"\"\n@@ -6376,7 +6367,7 @@\n })\n \n (define_insn \"*trap\"\n-  [(trap_if (match_operator 0 \"comparison_operator\" [(reg 33) (const_int 0)])\n+  [(trap_if (match_operator 0 \"s390_comparison\" [(reg 33) (const_int 0)])\n \t    (const_int 0))]\n   \"\"\n   \"j%C0\\t.+2\";"}]}