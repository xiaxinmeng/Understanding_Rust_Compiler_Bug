{"sha": "e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "node_id": "C_kwDOANBUbNoAKGU5MGFmOTY1ZTVjODU4YmEwMmMwY2RmYmFjMzVkMGExOWRhMWMyZjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-07T06:54:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-07T06:54:13Z"}, "message": "openmp: Fix handling of target constructs in static member functions [PR106829]\n\nJust calling current_nonlambda_class_type in static member functions returns\nnon-NULL, but something that isn't *this and if unlucky can match part of the\nIL and can be added to target clauses.\n      if (DECL_NONSTATIC_MEMBER_P (decl)\n          && current_class_ptr)\nis a guard used elsewhere (in check_accessibility_of_qualified_id).\n\n2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106829\n\t* semantics.cc (finish_omp_target_clauses): If current_function_decl\n\tisn't a nonstatic member function, don't set data.current_object to\n\tnon-NULL.\n\n\t* g++.dg/gomp/pr106829.C: New test.", "tree": {"sha": "4b3511c43b702dbd6ee42fa64d123c8a00f1605f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b3511c43b702dbd6ee42fa64d123c8a00f1605f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572f5e1bc68e131b25cd2d5ba231e932f5038904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572f5e1bc68e131b25cd2d5ba231e932f5038904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572f5e1bc68e131b25cd2d5ba231e932f5038904"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "3d58d67ec111f388bc6fb2adb0f1d5b610f74cde", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "patch": "@@ -9555,16 +9555,15 @@ finish_omp_target_clauses (location_t loc, tree body, tree *clauses_ptr)\n {\n   omp_target_walk_data data;\n   data.this_expr_accessed = false;\n+  data.current_object = NULL_TREE;\n \n-  tree ct = current_nonlambda_class_type ();\n-  if (ct)\n-    {\n-      tree object = maybe_dummy_object (ct, NULL);\n-      object = maybe_resolve_dummy (object, true);\n-      data.current_object = object;\n-    }\n-  else\n-    data.current_object = NULL_TREE;\n+  if (DECL_NONSTATIC_MEMBER_P (current_function_decl) && current_class_ptr)\n+    if (tree ct = current_nonlambda_class_type ())\n+      {\n+\ttree object = maybe_dummy_object (ct, NULL);\n+\tobject = maybe_resolve_dummy (object, true);\n+\tdata.current_object = object;\n+      }\n \n   if (DECL_LAMBDA_FUNCTION_P (current_function_decl))\n     {"}, {"sha": "0295efb88ee01bb9344ee84d53ef6a56865b6644", "filename": "gcc/testsuite/g++.dg/gomp/pr106829.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr106829.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90af965e5c858ba02c0cdfbac35d0a19da1c2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr106829.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr106829.C?ref=e90af965e5c858ba02c0cdfbac35d0a19da1c2f6", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/106829\n+\n+namespace std\n+{\n+  template <typename> class complex;\n+  template <> struct complex<double> { complex (double); _Complex double d; };\n+}\n+struct S { void static foo (); };\n+\n+void\n+S::foo ()\n+{\n+#pragma omp target\n+  std::complex<double> c = 0.0;\n+}"}]}