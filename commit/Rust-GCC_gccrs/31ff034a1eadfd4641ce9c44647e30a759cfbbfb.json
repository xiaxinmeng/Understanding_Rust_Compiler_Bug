{"sha": "31ff034a1eadfd4641ce9c44647e30a759cfbbfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFmZjAzNGExZWFkZmQ0NjQxY2U5YzQ0NjQ3ZTMwYTc1OWNmYmJmYg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-13T03:51:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-13T03:51:24Z"}, "message": "Fix vec-splati-runnable.c test.\n\nI noticed that the vec-splati-runnable.c did not have an abort after one\nof the tests.  If the test was run with optimization, the optimizer could\ndelete some of the tests and throw off the count.  However, due to the\nfact that the value being loaded in that test is undefined, I did not\ncheck what value was loaded, but I just stored it into a volatile global\nvariable.\n\n2021-07-12  Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/testsuite/\n\t* gcc.target/powerpc/vec-splati-runnable.c: Run test with -O2\n\toptimization.  Do not check what XXSPLTIDP generates if the value\n\tis undefined.", "tree": {"sha": "a8061424cafc560529d4f27cc2cb84d2b666133b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8061424cafc560529d4f27cc2cb84d2b666133b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ff034a1eadfd4641ce9c44647e30a759cfbbfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff034a1eadfd4641ce9c44647e30a759cfbbfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ff034a1eadfd4641ce9c44647e30a759cfbbfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff034a1eadfd4641ce9c44647e30a759cfbbfb/comments", "author": null, "committer": null, "parents": [{"sha": "7591309696537212a1d0497bc09c09b7abc7e650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7591309696537212a1d0497bc09c09b7abc7e650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7591309696537212a1d0497bc09c09b7abc7e650"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "a135279b1d7f4e9fa516f21aba039683ac364140", "filename": "gcc/testsuite/gcc.target/powerpc/vec-splati-runnable.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff034a1eadfd4641ce9c44647e30a759cfbbfb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff034a1eadfd4641ce9c44647e30a759cfbbfb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c?ref=31ff034a1eadfd4641ce9c44647e30a759cfbbfb", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { power10_hw } } } */\n /* { dg-do link { target { ! power10_hw } } } */\n /* { dg-require-effective-target power10_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power10 -save-temps\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -save-temps -O2\" } */\n #include <altivec.h>\n \n #define DEBUG 0\n@@ -12,6 +12,8 @@\n \n extern void abort (void);\n \n+volatile vector double vresult_d_undefined;\n+\n int\n main (int argc, char *argv [])\n {\n@@ -85,25 +87,12 @@ main (int argc, char *argv [])\n #endif\n   }\n \n-  /* This test will generate a \"note\" to the user that the argument\n-     is subnormal.  It is not an error, but results are not defined.  */\n-  vresult_d = (vector double) { 2.0, 3.0 };\n-  expected_vresult_d = (vector double) { 6.6E-42f, 6.6E-42f };\n-\n-  vresult_d = vec_splatid (6.6E-42f);\n-\n-  /* Although the instruction says the results are not defined, it does seem\n-     to work, at least on Mambo.  But no guarentees!  */\n-  if (!vec_all_eq (vresult_d,  expected_vresult_d)) {\n-#if DEBUG\n-    printf(\"ERROR, vec_splati (6.6E-42f)\\n\");\n-    for(i = 0; i < 2; i++)\n-      printf(\" vresult_d[%i] = %e, expected_vresult_d[%i] = %e\\n\",\n-\t     i, vresult_d[i], i, expected_vresult_d[i]);\n-#else\n-    ;\n-#endif\n-  }\n+  /* This test will generate a \"note\" to the user that the argument is\n+     subnormal.  It is not an error, but results are not defined.  Because this\n+     is undefined, we cannot check that any value is correct.  Just store it in\n+     a volatile variable so the XXSPLTIDP instruction gets generated and the\n+     warning message printed. */\n+  vresult_d_undefined = vec_splatid (6.6E-42f);\n \n   /* Vector splat immediate */\n   vsrc_a_int = (vector int) { 2, 3, 4, 5 };"}]}