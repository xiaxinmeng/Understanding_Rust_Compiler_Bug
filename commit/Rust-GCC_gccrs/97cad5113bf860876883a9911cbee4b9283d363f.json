{"sha": "97cad5113bf860876883a9911cbee4b9283d363f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjYWQ1MTEzYmY4NjA4NzY4ODNhOTkxMWNiZWU0YjkyODNkMzYzZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-06-12T11:08:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-06-12T11:08:52Z"}, "message": "libitm/x86: Correct offsets of __private_tm and pointer_guard\n\nIn glibc, sysdeps/i386/nptl/tls.h has\n\ntypedef struct\n{\n  void *tcb;            /* Pointer to the TCB.  Not necessarily the\n                           thread descriptor used by libpthread.  */\n  dtv_t *dtv;\n  void *self;           /* Pointer to the thread descriptor.  */\n  int multiple_threads;\n  uintptr_t sysinfo;\n  uintptr_t stack_guard;\n  uintptr_t pointer_guard;\n  int gscope_flag;\n  int __glibc_reserved1;\n  /* Reservation of some values for the TM ABI.  */\n  void *__private_tm[4];\n  /* GCC split stack support.  */\n  void *__private_ss;\n} tcbhead_t;\n\nand sysdeps/x86_64/nptl/tls.h has\n\ntypedef struct\n{\n  void *tcb;            /* Pointer to the TCB.  Not necessarily the\n                           thread descriptor used by libpthread.  */\n  dtv_t *dtv;\n  void *self;           /* Pointer to the thread descriptor.  */\n  int multiple_threads;\n  int gscope_flag;\n  uintptr_t sysinfo;\n  uintptr_t stack_guard;\n  uintptr_t pointer_guard;\n  unsigned long int vgetcpu_cache[2];\n  int __glibc_reserved1;\n  int __glibc_unused1;\n  /* Reservation of some values for the TM ABI.  */\n  void *__private_tm[4];\n  /* GCC split stack support.  */\n  void *__private_ss;\n  long int __glibc_reserved2;\n  /* Must be kept even if it is no longer used by glibc since programs,\n     like AddressSanitizer, depend on the size of tcbhead_t.  */\n  __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));\n\n  void *__padding[8];\n} tcbhead_t;\n\nThe offsets of __private_tm are\n\ni386:   36 bytes\nx32:    48 bytes\nx86_64: 80 bytes\n\nand the offsets of pointer_guard are:\n\ni386:   24 bytes\nx32:    28 bytes\nx86_64: 48 bytes\n\nBut config/linux/x86/tls.h had\n\n #ifdef __x86_64__\n #ifdef __LP64__\n # define SEG_READ(OFS)          \"movq\\t%%fs:(\" #OFS \"*8),%0\"\n # define SEG_WRITE(OFS)         \"movq\\t%0,%%fs:(\" #OFS \"*8)\"\n # define SEG_DECODE_READ(OFS)   SEG_READ(OFS) \"\\n\\t\" \\\n                                 \"rorq\\t$17,%0\\n\\t\" \\\n                                 \"xorq\\t%%fs:48,%0\"\n # define SEG_ENCODE_WRITE(OFS)  \"xorq\\t%%fs:48,%0\\n\\t\" \\\n                                 \"rolq\\t$17,%0\\n\\t\" \\\n                                 SEG_WRITE(OFS)\n #else\n // For X32.\n # define SEG_READ(OFS)          \"movl\\t%%fs:(\" #OFS \"*4),%0\"\n # define SEG_WRITE(OFS)         \"movl\\t%0,%%fs:(\" #OFS \"*4)\"\n # define SEG_DECODE_READ(OFS)   SEG_READ(OFS) \"\\n\\t\" \\\n                                 \"rorl\\t$9,%0\\n\\t\" \\\n                                 \"xorl\\t%%fs:24,%0\"\n # define SEG_ENCODE_WRITE(OFS)  \"xorl\\t%%fs:24,%0\\n\\t\" \\\n                                 \"roll\\t$9,%0\\n\\t\" \\\n                                 SEG_WRITE(OFS)\n #endif\n #else\n # define SEG_READ(OFS)  \"movl\\t%%gs:(\" #OFS \"*4),%0\"\n # define SEG_WRITE(OFS) \"movl\\t%0,%%gs:(\" #OFS \"*4)\"\n # define SEG_DECODE_READ(OFS)   SEG_READ(OFS) \"\\n\\t\" \\\n                                 \"rorl\\t$9,%0\\n\\t\" \\\n                                 \"xorl\\t%%gs:24,%0\"\n # define SEG_ENCODE_WRITE(OFS)  \"xorl\\t%%gs:24,%0\\n\\t\" \\\n                                 \"roll\\t$9,%0\\n\\t\" \\\n                                 SEG_WRITE(OFS)\n #endif\n\nstatic inline struct gtm_thread *gtm_thr(void)\n{\n  struct gtm_thread *r;\n  asm volatile (SEG_READ(10) : \"=r\"(r));\n  return r;\n}\n\nstatic inline void set_gtm_thr(struct gtm_thread *x)\n{\n  asm volatile (SEG_WRITE(10) : : \"r\"(x));\n}\n\nstatic inline struct abi_dispatch *abi_disp(void)\n{\n  struct abi_dispatch *r;\n  asm volatile (SEG_DECODE_READ(11) : \"=r\"(r));\n  return r;\n}\n\nstatic inline void set_abi_disp(struct abi_dispatch *x)\n{\n  void *scratch;\n  asm volatile (SEG_ENCODE_WRITE(11) : \"=r\"(scratch) : \"0\"(x));\n}\n\nSEG_READ, SEG_WRITE, SEG_DECODE_READ and SEG_ENCODE_WRITE were correct\nonly for x86-64.\n\nUpdate SEG_READ and SEG_WRITE to use the offset of __private_tm as base\nand correct the offset of pointer_guard for x32.  This patch doesn't\nchange ABI of libitm.\n\n\tPR libitm/85988\n\t* config/linux/x86/tls.h (SEG_READ): Use the offset of\n\t__private_tm as base.\n\t(SEG_WRITE): Likewise.\n\t(SEG_ENCODE_WRITE): Correct the offset of pointer_guard for x32.\n\t(gtm_thr): Replace SEG_READ(10) with SEG_READ(0).\n\t(set_gtm_thr): Replace SEG_WRITE(10) with SEG_WRITE(0).\n\t(abi_disp): Replace SEG_DECODE_READ(11) with SEG_DECODE_READ(1).\n\t(set_abi_disp): Replace SEG_ENCODE_WRITE(11) with\n\tSEG_ENCODE_WRITE(1).\n\nFrom-SVN: r261491", "tree": {"sha": "122291401b7812573839e0ed4bb076d053bf095d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/122291401b7812573839e0ed4bb076d053bf095d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97cad5113bf860876883a9911cbee4b9283d363f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cad5113bf860876883a9911cbee4b9283d363f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cad5113bf860876883a9911cbee4b9283d363f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cad5113bf860876883a9911cbee4b9283d363f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a3361e8d4949d502376750912eddba4da35cd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3361e8d4949d502376750912eddba4da35cd39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3361e8d4949d502376750912eddba4da35cd39"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "729603a97215e0454364a0bb18f3488157b905b5", "filename": "libitm/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cad5113bf860876883a9911cbee4b9283d363f/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cad5113bf860876883a9911cbee4b9283d363f/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=97cad5113bf860876883a9911cbee4b9283d363f", "patch": "@@ -1,3 +1,15 @@\n+2018-06-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR libitm/85988\n+\t* config/linux/x86/tls.h (SEG_READ): Use the offset of\n+\t__private_tm as base.\n+\t(SEG_WRITE): Likewise.\n+\t(SEG_ENCODE_WRITE): Correct the offset of pointer_guard for x32.\n+\t(gtm_thr): Replace SEG_READ(10) with SEG_READ(0).\n+\t(set_gtm_thr): Replace SEG_WRITE(10) with SEG_WRITE(0).\n+\t(abi_disp): Replace SEG_DECODE_READ(11) with SEG_DECODE_READ(1).\n+\t(set_abi_disp): Replace SEG_ENCODE_WRITE(11) with\n+\n 2018-05-17  Jason Merrill  <jason@redhat.com>\n \n \t* beginend.cc (save): Disable -Werror=deprecated-copy."}, {"sha": "ca6a5af3d4f380c5d3f320b5569c528de5d09ef4", "filename": "libitm/config/linux/x86/tls.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cad5113bf860876883a9911cbee4b9283d363f/libitm%2Fconfig%2Flinux%2Fx86%2Ftls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cad5113bf860876883a9911cbee4b9283d363f/libitm%2Fconfig%2Flinux%2Fx86%2Ftls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Fx86%2Ftls.h?ref=97cad5113bf860876883a9911cbee4b9283d363f", "patch": "@@ -42,8 +42,8 @@ namespace GTM HIDDEN {\n \n #ifdef __x86_64__\n #ifdef __LP64__\n-# define SEG_READ(OFS)\t\t\"movq\\t%%fs:(\" #OFS \"*8),%0\"\n-# define SEG_WRITE(OFS)\t\t\"movq\\t%0,%%fs:(\" #OFS \"*8)\"\n+# define SEG_READ(OFS)\t\t\"movq\\t%%fs:(80+\" #OFS \"*8),%0\"\n+# define SEG_WRITE(OFS)\t\t\"movq\\t%0,%%fs:(80+\" #OFS \"*8)\"\n # define SEG_DECODE_READ(OFS)\tSEG_READ(OFS) \"\\n\\t\" \\\n \t\t\t\t\"rorq\\t$17,%0\\n\\t\" \\\n \t\t\t\t\"xorq\\t%%fs:48,%0\"\n@@ -52,18 +52,18 @@ namespace GTM HIDDEN {\n \t\t\t\tSEG_WRITE(OFS)\n #else\n // For X32.\n-# define SEG_READ(OFS)          \"movl\\t%%fs:(\" #OFS \"*4),%0\"\n-# define SEG_WRITE(OFS)         \"movl\\t%0,%%fs:(\" #OFS \"*4)\"\n+# define SEG_READ(OFS)          \"movl\\t%%fs:(48+\" #OFS \"*4),%0\"\n+# define SEG_WRITE(OFS)         \"movl\\t%0,%%fs:(48+\" #OFS \"*4)\"\n # define SEG_DECODE_READ(OFS)   SEG_READ(OFS) \"\\n\\t\" \\\n \t\t\t\t\"rorl\\t$9,%0\\n\\t\" \\\n-\t\t\t\t\"xorl\\t%%fs:24,%0\"\n-# define SEG_ENCODE_WRITE(OFS)  \"xorl\\t%%fs:24,%0\\n\\t\" \\\n+\t\t\t\t\"xorl\\t%%fs:28,%0\"\n+# define SEG_ENCODE_WRITE(OFS)  \"xorl\\t%%fs:28,%0\\n\\t\" \\\n \t\t\t\t\"roll\\t$9,%0\\n\\t\" \\\n \t\t\t\tSEG_WRITE(OFS)\n #endif\n #else\n-# define SEG_READ(OFS)  \"movl\\t%%gs:(\" #OFS \"*4),%0\"\n-# define SEG_WRITE(OFS) \"movl\\t%0,%%gs:(\" #OFS \"*4)\"\n+# define SEG_READ(OFS)  \"movl\\t%%gs:(36+\" #OFS \"*4),%0\"\n+# define SEG_WRITE(OFS) \"movl\\t%0,%%gs:(36+\" #OFS \"*4)\"\n # define SEG_DECODE_READ(OFS)\tSEG_READ(OFS) \"\\n\\t\" \\\n \t\t\t\t\"rorl\\t$9,%0\\n\\t\" \\\n \t\t\t\t\"xorl\\t%%gs:24,%0\"\n@@ -75,26 +75,26 @@ namespace GTM HIDDEN {\n static inline struct gtm_thread *gtm_thr(void)\n {\n   struct gtm_thread *r;\n-  asm volatile (SEG_READ(10) : \"=r\"(r));\n+  asm volatile (SEG_READ(0) : \"=r\"(r));\n   return r;\n }\n \n static inline void set_gtm_thr(struct gtm_thread *x)\n {\n-  asm volatile (SEG_WRITE(10) : : \"r\"(x));\n+  asm volatile (SEG_WRITE(0) : : \"r\"(x));\n }\n \n static inline struct abi_dispatch *abi_disp(void)\n {\n   struct abi_dispatch *r;\n-  asm volatile (SEG_DECODE_READ(11) : \"=r\"(r));\n+  asm volatile (SEG_DECODE_READ(1) : \"=r\"(r));\n   return r;\n }\n \n static inline void set_abi_disp(struct abi_dispatch *x)\n {\n   void *scratch;\n-  asm volatile (SEG_ENCODE_WRITE(11) : \"=r\"(scratch) : \"0\"(x));\n+  asm volatile (SEG_ENCODE_WRITE(1) : \"=r\"(scratch) : \"0\"(x));\n }\n \n #undef SEG_READ"}]}