{"sha": "fad92291a67d76d59acbfc33b817986871a3fd1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFkOTIyOTFhNjdkNzZkNTlhY2JmYzMzYjgxNzk4Njg3MWEzZmQxZQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-02-27T13:56:02Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-02-27T13:56:02Z"}, "message": "[ARC] Clean up arc header file.\n\ngcc/\n2017-02-27  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config.gcc (arc*-): Clean up, use arc/big.h, arc/elf.h, and\n\tarc/linux.h headers.\n\t* config/arc/arc.h (TARGET_OS_CPP_BUILTINS): Remove.\n\t(LINK_SPEC): Likewise.\n\t(ARC_TLS_EXTRA_START_SPEC): Likewise.\n\t(EXTRA_SPECS): Likewise.\n\t(STARTFILE_SPEC): Likewise.\n\t(ENDFILE_SPEC): Likewise.\n\t(LIB_SPEC): Likewise.\n\t(TARGET_SDATA_DEFAULT): Likewise.\n\t(TARGET_MMEDIUM_CALLS_DEFAULT): Likewise.\n\t(MULTILIB_DEFAULTS): Likewise.\n\t(DWARF2_UNWIND_INFO): Likewise.\n\t* config/arc/big.h: New file.\n\t* config/arc/elf.h: Likewise.\n\t* config/arc/linux.h: Likewise.\n\t* config/arc/t-uClibc: Remove.\n\nFrom-SVN: r245759", "tree": {"sha": "19e81791a035c9cb280d64ca88033c2c966a3b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19e81791a035c9cb280d64ca88033c2c966a3b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fad92291a67d76d59acbfc33b817986871a3fd1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad92291a67d76d59acbfc33b817986871a3fd1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad92291a67d76d59acbfc33b817986871a3fd1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad92291a67d76d59acbfc33b817986871a3fd1e/comments", "author": null, "committer": null, "parents": [{"sha": "d66d45909d13baafab5d0be977314d4c0ed1d395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66d45909d13baafab5d0be977314d4c0ed1d395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66d45909d13baafab5d0be977314d4c0ed1d395"}], "stats": {"total": 303, "additions": 170, "deletions": 133}, "files": [{"sha": "f7f696728f13436c62806c7f1c86be1a23e43bb4", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=fad92291a67d76d59acbfc33b817986871a3fd1e", "patch": "@@ -319,6 +319,7 @@ arc*-*-*)\n \tc_target_objs=\"arc-c.o\"\n \tcxx_target_objs=\"arc-c.o\"\n \textra_options=\"${extra_options} arc/arc-tables.opt\"\n+\textra_headers=\"arc-simd.h\"\n \t;;\n arm*-*-*)\n \tcpu_type=arm\n@@ -1015,8 +1016,7 @@ alpha*-dec-*vms*)\n \ttmake_file=\"${tmake_file} alpha/t-vms alpha/t-alpha\"\n \t;;\n arc*-*-elf*)\n-\textra_headers=\"arc-simd.h\"\n-\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n+\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h newlib-stdint.h arc/elf.h ${tm_file}\"\n \ttmake_file=\"arc/t-multilib arc/t-arc\"\n \textra_gcc_objs=\"driver-arc.o\"\n \tif test \"x$with_cpu\" != x; then\n@@ -1033,15 +1033,12 @@ arc*-*-elf*)\n \t*)\techo \"with_endian=${with_endian} not supported.\"; exit 1 ;;\n \tesac\n \tcase ${with_endian} in\n-\tbig*)\ttm_defines=\"DRIVER_ENDIAN_SELF_SPECS=\\\\\\\"%{!EL:%{!mlittle-endian:-mbig-endian}}\\\\\\\" ${tm_defines}\"\n+\tbig*)\ttm_file=\"arc/big.h ${tm_file}\"\n \tesac\n \t;;\n arc*-*-linux-uclibc*)\n-\textra_headers=\"arc-simd.h\"\n-\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h ${tm_file}\"\n-\ttmake_file=\"${tmake_file} arc/t-uClibc arc/t-arc\"\n-\ttm_defines=\"${tm_defines} TARGET_SDATA_DEFAULT=0\"\n-\ttm_defines=\"${tm_defines} TARGET_MMEDIUM_CALLS_DEFAULT=1\"\n+\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h arc/linux.h ${tm_file}\"\n+\ttmake_file=\"${tmake_file} arc/t-arc\"\n \textra_gcc_objs=\"driver-arc.o\"\n \tif test \"x$with_cpu\" != x; then\n \t\ttm_defines=\"${tm_defines} TARGET_CPU_BUILD=PROCESSOR_$with_cpu\"\n@@ -1057,7 +1054,7 @@ arc*-*-linux-uclibc*)\n \t*)\techo \"with_endian=${with_endian} not supported.\"; exit 1 ;;\n \tesac\n \tcase ${with_endian} in\n-\tbig*)\ttm_defines=\"DRIVER_ENDIAN_SELF_SPECS=\\\\\\\"%{!EL:%{!mlittle-endian:-mbig-endian}}\\\\\\\" ${tm_defines}\"\n+\tbig*)\ttm_file=\"arc/big.h ${tm_file}\"\n \tesac\n         ;;\n arm-wrs-vxworks)"}, {"sha": "da191287510be38cbd5aeaecedb3ebb57b93423c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 11, "deletions": 104, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=fad92291a67d76d59acbfc33b817986871a3fd1e", "patch": "@@ -1,14 +1,6 @@\n /* Definitions of target machine for GNU compiler, Synopsys DesignWare ARC cpu.\n    Copyright (C) 1994-2017 Free Software Foundation, Inc.\n \n-   Sources derived from work done by Sankhya Technologies (www.sankhya.com) on\n-   behalf of Synopsys Inc.\n-\n-   Position Independent Code support added,Code cleaned up,\n-   Comments and Support For ARC700 instructions added by\n-   Saurabh Verma (saurabh.verma@codito.com)\n-   Ramana Radhakrishnan(ramana.radhakrishnan@codito.com)\n-\n This file is part of GCC.\n \n GCC is free software; you can redistribute it and/or modify\n@@ -57,32 +49,9 @@ along with GCC; see the file COPYING3.  If not see\n #define SYMBOL_REF_SHORT_CALL_P(X)\t\\\n \t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_SHORT_CALL) != 0)\n \n-#undef ASM_SPEC\n-#undef LINK_SPEC\n-#undef STARTFILE_SPEC\n-#undef ENDFILE_SPEC\n-#undef SIZE_TYPE\n-#undef PTRDIFF_TYPE\n-#undef WCHAR_TYPE\n-#undef WCHAR_TYPE_SIZE\n-#undef ASM_APP_ON\n-#undef ASM_APP_OFF\n-#undef CC1_SPEC\n-\n /* Names to predefine in the preprocessor for this target machine.  */\n #define TARGET_CPU_CPP_BUILTINS() arc_cpu_cpp_builtins (pfile)\n \n-#if DEFAULT_LIBC == LIBC_UCLIBC\n-\n-#define TARGET_OS_CPP_BUILTINS() \\\n-  do \\\n-    { \\\n-      GNU_USER_TARGET_OS_CPP_BUILTINS (); \\\n-    } \\\n-  while (0)\n-\n-#endif /* DEFAULT_LIBC == LIBC_UCLIBC */\n-\n /* Macros enabled by specific command line option.  FIXME: to be\n    deprecatd.  */\n #define CPP_SPEC \"\\\n@@ -94,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n %{mtelephony:-D__Xtelephony} %{mxy:-D__Xxy} %{mmul64: -D__Xmult32} \\\n %{mlock:-D__Xlock} %{mswape:-D__Xswape} %{mrtsc:-D__Xrtsc}\"\n \n+#undef CC1_SPEC\n #define CC1_SPEC \"\\\n %{EB:%{EL:%emay not use both -EB and -EL}} \\\n %{EB:-mbig-endian} %{EL:-mlittle-endian} \\\n@@ -103,71 +73,16 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n #define EXTRA_SPEC_FUNCTIONS\t\t\t\\\n   { \"cpu_to_as\", arc_cpu_to_as },\n \n+#undef ASM_SPEC\n #define ASM_SPEC  \"%{mbig-endian|EB:-EB} %{EL} \"\t\t\t\\\n   \"%:cpu_to_as(%{mcpu=*:%*}) %{mspfp*} %{mdpfp*} %{mfpu=fpuda*:-mfpuda}\"\n \n #define OPTION_DEFAULT_SPECS\t\t\t\t\t\t\\\n   {\"cpu\", \"%{!mcpu=*:%{!mARC*:%{!marc*:%{!mA7:%{!mA6:-mcpu=%(VALUE)}}}}}\" }\n \n-#if DEFAULT_LIBC == LIBC_UCLIBC\n-/* Note that the default is to link against dynamic libraries, if they are\n-   available.  Override with -static.  */\n-#define LINK_SPEC \"%{h*} \\\n-\t\t   %{static:-Bstatic} \\\n-\t\t   %{symbolic:-Bsymbolic} \\\n-\t\t   %{rdynamic:-export-dynamic}\\\n-\t\t   -dynamic-linker /lib/ld-uClibc.so.0 \\\n-\t\t   -X %{mbig-endian:-EB} \\\n-\t\t   %{EB} %{EL} \\\n-\t\t   %{marclinux*} \\\n-\t\t   %{!marclinux*: %{mcpu=nps400:-marclinux_nps; :-marclinux}} \\\n-\t\t   %{!z:-z max-page-size=0x2000 -z common-page-size=0x2000} \\\n-\t\t   %{shared:-shared}\"\n-#else\n-#define LINK_SPEC \"%{mbig-endian:-EB} %{EB} %{EL}\"\n-#endif\n-\n-#if DEFAULT_LIBC != LIBC_UCLIBC\n-#define ARC_TLS_EXTRA_START_SPEC \"crttls.o%s\"\n-\n-#define EXTRA_SPECS \\\n-  { \"arc_tls_extra_start_spec\", ARC_TLS_EXTRA_START_SPEC }, \\\n-\n-#define STARTFILE_SPEC \"%{pg|p:gcrt0.o%s}%{!pg:%{!p:crt0.o%s}} crti%O%s \" \\\n-  \"%(arc_tls_extra_start_spec) crtbegin.o%s\"\n-#else\n-#define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n-  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n-#endif\n-\n-#if DEFAULT_LIBC != LIBC_UCLIBC\n-#define ENDFILE_SPEC \"crtend.o%s crtn%O%s\"\n-#else\n-#define ENDFILE_SPEC\t\t\t\t\t\t\t\\\n-  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n-#endif\n-\n-#if DEFAULT_LIBC == LIBC_UCLIBC\n-#undef LIB_SPEC\n-#define LIB_SPEC  \\\n-  \"%{pthread:-lpthread} \\\n-   %{shared:-lc} \\\n-   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-#else\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{!shared:%{g*:-lg} -lc}\"\n-#endif\n-\n #ifndef DRIVER_ENDIAN_SELF_SPECS\n #define DRIVER_ENDIAN_SELF_SPECS \"\"\n #endif\n-#ifndef TARGET_SDATA_DEFAULT\n-#define TARGET_SDATA_DEFAULT 1\n-#endif\n-#ifndef TARGET_MMEDIUM_CALLS_DEFAULT\n-#define TARGET_MMEDIUM_CALLS_DEFAULT 0\n-#endif\n \n #define DRIVER_SELF_SPECS DRIVER_ENDIAN_SELF_SPECS\t\t   \\\n   \"%{mARC600|mA6: -mcpu=arc600 %<mARC600 %<mA6 %<mARC600}\"\t   \\\n@@ -232,12 +147,6 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n #define TARGET_HS (arc_selected_cpu->arch_info->arch_id == BASE_ARCH_hs)\n #define TARGET_V2 (TARGET_EM || TARGET_HS)\n \n-#ifdef ARC_MULTILIB_CPU_DEFAULT\n-# ifndef MULTILIB_DEFAULTS\n-#  define MULTILIB_DEFAULTS { \"mcpu=\" ARC_MULTILIB_CPU_DEFAULT }\n-# endif\n-#endif\n-\n #ifndef UNALIGNED_ACCESS_DEFAULT\n #define UNALIGNED_ACCESS_DEFAULT 0\n #endif\n@@ -379,13 +288,18 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n \n+#undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n-#define WCHAR_TYPE_SIZE 32\n \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n \n-/* ashwin : shifted from arc.c:102 */\n #define PROGRAM_COUNTER_REGNO 63\n \n /* Standard register usage.  */\n@@ -1168,10 +1082,12 @@ arc_select_cc_mode (OP, X, Y)\n \n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n+#undef ASM_APP_ON\n #define ASM_APP_ON \"\"\n \n /* Output to assembler file text saying following lines\n    no longer contain unusual constructs.  */\n+#undef ASM_APP_OFF\n #define ASM_APP_OFF \"\"\n \n /* Globalizing directive for a label.  */\n@@ -1467,15 +1383,6 @@ extern int arc_return_address_regs[4];\n \n /* Frame info.  */\n \n-/* Define this macro to 0 if your target supports DWARF 2 frame unwind\n-   information, but it does not yet work with exception handling.  */\n-/* N.B. the below test is valid in an #if, but not in a C expression.  */\n-#if DEFAULT_LIBC == LIBC_UCLIBC\n-#define DWARF2_UNWIND_INFO 1\n-#else\n-#define DWARF2_UNWIND_INFO 0\n-#endif\n-\n #define EH_RETURN_DATA_REGNO(N)\t\\\n   ((N) < 4 ? (N) : INVALID_REGNUM)\n "}, {"sha": "11e785eb9f40de69e5605ab5357ce52dcfc54821", "filename": "gcc/config/arc/big.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Fbig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Fbig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fbig.h?ref=fad92291a67d76d59acbfc33b817986871a3fd1e", "patch": "@@ -0,0 +1,22 @@\n+/* Definition of big endian ARC machine for GNU compiler.\n+\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#undef DRIVER_ENDIAN_SELF_SPECS\n+#define DRIVER_ENDIAN_SELF_SPECS \"%{!EL:%{!mlittle-endian:-mbig-endian}}\""}, {"sha": "d2106c54f023f8844000961477a0d8d08a30c89b", "filename": "gcc/config/arc/elf.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Felf.h?ref=fad92291a67d76d59acbfc33b817986871a3fd1e", "patch": "@@ -0,0 +1,55 @@\n+/* Target macros for arc*-elf targets.\n+\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#undef DWARF2_UNWIND_INFO\n+#define DWARF2_UNWIND_INFO 0\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{EB} %{EL}\"\n+\n+#define ARC_TLS_EXTRA_START_SPEC \"crttls.o%s\"\n+\n+#define EXTRA_SPECS \\\n+  { \"arc_tls_extra_start_spec\", ARC_TLS_EXTRA_START_SPEC }, \\\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{pg|p:gcrt0.o%s}%{!pg:%{!p:crt0.o%s}} crti%O%s \" \\\n+  \"%(arc_tls_extra_start_spec) crtbegin.o%s\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s crtn%O%s\"\n+\n+/* Leave the linker script to choose the appropriate libraries.  */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+/* SDATA default for elf.  */\n+#undef TARGET_SDATA_DEFAULT\n+#define TARGET_SDATA_DEFAULT 1\n+\n+/* We no medium calls.  */\n+#undef TARGET_MMEDIUM_CALLS_DEFAULT\n+#define TARGET_MMEDIUM_CALLS_DEFAULT 0\n+\n+#ifdef ARC_MULTILIB_CPU_DEFAULT\n+# ifndef MULTILIB_DEFAULTS\n+#  define MULTILIB_DEFAULTS { \"mcpu=\" ARC_MULTILIB_CPU_DEFAULT }\n+# endif\n+#endif"}, {"sha": "10c291cc432d9c75cb3845fd7663792412fb547f", "filename": "gcc/config/arc/linux.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad92291a67d76d59acbfc33b817986871a3fd1e/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=fad92291a67d76d59acbfc33b817986871a3fd1e", "patch": "@@ -0,0 +1,76 @@\n+/* Target macros for arc*-*-linux targets.\n+\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Enable DWARF 2 exceptions.  */\n+#undef DWARF2_UNWIND_INFO\n+#define DWARF2_UNWIND_INFO 1\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS ();\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define GLIBC_DYNAMIC_LINKER   \"/lib/ld-linux.so.2\"\n+#define UCLIBC_DYNAMIC_LINKER  \"/lib/ld-uClibc.so.0\"\n+\n+/* Note that the default is to link against dynamic libraries, if they are\n+   available.  Override with -static.  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{h*} \\\n+  %{static:-Bstatic} \\\n+  %{shared:-shared} \\\n+  %{symbolic:-Bsymbolic} \\\n+  %{!static: \\\n+    %{rdynamic:-export-dynamic} \\\n+    %{!shared:-dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"}} \\\n+  -X \\\n+  %{mbig-endian:-EB} %{EB} %{EL} \\\n+  %{!z:-z max-page-size=0x2000 -z common-page-size=0x2000} \\\n+  %{mcpu=nps400:-marclinux_nps; :-marclinux}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n+  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC\t\t\t\t\t\t\t\\\n+  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC  \\\n+  \"%{pthread:-lpthread} \\\n+   %{shared:-lc} \\\n+   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+\n+/* No SDATA default for linux.  */\n+#undef TARGET_SDATA_DEFAULT\n+#define TARGET_SDATA_DEFAULT 0\n+\n+/* We have medium calls.  */\n+#undef TARGET_MMEDIUM_CALLS_DEFAULT\n+#define TARGET_MMEDIUM_CALLS_DEFAULT 1\n+\n+/* We do not have any MULTILIB_OPTIONS specified, so there are no\n+   MULTILIB_DEFAULTS.  */\n+#undef  MULTILIB_DEFAULTS"}, {"sha": "96417a03897978a59b74f98018ceb00e47fc6306", "filename": "gcc/config/arc/t-uClibc", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d45909d13baafab5d0be977314d4c0ed1d395/gcc%2Fconfig%2Farc%2Ft-uClibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d45909d13baafab5d0be977314d4c0ed1d395/gcc%2Fconfig%2Farc%2Ft-uClibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-uClibc?ref=d66d45909d13baafab5d0be977314d4c0ed1d395", "patch": "@@ -1,20 +0,0 @@\n-# GCC Makefile fragment for Synopsys DesignWare ARC with uClibc\n-\n-# Copyright (C) 2007-2017 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify it under the\n-# terms of the GNU General Public License as published by the Free Software\n-# Foundation; either version 3, or (at your option) any later version.\n-\n-# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n-# details.\n-\n-# You should have received a copy of the GNU General Public License along\n-# with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-MULTILIB_EXTRA_OPTS = mno-sdata"}]}