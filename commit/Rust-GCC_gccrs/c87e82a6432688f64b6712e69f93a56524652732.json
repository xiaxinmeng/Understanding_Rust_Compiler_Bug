{"sha": "c87e82a6432688f64b6712e69f93a56524652732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3ZTgyYTY0MzI2ODhmNjRiNjcxMmU2OWY5M2E1NjUyNDY1MjczMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-09T18:11:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-09T18:11:38Z"}, "message": "re PR c++/25466 (typeid expression fails to throw bad_typeid according to 5.2.8p2)\n\n\tPR c++/25466\n\t* rtti.c (build_typeid): Check the address of the argument\n\trather than looking for an INDIRECT_REF.\n\nFrom-SVN: r197644", "tree": {"sha": "6e25f8fc1a042063f7c9aed3ca74aeadc7a7df52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e25f8fc1a042063f7c9aed3ca74aeadc7a7df52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c87e82a6432688f64b6712e69f93a56524652732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87e82a6432688f64b6712e69f93a56524652732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87e82a6432688f64b6712e69f93a56524652732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87e82a6432688f64b6712e69f93a56524652732/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5017f1d2d31655ef19032f7c143bae64c8ae0142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5017f1d2d31655ef19032f7c143bae64c8ae0142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5017f1d2d31655ef19032f7c143bae64c8ae0142"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "c01fb3cb43e563cbc65e06b67abdb6f2f48a5ac9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c87e82a6432688f64b6712e69f93a56524652732", "patch": "@@ -1,3 +1,9 @@\n+2013-04-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/25466\n+\t* rtti.c (build_typeid): Check the address of the argument\n+\trather than looking for an INDIRECT_REF.\n+\n 2013-04-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56838"}, {"sha": "b3c6687a75d95e65a95056a59ace6afd9bfd3b81", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=c87e82a6432688f64b6712e69f93a56524652732", "patch": "@@ -326,18 +326,16 @@ build_typeid (tree exp, tsubst_flags_t complain)\n \n   /* FIXME when integrating with c_fully_fold, mark\n      resolves_to_fixed_type_p case as a non-constant expression.  */\n-  if (INDIRECT_REF_P (exp)\n-      && TYPE_PTR_P (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-      && TYPE_POLYMORPHIC_P (TREE_TYPE (exp))\n+  if (TYPE_POLYMORPHIC_P (TREE_TYPE (exp))\n       && ! resolves_to_fixed_type_p (exp, &nonnull)\n       && ! nonnull)\n     {\n       /* So we need to look into the vtable of the type of exp.\n-         This is an lvalue use of expr then.  */\n-      exp = mark_lvalue_use (exp);\n+         Make sure it isn't a null lvalue.  */\n+      exp = cp_build_addr_expr (exp, complain);\n       exp = stabilize_reference (exp);\n-      cond = cp_convert (boolean_type_node, TREE_OPERAND (exp, 0),\n-\t\t\t complain);\n+      cond = cp_convert (boolean_type_node, exp, complain);\n+      exp = cp_build_indirect_ref (exp, RO_NULL, complain);\n     }\n \n   exp = get_tinfo_decl_dynamic (exp, complain);"}, {"sha": "47b45b1056dd68d81c4d40b5ddb2bfa6d81a8c55", "filename": "gcc/testsuite/g++.dg/rtti/typeid10.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c87e82a6432688f64b6712e69f93a56524652732/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid10.C?ref=c87e82a6432688f64b6712e69f93a56524652732", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/25466\n+// { dg-do run }\n+\n+#include <typeinfo>\n+\n+const std::type_info *a;\n+\n+template <class T>\n+bool is_polymorphic() {\n+   bool result(false);\n+   const std::type_info &a1 = typeid( (result=true), *(T*)0);\n+   a = &a1;\n+   return result;\n+}\n+\n+struct non_polymorphic {};\n+struct polymorphic { virtual ~polymorphic() {} };\n+\n+\n+int main() {\n+  if (is_polymorphic<int>()) __builtin_abort();\n+  if (is_polymorphic<non_polymorphic>()) __builtin_abort();\n+  try\n+    {\n+      is_polymorphic<polymorphic>();\n+      __builtin_abort(); // should have thrown bad_typeid\n+    }\n+  catch (std::bad_typeid&)\n+    {\n+      // OK\n+    }\n+  catch (...)\n+    {\n+      __builtin_abort();\n+    }\n+}"}]}