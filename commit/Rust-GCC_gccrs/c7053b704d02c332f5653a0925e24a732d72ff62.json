{"sha": "c7053b704d02c332f5653a0925e24a732d72ff62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwNTNiNzA0ZDAyYzMzMmY1NjUzYTA5MjVlMjRhNzMyZDcyZmY2Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T01:05:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T01:05:37Z"}, "message": "Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS, CONFIG_CXXFLAGS from here, and move to...\n\n\n2000-10-06  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS,\n\tCONFIG_CXXFLAGS from here, and move to...\n\t* src/Makefile.in: Regenerate.\n\t* Makefile.am: ... here. Clean.\n\t(OPTIMIZE_CXXFLAGS): Move up Makefile hierarchy to here.\n\t(WARN_CXXFLAGS): Same.\n\t(CONFIG_CXXFLAGS): Same.\n\t* Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Use top-level OPTIMIZE_CXXFLAGS,\n\tWARN_CXXFLAGS, CONFIG_CXXFLAGS as part of local AM_CXXFLAGS.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\tChange math to libmath.\n\t* math: Move to libmath, delete.\n\t* libmath: New directory.\n\t* libmath/*: Populate.\n\t* src/Makefile.am (LIBMATH_INCLUDES): Change to libmath.\n\t(libstdc___la_LIBADD): Same.\n\t* src/Makefile.in: Regenerate.\n\t* configure.in: Add AC_OUTPUT for libmath/Makefile.\n\t* configure: Regenerate.\n\t* Makefile.am (SUBDIRS): Add libmath.\n\t* Makefile.in: Regenerate.\n\t* README (file): Change name.\n\nFrom-SVN: r36767", "tree": {"sha": "9bc53d39a3cb5bc320ba6a76f5ae778323a9f66e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc53d39a3cb5bc320ba6a76f5ae778323a9f66e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7053b704d02c332f5653a0925e24a732d72ff62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7053b704d02c332f5653a0925e24a732d72ff62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7053b704d02c332f5653a0925e24a732d72ff62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7053b704d02c332f5653a0925e24a732d72ff62/comments", "author": null, "committer": null, "parents": [{"sha": "5ce249543c5af0aae8336252ebcc509527aded98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce249543c5af0aae8336252ebcc509527aded98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce249543c5af0aae8336252ebcc509527aded98"}], "stats": {"total": 290, "additions": 145, "deletions": 145}, "files": [{"sha": "aa985ac93b1455cbad556692598fa5d3bb8b51a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -1,3 +1,31 @@\n+2000-10-06  benjamin kosnik  <bkoz@fillmore.constant.com>\n+2000-10-06  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS,\n+\tCONFIG_CXXFLAGS from here, and move to...\n+\t* src/Makefile.in: Regenerate.\n+\t* Makefile.am: ... here. Clean.\n+\t(OPTIMIZE_CXXFLAGS): Move up Makefile hierarchy to here.\n+\t(WARN_CXXFLAGS): Same.\n+\t(CONFIG_CXXFLAGS): Same.\n+\t* Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Use top-level OPTIMIZE_CXXFLAGS,\n+\tWARN_CXXFLAGS, CONFIG_CXXFLAGS as part of local AM_CXXFLAGS.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t\t\n+\tChange math to libmath.\n+\t* math: Move to libmath, delete.\n+\t* libmath: New directory.\n+\t* libmath/*: Populate.\n+\t* src/Makefile.am (LIBMATH_INCLUDES): Change to libmath.\n+\t(libstdc___la_LIBADD): Same.\n+\t* src/Makefile.in: Regenerate.\n+\t* configure.in: Add AC_OUTPUT for libmath/Makefile.\n+\t* configure: Regenerate.\n+\t* Makefile.am (SUBDIRS): Add libmath.\n+\t* Makefile.in: Regenerate.\n+\t* README (file): Change name.\n+\t\n 2000-10-06  Benjamin Kosnik  <bkoz@cygnus.com>\n             Richard Henderson  <rth@cygnus.com>\n \t    Alexandre Oliva  <aoliva@redhat.com>\n@@ -13,7 +41,7 @@\n \t* src/Makefile.am (libstdc___la_LIBADD): Add in libsupc++.la\n \t* src/Makefile.in: Regenerate.\n \t* libio/Makefile.am: Remove extraneous, confusing bits.\n-\t* libio/Makefile.in: Regeneate.\n+\t* libio/Makefile.in: Regenerate.\n \t\n 2000-10-05  Brent Verner  <brent@rcfile.org>\n "}, {"sha": "783c179e667ffacb037e5143c3c35fcf5d2cb580", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -29,7 +29,28 @@ MAINT_CHARSET = latin1\n INTERFACE = v3\n gxx_include_dir=$(includedir)/g++\n \n-SUBDIRS = math libio libsupc++ src\n+SUBDIRS = libio libmath libsupc++ src\n+\n+\n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+# Optimization flags that are probably a good idea for thrill-seekers. Just\n+# uncomment the lines below and make, everything else is ready to go... \n+# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+OPTIMIZE_CXXFLAGS = \n+\n+# Warning flags to use.\n+WARN_CXXFLAGS = \\\n+\t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n+\t$(WERROR) @WFMT_FLAGS@\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS = \\\n+\t@CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n+\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n+\n \n # Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative\n@@ -42,28 +63,6 @@ check-install: $(top_builddir)/mkcheck\n \tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 1 `pwd` $(top_srcdir) $(prefix)\n \n-#all-local:  stamp-rebuild\n-\n-# This has already been sanity-checked by configure to a certain extent\n-#stamp-rebuild:  $(top_builddir)/config.status\n-#\tif test \"$(GCC_OBJDIR)\" != \"no\"; then \\\n-#\t(cd \"$(GCC_OBJDIR)/gcc\" && \\\n-#\t if test -f libgcc2.ready ; then \\\n-#\t   rm -f libgcc2.ready libgcc.a libgcc2.a ; \\\n-#\t   $(MAKE) libgcc2.a TARGET_LIBGCC2_CFLAGS='@NAMESPACES@' ; \\\n-#\t   $(MAKE) libgcc.a ; \\\n-#\t else \\\n-#\t   echo '** There does not appear to be a previously-built' ; \\\n-#\t   echo '** library here.  Please see' ; \\\n-#\t   echo '** <http://sourceware.cygnus.com/libstdc++/install.html>' ; \\\n-#\t   echo '** In particular, the \"Building and Installing' ; \\\n-#\t   echo '** the library (without GCC sources)\" section.' ; \\\n-#\t   exit 1 ; \\\n-#\t fi \\\n-#\t) \\\n-#\tfi\n-#\ttouch stamp-rebuild\n-\n # Multilib support.\n MAKEOVERRIDES=\n \n@@ -147,11 +146,10 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\"\n-\n-\n-\n-\n+\t\"WERROR=$(WERROR)\" \\\n+\t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \\\n+\t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \\\n+\t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \n \n \n "}, {"sha": "471b12eb66ddd8fc4a9464ec04a7e50bc392764d", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -117,29 +117,24 @@ MAINT_CHARSET = latin1\n INTERFACE = v3\n gxx_include_dir = $(includedir)/g++\n \n-SUBDIRS = math libio libsupc++ src\n-\n-#all-local:  stamp-rebuild\n-\n-# This has already been sanity-checked by configure to a certain extent\n-#stamp-rebuild:  $(top_builddir)/config.status\n-#\tif test \"$(GCC_OBJDIR)\" != \"no\"; then \\\n-#\t(cd \"$(GCC_OBJDIR)/gcc\" && \\\n-#\t if test -f libgcc2.ready ; then \\\n-#\t   rm -f libgcc2.ready libgcc.a libgcc2.a ; \\\n-#\t   $(MAKE) libgcc2.a TARGET_LIBGCC2_CFLAGS='@NAMESPACES@' ; \\\n-#\t   $(MAKE) libgcc.a ; \\\n-#\t else \\\n-#\t   echo '** There does not appear to be a previously-built' ; \\\n-#\t   echo '** library here.  Please see' ; \\\n-#\t   echo '** <http://sourceware.cygnus.com/libstdc++/install.html>' ; \\\n-#\t   echo '** In particular, the \"Building and Installing' ; \\\n-#\t   echo '** the library (without GCC sources)\" section.' ; \\\n-#\t   exit 1 ; \\\n-#\t fi \\\n-#\t) \\\n-#\tfi\n-#\ttouch stamp-rebuild\n+SUBDIRS = libio libmath libsupc++ src\n+\n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+# Optimization flags that are probably a good idea for thrill-seekers. Just\n+# uncomment the lines below and make, everything else is ready to go... \n+# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+OPTIMIZE_CXXFLAGS = \n+\n+# Warning flags to use.\n+WARN_CXXFLAGS =  \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(WERROR) @WFMT_FLAGS@\n+\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS =  \t@CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n+\n \n # Multilib support.\n MAKEOVERRIDES = \n@@ -155,7 +150,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\"\n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "7516e5c425eefa6ed7f0f2a999beef33f7b23790", "filename": "libstdc++-v3/README", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FREADME?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -68,7 +68,6 @@ Other subdirectories contain variant versions of certain files\n that are meant to be copied or linked by the configure script.\n Currently these are:\n \n-  math\n   config/cpu\n   config/os\n "}, {"sha": "199309dad9ef871e39a1eb8e459410a680c11552", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -18582,7 +18582,7 @@ done\n ac_given_srcdir=$srcdir\n ac_given_INSTALL=\"$INSTALL\"\n \n-trap 'rm -fr `echo \"mkcheck Makefile src/Makefile math/Makefile libio/Makefile libsupc++/Makefile config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n+trap 'rm -fr `echo \"mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n EOF\n cat >> $CONFIG_STATUS <<EOF\n \n@@ -18735,7 +18735,7 @@ EOF\n \n cat >> $CONFIG_STATUS <<EOF\n \n-CONFIG_FILES=\\${CONFIG_FILES-\"mkcheck Makefile src/Makefile math/Makefile libio/Makefile libsupc++/Makefile\"}\n+CONFIG_FILES=\\${CONFIG_FILES-\"mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile\"}\n EOF\n cat >> $CONFIG_STATUS <<\\EOF\n for ac_file in .. $CONFIG_FILES; do if test \"x$ac_file\" != x..; then"}, {"sha": "0af656ede9e437642621499087c0944bf27412f9", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -148,7 +148,7 @@ fi\n # -> top_srcdir/Makefile.am -> top_srcdir/src/Makefile.am, manually\n # append it here.\n \n-AC_OUTPUT(mkcheck Makefile src/Makefile math/Makefile libio/Makefile libsupc++/Makefile,\n+AC_OUTPUT(mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile"}, {"sha": "1506545b9d5ae12fefd94a8a7eea9c526e52d242", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -75,21 +75,17 @@ libsupc__convenience_la_SOURCES = $(sources)\n LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic\n \n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CXXFLAGS = \\\n-\t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n-\n-# Need to manually set this option because AC_CXXFLAGS has to be at\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n # the end of the compile line so that -O2 can be overridden as the\n # occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n-\t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n-\t$(LIBSUPCXX_CXXFLAGS) $(AC_CXXFLAGS) \n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n # Need to explicitly set this so that AM_CXXFLAGS is last. In\n # addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n@@ -107,3 +103,8 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n # in libtool since this would add -lstdc++ to the link line which of\n # course is impossible.\n CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\n+\n+\n+\n+"}, {"sha": "25f8037f1f374b77cba680a125138af1f55eab69", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -137,16 +137,12 @@ libsupc__convenience_la_SOURCES = $(sources)\n LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic\n \n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CXXFLAGS =  \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n-\n-\n-# Need to manually set this option because AC_CXXFLAGS has to be at\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n # the end of the compile line so that -O2 can be overridden as the\n # occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(LIBSUPCXX_CXXFLAGS) $(AC_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # Need to explicitly set this so that AM_CXXFLAGS is last. In"}, {"sha": "3052d3973124959056471914e2bcb331ba014f76", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.33 2000/10/05 11:36:52 bkoz Exp $\n+## $Id: Makefile.am,v 1.34 2000/10/06 23:31:22 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -39,24 +39,33 @@ toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n \n-# Using these options is probably a good idea for thrill-seekers. Just\n-# uncomment the lines below and make, everything else is ready to go... \n-# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CXXFLAGS = \\\n-\t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n-\n-# Need to manually set this option because AC_CXXFLAGS has to be at\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n # the end of the compile line so that -O2 can be overridden as the\n # occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n-\t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n-\t$(AC_CXXFLAGS) \n+\t-fno-implicit-templates \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n+\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n # Root level of the include sources.\n@@ -65,7 +74,7 @@ glibcpp_includedir = $(top_srcdir)/include\n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n \n-LIBMATH_INCLUDES = -I$(top_srcdir)/math\n+LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n \n if GLIBCPP_NEED_LIBIO\n LIBIO_INCLUDES = \\\n@@ -94,24 +103,6 @@ INCLUDES = \\\n \t $(TOPLEVEL_INCLUDES)\t\n \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t     $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-\n headers = \\\n \tbits/cpp_type_traits.h \\\n \tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \\\n@@ -207,7 +198,7 @@ endif\n \n generated_headers = \\\n \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n-\t $(top_builddir)/bits/c++threads.h $(top_builddir)/bits/c++io.h\n+\t $(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \n \n cpu_headers = \\\n \t $(top_srcdir)/@cpu_include_dir@/bits/atomicity.h \n@@ -238,7 +229,7 @@ libstdc___la_SOURCES = $(sources)\n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n libstdc___la_LIBADD = \\\n-\t../math/libmath.la ../libio/libio.la \\\n+\t../libmath/libmath.la ../libio/libio.la \\\n \t../libsupc++/libsupc++convenience.la \\\n \t@libinst_wstring_la@\n "}, {"sha": "31a7757a798aee300188c0bcb6914ca897d62ed4", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7053b704d02c332f5653a0925e24a732d72ff62/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c7053b704d02c332f5653a0925e24a732d72ff62", "patch": "@@ -117,29 +117,38 @@ MAINT_CHARSET = latin1\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n-# Using these options is probably a good idea for thrill-seekers. Just\n-# uncomment the lines below and make, everything else is ready to go... \n-# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CXXFLAGS =  \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n \n-# Need to manually set this option because AC_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(AC_CXXFLAGS) \n \n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n # Root level of the include sources.\n glibcpp_includedir = $(top_srcdir)/include\n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n \n-LIBMATH_INCLUDES = -I$(top_srcdir)/math\n+LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n @GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(glibcpp_includedir)/std -I$(top_srcdir)/shadow \n@@ -151,23 +160,6 @@ CONFIG_INCLUDES =  \t-I$(top_srcdir)/@cpu_include_dir@ \t-I$(top_srcdir)/@ctype_in\n INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(glibcpp_includedir) \t $(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t $(TOPLEVEL_INCLUDES)\t\n \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n headers =  \tbits/cpp_type_traits.h \tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \tbits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \tshadow/sys/cdefs.h \n \n \n@@ -176,7 +168,7 @@ std_headers =  \talgorithm bitset cassert cctype cerrno cfloat climits clocale ci\n @GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-generated_headers =  \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t $(top_builddir)/bits/c++threads.h $(top_builddir)/bits/c++io.h\n+generated_headers =  \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t $(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \n \n \n cpu_headers =  \t $(top_srcdir)/@cpu_include_dir@/bits/atomicity.h \n@@ -196,7 +188,7 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD =  \t../math/libmath.la ../libio/libio.la \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la ../libio/libio.la \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm"}]}