{"sha": "0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxODVkNmViMmM3M2Y0YmI3MzhiYWZmYmJkMDk1Y2MyZmNkZTJiOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-15T00:08:59Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-15T00:08:59Z"}, "message": "In gcc/testsuite/:\n\n2010-09-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n\n        2006-03-09 Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4457381\n        * objc.dg/msg-in-protocol.m: New.\n        * obj-c++.dg/msg-in-protocol.mm: New.\n\n        2006-02-07  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4219590\n        * objc.dg/break-in-ifstmt.m: New.\n        \n        2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4174166\n        * obj-c++.dg/comp-types-13.mm: New.\n        * objc.dg/comp-types-12.m: New.\n\n        2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4216500\n        * obj-c++.dg/proto-lossage-7.mm: New.\n        * objc.dg/proto-lossage-7.m: New.\n\nIn gcc/objc/:\n        \n2010-09-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n\n        2006-03-09 Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4457381\n        * objc/objc-act.c (objc_finish_message_expr): Look for message in\n        @class's protocol list.\n\n        2006-02-07  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4219590\n        * objc/objc-act.c (objc_start_method_definition): Initialize\n        break/continue labels.\n\n        2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4174166\n        * objc-act.c (objc_compare_types): Compare function\n        pointers; indicate success if the right-hand side has\n        a return type that is covariant, and the argument types\n        contravariant, with those of the left side.\n\n        2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4216500\n        * objc-act.c (objc_get_protocol_qualified_type): When looking\n        at a typedef, retrieve the precise type it describes (rather\n        than merely looking up a class by name).\n\nFrom-SVN: r164290", "tree": {"sha": "2176ab485e48382593d75f7310be5df0168c4713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2176ab485e48382593d75f7310be5df0168c4713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "187c10dc7be89ff530b37df6a07d301a4be46e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187c10dc7be89ff530b37df6a07d301a4be46e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187c10dc7be89ff530b37df6a07d301a4be46e83"}], "stats": {"total": 253, "additions": 251, "deletions": 2}, "files": [{"sha": "132679ba1320016db3986611a094d46fcd24744a", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -1,3 +1,34 @@\n+2010-09-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\n+\t2006-03-09 Fariborz Jahanian <fjahanian@apple.com>\n+\n+        Radar 4457381\n+\t* objc/objc-act.c (objc_finish_message_expr): Look for message in\n+\t@class's protocol list.\n+\n+\t2006-02-07  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4219590\n+\t* objc/objc-act.c (objc_start_method_definition): Initialize\n+\tbreak/continue labels.\n+\n+\t2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4174166\n+\t* objc-act.c (objc_compare_types): Compare function\n+\tpointers; indicate success if the right-hand side has\n+\ta return type that is covariant, and the argument types\n+\tcontravariant, with those of the left side.\n+\n+\t2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4216500\n+\t* objc-act.c (objc_get_protocol_qualified_type): When looking\n+\tat a typedef, retrieve the precise type it describes (rather\n+\tthan merely looking up a class by name).\n+\t\n 2010-09-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc-act.c (objc_begin_try_stmt): Generate an error if"}, {"sha": "d8fbe368a7877b70a4936d96fc5021625670d731", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -788,6 +788,13 @@ objc_start_method_definition (tree decl)\n   if (!objc_implementation_context)\n     fatal_error (\"method definition not in @implementation context\");\n \n+#ifndef OBJCPLUS\n+  /* Indicate no valid break/continue context by setting these variables\n+     to some non-null, non-label value.  We'll notice and emit the proper\n+     error message in c_finish_bc_stmt.  */\n+  c_break_label = c_cont_label = size_zero_node;\n+#endif\n+\n   objc_add_method (objc_implementation_context,\n \t\t   decl,\n \t\t   objc_inherit_code == CLASS_METHOD_DECL);\n@@ -1131,6 +1138,29 @@ objc_compare_types (tree ltyp, tree rtyp, int argno, tree callee)\n     }\n   while (POINTER_TYPE_P (ltyp) && POINTER_TYPE_P (rtyp));\n \n+  /* We must also handle function pointers, since ObjC is a bit more\n+     lenient than C or C++ on this.  */\n+  if (TREE_CODE (ltyp) == FUNCTION_TYPE && TREE_CODE (rtyp) == FUNCTION_TYPE)\n+    {\n+      /* Return types must be covariant.  */\n+      if (!comptypes (TREE_TYPE (ltyp), TREE_TYPE (rtyp))\n+\t  && !objc_compare_types (TREE_TYPE (ltyp), TREE_TYPE (rtyp),\n+\t\t\t\t  argno, callee))\n+      return false;\n+\n+      /* Argument types must be contravariant.  */\n+      for (ltyp = TYPE_ARG_TYPES (ltyp), rtyp = TYPE_ARG_TYPES (rtyp);\n+\t   ltyp && rtyp; ltyp = TREE_CHAIN (ltyp), rtyp = TREE_CHAIN (rtyp))\n+\t{\n+\t  if (!comptypes (TREE_VALUE (rtyp), TREE_VALUE (ltyp))\n+\t      && !objc_compare_types (TREE_VALUE (rtyp), TREE_VALUE (ltyp),\n+\t\t\t\t      argno, callee))\n+\t    return false;\n+      }\n+\n+      return (ltyp == rtyp);\n+    }\n+\n   /* Past this point, we are only interested in ObjC class instances,\n      or 'id' or 'Class'.  */\n   if (TREE_CODE (ltyp) != RECORD_TYPE || TREE_CODE (rtyp) != RECORD_TYPE)\n@@ -1415,7 +1445,17 @@ objc_get_protocol_qualified_type (tree interface, tree protocols)\n       type = objc_is_class_name (interface);\n \n       if (type)\n-\ttype = xref_tag (RECORD_TYPE, type);\n+\t{\n+\t  /* If looking at a typedef, retrieve the precise type it\n+\t     describes.  */\n+\t  if (TREE_CODE (interface) == IDENTIFIER_NODE)\n+\t    interface = identifier_global_value (interface);\n+\n+\t  type = ((interface && TREE_CODE (interface) == TYPE_DECL\n+\t\t   && DECL_ORIGINAL_TYPE (interface))\n+\t\t  ? DECL_ORIGINAL_TYPE (interface)\n+\t\t  : xref_tag (RECORD_TYPE, type));\n+\t}\n       else\n         return interface;\n     }\n@@ -6360,7 +6400,14 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t more intelligent about which methods the receiver will\n \t understand. */\n       if (!rtype || TREE_CODE (rtype) == IDENTIFIER_NODE)\n-\trtype = NULL_TREE;\n+\t{\n+\t  rtype = NULL_TREE;\n+\t  /* We could not find an @interface declaration, yet Message maybe in a \n+\t     @class's protocol. */\n+\t  if (!method_prototype && rprotos)\n+\t    method_prototype\n+\t      = lookup_method_in_protocol_list (rprotos, sel_name, 0);\n+\t}\n       else if (TREE_CODE (rtype) == CLASS_INTERFACE_TYPE\n \t  || TREE_CODE (rtype) == CLASS_IMPLEMENTATION_TYPE)\n \t{"}, {"sha": "dc91d21504537b9a03506b9dde332c9fe3962f40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -1,3 +1,30 @@\n+2010-09-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\n+\t2006-03-09 Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4457381\n+\t* objc.dg/msg-in-protocol.m: New.\n+\t* obj-c++.dg/msg-in-protocol.mm: New.\n+\n+\t2006-02-07  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4219590\n+\t* objc.dg/break-in-ifstmt.m: New.\n+\t\n+\t2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4174166\n+\t* obj-c++.dg/comp-types-13.mm: New.\n+\t* objc.dg/comp-types-12.m: New.\n+\n+\t2005-08-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4216500\n+\t* obj-c++.dg/proto-lossage-7.mm: New.\n+\t* objc.dg/proto-lossage-7.m: New.\n+\t\n 2010-09-14  Jan Hubicka  <jh@suse.cz>\n \n \t* gfortran.dg/vect/fast-math-pr38968.f90: Add common to prevent"}, {"sha": "3a919d5d04cb6b93748e096461d6a0dae2351cbd", "filename": "gcc/testsuite/obj-c++.dg/comp-types-13.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,19 @@\n+/* When assigning function pointers, allow for covariant return types\n+   and contravariant argument types.  */\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@class Derived;\n+\n+Object *ExternFunc (Object *filePath, Object *key);\n+typedef id FuncSignature (Object *arg1, Derived *arg2);\n+\n+@interface Derived: Object\n++ (void)registerFunc:(FuncSignature *)function;\n+@end\n+\n+void foo(void)\n+{\n+  [Derived registerFunc: ExternFunc];\n+}\n+"}, {"sha": "86b7c85a3d3d878d60cfe2bcfac996651756b73f", "filename": "gcc/testsuite/obj-c++.dg/msg-in-protocol.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmsg-in-protocol.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmsg-in-protocol.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmsg-in-protocol.mm?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@class Foo;\n+\n+@protocol Bar\n+\n+- (void)bang;\n+\n+@end\n+\n+void foo()\n+{\n+    Foo<Bar> *foo = nil;\n+    [foo bang];\n+}\n+"}, {"sha": "b7746d7a14f700fc95ba79fe3a0951fa95fbc0f9", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-7.mm", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,28 @@\n+/* Check that typedefs of ObjC classes preserve \n+   any @protocol qualifiers.  */\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@protocol CanDoStuff;\n+\n+typedef Object<CanDoStuff> CanDoStuffType;\n+typedef Object<CanDoStuff> *CanDoStuffTypePtr;\n+\n+@protocol CanDoStuff\n+- (int) dostuff;\n+@end\n+\n+@protocol MoreStuff\n+- (int) morestuff;\n+@end\n+\n+int main(void)\n+{\n+    CanDoStuffTypePtr  dice     = nil;\n+    CanDoStuffType    *nodice   = nil;\n+    int count;\n+    count = [dice dostuff];\n+    count = [nodice dostuff];\n+    return 0;\n+}\n+"}, {"sha": "896849472a7183bb5675e8424e548d08bb6e5428", "filename": "gcc/testsuite/objc.dg/break-in-ifstmt.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fbreak-in-ifstmt.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fbreak-in-ifstmt.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbreak-in-ifstmt.m?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+@interface foo\n+- (void) test;\n+@end\n+\n+@implementation foo\n+-(void) test {\n+  if (1) {\n+        break;\t/* { dg-error \"break\" } */\n+        }\n+}\n+@end\n+"}, {"sha": "3a919d5d04cb6b93748e096461d6a0dae2351cbd", "filename": "gcc/testsuite/objc.dg/comp-types-12.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,19 @@\n+/* When assigning function pointers, allow for covariant return types\n+   and contravariant argument types.  */\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@class Derived;\n+\n+Object *ExternFunc (Object *filePath, Object *key);\n+typedef id FuncSignature (Object *arg1, Derived *arg2);\n+\n+@interface Derived: Object\n++ (void)registerFunc:(FuncSignature *)function;\n+@end\n+\n+void foo(void)\n+{\n+  [Derived registerFunc: ExternFunc];\n+}\n+"}, {"sha": "86b7c85a3d3d878d60cfe2bcfac996651756b73f", "filename": "gcc/testsuite/objc.dg/msg-in-protocol.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fmsg-in-protocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fmsg-in-protocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmsg-in-protocol.m?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@class Foo;\n+\n+@protocol Bar\n+\n+- (void)bang;\n+\n+@end\n+\n+void foo()\n+{\n+    Foo<Bar> *foo = nil;\n+    [foo bang];\n+}\n+"}, {"sha": "b7746d7a14f700fc95ba79fe3a0951fa95fbc0f9", "filename": "gcc/testsuite/objc.dg/proto-lossage-7.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m?ref=0f185d6eb2c73f4bb738baffbbd095cc2fcde2b9", "patch": "@@ -0,0 +1,28 @@\n+/* Check that typedefs of ObjC classes preserve \n+   any @protocol qualifiers.  */\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@protocol CanDoStuff;\n+\n+typedef Object<CanDoStuff> CanDoStuffType;\n+typedef Object<CanDoStuff> *CanDoStuffTypePtr;\n+\n+@protocol CanDoStuff\n+- (int) dostuff;\n+@end\n+\n+@protocol MoreStuff\n+- (int) morestuff;\n+@end\n+\n+int main(void)\n+{\n+    CanDoStuffTypePtr  dice     = nil;\n+    CanDoStuffType    *nodice   = nil;\n+    int count;\n+    count = [dice dostuff];\n+    count = [nodice dostuff];\n+    return 0;\n+}\n+"}]}