{"sha": "6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1MWQ2YjQyZWFiNzVkMTZlYjVlNzY0ZmNlYWI5ZTRlNGQ3YTcxZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2015-10-09T13:13:38Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2015-10-09T13:13:38Z"}, "message": "[PR 67794] Also remap SSA_NAMEs defined in ASMs in IPA-SRA\n\n2015-10-09  Martin Jambor  <mjambor@suse.cz>\n\n\ttree-optimization/67794\n\t* tree-sra.c (replace_removed_params_ssa_names): Do not distinguish\n\tbetween types of state,ents but accept original definitions as a\n\tparameter.\n\t(ipa_sra_modify_function_body): Use FOR_EACH_SSA_DEF_OPERAND to\n\titerate over definitions.\n\ntestsuite/\n        * gcc.dg/ipa/ipa-sra-10.c: Nw test.\n        * gcc.dg/torture/pr67794.c: Likewise.\n\nFrom-SVN: r228654", "tree": {"sha": "311e1178ee2b0ba6cad68802df2ea5374cc0fa25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311e1178ee2b0ba6cad68802df2ea5374cc0fa25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a025b0575e33f9715e18815f9bc55e1df83df8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a025b0575e33f9715e18815f9bc55e1df83df8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a025b0575e33f9715e18815f9bc55e1df83df8e"}], "stats": {"total": 144, "additions": 106, "deletions": 38}, "files": [{"sha": "81f6ad8e522bbb4f7f5d24b1ce74db3d4584cbbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "patch": "@@ -1,3 +1,12 @@\n+2015-10-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\ttree-optimization/67794\n+\t* tree-sra.c (replace_removed_params_ssa_names): Do not distinguish\n+\tbetween types of state,ents but accept original definitions as a\n+\tparameter.\n+\t(ipa_sra_modify_function_body): Use FOR_EACH_SSA_DEF_OPERAND to\n+\titerate over definitions.\n+\n 2015-10-09  James Norris  <jnorris@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (rs6000_offload_options): New."}, {"sha": "cca7bdf7c9711ff78f53959a817fe280ec72215a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "patch": "@@ -1,3 +1,9 @@\n+2015-10-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\ttree-optimization/67794\n+        * gcc.dg/ipa/ipa-sra-10.c: Nw test.\n+        * gcc.dg/torture/pr67794.c: Likewise.\n+\n 2015-10-09  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/67828"}, {"sha": "24b64d1234aa1c7fea65446ec1c96c328ab0b394", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-10.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-10.c?ref=6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fipa-sra -fdump-tree-eipa_sra-details\"  } */\n+\n+extern void consume (int);\n+extern int glob, glob1, glob2;\n+extern int get (void);\n+\n+\n+static void __attribute__ ((noinline))\n+foo (int a)\n+{\n+  a = glob;\n+  consume (a);\n+  a = get ();\n+  consume (a);\n+  __asm__ volatile(\"\" : : \"\"(a));\n+  consume (a);\n+\n+  if (glob1)\n+    a = glob1;\n+  else\n+    a = glob2;\n+  consume (a);\n+}\n+\n+int\n+bar (int a)\n+{\n+  foo (a);\n+  glob = a;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"replacing an SSA name of a removed param\" 4 \"eipa_sra\" } } */"}, {"sha": "5489e56fbc190aaf5429df973731d34f826ea4b0", "filename": "gcc/testsuite/gcc.dg/torture/pr67794.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67794.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67794.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67794.c?ref=6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+int *b;\n+static void fn1(int *best, int *dmin) {\n+  int a[64];\n+  dmin = a;\n+  __asm__ volatile(\"\" : \"+&r\"(dmin) : \"\"(best));\n+}\n+\n+__attribute__((always_inline)) static inline void fn2(int *best) { fn1(best, b); }\n+\n+void fn3(void) {\n+  int c[1];\n+  fn2(c);\n+}"}, {"sha": "f8517581df2c4044da1877221d59a07458bfdcb8", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6651d6b42eab75d16eb5e764fceab9e4e4d7a71d/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=6651d6b42eab75d16eb5e764fceab9e4e4d7a71d", "patch": "@@ -4612,61 +4612,45 @@ get_adjustment_for_base (ipa_parm_adjustment_vec adjustments, tree base)\n   return NULL;\n }\n \n-/* If the statement STMT defines an SSA_NAME of a parameter which is to be\n-   removed because its value is not used, replace the SSA_NAME with a one\n-   relating to a created VAR_DECL together all of its uses and return true.\n-   ADJUSTMENTS is a pointer to an adjustments vector.  */\n+/* If OLD_NAME, which is being defined by statement STMT, is an SSA_NAME of a\n+   parameter which is to be removed because its value is not used, create a new\n+   SSA_NAME relating to a replacement VAR_DECL, replace all uses of the\n+   original with it and return it.  If there is no need to re-map, return NULL.\n+   ADJUSTMENTS is a pointer to a vector of IPA-SRA adjustments.  */\n \n-static bool\n-replace_removed_params_ssa_names (gimple *stmt,\n+static tree\n+replace_removed_params_ssa_names (tree old_name, gimple *stmt,\n \t\t\t\t  ipa_parm_adjustment_vec adjustments)\n {\n   struct ipa_parm_adjustment *adj;\n-  tree lhs, decl, repl, name;\n-\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    lhs = gimple_phi_result (stmt);\n-  else if (is_gimple_assign (stmt))\n-    lhs = gimple_assign_lhs (stmt);\n-  else if (is_gimple_call (stmt))\n-    lhs = gimple_call_lhs (stmt);\n-  else\n-    gcc_unreachable ();\n+  tree decl, repl, new_name;\n \n-  if (TREE_CODE (lhs) != SSA_NAME)\n-    return false;\n+  if (TREE_CODE (old_name) != SSA_NAME)\n+    return NULL;\n \n-  decl = SSA_NAME_VAR (lhs);\n+  decl = SSA_NAME_VAR (old_name);\n   if (decl == NULL_TREE\n       || TREE_CODE (decl) != PARM_DECL)\n-    return false;\n+    return NULL;\n \n   adj = get_adjustment_for_base (adjustments, decl);\n   if (!adj)\n-    return false;\n+    return NULL;\n \n   repl = get_replaced_param_substitute (adj);\n-  name = make_ssa_name (repl, stmt);\n+  new_name = make_ssa_name (repl, stmt);\n \n   if (dump_file)\n     {\n       fprintf (dump_file, \"replacing an SSA name of a removed param \");\n-      print_generic_expr (dump_file, lhs, 0);\n+      print_generic_expr (dump_file, old_name, 0);\n       fprintf (dump_file, \" with \");\n-      print_generic_expr (dump_file, name, 0);\n+      print_generic_expr (dump_file, new_name, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  if (is_gimple_assign (stmt))\n-    gimple_assign_set_lhs (stmt, name);\n-  else if (is_gimple_call (stmt))\n-    gimple_call_set_lhs (stmt, name);\n-  else\n-    gimple_phi_set_result (as_a <gphi *> (stmt), name);\n-\n-  replace_uses_by (lhs, name);\n-  release_ssa_name (lhs);\n-  return true;\n+  replace_uses_by (old_name, new_name);\n+  return new_name;\n }\n \n /* If the statement STMT contains any expressions that need to replaced with a\n@@ -4745,7 +4729,16 @@ ipa_sra_modify_function_body (ipa_parm_adjustment_vec adjustments)\n       gimple_stmt_iterator gsi;\n \n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\treplace_removed_params_ssa_names (gsi_stmt (gsi), adjustments);\n+\t{\n+\t  gphi *phi = as_a <gphi *> (gsi_stmt (gsi));\n+\t  tree new_lhs, old_lhs = gimple_phi_result (phi);\n+\t  new_lhs = replace_removed_params_ssa_names (old_lhs, phi, adjustments);\n+\t  if (new_lhs)\n+\t    {\n+\t      gimple_phi_set_result (phi, new_lhs);\n+\t      release_ssa_name (old_lhs);\n+\t    }\n+\t}\n \n       gsi = gsi_start_bb (bb);\n       while (!gsi_end_p (gsi))\n@@ -4765,7 +4758,6 @@ ipa_sra_modify_function_body (ipa_parm_adjustment_vec adjustments)\n \n \t    case GIMPLE_ASSIGN:\n \t      modified |= sra_ipa_modify_assign (stmt, &gsi, adjustments);\n-\t      modified |= replace_removed_params_ssa_names (stmt, adjustments);\n \t      break;\n \n \t    case GIMPLE_CALL:\n@@ -4780,8 +4772,6 @@ ipa_sra_modify_function_body (ipa_parm_adjustment_vec adjustments)\n \t\t{\n \t\t  t = gimple_call_lhs_ptr (stmt);\n \t\t  modified |= ipa_modify_expr (t, false, adjustments);\n-\t\t  modified |= replace_removed_params_ssa_names (stmt,\n-\t\t\t\t\t\t\t\tadjustments);\n \t\t}\n \t      break;\n \n@@ -4805,6 +4795,20 @@ ipa_sra_modify_function_body (ipa_parm_adjustment_vec adjustments)\n \t      break;\n \t    }\n \n+\t  def_operand_p defp;\n+\t  ssa_op_iter iter;\n+\t  FOR_EACH_SSA_DEF_OPERAND (defp, stmt, iter, SSA_OP_DEF)\n+\t    {\n+\t      tree old_def = DEF_FROM_PTR (defp);\n+\t      if (tree new_def = replace_removed_params_ssa_names (old_def, stmt,\n+\t\t\t\t\t\t\t\t   adjustments))\n+\t\t{\n+\t\t  SET_DEF (defp, new_def);\n+\t\t  release_ssa_name (old_def);\n+\t\t  modified = true;\n+\t\t}\n+\t    }\n+\n \t  if (modified)\n \t    {\n \t      update_stmt (stmt);"}]}