{"sha": "3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E2YTg4Yzg2M2E3NTJlNzBlOWEwMTNhZTg5Yzg3YTNkN2VmZTM5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-30T19:20:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-30T19:20:08Z"}, "message": "re PR c++/52377 (C++11 non-static initializers in unions are not used)\n\n\tPR c++/52377\n\t* class.c (common_enclosing_class): New.\n\t* cp-tree.h: Declare it.\n\t* init.c (sort_mem_initializers): Don't splice out a union member\n\twith an NSDMI.\n\nFrom-SVN: r199455", "tree": {"sha": "bb39bab3f2e19d7c75a3fd741f20f1059ba81b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb39bab3f2e19d7c75a3fd741f20f1059ba81b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f9e78999a8ff2dd889c0e3eec04f2aa0422542"}], "stats": {"total": 142, "additions": 102, "deletions": 40}, "files": [{"sha": "6ccc776580f874a23c0e0913a0bd5c425b6d50cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -1,3 +1,11 @@\n+2013-05-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/52377\n+\t* class.c (common_enclosing_class): New.\n+\t* cp-tree.h: Declare it.\n+\t* init.c (sort_mem_initializers): Don't splice out a union member\n+\twith an NSDMI.\n+\n 2013-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (cp_fix_function_decl_p): Update for new symtab flags."}, {"sha": "22cdf90f735b9254d23476736c1074570a16cb22", "filename": "gcc/cp/class.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -9259,4 +9259,30 @@ publicly_uniquely_derived_p (tree parent, tree type)\n   return base && base != error_mark_node;\n }\n \n+/* CTX1 and CTX2 are declaration contexts.  Return the innermost common\n+   class between them, if any.  */\n+\n+tree\n+common_enclosing_class (tree ctx1, tree ctx2)\n+{\n+  if (!TYPE_P (ctx1) || !TYPE_P (ctx2))\n+    return NULL_TREE;\n+  gcc_assert (ctx1 == TYPE_MAIN_VARIANT (ctx1)\n+\t      && ctx2 == TYPE_MAIN_VARIANT (ctx2));\n+  if (ctx1 == ctx2)\n+    return ctx1;\n+  for (tree t = ctx1; TYPE_P (t); t = TYPE_CONTEXT (t))\n+    TYPE_MARKED_P (t) = true;\n+  tree found = NULL_TREE;\n+  for (tree t = ctx2; TYPE_P (t); t = TYPE_CONTEXT (t))\n+    if (TYPE_MARKED_P (t))\n+      {\n+\tfound = t;\n+\tbreak;\n+      }\n+  for (tree t = ctx1; TYPE_P (t); t = TYPE_CONTEXT (t))\n+    TYPE_MARKED_P (t) = false;\n+  return found;\n+}\n+\n #include \"gt-cp-class.h\""}, {"sha": "aebc440a4272f100b2d43d7f38b8d49fc20cae66", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -5112,6 +5112,7 @@ extern void deduce_noexcept_on_destructor       (tree);\n extern void insert_late_enum_def_into_classtype_sorted_fields (tree, tree);\n extern bool uniquely_derived_from_p             (tree, tree);\n extern bool publicly_uniquely_derived_p         (tree, tree);\n+extern tree common_enclosing_class\t\t(tree, tree);\n \n /* in cvt.c */\n extern tree convert_to_reference\t\t(tree, tree, int, int, tree,"}, {"sha": "4edd150d91360b3d3b22fda5d6619bf9fb92c462", "filename": "gcc/cp/init.c", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -914,13 +914,12 @@ sort_mem_initializers (tree t, tree mem_inits)\n      Here we also splice out uninitialized union members.  */\n   if (uses_unions_p)\n     {\n-      tree last_field = NULL_TREE;\n+      tree *last_p = NULL;\n       tree *p;\n       for (p = &sorted_inits; *p; )\n \t{\n \t  tree field;\n \t  tree ctx;\n-\t  int done;\n \n \t  init = *p;\n \n@@ -940,22 +939,25 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t  for (ctx = DECL_CONTEXT (field);\n \t       !same_type_p (ctx, t);\n \t       ctx = TYPE_CONTEXT (ctx))\n-\t    if (TREE_CODE (ctx) == UNION_TYPE)\n+\t    if (TREE_CODE (ctx) == UNION_TYPE\n+\t\t|| !ANON_AGGR_TYPE_P (ctx))\n \t      break;\n \t  /* If this field is not a member of a union, skip it.  */\n \t  if (TREE_CODE (ctx) != UNION_TYPE)\n \t    goto next;\n \n-\t  /* If this union member has no explicit initializer, splice\n-\t     it out.  */\n-\t  if (!TREE_VALUE (init))\n+\t  /* If this union member has no explicit initializer and no NSDMI,\n+\t     splice it out.  */\n+\t  if (TREE_VALUE (init) || DECL_INITIAL (field))\n+\t    /* OK.  */;\n+\t  else\n \t    goto splice;\n \n \t  /* It's only an error if we have two initializers for the same\n \t     union type.  */\n-\t  if (!last_field)\n+\t  if (!last_p)\n \t    {\n-\t      last_field = field;\n+\t      last_p = p;\n \t      goto next;\n \t    }\n \n@@ -967,41 +969,23 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t       union { struct { int i; int j; }; };\n \n \t     initializing both `i' and `j' makes sense.  */\n-\t  ctx = DECL_CONTEXT (field);\n-\t  done = 0;\n-\t  do\n-\t    {\n-\t      tree last_ctx;\n-\n-\t      last_ctx = DECL_CONTEXT (last_field);\n-\t      while (1)\n-\t\t{\n-\t\t  if (same_type_p (last_ctx, ctx))\n-\t\t    {\n-\t\t      if (TREE_CODE (ctx) == UNION_TYPE)\n-\t\t\terror_at (DECL_SOURCE_LOCATION (current_function_decl),\n-\t\t\t\t  \"initializations for multiple members of %qT\",\n-\t\t\t\t  last_ctx);\n-\t\t      done = 1;\n-\t\t      break;\n-\t\t    }\n+\t  ctx = common_enclosing_class (DECL_CONTEXT (field),\n+\t\t\t\t\tDECL_CONTEXT (TREE_PURPOSE (*last_p)));\n \n-\t\t  if (same_type_p (last_ctx, t))\n-\t\t    break;\n-\n-\t\t  last_ctx = TYPE_CONTEXT (last_ctx);\n-\t\t}\n-\n-\t      /* If we've reached the outermost class, then we're\n-\t\t done.  */\n-\t      if (same_type_p (ctx, t))\n-\t\tbreak;\n-\n-\t      ctx = TYPE_CONTEXT (ctx);\n+\t  if (ctx && TREE_CODE (ctx) == UNION_TYPE)\n+\t    {\n+\t      /* A mem-initializer hides an NSDMI.  */\n+\t      if (TREE_VALUE (init) && !TREE_VALUE (*last_p))\n+\t\t*last_p = TREE_CHAIN (*last_p);\n+\t      else if (TREE_VALUE (*last_p) && !TREE_VALUE (init))\n+\t\tgoto splice;\n+\t      else\n+\t\terror_at (DECL_SOURCE_LOCATION (current_function_decl),\n+\t\t\t  \"initializations for multiple members of %qT\",\n+\t\t\t  ctx);\n \t    }\n-\t  while (!done);\n \n-\t  last_field = field;\n+\t  last_p = p;\n \n \tnext:\n \t  p = &TREE_CHAIN (*p);"}, {"sha": "11bdd88eea2b3d8e9b21e0dbf1387b8cb73f3915", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-union1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union1.C?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/52377\n+// { dg-do run { target c++11 } }\n+\n+union Test\n+{\n+  int a{4};\n+};\n+\n+union B\n+{\n+  int i = 42;\n+  double d;\n+  B() = default;\n+  B(double d): d(d) { }\n+};\n+\n+int main()\n+{\n+  Test t;\n+  B b;\n+  B b2(4.2);\n+\n+  if (t.a != 4 || b.i != 42 || b2.d != 4.2)\n+    __builtin_abort();\n+}"}, {"sha": "b45fe8392a71d9e4a0933a171777403460101925", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-union2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a6a88c863a752e70e9a013ae89c87a3d7efe39b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union2.C?ref=3a6a88c863a752e70e9a013ae89c87a3d7efe39b", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/52377\n+// { dg-do run { target c++11 } }\n+\n+union A\t\t\t\t// { dg-error \"multiple\" }\n+{\n+  int i = 4;\n+  int j = 2;\n+};\n+\n+A a;\n+\n+union B\n+{\n+  int i,j;\n+  B(): i(1), j(2) {}\t\t// { dg-error \"multiple\" }\n+};\n+\n+B b;"}]}