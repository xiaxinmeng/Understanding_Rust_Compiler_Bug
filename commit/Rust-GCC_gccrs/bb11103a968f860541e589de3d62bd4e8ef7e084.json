{"sha": "bb11103a968f860541e589de3d62bd4e8ef7e084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxMTEwM2E5NjhmODYwNTQxZTU4OWRlM2Q2MmJkNGU4ZWY3ZTA4NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-11-03T11:31:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-11-03T11:31:46Z"}, "message": "re PR rtl-optimization/23585 (mem_fun* code fine with -O1, bus error with -O2)\n\n\tPR rtl-optimization/23585\n\t* rtlanal.c (rtx_addr_can_trap_p_1) <PLUS>: Return 0 for an address\n\tthat can't trap plus a constant integer, if the mode has zero size.\n\nFrom-SVN: r106427", "tree": {"sha": "87ae1ad1b8a8da523947e3595cfa9bb3f01d51df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ae1ad1b8a8da523947e3595cfa9bb3f01d51df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb11103a968f860541e589de3d62bd4e8ef7e084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb11103a968f860541e589de3d62bd4e8ef7e084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb11103a968f860541e589de3d62bd4e8ef7e084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb11103a968f860541e589de3d62bd4e8ef7e084/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac746a73f02d1a83d0fb5df74326831566693c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac746a73f02d1a83d0fb5df74326831566693c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac746a73f02d1a83d0fb5df74326831566693c8d"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "2e537361359f8a8b782947fb145ab8ff3c838238", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb11103a968f860541e589de3d62bd4e8ef7e084", "patch": "@@ -1,3 +1,9 @@\n+2005-11-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/23585\n+\t* rtlanal.c (rtx_addr_can_trap_p_1) <PLUS>: Return 0 for an address\n+\tthat can't trap plus a constant integer, if the mode has zero size.\n+\n 2005-11-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/24620"}, {"sha": "69488512f49320f25720208555a6ea6c1598f7ae", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=bb11103a968f860541e589de3d62bd4e8ef7e084", "patch": "@@ -267,7 +267,9 @@ rtx_addr_can_trap_p_1 (rtx x, enum machine_mode mode, bool unaligned_mems)\n \t{\n \t  HOST_WIDE_INT offset;\n \n-\t  if (!STRICT_ALIGNMENT || !unaligned_mems)\n+\t  if (!STRICT_ALIGNMENT\n+\t      || !unaligned_mems\n+\t      || GET_MODE_SIZE (mode) == 0)\n \t    return 0;\n \n \t  offset = INTVAL (XEXP (x, 1));"}, {"sha": "3be28a7f91ed39c32c52fa441af83d5cd08d59f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb11103a968f860541e589de3d62bd4e8ef7e084", "patch": "@@ -1,3 +1,7 @@\n+2005-11-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/delay-slot-1.c: New test.\n+\n 2005-11-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/24620"}, {"sha": "2603755169612748b95f59c6c0361cd3a10a3897", "filename": "gcc/testsuite/gcc.dg/delay-slot-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb11103a968f860541e589de3d62bd4e8ef7e084/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-1.c?ref=bb11103a968f860541e589de3d62bd4e8ef7e084", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mabi=64\" { target mips-*-linux } } */\n+\n+struct offset_v1 {\n+    int k_uniqueness;\n+};\n+\n+struct offset_v2 {\n+ long v;\n+} __attribute__ ((__packed__));\n+\n+struct reiserfs_key {\n+    int k_objectid;\n+    union {\n+ struct offset_v1 k_offset_v1;\n+ struct offset_v2 k_offset_v2;\n+    } u;\n+};\n+\n+struct item_head\n+{\n+ struct reiserfs_key ih_key;\n+ int ih_version;\n+};\n+\n+static void set_offset_v2_k_type(struct offset_v2 *v2)\n+{\n+    v2->v &= 1;\n+}\n+\n+static void set_le_key_k_type (int version, struct reiserfs_key * key)\n+{\n+    version ? (key->u.k_offset_v1.k_uniqueness = 1)\n+\t    : set_offset_v2_k_type(&(key->u.k_offset_v2));\n+}\n+\n+static void set_le_ih_k_type (struct item_head * ih)\n+{\n+    set_le_key_k_type((__builtin_constant_p((ih)->ih_version) ? (ih)->ih_version : (ih)->ih_version), &(ih->ih_key));\n+}\n+\n+void boo(struct item_head *ih, const char *body);\n+\n+void direct2indirect(void)\n+{\n+    struct item_head *p_le_ih;\n+    struct item_head ind_ih;\n+    unsigned int unfm_ptr;\n+\n+    if (__builtin_expect(32, 0)) __asm__ (\"break\");\n+\n+    set_le_ih_k_type (&ind_ih);\n+\n+    if (__builtin_constant_p(p_le_ih) ? 1 : 2) {\n+        (__builtin_constant_p(__builtin_constant_p(1) == 1));\n+      boo(&ind_ih, (char *)&unfm_ptr);\n+    }\n+}"}]}