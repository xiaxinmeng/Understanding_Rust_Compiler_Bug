{"sha": "3379ae7f3b65e899f9b7812e27a43625c6b497f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3OWFlN2YzYjY1ZTg5OWY5Yjc4MTJlMjdhNDM2MjVjNmI0OTdmNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-29T14:11:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-29T14:11:58Z"}, "message": "20090113-1.c: New testcase.\n\n2009-03-29  Richard Guenther  <rguenther@suse.de>\n\n\t* gcc.c-torture/execute/20090113-1.c: New testcase.\n\t* gcc.c-torture/execute/20090113-2.c: Likewise.\n\t* gcc.c-torture/execute/20090113-3.c: Likewise.\n\t* gcc.c-torture/execute/20090207-1.c: Likewise.\n\t* gcc.c-torture/compile/20090114-1.c: Likewise.\n\t* gcc.c-torture/compile/20090328-1.c: Likewise.\n\t* gcc.dg/noncompile/920507-1.c: Fix out-of-bounds array access.\n\nFrom-SVN: r145234", "tree": {"sha": "fc54e8ca0216db0859777fe6558b4f473ca6ae59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc54e8ca0216db0859777fe6558b4f473ca6ae59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3379ae7f3b65e899f9b7812e27a43625c6b497f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379ae7f3b65e899f9b7812e27a43625c6b497f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3379ae7f3b65e899f9b7812e27a43625c6b497f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379ae7f3b65e899f9b7812e27a43625c6b497f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8da523f8a442f95c34dd3687771589579a08918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8da523f8a442f95c34dd3687771589579a08918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8da523f8a442f95c34dd3687771589579a08918"}], "stats": {"total": 448, "additions": 447, "deletions": 1}, "files": [{"sha": "2f60726156537d267efddbcf8fcd13e28298e50e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -1,3 +1,13 @@\n+2009-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.c-torture/execute/20090113-1.c: New testcase.\n+\t* gcc.c-torture/execute/20090113-2.c: Likewise.\n+\t* gcc.c-torture/execute/20090113-3.c: Likewise.\n+\t* gcc.c-torture/execute/20090207-1.c: Likewise.\n+\t* gcc.c-torture/compile/20090114-1.c: Likewise.\n+\t* gcc.c-torture/compile/20090328-1.c: Likewise.\n+\t* gcc.dg/noncompile/920507-1.c: Fix out-of-bounds array access.\n+\n 2009-03-29  David Ayers  <ayers@fsfe.org>\n \n \tPR objc/27377"}, {"sha": "692c96f76ba11f4c66deaccd8885069655be118a", "filename": "gcc/testsuite/gcc.c-torture/compile/20090114-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090114-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090114-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090114-1.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,44 @@\n+typedef struct {\n+    int MbInterlace;\n+    int channel_type;\n+} InputParameters;\n+typedef struct {\n+    int type;\n+    int NumberofCodedPFrame;\n+    int NumberofGOP;\n+    int NumberofPPicture;\n+    int FieldControl;\n+    int Frame_Total_Number_MB;\n+    int NumberofCodedMacroBlocks;\n+    int BasicUnit;\n+} ImageParameters;\n+extern InputParameters *input;\n+extern ImageParameters *img;\n+long T;\n+void rc_init_pict(int fieldpic)\n+{\n+  if(input->MbInterlace)\n+    T = img->Frame_Total_Number_MB;\n+  img->NumberofCodedMacroBlocks=0;\n+  if(input->channel_type==1\n+     && img->NumberofCodedPFrame==58)\n+    T = 4;\n+  if(fieldpic)\n+    {\n+      switch (img->type)\n+\t{\n+\t  case 0:\n+\t   if(img->NumberofCodedPFrame>0\n+\t      && img->FieldControl==1)\n+\t     T = 3;\n+\t   if(img->NumberofPPicture==1)\n+\t     T = 2;\n+\t}\n+      if(img->type==0\n+\t && img->NumberofCodedPFrame>0)\n+\tT = 0;\n+    }\n+  if(img->type==0\n+     && img->FieldControl==1)\n+    T = 1;\n+}"}, {"sha": "10328ad41c364a3f0240819866ee342fa06f0ccb", "filename": "gcc/testsuite/gcc.c-torture/compile/20090328-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090328-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090328-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20090328-1.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,17 @@\n+union loc {  unsigned reg; signed offset; };\n+void __frame_state_for (volatile char *state_in, int x)\n+{\n+  /* We should move all the loads out of this loop. Right now, we only\n+     move one.  It takes two insertions because we insert a cast.  */\n+    union loc fs;\n+    int reg;\n+    for (;;)     {\n+        switch (x)  {\n+\t    case 0:\n+\t\t*state_in = fs.reg;\n+\t    case 1:\n+\t\t*state_in = fs.offset;\n+\t}\n+    }\n+}\n+"}, {"sha": "9c5f01d71fa670bd43e9abb92422e99410bb20c3", "filename": "gcc/testsuite/gcc.c-torture/execute/20090113-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-1.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,61 @@\n+typedef struct descriptor_dimension\n+{\n+  int stride;\n+  int lbound;\n+  int ubound;\n+} descriptor_dimension;\n+typedef struct {\n+    int *data;\n+    int dtype;\n+    descriptor_dimension dim[7];\n+} gfc_array_i4;\n+\n+void\n+msum_i4 (gfc_array_i4 * const retarray,\n+\t gfc_array_i4 * const array,\n+\t const int * const pdim)\n+{\n+  int count[7];\n+  int extent[7];\n+  int * dest;\n+  const int * base;\n+  int dim;\n+  int n;\n+  int len;\n+\n+  dim = (*pdim) - 1;\n+  len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      extent[n] = array->dim[n].ubound + 1 - array->dim[n].lbound;\n+      count[n] = 0;\n+    }\n+\n+  dest = retarray->data;\n+  base = array->data;\n+\n+  do\n+    {\n+      int result = 0;\n+\n+      for (n = 0; n < len; n++, base++)\n+\tresult += *base;\n+      *dest = result;\n+\n+      count[0]++;\n+      dest += 1;\n+    }\n+  while (count[0] != extent[0]);\n+}\n+\n+int main()\n+{\n+  int rdata[3];\n+  int adata[9];\n+  gfc_array_i4 retarray = { rdata, 265, { { 1, 1, 3 } } };\n+  gfc_array_i4 array = { adata, 266, { { 1, 1, 3 }, { 3, 1, 3 } } };\n+  int dim = 2;\n+  msum_i4 (&retarray, &array, &dim);\n+  return 0;\n+}"}, {"sha": "9871a66ffbc3cd17f15bb5d53c955abc50a47231", "filename": "gcc/testsuite/gcc.c-torture/execute/20090113-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-2.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,160 @@\n+struct obstack {};\n+struct bitmap_head_def;\n+typedef struct bitmap_head_def *bitmap;\n+typedef const struct bitmap_head_def *const_bitmap;\n+typedef unsigned long BITMAP_WORD;\n+typedef struct bitmap_obstack\n+{\n+  struct bitmap_element_def *elements;\n+  struct bitmap_head_def *heads;\n+  struct obstack obstack;\n+} bitmap_obstack;\n+typedef struct bitmap_element_def\n+{\n+  struct bitmap_element_def *next;\n+  struct bitmap_element_def *prev;\n+  unsigned int indx;\n+  BITMAP_WORD bits[((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u))];\n+} bitmap_element;\n+\n+struct bitmap_descriptor;\n+\n+typedef struct bitmap_head_def {\n+    bitmap_element *first;\n+    bitmap_element *current;\n+    unsigned int indx;\n+    bitmap_obstack *obstack;\n+} bitmap_head;\n+\n+bitmap_element bitmap_zero_bits;\n+\n+typedef struct\n+{\n+  bitmap_element *elt1;\n+  bitmap_element *elt2;\n+  unsigned word_no;\n+  BITMAP_WORD bits;\n+} bitmap_iterator;\n+\n+static void __attribute__((noinline))\n+bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,\n+\t\t   unsigned start_bit, unsigned *bit_no)\n+{\n+  bi->elt1 = map->first;\n+  bi->elt2 = ((void *)0);\n+\n+  while (1)\n+    {\n+      if (!bi->elt1)\n+\t{\n+\t  bi->elt1 = &bitmap_zero_bits;\n+\t  break;\n+\t}\n+\n+      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))\n+\tbreak;\n+      bi->elt1 = bi->elt1->next;\n+    }\n+\n+  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))\n+    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));\n+\n+  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));\n+  bi->bits = bi->elt1->bits[bi->word_no];\n+  bi->bits >>= start_bit % (8 * 8 * 1u);\n+\n+  start_bit += !bi->bits;\n+\n+  *bit_no = start_bit;\n+}\n+\n+static void __attribute__((noinline))\n+bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)\n+{\n+  bi->bits >>= 1;\n+  *bit_no += 1;\n+}\n+\n+static unsigned char __attribute__((noinline))\n+bmp_iter_set_tail (bitmap_iterator *bi, unsigned *bit_no)\n+{\n+  while (!(bi->bits & 1))\n+    {\n+      bi->bits >>= 1;\n+      *bit_no += 1;\n+    }\n+  return 1;\n+}\n+\n+static __inline__ unsigned char\n+bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)\n+{\n+  unsigned bno = *bit_no;\n+  BITMAP_WORD bits = bi->bits;\n+  bitmap_element *elt1;\n+\n+  if (bits)\n+    {\n+      while (!(bits & 1))\n+\t{\n+\t  bits >>= 1;\n+\t  bno += 1;\n+\t}\n+      *bit_no = bno;\n+      return 1;\n+    }\n+\n+  *bit_no = ((bno + 64 - 1) / 64 * 64);\n+  bi->word_no++;\n+\n+  elt1 = bi->elt1;\n+  while (1)\n+    {\n+      while (bi->word_no != 2)\n+\t{\n+\t  bi->bits = elt1->bits[bi->word_no];\n+\t  if (bi->bits)\n+\t    {\n+\t      bi->elt1 = elt1;\n+\t      return bmp_iter_set_tail (bi, bit_no);\n+\t    }\n+\t  *bit_no += 64;\n+\t  bi->word_no++;\n+\t}\n+\n+      elt1 = elt1->next;\n+      if (!elt1)\n+\t{\n+\t  bi->elt1 = elt1;\n+\t  return 0;\n+\t}\n+      *bit_no = elt1->indx * (2 * 64);\n+      bi->word_no = 0;\n+    }\n+}\n+\n+extern void abort (void);\n+\n+static void __attribute__((noinline)) catchme(int i)\n+{\n+  if (i != 0 && i != 64)\n+    abort ();\n+}\n+static void __attribute__((noinline)) foobar (bitmap_head *chain)\n+{\n+  bitmap_iterator rsi;\n+  unsigned int regno;\n+  for (bmp_iter_set_init (&(rsi), (chain), (0), &(regno));\n+       bmp_iter_set (&(rsi), &(regno));\n+       bmp_iter_next (&(rsi), &(regno)))\n+    catchme(regno);\n+}\n+\n+int main()\n+{\n+  bitmap_element elem = { (void *)0, (void *)0, 0, { 1, 1 } };\n+  bitmap_head live_throughout = { &elem, &elem, 0, (void *)0 };\n+  foobar (&live_throughout);\n+  return 0;\n+}\n+"}, {"sha": "f67bac241351b522816d8a30f5ee89cdfb6aad28", "filename": "gcc/testsuite/gcc.c-torture/execute/20090113-3.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090113-3.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,138 @@\n+struct obstack {};\n+struct bitmap_head_def;\n+typedef struct bitmap_head_def *bitmap;\n+typedef const struct bitmap_head_def *const_bitmap;\n+typedef unsigned long BITMAP_WORD;\n+\n+typedef struct bitmap_obstack\n+{\n+  struct bitmap_element_def *elements;\n+  struct bitmap_head_def *heads;\n+  struct obstack obstack;\n+} bitmap_obstack;\n+typedef struct bitmap_element_def\n+{\n+  struct bitmap_element_def *next;\n+  struct bitmap_element_def *prev;\n+  unsigned int indx;\n+  BITMAP_WORD bits[(2)];\n+} bitmap_element;\n+\n+struct bitmap_descriptor;\n+\n+typedef struct bitmap_head_def {\n+    bitmap_element *first;\n+    bitmap_element *current;\n+    unsigned int indx;\n+    bitmap_obstack *obstack;\n+} bitmap_head;\n+\n+bitmap_element bitmap_zero_bits;\n+\n+typedef struct\n+{\n+  bitmap_element *elt1;\n+  bitmap_element *elt2;\n+  unsigned word_no;\n+  BITMAP_WORD bits;\n+} bitmap_iterator;\n+\n+static __attribute__((noinline)) void\n+bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,\n+\t\t   unsigned start_bit, unsigned *bit_no)\n+{\n+  bi->elt1 = map->first;\n+  bi->elt2 = ((void *)0);\n+\n+  while (1)\n+    {\n+      if (!bi->elt1)\n+\t{\n+\t  bi->elt1 = &bitmap_zero_bits;\n+\t  break;\n+\t}\n+\n+      if (bi->elt1->indx >= start_bit / (128u))\n+\tbreak;\n+      bi->elt1 = bi->elt1->next;\n+    }\n+\n+  if (bi->elt1->indx != start_bit / (128u))\n+    start_bit = bi->elt1->indx * (128u);\n+\n+  bi->word_no = start_bit / 64u % (2);\n+  bi->bits = bi->elt1->bits[bi->word_no];\n+  bi->bits >>= start_bit % 64u;\n+\n+  start_bit += !bi->bits;\n+\n+  *bit_no = start_bit;\n+}\n+\n+static __inline__ __attribute__((always_inline)) void\n+bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)\n+{\n+  bi->bits >>= 1;\n+  *bit_no += 1;\n+}\n+\n+static __inline__ __attribute__((always_inline)) unsigned char\n+bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)\n+{\n+  if (bi->bits)\n+    {\n+      while (!(bi->bits & 1))\n+\t{\n+\t  bi->bits >>= 1;\n+\t  *bit_no += 1;\n+\t}\n+      return 1;\n+    }\n+\n+  *bit_no = ((*bit_no + 64u - 1) / 64u * 64u);\n+  bi->word_no++;\n+\n+  while (1)\n+    {\n+      while (bi->word_no != (2))\n+\t{\n+\t  bi->bits = bi->elt1->bits[bi->word_no];\n+\t  if (bi->bits)\n+\t    {\n+\t      while (!(bi->bits & 1))\n+\t\t{\n+\t\t  bi->bits >>= 1;\n+\t\t  *bit_no += 1;\n+\t\t}\n+\t      return 1;\n+\t    }\n+\t  *bit_no += 64u;\n+\t  bi->word_no++;\n+\t}\n+\n+      bi->elt1 = bi->elt1->next;\n+      if (!bi->elt1)\n+\treturn 0;\n+      *bit_no = bi->elt1->indx * (128u);\n+      bi->word_no = 0;\n+    }\n+}\n+\n+static void __attribute__((noinline))\n+foobar (bitmap_head *live_throughout)\n+{\n+  bitmap_iterator rsi;\n+  unsigned int regno;\n+  for (bmp_iter_set_init (&(rsi), (live_throughout), (0), &(regno));\n+       bmp_iter_set (&(rsi), &(regno));\n+       bmp_iter_next (&(rsi), &(regno)))\n+    ;\n+}\n+int main()\n+{\n+  bitmap_element elem = { (void *)0, (void *)0, 0, { 1, 1 } };\n+  bitmap_head live_throughout = { &elem, &elem, 0, (void *)0 };\n+  foobar (&live_throughout);\n+  return 0;\n+}\n+"}, {"sha": "51a686028ea9e803269b0c6b4d6fca794a297ebc", "filename": "gcc/testsuite/gcc.c-torture/execute/20090207-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090207-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090207-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20090207-1.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -0,0 +1,16 @@\n+int foo(int i)\n+{\n+  int a[32];\n+  a[1] = 3;\n+  a[0] = 1;\n+  a[i] = 2;\n+  return a[0];\n+}\n+extern void abort (void);\n+int main()\n+{\n+  if (foo (0) != 2\n+      || foo (1) != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7024a5b03a0abddb294c9f88b9e4d971dc15492f", "filename": "gcc/testsuite/gcc.dg/noncompile/920507-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920507-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379ae7f3b65e899f9b7812e27a43625c6b497f7/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920507-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920507-1.c?ref=3379ae7f3b65e899f9b7812e27a43625c6b497f7", "patch": "@@ -3,5 +3,5 @@ x(void)\n {\n  register int *a asm(\"unknown_register\");  /* { dg-error \"invalid register\" } */\n  int *v[1] = {a};\n- return v[1];\n+ return v[0];\n }"}]}