{"sha": "854aad3b58e747cad3e46b522c9ef765bdfadca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0YWFkM2I1OGU3NDdjYWQzZTQ2YjUyMmM5ZWY3NjViZGZhZGNhNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-25T13:27:50Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-26T11:59:39Z"}, "message": "Add usize and isize types\n\nArrays can only be indexed by usize and this enforces that rule. These\ntypes are sized based on the pointer size of the host arch.\n\nFixes #87", "tree": {"sha": "e7c0943131d46cb1b9f2faaa4edfd6a5ede3c172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c0943131d46cb1b9f2faaa4edfd6a5ede3c172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854aad3b58e747cad3e46b522c9ef765bdfadca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854aad3b58e747cad3e46b522c9ef765bdfadca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854aad3b58e747cad3e46b522c9ef765bdfadca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854aad3b58e747cad3e46b522c9ef765bdfadca4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0817c29a423aca1c4c3f9ba812f67df35f36fc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0817c29a423aca1c4c3f9ba812f67df35f36fc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0817c29a423aca1c4c3f9ba812f67df35f36fc65"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "034568fc62613a7523f776690ea44a97e21c5a8a", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -374,6 +374,22 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::USizeType &type) override\n+  {\n+    ::Btype *compiled_type = nullptr;\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n+    rust_assert (ok);\n+    translated = compiled_type;\n+  }\n+\n+  void visit (TyTy::ISizeType &type) override\n+  {\n+    ::Btype *compiled_type = nullptr;\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n+    rust_assert (ok);\n+    translated = compiled_type;\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "2c54b17c4b95f844cea51f892151e7e6efeeeda4", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -190,6 +190,20 @@ class TyTyCompile : public TyTy::TyVisitor\n     gcc_unreachable ();\n   }\n \n+  void visit (TyTy::USizeType &type) override\n+  {\n+    translated = backend->named_type (\n+      \"usize\", backend->integer_type (true, backend->get_pointer_size ()),\n+      Linemap::predeclared_location ());\n+  }\n+\n+  void visit (TyTy::ISizeType &type) override\n+  {\n+    translated = backend->named_type (\n+      \"isize\", backend->integer_type (false, backend->get_pointer_size ()),\n+      Linemap::predeclared_location ());\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "c6d71488fde22bc5a8d44fb3f708eb4f59289ce0", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -146,6 +146,8 @@ Resolver::generate_builtins ()\n     = new TyTy::FloatType (mappings->get_next_hir_id (), TyTy::FloatType::F32);\n   auto f64\n     = new TyTy::FloatType (mappings->get_next_hir_id (), TyTy::FloatType::F64);\n+  auto usize = new TyTy::USizeType (mappings->get_next_hir_id ());\n+  auto isize = new TyTy::ISizeType (mappings->get_next_hir_id ());\n \n   MKBUILTIN_TYPE (\"u8\", builtins, u8);\n   MKBUILTIN_TYPE (\"u16\", builtins, u16);\n@@ -160,6 +162,8 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"bool\", builtins, rbool);\n   MKBUILTIN_TYPE (\"f32\", builtins, f32);\n   MKBUILTIN_TYPE (\"f64\", builtins, f64);\n+  MKBUILTIN_TYPE (\"usize\", builtins, usize);\n+  MKBUILTIN_TYPE (\"isize\", builtins, isize);\n \n   // unit type ()\n   TyTy::UnitType *unit_tyty = new TyTy::UnitType (mappings->get_next_hir_id ());"}, {"sha": "7b0ccf9047e577f7e9a8141dd71cad7be80eec58", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -98,6 +98,9 @@ class Backend\n   // Get the unnamed boolean type.\n   virtual Btype *bool_type () = 0;\n \n+  // Get the Host pointer size in bits\n+  virtual int get_pointer_size () = 0;\n+\n   // Get an unnamed integer type with the given signedness and number\n   // of bits.\n   virtual Btype *integer_type (bool is_unsigned, int bits) = 0;"}, {"sha": "0729b1ebcbc6cacc7046430e919c97ce471b6260", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -165,6 +165,8 @@ class Gcc_backend : public Backend\n \n   Btype *bool_type () { return this->make_type (boolean_type_node); }\n \n+  int get_pointer_size ();\n+\n   Btype *integer_type (bool, int);\n \n   Btype *float_type (int);\n@@ -758,6 +760,12 @@ Gcc_backend::Gcc_backend ()\n \n // Get an unnamed integer type.\n \n+int\n+Gcc_backend::get_pointer_size ()\n+{\n+  return POINTER_SIZE;\n+}\n+\n Btype *\n Gcc_backend::integer_type (bool is_unsigned, int bits)\n {"}, {"sha": "17f1611f1a83e6f90f70714dd2288b2991584637", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -631,7 +631,7 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::ArrayIndexExpr &expr)\n   {\n     TyTy::TyBase *size_ty;\n-    if (!context->lookup_builtin (\"i32\", &size_ty))\n+    if (!context->lookup_builtin (\"usize\", &size_ty))\n       {\n \trust_error_at (\n \t  expr.get_locus (),"}, {"sha": "2b3cfb651bef67c4c92cd3b2e3091afb8a8eef9e", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -49,6 +49,8 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (IntType &type) override { gcc_unreachable (); }\n   void visit (UintType &type) override { gcc_unreachable (); }\n   void visit (FloatType &type) override { gcc_unreachable (); }\n+  void visit (USizeType &type) override { gcc_unreachable (); }\n+  void visit (ISizeType &type) override { gcc_unreachable (); }\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n \n   // tuple-structs"}, {"sha": "e17cec70d6233375f72e83baabbf782afec7718f", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -134,6 +134,20 @@ class BaseRules : public TyVisitor\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n   }\n \n+  virtual void visit (USizeType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+  }\n+\n+  virtual void visit (ISizeType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (FloatType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -230,6 +244,36 @@ class InferRules : public BaseRules\n     BaseRules::visit (type);\n   }\n \n+  void visit (USizeType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n+\t|| (base->get_infer_kind ()\n+\t    == TyTy::InferType::InferTypeKind::INTEGRAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n+  void visit (ISizeType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n+\t|| (base->get_infer_kind ()\n+\t    == TyTy::InferType::InferTypeKind::INTEGRAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n   void visit (FloatType &type) override\n   {\n     bool is_valid\n@@ -591,6 +635,54 @@ class TupleRules : public BaseRules\n   TupleType *base;\n };\n \n+class USizeRules : public BaseRules\n+{\n+public:\n+  USizeRules (USizeType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (InferType &type) override\n+  {\n+    // cant assign a float inference variable\n+    if (type.get_infer_kind () == InferType::InferTypeKind::FLOAT)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n+  void visit (USizeType &type) override { resolved = type.clone (); }\n+\n+private:\n+  USizeType *base;\n+};\n+\n+class ISizeRules : public BaseRules\n+{\n+public:\n+  ISizeRules (ISizeType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (InferType &type) override\n+  {\n+    // cant assign a float inference variable\n+    if (type.get_infer_kind () == InferType::InferTypeKind::FLOAT)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n+  void visit (ISizeType &type) override { resolved = type.clone (); }\n+\n+private:\n+  ISizeType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "6ae0e80ad0dfcd8e4345b20e7a74db360979d15f", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -38,6 +38,8 @@ class TyVisitor\n   virtual void visit (IntType &type) = 0;\n   virtual void visit (UintType &type) = 0;\n   virtual void visit (FloatType &type) = 0;\n+  virtual void visit (USizeType &type) = 0;\n+  virtual void visit (ISizeType &type) = 0;\n   virtual void visit (ErrorType &type) = 0;\n };\n "}, {"sha": "249e876ca06969114fb6980a519f34433501840c", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -431,6 +431,56 @@ FloatType::clone ()\n \t\t\tget_combined_refs ());\n }\n \n+void\n+USizeType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+USizeType::as_string () const\n+{\n+  return \"usize\";\n+}\n+\n+TyBase *\n+USizeType::combine (TyBase *other)\n+{\n+  USizeRules r (this);\n+  return r.combine (other);\n+}\n+\n+TyBase *\n+USizeType::clone ()\n+{\n+  return new USizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n+void\n+ISizeType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ISizeType::as_string () const\n+{\n+  return \"isize\";\n+}\n+\n+TyBase *\n+ISizeType::combine (TyBase *other)\n+{\n+  ISizeRules r (this);\n+  return r.combine (other);\n+}\n+\n+TyBase *\n+ISizeType::clone ()\n+{\n+  return new ISizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n void\n TypeCheckCallExpr::visit (ADTType &type)\n {"}, {"sha": "860ef966786d69b15b3e4b0e9136f963a027163b", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -43,6 +43,8 @@ enum TypeKind\n   FLOAT,\n   UNIT,\n   FIELD,\n+  USIZE,\n+  ISIZE,\n   // there are more to add...\n   ERROR\n };\n@@ -510,6 +512,46 @@ class FloatType : public TyBase\n   FloatKind float_kind;\n };\n \n+class USizeType : public TyBase\n+{\n+public:\n+  USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ref, TypeKind::USIZE)\n+  {}\n+\n+  USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ty_ref, TypeKind::USIZE)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n+};\n+\n+class ISizeType : public TyBase\n+{\n+public:\n+  ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ref, TypeKind::ISIZE)\n+  {}\n+\n+  ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ty_ref, TypeKind::ISIZE)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "0df0a851a0d34cc2c61883e0aba927a1f0a082e0", "filename": "gcc/testsuite/rust.test/compilable/usize1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fusize1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fusize1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fusize1.rs?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a = [1, 2, 3];\n+    let b: usize = 1;\n+    let c = a[b];\n+}"}, {"sha": "92393e7dde9dc1b6de9dddfe3df4e6c9b4d3e9f6", "filename": "gcc/testsuite/rust.test/fail_compilation/usize1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fusize1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854aad3b58e747cad3e46b522c9ef765bdfadca4/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fusize1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fusize1.rs?ref=854aad3b58e747cad3e46b522c9ef765bdfadca4", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a = [1, 2, 3];\n+    let b: u32 = 1;\n+    let c = a[b];\n+}"}]}