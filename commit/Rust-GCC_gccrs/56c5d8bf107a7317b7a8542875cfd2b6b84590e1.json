{"sha": "56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjNWQ4YmYxMDdhNzMxN2I3YTg1NDI4NzVjZmQyYjZiODQ1OTBlMQ==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@s-direktnet.de", "date": "1998-03-12T00:29:17Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:29:17Z"}, "message": "d\nIn gcc/:\n\t* bitmap.c (bitmap_element_allocate): Remove unused parameter;\n\tchange callers accordingly.\n\t* cplus-dem.c (arm_special): Remove unused parameter work in prototype\n\tand definition; change all callers accordingly.\n\t* except.c (init_eh): Avoid assignment of unused return value of\n\tbuild_pointer_type; cast it to void, instead, and remove unused\n\tvariable type.\n\t* gcc.c (lang_specific_driver): Define prototype only #ifdef\n\tLANG_SPECIFIC_DRIVER.\n\t(temp_names): Define only #ifdef MKTEMP_EACH_FILE.\n\t* genoutput.c (output_epilogue): Initialize next_name to 0.\n\t* real.c (efrexp): #if 0 prototype and function definition.\n\t(eremain): Likewise.\n\t(uditoe): Likewise.\n\t(ditoe): Likewise.\n\t(etoudi): Likewise.\n\t(etodi): Likewise.\n\t(esqrt): Likewise.\n\t* reload.c (push_secondary_reload): Define prototype only\n\t#ifdef HAVE_SECONDARY_RELOADS.\n\t* varasm.c (assemble_static_space): Define rounded only\n\t#ifndef ASM_OUTPUT_ALIGNED_LOCAL.\nIn gcc/cp/:\n\t* call.c (default_parm_conversions): Remove prototype definition.\n\t(build_method_call): Remove unused variable result.\n\t* cvt.c (ocp_convert): Remove unused variable conversion.\n\t* decl2.c (ambiguous_decl): Add explicit parameter definition for name.\n\t* except.c (do_unwind): #if 0 definition of unused variables fcall\n\tand next_pc.\n\t* expr.c (extract_scalar_init): #if 0 prototype and function definition.\n\t* init.c (expand_aggr_init_1): Remove unused variable init_type.\n\t(build_new_1): Remove unused variable t.\n\t* pt.c (instantiate_class_template): Remove unused variable newtag;\n\tcast called function return value to void.\n\t(do_decl_instantiation): Remove unused variables name and fn.\n\t* tree.c (get_type_decl): Add default return to shut up compiler from\n\tcomplaining control reaches end of non-void function.\n\t* typeck.c (build_x_conditional_expr): Remove unused variable rval.\n\nFrom-SVN: r18498", "tree": {"sha": "4a526b51f2224b130a78ecb785c39f1b70ba289b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a526b51f2224b130a78ecb785c39f1b70ba289b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/comments", "author": null, "committer": null, "parents": [{"sha": "4e1e206433953cd5a879b1496145a09867f200b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1e206433953cd5a879b1496145a09867f200b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1e206433953cd5a879b1496145a09867f200b7"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "9e2efee97b13d41266a129e8d13905b17a12d7cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -1,3 +1,35 @@\n+Thu Mar 12 09:25:29 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* bitmap.c (bitmap_element_allocate): Remove unused parameter;\n+\tchange callers accordingly.\n+\n+\t* cplus-dem.c (arm_special): Remove unused parameter work in prototype\n+\tand definition; change all callers accordingly.\n+\n+\t* except.c (init_eh): Avoid assignment of unused return value of\n+\tbuild_pointer_type; cast it to void, instead, and remove unused\n+\tvariable type.\n+\n+\t* gcc.c (lang_specific_driver): Define prototype only #ifdef\n+\tLANG_SPECIFIC_DRIVER.\n+\t(temp_names): Define only #ifdef MKTEMP_EACH_FILE.\n+\n+\t* genoutput.c (output_epilogue): Initialize next_name to 0.\n+\n+\t* real.c (efrexp): #if 0 prototype and function definition.\n+\t(eremain): Likewise.\n+\t(uditoe): Likewise.\n+\t(ditoe): Likewise.\n+\t(etoudi): Likewise.\n+\t(etodi): Likewise.\n+\t(esqrt): Likewise.\n+\n+\t* reload.c (push_secondary_reload): Define prototype only\n+\t#ifdef HAVE_SECONDARY_RELOADS.\n+\n+\t* varasm.c (assemble_static_space): Define rounded only\n+\t#ifndef ASM_OUTPUT_ALIGNED_LOCAL.\n+\n Thu Mar 12 09:11:35 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* i386.md (andsi): Add default case in enumeration switch."}, {"sha": "6456708fe45a9e49f8f18fe934994fdeae379b6a", "filename": "gcc/bitmap.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -52,7 +52,7 @@ bitmap_element bitmap_zero;\t\t/* An element of all zero bits. */\n bitmap_element *bitmap_free;\t\t/* Freelist of bitmap elements. */\n \n static void bitmap_element_free\t\tPROTO((bitmap, bitmap_element *));\n-static bitmap_element *bitmap_element_allocate PROTO((bitmap));\n+static bitmap_element *bitmap_element_allocate PROTO(());\n static int bitmap_element_zerop\t\tPROTO((bitmap_element *));\n static void bitmap_element_link\t\tPROTO((bitmap, bitmap_element *));\n static bitmap_element *bitmap_find_bit\tPROTO((bitmap, unsigned int));\n@@ -88,8 +88,7 @@ bitmap_element_free (head, elt)\n /* Allocate a bitmap element.  The bits are cleared, but nothing else is.  */\n \n static INLINE bitmap_element *\n-bitmap_element_allocate (head)\n-     bitmap head;\n+bitmap_element_allocate ()\n {\n   bitmap_element *element;\n #if BITMAP_ELEMENT_WORDS != 2\n@@ -257,7 +256,7 @@ bitmap_copy (to, from)\n   /* Copy elements in forward direction one at a time */\n   for (from_ptr = from->first; from_ptr; from_ptr = from_ptr->next)\n     {\n-      bitmap_element *to_elt = bitmap_element_allocate (to);\n+      bitmap_element *to_elt = bitmap_element_allocate ();\n \n       to_elt->indx = from_ptr->indx;\n \n@@ -364,7 +363,7 @@ bitmap_set_bit (head, bit)\n \n   if (ptr == 0)\n     {\n-      ptr = bitmap_element_allocate (head);\n+      ptr = bitmap_element_allocate ();\n       ptr->indx = bit / BITMAP_ELEMENT_ALL_BITS;\n       ptr->bits[word_num] = bit_val;\n       bitmap_element_link (head, ptr);\n@@ -463,7 +462,7 @@ bitmap_operation (to, from1, from2, operation)\n \t}\n \n       if (to_ptr == 0)\n-\tto_ptr = bitmap_element_allocate (to);\n+\tto_ptr = bitmap_element_allocate ();\n \n       /* Do the operation, and if any bits are set, link it into the\n \t linked list.  */"}, {"sha": "dba1981a1918d8bcfee3d08aa941dab7a52a6ab3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -1,3 +1,29 @@\n+Thu Mar 12 09:26:04 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* call.c (default_parm_conversions): Remove prototype definition.\n+\t(build_method_call): Remove unused variable result.\n+\n+\t* cvt.c (ocp_convert): Remove unused variable conversion.\n+\n+\t* decl2.c (ambiguous_decl): Add explicit parameter definition for name.\n+\n+\t* except.c (do_unwind): #if 0 definition of unused variables fcall\n+\tand next_pc.\n+\n+\t* expr.c (extract_scalar_init): #if 0 prototype and function definition.\n+\n+\t* init.c (expand_aggr_init_1): Remove unused variable init_type.\n+\t(build_new_1): Remove unused variable t.\n+\n+\t* pt.c (instantiate_class_template): Remove unused variable newtag;\n+\tcast called function return value to void.\n+\t(do_decl_instantiation): Remove unused variables name and fn.\n+\n+\t* tree.c (get_type_decl): Add default return to shut up compiler from\n+\tcomplaining control reaches end of non-void function.\n+\n+\t* typeck.c (build_x_conditional_expr): Remove unused variable rval.\n+\n Thu Mar 12 09:12:15 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* call.c (default_parm_conversions): Remove prototype definition."}, {"sha": "8cef2f9f6a61aa99e86b9df41e140989bd86eafa", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -87,7 +87,6 @@ static tree reference_binding PROTO((tree, tree, tree, int));\n static tree strip_top_quals PROTO((tree));\n static tree non_reference PROTO((tree));\n static tree build_conv PROTO((enum tree_code, tree, tree));\n-static tree default_parm_conversions PROTO((tree, tree *));\n static int is_subseq PROTO((tree, tree));\n \n tree\n@@ -557,7 +556,7 @@ build_method_call (instance, name, parms, basetype_path, flags)\n      tree instance, name, parms, basetype_path;\n      int flags;\n {\n-  tree result, basetype, instance_ptr;\n+  tree basetype, instance_ptr;\n \n #ifdef GATHER_STATISTICS\n   n_build_method_call++;\n@@ -585,15 +584,15 @@ build_method_call (instance, name, parms, basetype_path, flags)\n   if (name == ansi_opname[(int) DELETE_EXPR] && list_length (parms)==2)\n     {\n       tree save_last = TREE_CHAIN (parms);\n-      tree result;\n+\n       /* get rid of unneeded argument */\n       TREE_CHAIN (parms) = NULL_TREE;\n-      result = build_method_call (instance, name, parms, basetype_path,\n-\t\t\t\t  (LOOKUP_SPECULATIVELY|flags)\n-\t\t\t\t  &~LOOKUP_COMPLAIN);\n-      /* If it finds a match, return it.  */\n-      if (result)\n-\treturn build_method_call (instance, name, parms, basetype_path, flags);\n+      if (build_method_call (instance, name, parms, basetype_path,\n+\t\t\t     (LOOKUP_SPECULATIVELY|flags) & ~LOOKUP_COMPLAIN))\n+\t{\n+\t  /* If it finds a match, return it.  */\n+\t  return build_method_call (instance, name, parms, basetype_path, flags);\n+\t}\n       /* If it doesn't work, two argument delete must work */\n       TREE_CHAIN (parms) = save_last;\n     }"}, {"sha": "de8dec765a422be0df7f395d66e398af1e23140c", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -761,7 +761,6 @@ ocp_convert (type, expr, convtype, flags)\n     {\n       tree dtype = TREE_TYPE (e);\n       tree ctor = NULL_TREE;\n-      tree conversion = NULL_TREE;\n \n       dtype = TYPE_MAIN_VARIANT (dtype);\n "}, {"sha": "1fbe9a5b8566823c3cdeafeea919a61d5a1b84e5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -3710,6 +3710,7 @@ add_using_namespace (user, used, indirect)\n    XXX I don't want to repeat the entire duplicate_decls here */\n static tree\n ambiguous_decl (name, val1, val2)\n+     int name;\n      tree val1, val2;\n {\n   my_friendly_assert (val1 != val2, 376);"}, {"sha": "d45bd53a908908d5acd2e4ad16170477801101e0", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -714,9 +714,11 @@ do_unwind (inner_throw_label)\n #endif\n #endif\n #if ! defined (TARGET_88000) && ! defined (ARM_FRAME_RTX) && ! defined (SPARC_STACK_ALIGN)\n+#if 0\n   tree fcall;\n-  tree params;\n   rtx next_pc;\n+#endif\n+  tree params;\n \n #if 0\n   /* I would like to do this here, but the move below doesn't seem to work.  */"}, {"sha": "4085a333eeede81d7a668f8e84a33d868ba37aad", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -1335,7 +1335,6 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n      int flags;\n {\n   tree type = TREE_TYPE (exp);\n-  tree init_type = NULL_TREE;\n \n   my_friendly_assert (init != error_mark_node && type != error_mark_node, 211);\n \n@@ -2212,7 +2211,7 @@ tree\n build_new_1 (exp)\n      tree exp;\n {\n-  tree placement, init, t;\n+  tree placement, init;\n   tree type, true_type, size, rval;\n   tree nelts = NULL_TREE;\n   tree alloc_expr, alloc_node = NULL_TREE;"}, {"sha": "e915ec264ac973c48c3b5de9d3d389bbf542b6f8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -3129,8 +3129,7 @@ instantiate_class_template (type)\n       /* These will add themselves to CLASSTYPE_TAGS for the new type.  */\n       if (TREE_CODE (tag) == ENUMERAL_TYPE)\n \t{\n-\t  tree newtag = tsubst_enum (tag, args, field_chain);\n-\n+\t  (void) tsubst_enum (tag, args, field_chain);\n \t  while (*field_chain)\n \t    {\n \t      DECL_FIELD_CONTEXT (*field_chain) = type;\n@@ -5857,8 +5856,6 @@ do_decl_instantiation (declspecs, declarator, storage)\n      tree declspecs, declarator, storage;\n {\n   tree decl = grokdeclarator (declarator, declspecs, NORMAL, 0, NULL_TREE);\n-  tree name;\n-  tree fn;\n   tree result = NULL_TREE;\n   int extern_p = 0;\n "}, {"sha": "f5e79717a2f9cb3a97cfabeb2d1861129945d94f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -4899,8 +4899,6 @@ tree\n build_x_conditional_expr (ifexp, op1, op2)\n      tree ifexp, op1, op2;\n {\n-  tree rval = NULL_TREE;\n-\n   if (processing_template_decl)\n     return build_min_nt (COND_EXPR, ifexp, op1, op2);\n "}, {"sha": "f8a17874c6371547c43ac045dfe03150e16a3b66", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -1790,7 +1790,7 @@ init_eh ()\n {\n   /* Generate rtl to reference the variable in which the PC of the\n      current context is saved.  */\n-  tree type = build_pointer_type (make_node (VOID_TYPE));\n+  (void) build_pointer_type (make_node (VOID_TYPE));\n }\n \n /* Initialize the per-function EH information.  */"}, {"sha": "b21eab7349bc643d0d921133518197de2a85bce0", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c5d8bf107a7317b7a8542875cfd2b6b84590e1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "patch": "@@ -306,9 +306,11 @@ static int output_reloadnum;\n       ? RELOAD_FOR_OUTADDR_ADDRESS\t\t\t\\\n       : (type)))\n \n+#ifdef HAVE_SECONDARY_RELOADS\n static int push_secondary_reload PROTO((int, rtx, int, int, enum reg_class,\n \t\t\t\t\tenum machine_mode, enum reload_type,\n \t\t\t\t\tenum insn_code *));\n+#endif\n static enum reg_class find_valid_class PROTO((enum machine_mode, int));\n static int push_reload\t\tPROTO((rtx, rtx, rtx *, rtx *, enum reg_class,\n \t\t\t\t       enum machine_mode, enum machine_mode,"}]}