{"sha": "1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkNTk4MWIzM2FiODNhNWYxNzQ1YmRhN2JkN2Q5N2QyM2U4NGY0Yg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2002-08-20T01:27:39Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2002-08-20T01:27:39Z"}, "message": "objc-act.c (build_ivar_chain): Remove.\n\n[gcc]\n2002-08-19  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc/objc-act.c (build_ivar_chain): Remove.\n        (objc_copy_list): Likewise.\n        (get_class_ivars): Inline call to removed build_ivar_chain\n        function.  Save off a clean copy of ivars in the CLASS_OWN_IVARS\n        slot; use that slot (rather than CLASS_IVARS) when accessing\n        ivars for base classes.  Call copy_list and chainon instead of\n        objc_copy_list.\n        (build_private_template): Call get_class_ivars instead of\n        build_ivar_chain.\n        (start_class): Allocate room for the CLASS_OWN_IVARS slot.\n        (continue_class): Call get_class_ivars instead of\n        build_ivar_chain.\n        (encode_field_decl): Check for DECL_BIT_FIELD_TYPE instead\n        of DECL_BIT_FIELD (which may have been cleared).\n        * objc/objc-act.h (CLASS_OWN_IVARS): New accessor macro.\n\n[gcc/testsuite]\n2002-08-19  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc.dg/bitfield-1.m: New test.\n        * objc.dg/bitfield-2.m: New test.\n\nFrom-SVN: r56451", "tree": {"sha": "5bfe74464a81284da9557cd95333dffa30318d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bfe74464a81284da9557cd95333dffa30318d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/comments", "author": null, "committer": null, "parents": [{"sha": "2bf087c09eb697b798574e77845466d248381bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf087c09eb697b798574e77845466d248381bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf087c09eb697b798574e77845466d248381bc6"}], "stats": {"total": 235, "additions": 176, "deletions": 59}, "files": [{"sha": "e04ce0e013de2531b0e879c16933e7e9a77d732d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -1,3 +1,21 @@\n+2002-08-19  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc/objc-act.c (build_ivar_chain): Remove.\n+\t(objc_copy_list): Likewise.\n+\t(get_class_ivars): Inline call to removed build_ivar_chain\n+\tfunction.  Save off a clean copy of ivars in the CLASS_OWN_IVARS\n+\tslot; use that slot (rather than CLASS_IVARS) when accessing\n+\tivars for base classes.  Call copy_list and chainon instead of\n+\tobjc_copy_list.\n+\t(build_private_template): Call get_class_ivars instead of\n+\tbuild_ivar_chain.\n+\t(start_class): Allocate room for the CLASS_OWN_IVARS slot.\n+\t(continue_class): Call get_class_ivars instead of \n+\tbuild_ivar_chain.\n+\t(encode_field_decl): Check for DECL_BIT_FIELD_TYPE instead\n+\tof DECL_BIT_FIELD (which may have been cleared).\n+\t* objc/objc-act.h (CLASS_OWN_IVARS): New accessor macro.\n+\n 2002-08-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* genautomata.c (output_translate_vect, output_state_ainsn_table,"}, {"sha": "78413073b67e7b171aea097eb90564ee03827531", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 59, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -128,7 +128,6 @@ static tree build_objc_method_call\t\tPARAMS ((int, tree, tree,\n static void generate_strings\t\t\tPARAMS ((void));\n static tree get_proto_encoding \t\t\tPARAMS ((tree));\n static void build_selector_translation_table\tPARAMS ((void));\n-static tree build_ivar_chain\t\t\tPARAMS ((tree, int));\n \n static tree objc_add_static_instance\t\tPARAMS ((tree, tree));\n \n@@ -249,7 +248,6 @@ static tree build_typed_selector_reference     \tPARAMS ((tree, tree));\n static tree build_selector_reference\t\tPARAMS ((tree));\n static tree build_class_reference_decl\t\tPARAMS ((void));\n static void add_class_reference\t\t\tPARAMS ((tree));\n-static tree objc_copy_list\t\t\tPARAMS ((tree, tree *));\n static tree build_protocol_template\t\tPARAMS ((void));\n static tree build_descriptor_table_initializer\tPARAMS ((tree, tree));\n static tree build_method_prototype_list_template PARAMS ((tree, int));\n@@ -2277,51 +2275,23 @@ lookup_interface (ident)\n   return NULL_TREE;\n }\n \n-static tree\n-objc_copy_list (list, head)\n-     tree list;\n-     tree *head;\n-{\n-  tree newlist = NULL_TREE, tail = NULL_TREE;\n-\n-  while (list)\n-    {\n-      tail = copy_node (list);\n-\n-      /* The following statement fixes a bug when inheriting instance\n-\t variables that are declared to be bitfields. finish_struct\n-\t expects to find the width of the bitfield in DECL_INITIAL.  */\n-      if (DECL_BIT_FIELD (tail) && DECL_INITIAL (tail) == 0)\n-\tDECL_INITIAL (tail) = DECL_SIZE (tail);\n-\n-      newlist = chainon (newlist, tail);\n-      list = TREE_CHAIN (list);\n-    }\n-\n-  *head = newlist;\n-  return tail;\n-}\n-\n-/* Used by: build_private_template, get_class_ivars, and\n-   continue_class.  COPY is 1 when called from @defs.  In this case\n-   copy all fields.  Otherwise don't copy leaf ivars since we rely on\n-   them being side-effected exactly once by finish_struct.  */\n+/* Used by: build_private_template, continue_class,\n+   and for @defs constructs.  */\n \n-static tree\n-build_ivar_chain (interface, copy)\n+tree\n+get_class_ivars (interface)\n      tree interface;\n-     int copy;\n {\n   tree my_name, super_name, ivar_chain;\n \n   my_name = CLASS_NAME (interface);\n   super_name = CLASS_SUPER_NAME (interface);\n+  ivar_chain = CLASS_IVARS (interface);\n \n-  /* Possibly copy leaf ivars.  */\n-  if (copy)\n-    objc_copy_list (CLASS_IVARS (interface), &ivar_chain);\n-  else\n-    ivar_chain = CLASS_IVARS (interface);\n+  /* Save off a pristine copy of the leaf ivars (i.e, those not\n+     inherited from a super class).  */\n+  if (!CLASS_OWN_IVARS (interface))\n+    CLASS_OWN_IVARS (interface) = copy_list (ivar_chain);\n \n   while (super_name)\n     {\n@@ -2345,14 +2315,14 @@ build_ivar_chain (interface, copy)\n       my_name = CLASS_NAME (interface);\n       super_name = CLASS_SUPER_NAME (interface);\n \n-      op1 = CLASS_IVARS (interface);\n+      op1 = CLASS_OWN_IVARS (interface);\n       if (op1)\n         {\n-\t  tree head, tail = objc_copy_list (op1, &head);\n+\t  tree head = copy_list (op1);\n \n \t  /* Prepend super class ivars...make a copy of the list, we\n \t     do not want to alter the original.  */\n-\t  TREE_CHAIN (tail) = ivar_chain;\n+\t  chainon (head, ivar_chain);\n \t  ivar_chain = head;\n         }\n     }\n@@ -2379,7 +2349,7 @@ build_private_template (class)\n     {\n       uprivate_record = start_struct (RECORD_TYPE, CLASS_NAME (class));\n \n-      ivar_context = build_ivar_chain (class, 0);\n+      ivar_context = get_class_ivars (class);\n \n       finish_struct (uprivate_record, ivar_context, NULL_TREE);\n \n@@ -5660,18 +5630,6 @@ is_public (expr, identifier)\n \n   return 1;\n }\n-\n-/* Implement @defs (<classname>) within struct bodies.  */\n-\n-tree\n-get_class_ivars (interface)\n-     tree interface;\n-{\n-  /* Make sure we copy the leaf ivars in case @defs is used in a local\n-     context.  Otherwise finish_struct will overwrite the layout info\n-     using temporary storage.  */\n-  return build_ivar_chain (interface, 1);\n-}\n \f\n /* Make sure all entries in CHAIN are also in LIST.  */\n \n@@ -5903,7 +5861,7 @@ start_class (code, class_name, super_name, protocol_list)\n     }\n \n   class = make_node (code);\n-  TYPE_BINFO (class) = make_tree_vec (5);\n+  TYPE_BINFO (class) = make_tree_vec (6);\n \n   CLASS_NAME (class) = class_name;\n   CLASS_SUPER_NAME (class) = super_name;\n@@ -6093,7 +6051,7 @@ continue_class (class)\n \n       if (!TYPE_FIELDS (record))\n \t{\n-\t  finish_struct (record, build_ivar_chain (class, 0), NULL_TREE);\n+\t  finish_struct (record, get_class_ivars (class), NULL_TREE);\n \t  CLASS_STATIC_TEMPLATE (class) = record;\n \n \t  /* Mark this record as a class template for static typing.  */\n@@ -6717,14 +6675,14 @@ encode_field_decl (field_decl, curtype, format)\n      the bitfield typing information.  */\n   if (flag_next_runtime)\n     {\n-      if (DECL_BIT_FIELD (field_decl))\n+      if (DECL_BIT_FIELD_TYPE (field_decl))\n \tencode_bitfield (tree_low_cst (DECL_SIZE (field_decl), 1));\n       else\n \tencode_type (TREE_TYPE (field_decl), curtype, format);\n     }\n   else\n     {\n-      if (DECL_BIT_FIELD (field_decl))\n+      if (DECL_BIT_FIELD_TYPE (field_decl))\n \tencode_complete_bitfield (int_bit_position (field_decl),\n \t\t\t\t  DECL_BIT_FIELD_TYPE (field_decl),\n \t\t\t\t  tree_low_cst (DECL_SIZE (field_decl), 1));"}, {"sha": "af10387c3978ef2d1cd7574dc6044c607adef6dc", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -97,6 +97,7 @@ tree build_encode_expr\t\t\t\tPARAMS ((tree));\n #define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 2)\n #define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 3)\n #define CLASS_PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 4)\n+#define CLASS_OWN_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 5)\n #define PROTOCOL_NAME(CLASS) ((CLASS)->type.name)\n #define PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 0)\n #define PROTOCOL_NST_METHODS(CLASS) ((CLASS)->type.minval)"}, {"sha": "775dcb0e01644639345617deeedcc69aa32373f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -1,3 +1,8 @@\n+2002-08-19  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/bitfield-1.m: New test.\n+\t* objc.dg/bitfield-2.m: New test.\n+\n 2002-08-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/c90-flex-array-1.c, gcc.dg/c99-flex-array-3.c,"}, {"sha": "8791eb33e1495bbd919b96812e5fcd66e77c1a4b", "filename": "gcc/testsuite/objc.dg/bitfield-1.m", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -0,0 +1,80 @@\n+/* Check if bitfield ivars are inherited correctly (i.e., without\n+   being \"promoted\" to ints).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object \n+{\n+    int full;\n+    int full2: 32;\n+    int _refs: 8;\n+    int field2: 3;\n+    unsigned f3: 8;\n+    short cc;\n+    unsigned g: 16;\n+    int r2: 8;\n+    int r3: 8;\n+    int r4: 2;\n+    int r5: 8;\n+    char c;\n+}\n+- (void)setValues;\n+@end\n+\n+@interface Derived: Base\n+{\n+    char d;\n+    int _field3: 6;\n+}\n+- (void)checkValues;\n+@end\n+\n+@implementation Base\n+-(void)setValues {\n+  full = 1;\n+  full2 = 2;\n+  _refs = 3;\n+  field2 = 1;\n+  f3 = 6;\n+  cc = 7;\n+  g = 8;\n+  r2 = 9;\n+  r3 = 10;\n+  r4 = 1;\n+  r5 = 12;\n+  c = 13;\n+}\n+@end\n+\n+@implementation Derived\n+-(void)checkValues {\n+  CHECK_IF(full == 1);\n+  CHECK_IF(full2 == 2);\n+  CHECK_IF(_refs == 3);\n+  CHECK_IF(field2 == 1);\n+  CHECK_IF(f3 == 6);\n+  CHECK_IF(cc == 7);\n+  CHECK_IF(g == 8);\n+  CHECK_IF(r2 == 9);\n+  CHECK_IF(r3 == 10);\n+  CHECK_IF(r4 == 1);\n+  CHECK_IF(r5 == 12);\n+  CHECK_IF(c == 13);\n+}\n+@end\n+\n+int main(void) {\n+  Derived *obj = [[Derived alloc] init];\n+\n+  [obj setValues];\n+  [obj checkValues];\n+\n+  return 0;\n+}"}, {"sha": "25a48625c6b1f6a20afaa46d486d2969dbb383a1", "filename": "gcc/testsuite/objc.dg/bitfield-2.m", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m?ref=1bd5981b33ab83a5f1745bda7bd7d97d23e84f4b", "patch": "@@ -0,0 +1,55 @@\n+/* Check if bitfield ivars are correctly @encode'd when\n+   the NeXT runtime is used.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do run } */\n+\n+struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+extern void abort(void);\n+extern int strcmp(const char *, const char *);\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base \n+{\n+    struct objc_class *isa;\n+    int full;\n+    int full2: 32;\n+    int _refs: 8;\n+    int field2: 3;\n+    unsigned f3: 8;\n+    short cc;\n+    unsigned g: 16;\n+    int r2: 8;\n+    int r3: 8;\n+    int r4: 2;\n+    int r5: 8;\n+    char c;\n+}\n+@end\n+\n+@interface Derived: Base\n+{\n+    char d;\n+    int _field3: 6;\n+}\n+@end\n+\n+@implementation Base\n+@end\n+\n+@implementation Derived\n+@end\n+\n+int main(void) {\n+  const char *s1r = \"{Base=#ib32b8b3b8sb16b8b8b2b8c}\";\n+  const char *s1 = @encode(Base);\n+  const char *s2r = \"{Derived=#ib32b8b3b8sb16b8b8b2b8ccb6}\";\n+  const char *s2 = @encode(Derived);\n+\n+  CHECK_IF(!strcmp(s1r, s1));\n+  CHECK_IF(!strcmp(s2r, s2));\n+\n+  return 0;\n+}"}]}