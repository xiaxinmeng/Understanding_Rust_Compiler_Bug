{"sha": "0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2OTA5Yjk2MzhkOThiNzk4YjVjZTc1YjM4MzZhZDRmMzhjMTNmZA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2006-12-03T20:05:31Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2006-12-03T20:05:31Z"}, "message": "vect.exp: Enable tests to run on spu.\n\n        * g++.dg/vect/vect.exp: Enable tests to run on spu.\n        * gcc.dg/vect/vect.exp: Enable tests to run on spu.\n        * gcc.dg/vect/no-section-anchors-vect-69.c: Reduce array size.\n        * gcc.dg/vect/vect-70.c: Reduce array size.\n        * gcc.dg/vect/fast-math-vect-reduc-7.c: Xfail for\n        vect_no_compaer_double targets.\n        * lib/target-supports.exp: Add spu to vect_no_align, no_vect_int_max,\n        vect_float, vect_double, and vect_int.\n\n\t* config/spu/spu.md (smaxv4sf3, sminv4sf3): New.\n\nFrom-SVN: r119469", "tree": {"sha": "481425712d3353f888e8a091a11c986f368215ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/481425712d3353f888e8a091a11c986f368215ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/comments", "author": null, "committer": null, "parents": [{"sha": "7372c0a430fa6cc063e7ae1dffe4ffb46bcbbd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7372c0a430fa6cc063e7ae1dffe4ffb46bcbbd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7372c0a430fa6cc063e7ae1dffe4ffb46bcbbd9e"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "cd810ff5be4962a4fe5919b7f793b50f2d56afe8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -1,3 +1,7 @@\n+2006-12-03  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* config/spu/spu.md (smaxv4sf3, sminv4sf3): New.\n+\n 2006-12-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/30041"}, {"sha": "5ad43acd75cb359d1812d06d69f57b3e617af46e", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -3300,3 +3300,31 @@ selb\\t%0,%4,%0,%3\"\n ;;\n (include \"spu-builtins.md\")\n \n+  \n+(define_expand \"smaxv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=r\")\n+        (smax:V4SF (match_operand:V4SF 1 \"register_operand\" \"r\")\n+                 (match_operand:V4SF 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (V4SImode);\n+\n+  emit_insn (gen_cgt_v4sf (mask, operands[1], operands[2]));\n+  emit_insn (gen_selb (operands[0], operands[2], operands[1], mask));\n+  DONE;\n+}\") \n+\n+(define_expand \"sminv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=r\")\n+        (smax:V4SF (match_operand:V4SF 1 \"register_operand\" \"r\")\n+                 (match_operand:V4SF 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (V4SImode);\n+\n+  emit_insn (gen_cgt_v4sf (mask, operands[1], operands[2]));\n+  emit_insn (gen_selb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\") "}, {"sha": "be7429ed75b28ebb1e7a9d9368b50736dbbb343c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -1,3 +1,14 @@\n+2006-12-03  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* g++.dg/vect/vect.exp: Enable tests to run on spu.\n+\t* gcc.dg/vect/vect.exp: Enable tests to run on spu.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c: Reduce array size.\n+\t* gcc.dg/vect/vect-70.c: Reduce array size.\n+\t* gcc.dg/vect/fast-math-vect-reduc-7.c: Xfail for \n+\tvect_no_compaer_double targets.\n+\t* lib/target-supports.exp: Add spu to vect_no_align, no_vect_int_max,\n+\tvect_float, vect_double, and vect_int.\n+\n 2006-12-03  Dorit Nuzman <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/pr16105.c: Remove xfail on vect_no_align targets. Add"}, {"sha": "6e8afa7475b3f8f7e1bf339609f86eb720aa87ba", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -58,6 +58,8 @@ if [istarget \"powerpc*-*-*\"] {\n         }\n         set dg-do-what-default compile\n     }\n+} elseif { [istarget  \"spu-*-*\"] } {\n+   set dg-do-what-default run\n } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n     set dg-do-what-default run"}, {"sha": "c88a8949d55d96a42a162c801d8c6f9ee1eccc9d", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-reduc-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-7.c?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -50,5 +50,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_no_compare_double } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_no_compare_double } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7ed505b6f78599b47ddabc7765892dc7d65399e2", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#define N 8\n \n struct s{\n   int m;\n@@ -113,5 +113,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4e209d4aecfeda494d540cae323fc19cb184e3e0", "filename": "gcc/testsuite/gcc.dg/vect/vect-70.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 12\n \n struct s{\n   int m;"}, {"sha": "0de2be39a521acf820b6821f5c9a6a387956d419", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -52,6 +52,8 @@ if [istarget \"powerpc*-*-*\"] {\n \t}\n \tset dg-do-what-default compile\n     }\n+} elseif { [istarget  \"spu-*-*\"] } {\n+   set dg-do-what-default run\n } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n     set dg-do-what-default run"}, {"sha": "4dd0b8e6e36e16cd159360e5b1f9f934535b6a07", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6909b9638d98b798b5ce75b3836ad4f38c13fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0f6909b9638d98b798b5ce75b3836ad4f38c13fd", "patch": "@@ -1249,6 +1249,7 @@ proc check_effective_target_vect_int { } {\n \tset et_vect_int_saved 0\n \tif { [istarget i?86-*-*]\n \t      || [istarget powerpc*-*-*]\n+\t      || [istarget spu-*-*]\n \t      || [istarget x86_64-*-*]\n \t      || [istarget sparc*-*-*]\n \t      || [istarget alpha*-*-*]\n@@ -1398,6 +1399,7 @@ proc check_effective_target_vect_float { } {\n \tset et_vect_float_saved 0\n \tif { [istarget i?86-*-*]\n \t      || [istarget powerpc*-*-*]\n+\t      || [istarget spu-*-*]\n \t      || [istarget mipsisa64*-*-*]\n \t      || [istarget x86_64-*-*]\n \t      || [istarget ia64-*-*] } {\n@@ -1421,7 +1423,8 @@ proc check_effective_target_vect_double { } {\n     } else {\n \tset et_vect_double_saved 0\n \tif { [istarget i?86-*-*]\n-\t      || [istarget x86_64-*-*] } {\n+\t      || [istarget x86_64-*-*] \n+\t      || [istarget spu-*-*] } {\n \t   set et_vect_double_saved 1\n \t}\n     }\n@@ -1430,6 +1433,26 @@ proc check_effective_target_vect_double { } {\n     return $et_vect_double_saved\n }\n \n+# Return 0 if the target supports hardware comparison of vectors of double, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_no_compare_double { } {\n+    global et_vect_no_compare_double_saved\n+\n+    if [info exists et_vect_no_compare_double_saved] {\n+        verbose \"check_effective_target_vect_no_compare_double: using cached result\" 2\n+    } else {\n+        set et_vect_no_compare_double_saved 0\n+        if { [istarget spu-*-*] } {\n+           set et_vect_no_compare_double_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_no_compare_double: returning $et_vect_no_compare_double_saved\" 2\n+    return $et_vect_no_compare_double_saved\n+}\n+\n # Return 1 if the target plus current options does not support a vector\n # max instruction on \"int\", 0 otherwise.\n #\n@@ -1443,6 +1466,7 @@ proc check_effective_target_vect_no_int_max { } {\n     } else {\n \tset et_vect_no_int_max_saved 0\n \tif { [istarget sparc*-*-*]\n+\t     || [istarget spu-*-*]\n \t     || [istarget alpha*-*-*] } {\n \t    set et_vect_no_int_max_saved 1\n \t}\n@@ -1751,6 +1775,7 @@ proc check_effective_target_vect_no_align { } {\n     } else {\n \tset et_vect_no_align_saved 0\n \tif { [istarget mipsisa64*-*-*]\n+\t     || [istarget spu-*-*]\n \t     || [istarget sparc*-*-*]\n \t     || [istarget ia64-*-*] } {\n \t    set et_vect_no_align_saved 1"}]}