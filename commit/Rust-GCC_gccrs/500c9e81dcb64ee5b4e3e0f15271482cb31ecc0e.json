{"sha": "500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwYzllODFkY2I2NGVlNWI0ZTNlMGYxNTI3MTQ4MmNiMzFlY2MwZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T23:05:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T23:05:13Z"}, "message": "(do_spec_1): Use spec_version for %v, not version_string.\n\nDistinguish %v1 and %v2.\n(default_compilers): For __GNUC_MINOR__, use %v2.\nFor __GNUC__ and __GNUG__, use %v1.\n\nFrom-SVN: r5976", "tree": {"sha": "049fb1509ea1fe3b48ec9d4d5e4138cbc62eb5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049fb1509ea1fe3b48ec9d4d5e4138cbc62eb5ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e/comments", "author": null, "committer": null, "parents": [{"sha": "1f10df153b8d50f4e30935a35bec22b874bfb401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f10df153b8d50f4e30935a35bec22b874bfb401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f10df153b8d50f4e30935a35bec22b874bfb401"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "0584f6b923e8d28a10d4af19632e22598e4d6686", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "patch": "@@ -244,7 +244,9 @@ or with constant text in a single argument.\n  %x{OPTION}\tAccumulate an option for %X.\n  %X\tOutput the accumulated linker options specified by compilations.\n  %Y\tOutput the accumulated assembler options specified by compilations.\n- %v\tSubstitute the minor version number of GCC.\n+ %v1\tSubstitute the major version number of GCC.\n+\t(For version 2.5.n, this is 2.)\n+ %v2\tSubstitute the minor version number of GCC.\n \t(For version 2.5.n, this is 5.)\n  %a     process ASM_SPEC as a spec.\n         This allows config.h to specify part of the spec for running as.\n@@ -446,7 +448,7 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n-        -undef -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+        -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n \t%{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n@@ -467,7 +469,7 @@ static struct compiler default_compilers[] =\n    \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n-        -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+        -undef -D__GNUC__=%v1 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -479,7 +481,7 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n-        -undef -D__OBJC__ -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+        -undef -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n \t %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n@@ -503,7 +505,7 @@ static struct compiler default_compilers[] =\n     cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n-        -undef -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+        -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n \t %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n@@ -517,7 +519,7 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n-\t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus -D__GNUC_MINOR__=%v\\\n+\t-undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus -D__GNUC_MINOR__=%v2\\\n \t%{ansi:-trigraphs -$ -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n@@ -3352,12 +3354,17 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t  case 'v':\n \t    {\n-\t      char *p = version_string;\n+\t      int c1 = *p++;  /* Select first or second version number.  */\n+\t      char *p = spec_version;\n \t      char *q, *copy;\n-\t      /* Set P after the first period.  */\n-\t      while (*p != '.') p++;\n-\t      p++;\n-\t      /* Set Q at the second period or at the end.  */\n+\t      /* If desired, advance to second version number.  */\n+\t      if (c1 == '2')\n+\t\t{\n+\t\t  /* Set P after the first period.  */\n+\t\t  while (*p != '.') p++;\n+\t\t  p++;\n+\t\t}\n+\t      /* Set Q at the next period or at the end.  */\n \t      q = p;\n \t      while (*q != '.' && *q != 0) q++;\n \t      /* Put that part into the command.  */"}]}