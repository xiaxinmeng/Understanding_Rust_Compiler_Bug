{"sha": "e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmZjZhNDZjOWQ4NTJhZWFiYWU0ODNiNDVlMGUzMGJkNjMyMmExMA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-08-04T07:50:53Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-08-04T07:50:53Z"}, "message": "re PR target/55181 (Expensive shift loop where a bit-testing instruction could be used)\n\n\tPR 55181\n\t* config/avr/avr.md: New pattern to work around do_store_flag\n\tgenerating shift instructions for bit extractions.\n\nFrom-SVN: r239116", "tree": {"sha": "8b6958836ef2ee6dd440dad2756bd4fd6646bd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b6958836ef2ee6dd440dad2756bd4fd6646bd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ff6a46c9d852aeabae483b45e0e30bd6322a10/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00084346a299e8154ede732c6d4d3ae56d1f66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00084346a299e8154ede732c6d4d3ae56d1f66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00084346a299e8154ede732c6d4d3ae56d1f66f"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "0e5eea4e7ca4bf980b8b60cb003d0e81975f8c7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff6a46c9d852aeabae483b45e0e30bd6322a10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff6a46c9d852aeabae483b45e0e30bd6322a10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "patch": "@@ -1,3 +1,9 @@\n+2016-08-04  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR 55181\n+\t* config/avr/avr.md: New pattern to work around do_store_flag\n+\tgenerating shift instructions for bit extractions.\n+\n 2016-08-04  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* tree-vrp.c (set_value_range): Use vrp_equiv_obstack with"}, {"sha": "97f35616d1f0ce82a357770841e3ac793ff38cd2", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff6a46c9d852aeabae483b45e0e30bd6322a10/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff6a46c9d852aeabae483b45e0e30bd6322a10/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=e7ff6a46c9d852aeabae483b45e0e30bd6322a10", "patch": "@@ -6691,6 +6691,29 @@\n     operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n   })\n \n+;; ??? do_store_flag emits a hard-coded right shift to extract a bit without\n+;; even considering rtx_costs, extzv, or a bit-test.  See PR 55181 for an example.\n+(define_insn_and_split \"*extract.subreg.bit\"\n+  [(set (match_operand:QI 0 \"register_operand\"                                       \"=r\")\n+        (and:QI (subreg:QI (any_shiftrt:HISI (match_operand:HISI 1 \"register_operand\" \"r\")\n+                                             (match_operand:QI 2 \"const_int_operand\"  \"n\"))\n+                           0)\n+                (const_int 1)))]\n+  \"INTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n+  { gcc_unreachable(); }\n+  \"&& reload_completed\"\n+  [;; \"*extzv\"\n+   (set (match_dup 0)\n+        (zero_extract:QI (match_dup 3)\n+                         (const_int 1)\n+                         (match_dup 4)))]\n+  {\n+    int bitno = INTVAL (operands[2]);\n+    operands[3] = simplify_gen_subreg (QImode, operands[1], <MODE>mode, bitno / 8);\n+    operands[4] = GEN_INT (bitno % 8);\n+  })\n+\n+                                        \n \f\n ;; Fixed-point instructions\n (include \"avr-fixed.md\")"}]}