{"sha": "7afe1b4d48a3125c023e9e03b3e5611818ef9890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmZTFiNGQ0OGEzMTI1YzAyM2U5ZTAzYjNlNTYxMTgxOGVmOTg5MA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-07-26T00:00:23Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-07-26T00:00:23Z"}, "message": "Initial revision\n\nFrom-SVN: r4985", "tree": {"sha": "4238b71270e6bdb87125d5e457af25decf7d0d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4238b71270e6bdb87125d5e457af25decf7d0d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afe1b4d48a3125c023e9e03b3e5611818ef9890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afe1b4d48a3125c023e9e03b3e5611818ef9890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afe1b4d48a3125c023e9e03b3e5611818ef9890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afe1b4d48a3125c023e9e03b3e5611818ef9890/comments", "author": null, "committer": null, "parents": [{"sha": "c0f0634494724af45fea603c8800a5ad5af37d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f0634494724af45fea603c8800a5ad5af37d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f0634494724af45fea603c8800a5ad5af37d59"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "02b9af3272b497166fb75d8fd94fe5f4fcf88baa", "filename": "gcc/fixproto", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afe1b4d48a3125c023e9e03b3e5611818ef9890/gcc%2Ffixproto", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afe1b4d48a3125c023e9e03b3e5611818ef9890/gcc%2Ffixproto", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixproto?ref=7afe1b4d48a3125c023e9e03b3e5611818ef9890", "patch": "@@ -0,0 +1,235 @@\n+#!/bin/sh\n+#\n+# SYNOPSIS\n+#\tfixproto TARGET-DIR [ SOURCE-DIR ... ]\n+#\n+# COPYRIGHT\n+#\tCopyright (C) 1993 Free Software Foundation, Inc.\n+#\tThis file is part of GNU CC.\n+#\n+#\tGNU CC is free software; you can redistribute it and/or modify\n+#\tit under the terms of the GNU General Public License as published by\n+#\tthe Free Software Foundation; either version 2, or (at your option)\n+#\tany later version.\n+#\n+#\tGNU CC is distributed in the hope that it will be useful,\n+#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n+#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#\tGNU General Public License for more details.\n+#\n+#\tYou should have received a copy of the GNU General Public License\n+#\talong with GNU CC; see the file COPYING.  If not, write to\n+#\tthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+#\n+# DESCRIPTION\n+#\tAdjunct script for GNU CC to populate a directory with ANSI,\n+#\tPosix.1, and C++ compatible header files.\n+#\n+#\tEach file found under each SOURCE-DIR is analized and \"fixed.\"\n+#\tThe SOURCE-DIRs are searched in order; a file found\n+#\tunder multiple SOURCE-DIRs is only handled for the first one.\n+#\n+# STRATEGY\n+#       Each include file is fed through cpp, and the scan-decls program\n+#\tparses it, and emits any found function declarations.\n+#\tThe patch-header program analyzes the scan-decls output,\n+#\ttogether with the original include file, and writes a \"fixed\"\n+#\tinclude file, if needed.\n+#\n+#\tThe comment at the beginning of patch-header.c lists specifically\n+#\twhat kind of changes are made.\n+#\n+# NOTE\n+#\tSome file space will be wasted, because the original header\n+#\tfiles are copied.  An earlier version just included the original\n+#\tby \"reference\", using GNU cpp's #include_next mechanism.\n+#\tThis is currently not done, partly because #include_next is\n+#\tfragile (susceptible to version incompatibilties, and depends\n+#\tand GCC-specific features), and partly for performance reasons.\n+#\n+# AUTHORS\n+#\tRon Guilmette (rfg@netcom.com) (original idea and code)\n+#\tPer Bothner (bothner@cygnus.com) (major re-write)\n+\n+progname=$0\n+progname=`basename $progname`\n+original_dir=`pwd`\n+CC=gcc\n+CPP=${CPP-./cpp}\n+#CPP=\"${CC} -E\"\n+if [ `echo $1 | wc -w` = 0 ] ; then\n+  echo $progname\\: usage\\: $progname target-dir \\[ source-dir \\.\\.\\. \\]\n+  exit 1\n+fi\n+rel_target_dir=$1\n+shift\n+\n+if [ `expr $rel_target_dir : '\\(.\\)'` != '/' ] ; then\n+  abs_target_dir=$original_dir/$rel_target_dir\n+else\n+  abs_target_dir=$rel_target_dir\n+fi\n+\n+if [ \\! -d $abs_target_dir ] ; then\n+  echo $progname\\: creating directory $rel_target_dir\n+  mkdir $abs_target_dir\n+fi\n+\n+echo $progname\\: populating \\`$rel_target_dir\\'\n+\n+required_ctype_h=\"isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper\"\n+required_dirent_h=\"closedir opendir readdir rewinddir\"\n+extra_check_errno_h=\"errno\"\n+required_curses_h=\"box delwin endwin getcurx getcury initscr mvcur mvwprintw mvwscanw newwin overlay overwrite scroll subwin touchwin waddstr wclear wclrtobot wclrtoeol waddch wdelch wdeleteln werase wgetch wgetstr winsch winsertln wmove wprintw wrefresh wscanw wstandend wstandout\"\n+required_fcntl_h=\"creat fcntl open\"\n+# required_float_h=...\n+required_grp_h=\"getgrgid getgrnam\"\n+# Maybe also \"getgrent fgetgrent setgrent endgrent\" */\n+# required_limit_h= /* Lots of macros */\n+required_locale_h=\"localeconv setlocale\"\n+required_math_h=\"acos asin atan atan2 ceil cos cosh exp fabs floor fmod frexp ldexp log10 log modf pow sin sinh sqrt tan tanh\"\n+extra_check_math_h=\"HUGE_VAL\"\n+\n+required_pwd_h=\"getpwnam getpwuid\"\n+required_setjmp_h=\"longjmp setjmp siglongjmp sigsetjmp\"\n+required_signal_h=\"kill raise sigaction sigaddset sigdelset sigemptyset sigfillset sigismember signal sigpending sigprocmask sigsuspend\"\n+# *stdarg_h *stddef.h  - supplied by gcc\n+required_stdio_h=\"clearerr fclose feof ferror fflush fgetc fgetpos fgets fopen fprintf fputc fputs fread freopen fscanf fseek fsetpos ftell fwrite getc getchar gets perror printf putc putchar puts remove rename rewind scanf setbuf setvbuf sprintf sscanf tmpfile tmpnam ungetc vfprintf vprintf vsprintf\"\n+# Should perhaps also handle NULL, EOF, ... ?\n+required_stdlib_h=\"abort abs atexit atof atoi atol bsearch calloc exit free getenv labs malloc qsort rand realloc srand strtod strtol strtoul system\"\n+# \"div ldiv\", - ignored because these depend on div_t, ldiv_t\n+# ignore these: \"mblen mbstowcs mbstowc wcstombs wctomb\"\n+# Should perhaps also add NULL\n+required_string_h=\"memchr memcmp memcpy memmove memset strcat strchr strcmp strcoll strcpy strcspn strerror strlen strncat strncmp\"\n+# Should perhaps also add NULL and size_t\n+required_sys_stat_h=\"chmod fstat mkdir mkfifo stat umask\"\n+extra_check_sys_stat_h=\"S_ISDIR S_ISBLK S_ISCHR S_ISFIFO S_ISREG S_ISLNK S_IFDIR S_IFBLK S_IFCHR S_IFIFO S_IFREG S_IFLNK\"\n+required_sys_times_h=\"times\"\n+# \"sys_types.h\" add types (not in old g++-include)\n+required_sys_resource_h=\"getrusage getrlimit setrlimit getpriority setpriority\"\n+required_sys_utsname_h=\"uname\"\n+required_sys_wait_h=\"wait waitpid\"\n+extra_check_sys_wait_h=\"WEXITSTATUS WIFEXITED WIFSIGNALED WIFSTOPPED WSTOPSIG WTERMSIG WNOHANG WNOTRACED\"\n+# required_tar.h= \n+required_termios_h=\"cfgetispeed cfgetospeed cfsetispeed cfsetospeed tcdrain tcflow tcflush tcgetattr tcsendbreak tcsetattr\"\n+required_time_h=\"asctime clock ctime difftime gmtime localtime mktime strftime time tzset\"\n+required_unistd_h=\"_exit access alarm chdir chown close ctermid cuserid dup dup2 execl execle execlp execv execve execvp fork fpathconf getcwd getegid geteuid getgid getgroups getlogin getpgrp getpid getppid getuid isatty link lseek pathconf pause pipe read rmdir setgid setpgid setsid setuid sleep sysconf tcgetpgrp tcsetpgrp ttyname unlink write\"\n+\n+include_path=\"\"\n+\n+if [ `echo $* | wc -w` != 0 ] ; then\n+  for rel_source_dir in $*; do\n+    if [ `expr $rel_source_dir : '\\(.\\)'` != '/' ] ; then\n+      abs_source_dir=$original_dir/$rel_source_dir\n+    else\n+      abs_source_dir=$rel_source_dir\n+    fi\n+    include_path=\"$include_path -I$abs_source_dir\"\n+  done\n+fi\n+\n+done_dirs=\"\"\n+done_files=\"\"\n+\n+if [ `echo $* | wc -w` != 0 ] ; then\n+  for rel_source_dir in $* ; do\n+    if [ `expr $rel_source_dir : '\\(.\\)'` != '/' ] ; then\n+      abs_source_dir=$original_dir/$rel_source_dir\n+    else\n+      abs_source_dir=$rel_source_dir\n+    fi\n+    if [ \\! -d $abs_source_dir ] ; then\n+      echo $progname\\: warning\\: no such directory\\: \\`$rel_source_dir\\'\n+      continue\n+    fi\n+    rel_source_subdirs=`cd $abs_source_dir; find . -type d -print | sed -e 's%^\\./%%' -e 's/\\.//'`\n+    if [ `echo $rel_source_subdirs | wc -w` != 0 ] ; then\n+      for rel_source_subdir in $rel_source_subdirs; do\n+        abs_target_subdir=$abs_target_dir/$rel_source_subdir\n+        if [ \\! -d $abs_target_subdir ] ; then\n+          mkdir $abs_target_subdir\n+        fi\n+      done\n+    fi\n+\n+    rel_source_files=`cd $abs_source_dir; find . '!' -type d -name \\*.h -print | sed 's%^\\./%%'`\n+\n+    if [ `echo $rel_source_files | wc -w` != 0 ] ; then\n+      for rel_source_file in $rel_source_files; do\n+\tabs_source_file=$abs_source_dir/$rel_source_file\n+\tabs_target_file=$abs_target_dir/$rel_source_file\n+\n+\t# If target file exists, check if was written while processing one\n+\t# of the earlier source directories;  if so ignore it.\n+\tif test -f $abs_target_file -a -n \"$done_dirs\" \\\n+\t  && echo \" $done_files \" |grep \" $rel_source_file \" >/dev/null\n+\tthen\n+\t  echo $abs_target_file exists, $abs_source_file is ignored\n+\telse\n+\t  # echo doing $rel_source_file from $abs_source_dir\n+\t  rel_source_ident=`echo $rel_source_file | tr ./- ___`\n+\t  required_list=`eval echo '${required_'${rel_source_ident}'-}'`\n+\t  extra_check_list=`eval echo '${extra_check_'${rel_source_ident}'-}'`\n+\t  rm -f tmp.c tmp.i\n+\t  echo \"#include <${rel_source_file}>\" >tmp.c\n+\t  for macro in ${required_list} ${extra_check_list}\n+\t  do\n+\t    echo \"#ifdef ${macro}\" >>tmp.c\n+\t    echo \"__DEFINED_MACRO_${macro};\" >>tmp.c\n+\t    echo \"#endif\" >>tmp.c\n+\t  done\n+\t  if ${CPP} -D__STDC__ -D__cplusplus -D_POSIX_SOURCE $include_path tmp.c >tmp.i\n+\t  then\n+\t    case $rel_source_file in\n+\t      stdio.h)\n+\t\tif grep _flsbuf <$abs_source_file >/dev/null ; then\n+\t\t  required_list=\"$required_list _flsbuf _filbuf\"\n+\t\tfi ;;\n+\t    esac\n+\t    cat $abs_source_file >tmp.c\n+#\t    echo Doing: \"$original_dir/scan-decls <tmp.i | $original_dir/patch-header $rel_source_file tmp.c $abs_target_file \\\"$required_list\\\"\"\n+\n+\t    $original_dir/scan-decls <tmp.i | \\\n+\t     $original_dir/patch-header $rel_source_file tmp.c $abs_target_file \"$required_list\"\n+\t  else\n+\t    echo \"${progname}: ${CPP} couldn't grok ${abs_source_file}\"\n+\t  fi\n+\t  done_files=\"${done_files} ${rel_source_file}\"\n+\tfi\n+      done\n+      rm -f tmp.c tmp.i\n+    fi\n+    # check for broken assert.h that needs stdio.h\n+    if test -f $abs_source_dir/assert.h -a \\! -f $abs_target_dir/assert.h \\\n+      && grep 'stderr' $abs_source_dir/assert.h >/dev/null\n+    then\n+      if grep 'include.*stdio.h' $abs_source_dir/assert.h >/dev/null\n+      then true\n+      else\n+\techo 'Fixing broken assert.h (needs stdio.h)'\n+\tcat $abs_source_dir/assert.h >$abs_target_dir/assert.h\n+\techo '#include <stdio.h>' >>$abs_target_dir/assert.h\n+      fi\n+    fi\n+    done_dirs=\"$done_dir $rel_source_dir\"\n+  done\n+fi\n+\n+for rel_source_file in unistd.h stdlib.h\n+do\n+  if echo \" $done_files \" | grep \" $rel_source_file \" >/dev/null\n+  then true\n+  else\n+    echo Adding missing $rel_source_file\n+    rel_source_ident=`echo $rel_source_file | tr ./- ___`\n+    required_list=`eval echo '${required_'${rel_source_ident}'-}'`\n+    cat >tmp.h <<EOF\n+#ifndef ${rel_source_ident}\n+#define ${rel_source_ident}\n+#endif\n+EOF\n+    $original_dir/patch-header $rel_source_file tmp.h $abs_target_dir/$rel_source_file \"$required_list\" </dev/null\n+    rm tmp.h\n+  fi\n+done\n+exit 0"}]}