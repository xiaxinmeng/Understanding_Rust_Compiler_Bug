{"sha": "f25d7e06e2327990e34b317761d4bfc92f523bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1ZDdlMDZlMjMyNzk5MGUzNGIzMTc3NjFkNGJmYzkyZjUyM2JjZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-01-22T16:05:20Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-01-22T16:05:20Z"}, "message": "re PR c++/81933 (Invalid \"constexpr call flows off the end of the function\" error)\n\n\tPR c++/81933\n\t* typeck2.c (split_nonconstant_init_1): Return false if we didn't\n\tsplit out anything.\n\t\n\t* g++.dg/cpp1y/constexpr-empty4.C: New test.\n\nFrom-SVN: r256951", "tree": {"sha": "e37113f1276ec56b84f64bd33054dfb5ba6e51ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37113f1276ec56b84f64bd33054dfb5ba6e51ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25d7e06e2327990e34b317761d4bfc92f523bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25d7e06e2327990e34b317761d4bfc92f523bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25d7e06e2327990e34b317761d4bfc92f523bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25d7e06e2327990e34b317761d4bfc92f523bcf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a18c14681b89fa111d2fcafc69c850d9c0a6a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a18c14681b89fa111d2fcafc69c850d9c0a6a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a18c14681b89fa111d2fcafc69c850d9c0a6a27"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "3cbb2a45c94525fb05fe6b68052567012046322c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f25d7e06e2327990e34b317761d4bfc92f523bcf", "patch": "@@ -1,7 +1,12 @@\n+2018-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/81933\n+\t* typeck2.c (split_nonconstant_init_1): Return false if we didn't\n+\tsplit out anything.\n+\t\n 2018-01-22  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/83895\n-\n \t* decl.c (grokdeclarator): Don't diagnose extra parens\n \ton typedefs.\n "}, {"sha": "8cb0e8811d355f5a7a8da917d6bd3616908f4fc6", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=f25d7e06e2327990e34b317761d4bfc92f523bcf", "patch": "@@ -725,6 +725,11 @@ split_nonconstant_init_1 (tree dest, tree init)\n \n   /* The rest of the initializer is now a constant. */\n   TREE_CONSTANT (init) = 1;\n+\n+  /* We didn't split out anything.  */\n+  if (num_split_elts == 0)\n+    return false;\n+\n   return complete_p && complete_ctor_at_level_p (TREE_TYPE (init),\n \t\t\t\t\t\t num_split_elts, inner_type);\n }"}, {"sha": "e046a97dd35b88e4c9492ec8cd118d57d8ca06b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f25d7e06e2327990e34b317761d4bfc92f523bcf", "patch": "@@ -1,3 +1,8 @@\n+2018-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/81933\n+\t* g++.dg/cpp1y/constexpr-empty4.C: New test.\n+\n 2018-01-22  Will Schmidt <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-abs-short-fwrap.c: Add xxspltib to"}, {"sha": "059220f82688a76061e208f995142e07eabe0c2f", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-empty4.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-empty4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25d7e06e2327990e34b317761d4bfc92f523bcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-empty4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-empty4.C?ref=f25d7e06e2327990e34b317761d4bfc92f523bcf", "patch": "@@ -0,0 +1,51 @@\n+// PR c++/81933\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+template <typename _Tp> struct __decay_and_strip { typedef _Tp __type; };\n+template <int> struct enable_if { typedef int type; };\n+template <typename _Head> struct _Head_base {\n+  constexpr _Head_base(_Head) {}\n+};\n+template <unsigned long, typename...> struct _Tuple_impl;\n+template <unsigned long _Idx, typename _Head, typename... _Tail>\n+struct _Tuple_impl<_Idx, _Head, _Tail...> : _Tuple_impl<1, _Tail...>, // { dg-warning \"direct base\" }\n+                                            _Head_base<_Head> {\n+  typedef _Tuple_impl<1, _Tail...> _Inherited;\n+  typedef _Head_base<_Head> _Base;\n+  constexpr _Tuple_impl(_Head __head, _Tail... __tail)\n+      : _Inherited(__tail...), _Base(__head) {}\n+  _Tuple_impl(const _Tuple_impl &) = default;\n+  _Tuple_impl(_Tuple_impl &&);\n+};\n+template <unsigned long _Idx, typename _Head>\n+struct _Tuple_impl<_Idx, _Head> : _Head_base<_Head> {\n+  typedef _Head_base<_Head> _Base;\n+  constexpr _Tuple_impl(_Head __head) : _Base(__head) {}\n+};\n+template <int> struct _TC {\n+  static constexpr bool _NotSameTuple() { return true; }\n+};\n+template <typename... _Elements> class tuple : _Tuple_impl<0, _Elements...> {\n+  typedef _Tuple_impl<0, _Elements...> _Inherited;\n+\n+public:\n+  template <typename... _UElements,\n+            enable_if<_TC<1>::_NotSameTuple()>::type = false>\n+  constexpr tuple(_UElements... __elements) : _Inherited(__elements...) {}\n+  tuple(const tuple &) = default;\n+};\n+template <typename... _Elements>\n+constexpr tuple<typename __decay_and_strip<_Elements>::__type...>\n+    make_tuple(_Elements... __args) {\n+  typedef tuple<typename __decay_and_strip<_Elements>::__type...> __result_type;\n+  return __result_type(__args...);\n+}\n+}\n+struct any_udt {};\n+template <typename... Tuples> constexpr auto flatten(Tuples... tuples) {\n+  auto all = std::make_tuple(tuples...);\n+  auto flat(all);\n+  return flat;\n+}\n+constexpr auto fail = flatten(any_udt{}, any_udt{});"}]}