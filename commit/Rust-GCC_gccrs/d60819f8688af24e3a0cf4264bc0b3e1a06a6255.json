{"sha": "d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwODE5Zjg2ODhhZjI0ZTNhMGNmNDI2NGJjMGIzZTFhMDZhNjI1NQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2008-04-17T06:49:16Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2008-04-17T06:49:16Z"}, "message": "fix SH long long compare\n\nFrom-SVN: r134380", "tree": {"sha": "904456220c567db29ff3e66eadb71b509ced5766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904456220c567db29ff3e66eadb71b509ced5766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/comments", "author": null, "committer": null, "parents": [{"sha": "ca4ceacbbb7fc11529779b585677026796fce2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4ceacbbb7fc11529779b585677026796fce2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4ceacbbb7fc11529779b585677026796fce2bc"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "4efd1c0ecc2b0bfb9b653964da6c75fba166857b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "patch": "@@ -1,3 +1,8 @@\n+2008-04-17  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/sh/sh.c (expand_cbranchdi4): Use original operands for\n+\tmsw_skip comparison.\n+\t\n 2008-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35739"}, {"sha": "6b20ee3071d66207a79b58bd851f68b88b9c4790", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "patch": "@@ -1685,6 +1685,14 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n     {\n       rtx taken_label = operands[3];\n \n+      /* Operands were possibly modified, but msw_skip doesn't expect this.\n+\t Always use the original ones.  */\n+      if (msw_taken != CODE_FOR_nothing)\n+\t{\n+\t  operands[1] = op1h;\n+\t  operands[2] = op2h;\n+\t}\n+\n       operands[3] = skip_label = gen_label_rtx ();\n       expand_cbranchsi4 (operands, msw_skip, msw_skip_prob);\n       operands[3] = taken_label;"}, {"sha": "4ac7a4440ef8fe17463b7218cfcbb10db95ebba3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "patch": "@@ -1,3 +1,7 @@\n+2008-04-17  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* gcc.dg/dicomp.c: New testcase. \n+\t\n 2008-04-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/35724"}, {"sha": "c650cb18d2b839a99c11ef8b22ae1b981ae7d9e8", "filename": "gcc/testsuite/gcc.dg/long-long-compare-1.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60819f8688af24e3a0cf4264bc0b3e1a06a6255/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c?ref=d60819f8688af24e3a0cf4264bc0b3e1a06a6255", "patch": "@@ -0,0 +1,126 @@\n+/* Problem only noticed on SH for -mcbranchdi DImode comparison with constants.\n+ * Target dependant failure but test valid for alls.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-options \"-O0 -mcbranchdi\" { target sh4-*-* } } */\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+int test2(long long n)\n+{\n+  if (n < 2)\n+    return 1;\n+  return 0;\n+}\n+\n+int test1(long long n)\n+{\n+  if (n < 1)\n+    return 1;\n+  return 0;\n+}\n+\n+int test0(long long n)\n+{\n+  if (n < 0)\n+    return 1;\n+  return 0;\n+}\n+\n+int test1n(long long n)\n+{\n+  if (n < -1LL)\n+    return 1;\n+  return 0;\n+}\n+\n+int test2n(long long n)\n+{\n+  if (n < -2LL)\n+    return 1;\n+  return 0;\n+}\n+\n+int main()\n+{\n+  if (test2n (-1LL))\n+    abort ();\n+\n+  if (test2n (-2LL))\n+    abort ();\n+\n+  if (test2n (0LL))\n+    abort ();\n+\n+  if (test2n (1LL))\n+    abort ();\n+\n+  if (test2n (2LL))\n+    abort ();\n+ \n+  if (test1n (-1LL))\n+    abort ();\n+\n+  if (!test1n (-2LL))\n+    abort ();\n+\n+  if (test1n (0LL))\n+    abort ();\n+\n+  if (test1n (1LL))\n+    abort ();\n+\n+  if (test1n (2LL))\n+    abort ();\n+\n+  if (!test0 (-1LL))\n+    abort ();\n+\n+  if (!test0 (-2LL))\n+    abort ();\n+\n+  if (test0 (0LL))\n+    abort ();\n+\n+  if (test0 (1LL))\n+    abort ();\n+\n+  if (test0 (2LL))\n+    abort ();\n+\n+  if (!test2 (-1LL))\n+    abort ();\n+\n+  if (!test2 (-2LL))\n+    abort ();\n+\n+  if (!test2 (0LL))\n+    abort ();\n+\n+  if (!test2 (1LL))\n+    abort ();\n+\n+  if (test2 (2LL))\n+    abort ();\n+\n+  if (!test1 (-1LL))\n+    abort ();\n+\n+  if (!test1 (-2LL))\n+    abort ();\n+\n+  if (!test1 (0LL))\n+    abort ();\n+\n+  if (test1 (1LL))\n+    abort ();\n+\n+  if (test1 (2LL))\n+    abort ();\n+\n+  exit (0);\n+}\n+\n+\n+"}]}