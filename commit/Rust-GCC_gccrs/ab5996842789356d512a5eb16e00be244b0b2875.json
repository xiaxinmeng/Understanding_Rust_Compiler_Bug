{"sha": "ab5996842789356d512a5eb16e00be244b0b2875", "node_id": "C_kwDOANBUbNoAKGFiNTk5Njg0Mjc4OTM1NmQ1MTJhNWViMTZlMDBiZTI0NGIwYjI4NzU", "commit": {"author": {"name": "Etienne Servais", "email": "servais@adacore.com", "date": "2021-11-05T13:25:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:39Z"}, "message": "[Ada] Avoid duplication for Sets functions\n\ngcc/ada/\n\n\t* libgnat/a-cbhase.adb, libgnat/a-cborse.adb,\n\tlibgnat/a-cihase.adb, libgnat/a-ciorse.adb,\n\tlibgnat/a-cohase.adb, libgnat/a-coorse.adb\n\t(Constant_Reference,Reference_Preserving_Key): Refactor using\n\tthe equivalence stated in the RM.", "tree": {"sha": "6c03ee94101ff9fc00b15dddb6b44c5698764a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c03ee94101ff9fc00b15dddb6b44c5698764a73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab5996842789356d512a5eb16e00be244b0b2875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5996842789356d512a5eb16e00be244b0b2875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5996842789356d512a5eb16e00be244b0b2875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5996842789356d512a5eb16e00be244b0b2875/comments", "author": {"login": "vser1", "id": 8308457, "node_id": "MDQ6VXNlcjgzMDg0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8308457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vser1", "html_url": "https://github.com/vser1", "followers_url": "https://api.github.com/users/vser1/followers", "following_url": "https://api.github.com/users/vser1/following{/other_user}", "gists_url": "https://api.github.com/users/vser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vser1/subscriptions", "organizations_url": "https://api.github.com/users/vser1/orgs", "repos_url": "https://api.github.com/users/vser1/repos", "events_url": "https://api.github.com/users/vser1/events{/privacy}", "received_events_url": "https://api.github.com/users/vser1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659e775a17415341113dcbd4b23f52d6cd63f502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659e775a17415341113dcbd4b23f52d6cd63f502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659e775a17415341113dcbd4b23f52d6cd63f502"}], "stats": {"total": 244, "additions": 36, "deletions": 208}, "files": [{"sha": "0c20341ec6a0da9c58ce5dfee7d22cd23894bb2f", "filename": "gcc/ada/libgnat/a-cbhase.adb", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -1629,26 +1629,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Count_Type :=\n-                  Key_Keys.Find (Container'Unrestricted_Access.all, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = 0 then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            N : Node_Type renames Container.Nodes (Node);\n-            TC : constant Tamper_Counts_Access :=\n-              Container.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => N.Element'Unchecked_Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -1836,29 +1824,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Count_Type := Key_Keys.Find (Container, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = 0 then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            P : constant Cursor := Find (Container, Key);\n-         begin\n-            return R : constant Reference_Type :=\n-              (Element => Container.Nodes (Node).Element'Unrestricted_Access,\n-               Control =>\n-                 (Controlled with\n-                    Container.TC'Unrestricted_Access,\n-                    Container'Unrestricted_Access,\n-                    Index  => Key_Keys.Index (Container, Key),\n-                    Old_Pos => P,\n-                    Old_Hash => Hash (Key)))\n-            do\n-               Busy (Container.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -------------"}, {"sha": "0328b16f2660af2ed10ee8bef528c2f8ece7bef1", "filename": "gcc/ada/libgnat/a-cborse.adb", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -739,25 +739,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Count_Type := Key_Keys.Find (Container, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = 0 then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            N : Node_Type renames Container.Nodes (Node);\n-            TC : constant Tamper_Counts_Access :=\n-              Container.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => N.Element'Unchecked_Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -960,28 +949,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Count_Type := Key_Keys.Find (Container, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = 0 then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            N : Node_Type renames Container.Nodes (Node);\n-         begin\n-            return R : constant Reference_Type :=\n-                         (Element => N.Element'Unchecked_Access,\n-                          Control =>\n-                            (Controlled with\n-                              Container.TC'Unrestricted_Access,\n-                              Container => Container'Unchecked_Access,\n-                               Pos      => Find (Container, Key),\n-                               Old_Key  => new Key_Type'(Key)))\n-            do\n-               Busy (Container.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -------------"}, {"sha": "79a1fe664aece4cf42b4b3f84ceaba407fc2d713", "filename": "gcc/ada/libgnat/a-cihase.adb", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -2063,29 +2063,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         HT   : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n-         Node : constant Node_Access := Key_Keys.Find (HT, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         if Checks and then Node.Element = null then\n-            raise Program_Error with \"Node has no element\";\n-         end if;\n-\n-         declare\n-            TC : constant Tamper_Counts_Access :=\n-              HT.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => Node.Element.all'Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -2280,34 +2265,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         if Checks and then Node.Element = null then\n-            raise Program_Error with \"Node has no element\";\n-         end if;\n-\n-         declare\n-            HT : Hash_Table_Type renames Container.HT;\n-            P  : constant Cursor := Find (Container, Key);\n-         begin\n-            return R : constant Reference_Type :=\n-                         (Element => Node.Element.all'Access,\n-                          Control =>\n-                            (Controlled with\n-                              HT.TC'Unrestricted_Access,\n-                              Container => Container'Unchecked_Access,\n-                              Index     => HT_Ops.Index (HT, P.Node),\n-                              Old_Pos   => P,\n-                              Old_Hash  => Hash (Key)))\n-            do\n-               Busy (HT.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -------------"}, {"sha": "4af4f89f855c6d13f885f0bdafa380cc77015c0f", "filename": "gcc/ada/libgnat/a-ciorse.adb", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -771,29 +771,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         if Checks and then Node.Element = null then\n-            raise Program_Error with \"Node has no element\";\n-         end if;\n-\n-         declare\n-            Tree : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n-            TC : constant Tamper_Counts_Access :=\n-              Tree.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => Node.Element.all'Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -1029,32 +1014,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         if Checks and then Node.Element = null then\n-            raise Program_Error with \"Node has no element\";\n-         end if;\n-\n-         declare\n-            Tree : Tree_Type renames Container.Tree;\n-         begin\n-            return R : constant Reference_Type :=\n-              (Element  => Node.Element.all'Unchecked_Access,\n-               Control =>\n-                 (Controlled with\n-                    Tree.TC'Unrestricted_Access,\n-                    Container => Container'Unchecked_Access,\n-                    Pos       => Find (Container, Key),\n-                    Old_Key   => new Key_Type'(Key)))\n-            do\n-               Busy (Tree.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -----------------------------------"}, {"sha": "6a4c12146727f6d1c9c91d9838c87e9e3deff7a9", "filename": "gcc/ada/libgnat/a-cohase.adb", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -1876,25 +1876,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         HT   : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n-         Node : constant Node_Access := Key_Keys.Find (HT, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         declare\n-            TC : constant Tamper_Counts_Access :=\n-              HT.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => Node.Element'Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -2087,30 +2076,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            HT : Hash_Table_Type renames Container.HT;\n-            P  : constant Cursor := Find (Container, Key);\n-         begin\n-            return R : constant Reference_Type :=\n-                         (Element => Node.Element'Access,\n-                          Control =>\n-                            (Controlled with\n-                              HT.TC'Unrestricted_Access,\n-                              Container'Unrestricted_Access,\n-                              Index    => HT_Ops.Index (HT, P.Node),\n-                              Old_Pos  => P,\n-                              Old_Hash => Hash (Key)))\n-            do\n-               Busy (HT.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -------------"}, {"sha": "0cb85c5dba546cca51034e6b539de47d7b0c49ef", "filename": "gcc/ada/libgnat/a-coorse.adb", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5996842789356d512a5eb16e00be244b0b2875/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.adb?ref=ab5996842789356d512a5eb16e00be244b0b2875", "patch": "@@ -693,25 +693,14 @@ is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         declare\n-            Tree : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n-            TC : constant Tamper_Counts_Access :=\n-              Tree.TC'Unrestricted_Access;\n-         begin\n-            return R : constant Constant_Reference_Type :=\n-              (Element => Node.Element'Access,\n-               Control => (Controlled with TC))\n-            do\n-               Busy (TC.all);\n-            end return;\n-         end;\n+         return Constant_Reference (Container, Position);\n       end Constant_Reference;\n \n       --------------\n@@ -915,28 +904,14 @@ is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n+         Position : constant Cursor := Find (Container, Key);\n \n       begin\n-         if Checks and then Node = null then\n+         if Checks and then Position = No_Element then\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         declare\n-            Tree : Tree_Type renames Container.Tree;\n-         begin\n-            return R : constant Reference_Type :=\n-              (Element  => Node.Element'Access,\n-                 Control =>\n-                   (Controlled with\n-                     Tree.TC'Unrestricted_Access,\n-                     Container => Container'Unchecked_Access,\n-                     Pos       => Find (Container, Key),\n-                     Old_Key   => new Key_Type'(Key)))\n-            do\n-               Busy (Tree.TC);\n-            end return;\n-         end;\n+         return Reference_Preserving_Key (Container, Position);\n       end Reference_Preserving_Key;\n \n       -------------"}]}