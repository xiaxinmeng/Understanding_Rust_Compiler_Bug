{"sha": "df32d2ce42d7607e7f189bab047762bb16d8d2c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzMmQyY2U0MmQ3NjA3ZTdmMTg5YmFiMDQ3NzYyYmIxNmQ4ZDJjOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@versicolor.rutgers.edu", "date": "2000-01-21T20:57:00Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-21T20:57:00Z"}, "message": "buffer.h: PROTO -> PARAMS.\n\n        * buffer.h: PROTO -> PARAMS.\n        * check-init.c: Likewise.\n        * class.c: Likewise.\n        * constants.c: Likewise.\n        * convert.h: Likewise.\n        * decl.c: Likewise.\n        * except.c: Likewise.\n        * expr.c: Likewise.\n        * gjavah.c: Likewise.\n        * java-except.h: Likewise.\n        * java-tree.h: Likewise.\n        * jcf-depend.c: Likewise.\n        * jcf-dump.c: Likewise.\n        * jcf-parse.c: Likewise.\n        * jcf-path.c: Likewise.\n        * jcf-reader.c: Likewise.\n        * jcf-write.c: Likewise.\n        * jcf.h: Likewise.\n        * jv-scan.c: Likewise.\n        * jvgenmain.c: Likewise.\n        * jvspec.c: Likewise.\n        * lang.c: Likewise.\n        * lex.c: Likewise.\n        * lex.h: Likewise.\n        * parse-scan.y: Likewise.\n        * parse.h: Likewise.\n        * parse.y: Likewise.\n        * typeck.c: Likewise.\n        * verify.c: Likewise.\n        * xref.c: Likewise.\n        * xref.h: Likewise.\n        * zextract.c: Likewise.\n        * zipfile.h: Likewise.\n\nFrom-SVN: r31550", "tree": {"sha": "e8ac15eb4e2b1725da0aa68199c3eb0515ab1a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ac15eb4e2b1725da0aa68199c3eb0515ab1a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df32d2ce42d7607e7f189bab047762bb16d8d2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df32d2ce42d7607e7f189bab047762bb16d8d2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df32d2ce42d7607e7f189bab047762bb16d8d2c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df32d2ce42d7607e7f189bab047762bb16d8d2c8/comments", "author": null, "committer": null, "parents": [{"sha": "7652adb5c699caf28e8139289e6cd8a2f203c0f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7652adb5c699caf28e8139289e6cd8a2f203c0f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7652adb5c699caf28e8139289e6cd8a2f203c0f8"}], "stats": {"total": 1766, "additions": 901, "deletions": 865}, "files": [{"sha": "e7162784375f617c72a048c95f5003fec6c32132", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,3 +1,39 @@\n+Fri Jan 21 15:37:29 2000  Kaveh R. Ghazi  <ghazi@versicolor.rutgers.edu>\n+\n+\t* buffer.h: PROTO -> PARAMS.\n+\t* check-init.c: Likewise.\n+\t* class.c: Likewise.\n+\t* constants.c: Likewise.\n+\t* convert.h: Likewise.\n+\t* decl.c: Likewise.\n+\t* except.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* gjavah.c: Likewise.\n+\t* java-except.h: Likewise.\n+\t* java-tree.h: Likewise.\n+\t* jcf-depend.c: Likewise.\n+\t* jcf-dump.c: Likewise.\n+\t* jcf-parse.c: Likewise.\n+\t* jcf-path.c: Likewise.\n+\t* jcf-reader.c: Likewise.\n+\t* jcf-write.c: Likewise.\n+\t* jcf.h: Likewise.\n+\t* jv-scan.c: Likewise.\n+\t* jvgenmain.c: Likewise.\n+\t* jvspec.c: Likewise.\n+\t* lang.c: Likewise.\n+\t* lex.c: Likewise.\n+\t* lex.h: Likewise.\n+\t* parse-scan.y: Likewise.\n+\t* parse.h: Likewise.\n+\t* parse.y: Likewise.\n+\t* typeck.c: Likewise.\n+\t* verify.c: Likewise.\n+\t* xref.c: Likewise.\n+\t* xref.h: Likewise.\n+\t* zextract.c: Likewise.\n+\t* zipfile.h: Likewise.\n+\t\n Mon Jan 17 11:58:17 2000  Joerg Brunsmann  <joerg.brunsmann@fernuni-hagen.de>\n \n \t* parse.y (format_parameter:): Use final: rule instead of modifiers:."}, {"sha": "5ea0864e094e89c8502920858cdaebf6db595528", "filename": "gcc/java/buffer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuffer.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* A \"buffer\" utility type.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -43,4 +43,4 @@ struct buffer\n \n #define BUFFER_RESET(BUFP) ((BUFP)->ptr = (BUFP)->data)\n \n-extern void buffer_grow PROTO ((struct buffer*, int));\n+extern void buffer_grow PARAMS ((struct buffer*, int));"}, {"sha": "a202b45bbc5b9ccb397ce2bcec8a1e344fa78d74", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Code to test for \"definitive assignment\".\n \n-   Copyright (C) 1999  Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -97,12 +97,12 @@ static tree wfl;\n \n #define WORD_SIZE  ((unsigned int)(sizeof(word) * 8))\n \n-static void check_bool_init PROTO ((tree, words, words, words));\n-static void check_init PROTO ((tree, words));\n-static void check_cond_init PROTO ((tree, tree, tree, words, words, words));\n-static void check_bool2_init PROTO ((enum tree_code, tree, tree, words, words, words));\n+static void check_bool_init PARAMS ((tree, words, words, words));\n+static void check_init PARAMS ((tree, words));\n+static void check_cond_init PARAMS ((tree, tree, tree, words, words, words));\n+static void check_bool2_init PARAMS ((enum tree_code, tree, tree, words, words, words));\n struct alternatives;\n-static void done_alternative PROTO ((words, struct alternatives *));\n+static void done_alternative PARAMS ((words, struct alternatives *));\n \n #if 0\n #define ALLOC_WORDS(NUM) ((word*) xmalloc ((NUM) * sizeof (word)))"}, {"sha": "a441040411a7bc9232426126f29970ee561ad9b4", "filename": "gcc/java/class.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to building classes and their related objects.\n-   Copyright (C) 1996, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,18 +36,18 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"output.h\"\n #include \"parse.h\"\n \n-static tree mangle_class_field PROTO ((tree class));\n-static tree make_method_value PROTO ((tree));\n-static tree build_java_method_type PROTO ((tree, tree, int));\n-static int32 hashUtf8String PROTO ((const char *, int));\n-static tree make_field_value PROTO ((tree));\n-static tree get_dispatch_vector PROTO ((tree));\n-static tree get_dispatch_table PROTO ((tree, tree));\n-static void append_gpp_mangled_type PROTO ((struct obstack *, tree));\n-static tree mangle_static_field PROTO ((tree));\n-static void add_interface_do PROTO ((tree, tree, int));\n-static tree maybe_layout_super_class PROTO ((tree, tree));\n-static int assume_compiled PROTO ((const char *));\n+static tree mangle_class_field PARAMS ((tree class));\n+static tree make_method_value PARAMS ((tree));\n+static tree build_java_method_type PARAMS ((tree, tree, int));\n+static int32 hashUtf8String PARAMS ((const char *, int));\n+static tree make_field_value PARAMS ((tree));\n+static tree get_dispatch_vector PARAMS ((tree));\n+static tree get_dispatch_table PARAMS ((tree, tree));\n+static void append_gpp_mangled_type PARAMS ((struct obstack *, tree));\n+static tree mangle_static_field PARAMS ((tree));\n+static void add_interface_do PARAMS ((tree, tree, int));\n+static tree maybe_layout_super_class PARAMS ((tree, tree));\n+static int assume_compiled PARAMS ((const char *));\n \n static rtx registerClass_libfunc;\n \n@@ -77,7 +77,7 @@ typedef struct assume_compiled_node_struct\n } assume_compiled_node;\n \n static assume_compiled_node *find_assume_compiled_node\n-\t\t\tPROTO ((assume_compiled_node *, const char *));\n+\t\t\tPARAMS ((assume_compiled_node *, const char *));\n \n /* This is the root of the include/exclude tree.  */\n \n@@ -1892,7 +1892,7 @@ register_class ()\n void\n emit_register_classes ()\n {\n-  extern tree get_file_function_name PROTO((int));\n+  extern tree get_file_function_name PARAMS ((int));\n   tree init_name = get_file_function_name ('I');\n   tree init_type = build_function_type (void_type_node, end_params_node);\n   tree init_decl;"}, {"sha": "e426515fee3f3ea60d00ad71d49ead2249d66387", "filename": "gcc/java/constants.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Handle the constant pool of the Java(TM) Virtual Machine.\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 98-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -30,11 +30,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n extern struct obstack permanent_obstack;\n \n-static void set_constant_entry PROTO ((CPool *, int, int, jword));\n-static int find_class_or_string_constant PROTO ((CPool *, int, tree));\n-static int find_name_and_type_constant PROTO ((CPool *, tree, tree));\n-static tree get_tag_node PROTO ((int));\n-static tree build_constant_data_ref PROTO ((void));\n+static void set_constant_entry PARAMS ((CPool *, int, int, jword));\n+static int find_class_or_string_constant PARAMS ((CPool *, int, tree));\n+static int find_name_and_type_constant PARAMS ((CPool *, tree, tree));\n+static tree get_tag_node PARAMS ((int));\n+static tree build_constant_data_ref PARAMS ((void));\n \n /* Set the INDEX'th constant in CPOOL to have the given TAG and VALUE. */\n "}, {"sha": "469e27a45f2cbaecc214f43a45a007c9b280d54b", "filename": "gcc/java/convert.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fconvert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fconvert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconvert.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n \n /* Definition of conversion functions.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -21,8 +21,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Written by Jeffrey Hsu <hsu@cygnus.com> */\n \n-extern tree convert_to_boolean PROTO ((tree, tree));\n-extern tree convert_to_char    PROTO ((tree, tree));\n-extern tree convert_to_integer PROTO ((tree type, tree expr));\n-extern tree convert_to_real PROTO ((tree type, tree expr));\n-extern tree convert_to_pointer PROTO ((tree type, tree expr));\n+extern tree convert_to_boolean PARAMS ((tree, tree));\n+extern tree convert_to_char    PARAMS ((tree, tree));\n+extern tree convert_to_integer PARAMS ((tree type, tree expr));\n+extern tree convert_to_real PARAMS ((tree type, tree expr));\n+extern tree convert_to_pointer PARAMS ((tree type, tree expr));"}, {"sha": "55132035563e56c7e394ba01d38a59be082795fb", "filename": "gcc/java/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,7 +1,7 @@\n /* Process declarations and variables for the GNU compiler for the\n    Java(TM) language.\n \n-   Copyright (C) 1996, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,10 +36,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"except.h\"\n #include \"defaults.h\"\n \n-static tree push_jvm_slot PROTO ((int, tree));\n-static tree lookup_name_current_level PROTO ((tree));\n-static tree push_promoted_type PROTO ((const char *, tree));\n-static struct binding_level *make_binding_level PROTO ((void));\n+static tree push_jvm_slot PARAMS ((int, tree));\n+static tree lookup_name_current_level PARAMS ((tree));\n+static tree push_promoted_type PARAMS ((const char *, tree));\n+static struct binding_level *make_binding_level PARAMS ((void));\n \n #ifndef INT_TYPE_SIZE\n #define INT_TYPE_SIZE BITS_PER_WORD"}, {"sha": "f44f07270f8a1b822c6b65626b512f593673f60d", "filename": "gcc/java/except.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Handle exceptions for GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 98-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -37,12 +37,12 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"eh-common.h\"\n #include \"toplev.h\"\n \n-static void expand_start_java_handler PROTO ((struct eh_range *));\n-static void expand_end_java_handler PROTO ((struct eh_range *));\n-static struct eh_range *find_handler_in_range PROTO ((int, struct eh_range *,\n+static void expand_start_java_handler PARAMS ((struct eh_range *));\n+static void expand_end_java_handler PARAMS ((struct eh_range *));\n+static struct eh_range *find_handler_in_range PARAMS ((int, struct eh_range *,\n \t\t\t\t\t\t      struct eh_range *));\n-static void link_handler PROTO ((struct eh_range *, struct eh_range *));\n-static void check_start_handlers PROTO ((struct eh_range *, int));\n+static void link_handler PARAMS ((struct eh_range *, struct eh_range *));\n+static void check_start_handlers PARAMS ((struct eh_range *, int));\n \n extern struct obstack permanent_obstack;\n "}, {"sha": "430db4ab178728a756289589913088fd3adc1998", "filename": "gcc/java/expr.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Process expressions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -41,44 +41,44 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"except.h\"\n #include \"defaults.h\"\n \n-static void flush_quick_stack PROTO ((void));\n-static void push_value PROTO ((tree));\n-static tree pop_value PROTO ((tree));\n-static void java_stack_swap PROTO ((void));\n-static void java_stack_dup PROTO ((int, int));\n-static void build_java_athrow PROTO ((tree));\n-static void build_java_jsr PROTO ((tree, tree));\n-static void build_java_ret PROTO ((tree));\n-static void expand_java_multianewarray PROTO ((tree, int));\n-static void expand_java_arraystore PROTO ((tree));\n-static void expand_java_arrayload PROTO ((tree));\n-static void expand_java_array_length PROTO ((void));\n-static tree build_java_monitor PROTO ((tree, tree));\n-static void expand_java_pushc PROTO ((int, tree));\n-static void expand_java_return PROTO ((tree));\n-static void expand_java_NEW PROTO ((tree));\n-static void expand_java_INSTANCEOF PROTO ((tree));\n-static void expand_java_CHECKCAST PROTO ((tree));\n-static void expand_iinc PROTO ((unsigned int, int, int));\n-static void expand_java_binop PROTO ((tree, enum tree_code));\n-static void note_label PROTO ((int, int));\n-static void expand_compare PROTO ((enum tree_code, tree, tree, int));\n-static void expand_test PROTO ((enum tree_code, tree, int));\n-static void expand_cond PROTO ((enum tree_code, tree, int));\n-static void expand_java_goto PROTO ((int));\n+static void flush_quick_stack PARAMS ((void));\n+static void push_value PARAMS ((tree));\n+static tree pop_value PARAMS ((tree));\n+static void java_stack_swap PARAMS ((void));\n+static void java_stack_dup PARAMS ((int, int));\n+static void build_java_athrow PARAMS ((tree));\n+static void build_java_jsr PARAMS ((tree, tree));\n+static void build_java_ret PARAMS ((tree));\n+static void expand_java_multianewarray PARAMS ((tree, int));\n+static void expand_java_arraystore PARAMS ((tree));\n+static void expand_java_arrayload PARAMS ((tree));\n+static void expand_java_array_length PARAMS ((void));\n+static tree build_java_monitor PARAMS ((tree, tree));\n+static void expand_java_pushc PARAMS ((int, tree));\n+static void expand_java_return PARAMS ((tree));\n+static void expand_java_NEW PARAMS ((tree));\n+static void expand_java_INSTANCEOF PARAMS ((tree));\n+static void expand_java_CHECKCAST PARAMS ((tree));\n+static void expand_iinc PARAMS ((unsigned int, int, int));\n+static void expand_java_binop PARAMS ((tree, enum tree_code));\n+static void note_label PARAMS ((int, int));\n+static void expand_compare PARAMS ((enum tree_code, tree, tree, int));\n+static void expand_test PARAMS ((enum tree_code, tree, int));\n+static void expand_cond PARAMS ((enum tree_code, tree, int));\n+static void expand_java_goto PARAMS ((int));\n #if 0\n-static void expand_java_call PROTO ((int, int));\n-static void expand_java_ret PROTO ((tree)); \n+static void expand_java_call PARAMS ((int, int));\n+static void expand_java_ret PARAMS ((tree)); \n #endif\n-static tree pop_arguments PROTO ((tree)); \n-static void expand_invoke PROTO ((int, int, int)); \n-static void expand_java_field_op PROTO ((int, int, int)); \n-static void java_push_constant_from_pool PROTO ((struct JCF *, int)); \n-static void java_stack_pop PROTO ((int)); \n-static tree build_java_throw_out_of_bounds_exception PROTO ((tree)); \n-static tree build_java_check_indexed_type PROTO ((tree, tree)); \n-static tree java_array_data_offset PROTO ((tree)); \n-static tree case_identity PROTO ((tree, tree)); \n+static tree pop_arguments PARAMS ((tree)); \n+static void expand_invoke PARAMS ((int, int, int)); \n+static void expand_java_field_op PARAMS ((int, int, int)); \n+static void java_push_constant_from_pool PARAMS ((struct JCF *, int)); \n+static void java_stack_pop PARAMS ((int)); \n+static tree build_java_throw_out_of_bounds_exception PARAMS ((tree)); \n+static tree build_java_check_indexed_type PARAMS ((tree, tree)); \n+static tree java_array_data_offset PARAMS ((tree)); \n+static tree case_identity PARAMS ((tree, tree)); \n  \n static tree operand_type[59];\n extern struct obstack permanent_obstack;"}, {"sha": "9955fbfe5f1dbd5f70d088a615ce701ae60415c4", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -107,35 +107,35 @@ struct method_name\n /* List of method names we've seen.  */\n static struct method_name *method_name_list;\n \n-static void print_field_info PROTO ((FILE*, JCF*, int, int, JCF_u2));\n-static void print_mangled_classname PROTO ((FILE*, JCF*, const char*, int));\n-static int  print_cxx_classname PROTO ((FILE*, const char*, JCF*, int));\n-static void print_method_info PROTO ((FILE*, JCF*, int, int, JCF_u2));\n-static void print_c_decl PROTO ((FILE*, JCF*, int, int, int, const char *));\n-static void print_stub PROTO ((FILE*, JCF*, int, int, int, const char *));\n-static void print_full_cxx_name PROTO ((FILE*, JCF*, int, int, int, const char *));\n-static void decompile_method PROTO ((FILE*, JCF*, int));\n-static void add_class_decl PROTO ((FILE*, JCF*, JCF_u2));\n-\n-static int java_float_finite PROTO ((jfloat));\n-static int java_double_finite PROTO ((jdouble));\n-static void print_name PROTO ((FILE *, JCF *, int));\n-static void print_base_classname PROTO ((FILE *, JCF *, int));\n-static int utf8_cmp PROTO ((const unsigned char *, int, const char *));\n-static const char *cxx_keyword_subst PROTO ((const unsigned char *, int));\n-static void generate_access PROTO ((FILE *, JCF_u2));\n-static int name_is_method_p PROTO ((const unsigned char *, int));\n-static char *get_field_name PROTO ((JCF *, int, JCF_u2));\n-static void print_field_name PROTO ((FILE *, JCF *, int, JCF_u2));\n-static const unsigned char *super_class_name PROTO ((JCF *, int *));\n-static void print_include PROTO ((FILE *, const unsigned char *, int));\n+static void print_field_info PARAMS ((FILE*, JCF*, int, int, JCF_u2));\n+static void print_mangled_classname PARAMS ((FILE*, JCF*, const char*, int));\n+static int  print_cxx_classname PARAMS ((FILE*, const char*, JCF*, int));\n+static void print_method_info PARAMS ((FILE*, JCF*, int, int, JCF_u2));\n+static void print_c_decl PARAMS ((FILE*, JCF*, int, int, int, const char *));\n+static void print_stub PARAMS ((FILE*, JCF*, int, int, int, const char *));\n+static void print_full_cxx_name PARAMS ((FILE*, JCF*, int, int, int, const char *));\n+static void decompile_method PARAMS ((FILE*, JCF*, int));\n+static void add_class_decl PARAMS ((FILE*, JCF*, JCF_u2));\n+\n+static int java_float_finite PARAMS ((jfloat));\n+static int java_double_finite PARAMS ((jdouble));\n+static void print_name PARAMS ((FILE *, JCF *, int));\n+static void print_base_classname PARAMS ((FILE *, JCF *, int));\n+static int utf8_cmp PARAMS ((const unsigned char *, int, const char *));\n+static const char *cxx_keyword_subst PARAMS ((const unsigned char *, int));\n+static void generate_access PARAMS ((FILE *, JCF_u2));\n+static int name_is_method_p PARAMS ((const unsigned char *, int));\n+static char *get_field_name PARAMS ((JCF *, int, JCF_u2));\n+static void print_field_name PARAMS ((FILE *, JCF *, int, JCF_u2));\n+static const unsigned char *super_class_name PARAMS ((JCF *, int *));\n+static void print_include PARAMS ((FILE *, const unsigned char *, int));\n static const unsigned char *decode_signature_piece\n-  PROTO ((FILE *, const unsigned char *, const unsigned char *, int *));\n-static void print_class_decls PROTO ((FILE *, JCF *, int));\n-static void usage PROTO ((void)) ATTRIBUTE_NORETURN;\n-static void help PROTO ((void)) ATTRIBUTE_NORETURN;\n-static void java_no_argument PROTO ((const char *)) ATTRIBUTE_NORETURN;\n-static void version PROTO ((void)) ATTRIBUTE_NORETURN;\n+  PARAMS ((FILE *, const unsigned char *, const unsigned char *, int *));\n+static void print_class_decls PARAMS ((FILE *, JCF *, int));\n+static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void java_no_argument PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n+static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n JCF_u2 current_field_name;\n JCF_u2 current_field_value;\n@@ -1100,9 +1100,9 @@ struct namelet\n   struct namelet *next;\n };\n \n-static void add_namelet PROTO ((const unsigned char *,\n+static void add_namelet PARAMS ((const unsigned char *,\n \t\t\t\tconst unsigned char *, struct namelet *));\n-static void print_namelet PROTO ((FILE *, struct namelet *, int));\n+static void print_namelet PARAMS ((FILE *, struct namelet *, int));\n \n /* The special root namelet.  */\n static struct namelet root ="}, {"sha": "49ef54b0278ecbe46133abeebf9d226a09b0d9af", "filename": "gcc/java/java-except.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjava-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjava-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-except.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for exception handling for use by the GNU compiler\n    for the Java(TM) language compiler.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 98-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -54,18 +54,18 @@ extern struct eh_range whole_range;\n \n #define NULL_EH_RANGE (&whole_range)\n \n-extern struct eh_range * find_handler PROTO ((int));\n+extern struct eh_range * find_handler PARAMS ((int));\n \n-extern void method_init_exceptions PROTO ((void));\n+extern void method_init_exceptions PARAMS ((void));\n \n-extern void emit_handlers PROTO ((void));\n+extern void emit_handlers PARAMS ((void));\n \n-extern void maybe_start_try PROTO ((int));\n+extern void maybe_start_try PARAMS ((int));\n \n-extern void maybe_end_try PROTO ((int));\n+extern void maybe_end_try PARAMS ((int));\n \n-extern void add_handler PROTO ((int, int, tree, tree));\n+extern void add_handler PARAMS ((int, int, tree, tree));\n \n-extern void handle_nested_ranges PROTO ((void));\n+extern void handle_nested_ranges PARAMS ((void));\n \n-extern void expand_resume_after_catch PROTO ((void));\n+extern void expand_resume_after_catch PARAMS ((void));"}, {"sha": "a8370c4db302a99e139d8938fb982a05e1787c4e", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 148, "deletions": 148, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for parsing and type checking for the GNU compiler for\n    the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 98-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -479,170 +479,170 @@ struct lang_type\n #define JCF_u4 unsigned long\n #define JCF_u2 unsigned short\n \n-extern void add_assume_compiled PROTO ((const char *, int));\n-extern tree lookup_class PROTO ((tree));\n-extern tree lookup_java_constructor PROTO ((tree, tree));\n-extern tree lookup_java_method PROTO ((tree, tree, tree));\n-extern tree lookup_argument_method PROTO ((tree, tree, tree));\n-extern tree promote_type PROTO ((tree));\n-extern tree get_constant PROTO ((struct JCF*, int));\n-extern tree get_name_constant PROTO ((struct JCF*, int));\n-extern tree get_class_constant PROTO ((struct JCF*, int));\n-extern tree parse_signature PROTO ((struct JCF *jcf, int sig_index));\n-extern void jcf_parse PROTO ((struct JCF*));\n-extern tree add_field PROTO ((tree, tree, tree, int));\n-extern tree add_method PROTO ((tree, int, tree, tree));\n-extern tree add_method_1 PROTO ((tree, int, tree, tree));\n-extern tree make_class PROTO ((void));\n-extern tree push_class PROTO ((tree, tree));\n-extern tree unmangle_classname PROTO ((const char *name, int name_length));\n-extern tree parse_signature_string PROTO ((const unsigned char *, int));\n-extern tree get_type_from_signature PROTO ((tree));\n-extern void layout_class PROTO ((tree));\n-extern tree layout_class_method PROTO ((tree, tree, tree, tree));\n-extern void layout_class_methods PROTO ((tree));\n-extern tree build_class_ref PROTO ((tree));\n-extern tree build_dtable_decl PROTO ((tree));\n-extern tree build_internal_class_name PROTO ((tree));\n-extern tree build_constants_constructor PROTO ((void));\n-extern tree build_ref_from_constant_pool PROTO ((int));\n-extern tree build_utf8_ref PROTO ((tree));\n-extern tree ident_subst PROTO ((const char*, int,\n+extern void add_assume_compiled PARAMS ((const char *, int));\n+extern tree lookup_class PARAMS ((tree));\n+extern tree lookup_java_constructor PARAMS ((tree, tree));\n+extern tree lookup_java_method PARAMS ((tree, tree, tree));\n+extern tree lookup_argument_method PARAMS ((tree, tree, tree));\n+extern tree promote_type PARAMS ((tree));\n+extern tree get_constant PARAMS ((struct JCF*, int));\n+extern tree get_name_constant PARAMS ((struct JCF*, int));\n+extern tree get_class_constant PARAMS ((struct JCF*, int));\n+extern tree parse_signature PARAMS ((struct JCF *jcf, int sig_index));\n+extern void jcf_parse PARAMS ((struct JCF*));\n+extern tree add_field PARAMS ((tree, tree, tree, int));\n+extern tree add_method PARAMS ((tree, int, tree, tree));\n+extern tree add_method_1 PARAMS ((tree, int, tree, tree));\n+extern tree make_class PARAMS ((void));\n+extern tree push_class PARAMS ((tree, tree));\n+extern tree unmangle_classname PARAMS ((const char *name, int name_length));\n+extern tree parse_signature_string PARAMS ((const unsigned char *, int));\n+extern tree get_type_from_signature PARAMS ((tree));\n+extern void layout_class PARAMS ((tree));\n+extern tree layout_class_method PARAMS ((tree, tree, tree, tree));\n+extern void layout_class_methods PARAMS ((tree));\n+extern tree build_class_ref PARAMS ((tree));\n+extern tree build_dtable_decl PARAMS ((tree));\n+extern tree build_internal_class_name PARAMS ((tree));\n+extern tree build_constants_constructor PARAMS ((void));\n+extern tree build_ref_from_constant_pool PARAMS ((int));\n+extern tree build_utf8_ref PARAMS ((tree));\n+extern tree ident_subst PARAMS ((const char*, int,\n \t\t\t\tconst char*, int, int, const char*));\n-extern tree identifier_subst PROTO ((const tree,\n+extern tree identifier_subst PARAMS ((const tree,\n \t\t\t\t     const char *, int, int, const char *));\n-extern tree build_java_signature PROTO ((tree));\n-extern tree build_java_argument_signature PROTO ((tree));\n-extern void set_java_signature PROTO ((tree, tree));\n-extern tree build_static_field_ref PROTO ((tree));\n-extern tree build_address_of PROTO ((tree));\n-extern tree find_local_variable PROTO ((int index, tree type, int pc));\n-extern tree find_stack_slot PROTO ((int index, tree type));\n-extern tree build_prim_array_type PROTO ((tree, HOST_WIDE_INT));\n-extern tree build_java_array_type PROTO ((tree, HOST_WIDE_INT));\n-extern int is_compiled_class PROTO ((tree));\n-extern tree mangled_classname PROTO ((const char*, tree));\n-extern tree lookup_label PROTO ((int));\n-extern tree pop_type_0 PROTO ((tree));\n-extern tree pop_type PROTO ((tree));\n-extern void pop_argument_types PROTO ((tree));\n-extern tree decode_newarray_type PROTO ((int));\n-extern tree lookup_field PROTO ((tree*, tree));\n-extern int is_array_type_p PROTO ((tree));\n-extern HOST_WIDE_INT java_array_type_length PROTO ((tree));\n-extern int read_class PROTO ((tree));\n-extern void load_class PROTO ((tree, int));\n-\n-extern tree lookup_name PROTO ((tree));\n-extern tree build_known_method_ref PROTO ((tree, tree, tree, tree, tree));\n-extern tree build_class_init PROTO ((tree, tree));\n-extern tree build_invokevirtual PROTO ((tree, tree));\n-extern tree build_invokeinterface PROTO ((tree, tree, tree));\n-extern tree invoke_build_dtable PROTO ((int, tree));\n-extern tree build_field_ref PROTO ((tree, tree, tree));\n-extern void pushdecl_force_head PROTO ((tree));\n-extern tree build_java_binop PROTO ((enum tree_code, tree, tree, tree));\n-extern tree build_java_soft_divmod PROTO ((enum tree_code, tree, tree, tree));\n-extern tree binary_numeric_promotion PROTO ((tree, tree, tree *, tree *));\n-extern tree build_java_arrayaccess PROTO ((tree, tree, tree));\n-extern tree build_newarray PROTO ((int, tree));\n-extern tree build_anewarray PROTO ((tree, tree));\n-extern tree build_new_array PROTO ((tree, tree));\n-extern tree build_java_array_length_access PROTO ((tree));\n-extern tree build_java_arraynull_check PROTO ((tree, tree, tree));\n-extern tree create_label_decl PROTO ((tree));\n-extern void push_labeled_block PROTO ((tree));\n-extern tree prepare_eh_table_type PROTO ((tree));\n-extern void java_set_exception_lang_code PROTO ((void));\n-extern tree generate_name PROTO ((void));\n-extern void pop_labeled_block PROTO ((void));\n-extern const char *lang_printable_name PROTO ((tree, int));\n-extern tree maybe_add_interface PROTO ((tree, tree));\n-extern void set_super_info PROTO ((int, tree, tree, int));\n-extern int get_access_flags_from_decl PROTO ((tree));\n-extern int interface_of_p PROTO ((tree, tree));\n-extern int inherits_from_p PROTO ((tree, tree));\n-extern void complete_start_java_method PROTO ((tree));\n-extern tree build_result_decl PROTO ((tree));\n-extern void emit_handlers PROTO ((void));\n-extern void init_outgoing_cpool PROTO ((void));\n-extern void make_class_data PROTO ((tree));\n-extern void register_class PROTO ((void));\n-extern int alloc_name_constant PROTO ((int, tree));\n-extern void emit_register_classes PROTO ((void));\n-extern void lang_init_source PROTO ((int));\n-extern void write_classfile PROTO ((tree));\n-extern char *print_int_node PROTO ((tree));\n-extern void parse_error_context PVPROTO ((tree cl, const char *, ...))\n+extern tree build_java_signature PARAMS ((tree));\n+extern tree build_java_argument_signature PARAMS ((tree));\n+extern void set_java_signature PARAMS ((tree, tree));\n+extern tree build_static_field_ref PARAMS ((tree));\n+extern tree build_address_of PARAMS ((tree));\n+extern tree find_local_variable PARAMS ((int index, tree type, int pc));\n+extern tree find_stack_slot PARAMS ((int index, tree type));\n+extern tree build_prim_array_type PARAMS ((tree, HOST_WIDE_INT));\n+extern tree build_java_array_type PARAMS ((tree, HOST_WIDE_INT));\n+extern int is_compiled_class PARAMS ((tree));\n+extern tree mangled_classname PARAMS ((const char*, tree));\n+extern tree lookup_label PARAMS ((int));\n+extern tree pop_type_0 PARAMS ((tree));\n+extern tree pop_type PARAMS ((tree));\n+extern void pop_argument_types PARAMS ((tree));\n+extern tree decode_newarray_type PARAMS ((int));\n+extern tree lookup_field PARAMS ((tree*, tree));\n+extern int is_array_type_p PARAMS ((tree));\n+extern HOST_WIDE_INT java_array_type_length PARAMS ((tree));\n+extern int read_class PARAMS ((tree));\n+extern void load_class PARAMS ((tree, int));\n+\n+extern tree lookup_name PARAMS ((tree));\n+extern tree build_known_method_ref PARAMS ((tree, tree, tree, tree, tree));\n+extern tree build_class_init PARAMS ((tree, tree));\n+extern tree build_invokevirtual PARAMS ((tree, tree));\n+extern tree build_invokeinterface PARAMS ((tree, tree, tree));\n+extern tree invoke_build_dtable PARAMS ((int, tree));\n+extern tree build_field_ref PARAMS ((tree, tree, tree));\n+extern void pushdecl_force_head PARAMS ((tree));\n+extern tree build_java_binop PARAMS ((enum tree_code, tree, tree, tree));\n+extern tree build_java_soft_divmod PARAMS ((enum tree_code, tree, tree, tree));\n+extern tree binary_numeric_promotion PARAMS ((tree, tree, tree *, tree *));\n+extern tree build_java_arrayaccess PARAMS ((tree, tree, tree));\n+extern tree build_newarray PARAMS ((int, tree));\n+extern tree build_anewarray PARAMS ((tree, tree));\n+extern tree build_new_array PARAMS ((tree, tree));\n+extern tree build_java_array_length_access PARAMS ((tree));\n+extern tree build_java_arraynull_check PARAMS ((tree, tree, tree));\n+extern tree create_label_decl PARAMS ((tree));\n+extern void push_labeled_block PARAMS ((tree));\n+extern tree prepare_eh_table_type PARAMS ((tree));\n+extern void java_set_exception_lang_code PARAMS ((void));\n+extern tree generate_name PARAMS ((void));\n+extern void pop_labeled_block PARAMS ((void));\n+extern const char *lang_printable_name PARAMS ((tree, int));\n+extern tree maybe_add_interface PARAMS ((tree, tree));\n+extern void set_super_info PARAMS ((int, tree, tree, int));\n+extern int get_access_flags_from_decl PARAMS ((tree));\n+extern int interface_of_p PARAMS ((tree, tree));\n+extern int inherits_from_p PARAMS ((tree, tree));\n+extern void complete_start_java_method PARAMS ((tree));\n+extern tree build_result_decl PARAMS ((tree));\n+extern void emit_handlers PARAMS ((void));\n+extern void init_outgoing_cpool PARAMS ((void));\n+extern void make_class_data PARAMS ((tree));\n+extern void register_class PARAMS ((void));\n+extern int alloc_name_constant PARAMS ((int, tree));\n+extern void emit_register_classes PARAMS ((void));\n+extern void lang_init_source PARAMS ((int));\n+extern void write_classfile PARAMS ((tree));\n+extern char *print_int_node PARAMS ((tree));\n+extern void parse_error_context PARAMS ((tree cl, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n-extern tree build_primtype_type_ref PROTO ((const char *));\n-extern tree java_get_real_method_name PROTO ((tree));\n-extern void finish_class PROTO ((void));\n-extern void java_layout_seen_class_methods PROTO ((void));\n-extern void check_for_initialization PROTO ((tree));\n-\n-extern tree pushdecl_top_level PROTO ((tree));\n-extern int alloc_class_constant PROTO ((tree));\n-extern int unicode_mangling_length PROTO ((const char *, int));\n-extern void init_expr_processing PROTO ((void));\n-extern void push_super_field PROTO ((tree, tree));\n-extern void init_class_processing PROTO ((void));\n-extern int can_widen_reference_to PROTO ((tree, tree));\n-extern int class_depth PROTO ((tree));\n-extern int verify_jvm_instructions PROTO ((struct JCF *, const unsigned char *, long));\n-extern void maybe_pushlevels PROTO ((int));\n-extern void maybe_poplevels PROTO ((int));\n-extern int process_jvm_instruction PROTO ((int, const unsigned char *, long));\n-extern void set_local_type PROTO ((int, tree));\n-extern int merge_type_state PROTO ((tree));\n-extern void push_type PROTO ((tree));\n-extern void load_type_state PROTO ((tree));\n-extern void add_interface PROTO ((tree, tree));\n-extern void append_gpp_mangled_name PROTO ((struct obstack *, const char *, int));\n-extern void append_gpp_mangled_classtype PROTO ((struct obstack *, const char *));\n-extern void emit_unicode_mangled_name PROTO ((struct obstack *, const char *, int));\n-extern tree force_evaluation_order PROTO ((tree));\n-extern int verify_constant_pool PROTO ((struct JCF *));\n-extern void start_java_method PROTO ((tree));\n-extern void end_java_method PROTO ((void));\n-extern void give_name_to_locals PROTO ((struct JCF *));\n-extern void expand_byte_code PROTO ((struct JCF *, tree));\n-extern int open_in_zip PROTO ((struct JCF *, const char *, const char *, int));\n-extern void set_constant_value PROTO ((tree, tree));\n+extern tree build_primtype_type_ref PARAMS ((const char *));\n+extern tree java_get_real_method_name PARAMS ((tree));\n+extern void finish_class PARAMS ((void));\n+extern void java_layout_seen_class_methods PARAMS ((void));\n+extern void check_for_initialization PARAMS ((tree));\n+\n+extern tree pushdecl_top_level PARAMS ((tree));\n+extern int alloc_class_constant PARAMS ((tree));\n+extern int unicode_mangling_length PARAMS ((const char *, int));\n+extern void init_expr_processing PARAMS ((void));\n+extern void push_super_field PARAMS ((tree, tree));\n+extern void init_class_processing PARAMS ((void));\n+extern int can_widen_reference_to PARAMS ((tree, tree));\n+extern int class_depth PARAMS ((tree));\n+extern int verify_jvm_instructions PARAMS ((struct JCF *, const unsigned char *, long));\n+extern void maybe_pushlevels PARAMS ((int));\n+extern void maybe_poplevels PARAMS ((int));\n+extern int process_jvm_instruction PARAMS ((int, const unsigned char *, long));\n+extern void set_local_type PARAMS ((int, tree));\n+extern int merge_type_state PARAMS ((tree));\n+extern void push_type PARAMS ((tree));\n+extern void load_type_state PARAMS ((tree));\n+extern void add_interface PARAMS ((tree, tree));\n+extern void append_gpp_mangled_name PARAMS ((struct obstack *, const char *, int));\n+extern void append_gpp_mangled_classtype PARAMS ((struct obstack *, const char *));\n+extern void emit_unicode_mangled_name PARAMS ((struct obstack *, const char *, int));\n+extern tree force_evaluation_order PARAMS ((tree));\n+extern int verify_constant_pool PARAMS ((struct JCF *));\n+extern void start_java_method PARAMS ((tree));\n+extern void end_java_method PARAMS ((void));\n+extern void give_name_to_locals PARAMS ((struct JCF *));\n+extern void expand_byte_code PARAMS ((struct JCF *, tree));\n+extern int open_in_zip PARAMS ((struct JCF *, const char *, const char *, int));\n+extern void set_constant_value PARAMS ((tree, tree));\n #ifdef jword\n-extern int find_constant1 PROTO ((struct CPool *, int, jword));\n-extern int find_constant2 PROTO ((struct CPool *, int, jword, jword));\n+extern int find_constant1 PARAMS ((struct CPool *, int, jword));\n+extern int find_constant2 PARAMS ((struct CPool *, int, jword, jword));\n #endif\n-extern int find_utf8_constant PROTO ((struct CPool *, tree));\n-extern int find_string_constant PROTO ((struct CPool *, tree));\n-extern int find_class_constant PROTO ((struct CPool *, tree));\n-extern int find_fieldref_index PROTO ((struct CPool *, tree));\n-extern int find_methodref_index PROTO ((struct CPool *, tree));\n-extern void write_constant_pool PROTO ((struct CPool *, unsigned char *, int));\n-extern int count_constant_pool_bytes PROTO ((struct CPool *));\n-extern int encode_newarray_type PROTO ((tree));\n+extern int find_utf8_constant PARAMS ((struct CPool *, tree));\n+extern int find_string_constant PARAMS ((struct CPool *, tree));\n+extern int find_class_constant PARAMS ((struct CPool *, tree));\n+extern int find_fieldref_index PARAMS ((struct CPool *, tree));\n+extern int find_methodref_index PARAMS ((struct CPool *, tree));\n+extern void write_constant_pool PARAMS ((struct CPool *, unsigned char *, int));\n+extern int count_constant_pool_bytes PARAMS ((struct CPool *));\n+extern int encode_newarray_type PARAMS ((tree));\n #ifdef uint64\n-extern void format_int PROTO ((char *, jlong, int));\n-extern void format_uint PROTO ((char *, uint64, int));\n+extern void format_int PARAMS ((char *, jlong, int));\n+extern void format_uint PARAMS ((char *, uint64, int));\n #endif\n-extern void jcf_trim_old_input PROTO ((struct JCF *));\n+extern void jcf_trim_old_input PARAMS ((struct JCF *));\n #ifdef BUFSIZ\n-extern void jcf_print_utf8 PROTO ((FILE *, const unsigned char *, int));\n-extern void jcf_print_char PROTO ((FILE *, int));\n-extern void jcf_print_utf8_replace PROTO ((FILE *, const unsigned char *,\n+extern void jcf_print_utf8 PARAMS ((FILE *, const unsigned char *, int));\n+extern void jcf_print_char PARAMS ((FILE *, int));\n+extern void jcf_print_utf8_replace PARAMS ((FILE *, const unsigned char *,\n \t\t\t\t\t   int, int, int));\n # if JCF_USE_STDIO\n-extern char* open_class PROTO ((char *, struct JCF *, FILE *, const char *));\n+extern char* open_class PARAMS ((char *, struct JCF *, FILE *, const char *));\n # else\n-extern char* open_class PROTO ((char *, struct JCF *, int, const char *));\n+extern char* open_class PARAMS ((char *, struct JCF *, int, const char *));\n # endif /* JCF_USE_STDIO */\n #endif\n-void java_debug_context PROTO ((void));\n+void java_debug_context PARAMS ((void));\n \n /* We use ARGS_SIZE_RTX to indicate that gcc/expr.h has been included\n    to declare `enum expand_modifier'. */\n #if defined (TREE_CODE) && defined(RTX_CODE) && defined (HAVE_MACHINE_MODES) && defined (ARGS_SIZE_RTX)\n-struct rtx_def * java_lang_expand_expr PROTO ((tree, rtx, enum machine_mode,\n+struct rtx_def * java_lang_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n \t\t\t\t\t       enum expand_modifier)); \n #endif /* TREE_CODE && RTX_CODE && HAVE_MACHINE_MODES && ARGS_SIZE_RTX */\n "}, {"sha": "8a9ee9e267d02485185dc0b5af1fe944642547c7", "filename": "gcc/java/jcf-depend.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-depend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-depend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-depend.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Functions for handling dependency tracking when reading .class files.\n \n-   Copyright (C) 1998  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -39,10 +39,10 @@ struct entry\n   struct entry *next;\n };\n \n-static void free_entry PROTO ((struct entry **));\n-static void add_entry PROTO ((struct entry **, const char *));\n-static const char *munge PROTO ((const char *));\n-static int print_ents PROTO ((struct entry *, int));\n+static void free_entry PARAMS ((struct entry **));\n+static void add_entry PARAMS ((struct entry **, const char *));\n+static const char *munge PARAMS ((const char *));\n+static int print_ents PARAMS ((struct entry *, int));\n \n /* List of files.  */\n static struct entry *dependencies = NULL;"}, {"sha": "2eda740ad0c99c3ef821c59c74d7d3f744c4de63", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,7 +1,7 @@\n /* Program to dump out a Java(TM) .class file.\n    Functionally similar to Sun's javap.\n \n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -78,18 +78,18 @@ int class_access_flags = 0;\n /* Print in format similar to javap.  VERY IMCOMPLETE. */\n int flag_javap_compatible = 0;\n \n-static void print_access_flags PROTO ((FILE *, uint16, char));\n-static void print_constant_terse PROTO ((FILE*, JCF*, int, int));\n-static void print_constant PROTO ((FILE *, JCF *, int, int));\n-static void print_constant_ref PROTO ((FILE *, JCF *, int));\n-static void disassemble_method PROTO ((JCF*, const unsigned char *, int));\n-static void print_name PROTO ((FILE*, JCF*, int));\n-static void print_signature PROTO ((FILE*, JCF*, int, int));\n-static int utf8_equal_string PROTO ((struct JCF*, int, const char *));\n-static int usage PROTO ((void)) ATTRIBUTE_NORETURN;\n-static void process_class PROTO ((struct JCF *));\n-static void print_constant_pool PROTO ((struct JCF *));\n-static void print_exception_table PROTO ((struct JCF *,\n+static void print_access_flags PARAMS ((FILE *, uint16, char));\n+static void print_constant_terse PARAMS ((FILE*, JCF*, int, int));\n+static void print_constant PARAMS ((FILE *, JCF *, int, int));\n+static void print_constant_ref PARAMS ((FILE *, JCF *, int));\n+static void disassemble_method PARAMS ((JCF*, const unsigned char *, int));\n+static void print_name PARAMS ((FILE*, JCF*, int));\n+static void print_signature PARAMS ((FILE*, JCF*, int, int));\n+static int utf8_equal_string PARAMS ((struct JCF*, int, const char *));\n+static int usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void process_class PARAMS ((struct JCF *));\n+static void print_constant_pool PARAMS ((struct JCF *));\n+static void print_exception_table PARAMS ((struct JCF *,\n \t\t\t\t\t  const unsigned char *entries, int));\n \n #define PRINT_SIGNATURE_RESULT_ONLY 1"}, {"sha": "5c965da7d85864a2dbc591899d6e8f63e9e6ffb1", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Parser for Java(TM) .class files.\n-   Copyright (C) 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -76,16 +76,16 @@ static tree current_method = NULL_TREE;\n static struct JCF main_jcf[1];\n \n /* Declarations of some functions used here.  */\n-static tree give_name_to_class PROTO ((JCF *jcf, int index));\n-static void parse_zip_file_entries PROTO ((void));\n-static void process_zip_dir PROTO ((void));\n-static void parse_source_file PROTO ((tree));\n-static void jcf_parse_source PROTO ((void));\n-static int jcf_figure_file_type PROTO ((JCF *));\n-static int find_in_current_zip PROTO ((const char *, struct JCF **));\n-static void parse_class_file PROTO ((void));\n-static void set_source_filename PROTO ((JCF *, int));\n-static int predefined_filename_p PROTO ((tree));\n+static tree give_name_to_class PARAMS ((JCF *jcf, int index));\n+static void parse_zip_file_entries PARAMS ((void));\n+static void process_zip_dir PARAMS ((void));\n+static void parse_source_file PARAMS ((tree));\n+static void jcf_parse_source PARAMS ((void));\n+static int jcf_figure_file_type PARAMS ((JCF *));\n+static int find_in_current_zip PARAMS ((const char *, struct JCF **));\n+static void parse_class_file PARAMS ((void));\n+static void set_source_filename PARAMS ((JCF *, int));\n+static int predefined_filename_p PARAMS ((tree));\n \n /* Handle \"SourceFile\" attribute. */\n "}, {"sha": "55715a155071d6d7a23c5cec938fcfe08ccdb936", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Handle CLASSPATH, -classpath, and path searching.\n \n-   Copyright (C) 1998, 1999  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -53,10 +53,10 @@ struct entry\n   struct entry *next;\n };\n \n-static void free_entry PROTO ((struct entry **));\n-static void append_entry PROTO ((struct entry **, struct entry *));\n-static void add_entry PROTO ((struct entry **, const char *, int));\n-static void add_path PROTO ((struct entry **, const char *, int));\n+static void free_entry PARAMS ((struct entry **));\n+static void append_entry PARAMS ((struct entry **, struct entry *));\n+static void add_entry PARAMS ((struct entry **, const char *, int));\n+static void add_path PARAMS ((struct entry **, const char *, int));\n \n /* We support several different ways to set the class path.\n "}, {"sha": "1dabf6594ad09ac96bfd37d7a2012f5e8765bcb1", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -2,7 +2,7 @@\n    It is not stand-alone:  It depends on tons of macros, and the\n    intent is you #include this file after you've defined the macros.\n \n-   Copyright (C) 1996  Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -26,14 +26,14 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"zipfile.h\"\n \n-static int get_attribute PROTO((JCF *));\n-static int jcf_parse_preamble PROTO((JCF *));\n-static int jcf_parse_constant_pool PROTO((JCF *));\n-static void jcf_parse_class PROTO((JCF *));\n-static int jcf_parse_fields PROTO((JCF *));\n-static int jcf_parse_one_method PROTO((JCF *));\n-static int jcf_parse_methods PROTO((JCF *));\n-static int jcf_parse_final_attributes PROTO((JCF *));\n+static int get_attribute PARAMS ((JCF *));\n+static int jcf_parse_preamble PARAMS ((JCF *));\n+static int jcf_parse_constant_pool PARAMS ((JCF *));\n+static void jcf_parse_class PARAMS ((JCF *));\n+static int jcf_parse_fields PARAMS ((JCF *));\n+static int jcf_parse_one_method PARAMS ((JCF *));\n+static int jcf_parse_methods PARAMS ((JCF *));\n+static int jcf_parse_final_attributes PARAMS ((JCF *));\n \n static int\n DEFUN(get_attribute, (jcf),"}, {"sha": "0577dcd01f1dc4e88fdd57104ee94a42b17c758d", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Write out a Java(TM) class file.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -271,70 +271,70 @@ struct jcf_partial\n   struct jcf_switch_state *sw_state;\n };\n \n-static void generate_bytecode_insns PROTO ((tree, int, struct jcf_partial *));\n-static struct chunk * alloc_chunk PROTO ((struct chunk *, unsigned char *,\n+static void generate_bytecode_insns PARAMS ((tree, int, struct jcf_partial *));\n+static struct chunk * alloc_chunk PARAMS ((struct chunk *, unsigned char *,\n \t\t\t\t\t  int, struct obstack *));\n-static unsigned char * append_chunk PROTO ((unsigned char *, int,\n+static unsigned char * append_chunk PARAMS ((unsigned char *, int,\n \t\t\t\t\t    struct jcf_partial *));\n-static void append_chunk_copy PROTO ((unsigned char *, int,\n+static void append_chunk_copy PARAMS ((unsigned char *, int,\n \t\t\t\t      struct jcf_partial *));\n-static struct jcf_block * gen_jcf_label PROTO ((struct jcf_partial *));\n-static void finish_jcf_block PROTO ((struct jcf_partial *));\n-static void define_jcf_label PROTO ((struct jcf_block *,\n+static struct jcf_block * gen_jcf_label PARAMS ((struct jcf_partial *));\n+static void finish_jcf_block PARAMS ((struct jcf_partial *));\n+static void define_jcf_label PARAMS ((struct jcf_block *,\n \t\t\t\t     struct jcf_partial *));\n-static struct jcf_block * get_jcf_label_here PROTO ((struct jcf_partial *));\n-static void put_linenumber PROTO ((int, struct jcf_partial *));\n-static void localvar_alloc PROTO ((tree, struct jcf_partial *));\n-static void localvar_free PROTO ((tree, struct jcf_partial *));\n-static int get_access_flags PROTO ((tree));\n-static void write_chunks PROTO ((FILE *, struct chunk *));\n-static int adjust_typed_op PROTO ((tree, int));\n-static void generate_bytecode_conditional PROTO ((tree, struct jcf_block *,\n+static struct jcf_block * get_jcf_label_here PARAMS ((struct jcf_partial *));\n+static void put_linenumber PARAMS ((int, struct jcf_partial *));\n+static void localvar_alloc PARAMS ((tree, struct jcf_partial *));\n+static void localvar_free PARAMS ((tree, struct jcf_partial *));\n+static int get_access_flags PARAMS ((tree));\n+static void write_chunks PARAMS ((FILE *, struct chunk *));\n+static int adjust_typed_op PARAMS ((tree, int));\n+static void generate_bytecode_conditional PARAMS ((tree, struct jcf_block *,\n \t\t\t\t\t\t  struct jcf_block *, int,\n \t\t\t\t\t\t  struct jcf_partial *));\n-static void generate_bytecode_return PROTO ((tree, struct jcf_partial *));\n-static void perform_relocations PROTO ((struct jcf_partial *));\n-static void init_jcf_state PROTO ((struct jcf_partial *, struct obstack *));\n-static void init_jcf_method PROTO ((struct jcf_partial *, tree));\n-static void release_jcf_state PROTO ((struct jcf_partial *));\n-static struct chunk * generate_classfile PROTO ((tree, struct jcf_partial *));\n-static struct jcf_handler *alloc_handler PROTO ((struct jcf_block *,\n+static void generate_bytecode_return PARAMS ((tree, struct jcf_partial *));\n+static void perform_relocations PARAMS ((struct jcf_partial *));\n+static void init_jcf_state PARAMS ((struct jcf_partial *, struct obstack *));\n+static void init_jcf_method PARAMS ((struct jcf_partial *, tree));\n+static void release_jcf_state PARAMS ((struct jcf_partial *));\n+static struct chunk * generate_classfile PARAMS ((tree, struct jcf_partial *));\n+static struct jcf_handler *alloc_handler PARAMS ((struct jcf_block *,\n \t\t\t\t\t\t struct jcf_block *,\n \t\t\t\t\t\t struct jcf_partial *));\n-static void emit_iinc PROTO ((tree, HOST_WIDE_INT, struct jcf_partial *));\n-static void emit_reloc PROTO ((HOST_WIDE_INT, int, struct jcf_block *, \n+static void emit_iinc PARAMS ((tree, HOST_WIDE_INT, struct jcf_partial *));\n+static void emit_reloc PARAMS ((HOST_WIDE_INT, int, struct jcf_block *, \n \t\t\t       struct jcf_partial *));\n-static void push_constant1 PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n-static void push_constant2 PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n-static void push_int_const PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n-static int find_constant_wide PROTO ((HOST_WIDE_INT, HOST_WIDE_INT,\n+static void push_constant1 PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n+static void push_constant2 PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n+static void push_int_const PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n+static int find_constant_wide PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t      struct jcf_partial *));\n-static void push_long_const PROTO ((HOST_WIDE_INT, HOST_WIDE_INT, \n+static void push_long_const PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT, \n \t\t\t\t    struct jcf_partial *));\n-static int find_constant_index PROTO ((tree, struct jcf_partial *));\n-static void push_long_const PROTO ((HOST_WIDE_INT, HOST_WIDE_INT,\n+static int find_constant_index PARAMS ((tree, struct jcf_partial *));\n+static void push_long_const PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t    struct jcf_partial *));\n-static void field_op PROTO ((tree, int, struct jcf_partial *));\n-static void maybe_wide PROTO ((int, int, struct jcf_partial *));\n-static void emit_dup PROTO ((int, int, struct jcf_partial *));\n-static void emit_pop PROTO ((int, struct jcf_partial *));\n-static void emit_load_or_store PROTO ((tree, int, struct jcf_partial *));\n-static void emit_load PROTO ((tree, struct jcf_partial *));\n-static void emit_store PROTO ((tree, struct jcf_partial *));\n-static void emit_unop PROTO ((enum java_opcode, tree, struct jcf_partial *));\n-static void emit_binop PROTO ((enum java_opcode, tree, struct jcf_partial *));\n-static void emit_reloc PROTO ((HOST_WIDE_INT, int, struct jcf_block *,\n+static void field_op PARAMS ((tree, int, struct jcf_partial *));\n+static void maybe_wide PARAMS ((int, int, struct jcf_partial *));\n+static void emit_dup PARAMS ((int, int, struct jcf_partial *));\n+static void emit_pop PARAMS ((int, struct jcf_partial *));\n+static void emit_load_or_store PARAMS ((tree, int, struct jcf_partial *));\n+static void emit_load PARAMS ((tree, struct jcf_partial *));\n+static void emit_store PARAMS ((tree, struct jcf_partial *));\n+static void emit_unop PARAMS ((enum java_opcode, tree, struct jcf_partial *));\n+static void emit_binop PARAMS ((enum java_opcode, tree, struct jcf_partial *));\n+static void emit_reloc PARAMS ((HOST_WIDE_INT, int, struct jcf_block *,\n \t\t\t       struct jcf_partial *));\n-static void emit_switch_reloc PROTO ((struct jcf_block *,\n+static void emit_switch_reloc PARAMS ((struct jcf_block *,\n \t\t\t\t      struct jcf_partial *));\n-static void emit_case_reloc PROTO ((struct jcf_relocation *,\n+static void emit_case_reloc PARAMS ((struct jcf_relocation *,\n \t\t\t\t    struct jcf_partial *));\n-static void emit_if PROTO ((struct jcf_block *, int, int,\n+static void emit_if PARAMS ((struct jcf_block *, int, int,\n \t\t\t    struct jcf_partial *));\n-static void emit_goto PROTO ((struct jcf_block *, struct jcf_partial *));\n-static void emit_jsr PROTO ((struct jcf_block *, struct jcf_partial *));\n-static void call_cleanups PROTO ((struct jcf_block *, struct jcf_partial *));\n-static char *make_class_file_name PROTO ((tree));\n+static void emit_goto PARAMS ((struct jcf_block *, struct jcf_partial *));\n+static void emit_jsr PARAMS ((struct jcf_block *, struct jcf_partial *));\n+static void call_cleanups PARAMS ((struct jcf_block *, struct jcf_partial *));\n+static char *make_class_file_name PARAMS ((tree));\n \n /* Utility macros for appending (big-endian) data to a buffer.\n    We assume a local variable 'ptr' points into where we want to"}, {"sha": "2a4cb26284e257aaa3c45ffab72a6958a0ba4c17", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Utility macros to read Java(TM) .class files and byte codes.\n \n-   Copyright (C) 1996, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -38,11 +38,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #endif\n #endif /* !DEFUN */\n \n-#ifndef PROTO\n+#ifndef PARAMS\n #if defined (__STDC__)\n-#define PROTO(paramlist)    paramlist\n+#define PARAMS (paramlist)    paramlist\n #else\n-#define PROTO(paramlist)    ()\n+#define PARAMS (paramlist)    ()\n #endif\n #endif\n \n@@ -68,7 +68,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define JCF_SOURCE 3\n \n struct JCF;\n-typedef int (*jcf_filbuf_t) PROTO ((struct JCF*, int needed));\n+typedef int (*jcf_filbuf_t) PARAMS ((struct JCF*, int needed));\n \n typedef struct CPool {\n   /* Available number of elements in the constants array, before it\n@@ -221,10 +221,10 @@ typedef struct JCF {\n \n #define DEFAULT_CLASS_PATH \".\"\n \n-extern const char *find_class PROTO ((const char *, int, JCF*, int));\n-extern const char *find_classfile PROTO ((char *, JCF*, const char *));\n-extern int jcf_filbuf_from_stdio PROTO ((JCF *jcf, int count));\n-extern int jcf_unexpected_eof PROTO ((JCF*, int)) ATTRIBUTE_NORETURN;\n+extern const char *find_class PARAMS ((const char *, int, JCF*, int));\n+extern const char *find_classfile PARAMS ((char *, JCF*, const char *));\n+extern int jcf_filbuf_from_stdio PARAMS ((JCF *jcf, int count));\n+extern int jcf_unexpected_eof PARAMS ((JCF*, int)) ATTRIBUTE_NORETURN;\n \n /* Extract a character from a Java-style Utf8 string.\n  * PTR points to the current character.\n@@ -255,25 +255,25 @@ extern int quiet_flag;\n #endif\n \n /* Declarations for dependency code.  */\n-extern void jcf_dependency_reset PROTO ((void));\n-extern void jcf_dependency_set_target PROTO ((const char *));\n-extern void jcf_dependency_add_target PROTO ((const char *));\n-extern void jcf_dependency_set_dep_file PROTO ((const char *));\n-extern void jcf_dependency_add_file PROTO ((const char *, int));\n-extern void jcf_dependency_write PROTO ((void));\n-extern void jcf_dependency_init PROTO ((int));\n+extern void jcf_dependency_reset PARAMS ((void));\n+extern void jcf_dependency_set_target PARAMS ((const char *));\n+extern void jcf_dependency_add_target PARAMS ((const char *));\n+extern void jcf_dependency_set_dep_file PARAMS ((const char *));\n+extern void jcf_dependency_add_file PARAMS ((const char *, int));\n+extern void jcf_dependency_write PARAMS ((void));\n+extern void jcf_dependency_init PARAMS ((int));\n \n /* Declarations for path handling code.  */\n-extern void jcf_path_init PROTO ((void));\n-extern void jcf_path_classpath_arg PROTO ((const char *));\n-extern void jcf_path_CLASSPATH_arg PROTO ((const char *));\n-extern void jcf_path_include_arg PROTO ((const char *));\n-extern void jcf_path_seal PROTO ((void));\n-extern void *jcf_path_start PROTO ((void));\n-extern void *jcf_path_next PROTO ((void *));\n-extern char *jcf_path_name PROTO ((void *));\n-extern int jcf_path_is_zipfile PROTO ((void *));\n-extern int jcf_path_is_system PROTO ((void *));\n-extern int jcf_path_max_len PROTO ((void));\n+extern void jcf_path_init PARAMS ((void));\n+extern void jcf_path_classpath_arg PARAMS ((const char *));\n+extern void jcf_path_CLASSPATH_arg PARAMS ((const char *));\n+extern void jcf_path_include_arg PARAMS ((const char *));\n+extern void jcf_path_seal PARAMS ((void));\n+extern void *jcf_path_start PARAMS ((void));\n+extern void *jcf_path_next PARAMS ((void *));\n+extern char *jcf_path_name PARAMS ((void *));\n+extern int jcf_path_is_zipfile PARAMS ((void *));\n+extern int jcf_path_is_system PARAMS ((void *));\n+extern int jcf_path_max_len PARAMS ((void));\n \n #endif"}, {"sha": "3d5b3b6eec48ff665bf6a7fcfedea62f6ae50b7a", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Main for jv-scan\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -24,9 +24,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"obstack.h\"\t\t/* We use obstacks in lex.c */\n \n-void fatal VPROTO((const char *s, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void warning VPROTO((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n-void gcc_obstack_init PROTO ((struct obstack *obstack));\n+void fatal PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+void warning PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n+void gcc_obstack_init PARAMS ((struct obstack *obstack));\n \n #define JC1_LITE\n #include \"jcf.h\"\n@@ -140,7 +140,7 @@ DEFUN (main, (argc, argv),\n    functions */\n \n void\n-fatal VPROTO((const char *s, ...))\n+fatal VPARAMS ((const char *s, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *s;\n@@ -161,7 +161,7 @@ fatal VPROTO((const char *s, ...))\n }\n \n void\n-warning VPROTO((const char *s, ...))\n+warning VPARAMS ((const char *s, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *s;"}, {"sha": "da76c0792fce11611a51c4768d60558a9303df09", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Program to generate \"main\" a Java(TM) class containing a main method.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -38,11 +38,11 @@ const char class_mangling_prefix[] = \"_CL_\";\n \n struct obstack name_obstack;\n \n-extern void error\t\t\tPVPROTO ((const char *, ...))\n+extern void error\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n \n void\n-error VPROTO((const char *msgid, ...))\n+error VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *msgid;\n@@ -75,8 +75,8 @@ gcc_obstack_init (obstack)\n #define OBSTACK_CHUNK_FREE free\n #endif\n   _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) PROTO((long))) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) PROTO((void *))) OBSTACK_CHUNK_FREE);\n+\t\t  (void *(*) PARAMS ((long))) OBSTACK_CHUNK_ALLOC,\n+\t\t  (void (*) PARAMS ((void *))) OBSTACK_CHUNK_FREE);\n }\n \n static void usage (const char *) ATTRIBUTE_NORETURN;"}, {"sha": "20eb5d7d7d8ea95155b743679d8ddda33e311c52", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n  /* Specific flags and argument handling of the front-end of the \n    GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -39,7 +39,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* True if this arg is a .class input file name. */\n #define CLASS_FILE_ARG\t(1<<4)\n \n-static char *find_spec_file\tPROTO ((const char *));\n+static char *find_spec_file\tPARAMS ((const char *));\n \n static const char *main_class_name = NULL;\n int lang_specific_extra_outfiles = 0;"}, {"sha": "c6d6ee01672de46f16deecd656cea97b3159b396", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Java(TM) language-specific utility routines.\n-   Copyright (C) 1996, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,10 +36,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"flags.h\"\n #include \"xref.h\"\n \n-static void put_decl_string PROTO ((const char *, int));\n-static void put_decl_node PROTO ((tree));\n-static void java_dummy_print PROTO ((const char *));\n-static void lang_print_error PROTO ((const char *));\n+static void put_decl_string PARAMS ((const char *, int));\n+static void put_decl_node PARAMS ((tree));\n+static void java_dummy_print PARAMS ((const char *));\n+static void lang_print_error PARAMS ((const char *));\n \n #ifndef OBJECT_SUFFIX\n # define OBJECT_SUFFIX \".o\""}, {"sha": "24ab8ef8b5fe5b7d0104585aadcab3c95f57f03a", "filename": "gcc/java/lex.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Language lexer for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -41,26 +41,26 @@ extern struct obstack *expression_obstack;\n #endif\n \n /* Function declaration  */\n-static int java_lineterminator PROTO ((unicode_t));\n-static char *java_sprint_unicode PROTO ((struct java_line *, int));\n-static void java_unicode_2_utf8 PROTO ((unicode_t));\n-static void java_lex_error PROTO ((const char *, int));\n+static int java_lineterminator PARAMS ((unicode_t));\n+static char *java_sprint_unicode PARAMS ((struct java_line *, int));\n+static void java_unicode_2_utf8 PARAMS ((unicode_t));\n+static void java_lex_error PARAMS ((const char *, int));\n #ifndef JC1_LITE\n-static int java_is_eol PROTO ((FILE *, int));\n-static tree build_wfl_node PROTO ((tree));\n+static int java_is_eol PARAMS ((FILE *, int));\n+static tree build_wfl_node PARAMS ((tree));\n #endif\n-static void java_store_unicode PROTO ((struct java_line *, unicode_t, int));\n-static unicode_t java_parse_escape_sequence PROTO ((void));\n-static int java_letter_or_digit_p PROTO ((unicode_t));\n-static int java_parse_doc_section PROTO ((unicode_t));\n-static void java_parse_end_comment PROTO ((unicode_t));\n-static unicode_t java_get_unicode PROTO ((void));\n-static unicode_t java_read_unicode PROTO ((int, int *));\n-static void java_store_unicode PROTO ((struct java_line *, unicode_t, int));\n-static unicode_t java_read_char PROTO ((void));\n-static void java_allocate_new_line PROTO ((void));\n-static void java_unget_unicode PROTO ((void));\n-static unicode_t java_sneak_unicode PROTO ((void));\n+static void java_store_unicode PARAMS ((struct java_line *, unicode_t, int));\n+static unicode_t java_parse_escape_sequence PARAMS ((void));\n+static int java_letter_or_digit_p PARAMS ((unicode_t));\n+static int java_parse_doc_section PARAMS ((unicode_t));\n+static void java_parse_end_comment PARAMS ((unicode_t));\n+static unicode_t java_get_unicode PARAMS ((void));\n+static unicode_t java_read_unicode PARAMS ((int, int *));\n+static void java_store_unicode PARAMS ((struct java_line *, unicode_t, int));\n+static unicode_t java_read_char PARAMS ((void));\n+static void java_allocate_new_line PARAMS ((void));\n+static void java_unget_unicode PARAMS ((void));\n+static unicode_t java_sneak_unicode PARAMS ((void));\n \n void\n java_init_lex ()"}, {"sha": "7bb6558d85e7c3bce22b472bd727b1cda0a4039d", "filename": "gcc/java/lex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Language lexer definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -132,7 +132,7 @@ typedef struct _java_lc {\n \n #else\n \n-extern void set_float_handler PROTO((jmp_buf));\n+extern void set_float_handler PARAMS ((jmp_buf));\n #define SET_FLOAT_HANDLER(H) set_float_handler ((H))\n #define DCONST0 dconst0\n #define GET_IDENTIFIER(S) get_identifier ((S))"}, {"sha": "32628d27a494dff7e6c3148016488c6c5e9f6798", "filename": "gcc/java/parse-scan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -170,8 +170,8 @@ struct method_declarator {\n }\n \n /* Two actions for this grammar */\n-static void report_class_declaration PROTO ((const char *));\n-static void report_main_declaration PROTO ((struct method_declarator *));\n+static void report_class_declaration PARAMS ((const char *));\n+static void report_main_declaration PARAMS ((struct method_declarator *));\n \n #include \"lex.h\"\n #include \"parse.h\""}, {"sha": "8d8577baf9846cd2b562cbf28ef0958daea424f3", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Parser grammar for quick source code scan of Java(TM) language programs.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -90,8 +90,8 @@ struct method_declarator {\n }\n \n /* Two actions for this grammar */\n-static void report_class_declaration PROTO ((const char *));\n-static void report_main_declaration PROTO ((struct method_declarator *));\n+static void report_class_declaration PARAMS ((const char *));\n+static void report_main_declaration PARAMS ((struct method_declarator *));\n \n #include \"lex.h\"\n #include \"parse.h\""}, {"sha": "9a913497972e7082cdb1d0bf5905a0dc5e29f3a4", "filename": "gcc/java/parse.c", "status": "modified", "additions": 191, "deletions": 191, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -143,202 +143,202 @@\n #include \"defaults.h\"\n \n /* Local function prototypes */\n-static char *java_accstring_lookup PROTO ((int));\n-static void  classitf_redefinition_error PROTO ((const char *,tree, tree, tree));\n-static void  variable_redefinition_error PROTO ((tree, tree, tree, int));\n-static void  check_modifiers PROTO ((const char *, int, int));\n-static tree  create_class PROTO ((int, tree, tree, tree));\n-static tree  create_interface PROTO ((int, tree, tree));\n-static tree  find_field PROTO ((tree, tree));\n-static tree lookup_field_wrapper PROTO ((tree, tree));\n-static int   duplicate_declaration_error_p PROTO ((tree, tree, tree));\n-static void  register_fields PROTO ((int, tree, tree));\n-static tree parser_qualified_classname PROTO ((tree));\n-static int  parser_check_super PROTO ((tree, tree, tree));\n-static int  parser_check_super_interface PROTO ((tree, tree, tree));\n-static void check_modifiers_consistency PROTO ((int));\n-static tree lookup_cl PROTO ((tree));\n-static tree lookup_java_method2 PROTO ((tree, tree, int));\n-static tree method_header PROTO ((int, tree, tree, tree));\n-static void fix_method_argument_names PROTO ((tree ,tree));\n-static tree method_declarator PROTO ((tree, tree));\n-static void parse_warning_context PVPROTO ((tree cl, const char *msg, ...))\n+static char *java_accstring_lookup PARAMS ((int));\n+static void  classitf_redefinition_error PARAMS ((const char *,tree, tree, tree));\n+static void  variable_redefinition_error PARAMS ((tree, tree, tree, int));\n+static void  check_modifiers PARAMS ((const char *, int, int));\n+static tree  create_class PARAMS ((int, tree, tree, tree));\n+static tree  create_interface PARAMS ((int, tree, tree));\n+static tree  find_field PARAMS ((tree, tree));\n+static tree lookup_field_wrapper PARAMS ((tree, tree));\n+static int   duplicate_declaration_error_p PARAMS ((tree, tree, tree));\n+static void  register_fields PARAMS ((int, tree, tree));\n+static tree parser_qualified_classname PARAMS ((tree));\n+static int  parser_check_super PARAMS ((tree, tree, tree));\n+static int  parser_check_super_interface PARAMS ((tree, tree, tree));\n+static void check_modifiers_consistency PARAMS ((int));\n+static tree lookup_cl PARAMS ((tree));\n+static tree lookup_java_method2 PARAMS ((tree, tree, int));\n+static tree method_header PARAMS ((int, tree, tree, tree));\n+static void fix_method_argument_names PARAMS ((tree ,tree));\n+static tree method_declarator PARAMS ((tree, tree));\n+static void parse_warning_context PARAMS ((tree cl, const char *msg, ...))\n   ATTRIBUTE_PRINTF_2;\n-static void issue_warning_error_from_context PROTO ((tree, const char *msg, va_list));\n-static void parse_ctor_invocation_error PROTO ((void));\n-static tree parse_jdk1_1_error PROTO ((const char *));\n-static void complete_class_report_errors PROTO ((jdep *));\n-static int process_imports PROTO ((void));\n-static void read_import_dir PROTO ((tree));\n-static int find_in_imports_on_demand PROTO ((tree));\n-static int find_in_imports PROTO ((tree));\n-static int check_pkg_class_access PROTO ((tree, tree));\n-static tree resolve_package PROTO ((tree, tree *));\n-static tree lookup_package_type PROTO ((const char *, int));\n-static tree lookup_package_type_and_set_next PROTO ((const char *, int, tree *));\n-static tree resolve_class PROTO ((tree, tree, tree));\n-static void declare_local_variables PROTO ((int, tree, tree));\n-static void source_start_java_method PROTO ((tree));\n-static void source_end_java_method PROTO ((void));\n-static void expand_start_java_method PROTO ((tree));\n-static tree find_name_in_single_imports PROTO ((tree));\n-static void check_abstract_method_header PROTO ((tree));\n-static tree lookup_java_interface_method2 PROTO ((tree, tree));\n-static tree resolve_expression_name PROTO ((tree, tree *));\n-static tree maybe_create_class_interface_decl PROTO ((tree, tree, tree));\n-static int check_class_interface_creation PROTO ((int, int, tree, \n+static void issue_warning_error_from_context PARAMS ((tree, const char *msg, va_list));\n+static void parse_ctor_invocation_error PARAMS ((void));\n+static tree parse_jdk1_1_error PARAMS ((const char *));\n+static void complete_class_report_errors PARAMS ((jdep *));\n+static int process_imports PARAMS ((void));\n+static void read_import_dir PARAMS ((tree));\n+static int find_in_imports_on_demand PARAMS ((tree));\n+static int find_in_imports PARAMS ((tree));\n+static int check_pkg_class_access PARAMS ((tree, tree));\n+static tree resolve_package PARAMS ((tree, tree *));\n+static tree lookup_package_type PARAMS ((const char *, int));\n+static tree lookup_package_type_and_set_next PARAMS ((const char *, int, tree *));\n+static tree resolve_class PARAMS ((tree, tree, tree));\n+static void declare_local_variables PARAMS ((int, tree, tree));\n+static void source_start_java_method PARAMS ((tree));\n+static void source_end_java_method PARAMS ((void));\n+static void expand_start_java_method PARAMS ((tree));\n+static tree find_name_in_single_imports PARAMS ((tree));\n+static void check_abstract_method_header PARAMS ((tree));\n+static tree lookup_java_interface_method2 PARAMS ((tree, tree));\n+static tree resolve_expression_name PARAMS ((tree, tree *));\n+static tree maybe_create_class_interface_decl PARAMS ((tree, tree, tree));\n+static int check_class_interface_creation PARAMS ((int, int, tree, \n \t\t\t\t\t\t  tree, tree, tree));\n-static tree patch_method_invocation PROTO ((tree, tree, tree, \n+static tree patch_method_invocation PARAMS ((tree, tree, tree, \n \t\t\t\t\t    int *, tree *));\n-static int breakdown_qualified PROTO ((tree *, tree *, tree));\n-static tree resolve_and_layout PROTO ((tree, tree));\n-static tree resolve_no_layout PROTO ((tree, tree));\n-static int invocation_mode PROTO ((tree, int));\n-static tree find_applicable_accessible_methods_list PROTO ((int, tree, \n+static int breakdown_qualified PARAMS ((tree *, tree *, tree));\n+static tree resolve_and_layout PARAMS ((tree, tree));\n+static tree resolve_no_layout PARAMS ((tree, tree));\n+static int invocation_mode PARAMS ((tree, int));\n+static tree find_applicable_accessible_methods_list PARAMS ((int, tree, \n \t\t\t\t\t\t\t    tree, tree));\n-static void search_applicable_methods_list PROTO ((int, tree, tree, tree, \n+static void search_applicable_methods_list PARAMS ((int, tree, tree, tree, \n \t\t\t\t\t\t   tree *, tree *));\n-static tree find_most_specific_methods_list PROTO ((tree));\n-static int argument_types_convertible PROTO ((tree, tree));\n-static tree patch_invoke PROTO ((tree, tree, tree));\n-static tree lookup_method_invoke PROTO ((int, tree, tree, tree, tree));\n-static tree register_incomplete_type PROTO ((int, tree, tree, tree));\n-static tree obtain_incomplete_type PROTO ((tree));\n-static tree java_complete_lhs PROTO ((tree));\n-static tree java_complete_tree PROTO ((tree));\n-static int java_pre_expand_clinit PROTO ((tree));\n-static void java_complete_expand_method PROTO ((tree));\n-static int  unresolved_type_p PROTO ((tree, tree *));\n-static void create_jdep_list PROTO ((struct parser_ctxt *));\n-static tree build_expr_block PROTO ((tree, tree));\n-static tree enter_block PROTO ((void));\n-static tree enter_a_block PROTO ((tree));\n-static tree exit_block PROTO ((void));\n-static tree lookup_name_in_blocks PROTO ((tree));\n-static void maybe_absorb_scoping_blocks PROTO ((void));\n-static tree build_method_invocation PROTO ((tree, tree));\n-static tree build_new_invocation PROTO ((tree, tree));\n-static tree build_assignment PROTO ((int, int, tree, tree));\n-static tree build_binop PROTO ((enum tree_code, int, tree, tree));\n-static int check_final_assignment PROTO ((tree ,tree));\n-static tree patch_assignment PROTO ((tree, tree, tree ));\n-static tree patch_binop PROTO ((tree, tree, tree));\n-static tree build_unaryop PROTO ((int, int, tree));\n-static tree build_incdec PROTO ((int, int, tree, int));\n-static tree patch_unaryop PROTO ((tree, tree));\n-static tree build_cast PROTO ((int, tree, tree));\n-static tree build_null_of_type PROTO ((tree));\n-static tree patch_cast PROTO ((tree, tree));\n-static int valid_ref_assignconv_cast_p PROTO ((tree, tree, int));\n-static int valid_builtin_assignconv_identity_widening_p PROTO ((tree, tree));\n-static int valid_cast_to_p PROTO ((tree, tree));\n-static int valid_method_invocation_conversion_p PROTO ((tree, tree));\n-static tree try_builtin_assignconv PROTO ((tree, tree, tree));\n-static tree try_reference_assignconv PROTO ((tree, tree));\n-static tree build_unresolved_array_type PROTO ((tree));\n-static tree build_array_from_name PROTO ((tree, tree, tree, tree *));\n-static tree build_array_ref PROTO ((int, tree, tree));\n-static tree patch_array_ref PROTO ((tree));\n-static tree make_qualified_name PROTO ((tree, tree, int));\n-static tree merge_qualified_name PROTO ((tree, tree));\n-static tree make_qualified_primary PROTO ((tree, tree, int));\n-static int resolve_qualified_expression_name PROTO ((tree, tree *, \n+static tree find_most_specific_methods_list PARAMS ((tree));\n+static int argument_types_convertible PARAMS ((tree, tree));\n+static tree patch_invoke PARAMS ((tree, tree, tree));\n+static tree lookup_method_invoke PARAMS ((int, tree, tree, tree, tree));\n+static tree register_incomplete_type PARAMS ((int, tree, tree, tree));\n+static tree obtain_incomplete_type PARAMS ((tree));\n+static tree java_complete_lhs PARAMS ((tree));\n+static tree java_complete_tree PARAMS ((tree));\n+static int java_pre_expand_clinit PARAMS ((tree));\n+static void java_complete_expand_method PARAMS ((tree));\n+static int  unresolved_type_p PARAMS ((tree, tree *));\n+static void create_jdep_list PARAMS ((struct parser_ctxt *));\n+static tree build_expr_block PARAMS ((tree, tree));\n+static tree enter_block PARAMS ((void));\n+static tree enter_a_block PARAMS ((tree));\n+static tree exit_block PARAMS ((void));\n+static tree lookup_name_in_blocks PARAMS ((tree));\n+static void maybe_absorb_scoping_blocks PARAMS ((void));\n+static tree build_method_invocation PARAMS ((tree, tree));\n+static tree build_new_invocation PARAMS ((tree, tree));\n+static tree build_assignment PARAMS ((int, int, tree, tree));\n+static tree build_binop PARAMS ((enum tree_code, int, tree, tree));\n+static int check_final_assignment PARAMS ((tree ,tree));\n+static tree patch_assignment PARAMS ((tree, tree, tree ));\n+static tree patch_binop PARAMS ((tree, tree, tree));\n+static tree build_unaryop PARAMS ((int, int, tree));\n+static tree build_incdec PARAMS ((int, int, tree, int));\n+static tree patch_unaryop PARAMS ((tree, tree));\n+static tree build_cast PARAMS ((int, tree, tree));\n+static tree build_null_of_type PARAMS ((tree));\n+static tree patch_cast PARAMS ((tree, tree));\n+static int valid_ref_assignconv_cast_p PARAMS ((tree, tree, int));\n+static int valid_builtin_assignconv_identity_widening_p PARAMS ((tree, tree));\n+static int valid_cast_to_p PARAMS ((tree, tree));\n+static int valid_method_invocation_conversion_p PARAMS ((tree, tree));\n+static tree try_builtin_assignconv PARAMS ((tree, tree, tree));\n+static tree try_reference_assignconv PARAMS ((tree, tree));\n+static tree build_unresolved_array_type PARAMS ((tree));\n+static tree build_array_from_name PARAMS ((tree, tree, tree, tree *));\n+static tree build_array_ref PARAMS ((int, tree, tree));\n+static tree patch_array_ref PARAMS ((tree));\n+static tree make_qualified_name PARAMS ((tree, tree, int));\n+static tree merge_qualified_name PARAMS ((tree, tree));\n+static tree make_qualified_primary PARAMS ((tree, tree, int));\n+static int resolve_qualified_expression_name PARAMS ((tree, tree *, \n \t\t\t\t\t\t     tree *, tree *));\n-static void qualify_ambiguous_name PROTO ((tree));\n-static void maybe_generate_clinit PROTO ((void));\n-static tree resolve_field_access PROTO ((tree, tree *, tree *));\n-static tree build_newarray_node PROTO ((tree, tree, int));\n-static tree patch_newarray PROTO ((tree));\n-static tree resolve_type_during_patch PROTO ((tree));\n-static tree build_this PROTO ((int));\n-static tree build_return PROTO ((int, tree));\n-static tree patch_return PROTO ((tree));\n-static tree maybe_access_field PROTO ((tree, tree, tree));\n-static int complete_function_arguments PROTO ((tree));\n-static int check_for_static_method_reference PROTO ((tree, tree, tree, tree, tree));\n-static int not_accessible_p PROTO ((tree, tree, int));\n-static void check_deprecation PROTO ((tree, tree));\n-static int class_in_current_package PROTO ((tree));\n-static tree build_if_else_statement PROTO ((int, tree, tree, tree));\n-static tree patch_if_else_statement PROTO ((tree));\n-static tree add_stmt_to_compound PROTO ((tree, tree, tree));\n-static tree add_stmt_to_block PROTO ((tree, tree, tree));\n-static tree patch_exit_expr PROTO ((tree));\n-static tree build_labeled_block PROTO ((int, tree));\n-static tree finish_labeled_statement PROTO ((tree, tree));\n-static tree build_bc_statement PROTO ((int, int, tree));\n-static tree patch_bc_statement PROTO ((tree));\n-static tree patch_loop_statement PROTO ((tree));\n-static tree build_new_loop PROTO ((tree));\n-static tree build_loop_body PROTO ((int, tree, int));\n-static tree finish_loop_body PROTO ((int, tree, tree, int));\n-static tree build_debugable_stmt PROTO ((int, tree));\n-static tree finish_for_loop PROTO ((int, tree, tree, tree));\n-static tree patch_switch_statement PROTO ((tree));\n-static tree string_constant_concatenation PROTO ((tree, tree));\n-static tree build_string_concatenation PROTO ((tree, tree));\n-static tree patch_string_cst PROTO ((tree));\n-static tree patch_string PROTO ((tree));\n-static tree build_try_statement PROTO ((int, tree, tree));\n-static tree build_try_finally_statement PROTO ((int, tree, tree));\n-static tree patch_try_statement PROTO ((tree));\n-static tree patch_synchronized_statement PROTO ((tree, tree));\n-static tree patch_throw_statement PROTO ((tree, tree));\n-static void check_thrown_exceptions PROTO ((int, tree));\n-static int check_thrown_exceptions_do PROTO ((tree));\n-static void purge_unchecked_exceptions PROTO ((tree));\n-static void check_throws_clauses PROTO ((tree, tree, tree));\n-static void finish_method_declaration PROTO ((tree));\n-static tree build_super_invocation PROTO ((tree));\n-static int verify_constructor_circularity PROTO ((tree, tree));\n-static char *constructor_circularity_msg PROTO ((tree, tree));\n-static tree build_this_super_qualified_invocation PROTO ((int, tree, tree,\n+static void qualify_ambiguous_name PARAMS ((tree));\n+static void maybe_generate_clinit PARAMS ((void));\n+static tree resolve_field_access PARAMS ((tree, tree *, tree *));\n+static tree build_newarray_node PARAMS ((tree, tree, int));\n+static tree patch_newarray PARAMS ((tree));\n+static tree resolve_type_during_patch PARAMS ((tree));\n+static tree build_this PARAMS ((int));\n+static tree build_return PARAMS ((int, tree));\n+static tree patch_return PARAMS ((tree));\n+static tree maybe_access_field PARAMS ((tree, tree, tree));\n+static int complete_function_arguments PARAMS ((tree));\n+static int check_for_static_method_reference PARAMS ((tree, tree, tree, tree, tree));\n+static int not_accessible_p PARAMS ((tree, tree, int));\n+static void check_deprecation PARAMS ((tree, tree));\n+static int class_in_current_package PARAMS ((tree));\n+static tree build_if_else_statement PARAMS ((int, tree, tree, tree));\n+static tree patch_if_else_statement PARAMS ((tree));\n+static tree add_stmt_to_compound PARAMS ((tree, tree, tree));\n+static tree add_stmt_to_block PARAMS ((tree, tree, tree));\n+static tree patch_exit_expr PARAMS ((tree));\n+static tree build_labeled_block PARAMS ((int, tree));\n+static tree finish_labeled_statement PARAMS ((tree, tree));\n+static tree build_bc_statement PARAMS ((int, int, tree));\n+static tree patch_bc_statement PARAMS ((tree));\n+static tree patch_loop_statement PARAMS ((tree));\n+static tree build_new_loop PARAMS ((tree));\n+static tree build_loop_body PARAMS ((int, tree, int));\n+static tree finish_loop_body PARAMS ((int, tree, tree, int));\n+static tree build_debugable_stmt PARAMS ((int, tree));\n+static tree finish_for_loop PARAMS ((int, tree, tree, tree));\n+static tree patch_switch_statement PARAMS ((tree));\n+static tree string_constant_concatenation PARAMS ((tree, tree));\n+static tree build_string_concatenation PARAMS ((tree, tree));\n+static tree patch_string_cst PARAMS ((tree));\n+static tree patch_string PARAMS ((tree));\n+static tree build_try_statement PARAMS ((int, tree, tree));\n+static tree build_try_finally_statement PARAMS ((int, tree, tree));\n+static tree patch_try_statement PARAMS ((tree));\n+static tree patch_synchronized_statement PARAMS ((tree, tree));\n+static tree patch_throw_statement PARAMS ((tree, tree));\n+static void check_thrown_exceptions PARAMS ((int, tree));\n+static int check_thrown_exceptions_do PARAMS ((tree));\n+static void purge_unchecked_exceptions PARAMS ((tree));\n+static void check_throws_clauses PARAMS ((tree, tree, tree));\n+static void finish_method_declaration PARAMS ((tree));\n+static tree build_super_invocation PARAMS ((tree));\n+static int verify_constructor_circularity PARAMS ((tree, tree));\n+static char *constructor_circularity_msg PARAMS ((tree, tree));\n+static tree build_this_super_qualified_invocation PARAMS ((int, tree, tree,\n \t\t\t\t\t\t\t  int, int));\n-static const char *get_printable_method_name PROTO ((tree));\n-static tree patch_conditional_expr PROTO ((tree, tree, tree));\n-static void maybe_generate_finit PROTO ((void));\n-static void fix_constructors PROTO ((tree));\n-static int verify_constructor_super PROTO ((void));\n-static tree create_artificial_method PROTO ((tree, int, tree, tree, tree));\n-static void start_artificial_method_body PROTO ((tree));\n-static void end_artificial_method_body PROTO ((tree));\n-static int check_method_redefinition PROTO ((tree, tree));\n-static int reset_method_name PROTO ((tree));\n-static void java_check_regular_methods PROTO ((tree));\n-static void java_check_abstract_methods PROTO ((tree));\n-static tree maybe_build_primttype_type_ref PROTO ((tree, tree));\n-static void unreachable_stmt_error PROTO ((tree));\n-static tree find_expr_with_wfl PROTO ((tree));\n-static void missing_return_error PROTO ((tree));\n-static tree build_new_array_init PROTO ((int, tree));\n-static tree patch_new_array_init PROTO ((tree, tree));\n-static tree maybe_build_array_element_wfl PROTO ((tree));\n-static int array_constructor_check_entry PROTO ((tree, tree));\n-static const char *purify_type_name PROTO ((const char *));\n-static tree fold_constant_for_init PROTO ((tree, tree));\n-static tree strip_out_static_field_access_decl PROTO ((tree));\n-static jdeplist *reverse_jdep_list PROTO ((struct parser_ctxt *));\n-static void static_ref_err PROTO ((tree, tree, tree));\n-static void parser_add_interface PROTO ((tree, tree, tree));\n-static void add_superinterfaces PROTO ((tree, tree));\n-static tree jdep_resolve_class PROTO ((jdep *));\n-static int note_possible_classname PROTO ((const char *, int));\n-static void java_complete_expand_methods PROTO ((void));\n-static void java_expand_finals PROTO ((void));\n-static tree cut_identifier_in_qualified PROTO ((tree));\n-static tree java_stabilize_reference PROTO ((tree));\n-static tree do_unary_numeric_promotion PROTO ((tree));\n-static char * operator_string PROTO ((tree));\n-static tree do_merge_string_cste PROTO ((tree, const char *, int, int));\n-static tree merge_string_cste PROTO ((tree, tree, int));\n-static tree java_refold PROTO ((tree));\n-static int java_decl_equiv PROTO ((tree, tree));\n-static int binop_compound_p PROTO ((enum tree_code));\n-static tree search_loop PROTO ((tree));\n-static int labeled_block_contains_loop_p PROTO ((tree, tree));\n-static void check_abstract_method_definitions PROTO ((int, tree, tree));\n-static void java_check_abstract_method_definitions PROTO ((tree));\n-static void java_debug_context_do PROTO ((int));\n+static const char *get_printable_method_name PARAMS ((tree));\n+static tree patch_conditional_expr PARAMS ((tree, tree, tree));\n+static void maybe_generate_finit PARAMS ((void));\n+static void fix_constructors PARAMS ((tree));\n+static int verify_constructor_super PARAMS ((void));\n+static tree create_artificial_method PARAMS ((tree, int, tree, tree, tree));\n+static void start_artificial_method_body PARAMS ((tree));\n+static void end_artificial_method_body PARAMS ((tree));\n+static int check_method_redefinition PARAMS ((tree, tree));\n+static int reset_method_name PARAMS ((tree));\n+static void java_check_regular_methods PARAMS ((tree));\n+static void java_check_abstract_methods PARAMS ((tree));\n+static tree maybe_build_primttype_type_ref PARAMS ((tree, tree));\n+static void unreachable_stmt_error PARAMS ((tree));\n+static tree find_expr_with_wfl PARAMS ((tree));\n+static void missing_return_error PARAMS ((tree));\n+static tree build_new_array_init PARAMS ((int, tree));\n+static tree patch_new_array_init PARAMS ((tree, tree));\n+static tree maybe_build_array_element_wfl PARAMS ((tree));\n+static int array_constructor_check_entry PARAMS ((tree, tree));\n+static const char *purify_type_name PARAMS ((const char *));\n+static tree fold_constant_for_init PARAMS ((tree, tree));\n+static tree strip_out_static_field_access_decl PARAMS ((tree));\n+static jdeplist *reverse_jdep_list PARAMS ((struct parser_ctxt *));\n+static void static_ref_err PARAMS ((tree, tree, tree));\n+static void parser_add_interface PARAMS ((tree, tree, tree));\n+static void add_superinterfaces PARAMS ((tree, tree));\n+static tree jdep_resolve_class PARAMS ((jdep *));\n+static int note_possible_classname PARAMS ((const char *, int));\n+static void java_complete_expand_methods PARAMS ((void));\n+static void java_expand_finals PARAMS ((void));\n+static tree cut_identifier_in_qualified PARAMS ((tree));\n+static tree java_stabilize_reference PARAMS ((tree));\n+static tree do_unary_numeric_promotion PARAMS ((tree));\n+static char * operator_string PARAMS ((tree));\n+static tree do_merge_string_cste PARAMS ((tree, const char *, int, int));\n+static tree merge_string_cste PARAMS ((tree, tree, int));\n+static tree java_refold PARAMS ((tree));\n+static int java_decl_equiv PARAMS ((tree, tree));\n+static int binop_compound_p PARAMS ((enum tree_code));\n+static tree search_loop PARAMS ((tree));\n+static int labeled_block_contains_loop_p PARAMS ((tree, tree));\n+static void check_abstract_method_definitions PARAMS ((int, tree, tree));\n+static void java_check_abstract_method_definitions PARAMS ((tree));\n+static void java_debug_context_do PARAMS ((int));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -5211,7 +5211,7 @@ issue_warning_error_from_context (cl, msg, ap)\n /* Issue an error message at a current source line CL */\n \n void\n-parse_error_context VPROTO ((tree cl, const char *msg, ...))\n+parse_error_context VPARAMS ((tree cl, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   tree cl;\n@@ -5231,7 +5231,7 @@ parse_error_context VPROTO ((tree cl, const char *msg, ...))\n /* Issue a warning at a current source line CL */\n \n static void\n-parse_warning_context VPROTO ((tree cl, const char *msg, ...))\n+parse_warning_context VPARAMS ((tree cl, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   tree cl;"}, {"sha": "62acc705db1c79532c48c105c2d31ee88ffa26a3", "filename": "gcc/java/parse.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Language parser definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -36,8 +36,8 @@ extern int quiet_flag;\n \n #ifndef JC1_LITE\n /* Function extern to java/ */\n-extern int int_fits_type_p PROTO ((tree, tree));\n-extern tree stabilize_reference PROTO ((tree));\n+extern int int_fits_type_p PARAMS ((tree, tree));\n+extern tree stabilize_reference PARAMS ((tree));\n #endif\n \n /* Macros for verbose debug info  */\n@@ -671,28 +671,28 @@ struct parser_ctxt {\n };\n \n #ifndef JC1_LITE\n-void safe_layout_class PROTO ((tree));\n-void java_complete_class PROTO ((void));\n-void java_check_circular_reference PROTO ((void));\n-void java_fix_constructors PROTO ((void));\n-void java_check_final PROTO ((void));\n-void java_layout_classes PROTO ((void));\n-tree java_method_add_stmt PROTO ((tree, tree));\n-void java_expand_switch PROTO ((tree));\n-int java_report_errors PROTO ((void));\n-extern tree do_resolve_class PROTO ((tree, tree, tree));\n+void safe_layout_class PARAMS ((tree));\n+void java_complete_class PARAMS ((void));\n+void java_check_circular_reference PARAMS ((void));\n+void java_fix_constructors PARAMS ((void));\n+void java_check_final PARAMS ((void));\n+void java_layout_classes PARAMS ((void));\n+tree java_method_add_stmt PARAMS ((tree, tree));\n+void java_expand_switch PARAMS ((tree));\n+int java_report_errors PARAMS ((void));\n+extern tree do_resolve_class PARAMS ((tree, tree, tree));\n #endif\n-char *java_get_line_col PROTO ((char *, int, int));\n-extern void reset_report PROTO ((void));\n+char *java_get_line_col PARAMS ((char *, int, int));\n+extern void reset_report PARAMS ((void));\n \n /* Always in use, no matter what you compile */\n-void java_push_parser_context PROTO ((void));\n-void java_pop_parser_context PROTO ((int));\n-void java_init_lex PROTO ((void));\n-extern void java_parser_context_save_global PROTO ((void));\n-extern void java_parser_context_restore_global PROTO ((void));\n-int yyparse PROTO ((void));\n-extern int java_parse PROTO ((void));\n-void yyerror PROTO ((const char *));\n-extern void java_expand_classes PROTO ((void));\n+void java_push_parser_context PARAMS ((void));\n+void java_pop_parser_context PARAMS ((int));\n+void java_init_lex PARAMS ((void));\n+extern void java_parser_context_save_global PARAMS ((void));\n+extern void java_parser_context_restore_global PARAMS ((void));\n+int yyparse PARAMS ((void));\n+extern int java_parse PARAMS ((void));\n+void yyerror PARAMS ((const char *));\n+extern void java_expand_classes PARAMS ((void));\n #endif"}, {"sha": "906b808b72c849d224ee5bb19852bba731505f14", "filename": "gcc/java/parse.y", "status": "modified", "additions": 192, "deletions": 192, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Source code parsing and tree node generation for the GNU compiler\n    for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -67,202 +67,202 @@ definitions and other extensions.  */\n #include \"defaults.h\"\n \n /* Local function prototypes */\n-static char *java_accstring_lookup PROTO ((int));\n-static void  classitf_redefinition_error PROTO ((const char *,tree, tree, tree));\n-static void  variable_redefinition_error PROTO ((tree, tree, tree, int));\n-static void  check_modifiers PROTO ((const char *, int, int));\n-static tree  create_class PROTO ((int, tree, tree, tree));\n-static tree  create_interface PROTO ((int, tree, tree));\n-static tree  find_field PROTO ((tree, tree));\n-static tree lookup_field_wrapper PROTO ((tree, tree));\n-static int   duplicate_declaration_error_p PROTO ((tree, tree, tree));\n-static void  register_fields PROTO ((int, tree, tree));\n-static tree parser_qualified_classname PROTO ((tree));\n-static int  parser_check_super PROTO ((tree, tree, tree));\n-static int  parser_check_super_interface PROTO ((tree, tree, tree));\n-static void check_modifiers_consistency PROTO ((int));\n-static tree lookup_cl PROTO ((tree));\n-static tree lookup_java_method2 PROTO ((tree, tree, int));\n-static tree method_header PROTO ((int, tree, tree, tree));\n-static void fix_method_argument_names PROTO ((tree ,tree));\n-static tree method_declarator PROTO ((tree, tree));\n-static void parse_warning_context PVPROTO ((tree cl, const char *msg, ...))\n+static char *java_accstring_lookup PARAMS ((int));\n+static void  classitf_redefinition_error PARAMS ((const char *,tree, tree, tree));\n+static void  variable_redefinition_error PARAMS ((tree, tree, tree, int));\n+static void  check_modifiers PARAMS ((const char *, int, int));\n+static tree  create_class PARAMS ((int, tree, tree, tree));\n+static tree  create_interface PARAMS ((int, tree, tree));\n+static tree  find_field PARAMS ((tree, tree));\n+static tree lookup_field_wrapper PARAMS ((tree, tree));\n+static int   duplicate_declaration_error_p PARAMS ((tree, tree, tree));\n+static void  register_fields PARAMS ((int, tree, tree));\n+static tree parser_qualified_classname PARAMS ((tree));\n+static int  parser_check_super PARAMS ((tree, tree, tree));\n+static int  parser_check_super_interface PARAMS ((tree, tree, tree));\n+static void check_modifiers_consistency PARAMS ((int));\n+static tree lookup_cl PARAMS ((tree));\n+static tree lookup_java_method2 PARAMS ((tree, tree, int));\n+static tree method_header PARAMS ((int, tree, tree, tree));\n+static void fix_method_argument_names PARAMS ((tree ,tree));\n+static tree method_declarator PARAMS ((tree, tree));\n+static void parse_warning_context PARAMS ((tree cl, const char *msg, ...))\n   ATTRIBUTE_PRINTF_2;\n-static void issue_warning_error_from_context PROTO ((tree, const char *msg, va_list));\n-static void parse_ctor_invocation_error PROTO ((void));\n-static tree parse_jdk1_1_error PROTO ((const char *));\n-static void complete_class_report_errors PROTO ((jdep *));\n-static int process_imports PROTO ((void));\n-static void read_import_dir PROTO ((tree));\n-static int find_in_imports_on_demand PROTO ((tree));\n-static int find_in_imports PROTO ((tree));\n-static int check_pkg_class_access PROTO ((tree, tree));\n-static tree resolve_package PROTO ((tree, tree *));\n-static tree lookup_package_type PROTO ((const char *, int));\n-static tree lookup_package_type_and_set_next PROTO ((const char *, int, tree *));\n-static tree resolve_class PROTO ((tree, tree, tree));\n-static void declare_local_variables PROTO ((int, tree, tree));\n-static void source_start_java_method PROTO ((tree));\n-static void source_end_java_method PROTO ((void));\n-static void expand_start_java_method PROTO ((tree));\n-static tree find_name_in_single_imports PROTO ((tree));\n-static void check_abstract_method_header PROTO ((tree));\n-static tree lookup_java_interface_method2 PROTO ((tree, tree));\n-static tree resolve_expression_name PROTO ((tree, tree *));\n-static tree maybe_create_class_interface_decl PROTO ((tree, tree, tree));\n-static int check_class_interface_creation PROTO ((int, int, tree, \n+static void issue_warning_error_from_context PARAMS ((tree, const char *msg, va_list));\n+static void parse_ctor_invocation_error PARAMS ((void));\n+static tree parse_jdk1_1_error PARAMS ((const char *));\n+static void complete_class_report_errors PARAMS ((jdep *));\n+static int process_imports PARAMS ((void));\n+static void read_import_dir PARAMS ((tree));\n+static int find_in_imports_on_demand PARAMS ((tree));\n+static int find_in_imports PARAMS ((tree));\n+static int check_pkg_class_access PARAMS ((tree, tree));\n+static tree resolve_package PARAMS ((tree, tree *));\n+static tree lookup_package_type PARAMS ((const char *, int));\n+static tree lookup_package_type_and_set_next PARAMS ((const char *, int, tree *));\n+static tree resolve_class PARAMS ((tree, tree, tree));\n+static void declare_local_variables PARAMS ((int, tree, tree));\n+static void source_start_java_method PARAMS ((tree));\n+static void source_end_java_method PARAMS ((void));\n+static void expand_start_java_method PARAMS ((tree));\n+static tree find_name_in_single_imports PARAMS ((tree));\n+static void check_abstract_method_header PARAMS ((tree));\n+static tree lookup_java_interface_method2 PARAMS ((tree, tree));\n+static tree resolve_expression_name PARAMS ((tree, tree *));\n+static tree maybe_create_class_interface_decl PARAMS ((tree, tree, tree));\n+static int check_class_interface_creation PARAMS ((int, int, tree, \n \t\t\t\t\t\t  tree, tree, tree));\n-static tree patch_method_invocation PROTO ((tree, tree, tree, \n+static tree patch_method_invocation PARAMS ((tree, tree, tree, \n \t\t\t\t\t    int *, tree *));\n-static int breakdown_qualified PROTO ((tree *, tree *, tree));\n-static tree resolve_and_layout PROTO ((tree, tree));\n-static tree resolve_no_layout PROTO ((tree, tree));\n-static int invocation_mode PROTO ((tree, int));\n-static tree find_applicable_accessible_methods_list PROTO ((int, tree, \n+static int breakdown_qualified PARAMS ((tree *, tree *, tree));\n+static tree resolve_and_layout PARAMS ((tree, tree));\n+static tree resolve_no_layout PARAMS ((tree, tree));\n+static int invocation_mode PARAMS ((tree, int));\n+static tree find_applicable_accessible_methods_list PARAMS ((int, tree, \n \t\t\t\t\t\t\t    tree, tree));\n-static void search_applicable_methods_list PROTO ((int, tree, tree, tree, \n+static void search_applicable_methods_list PARAMS ((int, tree, tree, tree, \n \t\t\t\t\t\t   tree *, tree *));\n-static tree find_most_specific_methods_list PROTO ((tree));\n-static int argument_types_convertible PROTO ((tree, tree));\n-static tree patch_invoke PROTO ((tree, tree, tree));\n-static tree lookup_method_invoke PROTO ((int, tree, tree, tree, tree));\n-static tree register_incomplete_type PROTO ((int, tree, tree, tree));\n-static tree obtain_incomplete_type PROTO ((tree));\n-static tree java_complete_lhs PROTO ((tree));\n-static tree java_complete_tree PROTO ((tree));\n-static int java_pre_expand_clinit PROTO ((tree));\n-static void java_complete_expand_method PROTO ((tree));\n-static int  unresolved_type_p PROTO ((tree, tree *));\n-static void create_jdep_list PROTO ((struct parser_ctxt *));\n-static tree build_expr_block PROTO ((tree, tree));\n-static tree enter_block PROTO ((void));\n-static tree enter_a_block PROTO ((tree));\n-static tree exit_block PROTO ((void));\n-static tree lookup_name_in_blocks PROTO ((tree));\n-static void maybe_absorb_scoping_blocks PROTO ((void));\n-static tree build_method_invocation PROTO ((tree, tree));\n-static tree build_new_invocation PROTO ((tree, tree));\n-static tree build_assignment PROTO ((int, int, tree, tree));\n-static tree build_binop PROTO ((enum tree_code, int, tree, tree));\n-static int check_final_assignment PROTO ((tree ,tree));\n-static tree patch_assignment PROTO ((tree, tree, tree ));\n-static tree patch_binop PROTO ((tree, tree, tree));\n-static tree build_unaryop PROTO ((int, int, tree));\n-static tree build_incdec PROTO ((int, int, tree, int));\n-static tree patch_unaryop PROTO ((tree, tree));\n-static tree build_cast PROTO ((int, tree, tree));\n-static tree build_null_of_type PROTO ((tree));\n-static tree patch_cast PROTO ((tree, tree));\n-static int valid_ref_assignconv_cast_p PROTO ((tree, tree, int));\n-static int valid_builtin_assignconv_identity_widening_p PROTO ((tree, tree));\n-static int valid_cast_to_p PROTO ((tree, tree));\n-static int valid_method_invocation_conversion_p PROTO ((tree, tree));\n-static tree try_builtin_assignconv PROTO ((tree, tree, tree));\n-static tree try_reference_assignconv PROTO ((tree, tree));\n-static tree build_unresolved_array_type PROTO ((tree));\n-static tree build_array_from_name PROTO ((tree, tree, tree, tree *));\n-static tree build_array_ref PROTO ((int, tree, tree));\n-static tree patch_array_ref PROTO ((tree));\n-static tree make_qualified_name PROTO ((tree, tree, int));\n-static tree merge_qualified_name PROTO ((tree, tree));\n-static tree make_qualified_primary PROTO ((tree, tree, int));\n-static int resolve_qualified_expression_name PROTO ((tree, tree *, \n+static tree find_most_specific_methods_list PARAMS ((tree));\n+static int argument_types_convertible PARAMS ((tree, tree));\n+static tree patch_invoke PARAMS ((tree, tree, tree));\n+static tree lookup_method_invoke PARAMS ((int, tree, tree, tree, tree));\n+static tree register_incomplete_type PARAMS ((int, tree, tree, tree));\n+static tree obtain_incomplete_type PARAMS ((tree));\n+static tree java_complete_lhs PARAMS ((tree));\n+static tree java_complete_tree PARAMS ((tree));\n+static int java_pre_expand_clinit PARAMS ((tree));\n+static void java_complete_expand_method PARAMS ((tree));\n+static int  unresolved_type_p PARAMS ((tree, tree *));\n+static void create_jdep_list PARAMS ((struct parser_ctxt *));\n+static tree build_expr_block PARAMS ((tree, tree));\n+static tree enter_block PARAMS ((void));\n+static tree enter_a_block PARAMS ((tree));\n+static tree exit_block PARAMS ((void));\n+static tree lookup_name_in_blocks PARAMS ((tree));\n+static void maybe_absorb_scoping_blocks PARAMS ((void));\n+static tree build_method_invocation PARAMS ((tree, tree));\n+static tree build_new_invocation PARAMS ((tree, tree));\n+static tree build_assignment PARAMS ((int, int, tree, tree));\n+static tree build_binop PARAMS ((enum tree_code, int, tree, tree));\n+static int check_final_assignment PARAMS ((tree ,tree));\n+static tree patch_assignment PARAMS ((tree, tree, tree ));\n+static tree patch_binop PARAMS ((tree, tree, tree));\n+static tree build_unaryop PARAMS ((int, int, tree));\n+static tree build_incdec PARAMS ((int, int, tree, int));\n+static tree patch_unaryop PARAMS ((tree, tree));\n+static tree build_cast PARAMS ((int, tree, tree));\n+static tree build_null_of_type PARAMS ((tree));\n+static tree patch_cast PARAMS ((tree, tree));\n+static int valid_ref_assignconv_cast_p PARAMS ((tree, tree, int));\n+static int valid_builtin_assignconv_identity_widening_p PARAMS ((tree, tree));\n+static int valid_cast_to_p PARAMS ((tree, tree));\n+static int valid_method_invocation_conversion_p PARAMS ((tree, tree));\n+static tree try_builtin_assignconv PARAMS ((tree, tree, tree));\n+static tree try_reference_assignconv PARAMS ((tree, tree));\n+static tree build_unresolved_array_type PARAMS ((tree));\n+static tree build_array_from_name PARAMS ((tree, tree, tree, tree *));\n+static tree build_array_ref PARAMS ((int, tree, tree));\n+static tree patch_array_ref PARAMS ((tree));\n+static tree make_qualified_name PARAMS ((tree, tree, int));\n+static tree merge_qualified_name PARAMS ((tree, tree));\n+static tree make_qualified_primary PARAMS ((tree, tree, int));\n+static int resolve_qualified_expression_name PARAMS ((tree, tree *, \n \t\t\t\t\t\t     tree *, tree *));\n-static void qualify_ambiguous_name PROTO ((tree));\n-static void maybe_generate_clinit PROTO ((void));\n-static tree resolve_field_access PROTO ((tree, tree *, tree *));\n-static tree build_newarray_node PROTO ((tree, tree, int));\n-static tree patch_newarray PROTO ((tree));\n-static tree resolve_type_during_patch PROTO ((tree));\n-static tree build_this PROTO ((int));\n-static tree build_return PROTO ((int, tree));\n-static tree patch_return PROTO ((tree));\n-static tree maybe_access_field PROTO ((tree, tree, tree));\n-static int complete_function_arguments PROTO ((tree));\n-static int check_for_static_method_reference PROTO ((tree, tree, tree, tree, tree));\n-static int not_accessible_p PROTO ((tree, tree, int));\n-static void check_deprecation PROTO ((tree, tree));\n-static int class_in_current_package PROTO ((tree));\n-static tree build_if_else_statement PROTO ((int, tree, tree, tree));\n-static tree patch_if_else_statement PROTO ((tree));\n-static tree add_stmt_to_compound PROTO ((tree, tree, tree));\n-static tree add_stmt_to_block PROTO ((tree, tree, tree));\n-static tree patch_exit_expr PROTO ((tree));\n-static tree build_labeled_block PROTO ((int, tree));\n-static tree finish_labeled_statement PROTO ((tree, tree));\n-static tree build_bc_statement PROTO ((int, int, tree));\n-static tree patch_bc_statement PROTO ((tree));\n-static tree patch_loop_statement PROTO ((tree));\n-static tree build_new_loop PROTO ((tree));\n-static tree build_loop_body PROTO ((int, tree, int));\n-static tree finish_loop_body PROTO ((int, tree, tree, int));\n-static tree build_debugable_stmt PROTO ((int, tree));\n-static tree finish_for_loop PROTO ((int, tree, tree, tree));\n-static tree patch_switch_statement PROTO ((tree));\n-static tree string_constant_concatenation PROTO ((tree, tree));\n-static tree build_string_concatenation PROTO ((tree, tree));\n-static tree patch_string_cst PROTO ((tree));\n-static tree patch_string PROTO ((tree));\n-static tree build_try_statement PROTO ((int, tree, tree));\n-static tree build_try_finally_statement PROTO ((int, tree, tree));\n-static tree patch_try_statement PROTO ((tree));\n-static tree patch_synchronized_statement PROTO ((tree, tree));\n-static tree patch_throw_statement PROTO ((tree, tree));\n-static void check_thrown_exceptions PROTO ((int, tree));\n-static int check_thrown_exceptions_do PROTO ((tree));\n-static void purge_unchecked_exceptions PROTO ((tree));\n-static void check_throws_clauses PROTO ((tree, tree, tree));\n-static void finish_method_declaration PROTO ((tree));\n-static tree build_super_invocation PROTO ((tree));\n-static int verify_constructor_circularity PROTO ((tree, tree));\n-static char *constructor_circularity_msg PROTO ((tree, tree));\n-static tree build_this_super_qualified_invocation PROTO ((int, tree, tree,\n+static void qualify_ambiguous_name PARAMS ((tree));\n+static void maybe_generate_clinit PARAMS ((void));\n+static tree resolve_field_access PARAMS ((tree, tree *, tree *));\n+static tree build_newarray_node PARAMS ((tree, tree, int));\n+static tree patch_newarray PARAMS ((tree));\n+static tree resolve_type_during_patch PARAMS ((tree));\n+static tree build_this PARAMS ((int));\n+static tree build_return PARAMS ((int, tree));\n+static tree patch_return PARAMS ((tree));\n+static tree maybe_access_field PARAMS ((tree, tree, tree));\n+static int complete_function_arguments PARAMS ((tree));\n+static int check_for_static_method_reference PARAMS ((tree, tree, tree, tree, tree));\n+static int not_accessible_p PARAMS ((tree, tree, int));\n+static void check_deprecation PARAMS ((tree, tree));\n+static int class_in_current_package PARAMS ((tree));\n+static tree build_if_else_statement PARAMS ((int, tree, tree, tree));\n+static tree patch_if_else_statement PARAMS ((tree));\n+static tree add_stmt_to_compound PARAMS ((tree, tree, tree));\n+static tree add_stmt_to_block PARAMS ((tree, tree, tree));\n+static tree patch_exit_expr PARAMS ((tree));\n+static tree build_labeled_block PARAMS ((int, tree));\n+static tree finish_labeled_statement PARAMS ((tree, tree));\n+static tree build_bc_statement PARAMS ((int, int, tree));\n+static tree patch_bc_statement PARAMS ((tree));\n+static tree patch_loop_statement PARAMS ((tree));\n+static tree build_new_loop PARAMS ((tree));\n+static tree build_loop_body PARAMS ((int, tree, int));\n+static tree finish_loop_body PARAMS ((int, tree, tree, int));\n+static tree build_debugable_stmt PARAMS ((int, tree));\n+static tree finish_for_loop PARAMS ((int, tree, tree, tree));\n+static tree patch_switch_statement PARAMS ((tree));\n+static tree string_constant_concatenation PARAMS ((tree, tree));\n+static tree build_string_concatenation PARAMS ((tree, tree));\n+static tree patch_string_cst PARAMS ((tree));\n+static tree patch_string PARAMS ((tree));\n+static tree build_try_statement PARAMS ((int, tree, tree));\n+static tree build_try_finally_statement PARAMS ((int, tree, tree));\n+static tree patch_try_statement PARAMS ((tree));\n+static tree patch_synchronized_statement PARAMS ((tree, tree));\n+static tree patch_throw_statement PARAMS ((tree, tree));\n+static void check_thrown_exceptions PARAMS ((int, tree));\n+static int check_thrown_exceptions_do PARAMS ((tree));\n+static void purge_unchecked_exceptions PARAMS ((tree));\n+static void check_throws_clauses PARAMS ((tree, tree, tree));\n+static void finish_method_declaration PARAMS ((tree));\n+static tree build_super_invocation PARAMS ((tree));\n+static int verify_constructor_circularity PARAMS ((tree, tree));\n+static char *constructor_circularity_msg PARAMS ((tree, tree));\n+static tree build_this_super_qualified_invocation PARAMS ((int, tree, tree,\n \t\t\t\t\t\t\t  int, int));\n-static const char *get_printable_method_name PROTO ((tree));\n-static tree patch_conditional_expr PROTO ((tree, tree, tree));\n-static void maybe_generate_finit PROTO ((void));\n-static void fix_constructors PROTO ((tree));\n-static int verify_constructor_super PROTO ((void));\n-static tree create_artificial_method PROTO ((tree, int, tree, tree, tree));\n-static void start_artificial_method_body PROTO ((tree));\n-static void end_artificial_method_body PROTO ((tree));\n-static int check_method_redefinition PROTO ((tree, tree));\n-static int reset_method_name PROTO ((tree));\n-static void java_check_regular_methods PROTO ((tree));\n-static void java_check_abstract_methods PROTO ((tree));\n-static tree maybe_build_primttype_type_ref PROTO ((tree, tree));\n-static void unreachable_stmt_error PROTO ((tree));\n-static tree find_expr_with_wfl PROTO ((tree));\n-static void missing_return_error PROTO ((tree));\n-static tree build_new_array_init PROTO ((int, tree));\n-static tree patch_new_array_init PROTO ((tree, tree));\n-static tree maybe_build_array_element_wfl PROTO ((tree));\n-static int array_constructor_check_entry PROTO ((tree, tree));\n-static const char *purify_type_name PROTO ((const char *));\n-static tree fold_constant_for_init PROTO ((tree, tree));\n-static tree strip_out_static_field_access_decl PROTO ((tree));\n-static jdeplist *reverse_jdep_list PROTO ((struct parser_ctxt *));\n-static void static_ref_err PROTO ((tree, tree, tree));\n-static void parser_add_interface PROTO ((tree, tree, tree));\n-static void add_superinterfaces PROTO ((tree, tree));\n-static tree jdep_resolve_class PROTO ((jdep *));\n-static int note_possible_classname PROTO ((const char *, int));\n-static void java_complete_expand_methods PROTO ((void));\n-static void java_expand_finals PROTO ((void));\n-static tree cut_identifier_in_qualified PROTO ((tree));\n-static tree java_stabilize_reference PROTO ((tree));\n-static tree do_unary_numeric_promotion PROTO ((tree));\n-static char * operator_string PROTO ((tree));\n-static tree do_merge_string_cste PROTO ((tree, const char *, int, int));\n-static tree merge_string_cste PROTO ((tree, tree, int));\n-static tree java_refold PROTO ((tree));\n-static int java_decl_equiv PROTO ((tree, tree));\n-static int binop_compound_p PROTO ((enum tree_code));\n-static tree search_loop PROTO ((tree));\n-static int labeled_block_contains_loop_p PROTO ((tree, tree));\n-static void check_abstract_method_definitions PROTO ((int, tree, tree));\n-static void java_check_abstract_method_definitions PROTO ((tree));\n-static void java_debug_context_do PROTO ((int));\n+static const char *get_printable_method_name PARAMS ((tree));\n+static tree patch_conditional_expr PARAMS ((tree, tree, tree));\n+static void maybe_generate_finit PARAMS ((void));\n+static void fix_constructors PARAMS ((tree));\n+static int verify_constructor_super PARAMS ((void));\n+static tree create_artificial_method PARAMS ((tree, int, tree, tree, tree));\n+static void start_artificial_method_body PARAMS ((tree));\n+static void end_artificial_method_body PARAMS ((tree));\n+static int check_method_redefinition PARAMS ((tree, tree));\n+static int reset_method_name PARAMS ((tree));\n+static void java_check_regular_methods PARAMS ((tree));\n+static void java_check_abstract_methods PARAMS ((tree));\n+static tree maybe_build_primttype_type_ref PARAMS ((tree, tree));\n+static void unreachable_stmt_error PARAMS ((tree));\n+static tree find_expr_with_wfl PARAMS ((tree));\n+static void missing_return_error PARAMS ((tree));\n+static tree build_new_array_init PARAMS ((int, tree));\n+static tree patch_new_array_init PARAMS ((tree, tree));\n+static tree maybe_build_array_element_wfl PARAMS ((tree));\n+static int array_constructor_check_entry PARAMS ((tree, tree));\n+static const char *purify_type_name PARAMS ((const char *));\n+static tree fold_constant_for_init PARAMS ((tree, tree));\n+static tree strip_out_static_field_access_decl PARAMS ((tree));\n+static jdeplist *reverse_jdep_list PARAMS ((struct parser_ctxt *));\n+static void static_ref_err PARAMS ((tree, tree, tree));\n+static void parser_add_interface PARAMS ((tree, tree, tree));\n+static void add_superinterfaces PARAMS ((tree, tree));\n+static tree jdep_resolve_class PARAMS ((jdep *));\n+static int note_possible_classname PARAMS ((const char *, int));\n+static void java_complete_expand_methods PARAMS ((void));\n+static void java_expand_finals PARAMS ((void));\n+static tree cut_identifier_in_qualified PARAMS ((tree));\n+static tree java_stabilize_reference PARAMS ((tree));\n+static tree do_unary_numeric_promotion PARAMS ((tree));\n+static char * operator_string PARAMS ((tree));\n+static tree do_merge_string_cste PARAMS ((tree, const char *, int, int));\n+static tree merge_string_cste PARAMS ((tree, tree, int));\n+static tree java_refold PARAMS ((tree));\n+static int java_decl_equiv PARAMS ((tree, tree));\n+static int binop_compound_p PARAMS ((enum tree_code));\n+static tree search_loop PARAMS ((tree));\n+static int labeled_block_contains_loop_p PARAMS ((tree, tree));\n+static void check_abstract_method_definitions PARAMS ((int, tree, tree));\n+static void java_check_abstract_method_definitions PARAMS ((tree));\n+static void java_debug_context_do PARAMS ((int));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -2617,7 +2617,7 @@ issue_warning_error_from_context (cl, msg, ap)\n /* Issue an error message at a current source line CL */\n \n void\n-parse_error_context VPROTO ((tree cl, const char *msg, ...))\n+parse_error_context VPARAMS ((tree cl, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   tree cl;\n@@ -2637,7 +2637,7 @@ parse_error_context VPROTO ((tree cl, const char *msg, ...))\n /* Issue a warning at a current source line CL */\n \n static void\n-parse_warning_context VPROTO ((tree cl, const char *msg, ...))\n+parse_warning_context VPARAMS ((tree cl, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   tree cl;"}, {"sha": "e76a318d0d81279bf804c65040960b58a4d7246b", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Handle types for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -34,8 +34,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"convert.h\"\n #include \"toplev.h\"\n \n-static tree convert_ieee_real_to_integer PROTO ((tree, tree));\n-static tree parse_signature_type PROTO ((const unsigned char **,\n+static tree convert_ieee_real_to_integer PARAMS ((tree, tree));\n+static tree parse_signature_type PARAMS ((const unsigned char **,\n \t\t\t\t\t const unsigned char *));\n \n tree * type_map;"}, {"sha": "97c78eca3cbe03d1c00f22e3d65c23d37ff20bd1", "filename": "gcc/java/verify.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Handle verification of bytecoded methods for the GNU compiler for \n    the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,11 +33,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"java-except.h\"\n #include \"toplev.h\"\n \n-static void push_pending_label PROTO ((tree));\n-static tree merge_types PROTO ((tree, tree));\n-static const char *check_pending_block PROTO ((tree));\n-static void type_stack_dup PROTO ((int, int));\n-static int start_pc_cmp PROTO ((const PTR, const PTR));\n+static void push_pending_label PARAMS ((tree));\n+static tree merge_types PARAMS ((tree, tree));\n+static const char *check_pending_block PARAMS ((tree));\n+static void type_stack_dup PARAMS ((int, int));\n+static int start_pc_cmp PARAMS ((const PTR, const PTR));\n \n extern int stack_pointer;\n "}, {"sha": "b44fcc59d64e388e4372c9d825e8555bcb9b732e", "filename": "gcc/java/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Write cross reference information extracted from Java(TM)\n    source and bytecode files, in one of formats documented below.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -81,7 +81,7 @@ expand_xref (node)\n {\n   /* Maintain these two cached. */\n   static FILE *fp = NULL;\n-  static void (*current_expand) PROTO ((FILE *, tree)) = NULL;\n+  static void (*current_expand) PARAMS ((FILE *, tree)) = NULL;\n \n   if ( !flag_emit_xref )\n     return;"}, {"sha": "ef6c6552e9e25205e45e7534d7d770ec85ea4d27", "filename": "gcc/java/xref.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fxref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fxref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for the cross reference backend xref.c\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -24,11 +24,11 @@ of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n /* Exported functions. */\n-int xref_flag_value PROTO ((const char *));\n-void expand_xref PROTO ((tree));\n-void xref_set_data PROTO ((int, void *));\n-void *xref_get_data PROTO ((int));\n-void xref_set_current_fp PROTO ((FILE *));\n+int xref_flag_value PARAMS ((const char *));\n+void expand_xref PARAMS ((tree));\n+void xref_set_data PARAMS ((int, void *));\n+void *xref_get_data PARAMS ((int));\n+void xref_set_current_fp PARAMS ((FILE *));\n \n /* flag_emit_xref range of possible values. */\n \n@@ -40,7 +40,7 @@ enum {\n \n typedef struct {\n   char *key;\t\t\t         /* Activator in -fxref=<key>  */\n-  void (*expand) PROTO ((FILE *, tree)); /* Function to write xrefs out */\n+  void (*expand) PARAMS ((FILE *, tree)); /* Function to write xrefs out */\n   FILE *fp;\t\t\t         /* fp to use during the call.  */\n   void *data;\t\t\t         /* Placeholder for additional data */\n } xref_flag_table;"}, {"sha": "bfe3afeec4600f43c931f186c5493cc30606351d", "filename": "gcc/java/zextract.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fzextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fzextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzextract.c?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -2,7 +2,7 @@\n    This extracts a member from a .zip file, but does not handle\n    uncompression (since that is not needed for classes.zip).\n \n-   Copyright (C) 1996, 97-98, 1999  Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -210,8 +210,8 @@ typedef unsigned long     ulg;  /*  predefined on some systems) & match zip  */\n /* Prototypes          */\n /***********************/\n \n-static ush makeword PROTO ((const uch *));\n-static ulg makelong PROTO ((const uch *));\n+static ush makeword PARAMS ((const uch *));\n+static ulg makelong PARAMS ((const uch *));\n \n /***********************/\n /* Function makeword() */"}, {"sha": "66aa1d8a348b76d04f0c6771ad2a4178fcbd7fba", "filename": "gcc/java/zipfile.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fzipfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df32d2ce42d7607e7f189bab047762bb16d8d2c8/gcc%2Fjava%2Fzipfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzipfile.h?ref=df32d2ce42d7607e7f189bab047762bb16d8d2c8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for using a zipped' archive.\n \n-   Copyright (C) 1996, 97-98, 1999  Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -57,9 +57,9 @@ extern struct ZipFileCache *SeenZipFiles;\n    ((ZipDirectory*)((char*)(ZIPD)+(ZIPD)->direntry_size))\n #define ZIPMAGIC 0x504b0304\t\n \n-extern ZipFile * opendir_in_zip PROTO ((const char *, int));\n-extern int read_zip_archive PROTO ((ZipFile *));\n+extern ZipFile * opendir_in_zip PARAMS ((const char *, int));\n+extern int read_zip_archive PARAMS ((ZipFile *));\n #ifdef JCF_ZIP\n-extern int open_in_zip PROTO ((struct JCF *, const char *,\n+extern int open_in_zip PARAMS ((struct JCF *, const char *,\n \t\t\t       const char *, int));\n #endif"}]}