{"sha": "b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU4ZGMwYjgwMzA1N2MwZTYwMzJlMGQ5YmQ5MmNkODM0ZjcyYzc1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-27T12:32:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-29T06:32:14Z"}, "message": "tree-optimization/99912 - delete trivially dead stmts during DSE\n\nDSE performs a backwards walk over stmts removing stores but it\nleaves removing resulting dead SSA defs to later passes.  This\neats into its own alias walking budget if the removed stores kept\nloads live.  The following patch adds removal of trivially dead\nSSA defs which helps in this situation and reduces the amount of\ngarbage followup passes need to deal with.\n\n2021-04-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99912\n\t* tree-ssa-dse.c (dse_dom_walker::m_need_cfg_cleanup): New.\n\t(dse_dom_walker::todo): Likewise.\n\t(dse_dom_walker::dse_optimize_stmt): Move VDEF check to the\n\tcaller.\n\t(dse_dom_walker::before_dom_children): Remove trivially\n\tdead SSA defs and schedule CFG cleanup if we removed all\n\tPHIs in a block.\n\t(pass_dse::execute): Get TODO as computed by the DOM walker\n\tand return it.  Wipe dominator info earlier.\n\n\t* gcc.dg/pr95580.c: Disable DSE.\n\t* gcc.dg/Wrestrict-8.c: Place a use after each memcpy.\n\t* c-c++-common/ubsan/overflow-negate-3.c: Make asms volatile\n\tto prevent them from being removed.\n\t* c-c++-common/ubsan/overflow-sub-4.c: Likewise.", "tree": {"sha": "10646b0a8e6364098f9965acdf76056e136f14e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10646b0a8e6364098f9965acdf76056e136f14e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ddce3f7d0db060885df24e41dd289173ec774a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddce3f7d0db060885df24e41dd289173ec774a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddce3f7d0db060885df24e41dd289173ec774a0"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "6b612fa3fb72626db749449109bbf78690994f39", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-negate-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-3.c?ref=b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "patch": "@@ -8,11 +8,11 @@ main ()\n {\n   int x = INT_MIN;\n   int y;\n-  asm (\"\" : \"+g\" (x));\n+  __asm__ volatile (\"\" : \"+g\" (x));\n   y = -(-x);\n-  asm (\"\" : \"+g\" (y));\n+  __asm__ volatile (\"\" : \"+g\" (y));\n   y = -(-INT_MIN);\n-  asm (\"\" : \"+g\" (y));\n+  __asm__ volatile (\"\" : \"+g\" (y));\n }\n \n /* { dg-output \"negation of -2147483648 cannot be represented in type 'int'\\[^\\n\\r]*; cast to an unsigned type to negate this value to itself\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "14ed5fb93cd3537822430d838e547e316c65ad88", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c?ref=b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "patch": "@@ -9,10 +9,10 @@ main ()\n   int x = INT_MIN;\n   int y = 0;\n   int z;\n-  asm (\"\" : \"+g\" (y));\n-  asm (\"\" : \"+g\" (x));\n+  __asm__ volatile (\"\" : \"+g\" (y));\n+  __asm__ volatile (\"\" : \"+g\" (x));\n   z = y - (-x);\n-  asm (\"\" : \"+g\" (z));\n+  __asm__ volatile (\"\" : \"+g\" (z));\n }\n \n /* { dg-output \"negation of -2147483648 cannot be represented in type 'int'\\[^\\n\\r]*; cast to an unsigned type to negate this value to itself\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "62e8bbc3027a8a0f207e4015af232ba547ae2a1e", "filename": "gcc/testsuite/gcc.dg/Wrestrict-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-8.c?ref=b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "patch": "@@ -7,7 +7,9 @@ typedef __SIZE_TYPE__ size_t;\n \n extern void* memcpy (void* restrict, const void* restrict, size_t);\n \n-#define T(d, s, n)   memcpy (d, s, n)\n+void foo (void *);\n+\n+#define T(d, s, n)   do { memcpy (d, s, n); foo (d); } while (0)\n \n struct S1 { char c; } a8_1[8];\n "}, {"sha": "77d8150baa85e6b706bfe426340710acc6cf0736", "filename": "gcc/testsuite/gcc.dg/pr95580.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95580.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95580.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95580.c?ref=b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "patch": "@@ -1,6 +1,6 @@\n /* PR c/95580 */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -W -fno-tree-dce\" } */\n+/* { dg-options \"-O1 -W -fno-tree-dce -fno-tree-dse\" } */\n \n void bar (void);\n "}, {"sha": "aecf6ab8c46c481f61a0d813df6f39b87677b11c", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58dc0b803057c0e6032e0d9bd92cd834f72c75c/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "patch": "@@ -963,16 +963,25 @@ class dse_dom_walker : public dom_walker\n   dse_dom_walker (cdi_direction direction)\n     : dom_walker (direction),\n     m_live_bytes (param_dse_max_object_size),\n-    m_byte_tracking_enabled (false) {}\n+    m_byte_tracking_enabled (false),\n+    m_need_cfg_cleanup (false) {}\n \n   virtual edge before_dom_children (basic_block);\n+  unsigned todo () const;\n \n private:\n   auto_sbitmap m_live_bytes;\n   bool m_byte_tracking_enabled;\n+  bool m_need_cfg_cleanup;\n   void dse_optimize_stmt (gimple_stmt_iterator *);\n };\n \n+unsigned\n+dse_dom_walker::todo () const\n+{\n+  return m_need_cfg_cleanup ? TODO_cleanup_cfg : 0;\n+}\n+\n /* Delete a dead call at GSI, which is mem* call of some kind.  */\n static void\n delete_dead_or_redundant_call (gimple_stmt_iterator *gsi, const char *type)\n@@ -1049,11 +1058,6 @@ dse_dom_walker::dse_optimize_stmt (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n-  /* If this statement has no virtual defs, then there is nothing\n-     to do.  */\n-  if (!gimple_vdef (stmt))\n-    return;\n-\n   /* Don't return early on *this_2(D) ={v} {CLOBBER}.  */\n   if (gimple_has_volatile_ops (stmt)\n       && (!gimple_clobber_p (stmt)\n@@ -1180,12 +1184,53 @@ dse_dom_walker::before_dom_children (basic_block bb)\n \n   for (gsi = gsi_last_bb (bb); !gsi_end_p (gsi);)\n     {\n-      dse_optimize_stmt (&gsi);\n+      gimple *stmt = gsi_stmt (gsi);\n+\n+      if (gimple_vdef (stmt))\n+\tdse_optimize_stmt (&gsi);\n+      else if (def_operand_p def_p = single_ssa_def_operand (stmt, SSA_OP_DEF))\n+\t{\n+\t  /* When we remove dead stores make sure to also delete trivially\n+\t     dead SSA defs.  */\n+\t  if (has_zero_uses (DEF_FROM_PTR (def_p))\n+\t      && !gimple_has_side_effects (stmt))\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"  Deleted trivially dead stmt: \");\n+\t\t  print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n+\t\t  fprintf (dump_file, \"\\n\");\n+\t\t}\n+\t      if (gsi_remove (&gsi, true) && need_eh_cleanup)\n+\t\tbitmap_set_bit (need_eh_cleanup, bb->index);\n+\t      release_defs (stmt);\n+\t    }\n+\t}\n       if (gsi_end_p (gsi))\n \tgsi = gsi_last_bb (bb);\n       else\n \tgsi_prev (&gsi);\n     }\n+  bool removed_phi = false;\n+  for (gphi_iterator si = gsi_start_phis (bb); !gsi_end_p (si);)\n+    {\n+      gphi *phi = si.phi ();\n+      if (has_zero_uses (gimple_phi_result (phi)))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"  Deleted trivially dead PHI: \");\n+\t      print_gimple_stmt (dump_file, phi, 0, dump_flags);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t  remove_phi_node (&si, true);\n+\t  removed_phi = true;\n+\t}\n+      else\n+\tgsi_next (&si);\n+    }\n+  if (removed_phi && gimple_seq_empty_p (phi_nodes (bb)))\n+    m_need_cfg_cleanup = true;\n   return NULL;\n }\n \n@@ -1234,21 +1279,23 @@ pass_dse::execute (function *fun)\n \n   /* Dead store elimination is fundamentally a walk of the post-dominator\n      tree and a backwards walk of statements within each block.  */\n-  dse_dom_walker (CDI_POST_DOMINATORS).walk (fun->cfg->x_exit_block_ptr);\n+  dse_dom_walker walker (CDI_POST_DOMINATORS);\n+  walker.walk (fun->cfg->x_exit_block_ptr);\n+  free_dominance_info (CDI_POST_DOMINATORS);\n+\n+  unsigned todo = walker.todo ();\n \n   /* Removal of stores may make some EH edges dead.  Purge such edges from\n      the CFG as needed.  */\n   if (!bitmap_empty_p (need_eh_cleanup))\n     {\n       gimple_purge_all_dead_eh_edges (need_eh_cleanup);\n-      cleanup_tree_cfg ();\n+      todo |= TODO_cleanup_cfg;\n     }\n \n   BITMAP_FREE (need_eh_cleanup);\n \n-  /* For now, just wipe the post-dominator information.  */\n-  free_dominance_info (CDI_POST_DOMINATORS);\n-  return 0;\n+  return todo;\n }\n \n } // anon namespace"}]}