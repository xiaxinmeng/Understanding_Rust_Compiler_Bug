{"sha": "f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyZWI1OTEzNGQ2ZDU1ZDUwY2JjZTNlMTkwMGUyZGFmZGZhYzhhYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T08:51:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T08:51:18Z"}, "message": "[multiple changes]\n\n2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Associations): minor reformatting.\n\t(Check_Fixed_Point_Actual): Do not emit a warning on a fixed\n\tpoint type actual that has user-defined arithmetic primitives,\n\twhen there is a previous actual for a formal package that defines\n\ta fixed-point type with the parent user-defined operator.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Generate_Range_Check): Reinstate part of previous change.\n\t* sem_attr.adb (Resolve_Attribute): Generate a range check when\n\tthe component type allows range checks.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aux.adb (Is_Generic_Formal): Use original node to locate\n\tcorresponding declaration, because formal derived types are\n\trewritten as private extensions.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension_Binary_Op): Do not check\n\tdimensions of operands if node has been analyzed already, because\n\tprevious analysis and dimension checking will have removed the\n\tdimension information from the operands.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb: Document the use of switch -gnatd.s.\n\t* einfo.ads Update the documentation on attribute\n\tSec_Stack_Needed_For_Return and attribute Uses_Sec_Stack. Remove\n\tthe uses of these attributes from certain entities.\n\t* exp_ch7.adb (Make_Transient_Block): Reimplement the circuitry\n\twhich determines whether the block should continue to manage\n\tthe secondary stack.\n\t(Manages_Sec_Stack): New routine.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* atree.ads: Minor edit.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sinfo.ads: Update the section on Ghost mode. Add\n\ta section on SPARK mode. Update the placement of section on\n\texpression functions.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* sinput.adb (Get_Source_File_Index): Don't\n\tassert that S is in the right range in the case where this is\n\ta .dg file under construction.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Check_Result_And_Post_State):\n\tHandle more precisely each conjunct in expressions formed by\n\tand'ing sub-expressions.\n\nFrom-SVN: r247295", "tree": {"sha": "d985bcd1354ec7cef63943596e30ef30a9ae7c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d985bcd1354ec7cef63943596e30ef30a9ae7c9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/comments", "author": null, "committer": null, "parents": [{"sha": "0c3ef0cc2a5bbf36f5e2767301408d1d4eb510fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3ef0cc2a5bbf36f5e2767301408d1d4eb510fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3ef0cc2a5bbf36f5e2767301408d1d4eb510fa"}], "stats": {"total": 587, "additions": 444, "deletions": 143}, "files": [{"sha": "1155c406c1b97b62d90f7c7db6e79ae0310ae6ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -1,3 +1,67 @@\n+2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Associations): minor reformatting.\n+\t(Check_Fixed_Point_Actual): Do not emit a warning on a fixed\n+\tpoint type actual that has user-defined arithmetic primitives,\n+\twhen there is a previous actual for a formal package that defines\n+\ta fixed-point type with the parent user-defined operator.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Generate_Range_Check): Reinstate part of previous change.\n+\t* sem_attr.adb (Resolve_Attribute): Generate a range check when\n+\tthe component type allows range checks.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aux.adb (Is_Generic_Formal): Use original node to locate\n+\tcorresponding declaration, because formal derived types are\n+\trewritten as private extensions.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.adb (Analyze_Dimension_Binary_Op): Do not check\n+\tdimensions of operands if node has been analyzed already, because\n+\tprevious analysis and dimension checking will have removed the\n+\tdimension information from the operands.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* debug.adb: Document the use of switch -gnatd.s.\n+\t* einfo.ads Update the documentation on attribute\n+\tSec_Stack_Needed_For_Return and attribute Uses_Sec_Stack. Remove\n+\tthe uses of these attributes from certain entities.\n+\t* exp_ch7.adb (Make_Transient_Block): Reimplement the circuitry\n+\twhich determines whether the block should continue to manage\n+\tthe secondary stack.\n+\t(Manages_Sec_Stack): New routine.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads: Minor edit.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sinfo.ads: Update the section on Ghost mode. Add\n+\ta section on SPARK mode. Update the placement of section on\n+\texpression functions.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* sinput.adb (Get_Source_File_Index): Don't\n+\tassert that S is in the right range in the case where this is\n+\ta .dg file under construction.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Check_Result_And_Post_State):\n+\tHandle more precisely each conjunct in expressions formed by\n+\tand'ing sub-expressions.\n+\n 2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch4.adb, sem_ch4.adb: Minor typo fix and reformatting."}, {"sha": "92eabe43f8cf278817e0e29392e903d1a5ec06e7", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3931,7 +3931,7 @@ package Atree is\n       --  The nodes of the tree are stored in a table (i.e. an array). In the\n       --  case of extended nodes six consecutive components in the array are\n       --  used. There are thus two formats for array components. One is used\n-      --  for non-extended nodes, and for the first component of extended\n+      --  for nonextended nodes, and for the first component of extended\n       --  nodes. The other is used for the extension parts (second, third,\n       --  fourth, fifth, and sixth components) of an extended node. A variant\n       --  record structure is used to distinguish the two formats.\n@@ -4021,7 +4021,7 @@ package Atree is\n          --    Pflag2            used as Flag63,Flag64,Flag151,Flag238,Flag309\n \n          Nkind : Node_Kind;\n-         --  For a non-extended node, or the initial section of an extended\n+         --  For a nonextended node, or the initial section of an extended\n          --  node, this field holds the Node_Kind value. For an extended node,\n          --  The Nkind field is used as follows:\n          --\n@@ -4032,11 +4032,11 @@ package Atree is\n          --     Sixth entry:   holds 8 additional flags (Flag310-317)\n          --     Seventh entry: currently unused\n \n-         --  Now finally (on an 32-bit boundary) comes the variant part\n+         --  Now finally (on a 32-bit boundary) comes the variant part\n \n          case Is_Extension is\n \n-            --  Non-extended node, or first component of extended node\n+            --  Nonextended node, or first component of extended node\n \n             when False =>\n \n@@ -4070,7 +4070,7 @@ package Atree is\n                Field10 : Union_Id;\n                Field11 : Union_Id;\n                Field12 : Union_Id;\n-               --  Seven additional general fields available only for entities\n+               --  Seven additional general fields available only for entities.\n                --  See package Einfo for details of their use (which depends\n                --  on the value in the Ekind field).\n "}, {"sha": "6f0dace3f9c15884100e228dc10ab479d6fbb2b8", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -6697,9 +6697,20 @@ package body Checks is\n          Set_Etype (N, Target_Base_Type);\n       end Convert_And_Check_Range;\n \n+      --  Local variables\n+\n+      Checks_On : constant Boolean :=\n+                    not Index_Checks_Suppressed (Target_Type)\n+                      or else\n+                    not Range_Checks_Suppressed (Target_Type);\n+\n    --  Start of processing for Generate_Range_Check\n \n    begin\n+      if not Expander_Active or not Checks_On then\n+         return;\n+      end if;\n+\n       --  First special case, if the source type is already within the range\n       --  of the target type, then no check is needed (probably we should have\n       --  stopped Do_Range_Check from being set in the first place, but better"}, {"sha": "f6ea350990663dd5db606358f49cb312a4e223cf", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,7 +109,7 @@ package body Debug is\n    --  d.p  Use original Ada 95 semantics for Bit_Order (disable AI95-0133)\n    --  d.q  Suppress optimizations on imported 'in'\n    --  d.r  Enable OK_To_Reorder_Components in non-variant records\n-   --  d.s\n+   --  d.s  Minimize secondary stack Mark and Release calls\n    --  d.t  Disable static allocation of library level dispatch tables\n    --  d.u  Enable Modify_Tree_For_C (update tree for c)\n    --  d.v  Enable OK_To_Reorder_Components in variant records\n@@ -572,6 +572,11 @@ package body Debug is\n    --  d.r  Forces the flag OK_To_Reorder_Components to be set in all record\n    --       base types that have no discriminants.\n \n+   --  d.s  The compiler does not generate calls to secondary stack management\n+   --       routines SS_Mark and SS_Release for a transient block when there is\n+   --       an enclosing scoping construct which already manages the secondary\n+   --       stack.\n+\n    --  d.t  The compiler has been modified (a fairly extensive modification)\n    --       to generate static dispatch tables for library level tagged types.\n    --       This debug switch disables this modification and reverts to the"}, {"sha": "3f9ddac43469b490ec0727abd4b25460424c1fe8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4163,10 +4163,10 @@ package Einfo is\n --       needed, since returns an invalid value in this case.\n \n --    Sec_Stack_Needed_For_Return (Flag167)\n---       Defined in scope entities (blocks, functions, procedures, tasks,\n---       entries). Set to True when secondary stack is used to hold the\n---       returned value of a function and thus should not be released on\n---       scope exit.\n+--       Defined in scope entities (blocks, entries, entry families, functions,\n+--       and procedures). Set to True when secondary stack is used to hold the\n+--       returned value of a function and thus should not be released on scope\n+--       exit.\n \n --    Shadow_Entities (List14)\n --       Defined in package and generic package entities. Points to a list\n@@ -4522,9 +4522,10 @@ package Einfo is\n --       Protection object (see System.Tasking.Protected_Objects).\n \n --    Uses_Sec_Stack (Flag95)\n---       Defined in scope entities (block, entry, function, loop, procedure,\n---       task). Set to True when secondary stack is used in this scope and must\n---       be released on exit unless Sec_Stack_Needed_For_Return is set.\n+--       Defined in scope entities (blocks, entries, entry families, functions,\n+--       loops, and procedures). Set to True when the secondary stack is used\n+--       in this scope and must be released on exit unless flag\n+--       Sec_Stack_Needed_For_Return is set.\n \n --    Validated_Object (Node36)\n --       Defined in variables. Contains the object whose value is captured by\n@@ -6442,11 +6443,9 @@ package Einfo is\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n    --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n-   --    Sec_Stack_Needed_For_Return         (Flag167)  ???\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Uses_Lock_Free                      (Flag188)\n-   --    Uses_Sec_Stack                      (Flag95)   ???\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n    --    Has_Entries                         (synth)\n@@ -6597,10 +6596,8 @@ package Einfo is\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Storage_Size_Clause             (Flag23)   (base type only)\n    --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n-   --    Sec_Stack_Needed_For_Return         (Flag167)  ???\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n-   --    Uses_Sec_Stack                      (Flag95)   ???\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n    --    Has_Entries                         (synth)"}, {"sha": "e15223367f30e1af7ef8afb872723e90368a9950", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 92, "deletions": 59, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8266,83 +8266,115 @@ package body Exp_Ch7 is\n       Action : Node_Id;\n       Par    : Node_Id) return Node_Id\n    is\n-      Decls  : constant List_Id := New_List;\n-      Instrs : constant List_Id := New_List (Action);\n-      Block  : Node_Id;\n-      Insert : Node_Id;\n+      function Manages_Sec_Stack (Id : Entity_Id) return Boolean;\n+      --  Determine whether scoping entity Id manages the secondary stack\n \n-   begin\n-      --  Case where only secondary stack use is involved\n+      -----------------------\n+      -- Manages_Sec_Stack --\n+      -----------------------\n \n-      if Uses_Sec_Stack (Current_Scope)\n-        and then Nkind (Action) /= N_Simple_Return_Statement\n-        and then Nkind (Par) /= N_Exception_Handler\n-      then\n-         declare\n-            S : Entity_Id;\n+      function Manages_Sec_Stack (Id : Entity_Id) return Boolean is\n+      begin\n+         --  An exception handler with a choice parameter utilizes a dummy\n+         --  block to provide a declarative region. Such a block should not be\n+         --  considered because it never manifests in the tree and can never\n+         --  release the secondary stack.\n+\n+         if Ekind (Id) = E_Block\n+           and then Uses_Sec_Stack (Id)\n+           and then not Is_Exception_Handler (Id)\n+         then\n+            return True;\n \n-         begin\n-            S := Scope (Current_Scope);\n-            loop\n-               --  At the outer level, no need to release the sec stack\n+         --  Loops are intentionally excluded because they undergo special\n+         --  treatment, see Establish_Transient_Scope.\n \n-               if S = Standard_Standard then\n-                  Set_Uses_Sec_Stack (Current_Scope, False);\n-                  exit;\n+         elsif Ekind_In (Id, E_Entry,\n+                             E_Entry_Family,\n+                             E_Function,\n+                             E_Procedure)\n+           and then Uses_Sec_Stack (Id)\n+         then\n+            return True;\n \n-               --  In a function, only release the sec stack if the function\n-               --  does not return on the sec stack otherwise the result may\n-               --  be lost. The caller is responsible for releasing.\n+         else\n+            return False;\n+         end if;\n+      end Manages_Sec_Stack;\n \n-               elsif Ekind (S) = E_Function then\n-                  Set_Uses_Sec_Stack (Current_Scope, False);\n+      --  Local variables\n \n-                  if not Requires_Transient_Scope (Etype (S)) then\n-                     Set_Uses_Sec_Stack (S, True);\n-                     Check_Restriction (No_Secondary_Stack, Action);\n-                  end if;\n+      Decls    : constant List_Id   := New_List;\n+      Instrs   : constant List_Id   := New_List (Action);\n+      Trans_Id : constant Entity_Id := Current_Scope;\n \n-                  exit;\n+      Block  : Node_Id;\n+      Insert : Node_Id;\n+      Scop   : Entity_Id;\n \n-               --  In a loop or entry we should install a block encompassing\n-               --  all the construct. For now just release right away.\n+   --  Start of processing for Make_Transient_Block\n \n-               elsif Ekind_In (S, E_Entry, E_Loop) then\n-                  exit;\n+   begin\n+      --  Even though the transient block is tasked with managing the secondary\n+      --  stack, the block may forgo this functionality depending on how the\n+      --  secondary stack is managed by enclosing scopes.\n \n-               --  In a procedure or a block, release the sec stack on exit\n-               --  from the construct. Note that an exception handler with a\n-               --  choice parameter requires a declarative region in the form\n-               --  of a block. The block does not physically manifest in the\n-               --  tree as it only serves as a scope. Do not consider such a\n-               --  block because it will never release the sec stack.\n+      if Manages_Sec_Stack (Trans_Id) then\n \n-               --  ??? Memory leak can be created by recursive calls\n+         --  Determine whether an enclosing scope already manages the secondary\n+         --  stack.\n \n-               elsif Ekind (S) = E_Procedure\n-                 or else (Ekind (S) = E_Block\n-                           and then not Is_Exception_Handler (S))\n-               then\n-                  Set_Uses_Sec_Stack (Current_Scope, False);\n-                  Set_Uses_Sec_Stack (S, True);\n-                  Check_Restriction (No_Secondary_Stack, Action);\n-                  exit;\n+         Scop := Scope (Trans_Id);\n+         while Present (Scop) loop\n+            if Scop = Standard_Standard then\n+               exit;\n \n-               else\n-                  S := Scope (S);\n-               end if;\n-            end loop;\n-         end;\n+            --  The transient block must manage the secondary stack when the\n+            --  block appears within a loop in order to reclaim the memory at\n+            --  each iteration.\n+\n+            elsif Ekind (Scop) = E_Loop then\n+               exit;\n+\n+            --  The transient block is within a function which returns on the\n+            --  secondary stack. Take a conservative approach and assume that\n+            --  the value on the secondary stack is part of the result. Note\n+            --  that it is not possible to detect this dependency without flow\n+            --  analysis which the compiler does not have. Letting the object\n+            --  live longer than the transient block will not leak any memory\n+            --  because the caller will reclaim the total storage used by the\n+            --  function.\n+\n+            elsif Ekind (Scop) = E_Function\n+              and then Sec_Stack_Needed_For_Return (Scop)\n+            then\n+               Set_Uses_Sec_Stack (Trans_Id, False);\n+               exit;\n+\n+            --  When requested, the transient block does not need to manage the\n+            --  secondary stack when there exists an enclosing block, entry,\n+            --  entry family, function, or a procedure which already does that.\n+            --  This optimization saves on SS_Mark and SS_Release calls but may\n+            --  allow objects to live a little longer than required.\n+\n+            elsif Debug_Flag_Dot_S and then Manages_Sec_Stack (Scop) then\n+               Set_Uses_Sec_Stack (Trans_Id, False);\n+               exit;\n+            end if;\n+\n+            Scop := Scope (Scop);\n+         end loop;\n       end if;\n \n       --  Create the transient block. Set the parent now since the block itself\n-      --  is not part of the tree. The current scope is the E_Block entity\n-      --  that has been pushed by Establish_Transient_Scope.\n+      --  is not part of the tree. The current scope is the E_Block entity that\n+      --  has been pushed by Establish_Transient_Scope.\n+\n+      pragma Assert (Ekind (Trans_Id) = E_Block);\n \n-      pragma Assert (Ekind (Current_Scope) = E_Block);\n       Block :=\n         Make_Block_Statement (Loc,\n-          Identifier                 => New_Occurrence_Of (Current_Scope, Loc),\n+          Identifier                 => New_Occurrence_Of (Trans_Id, Loc),\n           Declarations               => Decls,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Statements => Instrs),\n@@ -8357,8 +8389,9 @@ package body Exp_Ch7 is\n         (Action, Clean => False, Manage_SS => False);\n \n       Insert := Prev (Action);\n+\n       if Present (Insert) then\n-         Freeze_All (First_Entity (Current_Scope), Insert);\n+         Freeze_All (First_Entity (Trans_Id), Insert);\n       end if;\n \n       --  Transfer cleanup actions to the newly created block"}, {"sha": "91f474279f565710d253d78a940e08041cf65e08", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -11611,6 +11611,7 @@ package body Sem_Attr is\n \n                   if Is_Scalar_Type (Component_Type (Typ))\n                     and then not Is_OK_Static_Expression (Expr)\n+                    and then not Range_Checks_Suppressed (Component_Type (Typ))\n                   then\n                      if Is_Entity_Name (Expr)\n                        and then Etype (Expr) = Component_Type (Typ)\n@@ -11682,6 +11683,8 @@ package body Sem_Attr is\n \n                      if Is_Scalar_Type (Etype (Entity (Comp)))\n                        and then not Is_OK_Static_Expression (Expr)\n+                       and then not Range_Checks_Suppressed\n+                                      (Etype (Entity (Comp)))\n                      then\n                         Set_Do_Range_Check (Expr);\n                      end if;"}, {"sha": "4cb272e209c499af9a0858064a96582489df5f43", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -1041,11 +1041,16 @@ package body Sem_Aux is\n \n    function Is_Generic_Formal (E : Entity_Id) return Boolean is\n       Kind : Node_Kind;\n+\n    begin\n       if No (E) then\n          return False;\n       else\n-         Kind := Nkind (Parent (E));\n+         --  Formal derived types are rewritten as private extensions, so\n+         --  examine original node.\n+\n+         Kind := Nkind (Original_Node (Parent (E)));\n+\n          return\n            Nkind_In (Kind, N_Formal_Object_Declaration,\n                            N_Formal_Package_Declaration,"}, {"sha": "78bd751e2b19b67c3fabd4cae60e4cb63d5114b4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -1074,7 +1074,7 @@ package body Sem_Ch12 is\n       F_Copy  : List_Id) return List_Id\n    is\n       Actuals_To_Freeze : constant Elist_Id  := New_Elmt_List;\n-      Assoc             : constant List_Id   := New_List;\n+      Assoc_List        : constant List_Id   := New_List;\n       Default_Actuals   : constant List_Id   := New_List;\n       Gen_Unit          : constant Entity_Id :=\n                             Defining_Entity (Parent (F_Copy));\n@@ -1204,6 +1204,7 @@ package body Sem_Ch12 is\n          Prims  : constant Elist_Id  := Collect_Primitive_Operations (Typ);\n          Elem   : Elmt_Id;\n          Formal : Node_Id;\n+         Op     : Entity_Id;\n \n       begin\n          --  Locate primitive operations of the type that are arithmetic\n@@ -1218,12 +1219,54 @@ package body Sem_Ch12 is\n                --  to justify a warning.\n \n                Formal := First_Non_Pragma (Formals);\n+               Op     := Alias (Node (Elem));\n+\n                while Present (Formal) loop\n                   if Nkind (Formal) = N_Formal_Concrete_Subprogram_Declaration\n                     and then Chars (Defining_Entity (Formal)) =\n                                Chars (Node (Elem))\n                   then\n                      exit;\n+\n+                  elsif Nkind (Formal) = N_Formal_Package_Declaration then\n+                     declare\n+                        Assoc : Node_Id;\n+                        Ent   : Entity_Id;\n+\n+                     begin\n+                        --  Locate corresponding actual, and check whether it\n+                        --  includes a fixed-point type.\n+\n+                        Assoc := First (Assoc_List);\n+                        while Present (Assoc) loop\n+                           exit when\n+                             Nkind (Assoc) = N_Package_Renaming_Declaration\n+                               and then Chars (Defining_Unit_Name (Assoc)) =\n+                                 Chars (Defining_Identifier (Formal));\n+\n+                           Next (Assoc);\n+                        end loop;\n+\n+                        if Present (Assoc) then\n+\n+                           --  If formal package declares a fixed-point type,\n+                           --  and the user-defined operator is derived from\n+                           --  a generic instance package, the fixed-point type\n+                           --  does not use the corresponding predefined op.\n+\n+                           Ent := First_Entity (Entity (Name (Assoc)));\n+                           while Present (Ent) loop\n+                              if Is_Fixed_Point_Type (Ent)\n+                                and then Present (Op)\n+                                and then Is_Generic_Instance (Scope (Op))\n+                              then\n+                                 return;\n+                              end if;\n+\n+                              Next_Entity (Ent);\n+                           end loop;\n+                        end if;\n+                     end;\n                   end if;\n \n                   Next (Formal);\n@@ -1414,7 +1457,7 @@ package body Sem_Ch12 is\n             Set_Defining_Identifier (Decl, Id);\n          end if;\n \n-         Append (Decl, Assoc);\n+         Append (Decl, Assoc_List);\n \n          if No (Found_Assoc) then\n             Default :=\n@@ -1610,7 +1653,7 @@ package body Sem_Ch12 is\n                   else\n                      Append_List\n                        (Instantiate_Object (Formal, Match, Analyzed_Formal),\n-                        Assoc);\n+                        Assoc_List);\n \n                      --  For a defaulted in_parameter, create an entry in the\n                      --  the list of defaulted actuals, for GNATProve use. Do\n@@ -1667,8 +1710,8 @@ package body Sem_Ch12 is\n                      Analyze (Match);\n                      Append_List\n                        (Instantiate_Type\n-                          (Formal, Match, Analyzed_Formal, Assoc),\n-                        Assoc);\n+                          (Formal, Match, Analyzed_Formal, Assoc_List),\n+                        Assoc_List);\n \n                      if Is_Fixed_Point_Type (Entity (Match)) then\n                         Check_Fixed_Point_Actual (Match);\n@@ -1767,7 +1810,7 @@ package body Sem_Ch12 is\n                      end if;\n \n                   else\n-                     Append_To (Assoc,\n+                     Append_To (Assoc_List,\n                        Instantiate_Formal_Subprogram\n                          (Formal, Match, Analyzed_Formal));\n \n@@ -1810,7 +1853,8 @@ package body Sem_Ch12 is\n                   if No (Match) and then Box_Present (Formal) then\n                      declare\n                         Subp : constant Entity_Id :=\n-                          Defining_Unit_Name (Specification (Last (Assoc)));\n+                          Defining_Unit_Name\n+                            (Specification (Last (Assoc_List)));\n \n                      begin\n                         Append_To (Default_Actuals,\n@@ -1849,7 +1893,7 @@ package body Sem_Ch12 is\n                      Append_List\n                        (Instantiate_Formal_Package\n                          (Formal, Match, Analyzed_Formal),\n-                        Assoc);\n+                        Assoc_List);\n                   end if;\n \n                --  For use type and use package appearing in the generic part,\n@@ -1863,10 +1907,10 @@ package body Sem_Ch12 is\n                   if Nkind (Original_Node (I_Node)) =\n                                      N_Formal_Package_Declaration\n                   then\n-                     Append (New_Copy_Tree (Formal), Assoc);\n+                     Append (New_Copy_Tree (Formal), Assoc_List);\n                   else\n                      Remove (Formal);\n-                     Append (Formal, Assoc);\n+                     Append (Formal, Assoc_List);\n                   end if;\n \n                when others =>\n@@ -1941,7 +1985,7 @@ package body Sem_Ch12 is\n          Append_List (Default_Formals, Formals);\n       end if;\n \n-      return Assoc;\n+      return Assoc_List;\n    end Analyze_Associations;\n \n    -------------------------------"}, {"sha": "4e54edb218668e64d758397b73de858823afec8c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -7661,9 +7661,9 @@ package body Sem_Ch4 is\n          return True;\n       end Constant_Indexing_OK;\n \n-      -----------------------------\n-      -- Expr_Matches_In_Formal  --\n-      -----------------------------\n+      ----------------------------\n+      -- Expr_Matches_In_Formal --\n+      ----------------------------\n \n       function Expr_Matches_In_Formal\n         (Subp : Entity_Id;"}, {"sha": "01689bffa6797cc1b1271567fbb48ed46b2252c9", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -1406,6 +1406,14 @@ package body Sem_Dim is\n    --  Start of processing for Analyze_Dimension_Binary_Op\n \n    begin\n+      --  If the node is already analyzed, do not examine the operands. At the\n+      --  end of the analysis their dimensions have been removed, and the node\n+      --  itself may have been rewritten.\n+\n+      if Analyzed (N) then\n+         return;\n+      end if;\n+\n       if Nkind_In (N_Kind, N_Op_Add, N_Op_Expon, N_Op_Subtract)\n         or else N_Kind in N_Multiplying_Operator\n         or else N_Kind in N_Op_Compare"}, {"sha": "05d906e8e53c3fa803ccd0ca9da44a1c5342d841", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 107, "deletions": 18, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -3228,6 +3228,15 @@ package body Sem_Util is\n         (Prag        : Node_Id;\n          Result_Seen : in out Boolean)\n       is\n+         procedure Check_Conjunct (Expr : Node_Id);\n+         --  Check an individual conjunct in a conjunctions of Boolean\n+         --  expressions, connected by \"and\" or \"and then\" operators.\n+\n+         procedure Check_Conjuncts (Expr : Node_Id);\n+         --  Apply the post-state check to every conjunct in an expression, in\n+         --  case this is a conjunction of Boolean expressions. Otherwise apply\n+         --  it to the expression as a whole.\n+\n          procedure Check_Expression (Expr : Node_Id);\n          --  Perform the 'Result and post-state checks on a given expression\n \n@@ -3244,6 +3253,103 @@ package body Sem_Util is\n          procedure Check_Function_Result is\n            new Traverse_Proc (Is_Function_Result);\n \n+         --------------------\n+         -- Check_Conjunct --\n+         --------------------\n+\n+         procedure Check_Conjunct (Expr : Node_Id) is\n+            function Adjust_Message (Msg : String) return String;\n+            --  Prepend a prefix to the input message Msg denoting that the\n+            --  message applies to a conjunct in the expression, when this\n+            --  is the case.\n+\n+            function Applied_On_Conjunct return Boolean;\n+            --  Returns True if the message applies to a conjunct in the\n+            --  expression, instead of the whole expression.\n+\n+            --------------------\n+            -- Adjust_Message --\n+            --------------------\n+\n+            function Adjust_Message (Msg : String) return String is\n+            begin\n+               if Applied_On_Conjunct then\n+                  return \"conjunct in \" & Msg;\n+               else\n+                  return Msg;\n+               end if;\n+            end Adjust_Message;\n+\n+            -------------------------\n+            -- Applied_On_Conjunct --\n+            -------------------------\n+\n+            function Applied_On_Conjunct return Boolean is\n+            begin\n+               --  Expr is the conjunct of an \"and\" enclosing expression\n+\n+               return Nkind (Parent (Expr)) in N_Subexpr\n+\n+                 --  or Expr is a conjunct of an \"and then\" enclosing\n+                 --  expression in a postcondition aspect, which was split in\n+                 --  multiple pragmas. The first conjunct has the \"and then\"\n+                 --  expression as Original_Node, and other conjuncts have\n+                 --  Split_PCC set to True.\n+\n+                 or else Nkind (Original_Node (Expr)) = N_And_Then\n+                 or else Split_PPC (Prag);\n+            end Applied_On_Conjunct;\n+\n+            --  Local variables\n+\n+            Err_Node : Node_Id;\n+            --  Error node when reporting a warning on a (refined)\n+            --  postcondition.\n+\n+         --  Start of processing for Check_Conjunct\n+\n+         begin\n+            if Applied_On_Conjunct then\n+               Err_Node := Expr;\n+            else\n+               Err_Node := Prag;\n+            end if;\n+\n+            if not Is_Trivial_Boolean (Expr)\n+              and then not Mentions_Post_State (Expr)\n+            then\n+               if Pragma_Name (Prag) = Name_Contract_Cases then\n+                  Error_Msg_NE (Adjust_Message\n+                    (\"contract case does not check the outcome of calling \"\n+                     & \"&?T?\"), Expr, Subp_Id);\n+\n+               elsif Pragma_Name (Prag) = Name_Refined_Post then\n+                  Error_Msg_NE (Adjust_Message\n+                    (\"refined postcondition does not check the outcome of \"\n+                     & \"calling &?T?\"), Err_Node, Subp_Id);\n+\n+               else\n+                  Error_Msg_NE (Adjust_Message\n+                    (\"postcondition does not check the outcome of calling \"\n+                     & \"&?T?\"), Err_Node, Subp_Id);\n+               end if;\n+            end if;\n+         end Check_Conjunct;\n+\n+         ---------------------\n+         -- Check_Conjuncts --\n+         ---------------------\n+\n+         procedure Check_Conjuncts (Expr : Node_Id) is\n+         begin\n+            if Nkind_In (Expr, N_Op_And, N_And_Then) then\n+               Check_Conjuncts (Left_Opnd (Expr));\n+               Check_Conjuncts (Right_Opnd (Expr));\n+            else\n+               Check_Conjunct (Expr);\n+            end if;\n+         end Check_Conjuncts;\n+\n          ----------------------\n          -- Check_Expression --\n          ----------------------\n@@ -3252,24 +3358,7 @@ package body Sem_Util is\n          begin\n             if not Is_Trivial_Boolean (Expr) then\n                Check_Function_Result (Expr);\n-\n-               if not Mentions_Post_State (Expr) then\n-                  if Pragma_Name (Prag) = Name_Contract_Cases then\n-                     Error_Msg_NE\n-                       (\"contract case does not check the outcome of calling \"\n-                        & \"&?T?\", Expr, Subp_Id);\n-\n-                  elsif Pragma_Name (Prag) = Name_Refined_Post then\n-                     Error_Msg_NE\n-                       (\"refined postcondition does not check the outcome of \"\n-                        & \"calling &?T?\", Prag, Subp_Id);\n-\n-                  else\n-                     Error_Msg_NE\n-                       (\"postcondition does not check the outcome of calling \"\n-                        & \"&?T?\", Prag, Subp_Id);\n-                  end if;\n-               end if;\n+               Check_Conjuncts (Expr);\n             end if;\n          end Check_Expression;\n "}, {"sha": "93b0653e719aa604cc09ed6e9eeead1bad6a1915", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -589,10 +589,10 @@ package Sinfo is\n    --    8. Instantiations - Save as 1) or when the instantiation is partially\n    --       analyzed and the generic template is Ghost.\n \n-   --  Routines Mark_And_Set_Ghost_xxx install a new Ghost region and routine\n-   --  Restore_Ghost_Mode ends a Ghost region. A region may be reinstalled\n-   --  similar to scopes for decoupled expansion such as the generation of\n-   --  dispatch tables or the creation of a predicate function.\n+   --  Routines Mark_And_Set_Ghost_xxx and Set_Ghost_Mode install a new Ghost\n+   --  region and routine Restore_Ghost_Mode ends a Ghost region. A region may\n+   --  be reinstalled similarly to scopes for decoupled expansion such as the\n+   --  generation of dispatch tables or the creation of a predicate function.\n \n    --  If the mode of a Ghost region is Ignore, any newly created nodes as well\n    --  as source entities are marked as ignored Ghost. In additon, the marking\n@@ -686,6 +686,43 @@ package Sinfo is\n    --       array depending on a discriminant of a unconstrained formal object\n    --       parameter of a generic.\n \n+   ----------------\n+   -- SPARK Mode --\n+   ----------------\n+\n+   --  The SPARK RM 1.6.5 defines a mode of operation called \"SPARK mode\" which\n+   --  starts a scope where the SPARK language semantics are either On, Off, or\n+   --  Auto, where Auto leaves the choice to the tools. A SPARK mode may be\n+   --  specified by means of an aspect or a pragma.\n+\n+   --  The following entities may be subject to a SPARK mode. Entities marked\n+   --  with * may possess two differente SPARK modes.\n+\n+   --     E_Entry\n+   --     E_Entry_Family\n+   --     E_Function\n+   --     E_Generic_Function\n+   --     E_Generic_Package *\n+   --     E_Generic_Procedure\n+   --     E_Operator\n+   --     E_Package *\n+   --     E_Package_Body *\n+   --     E_Procedure\n+   --     E_Protected_Body\n+   --     E_Protected_Subtype\n+   --     E_Protected_Type *\n+   --     E_Subprogram_Body\n+   --     E_Task_Body\n+   --     E_Task_Subtype\n+   --     E_Task_Type *\n+   --     E_Variable\n+\n+   --  In order to manage SPARK scopes, the compiler relies on global variables\n+   --  SPARK_Mode and SPARK_Mode_Pragma and a mechanism called \"SPARK regions.\"\n+   --  Routines Install_SPARK_Mode and Set_SPARK_Mode create a new SPARK region\n+   --  and routine Restore_SPARK_Mode ends a SPARK region. A region may be\n+   --  reinstalled similarly to scopes.\n+\n    -----------------------\n    -- Check Flag Fields --\n    -----------------------\n@@ -5364,23 +5401,6 @@ package Sinfo is\n       --  Was_Expression_Function (Flag18-Sem)\n       --  Was_Originally_Stub (Flag13-Sem)\n \n-      -------------------------\n-      -- Expression Function --\n-      -------------------------\n-\n-      --  This is an Ada 2012 extension, we put it here for now, to be labeled\n-      --  and put in its proper section when we know exactly where that is.\n-\n-      --  EXPRESSION_FUNCTION ::=\n-      --    FUNCTION SPECIFICATION IS (EXPRESSION)\n-      --      [ASPECT_SPECIFICATIONS];\n-\n-      --  N_Expression_Function\n-      --  Sloc points to FUNCTION\n-      --  Specification (Node1)\n-      --  Expression (Node3)\n-      --  Corresponding_Spec (Node5-Sem)\n-\n       -----------------------------------\n       -- 6.4  Procedure Call Statement --\n       -----------------------------------\n@@ -5533,6 +5553,20 @@ package Sinfo is\n       --  Return_Object_Declarations represents the object being\n       --  returned. N_Simple_Return_Statement has only the former.\n \n+      ------------------------------\n+      -- 6.8  Expression Function --\n+      ------------------------------\n+\n+      --  EXPRESSION_FUNCTION ::=\n+      --    FUNCTION SPECIFICATION IS (EXPRESSION)\n+      --      [ASPECT_SPECIFICATIONS];\n+\n+      --  N_Expression_Function\n+      --  Sloc points to FUNCTION\n+      --  Specification (Node1)\n+      --  Expression (Node3)\n+      --  Corresponding_Spec (Node5-Sem)\n+\n       ------------------------------\n       -- 7.1  Package Declaration --\n       ------------------------------"}, {"sha": "237818d9f58ed3910d97bfa0f2d6e9c93603f467", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32eb59134d6d55d50cbce3e1900e2dafdfac8aa/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=f32eb59134d6d55d50cbce3e1900e2dafdfac8aa", "patch": "@@ -512,30 +512,38 @@ package body Sinput is\n       --  Assert various properties of the result\n \n       procedure Assertions is\n+\n          --  ???The old version using zero-origin array indexing without array\n          --  bounds checks returned 1 (i.e. system.ads) for these special\n          --  locations, presumably by accident. We are mimicing that here.\n+\n          Special : constant Boolean :=\n-           S = No_Location or else S = Standard_Location\n-           or else S = Standard_ASCII_Location or else S = System_Location;\n-         pragma Assert ((S > No_Location) xor Special);\n+                     S = No_Location\n+                       or else S = Standard_Location\n+                       or else S = Standard_ASCII_Location\n+                       or else S = System_Location;\n \n+         pragma Assert ((S > No_Location) xor Special);\n          pragma Assert (Result in Source_File.First .. Source_File.Last);\n \n          SFR : Source_File_Record renames Source_File.Table (Result);\n+\n       begin\n          --  SFR.Source_Text = null if and only if this is the SFR for a debug\n-         --  output file (*.dg), and that file is under construction.\n+         --  output file (*.dg), and that file is under construction. S can be\n+         --  slightly past Source_Last in that case because we haven't updated\n+         --  Source_Last.\n \n-         if not Null_Source_Buffer_Ptr (SFR.Source_Text) then\n+         if Null_Source_Buffer_Ptr (SFR.Source_Text) then\n+            pragma Assert (S >= SFR.Source_First); null;\n+         else\n             pragma Assert (SFR.Source_Text'First = SFR.Source_First);\n             pragma Assert (SFR.Source_Text'Last = SFR.Source_Last);\n-            null;\n-         end if;\n \n-         if not Special then\n-            pragma Assert (S in SFR.Source_First .. SFR.Source_Last);\n-            null;\n+            if not Special then\n+               pragma Assert (S in SFR.Source_First .. SFR.Source_Last);\n+               null;\n+            end if;\n          end if;\n       end Assertions;\n "}]}