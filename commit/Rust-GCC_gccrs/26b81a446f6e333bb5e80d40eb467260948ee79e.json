{"sha": "26b81a446f6e333bb5e80d40eb467260948ee79e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiODFhNDQ2ZjZlMzMzYmI1ZTgwZDQwZWI0NjcyNjA5NDhlZTc5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-30T15:23:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-30T15:23:37Z"}, "message": "PR c++/89744 - ICE with specialization of member class template.\n\nMy fix five years ago for PR 60241 was incomplete: when we reassign implicit\ninstances of a partial instantiation of a member template to the explicit\nspecialization of that partial instantiation, we also need to adjust the\nCLASSTYPE_TI_ARGS to match what we'd get when looking up that instance after\nthe explicit specialization.  We also need to do this when we later look up\nthe instance in a way that only finds the explicit specialization halfway\nthrough lookup_template_class_1.\n\n\t* pt.c (lookup_template_class_1): If the partial instantiation is\n\texplicitly specialized, adjust.\n\t(maybe_process_partial_specialization): Also adjust\n\tCLASSTYPE_TI_ARGS.\n\nFrom-SVN: r270036", "tree": {"sha": "cc213e86d10404931ff5de25e16bc3f1e5268a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc213e86d10404931ff5de25e16bc3f1e5268a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b81a446f6e333bb5e80d40eb467260948ee79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b81a446f6e333bb5e80d40eb467260948ee79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b81a446f6e333bb5e80d40eb467260948ee79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b81a446f6e333bb5e80d40eb467260948ee79e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c95b82b6172424908142c65a9c5c6d619e9579a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c95b82b6172424908142c65a9c5c6d619e9579a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c95b82b6172424908142c65a9c5c6d619e9579a"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "8a5e9209b34143511e4a077ad1b5f82c64a5336e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26b81a446f6e333bb5e80d40eb467260948ee79e", "patch": "@@ -1,3 +1,11 @@\n+2019-03-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89744 - ICE with specialization of member class template.\n+\t* pt.c (lookup_template_class_1): If the partial instantiation is\n+\texplicitly specialized, adjust.\n+\t(maybe_process_partial_specialization): Also adjust\n+\tCLASSTYPE_TI_ARGS.\n+\n 2019-03-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/89869"}, {"sha": "5915275382555d35de45ae396a28f4f31945298d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=26b81a446f6e333bb5e80d40eb467260948ee79e", "patch": "@@ -3534,7 +3534,15 @@ struct GTY(()) lang_decl {\n       template <typename T> struct S {};\n       template <typename T> struct S<T*> {};\n       \n-   the CLASSTPYE_TI_TEMPLATE for S<int*> will be S, not the S<T*>.  */\n+   the CLASSTPYE_TI_TEMPLATE for S<int*> will be S, not the S<T*>.\n+\n+   For a member class template, CLASSTYPE_TI_TEMPLATE always refers to the\n+   partial instantiation rather than the primary template.  CLASSTYPE_TI_ARGS\n+   are for the primary template if the partial instantiation isn't\n+   specialized, or for the explicit specialization if it is, e.g.\n+\n+      template <class T> class C { template <class U> class D; }\n+      template <> template <class U> class C<int>::D;  */\n #define CLASSTYPE_TI_TEMPLATE(NODE) TI_TEMPLATE (CLASSTYPE_TEMPLATE_INFO (NODE))\n #define CLASSTYPE_TI_ARGS(NODE)     TI_ARGS (CLASSTYPE_TEMPLATE_INFO (NODE))\n "}, {"sha": "f3faa89f671018c99e3734076e0ca1a276d0cb94", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=26b81a446f6e333bb5e80d40eb467260948ee79e", "patch": "@@ -1090,7 +1090,8 @@ maybe_process_partial_specialization (tree type)\n \t\t  type_specializations->remove_elt (&elt);\n \n \t\t  elt.tmpl = tmpl;\n-\t\t  elt.args = INNERMOST_TEMPLATE_ARGS (elt.args);\n+\t\t  CLASSTYPE_TI_ARGS (inst)\n+\t\t    = elt.args = INNERMOST_TEMPLATE_ARGS (elt.args);\n \n \t\t  spec_entry **slot\n \t\t    = type_specializations->find_slot (&elt, INSERT);\n@@ -9662,13 +9663,24 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t\t   : (TREE_CODE (found) == TYPE_DECL\n \t\t      ? DECL_TI_TEMPLATE (found)\n \t\t      : CLASSTYPE_TI_TEMPLATE (found)));\n+\n+\t  if (DECL_CLASS_TEMPLATE_P (found)\n+\t      && CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (found)))\n+\t    {\n+\t      /* If this partial instantiation is specialized, we want to\n+\t\t use it for hash table lookup.  */\n+\t      elt.tmpl = found;\n+\t      elt.args = arglist = INNERMOST_TEMPLATE_ARGS (arglist);\n+\t      hash = spec_hasher::hash (&elt);\n+\t    }\n \t}\n \n       // Build template info for the new specialization.\n       SET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n \n       elt.spec = t;\n       slot = type_specializations->find_slot_with_hash (&elt, hash, INSERT);\n+      gcc_checking_assert (*slot == NULL);\n       entry = ggc_alloc<spec_entry> ();\n       *entry = elt;\n       *slot = entry;"}, {"sha": "b06df0aa84e8169ed404e9a0c2549b56a0bd8984", "filename": "gcc/testsuite/g++.dg/template/mem-spec1.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b81a446f6e333bb5e80d40eb467260948ee79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec1.C?ref=26b81a446f6e333bb5e80d40eb467260948ee79e", "patch": "@@ -0,0 +1,68 @@\n+// PR c++/89744\n+\n+namespace N1 {\n+  template<typename> struct A\n+  {\n+    template<typename> struct B {};\n+    A() { B<int> b; }\n+  };\n+\n+  template<> template<typename>\n+  struct A<int>::B\n+  {\n+    virtual void foo() {}\n+  };\n+\n+  A<int> a;\n+}\n+\n+namespace N2 {\n+  template<typename> struct A\n+  {\n+    template<typename> struct B {};\n+    A() { B<int> b; }\n+  };\n+\n+  template<> template<typename>\n+  struct A<int>::B\n+  {\n+    virtual void foo() {}\n+    void bar() {}\n+  };\n+\n+  A<int> a;\n+}\n+\n+namespace N3 {\n+  template<typename> struct A\n+  {\n+    template<typename> struct B {};\n+    A() { B<int> b; }\n+  };\n+\n+  template<> template<typename>\n+  struct A<int>::B\n+  {\n+    ~B() {}\n+  };\n+\n+  A<int> a;\n+}\n+\n+#if __cpp_variadic_templates\n+namespace N4 {\n+  template<typename...> struct A\n+  {\n+    template<typename> struct B {};\n+    typedef B<int> X;\n+  };\n+\n+  template<> template<typename>\n+  struct A<int>::B\n+  {\n+    typedef int Y;\n+  };\n+\n+  A<int>::B<int> b;\n+}\n+#endif"}]}