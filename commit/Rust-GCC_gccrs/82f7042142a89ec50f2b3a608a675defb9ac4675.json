{"sha": "82f7042142a89ec50f2b3a608a675defb9ac4675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmNzA0MjE0MmE4OWVjNTBmMmIzYTYwOGE2NzVkZWZiOWFjNDY3NQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2009-01-24T21:06:08Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2009-01-24T21:06:08Z"}, "message": "t-linux-eabi (LIB2FUNCS_STATIC_EXTRA): Add config/arm/linux-atomic.c.\n\n\t* config/arm/t-linux-eabi (LIB2FUNCS_STATIC_EXTRA): Add\n\tconfig/arm/linux-atomic.c.\n\t* config/arm/linux-atomic.c: New.\n\nFrom-SVN: r143653", "tree": {"sha": "55d722d503e938dc62d3f9ec2482adbff2fe177d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d722d503e938dc62d3f9ec2482adbff2fe177d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f7042142a89ec50f2b3a608a675defb9ac4675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f7042142a89ec50f2b3a608a675defb9ac4675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f7042142a89ec50f2b3a608a675defb9ac4675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f7042142a89ec50f2b3a608a675defb9ac4675/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "863412d681653b11fe43aa658b50c16ab6165a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863412d681653b11fe43aa658b50c16ab6165a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863412d681653b11fe43aa658b50c16ab6165a28"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "0c957db3b6a3080ca34b3c0aeac5a3454d030018", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82f7042142a89ec50f2b3a608a675defb9ac4675", "patch": "@@ -1,3 +1,9 @@\n+2009-01-24  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/t-linux-eabi (LIB2FUNCS_STATIC_EXTRA): Add\n+\tconfig/arm/linux-atomic.c.\n+\t* config/arm/linux-atomic.c: New.\n+\n 2009-01-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/linux.h (DBX_REGISTER_NUMBER): Delete."}, {"sha": "ac0b4d6d14b0c676e844ed0995f176ae6e374352", "filename": "gcc/config/arm/linux-atomic.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2Fconfig%2Farm%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2Fconfig%2Farm%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-atomic.c?ref=82f7042142a89ec50f2b3a608a675defb9ac4675", "patch": "@@ -0,0 +1,280 @@\n+/* Linux-specific atomic operations for ARM EABI.\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* Kernel helper for compare-and-exchange.  */\n+typedef int (__kernel_cmpxchg_t) (int oldval, int newval, int *ptr);\n+#define __kernel_cmpxchg (*(__kernel_cmpxchg_t *) 0xffff0fc0)\n+\n+/* Kernel helper for memory barrier.  */\n+typedef void (__kernel_dmb_t) (void);\n+#define __kernel_dmb (*(__kernel_dmb_t *) 0xffff0fa0)\n+\n+/* Note: we implement byte, short and int versions of atomic operations using\n+   the above kernel helpers, but there is no support for \"long long\" (64-bit)\n+   operations as yet.  */\n+\n+#define HIDDEN __attribute__ ((visibility (\"hidden\")))\n+\n+#ifdef __ARMEL__\n+#define INVERT_MASK_1 0\n+#define INVERT_MASK_2 0\n+#else\n+#define INVERT_MASK_1 24\n+#define INVERT_MASK_2 16\n+#endif\n+\n+#define MASK_1 0xffu\n+#define MASK_2 0xffffu\n+\n+#define FETCH_AND_OP_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n+  int HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_fetch_and_##OP##_4 (int *ptr, int val)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int failure, tmp;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP tmp INF_OP val, ptr);\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return tmp;\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FETCH_AND_OP_WORD (add,   , +)\n+FETCH_AND_OP_WORD (sub,   , -)\n+FETCH_AND_OP_WORD (or,    , |)\n+FETCH_AND_OP_WORD (and,   , &)\n+FETCH_AND_OP_WORD (xor,   , ^)\n+FETCH_AND_OP_WORD (nand, ~, &)\n+\n+#define NAME_oldval(OP, WIDTH) __sync_fetch_and_##OP##_##WIDTH\n+#define NAME_newval(OP, WIDTH) __sync_##OP##_and_fetch_##WIDTH\n+\n+/* Implement both __sync_<op>_and_fetch and __sync_fetch_and_<op> for\n+   subword-sized quantities.  */\n+\n+#define SUBWORD_SYNC_OP(OP, PFX_OP, INF_OP, TYPE, WIDTH, RETURN)\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  NAME##_##RETURN (OP, WIDTH) (TYPE *ptr, TYPE val)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int *wordptr = (int *) ((unsigned int) ptr & ~3);\t\t\t\\\n+    unsigned int mask, shift, oldval, newval;\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned int) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = *wordptr;\t\t\t\t\t\t\\\n+      newval = ((PFX_OP ((oldval & mask) >> shift)\t\t\t\\\n+                 INF_OP (unsigned int) val) << shift) & mask;\t\t\\\n+      newval |= oldval & ~mask;\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (RETURN & mask) >> shift;\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_SYNC_OP (add,   , +, short, 2, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, short, 2, oldval)\n+SUBWORD_SYNC_OP (or,    , |, short, 2, oldval)\n+SUBWORD_SYNC_OP (and,   , &, short, 2, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, short, 2, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, short, 2, oldval)\n+\n+SUBWORD_SYNC_OP (add,   , +, char, 1, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, char, 1, oldval)\n+SUBWORD_SYNC_OP (or,    , |, char, 1, oldval)\n+SUBWORD_SYNC_OP (and,   , &, char, 1, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, char, 1, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, char, 1, oldval)\n+\n+#define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n+  int HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_##OP##_and_fetch_4 (int *ptr, int val)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int tmp, failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP tmp INF_OP val, ptr);\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return PFX_OP tmp INF_OP val;\t\t\t\t\t\\\n+  }\n+\n+OP_AND_FETCH_WORD (add,   , +)\n+OP_AND_FETCH_WORD (sub,   , -)\n+OP_AND_FETCH_WORD (or,    , |)\n+OP_AND_FETCH_WORD (and,   , &)\n+OP_AND_FETCH_WORD (xor,   , ^)\n+OP_AND_FETCH_WORD (nand, ~, &)\n+\n+SUBWORD_SYNC_OP (add,   , +, short, 2, newval)\n+SUBWORD_SYNC_OP (sub,   , -, short, 2, newval)\n+SUBWORD_SYNC_OP (or,    , |, short, 2, newval)\n+SUBWORD_SYNC_OP (and,   , &, short, 2, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, short, 2, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, short, 2, newval)\n+\n+SUBWORD_SYNC_OP (add,   , +, char, 1, newval)\n+SUBWORD_SYNC_OP (sub,   , -, char, 1, newval)\n+SUBWORD_SYNC_OP (or,    , |, char, 1, newval)\n+SUBWORD_SYNC_OP (and,   , &, char, 1, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, char, 1, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, char, 1, newval)\n+\n+int HIDDEN\n+__sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+{\n+  int actual_oldval, fail;\n+    \n+  while (1)\n+    {\n+      actual_oldval = *ptr;\n+\n+      if (oldval != actual_oldval)\n+\treturn actual_oldval;\n+\n+      fail = __kernel_cmpxchg (actual_oldval, newval, ptr);\n+  \n+      if (!fail)\n+        return oldval;\n+    }\n+}\n+\n+#define SUBWORD_VAL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t       TYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int *wordptr = (int *)((unsigned int) ptr & ~3), fail;\t\t\\\n+    unsigned int mask, shift, actual_oldval, actual_newval;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned int) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    while (1)\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tactual_oldval = *wordptr;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (((actual_oldval & mask) >> shift) != (unsigned int) oldval)\t\\\n+          return (actual_oldval & mask) >> shift;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tactual_newval = (actual_oldval & ~mask)\t\t\t\t\\\n+\t\t\t| (((unsigned int) newval << shift) & mask);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tfail = __kernel_cmpxchg (actual_oldval, actual_newval,\t\t\\\n+\t\t\t\t wordptr);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (!fail)\t\t\t\t\t\t\t\\\n+          return oldval;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_VAL_CAS (short, 2)\n+SUBWORD_VAL_CAS (char,  1)\n+\n+typedef unsigned char bool;\n+\n+bool HIDDEN\n+__sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+{\n+  int failure = __kernel_cmpxchg (oldval, newval, ptr);\n+  return (failure == 0);\n+}\n+\n+#define SUBWORD_BOOL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  bool HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t\tTYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE actual_oldval\t\t\t\t\t\t\t\\\n+      = __sync_val_compare_and_swap_##WIDTH (ptr, oldval, newval);\t\\\n+    return (oldval == actual_oldval);\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_BOOL_CAS (short, 2)\n+SUBWORD_BOOL_CAS (char,  1)\n+\n+void HIDDEN\n+__sync_synchronize (void)\n+{\n+  __kernel_dmb ();\n+}\n+\n+int HIDDEN\n+__sync_lock_test_and_set_4 (int *ptr, int val)\n+{\n+  int failure, oldval;\n+\n+  do {\n+    oldval = *ptr;\n+    failure = __kernel_cmpxchg (oldval, val, ptr);\n+  } while (failure != 0);\n+\n+  return oldval;\n+}\n+\n+#define SUBWORD_TEST_AND_SET(TYPE, WIDTH)\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+    unsigned int oldval, newval, shift, mask;\t\t\t\t\\\n+    int *wordptr = (int *) ((unsigned int) ptr & ~3);\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned int) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = *wordptr;\t\t\t\t\t\t\\\n+      newval = (oldval & ~mask)\t\t\t\t\t\t\\\n+\t       | (((unsigned int) val << shift) & mask);\t\t\\\n+      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (oldval & mask) >> shift;\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_TEST_AND_SET (short, 2)\n+SUBWORD_TEST_AND_SET (char,  1)\n+\n+#define SYNC_LOCK_RELEASE(TYPE, WIDTH)\t\t\t\t\t\\\n+  void HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    *ptr = 0;\t\t\t\t\t\t\t\t\\\n+    __kernel_dmb ();\t\t\t\t\t\t\t\\\n+  }\n+\n+SYNC_LOCK_RELEASE (int,   4)\n+SYNC_LOCK_RELEASE (short, 2)\n+SYNC_LOCK_RELEASE (char,  1)"}, {"sha": "5c364be94fa1150de43a0203d1d539001416798f", "filename": "gcc/config/arm/t-linux-eabi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f7042142a89ec50f2b3a608a675defb9ac4675/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux-eabi?ref=82f7042142a89ec50f2b3a608a675defb9ac4675", "patch": "@@ -12,3 +12,5 @@ LIB1ASMFUNCS := $(filter-out _dvmd_tls,$(LIB1ASMFUNCS)) _dvmd_lnx\n # Multilib the standard Linux files.  Don't include crti.o or crtn.o,\n # which are provided by glibc.\n EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n+\n+LIB2FUNCS_STATIC_EXTRA += $(srcdir)/config/arm/linux-atomic.c"}]}