{"sha": "61e33bff7b18fc1ce8b4260c059038496e11e17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlMzNiZmY3YjE4ZmMxY2U4YjQyNjBjMDU5MDM4NDk2ZTExZTE3Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T18:03:32Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T18:03:32Z"}, "message": "[ARM] float16x4_t intrinsics in arm_neon.h\n\n\t* config/arm/arm_neon.h (float16_t, vget_lane_f16, vset_lane_f16,\n\tvcreate_f16, vld1_lane_f16, vld1_dup_f16, vreinterpret_p8_f16,\n\tvreinterpret_p16_f16, vreinterpret_f16_p8, vreinterpret_f16_p16,\n\tvreinterpret_f16_f32, vreinterpret_f16_p64, vreinterpret_f16_s64,\n\tvreinterpret_f16_u64, vreinterpret_f16_s8, vreinterpret_f16_s16,\n\tvreinterpret_f16_s32, vreinterpret_f16_u8, vreinterpret_f16_u16,\n\tvreinterpret_f16_u32, vreinterpret_f32_f16, vreinterpret_p64_f16,\n\tvreinterpret_s64_f16, vreinterpret_u64_f16, vreinterpret_s8_f16,\n\tvreinterpret_s16_f16, vreinterpret_s32_f16, vreinterpret_u8_f16,\n\tvreinterpret_u16_f16, vreinterpret_u32_f16): New.\n\nFrom-SVN: r227535", "tree": {"sha": "f964c838c8de2e8bf2ad3b4e4e7429270ab73843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f964c838c8de2e8bf2ad3b4e4e7429270ab73843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e33bff7b18fc1ce8b4260c059038496e11e17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e33bff7b18fc1ce8b4260c059038496e11e17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e33bff7b18fc1ce8b4260c059038496e11e17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e33bff7b18fc1ce8b4260c059038496e11e17f/comments", "author": null, "committer": null, "parents": [{"sha": "32dd8b86a627eea1217ea46826e8d786a5473667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dd8b86a627eea1217ea46826e8d786a5473667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dd8b86a627eea1217ea46826e8d786a5473667"}], "stats": {"total": 263, "additions": 263, "deletions": 0}, "files": [{"sha": "26a277be1966238fcbdf1246815e0cb0289fef23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e33bff7b18fc1ce8b4260c059038496e11e17f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e33bff7b18fc1ce8b4260c059038496e11e17f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61e33bff7b18fc1ce8b4260c059038496e11e17f", "patch": "@@ -1,3 +1,16 @@\n+2015-09-07  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/arm/arm_neon.h (float16_t, vget_lane_f16, vset_lane_f16,\n+\tvcreate_f16, vld1_lane_f16, vld1_dup_f16, vreinterpret_p8_f16,\n+\tvreinterpret_p16_f16, vreinterpret_f16_p8, vreinterpret_f16_p16,\n+\tvreinterpret_f16_f32, vreinterpret_f16_p64, vreinterpret_f16_s64,\n+\tvreinterpret_f16_u64, vreinterpret_f16_s8, vreinterpret_f16_s16,\n+\tvreinterpret_f16_s32, vreinterpret_f16_u8, vreinterpret_f16_u16,\n+\tvreinterpret_f16_u32, vreinterpret_f32_f16, vreinterpret_p64_f16,\n+\tvreinterpret_s64_f16, vreinterpret_u64_f16, vreinterpret_s8_f16,\n+\tvreinterpret_s16_f16, vreinterpret_s32_f16, vreinterpret_u8_f16,\n+\tvreinterpret_u16_f16, vreinterpret_u32_f16): New.\n+\n 2015-09-07  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* config/i386/intelmic-mkoffload.c (prepare_target_image): Handle all"}, {"sha": "3c40f9f94fae30cab5e8833d72d0ac9ff3ac7b0f", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e33bff7b18fc1ce8b4260c059038496e11e17f/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e33bff7b18fc1ce8b4260c059038496e11e17f/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=61e33bff7b18fc1ce8b4260c059038496e11e17f", "patch": "@@ -42,6 +42,7 @@ typedef __simd64_int16_t int16x4_t;\n typedef __simd64_int32_t int32x2_t;\n typedef __builtin_neon_di int64x1_t;\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef __fp16 float16_t;\n typedef __simd64_float16_t float16x4_t;\n #endif\n typedef __simd64_float32_t float32x2_t;\n@@ -5203,6 +5204,21 @@ vget_lane_s32 (int32x2_t __a, const int __b)\n   return (int32_t)__builtin_neon_vget_lanev2si (__a, __b);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+/* Functions cannot accept or return __FP16 types.  Even if the function\n+   were marked always-inline so there were no call sites, the declaration\n+   would nonetheless raise an error.  Hence, we must use a macro instead.  */\n+\n+#define vget_lane_f16(__v, __idx)\t\t\\\n+  __extension__\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\\\n+      float16x4_t __vec = (__v);\t\t\\\n+      __builtin_arm_lane_check (4, __idx);\t\\\n+      float16_t __res = __vec[__idx];\t\t\\\n+      __res;\t\t\t\t\t\\\n+    })\n+#endif\n+\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vget_lane_f32 (float32x2_t __a, const int __b)\n {\n@@ -5335,6 +5351,18 @@ vset_lane_s32 (int32_t __a, int32x2_t __b, const int __c)\n   return (int32x2_t)__builtin_neon_vset_lanev2si ((__builtin_neon_si) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define vset_lane_f16(__e, __v, __idx)\t\t\\\n+  __extension__\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\\\n+      float16_t __elem = (__e);\t\t\t\\\n+      float16x4_t __vec = (__v);\t\t\\\n+      __builtin_arm_lane_check (4, __idx);\t\\\n+      __vec[__idx] = __elem;\t\t\t\\\n+      __vec;\t\t\t\t\t\\\n+    })\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vset_lane_f32 (float32_t __a, float32x2_t __b, const int __c)\n {\n@@ -5481,6 +5509,14 @@ vcreate_s64 (uint64_t __a)\n   return (int64x1_t)__builtin_neon_vcreatedi ((__builtin_neon_di) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vcreate_f16 (uint64_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vcreate_f32 (uint64_t __a)\n {\n@@ -8802,6 +8838,14 @@ vld1_lane_s32 (const int32_t * __a, int32x2_t __b, const int __c)\n   return (int32x2_t)__builtin_neon_vld1_lanev2si ((const __builtin_neon_si *) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_lane_f16 (const float16_t * __a, float16x4_t __b, const int __c)\n+{\n+  return vset_lane_f16 (*__a, __b, __c);\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_lane_f32 (const float32_t * __a, float32x2_t __b, const int __c)\n {\n@@ -8950,6 +8994,15 @@ vld1_dup_s32 (const int32_t * __a)\n   return (int32x2_t)__builtin_neon_vld1_dupv2si ((const __builtin_neon_si *) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_dup_f16 (const float16_t * __a)\n+{\n+  float16_t __f = *__a;\n+  return (float16x4_t) { __f, __f, __f, __f };\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_dup_f32 (const float32_t * __a)\n {\n@@ -11833,6 +11886,14 @@ vreinterpret_p8_p16 (poly16x4_t __a)\n   return (poly8x8_t)__builtin_neon_vreinterpretv8qiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_p8_f16 (float16x4_t __a)\n+{\n+  return (poly8x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_f32 (float32x2_t __a)\n {\n@@ -11901,6 +11962,14 @@ vreinterpret_p16_p8 (poly8x8_t __a)\n   return (poly16x4_t)__builtin_neon_vreinterpretv4hiv8qi ((int8x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_p16_f16 (float16x4_t __a)\n+{\n+  return (poly16x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_f32 (float32x2_t __a)\n {\n@@ -11963,6 +12032,104 @@ vreinterpret_p16_u32 (uint32x2_t __a)\n   return (poly16x4_t)__builtin_neon_vreinterpretv4hiv2si ((int32x2_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_p8 (poly8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_p16 (poly16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_f32 (float32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_p64 (poly64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s64 (int64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u64 (uint64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s8 (int8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s16 (int16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s32 (int32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u8 (uint8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u16 (uint16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u32 (uint32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_p8 (poly8x8_t __a)\n {\n@@ -11975,6 +12142,14 @@ vreinterpret_f32_p16 (poly16x4_t __a)\n   return (float32x2_t)__builtin_neon_vreinterpretv2sfv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_f32_f16 (float16x4_t __a)\n+{\n+  return (float32x2_t) __a;\n+}\n+#endif\n+\n #ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_p64 (poly64x1_t __a)\n@@ -12047,6 +12222,17 @@ vreinterpret_p64_p16 (poly16x4_t __a)\n }\n \n #endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#ifdef __ARM_FEATURE_CRYPTO\n+__extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_p64_f16 (float16x4_t __a)\n+{\n+  return (poly64x1_t) __a;\n+}\n+#endif\n+#endif\n+\n #ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_f32 (float32x2_t __a)\n@@ -12131,6 +12317,14 @@ vreinterpret_s64_p16 (poly16x4_t __a)\n   return (int64x1_t)__builtin_neon_vreinterpretdiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_s64_f16 (float16x4_t __a)\n+{\n+  return (int64x1_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_f32 (float32x2_t __a)\n {\n@@ -12199,6 +12393,14 @@ vreinterpret_u64_p16 (poly16x4_t __a)\n   return (uint64x1_t)__builtin_neon_vreinterpretdiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_u64_f16 (float16x4_t __a)\n+{\n+  return (uint64x1_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_f32 (float32x2_t __a)\n {\n@@ -12267,6 +12469,14 @@ vreinterpret_s8_p16 (poly16x4_t __a)\n   return (int8x8_t)__builtin_neon_vreinterpretv8qiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_s8_f16 (float16x4_t __a)\n+{\n+  return (int8x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_f32 (float32x2_t __a)\n {\n@@ -12335,6 +12545,14 @@ vreinterpret_s16_p16 (poly16x4_t __a)\n   return (int16x4_t)__builtin_neon_vreinterpretv4hiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_s16_f16 (float16x4_t __a)\n+{\n+  return (int16x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_f32 (float32x2_t __a)\n {\n@@ -12403,6 +12621,14 @@ vreinterpret_s32_p16 (poly16x4_t __a)\n   return (int32x2_t)__builtin_neon_vreinterpretv2siv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_s32_f16 (float16x4_t __a)\n+{\n+  return (int32x2_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_f32 (float32x2_t __a)\n {\n@@ -12471,6 +12697,14 @@ vreinterpret_u8_p16 (poly16x4_t __a)\n   return (uint8x8_t)__builtin_neon_vreinterpretv8qiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_u8_f16 (float16x4_t __a)\n+{\n+  return (uint8x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_f32 (float32x2_t __a)\n {\n@@ -12539,6 +12773,14 @@ vreinterpret_u16_p16 (poly16x4_t __a)\n   return (uint16x4_t)__builtin_neon_vreinterpretv4hiv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_u16_f16 (float16x4_t __a)\n+{\n+  return (uint16x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_f32 (float32x2_t __a)\n {\n@@ -12607,6 +12849,14 @@ vreinterpret_u32_p16 (poly16x4_t __a)\n   return (uint32x2_t)__builtin_neon_vreinterpretv2siv4hi ((int16x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_u32_f16 (float16x4_t __a)\n+{\n+  return (uint32x2_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_f32 (float32x2_t __a)\n {"}]}