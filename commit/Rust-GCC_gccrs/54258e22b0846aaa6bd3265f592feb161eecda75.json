{"sha": "54258e22b0846aaa6bd3265f592feb161eecda75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyNThlMjJiMDg0NmFhYTZiZDMyNjVmNTkyZmViMTYxZWVjZGE3NQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-03T14:42:16Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-09T16:35:57Z"}, "message": "Darwin, config: Revise host config fragment.\n\nThere were two uses for the Darwin host config fragment:\n\nThe first is to arrange for targets that support mdynamic-no-pic\nto be built with that enabled (since it makes a significant\ndifference to the compiler performance).  We can be more specific\nin the application of this, since it only applies to 32b hosts\nplus powerpc64-darwin9.\n\nThe second was to work around a tool bug where -fno-PIE was not\npropagated to the link stage.  This second use is redundant,\nsince the buggy toolchain cannot bootstrap current GCC sources\nanyway.\n\nThis makes the host fragment more specific and reduces the number\nof toolchains for which it is included which reduces clutter in\nconfigure lines.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nconfig/ChangeLog:\n\n\t* mh-darwin: Make this specific to handling the\n\tmdynamic-no-pic case.\n\nChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Adjust cases for which it is necessary to\n\tinclude the Darwin host config fragment.", "tree": {"sha": "925be09d898ab2ab020f6f54ae0aa2e300d3bb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/925be09d898ab2ab020f6f54ae0aa2e300d3bb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54258e22b0846aaa6bd3265f592feb161eecda75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54258e22b0846aaa6bd3265f592feb161eecda75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54258e22b0846aaa6bd3265f592feb161eecda75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54258e22b0846aaa6bd3265f592feb161eecda75/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511cec029c6592ee553d9087d8b2bbf7719cf30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511cec029c6592ee553d9087d8b2bbf7719cf30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511cec029c6592ee553d9087d8b2bbf7719cf30d"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "fb2bb5ad1d9ce70a58e80e7e700860fd065f330d", "filename": "config/mh-darwin", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54258e22b0846aaa6bd3265f592feb161eecda75/config%2Fmh-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54258e22b0846aaa6bd3265f592feb161eecda75/config%2Fmh-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-darwin?ref=54258e22b0846aaa6bd3265f592feb161eecda75", "patch": "@@ -1,29 +1,38 @@\n # The -mdynamic-no-pic ensures that the compiler executable is built without\n-# position-independent-code -- the usual default on Darwin. This fix speeds\n-# compiles by 3-5%.  Don't add it if the compiler doesn't also support\n-# -mno-dynamic-no-pic to undo it.\n-DARWIN_MDYNAMIC_NO_PIC := \\\n-`case ${host} in i?86-*-darwin* | powerpc-*-darwin*) \\\n-   $(CC) -S -xc /dev/null -o /dev/null -mno-dynamic-no-pic 2>/dev/null \\\n-   && echo -mdynamic-no-pic ;; esac`\n-DARWIN_GCC_MDYNAMIC_NO_PIC := \\\n-`case ${host} in i?86-*-darwin* | powerpc-*-darwin*) \\\n-   $(CC) -S -xc /dev/null -o /dev/null -mno-dynamic-no-pic 2>/dev/null \\\n-   || echo -mdynamic-no-pic ;; esac`\n+# position-independent-code -- the usual default on Darwin. This speeds compiles\n+# by 8-20% (measurements made against GCC-11).\n+# However, we cannot add it unless the bootstrap compiler supports\n+# -mno-dynamic-no-pic to undo it, since libiberty, at least, needs this.\n \n-# ld on Darwin versions >= 10.7 defaults to PIE executables. Disable this for\n-# gcc components, since it is incompatible with our pch implementation.\n-DARWIN_NO_PIE := `case ${host} in *-*-darwin[1][1-9]*) echo -Wl,-no_pie ;; esac;`\n+#\u00a0We use Werror, since some versions of clang report unknown command line flags\n+# as a warning only.\n \n-BOOT_CFLAGS += $(DARWIN_MDYNAMIC_NO_PIC)\n-BOOT_LDFLAGS += $(DARWIN_NO_PIE)\n+# We only need to determine this for the host tool used to build stage1 (or a\n+# non-bootstrapped compiler), later stages will be built by GCC which supports\n+# the required flags.\n \n-# Similarly, for cross-compilation.\n-STAGE1_CFLAGS += $(DARWIN_MDYNAMIC_NO_PIC)\n-STAGE1_LDFLAGS += $(DARWIN_NO_PIE)\n+BOOTSTRAP_TOOL_CAN_USE_MDYNAMIC_NO_PIC := $(shell \\\n+  $(CC) -S -xc /dev/null -o /dev/null -Werror -mno-dynamic-no-pic 2>/dev/null \\\n+  && echo true)\n \n-# Without -mno-dynamic-no-pic support, add -mdynamic-no-pic just to later\n-# stages when we know it is built with gcc.\n-STAGE2_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)\n-STAGE3_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)\n-STAGE4_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)\n+@if gcc-bootstrap\n+ifeq (${BOOTSTRAP_TOOL_CAN_USE_MDYNAMIC_NO_PIC},true)\n+STAGE1_CFLAGS += -mdynamic-no-pic\n+else\n+STAGE1_CFLAGS += -fPIC\n+endif\n+# Add -mdynamic-no-pic to later stages when we know it is built with GCC.\n+BOOT_CFLAGS += -mdynamic-no-pic\n+@endif gcc-bootstrap\n+\n+@unless gcc-bootstrap\n+ifeq (${BOOTSTRAP_TOOL_CAN_USE_MDYNAMIC_NO_PIC},true)\n+# FIXME: we should also enable this for cross and non-bootstrap builds but\n+# that needs amendment to libcc1.\n+# CFLAGS += -mdynamic-no-pic\n+# CXXFLAGS += -mdynamic-no-pic\n+else\n+CFLAGS += -fPIC\n+CXXFLAGS += -fPIC\n+endif\n+@endunless gcc-bootstrap"}, {"sha": "85ab99154020a71feb63aef93508e8462a59cd9a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54258e22b0846aaa6bd3265f592feb161eecda75/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54258e22b0846aaa6bd3265f592feb161eecda75/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=54258e22b0846aaa6bd3265f592feb161eecda75", "patch": "@@ -4074,7 +4074,7 @@ fi\n   hppa*-*)\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n-  *-*-darwin*)\n+  i?86-*-darwin[89]* | i?86-*-darwin1[0-7]* | powerpc*-*-darwin*)\n     host_makefile_frag=\"config/mh-darwin\"\n     ;;\n   powerpc-*-aix*)"}, {"sha": "1df038b04f361867333769ec3a27f7b6ed59008d", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54258e22b0846aaa6bd3265f592feb161eecda75/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54258e22b0846aaa6bd3265f592feb161eecda75/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=54258e22b0846aaa6bd3265f592feb161eecda75", "patch": "@@ -1318,7 +1318,7 @@ case \"${host}\" in\n   hppa*-*)\t\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n-  *-*-darwin*)\n+  i?86-*-darwin[[89]]* | i?86-*-darwin1[[0-7]]* | powerpc*-*-darwin*)\n     host_makefile_frag=\"config/mh-darwin\"\n     ;;\n   powerpc-*-aix*)"}]}