{"sha": "bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkMDIyYzFjZWQwYjRmYjZjMDVjZGM5YTRhYWYxNDhjNWYzYTYxMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-25T15:01:42Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-25T15:01:42Z"}, "message": "dependency.c (gfc_check_dependency): Improve handling of pointers...\n\n\n\t* dependency.c (gfc_check_dependency): Improve handling of pointers;\n\tTwo variables of different types can't have a dependency, and two\n\tvariables with the same symbol are equal, even if pointers.\n\n\t* gfortran.dg/dependency_12.f90: New test case.\n\nFrom-SVN: r112377", "tree": {"sha": "1d3827fad81d880427f582a789b35d46ce275595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3827fad81d880427f582a789b35d46ce275595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/comments", "author": null, "committer": null, "parents": [{"sha": "ccf37f77368e6f970e6b6e4681c393717d2f8e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf37f77368e6f970e6b6e4681c393717d2f8e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf37f77368e6f970e6b6e4681c393717d2f8e58"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "52a55c6aaf9ccd82ce6529a53d14844dd97792e6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "patch": "@@ -1,3 +1,9 @@\n+2006-03-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dependency.c (gfc_check_dependency): Improve handling of pointers;\n+\tTwo variables of different types can't have a dependency, and two\n+\tvariables with the same symbol are equal, even if pointers.\n+\n 2006-03-24  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.h (gfc_symbol): Add a new \"forall_index\" bit field."}, {"sha": "ca370b64bf60ff13c402291557cbfe1c0d86b7ff", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "patch": "@@ -494,15 +494,6 @@ gfc_check_dependency (gfc_expr * expr1, gfc_expr * expr2, bool identical)\n \n   gcc_assert (expr1->expr_type == EXPR_VARIABLE);\n \n-  /* TODO: -fassume-no-pointer-aliasing */\n-  if (expr1->symtree->n.sym->attr.pointer)\n-    return 1;\n-  for (ref = expr1->ref; ref; ref = ref->next)\n-    {\n-      if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n-\treturn 1;\n-    }\n-\n   switch (expr2->expr_type)\n     {\n     case EXPR_OP:\n@@ -514,21 +505,44 @@ gfc_check_dependency (gfc_expr * expr1, gfc_expr * expr2, bool identical)\n       return 0;\n \n     case EXPR_VARIABLE:\n-      if (expr2->symtree->n.sym->attr.pointer)\n-\treturn 1;\n-\n-      for (ref = expr2->ref; ref; ref = ref->next)\n+      /* The interesting cases are when the symbols don't match.  */\n+      if (expr1->symtree->n.sym != expr2->symtree->n.sym)\n \t{\n-\t  if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+\t  gfc_typespec *ts1 = &expr1->symtree->n.sym->ts;\n+\t  gfc_typespec *ts2 = &expr2->symtree->n.sym->ts;\n+\n+\t  /* Return 1 if expr1 and expr2 are equivalenced arrays.  */\n+\t  if (gfc_are_equivalenced_arrays (expr1, expr2))\n \t    return 1;\n-\t}\n \n-      /* Return 1 if expr1 and expr2 are equivalenced arrays.  */\n-      if (gfc_are_equivalenced_arrays (expr1, expr2))\n-\treturn 1;\n+\t  /* Symbols can only alias if they have the same type.  */\n+\t  if (ts1->type != BT_UNKNOWN\n+\t      && ts2->type != BT_UNKNOWN\n+\t      && ts1->type != BT_DERIVED\n+\t      && ts2->type != BT_DERIVED)\n+\t    {\n+\t      if (ts1->type != ts2->type\n+\t\t  || ts1->kind != ts2->kind)\n+\t\treturn 0;\n+\t    }\n \n-      if (expr1->symtree->n.sym != expr2->symtree->n.sym)\n-\treturn 0;\n+\t  /* If either variable is a pointer, assume the worst.  */\n+\t  /* TODO: -fassume-no-pointer-aliasing */\n+\t  if (expr1->symtree->n.sym->attr.pointer)\n+\t    return 1;\n+\t  for (ref = expr1->ref; ref; ref = ref->next)\n+\t    if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+\t      return 1;\n+\n+\t  if (expr2->symtree->n.sym->attr.pointer)\n+\t    return 1;\n+\t  for (ref = expr2->ref; ref; ref = ref->next)\n+\t    if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+\t      return 1;\n+\n+\t  /* Otherwise distinct symbols have no dependencies.  */\n+\t  return 0;\n+\t}\n \n       if (identical)\n \treturn 1;"}, {"sha": "ce46847eb1a85992b10894c9f05d5e1be050b5e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "patch": "@@ -1,3 +1,7 @@\n+2006-03-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/dependency_12.f90: New test case.\n+\n 2006-03-24  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/dependency_9.f90: New (resurected) test case."}, {"sha": "09fe19650dd74e408ee7be584d96431043843100", "filename": "gcc/testsuite/gfortran.dg/dependency_12.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_12.f90?ref=bfd022c1ced0b4fb6c05cdc9a4aaf148c5f3a611", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a,b)\n+  integer, pointer, dimension (:,:) :: a\n+  real, dimension(:,:) :: b\n+\n+  where (a == 0)\n+    b = 0.0\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}