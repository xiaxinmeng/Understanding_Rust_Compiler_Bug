{"sha": "99b7a28da867b09d219a71cd5c29eff45c6effa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliN2EyOGRhODY3YjA5ZDIxOWE3MWNkNWMyOWVmZjQ1YzZlZmZhNA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2016-12-06T09:56:52Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2016-12-06T09:56:52Z"}, "message": "2016-12-06  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc/config/aarch64/arm_neon.h\n\t(vreinterpretq_p8_p128, vreinterpretq_p16_p128): Added.\n\t(vreinterpret_p64_p16, vreinterpretq_p64_p128): Likewise.\n\t(vreinterpretq_p64_p16, vreinterpretq_p128_p8): Likewise.\n\t(vreinterpretq_p128_p16, vreinterpretq_p128_f16): Likewise.\n\t(vreinterpretq_p128_f32, vreinterpretq_p128_p64): Likewise.\n\t(vreinterpretq_p128_s64, vreinterpretq_p128_u64): Likewise.\n\t(vreinterpretq_p128_s8, vreinterpretq_p128_s16): Likewise.\n\t(vreinterpretq_p128_s32, vreinterpretq_p128_u8): Likewise.\n\t(vreinterpretq_p128_u16, vreinterpretq_p128_u32): Likewise.\n\t(vreinterpretq_f16_p128, vreinterpretq_f32_p128): Likewise.\n\t(vreinterpretq_s64_p128, vreinterpretq_u64_p128): Likewise.\n\t(vreinterpretq_s8_p128, vreinterpretq_s16_p128): Likewise.\n\t(vreinterpretq_s32_p128, vreinterpretq_u8_p128): Likewise.\n\t(vreinterpretq_u16_p128, vreinterpretq_u32_p128): Likewise.\n\nFrom-SVN: r243287", "tree": {"sha": "520d4b1d1c8b4297f1c85d3c71775e898381afa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/520d4b1d1c8b4297f1c85d3c71775e898381afa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b7a28da867b09d219a71cd5c29eff45c6effa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b7a28da867b09d219a71cd5c29eff45c6effa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b7a28da867b09d219a71cd5c29eff45c6effa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b7a28da867b09d219a71cd5c29eff45c6effa4/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f57194bfccc05e07b48e8ccd60d3653c6d65c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f57194bfccc05e07b48e8ccd60d3653c6d65c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f57194bfccc05e07b48e8ccd60d3653c6d65c9a"}], "stats": {"total": 215, "additions": 215, "deletions": 0}, "files": [{"sha": "bd74061e7c1bc105e6b47389e6f5d662501c839e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b7a28da867b09d219a71cd5c29eff45c6effa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b7a28da867b09d219a71cd5c29eff45c6effa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99b7a28da867b09d219a71cd5c29eff45c6effa4", "patch": "@@ -1,3 +1,21 @@\n+2016-12-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc/config/aarch64/arm_neon.h\n+\t(vreinterpretq_p8_p128, vreinterpretq_p16_p128): Added.\n+\t(vreinterpret_p64_p16, vreinterpretq_p64_p128): Likewise.\n+\t(vreinterpretq_p64_p16, vreinterpretq_p128_p8): Likewise.\n+\t(vreinterpretq_p128_p16, vreinterpretq_p128_f16): Likewise.\n+\t(vreinterpretq_p128_f32, vreinterpretq_p128_p64): Likewise.\n+\t(vreinterpretq_p128_s64, vreinterpretq_p128_u64): Likewise.\n+\t(vreinterpretq_p128_s8, vreinterpretq_p128_s16): Likewise.\n+\t(vreinterpretq_p128_s32, vreinterpretq_p128_u8): Likewise.\n+\t(vreinterpretq_p128_u16, vreinterpretq_p128_u32): Likewise.\n+\t(vreinterpretq_f16_p128, vreinterpretq_f32_p128): Likewise.\n+\t(vreinterpretq_s64_p128, vreinterpretq_u64_p128): Likewise.\n+\t(vreinterpretq_s8_p128, vreinterpretq_s16_p128): Likewise.\n+\t(vreinterpretq_s32_p128, vreinterpretq_u8_p128): Likewise.\n+\t(vreinterpretq_u16_p128, vreinterpretq_u32_p128): Likewise.\n+\n 2016-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71537"}, {"sha": "b8466440d824f317b745d4b2c0e2df9bcac8c061", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b7a28da867b09d219a71cd5c29eff45c6effa4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b7a28da867b09d219a71cd5c29eff45c6effa4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=99b7a28da867b09d219a71cd5c29eff45c6effa4", "patch": "@@ -3506,6 +3506,13 @@ vreinterpretq_p8_p64 (poly64x2_t __a)\n   return (poly8x16_t) __a;\n }\n \n+__extension__ extern __inline poly8x16_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p8_p128 (poly128_t __a)\n+{\n+  return (poly8x16_t)__a;\n+}\n+\n __extension__ extern __inline poly16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_p16_f16 (float16x4_t __a)\n@@ -3688,6 +3695,13 @@ vreinterpretq_p16_p64 (poly64x2_t __a)\n   return (poly16x8_t) __a;\n }\n \n+__extension__ extern __inline poly16x8_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p16_p128 (poly128_t __a)\n+{\n+  return (poly16x8_t)__a;\n+}\n+\n __extension__ extern __inline poly64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_p64_f16 (float16x4_t __a)\n@@ -3772,6 +3786,13 @@ vreinterpret_p64_p8 (poly8x8_t __a)\n   return (poly64x1_t) __a;\n }\n \n+__extension__ extern __inline poly64x1_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpret_p64_p16 (poly16x4_t __a)\n+{\n+  return (poly64x1_t)__a;\n+}\n+\n __extension__ extern __inline poly64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpretq_p64_f64 (float64x2_t __a)\n@@ -3821,6 +3842,13 @@ vreinterpretq_p64_f32 (float32x4_t __a)\n   return (poly64x2_t) __a;\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p64_p128 (poly128_t __a)\n+{\n+  return (poly64x2_t)__a;\n+}\n+\n __extension__ extern __inline poly64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpretq_p64_u8 (uint8x16_t __a)\n@@ -3835,6 +3863,13 @@ vreinterpretq_p64_u16 (uint16x8_t __a)\n   return (poly64x2_t) __a;\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p64_p16 (poly16x8_t __a)\n+{\n+  return (poly64x2_t)__a;\n+}\n+\n __extension__ extern __inline poly64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpretq_p64_u32 (uint32x4_t __a)\n@@ -3856,6 +3891,97 @@ vreinterpretq_p64_p8 (poly8x16_t __a)\n   return (poly64x2_t) __a;\n }\n \n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_p8 (poly8x16_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_p16 (poly16x8_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_f16 (float16x8_t __a)\n+{\n+  return (poly128_t) __a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_f32 (float32x4_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_p64 (poly64x2_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_s64 (int64x2_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_u64 (uint64x2_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_s8 (int8x16_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_s16 (int16x8_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_s32 (int32x4_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_u8 (uint8x16_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_u16 (uint16x8_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_u32 (uint32x4_t __a)\n+{\n+  return (poly128_t)__a;\n+}\n+\n __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_f16_f64 (float64x1_t __a)\n@@ -4024,6 +4150,13 @@ vreinterpretq_f16_p8 (poly8x16_t __a)\n   return (float16x8_t) __a;\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_f16_p128 (poly128_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpretq_f16_p16 (poly16x8_t __a)\n@@ -4220,6 +4353,14 @@ vreinterpretq_f32_p64 (poly64x2_t __a)\n   return (float32x4_t) __a;\n }\n \n+__extension__ extern __inline float32x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_f32_p128 (poly128_t __a)\n+{\n+  return (float32x4_t)__a;\n+}\n+\n+\n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_f64_f16 (float16x4_t __a)\n@@ -4584,6 +4725,13 @@ vreinterpretq_s64_p64 (poly64x2_t __a)\n   return (int64x2_t) __a;\n }\n \n+__extension__ extern __inline int64x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_s64_p128 (poly128_t __a)\n+{\n+  return (int64x2_t)__a;\n+}\n+\n __extension__ extern __inline uint64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_u64_f16 (float16x4_t __a)\n@@ -4766,6 +4914,13 @@ vreinterpretq_u64_p64 (poly64x2_t __a)\n   return (uint64x2_t) __a;\n }\n \n+__extension__ extern __inline uint64x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_u64_p128 (poly128_t __a)\n+{\n+  return (uint64x2_t)__a;\n+}\n+\n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_s8_f16 (float16x4_t __a)\n@@ -4948,6 +5103,13 @@ vreinterpretq_s8_p64 (poly64x2_t __a)\n   return (int8x16_t) __a;\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_s8_p128 (poly128_t __a)\n+{\n+  return (int8x16_t)__a;\n+}\n+\n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_s16_f16 (float16x4_t __a)\n@@ -5130,6 +5292,13 @@ vreinterpretq_s16_p64 (poly64x2_t __a)\n   return (int16x8_t) __a;\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_s16_p128 (poly128_t __a)\n+{\n+  return (int16x8_t)__a;\n+}\n+\n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_s32_f16 (float16x4_t __a)\n@@ -5312,6 +5481,13 @@ vreinterpretq_s32_p64 (poly64x2_t __a)\n   return (int32x4_t) __a;\n }\n \n+__extension__ extern __inline int32x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_s32_p128 (poly128_t __a)\n+{\n+  return (int32x4_t)__a;\n+}\n+\n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_u8_f16 (float16x4_t __a)\n@@ -5494,6 +5670,13 @@ vreinterpretq_u8_p64 (poly64x2_t __a)\n   return (uint8x16_t) __a;\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_u8_p128 (poly128_t __a)\n+{\n+  return (uint8x16_t)__a;\n+}\n+\n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_u16_f16 (float16x4_t __a)\n@@ -5676,6 +5859,13 @@ vreinterpretq_u16_p64 (poly64x2_t __a)\n   return (uint16x8_t) __a;\n }\n \n+__extension__ extern __inline uint16x8_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_u16_p128 (poly128_t __a)\n+{\n+  return (uint16x8_t)__a;\n+}\n+\n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vreinterpret_u32_f16 (float16x4_t __a)\n@@ -5858,6 +6048,13 @@ vreinterpretq_u32_p64 (poly64x2_t __a)\n   return (uint32x4_t) __a;\n }\n \n+__extension__ extern __inline uint32x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_u32_p128 (poly128_t __a)\n+{\n+  return (uint32x4_t)__a;\n+}\n+\n /* vset_lane  */\n \n __extension__ extern __inline float16x4_t"}]}