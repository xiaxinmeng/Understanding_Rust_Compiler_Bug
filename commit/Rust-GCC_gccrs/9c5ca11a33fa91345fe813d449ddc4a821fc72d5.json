{"sha": "9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1Y2ExMWEzM2ZhOTEzNDVmZTgxM2Q0NDlkZGM0YTgyMWZjNzJkNQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-27T07:54:39Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-27T08:37:43Z"}, "message": "coroutines: Improve diagnostics for one allocator case.\n\nIf the user provides operator new and that is noexcept, this\nimplies that it can fail with a null return.  At that point, we expect\nto be able to call get_return_object_on_allocation_failure().\n\nThis diagnoses the case where such an operator new has been\nprovided, but the g-r-o-o-a-f is either missing or unusable.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (morph_fn_to_coro): Diagnose unavailable\n\tget_return_object_on_allocation_failure.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/coro-bad-grooaf-01-grooaf-expected.C: New test.", "tree": {"sha": "ac0363693e1e0cdd789ced435fc875c1cd518cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac0363693e1e0cdd789ced435fc875c1cd518cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5ca11a33fa91345fe813d449ddc4a821fc72d5/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212475e5757fe3335cba30c9c3eec1707ac0c271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212475e5757fe3335cba30c9c3eec1707ac0c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212475e5757fe3335cba30c9c3eec1707ac0c271"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "8b8d00e8e0c425c6f0786b098fe0ff9050385aad", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5ca11a33fa91345fe813d449ddc4a821fc72d5/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5ca11a33fa91345fe813d449ddc4a821fc72d5/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "patch": "@@ -4041,6 +4041,10 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n     else if (grooaf && !TYPE_NOTHROW_P (TREE_TYPE (func)))\n       error_at (fn_start, \"%qE is provided by %qT but %qE is not marked\"\n \t\t\" %<throw()%> or %<noexcept%>\", grooaf, promise_type, nwname);\n+    else if (!grooaf && TYPE_NOTHROW_P (TREE_TYPE (func)))\n+      warning_at (fn_start, 0, \"%qE is marked %<throw()%> or %<noexcept%> but\"\n+\t\t  \" no usable %<get_return_object_on_allocation_failure%>\"\n+\t\t  \" is provided by %qT \", nwname, promise_type);\n     }\n   else /* No operator new in the promise.  */\n     {"}, {"sha": "9fa3d64a9f23a0d65d177898b8cf90a9c5f4fe55", "filename": "gcc/testsuite/g++.dg/coroutines/coro-bad-grooaf-01-grooaf-expected.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5ca11a33fa91345fe813d449ddc4a821fc72d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-01-grooaf-expected.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5ca11a33fa91345fe813d449ddc4a821fc72d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-01-grooaf-expected.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-01-grooaf-expected.C?ref=9c5ca11a33fa91345fe813d449ddc4a821fc72d5", "patch": "@@ -0,0 +1,14 @@\n+/* g-r-o-o-a-f would be expected, since we have a noexcept op new.  */\n+\n+#define USE_FAILING_OP_NEW\n+#include \"coro1-allocators.h\"\n+\n+int used_grooaf = 0;\n+\n+struct coro1\n+f () noexcept // { dg-warning {'operator new' is marked 'throw\\(\\)' or 'noexcept' but no usable 'get_return_object_on_allocation_failure' is provided by 'std::__n4861::__coroutine_traits_impl<coro1, void>::promise_type' \\{aka 'coro1::promise_type'\\}} }\n+{\n+  PRINT (\"coro1: about to return\");\n+  co_return;\n+} \n+"}]}