{"sha": "4c3182538905f7e806afcf2358825cce22183991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzMTgyNTM4OTA1ZjdlODA2YWZjZjIzNTg4MjVjY2UyMjE4Mzk5MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T13:48:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T13:48:52Z"}, "message": "[multiple changes]\n\n2011-11-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb: Minor refactoring (renaming of a parameter).\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.ads: Minor reformatting.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Atomic_Synchronization_Disabled): Check -gnatd.d\n\tand -gnatd.e here\n\t* exp_ch2.adb (Expand_Entity_Reference): Use\n\tActivate_Atomic_Synchronization\n\t* exp_ch4.adb (Expand_N_Explicit_Dereference): Use\n\tActivate_Atomic_Synchronization (Expand_N_Indexed_Compoonent):\n\tActivate_Atomic_Synchronization (Expand_N_Selected_Component):\n\tUse Activate_Atomic_Synchronization\n\t* exp_util.ads, exp_util.adb (Activate_Atomic_Synchronization): New\n\tprocedure.\n\t* sinfo.ads, sinfo.adb (Atomic_Sync_Required): Can now apply to\n\tN_Selected_Component node\n\nFrom-SVN: r180950", "tree": {"sha": "862c171a1d33635f2b5e29e17a82001c59d22f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/862c171a1d33635f2b5e29e17a82001c59d22f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c3182538905f7e806afcf2358825cce22183991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3182538905f7e806afcf2358825cce22183991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3182538905f7e806afcf2358825cce22183991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3182538905f7e806afcf2358825cce22183991/comments", "author": null, "committer": null, "parents": [{"sha": "37765e95f1b10191c37f6d185a3621cfd7ccdfd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37765e95f1b10191c37f6d185a3621cfd7ccdfd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37765e95f1b10191c37f6d185a3621cfd7ccdfd9"}], "stats": {"total": 208, "additions": 125, "deletions": 83}, "files": [{"sha": "8742031a5ad64f681c2a7019996cd0cfc471357d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -1,3 +1,26 @@\n+2011-11-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb: Minor refactoring (renaming of a parameter).\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.ads: Minor reformatting.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Atomic_Synchronization_Disabled): Check -gnatd.d\n+\tand -gnatd.e here\n+\t* exp_ch2.adb (Expand_Entity_Reference): Use\n+\tActivate_Atomic_Synchronization\n+\t* exp_ch4.adb (Expand_N_Explicit_Dereference): Use\n+\tActivate_Atomic_Synchronization (Expand_N_Indexed_Compoonent):\n+\tActivate_Atomic_Synchronization (Expand_N_Selected_Component):\n+\tUse Activate_Atomic_Synchronization\n+\t* exp_util.ads, exp_util.adb (Activate_Atomic_Synchronization): New\n+\tprocedure.\n+\t* sinfo.ads, sinfo.adb (Atomic_Sync_Required): Can now apply to\n+\tN_Selected_Component node\n+\n 2011-11-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb, atree.ads, prj-env.adb, prj-env.ads: Minor reformatting."}, {"sha": "6bb9ddde1613ba204f7ffebb66561baa905eec51", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -895,9 +895,13 @@ package Atree is\n    -----------------------------------\n \n    --  This subpackage provides the functions for accessing and procedures for\n-   --  setting fields that are normally referenced by their logical synonyms\n-   --  defined in packages Sinfo and Einfo. The implementations of these\n-   --  packages use the package Atree.Unchecked_Access.\n+   --  setting fields that are normally referenced by wrapper subprograms (e.g.\n+   --  logical synonyms defined in packages Sinfo and Einfo, or specialized\n+   --  routines such as Rewrite (for Original_Node), or the node creation\n+   --  routines (for Set_Nkind). The implementations of these wrapper\n+   --  subprograms use the package Atree.Unchecked_Access as do various\n+   --  special case accesses where no wrapper applies. Documentation is always\n+   --  required for such a special case access explaining why it is needed.\n \n    package Unchecked_Access is\n "}, {"sha": "67febfe1919f9829768576c286a58d55ae355564", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -2565,8 +2565,25 @@ package body Checks is\n \n    function Atomic_Synchronization_Disabled (E : Entity_Id) return Boolean is\n    begin\n-      if Present (E) and then Checks_May_Be_Suppressed (E) then\n+      --  If debug flag d.e is set, always return False, i.e. all atomic sync\n+      --  looks enabled, since it is never disabled.\n+\n+      if Debug_Flag_Dot_E then\n+         return False;\n+\n+      --  If debug flag d.d is set then always return True, i.e. all atomic\n+      --  sync looks disabled, since it always tests True.\n+\n+      elsif Debug_Flag_Dot_D then\n+         return True;\n+\n+      --  If entity present, then check result for that entity\n+\n+      elsif Present (E) and then Checks_May_Be_Suppressed (E) then\n          return Is_Check_Suppressed (E, Atomic_Synchronization);\n+\n+      --  Otherwise result depends on current scope setting\n+\n       else\n          return Scope_Suppress (Atomic_Synchronization);\n       end if;"}, {"sha": "80f381b82a1b7bdaf7305204d6645c341ea3c173", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -404,35 +404,15 @@ package body Exp_Ch2 is\n       if Nkind_In (N, N_Identifier, N_Expanded_Name)\n         and then Ekind (E) = E_Variable\n         and then (Is_Atomic (E) or else Is_Atomic (Etype (E)))\n-\n-         --  Don't go setting the flag for the prefix of an attribute because\n-         --  we don't want atomic sync for X'Size, X'Access etc.\n-\n-         --  Is this right in all cases of attributes???\n-         --  Are there other exemptions required ???\n-\n-        and then (Nkind (Parent (N)) /= N_Attribute_Reference\n-                    or else Prefix (Parent (N)) /= N)\n       then\n          declare\n             Set  : Boolean;\n-            MLoc : Node_Id;\n \n          begin\n-            --  Always set if debug flag d.e is set\n-\n-            if Debug_Flag_Dot_E then\n-               Set := True;\n-\n-            --  Never set if debug flag d.d is set\n-\n-            elsif Debug_Flag_Dot_D then\n-               Set := False;\n-\n             --  If variable is atomic, but type is not, setting depends on\n             --  disable/enable state for the variable.\n \n-            elsif Is_Atomic (E) and then not Is_Atomic (Etype (E)) then\n+            if Is_Atomic (E) and then not Is_Atomic (Etype (E)) then\n                Set := not Atomic_Synchronization_Disabled (E);\n \n             --  If variable is not atomic, but its type is atomic, setting\n@@ -453,20 +433,7 @@ package body Exp_Ch2 is\n             --  Set flag if required\n \n             if Set then\n-               Set_Atomic_Sync_Required (N);\n-\n-               --  Generate info message if requested\n-\n-               if Warn_On_Atomic_Synchronization then\n-                  if Nkind (N) = N_Identifier then\n-                     MLoc := N;\n-                  else\n-                     MLoc := Selector_Name (N);\n-                  end if;\n-\n-                  Error_Msg_N\n-                    (\"?info: atomic synchronization set for &\", MLoc);\n-               end if;\n+               Activate_Atomic_Synchronization (N);\n             end if;\n          end;\n       end if;"}, {"sha": "b056d114d17b180cce6f02487ce6967c2b89b140", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -4478,13 +4478,7 @@ package body Exp_Ch4 is\n       if Is_Atomic (Etype (N))\n         and then not Atomic_Synchronization_Disabled (Etype (N))\n       then\n-         Set_Atomic_Sync_Required (N);\n-\n-         --  Generate info message if requested\n-\n-         if Warn_On_Atomic_Synchronization then\n-            Error_Msg_N (\"?info: atomic synchronization set\", N);\n-         end if;\n+         Activate_Atomic_Synchronization (N);\n       end if;\n    end Expand_N_Explicit_Dereference;\n \n@@ -5326,13 +5320,7 @@ package body Exp_Ch4 is\n         or else (Is_Atomic (Typ)\n                   and then not Atomic_Synchronization_Disabled (Typ))\n       then\n-         Set_Atomic_Sync_Required (N);\n-\n-         --  Generate info message if requested\n-\n-         if Warn_On_Atomic_Synchronization then\n-            Error_Msg_N (\"?info: atomic synchronization set\", N);\n-         end if;\n+         Activate_Atomic_Synchronization (N);\n       end if;\n \n       --  All done for the non-packed case\n@@ -8216,14 +8204,7 @@ package body Exp_Ch4 is\n         and then Is_Atomic (Etype (N))\n         and then not Atomic_Synchronization_Disabled (Etype (N))\n       then\n-         Set_Atomic_Sync_Required (Selector_Name (N));\n-\n-         --  Generate info message if requested\n-\n-         if Warn_On_Atomic_Synchronization then\n-            Error_Msg_N\n-              (\"?info: atomic synchronization set for &\", Selector_Name (N));\n-         end if;\n+         Activate_Atomic_Synchronization (N);\n       end if;\n    end Expand_N_Selected_Component;\n "}, {"sha": "0f7fe592722f9691274c4364819e74bf5807568b", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -160,6 +160,53 @@ package body Exp_Util is\n    --  or body. Flag Nested_Constructs should be set when any nested packages\n    --  declared in L must be processed.\n \n+   -------------------------------------\n+   -- Activate_Atomic_Synchronization --\n+   -------------------------------------\n+\n+   procedure Activate_Atomic_Synchronization (N : Node_Id) is\n+      Msg_Node : Node_Id;\n+\n+   begin\n+      --  Nothing to do if we are the prefix of an attribute, since we do not\n+      --  want an atomic sync operation for things like A'Adress or A'Size).\n+\n+      if Nkind (Parent (N)) = N_Attribute_Reference\n+        and then Prefix (Parent (N)) = N\n+      then\n+         return;\n+      end if;\n+\n+      --  Go ahead and set the flag\n+\n+      Set_Atomic_Sync_Required (N);\n+\n+      --  Generate info message if requested\n+\n+      if Warn_On_Atomic_Synchronization then\n+         case Nkind (N) is\n+            when N_Identifier =>\n+               Msg_Node := N;\n+\n+            when N_Selected_Component | N_Expanded_Name =>\n+               Msg_Node := Selector_Name (N);\n+\n+            when N_Explicit_Dereference | N_Indexed_Component =>\n+               Msg_Node := Empty;\n+\n+            when others =>\n+               pragma Assert (False);\n+               return;\n+         end case;\n+\n+         if Present (Msg_Node) then\n+            Error_Msg_N (\"?info: atomic synchronization set for &\", Msg_Node);\n+         else\n+            Error_Msg_N (\"?info: atomic synchronization set\", N);\n+         end if;\n+      end if;\n+   end Activate_Atomic_Synchronization;\n+\n    ----------------------\n    -- Adjust_Condition --\n    ----------------------"}, {"sha": "94512b683926ea9b2cf32300b9d9f4e8b603914d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -149,6 +149,14 @@ package Exp_Util is\n    -- Other Subprograms --\n    -----------------------\n \n+   procedure Activate_Atomic_Synchronization (N : Node_Id);\n+   --  N is a node for which atomic synchronization may be required (it is\n+   --  either an identifier, expanded name, or selected/indexed component or\n+   --  an explicit dereference). The caller has checked the basic conditions\n+   --  (atomic variable appearing and Atomic_Sync not disabled). This function\n+   --  checks if atomic synchronization is required and if so sets the flag\n+   --  and if appropriate generates a warning (in -gnatw.n mode).\n+\n    procedure Adjust_Condition (N : Node_Id);\n    --  The node N is an expression whose root-type is Boolean, and which\n    --  represents a boolean value used as a condition (i.e. a True/False"}, {"sha": "f8562ba8fd678ac871299cfa3a5414c5ff3b6d75", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -528,9 +528,9 @@ package body Sem_Prag is\n       --  case, and if found, issues an appropriate error message.\n \n       procedure Check_Expr_Is_Static_Expression\n-        (Argx : Node_Id;\n+        (Expr : Node_Id;\n          Typ  : Entity_Id := Empty);\n-      --  Check the specified expression Argx to make sure that it is a static\n+      --  Check the specified expression Expr to make sure that it is a static\n       --  expression of the given type (i.e. it will be analyzed and resolved\n       --  using this type, which can be any valid argument to Resolve, e.g.\n       --  Any_Integer is OK). If not, given error and raise Pragma_Exit. If\n@@ -1456,20 +1456,20 @@ package body Sem_Prag is\n       -------------------------------------\n \n       procedure Check_Expr_Is_Static_Expression\n-        (Argx : Node_Id;\n+        (Expr : Node_Id;\n          Typ  : Entity_Id := Empty)\n       is\n       begin\n          if Present (Typ) then\n-            Analyze_And_Resolve (Argx, Typ);\n+            Analyze_And_Resolve (Expr, Typ);\n          else\n-            Analyze_And_Resolve (Argx);\n+            Analyze_And_Resolve (Expr);\n          end if;\n \n-         if Is_OK_Static_Expression (Argx) then\n+         if Is_OK_Static_Expression (Expr) then\n             return;\n \n-         elsif Etype (Argx) = Any_Type then\n+         elsif Etype (Expr) = Any_Type then\n             raise Pragma_Exit;\n \n          --  An interesting special case, if we have a string literal and we\n@@ -1479,14 +1479,14 @@ package body Sem_Prag is\n          --  warnings as usual, but will not cause errors.\n \n          elsif Ada_Version = Ada_83\n-           and then Nkind (Argx) = N_String_Literal\n+           and then Nkind (Expr) = N_String_Literal\n          then\n             return;\n \n          --  Static expression that raises Constraint_Error. This has already\n          --  been flagged, so just exit from pragma processing.\n \n-         elsif Is_Static_Expression (Argx) then\n+         elsif Is_Static_Expression (Expr) then\n             raise Pragma_Exit;\n \n          --  Finally, we have a real error\n@@ -1499,7 +1499,7 @@ package body Sem_Prag is\n                        \"argument for pragma% must be a static expression!\";\n             begin\n                Fix_Error (Msg);\n-               Flag_Non_Static_Expr (Msg, Argx);\n+               Flag_Non_Static_Expr (Msg, Expr);\n             end;\n \n             raise Pragma_Exit;"}, {"sha": "b36b930b8c4f9b6e2f41b5828fd6e278dcef01c5", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -256,7 +256,8 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Expanded_Name\n         or else NT (N).Nkind = N_Explicit_Dereference\n         or else NT (N).Nkind = N_Identifier\n-        or else NT (N).Nkind = N_Indexed_Component);\n+        or else NT (N).Nkind = N_Indexed_Component\n+        or else NT (N).Nkind = N_Selected_Component);\n       return Flag14 (N);\n    end Atomic_Sync_Required;\n \n@@ -3327,7 +3328,8 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Expanded_Name\n         or else NT (N).Nkind = N_Explicit_Dereference\n         or else NT (N).Nkind = N_Identifier\n-        or else NT (N).Nkind = N_Indexed_Component);\n+        or else NT (N).Nkind = N_Indexed_Component\n+        or else NT (N).Nkind = N_Selected_Component);\n       Set_Flag14 (N, Val);\n    end Set_Atomic_Sync_Required;\n "}, {"sha": "35a73f9ad94d3b366583cb566efc4755481f00d6", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3182538905f7e806afcf2358825cce22183991/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4c3182538905f7e806afcf2358825cce22183991", "patch": "@@ -606,16 +606,8 @@ package Sinfo is\n    --    harmless.\n \n    --  Atomic_Sync_Required (Flag14-Sem)\n-   --    This flag is set in an identifier or expanded name node if the\n-   --    corresponding reference (or assignment when on the left side of\n-   --    an assignment) requires atomic synchronization, as a result of\n-   --    Atomic_Synchronization being enabled for the corresponding entity\n-   --    or its type. Also set for Selector_Name of an N_Selected Component\n-   --    node if the type is atomic and requires atomic synchronization.\n-   --    Also set on an N_Explicit Dereference node if the resulting type\n-   --    is atomic and requires atomic synchronization. Finally it is set\n-   --    on an N_Indexed_Component node if the resulting type is Atomic, or\n-   --    if the array type or the array has pragma Atomic_Components set.\n+   --    This flag is set on a node for which atomic synchronization is\n+   --    required for the corresponding reference or modification.\n \n    --  At_End_Proc (Node1)\n    --    This field is present in an N_Handled_Sequence_Of_Statements node.\n@@ -3248,6 +3240,7 @@ package Sinfo is\n       --  Associated_Node (Node4-Sem)\n       --  Do_Discriminant_Check (Flag13-Sem)\n       --  Is_In_Discriminant_Check (Flag11-Sem)\n+      --  Atomic_Sync_Required (Flag14-Sem)\n       --  plus fields for expression\n \n       --------------------------"}]}