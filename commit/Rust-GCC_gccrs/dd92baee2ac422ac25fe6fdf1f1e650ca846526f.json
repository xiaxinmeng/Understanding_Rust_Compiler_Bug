{"sha": "dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5MmJhZWUyYWM0MjJhYzI1ZmU2ZmRmMWYxZTY1MGNhODQ2NTI2Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-12-12T14:02:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-12-12T14:02:37Z"}, "message": "re PR middle-end/64274 ([ARM] gcc.target/arm/fixed-point-exec.c ICE in fold_binary_loc)\n\n\tPR middle-end/64274\n\t* fold-const.c (fold_binary_loc): Add ANY_INTEGRAL_TYPE_P check.\n\nFrom-SVN: r218671", "tree": {"sha": "6e3dc0d20c6882b360f60d0642043d456e68600f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3dc0d20c6882b360f60d0642043d456e68600f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd92baee2ac422ac25fe6fdf1f1e650ca846526f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db62401dee8e69024392d9a4525414785df63523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db62401dee8e69024392d9a4525414785df63523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db62401dee8e69024392d9a4525414785df63523"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "69797f6b501adc3aed1506be613903d49c0fabc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd92baee2ac422ac25fe6fdf1f1e650ca846526f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd92baee2ac422ac25fe6fdf1f1e650ca846526f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "patch": "@@ -1,3 +1,8 @@\n+2014-12-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/64274\n+\t* fold-const.c (fold_binary_loc): Add ANY_INTEGRAL_TYPE_P check.\n+\n 2014-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/64269"}, {"sha": "d71fa94d646b1f4c92056d3af8fbfbfaa87a52f1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd92baee2ac422ac25fe6fdf1f1e650ca846526f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd92baee2ac422ac25fe6fdf1f1e650ca846526f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dd92baee2ac422ac25fe6fdf1f1e650ca846526f", "patch": "@@ -10082,7 +10082,8 @@ fold_binary_loc (location_t loc,\n \t  /* Reassociate (plus (plus (mult) (foo)) (mult)) as\n \t     (plus (plus (mult) (mult)) (foo)) so that we can\n \t     take advantage of the factoring cases below.  */\n-\t  if (TYPE_OVERFLOW_WRAPS (type)\n+\t  if (ANY_INTEGRAL_TYPE_P (type)\n+\t      && TYPE_OVERFLOW_WRAPS (type)\n \t      && (((TREE_CODE (arg0) == PLUS_EXPR\n \t\t    || TREE_CODE (arg0) == MINUS_EXPR)\n \t\t   && TREE_CODE (arg1) == MULT_EXPR)"}]}