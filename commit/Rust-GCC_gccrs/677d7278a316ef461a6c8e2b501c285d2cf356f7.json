{"sha": "677d7278a316ef461a6c8e2b501c285d2cf356f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3ZDcyNzhhMzE2ZWY0NjFhNmM4ZTJiNTAxYzI4NWQyY2YzNTZmNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-09-18T08:43:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-18T08:43:37Z"}, "message": "Alternate fix for PR ada/71358\n\n2017-09-18  Bob Duff  <duff@adacore.com>\n\n\tAlternate fix for PR ada/71358\n\t* libgnat/g-comlin.adb (Getopt): Remove manual null access checks.\n\tInstead, make a local copy of Config, and if it's null, allocate an\n\tempty Command_Line_Configuration_Record, so we won't crash on null\n\tpointer dereference.\n\nFrom-SVN: r252909", "tree": {"sha": "3eb38686e6c88f874cd016a89c7c189c4d465118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb38686e6c88f874cd016a89c7c189c4d465118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/677d7278a316ef461a6c8e2b501c285d2cf356f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677d7278a316ef461a6c8e2b501c285d2cf356f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677d7278a316ef461a6c8e2b501c285d2cf356f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677d7278a316ef461a6c8e2b501c285d2cf356f7/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a63b04ee82dcdd9582ccb3fb7d853a19db28aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a63b04ee82dcdd9582ccb3fb7d853a19db28aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a63b04ee82dcdd9582ccb3fb7d853a19db28aec"}], "stats": {"total": 139, "additions": 78, "deletions": 61}, "files": [{"sha": "30031f80afaabd4ead010c12b9099dc803bcbdad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677d7278a316ef461a6c8e2b501c285d2cf356f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677d7278a316ef461a6c8e2b501c285d2cf356f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=677d7278a316ef461a6c8e2b501c285d2cf356f7", "patch": "@@ -1,3 +1,11 @@\n+2017-09-18  Bob Duff  <duff@adacore.com>\n+\n+\tAlternate fix for PR ada/71358\n+\t* libgnat/g-comlin.adb (Getopt): Remove manual null access checks.\n+\tInstead, make a local copy of Config, and if it's null, allocate an\n+\tempty Command_Line_Configuration_Record, so we won't crash on null\n+\tpointer dereference.\n+\n 2017-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* libgnarl/a-intnam__rtems.ads: Update copyright date."}, {"sha": "86794e04ba1b104f5f5098d99b895dc8ee83260a", "filename": "gcc/ada/libgnat/g-comlin.adb", "status": "modified", "additions": 70, "deletions": 61, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677d7278a316ef461a6c8e2b501c285d2cf356f7/gcc%2Fada%2Flibgnat%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677d7278a316ef461a6c8e2b501c285d2cf356f7/gcc%2Fada%2Flibgnat%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-comlin.adb?ref=677d7278a316ef461a6c8e2b501c285d2cf356f7", "patch": "@@ -3153,18 +3153,16 @@ package body GNAT.Command_Line is\n \n          New_Line;\n \n-         if Section /= \"\" and then Config.Switches /= null then\n+         if Section /= \"\" then\n             Put_Line (\"Switches after \" & Section);\n          end if;\n \n          --  Compute size of the switches column\n \n-         if Config.Switches /= null then\n-            for S in Config.Switches'Range loop\n-               Max_Len := Natural'Max\n-                 (Max_Len, Switch_Name (Config.Switches (S), Section)'Length);\n-            end loop;\n-         end if;\n+         for S in Config.Switches'Range loop\n+            Max_Len := Natural'Max\n+              (Max_Len, Switch_Name (Config.Switches (S), Section)'Length);\n+         end loop;\n \n          if Config.Aliases /= null then\n             for A in Config.Aliases'Range loop\n@@ -3177,27 +3175,25 @@ package body GNAT.Command_Line is\n \n          --  Display the switches\n \n-         if Config.Switches /= null then\n-            for S in Config.Switches'Range loop\n-               declare\n-                  N : constant String :=\n-                    Switch_Name (Config.Switches (S), Section);\n-\n-               begin\n-                  if N /= \"\" then\n-                     Put (\" \");\n-                     Put (N);\n-                     Put ((1 .. Max_Len - N'Length + 1 => ' '));\n+         for S in Config.Switches'Range loop\n+            declare\n+               N : constant String :=\n+                     Switch_Name (Config.Switches (S), Section);\n \n-                     if Config.Switches (S).Help /= null then\n-                        Put (Config.Switches (S).Help.all);\n-                     end if;\n+            begin\n+               if N /= \"\" then\n+                  Put (\" \");\n+                  Put (N);\n+                  Put ((1 .. Max_Len - N'Length + 1 => ' '));\n \n-                     New_Line;\n+                  if Config.Switches (S).Help /= null then\n+                     Put (Config.Switches (S).Help.all);\n                   end if;\n-               end;\n-            end loop;\n-         end if;\n+\n+                  New_Line;\n+               end if;\n+            end;\n+         end loop;\n \n          --  Display the aliases\n \n@@ -3348,6 +3344,7 @@ package body GNAT.Command_Line is\n       Parser      : Opt_Parser := Command_Line_Parser;\n       Concatenate : Boolean := True)\n    is\n+      Local_Config    : Command_Line_Configuration := Config;\n       Getopt_Switches : String_Access;\n       C               : Character := ASCII.NUL;\n \n@@ -3373,22 +3370,22 @@ package body GNAT.Command_Line is\n          --  Do automatic handling when possible\n \n          if Index /= -1 then\n-            case Config.Switches (Index).Typ is\n+            case Local_Config.Switches (Index).Typ is\n                when Switch_Untyped =>\n                   null;   --  no automatic handling\n \n                when Switch_Boolean =>\n-                  Config.Switches (Index).Boolean_Output.all :=\n-                    Config.Switches (Index).Boolean_Value;\n+                  Local_Config.Switches (Index).Boolean_Output.all :=\n+                    Local_Config.Switches (Index).Boolean_Value;\n                   return;\n \n                when Switch_Integer =>\n                   begin\n                      if Parameter = \"\" then\n-                        Config.Switches (Index).Integer_Output.all :=\n-                          Config.Switches (Index).Integer_Default;\n+                        Local_Config.Switches (Index).Integer_Output.all :=\n+                          Local_Config.Switches (Index).Integer_Default;\n                      else\n-                        Config.Switches (Index).Integer_Output.all :=\n+                        Local_Config.Switches (Index).Integer_Output.all :=\n                           Integer'Value (Parameter);\n                      end if;\n \n@@ -3402,8 +3399,8 @@ package body GNAT.Command_Line is\n                   return;\n \n                when Switch_String =>\n-                  Free (Config.Switches (Index).String_Output.all);\n-                  Config.Switches (Index).String_Output.all :=\n+                  Free (Local_Config.Switches (Index).String_Output.all);\n+                  Local_Config.Switches (Index).String_Output.all :=\n                     new String'(Parameter);\n                   return;\n             end case;\n@@ -3441,45 +3438,57 @@ package body GNAT.Command_Line is\n    --  Start of processing for Getopt\n \n    begin\n+      --  We work with a local copy of Config, because Config can be null, for\n+      --  example if Define_Switch was never called. We could modify Config\n+      --  itself, but then we would have to make it into an 'in out' parameter,\n+      --  which would be incompatible.\n+\n+      if Local_Config = null then\n+         Local_Config := new Command_Line_Configuration_Record;\n+      end if;\n+\n+      if Local_Config.Switches = null then\n+         Local_Config.Switches := new Switch_Definitions (1 .. 0);\n+      end if;\n+\n       --  Initialize sections\n \n-      if Config.Sections = null then\n-         Config.Sections := new Argument_List'(1 .. 0 => null);\n+      if Local_Config.Sections = null then\n+         Local_Config.Sections := new Argument_List'(1 .. 0 => null);\n       end if;\n \n       Internal_Initialize_Option_Scan\n         (Parser                   => Parser,\n          Switch_Char              => Parser.Switch_Character,\n          Stop_At_First_Non_Switch => Parser.Stop_At_First,\n-         Section_Delimiters       => Section_Delimiters (Config));\n+         Section_Delimiters       => Section_Delimiters (Local_Config));\n \n       Getopt_Switches := new String'\n-        (Get_Switches (Config, Parser.Switch_Character, Section_Name.all)\n+        (Get_Switches (Local_Config, Parser.Switch_Character, Section_Name.all)\n          & \" h -help\");\n \n       --  Initialize output values for automatically handled switches\n \n-      if Config.Switches /= null then\n-         for S in Config.Switches'Range loop\n-            case Config.Switches (S).Typ is\n-               when Switch_Untyped =>\n-                  null;   --  Nothing to do\n+      for S in Local_Config.Switches'Range loop\n+         case Local_Config.Switches (S).Typ is\n+            when Switch_Untyped =>\n+               null;   --  Nothing to do\n \n-               when Switch_Boolean =>\n-                  Config.Switches (S).Boolean_Output.all :=\n-                    not Config.Switches (S).Boolean_Value;\n+            when Switch_Boolean =>\n+               Local_Config.Switches (S).Boolean_Output.all :=\n+                 not Local_Config.Switches (S).Boolean_Value;\n \n-               when Switch_Integer =>\n-                  Config.Switches (S).Integer_Output.all :=\n-                    Config.Switches (S).Integer_Initial;\n+            when Switch_Integer =>\n+               Local_Config.Switches (S).Integer_Output.all :=\n+                 Local_Config.Switches (S).Integer_Initial;\n \n-               when Switch_String =>\n-                  if Config.Switches (S).String_Output.all = null then\n-                     Config.Switches (S).String_Output.all := new String'(\"\");\n-                  end if;\n-            end case;\n-         end loop;\n-      end if;\n+            when Switch_String =>\n+               if Local_Config.Switches (S).String_Output.all = null then\n+                  Local_Config.Switches (S).String_Output.all :=\n+                    new String'(\"\");\n+               end if;\n+         end case;\n+      end loop;\n \n       --  For all sections, and all switches within those sections\n \n@@ -3500,34 +3509,34 @@ package body GNAT.Command_Line is\n                  or else\n                Full_Switch (Parser) = \"-help\"\n             then\n-               Display_Help (Config);\n+               Display_Help (Local_Config);\n                raise Exit_From_Command_Line;\n             end if;\n \n             --  Do switch expansion if needed\n \n             For_Each_Simple\n-              (Config,\n+              (Local_Config,\n                Section   => Section_Name.all,\n                Switch    => Parser.Switch_Character & Full_Switch (Parser),\n                Parameter => Parameter (Parser));\n \n          else\n             if Current_Section = -1 then\n-               Current_Section := Config.Sections'First;\n+               Current_Section := Local_Config.Sections'First;\n             else\n                Current_Section := Current_Section + 1;\n             end if;\n \n-            exit when Current_Section > Config.Sections'Last;\n+            exit when Current_Section > Local_Config.Sections'Last;\n \n-            Section_Name := Config.Sections (Current_Section);\n+            Section_Name := Local_Config.Sections (Current_Section);\n             Goto_Section (Section_Name.all, Parser);\n \n             Free (Getopt_Switches);\n             Getopt_Switches := new String'\n               (Get_Switches\n-                 (Config, Parser.Switch_Character, Section_Name.all));\n+                 (Local_Config, Parser.Switch_Character, Section_Name.all));\n          end if;\n       end loop;\n "}]}