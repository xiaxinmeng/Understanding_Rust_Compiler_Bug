{"sha": "6273ba378d377424a8752183a7520b9223806476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3M2JhMzc4ZDM3NzQyNGE4NzUyMTgzYTc1MjBiOTIyMzgwNjQ3Ng==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-09T09:43:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-09T09:43:33Z"}, "message": "[multiple changes]\n\n2004-09-09  Jeroen Frijters  <jeroen@frijters.net>\n\n\t(normalizePath): Added special case for windows systems.\n\n2004-09-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/File.java\n\t(dupSeparator): Made private.\n\t(File(URI)): New constructor.\n\t(getParentFile): Fixed javadoc.\n\t(createTempFile): Reformated.\n\t(setReadOnly): Added comment.\n\t(deleteOnExit): Merged javadoc with classpath version.\n\nFrom-SVN: r87225", "tree": {"sha": "b55bc6839b95368519fd1b5dea91504870e26050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55bc6839b95368519fd1b5dea91504870e26050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6273ba378d377424a8752183a7520b9223806476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6273ba378d377424a8752183a7520b9223806476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6273ba378d377424a8752183a7520b9223806476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6273ba378d377424a8752183a7520b9223806476/comments", "author": null, "committer": null, "parents": [{"sha": "931775801c7738d9524e57a2be9f96e43729aa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931775801c7738d9524e57a2be9f96e43729aa65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931775801c7738d9524e57a2be9f96e43729aa65"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "faa0b979b6a84dfe6e3c2fd7a53ae9f77bf2b412", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6273ba378d377424a8752183a7520b9223806476/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6273ba378d377424a8752183a7520b9223806476/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6273ba378d377424a8752183a7520b9223806476", "patch": "@@ -1,3 +1,17 @@\n+2004-09-09  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t(normalizePath): Added special case for windows systems.\n+\n+2004-09-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/File.java\n+\t(dupSeparator): Made private.\n+\t(File(URI)): New constructor.\n+\t(getParentFile): Fixed javadoc.\n+\t(createTempFile): Reformated.\n+\t(setReadOnly): Added comment.\n+\t(deleteOnExit): Merged javadoc with classpath version.\n+\n 2004-09-09  Michael Koch  <konqueror@gmx.de>\n \n \t* Makefile.am: Don't try to include deps.mk."}, {"sha": "187558dacb40e87faff3d1a9a80cad2b2ea11667", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6273ba378d377424a8752183a7520b9223806476/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6273ba378d377424a8752183a7520b9223806476/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=6273ba378d377424a8752183a7520b9223806476", "patch": "@@ -57,8 +57,8 @@\n  * types of path separators (\"/\" versus \"\\\", for example).  It also\n  * contains method useful for creating and deleting files and directories.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Tom Tromey <tromey@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey (tromey@cygnus.com)\n  */\n public class File implements Serializable, Comparable\n {\n@@ -91,6 +91,7 @@ public class File implements Serializable, Comparable\n    * An example separator string would be \"/\" on the GNU system.\n    */\n   public static final String separator = System.getProperty(\"file.separator\");\n+  private static final String dupSeparator = separator + separator;\n \n   /**\n    * This is the first character of the file separator string.  On many\n@@ -118,7 +119,6 @@ public class File implements Serializable, Comparable\n   static final String tmpdir = System.getProperty(\"java.io.tmpdir\");\n   static int maxPathLen;\n   static boolean caseSensitive;\n-  static String dupSeparator = separator + separator;\n   \n   static\n   {\n@@ -291,7 +291,15 @@ private String normalizePath(String p)\n     // On Windows, convert any '/' to '\\'.  This appears to be the same logic\n     // that Sun's Win32 Java performs.\n     if (separatorChar == '\\\\')\n-      p = p.replace ('/', '\\\\');\n+      {\n+        p = p.replace ('/', '\\\\');\n+\t// We have to special case the \"\\c:\" prefix.\n+\tif (p.length() > 2 && p.charAt(0) == '\\\\' &&\n+\t    ((p.charAt(1) >= 'a' && p.charAt(1) <= 'z') ||\n+\t    (p.charAt(1) >= 'A' && p.charAt(1) <= 'Z')) &&\n+\t    p.charAt(2) == ':')\n+\t  p = p.substring(1);\n+      }\n \n     int dupIndex = p.indexOf(dupSeparator);\n     int plen = p.length();\n@@ -412,6 +420,23 @@ public File(File directory, String name)\n     this (directory == null ? null : directory.path, name);\n   }\n \n+  /**\n+   * This method initializes a new <code>File</code> object to represent\n+   * a file corresponding to the specified <code>file:</code> protocol URI.\n+   *\n+   * @param uri The uri.\n+   */\n+  public File(URI uri)\n+  {\n+    if (uri == null)\n+\tthrow new NullPointerException(\"uri is null\");\n+\n+    if (!uri.getScheme().equals(\"file\"))\n+\tthrow new IllegalArgumentException(\"invalid uri protocol\");\n+\n+    path = normalizePath(uri.getPath());\n+  }\n+\n   /**\n    * This method returns the path of this file as an absolute path name.\n    * If the path name is already absolute, then it is returned.  Otherwise\n@@ -608,7 +633,7 @@ else if (last == 0)\n    * This method returns a <code>File</code> object representing the parent\n    * file of this one.\n    *\n-   * @param A <code>File</code> for the parent of this object.  \n+   * @return a <code>File</code> for the parent of this object.  \n    * <code>null</code>\n    * will be returned if this object does not have a parent.\n    *\n@@ -1038,16 +1063,16 @@ public static File createTempFile(String prefix, String suffix,\n       {\n         String dirname = tmpdir;\n         if (dirname == null)\n-          throw new IOException (\"Cannot determine system temporary directory\"); \n+          throw new IOException(\"Cannot determine system temporary directory\"); \n \t\n-        directory = new File (dirname);\n+        directory = new File(dirname);\n         if (!directory.exists())\n-          throw new IOException (\"System temporary directory \"\n-                                 + directory.getName() + \" does not exist.\");\n+          throw new IOException(\"System temporary directory \"\n+                                + directory.getName() + \" does not exist.\");\n         if (!directory.isDirectory())\n-          throw new IOException (\"System temporary directory \"\n-                                 + directory.getName()\n-                                 + \" is not really a directory.\");\n+          throw new IOException(\"System temporary directory \"\n+                                + directory.getName()\n+                                + \" is not really a directory.\");\n       }\n \n     // Check if prefix is at least 3 characters long\n@@ -1113,6 +1138,7 @@ public static File createTempFile(String prefix, String suffix,\n    */\n   public boolean setReadOnly()\n   {\n+    // Do a security check before trying to do anything else.\n     checkWrite();\n     return performSetReadOnly();\n   }\n@@ -1328,8 +1354,10 @@ private void checkRead()\n   }\n \n   /** \n-   * Add this File to the set of files to be deleted upon normal\n-   * termination.\n+   * Calling this method requests that the file represented by this object\n+   * be deleted when the virtual machine exits.  Note that this request cannot\n+   * be cancelled.  Also, it will only be carried out if the virtual machine\n+   * exits normally.\n    *\n    * @exception SecurityException If deleting of the file is not allowed\n    *"}]}