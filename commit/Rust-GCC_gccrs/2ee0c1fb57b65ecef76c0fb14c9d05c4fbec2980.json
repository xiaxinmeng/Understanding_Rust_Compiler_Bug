{"sha": "2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlMGMxZmI1N2I2NWVjZWY3NmMwZmIxNGM5ZDA1YzRmYmVjMjk4MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-08-02T17:39:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-08-02T17:39:51Z"}, "message": "DR 660, [Ready] in Toronto.\n\n2007-08-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tDR 660, [Ready] in Toronto.\n\t* include/bits/stl_function.h (bit_and, bit_or, bit_xor): Add.\n\t* testsuite/20_util/function_objects/dr660.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for DR 660, update.\n\n\t* docs/html/ext/lwg-closed.html, docs/html/ext/lwg-active.html,\n\tdocs/html/ext/lwg-defects.html: Import Revision 49.\n\nFrom-SVN: r127166", "tree": {"sha": "664197b6c07073fa32d2d6ed03dc3bba70b21eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664197b6c07073fa32d2d6ed03dc3bba70b21eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/comments", "author": null, "committer": null, "parents": [{"sha": "f29d2cff888dae22fa249de4475b61a3e81a867d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29d2cff888dae22fa249de4475b61a3e81a867d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29d2cff888dae22fa249de4475b61a3e81a867d"}], "stats": {"total": 35757, "additions": 25655, "deletions": 10102}, "files": [{"sha": "fa984ec3da590900a52d5b114c18943e0bf064b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "patch": "@@ -1,3 +1,13 @@\n+2007-08-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tDR 660, [Ready] in Toronto.\n+\t* include/bits/stl_function.h (bit_and, bit_or, bit_xor): Add.\n+\t* testsuite/20_util/function_objects/dr660.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for DR 660, update.\n+\n+\t* docs/html/ext/lwg-closed.html, docs/html/ext/lwg-active.html,\n+\tdocs/html/ext/lwg-defects.html: Import Revision 49.\n+\n 2007-07-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/32908"}, {"sha": "73881ed02969367876a4d7f1aa54d32cf4548274", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "patch": "@@ -592,7 +592,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Construct a <code>linear_congruential</code> engine and seed with it.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#526\">526</a>:\n+    <dt><a href=\"lwg-closed.html#526\">526</a>:\n         <em>Is it undefined if a function in the standard changes in\n \t    parameters?</em>\n     </dt>\n@@ -613,17 +613,23 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Add an auto_ptr&lt;void&gt; specialization.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#543\">543</a>:\n+    <dt><a href=\"lwg-defects.html#543\">543</a>:\n         <em>valarray slice default constructor</em>\n     </dt>\n     <dd>Follow the straightforward proposed resolution.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#586\">586</a>:\n+    <dt><a href=\"lwg-defects.html#586\">586</a>:\n         <em>string inserter not a formatted function</em>\n     </dt>\n     <dd>Change it to be a formatted output function (i.e. catch exceptions).\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#660\">660</a>:\n+        <em>Missing bitwise operations</em>\n+    </dt>\n+    <dd>Add the missing operations.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "8aec7335627a7bc82d82cb7c2d70c87aa432c601", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 7878, "deletions": 2909, "changes": 10787, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980"}, {"sha": "4d0c76d702fc96da25ad0f55b21245d5ac9f17be", "filename": "libstdc++-v3/docs/html/ext/lwg-closed.html", "status": "modified", "additions": 4530, "deletions": 591, "changes": 5121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-closed.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-closed.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-closed.html?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980"}, {"sha": "3f4b20c985e2e36138e45a6a125ba9c4e47aa4fd", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 13160, "deletions": 6599, "changes": 19759, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980"}, {"sha": "1bd11a392f070fca9280bbc587b73cfec2fc6c25", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "patch": "@@ -281,6 +281,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n   /** @}  */\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 660. Missing Bitwise Operations.\n+  template <class _Tp>\n+    struct bit_and : public binary_function<_Tp, _Tp, _Tp>\n+    {\n+      _Tp\n+      operator()(const _Tp& __x, const _Tp& __y) const\n+      { return __x & __y; }\n+    };\n+\n+  template <class _Tp>\n+    struct bit_or : public binary_function<_Tp, _Tp, _Tp>\n+    {\n+      _Tp\n+      operator()(const _Tp& __x, const _Tp& __y) const\n+      { return __x | __y; }\n+    };\n+\n+  template <class _Tp>\n+    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>\n+    {\n+      _Tp\n+      operator()(const _Tp& __x, const _Tp& __y) const\n+      { return __x ^ __y; }\n+    };\n+\n   // 20.3.5 negators\n   /** @defgroup s20_3_5_negators Negators\n    *  The functions @c not1 and @c not2 each take a predicate functor"}, {"sha": "bbc27b02a1005ec84e1bd477c7e01828430957a0", "filename": "libstdc++-v3/testsuite/20_util/function_objects/dr660.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fdr660.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fdr660.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fdr660.cc?ref=2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "patch": "@@ -0,0 +1,42 @@\n+// 2007-08-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <functional>\n+#include <testsuite_hooks.cc>\n+\n+// DR 660. Missing Bitwise Operations.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int i1 = 0; i1 < 1000; ++i1)\n+    for (int i2 = 0; i2 < 1000; ++i2)\n+      {\n+\tVERIFY( std::bit_and<int>()(i1, i2) == (i1 & i2) );\n+\tVERIFY( std::bit_or<int>()(i1, i2) == (i1 | i2) );\n+\tVERIFY( std::bit_xor<int>()(i1, i2) == (i1 ^ i2) );\n+      }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}