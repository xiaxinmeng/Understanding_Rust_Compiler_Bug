{"sha": "eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3ZTVkYTJmYzUwNGE4MWQ2NGU5YWVhYjI0MDhjZWNiZGRlMGMyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-31T22:29:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-31T22:29:38Z"}, "message": "flow.c (propagate_block): Move initialization of mem_set_list ...\n\n        * flow.c (propagate_block): Move initialization of mem_set_list ...\n        (init_propagate_block_info): ... here.  Also track blocks with\n        no successors; don't scan insns if ! PROP_SCAN_DEAD_CODE.\n\nFrom-SVN: r34310", "tree": {"sha": "02f2ad55c05de20a9e17213ef04d6c96d56f0fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02f2ad55c05de20a9e17213ef04d6c96d56f0fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29/comments", "author": null, "committer": null, "parents": [{"sha": "1febe16ba4611263eafa03b89edf8deae69dcdae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1febe16ba4611263eafa03b89edf8deae69dcdae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1febe16ba4611263eafa03b89edf8deae69dcdae"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "aea8ddbbaa1b18148d7943d56f41a452d0ad9038", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "patch": "@@ -1,3 +1,9 @@\n+2000-05-31  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (propagate_block): Move initialization of mem_set_list ...\n+\t(init_propagate_block_info): ... here.  Also track blocks with \n+\tno successors; don't scan insns if ! PROP_SCAN_DEAD_CODE.\n+\n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n \n \t* jump.c (jump_optimize_1): Revert 05-18 change."}, {"sha": "dcdf9692051694eed114adfa4dd59fb90a4e501e", "filename": "gcc/flow.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7e5da2fc504a81d64e9aeab2408cecbdde0c29/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=eb7e5da2fc504a81d64e9aeab2408cecbdde0c29", "patch": "@@ -3639,7 +3639,8 @@ init_propagate_block_info (bb, live, local_set, flags)\n   /* If this block ends in a conditional branch, for each register live\n      from one side of the branch and not the other, record the register\n      as conditionally dead.  */\n-  if (GET_CODE (bb->end) == JUMP_INSN\n+  if ((flags & (PROP_DEATH_NOTES | PROP_SCAN_DEAD_CODE))\n+      && GET_CODE (bb->end) == JUMP_INSN\n       && any_condjump_p (bb->end))\n     {\n       regset_head diff_head;\n@@ -3717,6 +3718,31 @@ init_propagate_block_info (bb, live, local_set, flags)\n     }\n #endif\n \n+  /* If this block has no successors, any stores to the frame that aren't\n+     used later in the block are dead.  So make a pass over the block\n+     recording any such that are made and show them dead at the end.  We do\n+     a very conservative and simple job here.  */\n+  if ((flags & PROP_SCAN_DEAD_CODE)\n+      && (bb->succ == NULL\n+          || (bb->succ->succ_next == NULL\n+\t      && bb->succ->dest == EXIT_BLOCK_PTR)))\n+    {\n+      rtx insn;\n+      for (insn = bb->end; insn != bb->head; insn = PREV_INSN (insn))\n+\tif (GET_CODE (insn) == INSN\n+\t    && GET_CODE (PATTERN (insn)) == SET\n+\t    && GET_CODE (SET_DEST (PATTERN (insn))) == MEM)\n+\t  {\n+\t    rtx mem = SET_DEST (PATTERN (insn));\n+\n+\t    if (XEXP (mem, 0) == frame_pointer_rtx\n+\t\t|| (GET_CODE (XEXP (mem, 0)) == PLUS\n+\t\t    && XEXP (XEXP (mem, 0), 0) == frame_pointer_rtx\n+\t\t    && GET_CODE (XEXP (XEXP (mem, 0), 1)) == CONST_INT))\n+\t      pbi->mem_set_list = alloc_EXPR_LIST (0, mem, pbi->mem_set_list);\n+\t  }\n+    }\n+\n   return pbi;\n }\n \n@@ -3772,26 +3798,6 @@ propagate_block (bb, live, local_set, flags)\n \t\t\t\t { REG_BASIC_BLOCK (i) = REG_BLOCK_GLOBAL; });\n     }\n \n-  /* If this block has no successors, any stores to the frame that aren't\n-     used later in the block are dead.  So make a pass over the block\n-     recording any such that are made and show them dead at the end.  We do\n-     a very conservative and simple job here.  */\n-  if (bb->succ != 0 && bb->succ->succ_next == 0\n-      && bb->succ->dest == EXIT_BLOCK_PTR)\n-    for (insn = bb->end; insn != bb->head; insn = PREV_INSN (insn))\n-      if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SET\n-\t  && GET_CODE (SET_DEST (PATTERN (insn))) == MEM)\n-\t{\n-\t  rtx mem = SET_DEST (PATTERN (insn));\n-\n-\t  if ((GET_CODE (XEXP (mem, 0)) == REG\n-\t       && REGNO (XEXP (mem, 0)) == FRAME_POINTER_REGNUM)\n-\t      || (GET_CODE (XEXP (mem, 0)) == PLUS\n-\t\t  && GET_CODE (XEXP (XEXP (mem, 0), 0)) == REG\n-\t\t  && REGNO (XEXP (XEXP (mem, 0), 0)) == FRAME_POINTER_REGNUM))\n-\t    pbi->mem_set_list = alloc_EXPR_LIST (0, mem, pbi->mem_set_list);\n-\t}\n-\n   /* Scan the block an insn at a time from end to beginning.  */\n \n   for (insn = bb->end; ; insn = prev)"}]}