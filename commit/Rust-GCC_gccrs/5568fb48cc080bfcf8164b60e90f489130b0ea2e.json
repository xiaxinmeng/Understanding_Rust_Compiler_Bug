{"sha": "5568fb48cc080bfcf8164b60e90f489130b0ea2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2OGZiNDhjYzA4MGJmY2Y4MTY0YjYwZTkwZjQ4OTEzMGIwZWEyZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-02-08T23:48:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-02-08T23:48:32Z"}, "message": "flow.c (tidy_fallthru_edges): Split out from ...\n\n        * flow.c (tidy_fallthru_edges): Split out from ...\n        (delete_unreachable_blocks): ... here.\n        (find_basic_blocks): Use it.\n\nFrom-SVN: r31857", "tree": {"sha": "db7d0793127b534b06938e68ece7da9c05f9fd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db7d0793127b534b06938e68ece7da9c05f9fd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5568fb48cc080bfcf8164b60e90f489130b0ea2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5568fb48cc080bfcf8164b60e90f489130b0ea2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5568fb48cc080bfcf8164b60e90f489130b0ea2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5568fb48cc080bfcf8164b60e90f489130b0ea2e/comments", "author": null, "committer": null, "parents": [{"sha": "f5a500108ae0df4eedbe6212e16ae237aec51e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a500108ae0df4eedbe6212e16ae237aec51e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a500108ae0df4eedbe6212e16ae237aec51e93"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "5020e42b4e3ac38ea2acb35e18a169f9fd7889ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5568fb48cc080bfcf8164b60e90f489130b0ea2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5568fb48cc080bfcf8164b60e90f489130b0ea2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5568fb48cc080bfcf8164b60e90f489130b0ea2e", "patch": "@@ -1,3 +1,9 @@\n+2000-02-08  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (tidy_fallthru_edges): Split out from ...\n+\t(delete_unreachable_blocks): ... here.\n+\t(find_basic_blocks): Use it.\n+\n Tue Feb  8 15:51:50 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* stmt.c (expand_decl): Do set RTX_UNCHANGING_P for TREE_READONLY."}, {"sha": "c6efbd7640103ddd6d41e07dcdb84feb8d4107d2", "filename": "gcc/flow.c", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5568fb48cc080bfcf8164b60e90f489130b0ea2e/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5568fb48cc080bfcf8164b60e90f489130b0ea2e/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5568fb48cc080bfcf8164b60e90f489130b0ea2e", "patch": "@@ -309,7 +309,7 @@ static void merge_blocks_nomove\t\tPARAMS ((basic_block, basic_block));\n static int merge_blocks\t\t\tPARAMS ((edge,basic_block,basic_block));\n static void try_merge_blocks\t\tPARAMS ((void));\n static void tidy_fallthru_edge\t\tPARAMS ((edge,basic_block,basic_block));\n-\n+static void tidy_fallthru_edges\t\tPARAMS ((void));\n static int verify_wide_reg_1\t\tPARAMS ((rtx *, void *));\n static void verify_wide_reg\t\tPARAMS ((int, rtx, rtx));\n static void verify_local_live_at_start\tPARAMS ((regset, basic_block));\n@@ -422,6 +422,11 @@ find_basic_blocks (f, nregs, file)\n   /* Discover the edges of our cfg.  */\n   record_active_eh_regions (f);\n   make_edges (label_value_list);\n+\n+  /* Do very simple cleanup now, for the benefit of code that runs between\n+     here and cleanup_cfg, e.g. thread_prologue_and_epilogue_insns.  */\n+  tidy_fallthru_edges ();\n+\n   mark_critical_edges ();\n \n #ifdef ENABLE_CHECKING\n@@ -1746,36 +1751,7 @@ delete_unreachable_blocks ()\n \tdeleted_handler |= delete_block (b);\n     }\n \n-  /* Fix up edges that now fall through, or rather should now fall through\n-     but previously required a jump around now deleted blocks.  Simplify\n-     the search by only examining blocks numerically adjacent, since this\n-     is how find_basic_blocks created them.  */\n-\n-  for (i = 1; i < n_basic_blocks; ++i)\n-    {\n-      basic_block b = BASIC_BLOCK (i - 1);\n-      basic_block c = BASIC_BLOCK (i);\n-      edge s;\n-\n-      /* We care about simple conditional or unconditional jumps with\n-\t a single successor.\n-\n-\t If we had a conditional branch to the next instruction when\n-\t find_basic_blocks was called, then there will only be one\n-\t out edge for the block which ended with the conditional\n-\t branch (since we do not create duplicate edges).\n-\n-\t Furthermore, the edge will be marked as a fallthru because we\n-\t merge the flags for the duplicate edges.  So we do not want to\n-\t check that the edge is not a FALLTHRU edge.  */\n-      if ((s = b->succ) != NULL\n-\t  && s->succ_next == NULL\n-\t  && s->dest == c\n-\t  /* If the jump insn has side effects, we can't tidy the edge.  */\n-\t  && (GET_CODE (b->end) != JUMP_INSN\n-\t      || onlyjump_p (b->end)))\n-\ttidy_fallthru_edge (s, b, c);\n-    }\n+  tidy_fallthru_edges ();\n \n   /* If we deleted an exception handler, we may have EH region begin/end\n      blocks to remove as well. */\n@@ -2365,9 +2341,8 @@ try_merge_blocks ()\n     }\n }\n \n-/* The given edge should potentially a fallthru edge.  If that is in\n-   fact true, delete the unconditional jump and barriers that are in\n-   the way.  */\n+/* The given edge should potentially be a fallthru edge.  If that is in\n+   fact true, delete the jump and barriers that are in the way.  */\n \n static void\n tidy_fallthru_edge (e, b, c)\n@@ -2419,6 +2394,43 @@ tidy_fallthru_edge (e, b, c)\n   e->flags |= EDGE_FALLTHRU;\n }\n \n+/* Fix up edges that now fall through, or rather should now fall through\n+   but previously required a jump around now deleted blocks.  Simplify\n+   the search by only examining blocks numerically adjacent, since this\n+   is how find_basic_blocks created them.  */\n+\n+static void\n+tidy_fallthru_edges ()\n+{\n+  int i;\n+\n+  for (i = 1; i < n_basic_blocks; ++i)\n+    {\n+      basic_block b = BASIC_BLOCK (i - 1);\n+      basic_block c = BASIC_BLOCK (i);\n+      edge s;\n+\n+      /* We care about simple conditional or unconditional jumps with\n+\t a single successor.\n+\n+\t If we had a conditional branch to the next instruction when\n+\t find_basic_blocks was called, then there will only be one\n+\t out edge for the block which ended with the conditional\n+\t branch (since we do not create duplicate edges).\n+\n+\t Furthermore, the edge will be marked as a fallthru because we\n+\t merge the flags for the duplicate edges.  So we do not want to\n+\t check that the edge is not a FALLTHRU edge.  */\n+      if ((s = b->succ) != NULL\n+\t  && s->succ_next == NULL\n+\t  && s->dest == c\n+\t  /* If the jump insn has side effects, we can't tidy the edge.  */\n+\t  && (GET_CODE (b->end) != JUMP_INSN\n+\t      || onlyjump_p (b->end)))\n+\ttidy_fallthru_edge (s, b, c);\n+    }\n+}\n+\n /* Discover and record the loop depth at the head of each basic block.  */\n \n void"}]}