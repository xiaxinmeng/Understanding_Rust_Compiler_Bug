{"sha": "f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1YzdiZDE0MGQ3ZTlkOTljNWMwMjIwMjg0ZmVmMWNjNWU0MjcxMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-08-13T04:27:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-13T04:27:08Z"}, "message": "i386.md (ix86_expand_vector_set): Use vec_merge path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n\n\t* config/i386/i386.md (ix86_expand_vector_set) <case E_V2SImode>:\n\tUse vec_merge path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n\t<case E_V8QImode>: Ditto.\n\t* config/i386/mmx.md (*mmx_pinsrd): New insn pattern.\n\t(*mmx_pinsrb): Ditto.\n\nFrom-SVN: r274328", "tree": {"sha": "bedce6d57c62efadaba46739617998fa4a2c7eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bedce6d57c62efadaba46739617998fa4a2c7eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ad33ad7b8aea14a2357170516e20fa5734f48ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad33ad7b8aea14a2357170516e20fa5734f48ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad33ad7b8aea14a2357170516e20fa5734f48ce"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "082ebe71613b6c23e0f9e73cdac09d59bd3667a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "patch": "@@ -1,3 +1,11 @@\n+2019-08-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ix86_expand_vector_set) <case E_V2SImode>:\n+\tUse vec_merge path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n+\t<case E_V8QImode>: Ditto.\n+\t* config/i386/mmx.md (*mmx_pinsrd): New insn pattern.\n+\t(*mmx_pinsrb): Ditto.\n+\n 2019-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/83250"}, {"sha": "718de73395c4a4709fe87a516f165749164be0e8", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "patch": "@@ -14243,8 +14243,13 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \n   switch (mode)\n     {\n-    case E_V2SFmode:\n     case E_V2SImode:\n+      use_vec_merge = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n+      if (use_vec_merge)\n+\tbreak;\n+      /* FALLTHRU */\n+\n+    case E_V2SFmode:\n       if (mmx_ok)\n \t{\n \t  tmp = gen_reg_rtx (GET_MODE_INNER (mode));\n@@ -14409,6 +14414,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       break;\n \n     case E_V8QImode:\n+      use_vec_merge = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n       break;\n \n     case E_V32QImode:"}, {"sha": "5ae27c85fe5c0da0be87346b9dd746106290b749", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15c7bd140d7e9d99c5c0220284fef1cc5e42710/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f15c7bd140d7e9d99c5c0220284fef1cc5e42710", "patch": "@@ -1394,6 +1394,36 @@\n    (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"*mmx_pinsrd\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=x,Yv\")\n+        (vec_merge:V2SI\n+          (vec_duplicate:V2SI\n+            (match_operand:SI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V2SI 1 \"register_operand\" \"0,Yv\")\n+          (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V2SImode))\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  switch (which_alternative)\n+    {\n+    case 1:\n+      return \"vpinsrd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    case 0:\n+      return \"pinsrd\\t{%3, %2, %0|%0, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_pinsrw\"\n   [(set (match_operand:V4HI 0 \"register_operand\")\n         (vec_merge:V4HI\n@@ -1444,6 +1474,42 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"*mmx_pinsrb\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=x,Yv\")\n+        (vec_merge:V8QI\n+          (vec_duplicate:V8QI\n+            (match_operand:QI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V8QI 1 \"register_operand\" \"0,Yv\")\n+          (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V8QImode))\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  switch (which_alternative)\n+    {\n+    case 1:\n+      if (MEM_P (operands[2]))\n+\treturn \"vpinsrb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      else\n+\treturn \"vpinsrb\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+    case 0:\n+      if (MEM_P (operands[2]))\n+\treturn \"pinsrb\\t{%3, %2, %0|%0, %2, %3}\";\n+      else\n+\treturn \"pinsrb\\t{%3, %k2, %0|%0, %k2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"mmx_pextrw\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n         (zero_extend:SI"}]}