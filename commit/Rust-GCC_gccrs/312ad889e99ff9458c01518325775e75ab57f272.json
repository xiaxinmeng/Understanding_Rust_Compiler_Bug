{"sha": "312ad889e99ff9458c01518325775e75ab57f272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyYWQ4ODllOTlmZjk0NThjMDE1MTgzMjU3NzVlNzVhYjU3ZjI3Mg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-24T22:39:17Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-26T08:03:55Z"}, "message": "d: Fix no NRVO when returning an array of a non-POD struct\n\nTREE_ADDRESSABLE was not propagated from the RECORD_TYPE to the ARRAY_TYPE, so\nNRVO code generation was not being triggered.\n\ngcc/d/ChangeLog:\n\n\tPR d/96157\n\t* d-codegen.cc (d_build_call): Handle TREE_ADDRESSABLE static arrays.\n\t* types.cc (make_array_type): Propagate TREE_ADDRESSABLE from base\n\ttype to static array.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/96157\n\t* gdc.dg/pr96157a.d: New test.\n\t* gdc.dg/pr96157b.d: New test.", "tree": {"sha": "035ab56a65f80de27ca138bf322c70888fec1108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/035ab56a65f80de27ca138bf322c70888fec1108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312ad889e99ff9458c01518325775e75ab57f272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312ad889e99ff9458c01518325775e75ab57f272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312ad889e99ff9458c01518325775e75ab57f272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312ad889e99ff9458c01518325775e75ab57f272/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eefc04663f325a1c76fae4d0a54284e71a57eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefc04663f325a1c76fae4d0a54284e71a57eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eefc04663f325a1c76fae4d0a54284e71a57eb1"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "6a7ecc50645c018ba18d2c63222014341220f016", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=312ad889e99ff9458c01518325775e75ab57f272", "patch": "@@ -1987,11 +1987,11 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n \t      targ = build2 (COMPOUND_EXPR, TREE_TYPE (t), targ, t);\n \t    }\n \n-\t  /* Parameter is a struct passed by invisible reference.  */\n+\t  /* Parameter is a struct or array passed by invisible reference.  */\n \t  if (TREE_ADDRESSABLE (TREE_TYPE (targ)))\n \t    {\n \t      Type *t = arg->type->toBasetype ();\n-\t      StructDeclaration *sd = t->isTypeStruct ()->sym;\n+\t      StructDeclaration *sd = t->baseElemOf ()->isTypeStruct ()->sym;\n \n \t      /* Nested structs also have ADDRESSABLE set, but if the type has\n \t\t neither a copy constructor nor a destructor available, then we"}, {"sha": "994d0b9195b41e9a27e06004f12db72d6e7ccd70", "filename": "gcc/d/types.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=312ad889e99ff9458c01518325775e75ab57f272", "patch": "@@ -186,8 +186,11 @@ make_array_type (Type *type, unsigned HOST_WIDE_INT size)\n       return t;\n     }\n \n-  return build_array_type (build_ctype (type),\n-\t\t\t   build_index_type (size_int (size - 1)));\n+  tree t = build_array_type (build_ctype (type),\n+\t\t\t     build_index_type (size_int (size - 1)));\n+  /* Propagate TREE_ADDRESSABLE to the static array type.  */\n+  TREE_ADDRESSABLE (t) = TREE_ADDRESSABLE (TREE_TYPE (t));\n+  return t;\n }\n \n /* Builds a record type whose name is NAME.  NFIELDS is the number of fields,"}, {"sha": "11df19ea700cf462105e616a041631afac1e2d4a", "filename": "gcc/testsuite/gdc.dg/pr96157a.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157a.d?ref=312ad889e99ff9458c01518325775e75ab57f272", "patch": "@@ -0,0 +1,24 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96157\n+// { dg-do run { target native } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S\n+{\n+    @disable this(this); // triggers nrvo\n+    int v;\n+}\n+\n+__gshared void* p;\n+\n+S[1000] foo() nothrow\n+{\n+    typeof(return) d;\n+    p = &d;\n+    return d;\n+}\n+\n+void main()\n+{\n+    auto d = foo();\n+    assert(p == &d);\n+}"}, {"sha": "40a7e0ba787d1093fe537b9a1e968ad61fba9b9d", "filename": "gcc/testsuite/gdc.dg/pr96157b.d", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312ad889e99ff9458c01518325775e75ab57f272/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96157b.d?ref=312ad889e99ff9458c01518325775e75ab57f272", "patch": "@@ -0,0 +1,46 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96157\n+// { dg-options \"-fno-moduleinfo -fno-rtti\" }\n+// { dg-do compile }\n+\n+int[] testYearsBC;\n+\n+struct FilterResult\n+{\n+    int[] input;\n+    bool primed;\n+\n+    this(int[] r)\n+    {\n+        this.input = r;\n+    }\n+\n+    int front()\n+    {\n+        return input[0];\n+    }\n+};\n+\n+FilterResult filter(int[] range)\n+{\n+    return FilterResult(range);\n+}\n+\n+int[] chain(int[] rs)\n+{\n+    return rs;\n+}\n+\n+struct SysTime\n+{\n+    this(int);\n+}\n+\n+void test()\n+{\n+    while (1)\n+    {\n+        FilterResult val = filter(chain(testYearsBC));\n+        int year = val.front();\n+        SysTime(0);\n+    }\n+}"}]}