{"sha": "e0ca27c53103d532b51a61679b5d4c13d35a09d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjYTI3YzUzMTAzZDUzMmI1MWE2MTY3OWI1ZDRjMTNkMzVhMDlkMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-30T16:34:26Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-30T16:34:26Z"}, "message": "Handle BUILT_IN_GOMP_PARALLEL in ipa-pta\n\n2015-11-30  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/46032\n\t* tree-ssa-structalias.c (find_func_aliases_for_call_arg): New function,\n\tfactored out of ...\n\t(find_func_aliases_for_call): ... here.\n\t(find_func_aliases_for_builtin_call, find_func_clobbers): Handle\n\tBUILT_IN_GOMP_PARALLEL.\n\t(ipa_pta_execute): Same.  Handle node->parallelized_function as a local\n\tfunction.\n\n\t* gcc.dg/pr46032.c: New test.\n\n\t* testsuite/libgomp.c/pr46032.c: New test.\n\nFrom-SVN: r231076", "tree": {"sha": "fe36cf7c64756119ed297892e4582c3f0d2973bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe36cf7c64756119ed297892e4582c3f0d2973bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ca27c53103d532b51a61679b5d4c13d35a09d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ca27c53103d532b51a61679b5d4c13d35a09d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ca27c53103d532b51a61679b5d4c13d35a09d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ca27c53103d532b51a61679b5d4c13d35a09d0/comments", "author": null, "committer": null, "parents": [{"sha": "7b90c63a28e85014656ecab28459dcd23c7d2457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b90c63a28e85014656ecab28459dcd23c7d2457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b90c63a28e85014656ecab28459dcd23c7d2457"}], "stats": {"total": 183, "additions": 170, "deletions": 13}, "files": [{"sha": "229aa77f89b4c472a6b55b3aaf37340d4e77410f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -1,3 +1,14 @@\n+2015-11-30  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/46032\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call_arg): New function,\n+\tfactored out of ...\n+\t(find_func_aliases_for_call): ... here.\n+\t(find_func_aliases_for_builtin_call, find_func_clobbers): Handle\n+\tBUILT_IN_GOMP_PARALLEL.\n+\t(ipa_pta_execute): Same.  Handle node->parallelized_function as a local\n+\tfunction.\n+\n 2015-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/68501"}, {"sha": "c9283adc88f6b00196df219da88d9dae64c83cc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -1,3 +1,8 @@\n+2015-11-30  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/46032\n+\t* gcc.dg/pr46032.c: New test.\n+\n 2015-11-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68592"}, {"sha": "b91190e871fd08f9521ee6070b03e27244bf6d0a", "filename": "gcc/testsuite/gcc.dg/pr46032.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46032.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46032.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46032.c?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -ftree-vectorize -std=c99 -fipa-pta -fdump-tree-vect-all\" } */\n+\n+extern void abort (void);\n+\n+#define nEvents 1000\n+\n+static void __attribute__((noinline, noclone, optimize(\"-fno-tree-vectorize\")))\n+init (unsigned *results, unsigned *pData)\n+{\n+  unsigned int i;\n+  for (i = 0; i < nEvents; ++i)\n+    pData[i] = i % 3;\n+}\n+\n+static void __attribute__((noinline, noclone, optimize(\"-fno-tree-vectorize\")))\n+check (unsigned *results)\n+{\n+  unsigned sum = 0;\n+  for (int idx = 0; idx < (int)nEvents; idx++)\n+    sum += results[idx];\n+\n+  if (sum != 1998)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned results[nEvents];\n+  unsigned pData[nEvents];\n+  unsigned coeff = 2;\n+\n+  init (&results[0], &pData[0]);\n+\n+#pragma omp parallel for\n+  for (int idx = 0; idx < (int)nEvents; idx++)\n+    results[idx] = coeff * pData[idx];\n+\n+  check (&results[0]);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"note: vectorized 1 loop\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"versioning for alias required\" \"vect\" } } */\n+"}, {"sha": "7f4a8ad60e486e0f41975901ca7e446e26021c32", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -4139,6 +4139,24 @@ get_fi_for_callee (gcall *call)\n   return get_vi_for_tree (fn);\n }\n \n+/* Create constraints for assigning call argument ARG to the incoming parameter\n+   INDEX of function FI.  */\n+\n+static void\n+find_func_aliases_for_call_arg (varinfo_t fi, unsigned index, tree arg)\n+{\n+  struct constraint_expr lhs;\n+  lhs = get_function_part_constraint (fi, fi_parm_base + index);\n+\n+  auto_vec<ce_s, 2> rhsc;\n+  get_constraint_for_rhs (arg, &rhsc);\n+\n+  unsigned j;\n+  struct constraint_expr *rhsp;\n+  FOR_EACH_VEC_ELT (rhsc, j, rhsp)\n+    process_constraint (new_constraint (lhs, *rhsp));\n+}\n+\n /* Create constraints for the builtin call T.  Return true if the call\n    was handled, otherwise false.  */\n \n@@ -4488,6 +4506,25 @@ find_func_aliases_for_builtin_call (struct function *fn, gcall *t)\n \t    }\n \t  return true;\n \t}\n+      case BUILT_IN_GOMP_PARALLEL:\n+\t{\n+\t  /* Handle __builtin_GOMP_parallel (fn, data, num_threads, flags) as\n+\t     fn (data).  */\n+\t  if (in_ipa_mode)\n+\t    {\n+\t      tree fnarg = gimple_call_arg (t, 0);\n+\t      gcc_assert (TREE_CODE (fnarg) == ADDR_EXPR);\n+\t      tree fndecl = TREE_OPERAND (fnarg, 0);\n+\t      tree arg = gimple_call_arg (t, 1);\n+\t      gcc_assert (TREE_CODE (arg) == ADDR_EXPR);\n+\n+\t      varinfo_t fi = get_vi_for_tree (fndecl);\n+\t      find_func_aliases_for_call_arg (fi, 0, arg);\n+\t      return true;\n+\t    }\n+\t  /* Else fallthru to generic call handling.  */\n+\t  break;\n+\t}\n       /* printf-style functions may have hooks to set pointers to\n \t point to somewhere into the generated string.  Leave them\n \t for a later exercise...  */\n@@ -4546,18 +4583,8 @@ find_func_aliases_for_call (struct function *fn, gcall *t)\n \t parameters of the function.  */\n       for (j = 0; j < gimple_call_num_args (t); j++)\n \t{\n-\t  struct constraint_expr lhs ;\n-\t  struct constraint_expr *rhsp;\n \t  tree arg = gimple_call_arg (t, j);\n-\n-\t  get_constraint_for_rhs (arg, &rhsc);\n-\t  lhs = get_function_part_constraint (fi, fi_parm_base + j);\n-\t  while (rhsc.length () != 0)\n-\t    {\n-\t      rhsp = &rhsc.last ();\n-\t      process_constraint (new_constraint (lhs, *rhsp));\n-\t      rhsc.pop ();\n-\t    }\n+\t  find_func_aliases_for_call_arg (fi, j, arg);\n \t}\n \n       /* If we are returning a value, assign it to the result.  */\n@@ -5036,6 +5063,8 @@ find_func_clobbers (struct function *fn, gimple *origt)\n \t  case BUILT_IN_VA_START:\n \t  case BUILT_IN_VA_END:\n \t    return;\n+\t  case BUILT_IN_GOMP_PARALLEL:\n+\t    return;\n \t  /* printf-style functions may have hooks to set pointers to\n \t     point to somewhere into the generated string.  Leave them\n \t     for a later exercise...  */\n@@ -7345,14 +7374,26 @@ ipa_pta_execute (void)\n \n       gcc_assert (!node->clone_of);\n \n+      /* When parallelizing a code region, we split the region off into a\n+\t separate function, to be run by several threads in parallel.  So for a\n+\t function foo, we split off a region into a function\n+\t foo._0 (void *foodata), and replace the region with some variant of a\n+\t function call run_on_threads (&foo._0, data).  The '&foo._0' sets the\n+\t address_taken bit for function foo._0, which would make it non-local.\n+\t But for the purpose of ipa-pta, we can regard the run_on_threads call\n+\t as a local call foo._0 (data),  so we ignore address_taken on nodes\n+\t with parallelized_function set.  */\n+      bool node_address_taken = (node->address_taken\n+\t\t\t\t && !node->parallelized_function);\n+\n       /* For externally visible or attribute used annotated functions use\n \t local constraints for their arguments.\n \t For local functions we see all callers and thus do not need initial\n \t constraints for parameters.  */\n       bool nonlocal_p = (node->used_from_other_partition\n \t\t\t || node->externally_visible\n \t\t\t || node->force_output\n-\t\t\t || node->address_taken);\n+\t\t\t || node_address_taken);\n \n       vi = create_function_info_for (node->decl,\n \t\t\t\t     alias_get_name (node->decl), false,\n@@ -7504,7 +7545,11 @@ ipa_pta_execute (void)\n \t\tcontinue;\n \n \t      /* Handle direct calls to functions with body.  */\n-\t      decl = gimple_call_fndecl (stmt);\n+\t      if (gimple_call_builtin_p (stmt, BUILT_IN_GOMP_PARALLEL))\n+\t\tdecl = TREE_OPERAND (gimple_call_arg (stmt, 0), 0);\n+\t      else\n+\t\tdecl = gimple_call_fndecl (stmt);\n+\n \t      if (decl\n \t\t  && (fi = lookup_vi_for_tree (decl))\n \t\t  && fi->is_fn_info)"}, {"sha": "ce2828a830176ec1364ccb2f821e69e145e1845d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -1,3 +1,8 @@\n+2015-11-30  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/46032\n+\t* testsuite/libgomp.c/pr46032.c: New test.\n+\n 2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/68579"}, {"sha": "2178aa7c9bb50b1301bd2d88e76b62717ae9628a", "filename": "libgomp/testsuite/libgomp.c/pr46032.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ca27c53103d532b51a61679b5d4c13d35a09d0/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ca27c53103d532b51a61679b5d4c13d35a09d0/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032.c?ref=e0ca27c53103d532b51a61679b5d4c13d35a09d0", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -std=c99 -fipa-pta\" } */\n+\n+\n+extern void abort (void);\n+\n+#define nEvents 1000\n+\n+static void __attribute__((noinline, noclone, optimize(\"-fno-tree-vectorize\")))\n+init (unsigned *results, unsigned *pData)\n+{\n+  unsigned int i;\n+  for (i = 0; i < nEvents; ++i)\n+    pData[i] = i % 3;\n+}\n+\n+static void __attribute__((noinline, noclone, optimize(\"-fno-tree-vectorize\")))\n+check (unsigned *results)\n+{\n+  unsigned sum = 0;\n+  for (int idx = 0; idx < (int)nEvents; idx++)\n+    sum += results[idx];\n+\n+  if (sum != 1998)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned results[nEvents];\n+  unsigned pData[nEvents];\n+  unsigned coeff = 2;\n+\n+  init (&results[0], &pData[0]);\n+\n+#pragma omp parallel for\n+  for (int idx = 0; idx < (int)nEvents; idx++)\n+    results[idx] = coeff * pData[idx];\n+\n+  check (&results[0]);\n+\n+  return 0;\n+}"}]}