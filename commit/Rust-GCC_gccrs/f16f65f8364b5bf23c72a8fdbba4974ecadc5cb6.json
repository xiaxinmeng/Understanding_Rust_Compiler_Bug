{"sha": "f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2ZjY1ZjgzNjRiNWJmMjNjNzJhOGZkYmJhNDk3NGVjYWRjNWNiNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-12T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-12T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "e3e76fed50a540c9691f2183a68a57a7f0361304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3e76fed50a540c9691f2183a68a57a7f0361304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/comments", "author": null, "committer": null, "parents": [{"sha": "23691ddd3aa3ffe55892b2bff54f9a15a89de2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23691ddd3aa3ffe55892b2bff54f9a15a89de2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23691ddd3aa3ffe55892b2bff54f9a15a89de2b4"}], "stats": {"total": 278, "additions": 277, "deletions": 1}, "files": [{"sha": "06d8b4f565d09b79c091604b3f5dcc1d29774fa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,104 @@\n+2021-06-12  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* auto-profile.c (read_profile): fix a typo in an error string\n+\n+2021-06-11  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* tree-pretty-print.h (dump_omp_clauses): Add 'bool = true'\n+\tdefault argument.\n+\t* tree-pretty-print.c (dump_omp_clauses): Update.\n+\t(dump_generic_node) <OMP_CLAUSE>: Use it.\n+\n+2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/101016\n+\t* config/arm/arm_mve.h (__arm_vld1q): Change __ARM_mve_coerce(p0,\n+\tint8_t const *) to __ARM_mve_coerce1(p0, int8_t *) in the argument for\n+\tthe polymorphic variants matching code.\n+\t(__arm_vld1q_z): Likewise.\n+\t(__arm_vld2q): Likewise.\n+\t(__arm_vld4q): Likewise.\n+\t(__arm_vldrbq_gather_offset): Likewise.\n+\t(__arm_vldrbq_gather_offset_z): Likewise.\n+\n+2021-06-11  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/96392\n+\t* fold-const.h (tree_expr_maybe_real_minus_zero_p): Fix prototype.\n+\n+2021-06-11  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/96392\n+\t* fold-const.c (fold_real_zero_addition_p): Take both arguments\n+\tof the addition or subtraction, not just the zero.  Use this\n+\tother argument in tests for signaling NaNs and signed zeros.\n+\t(tree_expr_maybe_real_minus_zero_p): New predicate.\n+\t* fold-const.h (fold_real_zero_addition_p): Update prototype.\n+\t(tree_expr_maybe_real_minus_zero_p): New function prototype.\n+\t* match.pd: Update calls to fold_real_zero_addition_p.\n+\tReplace HONOR_NANS with tree_expr_maybe_nan_p.\n+\tReplace HONOR_SIGNED_ZEROS with tree_expr_maybe_real_minus_zero_p.\n+\tReplace HONOR_SNANS with tree_expr_maybe_signaling_nan_p.\n+\t* tree-ssa-reassoc.c (eliminate_using_constants): Update\n+\tcall to fold_real_zero_addition_p.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101025\n+\t* tree-ssa-loop-im.c (sm_seq_valid_bb): Make sure to process\n+\tall refs that require dependence checking.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101028\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): When SLP\n+\treassoc discovery fails fatally, mark appropriate lanes\n+\tin matches[] so.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101026\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Make sure we\n+\thave a representative for the associated chain nodes.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/101008\n+\t* simplify-rtx.c (relational_result): New function.\n+\t(simplify_logical_relational_operation,\n+\tsimplify_relational_operation): Use it.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101007\n+\t* config/i386/sse.md (*vec_concat<mode>_0_1): Require TARGET_SSE2.\n+\n+2021-06-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101021\n+\t* config/i386/i386-expand.c (expand_vec_perm_pshufb): Return\n+\tfalse if the permutation can be implemented with constant\n+\tpermutation instruction in wider mode.\n+\t(canonicalize_vector_int_perm): Move above expand_vec_perm_pshufb.\n+\tHandle V8QImode and V4HImode.\n+\n+2021-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/100788\n+\t* common.opt: Add new option.\n+\t* coverage.c (coverage_begin_function): Emit warning instead on\n+\tthe internal compiler error.\n+\t* doc/invoke.texi: Document the option.\n+\t* toplev.c (process_options): Enable it by default.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101009\n+\t* tree-data-ref.c (build_classic_dist_vector_1): Make sure\n+\tto set *init_b to true when we encounter a constant equal\n+\tindex pair.\n+\t(compute_affine_dependence): Also dump the actual DR_REF.\n+\n 2021-06-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/100984"}, {"sha": "b0825d04bef09b9e7462a6d58f5a3bbe47baea69", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1 +1 @@\n-20210611\n+20210612"}, {"sha": "da4f536985172196c76a98ef56b0315c8069bab3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,8 @@\n+2021-06-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (worklist::key_t::cmp): Move sort by call_string to\n+\tbefore SCC.\n+\n 2021-06-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (region_model::get_lvalue_1): Make const."}, {"sha": "12ab9cd549104fb520fd46bb1b60cac6025815bc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,9 @@\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100974\n+\t* c-cppbuiltin.c (c_cpp_builtins): Predefine __cpp_if_consteval for\n+\t-std=c++2b for P1938R3 consteval if support.\n+\n 2021-06-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100879"}, {"sha": "183dcf30d9cbdfd00bffbb6c7cae8987bb546631", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,41 @@\n+2021-06-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 1227\n+\tPR c++/96560\n+\t* pt.c (tsubst_arg_types): Rearrange so that we substitute into\n+\tTYPE_ARG_TYPES in forward order while short circuiting\n+\tappropriately.  Adjust formatting.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100974\n+\t* cp-tree.h (struct saved_scope): Add consteval_if_p\n+\tmember.  Formatting fix for the discarded_stmt comment.\n+\t(in_consteval_if_p, IF_STMT_CONSTEVAL_P): Define.\n+\t* parser.c (cp_parser_lambda_expression): Temporarily disable\n+\tin_consteval_if_p when parsing lambda body.\n+\t(cp_parser_selection_statement): Parse consteval if.\n+\t* decl.c (struct named_label_entry): Add in_consteval_if member.\n+\t(level_for_consteval_if): New function.\n+\t(poplevel_named_label_1, check_previous_goto_1, check_goto): Handle\n+\tconsteval if.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Clarify in comment\n+\twhy CP_BUILT_IN_IS_CONSTANT_EVALUATED needs to *non_constant_p\n+\tfor !ctx->manifestly_const_eval.\n+\t(cxx_eval_conditional_expression): For IF_STMT_CONSTEVAL_P evaluate\n+\tcondition as if it was __builtin_is_constant_evaluated call.\n+\t(potential_constant_expression_1): For IF_STMT_CONSTEVAL_P always\n+\trecurse on both branches.\n+\t* cp-gimplify.c (genericize_if_stmt): Genericize IF_STMT_CONSTEVAL_P\n+\tas the else branch.\n+\t* pt.c (tsubst_expr) <case IF_STMT>: Copy IF_STMT_CONSTEVAL_P.\n+\tTemporarily set in_consteval_if_p when recursing on\n+\tIF_STMT_CONSTEVAL_P then branch.\n+\t(tsubst_lambda_expr): Temporarily disable\n+\tin_consteval_if_p when instantiating lambda body.\n+\t* call.c (immediate_invocation_p): Return false when\n+\tin_consteval_if_p.\n+\n 2021-06-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/100995"}, {"sha": "eb17034d909e8dd45eb1a04d2476eebdac62e6fa", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,8 @@\n+2021-06-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100999\n+\t* dmd/MERGE: Merge upstream dmd 7a3808254.\n+\n 2021-06-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/100967"}, {"sha": "7798dddd4419c6377012006dccaefd7f6644ed8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,98 @@\n+2021-06-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/check-builtin-vec_rlnm-runnable.c\n+\t(dg-require-effective-target): Change target to p9vector_hw.\n+\n+2021-06-11  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.dg/gomp/simd-clones-2.c: Enhance.\n+\n+2021-06-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 1227\n+\tPR c++/96560\n+\t* g++.dg/template/sfinae-dr1227.C: New test.\n+\n+2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/101016\n+\t* gcc.target/arm/mve/intrinsics/pr101016.c: New test.\n+\n+2021-06-11  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/96392\n+\t* gcc.dg/pr96392.c: New test.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101025\n+\t* gcc.dg/torture/pr101025.c: New testcase.\n+\n+2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/99939\n+\t* gcc.target/arm/cmse/cmse-18.c: Add separate scan-assembler\n+\tdirectives check for target is v8.1-m.main+mve or not before\n+\tcomparing the assembly output.\n+\t* gcc.target/arm/cmse/cmse-20.c: New test.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100974\n+\t* g++.dg/cpp23/consteval-if1.C: New test.\n+\t* g++.dg/cpp23/consteval-if2.C: New test.\n+\t* g++.dg/cpp23/consteval-if3.C: New test.\n+\t* g++.dg/cpp23/consteval-if4.C: New test.\n+\t* g++.dg/cpp23/consteval-if5.C: New test.\n+\t* g++.dg/cpp23/consteval-if6.C: New test.\n+\t* g++.dg/cpp23/consteval-if7.C: New test.\n+\t* g++.dg/cpp23/consteval-if8.C: New test.\n+\t* g++.dg/cpp23/consteval-if9.C: New test.\n+\t* g++.dg/cpp23/consteval-if10.C: New test.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Add __cpp_if_consteval tests.\n+\n+2021-06-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c: Update\n+\texpected number of enodes after the loop.\n+\t* gcc.dg/analyzer/paths-8.c: New test.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101028\n+\t* gcc.dg/pr101028.c: New testcase.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101026\n+\t* gfortran.dg/pr101026.f: New testcase.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/101008\n+\t* gcc.dg/pr101008.c: New test.\n+\n+2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101007\n+\t* gcc.target/i386/sse-pr101007.c: New test.\n+\n+2021-06-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101021\n+\t* gcc.target/i386/pr101021-1.c: New test.\n+\t* gcc.target/i386/pr101021-2.c: Ditto.\n+\n+2021-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/100788\n+\t* gcc.dg/pr100788.c: New test.\n+\n+2021-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101009\n+\t* gcc.dg/torture/pr101009.c: New testcase.\n+\n 2021-06-11  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* gcc.target/powerpc/p9-fpcvt-3.c: New test."}, {"sha": "dc52ff5783d4e473262d9e2c101a8ec32d5dd841", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,11 @@\n+2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/99939\n+\t* config/arm/cmse_nonsecure_call.S: Add\t__ARM_FEATURE_MVE\n+\tmacro.\n+\t* config/arm/t-arm: To link cmse.o and cmse_nonsecure_call.o\n+\ton passing -mcmse option.\n+\n 2021-06-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/quad-float128.h: Guard all uses of [U]TItype_ppc by"}, {"sha": "60a67a9c4cb5188a38f632a2630e1a48319cc3f7", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,8 @@\n+2021-06-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100999\n+\t* src/MERGE: Merge upstream phobos 55bb17543.\n+\n 2021-05-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* src/std/process.d (unittest): Remove tmpname on exit."}, {"sha": "dfcf9bf364627dd6e0a44155e659270a3af63053", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f16f65f8364b5bf23c72a8fdbba4974ecadc5cb6", "patch": "@@ -1,3 +1,16 @@\n+2021-06-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (operator==, operator<=>): Use new\n+\t_S_compare function.\n+\t(path::_S_compare): New function to call path::compare in a\n+\tcontext where path::iterator is complete.\n+\t* include/experimental/bits/fs_path.h (operator<, operator==):\n+\tDefine after path::iterator is complete.\n+\t* testsuite/27_io/filesystem/path/native/conv_c++23.cc: New\n+\ttest.\n+\t* testsuite/experimental/filesystem/path/native/conv_c++23.cc:\n+\tNew test.\n+\n 2021-06-09  Thomas Rodgers  <rodgert@appliantology.com>\n \n \t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Guard"}]}