{"sha": "f71b4cd44483310677019f5d47cabbdeedfcfc75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxYjRjZDQ0NDgzMzEwNjc3MDE5ZjVkNDdjYWJiZGVlZGZjZmM3NQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:24:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:24:26Z"}, "message": "[multiple changes]\n\n2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Replace_Actual_Discriminants): Replace a discriminant\n\tfor GNATprove.\n\t(Resolve_Entry): Clean up predicate\n\n2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Constituent): Raise Unrecoverable_Error rather\n\tthan Program_Error because U_E is more in line with respect to the\n\tintended behavior.\n\n2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Resolve_Aspect_Expressions): The expression for aspect\n\tStorage_Size does not freeze, and thus can include references to\n\tdeferred constants.\n\n2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Potential_Renaming): Do not process a\n\treference when it appears within a pragma of no significance to SPARK.\n\t(In_Insignificant_Pragma): New routine.\n\t* sem_prag.ads: Add new table Pragma_Significant_In_SPARK.\n\n2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Associations, case N_Formal_Package): If the\n\tactual is a renaming, indicate that it is the renamed package that must\n\tbe frozen before the instantiation.\n\n2017-09-25  Yannick Moy  <moy@adacore.com>\n\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typo in description\n\tof dimensionality system in GNAT UG.\n\t* gnat_ugn.texi: Regenerate.\n\n2017-09-25  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb: Call Check_Safe_Pointers from the frontend in\n\tGNATprove_Mode when switch -gnatdF used.\n\n2017-09-25  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* adabkend.adb (Call_Back_End): Reset Current_Error_Node when starting\n\tthe backend.\n\nFrom-SVN: r253140", "tree": {"sha": "cab437b38002c96a86377eab7c6057ea7acb7267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab437b38002c96a86377eab7c6057ea7acb7267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71b4cd44483310677019f5d47cabbdeedfcfc75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71b4cd44483310677019f5d47cabbdeedfcfc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71b4cd44483310677019f5d47cabbdeedfcfc75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71b4cd44483310677019f5d47cabbdeedfcfc75/comments", "author": null, "committer": null, "parents": [{"sha": "e98cd75fc3322a267173010e07bb11c6bdb674d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98cd75fc3322a267173010e07bb11c6bdb674d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98cd75fc3322a267173010e07bb11c6bdb674d1"}], "stats": {"total": 370, "additions": 275, "deletions": 95}, "files": [{"sha": "3780b1db1b23f79398a774f98a1decc0b4299fdc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -1,3 +1,50 @@\n+2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Replace_Actual_Discriminants): Replace a discriminant\n+\tfor GNATprove.\n+\t(Resolve_Entry): Clean up predicate\n+\n+2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Constituent): Raise Unrecoverable_Error rather\n+\tthan Program_Error because U_E is more in line with respect to the\n+\tintended behavior.\n+\n+2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Resolve_Aspect_Expressions): The expression for aspect\n+\tStorage_Size does not freeze, and thus can include references to\n+\tdeferred constants.\n+\n+2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Potential_Renaming): Do not process a\n+\treference when it appears within a pragma of no significance to SPARK.\n+\t(In_Insignificant_Pragma): New routine.\n+\t* sem_prag.ads: Add new table Pragma_Significant_In_SPARK.\n+\n+2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Associations, case N_Formal_Package): If the\n+\tactual is a renaming, indicate that it is the renamed package that must\n+\tbe frozen before the instantiation.\n+\n+2017-09-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typo in description\n+\tof dimensionality system in GNAT UG.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2017-09-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb: Call Check_Safe_Pointers from the frontend in\n+\tGNATprove_Mode when switch -gnatdF used.\n+\n+2017-09-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* adabkend.adb (Call_Back_End): Reset Current_Error_Node when starting\n+\tthe backend.\n+\n 2017-09-25  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_imgv.adb (Expand_Image_Attribute): Disable the optimized"}, {"sha": "3c84a483a58d1e86b79b99923080acce2dc6d904", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2016, AdaCore                     --\n+--                     Copyright (C) 2001-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -22,6 +22,7 @@\n \n --  This is the version of the Back_End package for back ends written in Ada\n \n+with Atree;    use Atree;\n with Debug;\n with Lib;\n with Opt;      use Opt;\n@@ -56,6 +57,13 @@ package body Adabkend is\n          Write_Eol;\n       end if;\n \n+      --  Frontend leaves the Current_Error_Node at a location that is\n+      --  meaningless and confusing when emitting bugboxes from the backed. By\n+      --  resetting it here we default to \"No source file position information\n+      --  available\" message on backend crashes.\n+\n+      Current_Error_Node := Empty;\n+\n       Driver (Lib.Cunit (Types.Main_Unit));\n    end Call_Back_End;\n "}, {"sha": "68117ae2c49499371bf0fdc9805b59a24fb0d03f", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -3513,7 +3513,7 @@ However, incorrect assignments such as:\n   .. code-block:: ada\n \n        Distance := 5.0;\n-       Distance := 5.0 * kg:\n+       Distance := 5.0 * kg;\n \n are rejected with the following diagnoses:\n \n@@ -3556,7 +3556,7 @@ aspect.\n   .. index:: Dimension Vector (for a dimensioned subtype)\n   .. index:: Dimension aspect\n   .. index:: Dimension_System aspect\n-  \n+\n The ``Dimension`` aspect of a dimensioned subtype ``S`` defines a mapping\n from the base type's Unit_Names to integer (or, more generally, rational)\n values. This mapping is the *dimension vector* (also referred to as the\n@@ -3575,8 +3575,8 @@ means that the unit is not used. For example:\n       end;\n \n Here ``DV(Acc)`` = ``DV(Acceleration)`` =\n-``(Meter=>1, Kilogram=>0, Second => -2, Ampere=>0, Kelvin=>0, Mole=>0, Candela => 0)``.\n-Symbolically, we can express this as ``Meter / Second**2``. \n+``(Meter=>1, Kilogram=>0, Second=>-2, Ampere=>0, Kelvin=>0, Mole=>0, Candela=>0)``.\n+Symbolically, we can express this as ``Meter / Second**2``.\n \n The dimension vector of an arithmetic expression is synthesized from the\n dimension vectors of its components, with compile-time dimensionality checks\n@@ -3593,7 +3593,7 @@ mathematical definitions for the vector operations that are used:\n * :samp:`DV({op expr})`, where *op* is a unary operator, is :samp:`DV({expr})`\n \n * :samp:`DV({expr1 op expr2})` where *op* is \"+\" or \"-\" is :samp:`DV({expr1})`\n-  provided that :samp:`DV({expr1})` = :samp:`DV({expr2})`. \n+  provided that :samp:`DV({expr1})` = :samp:`DV({expr2})`.\n   If this condition is not met then the construct is illegal.\n \n * :samp:`DV({expr1} * {expr2})` is :samp:`DV({expr1})` + :samp:`DV({expr2})`,\n@@ -3624,7 +3624,7 @@ is equivalent to\n        acc-10.0 > 0.0\n \n and is thus illegal. Analogously a conditional expression\n-requires the same dimension vector for each branch.  \n+requires the same dimension vector for each branch.\n \n The dimension vector of a type conversion :samp:`T({expr})` is defined\n as follows, based on the nature of ``T``:\n@@ -3648,7 +3648,7 @@ as follows, based on the nature of ``T``:\n   Thus, if *expr* is of a dimensioned subtype of ``T``, the conversion may\n   be regarded as a \"view conversion\" that preserves dimensionality.\n \n-  This rule makes it possible to write generic code that can be instantiated \n+  This rule makes it possible to write generic code that can be instantiated\n   with compatible dimensioned subtypes.  The generic unit will contain\n   conversions that will consequently be present in instantiations, but\n   conversions to the base type will preserve dimensionality and make it\n@@ -3663,10 +3663,10 @@ as follows, based on the nature of ``T``:\n The dimension vector for a type qualification :samp:`T'({expr})` is the same\n as for the type conversion :samp:`T({expr})`.\n \n-An assignment statement \n+An assignment statement\n \n    .. code-block:: ada\n-   \n+\n          Source := Target;\n \n requires ``DV(Source)`` = ``DV(Target)``, and analogously for parameter"}, {"sha": "78777075d8bc2dda021b9f77da8eb6a4803c3b76", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -268,14 +268,14 @@ package body Exp_Imgv is\n       Expr  : constant Node_Id    := Relocate_Node (First (Exprs));\n       Pref  : constant Node_Id    := Prefix (N);\n \n-      function Is_User_Defined_Enumeration_Type\n-        (Typ : Entity_Id) return Boolean;\n-      --  Return True if Typ is a user-defined enumeration type\n-\n       procedure Expand_User_Defined_Enumeration_Image;\n       --  Expand attribute 'Image in user-defined enumeration types, avoiding\n       --  string copy.\n \n+      function Is_User_Defined_Enumeration_Type\n+        (Typ : Entity_Id) return Boolean;\n+      --  Return True if Typ is a user-defined enumeration type\n+\n       -------------------------------------------\n       -- Expand_User_Defined_Enumeration_Image --\n       -------------------------------------------\n@@ -307,7 +307,7 @@ package body Exp_Imgv is\n              Object_Definition   =>\n                New_Occurrence_Of (Standard_Natural, Loc),\n              Constant_Present    => True,\n-             Expression =>\n+             Expression          =>\n                Convert_To (Standard_Natural,\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Pos,\n@@ -323,7 +323,7 @@ package body Exp_Imgv is\n              Object_Definition   =>\n                New_Occurrence_Of (Standard_Natural, Loc),\n              Constant_Present    => True,\n-             Expression =>\n+             Expression          =>\n                Convert_To (Standard_Natural,\n                  Make_Indexed_Component (Loc,\n                    Prefix      =>\n@@ -347,7 +347,7 @@ package body Exp_Imgv is\n                 Object_Definition   =>\n                   New_Occurrence_Of (Standard_Natural, Loc),\n                 Constant_Present    => True,\n-                Expression =>\n+                Expression          =>\n                   Convert_To (Standard_Natural,\n                     Make_Indexed_Component (Loc,\n                       Prefix      =>\n@@ -412,8 +412,8 @@ package body Exp_Imgv is\n          Insert_Actions (N, Ins_List, Suppress => All_Checks);\n \n          Rewrite (N,\n-           Unchecked_Convert_To (S1_Id,\n-             New_Occurrence_Of (P4_Id, Loc)));\n+           Unchecked_Convert_To (S1_Id, New_Occurrence_Of (P4_Id, Loc)));\n+\n          Analyze_And_Resolve (N, Standard_String);\n       end Expand_User_Defined_Enumeration_Image;\n "}, {"sha": "d4b9436959fae1c50524d30055f1ce835ca96211", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -36,6 +36,7 @@ with Nmake;    use Nmake;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n@@ -368,11 +369,46 @@ package body Exp_SPARK is\n    -------------------------------------\n \n    procedure Expand_SPARK_Potential_Renaming (N : Node_Id) is\n+      function In_Insignificant_Pragma (Nod : Node_Id) return Boolean;\n+      --  Determine whether arbitrary node Nod appears within a significant\n+      --  pragma for SPARK.\n+\n+      -----------------------------\n+      -- In_Insignificant_Pragma --\n+      -----------------------------\n+\n+      function In_Insignificant_Pragma (Nod : Node_Id) return Boolean is\n+         Par : Node_Id;\n+\n+      begin\n+         --  Climb the parent chain looking for an enclosing pragma\n+\n+         Par := Nod;\n+         while Present (Par) loop\n+            if Nkind (Par) = N_Pragma then\n+               return not Pragma_Significant_In_SPARK (Get_Pragma_Id (Par));\n+\n+            --  Prevent the search from going too far\n+\n+            elsif Is_Body_Or_Package_Declaration (Par) then\n+               exit;\n+            end if;\n+\n+            Par := Parent (Par);\n+         end loop;\n+\n+         return False;\n+      end In_Insignificant_Pragma;\n+\n+      --  Local variables\n+\n       Loc    : constant Source_Ptr := Sloc (N);\n       Obj_Id : constant Entity_Id  := Entity (N);\n       Typ    : constant Entity_Id  := Etype (N);\n       Ren    : Node_Id;\n \n+   --  Start of processing for Expand_SPARK_Potential_Renaming\n+\n    begin\n       --  Replace a reference to a renaming with the actual renamed object\n \n@@ -381,12 +417,20 @@ package body Exp_SPARK is\n \n          if Present (Ren) then\n \n+            --  Do not process a reference when it appears within a pragma of\n+            --  no significance to SPARK. It is assumed that the replacement\n+            --  will violate the semantics of the pragma and cause a spurious\n+            --  error.\n+\n+            if In_Insignificant_Pragma (N) then\n+               return;\n+\n             --  Instantiations and inlining of subprograms employ \"prologues\"\n             --  which map actual to formal parameters by means of renamings.\n             --  Replace a reference to a formal by the corresponding actual\n             --  parameter.\n \n-            if Nkind (Ren) in N_Entity then\n+            elsif Nkind (Ren) in N_Entity then\n                Rewrite (N, New_Occurrence_Of (Ren, Loc));\n \n             --  Otherwise the renamed object denotes a name"}, {"sha": "c3377da48345b42100f4a738fecd7a33cdd417fa", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -23,36 +23,36 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Atree;    use Atree;\n-with Back_End; use Back_End;\n+with Atree;     use Atree;\n+with Back_End;  use Back_End;\n with Checks;\n with Comperr;\n-with Csets;    use Csets;\n-with Debug;    use Debug;\n+with Csets;     use Csets;\n+with Debug;     use Debug;\n with Elists;\n-with Errout;   use Errout;\n+with Errout;    use Errout;\n with Exp_CG;\n with Fmap;\n-with Fname;    use Fname;\n-with Fname.UF; use Fname.UF;\n+with Fname;     use Fname;\n+with Fname.UF;  use Fname.UF;\n with Frontend;\n-with Ghost;    use Ghost;\n-with Gnatvsn;  use Gnatvsn;\n+with Ghost;     use Ghost;\n+with Gnatvsn;   use Gnatvsn;\n with Inline;\n-with Lib;      use Lib;\n-with Lib.Writ; use Lib.Writ;\n+with Lib;       use Lib;\n+with Lib.Writ;  use Lib.Writ;\n with Lib.Xref;\n-with Namet;    use Namet;\n+with Namet;     use Namet;\n with Nlists;\n-with Opt;      use Opt;\n-with Osint;    use Osint;\n-with Osint.C;  use Osint.C;\n-with Output;   use Output;\n+with Opt;       use Opt;\n+with Osint;     use Osint;\n+with Osint.C;   use Osint.C;\n+with Output;    use Output;\n with Par_SCO;\n with Prepcomp;\n-with Repinfo;  use Repinfo;\n+with Repinfo;   use Repinfo;\n with Restrict;\n-with Rident;   use Rident;\n+with Rident;    use Rident;\n with Rtsfind;\n with SCOs;\n with Sem;\n@@ -64,23 +64,23 @@ with Sem_Eval;\n with Sem_SPARK; use Sem_SPARK;\n with Sem_Type;\n with Set_Targ;\n-with Sinfo;    use Sinfo;\n-with Sinput.L; use Sinput.L;\n-with Snames;   use Snames;\n-with Sprint;   use Sprint;\n+with Sinfo;     use Sinfo;\n+with Sinput.L;  use Sinput.L;\n+with Snames;    use Snames;\n+with Sprint;    use Sprint;\n with Stringt;\n-with Stylesw;  use Stylesw;\n-with Targparm; use Targparm;\n+with Stylesw;   use Stylesw;\n+with Targparm;  use Targparm;\n with Tbuild;\n with Tree_Gen;\n-with Treepr;   use Treepr;\n+with Treepr;    use Treepr;\n with Ttypes;\n-with Types;    use Types;\n-with Uintp;    use Uintp;\n-with Uname;    use Uname;\n+with Types;     use Types;\n+with Uintp;     use Uintp;\n+with Uname;     use Uname;\n with Urealp;\n with Usage;\n-with Validsw;  use Validsw;\n+with Validsw;   use Validsw;\n \n with System.Assertions;\n with System.OS_Lib;"}, {"sha": "22d6f1469ec85924ebe636b2d7a2d9249492e11b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Sep 13, 2017\n+GNAT User's Guide for Native Platforms , Sep 25, 2017\n \n AdaCore\n \n@@ -22773,7 +22773,7 @@ However, incorrect assignments such as:\n \n @example\n Distance := 5.0;\n-Distance := 5.0 * kg:\n+Distance := 5.0 * kg;\n @end example\n @end quotation\n \n@@ -22854,7 +22854,7 @@ end;\n @end quotation\n \n Here @code{DV(Acc)} = @code{DV(Acceleration)} =\n-@code{(Meter=>1, Kilogram=>0, Second => -2, Ampere=>0, Kelvin=>0, Mole=>0, Candela => 0)}.\n+@code{(Meter=>1, Kilogram=>0, Second=>-2, Ampere=>0, Kelvin=>0, Mole=>0, Candela=>0)}.\n Symbolically, we can express this as @code{Meter / Second**2}.\n \n The dimension vector of an arithmetic expression is synthesized from the"}, {"sha": "1dfcf39dd81a04451deb3f404dfe420b2c1ac6d1", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -191,6 +191,10 @@ package body System.Task_Primitives.Operations is\n    --  Note well: If this function or related code is modified, it should be\n    --  tested by hand, because automated testing doesn't exercise it.\n \n+   -------------------------\n+   -- Get_Ceiling_Support --\n+   -------------------------\n+\n    function Get_Ceiling_Support return Boolean is\n       Ceiling_Support : Boolean := False;\n    begin\n@@ -271,22 +275,40 @@ package body System.Task_Primitives.Operations is\n    ----------------------------------\n \n    function Compute_Base_Monotonic_Clock return Duration is\n-      TS_Bef0, TS_Mon0, TS_Aft0 : aliased timespec;\n-      TS_Bef,  TS_Mon,  TS_Aft  : aliased timespec;\n-      Bef, Mon, Aft             : Duration;\n-      Res_B, Res_M, Res_A       : Interfaces.C.int;\n+      Aft     : Duration;\n+      Bef     : Duration;\n+      Mon     : Duration;\n+      Res_A   : Interfaces.C.int;\n+      Res_B   : Interfaces.C.int;\n+      Res_M   : Interfaces.C.int;\n+      TS_Aft  : aliased timespec;\n+      TS_Aft0 : aliased timespec;\n+      TS_Bef  : aliased timespec;\n+      TS_Bef0 : aliased timespec;\n+      TS_Mon  : aliased timespec;\n+      TS_Mon0 : aliased timespec;\n+\n    begin\n-      Res_B := clock_gettime\n-       (clock_id => OSC.CLOCK_REALTIME, tp => TS_Bef0'Unchecked_Access);\n+      Res_B :=\n+        clock_gettime\n+          (clock_id => OSC.CLOCK_REALTIME,\n+           tp       => TS_Bef0'Unchecked_Access);\n       pragma Assert (Res_B = 0);\n-      Res_M := clock_gettime\n-       (clock_id => OSC.CLOCK_RT_Ada, tp => TS_Mon0'Unchecked_Access);\n+\n+      Res_M :=\n+        clock_gettime\n+          (clock_id => OSC.CLOCK_RT_Ada,\n+           tp       => TS_Mon0'Unchecked_Access);\n       pragma Assert (Res_M = 0);\n-      Res_A := clock_gettime\n-       (clock_id => OSC.CLOCK_REALTIME, tp => TS_Aft0'Unchecked_Access);\n+\n+      Res_A :=\n+        clock_gettime\n+          (clock_id => OSC.CLOCK_REALTIME,\n+           tp       => TS_Aft0'Unchecked_Access);\n       pragma Assert (Res_A = 0);\n \n       for I in 1 .. 10 loop\n+\n          --  Guard against a leap second that will cause CLOCK_REALTIME to jump\n          --  backwards. In the extrenmely unlikely event we call clock_gettime\n          --  before and after the jump the epoch, the result will be off\n@@ -296,25 +318,36 @@ package body System.Task_Primitives.Operations is\n          --  Also try to calculate the most accurate epoch by taking the\n          --  minimum difference of 10 tries.\n \n-         Res_B := clock_gettime\n-          (clock_id => OSC.CLOCK_REALTIME, tp => TS_Bef'Unchecked_Access);\n+         Res_B :=\n+           clock_gettime\n+             (clock_id => OSC.CLOCK_REALTIME,\n+              tp       => TS_Bef'Unchecked_Access);\n          pragma Assert (Res_B = 0);\n-         Res_M := clock_gettime\n-          (clock_id => OSC.CLOCK_RT_Ada, tp => TS_Mon'Unchecked_Access);\n+\n+         Res_M :=\n+           clock_gettime\n+             (clock_id => OSC.CLOCK_RT_Ada,\n+              tp       => TS_Mon'Unchecked_Access);\n          pragma Assert (Res_M = 0);\n-         Res_A := clock_gettime\n-          (clock_id => OSC.CLOCK_REALTIME, tp => TS_Aft'Unchecked_Access);\n+\n+         Res_A :=\n+           clock_gettime\n+             (clock_id => OSC.CLOCK_REALTIME,\n+              tp       => TS_Aft'Unchecked_Access);\n          pragma Assert (Res_A = 0);\n \n-         if (TS_Bef0.tv_sec /= TS_Aft0.tv_sec and then\n-             TS_Bef.tv_sec  = TS_Aft.tv_sec)\n-            --  The calls to clock_gettime before the loop were no good\n-            or else\n-            (TS_Bef0.tv_sec = TS_Aft0.tv_sec and then\n-             TS_Bef.tv_sec  = TS_Aft.tv_sec and then\n-            (TS_Aft.tv_nsec  - TS_Bef.tv_nsec <\n-             TS_Aft0.tv_nsec - TS_Bef0.tv_nsec))\n-            --  The most recent calls to clock_gettime were better\n+         --  The calls to clock_gettime before the loop were no good\n+\n+         if (TS_Bef0.tv_sec /= TS_Aft0.tv_sec\n+               and then TS_Bef.tv_sec  = TS_Aft.tv_sec)\n+\n+           --  The most recent calls to clock_gettime were better\n+\n+           or else\n+             (TS_Bef0.tv_sec = TS_Aft0.tv_sec\n+                and then TS_Bef.tv_sec = TS_Aft.tv_sec\n+                and then (TS_Aft.tv_nsec - TS_Bef.tv_nsec\n+                            < TS_Aft0.tv_nsec - TS_Bef0.tv_nsec))\n          then\n             TS_Bef0 := TS_Bef;\n             TS_Aft0 := TS_Aft;\n@@ -326,8 +359,9 @@ package body System.Task_Primitives.Operations is\n       Mon := To_Duration (TS_Mon0);\n       Aft := To_Duration (TS_Aft0);\n \n-      return Bef / 2 + Aft / 2 - Mon;\n       --  Distribute the division, to avoid potential type overflow someday\n+\n+      return Bef / 2 + Aft / 2 - Mon;\n    end Compute_Base_Monotonic_Clock;\n \n    --------------"}, {"sha": "44dc80100ad54169f11e902fa4addb2125505d12", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -1980,8 +1980,22 @@ package body Sem_Ch12 is\n \n                            if Needs_Freezing then\n                               Check_Generic_Parent;\n-                              Set_Has_Delayed_Freeze (Actual);\n-                              Append_Elmt (Actual, Actuals_To_Freeze);\n+\n+                              --  If the actual is a renaming of a proper\n+                              --  instance of the formal package, indicate\n+                              --  that it is the instance that must be frozen.\n+\n+                              if Nkind (Parent (Actual)) =\n+                                N_Package_Renaming_Declaration\n+                              then\n+                                 Set_Has_Delayed_Freeze\n+                                   (Renamed_Entity (Actual));\n+                                 Append_Elmt\n+                                  (Renamed_Entity (Actual), Actuals_To_Freeze);\n+                              else\n+                                 Set_Has_Delayed_Freeze (Actual);\n+                                 Append_Elmt (Actual, Actuals_To_Freeze);\n+                              end if;\n                            end if;\n                         end if;\n                      end Explicit_Freeze_Check;"}, {"sha": "04ed408f45c1845855b6fddea39d9beddab046be", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -12912,6 +12912,14 @@ package body Sem_Ch13 is\n                      Set_Must_Not_Freeze (Expr);\n                      Preanalyze_Spec_Expression (Expr, E);\n \n+                  --  Ditto for Storage_Size. Any other aspects that carry\n+                  --  expressions that should not freeze ??? This is only\n+                  --  relevant to the misuse of deferred constants.\n+\n+                  when Aspect_Storage_Size =>\n+                     Set_Must_Not_Freeze (Expr);\n+                     Preanalyze_Spec_Expression (Expr, Any_Integer);\n+\n                   when others =>\n                      if Present (Expr) then\n                         case Aspect_Argument (A_Id) is"}, {"sha": "59bbdb5f0ab69adc80f67f892f8d00a03b9b3bf7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -13219,7 +13219,7 @@ package body Sem_Prag is\n                      Analyze (N);\n                      raise Pragma_Exit;\n \n-                     --  No other possibilities\n+                  --  No other possibilities\n \n                   when others =>\n                      raise Program_Error;\n@@ -27448,7 +27448,7 @@ package body Sem_Prag is\n                         --  Stop the compilation, as this leads to a multitude\n                         --  of misleading cascaded errors.\n \n-                        raise Program_Error;\n+                        raise Unrecoverable_Error;\n                      end if;\n \n                   --  The constituent is a valid state or object"}, {"sha": "33dbe488ae12f32a099da2b3ffd0ae4ecedb5489", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -175,6 +175,25 @@ package Sem_Prag is\n       Pragma_Warnings        => True,\n       others                 => False);\n \n+   --  The following table lists all pragmas which are significant in SPARK and\n+   --  as a result get translated into verification conditions. The table is an\n+   --  amalgamation of the pragmas listed in SPARK RM 16.1 and internally added\n+   --  entries.\n+\n+   Pragma_Significant_In_SPARK : constant array (Pragma_Id) of Boolean :=\n+     (Pragma_All_Calls_Remote              => False,\n+      Pragma_Asynchronous                  => False,\n+      Pragma_Default_Storage_Pool          => False,\n+      Pragma_Discard_Names                 => False,\n+      Pragma_Dispatching_Domain            => False,\n+      Pragma_Priority_Specific_Dispatching => False,\n+      Pragma_Remote_Call_Interface         => False,\n+      Pragma_Remote_Types                  => False,\n+      Pragma_Shared_Passive                => False,\n+      Pragma_Task_Dispatching_Policy       => False,\n+      Pragma_Warnings                      => False,\n+      others                               => True);\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "5087fe62f67c519edc806ab2e5e9da21c4024403", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71b4cd44483310677019f5d47cabbdeedfcfc75/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f71b4cd44483310677019f5d47cabbdeedfcfc75", "patch": "@@ -1837,7 +1837,17 @@ package body Sem_Res is\n    --  Start of processing for Replace_Actual_Discriminants\n \n    begin\n-      if not Expander_Active then\n+      if Expander_Active then\n+         null;\n+\n+      --  Allow the replacement of concurrent discriminants in GNATprove even\n+      --  though this is a light expansion activity. Note that generic units\n+      --  are not modified.\n+\n+      elsif GNATprove_Mode and not Inside_A_Generic then\n+         null;\n+\n+      else\n          return;\n       end if;\n \n@@ -1848,9 +1858,7 @@ package body Sem_Res is\n          Tsk := Prefix (Prefix (Name (N)));\n       end if;\n \n-      if No (Tsk) then\n-         return;\n-      else\n+      if Present (Tsk) then\n          Replace_Discrs (Default);\n       end if;\n    end Replace_Actual_Discriminants;\n@@ -3561,19 +3569,20 @@ package body Sem_Res is\n             Rewrite (Actval,\n               Make_Raise_Constraint_Error (Loc,\n                 Reason => CE_Range_Check_Failed));\n+\n             Set_Raises_Constraint_Error (Actval);\n             Set_Etype (Actval, Etype (F));\n          end if;\n \n          Assoc :=\n            Make_Parameter_Association (Loc,\n              Explicit_Actual_Parameter => Actval,\n-             Selector_Name => Make_Identifier (Loc, Chars (F)));\n+             Selector_Name             => Make_Identifier (Loc, Chars (F)));\n \n          --  Case of insertion is first named actual\n \n-         if No (Prev) or else\n-            Nkind (Parent (Prev)) /= N_Parameter_Association\n+         if No (Prev)\n+           or else Nkind (Parent (Prev)) /= N_Parameter_Association\n          then\n             Set_Next_Named_Actual (Assoc, First_Named_Actual (N));\n             Set_First_Named_Actual (N, Actval);\n@@ -7474,13 +7483,10 @@ package body Sem_Res is\n          Index := First (Expressions (Entry_Name));\n          Resolve (Index, Entry_Index_Type (Nam));\n \n-         --  Generate a reference for the index entity when the index is not a\n-         --  literal.\n+         --  Generate a reference for the index when it denotes an entity\n \n-         if Nkind (Index) in N_Has_Entity\n-           and then Nkind (Entity (Index)) in N_Entity\n-         then\n-            Generate_Reference (Entity (Index), Nam, ' ');\n+         if Is_Entity_Name (Index) then\n+            Generate_Reference (Entity (Index), Nam);\n          end if;\n \n          --  Up to this point the expression could have been the actual in a"}]}