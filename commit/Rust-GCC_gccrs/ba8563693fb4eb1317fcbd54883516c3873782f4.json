{"sha": "ba8563693fb4eb1317fcbd54883516c3873782f4", "node_id": "C_kwDOANBUbNoAKGJhODU2MzY5M2ZiNGViMTMxN2ZjYmQ1NDg4MzUxNmMzODczNzgyZjQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-18T10:04:21Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-18T10:04:21Z"}, "message": "OpenMP: Add Fortran support for inoutset depend-kind\n\nFortran additions to the C/C++ + ME/libgomp commit\nr13-556-g2c16eb3157f86ae561468c540caf8eb326106b5f\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (enum gfc_omp_depend_op): Add OMP_DEPEND_INOUTSET.\n\t(gfc_omp_clauses): Enlarge ENUM_BITFIELD.\n\t* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle\n\t'inoutset' depend modifier.\n\t* openmp.cc (gfc_match_omp_clauses, gfc_match_omp_depobj): Likewise.\n\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n\tLikewise.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (OpenMP 5.1): Set 'inoutset' to Y.\n\t(OpenMP Context Selectors): Add missing comma.\n\t* testsuite/libgomp.fortran/depend-5.f90: Add inoutset test.\n\t* testsuite/libgomp.fortran/depend-6.f90: Likewise.\n\t* testsuite/libgomp.fortran/depend-7.f90: Likewise.\n\t* testsuite/libgomp.fortran/depend-inoutset-1.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/all-memory-1.f90: Add inoutset test.\n\t* gfortran.dg/gomp/all-memory-2.f90: Likewise.\n\t* gfortran.dg/gomp/depobj-1.f90: Likewise.\n\t* gfortran.dg/gomp/depobj-2.f90: Likewise.", "tree": {"sha": "15a3b0d62a6b9cb46f3b46cdea95740d26754f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a3b0d62a6b9cb46f3b46cdea95740d26754f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba8563693fb4eb1317fcbd54883516c3873782f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8563693fb4eb1317fcbd54883516c3873782f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8563693fb4eb1317fcbd54883516c3873782f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8563693fb4eb1317fcbd54883516c3873782f4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f068ad0f2f1d65349ac564178cddbe9aec39f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f068ad0f2f1d65349ac564178cddbe9aec39f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f068ad0f2f1d65349ac564178cddbe9aec39f3a"}], "stats": {"total": 234, "additions": 221, "deletions": 13}, "files": [{"sha": "4e8986bd599d3f72fced9970b32d5d4806d5ff70", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -1379,6 +1379,7 @@ show_omp_namelist (int list_type, gfc_omp_namelist *n)\n \t  case OMP_DEPEND_IN: fputs (\"in:\", dumpfile); break;\n \t  case OMP_DEPEND_OUT: fputs (\"out:\", dumpfile); break;\n \t  case OMP_DEPEND_INOUT: fputs (\"inout:\", dumpfile); break;\n+\t  case OMP_DEPEND_INOUTSET: fputs (\"inoutset:\", dumpfile); break;\n \t  case OMP_DEPEND_DEPOBJ: fputs (\"depobj:\", dumpfile); break;\n \t  case OMP_DEPEND_MUTEXINOUTSET:\n \t    fputs (\"mutexinoutset:\", dumpfile);\n@@ -1898,6 +1899,7 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n \tcase OMP_DEPEND_IN: deptype = \"IN\"; break;\n \tcase OMP_DEPEND_OUT: deptype = \"OUT\"; break;\n \tcase OMP_DEPEND_INOUT: deptype = \"INOUT\"; break;\n+\tcase OMP_DEPEND_INOUTSET: deptype = \"INOUTSET\"; break;\n \tcase OMP_DEPEND_MUTEXINOUTSET: deptype = \"MUTEXINOUTSET\"; break;\n \tdefault: gcc_unreachable ();\n \t}"}, {"sha": "5d970bc1df018a78bcb84ddfc134b6b5a31bee71", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -1271,6 +1271,7 @@ enum gfc_omp_depend_op\n   OMP_DEPEND_IN,\n   OMP_DEPEND_OUT,\n   OMP_DEPEND_INOUT,\n+  OMP_DEPEND_INOUTSET,\n   OMP_DEPEND_MUTEXINOUTSET,\n   OMP_DEPEND_DEPOBJ,\n   OMP_DEPEND_SINK_FIRST,\n@@ -1540,7 +1541,7 @@ typedef struct gfc_omp_clauses\n   ENUM_BITFIELD (gfc_omp_memorder) fail:3;\n   ENUM_BITFIELD (gfc_omp_cancel_kind) cancel:3;\n   ENUM_BITFIELD (gfc_omp_proc_bind_kind) proc_bind:3;\n-  ENUM_BITFIELD (gfc_omp_depend_op) depobj_update:3;\n+  ENUM_BITFIELD (gfc_omp_depend_op) depobj_update:4;\n   ENUM_BITFIELD (gfc_omp_bind_type) bind:2;\n   ENUM_BITFIELD (gfc_omp_at_type) at:2;\n   ENUM_BITFIELD (gfc_omp_severity_type) severity:2;"}, {"sha": "63fd4dd2767ad64b15a3473b8d166cb2dfbb0205", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -1915,7 +1915,9 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\tbreak;\n \t      m = MATCH_YES;\n \t      gfc_omp_depend_op depend_op = OMP_DEPEND_OUT;\n-\t      if (gfc_match (\"inout\") == MATCH_YES)\n+\t      if (gfc_match (\"inoutset\") == MATCH_YES)\n+\t\tdepend_op = OMP_DEPEND_INOUTSET;\n+\t      else if (gfc_match (\"inout\") == MATCH_YES)\n \t\tdepend_op = OMP_DEPEND_INOUT;\n \t      else if (gfc_match (\"in\") == MATCH_YES)\n \t\tdepend_op = OMP_DEPEND_IN;\n@@ -3805,7 +3807,9 @@ gfc_match_omp_depobj (void)\n   if (gfc_match (\"update ( \") == MATCH_YES)\n     {\n       c = gfc_get_omp_clauses ();\n-      if (gfc_match (\"inout )\") == MATCH_YES)\n+      if (gfc_match (\"inoutset )\") == MATCH_YES)\n+\tc->depobj_update = OMP_DEPEND_INOUTSET;\n+      else if (gfc_match (\"inout )\") == MATCH_YES)\n \tc->depobj_update = OMP_DEPEND_INOUT;\n       else if (gfc_match (\"in )\") == MATCH_YES)\n \tc->depobj_update = OMP_DEPEND_IN;\n@@ -3815,8 +3819,8 @@ gfc_match_omp_depobj (void)\n \tc->depobj_update = OMP_DEPEND_MUTEXINOUTSET;\n       else\n \t{\n-\t  gfc_error (\"Expected IN, OUT, INOUT, MUTEXINOUTSET followed by \"\n-\t\t     \"%<)%> at %C\");\n+\t  gfc_error (\"Expected IN, OUT, INOUT, INOUTSET or MUTEXINOUTSET \"\n+\t\t     \"followed by %<)%> at %C\");\n \t  goto error;\n \t}\n     }"}, {"sha": "e1907a46d5a55a0445b7c15a8de91c68115ff6d7", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -2937,6 +2937,9 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  case OMP_DEPEND_INOUT:\n \t\t    OMP_CLAUSE_DEPEND_KIND (node) = OMP_CLAUSE_DEPEND_INOUT;\n \t\t    break;\n+\t\t  case OMP_DEPEND_INOUTSET:\n+\t\t    OMP_CLAUSE_DEPEND_KIND (node) = OMP_CLAUSE_DEPEND_INOUTSET;\n+\t\t    break;\n \t\t  case OMP_DEPEND_MUTEXINOUTSET:\n \t\t    OMP_CLAUSE_DEPEND_KIND (node)\n \t\t      = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;\n@@ -5593,6 +5596,7 @@ gfc_trans_omp_depobj (gfc_code *code)\n       case OMP_DEPEND_IN: k = GOMP_DEPEND_IN; break;\n       case OMP_DEPEND_OUT: k = GOMP_DEPEND_OUT; break;\n       case OMP_DEPEND_INOUT: k = GOMP_DEPEND_INOUT; break;\n+      case OMP_DEPEND_INOUTSET: k = GOMP_DEPEND_INOUTSET; break;\n       case OMP_DEPEND_MUTEXINOUTSET: k = GOMP_DEPEND_MUTEXINOUTSET; break;\n       default: gcc_unreachable ();\n       }"}, {"sha": "f8f34f0c887b94e13abf5f2fe74724509797c53b", "filename": "gcc/testsuite/gfortran.dg/gomp/all-memory-1.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -44,6 +44,9 @@ subroutine f6\n   !$omp target depend(mutexinoutset : omp_all_memory )  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n   ! !$omp end target\n \n+  !$omp target depend(inoutset : omp_all_memory )  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n+  ! !$omp end target\n+\n   !$omp target depend ( depobj : omp_all_memory)  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n   !!$omp end target\n "}, {"sha": "e7d51bef885f5ee8f63549507f011c6cab0b9d1b", "filename": "gcc/testsuite/gfortran.dg/gomp/all-memory-2.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -45,6 +45,9 @@ subroutine f6\n   !$omp target depend(mutexinoutset : omp_all_memory )\n   ! !$omp end target\n \n+  !$omp target depend(inoutset : omp_all_memory )\n+  ! !$omp end target\n+\n  !$omp target depend ( depobj : omp_all_memory)\n  !$omp end target\n "}, {"sha": "73734bbb07ea7a84b8f7689332ca24a20d5c2dfc", "filename": "gcc/testsuite/gfortran.dg/gomp/depobj-1.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-1.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -22,4 +22,7 @@ subroutine f1\n   !$omp task depend(mutexinoutset: a)\n   !$omp end task\n   !$omp depobj(depobj2) destroy\n+  !$omp depobj(depobj1) depend(inoutset: a)\n+  !$omp depobj(depobj1) update(mutexinoutset)\n+  !$omp depobj(depobj1) update(inoutset)\n end subroutine f1"}, {"sha": "cb67c3ce9d1b8f266d940618377ef76466def961", "filename": "gcc/testsuite/gfortran.dg/gomp/depobj-2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepobj-2.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -23,9 +23,9 @@ subroutine f1\n   !$omp depobj(depobj) depend(mutexinoutset : a)     ! OK\n   !$omp depobj(depobj) depend(source)                ! { dg-error \"DEPEND clause at .1. of OMP DEPOBJ construct shall not have dependence-type SOURCE, SINK or DEPOBJ\" }\n   !$omp depobj(depobj) depend(sink : i + 1)          ! { dg-error \"DEPEND clause at .1. of OMP DEPOBJ construct shall not have dependence-type SOURCE, SINK or DEPOBJ\" }\n-  !$omp depobj(depobj) update(source)                ! { dg-error \"Expected IN, OUT, INOUT, MUTEXINOUTSET followed by '\\\\)'\" }\n-  !$omp depobj(depobj) update(sink)                  ! { dg-error \"Expected IN, OUT, INOUT, MUTEXINOUTSET followed by '\\\\)'\" }\n-  !$omp depobj(depobj) update(depobj)                ! { dg-error \"Expected IN, OUT, INOUT, MUTEXINOUTSET followed by '\\\\)'\" }\n+  !$omp depobj(depobj) update(source)                ! { dg-error \"Expected IN, OUT, INOUT, INOUTSET or MUTEXINOUTSET followed by '\\\\)'\" }\n+  !$omp depobj(depobj) update(sink)                  ! { dg-error \"Expected IN, OUT, INOUT, INOUTSET or MUTEXINOUTSET followed by '\\\\)'\" }\n+  !$omp depobj(depobj) update(depobj)                ! { dg-error \"Expected IN, OUT, INOUT, INOUTSET or MUTEXINOUTSET followed by '\\\\)'\" }\n \n   ! Valid in OpenMP 5.1:\n   !$omp depobj(depobj5) depend(depobj: depobj3)      ! { dg-error \"DEPEND clause at .1. of OMP DEPOBJ construct shall not have dependence-type SOURCE, SINK or DEPOBJ\" }"}, {"sha": "c9d01cd8a5c5d7e0d024a9ec55a77a951991b571", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -306,7 +306,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{nowait} clause in @code{taskwait} directive @tab N @tab\n @item Extensions to the @code{atomic} directive @tab Y @tab\n @item @code{seq_cst} clause on a @code{flush} construct @tab Y @tab\n-@item @code{inoutset} argument to the @code{depend} clause @tab N @tab\n+@item @code{inoutset} argument to the @code{depend} clause @tab Y @tab\n @item @code{private} and @code{firstprivate} argument to @code{default}\n       clause in C and C++ @tab Y @tab\n @item @code{present} argument to @code{defaultmap} clause @tab N @tab\n@@ -4279,7 +4279,7 @@ The following sections present notes on the offload-target specifics.\n       @code{i586}, @code{i686}, @code{ia32}\n       @tab @code{host}\n       @tab See @code{-m...} flags in ``x86 Options'' (without @code{-m})\n-@item @code{amdgcn} @code{gcn}\n+@item @code{amdgcn}, @code{gcn}\n       @tab @code{gpu}\n       @tab See @code{-march=} in ``AMD GCN Options''\n @item @code{nvptx}"}, {"sha": "b812b6dab53f46087eced9ba003212349a6da9ab", "filename": "libgomp/testsuite/libgomp.fortran/depend-5.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -59,14 +59,20 @@ subroutine test (ifval)\n       call usleep (5000)\n       b(4) = 48\n     end block\n+    !$omp task shared(b) depend(inoutset: b(5))\n+    block\n+      call usleep (5000)\n+      b(5) = 49\n+    end block\n+\n     ! None of the above tasks depend on each other.\n     ! The following task depends on all but the a(4) = 46; one.\n     !$omp task shared(a, b) depend(out: omp_all_memory) private(i) if(ifval)\n     block\n       if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n           .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n           .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n-          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+          .or. b(4) /= 48 .or. b(5) /= 49 .or. b(6) /= 12 .or. b(7) /= 14) &\n         error stop\n       do i = 0, 7\n         if (i /= 4) &"}, {"sha": "b5032e98a2f5761e1e6de10c40b77d3cfc8b16c7", "filename": "libgomp/testsuite/libgomp.fortran/depend-6.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -62,14 +62,20 @@ subroutine test (ifval)\n       call usleep (5000)\n       b(4) = 48\n     end block\n+    !$omp task shared(b) depend(inoutset: b(5))\n+    block\n+      call usleep (5000)\n+      b(5) = 49\n+    end block\n+\n     ! None of the above tasks depend on each other.\n     ! The following task depends on all but the a(4) = 46; one.\n     !$omp task shared(a, b) depend(depobj: d1) private(i) if(ifval)\n     block\n       if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n           .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n           .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n-          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+          .or. b(4) /= 48 .or. b(5) /= 49 .or. b(6) /= 12 .or. b(7) /= 14) &\n         error stop\n       do i = 0, 7\n         if (i /= 4) &"}, {"sha": "771a59c50f032a317431abecc2065c1b075c04d9", "filename": "libgomp/testsuite/libgomp.fortran/depend-7.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -57,14 +57,20 @@ subroutine usleep(t) bind(C, name=\"my_usleep\")\n       call usleep (5000)\n       b(4) = 48\n     end block\n+    !$omp task shared(b) depend(inoutset: b(5))\n+    block\n+      call usleep (5000)\n+      b(5) = 49\n+    end block\n+\n     ! None of the above tasks depend on each other.\n     ! The following task depends on all but the a(4) = 46; one.\n     !$omp task shared(a, b) depend(iterator (j=0:7), inout: omp_all_memory) private(i)\n     block\n       if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n           .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n           .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n-          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+          .or. b(4) /= 48 .or. b(5) /= 49 .or. b(6) /= 12 .or. b(7) /= 14) &\n         error stop\n       do i = 0, 7\n         if (i /= 4) &"}, {"sha": "46161c36cd2d98a61daf88eb7b8716878fd9be29", "filename": "libgomp/testsuite/libgomp.fortran/depend-inoutset-1.f90", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-inoutset-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8563693fb4eb1317fcbd54883516c3873782f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-inoutset-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-inoutset-1.f90?ref=ba8563693fb4eb1317fcbd54883516c3873782f4", "patch": "@@ -0,0 +1,170 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+\n+program main\n+  use omp_lib\n+  implicit none (type, external)\n+\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+  integer :: a(0:7) = 0\n+  integer(omp_depend_kind) :: d1, d2\n+\n+  !$omp depobj (d1) depend(inoutset: a)\n+  !$omp depobj (d2) depend(inout: a)\n+  !$omp depobj (d2) update(inoutset)\n+\n+  !$omp parallel\n+   !$omp barrier\n+   !$omp master\n+    !$omp task shared(a) depend(out: a)\n+    block\n+      call usleep (5000)\n+      a(0) = 1; a(1) = 2; a(2) = 3; a(3) = 4\n+    end block\n+    ! The above task needs to finish first.\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 1 .or. a(1) /= 2 .or. a(2) /= 3 .or. a(3) /= 4) &\n+        error stop\n+      call usleep (5000)\n+      a(4) = 42\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 1 .or. a(1) /= 2 .or. a(2) /= 3 .or. a(3) /= 4) &\n+        error stop\n+      call usleep (5000);\n+      a(5) = 43\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 1 .or. a(1) /= 2 .or. a(2) /= 3 .or. a(3) /= 4) &\n+        error stop\n+      call usleep (5000)\n+      a(6) = 44\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 1 .or. a(1) /= 2 .or. a(2) /= 3 .or. a(3) /= 4) &\n+        error stop\n+      call usleep (5000)\n+      a(7) = 45\n+    end block\n+    ! The above 4 tasks can be scheduled in any order but need to wait\n+    ! for the depend(out: a) task.\n+    !$omp task shared(a) depend(inoutset: a)\n+    block\n+      if (a(4) /= 42 .or. a(5) /= 43 .or. a(6) /= 44 .or. a(7) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 42\n+    end block\n+    !$omp task shared(a) depend(iterator(i=1:3:2), inoutset: a)\n+    block\n+      if (a(4) /= 42 .or. a(5) /= 43 .or. a(6) /= 44 .or. a(7) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(1) = 43\n+    end block\n+    !$omp task shared(a) depend(depobj: d1)\n+    block\n+      if (a(4) /= 42 .or. a(5) /= 43 .or. a(6) /= 44 .or. a(7) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(2) = 44\n+    end block\n+    !$omp task shared(a) depend(depobj: d2)\n+    block\n+      if (a(4) /= 42 .or. a(5) /= 43 .or. a(6) /= 44 .or. a(7) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(3) = 45\n+    end block\n+    ! The above 4 tasks can be scheduled in any order but need to wait\n+    ! for all the above depend(in: a) tasks.\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(4) = 46\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(5) = 47\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(6) = 48\n+    end block\n+    !$omp task shared(a) depend(in: a)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45) &\n+        error stop\n+      call usleep (5000)\n+      a(7) = 49\n+    end block\n+    ! The above 4 tasks can be scheduled in any order but need to wait\n+    ! for all the above depend(inoutset: a),\n+    !  depend(iterator(i=1:3:2), inoutset: a), depend(depobj: d1) and\n+    !  depend(depobj: d2) tasks.\n+    !$omp task shared(a) depend(inoutset: a)\n+    block\n+      if (a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 50\n+    end block\n+    ! The above task needs to wait for all the above 4 depend(in: a)\n+    ! tasks.\n+    !$omp task shared(a) depend(out: a)\n+    block\n+      if (a(0) /= 50 .or. a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 51\n+    end block\n+    ! The above task needs to wait for the above depend(inoutset: a) task.\n+    !$omp task shared(a) depend(inoutset: a)\n+    block\n+      if (a(0) /= 51 .or. a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 52\n+    end block\n+    ! The above task needs to wait for the above depend(out: a) task.\n+    !$omp task shared(a) depend(mutexinoutset: a)\n+    block\n+      if (a(0) /= 52 .or. a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 53\n+    end block\n+    ! The above task needs to wait for the above depend(inoutset: a) task.\n+    !$omp task shared(a) depend(inoutset: a)\n+    block\n+      if (a(0) /= 53 .or. a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+        error stop\n+      call usleep (5000)\n+      a(0) = 54\n+    end block\n+    ! The above task needs to wait for the above\n+    ! depend(mutexinoutset: a) task.\n+   !$omp end master\n+  !$omp end parallel\n+  if (a(0) /= 54 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45 &\n+      .or. a(4) /= 46.or. a(5) /= 47 .or. a(6) /= 48 .or. a(7) /= 49) &\n+    error stop\n+end"}]}