{"sha": "021efafc3023562f62a81bd693d0dc4528f78765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxZWZhZmMzMDIzNTYyZjYyYTgxYmQ2OTNkMGRjNDUyOGY3ODc2NQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-14T04:54:32Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-02-14T04:54:32Z"}, "message": "extend.texi: Use @: or add comma where appropriate.\n\n* doc/extend.texi: Use @: or add comma where appropriate.\n* doc/invoke.texi: Likewise.\n* doc/tm.texi: Likewise.\n\nFrom-SVN: r132312", "tree": {"sha": "64caf47d2874bc64c209b5d599fed00460c4099e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64caf47d2874bc64c209b5d599fed00460c4099e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021efafc3023562f62a81bd693d0dc4528f78765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021efafc3023562f62a81bd693d0dc4528f78765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021efafc3023562f62a81bd693d0dc4528f78765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021efafc3023562f62a81bd693d0dc4528f78765/comments", "author": null, "committer": null, "parents": [{"sha": "dc369f9dd3241c867a6455b5ef038d9ca79f3e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc369f9dd3241c867a6455b5ef038d9ca79f3e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc369f9dd3241c867a6455b5ef038d9ca79f3e6e"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "7e5b9d207647ecea097c8087a9b978b73b05d1c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=021efafc3023562f62a81bd693d0dc4528f78765", "patch": "@@ -1,3 +1,9 @@\n+2008-02-14 Ralf Wildenhues <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/extend.texi: Use @: or add comma where appropriate.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\n 2008-02-14  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/34393"}, {"sha": "56abdf5644278045e88fae848a428b53b8614070", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=021efafc3023562f62a81bd693d0dc4528f78765", "patch": "@@ -5649,7 +5649,7 @@ assert (__builtin_object_size (q, 1) == sizeof (var.b));\n @end deftypefn\n \n There are built-in functions added for many common string operation\n-functions, e.g. for @code{memcpy} @code{__builtin___memcpy_chk}\n+functions, e.g., for @code{memcpy} @code{__builtin___memcpy_chk}\n built-in is provided.  This built-in has an additional last argument,\n which is the number of bytes remaining in object the @var{dest}\n argument points to or @code{(size_t) -1} if the size is not known.\n@@ -5702,7 +5702,7 @@ int __builtin___vsnprintf_chk (char *s, size_t maxlen, int flag, size_t os,\n @end smallexample\n \n The added @var{flag} argument is passed unchanged to @code{__sprintf_chk}\n-etc. functions and can contain implementation specific flags on what\n+etc.@: functions and can contain implementation specific flags on what\n additional security measures the checking function might take, such as\n handling @code{%n} differently.\n \n@@ -5718,7 +5718,7 @@ In addition to this, there are checking built-in functions\n @code{__builtin___fprintf_chk} and @code{__builtin___vfprintf_chk}.\n These have just one additional argument, @var{flag}, right before\n format string @var{fmt}.  If the compiler is able to optimize them to\n-@code{fputc} etc. functions, it will, otherwise the checking function\n+@code{fputc} etc.@: functions, it will, otherwise the checking function\n should be called and the @var{flag} argument passed to it.\n \n @node Other Builtins\n@@ -11067,7 +11067,7 @@ multiple @code{#pragma pack(@var{n})} instances and finalized by a single\n @code{#pragma pack(pop)}.\n @end enumerate\n \n-Some targets, e.g. i386 and powerpc, support the @code{ms_struct}\n+Some targets, e.g.@: i386 and powerpc, support the @code{ms_struct}\n @code{#pragma} which lays out a structure as the documented\n @code{__attribute__ ((ms_struct))}.\n @enumerate"}, {"sha": "a8a65140f5a644b627783144947a47867e5d4c14", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=021efafc3023562f62a81bd693d0dc4528f78765", "patch": "@@ -1181,7 +1181,7 @@ switches supported by the compiler the following can be used:\n \n The sense of a qualifier can be inverted by prefixing it with the\n @var{^} character, so for example to display all binary warning\n-options (i.e. ones that are either on or off and that do not take an\n+options (i.e., ones that are either on or off and that do not take an\n argument), which have a description the following can be used:\n \n @smallexample\n@@ -4920,16 +4920,16 @@ For @var{n}=0 no diagnostic information is reported.\n If @var{n}=1 the vectorizer reports each loop that got vectorized,\n and the total number of loops that got vectorized.\n If @var{n}=2 the vectorizer also reports non-vectorized loops that passed\n-the first analysis phase (vect_analyze_loop_form) - i.e. countable,\n+the first analysis phase (vect_analyze_loop_form) - i.e.@: countable,\n inner-most, single-bb, single-entry/exit loops.  This is the same verbosity\n level that @option{-fdump-tree-vect-stats} uses.\n Higher verbosity levels mean either more information dumped for each\n reported loop, or same amount of information reported for more loops:\n If @var{n}=3, alignment related information is added to the reports.\n-If @var{n}=4, data-references related information (e.g. memory dependences,\n+If @var{n}=4, data-references related information (e.g.@: memory dependences,\n memory access-patterns) is added to the reports.\n If @var{n}=5, the vectorizer reports also non-vectorized inner-most loops\n-that did not pass the first analysis phase (i.e. may not be countable, or\n+that did not pass the first analysis phase (i.e., may not be countable, or\n may have complicated control-flow).\n If @var{n}=6, the vectorizer reports also non-vectorized nested loops.\n For @var{n}=7, all the information the vectorizer generates during its\n@@ -5936,7 +5936,7 @@ Parallelize loops, i.e., split their iteration space to run in n threads.\n This is only possible for loops whose iterations are independent\n and can be arbitrarily reordered.  The optimization is only\n profitable on multiprocessor machines, for loops that are CPU-intensive,\n-rather than constrained e.g. by memory bandwidth.  This option\n+rather than constrained e.g.@: by memory bandwidth.  This option\n implies @option{-pthread}, and thus is only supported on targets\n that have support for @option{-pthread}.\n "}, {"sha": "18d1c2d40a1bdd666a56f953cf66f28a5c31f2dd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021efafc3023562f62a81bd693d0dc4528f78765/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=021efafc3023562f62a81bd693d0dc4528f78765", "patch": "@@ -5483,7 +5483,7 @@ widening multiplication of the even elements of two input vectors of type @var{x\n If this hook is defined, the autovectorizer will use it along with the\n @code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD} target hook when vectorizing\n widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g. used only by a reduction computation). Otherwise, the\n+preserved (e.g.@: used only by a reduction computation). Otherwise, the\n @code{widen_mult_hi/lo} idioms will be used.\n @end deftypefn\n \n@@ -5494,7 +5494,7 @@ widening multiplication of the odd elements of two input vectors of type @var{x}\n If this hook is defined, the autovectorizer will use it along with the\n @code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN} target hook when vectorizing\n widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g. used only by a reduction computation). Otherwise, the\n+preserved (e.g.@: used only by a reduction computation). Otherwise, the\n @code{widen_mult_hi/lo} idioms will be used.\n @end deftypefn\n \n@@ -6214,14 +6214,14 @@ used to initialize data used by the previous hook.\n @deftypefn {Target Hook} void TARGET_SCHED_DFA_PRE_CYCLE_ADVANCE (void)\n The hook to notify target that the current simulated cycle is about to finish.\n The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\n-to change the state in more complicated situations - e.g. when advancing\n+to change the state in more complicated situations - e.g., when advancing\n state on a single insn is not enough.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_DFA_POST_CYCLE_ADVANCE (void)\n The hook to notify target that new simulated cycle has just started.\n The hook is analogous to @samp{TARGET_SCHED_DFA_POST_CYCLE_INSN} but used\n-to change the state in more complicated situations - e.g. when advancing\n+to change the state in more complicated situations - e.g., when advancing\n state on a single insn is not enough.\n @end deftypefn\n "}]}