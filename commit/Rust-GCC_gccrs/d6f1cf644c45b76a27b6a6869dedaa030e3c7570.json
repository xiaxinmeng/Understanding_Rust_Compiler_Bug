{"sha": "d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmMWNmNjQ0YzQ1Yjc2YTI3YjZhNjg2OWRlZGFhMDMwZTNjNzU3MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-25T19:41:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-25T19:41:28Z"}, "message": "PR c++/98646 - spurious -Wnonnull calling a member on the result of static_cast\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/98646\n\t* c-common.c (check_nonnull_arg): Adjust warning text.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98646\n\t* cvt.c (cp_fold_convert): Propagate TREE_NO_WARNING.\n\ngcc/ChangeLog:\n\n\tPR c++/98646\n\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Adjust warning text.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98646\n\t* g++.dg/warn/Wnonnull5.C: Adjust text of an expected warning.\n\t* g++.dg/warn/Wnonnull10.C: New test.\n\t* g++.dg/warn/Wnonnull9.C: New test.", "tree": {"sha": "099882d59ed8681df57417ddd194bc67af3039cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099882d59ed8681df57417ddd194bc67af3039cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d54cccad332074d5fb81123796239f0f61b11a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d54cccad332074d5fb81123796239f0f61b11a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d54cccad332074d5fb81123796239f0f61b11a7"}], "stats": {"total": 203, "additions": 195, "deletions": 8}, "files": [{"sha": "813212cc21d64edc39707f6fc57666bfe3856abf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -5595,7 +5595,7 @@ check_nonnull_arg (void *ctx, tree param, unsigned HOST_WIDE_INT param_num)\n   if (param_num == 0)\n     {\n       warned = warning_at (loc, OPT_Wnonnull,\n-\t\t\t   \"%qs pointer null\", \"this\");\n+\t\t\t   \"%qs pointer is null\", \"this\");\n       if (warned && pctx->fndecl)\n \tinform (DECL_SOURCE_LOCATION (pctx->fndecl),\n \t\t\"in a call to non-static member function %qD\","}, {"sha": "e809f0e406857383f7c4d7203ac55443bd627c0d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -599,11 +599,14 @@ ignore_overflows (tree expr, tree orig)\n }\n \n /* Fold away simple conversions, but make sure TREE_OVERFLOW is set\n-   properly.  */\n+   properly and propagate TREE_NO_WARNING if folding EXPR results\n+   in the same expression code.  */\n \n tree\n cp_fold_convert (tree type, tree expr)\n {\n+  bool nowarn = TREE_NO_WARNING (expr);\n+\n   tree conv;\n   if (TREE_TYPE (expr) == type)\n     conv = expr;\n@@ -626,6 +629,10 @@ cp_fold_convert (tree type, tree expr)\n       conv = fold_convert (type, expr);\n       conv = ignore_overflows (conv, expr);\n     }\n+\n+  if (nowarn && TREE_CODE (expr) == TREE_CODE (conv))\n+    TREE_NO_WARNING (conv) = nowarn;\n+\n   return conv;\n }\n "}, {"sha": "a7e795ceb8ae9428825bc1fda793a2716cf17aeb", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull10.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull10.C?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -0,0 +1,63 @@\n+/* Very that -Wnonnull is issued for calls to inline member functions\n+   with a null this pointer.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#if __cplusplus < 201103L\n+# define nullptr 0\n+#endif\n+\n+struct S\n+{\n+  void f () { }\n+  static void g () { }\n+  virtual void h () { }\n+};\n+\n+void f0 ()\n+{\n+  static_cast<S*>(0)->f ();         // { dg-warning \"-Wnonnull\" }\n+  static_cast<S*>(0)->g ();\n+  static_cast<S*>(0)->h ();         // { dg-warning \"-Wnonnull\" }\n+}\n+\n+void f1 ()\n+{\n+  static_cast<S*>(nullptr)->f ();   // { dg-warning \"-Wnonnull\" }\n+  static_cast<S*>(nullptr)->g ();\n+  static_cast<S*>(nullptr)->h ();   // { dg-warning \"-Wnonnull\" }\n+}\n+\n+void f2 ()\n+{\n+  S* const p = 0;\n+\n+  p->f ();                          // { dg-warning \"-Wnonnull\" }\n+  p->g ();\n+  p->h ();                          // { dg-warning \"-Wnonnull\" }\n+}\n+\n+\n+#pragma GCC optimize \"1\"\n+\n+void f3 ()\n+{\n+  S *p = 0;\n+\n+  p->f ();                          // { dg-warning \"-Wnonnull\" }\n+  p->g ();\n+  p->h ();                          // { dg-warning \"-Wnonnull\" }\n+}\n+\n+\n+#pragma GCC optimize \"2\"\n+\n+void f4 (S *p)\n+{\n+  if (p)\n+    return;\n+\n+  p->f ();                          // { dg-warning \"-Wnonnull\" }\n+  p->g ();\n+  p->h ();                          // { dg-warning \"-Wnonnull\" }\n+}"}, {"sha": "959cf1840f81afc0078cef19bfa7ba72ce97e2fe", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull5.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -35,21 +35,21 @@ struct S\n \n void warn_nullptr_this ()\n {\n-  ((S*)nullptr)->f0 (\"\");        // { dg-warning \"3:'this' pointer null\" \"pr86568\" { xfail *-*-* } }\n-                                 // { dg-warning \"this' pointer null\" \"pr86568 second variant\" { target *-*-* } .-1 }\n+  ((S*)nullptr)->f0 (\"\");        // { dg-warning \"3:'this' pointer is null\" \"pr86568\" { xfail *-*-* } }\n+                                 // { dg-warning \"this' pointer is null\" \"pr86568 second variant\" { target *-*-* } .-1 }\n }\n \n void warn_null_this_cst ()\n {\n   S* const null = 0;\n-  null->f1 (\"\");                  // { dg-warning \"3:'this' pointer null\" }\n+  null->f1 (\"\");                  // { dg-warning \"3:'this' pointer is null\" }\n }\n \n void warn_null_this_var ()\n {\n   S* null = 0;\n-  null->f2 (&null);               // { dg-warning \"3:'this' pointer null\" \"pr86568\" { xfail *-*-* } }\n-                                  // { dg-warning \"'this' pointer null\" \"pr86568 second variant\" { target *-*-* } .-1 }\n+  null->f2 (&null);               // { dg-warning \"3:'this' pointer is null\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"'this' pointer is null\" \"pr86568 second variant\" { target *-*-* } .-1 }\n }\n \n void warn_nullptr (S s)"}, {"sha": "b6135c4a624dca7a48d5c8cc380f5a587f3f1684", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull9.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -0,0 +1,117 @@\n+/* PR c++/98646 - spurious -Wnonnull calling a member on the result\n+   of static_cast\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+struct A { virtual ~A (); };\n+struct B\n+{\n+  virtual ~B ();\n+  B* bptr ();\n+  B& bref ();\n+};\n+\n+struct C: A, B { virtual ~C (); void g () const; };\n+\n+\n+void c_cast_C_ptr (B *p)\n+{\n+  ((C*)p->bptr ())->g ();\n+}\n+\n+void c_cast_const_C_ptr (B *p)\n+{\n+  ((const C*)p->bptr ())->g ();\n+}\n+\n+void static_cast_C_ptr (B *p)\n+{\n+  static_cast<C*>(p->bptr ())->g ();\n+}\n+\n+void static_cast_const_C_ptr (B *p)\n+{\n+  /* The static_cast can't fail so verify that no warning is issued\n+     here, even though GCC emits a null check for its argument.  */\n+  static_cast<const C*>(p->bptr ())->g ();    // { dg-bogus \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void dynamic_cast_C_ptr (B *p)\n+{\n+  // The dynamic_cast might fail so a warning is justified.\n+  dynamic_cast<C*>(p->bptr ())->g ();         // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void dynamic_cast_const_C_ptr (B *p)\n+{\n+  dynamic_cast<const C*>(p->bptr ())->g ();   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+\n+void c_cast_C_ref (B *p)\n+{\n+  ((C&)p->bref ()).g ();\n+}\n+\n+void c_cast_const_C_ref (B *p)\n+{\n+  ((const C&)p->bref ()).g ();\n+}\n+\n+void static_cast_C_ref (B *p)\n+{\n+  static_cast<C&>(p->bref ()).g ();\n+}\n+\n+void static_cast_const_C_ref (B *p)\n+{\n+  static_cast<const C&>(p->bref ()).g ();\n+}\n+\n+void dynamic_cast_C_ref (B *p)\n+{\n+  /* The dynamic_cast fails by throwing an exception so verify that\n+     no warning is issued.  */\n+  dynamic_cast<C&>(p->bref ()).g ();\n+}\n+\n+void dynamic_cast_const_C_ref (B *p)\n+{\n+  dynamic_cast<const C&>(p->bref ()).g ();\n+}\n+\n+\n+struct D: B, A { virtual ~D (); void g () const; };\n+\n+void c_cast_D_ptr (B *p)\n+{\n+  ((D*)p->bptr ())->g ();\n+}\n+\n+void c_cast_const_D_ptr (B *p)\n+{\n+  ((const D*)p->bptr ())->g ();\n+}\n+\n+void static_cast_D_ptr (B *p)\n+{\n+  static_cast<D*>(p->bptr ())->g ();\n+}\n+\n+void static_cast_const_D_ptr (B *p)\n+{\n+  /* The static_cast can't fail so verify that no warning is issued\n+     here, even though GCC emits a null check for its argument.  */\n+  static_cast<const D*>(p->bptr ())->g ();    // { dg-bogus \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void dynamic_cast_D_ptr (B *p)\n+{\n+  // The dynamic_cast might fail so a warning is justified.\n+  dynamic_cast<D*>(p->bptr ())->g ();         // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void dynamic_cast_const_D_ptr (B *p)\n+{\n+  dynamic_cast<const D*>(p->bptr ())->g ();   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "3bfd4a6265c1e7739696164ea2efe4d1591be803", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f1cf644c45b76a27b6a6869dedaa030e3c7570/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d6f1cf644c45b76a27b6a6869dedaa030e3c7570", "patch": "@@ -3564,7 +3564,7 @@ pass_post_ipa_warn::execute (function *fun)\n \t      if (argno == 0)\n \t\t{\n \t\t  if (warning_at (loc, OPT_Wnonnull,\n-\t\t\t\t  \"%G%qs pointer null\", stmt, \"this\")\n+\t\t\t\t  \"%G%qs pointer is null\", stmt, \"this\")\n \t\t      && fndecl)\n \t\t    inform (DECL_SOURCE_LOCATION (fndecl),\n \t\t\t    \"in a call to non-static member function %qD\","}]}