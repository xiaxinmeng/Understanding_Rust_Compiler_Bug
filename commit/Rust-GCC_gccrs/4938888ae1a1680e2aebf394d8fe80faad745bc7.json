{"sha": "4938888ae1a1680e2aebf394d8fe80faad745bc7", "node_id": "C_kwDOANBUbNoAKDQ5Mzg4ODhhZTFhMTY4MGUyYWViZjM5NGQ4ZmU4MGZhYWQ3NDViYzc", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-04-22T15:45:00Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-04-22T19:29:08Z"}, "message": "rs6000: Fix pack for soft-float (PR105334)\n\nFor PR103623 I fixed unpack, but pack is broken as well, as reported in\nPR105334.  Fixing that is a bit more code, but it is pretty simple code\nnonetheless.\n\n2022-04-22  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR target/105334\n\t* config/rs6000/rs6000.md (pack<mode> for FMOVE128): New expander.\n\t(pack<mode> for FMOVE128): Rename and split the insn_and_split to...\n\t(pack<mode>_hard for FMOVE128): ... this...\n\t(pack<mode>_soft for FMOVE128): ... and this.", "tree": {"sha": "1e79f56e2d9e61ea4d1cbbc6a364cfdc25271fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e79f56e2d9e61ea4d1cbbc6a364cfdc25271fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4938888ae1a1680e2aebf394d8fe80faad745bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4938888ae1a1680e2aebf394d8fe80faad745bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4938888ae1a1680e2aebf394d8fe80faad745bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4938888ae1a1680e2aebf394d8fe80faad745bc7/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c17bc75c4c65d75597b545680f9fbff163ccd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c17bc75c4c65d75597b545680f9fbff163ccd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c17bc75c4c65d75597b545680f9fbff163ccd1"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "64049a6e521c316d991baa59a481b68f1d9cd635", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4938888ae1a1680e2aebf394d8fe80faad745bc7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4938888ae1a1680e2aebf394d8fe80faad745bc7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4938888ae1a1680e2aebf394d8fe80faad745bc7", "patch": "@@ -14602,13 +14602,26 @@\n }\n   [(set_attr \"type\" \"fp,fpstore,store\")])\n \n-(define_insn_and_split \"pack<mode>\"\n+(define_expand \"pack<mode>\"\n+  [(use (match_operand:FMOVE128 0 \"register_operand\"))\n+   (use (match_operand:<FP128_64> 1 \"register_operand\"))\n+   (use (match_operand:<FP128_64> 2 \"register_operand\"))]\n+  \"FLOAT128_2REG_P (<MODE>mode)\"\n+{\n+  if (TARGET_HARD_FLOAT)\n+    emit_insn (gen_pack<mode>_hard (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_pack<mode>_soft (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"pack<mode>_hard\"\n   [(set (match_operand:FMOVE128 0 \"register_operand\" \"=&d\")\n \t(unspec:FMOVE128\n \t [(match_operand:<FP128_64> 1 \"register_operand\" \"d\")\n \t  (match_operand:<FP128_64> 2 \"register_operand\" \"d\")]\n \t UNSPEC_PACK_128BIT))]\n-  \"FLOAT128_2REG_P (<MODE>mode)\"\n+  \"FLOAT128_2REG_P (<MODE>mode) && TARGET_HARD_FLOAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (match_dup 1))\n@@ -14626,6 +14639,34 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn_and_split \"pack<mode>_soft\"\n+  [(set (match_operand:FMOVE128 0 \"register_operand\" \"=&r\")\n+\t(unspec:FMOVE128\n+\t [(match_operand:<FP128_64> 1 \"register_operand\" \"r\")\n+\t  (match_operand:<FP128_64> 2 \"register_operand\" \"r\")]\n+\t UNSPEC_PACK_128BIT))]\n+  \"FLOAT128_2REG_P (<MODE>mode) && TARGET_SOFT_FLOAT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 4) (match_dup 2))]\n+{\n+  unsigned dest_hi = REGNO (operands[0]);\n+  unsigned dest_lo = dest_hi + (TARGET_POWERPC64 ? 1 : 2);\n+\n+  gcc_assert (!IN_RANGE (REGNO (operands[1]), dest_hi, dest_lo));\n+  gcc_assert (!IN_RANGE (REGNO (operands[2]), dest_hi, dest_lo));\n+\n+  operands[3] = gen_rtx_REG (<FP128_64>mode, dest_hi);\n+  operands[4] = gen_rtx_REG (<FP128_64>mode, dest_lo);\n+}\n+  [(set_attr \"type\" \"integer\")\n+   (set (attr \"length\")\n+\t(if_then_else\n+\t (match_test \"TARGET_POWERPC64\")\n+\t (const_string \"8\")\n+\t (const_string \"16\")))])\n+\n (define_insn \"unpack<mode>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=wa,wa\")\n \t(unspec:DI [(match_operand:FMOVE128_VSX 1 \"register_operand\" \"0,wa\")"}]}