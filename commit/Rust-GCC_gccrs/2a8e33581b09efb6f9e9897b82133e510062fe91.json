{"sha": "2a8e33581b09efb6f9e9897b82133e510062fe91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4ZTMzNTgxYjA5ZWZiNmY5ZTk4OTdiODIxMzNlNTEwMDYyZmU5MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-11-06T17:24:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-11-06T17:24:28Z"}, "message": "tree-core.h (size_type_kind): Remove OEP_CONSTANT_ADDRESS_OF and add OEP_MATCH_SIDE_EFFECTS.\n\n\t* tree-core.h (size_type_kind): Remove OEP_CONSTANT_ADDRESS_OF and\n\tadd OEP_MATCH_SIDE_EFFECTS.\n\t* fold-const.c (operand_equal_p): Update documentation; handle\n\tOEP_MATCH_SIDE_EFFECTS.\n\t* tree-ssa-tail-merge.c (gimple_operand_equal_value_p): Use\n\tOEP_MATCH_SIDE_EFFECTS.\n\nFrom-SVN: r229867", "tree": {"sha": "503d99aea380746c3afd2b7a7413a00f6a4a890c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/503d99aea380746c3afd2b7a7413a00f6a4a890c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8e33581b09efb6f9e9897b82133e510062fe91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8e33581b09efb6f9e9897b82133e510062fe91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8e33581b09efb6f9e9897b82133e510062fe91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8e33581b09efb6f9e9897b82133e510062fe91/comments", "author": null, "committer": null, "parents": [{"sha": "a6fc00da763fceeb9b7491fe07c6985949da9953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fc00da763fceeb9b7491fe07c6985949da9953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fc00da763fceeb9b7491fe07c6985949da9953"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "64388a4d2f96d14883139288e34487b9227508fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a8e33581b09efb6f9e9897b82133e510062fe91", "patch": "@@ -1,3 +1,12 @@\n+2015-11-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-core.h (size_type_kind): Remove OEP_CONSTANT_ADDRESS_OF and\n+\tadd OEP_MATCH_SIDE_EFFECTS.\n+\t* fold-const.c (operand_equal_p): Update documentation; handle\n+\tOEP_MATCH_SIDE_EFFECTS.\n+\t* tree-ssa-tail-merge.c (gimple_operand_equal_value_p): Use\n+\tOEP_MATCH_SIDE_EFFECTS.\n+\n 2015-11-06  Benedikt Huber  <benedikt.huber@theobroma-systems.com>\n \t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n "}, {"sha": "fb613daca9a28b6d9aa517c64a9a37ef989c57e0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2a8e33581b09efb6f9e9897b82133e510062fe91", "patch": "@@ -2649,8 +2649,7 @@ combine_comparisons (location_t loc,\n }\n \f\n /* Return nonzero if two operands (typically of the same tree node)\n-   are necessarily equal.  If either argument has side-effects this\n-   function returns zero.  FLAGS modifies behavior as follows:\n+   are necessarily equal. FLAGS modifies behavior as follows:\n \n    If OEP_ONLY_CONST is set, only return nonzero for constants.\n    This function tests whether the operands are indistinguishable;\n@@ -2675,9 +2674,14 @@ combine_comparisons (location_t loc,\n    to ensure that global memory is unchanged in between.\n \n    If OEP_ADDRESS_OF is set, we are actually comparing addresses of objects,\n-   not values of expressions.  OEP_CONSTANT_ADDRESS_OF in addition to\n-   OEP_ADDRESS_OF is used for ADDR_EXPR with TREE_CONSTANT flag set and we\n-   further ignore any side effects on SAVE_EXPRs then.  */\n+   not values of expressions.\n+\n+   Unless OEP_MATCH_SIDE_EFFECTS is set, the function returns false on\n+   any operand with side effect.  This is unnecesarily conservative in the\n+   case we know that arg0 and arg1 are in disjoint code paths (such as in\n+   ?: operator).  In addition OEP_MATCH_SIDE_EFFECTS is used when comparing\n+   addresses with TREE_CONSTANT flag set so we know that &var == &var\n+   even if var is volatile.  */\n \n int\n operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n@@ -2698,9 +2702,8 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n   if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n     {\n       /* Address of INTEGER_CST is not defined; check that we did not forget\n-\t to drop the OEP_ADDRESS_OF/OEP_CONSTANT_ADDRESS_OF flags.  */\n-      gcc_checking_assert (!(flags\n-\t\t\t     & (OEP_ADDRESS_OF | OEP_CONSTANT_ADDRESS_OF)));\n+\t to drop the OEP_ADDRESS_OF flags.  */\n+      gcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n       return tree_int_cst_equal (arg0, arg1);\n     }\n \n@@ -2806,7 +2809,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n      they are necessarily equal as well.  */\n   if (arg0 == arg1 && ! (flags & OEP_ONLY_CONST)\n       && (TREE_CODE (arg0) == SAVE_EXPR\n-\t  || (flags & OEP_CONSTANT_ADDRESS_OF)\n+\t  || (flags & OEP_MATCH_SIDE_EFFECTS)\n \t  || (! TREE_SIDE_EFFECTS (arg0) && ! TREE_SIDE_EFFECTS (arg1))))\n     return 1;\n \n@@ -2865,11 +2868,10 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t\t      TREE_STRING_LENGTH (arg0)));\n \n       case ADDR_EXPR:\n-\tgcc_checking_assert (!(flags\n-\t\t\t       & (OEP_ADDRESS_OF | OEP_CONSTANT_ADDRESS_OF)));\n+\tgcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n \treturn operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1, 0),\n \t\t\t\tflags | OEP_ADDRESS_OF\n-\t\t\t\t| OEP_CONSTANT_ADDRESS_OF);\n+\t\t\t\t| OEP_MATCH_SIDE_EFFECTS);\n       case CONSTRUCTOR:\n \t/* In GIMPLE empty constructors are allowed in initializers of\n \t   aggregates.  */\n@@ -2928,19 +2930,19 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       /* If either of the pointer (or reference) expressions we are\n \t dereferencing contain a side effect, these cannot be equal,\n \t but their addresses can be.  */\n-      if ((flags & OEP_CONSTANT_ADDRESS_OF) == 0\n+      if ((flags & OEP_MATCH_SIDE_EFFECTS) == 0\n \t  && (TREE_SIDE_EFFECTS (arg0)\n \t      || TREE_SIDE_EFFECTS (arg1)))\n \treturn 0;\n \n       switch (TREE_CODE (arg0))\n \t{\n \tcase INDIRECT_REF:\n-\t  if (!(flags & (OEP_ADDRESS_OF | OEP_CONSTANT_ADDRESS_OF))\n+\t  if (!(flags & OEP_ADDRESS_OF)\n \t      && (TYPE_ALIGN (TREE_TYPE (arg0))\n \t\t  != TYPE_ALIGN (TREE_TYPE (arg1))))\n \t    return 0;\n-\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n+\t  flags &= ~OEP_ADDRESS_OF;\n \t  return OP_SAME (0);\n \n \tcase REALPART_EXPR:\n@@ -2950,7 +2952,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \n \tcase TARGET_MEM_REF:\n \tcase MEM_REF:\n-\t  if (!(flags & (OEP_ADDRESS_OF | OEP_CONSTANT_ADDRESS_OF)))\n+\t  if (!(flags & OEP_ADDRESS_OF))\n \t    {\n \t      /* Require equal access sizes */\n \t      if (TYPE_SIZE (TREE_TYPE (arg0)) != TYPE_SIZE (TREE_TYPE (arg1))\n@@ -2975,7 +2977,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t != TYPE_ALIGN (TREE_TYPE (arg1)))\n \t\treturn 0;\n \t    }\n-\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n+\t  flags &= ~OEP_ADDRESS_OF;\n \t  return (OP_SAME (0) && OP_SAME (1)\n \t\t  /* TARGET_MEM_REF require equal extra operands.  */\n \t\t  && (TREE_CODE (arg0) != TARGET_MEM_REF\n@@ -2990,7 +2992,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t     may have different types but same value here.  */\n \t  if (!OP_SAME (0))\n \t    return 0;\n-\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n+\t  flags &= ~OEP_ADDRESS_OF;\n \t  return ((tree_int_cst_equal (TREE_OPERAND (arg0, 1),\n \t\t\t\t       TREE_OPERAND (arg1, 1))\n \t\t   || OP_SAME (1))\n@@ -3003,13 +3005,13 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t  if (!OP_SAME_WITH_NULL (0)\n \t      || !OP_SAME (1))\n \t    return 0;\n-\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n+\t  flags &= ~OEP_ADDRESS_OF;\n \t  return OP_SAME_WITH_NULL (2);\n \n \tcase BIT_FIELD_REF:\n \t  if (!OP_SAME (0))\n \t    return 0;\n-\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n+\t  flags &= ~OEP_ADDRESS_OF;\n \t  return OP_SAME (1) && OP_SAME (2);\n \n \tdefault:\n@@ -3021,9 +3023,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t{\n \tcase ADDR_EXPR:\n \t  /* Be sure we pass right ADDRESS_OF flag.  */\n-\t  gcc_checking_assert (!(flags\n-\t\t\t\t & (OEP_ADDRESS_OF\n-\t\t\t\t    | OEP_CONSTANT_ADDRESS_OF)));\n+\t  gcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n \t  return operand_equal_p (TREE_OPERAND (arg0, 0),\n \t\t\t\t  TREE_OPERAND (arg1, 0),\n \t\t\t\t  flags | OEP_ADDRESS_OF);\n@@ -3089,6 +3089,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\treturn 0;\n \t    }\n \n+\t  /* FIXME: We could skip this test for OEP_MATCH_SIDE_EFFECTS.  */\n \t  {\n \t    unsigned int cef = call_expr_flags (arg0);\n \t    if (flags & OEP_PURE_SAME)"}, {"sha": "a97691598c811a183160301d46cc45da1b7b8053", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=2a8e33581b09efb6f9e9897b82133e510062fe91", "patch": "@@ -737,7 +737,7 @@ enum size_type_kind {\n enum operand_equal_flag {\n   OEP_ONLY_CONST = 1,\n   OEP_PURE_SAME = 2,\n-  OEP_CONSTANT_ADDRESS_OF = 4,\n+  OEP_MATCH_SIDE_EFFECTS = 4,\n   OEP_ADDRESS_OF = 8\n };\n "}, {"sha": "7ea092ab650f785572c80f0d03b5f80f904d57ec", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8e33581b09efb6f9e9897b82133e510062fe91/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=2a8e33581b09efb6f9e9897b82133e510062fe91", "patch": "@@ -1081,7 +1081,7 @@ gimple_operand_equal_value_p (tree t1, tree t2)\n       || t2 == NULL_TREE)\n     return false;\n \n-  if (operand_equal_p (t1, t2, 0))\n+  if (operand_equal_p (t1, t2, OEP_MATCH_SIDE_EFFECTS))\n     return true;\n \n   return gvn_uses_equal (t1, t2);"}]}