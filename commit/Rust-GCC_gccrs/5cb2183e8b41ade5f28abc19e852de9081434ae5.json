{"sha": "5cb2183e8b41ade5f28abc19e852de9081434ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiMjE4M2U4YjQxYWRlNWYyOGFiYzE5ZTg1MmRlOTA4MTQzNGFlNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2004-06-26T10:10:25Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-06-26T10:10:25Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Check TREE_THIS_NOTRAP when setting MEM_NOTRAP_P.\n\n2004-06-26  Andrew Haley  <aph@redhat.com>\n\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Check\n\tTREE_THIS_NOTRAP when setting MEM_NOTRAP_P.\n\t* tree-eh.c (tree_could_trap_p): Check TREE_THIS_NOTRAP.\n\t* tree.h (TREE_THIS_NOTRAP): New.\n\nFrom-SVN: r83706", "tree": {"sha": "739670d850e2307e3f9aad81c8740a8637a62fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/739670d850e2307e3f9aad81c8740a8637a62fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb2183e8b41ade5f28abc19e852de9081434ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb2183e8b41ade5f28abc19e852de9081434ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb2183e8b41ade5f28abc19e852de9081434ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb2183e8b41ade5f28abc19e852de9081434ae5/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab3a0ade68ce42d89502f7eae5674df245de360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab3a0ade68ce42d89502f7eae5674df245de360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab3a0ade68ce42d89502f7eae5674df245de360"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "21586cea53757dfe27de588668c62bbbf8ceca87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb2183e8b41ade5f28abc19e852de9081434ae5", "patch": "@@ -1,3 +1,10 @@\n+2004-06-26  Andrew Haley  <aph@redhat.com>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Check\n+\tTREE_THIS_NOTRAP when setting MEM_NOTRAP_P.\n+\t* tree-eh.c (tree_could_trap_p): Check TREE_THIS_NOTRAP.\n+\t* tree.h (TREE_THIS_NOTRAP): New.\n+\n 2004-06-26  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* genattrtab.c (write_test_expr): Put a unsigned cast before"}, {"sha": "91ef8e9fafd51b418e359eefa67ff603de34d6a4", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5cb2183e8b41ade5f28abc19e852de9081434ae5", "patch": "@@ -1543,6 +1543,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t && (TYPE_READONLY (type) || (t != type && TREE_READONLY (t))))\n \t|| (! TYPE_P (t) && TREE_CONSTANT (t)));\n   MEM_POINTER (ref) = POINTER_TYPE_P (type);\n+  MEM_NOTRAP_P (ref) = TREE_THIS_NOTRAP (t);\n \n   /* If we are making an object of this type, or if this is a DECL, we know\n      that it is a scalar if the type is not an aggregate.  */"}, {"sha": "f15fe0991420f33b779ab0d04ab43f0001d5b9c0", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=5cb2183e8b41ade5f28abc19e852de9081434ae5", "patch": "@@ -1688,9 +1688,11 @@ tree_could_trap_p (tree expr)\n     case IMAGPART_EXPR:\n     case BIT_FIELD_REF:\n       t = get_base_address (expr);\n-      return !t || TREE_CODE (t) == INDIRECT_REF;\n+      return !t || tree_could_trap_p (t);\n \n     case INDIRECT_REF:\n+      return (TREE_THIS_NOTRAP (expr) == false);\n+\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:"}, {"sha": "a369827f46100c2bf40782a29b4ab237bdde7be1", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb2183e8b41ade5f28abc19e852de9081434ae5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5cb2183e8b41ade5f28abc19e852de9081434ae5", "patch": "@@ -304,6 +304,9 @@ struct tree_common GTY(())\n        TYPE_ALIGN_OK in\n \t   ..._TYPE\n \n+       TREE_THIS_NOTRAP in\n+          INDIRECT_REF\n+\n    deprecated_flag:\n \n \tTREE_DEPRECATED in\n@@ -760,6 +763,12 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    If this bit is set in an expression, so is TREE_SIDE_EFFECTS.  */\n #define TREE_THIS_VOLATILE(NODE) ((NODE)->common.volatile_flag)\n \n+/* Nonzero means this node will not trap.  In an INDIRECT_REF, means\n+   accessing the memory pointed to won't generate a trap.  However,\n+   this only applies to an object when used appropriately: it doesn't\n+   mean that writing a READONLY mem won't trap.  */\n+#define TREE_THIS_NOTRAP(NODE) ((NODE)->common.nothrow_flag)\n+\n /* In a VAR_DECL, PARM_DECL or FIELD_DECL, or any kind of ..._REF node,\n    nonzero means it may not be the lhs of an assignment.  */\n #define TREE_READONLY(NODE) (NON_TYPE_CHECK (NODE)->common.readonly_flag)"}]}