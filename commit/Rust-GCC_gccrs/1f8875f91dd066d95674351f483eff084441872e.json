{"sha": "1f8875f91dd066d95674351f483eff084441872e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4ODc1ZjkxZGQwNjZkOTU2NzQzNTFmNDgzZWZmMDg0NDQxODcyZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-23T17:15:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-23T17:15:07Z"}, "message": "diagnostic.c (vnotice): Kill.\n\n2001-05-23  Zack Weinberg  <zackw@stanford.edu>\n\n\t* diagnostic.c (vnotice): Kill.\n\t(fnotice): Call vfprintf directly.\n\t(diagnostic_for_decl, output_do_verbatim, output_verbatim,\n\tverbatim, set_diagnostic_context): Rename string argument to\n\tindicate that it is run through gettext.\n\t(vbuild_message_string, build_message_string, output_do_printf):\n\tRename string argument to indicate that it is NOT run through\n\tgettext.\n\t(output_printf, diagnostic_for_decl, fatal_io_error, sorry,\n\toutput_do_verbatim, set_diagnostic_context, fnotice, _fatal_insn):\n\tRun msgid argument through gettext.\n\t(default_print_error_function): Run constant strings through\n\tgettext when nothing else will.\n\t(fatal_error, internal_error, error_recursion): Use fnotice.\n\tPresent complete sentences to gettext.\n\nFrom-SVN: r42498", "tree": {"sha": "a7980b22ab2423fe59ffbf4f4d71a6589cd21f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7980b22ab2423fe59ffbf4f4d71a6589cd21f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8875f91dd066d95674351f483eff084441872e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8875f91dd066d95674351f483eff084441872e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8875f91dd066d95674351f483eff084441872e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8875f91dd066d95674351f483eff084441872e/comments", "author": null, "committer": null, "parents": [{"sha": "13094d1293db6bf745d6ec9a9e7e517cb93898e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13094d1293db6bf745d6ec9a9e7e517cb93898e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13094d1293db6bf745d6ec9a9e7e517cb93898e4"}], "stats": {"total": 135, "additions": 74, "deletions": 61}, "files": [{"sha": "77d424c9648b032c906935ce2c58cd27081e19aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8875f91dd066d95674351f483eff084441872e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8875f91dd066d95674351f483eff084441872e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f8875f91dd066d95674351f483eff084441872e", "patch": "@@ -1,3 +1,21 @@\n+2001-05-23  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* diagnostic.c (vnotice): Kill.\n+\t(fnotice): Call vfprintf directly.\n+\t(diagnostic_for_decl, output_do_verbatim, output_verbatim,\n+\tverbatim, set_diagnostic_context): Rename string argument to\n+\tindicate that it is run through gettext.\n+\t(vbuild_message_string, build_message_string, output_do_printf):\n+\tRename string argument to indicate that it is NOT run through\n+\tgettext.\n+\t(output_printf, diagnostic_for_decl, fatal_io_error, sorry,\n+\toutput_do_verbatim, set_diagnostic_context, fnotice, _fatal_insn):\n+\tRun msgid argument through gettext.\n+\t(default_print_error_function): Run constant strings through\n+\tgettext when nothing else will.\n+\t(fatal_error, internal_error, error_recursion): Use fnotice.\n+\tPresent complete sentences to gettext.\n+\n 2001-05-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* jump.c (mark_jump_label): Fix thinko in 2001-05-19 change."}, {"sha": "eb0e5214fa57ce999b352d19b994a14921466f1c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 56, "deletions": 61, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8875f91dd066d95674351f483eff084441872e/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8875f91dd066d95674351f483eff084441872e/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=1f8875f91dd066d95674351f483eff084441872e", "patch": "@@ -78,10 +78,8 @@ static void format_with_decl PARAMS ((output_buffer *, tree));\n static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list *, int));\n static void diagnostic_for_decl PARAMS ((tree, const char *, va_list *, int));\n-static void vnotice PARAMS ((FILE *, const char *, va_list))\n-     ATTRIBUTE_PRINTF (2, 0);\n static void set_real_maximum_length PARAMS ((output_buffer *));\n-                                          \n+\n static void output_unsigned_decimal PARAMS ((output_buffer *, unsigned int));\n static void output_long_decimal PARAMS ((output_buffer *, long int));\n static void output_long_unsigned_decimal PARAMS ((output_buffer *,\n@@ -797,35 +795,35 @@ output_format (buffer)\n }\n \n static char *\n-vbuild_message_string (msgid, ap)\n-     const char *msgid;\n+vbuild_message_string (msg, ap)\n+     const char *msg;\n      va_list ap;\n {\n   char *str;\n \n-  vasprintf (&str, msgid, ap);\n+  vasprintf (&str, msg, ap);\n   return str;\n }\n \n-/*  Return a malloc'd string containing MSGID formatted a la\n+/*  Return a malloc'd string containing MSG formatted a la\n     printf.  The caller is reponsible for freeing the memory.  */\n \n static char *\n-build_message_string VPARAMS ((const char *msgid, ...))\n+build_message_string VPARAMS ((const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n+  const char *msg;\n #endif\n   va_list ap;\n   char *str;\n \n-  VA_START (ap, msgid);\n+  VA_START (ap, msg);\n \n #ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n+  msg = va_arg (ap, const char *);\n #endif\n \n-  str = vbuild_message_string (msgid, ap);\n+  str = vbuild_message_string (msg, ap);\n \n   va_end (ap);\n \n@@ -844,14 +842,14 @@ context_as_prefix (file, line, warn)\n   if (file)\n     {\n       if (warn)\n-\treturn build_message_string (\"%s:%d: warning: \", file, line);\n+\treturn build_message_string (_(\"%s:%d: warning: \"), file, line);\n       else\n \treturn build_message_string (\"%s:%d: \", file, line);\n     }\n   else\n     {\n       if (warn)\n-\treturn build_message_string (\"%s: warning: \", progname);\n+\treturn build_message_string (_(\"%s: warning: \"), progname);\n       else\n \treturn build_message_string (\"%s: \", progname);\n     }\n@@ -869,11 +867,11 @@ file_name_as_prefix (f)\n /* Format a MESSAGE into BUFFER.  Automatically wrap lines.  */\n \n static void\n-output_do_printf (buffer, msgid)\n+output_do_printf (buffer, msg)\n      output_buffer *buffer;\n-     const char *msgid;\n+     const char *msg;\n {\n-  char *message = vbuild_message_string (msgid,\n+  char *message = vbuild_message_string (msg,\n                                          output_buffer_format_args (buffer));\n \n   wrap_text (buffer, message, message + strlen (message));\n@@ -900,22 +898,11 @@ output_printf VPARAMS ((struct output_buffer *buffer, const char *msgid, ...))\n #endif\n   old_args = output_buffer_ptr_to_format_args (buffer);\n   output_buffer_ptr_to_format_args (buffer) = &ap;\n-  output_do_printf (buffer, msgid);\n+  output_do_printf (buffer, _(msgid));\n   output_buffer_ptr_to_format_args (buffer) = old_args;\n   va_end (ap);\n }\n \n-/* Print the message MSGID in FILE.  */\n-\n-static void\n-vnotice (file, msgid, ap)\n-     FILE *file;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  vfprintf (file, _(msgid), ap);\n-}\n-\n /* Print a message relevant to the given DECL.  */\n \n static void\n@@ -1026,9 +1013,9 @@ diagnostic_for_asm (insn, msg, args_ptr, warn)\n    name; subsequent substitutions are a la output_format.  */\n \n static void\n-diagnostic_for_decl (decl, msg, args_ptr, warn)\n+diagnostic_for_decl (decl, msgid, args_ptr, warn)\n      tree decl;\n-     const char *msg;\n+     const char *msgid;\n      va_list *args_ptr;\n      int warn;\n {\n@@ -1045,7 +1032,7 @@ diagnostic_for_decl (decl, msg, args_ptr, warn)\n \t(diagnostic_buffer, context_as_prefix\n \t (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn));\n       output_buffer_ptr_to_format_args (diagnostic_buffer) = args_ptr;\n-      output_buffer_text_cursor (diagnostic_buffer) = msg;\n+      output_buffer_text_cursor (diagnostic_buffer) = _(msgid);\n       format_with_decl (diagnostic_buffer, decl);\n       finish_diagnostic ();\n       output_destroy_prefix (diagnostic_buffer);\n@@ -1084,7 +1071,8 @@ count_error (warningp)\n   return 1;\n }\n \n-/* Print a diagnistic MSGID on FILE.  */\n+/* Print a diagnostic MSGID on FILE.  This is just fprintf, except it\n+   runs its second argument through gettext.  */\n \n void\n fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n@@ -1102,7 +1090,7 @@ fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  vnotice (file, msgid, ap);\n+  vfprintf (file, _(msgid), ap);\n   va_end (ap);\n }\n \n@@ -1128,7 +1116,7 @@ fatal_io_error VPARAMS ((const char *msgid, ...))\n \n   output_printf (diagnostic_buffer, \"%s: %s: \", progname, xstrerror (errno));\n   output_buffer_ptr_to_format_args (diagnostic_buffer) = &ap;\n-  output_buffer_text_cursor (diagnostic_buffer) = msgid;\n+  output_buffer_text_cursor (diagnostic_buffer) = _(msgid);\n   output_format (diagnostic_buffer);\n   finish_diagnostic ();\n   output_buffer_state (diagnostic_buffer) = os;\n@@ -1236,7 +1224,7 @@ sorry VPARAMS ((const char *msgid, ...))\n     (diagnostic_buffer, context_as_prefix (input_filename, lineno, 0));\n   output_printf (diagnostic_buffer, \"sorry, not implemented: \");\n   output_buffer_ptr_to_format_args (diagnostic_buffer) = &ap;\n-  output_buffer_text_cursor (diagnostic_buffer) = msgid;\n+  output_buffer_text_cursor (diagnostic_buffer) = _(msgid);\n   output_format (diagnostic_buffer);\n   finish_diagnostic ();\n   output_buffer_state (diagnostic_buffer) = os;\n@@ -1278,7 +1266,7 @@ default_print_error_function (file)\n       output_set_prefix (diagnostic_buffer, prefix);\n       \n       if (current_function_decl == NULL)\n-          output_add_string (diagnostic_buffer, \"At top level:\");\n+          output_add_string (diagnostic_buffer, _(\"At top level:\"));\n       else\n \t{\n \t  if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n@@ -1422,7 +1410,7 @@ fatal_error VPARAMS ((const char *msgid, ...))\n   report_diagnostic (&dc);\n   va_end (ap);\n \n-  fprintf (stderr, \"compilation terminated.\\n\");\n+  fnotice (stderr, \"compilation terminated.\\n\");\n   exit (FATAL_EXIT_CODE);\n }\n \n@@ -1457,7 +1445,7 @@ internal_error VPARAMS ((const char *msgid, ...))\n \n   if (errorcount > 0 || sorrycount > 0)\n     {\n-      fprintf (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n+      fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n \t       input_filename, lineno);\n       exit (FATAL_EXIT_CODE);\n     }\n@@ -1470,9 +1458,10 @@ internal_error VPARAMS ((const char *msgid, ...))\n   report_diagnostic (&dc);\n   va_end (ap);\n \n-  fprintf (stderr, \"Please submit a full bug report, \");\n-  fprintf (stderr, \"with preprocessed source if appropriate.\\n\");\n-  fprintf (stderr, \"See %s for instructions.\\n\", GCCBUGURL);\n+  fnotice (stderr,\n+\"Please submit a full bug report,\\n\\\n+with preprocessed source if appropriate.\\n\\\n+See %s for instructions.\\n\", GCCBUGURL);\n   exit (FATAL_EXIT_CODE);\n }\n \n@@ -1484,7 +1473,7 @@ _fatal_insn (msgid, insn, file, line, function)\n      int line;\n      const char *function;\n {\n-  error (\"%s\", msgid);\n+  error (\"%s\", _(msgid));\n \n   /* The above incremented error_count, but isn't an error that we want to\n      count, so reset it here.  */\n@@ -1609,17 +1598,17 @@ finish_diagnostic ()\n    settings needed by BUFFER for a verbatim formatting.  */\n \n static void\n-output_do_verbatim (buffer, msg, args_ptr)\n+output_do_verbatim (buffer, msgid, args_ptr)\n      output_buffer *buffer;\n-     const char *msg;\n+     const char *msgid;\n      va_list *args_ptr;\n {\n   output_state os;\n \n   os = output_buffer_state (buffer);\n   output_prefix (buffer) = NULL;\n   prefixing_policy (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n-  output_buffer_text_cursor (buffer) = msg;\n+  output_buffer_text_cursor (buffer) = _(msgid);\n   output_buffer_ptr_to_format_args (buffer) = args_ptr;\n   output_set_maximum_length (buffer, 0);\n   output_format (buffer);\n@@ -1629,38 +1618,38 @@ output_do_verbatim (buffer, msg, args_ptr)\n /* Output MESSAGE verbatim into BUFFER.  */\n \n void\n-output_verbatim VPARAMS ((output_buffer *buffer, const char *msg, ...))\n+output_verbatim VPARAMS ((output_buffer *buffer, const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   output_buffer *buffer;\n-  const char *msg;\n+  const char *msgid;\n #endif\n   va_list ap;\n \n-  VA_START (ap, msg);\n+  VA_START (ap, msgid);\n #ifndef ANSI_PROTOTYPES\n   buffer = va_arg (ap, output_buffer *);\n   msg = va_arg (ap, const char *);\n #endif\n-  output_do_verbatim (buffer, msg, &ap);\n+  output_do_verbatim (buffer, msgid, &ap);\n   va_end (ap);\n }\n \n /* Same as above but use diagnostic_buffer.  */\n \n void\n-verbatim VPARAMS ((const char *msg, ...))\n+verbatim VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  const char *msg;\n+  const char *msgid;\n #endif\n   va_list ap;\n \n-  VA_START (ap, msg);\n+  VA_START (ap, msgid);\n #ifndef ANSI_PROTOTYPES\n-  msg = va_arg (ap, const char *);\n+  msgid = va_arg (ap, const char *);\n #endif\n-  output_do_verbatim (diagnostic_buffer, msg, &ap);\n+  output_do_verbatim (diagnostic_buffer, msgid, &ap);\n   output_buffer_to_stream (diagnostic_buffer);\n   va_end (ap);\n }\n@@ -1697,16 +1686,22 @@ report_diagnostic (dc)\n \n /* Inform the user that an error occurred while trying to report some\n    other error.  This indicates catastrophic internal inconsistencies,\n-   so give up now.  But do try to flush out the previous error.  */\n+   so give up now.  But do try to flush out the previous error.\n+   This mustn't use internal_error, that will cause infinite recursion.  */\n \n static void\n error_recursion ()\n {\n   if (diagnostic_lock < 3)\n     finish_diagnostic ();\n \n-  internal_error\n-    (\"Internal compiler error: Error reporting routines re-entered.\");\n+  fnotice (stderr,\n+\t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n+  fnotice (stderr,\n+\"Please submit a full bug report,\\n\\\n+with preprocessed source if appropriate.\\n\\\n+See %s for instructions.\\n\", GCCBUGURL);\n+  exit (FATAL_EXIT_CODE);\n }\n \n /* Given a partial pathname as input, return another pathname that\n@@ -1772,16 +1767,16 @@ fancy_abort (file, line, function)\n    by FILE and LINE.  */\n \n void\n-set_diagnostic_context (dc, message, args_ptr, file, line, warn)\n+set_diagnostic_context (dc, msgid, args_ptr, file, line, warn)\n      diagnostic_context *dc;\n-     const char *message;\n+     const char *msgid;\n      va_list *args_ptr;\n      const char *file;\n      int line;\n      int warn;\n {\n   memset (dc, 0, sizeof (diagnostic_context));\n-  diagnostic_message (dc) = message;\n+  diagnostic_message (dc) = _(msgid);\n   diagnostic_argument_list (dc) = args_ptr;\n   diagnostic_file_location (dc) = file;\n   diagnostic_line_location (dc) = line;"}]}