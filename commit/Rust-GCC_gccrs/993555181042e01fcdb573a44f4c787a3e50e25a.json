{"sha": "993555181042e01fcdb573a44f4c787a3e50e25a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzNTU1MTgxMDQyZTAxZmNkYjU3M2E0NGY0Yzc4N2EzZTUwZTI1YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-29T10:49:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-29T10:49:30Z"}, "message": "optimize.c (maybe_clone_body): Remove DECL_INLINE.\n\n\n \t* optimize.c (maybe_clone_body): Remove DECL_INLINE.\n\t* decl.c (duplicate_decls): Likewise.\n\t(grokfndecl): Likewise.\n\t(start_method): Likewise.\n\t* method.c (make_thunk, make_alias_for, implicitly_declare_fn):\n\tLikewise.\n\t* pt.c (register_specialization, regenerate_decl_from_template):\n\tLikewise.\n\t* decl2.c (grokfield): Likewise.\n\nFrom-SVN: r138236", "tree": {"sha": "193e06dc0b6923a1611d30c514b0c446b541ac18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/193e06dc0b6923a1611d30c514b0c446b541ac18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993555181042e01fcdb573a44f4c787a3e50e25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993555181042e01fcdb573a44f4c787a3e50e25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993555181042e01fcdb573a44f4c787a3e50e25a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993555181042e01fcdb573a44f4c787a3e50e25a/comments", "author": null, "committer": null, "parents": [{"sha": "e27fb29c0dec9ef1cf32fe44ecbf7a6fcc3f09a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27fb29c0dec9ef1cf32fe44ecbf7a6fcc3f09a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27fb29c0dec9ef1cf32fe44ecbf7a6fcc3f09a9"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "6fe401a759bdc751351ce470d6a20bfe872c94cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -1,3 +1,15 @@\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+ \t* optimize.c (maybe_clone_body): Remove DECL_INLINE.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t(grokfndecl): Likewise.\n+\t(start_method): Likewise.\n+\t* method.c (make_thunk, make_alias_for, implicitly_declare_fn):\n+\tLikewise.\n+\t* pt.c (register_specialization, regenerate_decl_from_template):\n+\tLikewise.\n+\t* decl2.c (grokfield): Likewise.\n+\n 2008-07-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 34985"}, {"sha": "1ed98eee4ff99f7023b22dc4b4448ebbeb2a309b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -1652,15 +1652,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      && DECL_INITIAL (new_result))\n \t    {\n \t      if (DECL_INITIAL (old_result))\n-\t\t{\n-\t\t  DECL_INLINE (old_result) = 0;\n-\t\t  DECL_UNINLINABLE (old_result) = 1;\n-\t\t}\n+\t\tDECL_UNINLINABLE (old_result) = 1;\n \t      else\n-\t\t{\n-\t\t  DECL_INLINE (old_result) = DECL_INLINE (new_result);\n-\t\t  DECL_UNINLINABLE (old_result) = DECL_UNINLINABLE (new_result);\n-\t\t}\n+\t\tDECL_UNINLINABLE (old_result) = DECL_UNINLINABLE (new_result);\n \t      DECL_EXTERNAL (old_result) = DECL_EXTERNAL (new_result);\n \t      DECL_NOT_REALLY_EXTERN (old_result)\n \t\t= DECL_NOT_REALLY_EXTERN (new_result);\n@@ -1674,8 +1668,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t  else\n \t    {\n-\t      DECL_INLINE (old_result)\n-\t\t|= DECL_INLINE (new_result);\n \t      DECL_DECLARED_INLINE_P (old_result)\n \t\t|= DECL_DECLARED_INLINE_P (new_result);\n \t      DECL_DISREGARD_INLINE_LIMITS (old_result)\n@@ -1949,7 +1941,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* Never inline re-defined extern inline functions.\n \t     FIXME: this could be better handled by keeping both\n \t     function as separate declarations.  */\n-\t  DECL_INLINE (newdecl) = 0;\n \t  DECL_UNINLINABLE (newdecl) = 1;\n \t}\n       else\n@@ -1959,12 +1950,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n \t  DECL_DECLARED_INLINE_P (newdecl) |= DECL_DECLARED_INLINE_P (olddecl);\n \n-\t  /* If either decl says `inline', this fn is inline, unless\n-\t     its definition was passed already.  */\n-\t  if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == NULL_TREE)\n-\t    DECL_INLINE (olddecl) = 1;\n-\t  DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n-\n \t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n \t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n \n@@ -6649,11 +6634,6 @@ grokfndecl (tree ctype,\n   /* If the declaration was declared inline, mark it as such.  */\n   if (inlinep)\n     DECL_DECLARED_INLINE_P (decl) = 1;\n-  /* We inline functions that are explicitly declared inline, or, when\n-     the user explicitly asks us to, all functions.  */\n-  if (DECL_DECLARED_INLINE_P (decl)\n-      || (!DECL_INLINE (decl) && funcdef_flag))\n-    DECL_INLINE (decl) = 1;\n \n   DECL_EXTERNAL (decl) = 1;\n   if (quals && TREE_CODE (type) == FUNCTION_TYPE)\n@@ -12138,8 +12118,6 @@ start_method (cp_decl_specifier_seq *declspecs,\n   check_template_shadow (fndecl);\n \n   DECL_DECLARED_INLINE_P (fndecl) = 1;\n-  if (flag_default_inline)\n-    DECL_INLINE (fndecl) = 1;\n \n   /* We process method specializations in finish_struct_1.  */\n   if (processing_template_decl && !DECL_TEMPLATE_SPECIALIZATION (fndecl))"}, {"sha": "05f75f7de8413087d0e212a1dc7357d2b58c9de7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -837,7 +837,6 @@ grokfield (const cp_declarator *declarator,\n \t\t  DECL_DEFAULTED_FN (value) = 1;\n \t\t  DECL_INITIALIZED_IN_CLASS_P (value) = 1;\n \t\t  DECL_DECLARED_INLINE_P (value) = 1;\n-\t\t  DECL_INLINE (value) = 1;\n \t\t}\n \t    }\n \t  else if (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE)\n@@ -2702,7 +2701,6 @@ start_static_storage_duration_function (unsigned count)\n \t\t\t       type);\n   TREE_PUBLIC (ssdf_decl) = 0;\n   DECL_ARTIFICIAL (ssdf_decl) = 1;\n-  DECL_INLINE (ssdf_decl) = 1;\n \n   /* Put this function in the list of functions to be called from the\n      static constructors and destructors.  */"}, {"sha": "b215d2a3936a69b37de743ce553fd78aa43cf227", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -155,7 +155,6 @@ make_thunk (tree function, bool this_adjusting,\n   DECL_NO_STATIC_CHAIN (thunk) = 1;\n   /* The THUNK is not a pending inline, even if the FUNCTION is.  */\n   DECL_PENDING_INLINE_P (thunk) = 0;\n-  DECL_INLINE (thunk) = 0;\n   DECL_DECLARED_INLINE_P (thunk) = 0;\n   /* Nor has it been deferred.  */\n   DECL_DEFERRED_FN (thunk) = 0;\n@@ -281,7 +280,6 @@ make_alias_for (tree function, tree newid)\n   DECL_ARTIFICIAL (alias) = 1;\n   DECL_NO_STATIC_CHAIN (alias) = 1;\n   DECL_PENDING_INLINE_P (alias) = 0;\n-  DECL_INLINE (alias) = 0;\n   DECL_DECLARED_INLINE_P (alias) = 0;\n   DECL_DEFERRED_FN (alias) = 0;\n   DECL_USE_TEMPLATE (alias) = 0;\n@@ -1111,7 +1109,6 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   DECL_DEFAULTED_FN (fn) = 1;\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n   DECL_DECLARED_INLINE_P (fn) = 1;\n-  DECL_INLINE (fn) = 1;\n   gcc_assert (!TREE_USED (fn));\n \n   /* Restore PROCESSING_TEMPLATE_DECL.  */"}, {"sha": "8c7b9e82ccb5cbcc700dfe3d42651b953a09a11b", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -138,7 +138,6 @@ maybe_clone_body (tree fn)\n \n       /* Update CLONE's source position information to match FN's.  */\n       DECL_SOURCE_LOCATION (clone) = DECL_SOURCE_LOCATION (fn);\n-      DECL_INLINE (clone) = DECL_INLINE (fn);\n       DECL_DECLARED_INLINE_P (clone) = DECL_DECLARED_INLINE_P (fn);\n       DECL_COMDAT (clone) = DECL_COMDAT (fn);\n       DECL_WEAK (clone) = DECL_WEAK (fn);"}, {"sha": "04fd29bb0092e3f4b710805de7418268ebe6c130", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993555181042e01fcdb573a44f4c787a3e50e25a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=993555181042e01fcdb573a44f4c787a3e50e25a", "patch": "@@ -1289,12 +1289,8 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend)\n \t\tto the primary function; now copy the inline bits to\n \t\tthe various clones.  */\n \t      FOR_EACH_CLONE (clone, fn)\n-\t\t{\n-\t\t  DECL_DECLARED_INLINE_P (clone)\n-\t\t    = DECL_DECLARED_INLINE_P (fn);\n-\t\t  DECL_INLINE (clone)\n-\t\t    = DECL_INLINE (fn);\n-\t\t}\n+\t\tDECL_DECLARED_INLINE_P (clone)\n+\t\t  = DECL_DECLARED_INLINE_P (fn);\n \t      check_specialization_namespace (fn);\n \n \t      return fn;\n@@ -14921,8 +14917,6 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n       if (DECL_DECLARED_INLINE_P (code_pattern)\n \t  && !DECL_DECLARED_INLINE_P (decl))\n \tDECL_DECLARED_INLINE_P (decl) = 1;\n-      if (DECL_INLINE (code_pattern) && !DECL_INLINE (decl))\n-\tDECL_INLINE (decl) = 1;\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)\n     DECL_INITIAL (decl) ="}]}