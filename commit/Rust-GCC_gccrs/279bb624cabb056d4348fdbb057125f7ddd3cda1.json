{"sha": "279bb624cabb056d4348fdbb057125f7ddd3cda1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5YmI2MjRjYWJiMDU2ZDQzNDhmZGJiMDU3MTI1ZjdkZGQzY2RhMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2006-03-29T21:07:12Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2006-03-29T21:07:12Z"}, "message": "genemit.c (main): Add tm-constrs.h to included headers.\n\n        * genemit.c (main): Add tm-constrs.h to included headers.\n        * genoutput.c (output_prologue): Add tm-constrs.h to included headers.\n        * genpeep.c (main): Add tm-constrs.h to included headers.\n        * genpreds.c (write_satisfies_constraint_fns): Rename to ...\n        (write_tm_constrs_h): this and write complete file.\n        (write_tm_preds_h): Do not emit satisfies_constraint fns.\n        (write_insn_preds_c): Add tm-constrs.h to included headers.\n        (gen_constrs): New variable.\n        (parse_option): Parse \"-c\".\n        (main): Invoke write_tm_constrs_h.\n        * genrecog.c (write_header): Add tm-constrs.h to included headers.\n        * Makefile.in (STAGECOPYSTUFF): Add tm-constrs.h.\n        (object_out_file): Add tm-constrs.h dependency.\n        (insn-emit.o): Same.\n        (insn-output.o): Same.\n        (insn-peep.o): Same.\n        (insn-preds.o): Same.\n        (insn-recog.o): Same.\n        (tm-constsr.h): New target.\n        (s-constrs-h): New target.\n\n        * config/rs6000/constraints.md: New file.\n        * config/rs6000/rs6000.c: Include tm-constrs.h.\n        (num_insn_constant_wide): Convert to satisfies_constraint.\n        (rs6000_rtx_costs): Convert to satisfies_constraint.\n        * config/rs6000/rs6000.h (REG_CLASS_FROM_LETTER): Delete.\n        (CONST_OK_FOR_LETTER_P): Delete.\n        (CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n        (EXTRA_CONSTRAINT): Delete.\n        (EXTRA_MEMORY_CONSTRAINT): Delete.\n        (EXTRA_ADDRESS_CONSTRAINT): Delete.\n        * config/rs6000/predicates.md: Convert to satisfies_constraint.\n        * config/rs6000/rs6000.md: Include constraints.md.  Convert to\n        satisfies_constraint.\n\n        * config/i386/i386.c: Include tm-constrs.h.\n\nFrom-SVN: r112508", "tree": {"sha": "b92c3b92e723738ff4b915ca3eb1245bee47ad20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b92c3b92e723738ff4b915ca3eb1245bee47ad20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/279bb624cabb056d4348fdbb057125f7ddd3cda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279bb624cabb056d4348fdbb057125f7ddd3cda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279bb624cabb056d4348fdbb057125f7ddd3cda1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279bb624cabb056d4348fdbb057125f7ddd3cda1/comments", "author": null, "committer": null, "parents": [{"sha": "e14b10df7a1935c2c403e5711bab1ba25dfc1cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14b10df7a1935c2c403e5711bab1ba25dfc1cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14b10df7a1935c2c403e5711bab1ba25dfc1cee"}], "stats": {"total": 433, "additions": 277, "deletions": 156}, "files": [{"sha": "8a29a797602764ebb37ada717f02703a97daacde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -1,3 +1,42 @@\n+2006-03-29  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* genemit.c (main): Add tm-constrs.h to included headers.\n+\t* genoutput.c (output_prologue): Add tm-constrs.h to included headers.\n+\t* genpeep.c (main): Add tm-constrs.h to included headers.\n+\t* genpreds.c (write_satisfies_constraint_fns): Rename to ...\n+\t(write_tm_constrs_h): this and write complete file.\n+\t(write_tm_preds_h): Do not emit satisfies_constraint fns.\n+\t(write_insn_preds_c): Add tm-constrs.h to included headers.\n+\t(gen_constrs): New variable.\n+\t(parse_option): Parse \"-c\".\n+\t(main): Invoke write_tm_constrs_h.\n+\t* genrecog.c (write_header): Add tm-constrs.h to included headers.\n+\t* Makefile.in (STAGECOPYSTUFF): Add tm-constrs.h.\n+\t(object_out_file): Add tm-constrs.h dependency.\n+\t(insn-emit.o): Same.\n+\t(insn-output.o): Same.\n+\t(insn-peep.o): Same.\n+\t(insn-preds.o): Same.\n+\t(insn-recog.o): Same.\n+\t(tm-constsr.h): New target.\n+\t(s-constrs-h): New target.\n+\n+\t* config/rs6000/constraints.md: New file.\n+\t* config/rs6000/rs6000.c: Include tm-constrs.h.\n+\t(num_insn_constant_wide): Convert to satisfies_constraint.\n+\t(rs6000_rtx_costs): Convert to satisfies_constraint.\n+\t* config/rs6000/rs6000.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P): Delete.\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\t(EXTRA_MEMORY_CONSTRAINT): Delete.\n+\t(EXTRA_ADDRESS_CONSTRAINT): Delete.\n+\t* config/rs6000/predicates.md: Convert to satisfies_constraint.\n+\t* config/rs6000/rs6000.md: Include constraints.md.  Convert to\n+\tsatisfies_constraint.\n+\n+\t* config/i386/i386.c: Include tm-constrs.h.\n+\n 2006-03-29  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* tree-loop-linear.c (compute_data_dependences_for_loop): Adjust calls."}, {"sha": "51db2ea020d484f7ef99c12a6a2f77f2bbba0372", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -1016,7 +1016,7 @@ BACKEND = main.o @TREEBROWSER@ libbackend.a $(CPPLIB) $(LIBDECNUMBER)\n STAGECOPYSTUFF = insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-preds.c insn-constants.h \\\n- tm-preds.h \\\n+ tm-preds.h tm-constrs.h \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n  genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-gen.h\n \n@@ -2601,7 +2601,7 @@ $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\\n    output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) libfuncs.h \\\n    $(TARGET_DEF_H) $(FUNCTION_H) $(SCHED_INT_H) $(TM_P_H) $(EXPR_H) \\\n-   langhooks.h $(GGC_H) $(OPTABS_H) $(REAL_H)\n+   langhooks.h $(GGC_H) $(OPTABS_H) $(REAL_H) tm-constrs.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n \n@@ -2660,7 +2660,7 @@ insn-automata.o : insn-automata.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   $(RTL_H) $(EXPR_H) $(REAL_H) output.h insn-config.h $(OPTABS_H)\t\\\n   reload.h $(RECOG_H) toplev.h $(FUNCTION_H) $(FLAGS_H) hard-reg-set.h\t\\\n-  $(RESOURCE_H) $(TM_P_H) $(BASIC_BLOCK_H)\n+  $(RESOURCE_H) $(TM_P_H) $(BASIC_BLOCK_H) tm-constrs.h\n insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) toplev.h insn-config.h $(RECOG_H)\n insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t$(TM_H) \\\n@@ -2672,18 +2672,18 @@ insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(GGC_H) $(REGS_H) $(REAL_H) conditions.h\t\t\\\n   hard-reg-set.h insn-config.h $(INSN_ATTR_H) $(EXPR_H) output.h\t\\\n   $(RECOG_H) $(FUNCTION_H) toplev.h $(FLAGS_H) insn-codes.h $(TM_P_H)\t\\\n-  $(TARGET_H)\n+  $(TARGET_H) tm-constrs.h\n insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   $(RTL_H) $(REGS_H) output.h insn-config.h $(RECOG_H) except.h\t\t\\\n-  $(FUNCTION_H) $(TM_P_H) $(REAL_H)\n+  $(FUNCTION_H) $(TM_P_H) $(REAL_H) tm-constrs.h\n insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   $(TM_H) $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) output.h\t\t\\\n   $(FLAGS_H) $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\t\\\n-  toplev.h reload.h $(REGS_H) $(REAL_H)\n+  toplev.h reload.h $(REGS_H) $(REAL_H) tm-constrs.h\n insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   $(TM_H) $(RTL_H) insn-config.h $(RECOG_H) output.h $(FLAGS_H)\t\t\\\n   $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h\t\t\\\n-  reload.h $(REAL_H)\n+  reload.h $(REAL_H) tm-constrs.h\n \n # For each of the files generated by running a generator program over\n # the machine description, the following pair of static pattern rules\n@@ -2783,6 +2783,7 @@ s-modes-m: build/genmodes$(build_exeext)\n \n insn-preds.c: s-preds; @true\n tm-preds.h: s-preds-h; @true\n+tm-constrs.h: s-constrs-h; @true\n \n s-preds: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n@@ -2794,6 +2795,11 @@ s-preds-h: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h\n \t$(STAMP) s-preds-h\n \n+s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n+\t$(RUN_GEN) build/genpreds$(build_exeext) -c $(md_file) > tmp-constrs.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-constrs.h tm-constrs.h\n+\t$(STAMP) s-constrs-h\n+\n GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(CPP_ID_DATA_H) $(host_xm_file_list) \\\n   $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \\"}, {"sha": "5ba4a52d651a44521c6d3583f21efd9a3147c532", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -49,6 +49,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"cgraph.h\"\n #include \"tree-gimple.h\"\n #include \"dwarf2.h\"\n+#include \"tm-constrs.h\"\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)"}, {"sha": "114ba8ac2ebd3db1c51e34cf60ef48f7dce88558", "filename": "gcc/config/rs6000/constraints.md", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -0,0 +1,158 @@\n+;; Constraint definitions for RS6000\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; Register constraints\n+\n+(define_register_constraint \"f\" \"TARGET_HARD_FLOAT && TARGET_FPRS\n+\t\t\t \t ? FLOAT_REGS : NO_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"BASE_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"h\" \"SPECIAL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"q\" \"MQ_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"CTR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"l\" \"LINK_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"v\" \"ALTIVEC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"x\" \"CR0_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"CR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"z\" \"XER_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints\n+\n+(define_constraint \"I\"\n+  \"A signed 16-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(unsigned HOST_WIDE_INT) (ival + 0x8000) < 0x10000\")))\n+\n+(define_constraint \"J\"\n+  \"high-order 16 bits nonzero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & (~ (unsigned HOST_WIDE_INT) 0xffff0000)) == 0\")))\n+\n+(define_constraint \"K\"\n+  \"low-order 16 bits nonzero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & (~ (HOST_WIDE_INT) 0xffff)) == 0\")))\n+\n+(define_constraint \"L\"\n+  \"signed 16-bit constant shifted left 16 bits\"\n+  (and (match_code \"const_int\")\n+       (match_test \"((ival & 0xffff) == 0\n+\t\t      && (ival >> 31 == -1 || ival >> 31 == 0))\")))\n+\n+(define_constraint \"M\"\n+  \"constant greater than 31\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival) > 31\")))\n+\n+(define_constraint \"N\"\n+  \"positive constant that is an exact power of two\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival > 0 && exact_log2 (ival) >= 0\")))\n+\n+(define_constraint \"O\"\n+  \"constant zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"P\"\n+  \"constant whose negation is signed 16-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(unsigned HOST_WIDE_INT) ((- ival) + 0x8000) < 0x10000\")))\n+\n+;; Floating-point constraints\n+\n+(define_constraint \"G\"\n+  \"Constant that can be copied into GPR with two insns for DF/DI\n+   and one for SF.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"num_insns_constant (op, mode)\n+\t\t    == (mode == SFmode ? 1 : 2)\")))\n+\n+(define_constraint \"H\"\n+  \"DF/DI constant that takes three insns.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"num_insns_constant (op, mode) == 3\")))\n+\n+;; Memory constraints\n+\n+(define_memory_constraint \"Q\"\n+  \"Memory operand that is just an offset from a reg\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) == REG\")))\n+\n+(define_memory_constraint \"Y\"\n+  \"Indexed or word-aligned displacement memory operand\"\n+  (match_operand 0 \"word_offset_memref_operand\"))\n+\n+(define_memory_constraint \"Z\"\n+  \"Indexed or indirect memory operand\"\n+  (match_operand 0 \"indexed_or_indirect_operand\"))\n+\n+;; Address constraints\n+\n+(define_address_constraint \"a\"\n+  \"Indexed or indirect address operand\"\n+  (match_operand 0 \"indexed_or_indirect_address\"))\n+\n+(define_constraint \"R\"\n+  \"AIX TOC entry\"\n+  (match_test \"legitimate_constant_pool_address_p (op)\"))\n+\n+;; General constraints\n+\n+(define_constraint \"S\"\n+  \"Constant that can be placed into a 64-bit mask operand\"\n+  (match_operand 0 \"mask64_operand\"))\n+\n+(define_constraint \"T\"\n+  \"Constant that can be placed into a 32-bit mask operand\"\n+  (match_operand 0 \"mask_operand\"))\n+\n+(define_constraint \"U\"\n+  \"V.4 small data reference\"\n+  (and (match_test \"DEFAULT_ABI == ABI_V4\")\n+       (match_operand 0 \"small_data_operand\")))\n+\n+(define_constraint \"t\"\n+  \"AND masks that can be performed by two rldic{l,r} insns\n+   (but excluding those that could match other constraints of anddi3)\"\n+  (and (and (and (match_operand 0 \"mask64_2_operand\")\n+\t\t (match_test \"(fixed_regs[CR0_REGNO]\n+\t\t\t      || !logical_operand (op, DImode))\"))\n+\t    (not (match_operand 0 \"mask_operand\")))\n+       (not (match_operand 0 \"mask64_operand\"))))"}, {"sha": "e0486a9b06fc5173d13744135a9b14ef1763b0a6", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -63,12 +63,12 @@\n ;; Return 1 if op is a constant integer that can fit in a D field.\n (define_predicate \"short_cint_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\")))\n+       (match_test \"satisfies_constraint_I (op)\")))\n \n ;; Return 1 if op is a constant integer that can fit in an unsigned D field.\n (define_predicate \"u_short_cint_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\")))\n+       (match_test \"satisfies_constraint_K (op)\")))\n \n ;; Return 1 if op is a constant integer that cannot fit in a signed D field.\n (define_predicate \"non_short_cint_operand\"\n@@ -117,7 +117,7 @@\n ;; or equal to const, which does not work for zero.\n (define_predicate \"reg_or_neg_short_operand\"\n   (if_then_else (match_code \"const_int\")\n-    (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'P')\n+    (match_test \"satisfies_constraint_P (op)\n \t\t && INTVAL (op) != 0\")\n     (match_operand 0 \"gpc_reg_operand\")))\n \n@@ -400,15 +400,15 @@\n ;; as the operand of a `mode' add insn.\n (define_predicate \"add_operand\"\n   (if_then_else (match_code \"const_int\")\n-    (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n-\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\")\n+    (match_test \"satisfies_constraint_I (op)\n+\t\t || satisfies_constraint_L (op)\")\n     (match_operand 0 \"gpc_reg_operand\")))\n \n ;; Return 1 if OP is a constant but not a valid add_operand.\n (define_predicate \"non_add_cint_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"!CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n-\t\t    && !CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\")))\n+       (match_test \"!satisfies_constraint_I (op)\n+\t\t    && !satisfies_constraint_L (op)\")))\n \n ;; Return 1 if the operand is a constant that can be used as the operand\n ;; of an OR or XOR."}, {"sha": "aeecdfe7ce2b6aedfdce069aba30cb7b858ebdf3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -56,6 +56,7 @@\n #include \"tree-gimple.h\"\n #include \"intl.h\"\n #include \"params.h\"\n+#include \"tm-constrs.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -1992,11 +1993,11 @@ int\n num_insns_constant_wide (HOST_WIDE_INT value)\n {\n   /* signed constant loadable with {cal|addi} */\n-  if (CONST_OK_FOR_LETTER_P (value, 'I'))\n+  if (satisfies_constraint_I (GEN_INT (value)))\n     return 1;\n \n   /* constant loadable with {cau|addis} */\n-  else if (CONST_OK_FOR_LETTER_P (value, 'L'))\n+  else if (satisfies_constraint_L (GEN_INT (value)))\n     return 1;\n \n #if HOST_BITS_PER_WIDE_INT == 64\n@@ -18515,42 +18516,45 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n       if (((outer_code == SET\n \t    || outer_code == PLUS\n \t    || outer_code == MINUS)\n-\t   && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n-\t       || CONST_OK_FOR_LETTER_P (INTVAL (x), 'L')))\n+\t   && (satisfies_constraint_I (x)\n+\t       || satisfies_constraint_L (x)))\n \t  || (outer_code == AND\n-\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n-\t\t\t\t\t     mode == SImode ? 'L' : 'J'))\n+\t      && (satisfies_constraint_K (x)\n+\t\t  || (mode == SImode\n+\t\t      ? satisfies_constraint_L (x)\n+\t\t      : satisfies_constraint_J (x))\n \t\t  || mask_operand (x, mode)\n \t\t  || (mode == DImode\n \t\t      && mask64_operand (x, DImode))))\n \t  || ((outer_code == IOR || outer_code == XOR)\n-\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n-\t\t\t\t\t     mode == SImode ? 'L' : 'J'))))\n+\t      && (satisfies_constraint_K (x)\n+\t\t  || (mode == SImode\n+\t\t      ? satisfies_constraint_L (x)\n+\t\t      : satisfies_constraint_J (x))))\n \t  || outer_code == ASHIFT\n \t  || outer_code == ASHIFTRT\n \t  || outer_code == LSHIFTRT\n \t  || outer_code == ROTATE\n \t  || outer_code == ROTATERT\n \t  || outer_code == ZERO_EXTRACT\n \t  || (outer_code == MULT\n-\t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'I'))\n+\t      && satisfies_constraint_I (x))\n \t  || ((outer_code == DIV || outer_code == UDIV\n \t       || outer_code == MOD || outer_code == UMOD)\n \t      && exact_log2 (INTVAL (x)) >= 0)\n \t  || (outer_code == COMPARE\n-\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n-\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')))\n+\t      && (satisfies_constraint_I (x)\n+\t\t  || satisfies_constraint_K (x)))\n \t  || (outer_code == EQ\n-\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n-\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n-\t\t\t\t\t     mode == SImode ? 'L' : 'J'))))\n+\t      && (satisfies_constraint_I (x)\n+\t\t  || satisfies_constraint_K (x)\n+\t\t  || (mode == SImode\n+\t\t      ? satisfies_constraint_L (x)\n+\t\t      : satisfies_constraint_J (x))))\n \t  || (outer_code == GTU\n-\t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'I'))\n+\t      && satisfies_constraint_I (x))\n \t  || (outer_code == LTU\n-\t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'P')))\n+\t      && satisfies_constraint_P (x)))\n \t{\n \t  *total = 0;\n \t  return true;\n@@ -18573,8 +18577,8 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case CONST_DOUBLE:\n       if (mode == DImode\n \t  && ((outer_code == AND\n-\t       && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t   || CONST_OK_FOR_LETTER_P (INTVAL (x), 'L')\n+\t       && (satisfies_constraint_K (x)\n+\t\t   || satisfies_constraint_L (x)\n \t\t   || mask_operand (x, DImode)\n \t\t   || mask64_operand (x, DImode)))\n \t      || ((outer_code == IOR || outer_code == XOR)\n@@ -18664,7 +18668,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n \n     case MULT:\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t  && CONST_OK_FOR_LETTER_P (INTVAL (XEXP (x, 1)), 'I'))\n+\t  && satisfies_constraint_I (XEXP (x, 1)))\n \t{\n \t  if (INTVAL (XEXP (x, 1)) >= -256\n \t      && INTVAL (XEXP (x, 1)) <= 255)"}, {"sha": "b31d4372f95167b586a123d8b4d5f7b82edf7105", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -1057,107 +1057,6 @@ enum reg_class\n #define INDEX_REG_CLASS GENERAL_REGS\n #define BASE_REG_CLASS BASE_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n-\n-#define REG_CLASS_FROM_LETTER(C) \\\n-  ((C) == 'f' ? ((TARGET_HARD_FLOAT && TARGET_FPRS) ? FLOAT_REGS : NO_REGS) \\\n-   : (C) == 'b' ? BASE_REGS\t\\\n-   : (C) == 'h' ? SPECIAL_REGS\t\\\n-   : (C) == 'q' ? MQ_REGS\t\\\n-   : (C) == 'c' ? CTR_REGS\t\\\n-   : (C) == 'l' ? LINK_REGS\t\\\n-   : (C) == 'v' ? ALTIVEC_REGS\t\\\n-   : (C) == 'x' ? CR0_REGS\t\\\n-   : (C) == 'y' ? CR_REGS\t\\\n-   : (C) == 'z' ? XER_REGS\t\\\n-   : NO_REGS)\n-\n-/* The letters I, J, K, L, M, N, and P in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\n-   `I' is a signed 16-bit constant\n-   `J' is a constant with only the high-order 16 bits nonzero\n-   `K' is a constant with only the low-order 16 bits nonzero\n-   `L' is a signed 16-bit constant shifted left 16 bits\n-   `M' is a constant that is greater than 31\n-   `N' is a positive constant that is an exact power of two\n-   `O' is the constant zero\n-   `P' is a constant whose negation is a signed 16-bit constant */\n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n-   ( (C) == 'I' ? (unsigned HOST_WIDE_INT) ((VALUE) + 0x8000) < 0x10000\t\\\n-   : (C) == 'J' ? ((VALUE) & (~ (unsigned HOST_WIDE_INT) 0xffff0000)) == 0 \\\n-   : (C) == 'K' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff)) == 0\t\t\\\n-   : (C) == 'L' ? (((VALUE) & 0xffff) == 0\t\t\t\t\\\n-\t\t   && ((VALUE) >> 31 == -1 || (VALUE) >> 31 == 0))\t\\\n-   : (C) == 'M' ? (VALUE) > 31\t\t\t\t\t\t\\\n-   : (C) == 'N' ? (VALUE) > 0 && exact_log2 (VALUE) >= 0\t\t\\\n-   : (C) == 'O' ? (VALUE) == 0\t\t\t\t\t\t\\\n-   : (C) == 'P' ? (unsigned HOST_WIDE_INT) ((- (VALUE)) + 0x8000) < 0x10000 \\\n-   : 0)\n-\n-/* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself.\n-\n-   We flag for special constants when we can copy the constant into\n-   a general register in two insns for DF/DI and one insn for SF.\n-\n-   'H' is used for DI/DF constants that take 3 insns.  */\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n-  (  (C) == 'G' ? (num_insns_constant (VALUE, GET_MODE (VALUE))\t\t\\\n-\t\t   == ((GET_MODE (VALUE) == SFmode) ? 1 : 2))\t\t\\\n-   : (C) == 'H' ? (num_insns_constant (VALUE, GET_MODE (VALUE)) == 3)\t\\\n-   : 0)\n-\n-/* Optional extra constraints for this machine.\n-\n-   'Q' means that is a memory operand that is just an offset from a reg.\n-   'R' is for AIX TOC entries.\n-   'S' is a constant that can be placed into a 64-bit mask operand.\n-   'T' is a constant that can be placed into a 32-bit mask operand.\n-   'U' is for V.4 small data references.\n-   'W' is a vector constant that can be easily generated (no mem refs).\n-   'Y' is an indexed or word-aligned displacement memory operand.\n-   'Z' is an indexed or indirect memory operand.\n-   'a'  is an indexed or indirect address operand.\n-   't' is for AND masks that can be performed by two rldic{l,r} insns\n-       (but excluding those that could match other constraints of anddi3.)  */\n-\n-#define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n-  ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG\t\\\n-   : (C) == 'R' ? legitimate_constant_pool_address_p (OP)\t\t\\\n-   : (C) == 'S' ? mask64_operand (OP, DImode)\t\t\t\t\\\n-   : (C) == 'T' ? mask_operand (OP, GET_MODE (OP))\t\t\t\\\n-   : (C) == 'U' ? (DEFAULT_ABI == ABI_V4\t\t\t\t\\\n-\t\t   && small_data_operand (OP, GET_MODE (OP)))\t\t\\\n-   : (C) == 't' ? (mask64_2_operand (OP, DImode)\t\t\t\\\n-\t\t   && (fixed_regs[CR0_REGNO]\t\t\t\t\\\n-\t\t       || !logical_operand (OP, DImode))\t\t\\\n-\t\t   && !mask_operand (OP, DImode)\t\t\t\\\n-\t\t   && !mask64_operand (OP, DImode))\t\t\t\\\n-   : (C) == 'W' ? (easy_vector_constant (OP, GET_MODE (OP)))\t\t\\\n-   : (C) == 'Y' ? (word_offset_memref_operand (OP, GET_MODE (OP)))      \\\n-   : (C) == 'Z' ? (indexed_or_indirect_operand (OP, GET_MODE (OP)))\t\\\n-   : (C) == 'a' ? (indexed_or_indirect_address (OP, GET_MODE (OP)))\t\\\n-   : 0)\n-\n-/* Define which constraints are memory constraints.  Tell reload\n-   that any memory address can be reloaded by copying the\n-   memory address into a base register if required.  */\n-\n-#define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n-  ((C) == 'Q' || (C) == 'Y' || (C) == 'Z')\n-\n-/* Define which constraints should be treated like address constraints\n-   by the reload pass.  */\n-\n-#define EXTRA_ADDRESS_CONSTRAINT(C, STR)\t\t\t\\\n-  ((C) == 'a')\n-\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "1cee3c809192d9110775bf9a76f4304cb49e8a15", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -126,6 +126,7 @@\n (include \"power5.md\")\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n (include \"darwin.md\")\n \n@@ -1434,7 +1435,6 @@\n \t(plus:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:SDI 2 \"reg_or_add_cint_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (<MODE>mode == DImode && ! TARGET_POWERPC64)\n     {\n@@ -1451,7 +1451,7 @@\n       HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n       HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n \n-      if (<MODE>mode == DImode && !CONST_OK_FOR_LETTER_P (rest, 'L'))\n+      if (<MODE>mode == DImode && !satisfies_constraint_L (GEN_INT (rest)))\n \tFAIL;\n \n       /* The ordering here is important for the prolog expander.\n@@ -1461,7 +1461,7 @@\n       emit_insn (gen_add<mode>3 (operands[0], tmp, GEN_INT (low)));\n       DONE;\n     }\n-}\")\n+})\n \n ;; Discourage ai/addic because of carry but provide it in an alternative\n ;; allowing register zero as source.\n@@ -1559,14 +1559,13 @@\n   \"\"\n   [(set (match_dup 0) (plus:GPR (match_dup 1) (match_dup 3)))\n    (set (match_dup 0) (plus:GPR (match_dup 0) (match_dup 4)))]\n-\"\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n   HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n   HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n \n   operands[4] = GEN_INT (low);\n-  if (<MODE>mode == SImode || CONST_OK_FOR_LETTER_P (rest, 'L'))\n+  if (<MODE>mode == SImode || satisfies_constraint_L (GEN_INT (rest)))\n     operands[3] = GEN_INT (rest);\n   else if (! no_new_pseudos)\n     {\n@@ -1577,7 +1576,7 @@\n     }\n   else\n     FAIL;\n-}\")\n+})\n \n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")"}, {"sha": "79db84e7b30d4b129a5dfd70bf0d4f49dd784d42", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -844,6 +844,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"resource.h\\\"\\n\");\n   printf (\"#include \\\"reload.h\\\"\\n\");\n   printf (\"#include \\\"toplev.h\\\"\\n\");\n+  printf (\"#include \\\"tm-constrs.h\\\"\\n\");\n   printf (\"#include \\\"ggc.h\\\"\\n\\n\");\n   printf (\"#include \\\"basic-block.h\\\"\\n\\n\");\n   printf (\"#define FAIL return (end_sequence (), _val)\\n\");"}, {"sha": "ddece1c23090c780a0679a3d28f20fb11e642d28", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -244,6 +244,7 @@ output_prologue (void)\n   printf (\"#include \\\"toplev.h\\\"\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");\n   printf (\"#include \\\"target.h\\\"\\n\");\n+  printf (\"#include \\\"tm-constrs.h\\\"\\n\");\n }\n \n static void"}, {"sha": "5c5804b6fadc2a1e00b901b7572a753e49231890", "filename": "gcc/genpeep.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -376,8 +376,9 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");\n   printf (\"#include \\\"real.h\\\"\\n\");\n   printf (\"#include \\\"recog.h\\\"\\n\");\n-  printf (\"#include \\\"except.h\\\"\\n\\n\");\n-  printf (\"#include \\\"function.h\\\"\\n\\n\");\n+  printf (\"#include \\\"except.h\\\"\\n\");\n+  printf (\"#include \\\"function.h\\\"\\n\");\n+  printf (\"#include \\\"tm-constrs.h\\\"\\n\\n\");\n \n   printf (\"#ifdef HAVE_peephole\\n\");\n   printf (\"extern rtx peep_operand[];\\n\\n\");"}, {"sha": "5289ebb044572b8dba6b0b91ef923571655839b5", "filename": "gcc/genpreds.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -947,13 +947,19 @@ write_regclass_for_constraint (void)\n /* Write out the functions which compute whether a given value matches\n    a given non-register constraint.  */\n static void\n-write_satisfies_constraint_fns (void)\n+write_tm_constrs_h (void)\n {\n   struct constraint_data *c;\n+  struct pred_data *p;\n+\n+  printf (\"\\\n+/* Generated automatically by the program '%s'\\n\\\n+   from the machine description file '%s'.  */\\n\\n\", progname, in_fname);\n+\n+  puts (\"\\\n+#ifndef GCC_TM_CONSTRS_H\\n\\\n+#define GCC_TM_CONSTRS_H\\n\");\n \n-  /* A fair number of places include tm_p.h without including rtl.h.  */\n-  puts (\"#ifdef GCC_RTL_H\\n\");\n-  \n   FOR_ALL_CONSTRAINTS (c)\n     if (!c->is_register)\n       {\n@@ -995,8 +1001,7 @@ write_satisfies_constraint_fns (void)\n \twrite_predicate_expr (c->exp);\n \tfputs (\";\\n}\\n\", stdout);\n       }\n-\n-  puts (\"\\n#endif /* rtl.h visible */\\n\");\n+  puts (\"#endif /* tm-constrs.h */\");\n }\n \n /* Write out the wrapper function, constraint_satisfied_p, that maps\n@@ -1172,10 +1177,6 @@ write_tm_preds_h (void)\n \t      \"insn_extra_address_constraint (lookup_constraint (s_))\\n\");\n       else\n \tputs (\"#define EXTRA_ADDRESS_CONSTRAINT(c_,s_) false\\n\");\n-\n-      if (have_const_int_constraints || have_const_dbl_constraints\n-\t  || have_extra_constraints)\n-\twrite_satisfies_constraint_fns ();\n     }\n \n   puts (\"#endif /* tm-preds.h */\");\n@@ -1216,7 +1217,8 @@ write_insn_preds_c (void)\n #include \\\"resource.h\\\"\\n\\\n #include \\\"toplev.h\\\"\\n\\\n #include \\\"reload.h\\\"\\n\\\n-#include \\\"regs.h\\\"\\n\");\n+#include \\\"regs.h\\\"\\n\\\n+#include \\\"tm-constrs.h\\\"\\n\");\n \n   FOR_ALL_PREDICATES (p)\n     write_one_predicate_function (p);\n@@ -1242,6 +1244,8 @@ write_insn_preds_c (void)\n \n /* Argument parsing.  */\n static bool gen_header;\n+static bool gen_constrs;\n+\n static bool\n parse_option (const char *opt)\n {\n@@ -1250,6 +1254,11 @@ parse_option (const char *opt)\n       gen_header = true;\n       return 1;\n     }\n+  else if (!strcmp (opt, \"-c\"))\n+    {\n+      gen_constrs = true;\n+      return 1;\n+    }\n   else\n     return 0;\n }\n@@ -1291,6 +1300,8 @@ main (int argc, char **argv)\n \n   if (gen_header)\n     write_tm_preds_h ();\n+  else if (gen_constrs)\n+    write_tm_constrs_h ();\n   else\n     write_insn_preds_c ();\n "}, {"sha": "a65137ab37717b0acd4c5b25923c629455b81fd0", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279bb624cabb056d4348fdbb057125f7ddd3cda1/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=279bb624cabb056d4348fdbb057125f7ddd3cda1", "patch": "@@ -2496,6 +2496,7 @@ write_header (void)\n #include \\\"resource.h\\\"\\n\\\n #include \\\"toplev.h\\\"\\n\\\n #include \\\"reload.h\\\"\\n\\\n+#include \\\"tm-constrs.h\\\"\\n\\\n \\n\");\n \n   puts (\"\\n\\"}]}