{"sha": "6ffe854859e61fd04e1db8694e2c519f4010647b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmZTg1NDg1OWU2MWZkMDRlMWRiODY5NGUyYzUxOWY0MDEwNjQ3Yg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-06T13:26:10Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-06T13:26:10Z"}, "message": "Implement LWG 2451, optional<T> should 'forward' T's implicit conversions.\n\n\tImplement LWG 2451, optional<T> should 'forward' T's\n\timplicit conversions.\n\t* include/experimental/optional (__is_optional_impl, __is_optional):\n\tNew.\n\t(optional()): Make constexpr and default.\n\t(optional(_Up&&), optional(const optional<_Up>&),\n\toptional(optional<_Up>&& __t): New.\n\t(operator=(_Up&&)): Constrain.\n\t(operator=(const optional<_Up>&), operator=(optional<_Up>&&)): New.\n\t* testsuite/experimental/optional/cons/value.cc:\n\tAdd tests for the functionality added by LWG 2451.\n\t* testsuite/experimental/optional/cons/value_neg.cc: New.\n\nFrom-SVN: r238049", "tree": {"sha": "957dd6c8746ccbf44024331b3ac6724659ec9dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/957dd6c8746ccbf44024331b3ac6724659ec9dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ffe854859e61fd04e1db8694e2c519f4010647b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe854859e61fd04e1db8694e2c519f4010647b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffe854859e61fd04e1db8694e2c519f4010647b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe854859e61fd04e1db8694e2c519f4010647b/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc"}], "stats": {"total": 221, "additions": 219, "deletions": 2}, "files": [{"sha": "46f7f748f650092fcf5290c5a67f4d121d8d169e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6ffe854859e61fd04e1db8694e2c519f4010647b", "patch": "@@ -1,3 +1,18 @@\n+2016-07-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2451, optional<T> should 'forward' T's\n+\timplicit conversions.\n+\t* include/experimental/optional (__is_optional_impl, __is_optional):\n+\tNew.\n+\t(optional()): Make constexpr and default.\n+\t(optional(_Up&&), optional(const optional<_Up>&),\n+\toptional(optional<_Up>&& __t): New.\n+\t(operator=(_Up&&)): Constrain.\n+\t(operator=(const optional<_Up>&), operator=(optional<_Up>&&)): New.\n+\t* testsuite/experimental/optional/cons/value.cc:\n+\tAdd tests for the functionality added by LWG 2451.\n+\t* testsuite/experimental/optional/cons/value_neg.cc: New.\n+\n 2016-07-05  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement LWG 2509,"}, {"sha": "b6425b7d00ef86dedb04e043502b68966f947858", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 146, "deletions": 2, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=6ffe854859e61fd04e1db8694e2c519f4010647b", "patch": "@@ -470,6 +470,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool _M_engaged = false;\n     };\n \n+  template<typename _Tp>\n+  class optional;\n+\n+  template<typename>\n+    struct __is_optional_impl : false_type\n+    { };\n+\n+  template<typename _Tp>\n+  struct __is_optional_impl<optional<_Tp>> : true_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_optional\n+    : public __is_optional_impl<std::remove_cv_t<std::remove_reference_t<_Tp>>>\n+    { };\n+\n+\n   /**\n     * @brief Class template for optional values.\n     */\n@@ -502,6 +519,78 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _Optional_base has the responsibility for construction.\n       using _Base::_Base;\n \n+      constexpr optional() = default;\n+      // Converting constructors for engaged optionals.\n+      template <typename _Up,\n+                enable_if_t<__and_<\n+\t\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t\t      is_constructible<_Tp, _Up&&>,\n+\t\t\t      is_convertible<_Up&&, _Tp>\n+\t\t\t      >::value, bool> = true>\n+      constexpr optional(_Up&& __t)\n+        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+\n+      template <typename _Up,\n+                enable_if_t<__and_<\n+\t\t\t    __not_<is_same<_Tp, _Up>>,\n+\t\t\t    is_constructible<_Tp, _Up&&>,\n+\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t    >::value, bool> = false>\n+      explicit constexpr optional(_Up&& __t)\n+        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+\n+      template <typename _Up,\n+                enable_if_t<__and_<\n+\t\t\t    __not_<is_same<_Tp, _Up>>,\n+\t\t\t    __not_<is_constructible<\n+\t\t\t      _Tp, const optional<_Up>&>>,\n+\t\t\t    __not_<is_convertible<\n+\t\t\t      const optional<_Up>&, _Tp>>,\n+\t\t\t    is_constructible<_Tp, const _Up&>,\n+\t\t\t    is_convertible<const _Up&, _Tp>\n+\t\t\t    >::value, bool> = true>\n+      constexpr optional(const optional<_Up>& __t)\n+        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+\n+      template <typename _Up,\n+                 enable_if_t<__and_<\n+\t\t\t       __not_<is_same<_Tp, _Up>>,\n+\t\t\t       __not_<is_constructible<\n+\t\t\t\t\t_Tp, const optional<_Up>&>>,\n+\t\t\t       __not_<is_convertible<\n+\t\t\t\t const optional<_Up>&, _Tp>>,\n+\t\t\t       is_constructible<_Tp, const _Up&>,\n+\t\t\t       __not_<is_convertible<const _Up&, _Tp>>\n+\t\t\t       >::value, bool> = false>\n+      explicit constexpr optional(const optional<_Up>& __t)\n+        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+\n+      template <typename _Up,\n+                enable_if_t<__and_<\n+\t\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t\t      __not_<is_constructible<\n+\t\t\t\t       _Tp, optional<_Up>&&>>,\n+\t\t\t      __not_<is_convertible<\n+\t\t\t\t       optional<_Up>&&, _Tp>>,\n+\t\t\t      is_constructible<_Tp, _Up&&>,\n+\t\t\t      is_convertible<_Up&&, _Tp>\n+\t\t\t      >::value, bool> = true>\n+      constexpr optional(optional<_Up>&& __t)\n+        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+\n+      template <typename _Up,\n+                enable_if_t<__and_<\n+\t\t\t    __not_<is_same<_Tp, _Up>>,\n+\t\t\t    __not_<is_constructible<\n+\t\t\t\t     _Tp, optional<_Up>&&>>,\n+\t\t\t    __not_<is_convertible<\n+\t\t\t\t     optional<_Up>&&, _Tp>>,\n+\t\t\t    is_constructible<_Tp, _Up&&>,\n+\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t    >::value, bool> = false>\n+      explicit constexpr optional(optional<_Up>&& __t)\n+        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+\n       // [X.Y.4.3] (partly) Assignment.\n       optional&\n       operator=(nullopt_t) noexcept\n@@ -510,8 +599,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      template<typename _Up>\n-        enable_if_t<is_same<_Tp, decay_t<_Up>>::value, optional&>\n+      template<typename _Up,\n+               enable_if_t<__and_<\n+\t\t\t   __not_<is_same<_Up, nullopt_t>>,\n+\t\t\t   __not_<__is_optional<_Up>>>::value,\n+\t\t\t bool> = true>\n+        optional&\n         operator=(_Up&& __u)\n         {\n           static_assert(__and_<is_constructible<_Tp, _Up>,\n@@ -526,6 +619,57 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           return *this;\n         }\n \n+      template<typename _Up,\n+               enable_if_t<__and_<\n+\t\t __not_<is_same<_Tp, _Up>>>::value,\n+\t\t\t   bool> = true>\n+        optional&\n+        operator=(const optional<_Up>& __u)\n+        {\n+          static_assert(__and_<is_constructible<_Tp, _Up>,\n+\t\t\t       is_assignable<_Tp&, _Up>>(),\n+                        \"Cannot assign to value type from argument\");\n+\n+          if (__u)\n+            {\n+              if (this->_M_is_engaged())\n+                this->_M_get() = *__u;\n+              else\n+                this->_M_construct(*__u);\n+            }\n+          else\n+            {\n+              this->_M_reset();\n+            }\n+          return *this;\n+        }\n+\n+      template<typename _Up,\n+               enable_if_t<__and_<\n+\t\t __not_<is_same<_Tp, _Up>>>::value,\n+\t\t\t   bool> = true>\n+        optional&\n+        operator=(optional<_Up>&& __u)\n+        {\n+          static_assert(__and_<is_constructible<_Tp, _Up>,\n+\t\t\t       is_assignable<_Tp&, _Up>>(),\n+                        \"Cannot assign to value type from argument\");\n+\n+          if (__u)\n+            {\n+              if (this->_M_is_engaged())\n+                this->_M_get() = std::move(*__u);\n+              else\n+                this->_M_construct(std::move(*__u));\n+            }\n+          else\n+            {\n+              this->_M_reset();\n+            }\n+\n+          return *this;\n+        }\n+\n       template<typename... _Args>\n \tvoid\n \templace(_Args&&... __args)"}, {"sha": "123a89ede040daf075bcdbfc460d33874d434161", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/value.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc?ref=6ffe854859e61fd04e1db8694e2c519f4010647b", "patch": "@@ -22,6 +22,7 @@\n #include <testsuite_hooks.h>\n \n #include <vector>\n+#include <string>\n \n struct tracker\n {\n@@ -236,4 +237,22 @@ int main()\n \n     VERIFY( result == caught );\n   }\n+\n+  {\n+    std::experimental::optional<std::string> os = \"foo\";\n+    struct X\n+    {\n+      explicit X(int) {}\n+      X& operator=(int) {return *this;}\n+    };\n+    std::experimental::optional<X> ox{42};\n+    std::experimental::optional<int> oi{42};\n+    std::experimental::optional<X> ox2{oi};\n+    std::experimental::optional<std::string> os2;\n+    os2 = \"foo\";\n+    std::experimental::optional<X> ox3;\n+    ox3 = 42;\n+    std::experimental::optional<X> ox4;\n+    ox4 = oi;\n+  }\n }"}, {"sha": "c862a04986a735917a1d768606b5100ff049aa46", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/value_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffe854859e61fd04e1db8694e2c519f4010647b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue_neg.cc?ref=6ffe854859e61fd04e1db8694e2c519f4010647b", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/optional>\n+#include <testsuite_hooks.h>\n+\n+#include <string>\n+#include <memory>\n+\n+int main()\n+{\n+  {\n+    struct X\n+    {\n+      explicit X(int) {}\n+    };\n+    std::experimental::optional<X> ox{42};\n+    std::experimental::optional<X> ox2 = 42; // { dg-error \"conversion\" }\n+    std::experimental::optional<std::unique_ptr<int>> oup{new int};\n+    std::experimental::optional<std::unique_ptr<int>> oup2 = new int;  // { dg-error \"conversion\" }\n+  }\n+}"}]}