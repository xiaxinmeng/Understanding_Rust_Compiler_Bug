{"sha": "49e0438549375d706a61eb78f8375ce4877e78cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllMDQzODU0OTM3NWQ3MDZhNjFlYjc4ZjgzNzVjZTQ4NzdlNzhjYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-08-12T14:40:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-08-12T14:40:39Z"}, "message": "pt.c (print_template_context): Don't abort when instantiating a synthesized method.\n\n\t* pt.c (print_template_context): Don't abort when instantiating a\n\tsynthesized method.\n\nFrom-SVN: r21685", "tree": {"sha": "a27939670217c893a368cc112c412511945e5bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a27939670217c893a368cc112c412511945e5bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e0438549375d706a61eb78f8375ce4877e78cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e0438549375d706a61eb78f8375ce4877e78cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e0438549375d706a61eb78f8375ce4877e78cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e0438549375d706a61eb78f8375ce4877e78cc/comments", "author": null, "committer": null, "parents": [{"sha": "05008fb97d0b9316c8c4a453d6fbd3948c869442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05008fb97d0b9316c8c4a453d6fbd3948c869442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05008fb97d0b9316c8c4a453d6fbd3948c869442"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "cee17fd299e50c4b675e961187448e2555852961", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49e0438549375d706a61eb78f8375ce4877e78cc", "patch": "@@ -1,5 +1,8 @@\n 1998-08-12  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* pt.c (print_template_context): Don't abort when instantiating a\n+\tsynthesized method.\n+\n \t* decl.c (grokdeclarator): Issue errors on namespace qualified\n \tdeclarators in parameter lists or in class scope.\n "}, {"sha": "319941f5e5c680e4b19af1efba55ec42122e69dd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=49e0438549375d706a61eb78f8375ce4877e78cc", "patch": "@@ -3699,25 +3699,28 @@ print_template_context (err)\n   int line = lineno;\n   char *file = input_filename;\n \n-  if (err)\n+  if (err && p)\n     {\n-      if (current_function_decl == p->decl)\n-\t/* Avoid redundancy with the the \"In function\" line.  */;\n-      else if (current_function_decl == NULL_TREE)\n-\tfprintf (stderr, \"%s: In instantiation of `%s':\\n\",\n-\t\t file, decl_as_string (p->decl, 0));\n+      if (current_function_decl != p->decl\n+\t  && current_function_decl != NULL_TREE)\n+\t/* We can get here during the processing of some synthesized\n+\t   method.  Then, p->decl will be the function that's causing\n+\t   the synthesis.  */\n+\t;\n       else\n-\tmy_friendly_abort (980521);\n-\n-      if (p)\n \t{\n+\t  if (current_function_decl == p->decl)\n+\t    /* Avoid redundancy with the the \"In function\" line.  */;\n+\t  else \n+\t    fprintf (stderr, \"%s: In instantiation of `%s':\\n\",\n+\t\t     file, decl_as_string (p->decl, 0));\n+\t  \n \t  line = p->line;\n \t  file = p->file;\n \t  p = p->next;\n \t}\n     }\n \n- next:\n   for (; p; p = p->next)\n     {\n       fprintf (stderr, \"%s:%d:   instantiated from `%s'\\n\", file, line,"}, {"sha": "29b4281c76edfc00822aecf2b88158490d9d39dc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash20.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e0438549375d706a61eb78f8375ce4877e78cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C?ref=49e0438549375d706a61eb78f8375ce4877e78cc", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link:\n+\n+template <class T = int>\n+struct A { const T x; A() : x(0) { } A(T x) : x(x) { } }; \n+\n+template <class B>\n+void func () { B y; y = B(); } // ERROR - can't use default assignment\n+\n+int main (void) { func< A<> >(); } // ERROR - instantiated from here"}]}