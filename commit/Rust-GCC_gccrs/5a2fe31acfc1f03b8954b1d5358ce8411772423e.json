{"sha": "5a2fe31acfc1f03b8954b1d5358ce8411772423e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyZmUzMWFjZmMxZjAzYjg5NTRiMWQ1MzU4Y2U4NDExNzcyNDIzZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-12-07T10:50:23Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2007-12-07T10:50:23Z"}, "message": "re PR ada/34173 (FAIL: gnat.dg/release_unc_maxalign.adb execution test)\n\n2007-12-07  Olivier Hainque  <hainque@adacore.com>\n\n\tPR ada/34173\n\t* decl.c (gnat_to_gnu_entity) <case E_Array_Type>: When setting\n\tthe alignment on the GCC XUA array type, set TYPE_USER_ALIGN if\n\tthis is from an alignment clause on the GNAT entity.\n\t* utils.c (create_field_decl): Rewrite the computation of DECL_ALIGN\n\tto distinguish the case where we set it from the type's alignment.\n\tWhen so, propagate TYPE_USER_ALIGN into DECL_USER_ALIGN to indicate\n\twhether this alignment was set from an explicit alignment clause.\n\nFrom-SVN: r130673", "tree": {"sha": "4a1f91a442cfdd5c6bb0f36d7cf1872f25eda846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a1f91a442cfdd5c6bb0f36d7cf1872f25eda846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2fe31acfc1f03b8954b1d5358ce8411772423e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2fe31acfc1f03b8954b1d5358ce8411772423e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2fe31acfc1f03b8954b1d5358ce8411772423e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2fe31acfc1f03b8954b1d5358ce8411772423e/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9225443e8ba248edba04c757fb624d9be372e049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9225443e8ba248edba04c757fb624d9be372e049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9225443e8ba248edba04c757fb624d9be372e049"}], "stats": {"total": 167, "additions": 161, "deletions": 6}, "files": [{"sha": "5a1033245775bf57ec3609d966053c9aca6c6da7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -1,3 +1,14 @@\n+2007-12-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\tPR ada/34173\n+\t* decl.c (gnat_to_gnu_entity) <case E_Array_Type>: When setting\n+\tthe alignment on the GCC XUA array type, set TYPE_USER_ALIGN if\n+\tthis is from an alignment clause on the GNAT entity.\n+\t* utils.c (create_field_decl): Rewrite the computation of DECL_ALIGN\n+\tto distinguish the case where we set it from the type's alignment.\n+\tWhen so, propagate TYPE_USER_ALIGN into DECL_USER_ALIGN to indicate\n+\twhether this alignment was set from an explicit alignment clause.\n+\n 2007-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (make_packable_type): Revert last change."}, {"sha": "1a8cc777c96903705b0662fba6c1e94c8eda7e5b", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -1795,14 +1795,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* If an alignment is specified, use it if valid.  But ignore it for\n-\t   types that represent the unpacked base type for packed arrays.  */\n+\t   types that represent the unpacked base type for packed arrays.  If\n+\t   the alignment was requested with an explicit user alignment clause,\n+\t   state so.  */\n \tif (No (Packed_Array_Type (gnat_entity))\n \t    && Known_Alignment (gnat_entity))\n \t  {\n \t    gcc_assert (Present (Alignment (gnat_entity)));\n \t    TYPE_ALIGN (tem)\n \t      = validate_alignment (Alignment (gnat_entity), gnat_entity,\n \t\t\t\t    TYPE_ALIGN (tem));\n+\t    if (Present (Alignment_Clause (gnat_entity)))\n+\t      TYPE_USER_ALIGN (tem) = 1;\n \t  }\n \n \tTYPE_CONVENTION_FORTRAN_P (tem)"}, {"sha": "9e90ba1fbe3ec9d732189369343a6d8a9367cb9d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -1581,11 +1581,24 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n     }\n \n   DECL_PACKED (field_decl) = pos ? DECL_BIT_FIELD (field_decl) : packed;\n-  DECL_ALIGN (field_decl)\n-    = MAX (DECL_ALIGN (field_decl),\n-\t   DECL_BIT_FIELD (field_decl) ? 1\n-\t   : packed && TYPE_MODE (field_type) != BLKmode ? BITS_PER_UNIT\n-\t   : TYPE_ALIGN (field_type));\n+\n+  /* Bump the alignment if need be, either for bitfield/packing purposes or\n+     to satisfy the type requirements if no such consideration applies.  When\n+     we get the alignment from the type, indicate if this is from an explicit\n+     user request, which prevents stor-layout from lowering it later on.  */\n+  {\n+    int bit_align\n+      = (DECL_BIT_FIELD (field_decl) ? 1\n+\t : packed && TYPE_MODE (field_type) != BLKmode ? BITS_PER_UNIT : 0);\n+\n+    if (bit_align > DECL_ALIGN (field_decl))\n+      DECL_ALIGN (field_decl) = bit_align;\n+    else if (!bit_align && TYPE_ALIGN (field_type) > DECL_ALIGN (field_decl))\n+      {\n+\tDECL_ALIGN (field_decl) = TYPE_ALIGN (field_type);\n+\tDECL_USER_ALIGN (field_decl) = TYPE_USER_ALIGN (field_type);\n+      }\n+  }\n \n   if (pos)\n     {"}, {"sha": "12aad8cbc12d11faa331a4305d535d8a98455257", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -1,3 +1,9 @@\n+2007-12-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\tPR ada/34173\n+\t* gnat.dg/unc_memops.ad[sb]: Support for ...\n+\t* gnat.dg/unc_memfree.adb: New test.\n+\t\n 2007-12-06  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gfortran.dg/ltrans-7.f90: New."}, {"sha": "d6a07f07f1d2d2b172262235bd5c6969090a547a", "filename": "gcc/testsuite/gnat.dg/unc_memfree.adb", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memfree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memfree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Func_memfree.adb?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -0,0 +1,34 @@\n+--  { dg-do run }\n+\n+with Ada.Unchecked_Deallocation;\n+with Unc_Memops;\n+\n+procedure Unc_Memfree is\n+\n+   type List is array (Natural range <>) of Integer;\n+   for List'Alignment use Standard'Maximum_Alignment;\n+\n+   type Fat_List_Access is access all List;\n+\n+   type Thin_List_Access is access all List;\n+   for Thin_List_Access'Size use Standard'Address_Size;\n+\n+   procedure Release_Fat is new Ada.Unchecked_Deallocation\n+     (Object => List, Name => Fat_List_Access);\n+\n+   procedure Release_Thin is new Ada.Unchecked_Deallocation\n+     (Object => List, Name => Thin_List_Access);\n+\n+   My_Fat_List : Fat_List_Access;\n+   My_Thin_List : Thin_List_Access;\n+begin\n+   Unc_Memops.Expect_Symetry (True);\n+\n+   My_Fat_List := new List (1 .. 3);\n+   Release_Fat (My_Fat_List);\n+\n+   My_Thin_List := new List (1 .. 3);\n+   Release_Thin (My_Thin_List);\n+\n+   Unc_Memops.Expect_Symetry (False);\n+end;"}, {"sha": "356fc01002d94c1171a278b714ee42291f21e419", "filename": "gcc/testsuite/gnat.dg/unc_memops.adb", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.adb?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -0,0 +1,63 @@\n+\n+package body Unc_Memops is\n+\n+   use type System.Address;\n+\n+   type Addr_Array_T is array (1 .. 20) of Addr_T;\n+\n+   type Addr_Stack_T is record\n+      Store : Addr_Array_T;\n+      Size  : Integer := 0;\n+   end record;\n+\n+   procedure Push (Addr : Addr_T; As : access addr_stack_t) is\n+   begin\n+      As.Size := As.Size + 1;\n+      As.Store (As.Size) := Addr;\n+   end;\n+\n+   function Pop (As : access Addr_Stack_T) return Addr_T is\n+      Addr : Addr_T := As.Store (As.Size);\n+   begin\n+      As.Size := As.Size - 1;\n+      return Addr;\n+   end;\n+\n+   --\n+\n+   Addr_Stack : aliased Addr_Stack_T;\n+   Symetry_Expected : Boolean := False;\n+\n+   procedure Expect_Symetry (Status : Boolean) is\n+   begin\n+      Symetry_Expected := Status;\n+   end;\n+\n+   function  Alloc (Size : size_t) return Addr_T is\n+      function malloc (Size : Size_T) return Addr_T;\n+      pragma Import (C, Malloc, \"malloc\");\n+\n+      Ptr : Addr_T := malloc (Size);\n+   begin\n+      if Symetry_Expected then\n+         Push (Ptr, Addr_Stack'Access);\n+      end if;\n+      return Ptr;\n+   end;\n+\n+   procedure Free (Ptr : addr_t) is\n+   begin\n+      if Symetry_Expected\n+        and then Ptr /= Pop (Addr_Stack'Access)\n+      then\n+         raise Program_Error;\n+      end if;\n+   end;\n+\n+   function  Realloc (Ptr  : addr_t; Size : size_t) return Addr_T is\n+   begin\n+      raise Program_Error;\n+      return System.Null_Address;\n+   end;\n+\n+end;"}, {"sha": "abc4fa7af2e5ecf1452e0f11fb92784346657c06", "filename": "gcc/testsuite/gnat.dg/unc_memops.ads", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fe31acfc1f03b8954b1d5358ce8411772423e/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Func_memops.ads?ref=5a2fe31acfc1f03b8954b1d5358ce8411772423e", "patch": "@@ -0,0 +1,24 @@\n+with System;\n+\n+package Unc_Memops is\n+   pragma Elaborate_Body;\n+\n+   type size_t is mod 2 ** Standard'Address_Size;\n+   subtype addr_t is System.Address;\n+\n+   function  Alloc (Size : size_t) return addr_t;\n+   procedure Free (Ptr : addr_t);\n+   function  Realloc (Ptr  : addr_t; Size : size_t) return addr_t;\n+\n+   procedure Expect_Symetry (Status : Boolean);\n+   --  Whether we expect \"free\"s to match \"alloc\" return values in\n+   --  reverse order, like alloc->X, alloc->Y should be followed by\n+   --  free Y, free X.\n+\n+private\n+\n+   pragma Export (C, Alloc,   \"__gnat_malloc\");\n+   pragma Export (C, Free,    \"__gnat_free\");\n+   pragma Export (C, Realloc, \"__gnat_realloc\");\n+\n+end;"}]}