{"sha": "24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmNjg4MzFkMjViYWQ3MzlhNmZlMTY3YTU4YjViNGMwYzNjYmY5YQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-04-29T15:23:11Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-05-18T17:14:40Z"}, "message": "pr94833, fix vec_first_match_index for nulls\n\ngcc/ChangeLog\n\n2020-04-30  Carl Love  <cel@us.ibm.com>\n\n\tPR target/94833\n\t* config/rs6000/vsx.md (define_expand): Fix instruction generation for\n\tfirst_match_index_<mode>.\n\t* testsuite/gcc.target/powerpc/builtins-8-p9-runnable.c (main): Add\n\tadditional test cases with zero vector elements.", "tree": {"sha": "176afb9afe2e397b810a8f7213b586fb8a4b46a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/176afb9afe2e397b810a8f7213b586fb8a4b46a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f17461bdfeed758f2be71529fc3af55a76ea3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f17461bdfeed758f2be71529fc3af55a76ea3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f17461bdfeed758f2be71529fc3af55a76ea3e1"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "51b5b6c908dff4a6e675b965d151ec90632656ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "patch": "@@ -1,3 +1,11 @@\n+2020-05-18  Carl Love  <cel@us.ibm.com>\n+\n+\tPR target/94833\n+\t* config/rs6000/vsx.md (define_expand): Fix instruction generation for\n+\tfirst_match_index_<mode>.\n+\t* testsuite/gcc.target/powerpc/builtins-8-p9-runnable.c (main): Add\n+\tadditional test cases with zero vector elements.\n+\n 2020-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95169"}, {"sha": "2a28215ac5b6e6f3d205037b429e728e46dc385c", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "patch": "@@ -4835,8 +4835,8 @@\n   rtx cmp_result = gen_reg_rtx (<MODE>mode);\n   rtx not_result = gen_reg_rtx (<MODE>mode);\n \n-  emit_insn (gen_vcmpnez<VSX_EXTRACT_WIDTH> (cmp_result, operands[1],\n-\t\t\t\t\t     operands[2]));\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmp_result, operands[1],\n+\t\t\t\t\t    operands[2]));\n   emit_insn (gen_one_cmpl<mode>2 (not_result, cmp_result));\n \n   sh = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) / 2;"}, {"sha": "19457eebfc4d40ccfa93bffaf317a60ad99484c0", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-8-p9-runnable.c", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-8-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f68831d25bad739a6fe167a58b5b4c0c3cbf9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-8-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-8-p9-runnable.c?ref=24f68831d25bad739a6fe167a58b5b4c0c3cbf9a", "patch": "@@ -103,6 +103,31 @@ int main() {\n      The element index in natural element order is returned for the\n      first match or the number of elements if there is no match.  */\n   /* char */\n+  char_src1 = (vector signed char) { 0x40, 0, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40 };\n+\t\t\t\t    \n+  char_src2 = (vector signed char) {0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t    0, 0, 0, 0, 0, 0, 0, 0};\n+  expected_result = 1;\n+\n+  result = vec_first_match_index (char_src1, char_src2);\n+\n+#ifdef DEBUG2\n+  print_signed_char(\"src1\", char_src1);\n+  print_signed_char(\"src2\", char_src2);\n+  printf(\" vec_first_match_index = %d\\n\\n\", result);\n+#endif\n+\n+  if (result != expected_result)\n+#ifdef DEBUG\n+    printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n+\t   result, expected_result);\n+#else\n+    abort();\n+#endif\n+\n   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n \t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n@@ -367,6 +392,50 @@ int main() {\n      The element index in BE order is returned for the first mismatch\n      or the number of elements if there is no match.   */\n   /* char */\n+  char_src1 = (vector signed char) {1, 2, 0, 4, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  char_src2 = (vector signed char) {1, 2, 0, 20, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  expected_result = 3;\n+\n+  result = vec_first_mismatch_index (char_src1, char_src2);\n+\n+#ifdef DEBUG2\n+  print_signed_char(\"src1\", char_src1);\n+  print_signed_char(\"src2\", char_src2);\n+  printf(\"vec_first_mismatch_index = %d\\n\\n\", result);\n+#endif\n+\n+  if (result != expected_result)\n+#ifdef DEBUG\n+    printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t   result, expected_result);\n+#else\n+    abort();\n+#endif\n+\n+  char_src1 = (vector signed char) {0, 2, 3, 4, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  char_src2 = (vector signed char) {0, 2, 3, 20, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  expected_result = 3;\n+\n+  result = vec_first_mismatch_index (char_src1, char_src2);\n+\n+#ifdef DEBUG2\n+  print_signed_char(\"src1\", char_src1);\n+  print_signed_char(\"src2\", char_src2);\n+  printf(\"vec_first_mismatch_index = %d\\n\\n\", result);\n+#endif\n+\n+  if (result != expected_result)\n+#ifdef DEBUG\n+    printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t   result, expected_result);\n+#else\n+    abort();\n+#endif\n+\n   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n \t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n@@ -673,6 +742,33 @@ int main() {\n      The element index in BE order is returned for the first match\n      or the number of elements if there is no match.  */\n   /* char */\n+  char_src1 = (vector signed char) { 0x40, 0, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40 };\n+\t\t\t\t    \n+  char_src2 = (vector signed char) { 0x41, 0, 0x43, 0x44,\n+\t\t\t\t     0x45, 0x46, 0x47, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t     0x40, 0x40, 0x40, 0x40 };\n+  expected_result = 1;\n+\n+  result = vec_first_match_or_eos_index (char_src1, char_src2);\n+\n+#ifdef DEBUG2\n+  print_signed_char(\"src1\", char_src1);\n+  print_signed_char(\"src2\", char_src2);\n+  printf(\"vec_first_match_or_eos_index = %d\\n\\n\", result);\n+#endif\n+\n+  if (result != expected_result)\n+#ifdef DEBUG\n+    printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n+\t   result, expected_result);\n+#else\n+    abort();\n+#endif\n+\n   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n \t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n@@ -1065,6 +1161,28 @@ int main() {\n      The element index in BE order is returned for the first mismatch\n      or the number of elements if there is no match.   */\n   /* char */\n+  char_src1 = (vector signed char) {1, 2, 0, 4, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  char_src2 = (vector signed char) {1, 2, 0, 20, -5, 6, 7, 8,\n+\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+  expected_result = 2;\n+\n+  result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+\n+#ifdef DEBUG2\n+  print_signed_char(\"src1\", char_src1);\n+  print_signed_char(\"src2\", char_src2);\n+  printf(\"vec_first_mismatch_or_eos_index = %d\\n\\n\", result);\n+#endif\n+\n+  if (result != expected_result)\n+#ifdef DEBUG\n+    printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t   result, expected_result);\n+#else\n+    abort();\n+#endif\n+\n   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n \t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,"}]}