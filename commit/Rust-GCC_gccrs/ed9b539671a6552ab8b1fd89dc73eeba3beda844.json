{"sha": "ed9b539671a6552ab8b1fd89dc73eeba3beda844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5YjUzOTY3MWE2NTUyYWI4YjFmZDg5ZGM3M2VlYmEzYmVkYTg0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-13T17:51:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-13T17:51:34Z"}, "message": "i386.c (IX86_BUILTIN_MOVQ, [...]): Remove.\n\n        * config/i386/i386.c (IX86_BUILTIN_MOVQ, IX86_BUILTIN_LOADD,\n        IX86_BUILTIN_STORED, IX86_BUILTIN_MOVQ2DQ,\n        IX86_BUILTIN_MOVDQ2Q): Remove.\n        (IX86_BUILTIN_VEC_EXT_V4SI): New.\n        (ix86_init_mmx_sse_builtins, ix86_expand_builtin): Update to match.\n        (ix86_expand_vector_extract): For V4S[FI], extract element 0 after\n        shuffling.\n        * config/i386/sse.md (sse_concatv2sf): Accept zero operand 2.\n        (sse2_pextrw): Fix immediate constraint.\n        (sse2_loadq, sse2_loadq_rex64): Remove.\n        * config/i386/emmintrin.h (_mm_cvtsi128_si32, _mm_cvtsi128_si64x):\n        Use __builtin_ia32_vec_ext_<size>.\n        (_mm_cvtsi32_si128, _mm_cvtsi64x_si128): Use _mm_set_epi<size>.\n\nFrom-SVN: r93604", "tree": {"sha": "9ab6b96c5ab9d78ca3a15ea10922b0172322e962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab6b96c5ab9d78ca3a15ea10922b0172322e962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed9b539671a6552ab8b1fd89dc73eeba3beda844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9b539671a6552ab8b1fd89dc73eeba3beda844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9b539671a6552ab8b1fd89dc73eeba3beda844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9b539671a6552ab8b1fd89dc73eeba3beda844/comments", "author": null, "committer": null, "parents": [{"sha": "172847595a4a362438ec5ac8d83262fee47f52fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172847595a4a362438ec5ac8d83262fee47f52fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172847595a4a362438ec5ac8d83262fee47f52fb"}], "stats": {"total": 127, "additions": 39, "deletions": 88}, "files": [{"sha": "b7c676746dfb6bafdf3f0ec9c09b61d521982506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed9b539671a6552ab8b1fd89dc73eeba3beda844", "patch": "@@ -1,3 +1,19 @@\n+2005-01-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (IX86_BUILTIN_MOVQ, IX86_BUILTIN_LOADD,\n+\tIX86_BUILTIN_STORED, IX86_BUILTIN_MOVQ2DQ,\n+\tIX86_BUILTIN_MOVDQ2Q): Remove.\n+\t(IX86_BUILTIN_VEC_EXT_V4SI): New.\n+\t(ix86_init_mmx_sse_builtins, ix86_expand_builtin): Update to match.\n+\t(ix86_expand_vector_extract): For V4S[FI], extract element 0 after \n+\tshuffling.\n+\t* config/i386/sse.md (sse_concatv2sf): Accept zero operand 2.\n+\t(sse2_pextrw): Fix immediate constraint.\n+\t(sse2_loadq, sse2_loadq_rex64): Remove.\n+\t* config/i386/emmintrin.h (_mm_cvtsi128_si32, _mm_cvtsi128_si64x):\n+\tUse __builtin_ia32_vec_ext_<size>.\n+\t(_mm_cvtsi32_si128, _mm_cvtsi64x_si128): Use _mm_set_epi<size>.\n+\n 2005-01-13  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* function.c (assign_parm_setup_block): Look inside original"}, {"sha": "732182a72fb01818640c5db8feeb95a5bc8cf882", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=ed9b539671a6552ab8b1fd89dc73eeba3beda844", "patch": "@@ -195,20 +195,17 @@ _mm_storer_pd (double *__P, __m128d __A)\n static __inline int\n _mm_cvtsi128_si32 (__m128i __A)\n {\n-  int __tmp;\n-  __builtin_ia32_stored (&__tmp, (__v4si)__A);\n-  return __tmp;\n+  return __builtin_ia32_vec_ext_v4si ((__v4si)__A, 0);\n }\n \n #ifdef __x86_64__\n static __inline long long\n _mm_cvtsi128_si64x (__m128i __A)\n {\n-  return __builtin_ia32_movdq2q ((__v2di)__A);\n+  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);\n }\n #endif\n \n-\n static __inline __m128d\n _mm_add_pd (__m128d __A, __m128d __B)\n {\n@@ -1377,14 +1374,14 @@ _mm_mfence (void)\n static __inline __m128i\n _mm_cvtsi32_si128 (int __A)\n {\n-  return (__m128i) __builtin_ia32_loadd (&__A);\n+  return _mm_set_epi32 (0, 0, 0, __A);\n }\n \n #ifdef __x86_64__\n static __inline __m128i\n _mm_cvtsi64x_si128 (long long __A)\n {\n-  return (__m128i) __builtin_ia32_movq2dq (__A);\n+  return _mm_set_epi64x (0, __A);\n }\n #endif\n "}, {"sha": "5bfa70a0c9f98a87b967ecfb01e1082b329ff28d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ed9b539671a6552ab8b1fd89dc73eeba3beda844", "patch": "@@ -12265,9 +12265,6 @@ enum ix86_builtins\n \n   IX86_BUILTIN_LOADDQU,\n   IX86_BUILTIN_STOREDQU,\n-  IX86_BUILTIN_MOVQ,\n-  IX86_BUILTIN_LOADD,\n-  IX86_BUILTIN_STORED,\n \n   IX86_BUILTIN_PACKSSWB,\n   IX86_BUILTIN_PACKSSDW,\n@@ -12498,8 +12495,6 @@ enum ix86_builtins\n   IX86_BUILTIN_MASKMOVDQU,\n   IX86_BUILTIN_MOVMSKPD,\n   IX86_BUILTIN_PMOVMSKB128,\n-  IX86_BUILTIN_MOVQ2DQ,\n-  IX86_BUILTIN_MOVDQ2Q,\n \n   IX86_BUILTIN_PACKSSWB128,\n   IX86_BUILTIN_PACKSSDW128,\n@@ -12607,6 +12602,7 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_EXT_V2DF,\n   IX86_BUILTIN_VEC_EXT_V2DI,\n   IX86_BUILTIN_VEC_EXT_V4SF,\n+  IX86_BUILTIN_VEC_EXT_V4SI,\n   IX86_BUILTIN_VEC_EXT_V8HI,\n   IX86_BUILTIN_VEC_EXT_V4HI,\n   IX86_BUILTIN_VEC_SET_V8HI,\n@@ -13154,8 +13150,6 @@ ix86_init_mmx_sse_builtins (void)\n     = build_function_type_list (V2SI_type_node,\n \t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n   tree pint_type_node    = build_pointer_type (integer_type_node);\n-  tree pcint_type_node = build_pointer_type (\n-\t\t\t     build_type_variant (integer_type_node, 1, 0));\n   tree pdouble_type_node = build_pointer_type (double_type_node);\n   tree pcdouble_type_node = build_pointer_type (\n \t\t\t\tbuild_type_variant (double_type_node, 1, 0));\n@@ -13168,12 +13162,6 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tintTI_type_node, intTI_type_node, NULL_TREE);\n   tree void_ftype_pcvoid\n     = build_function_type_list (void_type_node, const_ptr_type_node, NULL_TREE);\n-  tree v2di_ftype_di\n-    = build_function_type_list (V2DI_type_node,\n-\t\t\t\tlong_long_unsigned_type_node, NULL_TREE);\n-  tree di_ftype_v2di\n-    = build_function_type_list (long_long_unsigned_type_node,\n-\t\t\t\tV2DI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4si\n     = build_function_type_list (V4SF_type_node, V4SI_type_node, NULL_TREE);\n   tree v4si_ftype_v4sf\n@@ -13285,13 +13273,6 @@ ix86_init_mmx_sse_builtins (void)\n   tree void_ftype_pchar_v16qi\n     = build_function_type_list (void_type_node,\n \t\t\t        pchar_type_node, V16QI_type_node, NULL_TREE);\n-  tree v4si_ftype_pcint\n-    = build_function_type_list (V4SI_type_node, pcint_type_node, NULL_TREE);\n-  tree void_ftype_pcint_v4si\n-    = build_function_type_list (void_type_node,\n-\t\t\t        pcint_type_node, V4SI_type_node, NULL_TREE);\n-  tree v2di_ftype_v2di\n-    = build_function_type_list (V2DI_type_node, V2DI_type_node, NULL_TREE);\n \n   tree float80_type;\n   tree float128_type;\n@@ -13479,8 +13460,6 @@ ix86_init_mmx_sse_builtins (void)\n \n   /* SSE2 */\n   def_builtin (MASK_SSE2, \"__builtin_ia32_maskmovdqu\", void_ftype_v16qi_v16qi_pchar, IX86_BUILTIN_MASKMOVDQU);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_movq2dq\", v2di_ftype_di, IX86_BUILTIN_MOVQ2DQ);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_movdq2q\", di_ftype_v2di, IX86_BUILTIN_MOVDQ2Q);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_loadupd\", v2df_ftype_pcdouble, IX86_BUILTIN_LOADUPD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_storeupd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREUPD);\n@@ -13534,10 +13513,7 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE2, \"__builtin_ia32_mfence\", void_ftype_void, IX86_BUILTIN_MFENCE);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_loaddqu\", v16qi_ftype_pcchar, IX86_BUILTIN_LOADDQU);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_loadd\", v4si_ftype_pcint, IX86_BUILTIN_LOADD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_storedqu\", void_ftype_pchar_v16qi, IX86_BUILTIN_STOREDQU);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_stored\", void_ftype_pcint_v4si, IX86_BUILTIN_STORED);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_movq\", v2di_ftype_v2di, IX86_BUILTIN_MOVQ);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_pmuludq\", di_ftype_v2si_v2si, IX86_BUILTIN_PMULUDQ);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_pmuludq128\", v2di_ftype_v4si_v4si, IX86_BUILTIN_PMULUDQ128);\n@@ -13622,6 +13598,11 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v4sf\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V4SF);\n \n+  ftype = build_function_type_list (intSI_type_node, V4SI_type_node,\n+\t\t\t\t    integer_type_node, NULL_TREE);\n+  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v4si\",\n+\t       ftype, IX86_BUILTIN_VEC_EXT_V4SI);\n+\n   ftype = build_function_type_list (intHI_type_node, V8HI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n   def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v8hi\",\n@@ -14399,13 +14380,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n     case IX86_BUILTIN_LOADDQU:\n       return ix86_expand_unop_builtin (CODE_FOR_sse2_movdqu, arglist, target, 1);\n-    case IX86_BUILTIN_LOADD:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse2_loadd, arglist, target, 1);\n-\n     case IX86_BUILTIN_STOREDQU:\n       return ix86_expand_store_builtin (CODE_FOR_sse2_movdqu, arglist);\n-    case IX86_BUILTIN_STORED:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_stored, arglist);\n \n     case IX86_BUILTIN_MONITOR:\n       arg0 = TREE_VALUE (arglist);\n@@ -14447,6 +14423,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_VEC_EXT_V2DF:\n     case IX86_BUILTIN_VEC_EXT_V2DI:\n     case IX86_BUILTIN_VEC_EXT_V4SF:\n+    case IX86_BUILTIN_VEC_EXT_V4SI:\n     case IX86_BUILTIN_VEC_EXT_V8HI:\n     case IX86_BUILTIN_VEC_EXT_V4HI:\n       return ix86_expand_vec_ext_builtin (arglist, target);\n@@ -14480,8 +14457,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return ix86_expand_sse_comi (d, arglist, target);\n \n-  /* @@@ Should really do something sensible here.  */\n-  return 0;\n+  gcc_unreachable ();\n }\n \n /* Store OPERAND to the memory after reload is completed.  This means\n@@ -16402,6 +16378,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \t}\n       vec = tmp;\n       use_vec_extr = true;\n+      elt = 0;\n       break;\n \n     case V4SImode:\n@@ -16431,6 +16408,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \t    }\n \t  vec = tmp;\n \t  use_vec_extr = true;\n+\t  elt = 0;\n \t}\n       else\n \t{"}, {"sha": "e95926d127cb6b625fe31c6346abbed2722f6235", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 9, "deletions": 49, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9b539671a6552ab8b1fd89dc73eeba3beda844/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ed9b539671a6552ab8b1fd89dc73eeba3beda844", "patch": "@@ -1067,16 +1067,18 @@\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n (define_insn \"*sse_concatv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,*y\")\n+  [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,*y,*y\")\n \t(vec_concat:V2SF\n-\t  (match_operand:SF 1 \"register_operand\" \" 0, 0\")\n-\t  (match_operand:SF 2 \"register_operand\" \" x,*y\")))]\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,m, 0, m\")\n+\t  (match_operand:SF 2 \"vector_move_operand\"  \" x,C,*y, C\")))]\n   \"TARGET_SSE\"\n   \"@\n    unpcklps\\t{%2, %0|%0, %2}\n-   punpckldq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog,mmxcvt\")\n-   (set_attr \"mode\" \"V4SF,DI\")])\n+   movss\\t{%1, %0|%0, %1}\n+   punpckldq\\t{%2, %0|%0, %2}\n+   movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"mode\" \"V4SF,SF,DI,DI\")])\n \n (define_insn \"*sse_concatv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\"   \"=x,x\")\n@@ -2671,7 +2673,7 @@\n \t(zero_extend:SI\n \t  (vec_select:HI\n \t    (match_operand:V8HI 1 \"register_operand\" \"x\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"0\")]))))]\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n\")]))))]\n   \"TARGET_SSE2\"\n   \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -2865,48 +2867,6 @@\n   operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\n })\n \n-(define_expand \"sse2_loadq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(vec_merge:V2DI\n-\t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n-\t  (match_dup 2)\n-\t  (const_int 1)))]\t  \n-  \"TARGET_SSE\"\n-  \"operands[2] = CONST0_RTX (V2DImode);\")\n-\n-(define_insn \"*sse2_loadq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"       \"=Y,?Y,Y,x\")\n-\t(vec_merge:V2DI\n-\t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 1 \"nonimmediate_operand\" \" m,*y,Y,0\"))\n-\t  (match_operand:V2DI 2 \"vector_move_operand\"  \" C, C,0,x\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE && !TARGET_64BIT\"\n-  \"@\n-   movq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   movq\\t{%1, %0|%0, %1}\n-   shufps\\t{$0xe4, %1, %0|%0, %1, 0xe4}\"\n-  [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog\")\n-   (set_attr \"mode\" \"TI,TI,TI,V4SF\")])\n-\n-(define_insn \"*sse2_loadq_rex64\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"       \"=x,?x,?x,x\")\n-\t(vec_merge:V2DI\n-\t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 1 \"nonimmediate_operand\" \" m,*y, r,x\"))\n-\t  (match_operand:V2DI 2 \"vector_move_operand\"  \" C, C, C,0\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"@\n-   movq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n-   movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*vec_dupv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Y,x\")\n \t(vec_duplicate:V4SI"}]}