{"sha": "c543ca49c257b3e7fcb123014395cfc7d298d28c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0M2NhNDljMjU3YjNlN2ZjYjEyMzAxNDM5NWNmYzdkMjk4ZDI4Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-12-15T12:40:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-12-15T12:40:33Z"}, "message": "final.c (final_scan_insn): Flip in_cold_section_p when changing between the hot and cold sections.\n\n\t* final.c (final_scan_insn): Flip in_cold_section_p when changing\n\tbetween the hot and cold sections.  Use current_function_section\n\tto get the new section.\n\t* dwarf2out.c (output_line_info): Use in_cold_section_p to\n\tdetermine whether we are assembling hot or cold code.\n\t(secname_for_decl, dwarf2out_var_location): Likewise.\n\t(dwarf2out_init, dwarf2out_finish): Use switch_to_section.\n\t* varasm.c (last_text_section): Delete.\n\t(in_cold_section_p): New variable.\n\t(hot_function_section): New function.\n\t(current_function_section): Pass in_cold_section_p as the\n\treloc argument to select_section.  Use it to decide between\n\tunlikely_function_section and hot_function_section.\n\t(assemble_start_function): Use switch_to_section.  Set\n\tin_cold_section_p instead of last_text_section.\n\t(assemble_end_function): Use switch_to_section.\n\t(switch_to_section): Don't set last_text_section.\n\t* config/darwin/darwin.c (machopic_select_section): Trust the reloc\n\targument to make the right choice between hot and cold sections.\n\nFrom-SVN: r108572", "tree": {"sha": "f594f73f80f290828e87bb828d14e3f19d1ad80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f594f73f80f290828e87bb828d14e3f19d1ad80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c543ca49c257b3e7fcb123014395cfc7d298d28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c543ca49c257b3e7fcb123014395cfc7d298d28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c543ca49c257b3e7fcb123014395cfc7d298d28c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c543ca49c257b3e7fcb123014395cfc7d298d28c/comments", "author": null, "committer": null, "parents": [{"sha": "8d46ce6095853cebc4ea306fe0d00a4aa9758610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d46ce6095853cebc4ea306fe0d00a4aa9758610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d46ce6095853cebc4ea306fe0d00a4aa9758610"}], "stats": {"total": 111, "additions": 61, "deletions": 50}, "files": [{"sha": "e6a02e1cde169424431976f8741f4f74ebbd2c2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -1,3 +1,25 @@\n+2005-12-15  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* final.c (final_scan_insn): Flip in_cold_section_p when changing\n+\tbetween the hot and cold sections.  Use current_function_section\n+\tto get the new section.\n+\t* dwarf2out.c (output_line_info): Use in_cold_section_p to\n+\tdetermine whether we are assembling hot or cold code.\n+\t(secname_for_decl, dwarf2out_var_location): Likewise.\n+\t(dwarf2out_init, dwarf2out_finish): Use switch_to_section.\n+\t* varasm.c (last_text_section): Delete.\n+\t(in_cold_section_p): New variable.\n+\t(hot_function_section): New function.\n+\t(current_function_section): Pass in_cold_section_p as the\n+\treloc argument to select_section.  Use it to decide between\n+\tunlikely_function_section and hot_function_section.\n+\t(assemble_start_function): Use switch_to_section.  Set\n+\tin_cold_section_p instead of last_text_section.\n+\t(assemble_end_function): Use switch_to_section.\n+\t(switch_to_section): Don't set last_text_section.\n+\t* config/darwin/darwin.c (machopic_select_section): Trust the reloc\n+\targument to make the right choice between hot and cold sections.\n+\n 2005-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tSecond part of MS1->MT renaming"}, {"sha": "930e6cd16cdc6c221fe587da8d8c79e1a1eaefc2", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -1093,9 +1093,7 @@ machopic_select_section (tree exp, int reloc,\n \n   if (TREE_CODE (exp) == FUNCTION_DECL)\n     {\n-      if (reloc == 1\n-\t  || unlikely_text_section_p (last_text_section)\n-\t  || last_text_section == text_unlikely_coal_section)\n+      if (reloc == 1)\n \tbase_section = (weak_p\n \t\t\t? text_unlikely_coal_section\n \t\t\t: unlikely_text_section ());"}, {"sha": "f5860f213ecad59d9b8d1f5116b5790150ac3302", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -7837,7 +7837,7 @@ output_line_info (void)\n   current_file = 1;\n   current_line = 1;\n \n-  if (cfun && unlikely_text_section_p (last_text_section))\n+  if (cfun && in_cold_section_p)\n     strcpy (prev_line_label, cfun->cold_section_label);\n   else\n     strcpy (prev_line_label, text_section_label);\n@@ -10182,7 +10182,7 @@ secname_for_decl (tree decl)\n       tree sectree = DECL_SECTION_NAME (current_function_decl);\n       secname = TREE_STRING_POINTER (sectree);\n     }\n-  else if (cfun && unlikely_text_section_p (last_text_section))\n+  else if (cfun && in_cold_section_p)\n     secname = cfun->cold_section_label;\n   else\n     secname = text_section_label;\n@@ -13552,7 +13552,7 @@ dwarf2out_var_location (rtx loc_note)\n   newloc->var_loc_note = loc_note;\n   newloc->next = NULL;\n \n-  if (cfun && unlikely_text_section_p (last_text_section))\n+  if (cfun && in_cold_section_p)\n     newloc->section_label = cfun->cold_section_label;\n   else\n     newloc->section_label = text_section_label;\n@@ -13841,7 +13841,7 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n   if (flag_reorder_blocks_and_partition)\n     {\n-      unlikely_text_section ();\n+      switch_to_section (unlikely_text_section ());\n       ASM_OUTPUT_LABEL (asm_out_file, cold_text_section_label);\n     }\n }\n@@ -14177,7 +14177,7 @@ dwarf2out_finish (const char *filename)\n   targetm.asm_out.internal_label (asm_out_file, TEXT_END_LABEL, 0);\n   if (flag_reorder_blocks_and_partition)\n     {\n-      unlikely_text_section ();\n+      switch_to_section (unlikely_text_section ());\n       targetm.asm_out.internal_label (asm_out_file, COLD_END_LABEL, 0);\n     }\n "}, {"sha": "2b13fb907b9cdc151b31f788af0be436eef5864c", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -1708,22 +1708,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase NOTE_INSN_SWITCH_TEXT_SECTIONS:\n-\t  \n-\t  /* The presence of this note indicates that this basic block\n-\t     belongs in the \"cold\" section of the .o file.  If we are\n-\t     not already writing to the cold section we need to change\n-\t     to it.  */\n-\n-\t  if (last_text_section == text_section)\n-\t    {\n-\t      (*debug_hooks->switch_text_section) ();\n-\t      switch_to_section (unlikely_text_section ());\n-\t    }\n-\t  else\n-\t    {\n-\t      (*debug_hooks->switch_text_section) ();\n-\t      switch_to_section (text_section);\n-\t    }\n+\t  in_cold_section_p = !in_cold_section_p;\n+\t  (*debug_hooks->switch_text_section) ();\n+\t  switch_to_section (current_function_section ());\n \t  break;\n \t  \n \tcase NOTE_INSN_BASIC_BLOCK:"}, {"sha": "38278b768adf6136509ed27d33e823f37f11f196", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -499,7 +499,7 @@ extern GTY(()) section *exception_section;\n extern GTY(()) section *eh_frame_section;\n \n extern GTY(()) section *in_section;\n-extern GTY(()) section *last_text_section;\n+extern GTY(()) bool in_cold_section_p;\n \n extern section *get_unnamed_section (unsigned int, void (*) (const void *),\n \t\t\t\t     const void *);"}, {"sha": "32890c8d96f7cca2b93dcc5d9897164505d28ab5", "filename": "gcc/varasm.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c543ca49c257b3e7fcb123014395cfc7d298d28c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c543ca49c257b3e7fcb123014395cfc7d298d28c", "patch": "@@ -167,8 +167,9 @@ section *eh_frame_section;\n    been selected or if we lose track of what the current section is.  */\n section *in_section;\n \n-/* The last text section used by asm_out_file.  */\n-section *last_text_section;\n+/* True if code for the current function is currently being directed\n+   at the cold section.  */\n+bool in_cold_section_p;\n \n /* A linked list of all the unnamed sections.  */\n static GTY(()) section *unnamed_sections;\n@@ -411,6 +412,22 @@ asm_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \n #endif /* BSS_SECTION_ASM_OP */\n \n+#ifndef USE_SELECT_SECTION_FOR_FUNCTIONS\n+/* Return the hot section for function DECL.  Return text_section for\n+   null DECLs.  */\n+\n+static section *\n+hot_function_section (tree decl)\n+{\n+  if (decl != NULL_TREE\n+      && DECL_SECTION_NAME (decl) != NULL_TREE\n+      && targetm.have_named_sections)\n+    return get_named_section (decl, NULL, 0);\n+  else\n+    return text_section;\n+}\n+#endif\n+\n /* Return the section for function DECL.\n \n    If DECL is NULL_TREE, return the text section.  We can be passed\n@@ -427,30 +444,21 @@ function_section (tree decl)\n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n   return targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n #else\n-  if (decl != NULL_TREE\n-      && DECL_SECTION_NAME (decl) != NULL_TREE\n-      && targetm.have_named_sections)\n-    return get_named_section (decl, NULL, 0);\n-  else\n-    return text_section;\n+  return hot_function_section (decl);\n #endif\n }\n \n section *\n current_function_section (void)\n {\n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n-  int reloc = 0; \n-\n-  if (unlikely_text_section_p (last_text_section))\n-    reloc = 1;\n- \n-  return targetm.asm_out.select_section (current_function_decl, reloc,\n+  return targetm.asm_out.select_section (current_function_decl,\n+\t\t\t\t\t in_cold_section_p,\n \t\t\t\t\t DECL_ALIGN (current_function_decl));\n #else\n-  if (last_text_section)\n-    return last_text_section;\n-  return function_section (current_function_decl);\n+  return (in_cold_section_p\n+\t  ? unlikely_text_section ()\n+\t  : hot_function_section (current_function_decl));\n #endif\n }\n \n@@ -1083,7 +1091,7 @@ assemble_start_function (tree decl, const char *fnname)\n \n   if (flag_reorder_blocks_and_partition)\n     {\n-      unlikely_text_section ();\n+      switch_to_section (unlikely_text_section ());\n       assemble_align (FUNCTION_BOUNDARY);\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_label);\n \n@@ -1115,7 +1123,7 @@ assemble_start_function (tree decl, const char *fnname)\n \tfirst_function_block_is_cold = true;\n     }\n \n-  last_text_section = NULL;\n+  in_cold_section_p = first_function_block_is_cold;\n \n   /* Switch to the correct text section for the start of the function.  */\n \n@@ -1200,7 +1208,7 @@ assemble_end_function (tree decl, const char *fnname)\n       section *save_text_section;\n \n       save_text_section = in_section;\n-      unlikely_text_section ();\n+      switch_to_section (unlikely_text_section ());\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_end_label);\n       if (first_function_block_is_cold)\n \tswitch_to_section (text_section);\n@@ -5586,11 +5594,7 @@ switch_to_section (section *new_section)\n   if (new_section->common.flags & SECTION_FORGET)\n     in_section = NULL;\n   else\n-    {\n-      in_section = new_section;\n-      if (new_section->common.flags & SECTION_CODE)\n-\tlast_text_section = in_section;\n-    }\n+    in_section = new_section;\n \n   if (new_section->common.flags & SECTION_NAMED)\n     {"}]}