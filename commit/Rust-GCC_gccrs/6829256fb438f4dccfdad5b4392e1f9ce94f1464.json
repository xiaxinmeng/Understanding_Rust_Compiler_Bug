{"sha": "6829256fb438f4dccfdad5b4392e1f9ce94f1464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyOTI1NmZiNDM4ZjRkY2NmZGFkNWI0MzkyZTFmOWNlOTRmMTQ2NA==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-05-23T09:45:45Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-23T09:45:45Z"}, "message": "com.c (ffecom_finish_symbol_transform_): Don't transform statement (nested) functions...\n\nSat May 23 06:32:52 1998  Craig Burley  <burley@gnu.org>\n\t* com.c (ffecom_finish_symbol_transform_): Don't transform\n\tstatement (nested) functions, to avoid gcc compiling them\n\tand thus producing linker errors if they refer to undefined\n\texteral functions.  But warn if they're unused and -Wunused.\n\nFrom-SVN: r19970", "tree": {"sha": "f758b8cc7de409e3697f36aba8e13ebe9cccbe6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f758b8cc7de409e3697f36aba8e13ebe9cccbe6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6829256fb438f4dccfdad5b4392e1f9ce94f1464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6829256fb438f4dccfdad5b4392e1f9ce94f1464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6829256fb438f4dccfdad5b4392e1f9ce94f1464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6829256fb438f4dccfdad5b4392e1f9ce94f1464/comments", "author": null, "committer": null, "parents": [{"sha": "e125ac266174fcbf80410bab07195f03aace1d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e125ac266174fcbf80410bab07195f03aace1d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e125ac266174fcbf80410bab07195f03aace1d63"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "268028ecb57376bc088306d90ae865f52098ee04", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6829256fb438f4dccfdad5b4392e1f9ce94f1464/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6829256fb438f4dccfdad5b4392e1f9ce94f1464/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6829256fb438f4dccfdad5b4392e1f9ce94f1464", "patch": "@@ -1,3 +1,10 @@\n+Sat May 23 06:32:52 1998  Craig Burley  <burley@gnu.org>\n+\n+\t* com.c (ffecom_finish_symbol_transform_): Don't transform\n+\tstatement (nested) functions, to avoid gcc compiling them\n+\tand thus producing linker errors if they refer to undefined\n+\texteral functions.  But warn if they're unused and -Wunused.\n+\n Tue May 19 14:52:41 1998  Craig Burley  <burley@gnu.org>\n \n \t* bad.def (FFEBAD_OPEN_UNSUPPORTED, FFEBAD_INQUIRE_UNSUPPORTED,"}, {"sha": "9d4e9d6f5df5269f90797b1729d7ec145de39e44", "filename": "gcc/f/com.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6829256fb438f4dccfdad5b4392e1f9ce94f1464/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6829256fb438f4dccfdad5b4392e1f9ce94f1464/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=6829256fb438f4dccfdad5b4392e1f9ce94f1464", "patch": "@@ -6678,15 +6678,42 @@ ffecom_finish_symbol_transform_ (ffesymbol s)\n      VAR_DECLs for COMMON variables when we transform them for real\n      use, and therefore we do all the VAR_DECL creating here.  */\n \n-  if ((ffesymbol_hook (s).decl_tree == NULL_TREE)\n-      && ((ffesymbol_kind (s) != FFEINFO_kindNONE)\n-\t  || ((ffesymbol_where (s) != FFEINFO_whereNONE)\n-\t      && (ffesymbol_where (s) != FFEINFO_whereINTRINSIC)))\n-      && (ffesymbol_where (s) != FFEINFO_whereDUMMY))\n-    /* Not transformed, and not CHARACTER*(*), and not a dummy\n-       argument, which can happen only if the entry point names\n-       it \"rides in on\" are all invalidated for other reasons.  */\n-    s = ffecom_sym_transform_ (s);\n+  if (ffesymbol_hook (s).decl_tree == NULL_TREE)\n+    {\n+      if (ffesymbol_where (s) == FFEINFO_whereCONSTANT\n+\t  && (ffesymbol_kind (s) == FFEINFO_kindFUNCTION\n+\t      || ffesymbol_kind (s) == FFEINFO_kindSUBROUTINE))\n+\t{\n+\t  /* An unreferenced statement function.  If this refers to\n+\t     an undeclared array, it'll look like a reference to\n+\t     an external function that might not exist.  Even if it\n+\t     does refer to an non-existent function, it seems silly\n+\t     to force a linker error when the function won't actually\n+\t     be called.  But before the 1998-05-15 change to egcs/gcc\n+\t     toplev.c by Mark Mitchell, to fix other problems, this\n+\t     didn't actually happen, since gcc would defer nested\n+\t     functions to be compiled later only if needed.  With that\n+\t     change, it makes sense to simply avoid telling the back\n+\t     end about the statement (nested) function at all.  But\n+\t     if -Wunused is specified, might as well warn about it.  */\n+\n+\t  if (warn_unused)\n+\t    {\n+\t      ffebad_start (FFEBAD_SFUNC_UNUSED);\n+\t      ffebad_string (ffesymbol_text (s));\n+\t      ffebad_here (0, ffesymbol_where_line (s), ffesymbol_where_column (s));\n+\t      ffebad_finish ();\n+\t    }\n+\t}\n+      else if (ffesymbol_kind (s) != FFEINFO_kindNONE\n+\t       || (ffesymbol_where (s) != FFEINFO_whereNONE\n+\t\t   && ffesymbol_where (s) != FFEINFO_whereINTRINSIC\n+\t\t   && ffesymbol_where (s) != FFEINFO_whereDUMMY))\n+\t/* Not transformed, and not CHARACTER*(*), and not a dummy\n+\t   argument, which can happen only if the entry point names\n+\t   it \"rides in on\" are all invalidated for other reasons.  */\n+\ts = ffecom_sym_transform_ (s);\n+    }\n \n   if ((ffesymbol_where (s) == FFEINFO_whereCOMMON)\n       && (ffesymbol_hook (s).decl_tree != error_mark_node))"}]}