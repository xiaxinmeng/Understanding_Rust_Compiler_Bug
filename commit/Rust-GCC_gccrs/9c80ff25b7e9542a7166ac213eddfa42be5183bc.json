{"sha": "9c80ff25b7e9542a7166ac213eddfa42be5183bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4MGZmMjViN2U5NTQyYTcxNjZhYzIxM2VkZGZhNDJiZTUxODNiYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-05-04T05:22:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-05-04T05:22:51Z"}, "message": "builtins.c (expand_builtin): Remove.\n\n        * builtins.c (expand_builtin) <BUILT_IN_DWARF_FP_REGNUM>: Remove.\n        <BUILT_IN_DWARF_SP_COLUMN>: New.\n        * builtins.def (BUILT_IN_DWARF_FP_REGNUM): Remove.\n        (BUILT_IN_DWARF_SP_COLUMN): New.\n        * dwarf2out.c (expand_builtin_dwarf_fp_regnum): Remove.\n        (expand_builtin_dwarf_sp_column): New.\n        * except.h: Update to match.\n        * unwind-dw2.c (execute_stack_op): Correct stack push typo.\n        (execute_cfa_program): Record location expression address\n        before extracting length.\n        (uw_update_context_1): Install old CFA into stack pointer column.\n        (uw_init_context_1): Set cfa_reg to stack pointer column.\n\nFrom-SVN: r66447", "tree": {"sha": "018bbece3152ce027c926971c2d2308d49226443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018bbece3152ce027c926971c2d2308d49226443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c80ff25b7e9542a7166ac213eddfa42be5183bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c80ff25b7e9542a7166ac213eddfa42be5183bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c80ff25b7e9542a7166ac213eddfa42be5183bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c80ff25b7e9542a7166ac213eddfa42be5183bc/comments", "author": null, "committer": null, "parents": [{"sha": "4d588c1434f5837f2900c32a28ca2856858e4ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d588c1434f5837f2900c32a28ca2856858e4ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d588c1434f5837f2900c32a28ca2856858e4ddc"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "e4ea83a62a912b3c623d2bc3935e3cf219ab2c42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -1,3 +1,18 @@\n+2003-05-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (expand_builtin) <BUILT_IN_DWARF_FP_REGNUM>: Remove.\n+\t<BUILT_IN_DWARF_SP_COLUMN>: New.\n+\t* builtins.def (BUILT_IN_DWARF_FP_REGNUM): Remove.\n+\t(BUILT_IN_DWARF_SP_COLUMN): New.\n+\t* dwarf2out.c (expand_builtin_dwarf_fp_regnum): Remove.\n+\t(expand_builtin_dwarf_sp_column): New.\n+\t* except.h: Update to match.\n+\t* unwind-dw2.c (execute_stack_op): Correct stack push typo.\n+\t(execute_cfa_program): Record location expression address\n+\tbefore extracting length.\n+\t(uw_update_context_1): Install old CFA into stack pointer column.\n+\t(uw_init_context_1): Set cfa_reg to stack pointer column.\n+\n 2003-05-03  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.c (constant_pool_expr_p): Make static and"}, {"sha": "c3e14779e50d6807941e9a2e07da6b85d3b9c74d", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -4703,8 +4703,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_DWARF_CFA:\n       return virtual_cfa_rtx;\n #ifdef DWARF2_UNWIND_INFO\n-    case BUILT_IN_DWARF_FP_REGNUM:\n-      return expand_builtin_dwarf_fp_regnum ();\n+    case BUILT_IN_DWARF_SP_COLUMN:\n+      return expand_builtin_dwarf_sp_column ();\n     case BUILT_IN_INIT_DWARF_REG_SIZES:\n       expand_builtin_init_dwarf_reg_sizes (TREE_VALUE (arglist));\n       return const0_rtx;"}, {"sha": "a74673196a6376701df13e65637afabd5d618f3b", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -881,8 +881,8 @@ DEF_GCC_BUILTIN(BUILT_IN_DWARF_CFA,\n \t\t\"__builtin_dwarf_cfa\",\n \t\tBT_FN_PTR,\n \t\tATTR_NULL)\n-DEF_GCC_BUILTIN(BUILT_IN_DWARF_FP_REGNUM,\n-\t\t\"__builtin_dwarf_fp_regnum\",\n+DEF_GCC_BUILTIN(BUILT_IN_DWARF_SP_COLUMN,\n+\t\t\"__builtin_dwarf_sp_column\",\n \t\tBT_FN_UNSIGNED,\n \t\tATTR_NULL)\n DEF_GCC_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES,"}, {"sha": "66e5eaf2244458ba2f23c7e8476c1906fcf3ed2f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -414,9 +414,9 @@ static void def_cfa_1\t\t \tPARAMS ((const char *,\n /* Hook used by __throw.  */\n \n rtx\n-expand_builtin_dwarf_fp_regnum ()\n+expand_builtin_dwarf_sp_column ()\n {\n-  return GEN_INT (DWARF_FRAME_REGNUM (HARD_FRAME_POINTER_REGNUM));\n+  return GEN_INT (DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM));\n }\n \n /* Return a pointer to a copy of the section string name S with all"}, {"sha": "d8e7acec8c46f621d89391602c93bce4b1530473", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -114,7 +114,7 @@ extern rtx expand_builtin_eh_return_data_regno\tPARAMS ((tree));\n extern rtx expand_builtin_extract_return_addr\tPARAMS ((tree));\n extern void expand_builtin_init_dwarf_reg_sizes PARAMS ((tree));\n extern rtx expand_builtin_frob_return_addr\tPARAMS ((tree));\n-extern rtx expand_builtin_dwarf_fp_regnum\tPARAMS ((void));\n+extern rtx expand_builtin_dwarf_sp_column\tPARAMS ((void));\n extern void expand_builtin_eh_return\t\tPARAMS ((tree, tree));\n extern void expand_eh_return\t\t\tPARAMS ((void));\n extern rtx get_exception_pointer\t\tPARAMS ((struct function *));"}, {"sha": "7596ef07c9c9d513af26f0834ea44056457affb4", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c80ff25b7e9542a7166ac213eddfa42be5183bc/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=9c80ff25b7e9542a7166ac213eddfa42be5183bc", "patch": "@@ -726,7 +726,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n       /* Most things push a result value.  */\n       if ((size_t) stack_elt >= sizeof(stack)/sizeof(*stack))\n \tabort ();\n-      stack[++stack_elt] = result;\n+      stack[stack_elt++] = result;\n     no_push:;\n     }\n \n@@ -878,17 +878,17 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa_expression:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  fs->cfa_exp = insn_ptr;\n \t  fs->cfa_how = CFA_EXP;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  insn_ptr += utmp;\n \t  break;\n \n \tcase DW_CFA_expression:\n \t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].how = REG_SAVED_EXP;\n \t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.exp = insn_ptr;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  insn_ptr += utmp;\n \t  break;\n \n@@ -1076,37 +1076,41 @@ static void\n uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n   struct _Unwind_Context orig_context = *context;\n+  _Unwind_Word tmp_sp;\n   void *cfa;\n   long i;\n \n+  /* Special handling here: Many machines do not use a frame pointer,\n+     and track the CFA only through offsets from the stack pointer from\n+     one frame to the next.  In this case, the stack pointer is never\n+     stored, so it has no saved address in the context.  What we do\n+     have is the CFA from the previous stack frame.\n+\n+     In very special situations (such as unwind info for signal return),\n+     there may be location expressions that use the stack pointer as well.\n+\n+     Given that other unwind mechanisms generally won't work if you try\n+     to represent stack pointer saves and restores directly, we don't\n+     bother conditionalizing this at all.  */\n+  tmp_sp = (_Unwind_Ptr) context->cfa;\n+  _Unwind_SetGRPtr (&orig_context, __builtin_dwarf_sp_column (), &tmp_sp);\n+\n   /* Compute this frame's CFA.  */\n   switch (fs->cfa_how)\n     {\n     case CFA_REG_OFFSET:\n-      /* Special handling here: Many machines do not use a frame pointer,\n-\t and track the CFA only through offsets from the stack pointer from\n-\t one frame to the next.  In this case, the stack pointer is never\n-\t stored, so it has no saved address in the context.  What we do\n-\t have is the CFA from the previous stack frame.  */\n-      if (_Unwind_GetGRPtr (context, fs->cfa_reg) == NULL)\n-\tcfa = context->cfa;\n-      else\n-\tcfa = (void *) (_Unwind_Ptr) _Unwind_GetGR (context, fs->cfa_reg);\n+      cfa = (void *) (_Unwind_Ptr) _Unwind_GetGR (&orig_context, fs->cfa_reg);\n       cfa += fs->cfa_offset;\n       break;\n \n     case CFA_EXP:\n-      /* ??? No way of knowing what register number is the stack pointer\n-\t to do the same sort of handling as above.  Assume that if the\n-\t CFA calculation is so complicated as to require a stack program\n-\t that this will not be a problem.  */\n       {\n \tconst unsigned char *exp = fs->cfa_exp;\n \t_Unwind_Word len;\n \n \texp = read_uleb128 (exp, &len);\n \tcfa = (void *) (_Unwind_Ptr)\n-\t  execute_stack_op (exp, exp + len, context, 0);\n+\t  execute_stack_op (exp, exp + len, &orig_context, 0);\n \tbreak;\n       }\n \n@@ -1121,14 +1125,18 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       {\n       case REG_UNSAVED:\n \tbreak;\n+\n       case REG_SAVED_OFFSET:\n-\t_Unwind_SetGRPtr (context, i, (void *) (cfa + fs->regs.reg[i].loc.offset));\n+\t_Unwind_SetGRPtr (context, i,\n+\t\t\t  (void *) (cfa + fs->regs.reg[i].loc.offset));\n \tbreak;\n+\n       case REG_SAVED_REG:\n \t_Unwind_SetGRPtr\n \t  (context, i,\n \t   _Unwind_GetGRPtr (&orig_context, fs->regs.reg[i].loc.reg));\n \tbreak;\n+\n       case REG_SAVED_EXP:\n \t{\n \t  const unsigned char *exp = fs->regs.reg[i].loc.exp;\n@@ -1190,7 +1198,7 @@ uw_init_context_1 (struct _Unwind_Context *context,\n   /* Force the frame state to use the known cfa value.  */\n   context->cfa = outer_cfa;\n   fs.cfa_how = CFA_REG_OFFSET;\n-  fs.cfa_reg = 0;\n+  fs.cfa_reg = __builtin_dwarf_sp_column ();\n   fs.cfa_offset = 0;\n \n   uw_update_context_1 (context, &fs);"}]}