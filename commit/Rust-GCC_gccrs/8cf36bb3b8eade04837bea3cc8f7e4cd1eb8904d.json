{"sha": "8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmMzZiYjNiOGVhZGUwNDgzN2JlYTNjYzhmN2U0Y2QxZWI4OTA0ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-11-22T14:49:11Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-11-22T14:49:11Z"}, "message": "weakref.m4: New file.\n\n\nconfig:\n\n\t* weakref.m4: New file.\n\nlibitm:\n\n\t* configure.ac: Use GCC_CHECK_ELF_STYLE_WEAKREF.\n\t* alloc_cpp.cc: Generate dummy functions if we don't\n\tHAVE_ELF_STYLE_WEAKREF.\n\t* eh_cpp.cc: Likewise.\n\t* configure: Regenerate.\n\t* aclocal.m4:  Likewise.\n\t* config.h.in: Likewise.\n\t* Makefile.in: Likewise.\n\t* testsuite/Makefile.in: Likewise.\n\nFrom-SVN: r181618", "tree": {"sha": "2c26188cd406f39ca321e6a5612b5d17b6376b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c26188cd406f39ca321e6a5612b5d17b6376b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fb013576c6fc493f096492e4b10724c83f294d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb013576c6fc493f096492e4b10724c83f294d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb013576c6fc493f096492e4b10724c83f294d8"}], "stats": {"total": 153, "additions": 139, "deletions": 14}, "files": [{"sha": "4ebecc32f703a9c86b33c339cf38369a33b7383a", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -1,3 +1,7 @@\n+2011-11-22  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* weakref.m4: New file.\n+\n 2011-11-09  Richard Henderson  <rth@redhat.com>\n \n \t* asmcfi.m4: New file."}, {"sha": "39b63d39b8ab88c0a60872392a3efe804b52eea1", "filename": "config/weakref.m4", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/config%2Fweakref.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/config%2Fweakref.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fweakref.m4?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -0,0 +1,48 @@\n+\n+dnl Check if the target supports weak.\n+AC_DEFUN([GCC_CHECK_ATTRIBUTE_WEAK], [\n+  AC_CACHE_CHECK([whether the target supports weak],\n+\t\t ac_cv_have_attribute_weak, [\n+  weakref_m4_saved_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  AC_TRY_COMPILE([void __attribute__((weak)) foo(void) { }],\n+\t\t [], ac_cv_have_attribute_weak=yes,\n+\t\t ac_cv_have_attribute_weak=no)\n+  CFLAGS=\"$weakref_m4_saved_CFLAGS\"])\n+  if test x\"$ac_cv_have_attribute_weak\" = xyes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_WEAK, 1,\n+      [Define to 1 if the target supports __attribute__((weak)).])\n+  fi])\n+\n+dnl Check whether weak refs work like the ELF ones.\n+dnl This means that the weak reference works without having to satify \n+dnl linkage for the item.\n+dnl There are targets (at least Darwin) where we have fully functional\n+dnl weakrefs at runtime, but must supply the referenced item at link time.\n+AC_DEFUN([GCC_CHECK_ELF_STYLE_WEAKREF], [\n+  AC_CACHE_CHECK([whether weak refs work like ELF],\n+                  ac_cv_have_elf_style_weakref, [\n+  weakref_m4_saved_CFLAGS=\"$CFLAGS\"\n+  case \"${host}\" in\n+    *-apple-darwin*) CFLAGS=\"$CFLAGS -Wl,-undefined,dynamic_lookup\" ;;\n+    *) ;;\n+  esac  \n+  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n+extern void fNotToBeFound(void) __attribute__((weak));\n+int main () \n+{\n+  if (fNotToBeFound)\n+    return 1;\n+  else\n+    return 0;\n+}\n+]])], ac_cv_have_elf_style_weakref=yes, ac_cv_have_elf_style_weakref=no, [\n+case \"${host}\" in\n+  alpha*-dec-osf*) ac_cv_have_elf_style_weakref=no ;;\n+  *-apple-darwin[[89]]*) ac_cv_have_elf_style_weakref=no ;;\n+  *) ac_cv_have_elf_style_weakref=yes;;\n+esac])CFLAGS=\"$weakref_m4_saved_CFLAGS\"])\n+if test x\"$ac_cv_have_elf_style_weakref\" = xyes; then\n+  AC_DEFINE(HAVE_ELF_STYLE_WEAKREF, 1, [Define to 1 if target has a weakref that works like the ELF one.])\n+fi])\n+"}, {"sha": "ab21cc5b99d254bc8d252ebe62854e63581664f6", "filename": "libitm/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -1,11 +1,23 @@\n+2011-11-22  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* configure.ac: Use GCC_CHECK_ELF_STYLE_WEAKREF.\n+\t* alloc_cpp.cc: Generate dummy functions if we don't\n+\tHAVE_ELF_STYLE_WEAKREF.\n+\t* eh_cpp.cc: Likewise.\n+\t* configure: Regenerate.\n+\t* aclocal.m4:  Likewise.\n+\t* config.h.in: Likewise.\n+\t* Makefile.in: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2011-11-22  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/x86/sjlj.S (CONCAT1, CONCAT2, SYM): Respond to\n \t__USER_LABEL_PREFIX__ for targets that use it.\n-\tTYPE, SIZE, HIDDEN): New macros to assist on non-elf targets.\n+\t(TYPE, SIZE, HIDDEN): New macros to assist on non-elf targets.\n \t(_ITM_beginTransaction): Use SYM, TYPE, SIZE macros to assist\n \tin portability to non-elf targets.\n-\t(GTM_longjmp): LIkewise.\n+\t(GTM_longjmp): Likewise.\n \t* libitm_i.h (begin_transaction): Apply __USER_LABEL_PREFIX__\n \twhere required.\n "}, {"sha": "a1bc47645e0946ef0a677a636900fe65f6901943", "filename": "libitm/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.in?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -57,10 +57,12 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n \t$(top_srcdir)/../config/stdint.m4 \\\n-\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 \\\n+\t$(top_srcdir)/../config/weakref.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "625404e06f675e78bf0517260b27ba71a7420d2f", "filename": "libitm/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Faclocal.m4?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -1001,6 +1001,7 @@ m4_include([../config/multi.m4])\n m4_include([../config/override.m4])\n m4_include([../config/stdint.m4])\n m4_include([../config/tls.m4])\n+m4_include([../config/weakref.m4])\n m4_include([../ltoptions.m4])\n m4_include([../ltsugar.m4])\n m4_include([../ltversion.m4])"}, {"sha": "0789b2e5342988486ab41d1148de22213f575028", "filename": "libitm/alloc_cpp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Falloc_cpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Falloc_cpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Falloc_cpp.cc?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -60,7 +60,7 @@ extern void _ZdlPvRKSt9nothrow_t (void *, c_nothrow_p) __attribute__((weak));\n extern void *_ZnaXRKSt9nothrow_t (size_t, c_nothrow_p) __attribute__((weak));\n extern void _ZdaPvRKSt9nothrow_t (void *, c_nothrow_p) __attribute__((weak));\n \n-#ifdef __osf__ /* Really: !HAVE_WEAKDEF  */\n+#if !defined (HAVE_ELF_STYLE_WEAKREF)\n void *_ZnwX (size_t) { return NULL; }\n void _ZdlPv (void *) { return; }\n void *_ZnaX (size_t) { return NULL; }\n@@ -70,7 +70,7 @@ void *_ZnwXRKSt9nothrow_t (size_t, c_nothrow_p) { return NULL; }\n void _ZdlPvRKSt9nothrow_t (void *, c_nothrow_p) { return; }\n void *_ZnaXRKSt9nothrow_t (size_t, c_nothrow_p) { return NULL; }\n void _ZdaPvRKSt9nothrow_t (void *, c_nothrow_p) { return; }\n-#endif /* __osf__ */\n+#endif /* HAVE_ELF_STYLE_WEAKREF */\n \n /* Wrap the delete nothrow symbols for usage with a single argument.\n    Perhaps should have a configure type check for this, because the"}, {"sha": "1c3469cd5f950e992caecf167d434b2f859a675e", "filename": "libitm/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig.h.in?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -30,6 +30,9 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n+/* Define to 1 if target has a weakref that works like the ELF one. */\n+#undef HAVE_ELF_STYLE_WEAKREF\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "9b06359411192e2474a2469347cc7a784cc3c8c2", "filename": "libitm/configure", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -17213,6 +17213,57 @@ $as_echo \"#define HAVE_AS_AVX 1\" >>confdefs.h\n   ;;\n esac\n \n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether weak refs work like ELF\" >&5\n+$as_echo_n \"checking whether weak refs work like ELF... \" >&6; }\n+if test \"${ac_cv_have_elf_style_weakref+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  weakref_m4_saved_CFLAGS=\"$CFLAGS\"\n+  case \"${host}\" in\n+    *-apple-darwin*) CFLAGS=\"$CFLAGS -Wl,-undefined,dynamic_lookup\" ;;\n+    *) ;;\n+  esac\n+  if test \"$cross_compiling\" = yes; then :\n+\n+case \"${host}\" in\n+  alpha*-dec-osf*) ac_cv_have_elf_style_weakref=no ;;\n+  *-apple-darwin[89]*) ac_cv_have_elf_style_weakref=no ;;\n+  *) ac_cv_have_elf_style_weakref=yes;;\n+esac\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+extern void fNotToBeFound(void) __attribute__((weak));\n+int main ()\n+{\n+  if (fNotToBeFound)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  ac_cv_have_elf_style_weakref=yes\n+else\n+  ac_cv_have_elf_style_weakref=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+CFLAGS=\"$weakref_m4_saved_CFLAGS\"\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_have_elf_style_weakref\" >&5\n+$as_echo \"$ac_cv_have_elf_style_weakref\" >&6; }\n+if test x\"$ac_cv_have_elf_style_weakref\" = xyes; then\n+\n+$as_echo \"#define HAVE_ELF_STYLE_WEAKREF 1\" >>confdefs.h\n+\n+fi\n+\n # Cleanup and exit.\n CFLAGS=\"$save_CFLAGS\"\n cat >confcache <<\\_ACEOF"}, {"sha": "45ee8701e3854df27ffeef05073cc47944987255", "filename": "libitm/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.ac?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -239,6 +239,8 @@ LIBITM_CHECK_SYNC_BUILTINS\n LIBITM_CHECK_64BIT_SYNC_BUILTINS\n LIBITM_CHECK_AS_AVX\n \n+GCC_CHECK_ELF_STYLE_WEAKREF\n+\n # Cleanup and exit.\n CFLAGS=\"$save_CFLAGS\"\n AC_CACHE_SAVE"}, {"sha": "6f302cdc4aee1939afa3c5fbe1ffb37383ea5f79", "filename": "libitm/eh_cpp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Feh_cpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Feh_cpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Feh_cpp.cc?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -39,13 +39,13 @@ extern void *__cxa_begin_catch (void *) WEAK;\n extern void *__cxa_end_catch (void) WEAK;\n extern void __cxa_tm_cleanup (void *, void *, unsigned int) WEAK;\n \n-#ifdef __osf__ /* Really: !HAVE_WEAKDEF  */\n+#if !defined (HAVE_ELF_STYLE_WEAKREF)\n void *__cxa_allocate_exception (size_t) { return NULL; }\n void __cxa_throw (void *, void *, void *) { return; }\n void *__cxa_begin_catch (void *) { return NULL; }\n void *__cxa_end_catch (void) { return NULL; }\n void __cxa_tm_cleanup (void *, void *, unsigned int) { return; }\n-#endif\n+#endif /* HAVE_ELF_STYLE_WEAKREF */\n \n }\n "}, {"sha": "8066a2a038863859d786791fdb84f6860b7ce807", "filename": "libitm/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d/libitm%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2FMakefile.in?ref=8cf36bb3b8eade04837bea3cc8f7e4cd1eb8904d", "patch": "@@ -47,10 +47,12 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n \t$(top_srcdir)/../config/stdint.m4 \\\n-\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 \\\n+\t$(top_srcdir)/../config/weakref.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}]}