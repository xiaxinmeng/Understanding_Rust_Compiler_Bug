{"sha": "1588200e466807c36167e5f0a59f4bd4c183828a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4ODIwMGU0NjY4MDdjMzYxNjdlNWYwYTU5ZjRiZDRjMTgzODI4YQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-21T22:17:52Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-21T22:17:52Z"}, "message": "In libobjc/: 2010-12-21 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* init.c (_objc_load_callback): Initialize with 0.\n\t(__objc_call_callback): Renamed to __objc_call_load_callback.\n\tCheck _objc_load_callback only once, and if it is not set, return\n\timmediately.\n\t(objc_send_load): Updated call to __objc_call_callback.\n\nFrom-SVN: r168133", "tree": {"sha": "6953b51819100b4f424d3e8b01d2d53566b22f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6953b51819100b4f424d3e8b01d2d53566b22f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1588200e466807c36167e5f0a59f4bd4c183828a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1588200e466807c36167e5f0a59f4bd4c183828a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1588200e466807c36167e5f0a59f4bd4c183828a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1588200e466807c36167e5f0a59f4bd4c183828a/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "686875c17265153c5ef239ec5e53e62850b8399e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686875c17265153c5ef239ec5e53e62850b8399e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686875c17265153c5ef239ec5e53e62850b8399e"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "04243d4e5040c797fcfcd150c218fe04a12ca041", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1588200e466807c36167e5f0a59f4bd4c183828a/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1588200e466807c36167e5f0a59f4bd4c183828a/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=1588200e466807c36167e5f0a59f4bd4c183828a", "patch": "@@ -1,3 +1,11 @@\n+2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* init.c (_objc_load_callback): Initialize with 0.\n+\t(__objc_call_callback): Renamed to __objc_call_load_callback.\n+\tCheck _objc_load_callback only once, and if it is not set, return\n+\timmediately.\n+\t(objc_send_load): Updated call to __objc_call_callback.\n+\t\n 2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR libobjc/16110"}, {"sha": "8e60bed97c49d41a092a7cd2ab9a179603c5860b", "filename": "libobjc/init.c", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1588200e466807c36167e5f0a59f4bd4c183828a/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1588200e466807c36167e5f0a59f4bd4c183828a/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=1588200e466807c36167e5f0a59f4bd4c183828a", "patch": "@@ -45,7 +45,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define PROTOCOL_VERSION 2\n \n /* This list contains modules currently loaded into the runtime and\n-   for which the +load method has not been called yet.  */\n+   for which the +load method (and the load callback, if any) has not\n+   been called yet.  */\n static struct objc_list *__objc_module_list = 0; \t/* !T:MUTEX */\n \n /* This list contains all proto_list's not yet assigned class\n@@ -84,7 +85,7 @@ static void __objc_init_protocol (struct objc_protocol *protocol);\n static void __objc_class_add_protocols (Class, struct objc_protocol_list *);\n \n /* Load callback hook.  */\n-void (*_objc_load_callback) (Class class, struct objc_category *category); /* !T:SAFE */\n+void (*_objc_load_callback) (Class class, struct objc_category *category) = 0; /* !T:SAFE */\n \n /* Are all categories/classes resolved?  */\n BOOL __objc_dangling_categories = NO;           /* !T:UNUSED */\n@@ -101,7 +102,9 @@ static void objc_send_load (void);\n    been already received the +load message.  */\n static void __objc_create_classes_tree (struct objc_module *module);\n \n-static void __objc_call_callback (struct objc_module *module);\n+/* Calls the _objc_load_callback for each class and category in the\n+   module (if _objc_load_callback is not NULL).  */\n+static void __objc_call_load_callback (struct objc_module *module);\n \n /* A special version that works only before the classes are completely\n    installed in the runtime.  */\n@@ -754,7 +757,7 @@ objc_send_load (void)\n \n       /* If we still have classes for whom we don't have yet their\n          super classes known to the runtime we don't send the +load\n-         messages yet.  */\n+         messages (and call the load callback) yet.  */\n       if (unresolved_classes)\n \treturn;\n     }\n@@ -765,7 +768,7 @@ objc_send_load (void)\n     return;\n \n   /* Iterate over all modules in the __objc_module_list and call on\n-     them the __objc_create_classes_tree function. This function\n+     them the __objc_create_classes_tree function.  This function\n      creates a tree of classes that resembles the class hierarchy.  */\n   list_mapcar (__objc_module_list,\n \t       (void (*) (void *)) __objc_create_classes_tree);\n@@ -783,7 +786,11 @@ objc_send_load (void)\n       list_remove_head (&__objc_class_tree_list);\n     }\n \n-  list_mapcar (__objc_module_list, (void (*) (void *)) __objc_call_callback);\n+  /* For each module, call the _objc_load_callback if any is\n+     defined.  */\n+  list_mapcar (__objc_module_list, (void (*) (void *)) __objc_call_load_callback);\n+\n+  /* Empty the list of modules.  */\n   list_free (__objc_module_list);\n   __objc_module_list = NULL;\n }\n@@ -825,33 +832,34 @@ __objc_create_classes_tree (struct objc_module *module)\n }\n \n static void\n-__objc_call_callback (struct objc_module *module)\n+__objc_call_load_callback (struct objc_module *module)\n {\n-  /* The runtime mutex is locked at this point.  */\n-  struct objc_symtab *symtab = module->symtab;\n-  int i;\n-\n-  /* Iterate thru classes defined in this module and call the callback\n-     for each one.  */\n-  for (i = 0; i < symtab->cls_def_cnt; i++)\n+  if (_objc_load_callback)\n     {\n-      Class class = (Class) symtab->defs[i];\n-\n-      /* Call the _objc_load_callback for this class.  */\n-      if (_objc_load_callback)\n-\t_objc_load_callback (class, 0);\n-    }\n-\n-  /* Call the _objc_load_callback for categories. Don't register the\n-     instance methods as class methods for categories to root classes\n-     since they were already added in the class.  */\n-  for (i = 0; i < symtab->cat_def_cnt; i++)\n-    {\n-      struct objc_category *category = symtab->defs[i + symtab->cls_def_cnt];\n-      Class class = objc_getClass (category->class_name);\n-\n-      if (_objc_load_callback)\n-\t_objc_load_callback (class, category);\n+      /* The runtime mutex is locked at this point.  */\n+      struct objc_symtab *symtab = module->symtab;\n+      int i;\n+      \n+      /* Iterate thru classes defined in this module and call the callback\n+\t for each one.  */\n+      for (i = 0; i < symtab->cls_def_cnt; i++)\n+\t{\n+\t  Class class = (Class) symtab->defs[i];\n+\t  \n+\t  /* Call the _objc_load_callback for this class.  */\n+\t  _objc_load_callback (class, 0);\n+\t}\n+      \n+      /* Call the _objc_load_callback for categories.  Don't register\n+\t the instance methods as class methods for categories to root\n+\t classes since they were already added in the class.  */\n+      for (i = 0; i < symtab->cat_def_cnt; i++)\n+\t{\n+\t  struct objc_category *category = symtab->defs[i + symtab->cls_def_cnt];\n+\t  Class class = objc_getClass (category->class_name);\n+\t  \n+\t  _objc_load_callback (class, category);\n+\t}\n     }\n }\n "}]}