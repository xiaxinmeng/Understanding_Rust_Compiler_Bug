{"sha": "c159751bf52d6bac1c1dfef02498bf1a32f24278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1OTc1MWJmNTJkNmJhYzFjMWRmZWYwMjQ5OGJmMWEzMmYyNDI3OA==", "commit": {"author": {"name": "Hariharan Sandanagobalane", "email": "hariharan@picochip.com", "date": "2010-10-11T14:52:16Z"}, "committer": {"name": "Hariharan Sandanagobalane", "email": "hariharans@gcc.gnu.org", "date": "2010-10-11T14:52:16Z"}, "message": "picochip-protos.h (picochip_function_arg): Delete.\n\n\t* config/picochip/picochip-protos.h (picochip_function_arg): Delete.\n\t(picochip_incoming_function_arg): Delete.\n\t(picochip_arg_advance): Delete.\n\t* config/picochip/picochip.h (FUNCTION_ARG): Delete.\n\t(FUNCTION_INCOMING_ARG): Delete.\n\t(FUNCTION_ARG_ADVANCE): Delete.\n\t* config/picochip/picochip.c (picochip_function_arg): Take a\n\tconst_tree and a bool.\n\t(picochip_incoming_function_arg): Likewise.\n\t(picochip_arg_advance): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165312", "tree": {"sha": "4060108aecc74fcd2fd6b036389408eef48a3810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4060108aecc74fcd2fd6b036389408eef48a3810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c159751bf52d6bac1c1dfef02498bf1a32f24278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c159751bf52d6bac1c1dfef02498bf1a32f24278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c159751bf52d6bac1c1dfef02498bf1a32f24278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c159751bf52d6bac1c1dfef02498bf1a32f24278/comments", "author": null, "committer": null, "parents": [{"sha": "3414bf53840cbfaedf6c4b8ac4ff6a751e491a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3414bf53840cbfaedf6c4b8ac4ff6a751e491a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3414bf53840cbfaedf6c4b8ac4ff6a751e491a50"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "7fdb21ed54504979bc0a79daef36332efd748c8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c159751bf52d6bac1c1dfef02498bf1a32f24278", "patch": "@@ -1,3 +1,19 @@\n+2010-10-11  Hariharan Sandanagobalane  <hariharan@picochip.com>\n+\n+        Nathan Froyds patch to hooks FUNCTION_ARG etc.\n+\t* config/picochip/picochip-protos.h (picochip_function_arg): Delete.\n+\t(picochip_incoming_function_arg): Delete.\n+\t(picochip_arg_advance): Delete.\n+\t* config/picochip/picochip.h (FUNCTION_ARG): Delete.\n+\t(FUNCTION_INCOMING_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/picochip/picochip.c (picochip_function_arg): Take a\n+\tconst_tree and a bool.\n+\t(picochip_incoming_function_arg): Likewise.\n+\t(picochip_arg_advance): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/45955"}, {"sha": "b3755a63624f2e6c4dbc299efc0fa00ea78d2aea", "filename": "gcc/config/picochip/picochip-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h?ref=c159751bf52d6bac1c1dfef02498bf1a32f24278", "patch": "@@ -54,13 +54,6 @@ extern bool ok_to_peephole_ldw(rtx opnd0, rtx opnd1, rtx opnd2, rtx opnd3);\n \n extern rtx gen_min_reg(rtx opnd1,rtx opnd2);\n \n-extern rtx picochip_function_arg (CUMULATIVE_ARGS cum, int mode, tree type,\n-\t\t\t   int named);\n-\n-extern rtx picochip_incoming_function_arg (CUMULATIVE_ARGS, int, tree, int);\n-extern CUMULATIVE_ARGS picochip_arg_advance (CUMULATIVE_ARGS cum, int mode,\n-\t\t\t\t      tree type, int named);\n-\n extern int picochip_regno_nregs (int regno, int mode);\n extern int picochip_class_max_nregs (int klass, int mode);\n "}, {"sha": "8c6b294070beb5d735ed53044e62604e35596366", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=c159751bf52d6bac1c1dfef02498bf1a32f24278", "patch": "@@ -81,6 +81,14 @@ void picochip_reorg (void);\n int picochip_arg_partial_bytes (CUMULATIVE_ARGS * p_cum,\n \t\t\t\t       enum machine_mode mode,\n \t\t\t\t       tree type, bool named);\n+rtx picochip_function_arg (CUMULATIVE_ARGS * p_cum,\n+\t\t\t   enum machine_mode mode,\n+\t\t\t   const_tree type, bool named);\n+rtx picochip_incoming_function_arg (CUMULATIVE_ARGS * p_cum,\n+\t\t\t\t    enum machine_mode mode,\n+\t\t\t\t    const_tree type, bool named);\n+void picochip_arg_advance (CUMULATIVE_ARGS * p_cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named);\n \n int picochip_sched_lookahead (void);\n int picochip_sched_issue_rate (void);\n@@ -262,6 +270,15 @@ static char picochip_get_vliw_alu_id (void);\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES picochip_arg_partial_bytes\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG picochip_function_arg\n+\n+#undef TARGET_FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG picochip_incoming_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE picochip_arg_advance\n+\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n@@ -315,12 +332,6 @@ static char picochip_get_vliw_alu_id (void);\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n-enum unwind_info_type\n-picochip_except_unwind_info (void)\n-{\n-  return UI_NONE;\n-}\n-\n /* Only return a value in memory if it is greater than 4 bytes.\n    int_size_in_bytes returns -1 for variable size objects, which go in\n    memory always.  The cast to unsigned makes -1 > 8.  */\n@@ -799,7 +810,7 @@ picochip_is_aligned (int byte_offset, int bit_alignment)\n \n /* Compute the size of an argument in units. */\n static int\n-picochip_compute_arg_size (tree type, enum machine_mode mode)\n+picochip_compute_arg_size (const_tree type, enum machine_mode mode)\n {\n   int type_size_in_units = 0;\n \n@@ -814,8 +825,8 @@ picochip_compute_arg_size (tree type, enum machine_mode mode)\n \n /* Determine where the next outgoing arg should be placed. */\n rtx\n-picochip_function_arg (CUMULATIVE_ARGS cum, int mode, tree type,\n-\t\t       int named ATTRIBUTE_UNUSED)\n+picochip_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t       const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int reg = 0;\n   int type_align_in_units = 0;\n@@ -835,17 +846,17 @@ picochip_function_arg (CUMULATIVE_ARGS cum, int mode, tree type,\n \n   /* Compute the correct offset (i.e., ensure that the offset meets\n      the alignment requirements). */\n-  offset_overflow = cum % type_align_in_units;\n+  offset_overflow = *cum % type_align_in_units;\n   if (offset_overflow == 0)\n-    new_offset = cum;\n+    new_offset = *cum;\n   else\n-    new_offset = (cum - offset_overflow) + type_align_in_units;\n+    new_offset = (*cum - offset_overflow) + type_align_in_units;\n \n   if (TARGET_DEBUG)\n     {\n       printf (\"Function arg:\\n\");\n       printf (\"  Type valid: %s\\n\", (type ? \"yes\" : \"no\"));\n-      printf (\"  Cumulative Value: %d\\n\", cum);\n+      printf (\"  Cumulative Value: %d\\n\", *cum);\n       printf (\"  Mode: %s\\n\", GET_MODE_NAME (mode));\n       printf (\"  Type size: %i units\\n\", type_size_in_units);\n       printf (\"  Alignment: %i units\\n\", type_align_in_units);\n@@ -879,7 +890,7 @@ picochip_function_arg (CUMULATIVE_ARGS cum, int mode, tree type,\n     case CSImode:\n     case SCmode:\n     case CQImode:\n-      return gen_rtx_REG ((enum machine_mode) mode, reg);\n+      return gen_rtx_REG (mode, reg);\n \n     case BLKmode:\n       {\n@@ -912,8 +923,9 @@ picochip_function_arg (CUMULATIVE_ARGS cum, int mode, tree type,\n    passed in registers, which are then pushed onto the stack by the\n    function prologue). */\n rtx\n-picochip_incoming_function_arg (CUMULATIVE_ARGS cum, int mode,\n-\t\t\t\ttree type, int named)\n+picochip_incoming_function_arg (CUMULATIVE_ARGS *cum,\n+\t\t\t\tenum machine_mode mode,\n+\t\t\t\tconst_tree type, bool named)\n {\n \n   if (cfun->stdarg)\n@@ -998,10 +1010,10 @@ picochip_arg_partial_bytes (CUMULATIVE_ARGS * p_cum, enum machine_mode mode,\n \n }\n \n-/* Advance the cumulative args counter, returning the new counter. */\n-CUMULATIVE_ARGS\n-picochip_arg_advance (const CUMULATIVE_ARGS cum, int mode,\n-\t\t      tree type, int named ATTRIBUTE_UNUSED)\n+/* Advance the cumulative args counter CUM. */\n+void\n+picochip_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t      const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int type_align_in_units = 0;\n   int type_size_in_units;\n@@ -1011,7 +1023,7 @@ picochip_arg_advance (const CUMULATIVE_ARGS cum, int mode,\n   /* VOIDmode is passed when computing the second argument to a `call'\n      pattern. This can be ignored. */\n   if (mode == VOIDmode)\n-    return 0;\n+    return;\n \n   /* Compute the alignment and size of the parameter. */\n   type_align_in_units =\n@@ -1020,17 +1032,16 @@ picochip_arg_advance (const CUMULATIVE_ARGS cum, int mode,\n \n   /* Compute the correct offset (i.e., ensure that the offset meets\n      the alignment requirements). */\n-  offset_overflow = cum % type_align_in_units;\n+  offset_overflow = *cum % type_align_in_units;\n   if (offset_overflow == 0)\n-    new_offset = cum;\n+    new_offset = *cum;\n   else\n-    new_offset = (cum - offset_overflow) + type_align_in_units;\n+    new_offset = (*cum - offset_overflow) + type_align_in_units;\n \n   /* Advance past the last argument. */\n   new_offset += type_size_in_units;\n \n-  return new_offset;\n-\n+  *cum = new_offset;\n }\n \n /* Determine whether a register needs saving/restoring. It does if it"}, {"sha": "61571d6e07cc411b1bd082fc6f27559a34fa4710", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159751bf52d6bac1c1dfef02498bf1a32f24278/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=c159751bf52d6bac1c1dfef02498bf1a32f24278", "patch": "@@ -405,22 +405,9 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* Store the offset of the next argument. */\n #define CUMULATIVE_ARGS unsigned\n \n-/* Decide how function arguments are handled. */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  picochip_function_arg (CUM, MODE, TYPE, NAMED)\n-\n-/* Incoming arguments are always the same as normal arguments, except\n-   for a function which uses variadic arguments, in which case all\n-   arguments are effectively passed on the stack. */\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED) \\\n-  picochip_incoming_function_arg(CUM, MODE, TYPE, NAMED)\n-\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT,N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n-#define FUNCTION_ARG_ADVANCE(CUM,MODE,TYPE,NAMED) \\\n-  (CUM) = picochip_arg_advance (CUM, MODE, TYPE, NAMED)\n-\n /* Originally this used TYPE_ALIGN to determine the\n    alignment.  Unfortunately, this fails in some cases, because the\n    type is unknown (e.g., libcall's). Instead, use GET_MODE_ALIGNMENT"}]}