{"sha": "4e4e3ffd10f53ef71696bc728ab40258751a2df4", "node_id": "C_kwDOANBUbNoAKDRlNGUzZmZkMTBmNTNlZjcxNjk2YmM3MjhhYjQwMjU4NzUxYTJkZjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:16:00Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:16:00Z"}, "message": "libstdc++: Move stream initialization into compiled library [PR44952]\n\nThis patch moves the static object for constructing the standard streams\nout from <iostream> and into the compiled library on systems that support\ninit priorities.  This'll mean <iostream> no longer introduces a separate\nglobal constructor in each TU that includes it.\n\nWe can do this only if the init_priority attribute is supported because\nwe need a way to ensure the stream initialization runs first before any\nuser global initializer, particularly when linking with a static\nlibstdc++.a.\n\n\tPR libstdc++/44952\n\tPR libstdc++/39796\n\tPR libstdc++/98108\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/iostream (__ioinit): No longer define here if\n\tthe init_priority attribute is usable.\n\t* src/c++98/ios_init.cc (__ioinit): Define here instead if\n\tinit_priority is usable, via ...\n\t* src/c++98/ios_base_init.h: ... this new file.", "tree": {"sha": "3a161134d60201a9391d4a0095c12ca8c4c6a6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a161134d60201a9391d4a0095c12ca8c4c6a6e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e4e3ffd10f53ef71696bc728ab40258751a2df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4e3ffd10f53ef71696bc728ab40258751a2df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4e3ffd10f53ef71696bc728ab40258751a2df4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4e3ffd10f53ef71696bc728ab40258751a2df4/comments", "author": null, "committer": null, "parents": [{"sha": "d0a492faa6478c99d325fa4a7ed2e5633cef7529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a492faa6478c99d325fa4a7ed2e5633cef7529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a492faa6478c99d325fa4a7ed2e5633cef7529"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "ff78e1cfb875e81f00f061ca779fd9da1f15a0ad", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=4e4e3ffd10f53ef71696bc728ab40258751a2df4", "patch": "@@ -73,7 +73,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ///@}\n \n   // For construction of filebuffers for cout, cin, cerr, clog et. al.\n+  // When the init_priority attribute is usable, we do this initialization\n+  // in the compiled library instead (src/c++98/ios_init.cc).\n+#if !__has_attribute(__init_priority__)\n   static ios_base::Init __ioinit;\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1c71038f4a12d11eb5df5f3bc487e3bfe5e28c3d", "filename": "libstdc++-v3/src/c++98/ios_base_init.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_base_init.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_base_init.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_base_init.h?ref=4e4e3ffd10f53ef71696bc728ab40258751a2df4", "patch": "@@ -0,0 +1,12 @@\n+// This is only in a header so we can use the system_header pragma,\n+// to suppress the warning caused by using a reserved init_priority.\n+#pragma GCC system_header\n+\n+// If the target supports init priorities, set up a static object in the\n+// compiled library to perform the <iostream> initialization once and\n+// sufficiently early (so that it happens before any other global\n+// constructor when statically linking with libstdc++.a), instead of\n+// doing so in (each TU that includes) <iostream>.\n+#if __has_attribute(init_priority)\n+static ios_base::Init __ioinit __attribute__((init_priority(90)));\n+#endif"}, {"sha": "4016fcab785b4a8901634ef4241fc67d3cc4aef0", "filename": "libstdc++-v3/src/c++98/ios_init.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4e3ffd10f53ef71696bc728ab40258751a2df4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc?ref=4e4e3ffd10f53ef71696bc728ab40258751a2df4", "patch": "@@ -75,6 +75,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern wostream wclog;\n #endif\n \n+#include \"ios_base_init.h\"\n+\n   ios_base::Init::Init()\n   {\n     if (__gnu_cxx::__exchange_and_add_dispatch(&_S_refcount, 1) == 0)"}]}