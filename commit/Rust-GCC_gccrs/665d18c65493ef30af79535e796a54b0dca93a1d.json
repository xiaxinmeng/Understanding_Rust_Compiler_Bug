{"sha": "665d18c65493ef30af79535e796a54b0dca93a1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1ZDE4YzY1NDkzZWYzMGFmNzk1MzVlNzk2YTU0YjBkY2E5M2ExZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-11-24T09:48:43Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-11-24T09:48:43Z"}, "message": "optabs.c (expand_binop): Use swap_commutative_operands_with_target to order operands.\n\n2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n\tto order operands.\n\t(swap_commutative_operands_with_target): New.\n\nFrom-SVN: r107457", "tree": {"sha": "dfd8dbaa4d426d5823ffc5325193e8adf7210b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd8dbaa4d426d5823ffc5325193e8adf7210b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/665d18c65493ef30af79535e796a54b0dca93a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665d18c65493ef30af79535e796a54b0dca93a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665d18c65493ef30af79535e796a54b0dca93a1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665d18c65493ef30af79535e796a54b0dca93a1d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9063128058ba5d3323a02f897f75c8818863430d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9063128058ba5d3323a02f897f75c8818863430d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9063128058ba5d3323a02f897f75c8818863430d"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "a5db382da12e9a497331217e41d7fdc34df3912b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665d18c65493ef30af79535e796a54b0dca93a1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665d18c65493ef30af79535e796a54b0dca93a1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=665d18c65493ef30af79535e796a54b0dca93a1d", "patch": "@@ -1,3 +1,9 @@\n+2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n+\tto order operands.\n+\t(swap_commutative_operands_with_target): New.\n+\n 2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcse.c (hash_scan_set): Look through REG_EQUAL or REG_EQUIV notes"}, {"sha": "2b0e02c8601a0a960a893036e595616bf4a9a3ee", "filename": "gcc/optabs.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665d18c65493ef30af79535e796a54b0dca93a1d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665d18c65493ef30af79535e796a54b0dca93a1d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=665d18c65493ef30af79535e796a54b0dca93a1d", "patch": "@@ -998,6 +998,30 @@ expand_simple_binop (enum machine_mode mode, enum rtx_code code, rtx op0,\n   return expand_binop (mode, binop, op0, op1, target, unsignedp, methods);\n }\n \n+/* Return whether OP0 and OP1 should be swapped when expanding a commutative\n+   binop.  Order them according to commutative_operand_precedence and, if\n+   possible, try to put TARGET or a pseudo first.  */\n+static bool\n+swap_commutative_operands_with_target (rtx target, rtx op0, rtx op1)\n+{\n+  int op0_prec = commutative_operand_precedence (op0);\n+  int op1_prec = commutative_operand_precedence (op1);\n+\n+  if (op0_prec < op1_prec)\n+    return true;\n+\n+  if (op0_prec > op1_prec)\n+    return false;\n+\n+  /* With equal precedence, both orders are ok, but it is better if the\n+     first operand is TARGET, or if both TARGET and OP0 are pseudos.  */\n+  if (target == 0 || REG_P (target))\n+    return (REG_P (op1) && !REG_P (op0)) || target == op1;\n+  else\n+    return rtx_equal_p (op1, target);\n+}\n+\n+\n /* Generate code to perform an operation specified by BINOPTAB\n    on operands OP0 and OP1, with result having machine-mode MODE.\n \n@@ -1073,12 +1097,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n     {\n       commutative_op = 1;\n \n-      if (((target == 0 || REG_P (target))\n-\t   ? ((REG_P (op1)\n-\t       && !REG_P (op0))\n-\t      || target == op1)\n-\t   : rtx_equal_p (op1, target))\n-\t  || GET_CODE (op0) == CONST_INT)\n+      if (swap_commutative_operands_with_target (target, op0, op1))\n \t{\n \t  temp = op1;\n \t  op1 = op0;"}]}