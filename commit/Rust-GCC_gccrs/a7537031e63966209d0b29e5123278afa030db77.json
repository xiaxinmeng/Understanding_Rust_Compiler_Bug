{"sha": "a7537031e63966209d0b29e5123278afa030db77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1MzcwMzFlNjM5NjYyMDlkMGIyOWU1MTIzMjc4YWZhMDMwZGI3Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-10T10:57:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-10T10:57:17Z"}, "message": "invoke.texi: Document that -fcond-mismatch isn't supported for C++.\n\n\t* invoke.texi: Document that -fcond-mismatch isn't supported for\n\tC++.\n\ncp:\n\t* cp-tree.h (flag_cond_mismatch): Don't declare.\n\t* decl2.c (flag_cond_mismatch): Don't define.\n\t(lang_f_options): Remove cond-mismatch.\n\t(unsupported_options): Add cond-mismatch.\n\nFrom-SVN: r38864", "tree": {"sha": "7a457eb4fdea25002033d55e30d2052ad5b90b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a457eb4fdea25002033d55e30d2052ad5b90b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7537031e63966209d0b29e5123278afa030db77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7537031e63966209d0b29e5123278afa030db77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7537031e63966209d0b29e5123278afa030db77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7537031e63966209d0b29e5123278afa030db77/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2642624b16f87187d60e6c303486fbbec9fd6329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2642624b16f87187d60e6c303486fbbec9fd6329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2642624b16f87187d60e6c303486fbbec9fd6329"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "b0c0eac0a34ae531fdd23384631245b2b484870d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7537031e63966209d0b29e5123278afa030db77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7537031e63966209d0b29e5123278afa030db77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7537031e63966209d0b29e5123278afa030db77", "patch": "@@ -1,3 +1,8 @@\n+2001-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* invoke.texi: Document that -fcond-mismatch isn't supported for\n+\tC++.\n+\n 2001-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.texi: Define macro gcctabopt."}, {"sha": "173e22218ba6eb09f9b7efa64e855ca0f9b52f0c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7537031e63966209d0b29e5123278afa030db77", "patch": "@@ -1,3 +1,10 @@\n+2001-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* cp-tree.h (flag_cond_mismatch): Don't declare.\n+\t* decl2.c (flag_cond_mismatch): Don't define.\n+\t(lang_f_options): Remove cond-mismatch.\n+\t(unsupported_options): Add cond-mismatch.\n+\n 2001-01-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (handle_using_decl): Reject using of constructor name"}, {"sha": "d0784e89ca6d53d22cc34350762059c8f4943c83", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a7537031e63966209d0b29e5123278afa030db77", "patch": "@@ -990,11 +990,6 @@ extern tree global_namespace;\n \n extern int dollars_in_ident;\n \n-/* Nonzero means allow type mismatches in conditional expressions;\n-   just make their values `void'.   */\n-\n-extern int flag_cond_mismatch;\n-\n /* Nonzero means don't recognize the keyword `asm'.  */\n \n extern int flag_no_asm;"}, {"sha": "4da673bd488e2ba9f705c80b1f710ffe710d612c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7537031e63966209d0b29e5123278afa030db77/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a7537031e63966209d0b29e5123278afa030db77", "patch": "@@ -139,11 +139,6 @@ static tree decl_namespace_list;\n \f\n /* C (and C++) language-specific option variables.  */\n \n-/* Nonzero means allow type mismatches in conditional expressions;\n-   just make their values `void'.   */\n-\n-int flag_cond_mismatch;\n-\n /* Nonzero means don't recognize the keyword `asm'.  */\n \n int flag_no_asm;\n@@ -492,7 +487,6 @@ lang_f_options[] =\n   {\"short-enums\", &flag_short_enums, 1},\n   {\"short-double\", &flag_short_double, 1},\n   {\"short-wchar\", &flag_short_wchar, 1},\n-  {\"cond-mismatch\", &flag_cond_mismatch, 1},\n   {\"asm\", &flag_no_asm, 0},\n   {\"builtin\", &flag_no_builtin, 0},\n \n@@ -536,6 +530,7 @@ lang_f_options[] =\n    listed here.  This table must be kept in alphabetical order.  */\n static const char * const unsupported_options[] = {\n   \"all-virtual\",\n+  \"cond-mismatch\",\n   \"enum-int-equiv\",\n   \"guiding-decls\",\n   \"nonnull-objects\","}, {"sha": "3d3cafff9de799697c6b253bada772bad155e3e3", "filename": "gcc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7537031e63966209d0b29e5123278afa030db77/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7537031e63966209d0b29e5123278afa030db77/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=a7537031e63966209d0b29e5123278afa030db77", "patch": "@@ -1071,7 +1071,8 @@ string constants can contain the newline character as typed.)\n \n @item -fcond-mismatch\n Allow conditional expressions with mismatched types in the second and\n-third arguments.  The value of such an expression is void.\n+third arguments.  The value of such an expression is void.  This option\n+is not supported for C++.\n \n @item -funsigned-char\n Let the type @code{char} be unsigned, like @code{unsigned char}."}]}