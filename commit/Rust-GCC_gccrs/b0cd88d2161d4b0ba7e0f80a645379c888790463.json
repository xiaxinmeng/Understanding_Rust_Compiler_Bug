{"sha": "b0cd88d2161d4b0ba7e0f80a645379c888790463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjZDg4ZDIxNjFkNGIwYmE3ZTBmODBhNjQ1Mzc5Yzg4ODc5MDQ2Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-23T07:19:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-23T07:19:34Z"}, "message": "[multiple changes]\n\n2006-10-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/27132\n\tPR middle-end/23295\n\t* builtins.c (fold_binary): Remove checks for flag_wrapv\n\tand flag_trapv where negate_expr_p covers these cases.\n\n\t* gcc.dg/pr27132.c: New testcase.\n\t* gcc.dg/pr23295.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23294.c: Adjust patterns.\n\t* g++.dg/tree-ssa/pr19807.C: Likewise.\n\n2006-10-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/29548\n\t* fold-const.c (fold_plusminus_mult_expr): Check exact power\n\tof two on the absolute value.\n\t(fold_binary): Fold x * -C to -x * C if x is easily negatable\n\tand negating -C does not overflow.\n\nFrom-SVN: r117969", "tree": {"sha": "d97b9b672b20ee97edec65e201600934023bb726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d97b9b672b20ee97edec65e201600934023bb726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0cd88d2161d4b0ba7e0f80a645379c888790463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cd88d2161d4b0ba7e0f80a645379c888790463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0cd88d2161d4b0ba7e0f80a645379c888790463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cd88d2161d4b0ba7e0f80a645379c888790463/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f76e46b189899f58e018dec68d7f5e68a6e55a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f76e46b189899f58e018dec68d7f5e68a6e55a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f76e46b189899f58e018dec68d7f5e68a6e55a2"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "568ba2e78f5657e41ab8ac13cc84de5b62bb4369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -1,3 +1,18 @@\n+2006-10-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27132\n+\tPR middle-end/23295\n+\t* builtins.c (fold_binary): Remove checks for flag_wrapv\n+\tand flag_trapv where negate_expr_p covers these cases.\n+\n+2006-10-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/29548\n+\t* fold-const.c (fold_plusminus_mult_expr): Check exact power\n+\tof two on the absolute value.\n+\t(fold_binary): Fold x * -C to -x * C if x is easily negatable\n+\tand negating -C does not overflow.\n+\n 2006-10-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/21032"}, {"sha": "571a7e84612a0126cf248b871fbe86b8c355c727", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -6787,7 +6787,7 @@ fold_plusminus_mult_expr (enum tree_code code, tree type, tree arg0, tree arg1)\n       else\n \tmaybe_same = arg11;\n \n-      if (exact_log2 (int11) > 0 && int01 % int11 == 0)\n+      if (exact_log2 (abs (int11)) > 0 && int01 % int11 == 0)\n         {\n \t  alt0 = fold_build2 (MULT_EXPR, TREE_TYPE (arg00), arg00,\n \t\t\t      build_int_cst (TREE_TYPE (arg00),\n@@ -8752,7 +8752,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n \t  && (FLOAT_TYPE_P (type)\n-\t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv))\n+\t      || INTEGRAL_TYPE_P (type))\n \t  && negate_expr_p (arg1)\n \t  && reorder_operands_p (arg0, arg1))\n \treturn fold_build2 (MINUS_EXPR, type, negate_expr (arg1),\n@@ -8838,7 +8838,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n                /* Avoid this transformation if B is a positive REAL_CST.  */\n \t       && (TREE_CODE (arg1) != REAL_CST\n \t\t   ||  REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1))))\n-\t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv)))\n+\t      || INTEGRAL_TYPE_P (type)))\n \treturn fold_build2 (PLUS_EXPR, type,\n \t\t\t    fold_convert (type, arg0),\n \t\t\t    fold_convert (type, negate_expr (arg1)));\n@@ -8923,6 +8923,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  /* Transform x * -1 into -x.  */\n \t  if (integer_all_onesp (arg1))\n \t    return fold_convert (type, negate_expr (arg0));\n+\t  /* Transform x * -C into -x * C if x is easily negatable.  */\n+\t  if (TREE_CODE (arg1) == INTEGER_CST\n+\t      && tree_int_cst_sgn (arg1) == -1\n+\t      && negate_expr_p (arg0)\n+\t      && (tem = negate_expr (arg1)) != arg1\n+\t      && !TREE_OVERFLOW (tem))\n+\t    return fold_build2 (MULT_EXPR, type,\n+\t    \t\t\tnegate_expr (arg0), tem);\n \n \t  /* (a * (1 << b)) is (a << b)  */\n \t  if (TREE_CODE (arg1) == LSHIFT_EXPR"}, {"sha": "b8b1c525dd44865558c7bd1a02d2ebed8b0ed891", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -1,3 +1,12 @@\n+2006-10-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27132\n+\tPR middle-end/23295\n+\t* gcc.dg/pr27132.c: New testcase.\n+\t* gcc.dg/pr23295.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23294.c: Adjust patterns.\n+\t* g++.dg/tree-ssa/pr19807.C: Likewise.\n+\n 2006-10-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/21032"}, {"sha": "d85b8ad8742b8e5912228bce2e9f1749bc51540e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19807.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -19,6 +19,6 @@ void bar(int i)\n }\n \n /* { dg-final { scan-tree-dump-times \"&a\\\\\\[2\\\\\\]\" 3 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"&a\\\\\\[.* - 1\\\\\\]\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"&a\\\\\\[.* \\\\+ -1\\\\\\]\" 1 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"&a\\\\\\[.* \\\\+ 1\\\\\\]\" 1 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "0418964a709b7df5450404a1793c58d9f03f6e2d", "filename": "gcc/testsuite/gcc.dg/pr23295.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23295.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23295.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23295.c?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int foo(int i)\n+{\n+  return -i - 5;\n+}\n+\n+/* { dg-final { scan-tree-dump \"-5 - i\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "272862a2d84f5d626fb6a0d5dd2daa152ce5445a", "filename": "gcc/testsuite/gcc.dg/pr27132.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27132.c?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int foo(int i)\n+{\n+  return i - -1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"i \\\\+ 1\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "d73512d7af508f39bdc2ee1cd48b7f03162caa77", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23294.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cd88d2161d4b0ba7e0f80a645379c888790463/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c?ref=b0cd88d2161d4b0ba7e0f80a645379c888790463", "patch": "@@ -32,7 +32,6 @@ int f6(int a, int b)\n }\n \n /* { dg-final { scan-tree-dump-times \"a \\\\\\* 5\" 3 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(b \\\\\\* 3 \\\\\\+ a\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(a - b \\\\\\* 3\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(a \\\\\\* 3 - b\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\) \\\\\\* 2\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\* 6\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}