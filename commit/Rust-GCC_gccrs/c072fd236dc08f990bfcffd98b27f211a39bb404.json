{"sha": "c072fd236dc08f990bfcffd98b27f211a39bb404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA3MmZkMjM2ZGMwOGY5OTBiZmNmZmQ5OGIyN2YyMTFhMzliYjQwNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-06T08:15:25Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-06T08:15:25Z"}, "message": "x86_64: Integer min/max improvements.\n\nThis patch tweaks the way that min and max are expanded, so that the\nsemantics of these operations are visible to the early RTL optimization\npasses, until split into explicit comparison and conditional move\ninstructions. The good news is that i386.md already contains all of\nthe required logic (many thanks to Richard Biener and Uros Bizjak),\nbut this is currently only enabled to scalar-to-vector (STV) synthesis\nof min/max instructions.  This change enables this functionality for\nall TARGET_CMOVE architectures for SImode, HImode and DImode.\n\n2020-08-06  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (MAXMIN_IMODE): No longer needed.\n\t(<maxmin><mode>3):  Support SWI248 and general_operand for\n\tsecond operand, when TARGET_CMOVE.\n\t(<maxmin><mode>3_1 splitter): Optimize comparisons against\n\t0, 1 and -1 to use \"test\" instead of \"cmp\".\n\t(*<maxmin>di3_doubleword): Likewise, allow general_operand\n\tand enable on TARGET_CMOVE.\n\t(peephole2): Convert clearing a register after a flag setting\n\tinstruction into an xor followed by the original flag setter.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/minmax-8.c: New test.\n\t* gcc.target/i386/minmax-9.c: New test.\n\t* gcc.target/i386/minmax-10.c: New test.\n\t* gcc.target/i386/minmax-11.c: New test.", "tree": {"sha": "5855e0bd9b0ccdbc47ea5adb68382d23da54abcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5855e0bd9b0ccdbc47ea5adb68382d23da54abcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c072fd236dc08f990bfcffd98b27f211a39bb404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c072fd236dc08f990bfcffd98b27f211a39bb404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c072fd236dc08f990bfcffd98b27f211a39bb404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c072fd236dc08f990bfcffd98b27f211a39bb404/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85245bda63ab4cdad0a7cb0f94e06ad4b9a121d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85245bda63ab4cdad0a7cb0f94e06ad4b9a121d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85245bda63ab4cdad0a7cb0f94e06ad4b9a121d2"}], "stats": {"total": 165, "additions": 146, "deletions": 19}, "files": [{"sha": "4e916bf3c32990b5645e6dad7fb03a18dab740b8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c072fd236dc08f990bfcffd98b27f211a39bb404", "patch": "@@ -18809,45 +18809,68 @@\n \n ;; min/max patterns\n \n-(define_mode_iterator MAXMIN_IMODE\n-  [(SI \"TARGET_SSE4_1\") (DI \"TARGET_AVX512VL\")])\n (define_code_attr maxmin_rel\n   [(smax \"GE\") (smin \"LE\") (umax \"GEU\") (umin \"LEU\")])\n \n (define_expand \"<code><mode>3\"\n   [(parallel\n-    [(set (match_operand:MAXMIN_IMODE 0 \"register_operand\")\n-\t  (maxmin:MAXMIN_IMODE\n-\t    (match_operand:MAXMIN_IMODE 1 \"register_operand\")\n-\t    (match_operand:MAXMIN_IMODE 2 \"nonimmediate_operand\")))\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (maxmin:SWI248\n+\t    (match_operand:SWI248 1 \"register_operand\")\n+\t    (match_operand:SWI248 2 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_STV\")\n+  \"TARGET_CMOVE\")\n \n (define_insn_and_split \"*<code><mode>3_1\"\n-  [(set (match_operand:MAXMIN_IMODE 0 \"register_operand\")\n-\t(maxmin:MAXMIN_IMODE\n-\t  (match_operand:MAXMIN_IMODE 1 \"register_operand\")\n-\t  (match_operand:MAXMIN_IMODE 2 \"nonimmediate_operand\")))\n+  [(set (match_operand:SWI248 0 \"register_operand\")\n+\t(maxmin:SWI248\n+\t  (match_operand:SWI248 1 \"register_operand\")\n+\t  (match_operand:SWI248 2 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_64BIT || <MODE>mode != DImode) && TARGET_STV\n+  \"TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n-\t(if_then_else:MAXMIN_IMODE (match_dup 3)\n+\t(if_then_else:SWI248 (match_dup 3)\n \t  (match_dup 1)\n \t  (match_dup 2)))]\n {\n   machine_mode mode = <MODE>mode;\n+  rtx cmp_op = operands[2];\n \n-  if (!register_operand (operands[2], mode))\n-    operands[2] = force_reg (mode, operands[2]);\n+  if (!register_operand (cmp_op, mode))\n+    operands[2] = force_reg (mode, cmp_op);\n \n   enum rtx_code code = <maxmin_rel>;\n-  machine_mode cmpmode = SELECT_CC_MODE (code, operands[1], operands[2]);\n+\n+  if (cmp_op == const1_rtx)\n+    {\n+      /* Convert smax (x, 1) into (x > 0 ? x : 1).\n+\t Convert umax (x, 1) into (x != 0 ? x : 1).\n+\t Convert ?min (x, 1) into (x <= 0 ? x : 1).  */\n+      cmp_op = const0_rtx;\n+      if (code == GE)\n+\tcode = GT;\n+      else if (code == GEU)\n+\tcode = NE;\n+    }\n+  /* Convert smin (x, -1) into (x < 0 ? x : -1).  */\n+  else if (cmp_op == constm1_rtx && code == LE)\n+    {\n+      cmp_op = const0_rtx;\n+      code = LT;\n+    }\n+  /* Convert smax (x, -1) into (x >= 0 ? x : -1).  */\n+  else if (cmp_op == constm1_rtx && code == GE)\n+    cmp_op = const0_rtx;\n+  else if (cmp_op != const0_rtx)\n+    cmp_op = operands[2];\n+\n+  machine_mode cmpmode = SELECT_CC_MODE (code, operands[1], cmp_op);\n   rtx flags = gen_rtx_REG (cmpmode, FLAGS_REG);\n \n-  rtx tmp = gen_rtx_COMPARE (cmpmode, operands[1], operands[2]);\n+  rtx tmp = gen_rtx_COMPARE (cmpmode, operands[1], cmp_op);\n   emit_insn (gen_rtx_SET (flags, tmp));\n \n   operands[3] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);\n@@ -18856,9 +18879,9 @@\n (define_insn_and_split \"*<code>di3_doubleword\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(maxmin:DI (match_operand:DI 1 \"register_operand\")\n-\t\t   (match_operand:DI 2 \"nonimmediate_operand\")))\n+\t\t   (match_operand:DI 2 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_STV && TARGET_AVX512VL\n+  \"!TARGET_64BIT && TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -18910,6 +18933,19 @@\n       gcc_unreachable ();\n     }\n })\n+\n+;; Avoid clearing a register between a flags setting comparison and its use,\n+;; i.e. prefer \"xorl %eax,%eax; test/cmp\" over \"test/cmp; movl $0, %eax\".\n+(define_peephole2\n+  [(set (reg FLAGS_REG) (match_operand 0))\n+   (set (match_operand:SWI 1 \"register_operand\") (const_int 0))]\n+  \"peep2_regno_dead_p (0, FLAGS_REG)\n+   && !reg_overlap_mentioned_p (operands[1], operands[0])\"\n+   [(set (match_dup 2) (match_dup 0))]\n+{\n+  operands[2] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n+  ix86_expand_clear (operands[1]);\n+})\n \f\n ;; Misc patterns (?)\n "}, {"sha": "b044462c5a9edd8ac9b87258e2aef2f77901c3a4", "filename": "gcc/testsuite/gcc.target/i386/minmax-10.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-10.c?ref=c072fd236dc08f990bfcffd98b27f211a39bb404", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define max(a,b) (((a) > (b))? (a) : (b))\n+#define min(a,b) (((a) < (b))? (a) : (b))\n+\n+int smax1(int x)\n+{\n+  return max(x,1);\n+}\n+\n+int smin1(int x)\n+{\n+  return min(x,1);\n+}\n+\n+int smaxm1(int x)\n+{\n+  return max(x,-1);\n+}\n+\n+int sminm1(int x)\n+{\n+  return min(x,-1);\n+}\n+\n+unsigned int umax1(unsigned int x)\n+{\n+  return max(x,1);\n+}\n+\n+unsigned int umin1(unsigned int x)\n+{\n+  return min(x,1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"test\" 6 } } */\n+/* { dg-final { scan-assembler-not \"cmp\" } } */"}, {"sha": "a8c2df547543adfa7570d481edff0c958edf7278", "filename": "gcc/testsuite/gcc.target/i386/minmax-11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-11.c?ref=c072fd236dc08f990bfcffd98b27f211a39bb404", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-reassoc\" } */\n+\n+#define max(a,b) (((a) > (b))? (a) : (b))\n+\n+int foo(int x)\n+{\n+  int y = max(x,12345);\n+  return max(y,87654);\n+}\n+\n+/* { dg-final { scan-assembler-not \"12345\" } } */"}, {"sha": "1f7e4667e4996660dc01b3624e64fc128d7ce636", "filename": "gcc/testsuite/gcc.target/i386/minmax-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-8.c?ref=c072fd236dc08f990bfcffd98b27f211a39bb404", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+#define max(a,b) (((a) > (b))? (a) : (b))\n+#define min(a,b) (((a) < (b))? (a) : (b))\n+\n+int foo(int x)\n+{\n+  return max(x,12345);\n+}\n+\n+int bar(int x)\n+{\n+  return min(x,87654);\n+}\n+\n+/* { dg-final { scan-assembler-times \"12345\" 1 } } */\n+/* { dg-final { scan-assembler-times \"87654\" 1 } } */"}, {"sha": "3b940230bd44e4ee197a99b83d77aaefef9cfc19", "filename": "gcc/testsuite/gcc.target/i386/minmax-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c072fd236dc08f990bfcffd98b27f211a39bb404/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-9.c?ref=c072fd236dc08f990bfcffd98b27f211a39bb404", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+#define max(a,b) (((a) > (b))? (a) : (b))\n+#define min(a,b) (((a) < (b))? (a) : (b))\n+\n+int foo(int x)\n+{\n+  return max(x,0);\n+}\n+\n+int bar(int x)\n+{\n+  return min(x,0);\n+}\n+\n+unsigned int baz(unsigned int x)\n+{\n+  return min(x,1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xor\" 3 } } */\n+/* { dg-final { scan-assembler-times \"test\" 3 } } */"}]}