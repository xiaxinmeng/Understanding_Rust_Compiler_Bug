{"sha": "8d3620baab5d17081918b8c0f0e593a49a0d8550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzNjIwYmFhYjVkMTcwODE5MThiOGMwZjBlNTkzYTQ5YTBkODU1MA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T16:51:53Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T16:51:53Z"}, "message": "rs6000: wf -> wa\n\n\"wf\" is just \"wa\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wf\"):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wf.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271921", "tree": {"sha": "1ff6535574297ce1c67543d1f3a2cb4cf0b9d5a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff6535574297ce1c67543d1f3a2cb4cf0b9d5a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3620baab5d17081918b8c0f0e593a49a0d8550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3620baab5d17081918b8c0f0e593a49a0d8550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3620baab5d17081918b8c0f0e593a49a0d8550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3620baab5d17081918b8c0f0e593a49a0d8550/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10078f3e1d0cbebc5e6f7f4821d3ad41421ef1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10078f3e1d0cbebc5e6f7f4821d3ad41421ef1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10078f3e1d0cbebc5e6f7f4821d3ad41421ef1e0"}], "stats": {"total": 105, "additions": 50, "deletions": 55}, "files": [{"sha": "c7af3457858a9fafaf689c5e9df322b00a606b43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -1,3 +1,15 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wf\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wf.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Andrew Pinski  <apinski@marvell.com>\n \n \t* config/aarch64/aarch64.c (aarch64_asan_shadow_offset):"}, {"sha": "f45102bd37ecfe0474984ad2c5a42798d9603750", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -62,9 +62,6 @@\n (define_register_constraint \"we\" \"rs6000_constraints[RS6000_CONSTRAINT_we]\"\n   \"VSX register if the -mpower9-vector -m64 options were used or NO_REGS.\")\n \n-(define_register_constraint \"wf\" \"rs6000_constraints[RS6000_CONSTRAINT_wf]\"\n-  \"VSX vector register to hold vector float data or NO_REGS.\")\n-\n ;; NO_REGs register constraint, used to merge mov{sd,sf}, since movsd can use\n ;; direct move directly, and movsf can't to move between the register sets.\n ;; There is a mode_attr that resolves to wa for SDmode and wn for SFmode"}, {"sha": "84a8257777056b8a20ddac00b829e68b66d2e50e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -2509,7 +2509,6 @@ rs6000_debug_reg_global (void)\n \t   \"v  reg_class = %s\\n\"\n \t   \"wa reg_class = %s\\n\"\n \t   \"we reg_class = %s\\n\"\n-\t   \"wf reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n@@ -2522,7 +2521,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_v]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wa]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n@@ -3136,7 +3134,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \tv  - Altivec register.\n \twa - Any VSX register.\n \twc - Reserved to represent individual CR bits (used in LLVM).\n-\twf - Preferred register class for V4SFmode.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n \tww - Register class to do SF conversions in with VSX operations.\n@@ -3149,10 +3146,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     }\n \n   if (TARGET_VSX)\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n-      rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n-    }\n+    rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n \n   /* Add conditional constraints based on various options, to allow us to\n      collapse multiple insn patterns.  */"}, {"sha": "d59f9254a9ceed9a5364df5d6027ae8c213eeb61", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -1257,7 +1257,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_v,\t\t/* Altivec registers */\n   RS6000_CONSTRAINT_wa,\t\t/* Any VSX register */\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n-  RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */"}, {"sha": "f596987fb7495e385e0a9600b021ab1985686480", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -624,7 +624,7 @@\n \t\t\t(DF   \"wa\")\n \t\t\t(TF   \"f\")\n \t\t\t(TD   \"f\")\n-\t\t\t(V4SF \"wf\")\n+\t\t\t(V4SF \"wa\")\n \t\t\t(V2DF \"wa\")])\n \n (define_mode_attr rreg2 [(SF   \"f\")"}, {"sha": "4450537de8a044b02bfec35f1b43a164c25069a3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -111,7 +111,7 @@\n (define_mode_attr VSr\t[(V16QI \"v\")\n \t\t\t (V8HI  \"v\")\n \t\t\t (V4SI  \"v\")\n-\t\t\t (V4SF  \"wf\")\n+\t\t\t (V4SF  \"wa\")\n \t\t\t (V2DI  \"wa\")\n \t\t\t (V2DF  \"wa\")\n \t\t\t (DI\t\"wa\")\n@@ -126,7 +126,7 @@\n ;; VSr2 is the preferred register class, VSr3 is any register class that will\n ;; hold the data\n (define_mode_attr VSr2\t[(V2DF  \"wa\")\n-\t\t\t (V4SF  \"wf\")\n+\t\t\t (V4SF  \"wa\")\n \t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (DI\t\"wa\")\n@@ -1904,15 +1904,13 @@\n ;; multiply.\n \n (define_insn \"*vsx_fmav4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wf,wf,?wa,?wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n \t(fma:V4SF\n-\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wf,wf,wa,wa,v\")\n-\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wf,0,wa,0,v\")\n-\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wf,0,wa,v\")))]\n+\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n+\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n+\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n-   xvmaddasp %x0,%x1,%x2\n-   xvmaddmsp %x0,%x1,%x3\n    xvmaddasp %x0,%x1,%x2\n    xvmaddmsp %x0,%x1,%x3\n    vmaddfp %0,%1,%2,%3\"\n@@ -1961,17 +1959,15 @@\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfmsv4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wf,wf,?wa,?wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n \t(neg:V4SF\n \t (fma:V4SF\n-\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wf,wf,wa,wa,v\")\n-\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wf,0,wa,0,v\")\n+\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n+\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n \t   (neg:V4SF\n-\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wf,0,wa,v\")))))]\n+\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n-   xvnmsubasp %x0,%x1,%x2\n-   xvnmsubmsp %x0,%x1,%x3\n    xvnmsubasp %x0,%x1,%x2\n    xvnmsubmsp %x0,%x1,%x3\n    vnmsubfp %0,%1,%2,%3\"\n@@ -2410,24 +2406,24 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvsxdsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n-\t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wf,wa\")]\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVSXDSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvsxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"vsx_xvcvuxdsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n-\t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wf,wa\")]\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVUXDSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvuxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcdpsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n-\t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"wf,wa\")]\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_XVCDPSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvdpsp %x0,%x1\"\n@@ -2436,8 +2432,8 @@\n ;; Convert from 32-bit to 64-bit types\n ;; Provide both vector and scalar targets\n (define_insn \"vsx_xvcvsxwdp\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,?wa\")\n-\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wf,wa\")]\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVSXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvsxwdp %x0,%x1\"\n@@ -2452,8 +2448,8 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvuxwdp\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,?wa\")\n-\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wf,wa\")]\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVUXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvuxwdp %x0,%x1\"\n@@ -4225,11 +4221,11 @@\n \n ;; V4SF/V4SI interleave\n (define_insn \"vsx_xxmrghw_<mode>\"\n-  [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wf,?<VSa>\")\n+  [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wa,?<VSa>\")\n         (vec_select:VSX_W\n \t  (vec_concat:<VS_double>\n-\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,<VSa>\")\n-\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,<VSa>\"))\n+\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wa,<VSa>\")\n+\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wa,<VSa>\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n@@ -4242,11 +4238,11 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"vsx_xxmrglw_<mode>\"\n-  [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wf,?<VSa>\")\n+  [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wa,?<VSa>\")\n \t(vec_select:VSX_W\n \t  (vec_concat:<VS_double>\n-\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,<VSa>\")\n-\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,?<VSa>\"))\n+\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wa,<VSa>\")\n+\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wa,?<VSa>\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n@@ -4300,12 +4296,12 @@\n    (set_attr \"type\" \"veccomplex\")])\n \n (define_insn_and_split \"vsx_reduc_<VEC_reduc_name>_v4sf\"\n-  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"=wf,?wa\")\n+  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"=wa\")\n \t(VEC_reduc:V4SF\n \t (unspec:V4SF [(const_int 0)] UNSPEC_REDUC)\n-\t (match_operand:V4SF 1 \"vfloat_operand\" \"wf,wa\")))\n-   (clobber (match_scratch:V4SF 2 \"=&wf,&wa\"))\n-   (clobber (match_scratch:V4SF 3 \"=&wf,&wa\"))]\n+\t (match_operand:V4SF 1 \"vfloat_operand\" \"wa\")))\n+   (clobber (match_scratch:V4SF 2 \"=&wa\"))\n+   (clobber (match_scratch:V4SF 3 \"=&wa\"))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"#\"\n   \"\"\n@@ -4372,15 +4368,15 @@\n    (set_attr \"type\" \"veccomplex\")])\n \n (define_insn_and_split \"*vsx_reduc_<VEC_reduc_name>_v4sf_scalar\"\n-  [(set (match_operand:SF 0 \"vfloat_operand\" \"=f,?f\")\n+  [(set (match_operand:SF 0 \"vfloat_operand\" \"=f\")\n \t(vec_select:SF\n \t (VEC_reduc:V4SF\n \t  (unspec:V4SF [(const_int 0)] UNSPEC_REDUC)\n-\t  (match_operand:V4SF 1 \"vfloat_operand\" \"wf,wa\"))\n+\t  (match_operand:V4SF 1 \"vfloat_operand\" \"wa\"))\n \t (parallel [(const_int 3)])))\n-   (clobber (match_scratch:V4SF 2 \"=&wf,&wa\"))\n-   (clobber (match_scratch:V4SF 3 \"=&wf,&wa\"))\n-   (clobber (match_scratch:V4SF 4 \"=0,0\"))]\n+   (clobber (match_scratch:V4SF 2 \"=&wa\"))\n+   (clobber (match_scratch:V4SF 3 \"=&wa\"))\n+   (clobber (match_scratch:V4SF 4 \"=0\"))]\n   \"BYTES_BIG_ENDIAN && VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"#\"\n   \"\""}, {"sha": "453296de1a0a3ac9b0dbdc5466ed164e78e5b9a0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3620baab5d17081918b8c0f0e593a49a0d8550/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=8d3620baab5d17081918b8c0f0e593a49a0d8550", "patch": "@@ -3196,7 +3196,7 @@ Altivec vector register\n @item wa\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n-When using any of the register constraints (@code{wa}, @code{wf},\n+When using any of the register constraints (@code{wa},\n @code{wp}, @code{wq}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n@@ -3248,9 +3248,6 @@ is incorrect.\n VSX register if the @option{-mcpu=power9} and @option{-m64} options\n were used or NO_REGS.\n \n-@item wf\n-VSX vector register to hold vector float data or NO_REGS.\n-\n @item wn\n No register (NO_REGS).\n "}]}