{"sha": "cf26173d18f782932829f001b95a27789850665f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyNjE3M2QxOGY3ODI5MzI4MjlmMDAxYjk1YTI3Nzg5ODUwNjY1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-04-04T19:37:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-04-04T19:37:22Z"}, "message": "re PR go/80302 (FAIL: time on systems with tzdata2017b installed)\n\n\tPR go/80302\n    time: make the ParseInLocation test more robust\n    \n    This is a backport of https://golang.org/cl/37964 from the gc toolchain.\n    \n    Original description:\n    \n        The tzdata 2017a update (2017-02-28) changed the abbreviation of the\n        Asia/Baghdad time zone (used in TestParseInLocation) from 'AST' to the\n        numeric '+03'.\n    \n        Update the test so that it skips the checks if we're using a recent\n        tzdata release.\n    \n    Updates golang/go#19457\n    Fixes GCC PR 80302.\n    \n    Reviewed-on: https://go-review.googlesource.com/39470\n\nFrom-SVN: r246695", "tree": {"sha": "3e0006b6c3e1e9723ccea904ec2e6c67f27d1cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0006b6c3e1e9723ccea904ec2e6c67f27d1cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf26173d18f782932829f001b95a27789850665f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf26173d18f782932829f001b95a27789850665f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf26173d18f782932829f001b95a27789850665f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf26173d18f782932829f001b95a27789850665f/comments", "author": null, "committer": null, "parents": [{"sha": "e1201dff2f7404ab263a8e75e97e4c0ad72c7e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1201dff2f7404ab263a8e75e97e4c0ad72c7e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1201dff2f7404ab263a8e75e97e4c0ad72c7e72"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "0e4a417430937e99ab08ee1872c4a5dc8bb2a55a", "filename": "libgo/go/time/format_test.go", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf26173d18f782932829f001b95a27789850665f/libgo%2Fgo%2Ftime%2Fformat_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf26173d18f782932829f001b95a27789850665f/libgo%2Fgo%2Ftime%2Fformat_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fformat_test.go?ref=cf26173d18f782932829f001b95a27789850665f", "patch": "@@ -245,34 +245,55 @@ func TestParseDayOutOfRange(t *testing.T) {\n \t}\n }\n \n+// TestParseInLocation checks that the Parse and ParseInLocation\n+// functions do not get confused by the fact that AST (Arabia Standard\n+// Time) and AST (Atlantic Standard Time) are different time zones,\n+// even though they have the same abbreviation.\n+//\n+// ICANN has been slowly phasing out invented abbreviation in favor of\n+// numeric time zones (for example, the Asia/Baghdad time zone\n+// abbreviation got changed from AST to +03 in the 2017a tzdata\n+// release); but we still want to make sure that the time package does\n+// not get confused on systems with slightly older tzdata packages.\n func TestParseInLocation(t *testing.T) {\n-\t// Check that Parse (and ParseInLocation) understand that\n-\t// Feb 01 AST (Arabia Standard Time) and Feb 01 AST (Atlantic Standard Time)\n-\t// are in different time zones even though both are called AST\n \n \tbaghdad, err := LoadLocation(\"Asia/Baghdad\")\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n \n-\tt1, err := ParseInLocation(\"Jan 02 2006 MST\", \"Feb 01 2013 AST\", baghdad)\n+\tvar t1, t2 Time\n+\n+\tt1, err = ParseInLocation(\"Jan 02 2006 MST\", \"Feb 01 2013 AST\", baghdad)\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n-\tt2 := Date(2013, February, 1, 00, 00, 00, 0, baghdad)\n-\tif t1 != t2 {\n-\t\tt.Fatalf(\"ParseInLocation(Feb 01 2013 AST, Baghdad) = %v, want %v\", t1, t2)\n-\t}\n+\n \t_, offset := t1.Zone()\n-\tif offset != 3*60*60 {\n-\t\tt.Fatalf(\"ParseInLocation(Feb 01 2013 AST, Baghdad).Zone = _, %d, want _, %d\", offset, 3*60*60)\n+\n+\t// A zero offset means that ParseInLocation did not recognize the\n+\t// 'AST' abbreviation as matching the current location (Baghdad,\n+\t// where we'd expect a +03 hrs offset); likely because we're using\n+\t// a recent tzdata release (2017a or newer).\n+\t// If it happens, skip the Baghdad test.\n+\tif offset != 0 {\n+\t\tt2 = Date(2013, February, 1, 00, 00, 00, 0, baghdad)\n+\t\tif t1 != t2 {\n+\t\t\tt.Fatalf(\"ParseInLocation(Feb 01 2013 AST, Baghdad) = %v, want %v\", t1, t2)\n+\t\t}\n+\t\tif offset != 3*60*60 {\n+\t\t\tt.Fatalf(\"ParseInLocation(Feb 01 2013 AST, Baghdad).Zone = _, %d, want _, %d\", offset, 3*60*60)\n+\t\t}\n \t}\n \n \tblancSablon, err := LoadLocation(\"America/Blanc-Sablon\")\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n \n+\t// In this case 'AST' means 'Atlantic Standard Time', and we\n+\t// expect the abbreviation to correctly match the american\n+\t// location.\n \tt1, err = ParseInLocation(\"Jan 02 2006 MST\", \"Feb 01 2013 AST\", blancSablon)\n \tif err != nil {\n \t\tt.Fatal(err)"}]}