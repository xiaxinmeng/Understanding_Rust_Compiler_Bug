{"sha": "cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzMjZhNjQ0MmYwOWNiMzZiMDVjZTU1NmZjOTFlMTBiZmViMGNmNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T13:39:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T17:20:06Z"}, "message": "libstdc++: Use function object for __decay_copy helper\n\nBy changing __cust_access::__decay_copy from a function template to a\nfunction object we avoid ADL. That means it's fine to call it\nunqualified (the compiler won't waste time doing ADL in associated\nnamespaces, and won't try to complete associated types).\n\nThis also makes some other minor simplications to other concepts for the\n[range.access] CPOs.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/iterator_concepts.h (__cust_access::__decay_copy):\n\tReplace with function object.\n\t(__cust_access::__member_begin, ___cust_access::_adl_begin): Use\n\t__decay_copy unqualified.\n\t* include/bits/ranges_base.h (__member_end, __adl_end):\n\tLikewise. Use __range_iter_t for type of ranges::begin.\n\t(__member_rend): Use correct value category for rbegin argument.\n\t(__member_data): Use __decay_copy unqualified.\n\t(__begin_data): Use __range_iter_t for type of ranges::begin.", "tree": {"sha": "2b96c508b05ad227431a64ab325bef2c1c080a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b96c508b05ad227431a64ab325bef2c1c080a70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d43ec50966cafb339eb6a370a5d767a24f673e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d43ec50966cafb339eb6a370a5d767a24f673e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d43ec50966cafb339eb6a370a5d767a24f673e1"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "d18ae32bf20b5a5850fcb7c73ddde39e41ddb305", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "patch": "@@ -930,17 +930,18 @@ namespace ranges\n   {\n     using std::__detail::__class_or_enum;\n \n-    template<typename _Tp>\n-      constexpr decay_t<_Tp>\n-      __decay_copy(_Tp&& __t)\n-      noexcept(is_nothrow_convertible_v<_Tp, decay_t<_Tp>>)\n-      { return std::forward<_Tp>(__t); }\n+    struct {\n+      template<typename _Tp>\n+\tconstexpr decay_t<_Tp>\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(is_nothrow_convertible_v<_Tp, decay_t<_Tp>>)\n+\t{ return std::forward<_Tp>(__t); }\n+    } inline constexpr __decay_copy{};\n \n     template<typename _Tp>\n       concept __member_begin = requires(_Tp& __t)\n \t{\n-\t  { __cust_access::__decay_copy(__t.begin()) }\n-\t    -> input_or_output_iterator;\n+\t  { __decay_copy(__t.begin()) } -> input_or_output_iterator;\n \t};\n \n     // Poison pills so that unqualified lookup doesn't find std::begin.\n@@ -951,8 +952,7 @@ namespace ranges\n       concept __adl_begin = __class_or_enum<remove_reference_t<_Tp>>\n \t&& requires(_Tp& __t)\n \t{\n-\t  { __cust_access::__decay_copy(begin(__t)) }\n-\t    -> input_or_output_iterator;\n+\t  { __decay_copy(begin(__t)) } -> input_or_output_iterator;\n \t};\n \n     // Simplified version of std::ranges::begin that only supports lvalues,"}, {"sha": "a63ef8eb7f416362682447c1734ef1116cc2be94", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "patch": "@@ -89,6 +89,7 @@ namespace ranges\n   namespace __cust_access\n   {\n     using std::ranges::__detail::__maybe_borrowed_range;\n+    using std::__detail::__range_iter_t;\n \n     struct _Begin\n     {\n@@ -127,8 +128,7 @@ namespace ranges\n     template<typename _Tp>\n       concept __member_end = requires(_Tp& __t)\n \t{\n-\t  { __decay_copy(__t.end()) }\n-\t    -> sentinel_for<decltype(_Begin{}(std::forward<_Tp>(__t)))>;\n+\t  { __decay_copy(__t.end()) } -> sentinel_for<__range_iter_t<_Tp>>;\n \t};\n \n     // Poison pills so that unqualified lookup doesn't find std::end.\n@@ -139,8 +139,7 @@ namespace ranges\n       concept __adl_end = __class_or_enum<remove_reference_t<_Tp>>\n \t&& requires(_Tp& __t)\n \t{\n-\t  { __decay_copy(end(__t)) }\n-\t    -> sentinel_for<decltype(_Begin{}(std::forward<_Tp>(__t)))>;\n+\t  { __decay_copy(end(__t)) } -> sentinel_for<__range_iter_t<_Tp>>;\n \t};\n \n     struct _End\n@@ -281,7 +280,7 @@ namespace ranges\n       concept __member_rend = requires(_Tp& __t)\n \t{\n \t  { __decay_copy(__t.rend()) }\n-\t    -> sentinel_for<decltype(_RBegin{}(__t))>;\n+\t    -> sentinel_for<decltype(_RBegin{}(std::forward<_Tp>(__t)))>;\n \t};\n \n     void rend(auto&) = delete;\n@@ -507,12 +506,11 @@ namespace ranges\n     template<typename _Tp>\n       concept __member_data = requires(_Tp& __t)\n \t{\n-\t  { __cust_access::__decay_copy(__t.data()) } -> __pointer_to_object;\n+\t  { __decay_copy(__t.data()) } -> __pointer_to_object;\n \t};\n \n     template<typename _Tp>\n-      concept __begin_data = requires(_Tp& __t)\n-\t{ { _Begin{}(__t) } -> contiguous_iterator; };\n+      concept __begin_data = contiguous_iterator<__range_iter_t<_Tp>>;\n \n     struct _Data\n     {"}]}