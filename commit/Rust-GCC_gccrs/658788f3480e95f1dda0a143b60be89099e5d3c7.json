{"sha": "658788f3480e95f1dda0a143b60be89099e5d3c7", "node_id": "C_kwDOANBUbNoAKDY1ODc4OGYzNDgwZTk1ZjFkZGEwYTE0M2I2MGJlODkwOTllNWQzYzc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T17:21:14Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-12T06:49:00Z"}, "message": "Add method to query the sign of a NAN.\n\nIn writing some range-op entries I noticed we don't have a way to\nquery the sign of the NAN in a range, unless the range only contains\nNAN, in which case you can just use frange::signbit_p.  This patch\nadds a method that returns TRUE if there exists the possiblity of a\nNAN and we know its sign.\n\ngcc/ChangeLog:\n\n\t* value-range.h (frange::nan_signbit_p): New.", "tree": {"sha": "a209fd477478ea67ccc7fe3283e7408650ce8668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a209fd477478ea67ccc7fe3283e7408650ce8668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/658788f3480e95f1dda0a143b60be89099e5d3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658788f3480e95f1dda0a143b60be89099e5d3c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658788f3480e95f1dda0a143b60be89099e5d3c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658788f3480e95f1dda0a143b60be89099e5d3c7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce0823721d476cabb2007fecc12c07202325e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce0823721d476cabb2007fecc12c07202325e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce0823721d476cabb2007fecc12c07202325e17"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "60b989b2b50351c0281d4a0fdc8b4ed1e99ac3a1", "filename": "gcc/value-range.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658788f3480e95f1dda0a143b60be89099e5d3c7/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658788f3480e95f1dda0a143b60be89099e5d3c7/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=658788f3480e95f1dda0a143b60be89099e5d3c7", "patch": "@@ -328,6 +328,7 @@ class frange : public vrange\n   bool maybe_isnan (bool sign) const;\n   bool maybe_isinf () const;\n   bool signbit_p (bool &signbit) const;\n+  bool nan_signbit_p (bool &signbit) const;\n private:\n   void verify_range ();\n   bool normalize_kind ();\n@@ -1358,4 +1359,20 @@ frange::signbit_p (bool &signbit) const\n   return false;\n }\n \n+// If range has a NAN with a known sign, set it in SIGNBIT and return\n+// TRUE.\n+\n+inline bool\n+frange::nan_signbit_p (bool &signbit) const\n+{\n+  if (undefined_p ())\n+    return false;\n+\n+  if (m_pos_nan == m_neg_nan)\n+    return false;\n+\n+  signbit = m_neg_nan;\n+  return true;\n+}\n+\n #endif // GCC_VALUE_RANGE_H"}]}