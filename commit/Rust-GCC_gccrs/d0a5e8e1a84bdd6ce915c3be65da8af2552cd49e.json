{"sha": "d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhNWU4ZTFhODRiZGQ2Y2U5MTVjM2JlNjVkYThhZjI1NTJjZDQ5ZQ==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-03-22T02:14:02Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-03-22T02:14:02Z"}, "message": "rs6000: Convert the vector set variable idx to DImode [PR98914]\n\nvec_insert defines the element argument type to be signed int by ELFv2\nABI.  When expanding a vector with a variable rtx, convert the rtx type\nto DImode to support both intrinsic usage and other callers from\nrs6000_expand_vector_init produced by v[k] = val when k is long type.\n\ngcc/ChangeLog:\n\n2021-03-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/98914\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var_p9):\n\tConvert idx to DImode.\n\t(rs6000_expand_vector_set_var_p8): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/98914\n\t* gcc.target/powerpc/pr98914.c: New test.", "tree": {"sha": "e7d7ffa8c5668e9a67e3061d342a08cd66288250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d7ffa8c5668e9a67e3061d342a08cd66288250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2de43b775a0bfe941584bb2650157005a7536cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2de43b775a0bfe941584bb2650157005a7536cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2de43b775a0bfe941584bb2650157005a7536cc"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "616dae35bae1741ba817b7e8af0d6a5a146da7c0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "patch": "@@ -7026,21 +7026,21 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n \n   gcc_assert (VECTOR_MEM_VSX_P (mode) && !CONST_INT_P (idx));\n \n-  gcc_assert (GET_MODE (idx) == E_SImode);\n-\n   machine_mode inner_mode = GET_MODE (val);\n \n-  rtx tmp = gen_reg_rtx (GET_MODE (idx));\n   int width = GET_MODE_SIZE (inner_mode);\n \n   gcc_assert (width >= 1 && width <= 8);\n \n   int shift = exact_log2 (width);\n+\n+  machine_mode idx_mode = GET_MODE (idx);\n+  idx = convert_modes (DImode, idx_mode, idx, 1);\n+\n   /* Generate the IDX for permute shift, width is the vector element size.\n      idx = idx * width.  */\n-  emit_insn (gen_ashlsi3 (tmp, idx, GEN_INT (shift)));\n-\n-  tmp = convert_modes (DImode, SImode, tmp, 1);\n+  rtx tmp = gen_reg_rtx (DImode);\n+  emit_insn (gen_ashldi3 (tmp, idx, GEN_INT (shift)));\n \n   /*  lvsr    v1,0,idx.  */\n   rtx pcvr = gen_reg_rtx (V16QImode);\n@@ -7073,28 +7073,26 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n \n   gcc_assert (VECTOR_MEM_VSX_P (mode) && !CONST_INT_P (idx));\n \n-  gcc_assert (GET_MODE (idx) == E_SImode);\n-\n   machine_mode inner_mode = GET_MODE (val);\n   HOST_WIDE_INT mode_mask = GET_MODE_MASK (inner_mode);\n \n-  rtx tmp = gen_reg_rtx (GET_MODE (idx));\n   int width = GET_MODE_SIZE (inner_mode);\n-\n   gcc_assert (width >= 1 && width <= 4);\n \n+  int shift = exact_log2 (width);\n+\n+  machine_mode idx_mode = GET_MODE (idx);\n+  idx = convert_modes (DImode, idx_mode, idx, 1);\n+\n+  /*  idx = idx * width.  */\n+  rtx tmp = gen_reg_rtx (DImode);\n+  emit_insn (gen_ashldi3 (tmp, idx, GEN_INT (shift)));\n+\n+  /*  For LE:  idx = idx + 8.  */\n   if (!BYTES_BIG_ENDIAN)\n-    {\n-      /*  idx = idx * width.  */\n-      emit_insn (gen_mulsi3 (tmp, idx, GEN_INT (width)));\n-      /*  idx = idx + 8.  */\n-      emit_insn (gen_addsi3 (tmp, tmp, GEN_INT (8)));\n-    }\n+    emit_insn (gen_adddi3 (tmp, tmp, GEN_INT (8)));\n   else\n-    {\n-      emit_insn (gen_mulsi3 (tmp, idx, GEN_INT (width)));\n-      emit_insn (gen_subsi3 (tmp, GEN_INT (24 - width), tmp));\n-    }\n+    emit_insn (gen_subdi3 (tmp, GEN_INT (24 - width), tmp));\n \n   /*  lxv vs33, mask.\n       DImode: 0xffffffffffffffff0000000000000000\n@@ -7144,7 +7142,6 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n   emit_insn (gen_rtx_SET (val_v16qi, sub_val));\n \n   /*  lvsl    13,0,idx.  */\n-  tmp = convert_modes (DImode, SImode, tmp, 1);\n   rtx pcv = gen_reg_rtx (V16QImode);\n   emit_insn (gen_altivec_lvsl_reg (pcv, tmp));\n "}, {"sha": "e4d78e3e6b3ae1aeed0ed310254132c22647bafd", "filename": "gcc/testsuite/gcc.target/powerpc/pr98914.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98914.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98914.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98914.c?ref=d0a5e8e1a84bdd6ce915c3be65da8af2552cd49e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-Og -mvsx\" } */\n+\n+vector int\n+foo (vector int v)\n+{\n+  for (long k = 0; k < 1; ++k)\n+    v[k] = 0;\n+  return v;\n+}"}]}