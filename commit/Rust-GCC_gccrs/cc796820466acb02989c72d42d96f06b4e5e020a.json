{"sha": "cc796820466acb02989c72d42d96f06b4e5e020a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3OTY4MjA0NjZhY2IwMjk4OWM3MmQ0MmQ5NmYwNmI0ZTVlMDIwYQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-03-07T18:11:02Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-04-09T19:46:35Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Fix management of __dp_sign_max_size [PR 99402]\n\n__dp_sign precision indicates that we found out what iterator comes first or\nlast in the range. __dp_sign_max_size is the same plus it gives the information\nof the max size of the range that is to say the max_size value such that\ndistance(lhs, rhs) < max_size.\nThanks to this additional information we are able to tell when a copy of n elements\nto that range will fail even if we do not know exactly how large it is.\n\nThis patch makes sure that we are properly using this information.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/99402\n\t* include/debug/helper_functions.h (__can_advance(_InputIterator,\n\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n\t(__can_advance(const _Safe_iterator<>&,\n\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n\t* include/debug/macros.h (__glibcxx_check_can_increment_dist): New,\n\tuse latter.\n\t(__glibcxx_check_can_increment_range): Adapt to use latter.\n\t(__glibcxx_check_can_decrement_range): Likewise.\n\t* include/debug/safe_iterator.h\n\t(_Safe_iterator<>::_M_can_advance(const std::pair<_Diff, _Distance_precision>&,\n\tint)): New.\n\t(__can_advance(const _Safe_iterator<>&,\n\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n\t* include/debug/safe_iterator.tcc\n\t(_Safe_iterator<>::_M_can_advance(const std::pair<_Diff, _Distance_precision>&,\n\tint)): New.\n\t(_Safe_iterator<>::_M_valid_range(const _Safe_iterator<>&,\n\tstd::pair<difference_type, _Distance_precision>&, bool)): Adapt for\n\t__dp_sign_max_size.\n\t(__copy_move_a): Adapt to use __glibcxx_check_can_increment_dist.\n\t(__copy_move_backward_a): Likewise.\n\t(__equal_aux): Likewise.\n\t* include/debug/stl_iterator.h (__can_advance(const std::reverse_iterator<>&,\n\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n\t(__can_advance(const std::move_iterator<>&,\n\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n\t* testsuite/25_algorithms/copy/debug/99402.cc: New test.", "tree": {"sha": "0c51b1d172df982b2f89fbc1f759190e76adaf3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c51b1d172df982b2f89fbc1f759190e76adaf3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc796820466acb02989c72d42d96f06b4e5e020a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc796820466acb02989c72d42d96f06b4e5e020a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc796820466acb02989c72d42d96f06b4e5e020a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc796820466acb02989c72d42d96f06b4e5e020a/comments", "author": null, "committer": null, "parents": [{"sha": "b04093adb28bd6ee8b0390e840219fd2bba134db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04093adb28bd6ee8b0390e840219fd2bba134db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04093adb28bd6ee8b0390e840219fd2bba134db"}], "stats": {"total": 163, "additions": 122, "deletions": 41}, "files": [{"sha": "c0144ced97953712d93b86baacabd6e08f08e64a", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -64,7 +64,7 @@ namespace __gnu_debug\n     {\n     private:\n       typedef\n-      typename std::iterator_traits<_Iterator>::difference_type _ItDiffType;\n+\ttypename std::iterator_traits<_Iterator>::difference_type _ItDiffType;\n \n       template<typename _DiffType,\n \t       typename = typename std::__is_void<_DiffType>::__type>\n@@ -291,6 +291,18 @@ namespace __gnu_debug\n     __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n \t\t  _Size);\n \n+  template<typename _InputIterator, typename _Diff>\n+    _GLIBCXX_CONSTEXPR\n+    inline bool\n+    __can_advance(_InputIterator, const std::pair<_Diff, _Distance_precision>&, int)\n+    { return true; }\n+\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _Diff>\n+    bool\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t\t  const std::pair<_Diff, _Distance_precision>&, int);\n+\n   /** Helper function to extract base iterator of random access safe iterator\n    *  in order to reduce performance impact of debug mode.  Limited to random\n    *  access iterator because it is the only category for which it is possible"}, {"sha": "9ac52ebd09d185373e0134c46188a3a185a92d3e", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -94,6 +94,12 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_integer(_Size, #_Size))\n \n+#define __glibcxx_check_can_increment_dist(_First,_Dist,_Way)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Dist, _Way), \\\n+\t\t      _M_message(__gnu_debug::__msg_iter_subscript_oob)\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_integer(_Way * _Dist.first, #_Dist))\n+\n #define __glibcxx_check_can_increment_range(_First1,_Last1,_First2)\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n@@ -105,7 +111,7 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n \t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n \t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n     _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n-\t\t\t__gnu_debug::__can_advance(_First2, __dist.first),\\\n+\t\t\t__gnu_debug::__can_advance(_First2, __dist, 1), \\\n \t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n \t\t\t._M_iterator(_First2, #_First2)\t\t\t\\\n \t\t\t._M_integer(__dist.first),\t\t\t\\\n@@ -123,7 +129,7 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n \t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n \t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n     _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n-\t\t\t__gnu_debug::__can_advance(_First2, -__dist.first),\\\n+\t\t\t__gnu_debug::__can_advance(_First2, __dist, -1), \\\n \t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n \t\t\t._M_iterator(_First2, #_First2)\t\t\t\\\n \t\t\t._M_integer(-__dist.first),\t\t\t\\"}, {"sha": "8e138fd32e5c40ff3992e46138807e99a66ae87f", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -407,6 +407,12 @@ namespace __gnu_debug\n       bool\n       _M_can_advance(difference_type __n, bool __strict = false) const;\n \n+      // Can we advance the iterator using @p __dist in @p __way direction.\n+      template<typename _Diff>\n+\tbool\n+\t_M_can_advance(const std::pair<_Diff, _Distance_precision>& __dist,\n+\t\t       int __way) const;\n+\n       // Is the iterator range [*this, __rhs) valid?\n       bool\n       _M_valid_range(const _Safe_iterator& __rhs,\n@@ -958,6 +964,14 @@ namespace __gnu_debug\n \t\t  _Size __n)\n     { return __it._M_can_advance(__n); }\n \n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _Diff>\n+    inline bool\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\t\t  const std::pair<_Diff, _Distance_precision>& __dist,\n+\t\t  int __way)\n+    { return __it._M_can_advance(__dist, __way); }\n+\n   template<typename _Iterator, typename _Sequence>\n     _Iterator\n     __base(const _Safe_iterator<_Iterator, _Sequence,"}, {"sha": "05c379cdca97c4d5139d0563091cfe428f3da38a", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -92,24 +92,32 @@ namespace __gnu_debug\n       if (__n == 0)\n \treturn true;\n \n+      std::pair<difference_type, _Distance_precision> __dist = __n < 0\n+\t? _M_get_distance_from_begin()\n+\t: _M_get_distance_to_end();\n+\n       if (__n < 0)\n-\t{\n-\t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    _M_get_distance_from_begin();\n-\t  return __dist.second == __dp_exact\n-\t    ? __dist.first >= -__n\n-\t    : !__strict && __dist.first > 0;\n-\t}\n-      else\n-\t{\n-\t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    _M_get_distance_to_end();\n-\t  return __dist.second == __dp_exact\n-\t    ? __dist.first >= __n\n-\t    : !__strict && __dist.first > 0;\n-\t}\n+\t__n = -__n;\n+\n+      return __dist.second > __dp_sign\n+\t? __dist.first >= __n\n+\t: !__strict && __dist.first > 0;\n     }\n \n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    template<typename _Diff>\n+      bool\n+      _Safe_iterator<_Iterator, _Sequence, _Category>::\n+      _M_can_advance(const std::pair<_Diff, _Distance_precision>& __dist,\n+\t\t     int __way) const\n+      {\n+\treturn __dist.second == __dp_exact\n+\t  ? _M_can_advance(__way * __dist.first)\n+\t  : _M_can_advance(__way * (__dist.first == 0\n+\t\t\t\t    ? 0\n+\t\t\t\t    : __dist.first < 0 ? -1 : 1));\n+      }\n+\n   template<typename _Iterator, typename _Sequence, typename _Category>\n     typename _Distance_traits<_Iterator>::__type\n     _Safe_iterator<_Iterator, _Sequence, _Category>::\n@@ -191,19 +199,12 @@ namespace __gnu_debug\n \n       /* Determine iterators order */\n       __dist = _M_get_distance_to(__rhs);\n-      switch (__dist.second)\n+      if (__dist.second != __dp_equality)\n \t{\n-\tcase __dp_equality:\n-\t  if (__dist.first == 0)\n-\t    return true;\n-\t  break;\n-\n-\tcase __dp_sign:\n-\tcase __dp_exact:\n \t  // If range is not empty first iterator must be dereferenceable.\n-\t  if (__dist.first > 0)\n-\t    return !__check_dereferenceable || _M_dereferenceable();\n-\t  return __dist.first == 0;\n+\t  return __dist.first == 0\n+\t    || (__dist.first > 0\n+\t\t&& (!__check_dereferenceable || _M_dereferenceable()));\n \t}\n \n       // Assume that this is a valid range; we can't check anything else.\n@@ -225,9 +226,8 @@ namespace __gnu_debug\n       __dist = std::make_pair(__rhs.base() - this->base(), __dp_exact);\n \n       // If range is not empty first iterator must be dereferenceable.\n-      if (__dist.first > 0)\n-\treturn this->_M_dereferenceable();\n-      return __dist.first == 0;\n+      return __dist.first == 0\n+\t|| (__dist.first > 0 && this->_M_dereferenceable());\n     }\n } // namespace __gnu_debug\n \n@@ -251,7 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_Ite>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, __dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \treturn std::__copy_move_a<_IsMove>(__first.base(), __last.base(),\n@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_II>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, __dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_sign\n \t  && __result._M_can_advance(__dist.first, true))\n@@ -290,7 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_IIte>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, __dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \t{\n@@ -318,7 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_Ite>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, -__dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, -1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \treturn std::__copy_move_backward_a<_IsMove>(\n@@ -335,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_II>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, -__dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, -1);\n \n       if (__dist.second > ::__gnu_debug::__dp_sign\n \t  && __result._M_can_advance(-__dist.first, true))\n@@ -358,7 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_IIte>::__type __dist;\n       __glibcxx_check_valid_range2(__first, __last, __dist);\n-      __glibcxx_check_can_increment(__result, -__dist.first);\n+      __glibcxx_check_can_increment_dist(__result, __dist, -1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \t{\n@@ -423,7 +423,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_II1>::__type __dist;\n       __glibcxx_check_valid_range2(__first1, __last1, __dist);\n-      __glibcxx_check_can_increment(__first2, __dist.first);\n+      __glibcxx_check_can_increment_dist(__first2, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \treturn std::__equal_aux(__first1.base(), __last1.base(), __first2);\n@@ -438,7 +438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_II1>::__type __dist;\n       __glibcxx_check_valid_range2(__first1, __last1, __dist);\n-      __glibcxx_check_can_increment(__first2, __dist.first);\n+      __glibcxx_check_can_increment_dist(__first2, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_sign\n \t  && __first2._M_can_advance(__dist.first, true))\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typename ::__gnu_debug::_Distance_traits<_II1>::__type __dist;\n       __glibcxx_check_valid_range2(__first1, __last1, __dist);\n-      __glibcxx_check_can_increment(__first2, __dist.first);\n+      __glibcxx_check_can_increment_dist(__first2, __dist, 1);\n \n       if (__dist.second > ::__gnu_debug::__dp_equality)\n \t{"}, {"sha": "edeb42ebe980307f82db68032255fdbc8450b6ce", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -52,6 +52,13 @@ namespace __gnu_debug\n     __can_advance(const std::reverse_iterator<_Iterator>& __it, _Size __n)\n     { return __can_advance(__it.base(), -__n); }\n \n+  template<typename _Iterator, typename _Diff>\n+    inline bool\n+    __can_advance(const std::reverse_iterator<_Iterator>& __it,\n+\t\t  const std::pair<_Diff, _Distance_precision>& __dist,\n+\t\t  int __way)\n+    { return __can_advance(__it.base(), __dist, -__way); }\n+\n   template<typename _Iterator, typename _Sequence>\n     inline std::reverse_iterator<_Iterator>\n     __base(const std::reverse_iterator<_Safe_iterator<\n@@ -101,6 +108,13 @@ namespace __gnu_debug\n     __can_advance(const std::move_iterator<_Iterator>& __it, _Size __n)\n     { return __can_advance(__it.base(), __n); }\n \n+  template<typename _Iterator, typename _Diff>\n+    inline bool\n+    __can_advance(const std::move_iterator<_Iterator>& __it,\n+\t\t  const std::pair<_Diff, _Distance_precision>& __dist,\n+\t\t  int __way)\n+    { return __can_advance(__it.base(), __dist, __way); }\n+\n   template<typename _Iterator>\n     inline auto\n     __unsafe(const std::move_iterator<_Iterator>& __it)"}, {"sha": "041d222d07900883d563a77606d981e3eeb3167f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/debug/99402.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F99402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc796820466acb02989c72d42d96f06b4e5e020a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F99402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F99402.cc?ref=cc796820466acb02989c72d42d96f06b4e5e020a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <set>\n+#include <vector>\n+\n+// PR libstdc++/99402\n+\n+using namespace std;\n+\n+int main()\n+{\n+    // any container with non-random access iterators:\n+    const set<int> source = { 0, 1 };\n+    vector<int> dest(1);\n+    copy(source.begin(), ++source.begin(), dest.begin());\n+}"}]}