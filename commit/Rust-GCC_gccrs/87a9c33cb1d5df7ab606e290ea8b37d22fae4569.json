{"sha": "87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhOWMzM2NiMWQ1ZGY3YWI2MDZlMjkwZWE4YjM3ZDIyZmFlNDU2OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-11T20:12:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-11T20:12:02Z"}, "message": "locale_facets.tcc (money_get::do_get(string)): Check for zero-length negative sign before adding it to output string.\n\n\n2002-01-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc (money_get::do_get(string)):\n\tCheck for zero-length negative sign before adding it to output\n\tstring.\n\t(money_get::do_get(long double)): Return beg.\n\t* testsuite/22_locale/money_get_members_char.cc (test02): Add\n\titerator checks.\n\t* testsuite/22_locale/money_get_members_wchar_t.cc: Same.\n\nFrom-SVN: r48777", "tree": {"sha": "2ac161a393d4c52a344527ecfdb70dec328c1baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ac161a393d4c52a344527ecfdb70dec328c1baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/comments", "author": null, "committer": null, "parents": [{"sha": "96ae8197d279fbb1d801ae88ff36ca963b5e741a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ae8197d279fbb1d801ae88ff36ca963b5e741a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ae8197d279fbb1d801ae88ff36ca963b5e741a"}], "stats": {"total": 103, "additions": 98, "deletions": 5}, "files": [{"sha": "56936cec1f97360fee9663ee58d9fda81e00a5fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "patch": "@@ -1,3 +1,13 @@\n+2002-01-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc (money_get::do_get(string)):\n+\tCheck for zero-length negative sign before adding it to output\n+\tstring.\n+\t(money_get::do_get(long double)): Return beg.\n+\t* testsuite/22_locale/money_get_members_char.cc (test02): Add\n+\titerator checks.\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc: Same.\n+\t\n 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n \n \tlibstdc++/5331"}, {"sha": "35873e1f81301b38f144da541dd4ee79aa418997", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "patch": "@@ -1035,7 +1035,7 @@ namespace std\n \t   ios_base::iostate& __err, long double& __units) const\n     { \n       string_type __str;\n-      this->do_get(__beg, __end, __intl, __io, __err, __str); \n+      __beg = this->do_get(__beg, __end, __intl, __io, __err, __str); \n \n       const int __n = numeric_limits<long double>::digits10;\n       char* __cs = static_cast<char*>(__builtin_alloca(sizeof(char) * __n));\n@@ -1222,7 +1222,7 @@ namespace std\n       while (__units[0] == __ctype.widen('0'))\n \t__units.erase(__units.begin());\n \n-      if (__sign == __neg_sign)\n+      if (__sign.size() && __sign == __neg_sign)\n \t__units.insert(__units.begin(), __ctype.widen('-'));\n \n       // Test for grouping fidelity."}, {"sha": "5b0892dd7489b1f4950718143bfe0adffba8c6e5", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -172,7 +172,7 @@ void test01()\n   VERIFY( err11 == ios_base::goodbit );\n }\n \n-// test double/string versions\n+// test double version\n void test02()\n {\n   using namespace std;\n@@ -249,9 +249,50 @@ void test02()\n   VERIFY( err03 == ios_base::goodbit );\n }\n \n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_get works with other iterators besides streambuf\n+  // output iterators.\n+  typedef string::const_iterator iter_type;\n+  typedef money_get<char, iter_type> mon_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const string str = \"0.01Eleanor Roosevelt\";\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new mon_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n+\n+  // 01 string\n+  string res1;\n+  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n+  string rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res1 == \"1\" );\n+  VERIFY( rem1 == \"Eleanor Roosevelt\" );\n+\n+  // 02 long double\n+  iss.clear();\n+  err = goodbit;\n+  long double res2;\n+  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res2 == 1 );\n+  VERIFY( rem2 == \"Eleanor Roosevelt\" );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "2e0399befef7c18350abe81e1ffffe933f9e19a6", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9c33cb1d5df7ab606e290ea8b37d22fae4569/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=87a9c33cb1d5df7ab606e290ea8b37d22fae4569", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-14 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -250,13 +250,55 @@ void test02()\n   VERIFY( result3 == digits4 );\n   VERIFY( err03 == ios_base::goodbit );\n }\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_get works with other iterators besides streambuf\n+  // output iterators.\n+  typedef wstring::const_iterator iter_type;\n+  typedef money_get<wchar_t, iter_type> mon_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str = L\"0.01Eleanor Roosevelt\";\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new mon_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n+\n+  // 01 string\n+  wstring res1;\n+  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n+  wstring rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res1 == L\"1\" );\n+  VERIFY( rem1 == L\"Eleanor Roosevelt\" );\n+\n+  // 02 long double\n+  iss.clear();\n+  err = goodbit;\n+  long double res2;\n+  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n+  wstring rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res2 == 1 );\n+  VERIFY( rem2 == L\"Eleanor Roosevelt\" );\n+}\n #endif\n \n+\n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+  test03();\n #endif\n   return 0;\n }"}]}