{"sha": "fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4OGUxZGQyODU3MDM1OWFmMDkzMjdiYjY1YWM4ZGU1ZmNjOWZlOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-25T16:55:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-25T16:55:01Z"}, "message": "utils.c (finish_record_type): Return early for padded types and tidy up.\n\n\t* gcc-interface/utils.c (finish_record_type): Return early for padded\n\ttypes and tidy up.\n\nFrom-SVN: r185778", "tree": {"sha": "9d90918e550bb6f18e87640e70026d658b0f2bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d90918e550bb6f18e87640e70026d658b0f2bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb88e1dd28570359af09327bb65ac8de5fcc9fe8/comments", "author": null, "committer": null, "parents": [{"sha": "47a1ae3c6a27bfd5875d70860d72ea31d4c98cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a1ae3c6a27bfd5875d70860d72ea31d4c98cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a1ae3c6a27bfd5875d70860d72ea31d4c98cc7"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "c9b1aee5966d65ca7aed67a980759d8881ffc7b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb88e1dd28570359af09327bb65ac8de5fcc9fe8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb88e1dd28570359af09327bb65ac8de5fcc9fe8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "patch": "@@ -1,3 +1,8 @@\n+2012-03-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (finish_record_type): Return early for padded\n+\ttypes and tidy up.\n+\n 2012-03-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* hlo.ads, hlo.adb: Removed, no longer used."}, {"sha": "18f9dac975dbb323311584452ea9a1d56bcd04c0", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb88e1dd28570359af09327bb65ac8de5fcc9fe8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb88e1dd28570359af09327bb65ac8de5fcc9fe8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=fb88e1dd28570359af09327bb65ac8de5fcc9fe8", "patch": "@@ -863,12 +863,15 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n void\n rest_of_record_type_compilation (tree record_type)\n {\n-  tree field_list = TYPE_FIELDS (record_type);\n-  tree field;\n-  enum tree_code code = TREE_CODE (record_type);\n   bool var_size = false;\n+  tree field;\n \n-  for (field = field_list; field; field = DECL_CHAIN (field))\n+  /* If this is a padded type, the bulk of the debug info has already been\n+     generated for the field's type.  */\n+  if (TYPE_IS_PADDING_P (record_type))\n+    return;\n+\n+  for (field = TYPE_FIELDS (record_type); field; field = DECL_CHAIN (field))\n     {\n       /* We need to make an XVE/XVU record if any field has variable size,\n \t whether or not the record does.  For example, if we have a union,\n@@ -879,20 +882,17 @@ rest_of_record_type_compilation (tree record_type)\n       if (TREE_CODE (DECL_SIZE (field)) != INTEGER_CST\n \t  /* If a field has a non-constant qualifier, the record will have\n \t     variable size too.  */\n-\t  || (code == QUAL_UNION_TYPE\n+\t  || (TREE_CODE (record_type) == QUAL_UNION_TYPE\n \t      && TREE_CODE (DECL_QUALIFIER (field)) != INTEGER_CST))\n \t{\n \t  var_size = true;\n \t  break;\n \t}\n     }\n \n-  /* If this record is of variable size, rename it so that the\n-     debugger knows it is and make a new, parallel, record\n-     that tells the debugger how the record is laid out.  See\n-     exp_dbug.ads.  But don't do this for records that are padding\n-     since they confuse GDB.  */\n-  if (var_size && !TYPE_IS_PADDING_P (record_type))\n+  /* If this record type is of variable size, make a parallel record type that\n+     will tell the debugger how the former is laid out (see exp_dbug.ads).  */\n+  if (var_size)\n     {\n       tree new_record_type\n \t= make_node (TREE_CODE (record_type) == QUAL_UNION_TYPE\n@@ -1052,8 +1052,7 @@ rest_of_record_type_compilation (tree record_type)\n \t  prev_old_field = old_field;\n \t}\n \n-      TYPE_FIELDS (new_record_type)\n-\t= nreverse (TYPE_FIELDS (new_record_type));\n+      TYPE_FIELDS (new_record_type) = nreverse (TYPE_FIELDS (new_record_type));\n \n       add_parallel_type (TYPE_STUB_DECL (record_type), new_record_type);\n     }"}]}