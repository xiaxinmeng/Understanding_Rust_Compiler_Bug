{"sha": "44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlNDE1OWQ2MDMwZjU2ZTVhMGQ5ZDQ3NDVlMDVkY2ZkODY4NmFiYQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2001-01-22T16:58:08Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2001-01-22T16:58:08Z"}, "message": "recog.c (validate_replace_rtx_1): In ZERO_EXTEND / SIGN_EXTEND case...\n\n\t* recog.c (validate_replace_rtx_1): In ZERO_EXTEND / SIGN_EXTEND\n\tcase, don't use operand_subword to calculate a SUBREG that is\n\twider than a word.\n\n\t* rtl.texi: Comparisons yield 0 or STORE_FLAG_VALUE.\n\nFrom-SVN: r39183", "tree": {"sha": "6d9cd74e4491229a7900da37a1a8c2d3f520dbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d9cd74e4491229a7900da37a1a8c2d3f520dbe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/comments", "author": null, "committer": null, "parents": [{"sha": "62e4a758537dd6c82a0a2ce1b0cd75842e41441c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e4a758537dd6c82a0a2ce1b0cd75842e41441c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e4a758537dd6c82a0a2ce1b0cd75842e41441c"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "de416749e654721d4d8ce1896118c9a634cf1937", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "patch": "@@ -1,3 +1,11 @@\n+Mon Jan 22 16:53:06 2001  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* recog.c (validate_replace_rtx_1): In ZERO_EXTEND / SIGN_EXTEND\n+\tcase, don't use operand_subword to calculate a SUBREG that is\n+\twider than a word.\n+\n+\t* rtl.texi: Comparisons yield 0 or STORE_FLAG_VALUE.\n+\n 2001-01-22 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* c4x.c (c4x_valid_rptb_p, c4x_label_ref_used_p): New functions."}, {"sha": "4dab907c84891fd48f682108c0ddc244ae323e94", "filename": "gcc/recog.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "patch": "@@ -491,8 +491,42 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t  /* If there is a subreg involved, crop to the portion of the\n \t     constant that we are interested in.  */\n \t  if (GET_CODE (XEXP (x, 0)) == SUBREG)\n-\t    to = operand_subword (to, SUBREG_WORD (XEXP (x, 0)),\n-\t\t\t\t  0, GET_MODE (from));\n+\t    {\n+\t      if (GET_MODE_SIZE (GET_MODE (XEXP (x, 0))) <= UNITS_PER_WORD)\n+\t\tto = operand_subword (to, SUBREG_WORD (XEXP (x, 0)),\n+\t\t\t\t      0, GET_MODE (from));\n+\t      else if (GET_MODE_CLASS (GET_MODE (from)) == MODE_INT\n+\t\t       && (GET_MODE_BITSIZE (GET_MODE (XEXP (x, 0)))\n+\t\t\t   <= HOST_BITS_PER_WIDE_INT))\n+\t\t{\n+\t\t  int i = SUBREG_WORD (XEXP (x, 0)) * BITS_PER_WORD;\n+\t\t  HOST_WIDE_INT valh;\n+\t\t  unsigned HOST_WIDE_INT vall;\n+\n+\t\t  if (GET_CODE (to) == CONST_INT)\n+\t\t    {\n+\t\t      vall = INTVAL (to);\n+\t\t      valh = (HOST_WIDE_INT) vall < 0 ? ~0 : 0;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      vall = CONST_DOUBLE_LOW (to);\n+\t\t      valh = CONST_DOUBLE_HIGH (to);\n+\t\t    }\n+\n+\t\t  if (WORDS_BIG_ENDIAN)\n+\t\t    i = (GET_MODE_BITSIZE (GET_MODE (from))\n+\t\t\t - GET_MODE_BITSIZE (GET_MODE (XEXP (x, 0))) - i);\n+\t\t  if (i > 0 && i < HOST_BITS_PER_WIDE_INT)\n+\t\t    vall = vall >> i | valh << (HOST_BITS_PER_WIDE_INT - i);\n+\t\t  else if (i >= HOST_BITS_PER_WIDE_INT)\n+\t\t    vall = valh >> (i - HOST_BITS_PER_WIDE_INT);\n+\t\t  to = GEN_INT (trunc_int_for_mode (vall,\n+\t\t\t\t\t\t    GET_MODE (XEXP (x, 0))));\n+\t\t}\n+\t      else\n+\t\tto = gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n+\t    }\n \n \t  /* If the above didn't fail, perform the extension from the\n \t     mode of the operand (and not the mode of FROM).  */"}, {"sha": "6ed90f8fe77394ba7842e9d4f86180219eb40c73", "filename": "gcc/rtl.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e4159d6030f56e5a0d9d4745e05dcfd8686aba/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=44e4159d6030f56e5a0d9d4745e05dcfd8686aba", "patch": "@@ -1628,20 +1628,20 @@ point comparisons are distinguished by the machine modes of the operands.\n @findex eq\n @cindex equal\n @item (eq:@var{m} @var{x} @var{y})\n-1 if the values represented by @var{x} and @var{y} are equal,\n-otherwise 0.\n+@code{STORE_FLAG_VALUE} if the values represented by @var{x} and @var{y}\n+are equal, otherwise 0.\n \n @findex ne\n @cindex not equal\n @item (ne:@var{m} @var{x} @var{y})\n-1 if the values represented by @var{x} and @var{y} are not equal,\n-otherwise 0.\n+@code{STORE_FLAG_VALUE} if the values represented by @var{x} and @var{y}\n+are not equal, otherwise 0.\n \n @findex gt\n @cindex greater than\n @item (gt:@var{m} @var{x} @var{y})\n-1 if the @var{x} is greater than @var{y}.  If they are fixed-point,\n-the comparison is done in a signed sense.\n+@code{STORE_FLAG_VALUE} if the @var{x} is greater than @var{y}.  If they\n+are fixed-point, the comparison is done in a signed sense.\n \n @findex gtu\n @cindex greater than"}]}