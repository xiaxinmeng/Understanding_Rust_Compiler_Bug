{"sha": "e4379a931d140a71b36eaecceace319837fda321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzNzlhOTMxZDE0MGE3MWIzNmVhZWNjZWFjZTMxOTgzN2ZkYTMyMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-11T00:11:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-13T13:22:28Z"}, "message": "libstdc++: Value-initialize std::atomic for C++20 (P0883R2)\n\nThis implements the new requirements for C++20 that std::atomic should\ninitialize the atomic variable in its default constructor.\n\nThis patch does not add the deprecated attribute to atomic_init, but\nthat should be done at some point as it's deprecated in C++20.\n\nThe paper also deprecates the ATOMIC_FLAG_INIT macro, although we can't\napply the deprecated attribute to a macro.\n\n\tPR libstdc++/58605\n\t* include/bits/atomic_base.h (__cpp_lib_atomic_value_initialization):\n\tDefine.\n\t(__atomic_flag_base, __atomic_base, __atomic_base<_PTp*>)\n\t(__atomic_float): Add default member initializer for C++20.\n\t* include/std/atomic (atomic): Likewise.\n\t(atomic::atomic()): Remove noexcept-specifier on default constructor.\n\t* include/std/version (__cpp_lib_atomic_value_initialization): Define.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error line\n\tnumber.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic/cons/value_init.cc: New test.\n\t* testsuite/29_atomics/atomic_flag/cons/value_init.cc: New test.\n\t* testsuite/29_atomics/atomic_flag/requirements/trivial.cc: Adjust\n\texpected result for is_trivially_default_constructible.\n\t* testsuite/29_atomics/atomic_float/requirements.cc: Likewise.\n\t* testsuite/29_atomics/atomic_float/value_init.cc: New test.\n\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/cons/value_init.cc\n\t* testsuite/29_atomics/atomic_integral/requirements/trivial.cc: Adjust\n\texpected results for is_trivially_default_constructible.\n\t* testsuite/util/testsuite_common_types.h (has_trivial_dtor): Add\n\tnew test generator.", "tree": {"sha": "014062564f8ba50a3b362f59878320caaea76b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014062564f8ba50a3b362f59878320caaea76b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4379a931d140a71b36eaecceace319837fda321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4379a931d140a71b36eaecceace319837fda321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4379a931d140a71b36eaecceace319837fda321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4379a931d140a71b36eaecceace319837fda321/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef85e40e0c5e242f1a1883abc56159dcd90e7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef85e40e0c5e242f1a1883abc56159dcd90e7b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef85e40e0c5e242f1a1883abc56159dcd90e7b0"}], "stats": {"total": 285, "additions": 270, "deletions": 15}, "files": [{"sha": "6d090f490ac19ac77540c94915b044612321e027", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -1,3 +1,30 @@\n+2020-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/58605\n+\t* include/bits/atomic_base.h (__cpp_lib_atomic_value_initialization):\n+\tDefine.\n+\t(__atomic_flag_base, __atomic_base, __atomic_base<_PTp*>)\n+\t(__atomic_float): Add default member initializer for C++20.\n+\t* include/std/atomic (atomic): Likewise.\n+\t(atomic::atomic()): Remove noexcept-specifier on default constructor.\n+\t* include/std/version (__cpp_lib_atomic_value_initialization): Define.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error line\n+\tnumber.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/cons/value_init.cc: New test.\n+\t* testsuite/29_atomics/atomic_flag/cons/value_init.cc: New test.\n+\t* testsuite/29_atomics/atomic_flag/requirements/trivial.cc: Adjust\n+\texpected result for is_trivially_default_constructible.\n+\t* testsuite/29_atomics/atomic_float/requirements.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_float/value_init.cc: New test.\n+\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/value_init.cc\n+\t* testsuite/29_atomics/atomic_integral/requirements/trivial.cc: Adjust\n+\texpected results for is_trivially_default_constructible.\n+\t* testsuite/util/testsuite_common_types.h (has_trivial_dtor): Add\n+\tnew test generator.\n+\n 2020-01-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/util/testsuite_iterators.h: Improve comment."}, {"sha": "87fe0bd6000ea5bb4f6e86ab174c434f1c9c3b3f", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -139,6 +139,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IntTp>\n     struct __atomic_base;\n \n+#if __cplusplus <= 201703L\n+# define _GLIBCXX20_INIT(I)\n+#else\n+# define __cpp_lib_atomic_value_initialization 201911L\n+# define _GLIBCXX20_INIT(I) = I\n+#endif\n \n #define ATOMIC_VAR_INIT(_VI) { _VI }\n \n@@ -169,7 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct __atomic_flag_base\n   {\n-    __atomic_flag_data_type _M_i;\n+    __atomic_flag_data_type _M_i _GLIBCXX20_INIT({});\n   };\n \n   _GLIBCXX_END_EXTERN_C\n@@ -267,7 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr int _S_alignment =\n \tsizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);\n \n-      alignas(_S_alignment) __int_type _M_i;\n+      alignas(_S_alignment) __int_type _M_i _GLIBCXX20_INIT(0);\n \n     public:\n       __atomic_base() noexcept = default;\n@@ -595,7 +601,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       typedef _PTp* \t__pointer_type;\n \n-      __pointer_type \t_M_p;\n+      __pointer_type \t_M_p _GLIBCXX20_INIT(nullptr);\n \n       // Factored out to facilitate explicit specialization.\n       constexpr ptrdiff_t\n@@ -1175,8 +1181,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __atomic_impl::__sub_fetch_flt(&_M_fp, __i); }\n \n     private:\n-      alignas(_S_alignment) _Fp _M_fp;\n+      alignas(_S_alignment) _Fp _M_fp _GLIBCXX20_INIT(0);\n     };\n+#undef _GLIBCXX20_INIT\n \n   template<typename _Tp,\n \t   bool = is_integral_v<_Tp>, bool = is_floating_point_v<_Tp>>"}, {"sha": "66c62381e6b07701edee34928e49d104fbae9daf", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -165,6 +165,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n   };\n \n+#if __cplusplus <= 201703L\n+# define _GLIBCXX20_INIT(I)\n+#else\n+# define _GLIBCXX20_INIT(I) = I\n+#endif\n \n   /**\n    *  @brief Generic atomic type, primary class template.\n@@ -185,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr int _S_alignment\n         = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);\n \n-      alignas(_S_alignment) _Tp _M_i;\n+      alignas(_S_alignment) _Tp _M_i _GLIBCXX20_INIT(_Tp());\n \n       static_assert(__is_trivially_copyable(_Tp),\n \t\t    \"std::atomic requires a trivially copyable type\");\n@@ -194,7 +199,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    \"Incomplete or zero-sized types are not supported\");\n \n     public:\n-      atomic() noexcept = default;\n+      atomic() = default;\n       ~atomic() noexcept = default;\n       atomic(const atomic&) = delete;\n       atomic& operator=(const atomic&) = delete;\n@@ -348,7 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return compare_exchange_strong(__e, __i, __m,\n                                        __cmpexch_failure_order(__m)); }\n     };\n-\n+#undef _GLIBCXX20_INIT\n \n   /// Partial specialization for pointer types.\n   template<typename _Tp>"}, {"sha": "d8a97767453542bc03cb6457c52c762994395836", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -164,6 +164,7 @@\n #if __cplusplus > 201703L\n // c++2a\n #define __cpp_lib_atomic_ref 201806L\n+#define __cpp_lib_atomic_value_initialization 201911L\n #define __cpp_lib_bitops 201907L\n #define __cpp_lib_bounded_array_traits 201902L\n #if __cpp_concepts"}, {"sha": "d93eacc786312453c85c80d4b1774c7e636dda9e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -27,5 +27,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 639 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 659 }\n // { dg-prune-output \"include\" }"}, {"sha": "03ecdd42ae15d7a9a45b71dc4d8553cc8915f82a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -27,5 +27,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 678 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 698 }\n // { dg-prune-output \"include\" }"}, {"sha": "8620c7cd22a71e77f2937021eb0d145496176909", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/value_init.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fvalue_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fvalue_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fvalue_init.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <atomic>\n+\n+#ifndef __cpp_lib_atomic_value_initialization\n+# error \"Feature test macro for atomic value-initialization is missing\"\n+#elif __cpp_lib_atomic_value_initialization < 201911L\n+# error \"Feature test macro for atomic value-initialization has wrong value\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  constexpr A() : val(42) { }\n+  int val;\n+};\n+\n+constexpr std::atomic<A> a;\n+\n+void\n+test01()\n+{\n+  VERIFY(a.load().val == 42);\n+  static_assert(!std::is_nothrow_default_constructible_v<std::atomic<A>>);\n+}\n+\n+struct B\n+{\n+  constexpr B() noexcept : val(99) { }\n+  int val;\n+};\n+\n+constexpr std::atomic<B> b;\n+\n+void\n+test02()\n+{\n+  VERIFY(b.load().val == 99);\n+  static_assert(std::is_nothrow_default_constructible_v<std::atomic<B>>);\n+}\n+\n+constexpr std::atomic<int*> c;\n+\n+void\n+test03()\n+{\n+  VERIFY(c.load() == nullptr);\n+  static_assert(std::is_nothrow_default_constructible_v<std::atomic<int*>>);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "547e4067ff34cc026efcfeeeaa8619767571651b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/value_init.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fvalue_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fvalue_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fvalue_init.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <atomic>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::atomic_flag f;\n+  VERIFY(!f.test_and_set());\n+  VERIFY(f.test_and_set());\n+  static_assert(std::is_nothrow_default_constructible_v<std::atomic_flag>);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "ecf7ace1976d044e114d9cab5ac2fd5d066a0add", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/requirements/trivial.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -22,6 +22,10 @@\n \n void test01()\n {\n+#if __cplusplus <= 201703L\n   __gnu_test::has_trivial_cons_dtor test;\n+#else\n+  __gnu_test::has_trivial_dtor test;\n+#endif\n   test.operator()<std::atomic_flag>();\n }"}, {"sha": "b8a556291d113fe8f6b2d48a050ba0f1e5e4ec32", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_float/requirements.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Frequirements.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -25,7 +25,7 @@ test01()\n {\n   using A = std::atomic<float>;\n   static_assert( std::is_standard_layout_v<A> );\n-  static_assert( std::is_trivially_default_constructible_v<A> );\n+  static_assert( !std::is_trivially_default_constructible_v<A> );\n   static_assert( std::is_trivially_destructible_v<A> );\n   static_assert( std::is_same_v<A::value_type, float> );\n   static_assert( std::is_same_v<A::difference_type, A::value_type> );\n@@ -41,7 +41,7 @@ test02()\n {\n   using A = std::atomic<double>;\n   static_assert( std::is_standard_layout_v<A> );\n-  static_assert( std::is_trivially_default_constructible_v<A> );\n+  static_assert( !std::is_trivially_default_constructible_v<A> );\n   static_assert( std::is_trivially_destructible_v<A> );\n   static_assert( std::is_same_v<A::value_type, double> );\n   static_assert( std::is_same_v<A::difference_type, A::value_type> );\n@@ -57,7 +57,7 @@ test03()\n {\n   using A = std::atomic<long double>;\n   static_assert( std::is_standard_layout_v<A> );\n-  static_assert( std::is_trivially_default_constructible_v<A> );\n+  static_assert( !std::is_trivially_default_constructible_v<A> );\n   static_assert( std::is_trivially_destructible_v<A> );\n   static_assert( std::is_same_v<A::value_type, long double> );\n   static_assert( std::is_same_v<A::difference_type, A::value_type> );"}, {"sha": "237c0dd13ed5aa455b8232b9496306b53f6f7e17", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_float/value_init.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fvalue_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fvalue_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fvalue_init.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <atomic>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::atomic<double> a;\n+\n+void\n+test01()\n+{\n+  VERIFY(a.load() == 0);\n+  static_assert(std::is_nothrow_default_constructible_v<std::atomic<double>>);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3c164b4870196e0080e63baa3a443bafad24f104", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 639 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 659 }\n // { dg-prune-output \"include\" }"}, {"sha": "0131ba2c915f5d4ed5282ee1a5efc975b40d3112", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 678 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 698 }\n // { dg-prune-output \"include\" }"}, {"sha": "fa1eb7ad56f7b3bb0dbbac978c06ef31599eebe5", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/value_init.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fvalue_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fvalue_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fvalue_init.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <atomic>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::atomic<int> a;\n+\n+void\n+test01()\n+{\n+  VERIFY(a.load() == 0);\n+  static_assert(std::is_nothrow_default_constructible_v<std::atomic<int>>);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "36aa248552fdc8227d10c6c44c8dcf2902ff0bcf", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/requirements/trivial.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -22,7 +22,11 @@\n \n void test01()\n {\n+#if __cplusplus <= 201703L\n   __gnu_test::has_trivial_cons_dtor test;\n+#else\n+  __gnu_test::has_trivial_dtor test;\n+#endif\n   __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::atomic_integrals::type());\n }"}, {"sha": "2795df36ca32015a6e53178c1ee488373c987fc8", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4379a931d140a71b36eaecceace319837fda321/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=e4379a931d140a71b36eaecceace319837fda321", "patch": "@@ -558,7 +558,6 @@ namespace __gnu_test\n       }\n   };\n \n-  // Generator to test standard layout\n   struct has_trivial_cons_dtor\n   {\n     template<typename _Tp>\n@@ -582,6 +581,27 @@ namespace __gnu_test\n       }\n   };\n \n+  struct has_trivial_dtor\n+  {\n+    template<typename _Tp>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  {\n+\t    typedef std::is_trivially_destructible<_Tp> dtor_p;\n+\t    static_assert(dtor_p::value, \"destructor not trivial\");\n+\t  }\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n+      }\n+  };\n+\n+  // Generator to test standard layout\n   struct standard_layout\n   {\n     template<typename _Tp>"}]}