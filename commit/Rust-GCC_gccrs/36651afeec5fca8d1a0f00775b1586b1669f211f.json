{"sha": "36651afeec5fca8d1a0f00775b1586b1669f211f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2NTFhZmVlYzVmY2E4ZDFhMGYwMDc3NWIxNTg2YjE2NjlmMjExZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-30T23:27:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-30T23:27:28Z"}, "message": "type_traits: Add has_trivial_copy, has_trivial_assign, has_nothrow_copy, has_nothrow_assign.\n\n2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Add has_trivial_copy, has_trivial_assign,\n\thas_nothrow_copy, has_nothrow_assign.\n\t* testsuite/testsuite_tr1.h: Add test_copy_property and\n\ttest_assign_property.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_assign/has_nothrow_assign.cc: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_assign/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_copy/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_assign/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_copy/typedefs.cc: Likewise.\n\nFrom-SVN: r92745", "tree": {"sha": "96ecc505ddf045942b9770e8a8640a9e75ac77fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96ecc505ddf045942b9770e8a8640a9e75ac77fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36651afeec5fca8d1a0f00775b1586b1669f211f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36651afeec5fca8d1a0f00775b1586b1669f211f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36651afeec5fca8d1a0f00775b1586b1669f211f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36651afeec5fca8d1a0f00775b1586b1669f211f/comments", "author": null, "committer": null, "parents": [{"sha": "3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6a9acd518b5a414f0e286fea4f243b6b4160e4"}], "stats": {"total": 459, "additions": 459, "deletions": 0}, "files": [{"sha": "c723e1db2b164bd2bd3555b6b809b9726177558f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -1,3 +1,26 @@\n+2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Add has_trivial_copy, has_trivial_assign,\n+\thas_nothrow_copy, has_nothrow_assign.\n+\t* testsuite/testsuite_tr1.h: Add test_copy_property and\n+\ttest_assign_property.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_assign/has_nothrow_assign.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_assign/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_copy/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_assign/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_copy/typedefs.cc: Likewise.\n+\n 2004-12-29  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/bits/vector.tcc (erase(iterator, iterator),"}, {"sha": "01dd96b87e8705fdf7aaea6e6795d4b513ee1a06", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -276,6 +276,17 @@ namespace tr1\n     struct has_trivial_constructor\n     : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n+  template<typename _Tp>\n+    struct has_trivial_copy\n+    : public integral_constant<bool, (is_pod<_Tp>::value \n+\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+\n+  template<typename _Tp>\n+    struct has_trivial_assign\n+    : public integral_constant<bool, (is_pod<_Tp>::value\n+\t\t\t\t      && !is_const<_Tp>::value\n+\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+\n   template<typename _Tp>\n     struct has_trivial_destructor\n     : public integral_constant<bool, is_pod<_Tp>::value> { };\n@@ -284,6 +295,17 @@ namespace tr1\n     struct has_nothrow_constructor\n     : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n+  template<typename _Tp>\n+    struct has_nothrow_copy\n+    : public integral_constant<bool, (is_pod<_Tp>::value \n+\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+\n+  template<typename _Tp>\n+    struct has_nothrow_assign\n+    : public integral_constant<bool, (is_pod<_Tp>::value\n+\t\t\t\t      && !is_const<_Tp>::value\n+\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+\n   template<typename>\n     struct has_virtual_destructor\n     : public false_type { };"}, {"sha": "aa7855c7e43d50823b7e886aca3cc27a2c17fd84", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -62,6 +62,40 @@ namespace __gnu_test\n       return ret;\n     }\n \n+  template<template<typename> class Property,\n+\t   typename Type>\n+    bool\n+    test_copy_property(bool value)\n+    {\n+      bool ret = true;\n+      ret &= Property<Type>::value == value;\n+      ret &= Property<const Type>::value == value;\n+      ret &= Property<volatile Type>::value == !value;\n+      ret &= Property<const volatile Type>::value == !value;\n+      ret &= Property<Type>::type::value == value;\n+      ret &= Property<const Type>::type::value == value;\n+      ret &= Property<volatile Type>::type::value == !value;\n+      ret &= Property<const volatile Type>::type::value == !value;\n+      return ret;\n+    }\n+\n+  template<template<typename> class Property,\n+\t   typename Type>\n+    bool\n+    test_assign_property(bool value)\n+    {\n+      bool ret = true;\n+      ret &= Property<Type>::value == value;\n+      ret &= Property<const Type>::value == !value;\n+      ret &= Property<volatile Type>::value == !value;\n+      ret &= Property<const volatile Type>::value == !value;\n+      ret &= Property<Type>::type::value == value;\n+      ret &= Property<const Type>::type::value == !value;\n+      ret &= Property<volatile Type>::type::value == !value;\n+      ret &= Property<const volatile Type>::type::value == !value;\n+      return ret;\n+    }\n+\n   template<template<typename, typename> class Relationship,\n \t   typename Type1, typename Type2>\n     bool"}, {"sha": "76dbbb8948e93e6b9386e9b3d4c1658708575c93", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_assign/has_nothrow_assign.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,59 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::has_nothrow_assign;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_assign_property<has_nothrow_assign, void>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, float>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, EnumType>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int*>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int(*)(int)>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int (ClassType::*)>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_assign_property<has_nothrow_assign,\n+  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int[2]>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, float[][3]>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int*[3]>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_assign_property<has_nothrow_assign,\n+  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "88e61b9a95af64ebd6ca90eaabefc9e8a43b83e0", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_assign/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Ftypedefs.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::has_nothrow_assign<int>   test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "a59646565ccbd251c1e8f50a2e863c166d806b07", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_copy/has_nothrow_copy.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,59 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::has_nothrow_copy;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_copy_property<has_nothrow_copy, void>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, float>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, EnumType>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int*>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int(*)(int)>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int (ClassType::*)>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_copy_property<has_nothrow_copy,\n+  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int[2]>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, float[][3]>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int*[3]>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_copy_property<has_nothrow_copy,\n+  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e786db397f8c57c76709bb930b55b1a1cf1f4956", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_copy/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Ftypedefs.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::has_nothrow_copy<int>     test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "a85bcad3c99fc6aee47179b866c3890296daa6af", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_assign/has_trivial_assign.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,59 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::has_trivial_assign;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_assign_property<has_trivial_assign, void>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, float>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, EnumType>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int*>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int(*)(int)>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int (ClassType::*)>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_assign_property<has_trivial_assign,\n+  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int[2]>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, float[][3]>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int*[3]>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_assign_property<has_trivial_assign,\n+  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a63106f63eb288ffde153188277bc18835e6a580", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_assign/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Ftypedefs.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::has_trivial_assign<int>   test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "6002b85bb6a93bc8d6bf3da20739fd663fc4b447", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_copy/has_trivial_copy.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,59 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::has_trivial_copy;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_copy_property<has_trivial_copy, void>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, float>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, EnumType>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int*>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int(*)(int)>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int (ClassType::*)>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_copy_property<has_trivial_copy,\n+  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int[2]>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, float[][3]>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int*[3]>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_copy_property<has_trivial_copy,\n+  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7d181e3b57e348ee3bfb0ec08bb3176305113706", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_copy/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36651afeec5fca8d1a0f00775b1586b1669f211f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Ftypedefs.cc?ref=36651afeec5fca8d1a0f00775b1586b1669f211f", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::has_trivial_copy<int>     test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}