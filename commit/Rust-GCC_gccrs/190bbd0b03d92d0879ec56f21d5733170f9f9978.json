{"sha": "190bbd0b03d92d0879ec56f21d5733170f9f9978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwYmJkMGIwM2Q5MmQwODc5ZWM1NmYyMWQ1NzMzMTcwZjlmOTk3OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-02-15T22:30:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-02-15T22:30:16Z"}, "message": "cgraph.h (symtab_node::has_aliases_p): Simplify.\n\n\n\t* cgraph.h (symtab_node::has_aliases_p): Simplify.\n\t(symtab_node::call_for_symbol_and_aliases): Use has_aliases_p\n\t* tree.c (lookup_binfo_at_offset): Make static.\n\t(get_binfo_at_offset): Do not shadow offset; add explanatory\n\tcomment.\n\nFrom-SVN: r220718", "tree": {"sha": "4f786f92b69387a69a14ef0957b60b15265f4203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f786f92b69387a69a14ef0957b60b15265f4203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/190bbd0b03d92d0879ec56f21d5733170f9f9978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190bbd0b03d92d0879ec56f21d5733170f9f9978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/190bbd0b03d92d0879ec56f21d5733170f9f9978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190bbd0b03d92d0879ec56f21d5733170f9f9978/comments", "author": null, "committer": null, "parents": [{"sha": "feb675e4087d78e3a3a47d57a220773d80a6d747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb675e4087d78e3a3a47d57a220773d80a6d747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb675e4087d78e3a3a47d57a220773d80a6d747"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "b00aa30999aab245c1feddb96e80fe2bb14300a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=190bbd0b03d92d0879ec56f21d5733170f9f9978", "patch": "@@ -1,3 +1,11 @@\n+2015-02-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (symtab_node::has_aliases_p): Simplify.\n+\t(symtab_node::call_for_symbol_and_aliases): Use has_aliases_p\n+\t* tree.c (lookup_binfo_at_offset): Make static.\n+\t(get_binfo_at_offset): Do not shadow offset; add explanatory\n+\tcomment.\n+\n 2015-02-15  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (pa_secondary_reload): Request a secondary reload"}, {"sha": "06d270458b00db76788a4b4e15d81e0733839530", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=190bbd0b03d92d0879ec56f21d5733170f9f9978", "patch": "@@ -2338,12 +2338,8 @@ inline bool\n symtab_node::has_aliases_p (void)\n {\n   ipa_ref *ref = NULL;\n-  int i;\n \n-  for (i = 0; iterate_direct_aliases (i, ref); i++)\n-    if (ref->use == IPA_REF_ALIAS)\n-      return true;\n-  return false;\n+  return (iterate_direct_aliases (0, ref) != NULL);\n }\n \n /* Return true when RESOLUTION indicate that linker will use\n@@ -2984,11 +2980,9 @@ symtab_node::call_for_symbol_and_aliases (bool (*callback) (symtab_node *,\n \t\t\t\t\t  void *data,\n \t\t\t\t\t  bool include_overwritable)\n {\n-  ipa_ref *ref;\n-\n   if (callback (this, data))\n     return true;\n-  if (iterate_direct_aliases (0, ref))\n+  if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n   return false;\n }\n@@ -3003,13 +2997,10 @@ cgraph_node::call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,\n \t\t\t\t\t  void *data,\n \t\t\t\t\t  bool include_overwritable)\n {\n-  ipa_ref *ref;\n-\n   if (callback (this, data))\n     return true;\n-  if (iterate_direct_aliases (0, ref))\n+  if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n-\n   return false;\n }\n \n@@ -3023,13 +3014,10 @@ varpool_node::call_for_symbol_and_aliases (bool (*callback) (varpool_node *,\n \t\t\t\t\t   void *data,\n \t\t\t\t\t   bool include_overwritable)\n {\n-  ipa_ref *ref;\n-\n   if (callback (this, data))\n     return true;\n-  if (iterate_direct_aliases (0, ref))\n+  if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n-\n   return false;\n }\n "}, {"sha": "29f70f8ec11045b6cb82aa1a9dfed2315ef3c750", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bbd0b03d92d0879ec56f21d5733170f9f9978/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=190bbd0b03d92d0879ec56f21d5733170f9f9978", "patch": "@@ -11992,7 +11992,7 @@ type_in_anonymous_namespace_p (const_tree t)\n \n /* Lookup sub-BINFO of BINFO of TYPE at offset POS.  */\n \n-tree\n+static tree\n lookup_binfo_at_offset (tree binfo, tree type, HOST_WIDE_INT pos)\n {\n   unsigned int i;\n@@ -12045,11 +12045,13 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n       else if (offset != 0)\n \t{\n \t  tree found_binfo = NULL, base_binfo;\n-\t  int offset = (tree_to_shwi (BINFO_OFFSET (binfo)) + pos\n-\t\t\t/ BITS_PER_UNIT);\n+\t  /* Offsets in BINFO are in bytes relative to the whole structure\n+\t     while POS is in bits relative to the containing field.  */\n+\t  int binfo_offset = (tree_to_shwi (BINFO_OFFSET (binfo)) + pos\n+\t\t\t     / BITS_PER_UNIT);\n \n \t  for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n-\t    if (tree_to_shwi (BINFO_OFFSET (base_binfo)) == offset\n+\t    if (tree_to_shwi (BINFO_OFFSET (base_binfo)) == binfo_offset\n \t\t&& types_same_for_odr (TREE_TYPE (base_binfo), TREE_TYPE (fld)))\n \t      {\n \t\tfound_binfo = base_binfo;\n@@ -12058,7 +12060,8 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \t  if (found_binfo)\n \t    binfo = found_binfo;\n \t  else\n-\t    binfo = lookup_binfo_at_offset (binfo, TREE_TYPE (fld), offset);\n+\t    binfo = lookup_binfo_at_offset (binfo, TREE_TYPE (fld),\n+\t\t\t\t\t    binfo_offset);\n \t }\n \n       type = TREE_TYPE (fld);"}]}