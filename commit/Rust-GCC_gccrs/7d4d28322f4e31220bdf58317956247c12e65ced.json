{"sha": "7d4d28322f4e31220bdf58317956247c12e65ced", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0ZDI4MzIyZjRlMzEyMjBiZGY1ODMxNzk1NjI0N2MxMmU2NWNlZA==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2007-09-20T11:01:18Z"}, "committer": {"name": "Mark Shinwell", "email": "shinwell@gcc.gnu.org", "date": "2007-09-20T11:01:18Z"}, "message": "combine.c: Include cgraph.h.\n\n\tgcc/\n\t* combine.c: Include cgraph.h.\n\t(setup_incoming_promotions): Rework to allow more aggressive\n\telimination of sign extensions when all call sites of the\n\tcurrent function are known to lie within the current unit.\n\nFrom-SVN: r128618", "tree": {"sha": "4ac58ef59328d6c68f32115303b4788658bb5eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac58ef59328d6c68f32115303b4788658bb5eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4d28322f4e31220bdf58317956247c12e65ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4d28322f4e31220bdf58317956247c12e65ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4d28322f4e31220bdf58317956247c12e65ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4d28322f4e31220bdf58317956247c12e65ced/comments", "author": null, "committer": null, "parents": [{"sha": "19d5986dde92e800281aaa285fb7314fe2b79aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d5986dde92e800281aaa285fb7314fe2b79aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d5986dde92e800281aaa285fb7314fe2b79aad"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "74c540aa981ead24eba8ad1f1c98533ac55959a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4d28322f4e31220bdf58317956247c12e65ced/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4d28322f4e31220bdf58317956247c12e65ced/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d4d28322f4e31220bdf58317956247c12e65ced", "patch": "@@ -1,3 +1,10 @@\n+2007-09-20  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* combine.c: Include cgraph.h.\n+\t(setup_incoming_promotions): Rework to allow more aggressive\n+\telimination of sign extensions when all call sites of the\n+\tcurrent function are known to lie within the current unit.\n+\n 2007-09-20  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* dse.c (find_shift_sequence): No-op rework of control flow."}, {"sha": "392dedb3da547abdc858c463f0529d4849cfaea7", "filename": "gcc/combine.c", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4d28322f4e31220bdf58317956247c12e65ced/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4d28322f4e31220bdf58317956247c12e65ced/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7d4d28322f4e31220bdf58317956247c12e65ced", "patch": "@@ -104,6 +104,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n #include \"df.h\"\n+#include \"cgraph.h\"\n \n /* Number of attempts to combine instructions in this function.  */\n \n@@ -1320,6 +1321,7 @@ static void\n setup_incoming_promotions (rtx first)\n {\n   tree arg;\n+  bool strictly_local = false;\n \n   if (!targetm.calls.promote_function_args (TREE_TYPE (cfun->decl)))\n     return;\n@@ -1328,27 +1330,62 @@ setup_incoming_promotions (rtx first)\n        arg = TREE_CHAIN (arg))\n     {\n       rtx reg = DECL_INCOMING_RTL (arg);\n+      int uns1, uns3;\n+      enum machine_mode mode1, mode2, mode3, mode4;\n \n+      /* Only continue if the incoming argument is in a register.  */\n       if (!REG_P (reg))\n \tcontinue;\n \n-      if (TYPE_MODE (DECL_ARG_TYPE (arg)) == TYPE_MODE (TREE_TYPE (arg)))\n-\t{\n-\t  enum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n-\t  int uns = TYPE_UNSIGNED (TREE_TYPE (arg));\n-\n-\t  mode = promote_mode (TREE_TYPE (arg), mode, &uns, 1);\n-\t  if (mode == GET_MODE (reg) && mode != DECL_MODE (arg))\n-\t    {\n-\t      rtx x;\n-\t      x = gen_rtx_CLOBBER (DECL_MODE (arg), const0_rtx);\n-\t      x = gen_rtx_fmt_e ((uns ? ZERO_EXTEND : SIGN_EXTEND), mode, x);\n-\t      record_value_for_reg (reg, first, x);\n-\t    }\n+      /* Determine, if possible, whether all call sites of the current\n+         function lie within the current compilation unit.  (This does\n+\t take into account the exporting of a function via taking its\n+\t address, and so forth.)  */\n+      if (flag_unit_at_a_time)\n+\tstrictly_local = cgraph_local_info (current_function_decl)->local;\n+\n+      /* The mode and signedness of the argument before any promotions happen\n+         (equal to the mode of the pseudo holding it at that stage).  */\n+      mode1 = TYPE_MODE (TREE_TYPE (arg));\n+      uns1 = TYPE_UNSIGNED (TREE_TYPE (arg));\n+\n+      /* The mode and signedness of the argument after any source language and\n+         TARGET_PROMOTE_PROTOTYPES-driven promotions.  */\n+      mode2 = TYPE_MODE (DECL_ARG_TYPE (arg));\n+      uns3 = TYPE_UNSIGNED (DECL_ARG_TYPE (arg));\n+\n+      /* The mode and signedness of the argument as it is actually passed, \n+         after any TARGET_PROMOTE_FUNCTION_ARGS-driven ABI promotions.  */\n+      mode3 = promote_mode (DECL_ARG_TYPE (arg), mode2, &uns3, 1);\n+\n+      /* The mode of the register in which the argument is being passed.  */\n+      mode4 = GET_MODE (reg);\n+\n+      /* Eliminate sign extensions in the callee when possible.  Only\n+         do this when:\n+\t (a) the mode of the register is the same as the mode of\n+\t     the argument as it is passed; and\n+\t (b) the signedness does not change across any of the promotions; and\n+\t (c) when no language-level promotions (which we cannot guarantee\n+\t     will have been done by an external caller) are necessary,\n+\t     unless we know that this function is only ever called from\n+\t     the current compilation unit -- all of whose call sites will\n+\t     do the mode1 --> mode2 promotion.  */\n+      if (mode3 == mode4\n+          && uns1 == uns3\n+\t  && (mode1 == mode2 || strictly_local))\n+        {\n+\t  /* Record that the value was promoted from mode1 to mode3,\n+\t     so that any sign extension at the head of the current\n+\t     function may be eliminated.  */\n+\t  rtx x;\n+\t  x = gen_rtx_CLOBBER (mode1, const0_rtx);\n+\t  x = gen_rtx_fmt_e ((uns3 ? ZERO_EXTEND : SIGN_EXTEND), mode3, x);\n+\t  record_value_for_reg (reg, first, x);\n \t}\n     }\n }\n-\f\n+\n /* Called via note_stores.  If X is a pseudo that is narrower than\n    HOST_BITS_PER_WIDE_INT and is being set, record what bits are known zero.\n "}]}