{"sha": "6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjODgyODNmNjgwYzdjZDU0YTVmZjE3MTM4OTFkN2MzNmFiN2UxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-15T23:28:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-15T23:28:49Z"}, "message": "re PR libstdc++/51142 ([C++0x] map::erase(key) doesn't compile with -D_GLIBCXX_DEBUG.)\n\n2011-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/51142\n\t* include/debug/unordered_map (unordered_map<>::erase(iterator),\n\tunordered_multimap<>::erase(iterator)): Add, consistently with\n\tLWG 2059.\n\t* include/debug/unordered_set (unordered_set<>::erase(iterator),\n\tunordered_multiset<>::erase(iterator)): Likewise.\n\t* include/debug/map.h (map<>::erase(iterator)): Likewise.\n\t* include/debug/multimap.h (multimap<>::erase(iterator)): Likewise.\n\t* include/profile/map.h (map<>::erase(iterator)): Likewise.\n\t* include/profile/multimap.h (multimap<>::erase(iterator)): Likewise.\n\t* include/bits/hashtable.h (_Hashtable<>::erase(iterator)): Likewise.\n\t* include/bits/stl_map.h (map<>::erase(iterator)): Likewise.\n\t* include/bits/stl_multimap.h (multimap<>::erase(iterator)): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree<>::erase(iterator)): Likewise.\n\t* testsuite/23_containers/unordered_map/erase/51142.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/set/modifiers/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/multiset/modifiers/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/51142.cc: Likewise.\n\t* testsuite/23_containers/map/modifiers/erase/51142.cc: Likewise.\n\nFrom-SVN: r181394", "tree": {"sha": "ec639082ecf0a8fa9deb5f95cbbeada2e9eb9404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec639082ecf0a8fa9deb5f95cbbeada2e9eb9404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/comments", "author": null, "committer": null, "parents": [{"sha": "f01fe5f68aef62f246c10e1459cf2b7f0cd2d46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01fe5f68aef62f246c10e1459cf2b7f0cd2d46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f01fe5f68aef62f246c10e1459cf2b7f0cd2d46c"}], "stats": {"total": 386, "additions": 386, "deletions": 0}, "files": [{"sha": "60602ebbb3ee1200db359ccc4ddf3e65658824b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -1,3 +1,28 @@\n+2011-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/51142\n+\t* include/debug/unordered_map (unordered_map<>::erase(iterator),\n+\tunordered_multimap<>::erase(iterator)): Add, consistently with\n+\tLWG 2059.\n+\t* include/debug/unordered_set (unordered_set<>::erase(iterator),\n+\tunordered_multiset<>::erase(iterator)): Likewise.\n+\t* include/debug/map.h (map<>::erase(iterator)): Likewise.\n+\t* include/debug/multimap.h (multimap<>::erase(iterator)): Likewise.\n+\t* include/profile/map.h (map<>::erase(iterator)): Likewise.\n+\t* include/profile/multimap.h (multimap<>::erase(iterator)): Likewise.\n+\t* include/bits/hashtable.h (_Hashtable<>::erase(iterator)): Likewise.\n+\t* include/bits/stl_map.h (map<>::erase(iterator)): Likewise.\n+\t* include/bits/stl_multimap.h (multimap<>::erase(iterator)): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree<>::erase(iterator)): Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/51142.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/51142.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/erase/51142.cc: Likewise.\n+\n 2011-11-15  Jason Dick  <dickphd@gmail.com>\n \n \tPR libstdc++/51133"}, {"sha": "203999d9ca04c5bef069dcf79849b2de27f9b243", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -432,6 +432,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       iterator\n       erase(const_iterator);\n \n+      // LWG 2059.\n+      iterator\n+      erase(iterator __it)\n+      { return erase(const_iterator(__it)); }\n+\n       size_type\n       erase(const key_type&);\n "}, {"sha": "f1c4cfefa57ac98189345175f6afca89c1622986", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -617,6 +617,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n+\n+      // LWG 2059.\n+      iterator\n+      erase(iterator __position)\n+      { return _M_t.erase(__position); }\n #else\n       /**\n        *  @brief Erases an element from a %map."}, {"sha": "ae4389e2709d9b7fd48afcd3d18b94509b5aeeb0", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -536,6 +536,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n+\n+      // LWG 2059.\n+      iterator\n+      erase(iterator __position)\n+      { return _M_t.erase(__position); }\n #else\n       /**\n        *  @brief Erases an element from a %multimap."}, {"sha": "ee56bbc75256c94f825f3ca3070131b75d36011d", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -767,6 +767,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_erase_aux(__position);\n \treturn __result._M_const_cast();\n       }\n+\n+      // LWG 2059.\n+      iterator\n+      erase(iterator __position)\n+      {\n+\titerator __result = __position;\n+\t++__result;\n+\t_M_erase_aux(__position);\n+\treturn __result;\n+      }\n #else\n       void\n       erase(iterator __position)"}, {"sha": "9abfee867d00ad318ccef88a3045f60c452fe9ab", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -271,6 +271,10 @@ namespace __debug\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n \treturn iterator(_Base::erase(__position.base()), this);\n       }\n+\n+      iterator\n+      erase(iterator __position)\n+      { return erase(const_iterator(__position)); }\n #else\n       void\n       erase(iterator __position)"}, {"sha": "e43094f8b4df99df0fe7fbdc3c92c6e30b475af9", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -254,6 +254,10 @@ namespace __debug\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n \treturn iterator(_Base::erase(__position.base()), this);\n       }\n+\n+      iterator\n+      erase(iterator __position)\n+      { return erase(const_iterator(__position)); }\n #else\n       void\n       erase(iterator __position)"}, {"sha": "9a6061e69cecdd9b8d915ad0690fccbc764eb9e6", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -333,6 +333,10 @@ namespace __debug\n \treturn iterator(__next, this);\n       }\n \n+      iterator\n+      erase(iterator __it)\n+      { return erase(const_iterator(__it)); }\n+\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n@@ -708,6 +712,10 @@ namespace __debug\n \treturn iterator(__next, this);\n       }\n \n+      iterator\n+      erase(iterator __it)\n+      { return erase(const_iterator(__it)); }\n+\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "ce169e66cb3810133da36db6055c9708fb5fced7", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -329,6 +329,10 @@ namespace __debug\n \treturn iterator(__next, this);\n       }\n \n+      iterator\n+      erase(iterator __it)\n+      { return erase(const_iterator(__it)); }\n+\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n@@ -695,6 +699,10 @@ namespace __debug\n \treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n+      iterator\n+      erase(iterator __it)\n+      { return erase(const_iterator(__it)); }\n+\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "eb5c5d90d9c6770ff7e8dd8502192c75d96d77c7", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -327,6 +327,10 @@ namespace __profile\n         __profcxx_map_to_unordered_map_erase(this, size(), 1);\n         return __i;\n       }\n+\n+      iterator\n+      erase(iterator __position)\n+      { return erase(const_iterator(__position)); }\n #else\n       void\n       erase(iterator __position)"}, {"sha": "b71be4570bdea575157b06af015226d901b42182", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -226,6 +226,10 @@ namespace __profile\n       iterator\n       erase(const_iterator __position)\n       { return iterator(_Base::erase(__position)); }\n+\n+      iterator\n+      erase(iterator __position)\n+      { return iterator(_Base::erase(__position)); }\n #else\n       void\n       erase(iterator __position)"}, {"sha": "f50b7b7e9fd9e683e0fe2a372fa8247fd211f641", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <map>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator<(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::map<X, int>& s, X x)\n+{\n+  std::map<X, int>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "ee687f77cf680badbc3904919aeee437ca881f9b", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <map>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator<(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::multimap<X, int>& s, X x)\n+{\n+  std::multimap<X, int>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "c5beb6a8dd5a40133d71fc307ceaa8e233e13d9f", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <set>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator<(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::multiset<X>& s, X x)\n+{\n+  std::multiset<X>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "4fb296a95fcd156abcc4bf31df8802e56b07cce6", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <set>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator<(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::set<X>& s, X x)\n+{\n+  std::set<X>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "eab637df2352f82d556cf285ec072783a5294bde", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_map>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator==(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::unordered_map<X, int>& s, X x)\n+{\n+  std::unordered_map<X, int>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "678aa5dd9897a9ce8a3fd76fdf2eeeb600116886", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_map>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator==(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::unordered_multimap<X, int>& s, X x)\n+{\n+  std::unordered_multimap<X, int>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "4db6af0fa2593990bded93da114d58aa11e0aeb2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_set>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator==(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::unordered_multiset<X>& s, X x)\n+{\n+  std::unordered_multiset<X>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}, {"sha": "14864604289e8b81c938429f92793cd711d9d0fe", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/51142.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc88283f680c7cd54a5ff1713891d7c36ab7e17/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F51142.cc?ref=6dc88283f680c7cd54a5ff1713891d7c36ab7e17", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_set>\n+\n+struct X\n+{\n+  template<typename T>\n+  X(T&) {}\n+};\n+\n+bool operator==(const X&, const X&) { return false; }\n+\n+// LWG 2059.\n+void erasor(std::unordered_set<X>& s, X x)\n+{\n+  std::unordered_set<X>::iterator it = s.find(x);\n+  if (it != s.end())\n+    s.erase(it);\n+}"}]}