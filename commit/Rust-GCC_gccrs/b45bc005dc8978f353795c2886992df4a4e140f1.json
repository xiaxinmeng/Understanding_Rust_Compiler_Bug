{"sha": "b45bc005dc8978f353795c2886992df4a4e140f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1YmMwMDVkYzg5NzhmMzUzNzk1YzI4ODY5OTJkZjRhNGUxNDBmMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-23T00:18:25Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-23T00:18:25Z"}, "message": "gcc.texi (Sending Patches): Remove.\n\n\t* doc/gcc.texi (Sending Patches): Remove.\n\nf:\n\t* g77.texi (Sending Patches): Remove.\n\nFrom-SVN: r46418", "tree": {"sha": "c0fe5503addcdda432dfa5f331583f70b9172a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0fe5503addcdda432dfa5f331583f70b9172a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b45bc005dc8978f353795c2886992df4a4e140f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45bc005dc8978f353795c2886992df4a4e140f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45bc005dc8978f353795c2886992df4a4e140f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45bc005dc8978f353795c2886992df4a4e140f1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ad2982d82ef74fd741eb7dfdb664defaaa8027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ad2982d82ef74fd741eb7dfdb664defaaa8027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ad2982d82ef74fd741eb7dfdb664defaaa8027"}], "stats": {"total": 252, "additions": 13, "deletions": 239}, "files": [{"sha": "7ccf219c4c7d049611e9cbfa7e7d4b9ceeee1e64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b45bc005dc8978f353795c2886992df4a4e140f1", "patch": "@@ -1,3 +1,7 @@\n+2001-10-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi (Sending Patches): Remove.\n+\n 2001-10-22  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* unwind-dw2-fde.c (fde_unencoded_compare): Derefer pc_begin"}, {"sha": "a2dbbcf9862bc40d70097916c4c6449289253463", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 3, "deletions": 119, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=b45bc005dc8978f353795c2886992df4a4e140f1", "patch": "@@ -2022,7 +2022,6 @@ information that makes for fixing the bug.\n * Where: Bug Lists.\t     Where to send your bug report.\n * Reporting: Bug Reporting.  How to report a bug effectively.\n * GNATS: gccbug.             You can use a bug reporting tool.\n-* Patches: Sending Patches.  How to send a patch for GCC.\n * Known: Trouble.            Known problems.\n * Help: Service.             Where to ask for help.\n @end menu\n@@ -2347,7 +2346,8 @@ And if we can't understand what bug you are trying to fix, or why your\n patch should be an improvement, we won't install it.  A test case will\n help us to understand.\n \n-@xref{Sending Patches}, for guidelines on how to make it easy for us to\n+See @uref{http://gcc.gnu.org/contribute.html}\n+for guidelines on how to make it easy for us to\n understand and install your patches.\n \n @item\n@@ -2364,7 +2364,7 @@ unless we have an identical system---and if we do have one,\n we should be able to reproduce the crash ourselves.\n @end itemize\n \n-@node gccbug,Sending Patches, Bug Reporting, Bugs\n+@node gccbug,, Bug Reporting, Bugs\n @section The gccbug script\n @cindex gccbug script\n \n@@ -2383,122 +2383,6 @@ send to the bug reporting address.\n A number of fields in this bug report form are specific to GCC, and are\n explained at @uref{http://gcc.gnu.org/gnats.html}.\n \n-@node Sending Patches,, gccbug, Bugs\n-@section Sending Patches for GCC\n-\n-If you would like to write bug fixes or improvements for the GNU C\n-compiler, that is very helpful.  Send suggested fixes to the patches\n-mailing list, @email{gcc-patches@@gcc.gnu.org}.\n-\n-Please follow these guidelines so we can study your patches efficiently.\n-If you don't follow these guidelines, your information might still be\n-useful, but using it will take extra work.  Maintaining GCC is a lot\n-of work in the best of circumstances, and we can't keep up unless you do\n-your best to help.\n-\n-@itemize @bullet\n-@item\n-Send an explanation with your changes of what problem they fix or what\n-improvement they bring about.  For a bug fix, just include a copy of the\n-bug report, and explain why the change fixes the bug.\n-\n-(Referring to a bug report is not as good as including it, because then\n-we will have to look it up, and we have probably already deleted it if\n-we've already fixed the bug.)\n-\n-@item\n-Always include a proper bug report for the problem you think you have\n-fixed.  We need to convince ourselves that the change is right before\n-installing it.  Even if it is right, we might have trouble judging it if\n-we don't have a way to reproduce the problem.\n-\n-@item\n-Include all the comments that are appropriate to help people reading the\n-source in the future understand why this change was needed.\n-\n-@item\n-Don't mix together changes made for different reasons.\n-Send them @emph{individually}.\n-\n-If you make two changes for separate reasons, then we might not want to\n-install them both.  We might want to install just one.  If you send them\n-all jumbled together in a single set of diffs, we have to do extra work\n-to disentangle them---to figure out which parts of the change serve\n-which purpose.  If we don't have time for this, we might have to ignore\n-your changes entirely.\n-\n-If you send each change as soon as you have written it, with its own\n-explanation, then the two changes never get tangled up, and we can\n-consider each one properly without any extra work to disentangle them.\n-\n-Ideally, each change you send should be impossible to subdivide into\n-parts that we might want to consider separately, because each of its\n-parts gets its motivation from the other parts.\n-\n-@item\n-Send each change as soon as that change is finished.  Sometimes people\n-think they are helping us by accumulating many changes to send them all\n-together.  As explained above, this is absolutely the worst thing you\n-could do.\n-\n-Since you should send each change separately, you might as well send it\n-right away.  That gives us the option of installing it immediately if it\n-is important.\n-\n-@item\n-Use @samp{diff -c} to make your diffs.  Diffs without context are hard\n-for us to install reliably.  More than that, they make it hard for us to\n-study the diffs to decide whether we want to install them.  Unidiff\n-format is better than contextless diffs, but not as easy to read as\n-@option{-c} format.\n-\n-If you have GNU diff, use @samp{diff -cp}, which shows the name of the\n-function that each change occurs in.\n-\n-@item\n-Write the change log entries for your changes.  We get lots of changes,\n-and we don't have time to do all the change log writing ourselves.\n-\n-Read the @file{ChangeLog} file to see what sorts of information to put\n-in, and to learn the style that we use.  The purpose of the change log\n-is to show people where to find what was changed.  So you need to be\n-specific about what functions you changed; in large functions, it's\n-often helpful to indicate where within the function the change was.\n-\n-On the other hand, once you have shown people where to find the change,\n-you need not explain its purpose.  Thus, if you add a new function, all\n-you need to say about it is that it is new.  If you feel that the\n-purpose needs explaining, it probably does---but the explanation will be\n-much more useful if you put it in comments in the code.\n-\n-If you would like your name to appear in the header line for who made\n-the change, send us the header line.\n-\n-@item\n-When you write the fix, keep in mind that we can't install a change that\n-would break other systems.\n-\n-People often suggest fixing a problem by changing machine-independent\n-files such as @file{toplev.c} to do something special that a particular\n-system needs.  Sometimes it is totally obvious that such changes would\n-break GCC for almost all users.  We can't possibly make a change like\n-that.  At best it might tell us how to write another patch that would\n-solve the problem acceptably.\n-\n-Sometimes people send fixes that @emph{might} be an improvement in\n-general---but it is hard to be sure of this.  It's hard to install\n-such changes because we have to study them very carefully.  Of course,\n-a good explanation of the reasoning by which you concluded the change\n-was correct can help convince us.\n-\n-The safest changes are changes to the configuration files for a\n-particular machine.  These are safe because they can't create new bugs\n-on other machines.\n-\n-Please help us keep up with the workload by designing the patch in a\n-form that is good to install.\n-@end itemize\n-\n @node Service\n @chapter How To Get Help with GCC\n "}, {"sha": "3754e628c4549e9a4aa3e636f52b849e2434c52c", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b45bc005dc8978f353795c2886992df4a4e140f1", "patch": "@@ -1,3 +1,7 @@\n+2001-10-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* g77.texi (Sending Patches): Remove.\n+\n 2001-10-22  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Make-lang.in (f/intdoc): Depend on safe-ctype.o."}, {"sha": "1ff671f6935036cf31559fac8fd59ba2cefe3754", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 2, "deletions": 120, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45bc005dc8978f353795c2886992df4a4e140f1/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=b45bc005dc8978f353795c2886992df4a4e140f1", "patch": "@@ -12619,7 +12619,6 @@ information that makes for fixing the bug.\n * Criteria: Bug Criteria.    Have you really found a bug?\n * Where: Bug Lists.          Where to send your bug report.\n * Reporting: Bug Reporting.  How to report a bug effectively.\n-* Patches: Sending Patches.  How to send a patch for GNU Fortran.\n @end menu\n \n @xref{Trouble,,Known Causes of Trouble with GNU Fortran},\n@@ -13134,7 +13133,8 @@ And if we can't understand what bug you are trying to fix, or why your\n patch should be an improvement, we won't install it.  A test case will\n help us to understand.\n \n-@xref{Sending Patches}, for guidelines on how to make it easy for us to\n+See @uref{http://gcc.gnu.org/contribute.html}\n+for guidelines on how to make it easy for us to\n understand and install your patches.\n \n @item\n@@ -13151,124 +13151,6 @@ unless we have an identical system---and if we do have one,\n we should be able to reproduce the crash ourselves.\n @end itemize\n \n-@node Sending Patches\n-@section Sending Patches for GNU Fortran\n-\n-If you would like to write bug fixes or improvements for the GNU Fortran\n-compiler, that is very helpful.\n-Send suggested fixes to the mailing list for patches,\n-@email{@value{email-patch}}.\n-\n-Please follow these guidelines so we can study your patches efficiently.\n-If you don't follow these guidelines, your information might still be\n-useful, but using it will take extra work.  Maintaining GNU Fortran is a lot\n-of work in the best of circumstances, and we can't keep up unless you do\n-your best to help.\n-\n-@itemize @bullet\n-@item\n-Send an explanation with your changes of what problem they fix or what\n-improvement they bring about.  For a bug fix, just include a copy of the\n-bug report, and explain why the change fixes the bug.\n-\n-(Referring to a bug report is not as good as including it, because then\n-we will have to look it up, and we have probably already deleted it if\n-we've already fixed the bug.)\n-\n-@item\n-Always include a proper bug report for the problem you think you have\n-fixed.  We need to convince ourselves that the change is right before\n-installing it.  Even if it is right, we might have trouble judging it if\n-we don't have a way to reproduce the problem.\n-\n-@item\n-Include all the comments that are appropriate to help people reading the\n-source in the future understand why this change was needed.\n-\n-@item\n-Don't mix together changes made for different reasons.\n-Send them @emph{individually}.\n-\n-If you make two changes for separate reasons, then we might not want to\n-install them both.  We might want to install just one.  If you send them\n-all jumbled together in a single set of diffs, we have to do extra work\n-to disentangle them---to figure out which parts of the change serve\n-which purpose.  If we don't have time for this, we might have to ignore\n-your changes entirely.\n-\n-If you send each change as soon as you have written it, with its own\n-explanation, then the two changes never get tangled up, and we can\n-consider each one properly without any extra work to disentangle them.\n-\n-Ideally, each change you send should be impossible to subdivide into\n-parts that we might want to consider separately, because each of its\n-parts gets its motivation from the other parts.\n-\n-@item\n-Send each change as soon as that change is finished.  Sometimes people\n-think they are helping us by accumulating many changes to send them all\n-together.  As explained above, this is absolutely the worst thing you\n-could do.\n-\n-Since you should send each change separately, you might as well send it\n-right away.  That gives us the option of installing it immediately if it\n-is important.\n-\n-@item\n-Use @samp{diff -c} to make your diffs.  Diffs without context are hard\n-for us to install reliably.  More than that, they make it hard for us to\n-study the diffs to decide whether we want to install them.  Unidiff\n-format is better than contextless diffs, but not as easy to read as\n-@samp{-c} format.\n-\n-If you have GNU @code{diff}, use @samp{diff -cp}, which shows the name of the\n-function that each change occurs in.\n-(The maintainer of GNU Fortran currently uses @samp{diff -rcp2N}.)\n-\n-@item\n-Write the change log entries for your changes.  We get lots of changes,\n-and we don't have time to do all the change log writing ourselves.\n-\n-Read the @file{ChangeLog} file to see what sorts of information to put\n-in, and to learn the style that we use.  The purpose of the change log\n-is to show people where to find what was changed.  So you need to be\n-specific about what functions you changed; in large functions, it's\n-often helpful to indicate where within the function the change was.\n-\n-On the other hand, once you have shown people where to find the change,\n-you need not explain its purpose.  Thus, if you add a new function, all\n-you need to say about it is that it is new.  If you feel that the\n-purpose needs explaining, it probably does---but the explanation will be\n-much more useful if you put it in comments in the code.\n-\n-If you would like your name to appear in the header line for who made\n-the change, send us the header line.\n-\n-@item\n-When you write the fix, keep in mind that we can't install a change that\n-would break other systems.\n-\n-People often suggest fixing a problem by changing machine-independent\n-files such as @file{toplev.c} to do something special that a particular\n-system needs.  Sometimes it is totally obvious that such changes would\n-break GNU Fortran for almost all users.  We can't possibly make a change like\n-that.  At best it might tell us how to write another patch that would\n-solve the problem acceptably.\n-\n-Sometimes people send fixes that @emph{might} be an improvement in\n-general---but it is hard to be sure of this.  It's hard to install\n-such changes because we have to study them very carefully.  Of course,\n-a good explanation of the reasoning by which you concluded the change\n-was correct can help convince us.\n-\n-The safest changes are changes to the configuration files for a\n-particular machine.  These are safe because they can't create new bugs\n-on other machines.\n-\n-Please help us keep up with the workload by designing the patch in a\n-form that is good to install.\n-@end itemize\n-\n @node Service\n @chapter How To Get Help with GNU Fortran\n "}]}