{"sha": "e30bf330443da67fe56bea021b9d70c0f76deedb", "node_id": "C_kwDOANBUbNoAKGUzMGJmMzMwNDQzZGE2N2ZlNTZiZWEwMjFiOWQ3MGMwZjc2ZGVlZGI", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-13T22:18:38Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-13T22:18:38Z"}, "message": "More ipa-modref-tree.h cleanups\n\nMove access dumping to member function and cleanup formating.\n\ngcc/ChangeLog:\n\n2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-modref-tree.c (modref_access_node::range_info_useful_p):\n\tOffline from ipa-modref-tree.h.\n\t(modref_access_node::dump): Move from ipa-modref.c; make member\n\tfunction.\n\t* ipa-modref-tree.h (modref_access_node::range_info_useful_p.\n\tmodref_access_node::dump): Declare.\n\t* ipa-modref.c (dump_access): Remove.\n\t(dump_records): Update.\n\t(dump_lto_records): Update.\n\t(record_access): Update.\n\t(record_access_lto): Update.", "tree": {"sha": "3e4dea3b584d53c52430dd13d403f69a57dee150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e4dea3b584d53c52430dd13d403f69a57dee150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e30bf330443da67fe56bea021b9d70c0f76deedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30bf330443da67fe56bea021b9d70c0f76deedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30bf330443da67fe56bea021b9d70c0f76deedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30bf330443da67fe56bea021b9d70c0f76deedb/comments", "author": null, "committer": null, "parents": [{"sha": "5aa91072e24c1e16a5ec641b48b64c9c9f199f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa91072e24c1e16a5ec641b48b64c9c9f199f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa91072e24c1e16a5ec641b48b64c9c9f199f13"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "70ec71c3808280e2d1fca45653d70a91e4db31d9", "filename": "gcc/ipa-modref-tree.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.c?ref=e30bf330443da67fe56bea021b9d70c0f76deedb", "patch": "@@ -561,6 +561,48 @@ modref_access_node::insert (vec <modref_access_node, va_gc> *&accesses,\n   return 1;\n }\n \n+/* Return true if range info is useful.  */\n+bool\n+modref_access_node::range_info_useful_p () const\n+{\n+  return parm_index != MODREF_UNKNOWN_PARM && parm_offset_known\n+\t && (known_size_p (size)\n+\t     || known_size_p (max_size)\n+\t     || known_ge (offset, 0));\n+}\n+\n+/* Dump range to debug OUT.  */\n+void\n+modref_access_node::dump (FILE *out)\n+{\n+  if (parm_index != MODREF_UNKNOWN_PARM)\n+    {\n+      if (parm_index >= 0)\n+\tfprintf (out, \" Parm %i\", parm_index);\n+      else if (parm_index == MODREF_STATIC_CHAIN_PARM)\n+\tfprintf (out, \" Static chain\");\n+      else\n+\tgcc_unreachable ();\n+      if (parm_offset_known)\n+\t{\n+\t  fprintf (out, \" param offset:\");\n+\t  print_dec ((poly_int64_pod)parm_offset, out, SIGNED);\n+\t}\n+    }\n+  if (range_info_useful_p ())\n+    {\n+      fprintf (out, \" offset:\");\n+      print_dec ((poly_int64_pod)offset, out, SIGNED);\n+      fprintf (out, \" size:\");\n+      print_dec ((poly_int64_pod)size, out, SIGNED);\n+      fprintf (out, \" max_size:\");\n+      print_dec ((poly_int64_pod)max_size, out, SIGNED);\n+      if (adjustments)\n+\tfprintf (out, \" adjusted %i times\", adjustments);\n+    }\n+  fprintf (out, \"\\n\");\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "1fafd59debedcad735109ada61044292dd28272e", "filename": "gcc/ipa-modref-tree.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.h?ref=e30bf330443da67fe56bea021b9d70c0f76deedb", "patch": "@@ -54,7 +54,11 @@ enum modref_special_parms {\n   MODREF_LOCAL_MEMORY_PARM = -4\n };\n \n-/* Memory access.  */\n+/* Modref record accesses relative to function parameters.\n+   This is entry for single access specifying its base and access range.\n+\n+   Accesses can be collected to boundedly sized arrays using\n+   modref_access_node::insert.  */\n struct GTY(()) modref_access_node\n {\n   /* Access range information (in bits).  */\n@@ -78,18 +82,14 @@ struct GTY(()) modref_access_node\n     {\n       return parm_index != MODREF_UNKNOWN_PARM;\n     }\n-  /* Return true if range info is useful.  */\n-  bool range_info_useful_p () const\n-    {\n-      return parm_index != MODREF_UNKNOWN_PARM && parm_offset_known\n-\t     && (known_size_p (size)\n-\t\t || known_size_p (max_size)\n-\t\t || known_ge (offset, 0));\n-    }\n+  /* Dump range to debug OUT.  */\n+  void dump (FILE *out);\n   /* Return true if both accesses are the same.  */\n   bool operator == (modref_access_node &a) const;\n-  /* Insert A into ACCESSES.  Limit size of vector to MAX_ACCESSES and if\n-     RECORD_ADJUSTMENT is true keep track of adjustment counts.\n+  /* Return true if range info is useful.  */\n+  bool range_info_useful_p () const;\n+  /* Insert A into vector ACCESSES.  Limit size of vector to MAX_ACCESSES and\n+     if RECORD_ADJUSTMENT is true keep track of adjustment counts.\n      Return 0 if nothing changed, 1 is insertion suceeded and -1 if\n      failed.  */\n   static int insert (vec <modref_access_node, va_gc> *&accesses,"}, {"sha": "b75ed84135b35f3b51410a1cedbe9bcae28d9e2e", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bf330443da67fe56bea021b9d70c0f76deedb/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=e30bf330443da67fe56bea021b9d70c0f76deedb", "patch": "@@ -405,40 +405,6 @@ modref_summary_lto::useful_p (int ecf_flags, bool check_flags)\n   return stores && !stores->every_base;\n }\n \n-/* Dump A to OUT.  */\n-\n-static void\n-dump_access (modref_access_node *a, FILE *out)\n-{\n-  fprintf (out, \"          access:\");\n-  if (a->parm_index != MODREF_UNKNOWN_PARM)\n-    {\n-      if (a->parm_index >= 0)\n-\tfprintf (out, \" Parm %i\", a->parm_index);\n-      else if (a->parm_index == MODREF_STATIC_CHAIN_PARM)\n-\tfprintf (out, \" Static chain\");\n-      else\n-\tgcc_unreachable ();\n-      if (a->parm_offset_known)\n-\t{\n-\t  fprintf (out, \" param offset:\");\n-\t  print_dec ((poly_int64_pod)a->parm_offset, out, SIGNED);\n-\t}\n-    }\n-  if (a->range_info_useful_p ())\n-    {\n-      fprintf (out, \" offset:\");\n-      print_dec ((poly_int64_pod)a->offset, out, SIGNED);\n-      fprintf (out, \" size:\");\n-      print_dec ((poly_int64_pod)a->size, out, SIGNED);\n-      fprintf (out, \" max_size:\");\n-      print_dec ((poly_int64_pod)a->max_size, out, SIGNED);\n-      if (a->adjustments)\n-\tfprintf (out, \" adjusted %i times\", a->adjustments);\n-    }\n-  fprintf (out, \"\\n\");\n-}\n-\n /* Dump records TT to OUT.  */\n \n static void\n@@ -474,7 +440,10 @@ dump_records (modref_records *tt, FILE *out)\n \t  size_t k;\n \t  modref_access_node *a;\n \t  FOR_EACH_VEC_SAFE_ELT (r->accesses, k, a)\n-\t    dump_access (a, out);\n+\t    {\n+\t      fprintf (out, \"          access:\");\n+\t      a->dump (out);\n+\t    }\n \t}\n     }\n }\n@@ -520,7 +489,10 @@ dump_lto_records (modref_records_lto *tt, FILE *out)\n \t  size_t k;\n \t  modref_access_node *a;\n \t  FOR_EACH_VEC_SAFE_ELT (r->accesses, k, a)\n-\t    dump_access (a, out);\n+\t    {\n+\t      fprintf (out, \"          access:\");\n+\t      a->dump (out);\n+\t    }\n \t}\n     }\n }\n@@ -801,7 +773,7 @@ record_access (modref_records *tt, ao_ref *ref)\n     {\n        fprintf (dump_file, \"   - Recording base_set=%i ref_set=%i \",\n \t\tbase_set, ref_set);\n-       dump_access (&a, dump_file);\n+       a.dump (dump_file);\n     }\n   tt->insert (base_set, ref_set, a, false);\n }\n@@ -866,7 +838,7 @@ record_access_lto (modref_records_lto *tt, ao_ref *ref)\n       print_generic_expr (dump_file, ref_type);\n       fprintf (dump_file, \" (alias set %i) \",\n \t       ref_type ? get_alias_set (ref_type) : 0);\n-       dump_access (&a, dump_file);\n+       a.dump (dump_file);\n     }\n \n   tt->insert (base_type, ref_type, a, false);"}]}