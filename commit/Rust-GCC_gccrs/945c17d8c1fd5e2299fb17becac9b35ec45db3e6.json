{"sha": "945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1YzE3ZDhjMWZkNWUyMjk5ZmIxN2JlY2FjOWIzNWVjNDVkYjNlNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-02-15T20:28:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-02-15T20:28:32Z"}, "message": "PR c++/79363 - ICE with NSDMI and array\n\ngcc/cp/ChangeLog:\n\n\tPR c++/79363\n\t* init.c (maybe_reject_flexarray_init): New function.\n\t(perform_member_init): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/79363\n\t* g++.dg/ext/flexary12.C: Adjust.\n\t* g++.dg/ext/flexary20.C: Same.\n\t* g++.dg/ext/flexary21.C: Same.\n\t* g++.dg/ext/flexary22.C: New test.\n\nFrom-SVN: r245494", "tree": {"sha": "52131b88d2ff4908aacdbff0f1b0da777996ad69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52131b88d2ff4908aacdbff0f1b0da777996ad69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8daddba8be98919c11a14d5afa8489f9b9bbd801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daddba8be98919c11a14d5afa8489f9b9bbd801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8daddba8be98919c11a14d5afa8489f9b9bbd801"}], "stats": {"total": 127, "additions": 102, "deletions": 25}, "files": [{"sha": "4d4f1a07805f4ee004c63d55cdc5fc1fbc346cef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -1,3 +1,9 @@\n+2017-02-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/79363\n+\t* init.c (maybe_reject_flexarray_init): New function.\n+\t(perform_member_init): Call it.\n+\n 2017-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79301"}, {"sha": "fa742268dc0fc3ea44262fe7976b144334f64e27", "filename": "gcc/cp/init.c", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -597,6 +597,33 @@ get_nsdmi (tree member, bool in_ctor)\n   return init;\n }\n \n+/* Diagnose the flexible array MEMBER if its INITializer is non-null\n+   and return true if so.  Otherwise return false.  */\n+\n+static bool\n+maybe_reject_flexarray_init (tree member, tree init)\n+{\n+  tree type = TREE_TYPE (member);\n+\n+  if (!init\n+      || TREE_CODE (type) != ARRAY_TYPE\n+      || TYPE_DOMAIN (type))\n+    return false;\n+\n+  /* Point at the flexible array member declaration if it's initialized\n+     in-class, and at the ctor if it's initialized in a ctor member\n+     initializer list.  */\n+  location_t loc;\n+  if (DECL_INITIAL (member) == init\n+      || DECL_DEFAULTED_FN (current_function_decl))\n+    loc = DECL_SOURCE_LOCATION (member);\n+  else\n+    loc = DECL_SOURCE_LOCATION (current_function_decl);\n+\n+  error_at (loc, \"initializer for flexible array member %q#D\", member);\n+  return true;\n+}\n+\n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n    arguments.  If TREE_LIST is void_type_node, an empty initializer\n    list was given; if NULL_TREE no initializer was given.  */\n@@ -722,10 +749,18 @@ perform_member_init (tree member, tree init)\n \t{\n \t  if (init)\n \t    {\n-\t      if (TREE_CHAIN (init))\n+\t      /* Check to make sure the member initializer is valid and\n+\t\t something like a CONSTRUCTOR in: T a[] = { 1, 2 } and\n+\t\t if it isn't, return early to avoid triggering another\n+\t\t error below.  */\n+\t      if (maybe_reject_flexarray_init (member, init))\n+\t\treturn;\n+\n+\t      if (TREE_CODE (init) != TREE_LIST || TREE_CHAIN (init))\n \t\tinit = error_mark_node;\n \t      else\n \t\tinit = TREE_VALUE (init);\n+\n \t      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n \t\tinit = digest_init (type, init, tf_warning_or_error);\n \t    }\n@@ -800,16 +835,9 @@ perform_member_init (tree member, tree init)\n \t   in that case.  */\n \tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n \t\t\t\t\t\ttf_warning_or_error);\n-      if (TREE_CODE (type) == ARRAY_TYPE\n-\t  && TYPE_DOMAIN (type) == NULL_TREE\n-\t  && init != NULL_TREE)\n-\t{\n-\t  error_at (DECL_SOURCE_LOCATION (current_function_decl),\n-\t\t    \"member initializer for flexible array member\");\n-\t  inform (DECL_SOURCE_LOCATION (member), \"%q#D initialized\", member);\n-\t}\n \n-      if (init)\n+      /* Reject a member initializer for a flexible array member.  */\n+      if (init && !maybe_reject_flexarray_init (member, init))\n \tfinish_expr_stmt (cp_build_modify_expr (input_location, decl,\n \t\t\t\t\t\tINIT_EXPR, init,\n \t\t\t\t\t\ttf_warning_or_error));"}, {"sha": "85624d9d5038884965175c14a073b0fe5383cfd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -1,3 +1,11 @@\n+2017-02-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/79363\n+\t* g++.dg/ext/flexary12.C: Adjust.\n+\t* g++.dg/ext/flexary20.C: Same.\n+\t* g++.dg/ext/flexary21.C: Same.\n+\t* g++.dg/ext/flexary22.C: New test.\n+\n 2017-02-15  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/79347"}, {"sha": "61726f63f2846ac0383ca74fe8717656193b1292", "filename": "gcc/testsuite/g++.dg/ext/flexary12.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary12.C?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -44,8 +44,9 @@ struct D {\n   D ();\n };\n \n-D::D ():    // { dg-error \"member initializer for flexible array member\" }\n-  a (\"c\")   // { dg-error \"incompatible types in assignment of .const char \\\\\\[2\\\\\\]. to .int \\\\\\[\\\\\\].\" }\n+D::D ():    // { dg-error \"initializer for flexible array member\" }\n+  a (\"c\")   // the initializer also has an invalid type but emitting\n+\t    // just the error above is sufficient\n { }\n \n "}, {"sha": "10a06b499480c517d33e9f90f321bcb37c6beaee", "filename": "gcc/testsuite/g++.dg/ext/flexary20.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary20.C?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -4,22 +4,22 @@\n \n struct S {\n   int i;\n-  char a[] = \"foo\";\n-  S () {} // { dg-error \"member initializer for flexible array member\" }\n+  char a[] = \"foo\";   // { dg-error \"initializer for flexible array member\" }\n+  S () {}\n };\n \n-struct T { // { dg-error \"member initializer for flexible array member\" }\n+struct T {\n   int i;\n-  char a[] = \"foo\";\n+  char a[] = \"foo\";   // { dg-error \"initializer for flexible array member\" }\n };\n \n struct U {\n   int i;\n-  char a[] = \"foo\";\n+  char a[] = \"foo\";   // { dg-error \"initializer for flexible array member\" }\n   U ();\n };\n \n-U::U() {} // { dg-error \"member initializer for flexible array member\" }\n+U::U() {}\n \n int\n main ()\n@@ -29,17 +29,17 @@ main ()\n \n struct V {\n   int i;\n-  struct W { // { dg-error \"member initializer for flexible array member\" }\n+  struct W {\n     int j;\n-    char a[] = \"foo\";\n+    char a[] = \"foo\";   // { dg-error \"initializer for flexible array member\" }\n   } w;\n   V () {}\n };\n \n template <class T>\n-struct X { // { dg-error \"member initializer for flexible array member\" }\n+struct X {\n   int i;\n-  T a[] = \"foo\";\n+  T a[] = \"foo\";   // { dg-error \"initializer for flexible array member\" }\n };\n \n void"}, {"sha": "24d330a423bfeb3a480c235372e4334b77c553aa", "filename": "gcc/testsuite/g++.dg/ext/flexary21.C", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary21.C?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -5,11 +5,16 @@\n struct S {\n   int i;\n   char a[];\n-  S () : a(\"bob\") {} // { dg-error \"member initializer for flexible array member\" }\n+  S () : a(\"bob\") {} // { dg-error \"initializer for flexible array member\" }\n };\n \n struct T {\n   int i;\n-  char a[] = \"bob\";\n-  T () : a(\"bob\") {} // { dg-error \"member initializer for flexible array member\" }\n+  char b[] = \"bob\";      // { dg-error \"initializer for flexible array member\" }\n+  T () {\n+    // the presence of this ctor definition elicits the error above\n+    // without it the flexible array initializer would be ignored\n+    // and so (unfortunately) not diagnosed\n+  }\n+  T (int) : b(\"bob\") {}  // { dg-error \"initializer for flexible array member\" }\n };"}, {"sha": "041f0242d55da1ac686f58b9a254051b32721e68", "filename": "gcc/testsuite/g++.dg/ext/flexary22.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945c17d8c1fd5e2299fb17becac9b35ec45db3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary22.C?ref=945c17d8c1fd5e2299fb17becac9b35ec45db3e6", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/79363 - ICE with NSDMI and array\n+// { dg-do compile { target c++11 } }\n+// { dg-options -Wno-pedantic }\n+\n+struct A\n+{\n+  int i;\n+  int a[] = { };   // { dg-error \"initializer for flexible array member\" }\n+} a;\n+\n+struct B\n+{\n+  int i;\n+  char a[] { \"abc\" };   // { dg-error \"initializer for flexible array member\" }\n+} b;\n+\n+struct C\n+{\n+  int i;\n+  char a[];\n+  C (): a (\"def\") { }   // { dg-error \"initializer for flexible array member\" }\n+} c;\n+\n+struct D\n+{\n+  struct X { };\n+  int i;\n+  X x[] = { };   // { dg-error \"initializer for flexible array member\" }\n+} d;"}]}