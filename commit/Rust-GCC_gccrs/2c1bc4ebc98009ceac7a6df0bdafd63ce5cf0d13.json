{"sha": "2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxYmM0ZWJjOTgwMDljZWFjN2E2ZGYwYmRhZmQ2M2NlNWNmMGQxMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-12-28T18:46:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-28T18:46:54Z"}, "message": "stl_algo.h (count returning void, [...]): Move to...\n\n2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n\n        * include/bits/stl_algo.h (count returning void,\n        count_if returning void, __random_sample, random_sample,\n        random_sample_n, __is_heap, is_heap, is_sorted):  Move to...\n        * include/ext/algorithm:  ...here, new file.\n\t* include/Makefile.am (ext_headers):  Add new file.\n        * include/Makefile.in:  Regenerate.\n\t* testsuite/ext/headers.cc:  Include <ext/algorithm>.\n\nFrom-SVN: r48350", "tree": {"sha": "7d54b62e90bdb09c89531f4b651908c31e2ad56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d54b62e90bdb09c89531f4b651908c31e2ad56c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/comments", "author": null, "committer": null, "parents": [{"sha": "23d1aac4b58459f98f188344314fee09da6cecde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d1aac4b58459f98f188344314fee09da6cecde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d1aac4b58459f98f188344314fee09da6cecde"}], "stats": {"total": 823, "additions": 447, "deletions": 376}, "files": [{"sha": "f28b8cc227c25fe6a95187393353dca51267a2e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -1,3 +1,13 @@\n+2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_algo.h (count returning void,\n+\tcount_if returning void, __random_sample, random_sample,\n+\trandom_sample_n, __is_heap, is_heap, is_sorted):  Move to...\n+\t* include/ext/algorithm:  ...here, new file.\n+\t* include/Makefile.am (ext_headers):  Add new file.\n+\t* include/Makefile.in:  Regenerate.\n+\t* testsuite/ext/headers.cc:  Include <ext/algorithm>.\n+\n 2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n             Nathan Myers  <ncm@cantrip.org>\n "}, {"sha": "a54bfcb6c2b6700b160aa51f8c3d6d00b61d737f", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -172,6 +172,7 @@ backward_headers = \\\n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n+\t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/stl_rope.h \\"}, {"sha": "038ad09efe182e089a14a8c52318aacc29e1be43", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 89, "deletions": 92, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -1,6 +1,7 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.5 from Makefile.am.\n \n-# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+# Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -10,6 +11,7 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n+@SET_MAKE@\n \n SHELL = @SHELL@\n \n@@ -31,13 +33,9 @@ infodir = @infodir@\n mandir = @mandir@\n includedir = @includedir@\n oldincludedir = /usr/include\n-\n-DESTDIR =\n-\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n-\n top_builddir = ..\n \n ACLOCAL = @ACLOCAL@\n@@ -46,11 +44,11 @@ AUTOMAKE = @AUTOMAKE@\n AUTOHEADER = @AUTOHEADER@\n \n INSTALL = @INSTALL@\n-INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_HEADER = $(INSTALL_DATA)\n transform = @program_transform_name@\n-\n NORMAL_INSTALL = :\n PRE_INSTALL = :\n POST_INSTALL = :\n@@ -84,7 +82,6 @@ C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n-EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n@@ -108,7 +105,6 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n-MAKEINFO = @MAKEINFO@\n MKINSTALLDIRS = @MKINSTALLDIRS@\n MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n@@ -146,16 +142,23 @@ libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+\n+# Target includes for threads\n+glibcpp_thread_h = @glibcpp_thread_h@\n+\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+\n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n-# Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_builddir = @glibcpp_builddir@\n-\n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n@@ -299,6 +302,7 @@ backward_headers = \\\n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n+\t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/stl_rope.h \\\n@@ -408,114 +412,108 @@ thread_headers = \\\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n \tstamp-target stamp-thread \n \n-\n-# Target includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n+subdir = include\n+CONFIG_HEADER = $(top_builddir)/config.h\n+CONFIG_CLEAN_FILES =\n+depcomp =\n+DIST_SOURCES =\n+all: all-am\n \n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n-gxx_include_dir = @gxx_include_dir@\n-CONFIG_HEADER = ../config.h\n-CONFIG_CLEAN_FILES = \n-DIST_COMMON =  Makefile.am Makefile.in\n-\n-\n-DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n-\n-TAR = gtar\n-GZIP_ENV = --best\n-all: all-redirect\n .SUFFIXES:\n-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n-\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus include/Makefile\n \n-Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n \n+distclean-libtool:\n+\t-rm -f libtool\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)\n+\tcd $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --cygnus  include/Makefile\n+Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) && \\\n+\t  CONFIG_HEADERS= CONFIG_LINKS= \\\n+\t  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status\n+uninstall-info-am:\n tags: TAGS\n TAGS:\n \n-\n-distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n-\n-subdir = include\n-\n-distdir: $(DISTFILES)\n-\t@for file in $(DISTFILES); do \\\n-\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n-\t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n-\t  else \\\n-\t    test -f $(distdir)/$$file \\\n-\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n-\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n-\t  fi; \\\n-\tdone\n-info-am:\n-info: info-am\n-dvi-am:\n-dvi: dvi-am\n check-am:\n check: check-am\n-installcheck-am:\n-installcheck: installcheck-am\n-install-info-am: \n-install-info: install-info-am\n-install-exec-am:\n-install-exec: install-exec-am\n+all-am: Makefile all-local\n \n-install-data-am: install-data-local\n-install-data: install-data-am\n+installdirs:\n \n-install-am: all-am\n-\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n install: install-am\n-uninstall-am:\n+install-exec: install-exec-am\n+install-data: install-data-am\n uninstall: uninstall-am\n-all-am: Makefile all-local\n-all-redirect: all-am\n-install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n-installdirs:\n \n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n \n+installcheck: installcheck-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n mostlyclean-generic:\n \n clean-generic:\n \n distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n-\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-generic\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am\n \n-mostlyclean: mostlyclean-am\n+clean-am: clean-generic clean-libtool mostlyclean-am\n \n-clean-am:  clean-generic mostlyclean-am\n+distclean: distclean-am\n \n-clean: clean-am\n+distclean-am: clean-am distclean-generic distclean-libtool\n \n-distclean-am:  distclean-generic clean-am\n-\t-rm -f libtool\n+dvi: dvi-am\n \n-distclean: distclean-am\n+dvi-am:\n \n-maintainer-clean-am:  maintainer-clean-generic distclean-am\n-\t@echo \"This command is intended for maintainers to use;\"\n-\t@echo \"it deletes files that may require special tools to rebuild.\"\n+info: info-am\n+\n+info-am:\n+\n+install-data-am: install-data-local\n+\n+install-exec-am:\n+\n+install-info:\n+\n+install-man:\n+\n+installcheck-am:\n \n maintainer-clean: maintainer-clean-am\n \n-.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n-installcheck-am installcheck install-info-am install-info \\\n-install-exec-am install-exec install-data-local install-data-am \\\n-install-data install-am install uninstall-am uninstall all-local \\\n-all-redirect all-am all installdirs mostlyclean-generic \\\n-distclean-generic clean-generic maintainer-clean-generic clean \\\n-mostlyclean distclean maintainer-clean\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n+\n+uninstall-am:\n+\n+.PHONY: all all-am all-local check check-am clean clean-generic \\\n+\tclean-libtool distclean distclean-generic distclean-libtool dvi \\\n+\tdvi-am info info-am install install-am install-data \\\n+\tinstall-data-am install-data-local install-exec install-exec-am \\\n+\tinstall-info install-info-am install-man install-strip \\\n+\tinstallcheck installcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n+\tmostlyclean-libtool uninstall uninstall-am uninstall-info-am\n \n \n # Here are the rules for building the headers\n@@ -622,7 +620,6 @@ install-data-local:\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}\n-\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "1bcd98f6c40ff879f167da1d34aa7c1368dd3f48", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 284, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -292,42 +292,7 @@ namespace std\n       return __last;\n     }\n \n-  // count and count_if.  There are two version of each, one whose return type\n-  // type is void and one (present only if we have partial specialization)\n-  // whose return type is iterator_traits<_InputIter>::difference_type.  The\n-  // C++ standard only has the latter version, but the former, which was present\n-  // in the HP STL, is retained for backward compatibility.\n-\n-  template<typename _InputIter, typename _Tp, typename _Size>\n-    void\n-    count(_InputIter __first, _InputIter __last,\n-\t  const _Tp& __value,\n-\t  _Size& __n)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter>::value_type >)\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n-      for ( ; __first != __last; ++__first)\n-\tif (*__first == __value)\n-\t  ++__n;\n-    }\n-\n-  template<typename _InputIter, typename _Predicate, typename _Size>\n-    void\n-    count_if(_InputIter __first, _InputIter __last,\n-\t     _Predicate __pred,\n-\t     _Size& __n)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>)\n-      for ( ; __first != __last; ++__first)\n-\tif (__pred(*__first))\n-\t  ++__n;\n-    }\n+  // count and count_if.\n \n   template<typename _InputIter, typename _Tp>\n     typename iterator_traits<_InputIter>::difference_type\n@@ -1177,146 +1142,6 @@ __result, __binary_pred, _IterType());\n \titer_swap(__i, __first + __rand((__i - __first) + 1));\n     }\n \n-  // random_sample and random_sample_n (extensions, not part of the standard).\n-\n-  template<typename _ForwardIter, typename _OutputIter, typename _Distance>\n-    _OutputIter\n-    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n-                    _OutputIter __out, const _Distance __n)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n-\n-      _Distance __remaining = distance(__first, __last);\n-      _Distance __m = min(__n, __remaining);\n-\n-      while (__m > 0) {\n-\tif (__random_number(__remaining) < __m) {\n-\t      *__out = *__first;\n-\t      ++__out;\n-\t      --__m;\n-\t}\n-\n-\t--__remaining;\n-\t++__first;\n-      }\n-      return __out;\n-    }\n-\n-  template<typename _ForwardIter, typename _OutputIter, typename _Distance,\n-\t   typename _RandomNumberGenerator>\n-    _OutputIter\n-    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n-                   _OutputIter __out, const _Distance __n, \n-\t\t   _RandomNumberGenerator& __rand)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n-      __glibcpp_function_requires(_UnaryFunctionConcept<\n-\t\t_RandomNumberGenerator, _Distance, _Distance>)\n-\n-      _Distance __remaining = distance(__first, __last);\n-      _Distance __m = min(__n, __remaining);\n-\n-      while (__m > 0) {\n-\tif (__rand(__remaining) < __m) {\n-\t      *__out = *__first;\n-\t      ++__out;\n-\t      --__m;\n-\t}\n-\n-\t--__remaining;\n-\t++__first;\n-      }\n-      return __out;\n-    }\n-\n-  template<typename _InputIter, typename _RandomAccessIter, typename _Distance>\n-    _RandomAccessIter\n-    __random_sample(_InputIter __first, _InputIter __last,\n-\t\t    _RandomAccessIter __out,\n-\t\t    const _Distance __n)\n-    {\n-      _Distance __m = 0;\n-      _Distance __t = __n;\n-      for ( ; __first != __last && __m < __n; ++__m, ++__first) \n-\t__out[__m] = *__first;\n-\n-      while (__first != __last) {\n-\t++__t;\n-\t_Distance __M = __random_number(__t);\n-\tif (__M < __n)\n-\t  __out[__M] = *__first;\n-\t++__first;\n-      }\n-\n-      return __out + __m;\n-    }\n-\n-  template<typename _InputIter, typename _RandomAccessIter,\n-\t   typename _RandomNumberGenerator, typename _Distance>\n-    _RandomAccessIter\n-    __random_sample(_InputIter __first, _InputIter __last,\n-\t\t    _RandomAccessIter __out,\n-\t\t    _RandomNumberGenerator& __rand,\n-\t\t    const _Distance __n)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_UnaryFunctionConcept<\n-\t    _RandomNumberGenerator, _Distance, _Distance>)\n-\n-      _Distance __m = 0;\n-      _Distance __t = __n;\n-      for ( ; __first != __last && __m < __n; ++__m, ++__first)\n-\t__out[__m] = *__first;\n-\n-      while (__first != __last) {\n-\t++__t;\n-\t_Distance __M = __rand(__t);\n-\tif (__M < __n)\n-\t  __out[__M] = *__first;\n-\t++__first;\n-      }\n-\n-      return __out + __m;\n-    }\n-\n-  template<typename _InputIter, typename _RandomAccessIter>\n-    inline _RandomAccessIter\n-    random_sample(_InputIter __first, _InputIter __last,\n-\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last) \n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>)\n-\n-      return __random_sample(__first, __last,\n-\t\t\t     __out_first, __out_last - __out_first);\n-    }\n-\n-\n-  template<typename _InputIter, typename _RandomAccessIter, \n-\t   typename _RandomNumberGenerator>\n-    inline _RandomAccessIter\n-    random_sample(_InputIter __first, _InputIter __last,\n-\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last,\n-\t\t  _RandomNumberGenerator& __rand) \n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>)\n-\n-      return __random_sample(__first, __last,\n-\t\t\t     __out_first, __rand,\n-\t\t\t     __out_last - __out_first);\n-    }\n-\n   // partition, stable_partition, and their auxiliary functions\n \n   template<typename _ForwardIter, typename _Predicate>\n@@ -3491,114 +3316,6 @@ __result, __binary_pred, _IterType());\n \t\t\t__comp);\n     }\n \n-  // is_heap, a predicate testing whether or not a range is\n-  // a heap.  This function is an extension, not part of the C++\n-  // standard.\n-\n-  template<typename _RandomAccessIter, typename _Distance>\n-    bool\n-    __is_heap(_RandomAccessIter __first, _Distance __n)\n-    {\n-      _Distance __parent = 0;\n-      for (_Distance __child = 1; __child < __n; ++__child) {\n-\tif (__first[__parent] < __first[__child]) \n-\t  return false;\n-\tif ((__child & 1) == 0)\n-\t  ++__parent;\n-      }\n-      return true;\n-    }\n-\n-  template<typename _RandomAccessIter, typename _Distance,\n-           typename _StrictWeakOrdering>\n-    bool\n-    __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,\n-\t      _Distance __n)\n-    {\n-      _Distance __parent = 0;\n-      for (_Distance __child = 1; __child < __n; ++__child) {\n-\tif (__comp(__first[__parent], __first[__child]))\n-\t  return false;\n-\tif ((__child & 1) == 0)\n-\t  ++__parent;\n-      }\n-      return true;\n-    }\n-\n-  template<typename _RandomAccessIter>\n-    inline bool\n-    is_heap(_RandomAccessIter __first, _RandomAccessIter __last)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n-\n-      return __is_heap(__first, __last - __first);\n-    }\n-\n-\n-  template<typename _RandomAccessIter, typename _StrictWeakOrdering>\n-    inline bool\n-    is_heap(_RandomAccessIter __first, _RandomAccessIter __last,\n-\t    _StrictWeakOrdering __comp)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_RandomAccessIter>::value_type, \n-\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n-\n-      return __is_heap(__first, __comp, __last - __first);\n-    }\n-\n-  // is_sorted, a predicated testing whether a range is sorted in\n-  // nondescending order.  This is an extension, not part of the C++\n-  // standard.\n-\n-  template<typename _ForwardIter>\n-    bool\n-    is_sorted(_ForwardIter __first, _ForwardIter __last)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>)\n-\n-      if (__first == __last)\n-\treturn true;\n-\n-      _ForwardIter __next = __first;\n-      for (++__next; __next != __last; __first = __next, ++__next) {\n-\tif (*__next < *__first)\n-\t  return false;\n-      }\n-\n-      return true;\n-    }\n-\n-  template<typename _ForwardIter, typename _StrictWeakOrdering>\n-    bool\n-    is_sorted(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_ForwardIter>::value_type, \n-\t    typename iterator_traits<_ForwardIter>::value_type>)\n-\n-      if (__first == __last)\n-\treturn true;\n-\n-      _ForwardIter __next = __first;\n-      for (++__next; __next != __last; __first = __next, ++__next) {\n-\tif (__comp(*__next, *__first))\n-\t  return false;\n-      }\n-\n-      return true;\n-    }\n-\n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_ALGO_H */"}, {"sha": "929351eda5f343df538c26864418afea4605be29", "filename": "libstdc++-v3/include/ext/algorithm", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -0,0 +1,345 @@\n+// Algorithm extensions -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+#ifndef _EXT_ALGORITHM\n+#define _EXT_ALGORITHM\n+\n+#include <bits/std_algorithm.h>\n+\n+namespace __gnu_cxx\n+{\n+  // count and count_if: this version, whose return type is void, was present\n+  // in the HP STL, and is retained as an extension for backward compatibility.\n+\n+  template<typename _InputIter, typename _Tp, typename _Size>\n+    void\n+    count(_InputIter __first, _InputIter __last,\n+\t  const _Tp& __value,\n+\t  _Size& __n)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_EqualityComparableConcept<\n+\t    typename std::iterator_traits<_InputIter>::value_type >)\n+      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n+      for ( ; __first != __last; ++__first)\n+\tif (*__first == __value)\n+\t  ++__n;\n+    }\n+\n+  template<typename _InputIter, typename _Predicate, typename _Size>\n+    void\n+    count_if(_InputIter __first, _InputIter __last,\n+\t     _Predicate __pred,\n+\t     _Size& __n)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+\t    typename std::iterator_traits<_InputIter>::value_type>)\n+      for ( ; __first != __last; ++__first)\n+\tif (__pred(*__first))\n+\t  ++__n;\n+    }\n+\n+  // random_sample and random_sample_n (extensions, not part of the standard).\n+\n+  template<typename _ForwardIter, typename _OutputIter, typename _Distance>\n+    _OutputIter\n+    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n+                    _OutputIter __out, const _Distance __n)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n+\t\ttypename std::iterator_traits<_ForwardIter>::value_type>)\n+\n+      _Distance __remaining = std::distance(__first, __last);\n+      _Distance __m = std::min(__n, __remaining);\n+\n+      while (__m > 0) {\n+\tif (std::__random_number(__remaining) < __m) {\n+\t      *__out = *__first;\n+\t      ++__out;\n+\t      --__m;\n+\t}\n+\n+\t--__remaining;\n+\t++__first;\n+      }\n+      return __out;\n+    }\n+\n+  template<typename _ForwardIter, typename _OutputIter, typename _Distance,\n+\t   typename _RandomNumberGenerator>\n+    _OutputIter\n+    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n+                   _OutputIter __out, const _Distance __n, \n+\t\t   _RandomNumberGenerator& __rand)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n+\t\ttypename std::iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_UnaryFunctionConcept<\n+\t\t_RandomNumberGenerator, _Distance, _Distance>)\n+\n+      _Distance __remaining = std::distance(__first, __last);\n+      _Distance __m = std::min(__n, __remaining);\n+\n+      while (__m > 0) {\n+\tif (__rand(__remaining) < __m) {\n+\t      *__out = *__first;\n+\t      ++__out;\n+\t      --__m;\n+\t}\n+\n+\t--__remaining;\n+\t++__first;\n+      }\n+      return __out;\n+    }\n+\n+  template<typename _InputIter, typename _RandomAccessIter, typename _Distance>\n+    _RandomAccessIter\n+    __random_sample(_InputIter __first, _InputIter __last,\n+\t\t    _RandomAccessIter __out,\n+\t\t    const _Distance __n)\n+    {\n+      _Distance __m = 0;\n+      _Distance __t = __n;\n+      for ( ; __first != __last && __m < __n; ++__m, ++__first) \n+\t__out[__m] = *__first;\n+\n+      while (__first != __last) {\n+\t++__t;\n+\t_Distance __M = std::__random_number(__t);\n+\tif (__M < __n)\n+\t  __out[__M] = *__first;\n+\t++__first;\n+      }\n+\n+      return __out + __m;\n+    }\n+\n+  template<typename _InputIter, typename _RandomAccessIter,\n+\t   typename _RandomNumberGenerator, typename _Distance>\n+    _RandomAccessIter\n+    __random_sample(_InputIter __first, _InputIter __last,\n+\t\t    _RandomAccessIter __out,\n+\t\t    _RandomNumberGenerator& __rand,\n+\t\t    const _Distance __n)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_UnaryFunctionConcept<\n+\t    _RandomNumberGenerator, _Distance, _Distance>)\n+\n+      _Distance __m = 0;\n+      _Distance __t = __n;\n+      for ( ; __first != __last && __m < __n; ++__m, ++__first)\n+\t__out[__m] = *__first;\n+\n+      while (__first != __last) {\n+\t++__t;\n+\t_Distance __M = __rand(__t);\n+\tif (__M < __n)\n+\t  __out[__M] = *__first;\n+\t++__first;\n+      }\n+\n+      return __out + __m;\n+    }\n+\n+  template<typename _InputIter, typename _RandomAccessIter>\n+    inline _RandomAccessIter\n+    random_sample(_InputIter __first, _InputIter __last,\n+\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last) \n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+\t    _RandomAccessIter>)\n+\n+      return __random_sample(__first, __last,\n+\t\t\t     __out_first, __out_last - __out_first);\n+    }\n+\n+  template<typename _InputIter, typename _RandomAccessIter, \n+\t   typename _RandomNumberGenerator>\n+    inline _RandomAccessIter\n+    random_sample(_InputIter __first, _InputIter __last,\n+\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last,\n+\t\t  _RandomNumberGenerator& __rand) \n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+\t    _RandomAccessIter>)\n+\n+      return __random_sample(__first, __last,\n+\t\t\t     __out_first, __rand,\n+\t\t\t     __out_last - __out_first);\n+    }\n+  \n+  // is_heap, a predicate testing whether or not a range is\n+  // a heap.  This function is an extension, not part of the C++\n+  // standard.\n+\n+  template<typename _RandomAccessIter, typename _Distance>\n+    bool\n+    __is_heap(_RandomAccessIter __first, _Distance __n)\n+    {\n+      _Distance __parent = 0;\n+      for (_Distance __child = 1; __child < __n; ++__child) {\n+\tif (__first[__parent] < __first[__child]) \n+\t  return false;\n+\tif ((__child & 1) == 0)\n+\t  ++__parent;\n+      }\n+      return true;\n+    }\n+\n+  template<typename _RandomAccessIter, typename _Distance,\n+           typename _StrictWeakOrdering>\n+    bool\n+    __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,\n+\t      _Distance __n)\n+    {\n+      _Distance __parent = 0;\n+      for (_Distance __child = 1; __child < __n; ++__child) {\n+\tif (__comp(__first[__parent], __first[__child]))\n+\t  return false;\n+\tif ((__child & 1) == 0)\n+\t  ++__parent;\n+      }\n+      return true;\n+    }\n+\n+  template<typename _RandomAccessIter>\n+    inline bool\n+    is_heap(_RandomAccessIter __first, _RandomAccessIter __last)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<\n+\t    typename std::iterator_traits<_RandomAccessIter>::value_type>)\n+\n+      return __is_heap(__first, __last - __first);\n+    }\n+\n+  template<typename _RandomAccessIter, typename _StrictWeakOrdering>\n+    inline bool\n+    is_heap(_RandomAccessIter __first, _RandomAccessIter __last,\n+\t    _StrictWeakOrdering __comp)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n+\t    typename std::iterator_traits<_RandomAccessIter>::value_type, \n+\t    typename std::iterator_traits<_RandomAccessIter>::value_type>)\n+\n+      return __is_heap(__first, __comp, __last - __first);\n+    }\n+\n+  // is_sorted, a predicated testing whether a range is sorted in\n+  // nondescending order.  This is an extension, not part of the C++\n+  // standard.\n+\n+  template<typename _ForwardIter>\n+    bool\n+    is_sorted(_ForwardIter __first, _ForwardIter __last)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<\n+\t    typename std::iterator_traits<_ForwardIter>::value_type>)\n+\n+      if (__first == __last)\n+\treturn true;\n+\n+      _ForwardIter __next = __first;\n+      for (++__next; __next != __last; __first = __next, ++__next) {\n+\tif (*__next < *__first)\n+\t  return false;\n+      }\n+\n+      return true;\n+    }\n+\n+  template<typename _ForwardIter, typename _StrictWeakOrdering>\n+    bool\n+    is_sorted(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n+\t    typename std::iterator_traits<_ForwardIter>::value_type, \n+\t    typename std::iterator_traits<_ForwardIter>::value_type>)\n+\n+      if (__first == __last)\n+\treturn true;\n+\n+      _ForwardIter __next = __first;\n+      for (++__next; __next != __last; __first = __next, ++__next) {\n+\tif (__comp(*__next, *__first))\n+\t  return false;\n+      }\n+\n+      return true;\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+#endif /* _EXT_ALGORITHM */"}, {"sha": "4bda2db02b0ff501feb7cf6618ac1b234fe90f34", "filename": "libstdc++-v3/testsuite/ext/headers.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc?ref=2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "patch": "@@ -23,6 +23,7 @@\n // This should include a list of all headers in the extension\n // subdirectory that are meant to be directly included.\n \n+#include <ext/algorithm>\n #include <ext/hash_map>\n #include <ext/hash_set>\n #include <ext/rope>"}]}