{"sha": "30a08286e67e3aee17347f8d02e8f868a995beb9", "node_id": "C_kwDOANBUbNoAKDMwYTA4Mjg2ZTY3ZTNhZWUxNzM0N2Y4ZDAyZThmODY4YTk5NWJlYjk", "commit": {"author": {"name": "YunQiang Su", "email": "yunqiang.su@cipunited.com", "date": "2021-10-11T10:42:39Z"}, "committer": {"name": "YunQiang Su", "email": "syq@debian.org", "date": "2021-12-07T02:01:23Z"}, "message": "MIPS: R6: load/store can process unaligned address\n\nMIPS release 6 requires the lw/ld/sw/sd can work with\nunaligned address, while it can be implemented by\nfull hardware or trap&emulate.\n\nSince it doesn't have to be fully done by hardware, we add a\npair of options -m(no-)unaligned-access. Kernels may need them.\n\ngcc/ChangeLog:\n\n\t* config/mips/mips.h (ISA_HAS_UNALIGNED_ACCESS, STRICT_ALIGNMENT):\n\t\tR6 can unaligned access.\n\t* config/mips/mips.md (movmisalign<mode>): Likewise.\n\t* config/mips/mips.opt: add -m(no-)unaligned-access\n\t* doc/invoke.texi: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/mips/mips.exp: add unaligned-access\n\t* gcc.target/mips/unaligned-2.c: New test.\n\t* gcc.target/mips/unaligned-3.c: New test.", "tree": {"sha": "3f72d4fda38abcffce68860861bfaa6040892f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f72d4fda38abcffce68860861bfaa6040892f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a08286e67e3aee17347f8d02e8f868a995beb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a08286e67e3aee17347f8d02e8f868a995beb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a08286e67e3aee17347f8d02e8f868a995beb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a08286e67e3aee17347f8d02e8f868a995beb9/comments", "author": null, "committer": {"login": "wzssyqa", "id": 163337, "node_id": "MDQ6VXNlcjE2MzMzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/163337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wzssyqa", "html_url": "https://github.com/wzssyqa", "followers_url": "https://api.github.com/users/wzssyqa/followers", "following_url": "https://api.github.com/users/wzssyqa/following{/other_user}", "gists_url": "https://api.github.com/users/wzssyqa/gists{/gist_id}", "starred_url": "https://api.github.com/users/wzssyqa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wzssyqa/subscriptions", "organizations_url": "https://api.github.com/users/wzssyqa/orgs", "repos_url": "https://api.github.com/users/wzssyqa/repos", "events_url": "https://api.github.com/users/wzssyqa/events{/privacy}", "received_events_url": "https://api.github.com/users/wzssyqa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9e6767939e9658260e2506e81ec32b37cba041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9e6767939e9658260e2506e81ec32b37cba041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9e6767939e9658260e2506e81ec32b37cba041"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "34490bfc2aedea11575de1c280f855c05170474a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -243,6 +243,10 @@ struct mips_cpu_info {\n \t\t\t\t && (mips_isa_rev >= 6 \\\n \t\t\t\t     || ISA_HAS_MSA))\n \n+/* ISA load/store instructions can handle unaligned address */\n+#define ISA_HAS_UNALIGNED_ACCESS (TARGET_UNALIGNED_ACCESS \\\n+\t\t\t\t && (mips_isa_rev >= 6))\n+\n /* The ISA compression flags that are currently in effect.  */\n #define TARGET_COMPRESSION (target_flags & (MASK_MIPS16 | MASK_MICROMIPS))\n \n@@ -1684,7 +1688,7 @@ FP_ASM_SPEC \"\\\n   (ISA_HAS_MSA ? BITS_PER_MSA_REG : LONG_DOUBLE_TYPE_SIZE)\n \n /* All accesses must be aligned.  */\n-#define STRICT_ALIGNMENT 1\n+#define STRICT_ALIGNMENT (!ISA_HAS_UNALIGNED_ACCESS)\n \n /* Define this if you wish to imitate the way many other C compilers\n    handle alignment of bitfields and the structures that contain"}, {"sha": "e35d57d9e8f9824182e3912993e937aac0314394", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -4459,6 +4459,16 @@\n   [(set_attr \"move_type\" \"store\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Unaligned direct access\n+(define_expand \"movmisalign<mode>\"\n+  [(set (match_operand:JOIN_MODE 0)\n+\t(match_operand:JOIN_MODE 1))]\n+  \"ISA_HAS_UNALIGNED_ACCESS\"\n+{\n+  if (mips_legitimize_move (<MODE>mode, operands[0], operands[1]))\n+    DONE;\n+})\n+\n ;; An instruction to calculate the high part of a 64-bit SYMBOL_ABSOLUTE.\n ;; The required value is:\n ;;"}, {"sha": "ebb4c616401b6da2027208be48c8705b7b3013e0", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -404,6 +404,10 @@ mtune=\n Target RejectNegative Joined Var(mips_tune_option) ToLower Enum(mips_arch_opt_value)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR.\n \n+munaligned-access\n+Target Var(TARGET_UNALIGNED_ACCESS) Init(1)\n+Generate code with unaligned load store, valid for MIPS R6.\n+\n muninit-const-in-rodata\n Target Var(TARGET_UNINIT_CONST_IN_RODATA)\n Put uninitialized constants in ROM (needs -membedded-data)."}, {"sha": "8a70adaeb28209614dfa1fa65a89dba7824579e2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -1079,6 +1079,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcheck-zero-division  -mno-check-zero-division @gol\n -mdivide-traps  -mdivide-breaks @gol\n -mload-store-pairs  -mno-load-store-pairs @gol\n+-munaligned-access  -mno-unaligned-access @gol\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n -mmad  -mno-mad  -mimadd  -mno-imadd  -mfused-madd  -mno-fused-madd  -nocpp @gol\n -mfix-24k  -mno-fix-24k @gol\n@@ -25731,6 +25732,15 @@ instructions to enable load/store bonding.  This option is enabled by\n default but only takes effect when the selected architecture is known\n to support bonding.\n \n+@item -munaligned-access\n+@itemx -mno-unaligned-access\n+@opindex munaligned-access\n+@opindex mno-unaligned-access\n+Enable (disable) direct unaligned access for MIPS Release 6.\n+MIPSr6 requires load/store unaligned-access support,\n+by hardware or trap&emulate.\n+So @option{-mno-unaligned-access} may be needed by kernel.\n+\n @item -mmemcpy\n @itemx -mno-memcpy\n @opindex mmemcpy"}, {"sha": "f76ab7adcec6e5f4dd9090b799e03b037e110e14", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -264,6 +264,7 @@ set mips_option_groups {\n     frame-header \"-mframe-header-opt|-mno-frame-header-opt\"\n     stack-protector \"-fstack-protector\"\n     stdlib \"REQUIRES_STDLIB\"\n+    unaligned-access \"-m(no-|)unaligned-access\"\n }\n \n for { set option 0 } { $option < 32 } { incr option } {"}, {"sha": "8679afac4000f03ec555136beb8840e513ad7504", "filename": "gcc/testsuite/gcc.target/mips/unaligned-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-2.c?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options \"isa_rev>=6 -mgp64\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsb\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsh\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlb\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlh\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tswl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tswr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlwl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlwr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsdl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsdr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tldl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tldr\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tsw\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tlw\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsd\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tld\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\tnop\" } } */\n+\n+/* Test to make sure we produce the unaligned load/store for\n+   both 64bit and 32bits sized accesses.  */\n+\n+struct s\n+{\n+  char c;\n+  int i;\n+  long long l;\n+} __attribute__ ((packed)) s __attribute__((aligned(1) ));\n+\n+NOMIPS16 void\n+sd (long long l)\n+{\n+  s.l = l;\n+}\n+\n+NOMIPS16 long long\n+ld ()\n+{\n+  return s.l;\n+}\n+\n+NOMIPS16 void\n+sw (int i)\n+{\n+  s.i = i;\n+}\n+\n+NOMIPS16 int\n+lw ()\n+{\n+  return s.i;\n+}"}, {"sha": "d0fbe19de500a5ecb9b2e0c7383c2c43391db2ee", "filename": "gcc/testsuite/gcc.target/mips/unaligned-3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a08286e67e3aee17347f8d02e8f868a995beb9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-3.c?ref=30a08286e67e3aee17347f8d02e8f868a995beb9", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options \"isa_rev>=6 -mgp64 -mno-unaligned-access\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler-times \"\\tsb\\t\" 12 } } */\n+/* { dg-final { scan-assembler-times \"\\tlbu\\t\" 12 } } */\n+/* { dg-final { scan-assembler-not \"\\tsh\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlh\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsw\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlw\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tld\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tswl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tswr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlwl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tlwr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsdl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsdr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tldl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tldr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tnop\" } } */\n+\n+/* Test to make sure we produce the unaligned load/store for\n+   both 64bit and 32bits sized accesses.  */\n+\n+struct s\n+{\n+  char c;\n+  int i;\n+  long long l;\n+} __attribute__ ((packed)) s __attribute__((aligned(1) ));\n+\n+NOMIPS16 void\n+sd (long long l)\n+{\n+  s.l = l;\n+}\n+\n+NOMIPS16 long long\n+ld ()\n+{\n+  return s.l;\n+}\n+\n+NOMIPS16 void\n+sw (int i)\n+{\n+  s.i = i;\n+}\n+\n+NOMIPS16 int\n+lw ()\n+{\n+  return s.i;\n+}"}]}