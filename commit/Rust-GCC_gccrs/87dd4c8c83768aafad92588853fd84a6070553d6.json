{"sha": "87dd4c8c83768aafad92588853fd84a6070553d6", "node_id": "C_kwDOANBUbNoAKDg3ZGQ0YzhjODM3NjhhYWZhZDkyNTg4ODUzZmQ4NGE2MDcwNTUzZDY", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-07-29T16:05:38Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-08-02T18:18:57Z"}, "message": "Check equivalencies when calculating range on entry.\n\nWhen propagating on-entry values in the cache, checking if any equivalence\nhas a known value can improve results.  No new calculations are made.\nOnly queries via dominators which do not populate the cache are checked.\n\n\tPR tree-optimization/106474\n\tgcc/\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Query\n\trange of equivalences that may contribute to the range.\n\n\tgcc/testsuite/\n\t* g++.dg/pr106474.C: New.", "tree": {"sha": "4e9d2ab597312152acb922b7bac4db6ae585a33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9d2ab597312152acb922b7bac4db6ae585a33a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87dd4c8c83768aafad92588853fd84a6070553d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dd4c8c83768aafad92588853fd84a6070553d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87dd4c8c83768aafad92588853fd84a6070553d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dd4c8c83768aafad92588853fd84a6070553d6/comments", "author": null, "committer": null, "parents": [{"sha": "5df04a7aa837a13b0e14d269c37bd3871d86bf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df04a7aa837a13b0e14d269c37bd3871d86bf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df04a7aa837a13b0e14d269c37bd3871d86bf08"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "4782d47265eb56157056ef1c01afb74ffd190b63", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dd4c8c83768aafad92588853fd84a6070553d6/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dd4c8c83768aafad92588853fd84a6070553d6/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=87dd4c8c83768aafad92588853fd84a6070553d6", "patch": "@@ -1211,13 +1211,56 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n   // Check if a dominators can supply the range.\n   if (range_from_dom (block_result, name, bb, RFD_FILL))\n     {\n-      m_on_entry.set_bb_range (name, bb, block_result);\n       if (DEBUG_RANGE_CACHE)\n \t{\n \t  fprintf (dump_file, \"Filled from dominator! :  \");\n \t  block_result.dump (dump_file);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n+      // See if any equivalences can refine it.\n+      if (m_oracle)\n+\t{\n+\t  unsigned i;\n+\t  bitmap_iterator bi;\n+\t  // Query equivalences in read-only mode.\n+\t  const_bitmap equiv = m_oracle->equiv_set (name, bb);\n+\t  EXECUTE_IF_SET_IN_BITMAP (equiv, 0, i, bi)\n+\t    {\n+\t      if (i == SSA_NAME_VERSION (name))\n+\t\tcontinue;\n+\t      tree equiv_name = ssa_name (i);\n+\t      basic_block equiv_bb = gimple_bb (SSA_NAME_DEF_STMT (equiv_name));\n+\n+\t      // Check if the equiv has any ranges calculated.\n+\t      if (!m_gori.has_edge_range_p (equiv_name))\n+\t\tcontinue;\n+\n+\t      // Check if the equiv definition dominates this block\n+\t      if (equiv_bb == bb ||\n+\t\t  (equiv_bb && !dominated_by_p (CDI_DOMINATORS, bb, equiv_bb)))\n+\t\tcontinue;\n+\n+\t      Value_Range equiv_range (TREE_TYPE (equiv_name));\n+\t      if (range_from_dom (equiv_range, equiv_name, bb, RFD_READ_ONLY))\n+\t\t{\n+\t\t  if (block_result.intersect (equiv_range))\n+\t\t    {\n+\t\t      if (DEBUG_RANGE_CACHE)\n+\t\t\t{\n+\t\t\t  fprintf (dump_file, \"Equivalence update! :  \");\n+\t\t\t  print_generic_expr (dump_file, equiv_name, TDF_SLIM);\n+\t\t\t  fprintf (dump_file, \"had range  :  \");\n+\t\t\t  equiv_range.dump (dump_file);\n+\t\t\t  fprintf (dump_file, \" refining range to :\");\n+\t\t\t  block_result.dump (dump_file);\n+\t\t\t  fprintf (dump_file, \"\\n\");\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+\n+      m_on_entry.set_bb_range (name, bb, block_result);\n       gcc_checking_assert (m_workback.length () == 0);\n       return;\n     }"}, {"sha": "6cd37a20643161365cbc6975d8d39fe98271d16f", "filename": "gcc/testsuite/g++.dg/pr106474.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dd4c8c83768aafad92588853fd84a6070553d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106474.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dd4c8c83768aafad92588853fd84a6070553d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106474.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106474.C?ref=87dd4c8c83768aafad92588853fd84a6070553d6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp \" } */\n+\n+void foo();\n+static void __attribute__ ((noinline)) DCEMarker0_() {foo ();}\n+\n+void f(bool s, bool c) {\n+    if ((!c == !s) && !c) {\n+        if (s) {\n+            DCEMarker0_();\n+        }\n+    }\n+}\n+\n+// With equivalences, vrp should be able to remove all IFs.\n+/* { dg-final { scan-tree-dump-not \"goto\" \"evrp\" } } */"}]}