{"sha": "53bbb42e578a30ce8203879494d1f8521d022a7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiYmI0MmU1NzhhMzBjZTgyMDM4Nzk0OTRkMWY4NTIxZDAyMmE3ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-12-07T00:31:58Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-12-07T00:31:58Z"}, "message": "re PR java/25283 (gcj generates invalid signature)\n\n\tPR java/25283:\n\t* parse.y (patch_new_array_init): Revert previous patch.\n\t(lookup_method_invoke): Use size-less array type when creating an\n\tanonymous constructor.\n\nFrom-SVN: r108143", "tree": {"sha": "e8092dac2a4bf9eb20a38a60a6bc40d0ff9431b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8092dac2a4bf9eb20a38a60a6bc40d0ff9431b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53bbb42e578a30ce8203879494d1f8521d022a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bbb42e578a30ce8203879494d1f8521d022a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53bbb42e578a30ce8203879494d1f8521d022a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bbb42e578a30ce8203879494d1f8521d022a7d/comments", "author": null, "committer": null, "parents": [{"sha": "67c4e19e47c1a4a6776c7d379e53c49bfe47a9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c4e19e47c1a4a6776c7d379e53c49bfe47a9da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c4e19e47c1a4a6776c7d379e53c49bfe47a9da"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "08075ac913985e146352a5ba6b0d3b711de4cfe7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bbb42e578a30ce8203879494d1f8521d022a7d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bbb42e578a30ce8203879494d1f8521d022a7d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=53bbb42e578a30ce8203879494d1f8521d022a7d", "patch": "@@ -1,3 +1,10 @@\n+2005-12-06  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/25283:\n+\t* parse.y (patch_new_array_init): Revert previous patch.\n+\t(lookup_method_invoke): Use size-less array type when creating an\n+\tanonymous constructor.\n+\n 2005-12-05  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (patch_new_array_init): Don't set length on array."}, {"sha": "056feeaa2c66c46eabee6d2d97c31de5a1fd5c23", "filename": "gcc/java/parse.y", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bbb42e578a30ce8203879494d1f8521d022a7d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bbb42e578a30ce8203879494d1f8521d022a7d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=53bbb42e578a30ce8203879494d1f8521d022a7d", "patch": "@@ -11204,6 +11204,17 @@ lookup_method_invoke (int lc, tree cl, tree class, tree name, tree arg_list)\n       /* And promoted */\n       if (TREE_CODE (current_arg) == RECORD_TYPE)\n         current_arg = promote_type (current_arg);\n+      /* If we're building an anonymous constructor call, and one of\n+\t the arguments has array type, cast it to a size-less array\n+\t type.  This prevents us from getting a strange gcj-specific\n+\t \"sized array\" signature in the constructor's signature.  */\n+      if (lc && ANONYMOUS_CLASS_P (class)\n+\t  && TREE_CODE (current_arg) == POINTER_TYPE\n+\t  && TYPE_ARRAY_P (TREE_TYPE (current_arg)))\n+\t{\n+\t  tree elt = TYPE_ARRAY_ELEMENT (TREE_TYPE (current_arg));\n+\t  current_arg = build_pointer_type (build_java_array_type (elt, -1));\n+\t}\n       atl = tree_cons (NULL_TREE, current_arg, atl);\n     }\n \n@@ -14857,12 +14868,8 @@ patch_new_array_init (tree type, tree node)\n \n   /* Create a new type. We can't reuse the one we have here by\n      patching its dimension because it originally is of dimension -1\n-     hence reused by gcc. This would prevent triangular arrays.\n-     Note that we don't pass the length here.  If we do that then the\n-     length will end up in the signature of this type, and hence in\n-     the signature of the anonymous constructor -- but this is not a\n-     valid java signature.  */\n-  type = build_java_array_type (element_type, -1);\n+     hence reused by gcc. This would prevent triangular arrays. */\n+  type = build_java_array_type (element_type, length);\n   TREE_TYPE (init) = TREE_TYPE (TREE_CHAIN (TREE_CHAIN (TYPE_FIELDS (type))));\n   TREE_TYPE (node) = promote_type (type);\n   TREE_CONSTANT (init) = all_constant;"}]}