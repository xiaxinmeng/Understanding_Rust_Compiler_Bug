{"sha": "f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2NmE4Y2RmNDhiZDAxOTZjZmNmOTFlNWU4Y2QwZTJiNDY0MDlkOA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T15:08:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T15:09:40Z"}, "message": "[ARM][GCC][2/2x]: MVE intrinsics with binary operands.\n\nThis patch supports following MVE ACLE intrinsics with binary operands.\n\nvcvtq_n_s16_f16, vcvtq_n_s32_f32, vcvtq_n_u16_f16, vcvtq_n_u32_f32, vcreateq_u8, vcreateq_u16, vcreateq_u32, vcreateq_u64, vcreateq_s8, vcreateq_s16, vcreateq_s32, vcreateq_s64, vshrq_n_s8, vshrq_n_s16, vshrq_n_s32, vshrq_n_u8, vshrq_n_u16, vshrq_n_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nIn this patch new constraints \"Rb\" and \"Rf\" are added, which checks the constant is with in the range of 1 to 8 and 1 to 32 respectively.\n\nAlso a new predicates \"mve_imm_8\" and \"mve_imm_32\" are added, to check the the matching constraint Rb and Rf respectively.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (BINOP_UNONE_UNONE_IMM_QUALIFIERS): Define\n\tqualifier for binary operands.\n\t(BINOP_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(BINOP_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vcvtq_n_s16_f16): Define macro.\n\t(vcvtq_n_s32_f32): Likewise.\n\t(vcvtq_n_u16_f16): Likewise.\n\t(vcvtq_n_u32_f32): Likewise.\n\t(vcreateq_u8): Likewise.\n\t(vcreateq_u16): Likewise.\n\t(vcreateq_u32): Likewise.\n\t(vcreateq_u64): Likewise.\n\t(vcreateq_s8): Likewise.\n\t(vcreateq_s16): Likewise.\n\t(vcreateq_s32): Likewise.\n\t(vcreateq_s64): Likewise.\n\t(vshrq_n_s8): Likewise.\n\t(vshrq_n_s16): Likewise.\n\t(vshrq_n_s32): Likewise.\n\t(vshrq_n_u8): Likewise.\n\t(vshrq_n_u16): Likewise.\n\t(vshrq_n_u32): Likewise.\n\t(__arm_vcreateq_u8): Define intrinsic.\n\t(__arm_vcreateq_u16): Likewise.\n\t(__arm_vcreateq_u32): Likewise.\n\t(__arm_vcreateq_u64): Likewise.\n\t(__arm_vcreateq_s8): Likewise.\n\t(__arm_vcreateq_s16): Likewise.\n\t(__arm_vcreateq_s32): Likewise.\n\t(__arm_vcreateq_s64): Likewise.\n\t(__arm_vshrq_n_s8): Likewise.\n\t(__arm_vshrq_n_s16): Likewise.\n\t(__arm_vshrq_n_s32): Likewise.\n\t(__arm_vshrq_n_u8): Likewise.\n\t(__arm_vshrq_n_u16): Likewise.\n\t(__arm_vshrq_n_u32): Likewise.\n\t(__arm_vcvtq_n_s16_f16): Likewise.\n\t(__arm_vcvtq_n_s32_f32): Likewise.\n\t(__arm_vcvtq_n_u16_f16): Likewise.\n\t(__arm_vcvtq_n_u32_f32): Likewise.\n\t(vshrq_n): Define polymorphic variant.\n\t* config/arm/arm_mve_builtins.def (BINOP_UNONE_UNONE_IMM_QUALIFIERS):\n\tUse it.\n\t(BINOP_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(BINOP_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n\t* config/arm/constraints.md (Rb): Define constraint to check constant is\n\tin the range of 1 to 8.\n\t(Rf): Define constraint to check constant is in the range of 1 to 32.\n\t* config/arm/mve.md (mve_vcreateq_<supf><mode>): Define RTL pattern.\n\t(mve_vshrq_n_<supf><mode>): Likewise.\n\t(mve_vcvtq_n_from_f_<supf><mode>): Likewise.\n\t* config/arm/predicates.md (mve_imm_8): Define predicate to check\n\tthe matching constraint Rb.\n\t(mve_imm_32): Define predicate to check the matching constraint Rf.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u8.c: Likewise.", "tree": {"sha": "605b2f5cac2d25db8c203c0f083dde8f830d789f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605b2f5cac2d25db8c203c0f083dde8f830d789f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887085be635101ae1fa16be8dcdbbe6b240b600b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887085be635101ae1fa16be8dcdbbe6b240b600b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887085be635101ae1fa16be8dcdbbe6b240b600b"}], "stats": {"total": 642, "additions": 638, "deletions": 4}, "files": [{"sha": "03312bd1c1aee6ff36c7f36a1987c372f93103b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -1,3 +1,62 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (BINOP_UNONE_UNONE_IMM_QUALIFIERS): Define\n+\tqualifier for binary operands.\n+\t(BINOP_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(BINOP_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vcvtq_n_s16_f16): Define macro.\n+\t(vcvtq_n_s32_f32): Likewise.\n+\t(vcvtq_n_u16_f16): Likewise.\n+\t(vcvtq_n_u32_f32): Likewise.\n+\t(vcreateq_u8): Likewise.\n+\t(vcreateq_u16): Likewise.\n+\t(vcreateq_u32): Likewise.\n+\t(vcreateq_u64): Likewise.\n+\t(vcreateq_s8): Likewise.\n+\t(vcreateq_s16): Likewise.\n+\t(vcreateq_s32): Likewise.\n+\t(vcreateq_s64): Likewise.\n+\t(vshrq_n_s8): Likewise.\n+\t(vshrq_n_s16): Likewise.\n+\t(vshrq_n_s32): Likewise.\n+\t(vshrq_n_u8): Likewise.\n+\t(vshrq_n_u16): Likewise.\n+\t(vshrq_n_u32): Likewise.\n+\t(__arm_vcreateq_u8): Define intrinsic.\n+\t(__arm_vcreateq_u16): Likewise.\n+\t(__arm_vcreateq_u32): Likewise.\n+\t(__arm_vcreateq_u64): Likewise.\n+\t(__arm_vcreateq_s8): Likewise.\n+\t(__arm_vcreateq_s16): Likewise.\n+\t(__arm_vcreateq_s32): Likewise.\n+\t(__arm_vcreateq_s64): Likewise.\n+\t(__arm_vshrq_n_s8): Likewise.\n+\t(__arm_vshrq_n_s16): Likewise.\n+\t(__arm_vshrq_n_s32): Likewise.\n+\t(__arm_vshrq_n_u8): Likewise.\n+\t(__arm_vshrq_n_u16): Likewise.\n+\t(__arm_vshrq_n_u32): Likewise.\n+\t(__arm_vcvtq_n_s16_f16): Likewise.\n+\t(__arm_vcvtq_n_s32_f32): Likewise.\n+\t(__arm_vcvtq_n_u16_f16): Likewise.\n+\t(__arm_vcvtq_n_u32_f32): Likewise.\n+\t(vshrq_n): Define polymorphic variant.\n+\t* config/arm/arm_mve_builtins.def (BINOP_UNONE_UNONE_IMM_QUALIFIERS):\n+\tUse it.\n+\t(BINOP_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(BINOP_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t* config/arm/constraints.md (Rb): Define constraint to check constant is\n+\tin the range of 1 to 8.\n+\t(Rf): Define constraint to check constant is in the range of 1 to 32.\n+\t* config/arm/mve.md (mve_vcreateq_<supf><mode>): Define RTL pattern.\n+\t(mve_vshrq_n_<supf><mode>): Likewise.\n+\t(mve_vcvtq_n_from_f_<supf><mode>): Likewise.\n+\t* config/arm/predicates.md (mve_imm_8): Define predicate to check\n+\tthe matching constraint Rb.\n+\t(mve_imm_32): Define predicate to check the matching constraint Rf.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "066a046c87cbe5f0542587c711e480fe9b774fc0", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -397,6 +397,24 @@ arm_binop_none_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_NONE_UNONE_UNONE_QUALIFIERS \\\n   (arm_binop_none_unone_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_unone_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate };\n+#define BINOP_UNONE_UNONE_IMM_QUALIFIERS \\\n+  (arm_binop_unone_unone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_unone_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned };\n+#define BINOP_UNONE_UNONE_UNONE_QUALIFIERS \\\n+  (arm_binop_unone_unone_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_unone_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_immediate };\n+#define BINOP_UNONE_NONE_IMM_QUALIFIERS \\\n+  (arm_binop_unone_none_imm_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "26787ba889b30c80d5f03027f753cbc83676da84", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -207,6 +207,24 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vcvtq_n_f32_u32(__a,  __imm6) __arm_vcvtq_n_f32_u32(__a,  __imm6)\n #define vcreateq_f16(__a, __b) __arm_vcreateq_f16(__a, __b)\n #define vcreateq_f32(__a, __b) __arm_vcreateq_f32(__a, __b)\n+#define vcvtq_n_s16_f16(__a,  __imm6) __arm_vcvtq_n_s16_f16(__a,  __imm6)\n+#define vcvtq_n_s32_f32(__a,  __imm6) __arm_vcvtq_n_s32_f32(__a,  __imm6)\n+#define vcvtq_n_u16_f16(__a,  __imm6) __arm_vcvtq_n_u16_f16(__a,  __imm6)\n+#define vcvtq_n_u32_f32(__a,  __imm6) __arm_vcvtq_n_u32_f32(__a,  __imm6)\n+#define vcreateq_u8(__a, __b) __arm_vcreateq_u8(__a, __b)\n+#define vcreateq_u16(__a, __b) __arm_vcreateq_u16(__a, __b)\n+#define vcreateq_u32(__a, __b) __arm_vcreateq_u32(__a, __b)\n+#define vcreateq_u64(__a, __b) __arm_vcreateq_u64(__a, __b)\n+#define vcreateq_s8(__a, __b) __arm_vcreateq_s8(__a, __b)\n+#define vcreateq_s16(__a, __b) __arm_vcreateq_s16(__a, __b)\n+#define vcreateq_s32(__a, __b) __arm_vcreateq_s32(__a, __b)\n+#define vcreateq_s64(__a, __b) __arm_vcreateq_s64(__a, __b)\n+#define vshrq_n_s8(__a,  __imm) __arm_vshrq_n_s8(__a,  __imm)\n+#define vshrq_n_s16(__a,  __imm) __arm_vshrq_n_s16(__a,  __imm)\n+#define vshrq_n_s32(__a,  __imm) __arm_vshrq_n_s32(__a,  __imm)\n+#define vshrq_n_u8(__a,  __imm) __arm_vshrq_n_u8(__a,  __imm)\n+#define vshrq_n_u16(__a,  __imm) __arm_vshrq_n_u16(__a,  __imm)\n+#define vshrq_n_u32(__a,  __imm) __arm_vshrq_n_u32(__a,  __imm)\n #endif\n \n __extension__ extern __inline void\n@@ -753,6 +771,104 @@ __arm_vpnot (mve_pred16_t __a)\n   return __builtin_mve_vpnothi (__a);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_u8 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_uv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_u16 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_uv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_u32 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_uv4si (__a, __b);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_u64 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_uv2di (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_s8 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_sv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_s16 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_sv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_s32 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_sv4si (__a, __b);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcreateq_s64 (uint64_t __a, uint64_t __b)\n+{\n+  return __builtin_mve_vcreateq_sv2di (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_s8 (int8x16_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_sv16qi (__a, __imm);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_s16 (int16x8_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_sv8hi (__a, __imm);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_s32 (int32x4_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_sv4si (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_u8 (uint8x16_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_uv16qi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_u16 (uint16x8_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_uv8hi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrq_n_u32 (uint32x4_t __a, const int __imm)\n+{\n+  return __builtin_mve_vshrq_n_uv4si (__a, __imm);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -1165,6 +1281,34 @@ __arm_vcreateq_f32 (uint64_t __a, uint64_t __b)\n   return __builtin_mve_vcreateq_fv4sf (__a, __b);\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_s16_f16 (float16x8_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_from_f_sv8hi (__a, __imm6);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_s32_f32 (float32x4_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_from_f_sv4si (__a, __imm6);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_u16_f16 (float16x8_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_from_f_uv8hi (__a, __imm6);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_n_u32_f32 (float32x4_t __a, const int __imm6)\n+{\n+  return __builtin_mve_vcvtq_n_from_f_uv4si (__a, __imm6);\n+}\n+\n #endif\n \n enum {\n@@ -1677,6 +1821,16 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int16x8_t]: __arm_vqnegq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t]: __arm_vqnegq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n \n+#define vshrq(p0,p1) __arm_vshrq(p0,p1)\n+#define __arm_vshrq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vshrq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vshrq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vshrq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vshrq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshrq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshrq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1));})\n+\n #endif /* MVE Floating point.  */\n \n #ifdef __cplusplus"}, {"sha": "b0a1e43ac21de364e93c36716591a555bdeff7fb", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -6,7 +6,7 @@\n \n     GCC is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published\n-    by the Free Software Foundation; either version 3, or  (at your\n+    by the Free Software Foundation; either version 3, or   (at your\n     option) any later version.\n \n     GCC is distributed in the hope that it will be useful, but WITHOUT\n@@ -81,3 +81,9 @@ VAR2 (BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n VAR2 (BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n VAR2 (BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_IMM, vcvtq_n_from_f_u, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_from_f_s, v8hi, v4si)\n+VAR4 (BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n+VAR4 (BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)"}, {"sha": "e3e202c8748aa3dcc98694660ee6676a78f22cdf", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -34,7 +34,7 @@\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, DN, Dm, Dl, DL, Do, Dv, Dy, Di,\n ;;\t\t\t Dt, Dp, Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n-;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd\n+;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd, Rf, Rb\n ;; in all states: Pf, Pg\n \n ;; The following memory constraints have been used:\n@@ -58,6 +58,16 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 16\")))\n \n+(define_constraint \"Rb\"\n+  \"@internal In Thumb-2 state a constant in range 1 to 8\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 8\")))\n+\n+(define_constraint \"Rf\"\n+  \"@internal In Thumb-2 state a constant in range 1 to 32\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 32\")))\n+\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n "}, {"sha": "af8b6544cea7b88c13a7925e47fed789eb393697", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -22,6 +22,7 @@\n (define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n (define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n (define_mode_iterator MVE_0 [V8HF V4SF])\n+(define_mode_iterator MVE_1 [V16QI V8HI V4SI V2DI])\n (define_mode_iterator MVE_3 [V16QI V8HI])\n (define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n (define_mode_iterator MVE_5 [V8HI V4SI])\n@@ -38,7 +39,8 @@\n \t\t\t VCVTPQ_U VCVTNQ_S VCVTNQ_U VCVTMQ_S VCVTMQ_U\n \t\t\t VADDLVQ_U VCTP8Q VCTP16Q VCTP32Q VCTP64Q VPNOT\n \t\t\t VCREATEQ_F VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U VBRSRQ_N_F\n-\t\t\t VSUBQ_N_F])\n+\t\t\t VSUBQ_N_F VCREATEQ_U VCREATEQ_S VSHRQ_N_S VSHRQ_N_U\n+\t\t\t VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -55,10 +57,16 @@\n \t\t       (VCVTNQ_U \"u\") (VCVTMQ_S \"s\") (VCVTMQ_U \"u\")\n \t\t       (VCLZQ_U \"u\") (VCLZQ_S \"s\") (VREV32Q_U \"u\")\n \t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")\n-\t\t       (VCVTQ_N_TO_F_S \"s\") (VCVTQ_N_TO_F_U \"u\")])\n+\t\t       (VCVTQ_N_TO_F_S \"s\") (VCVTQ_N_TO_F_U \"u\")\n+\t\t       (VCREATEQ_U \"u\") (VCREATEQ_S \"s\") (VSHRQ_N_S \"s\")\n+\t\t       (VSHRQ_N_U \"u\") (VCVTQ_N_FROM_F_S \"s\")\n+\t\t       (VCVTQ_N_FROM_F_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\")])\n+(define_mode_attr MVE_pred2 [(V16QI \"mve_imm_8\") (V8HI \"mve_imm_16\")\n+\t\t\t     (V4SI \"mve_imm_32\")])\n+(define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -79,6 +87,9 @@\n (define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n (define_int_iterator VCTPQ [VCTP8Q VCTP16Q VCTP32Q VCTP64Q])\n (define_int_iterator VCVTQ_N_TO_F [VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U])\n+(define_int_iterator VCREATEQ [VCREATEQ_U VCREATEQ_S])\n+(define_int_iterator VSHRQ_N [VSHRQ_N_S VSHRQ_N_U])\n+(define_int_iterator VCVTQ_N_FROM_F [VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -750,3 +761,48 @@\n   \"vmov %q0[2], %q0[0], %Q2, %Q1\\;vmov %q0[3], %q0[1], %R2, %R1\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcreateq_u, vcreateq_s])\n+;;\n+(define_insn \"mve_vcreateq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_1 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_1 [(match_operand:DI 1 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:DI 2 \"s_register_operand\" \"r\")]\n+\t VCREATEQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmov %q0[2], %q0[0], %Q2, %Q1\\;vmov %q0[3], %q0[1], %R2, %R1\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshrq_n_s, vshrq_n_u])\n+;;\n+(define_insn \"mve_vshrq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"<MVE_pred2>\" \"<MVE_constraint2>\")]\n+\t VSHRQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshr.<supf><V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtq_n_from_f_s, vcvtq_n_from_f_u])\n+;;\n+(define_insn \"mve_vcvtq_n_from_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"mve_imm_16\" \"Rd\")]\n+\t VCVTQ_N_FROM_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvt.<supf><V_sz_elem>.f<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "2f5d5a74d745acece22531ea41526243fe5eca7b", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -35,6 +35,14 @@\n (define_predicate \"mve_imm_16\"\n   (match_test \"satisfies_constraint_Rd (op)\"))\n \n+;; True for immediates in the range of 1 to 8 for MVE.\n+(define_predicate \"mve_imm_8\"\n+  (match_test \"satisfies_constraint_Rb (op)\"))\n+\n+;; True for immediates in the range of 1 to 32 for MVE.\n+(define_predicate \"mve_imm_32\"\n+  (match_test \"satisfies_constraint_Rf (op)\"))\n+\n ; Predicate for stack protector guard's address in\n ; stack_protect_combined_set_insn and stack_protect_combined_test_insn patterns\n (define_predicate \"guard_addr_operand\""}, {"sha": "fc581ef305880b6ea4af941b76c87a6cb7e403d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -1,3 +1,26 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_n_u8.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "e789a122b9edcfed8db3ea1e01c1a7188d670109", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "6983c7c266e6e4a5e852153097e93f1a249fa7f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "2016fad04e6fdfd30725ebfcd0c89f10392ea821", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "e6b36df9fb364a8bc9de1af900c0f557534aa70e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "bfb7f1b3740627f7da0daf67752caade70a2d26a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "2b1b19389376eff389047e5e7d8252b56485b18f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "e9b6dbc765f5ce952d72c2871c75489db4895332", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "4a487a0f2ae868776e62b582156e961caa58fd04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint64_t a, uint64_t b)\n+{\n+  return vcreateq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\"  }  } */"}, {"sha": "a220de3ab611cea9e72bfabba711fd943908f311", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s16_f16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtq_n_s16_f16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.s16.f16\"  }  } */"}, {"sha": "4bb1525b08f8347109e9129da52cf082d08d30d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_s32_f32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtq_n_s32_f32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.s32.f32\"  }  } */"}, {"sha": "25d8b0d947997e295fd736a0159de5385600a66e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u16_f16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtq_n_u16_f16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.u16.f16\"  }  } */"}, {"sha": "7a35093627a654e80c061bddee5ee1d8cbd295c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_n_u32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_n_u32_f32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtq_n_u32_f32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.u32.f32\"  }  } */"}, {"sha": "8b4cfa0f98b590742cb836ab37af4fc7ba4b411e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vshrq_n_s16 (a, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vshrq (a, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s16\"  }  } */"}, {"sha": "bf421a64bb31cd74ad16e71674f728385cb7ec3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vshrq_n_s32 (a, 32);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vshrq (a, 32);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s32\"  }  } */"}, {"sha": "a11218cc0828a1e84fe568a02d2e7830f09a9689", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_s8.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vshrq_n_s8 (a, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vshrq (a, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.s8\"  }  } */"}, {"sha": "a4a5439d5c2cd99fce6ec1234eaac77892481b8b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u16.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vshrq_n_u16 (a, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+  return vshrq (a, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u16\"  }  } */"}, {"sha": "d4630aaf07b7acdff7b5dbc1fd348bc06c102334", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u32.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vshrq_n_u32 (a, 32);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+  return vshrq (a, 32);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u32\"  }  } */"}, {"sha": "3a3345dc0135eb2acf3e414a080e610d49a4969e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_n_u8.c?ref=f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+  return vshrq_n_u8 (a, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+  return vshrq (a, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshr.u8\"  }  } */"}]}