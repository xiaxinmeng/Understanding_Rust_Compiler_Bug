{"sha": "41ade3399bd1ec9927be1bb818965831232eda4b", "node_id": "C_kwDOANBUbNoAKDQxYWRlMzM5OWJkMWVjOTkyN2JlMWJiODE4OTY1ODMxMjMyZWRhNGI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-23T13:52:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-23T16:22:02Z"}, "message": "tree-optimization/107569 - avoid wrecking earlier folding in FRE/PRE\n\nThe following avoids picking up dead code left over from folding\nduring FRE/PRE, effectively undoing propagations.\n\n\tPR tree-optimization/107569\n\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt):\n\tDo not push SSA names with zero uses as available leader.\n\t(process_bb): Likewise.\n\n\t* g++.dg/opt/pr107569.C: New testcase.", "tree": {"sha": "aa461d90bda457d9bde553ee06f28ef0962de892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa461d90bda457d9bde553ee06f28ef0962de892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41ade3399bd1ec9927be1bb818965831232eda4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ade3399bd1ec9927be1bb818965831232eda4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ade3399bd1ec9927be1bb818965831232eda4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ade3399bd1ec9927be1bb818965831232eda4b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25979b6761516b9039004385e08141e0925e1a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25979b6761516b9039004385e08141e0925e1a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25979b6761516b9039004385e08141e0925e1a17"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "e03941c78624507655ec457723b3d8ef603b21e2", "filename": "gcc/testsuite/g++.dg/opt/pr107569.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ade3399bd1ec9927be1bb818965831232eda4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr107569.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ade3399bd1ec9927be1bb818965831232eda4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr107569.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr107569.C?ref=41ade3399bd1ec9927be1bb818965831232eda4b", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++20 }\n+// { dg-options \"-O2 -fdump-tree-evrp -fdump-tree-vrp1\" }\n+\n+namespace std\n+{\n+  constexpr bool isfinite (float x) { return __builtin_isfinite (x); }\n+  constexpr bool isfinite (double x) { return __builtin_isfinite (x); }\n+  constexpr bool isfinite (long double x) { return __builtin_isfinite (x); }\n+}\n+\n+bool\n+foo (double x)\n+{\n+  if (!std::isfinite (x))\n+    __builtin_unreachable ();\n+\n+  return std::isfinite (x);\n+}\n+\n+bool\n+bar (double x)\n+{\n+  [[assume (std::isfinite (x))]];\n+  return std::isfinite (x);\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"vrp1\" } } */"}, {"sha": "6b8d38b270c7e7b2cabe6e520defdb83a3bf659f", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ade3399bd1ec9927be1bb818965831232eda4b/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ade3399bd1ec9927be1bb818965831232eda4b/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=41ade3399bd1ec9927be1bb818965831232eda4b", "patch": "@@ -7197,10 +7197,14 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n     }\n \n   /* Make new values available - for fully redundant LHS we\n-     continue with the next stmt above and skip this.  */\n-  def_operand_p defp;\n-  FOR_EACH_SSA_DEF_OPERAND (defp, stmt, iter, SSA_OP_DEF)\n-    eliminate_push_avail (b, DEF_FROM_PTR (defp));\n+     continue with the next stmt above and skip this.\n+     But avoid picking up dead defs.  */\n+  tree def;\n+  FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_DEF)\n+    if (! has_zero_uses (def)\n+\t|| (inserted_exprs\n+\t    && bitmap_bit_p (inserted_exprs, SSA_NAME_VERSION (def))))\n+      eliminate_push_avail (b, def);\n }\n \n /* Perform elimination for the basic-block B during the domwalk.  */\n@@ -8046,9 +8050,10 @@ process_bb (rpo_elim &avail, basic_block bb,\n \tavail.eliminate_stmt (bb, &gsi);\n       else\n \t/* If not eliminating, make all not already available defs\n-\t   available.  */\n+\t   available.  But avoid picking up dead defs.  */\n \tFOR_EACH_SSA_TREE_OPERAND (op, gsi_stmt (gsi), i, SSA_OP_DEF)\n-\t  if (! avail.eliminate_avail (bb, op))\n+\t  if (! has_zero_uses (op)\n+\t      && ! avail.eliminate_avail (bb, op))\n \t    avail.eliminate_push_avail (bb, op);\n     }\n "}]}