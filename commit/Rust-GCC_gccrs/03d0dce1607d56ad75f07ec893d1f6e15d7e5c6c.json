{"sha": "03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkMGRjZTE2MDdkNTZhZDc1ZjA3ZWM4OTNkMWY2ZTE1ZDdlNWM2Yw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2003-03-12T23:05:40Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2003-03-12T23:05:40Z"}, "message": "ia64.h (ASM_OUTPUT_XDATA_CHAR): Remove.\n\n\t* config/ia64/ia64.h (ASM_OUTPUT_XDATA_CHAR): Remove.\n\t(ASM_OUTPUT_XDATA_SHORT): Remove.\n\t(ASM_OUTPUT_XDATA_INT): Remove.\n\t(ASM_OUTPUT_XDATA_DOUBLE_INT): Remove.\n\t(ASM_OUTPUT_ADDR_DIFF_ELT): Handled 32 bit address diffs.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Handle 32 bit EH pointers.\n\t(CASE_VECTOR_MODE): Handle 32 bit pointers in case statement.\n\nFrom-SVN: r64271", "tree": {"sha": "1fd53104f0a8a381d2207f3b6719b22c3cd3065b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd53104f0a8a381d2207f3b6719b22c3cd3065b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c/comments", "author": null, "committer": null, "parents": [{"sha": "847311f4570e0182e9f9c4759fcffd7c4da07477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847311f4570e0182e9f9c4759fcffd7c4da07477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847311f4570e0182e9f9c4759fcffd7c4da07477"}], "stats": {"total": 79, "additions": 20, "deletions": 59}, "files": [{"sha": "9c9d2573384bf8ce1caf2655cde7202b24002ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "patch": "@@ -1,3 +1,13 @@\n+2003-03-12  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.h (ASM_OUTPUT_XDATA_CHAR): Remove.\n+\t(ASM_OUTPUT_XDATA_SHORT): Remove.\n+\t(ASM_OUTPUT_XDATA_INT): Remove.\n+\t(ASM_OUTPUT_XDATA_DOUBLE_INT): Remove.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Handled 32 bit address diffs.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Handle 32 bit EH pointers.\n+\t(CASE_VECTOR_MODE): Handle 32 bit pointers in case statement.\n+\n 2003-03-12  Andrew Lewycky  <andrew@mxc.ca>\n \n \tPR c++/7050"}, {"sha": "e813ab1e6d9f56b281ef6aaefcaa91346fd43a8b", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 10, "deletions": 59, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=03d0dce1607d56ad75f07ec893d1f6e15d7e5c6c", "patch": "@@ -1770,61 +1770,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-\f\n-/* Output of Data.  */\n-\n-/* This is how to output an assembler line defining a `char' constant\n-   to an xdata segment.  */\n-\n-#define ASM_OUTPUT_XDATA_CHAR(FILE, SECTION, VALUE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.xdata1\\t\\\"%s\\\", \", SECTION);\t\t\t\\\n-  output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* This is how to output an assembler line defining a `short' constant\n-   to an xdata segment.  */\n-\n-#define ASM_OUTPUT_XDATA_SHORT(FILE, SECTION, VALUE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.xdata2\\t\\\"%s\\\", \", SECTION);\t\t\t\\\n-  output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* This is how to output an assembler line defining an `int' constant\n-   to an xdata segment.  We also handle symbol output here.  */\n-\n-/* ??? For ILP32, also need to handle function addresses here.  */\n-\n-#define ASM_OUTPUT_XDATA_INT(FILE, SECTION, VALUE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.xdata4\\t\\\"%s\\\", \", SECTION);\t\t\t\\\n-  output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* This is how to output an assembler line defining a `long' constant\n-   to an xdata segment.  We also handle symbol output here.  */\n-\n-#define ASM_OUTPUT_XDATA_DOUBLE_INT(FILE, SECTION, VALUE)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int need_closing_paren = 0;\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.xdata8\\t\\\"%s\\\", \", SECTION);\t\t\t\\\n-  if (!(TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n-      && GET_CODE (VALUE) == SYMBOL_REF)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, SYMBOL_REF_FLAG (VALUE) ? \"@fptr(\" : \"@segrel(\");\t\\\n-      need_closing_paren = 1;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  output_addr_const (FILE, VALUE);\t\t\t\t\t\\\n-  if (need_closing_paren)\t\t\t\t\t\t\\\n-    fprintf (FILE, \")\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-\n \f\n /* Output of Uninitialized Variables.  */\n \n@@ -2086,8 +2031,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* ??? Depends on the pointer size.  */\n \n-#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL) \\\n-  fprintf (STREAM, \"\\tdata8 @pcrel(.L%d)\\n\", VALUE)\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+  if (TARGET_ILP32)\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\tdata4 @pcrel(.L%d)\\n\", VALUE);\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\tdata8 @pcrel(.L%d)\\n\", VALUE);\t\t\\\n+  } while (0)\n \n /* This is how to output an element of a case-vector that is absolute.\n    (Ia64 does not use such vectors, but we must define this macro anyway.)  */\n@@ -2106,7 +2056,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    true if the symbol may be affected by dynamic relocations.  */\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\\\n   (((CODE) == 1 ? DW_EH_PE_textrel : DW_EH_PE_datarel)\t\\\n-   | ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_udata8)\n+   | ((GLOBAL) ? DW_EH_PE_indirect : 0)\t\t\t\\\n+   | (TARGET_ILP32 ? DW_EH_PE_udata4 : DW_EH_PE_udata8))\n \n /* Handle special EH pointer encodings.  Absolute, pc-relative, and\n    indirect are handled automatically.  */\n@@ -2276,7 +2227,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* An alias for a machine mode name.  This is the machine mode that elements of\n    a jump-table should have.  */\n \n-#define CASE_VECTOR_MODE Pmode\n+#define CASE_VECTOR_MODE ptr_mode\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the"}]}