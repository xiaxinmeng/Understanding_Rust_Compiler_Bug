{"sha": "65727068eae667fd1ec4595c6ebcaceed029963f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MjcwNjhlYWU2NjdmZDFlYzQ1OTVjNmViY2FjZWVkMDI5OTYzZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-25T16:59:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-25T16:59:51Z"}, "message": "final.c (compute_alignments): Make it static.\n\n\t* final.c (compute_alignments): Make it static.\n\t* gcse.c (gcse_main, bypass_jumps): Likewise.\n\t* web.c (web_main): Likewise.\n\t* output.h: Remove the prototype for compute_alignments.\n\t* rtl.h: Remove the prototypes for web_main, gcse_main, and\n\tbypass_jumps.\n\nFrom-SVN: r109051", "tree": {"sha": "45ce0b16704506b682f3c11d643f3f48df97bee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ce0b16704506b682f3c11d643f3f48df97bee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65727068eae667fd1ec4595c6ebcaceed029963f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65727068eae667fd1ec4595c6ebcaceed029963f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65727068eae667fd1ec4595c6ebcaceed029963f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65727068eae667fd1ec4595c6ebcaceed029963f/comments", "author": null, "committer": null, "parents": [{"sha": "b6c69918de56d4c09ee60b5f99503b490f651939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c69918de56d4c09ee60b5f99503b490f651939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c69918de56d4c09ee60b5f99503b490f651939"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "8433c93bb3db27103d76b894161bd44685820938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -1,3 +1,12 @@\n+2005-12-25  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* final.c (compute_alignments): Make it static.\n+\t* gcse.c (gcse_main, bypass_jumps): Likewise.\n+\t* web.c (web_main): Likewise.\n+\t* output.h: Remove the prototype for compute_alignments.\n+\t* rtl.h: Remove the prototypes for web_main, gcse_main, and\n+\tbypass_jumps.\n+\n 2005-12-24  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (force_operand): Use expand_fix and expand_float to"}, {"sha": "b25876af6190c3637b4b7bfbfb3faab1df8aba59", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -676,7 +676,10 @@ insn_current_reference_address (rtx branch)\n }\n #endif /* HAVE_ATTR_length */\n \f\n-void\n+/* Compute branch alignments based on frequency information in the\n+   CFG.  */\n+\n+static void\n compute_alignments (void)\n {\n   int log, max_skip, max_log;"}, {"sha": "596669480f5078abec4a2d7ec5b958efc666603e", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -660,7 +660,7 @@ static bool is_too_expensive (const char *);\n    F is the first instruction in the function.  Return nonzero if a\n    change is mode.  */\n \n-int\n+static int\n gcse_main (rtx f ATTRIBUTE_UNUSED, FILE *file)\n {\n   int changed, pass;\n@@ -6510,7 +6510,7 @@ store_motion (void)\n \f\n /* Entry point for jump bypassing optimization pass.  */\n \n-int\n+static int\n bypass_jumps (FILE *file)\n {\n   int changed;"}, {"sha": "39b24bf322891b6f9647b6ea0315783e3a213fb4", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -23,9 +23,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #ifndef GCC_OUTPUT_H\n #define GCC_OUTPUT_H\n \n-/* Compute branch alignments based on frequency information in the CFG.  */\n-extern void compute_alignments (void);\n-\n /* Initialize data in final at the beginning of a compilation.  */\n extern void init_final (const char *);\n "}, {"sha": "104d4fb6cde740b5110e5c7bddf3307d6fc4cb5a", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -1977,8 +1977,6 @@ extern unsigned int extended_count (rtx, enum machine_mode, int);\n extern rtx remove_death (unsigned int, rtx);\n extern void dump_combine_stats (FILE *);\n extern void dump_combine_total_stats (FILE *);\n-/* In web.c */\n-extern void web_main (void);\n \n /* In sched-rgn.c.  */\n extern void schedule_insns (FILE *);\n@@ -2040,8 +2038,6 @@ extern void expand_dec (rtx, rtx);\n /* In gcse.c */\n extern bool can_copy_p (enum machine_mode);\n extern rtx fis_get_condition (rtx);\n-extern int gcse_main (rtx, FILE *);\n-extern int bypass_jumps (FILE *);\n \n /* In postreload-gcse.c */\n extern void gcse_after_reload_main (rtx);"}, {"sha": "a52a17dfe9ffa5e80083e2020a1453f09671c908", "filename": "gcc/web.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65727068eae667fd1ec4595c6ebcaceed029963f/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=65727068eae667fd1ec4595c6ebcaceed029963f", "patch": "@@ -232,7 +232,7 @@ replace_ref (struct ref *ref, rtx reg)\n \n /* Main entry point.  */\n \n-void\n+static void\n web_main (void)\n {\n   struct df *df;"}]}