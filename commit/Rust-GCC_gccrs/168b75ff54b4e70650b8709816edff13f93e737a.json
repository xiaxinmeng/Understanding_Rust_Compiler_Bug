{"sha": "168b75ff54b4e70650b8709816edff13f93e737a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4Yjc1ZmY1NGI0ZTcwNjUwYjg3MDk4MTZlZGZmMTNmOTNlNzM3YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-02T16:58:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-02T17:00:09Z"}, "message": "Fix PR ada/99095\n\nThis is a regression present on the mainline and 10 branch, where we fail\nto make the bounds explicit for the return value of a function returning\nan unconstrained array of a limited record type.\n\ngcc/ada/\n\tPR ada/99095\n\t* sem_ch8.adb (Check_Constrained_Object): Restrict again the special\n\toptimization for limited types to non-array types except in the case\n\tof an extended return statement.\ngcc/testsuite/\n\t* gnat.dg/limited5.adb: New test.", "tree": {"sha": "251d6f96b18c4eeaf8a7be5ce10a875cc7c7d8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251d6f96b18c4eeaf8a7be5ce10a875cc7c7d8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/168b75ff54b4e70650b8709816edff13f93e737a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168b75ff54b4e70650b8709816edff13f93e737a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168b75ff54b4e70650b8709816edff13f93e737a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168b75ff54b4e70650b8709816edff13f93e737a/comments", "author": null, "committer": null, "parents": [{"sha": "f8e4d7a6597fa81ff927156a5f5d10b7fdaa0bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e4d7a6597fa81ff927156a5f5d10b7fdaa0bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e4d7a6597fa81ff927156a5f5d10b7fdaa0bc0"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "efff7145337b3f4b04a3cf6c0d456e1ae4bee537", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168b75ff54b4e70650b8709816edff13f93e737a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168b75ff54b4e70650b8709816edff13f93e737a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=168b75ff54b4e70650b8709816edff13f93e737a", "patch": "@@ -830,11 +830,19 @@ package body Sem_Ch8 is\n             --  that are used in iterators. This is an optimization, but it\n             --  also prevents typing anomalies when the prefix is further\n             --  expanded.\n+\n             --  Note that we cannot just use the Is_Limited_Record flag because\n             --  it does not apply to records with limited components, for which\n             --  this syntactic flag is not set, but whose size is also fixed.\n \n-            elsif Is_Limited_Type (Typ) then\n+            --  Note also that we need to build the constrained subtype for an\n+            --  array in order to make the bounds explicit in most cases, but\n+            --  not if the object comes from an extended return statement, as\n+            --  this would create dangling references to them later on.\n+\n+            elsif Is_Limited_Type (Typ)\n+              and then (not Is_Array_Type (Typ) or else Is_Return_Object (Id))\n+            then\n                null;\n \n             else"}, {"sha": "ded8aa3b4b1eb54e32131fbc41b595588e6b833c", "filename": "gcc/testsuite/gnat.dg/limited5.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168b75ff54b4e70650b8709816edff13f93e737a/gcc%2Ftestsuite%2Fgnat.dg%2Flimited5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168b75ff54b4e70650b8709816edff13f93e737a/gcc%2Ftestsuite%2Fgnat.dg%2Flimited5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited5.adb?ref=168b75ff54b4e70650b8709816edff13f93e737a", "patch": "@@ -0,0 +1,17 @@\n+--  { dg-do compile }\n+\n+procedure Limited5 is\n+\n+   type Command       is limited null record;\n+   type Command_Array is array (Positive range <>) of Command;\n+      \n+   function To_Commands return Command_Array is\n+   begin\n+      return Result : Command_Array (1 .. 2);\n+   end To_Commands;\n+   \n+   The_Commands : aliased Command_Array := To_Commands;\n+\n+begin\n+   null;\n+end;"}]}