{"sha": "e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkODYwNzg4ODFiYjdiYjU3YmM2ZTY4YzIyMjExNzA3ZDJiM2RjNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-23T17:21:06Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-31T06:28:26Z"}, "message": "Fix x86/56337 : 1<<28 alignment is broken\n\nThe problem here is the x86_64 back-end uses a signed integer\nfor alignment and then divides by BITS_PER_UNIT so if we had\nINT_MIN (which is what 1<<28*8 is), we would get the wrong result.\n\nThis fixes the problem by using unsigned for the argument to\nx86_output_aligned_bss and x86_output_aligned_bss.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR target/56337\n\t* config/i386/i386-protos.h (x86_output_aligned_bss):\n\tChange align argument to unsigned type.\n\t(x86_elf_aligned_decl_common): Likewise.\n\t* config/i386/i386.c (x86_elf_aligned_decl_common): Likewise.\n\t(x86_output_aligned_bss): Likewise.", "tree": {"sha": "5204e75d8da6923db51caf6f9a93376e8460606d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5204e75d8da6923db51caf6f9a93376e8460606d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d86078881bb7bb57bc6e68c22211707d2b3dc7/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d904008df267cbcc01bd6edf98fa0789fb6e94da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d904008df267cbcc01bd6edf98fa0789fb6e94da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d904008df267cbcc01bd6edf98fa0789fb6e94da"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "355df1164395e06c8a29e1fadadda1c9019a5d70", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d86078881bb7bb57bc6e68c22211707d2b3dc7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d86078881bb7bb57bc6e68c22211707d2b3dc7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "patch": "@@ -326,9 +326,9 @@ struct ix86_address\n extern int ix86_decompose_address (rtx, struct ix86_address *);\n extern int memory_address_length (rtx, bool);\n extern void x86_output_aligned_bss (FILE *, tree, const char *,\n-\t\t\t\t    unsigned HOST_WIDE_INT, int);\n+\t\t\t\t    unsigned HOST_WIDE_INT, unsigned);\n extern void x86_elf_aligned_decl_common (FILE *, tree, const char *,\n-\t\t\t\t\t unsigned HOST_WIDE_INT, int);\n+\t\t\t\t\t unsigned HOST_WIDE_INT, unsigned);\n \n #ifdef RTX_CODE\n extern void ix86_fp_comparison_codes (enum rtx_code code, enum rtx_code *,"}, {"sha": "4681b667fa2d9e1b0b27e068d5347b15c38fbc99", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d86078881bb7bb57bc6e68c22211707d2b3dc7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d86078881bb7bb57bc6e68c22211707d2b3dc7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "patch": "@@ -841,7 +841,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n void\n x86_elf_aligned_decl_common (FILE *file, tree decl,\n \t\t\tconst char *name, unsigned HOST_WIDE_INT size,\n-\t\t\tint align)\n+\t\t\tunsigned align)\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && size > (unsigned int)ix86_section_threshold)\n@@ -862,7 +862,7 @@ x86_elf_aligned_decl_common (FILE *file, tree decl,\n \n void\n x86_output_aligned_bss (FILE *file, tree decl, const char *name,\n-\t\t       \tunsigned HOST_WIDE_INT size, int align)\n+\t\t       \tunsigned HOST_WIDE_INT size, unsigned align)\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && size > (unsigned int)ix86_section_threshold)"}]}