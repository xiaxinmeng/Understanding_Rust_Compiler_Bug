{"sha": "e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4NzZjYWNiMDA3Yzc0Njk4ZTRhYTRkMWMwMmJiYWYxODZmOGE4ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-21T16:38:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-21T16:38:49Z"}, "message": "Makefile.in (NO_SIBLING_ADAFLAGS): Always define.\n\n\t* gcc-interface/Makefile.in (NO_SIBLING_ADAFLAGS): Always define.\n\t(NO_REORDER_ADAFLAGS): New variable.\n\t(EXTRA_GNATTOOLS): Always define.\n\t(../stamp-gnatlib1-$(RTSDIR): Copy tsystem.h.\n\tClean up and adjust list of files compiled with special options.\n\t* gcc-interface/Make-lang.in: Likewise.\n\t(ada/decl.o): Cosmetical change.\n\t(ada/misc.o): Remove dependency on $(PLUGIN_H).\n\nFrom-SVN: r172834", "tree": {"sha": "53ad92d420986c29c53b6c18d2919ff74bd26190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ad92d420986c29c53b6c18d2919ff74bd26190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/comments", "author": null, "committer": null, "parents": [{"sha": "23756963688ce9dc013c7c55d643eca072392ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23756963688ce9dc013c7c55d643eca072392ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23756963688ce9dc013c7c55d643eca072392ef7"}], "stats": {"total": 180, "additions": 95, "deletions": 85}, "files": [{"sha": "64df35283efb2b8a0d8d902ca762eb8c22d0d885", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "patch": "@@ -1,3 +1,14 @@\n+2011-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/Makefile.in (NO_SIBLING_ADAFLAGS): Always define.\n+\t(NO_REORDER_ADAFLAGS): New variable.\n+\t(EXTRA_GNATTOOLS): Always define.\n+\t(../stamp-gnatlib1-$(RTSDIR): Copy tsystem.h.\n+\tClean up and adjust list of files compiled with special options.\n+\t* gcc-interface/Make-lang.in: Likewise.\n+\t(ada/decl.o): Cosmetical change.\n+\t(ada/misc.o): Remove dependency on $(PLUGIN_H).\n+\n 2011-04-20  Jim Meyering  <meyering@redhat.com>\n \n \t* initialize.c (__gnat_initialize): Remove useless if-before-free."}, {"sha": "bfa859ce3fc8aacec3045f24072b33d306e0f8f6", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "patch": "@@ -1,6 +1,6 @@\n # Top level -*- makefile -*- fragment for GNU Ada (GNAT).\n #   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-#   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+#   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n #   Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -1127,43 +1127,39 @@ ada/sdefault.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n \n ADA_TREE_H = ada/gcc-interface/ada-tree.h\n \n-# force debugging information on s-tasdeb.o so that it is always\n-# possible to set conditional breakpoints on tasks.\n+# Special flags - see gcc-interface/Makefile.in for the template\n+\n+ada/s-traceb.o : ada/s-traceb.adb ada/s-traceb.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n ada/s-tasdeb.o  : ada/s-tasdeb.adb ada/s-tasdeb.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n-# force debugging information on s-vaflop.o so that it is always\n-# possible to call the VAX float debug print routines.\n-# force at least -O so that the inline assembly works.\n-\n ada/s-vaflop.o  : ada/s-vaflop.adb ada/s-vaflop.ads\n \t$(CC) -c -O $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t  $(OUTPUT_OPTION) $<\n-\n-# force debugging information on a-except.o so that it is always\n-# possible to set conditional breakpoints on exceptions.\n-# use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n+\t  $< $(OUTPUT_OPTION)\n \n ada/a-except.o  : ada/a-except.adb ada/a-except.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O1 -fno-inline \\\n \t $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n-# compile s-except.o without optimization and with debug info to let the\n-# debugger set breakpoints and inspect subprogram parameters on exception\n-# related events.\n-\n ada/s-except.o  : ada/s-except.adb ada/s-except.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n \t $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n-# force debugging information on s-assert.o so that it is always\n-# possible to set breakpoint on assert failures.\n+ada/s-assert.o  : ada/s-assert.adb ada/s-assert.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n-ada/s-assert.o  : ada/s-assert.adb ada/s-assert.ads ada/a-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O2 \\\n-\t $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+ada/a-tags.o  : ada/a-tags.adb ada/a-tags.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n+\n+ada/tracebak.o : ada/tracebak.c $(CONFIG_H) $(SYSTEM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n+\t      $(INCLUDES) -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n \n # dependencies for windows specific tool (mdll)\n \n@@ -1176,19 +1172,6 @@ ada/mdll-fil.o : ada/mdll-fil.adb ada/mdll.ads ada/mdll-fil.ads\n ada/mdll-utl.o : ada/mdll-utl.adb ada/mdll.ads ada/mdll-utl.ads ada/sdefault.ads ada/types.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n-# force debugging information and no optimization on s-memory.o so that it\n-# is always possible to set breakpoint on __gnat_malloc and __gnat_free\n-# this is important for gnatmem using GDB. memtrack.o is built from\n-# memtrack.adb, and used by the post-mortem analysis with gnatmem.\n-\n-ada/s-memory.o  : ada/s-memory.adb ada/s-memory.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n-\t $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n-\n-ada/memtrack.o  : ada/memtrack.adb ada/s-memory.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n-\t $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n-\n ada/adadecode.o : ada/adadecode.c $(CONFIG_H) $(SYSTEM_H) ada/adadecode.h\n ada/adaint.o   : ada/adaint.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n ada/argv.o     : ada/argv.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n@@ -1197,7 +1180,6 @@ ada/exit.o     : ada/exit.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n ada/final.o    : ada/final.c $(CONFIG_H) $(SYSTEM_H) ada/raise.h\n ada/link.o     : ada/link.c\n \n-\n ada/targext.o : ada/targext.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n@@ -1218,20 +1200,15 @@ ada/raise.o : ada/raise.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h ada/raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-# Need to keep the frame pointer to unwind the stack properly for some targets.\n-ada/tracebak.o : ada/tracebak.c $(CONFIG_H) $(SYSTEM_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n-\t      $(INCLUDES) -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n-\n ada/cuintp.o : ada/gcc-interface/cuintp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) ada/gcc-interface/ada.h ada/types.h ada/uintp.h \\\n    ada/atree.h ada/elists.h ada/nlists.h ada/stringt.h ada/fe.h $(ADA_TREE_H) \\\n    ada/gcc-interface/gigi.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(FLAGS_H) toplev.h $(TARGET_H) $(TREE_INLINE_H) \\\n-   ada/gcc-interface/ada.h ada/types.h ada/atree.h \\\n+   $(TM_H) $(TREE_H) $(FLAGS_H) toplev.h $(TARGET_H) \\\n+   $(TREE_INLINE_H) ada/gcc-interface/ada.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/repinfo.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/fe.h ada/sinfo.h ada/einfo.h $(ADA_TREE_H) \\\n    ada/gcc-interface/gigi.h gt-ada-decl.h\n@@ -1240,7 +1217,7 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(FUNCTION_H) \\\n    $(FLAGS_H) debug.h toplev.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) $(OPTS_H) $(OPTIONS_H) $(TREE_INLINE_H) $(PLUGIN_H) \\\n+   $(LANGHOOKS_DEF_H) $(OPTS_H) $(OPTIONS_H) $(TREE_INLINE_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n    ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\"}, {"sha": "94e98d693e85b260154e811680090aae9427d814", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 64, "deletions": 42, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1876cacb007c74698e4aa4d1c02bbaf186f8a8d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=e1876cacb007c74698e4aa4d1c02bbaf186f8a8d", "patch": "@@ -107,6 +107,8 @@ ADA_CFLAGS =\n ADAFLAGS = -W -Wall -gnatpg -gnata\n SOME_ADAFLAGS =-gnata\n FORCE_DEBUG_ADAFLAGS = -g\n+NO_SIBLING_ADAFLAGS=-fno-optimize-sibling-calls\n+NO_REORDER_ADAFLAGS=-fno-toplevel-reorder\n GNATLIBFLAGS = -gnatpg -nostdinc\n GNATLIBCFLAGS = -g -O2\n # Pretend that _Unwind_GetIPInfo is available for the target by default.  This\n@@ -180,6 +182,9 @@ SYSLIBS = @GNAT_LIBEXC@\n # List of extra object files linked in with various programs.\n EXTRA_GNATTOOLS_OBJS = ../../prefix.o ../../version.o\n \n+# List extra gnattools\n+EXTRA_GNATTOOLS =\n+\n # List of target dependent sources, overridden below as necessary\n TARGET_ADA_SRCS =\n \n@@ -243,6 +248,21 @@ LIBDEPS = $(LIBINTL_DEP) $(LIBIBERTY)\n TGT_LIB =\n TOOLS_LIBS = $(EXTRA_GNATTOOLS_OBJS) targext.o link.o $(LIBGNAT) ../../../libiberty/libiberty.a $(SYSLIBS) $(TGT_LIB)\n \n+# Convert the target variable into a space separated list of architecture,\n+# manufacturer, and operating system and assign each of those to its own\n+# variable.\n+\n+host:=$(subst -, ,$(host_canonical))\n+targ:=$(subst -, ,$(target))\n+arch:=$(word 1,$(targ))\n+ifeq ($(words $(targ)),2)\n+  manu:=\n+  osys:=$(word 2,$(targ))\n+else\n+  manu:=$(word 2,$(targ))\n+  osys:=$(word 3,$(targ))\n+endif\n+\n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n # so that tm.h and config.h will be found in the compilation\n@@ -312,21 +332,6 @@ GNATMAKE_OBJS = a-except.o ali.o ali-util.o aspects.o s-casuti.o \\\n  uintp.o uname.o urealp.o usage.o widechar.o scil_ll.o \\\n  $(EXTRA_GNATMAKE_OBJS)\n \n-# Convert the target variable into a space separated list of architecture,\n-# manufacturer, and operating system and assign each of those to its own\n-# variable.\n-\n-host:=$(subst -, ,$(host_canonical))\n-targ:=$(subst -, ,$(target))\n-arch:=$(word 1,$(targ))\n-ifeq ($(words $(targ)),2)\n-  manu:=\n-  osys:=$(word 2,$(targ))\n-else\n-  manu:=$(word 2,$(targ))\n-  osys:=$(word 3,$(targ))\n-endif\n-\n # Make arch match the current multilib so that the RTS selection code\n # picks up the right files. For a given target this must be coherent\n # with MULTILIB_DIRNAMES defined in gcc/config/target/t-*.\n@@ -1634,7 +1639,6 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n     s-osprim.adb<s-osprim-mingw.adb \\\n     s-taprop.adb<s-taprop-mingw.adb\n \n-    EH_MECHANISM=-gcc\n     ifeq ($(strip $(filter-out x86_64%,$(arch))),)\n       ifeq ($(strip $(MULTISUBDIR)),/32)\n \tLIBGNAT_TARGET_PAIRS += \\\n@@ -1666,6 +1670,8 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n     # ??? This will be replaced by gnatlib-shared-dual-win32 when GNAT\n     # auto-import support for array/record will be done.\n     GNATLIB_SHARED = gnatlib-shared-win32\n+\n+    EH_MECHANISM=-gcc\n   endif\n \n   TOOLS_TARGET_PAIRS= \\\n@@ -2444,6 +2450,8 @@ install-gnatlib: ../stamp-gnatlib-$(RTSDIR)\n \t$(foreach PAIR,$(LIBGNAT_TARGET_PAIRS), \\\n \t          $(LN_S) $(fsrcpfx)ada/$(word 2,$(subst <, ,$(PAIR))) \\\n \t                $(RTSDIR)/$(word 1,$(subst <, ,$(PAIR)));)\n+# Copy tsystem.h\n+\t$(CP) $(srcdir)/tsystem.h rts\n # Copy generated target dependent sources\n \t$(RM) $(RTSDIR)/s-oscons.ads\n \t(cd $(RTSDIR); $(LN_S) ../s-oscons.ads s-oscons.ads)\n@@ -2668,7 +2676,7 @@ gnatlib-sjlj:\n \n gnatlib-zcx:\n \t$(MAKE) $(FLAGS_TO_PASS) EH_MECHANISM=\"-gcc\" \\\n-\tTHREAD_KIND=\"$(THREAD_KIND)\" ../stamp-gnatlib1-$(RTSDIR)\n+\t  THREAD_KIND=\"$(THREAD_KIND)\" ../stamp-gnatlib1-$(RTSDIR)\n \tsed -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := True;/' $(RTSDIR)/system.ads > $(RTSDIR)/s.ads\n \t$(MV) $(RTSDIR)/s.ads $(RTSDIR)/system.ads\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n@@ -2709,22 +2717,15 @@ b_gnatm.o : b_gnatm.adb\n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n \n+# Special flags\n+\n # force no sibling call optimization on s-traceb.o so the number of stack\n # frames to be skipped when computing a call chain is not modified by\n-# optimization. However we can do that only when building the runtime\n-# (not the compiler) because the -fno-optimize-sibling-calls option exists\n-# only in GCC 3 and above.\n+# optimization.\n \n-ifneq (,$(findstring xgcc,$(CC)))\n-NO_SIBLING_ADAFLAGS=-fno-optimize-sibling-calls\n-else\n-NO_SIBLING_ADAFLAGS=\n-endif\n-\n-s-traceb.o  : s-traceb.adb\n+s-traceb.o  : s-traceb.adb s-traceb.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) \\\n-\t      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n-      $< $(OUTPUT_OPTION)\n+\t      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n # force debugging information on s-tasdeb.o so that it is always\n # possible to set conditional breakpoints on tasks.\n@@ -2733,11 +2734,16 @@ s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n \t      $< $(OUTPUT_OPTION)\n \n-# force no function reordering on a-except.o because of the exclusion bounds\n-# mechanism (see the source file for more detailed information).\n+# force debugging information on s-vaflop.o so that it is always\n+# possible to call the VAX float debug print routines.\n+# force at least -O so that the inline assembly works.\n \n-NO_REORDER_ADAFLAGS=-fno-toplevel-reorder\n+s-vaflop.o  : s-vaflop.adb s-vaflop.ads\n+\t$(CC) -c -O $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n \n+# force no function reordering on a-except.o because of the exclusion bounds\n+# mechanism (see the source file for more detailed information).\n # force debugging information on a-except.o so that it is always\n # possible to set conditional breakpoints on exceptions.\n # use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n@@ -2757,10 +2763,23 @@ s-except.o  : s-except.adb s-except.ads\n # force debugging information on s-assert.o so that it is always\n # possible to set breakpoint on assert failures.\n \n-s-assert.o  : s-assert.adb s-assert.ads a-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O2 $(ADA_INCLUDES) \\\n+s-assert.o  : s-assert.adb s-assert.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t      $< $(OUTPUT_OPTION)\n \n+# force debugging information on a-tags.o so that the debugger can find\n+# the description of Ada.Tags.Type_Specific_Data.\n+\n+a-tags.o  : a-tags.adb a-tags.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+\n+# need to keep the frame pointer in this file to pop the stack properly on\n+# some targets.\n+tracebak.o  : tracebak.c tb-alvms.c tb-alvxw.c tb-gcc.c\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n+\t      $(INCLUDES) -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n+\n adadecode.o : adadecode.c adadecode.h\n aux-io.o  : aux-io.c\n argv.o    : argv.c\n@@ -2770,15 +2789,18 @@ errno.o   : errno.c\n exit.o    : adaint.h exit.c\n expect.o  : expect.c\n final.o   : final.c\n-link.o    : link.c\n locales.o : locales.c\n mkdir.o   : mkdir.c\n socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n-raise-gcc.o : raise-gcc.c raise.h\n raise.o   : raise.c raise.h\n vx_stack_info.o : vx_stack_info.c\n \n+raise-gcc.o : raise-gcc.c raise.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n+\t\t-iquote $(srcdir) \\\n+\t\t$(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\n cio.o     : cio.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n@@ -2791,16 +2813,16 @@ initialize.o : initialize.c raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-targext.o : targext.c\n+link.o : link.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t\t$(ALL_CPPFLAGS) $(INCLUDES_FOR_SUBDIR) \\\n \t\t$< $(OUTPUT_OPTION)\n \n-# Need to keep the frame pointer in this file to pop the stack properly on\n-# some targets.\n-tracebak.o  : tracebak.c tb-alvms.c tb-alvxw.c tb-gcc.c\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n-\t      $(INCLUDES) -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n+targext.o : targext.c\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n+\t\t-iquote $(srcdir) \\\n+\t\t$(ALL_CPPFLAGS) $(INCLUDES_FOR_SUBDIR) \\\n+\t\t$< $(OUTPUT_OPTION)\n \n # In GNU Make, ignore whether `stage*' exists.\n .PHONY: stage1 stage2 stage3 stage4 clean realclean TAGS bootstrap"}]}