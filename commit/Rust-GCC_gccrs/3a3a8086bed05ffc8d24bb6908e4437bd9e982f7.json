{"sha": "3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzYTgwODZiZWQwNWZmYzhkMjRiYjY5MDhlNDQzN2JkOWU5ODJmNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-12-19T16:58:22Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-12-19T16:58:22Z"}, "message": "[arm] PR target/82975: Guard against reg_renumber being NULL in arm.h\n\nIn this bug we ICE when checking REGNO_OK_FOR_INDEX_P on arm during pre-IRA scheduling.\nThis is because REGNO_OK_FOR_INDEX_P ends up checking the reg_renumber array.\nBefore IRA reg_renumber is NULL and thus we segfault.\n\nThe fix is to guard the use of reg_renumber in the logic in TEST_REGNO in arm.h.\nOn aarch64, for example, we also guard against the reg_renumber == NULL case.\nThis fixes the ICE. I also remove the part of the comment that muses on when reg_renumber\nis available as with this patch it should now be safe to use at any point.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\n\tPR target/82975\n\t* config/arm/arm.h (TEST_REGNO): Check reg_renumber is set before\n\taccessing it.  Adjust comment.\n\n\t* gcc.dg/pr82975.c: New test.\n\nFrom-SVN: r255830", "tree": {"sha": "51e517e0af38cf0dea1b64d47ade9c0235f32191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e517e0af38cf0dea1b64d47ade9c0235f32191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/comments", "author": null, "committer": null, "parents": [{"sha": "972027748c2aa9f59ef1ab534763b0d6ed37b76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/972027748c2aa9f59ef1ab534763b0d6ed37b76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/972027748c2aa9f59ef1ab534763b0d6ed37b76d"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "76dbd695718ad47d9127d8f38bae375767c479f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "patch": "@@ -1,4 +1,10 @@\n-2017-12-18  Jakub Jelinek  <jakub@redhat.com>\n+2017-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/82975\n+\t* config/arm/arm.h (TEST_REGNO): Check reg_renumber is set before\n+\taccessing it.  Adjust comment.\n+\n+2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/81914\n \t* predict.c (zero_one_minusone): New function."}, {"sha": "a482f0342a9f793ec7fd0dc6eb89e29f422c443f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "patch": "@@ -1620,7 +1620,8 @@ enum arm_auto_incmodes\n    has been allocated, which happens in reginfo.c during register\n    allocation.  */\n #define TEST_REGNO(R, TEST, VALUE) \\\n-  ((R TEST VALUE) || ((unsigned) reg_renumber[R] TEST VALUE))\n+  ((R TEST VALUE)\t\\\n+    || (reg_renumber && ((unsigned) reg_renumber[R] TEST VALUE)))\n \n /* Don't allow the pc to be used.  */\n #define ARM_REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\\"}, {"sha": "e0eb513f07f48510b3db38e48818b26781b8d04f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "patch": "@@ -1,3 +1,8 @@\n+2017-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/82975\n+\t* gcc.dg/pr82975.c: New test.\n+\n 2017-12-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/83489"}, {"sha": "e6c13bc3b467528c28bd93f04f16b261209213e9", "filename": "gcc/testsuite/gcc.dg/pr82975.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82975.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3a8086bed05ffc8d24bb6908e4437bd9e982f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82975.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82975.c?ref=3a3a8086bed05ffc8d24bb6908e4437bd9e982f7", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/82975.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=cortex-a57 -fno-sched-pressure -O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  char pad1;\n+  char val;\n+  short pad2;\n+};\n+\n+extern char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}"}]}