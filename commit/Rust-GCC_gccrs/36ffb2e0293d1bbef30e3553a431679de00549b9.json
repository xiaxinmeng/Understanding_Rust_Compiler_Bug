{"sha": "36ffb2e0293d1bbef30e3553a431679de00549b9", "node_id": "C_kwDOANBUbNoAKDM2ZmZiMmUwMjkzZDFiYmVmMzBlMzU1M2E0MzE2NzlkZTAwNTQ5Yjk", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2023-02-01T07:59:42Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2023-02-01T07:59:42Z"}, "message": "IBM zSystems: Make stack_tie to work with hard frame pointer\n\nWith this patch a scheduling barrier is created to prevent the insn\nsetting up the frame-pointer and instructions which save GPRs to the\nstack to be swapped.  Otherwise broken CFI information would be\ngenerated since the stack save insns would use a base register which\nis not currently declared as holding the CFA.\n\nWithout -mpreserve-args this did not happen because the store multiple\nwe used for saving the GPRs would also cover the frame-pointer\nregister and therefore creates a dependency on the frame-pointer\nhardreg. However, with this patch the stack_tie is emitted regardless\nof -mpreserve-args since this in general appears to be the safer\napproach.\n\n\t* config/s390/s390.cc (save_gprs): Use gen_frame_mem.\n\t(restore_gprs): Likewise.\n\t(s390_emit_stack_tie): Make the stack_tie to be dependent on the\n\tframe pointer if a frame-pointer is used.\n\t(s390_emit_prologue): Emit stack_tie when frame-pointer is needed.\n\t* config/s390/s390.md (stack_tie): Add a register operand and\n\trename to ...\n\t(@stack_tie<mode>): ... this.", "tree": {"sha": "3cffb24ac71493f13e4d2844d676a9a5d474d6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cffb24ac71493f13e4d2844d676a9a5d474d6b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ffb2e0293d1bbef30e3553a431679de00549b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ffb2e0293d1bbef30e3553a431679de00549b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ffb2e0293d1bbef30e3553a431679de00549b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ffb2e0293d1bbef30e3553a431679de00549b9/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef5f7b89bbc352255595069eb870d6f30f1f9134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5f7b89bbc352255595069eb870d6f30f1f9134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5f7b89bbc352255595069eb870d6f30f1f9134"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4db5677ce29519a7db03dd02ef773c264b488f43", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ffb2e0293d1bbef30e3553a431679de00549b9/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ffb2e0293d1bbef30e3553a431679de00549b9/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=36ffb2e0293d1bbef30e3553a431679de00549b9", "patch": "@@ -10898,9 +10898,7 @@ save_gprs (rtx base, int offset, int first, int last)\n   int i;\n \n   addr = plus_constant (Pmode, base, offset);\n-  addr = gen_rtx_MEM (Pmode, addr);\n-\n-  set_mem_alias_set (addr, get_frame_alias_set ());\n+  addr = gen_frame_mem (Pmode, addr);\n \n   /* Special-case single register.  */\n   if (first == last)\n@@ -11012,8 +11010,7 @@ restore_gprs (rtx base, int offset, int first, int last)\n   rtx addr, insn;\n \n   addr = plus_constant (Pmode, base, offset);\n-  addr = gen_rtx_MEM (Pmode, addr);\n-  set_mem_alias_set (addr, get_frame_alias_set ());\n+  addr = gen_frame_mem (Pmode, addr);\n \n   /* Special-case single register.  */\n   if (first == last)\n@@ -11062,10 +11059,11 @@ s390_load_got (void)\n static void\n s390_emit_stack_tie (void)\n {\n-  rtx mem = gen_frame_mem (BLKmode,\n-\t\t\t   gen_rtx_REG (Pmode, STACK_POINTER_REGNUM));\n-\n-  emit_insn (gen_stack_tie (mem));\n+  rtx mem = gen_frame_mem (BLKmode, stack_pointer_rtx);\n+  if (frame_pointer_needed)\n+    emit_insn (gen_stack_tie (Pmode, mem, hard_frame_pointer_rtx));\n+  else\n+    emit_insn (gen_stack_tie (Pmode, mem, stack_pointer_rtx));\n }\n \n /* Copy GPRS into FPR save slots.  */\n@@ -11676,6 +11674,7 @@ s390_emit_prologue (void)\n \n   if (frame_pointer_needed)\n     {\n+      s390_emit_stack_tie ();\n       insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }"}, {"sha": "00d39608e1d77946e64b002a89721ad8ec5d92fe", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ffb2e0293d1bbef30e3553a431679de00549b9/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ffb2e0293d1bbef30e3553a431679de00549b9/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=36ffb2e0293d1bbef30e3553a431679de00549b9", "patch": "@@ -11590,9 +11590,10 @@\n ; This is used in s390_emit_prologue in order to prevent insns\n ; adjusting the stack pointer to be moved over insns writing stack\n ; slots using a copy of the stack pointer in a different register.\n-(define_insn \"stack_tie\"\n+(define_insn \"@stack_tie<mode>\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"+m\")\n-        (unspec:BLK [(match_dup 0)] UNSPEC_TIE))]\n+        (unspec:BLK [(match_dup 0)\n+\t\t     (match_operand:P 1 \"register_operand\" \"r\")] UNSPEC_TIE))]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])"}]}