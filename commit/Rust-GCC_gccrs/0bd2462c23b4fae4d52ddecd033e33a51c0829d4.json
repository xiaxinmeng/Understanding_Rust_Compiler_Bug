{"sha": "0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkMjQ2MmMyM2I0ZmFlNGQ1MmRkZWNkMDMzZTMzYTUxYzA4MjlkNA==", "commit": {"author": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1992-10-14T01:27:21Z"}, "committer": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1992-10-14T01:27:21Z"}, "message": "updates for 2.3\n\nFrom-SVN: r2448", "tree": {"sha": "d2b3b5423e0395729225d59c14b359e942b0bde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2b3b5423e0395729225d59c14b359e942b0bde1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd2462c23b4fae4d52ddecd033e33a51c0829d4/comments", "author": null, "committer": null, "parents": [{"sha": "2c16c66660216f1a8c09f13ed44fbfb843dad480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c16c66660216f1a8c09f13ed44fbfb843dad480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c16c66660216f1a8c09f13ed44fbfb843dad480"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "15b26a8fe94d475b1822b8f5b86d847498abec2c", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd2462c23b4fae4d52ddecd033e33a51c0829d4/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd2462c23b4fae4d52ddecd033e33a51c0829d4/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "patch": "@@ -96,6 +96,11 @@ extern char *output_call ();\n #define TARGET_DEFAULT 0\n #endif\n \n+/* Convex ships /tmp as a separate file system - thus it\n+   usually has more free space than /usr/tmp */\n+\n+#define P_tmpdir\t\"/tmp/\"\n+\n /* Allow $ in identifiers. */\n \n #define DOLLARS_IN_IDENTIFIERS 2\n@@ -399,7 +404,7 @@ enum reg_class {\n /* The standard Convex call, with arg count word, includes popping the\n    args as part of the call template.  We optionally omit the arg count\n    word and let gcc combine the arg pops. */\n-#define RETURN_POPS_ARGS(FUNTYPE,SIZE) (TARGET_ARGCOUNT)\n+#define RETURN_POPS_ARGS(FUNTYPE, SIZE) (TARGET_ARGCOUNT ? (SIZE) : 0)\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n@@ -841,6 +846,12 @@ enum reg_class {\n \n #define ASM_APP_OFF \";NO_APP\\n\"\n \n+/* Output something following the gcc2_compiled tag to keep that label from\n+   hiding a real function name for tools like adb and prof. */\n+\n+#define ASM_IDENTIFY_GCC(FILE) \\\n+  fprintf (FILE, \"gcc2_compiled.:\\n\\tds.h 0\\n\");\n+\n /* Alignment with Convex's assembler goes like this:\n    .text can be .aligned up to a halfword.\n    .data and .bss can be .aligned up to a longword."}, {"sha": "81858b4158336c68e54d9439b34101cc8989267c", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd2462c23b4fae4d52ddecd033e33a51c0829d4/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd2462c23b4fae4d52ddecd033e33a51c0829d4/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=0bd2462c23b4fae4d52ddecd033e33a51c0829d4", "patch": "@@ -714,7 +714,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(and:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:DI 2 \"immediate_operand\" \"Fn\")))]\n-  \"GET_CODE (operands[2]) == CONST_INT\n+  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n    || (GET_CODE (operands[2]) == CONST_DOUBLE\n        && CONST_DOUBLE_HIGH (operands[2]) == -1)\"\n   \"and %2,%0\")\n@@ -753,7 +753,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(ior:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:DI 2 \"immediate_operand\" \"Fn\")))]\n-  \"GET_CODE (operands[2]) == CONST_INT\n+  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 0)\n    || (GET_CODE (operands[2]) == CONST_DOUBLE\n        && CONST_DOUBLE_HIGH (operands[2]) == 0)\"\n   \"or %2,%0\")\n@@ -792,7 +792,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:DI 2 \"immediate_operand\" \"Fn\")))]\n-  \"GET_CODE (operands[2]) == CONST_INT\n+  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 0)\n    || (GET_CODE (operands[2]) == CONST_DOUBLE\n        && CONST_DOUBLE_HIGH (operands[2]) == 0)\"\n   \"xor %2,%0\")\n@@ -1032,9 +1032,18 @@\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       int rshift = INTVAL (operands[2]);\n-      operands[3] =\n-\tforce_reg (DImode, immed_double_const (1 << (63 - rshift),\n-\t\t\t\t\t       1 << (31 - rshift), DImode));\n+      if (rshift < 0)\n+\toperands[3] = force_reg (DImode, immed_double_const (0, 0, DImode));\n+      else if (rshift < 32)\n+\toperands[3] =\n+\t  force_reg (DImode,\n+\t\t     immed_double_const (0, 1 << (31 - rshift), DImode));\n+      else if (rshift < 64)\n+\toperands[3] =\n+\t  force_reg (DImode,\n+\t\t     immed_double_const (1 << (63 - rshift), 0, DImode));\n+      else\n+\toperands[3] = force_reg (DImode, immed_double_const (0, 0, DImode));\n     }\n   else\n     {\n@@ -1291,14 +1300,14 @@\n \n (define_insn \"call\"\n   [(call (match_operand:QI 0 \"memory_operand\" \"m\")\n-\t (match_operand:SI 1 \"general_operand\" \"g\"))]\n+\t (match_operand 1 \"\" \"g\"))]\n   \"\"\n   \"* return output_call (insn, operands[0], operands[1]);\")\n \n (define_insn \"call_value\"\n   [(set (match_operand 0 \"\" \"=g\")\n \t(call (match_operand:QI 1 \"memory_operand\" \"m\")\n-\t      (match_operand:SI 2 \"general_operand\" \"g\")))]\n+\t      (match_operand 2 \"\" \"g\")))]\n   \"\"\n   \"* return output_call (insn, operands[1], operands[2]);\")\n "}]}