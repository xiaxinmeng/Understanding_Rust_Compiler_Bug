{"sha": "dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiMmM1MjcxODY5ZWQ2ODI5Y2EzNDY5OTQ2YThhZTkwYTFjMWNkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-07T19:22:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-07T19:22:00Z"}, "message": "re PR target/80322 (convert intrinsics missing)\n\n\tPR target/80322\n\tPR target/80323\n\tPR target/80325\n\tPR target/80326\n\t* config/i386/avxintrin.h (_mm256_cvtsd_f64, _mm256_cvtss_f32): New\n\tintrinsics.\n\t* config/i386/avx512fintrin.h (_mm512_int2mask, _mm512_mask2int,\n\t_mm512_abs_ps, _mm512_mask_abs_ps, _mm512_abs_pd, _mm512_mask_abs_pd,\n\t_mm512_cvtsd_f64, _mm512_cvtss_f32): Likewise.\n\n\t* gcc.target/i386/avx512f-undefined-1.c: New test.\n\t* gcc.target/i386/avx512f-cvtsd-1.c: New test.\n\t* gcc.target/i386/avx-cvtsd-1.c: New test.\n\t* gcc.target/i386/avx512f-cvtss-1.c: New test.\n\t* gcc.target/i386/avx512f-abspd-1.c: New test.\n\t* gcc.target/i386/avx-cvtss-1.c: New test.\n\t* gcc.target/i386/avx512f-absps-1.c: New test.\n\t* gcc.target/i386/avx512f-int2mask-1.c: New test.\n\t* gcc.target/i386/avx512f-mask2int-1.c: New test.\n\nFrom-SVN: r246774", "tree": {"sha": "a9bc4b1fe5d2c8baa2976db5ddf701d3a56d8b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9bc4b1fe5d2c8baa2976db5ddf701d3a56d8b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecd5b37e1262319ff994756468ea27553fedf4ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd5b37e1262319ff994756468ea27553fedf4ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd5b37e1262319ff994756468ea27553fedf4ba"}], "stats": {"total": 359, "additions": 359, "deletions": 0}, "files": [{"sha": "31b3efb8e3337ce3e4d787394e00a5d71b169ac6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -1,3 +1,15 @@\n+2017-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80322\n+\tPR target/80323\n+\tPR target/80325\n+\tPR target/80326\n+\t* config/i386/avxintrin.h (_mm256_cvtsd_f64, _mm256_cvtss_f32): New\n+\tintrinsics.\n+\t* config/i386/avx512fintrin.h (_mm512_int2mask, _mm512_mask2int,\n+\t_mm512_abs_ps, _mm512_mask_abs_ps, _mm512_abs_pd, _mm512_mask_abs_pd,\n+\t_mm512_cvtsd_f64, _mm512_cvtss_f32): Likewise.\n+\n 2017-04-07  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* config/aarch64/aarch64-freebsd.h: Define WCHAR_TYPE."}, {"sha": "9028510848467a081f82c55ff6244166c3b483e6", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -60,6 +60,20 @@ typedef double __m512d_u __attribute__ ((__vector_size__ (64), __may_alias__, __\n typedef unsigned char  __mmask8;\n typedef unsigned short __mmask16;\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_int2mask (int __M)\n+{\n+  return (__mmask16) __M;\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask2int (__mmask16 __M)\n+{\n+  return (int) __M;\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set_epi64 (long long __A, long long __B, long long __C,\n@@ -125,6 +139,8 @@ _mm512_undefined_ps (void)\n   return __Y;\n }\n \n+#define _mm512_undefined _mm512_undefined_ps\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_undefined_pd (void)\n@@ -7264,6 +7280,39 @@ _mm512_mask_testn_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)\n \t\t\t\t\t\t(__v8di) __B, __U);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_abs_ps (__m512 __A)\n+{\n+  return (__m512) _mm512_and_epi32 ((__m512i) __A,\n+\t\t\t\t    _mm512_set1_epi32 (0x7fffffff));\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_abs_ps (__m512 __W, __mmask16 __U, __m512 __A)\n+{\n+  return (__m512) _mm512_mask_and_epi32 ((__m512i) __W, __U, (__m512i) __A,\n+\t\t\t\t\t _mm512_set1_epi32 (0x7fffffff));\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_abs_pd (__m512 __A)\n+{\n+  return (__m512d) _mm512_and_epi64 ((__m512i) __A,\n+\t\t\t\t     _mm512_set1_epi64 (0x7fffffffffffffffLL));\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_abs_pd (__m512d __W, __mmask8 __U, __m512 __A)\n+{\n+  return (__m512d)\n+\t _mm512_mask_and_epi64 ((__m512i) __W, __U, (__m512i) __A,\n+\t\t\t\t_mm512_set1_epi64 (0x7fffffffffffffffLL));\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_unpackhi_epi32 (__m512i __A, __m512i __B)\n@@ -12011,6 +12060,20 @@ _mm512_maskz_cvtps_epu32 (__mmask16 __U, __m512 __A)\n \t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtsd_f64 (__m512d __A)\n+{\n+  return __A[0];\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtss_f32 (__m512 __A)\n+{\n+  return __A[0];\n+}\n+\n #ifdef __x86_64__\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "20c5a078a9a55f3d8b9a59c04c865ecfc19ddf79", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -491,6 +491,20 @@ _mm256_cvttps_epi32 (__m256 __A)\n   return (__m256i)__builtin_ia32_cvttps2dq256 ((__v8sf) __A);\n }\n \n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtsd_f64 (__m256d __A)\n+{\n+  return __A[0];\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtss_f32 (__m256 __A)\n+{\n+  return __A[0];\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_extractf128_pd (__m256d __X, const int __N)"}, {"sha": "a6ab6563eca4f140ffd537ff86de10bacf69a203", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -1,3 +1,19 @@\n+2017-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80322\n+\tPR target/80323\n+\tPR target/80325\n+\tPR target/80326\n+\t* gcc.target/i386/avx512f-undefined-1.c: New test.\n+\t* gcc.target/i386/avx512f-cvtsd-1.c: New test.\n+\t* gcc.target/i386/avx-cvtsd-1.c: New test.\n+\t* gcc.target/i386/avx512f-cvtss-1.c: New test.\n+\t* gcc.target/i386/avx512f-abspd-1.c: New test.\n+\t* gcc.target/i386/avx-cvtss-1.c: New test.\n+\t* gcc.target/i386/avx512f-absps-1.c: New test.\n+\t* gcc.target/i386/avx512f-int2mask-1.c: New test.\n+\t* gcc.target/i386/avx512f-mask2int-1.c: New test.\n+\n 2017-04-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/80348"}, {"sha": "e70184c654d80501487f34f190f72953875bbf11", "filename": "gcc/testsuite/gcc.target/i386/avx-cvtsd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtsd-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+__attribute__((noinline, noclone)) double\n+foo (__m256d x)\n+{\n+  return _mm256_cvtsd_f64 (x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  if (_mm256_cvtsd_f64 (_mm256_set_pd (13.5, 24.5, 23.0, 22.5)) != 22.5)\n+    __builtin_abort ();\n+\n+  if (foo (_mm256_set_pd (24.25, 23.75, 22.0, 12.25)) != 12.25)\n+    __builtin_abort ();\n+}"}, {"sha": "3e5b74ea3f7dad850a6d9a50127d63c420c1f030", "filename": "gcc/testsuite/gcc.target/i386/avx-cvtss-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cvtss-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+__attribute__((noinline, noclone)) double\n+foo (__m256 x)\n+{\n+  return _mm256_cvtss_f32 (x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  if (_mm256_cvtss_f32 (_mm256_set_ps (5.5f, 24.5f, 23.0f, 22.5f,\n+\t\t\t\t       2.0f, 3.0f, 4.0f, 13.5f)) != 13.5f)\n+    __builtin_abort ();\n+\n+  if (foo (_mm256_set_ps (5.25f, 24.25f, 23.75f, 22.0f,\n+\t\t\t  2.0f, 3.0f, 4.0f, 12.25f)) != 12.25f)\n+    __builtin_abort ();\n+}"}, {"sha": "14ed03744441dd9f9f8af82ad188b8abc15d2215", "filename": "gcc/testsuite/gcc.target/i386/avx512f-abspd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-abspd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-abspd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-abspd-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *i1, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n+    else\n+      r[i] = i1[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  float ck[SIZE];\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, ) s, d, dm;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = i * ((i & 1) ? 3.5f : -7.5f);\n+      d.a[i] = DEFAULT_VALUE;\n+      dm.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (s.a, ck);\n+\n+  d.x = INTRINSIC (_abs_ps) (s.x);\n+  dm.x = INTRINSIC (_mask_abs_ps) (dm.x, mask, s.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (d, ck))\n+    abort ();\n+\n+  MASK_MERGE () (ck, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (dm, ck))\n+    abort ();\n+}"}, {"sha": "14ed03744441dd9f9f8af82ad188b8abc15d2215", "filename": "gcc/testsuite/gcc.target/i386/avx512f-absps-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-absps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-absps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-absps-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *i1, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n+    else\n+      r[i] = i1[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  float ck[SIZE];\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, ) s, d, dm;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = i * ((i & 1) ? 3.5f : -7.5f);\n+      d.a[i] = DEFAULT_VALUE;\n+      dm.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (s.a, ck);\n+\n+  d.x = INTRINSIC (_abs_ps) (s.x);\n+  dm.x = INTRINSIC (_mask_abs_ps) (dm.x, mask, s.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (d, ck))\n+    abort ();\n+\n+  MASK_MERGE () (ck, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (dm, ck))\n+    abort ();\n+}"}, {"sha": "26bb2a3d88e17f0ea833f704e212bfd685658479", "filename": "gcc/testsuite/gcc.target/i386/avx512f-cvtsd-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtsd-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+__attribute__((noinline, noclone)) double\n+foo (__m512d x)\n+{\n+  return _mm512_cvtsd_f64 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  if (_mm512_cvtsd_f64 (_mm512_set_pd (5.5, 24.5, 23.0, 22.5,\n+\t\t\t\t       2.0, 3.0, 4.0, 13.5)) != 13.5)\n+    __builtin_abort ();\n+\n+  if (foo (_mm512_set_pd (5.25, 24.25, 23.75, 22.0,\n+\t\t\t  2.0, 3.0, 4.0, 12.25)) != 12.25)\n+    __builtin_abort ();\n+}"}, {"sha": "04e80ca5f301140174df121fe77fef81791b36f2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-cvtss-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-cvtss-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+__attribute__((noinline, noclone)) double\n+foo (__m512 x)\n+{\n+  return _mm512_cvtss_f32 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  if (_mm512_cvtss_f32 (_mm512_set_ps (13.0f, 24.5f, 23.0f, 22.5f,\n+\t\t\t\t       2.0f, 3.0f, 4.0f, 5.0f,\n+\t\t\t\t       6.0f, 7.0f, 8.0f, 9.0f,\n+\t\t\t\t       10.0f, 11.0f, 12.0f, 13.5f)) != 13.5f)\n+    __builtin_abort ();\n+\n+  if (foo (_mm512_set_ps (13.25f, 24.25f, 23.75f, 22.0f,\n+\t\t\t  2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f,\n+\t\t\t  10.0f, 11.0f, 12.0f, 12.25f)) != 12.25f)\n+    __builtin_abort ();\n+}"}, {"sha": "c4fea4aafef1c3e94ff744065642dc1b5d2608c5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-int2mask-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-int2mask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-int2mask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-int2mask-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+avx512f_test (void)\n+{\n+  __m512i a = _mm512_set_epi32 (1, 17, 2, 12, 4, 14, 6, 16,\n+\t\t\t\t8, 11, 10, 20, 12, 22, 14, 24);\n+  __m512i b = _mm512_set_epi32 (0, 1, 11, 3, 13, 5, 15, 7,\n+\t\t\t\t17, 9, 19, 11, 21, 13, 23, 16);\n+  __mmask16 c = _mm512_kmov (_mm512_int2mask (2 | 8));\n+  __m512i d = _mm512_mask_mov_epi32 (a, c, b);\n+  __m512i e = _mm512_set_epi32 (1, 17, 2, 12, 4, 14, 6, 16,\n+\t\t\t\t8, 11, 10, 20, 21, 22, 23, 24);\n+  if (_mm512_mask2int (_mm512_cmpeq_epi32_mask (d, e)) != 0xffff)\n+    __builtin_abort ();\n+}"}, {"sha": "c271ae8c79798b8773efc49bdc1988412c4cc247", "filename": "gcc/testsuite/gcc.target/i386/avx512f-mask2int-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask2int-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask2int-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask2int-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+avx512f_test (void)\n+{\n+  __m512i a\n+    = _mm512_set_epi32 (1, 17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16);\n+  __m512i b\n+    = _mm512_set_epi32 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16);\n+  __mmask16 c = _mm512_cmpgt_epu32_mask (a, b);\n+  if (_mm512_mask2int (c) != 0xc000)\n+    __builtin_abort ();\n+}"}, {"sha": "256401cd38772ae8a7afdf5bd587e5f8ef851392", "filename": "gcc/testsuite/gcc.target/i386/avx512f-undefined-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-undefined-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb2c5271869ed6829ca3469946a8ae90a1c1cdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-undefined-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-undefined-1.c?ref=dcb2c5271869ed6829ca3469946a8ae90a1c1cdb", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+avx512f_test (void)\n+{\n+  __m512 a = _mm512_undefined_ps ();\n+  __m512 b = _mm512_undefined ();\n+  __m512d c = _mm512_undefined_pd ();\n+  __m512i d = _mm512_undefined_epi32 ();\n+  __m512i e = _mm512_set1_epi32 (0);\n+  __m512i f = _mm512_and_epi32 ((__m512i) a, e);\n+  __m512i g = _mm512_and_epi32 ((__m512i) b, e);\n+  __m512i h = _mm512_and_epi32 ((__m512i) c, e);\n+  __m512i i = _mm512_and_epi32 (d, e);\n+  if (_mm512_cmpeq_epi32_mask (f, e) != 0xffff\n+      || _mm512_cmpeq_epi32_mask (g, e) != 0xffff\n+      || _mm512_cmpeq_epi32_mask (h, e) != 0xffff\n+      || _mm512_cmpeq_epi32_mask (i, e) != 0xffff)\n+    __builtin_abort ();\n+}"}]}