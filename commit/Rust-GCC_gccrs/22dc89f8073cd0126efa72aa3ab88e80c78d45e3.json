{"sha": "22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkYzg5ZjgwNzNjZDAxMjZlZmE3MmFhM2FiODhlODBjNzhkNDVlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-14T07:29:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-14T07:29:47Z"}, "message": "vec: Fix bootstrap on i686-linux, 32-bit darwin and AIX\n\nAs mentioned earlier, embedded_size is broken on vecs of long long, double\netc. on some platforms, which breaks bootstrap.\nE.g. on i686-linux, the problem is mostly with older GCC versions being used\nas stage1 compiler (GCC 4.8 to 7.* in particular), because alignas (long long)\nmakes U 64-bit aligned, while when long long m_vecdata[1]; is in vec, it is\nonly 32-bit aligned.  We've tried various ways and the following one seems\nto work, use the old way (offsetof (vec, m_vecdata)) for non-class types\nas well as standard layout class types, i.e. whenever offsetof is guaranteed\nto work, and for others use the new day (in that case we don't run into\nproblems with long long or other scalar types and for the structure layout\nthere is just a struct with a given alignment.\n\n2020-08-14  Jakub Jelinek  <jakub@redhat.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* system.h: Include type_traits.\n\t* vec.h (vec<T, A, vl_embed>::embedded_size): Use offsetof and asserts\n\ton vec_stdlayout, which is conditionally a vec (for standard layout T)\n\tand otherwise vec_embedded.\n\nCo-Authored-By: Jonathan Wakely  <jwakely@redhat.com>", "tree": {"sha": "ec8d221fabb79c0c923d80d87a368b3135f4d35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec8d221fabb79c0c923d80d87a368b3135f4d35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22dc89f8073cd0126efa72aa3ab88e80c78d45e3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5afd18820f4b72e1baa036db4d81d63cdf07ad68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afd18820f4b72e1baa036db4d81d63cdf07ad68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afd18820f4b72e1baa036db4d81d63cdf07ad68"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "3c543a005d856997ae5792133b3e89db2cded92b", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22dc89f8073cd0126efa72aa3ab88e80c78d45e3/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22dc89f8073cd0126efa72aa3ab88e80c78d45e3/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "patch": "@@ -235,6 +235,7 @@ extern int errno;\n # include <cstring>\n # include <new>\n # include <utility>\n+# include <type_traits>\n #endif\n \n /* Some of glibc's string inlines cause warnings.  Plus we'd rather"}, {"sha": "6ede62791b0aee653052bb3958fc4543ccf06bc8", "filename": "gcc/vec.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22dc89f8073cd0126efa72aa3ab88e80c78d45e3/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22dc89f8073cd0126efa72aa3ab88e80c78d45e3/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "patch": "@@ -1283,9 +1283,11 @@ vec<T, A, vl_embed>::embedded_size (unsigned alloc)\n {\n   struct alignas (T) U { char data[sizeof (T)]; };\n   typedef vec<U, A, vl_embed> vec_embedded;\n-  static_assert (sizeof (vec_embedded) == sizeof(vec), \"\");\n-  static_assert (alignof (vec_embedded) == alignof(vec), \"\");\n-  return offsetof (vec_embedded, m_vecdata) + alloc * sizeof (T);\n+  typedef typename std::conditional<std::is_standard_layout<T>::value,\n+\t\t\t\t    vec, vec_embedded>::type vec_stdlayout;\n+  static_assert (sizeof (vec_stdlayout) == sizeof (vec), \"\");\n+  static_assert (alignof (vec_stdlayout) == alignof (vec), \"\");\n+  return offsetof (vec_stdlayout, m_vecdata) + alloc * sizeof (T);\n }\n \n "}]}