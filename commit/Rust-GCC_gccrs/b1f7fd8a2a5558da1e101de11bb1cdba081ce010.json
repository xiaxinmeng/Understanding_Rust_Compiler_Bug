{"sha": "b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmN2ZkOGEyYTU1NThkYTFlMTAxZGUxMWJiMWNkYmEwODFjZTAxMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-12T06:11:18Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-12T06:15:33Z"}, "message": "i386: Implement FP vector compares for V2SFmode [PR98218]\n\nImplement FP vector compares for V2SFmode for TARGET_MMX_WITH_SSE.\n\n2021-05-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/98218\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Handle V2SF mode.\n\t* config/i386/mmx.md (MMXMODE124): New mode iterator.\n\t(V2FI): Ditto.\n\t(mmxintvecmode): New mode attribute.\n\t(mmxintvecmodelower): Ditto.\n\t(*mmx_maskcmpv2sf3_comm): New insn pattern.\n\t(*mmx_maskcmpv2sf3): Ditto.\n\t(vec_cmpv2sfv2si): New expander.\n\t(vcond<V2FI:mode>v2si): Ditto.\n\t(mmx_vlendvps): New insn pattern.\n\t(vcond<MMXMODE124:mode><MMXMODEI:mode>): Also handle V2SFmode.\n\t(vcondu<MMXMODE124:mode><MMXMODEI:mode>): Ditto.\n\t(vcond_mask_<mode><mmxintvecmodelower>): Ditto.\n\ngcc/testsuite/\n\n\tPR target/98218\n\t* g++.target/i386/pr98218-1.C: Ditto.\n\t* gcc.target/i386/pr98218-4.c: New test.\n\n\t* gcc.target/i386/pr98218-1.c: Correct PR number.\n\t* gcc.target/i386/pr98218-1a.c: Ditto.\n\t* gcc.target/i386/pr98218-2.c: Ditto.\n\t* gcc.target/i386/pr98218-2a.c: Ditto.\n\t* gcc.target/i386/pr98218-3.c: Ditto.\n\t* gcc.target/i386/pr98218-3a.c: Ditto.", "tree": {"sha": "ca1920e4aafa057a0a10a834023cb00ab162edc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca1920e4aafa057a0a10a834023cb00ab162edc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d38ec80008afdbb9a059253407d80598b765c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d38ec80008afdbb9a059253407d80598b765c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d38ec80008afdbb9a059253407d80598b765c0"}], "stats": {"total": 185, "additions": 161, "deletions": 24}, "files": [{"sha": "dd230081b168380f07a1a3a73b253c22efce8087", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -3680,6 +3680,13 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \n   switch (mode)\n     {\n+    case E_V2SFmode:\n+      if (TARGET_SSE4_1)\n+\t{\n+\t  gen = gen_mmx_blendvps;\n+\t  op_true = force_reg (mode, op_true);\n+\t}\n+      break;\n     case E_V4SFmode:\n       if (TARGET_SSE4_1)\n \tgen = gen_sse4_1_blendvps;"}, {"sha": "d433c524652c63b618e482cb7eb748498be8549e", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 112, "deletions": 18, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -49,19 +49,30 @@\n \n ;; All 8-byte vector modes handled by MMX\n (define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF])\n+(define_mode_iterator MMXMODE124 [V8QI V4HI V2SI V2SF])\n \n ;; Mix-n-match\n (define_mode_iterator MMXMODE12 [V8QI V4HI])\n (define_mode_iterator MMXMODE14 [V8QI V2SI])\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n+;; All V2S* modes\n+(define_mode_iterator V2FI [V2SF V2SI])\n+\n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n \n (define_mode_attr mmxdoublemode\n   [(V8QI \"V8HI\") (V4HI \"V4SI\")])\n \n+;; Mapping of vector float modes to an integer mode of the same size\n+(define_mode_attr mmxintvecmode\n+  [(V2SF \"V2SI\") (V2SI \"V2SI\") (V4HI \"V4HI\") (V8QI \"V8QI\")])\n+\n+(define_mode_attr mmxintvecmodelower\n+  [(V2SF \"v2si\") (V2SI \"v2si\") (V4HI \"v4hi\") (V8QI \"v8qi\")])\n+\n (define_mode_attr Yv_Yw\n   [(V8QI \"Yw\") (V4HI \"Yw\") (V2SI \"Yv\") (V1DI \"Yv\") (V2SF \"Yv\")])\n \n@@ -714,6 +725,85 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n+(define_insn \"*mmx_maskcmpv2sf3_comm\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(match_operator:V2SF 3 \"sse_comparison_operator\"\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"%0,x\")\n+\t   (match_operand:V2SF 2 \"register_operand\" \"x,x\")]))]\n+  \"TARGET_MMX_WITH_SSE\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == RTX_COMM_COMPARE\"\n+  \"@\n+   cmp%D3ps\\t{%2, %0|%0, %2}\n+   vcmp%D3ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*mmx_maskcmpv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(match_operator:V2SF 3 \"sse_comparison_operator\"\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"0,x\")\n+\t   (match_operand:V2SF 2 \"register_operand\" \"x,x\")]))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   cmp%D3ps\\t{%2, %0|%0, %2}\n+   vcmp%D3ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_expand \"vec_cmpv2sfv2si\"\n+  [(set (match_operand:V2SI 0 \"register_operand\")\n+\t(match_operator:V2SI 1 \"\"\n+\t  [(match_operand:V2SF 2 \"register_operand\")\n+\t   (match_operand:V2SF 3 \"register_operand\")]))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_fp_vec_cmp (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond<mode>v2sf\"\n+  [(set (match_operand:V2FI 0 \"register_operand\")\n+\t(if_then_else:V2FI\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:V2SF 4 \"register_operand\")\n+\t     (match_operand:V2SF 5 \"register_operand\")])\n+\t  (match_operand:V2FI 1)\n+\t  (match_operand:V2FI 2)))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_fp_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_insn \"mmx_blendvps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:V2SF 2 \"register_operand\" \"Yr,*x,x\")\n+\t   (match_operand:V2SF 3 \"register_operand\" \"Yz,Yz,x\")]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"@\n+   blendvps\\t{%3, %2, %0|%0, %2, %3}\n+   blendvps\\t{%3, %2, %0|%0, %2, %3}\n+   vblendvps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point logical operations\n@@ -1657,42 +1747,46 @@\n   DONE;\n })\n \n-(define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n-\t(if_then_else:MMXMODEI\n+(define_expand \"vcond<MMXMODE124:mode><MMXMODEI:mode>\"\n+  [(set (match_operand:MMXMODE124 0 \"register_operand\")\n+\t(if_then_else:MMXMODE124\n \t  (match_operator 3 \"\"\n \t    [(match_operand:MMXMODEI 4 \"register_operand\")\n \t     (match_operand:MMXMODEI 5 \"register_operand\")])\n-\t  (match_operand:MMXMODEI 1)\n-\t  (match_operand:MMXMODEI 2)))]\n-  \"TARGET_MMX_WITH_SSE\"\n+\t  (match_operand:MMXMODE124 1)\n+\t  (match_operand:MMXMODE124 2)))]\n+  \"TARGET_MMX_WITH_SSE\n+   && (GET_MODE_NUNITS (<MMXMODE124:MODE>mode)\n+       == GET_MODE_NUNITS (<MMXMODEI:MODE>mode))\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"vcondu<mode><mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n-\t(if_then_else:MMXMODEI\n+(define_expand \"vcondu<MMXMODE124:mode><MMXMODEI:mode>\"\n+  [(set (match_operand:MMXMODE124 0 \"register_operand\")\n+\t(if_then_else:MMXMODE124\n \t  (match_operator 3 \"\"\n \t    [(match_operand:MMXMODEI 4 \"register_operand\")\n \t     (match_operand:MMXMODEI 5 \"register_operand\")])\n-\t  (match_operand:MMXMODEI 1)\n-\t  (match_operand:MMXMODEI 2)))]\n-  \"TARGET_MMX_WITH_SSE\"\n+\t  (match_operand:MMXMODE124 1)\n+\t  (match_operand:MMXMODE124 2)))]\n+  \"TARGET_MMX_WITH_SSE\n+   && (GET_MODE_NUNITS (<MMXMODE124:MODE>mode)\n+       == GET_MODE_NUNITS (<MMXMODEI:MODE>mode))\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"vcond_mask_<mode><mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n-\t(vec_merge:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_operand\")\n-\t  (match_operand:MMXMODEI 2 \"register_operand\")\n-\t  (match_operand:MMXMODEI 3 \"register_operand\")))]\n+(define_expand \"vcond_mask_<mode><mmxintvecmodelower>\"\n+  [(set (match_operand:MMXMODE124 0 \"register_operand\")\n+\t(vec_merge:MMXMODE124\n+\t  (match_operand:MMXMODE124 1 \"register_operand\")\n+\t  (match_operand:MMXMODE124 2 \"register_operand\")\n+\t  (match_operand:<mmxintvecmode> 3 \"register_operand\")))]\n   \"TARGET_MMX_WITH_SSE\"\n {\n   ix86_expand_sse_movcc (operands[0], operands[3],"}, {"sha": "61ea4bf90080394b08192e07e6c8fd62fb7ece5e", "filename": "gcc/testsuite/g++.target/i386/pr98218-1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98218-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98218-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98218-1.C?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/98218 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned int __attribute__((__vector_size__ (8))) v64u32;\n+typedef int __attribute__((__vector_size__ (8))) v64s32;\n+typedef float __attribute__((__vector_size__ (8))) v64f32;\n+\n+v64u32 au, bu;\n+v64s32 as, bs;\n+v64f32 af, bf;\n+\n+v64u32 tu (v64f32 a, v64f32 b) { return (a > b) ? au : bu; }\n+v64s32 ts (v64f32 a, v64f32 b) { return (a > b) ? as : bs; }\n+v64f32 fu (v64u32 a, v64u32 b) { return (a > b) ? af : bf; }\n+v64f32 fs (v64s32 a, v64s32 b) { return (a > b) ? af : bf; }\n+v64f32 ff (v64f32 a, v64f32 b) { return (a > b) ? af : bf; }\n+\n+/* { dg-final { scan-assembler-times \"cmpltps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtd\" 2 } } */"}, {"sha": "9d6602c08a2057478ea8429848d56de16666542a", "filename": "gcc/testsuite/gcc.target/i386/pr98218-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -msse2\" } */\n "}, {"sha": "2610438b24a45bf5507ffed21468a26c64439889", "filename": "gcc/testsuite/gcc.target/i386/pr98218-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n "}, {"sha": "948bf4f597834df9ee3ec65f6f98efa6b531042e", "filename": "gcc/testsuite/gcc.target/i386/pr98218-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -msse2\" } */\n "}, {"sha": "73c7226044f140d57936be7edc7822d1b4b34235", "filename": "gcc/testsuite/gcc.target/i386/pr98218-2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n "}, {"sha": "1b40d0cee361694917eae810c25e4d36243ed4a1", "filename": "gcc/testsuite/gcc.target/i386/pr98218-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -msse2\" } */\n "}, {"sha": "cf1d4972807b550c44cc1071fc53f96bd7a7a7c9", "filename": "gcc/testsuite/gcc.target/i386/pr98218-3a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/98522 */\n+/* PR target/98218 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n "}, {"sha": "647bdb1171b2f6068be7d395fa7b6ddd80af6a35", "filename": "gcc/testsuite/gcc.target/i386/pr98218-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f7fd8a2a5558da1e101de11bb1cdba081ce010/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-4.c?ref=b1f7fd8a2a5558da1e101de11bb1cdba081ce010", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/98218 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned int __attribute__((__vector_size__ (8))) v64u32;\n+typedef int __attribute__((__vector_size__ (8))) v64s32;\n+typedef float __attribute__((__vector_size__ (8))) v64f32;\n+\n+v64u32 tu (v64f32 a, v64f32 b) { return a > b; }\n+v64s32 ts (v64f32 a, v64f32 b) { return a > b; }\n+v64f32 fu (v64u32 a, v64u32 b) { return a > b; }\n+v64f32 fs (v64s32 a, v64s32 b) { return a > b; }\n+v64f32 ff (v64f32 a, v64f32 b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-times \"cmpltps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtd\" 2 } } */"}]}