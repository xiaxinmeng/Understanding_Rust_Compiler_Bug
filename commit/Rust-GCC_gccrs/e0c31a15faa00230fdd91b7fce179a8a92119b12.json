{"sha": "e0c31a15faa00230fdd91b7fce179a8a92119b12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjMzFhMTVmYWEwMDIzMGZkZDkxYjdmY2UxNzlhOGE5MjExOWIxMg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-16T05:59:51Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-16T05:59:51Z"}, "message": "GFNI enabling [4/4]\n\ngcc/\n\t* config/i386/gfniintrin.h (_mm_gf2p8mul_epi8, _mm256_gf2p8mul_epi8,\n\t_mm_mask_gf2p8mul_epi8, _mm_maskz_gf2p8mul_epi8,\n\t_mm256_mask_gf2p8mul_epi8, _mm256_maskz_gf2p8mul_epi8,\n\t_mm512_mask_gf2p8mul_epi8, _mm512_maskz_gf2p8mul_epi8,\n\t_mm512_gf2p8mul_epi8): New intrinsics.\n\t* config/i386/i386-builtin-types.def\n\t(V64QI_FTYPE_V64QI_V64QI): New type.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vgf2p8mulb_v64qi,\n\t__builtin_ia32_vgf2p8mulb_v64qi_mask, __builtin_ia32_vgf2p8mulb_v32qi,\n\t__builtin_ia32_vgf2p8mulb_v32qi_mask, __builtin_ia32_vgf2p8mulb_v16qi,\n\t__builtin_ia32_vgf2p8mulb_v16qi_mask): New builtins.\n\t* config/i386/sse.md (vgf2p8mulb_*): New pattern.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-gf2p8mulb-2.c: New runtime tests.\n\t* gcc.target/i386/avx512vl-gf2p8mulb-2.c: Ditto.\n\t* gcc.target/i386/gfni-1.c: Add tests for GF2P8MUL.\n\t* gcc.target/i386/gfni-2.c: Ditto.\n\t* gcc.target/i386/gfni-3.c: Ditto.\n\t* gcc.target/i386/gfni-4.c: Ditto.\n\nFrom-SVN: r254795", "tree": {"sha": "84630f8c5531d8f1f618619c2c73571615d4b69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84630f8c5531d8f1f618619c2c73571615d4b69e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c31a15faa00230fdd91b7fce179a8a92119b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c31a15faa00230fdd91b7fce179a8a92119b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c31a15faa00230fdd91b7fce179a8a92119b12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c31a15faa00230fdd91b7fce179a8a92119b12/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00a2022a6717d205c838cf5f624c74e8ddd02fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a2022a6717d205c838cf5f624c74e8ddd02fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a2022a6717d205c838cf5f624c74e8ddd02fc6"}], "stats": {"total": 248, "additions": 244, "deletions": 4}, "files": [{"sha": "bb2c688a544136cd4e92b1cfe5c29dc93ae0c234", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -1,3 +1,19 @@\n+2017-11-16  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/gfniintrin.h (_mm_gf2p8mul_epi8, _mm256_gf2p8mul_epi8,\n+\t_mm_mask_gf2p8mul_epi8, _mm_maskz_gf2p8mul_epi8,\n+\t_mm256_mask_gf2p8mul_epi8, _mm256_maskz_gf2p8mul_epi8,\n+\t_mm512_mask_gf2p8mul_epi8, _mm512_maskz_gf2p8mul_epi8,\n+\t_mm512_gf2p8mul_epi8): New intrinsics.\n+\t* config/i386/i386-builtin-types.def\n+\t(V64QI_FTYPE_V64QI_V64QI): New type.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vgf2p8mulb_v64qi,\n+\t__builtin_ia32_vgf2p8mulb_v64qi_mask, __builtin_ia32_vgf2p8mulb_v32qi,\n+\t__builtin_ia32_vgf2p8mulb_v32qi_mask, __builtin_ia32_vgf2p8mulb_v16qi,\n+\t__builtin_ia32_vgf2p8mulb_v16qi_mask): New builtins.\n+\t* config/i386/sse.md (vgf2p8mulb_*): New pattern.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n+\n 2017-11-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (x86_print_call_or_nop): Emit 5 byte nop"}, {"sha": "dc07428398a6918a36af56d98418502ef171a3e1", "filename": "gcc/config/i386/gfniintrin.h", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgfniintrin.h?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -34,6 +34,14 @@\n #define __DISABLE_GFNI__\n #endif /* __GFNI__ */\n \n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_gf2p8mul_epi8 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8mulb_v16qi((__v16qi) __A,\n+\t\t\t\t\t\t   (__v16qi) __B);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -71,6 +79,14 @@ _mm_gf2p8affine_epi64_epi8 (__m128i __A, __m128i __B, const int __C)\n #define __DISABLE_GFNIAVX__\n #endif /* __GFNIAVX__ */\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_gf2p8mul_epi8 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8mulb_v32qi ((__v32qi) __A,\n+\t\t\t\t\t\t    (__v32qi) __B);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -109,6 +125,23 @@ _mm256_gf2p8affine_epi64_epi8 (__m256i __A, __m256i __B, const int __C)\n #define __DISABLE_GFNIAVX512VL__\n #endif /* __GFNIAVX512VL__ */\n \n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_gf2p8mul_epi8 (__m128i __A, __mmask16 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8mulb_v16qi_mask ((__v16qi) __C,\n+\t\t\t\t\t\t\t (__v16qi) __D,\n+\t\t\t\t\t\t\t (__v16qi)__A, __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_gf2p8mul_epi8 (__mmask16 __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8mulb_v16qi_mask ((__v16qi) __B,\n+\t\t\t(__v16qi) __C, (__v16qi) _mm_setzero_si128 (), __A);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -180,6 +213,24 @@ _mm_maskz_gf2p8affine_epi64_epi8 (__mmask16 __A, __m128i __B, __m128i __C,\n #define __DISABLE_GFNIAVX512VLBW__\n #endif /* __GFNIAVX512VLBW__ */\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_gf2p8mul_epi8 (__m256i __A, __mmask32 __B, __m256i __C,\n+\t\t\t   __m256i __D)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8mulb_v32qi_mask ((__v32qi) __C,\n+\t\t\t\t\t\t\t (__v32qi) __D,\n+\t\t\t\t\t\t\t (__v32qi)__A, __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_gf2p8mul_epi8 (__mmask32 __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8mulb_v32qi_mask ((__v32qi) __B,\n+\t\t\t(__v32qi) __C, (__v32qi) _mm256_setzero_si256 (), __A);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -252,6 +303,30 @@ _mm256_maskz_gf2p8affine_epi64_epi8 (__mmask32 __A, __m256i __B,\n #define __DISABLE_GFNIAVX512FBW__\n #endif /* __GFNIAVX512FBW__ */\n \n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_gf2p8mul_epi8 (__m512i __A, __mmask64 __B, __m512i __C,\n+\t\t\t   __m512i __D)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8mulb_v64qi_mask ((__v64qi) __C,\n+\t\t\t\t\t(__v64qi) __D, (__v64qi)__A, __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_gf2p8mul_epi8 (__mmask64 __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8mulb_v64qi_mask ((__v64qi) __B,\n+\t\t\t(__v64qi) __C, (__v64qi) _mm512_setzero_si512 (), __A);\n+}\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_gf2p8mul_epi8 (__m512i __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8mulb_v64qi ((__v64qi) __A,\n+\t\t\t\t\t\t    (__v64qi) __B);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "04fcb99ae8c0d95fdbc145f5686b571623d5fc82", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -1218,3 +1218,4 @@ DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT)\n DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT, V64QI, UDI)\n DEF_FUNCTION_TYPE (V32QI, V32QI, V32QI, INT, V32QI, USI)\n DEF_FUNCTION_TYPE (V16QI, V16QI, V16QI, INT, V16QI, UHI)\n+DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI)"}, {"sha": "577a592892ff14900468a16abfca0b217a0f2a5a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -2407,6 +2407,12 @@ BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineqb_v32qi\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi, \"__builtin_ia32_vgf2p8affineqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8mulb_v64qi, \"__builtin_ia32_vgf2p8mulb_v64qi\", IX86_BUILTIN_VGF2P8MULB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v64qi_mask, \"__builtin_ia32_vgf2p8mulb_v64qi_mask\", IX86_BUILTIN_VGF2P8MULB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8mulb_v32qi, \"__builtin_ia32_vgf2p8mulb_v32qi\", IX86_BUILTIN_VGF2P8MULB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v32qi_mask, \"__builtin_ia32_vgf2p8mulb_v32qi_mask\", IX86_BUILTIN_VGF2P8MULB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8mulb_v16qi, \"__builtin_ia32_vgf2p8mulb_v16qi\", IX86_BUILTIN_VGF2P8MULB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v16qi_mask, \"__builtin_ia32_vgf2p8mulb_v16qi_mask\", IX86_BUILTIN_VGF2P8MULB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)"}, {"sha": "c736cd6370c6a868638233fbaff7ffd0d4f7ad5f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -33453,6 +33453,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V1DI_FTYPE_V2SI_V2SI:\n     case V32QI_FTYPE_V16HI_V16HI:\n     case V16HI_FTYPE_V8SI_V8SI:\n+    case V64QI_FTYPE_V64QI_V64QI:\n     case V32QI_FTYPE_V32QI_V32QI:\n     case V16HI_FTYPE_V32QI_V32QI:\n     case V16HI_FTYPE_V16HI_V16HI:"}, {"sha": "32d241a27b1e66128ebe9f12528a5a296688c94d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -159,6 +159,7 @@\n   ;; For GFNI support\n   UNSPEC_GF2P8AFFINEINV\n   UNSPEC_GF2P8AFFINE\n+  UNSPEC_GF2P8MUL\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -20008,3 +20009,19 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vgf2p8mulb_<mode><mask_name>\"\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+\t(unspec:VI1_AVX512F [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,x,v\")\n+\t\t\t       (match_operand:VI1_AVX512F 2 \"nonimmediate_operand\" \"xBm,xm,vm\")]\n+\t\t\t      UNSPEC_GF2P8MUL))]\n+  \"TARGET_GFNI\"\n+  \"@\n+   gf2p8mulb\\t{%2, %0| %0, %2}\n+   vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\n+   vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "29ddf92dc860f18910c9f1ac83503891b2f841c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -1,3 +1,12 @@\n+2017-11-16  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512f-gf2p8mulb-2.c: New runtime tests.\n+\t* gcc.target/i386/avx512vl-gf2p8mulb-2.c: Ditto.\n+\t* gcc.target/i386/gfni-1.c: Add tests for GF2P8MUL.\n+\t* gcc.target/i386/gfni-2.c: Ditto.\n+\t* gcc.target/i386/gfni-3.c: Ditto.\n+\t* gcc.target/i386/gfni-4.c: Ditto.\n+\n 2017-11-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/swaps-p8-26.c: Modify expected code"}, {"sha": "97a899cfb5c14f5b96cc90f79d52540fb43a38ba", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -617,8 +617,6 @@\n #define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n-\n-\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "986fbd819e4dcdf62d3edd64675a3bb6d7f458b1", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul -mavx512bw\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "08fc5b7b7b64272f08fd53f2b935bc79c3b8f416", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gf2p8mulb-2.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8mulb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8mulb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8mulb-2.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mgfni -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512F\n+\n+#define GFNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (unsigned char *r, unsigned char *s1, unsigned char *s2)\n+{\n+  for (int i = 0; i < SIZE; i++)\n+    {\n+      unsigned short result = 0;\n+      for (int bit = 0; bit < 8; bit++)\n+        {\n+          if ((s1[i] >> bit) & 1)\n+          {\n+            result ^= s2[i] << bit;\n+          }\n+        }\n+       // Reduce result by x^8 + x^4 + x^3 + x + 1\n+       for (int bit = 14; bit > 7; bit--)\n+         {\n+           unsigned short p = 0x11B << (bit - 8);\n+           if ((result >> bit) & 1)\n+             result ^= p;\n+         }\n+       r[i] = result; \n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_gf2p8mul_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_gf2p8mul_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_gf2p8mul_epi8) (mask, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "8215247a714d75f103c3d175982af4de88441b0d", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-gf2p8mulb-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8mulb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8mulb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8mulb-2.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mgfni\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8mulb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8mulb-2.c\""}, {"sha": "bf72ad041a2d37e7466ab099d56adf25438f6851", "filename": "gcc/testsuite/gcc.target/i386/gfni-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -6,6 +6,9 @@\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -21,4 +24,7 @@ avx512vl_test (void)\n     x1 = _mm512_gf2p8affine_epi64_epi8(x1, x2, 3);\n     x1 = _mm512_mask_gf2p8affine_epi64_epi8(x1, m64, x2, x1, 3);\n     x1 = _mm512_maskz_gf2p8affine_epi64_epi8(m64, x1, x2, 3);\n+    x1 = _mm512_gf2p8mul_epi8(x1, x2);\n+    x1 = _mm512_mask_gf2p8mul_epi8(x1, m64, x2, x1);\n+    x1 = _mm512_maskz_gf2p8mul_epi8(m64, x1, x2);\n }"}, {"sha": "413cb64c6b253293506b37796ad764fa05959ca2", "filename": "gcc/testsuite/gcc.target/i386/gfni-2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -12,6 +12,12 @@\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -36,4 +42,10 @@ avx512vl_test (void)\n     x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n     x5 = _mm_mask_gf2p8affine_epi64_epi8(x5, m16, x6, x5, 3);\n     x5 = _mm_maskz_gf2p8affine_epi64_epi8(m16, x5, x6, 3);\n+    x3 = _mm256_gf2p8mul_epi8(x3, x4);\n+    x3 = _mm256_mask_gf2p8mul_epi8(x3, m32, x4, x3);\n+    x3 = _mm256_maskz_gf2p8mul_epi8(m32, x3, x4);\n+    x5 = _mm_gf2p8mul_epi8(x5, x6);\n+    x5 = _mm_mask_gf2p8mul_epi8(x5, m16, x6, x5);\n+    x5 = _mm_maskz_gf2p8mul_epi8(m16, x5, x6);\n }"}, {"sha": "2beedc8abb3c45a150aa1b98f215637aff1b182f", "filename": "gcc/testsuite/gcc.target/i386/gfni-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -4,6 +4,8 @@\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -18,4 +20,6 @@ avx512vl_test (void)\n     x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n     x3 = _mm256_gf2p8affine_epi64_epi8(x3, x4, 3);\n     x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n+    x3 = _mm256_gf2p8mul_epi8(x3, x4);\n+    x5 = _mm_gf2p8mul_epi8(x5, x6);\n }"}, {"sha": "e0750054b82239c125fd3289070f425a10d41a52", "filename": "gcc/testsuite/gcc.target/i386/gfni-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c31a15faa00230fdd91b7fce179a8a92119b12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c?ref=e0c31a15faa00230fdd91b7fce179a8a92119b12", "patch": "@@ -2,6 +2,7 @@\n /* { dg-options \"-mgfni -O2 -msse\" } */\n /* { dg-final { scan-assembler-times \"gf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"gf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"gf2p8mulb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -13,4 +14,5 @@ avx512vl_test (void)\n {\n     x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n     x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n+    x5 = _mm_gf2p8mul_epi8(x5, x6);\n }"}]}