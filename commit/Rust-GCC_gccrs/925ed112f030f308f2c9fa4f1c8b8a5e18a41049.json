{"sha": "925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1ZWQxMTJmMDMwZjMwOGYyYzlmYTRmMWM4YjhhNWUxOGE0MTA0OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-08T13:16:43Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-08T13:16:43Z"}, "message": "spu-protos.h (spu_function_arg): Delete.\n\n\t* config/spu/spu-protos.h (spu_function_arg): Delete.\n\t* config/spu/spu.h (FUNCTION_ARG): Delete.\n\t(FUNCTION_ARG_ADVANCE): Move code to ...\n\t* config/spu/spu.c (spu_function_arg_advance): New function.\n\t(spu_function_arg): Make static.  Take a const_tree and a bool.\n\t(spu_setup_incoming_varargs): Call spu_function_arg_advance.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165179", "tree": {"sha": "50c078ae2972860c192f3a5a912f036cf988f3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c078ae2972860c192f3a5a912f036cf988f3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/comments", "author": null, "committer": null, "parents": [{"sha": "9ad6bebe4e297f5dae536f15f74f6516eecb034a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad6bebe4e297f5dae536f15f74f6516eecb034a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad6bebe4e297f5dae536f15f74f6516eecb034a"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "7ff2a848fafc2e238eaeaa85e94bafc91f40682c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "patch": "@@ -1,3 +1,17 @@\n+2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/spu/spu-protos.h (spu_function_arg): Delete.\n+\t* config/spu/spu.h (FUNCTION_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Move code to ...\n+\t* config/spu/spu.c (spu_function_arg_advance): New function.\n+\t(spu_function_arg): Make static.  Take a const_tree and a bool.\n+\t(spu_setup_incoming_varargs): Call spu_function_arg_advance.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n+2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rx/rx.c (TARGET_EXCEPT_UNWIND_INFO): Define.\n+\n 2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree-ssa-sccvn.c (init_vn_nary_op_from_pieces): New function."}, {"sha": "d350c27ed8d6ab6d7ff1353765bbf7190692f649", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "patch": "@@ -55,8 +55,6 @@ extern int spu_constant_address_p (rtx x);\n extern int spu_legitimate_constant_p (rtx x);\n extern int spu_initial_elimination_offset (int from, int to);\n extern rtx spu_function_value (const_tree type, const_tree func);\n-extern rtx spu_function_arg (int cum, enum machine_mode mode, tree type,\n-\t\t\t     int named);\n extern void spu_setup_incoming_varargs (int *cum, enum machine_mode mode,\n \t\t\t\t\ttree type, int *pretend_size,\n \t\t\t\t\tint no_rtl);"}, {"sha": "36c48ee7f143ef591d7bd417f49d008db521aaa3", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "patch": "@@ -190,6 +190,10 @@ static tree spu_handle_vector_attribute (tree * node, tree name, tree args,\n static int spu_naked_function_p (tree func);\n static bool spu_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t\t   const_tree type, bool named);\n+static rtx spu_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     const_tree type, bool named);\n+static void spu_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t\t      const_tree type, bool named);\n static tree spu_build_builtin_va_list (void);\n static void spu_va_start (tree, rtx);\n static tree spu_gimplify_va_arg_expr (tree valist, tree type,\n@@ -391,6 +395,12 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE spu_pass_by_reference\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG spu_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE spu_function_arg_advance\n+\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK must_pass_in_stack_var_size\n \n@@ -3994,10 +4004,10 @@ spu_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED)\n   return gen_rtx_REG (mode, FIRST_RETURN_REGNUM);\n }\n \n-rtx\n-spu_function_arg (CUMULATIVE_ARGS cum,\n+static rtx\n+spu_function_arg (CUMULATIVE_ARGS *cum,\n \t\t  enum machine_mode mode,\n-\t\t  tree type, int named ATTRIBUTE_UNUSED)\n+\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int byte_size;\n \n@@ -4030,6 +4040,19 @@ spu_function_arg (CUMULATIVE_ARGS cum,\n     return gen_rtx_REG (mode, FIRST_ARG_REGNUM + cum);\n }\n \n+static void\n+spu_function_arg_advance (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum += (type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST\n+\t   ? 1\n+\t   : mode == BLKmode\n+\t   ? ((int_size_in_bytes (type) + 15) / 16)\n+\t   : mode == VOIDmode\n+\t   ? 1\n+\t   : HARD_REGNO_NREGS (cum, mode));\n+}\n+\n /* Variable sized types are passed by reference.  */\n static bool\n spu_pass_by_reference (CUMULATIVE_ARGS * cum ATTRIBUTE_UNUSED,\n@@ -4238,7 +4261,7 @@ spu_setup_incoming_varargs (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n \n       /* cum currently points to the last named argument, we want to\n          start at the next argument. */\n-      FUNCTION_ARG_ADVANCE (ncum, mode, type, 1);\n+      spu_function_arg_advance (&ncum, mode, type, true);\n \n       offset = -STACK_POINTER_OFFSET;\n       for (regno = ncum; regno < MAX_REGISTER_ARGS; regno++)"}, {"sha": "f1b8cabd0a1655af6b1b873aef37f578f5cc8a6f", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925ed112f030f308f2c9fa4f1c8b8a5e18a41049/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=925ed112f030f308f2c9fa4f1c8b8a5e18a41049", "patch": "@@ -330,22 +330,11 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \f\n /* Register Arguments */\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-        (spu_function_arg((CUM),(MODE),(TYPE),(NAMED)))\n-\n #define CUMULATIVE_ARGS int\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \\\n \t\t((CUM) = 0)\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-        ((CUM) += \\\n-\t (TYPE) && TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST ? 1 \\\n-\t : (MODE) == BLKmode ? ((int_size_in_bytes(TYPE)+15) / 16) \\\n-         : (MODE) == VOIDmode ? 1 \\\n-\t : HARD_REGNO_NREGS(CUM,MODE))\n-\n-\n /* The SPU ABI wants 32/64-bit types at offset 0 in the quad-word on the\n    stack.  8/16-bit types should be at offsets 3/2 respectively.  */\n #define FUNCTION_ARG_OFFSET(MODE, TYPE)\t\t\t\t\t\\"}]}