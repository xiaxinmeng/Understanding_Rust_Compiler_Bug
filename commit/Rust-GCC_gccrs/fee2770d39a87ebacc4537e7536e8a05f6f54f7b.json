{"sha": "fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlMjc3MGQzOWE4N2ViYWNjNDUzN2U3NTM2ZThhMDVmNmY1NGY3Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T04:56:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T04:56:08Z"}, "message": "(call_insn_operand): New function.\n\nFrom-SVN: r4393", "tree": {"sha": "ea758c0c12b909432eb1af0e0b185c7e8f77bf62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea758c0c12b909432eb1af0e0b185c7e8f77bf62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee2770d39a87ebacc4537e7536e8a05f6f54f7b/comments", "author": null, "committer": null, "parents": [{"sha": "6b7e6ce457116a624b5645e0a523d12cddc3c2b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7e6ce457116a624b5645e0a523d12cddc3c2b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7e6ce457116a624b5645e0a523d12cddc3c2b6"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "7aecf5c9ecc067edeac790d59ff0aba288cbc67c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee2770d39a87ebacc4537e7536e8a05f6f54f7b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee2770d39a87ebacc4537e7536e8a05f6f54f7b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "patch": "@@ -514,6 +514,26 @@ symbolic_operand (op, mode)\n       return 0;\n     }\n }\n+\n+/* Test for a valid operand for a call instruction.\n+   Don't allow the arg pointer register or virtual regs\n+   since they may change into reg + const, which the patterns\n+   can't handle yet.  */\n+\n+int\n+call_insn_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == MEM\n+      && (CONSTANT_ADDRESS_P (XEXP (op, 0))\n+\t  || (GET_CODE (XEXP (op, 0)) == REG\n+\t      && XEXP (op, 0) != arg_pointer_rtx\n+\t      && !(REGNO (XEXP (op, 0)) >= FIRST_PSEUDO_REGISTER\n+\t\t   && REGNO (XEXP (op, 0)) <= LAST_VIRTUAL_REGISTER))))\n+    return 1;\n+  return 0;\n+}\n \f\n /* Returns 1 if OP contains a symbol reference */\n "}]}