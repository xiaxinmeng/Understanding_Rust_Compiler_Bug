{"sha": "3380b80294c24160702c92f25237297ad0f6ca69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4MGI4MDI5NGMyNDE2MDcwMmM5MmYyNTIzNzI5N2FkMGY2Y2E2OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-16T21:45:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-16T21:45:27Z"}, "message": "trans.h (tree): Remove declaration of gfc_build_function_call.\n\n2005-12-16  Richard Guenther  <rguenther@suse.de>\n\n\t* trans.h (tree): Remove declaration of gfc_build_function_call.\n\t* trans.c (gfc_build_function_call): Remove.\n\t(gfc_build_array_ref): Use build_function_call_expr.\n\t(gfc_trans_runtime_check): Likewise.\n\t* trans-array.c (gfc_trans_allocate_array_storage): Likewise.\n\t(gfc_grow_array): Likewise.\n\t(gfc_trans_array_ctor_element): Likewise.\n\t(gfc_trans_array_constructor_value): Likewise.\n\t(gfc_array_allocate): Likewise.\n\t(gfc_array_deallocate): Likewise.\n\t(gfc_trans_auto_array_allocation): Likewise.\n\t(gfc_trans_dummy_array_bias): Likewise.\n\t(gfc_conv_array_parameter): Likewise.\n\t* trans-expr.c (gfc_conv_power_op): Likewise.\n\t(gfc_conv_string_tmp): Likewise.\n\t(gfc_conv_concat_op): Likewise.\n\t(gfc_conv_expr_op): Likewise.\n\t(gfc_trans_string_copy): Likewise.\n\t* trans-decl.c (build_entry_thunks): Likewise.\n\t(gfc_generate_function_code): Likewise.\n\t(gfc_generate_constructors): Likewise.\n\t* trans-io.c (gfc_trans_open): Likewise.\n\t(gfc_trans_close): Likewise.\n\t(build_filepos): Likewise.\n\t(gfc_trans_inquire): Likewise.\n\t(transfer_namelist_element): Likewise.\n\t(build_dt): Likewise.\n\t(gfc_trans_dt_end): Likewise.\n\t(transfer_expr): Likewise.\n\t(transfer_array_desc): Likewise.\n\t* trans-stmt.c (gfc_trans_pause): Likewise.\n\t(gfc_trans_stop): Likewise.\n\t(gfc_trans_character_select): Likewise.\n\t(gfc_do_allocate): Likewise.\n\t(gfc_trans_assign_need_temp): Likewise.\n\t(gfc_trans_pointer_assign_need_temp): Likewise.\n\t(gfc_trans_forall_1): Likewise.\n\t(gfc_trans_where): Likewise.\n\t(gfc_trans_allocate): Likewise.\n\t(gfc_trans_deallocate): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Likewise.\n\t(gfc_conv_intrinsic_lib_function): Likewise.\n\t(gfc_conv_intrinsic_exponent): Likewise.\n\t(gfc_conv_intrinsic_abs): Likewise.\n\t(gfc_conv_intrinsic_sign): Likewise.\n\t(gfc_conv_intrinsic_ctime): Likewise.\n\t(gfc_conv_intrinsic_fdate): Likewise.\n\t(gfc_conv_intrinsic_ttynam): Likewise.\n\t(gfc_conv_intrinsic_ishftc): Likewise.\n\t(gfc_conv_intrinsic_len_trim): Likewise.\n\t(gfc_conv_intrinsic_index): Likewise.\n\t(gfc_conv_intrinsic_size): Likewise.\n\t(gfc_conv_intrinsic_strcmp): Likewise.\n\t(gfc_conv_intrinsic_adjust): Likewise.\n\t(gfc_conv_associated): Likewise.\n\t(gfc_conv_intrinsic_scan): Likewise.\n\t(gfc_conv_intrinsic_verify): Likewise.\n\t(call_builtin_clz): Likewise.\n\t(gfc_conv_intrinsic_si_kind): Likewise.\n\t(gfc_conv_intrinsic_sr_kind): Likewise.\n\t(gfc_conv_intrinsic_trim): Likewise.\n\t(gfc_conv_intrinsic_repeat): Likewise.\n\t(gfc_conv_intrinsic_iargc): Likewise.\n\nFrom-SVN: r108687", "tree": {"sha": "71a4673858884bf1da05ccea2aa21bdf54549ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a4673858884bf1da05ccea2aa21bdf54549ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3380b80294c24160702c92f25237297ad0f6ca69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3380b80294c24160702c92f25237297ad0f6ca69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3380b80294c24160702c92f25237297ad0f6ca69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3380b80294c24160702c92f25237297ad0f6ca69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c015b2f85b4fa9f078fed9ca3c3516951624789d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c015b2f85b4fa9f078fed9ca3c3516951624789d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c015b2f85b4fa9f078fed9ca3c3516951624789d"}], "stats": {"total": 237, "additions": 141, "deletions": 96}, "files": [{"sha": "d23f6b0dfe9fbf82ea2d1bb3f1f1453a134949f3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -1,3 +1,69 @@\n+2005-12-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans.h (tree): Remove declaration of gfc_build_function_call.\n+\t* trans.c (gfc_build_function_call): Remove.\n+\t(gfc_build_array_ref): Use build_function_call_expr.\n+\t(gfc_trans_runtime_check): Likewise.\n+\t* trans-array.c (gfc_trans_allocate_array_storage): Likewise.\n+\t(gfc_grow_array): Likewise.\n+\t(gfc_trans_array_ctor_element): Likewise.\n+\t(gfc_trans_array_constructor_value): Likewise.\n+\t(gfc_array_allocate): Likewise.\n+\t(gfc_array_deallocate): Likewise.\n+\t(gfc_trans_auto_array_allocation): Likewise.\n+\t(gfc_trans_dummy_array_bias): Likewise.\n+\t(gfc_conv_array_parameter): Likewise.\n+\t* trans-expr.c (gfc_conv_power_op): Likewise.\n+\t(gfc_conv_string_tmp): Likewise.\n+\t(gfc_conv_concat_op): Likewise.\n+\t(gfc_conv_expr_op): Likewise.\n+\t(gfc_trans_string_copy): Likewise.\n+\t* trans-decl.c (build_entry_thunks): Likewise.\n+\t(gfc_generate_function_code): Likewise.\n+\t(gfc_generate_constructors): Likewise.\n+\t* trans-io.c (gfc_trans_open): Likewise.\n+\t(gfc_trans_close): Likewise.\n+\t(build_filepos): Likewise.\n+\t(gfc_trans_inquire): Likewise.\n+\t(transfer_namelist_element): Likewise.\n+\t(build_dt): Likewise.\n+\t(gfc_trans_dt_end): Likewise.\n+\t(transfer_expr): Likewise.\n+\t(transfer_array_desc): Likewise.\n+\t* trans-stmt.c (gfc_trans_pause): Likewise.\n+\t(gfc_trans_stop): Likewise.\n+\t(gfc_trans_character_select): Likewise.\n+\t(gfc_do_allocate): Likewise.\n+\t(gfc_trans_assign_need_temp): Likewise.\n+\t(gfc_trans_pointer_assign_need_temp): Likewise.\n+\t(gfc_trans_forall_1): Likewise.\n+\t(gfc_trans_where): Likewise.\n+\t(gfc_trans_allocate): Likewise.\n+\t(gfc_trans_deallocate): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Likewise.\n+\t(gfc_conv_intrinsic_lib_function): Likewise.\n+\t(gfc_conv_intrinsic_exponent): Likewise.\n+\t(gfc_conv_intrinsic_abs): Likewise.\n+\t(gfc_conv_intrinsic_sign): Likewise.\n+\t(gfc_conv_intrinsic_ctime): Likewise.\n+\t(gfc_conv_intrinsic_fdate): Likewise.\n+\t(gfc_conv_intrinsic_ttynam): Likewise.\n+\t(gfc_conv_intrinsic_ishftc): Likewise.\n+\t(gfc_conv_intrinsic_len_trim): Likewise.\n+\t(gfc_conv_intrinsic_index): Likewise.\n+\t(gfc_conv_intrinsic_size): Likewise.\n+\t(gfc_conv_intrinsic_strcmp): Likewise.\n+\t(gfc_conv_intrinsic_adjust): Likewise.\n+\t(gfc_conv_associated): Likewise.\n+\t(gfc_conv_intrinsic_scan): Likewise.\n+\t(gfc_conv_intrinsic_verify): Likewise.\n+\t(call_builtin_clz): Likewise.\n+\t(gfc_conv_intrinsic_si_kind): Likewise.\n+\t(gfc_conv_intrinsic_sr_kind): Likewise.\n+\t(gfc_conv_intrinsic_trim): Likewise.\n+\t(gfc_conv_intrinsic_repeat): Likewise.\n+\t(gfc_conv_intrinsic_iargc): Likewise.\n+\n 2005-12-16  Richard Guenther  <rguenther@suse.de>\n \n \t* trans.h (gfc_build_indirect_ref): Remove declaration."}, {"sha": "e943d8ec1039351838fa84692b1434c6ddb1f143", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -533,7 +533,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n \t    tmp = gfor_fndecl_internal_malloc64;\n \t  else\n \t    gcc_unreachable ();\n-\t  tmp = gfc_build_function_call (tmp, args);\n+\t  tmp = build_function_call_expr (tmp, args);\n \t  tmp = gfc_evaluate_now (tmp, pre);\n \t  gfc_conv_descriptor_data_set (pre, desc, tmp);\n \t}\n@@ -551,7 +551,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n       tmp = gfc_conv_descriptor_data_get (desc);\n       tmp = fold_convert (pvoid_type_node, tmp);\n       tmp = gfc_chainon_list (NULL_TREE, tmp);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (post, tmp);\n     }\n }\n@@ -818,7 +818,7 @@ gfc_grow_array (stmtblock_t * pblock, tree desc, tree extra)\n     gcc_unreachable ();\n \n   /* Set the new data pointer.  */\n-  tmp = gfc_build_function_call (tmp, args);\n+  tmp = build_function_call_expr (tmp, args);\n   gfc_conv_descriptor_data_set (pblock, desc, tmp);\n }\n \n@@ -953,7 +953,7 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t  args = gfc_chainon_list (args, se->expr);\n \t  args = gfc_chainon_list (args, se->string_length);\n \t  tmp = built_in_decls[BUILT_IN_MEMCPY];\n-\t  tmp = gfc_build_function_call (tmp, args);\n+\t  tmp = build_function_call_expr (tmp, args);\n \t  gfc_add_expr_to_block (&se->pre, tmp);\n \t}\n     }\n@@ -1167,7 +1167,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t      tmp = gfc_chainon_list (NULL_TREE, tmp);\n \t      tmp = gfc_chainon_list (tmp, init);\n \t      tmp = gfc_chainon_list (tmp, bound);\n-\t      tmp = gfc_build_function_call (built_in_decls[BUILT_IN_MEMCPY],\n+\t      tmp = build_function_call_expr (built_in_decls[BUILT_IN_MEMCPY],\n \t\t\t\t\t     tmp);\n \t      gfc_add_expr_to_block (&body, tmp);\n \n@@ -3049,7 +3049,7 @@ gfc_array_allocate (gfc_se * se, gfc_ref * ref, tree pstat)\n   tmp = gfc_chainon_list (NULL_TREE, pointer);\n   tmp = gfc_chainon_list (tmp, size);\n   tmp = gfc_chainon_list (tmp, pstat);\n-  tmp = gfc_build_function_call (allocate, tmp);\n+  tmp = build_function_call_expr (allocate, tmp);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   tmp = gfc_conv_descriptor_offset (se->expr);\n@@ -3076,7 +3076,7 @@ gfc_array_deallocate (tree descriptor, tree pstat)\n   /* Parameter is the address of the data component.  */\n   tmp = gfc_chainon_list (NULL_TREE, var);\n   tmp = gfc_chainon_list (tmp, pstat);\n-  tmp = gfc_build_function_call (gfor_fndecl_deallocate, tmp);\n+  tmp = build_function_call_expr (gfor_fndecl_deallocate, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   return gfc_finish_block (&block);\n@@ -3355,7 +3355,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n     fndecl = gfor_fndecl_internal_malloc64;\n   else\n     gcc_unreachable ();\n-  tmp = gfc_build_function_call (fndecl, tmp);\n+  tmp = build_function_call_expr (fndecl, tmp);\n   tmp = fold (convert (TREE_TYPE (decl), tmp));\n   gfc_add_modify_expr (&block, decl, tmp);\n \n@@ -3372,7 +3372,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n   /* Free the temporary.  */\n   tmp = convert (pvoid_type_node, decl);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+  tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   return gfc_finish_block (&block);\n@@ -3533,7 +3533,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       /* A library call to repack the array if necessary.  */\n       tmp = GFC_DECL_SAVED_DESCRIPTOR (tmpdesc);\n       tmp = gfc_chainon_list (NULL_TREE, tmp);\n-      stmt_unpacked = gfc_build_function_call (gfor_fndecl_in_pack, tmp);\n+      stmt_unpacked = build_function_call_expr (gfor_fndecl_in_pack, tmp);\n \n       stride = gfc_index_one_node;\n     }\n@@ -3695,13 +3695,13 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n \t  /* Copy the data back.  */\n \t  tmp = gfc_chainon_list (NULL_TREE, dumdesc);\n \t  tmp = gfc_chainon_list (tmp, tmpdesc);\n-\t  tmp = gfc_build_function_call (gfor_fndecl_in_unpack, tmp);\n+\t  tmp = build_function_call_expr (gfor_fndecl_in_unpack, tmp);\n \t  gfc_add_expr_to_block (&cleanup, tmp);\n \t}\n \n       /* Free the temporary.  */\n       tmp = gfc_chainon_list (NULL_TREE, tmpdesc);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (&cleanup, tmp);\n \n       stmt = gfc_finish_block (&cleanup);\n@@ -4205,7 +4205,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n       desc = se->expr;\n       /* Repack the array.  */\n       tmp = gfc_chainon_list (NULL_TREE, desc);\n-      ptr = gfc_build_function_call (gfor_fndecl_in_pack, tmp);\n+      ptr = build_function_call_expr (gfor_fndecl_in_pack, tmp);\n       ptr = gfc_evaluate_now (ptr, &se->pre);\n       se->expr = ptr;\n \n@@ -4214,13 +4214,13 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n       /* Copy the data back.  */\n       tmp = gfc_chainon_list (NULL_TREE, desc);\n       tmp = gfc_chainon_list (tmp, ptr);\n-      tmp = gfc_build_function_call (gfor_fndecl_in_unpack, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_in_unpack, tmp);\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Free the temporary.  */\n       tmp = convert (pvoid_type_node, ptr);\n       tmp = gfc_chainon_list (NULL_TREE, tmp);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (&block, tmp);\n \n       stmt = gfc_finish_block (&block);"}, {"sha": "b3f153bad2b07f393a5b39118d3a3da85ce71f8d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -1545,7 +1545,7 @@ build_entry_thunks (gfc_namespace * ns)\n       args = nreverse (args);\n       args = chainon (args, nreverse (string_args));\n       tmp = ns->proc_name->backend_decl;\n-      tmp = gfc_build_function_call (tmp, args);\n+      tmp = build_function_call_expr (tmp, args);\n       if (ns->proc_name->attr.mixed_entry_master)\n \t{\n \t  tree union_decl, field;\n@@ -2602,7 +2602,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n       arglist = gfc_chainon_list (arglist,\n \t\t\t\t  build_int_cst (gfc_int4_type_node,\n \t\t\t\t\t\t gfc_option.allow_std));\n-      tmp = gfc_build_function_call (gfor_fndecl_set_std, arglist);\n+      tmp = build_function_call_expr (gfor_fndecl_set_std, arglist);\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n@@ -2617,7 +2617,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n       arglist = gfc_chainon_list (NULL_TREE,\n \t\t\t\t  build_int_cst (gfc_c_int_type_node,\n \t\t\t\t\t\t gfc_option.fpe));\n-      tmp = gfc_build_function_call (gfor_fndecl_set_fpe, arglist);\n+      tmp = build_function_call_expr (gfor_fndecl_set_fpe, arglist);\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n@@ -2764,7 +2764,7 @@ gfc_generate_constructors (void)\n   for (; gfc_static_ctors; gfc_static_ctors = TREE_CHAIN (gfc_static_ctors))\n     {\n       tmp =\n-\tgfc_build_function_call (TREE_VALUE (gfc_static_ctors), NULL_TREE);\n+\tbuild_function_call_expr (TREE_VALUE (gfc_static_ctors), NULL_TREE);\n       DECL_SAVED_TREE (fndecl) = build_stmt (EXPR_STMT, tmp);\n     }\n "}, {"sha": "f21c0734290827c215ceb555497768afcd92b6be", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -798,7 +798,7 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \n   tmp = gfc_chainon_list (NULL_TREE, lse.expr);\n   tmp = gfc_chainon_list (tmp, rse.expr);\n-  se->expr = fold (gfc_build_function_call (fndecl, tmp));\n+  se->expr = build_function_call_expr (fndecl, tmp);\n }\n \n \n@@ -828,14 +828,14 @@ gfc_conv_string_tmp (gfc_se * se, tree type, tree len)\n       /* Allocate a temporary to hold the result.  */\n       var = gfc_create_var (type, \"pstr\");\n       args = gfc_chainon_list (NULL_TREE, len);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_malloc, args);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_malloc, args);\n       tmp = convert (type, tmp);\n       gfc_add_modify_expr (&se->pre, var, tmp);\n \n       /* Free the temporary afterwards.  */\n       tmp = convert (pvoid_type_node, var);\n       args = gfc_chainon_list (NULL_TREE, tmp);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, args);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, args);\n       gfc_add_expr_to_block (&se->post, tmp);\n     }\n \n@@ -890,7 +890,7 @@ gfc_conv_concat_op (gfc_se * se, gfc_expr * expr)\n   args = gfc_chainon_list (args, lse.expr);\n   args = gfc_chainon_list (args, rse.string_length);\n   args = gfc_chainon_list (args, rse.expr);\n-  tmp = gfc_build_function_call (gfor_fndecl_concat_string, args);\n+  tmp = build_function_call_expr (gfor_fndecl_concat_string, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Add the cleanup for the operands.  */\n@@ -1056,7 +1056,7 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n       tmp = gfc_chainon_list (tmp, rse.expr);\n \n       /* Build a call for the comparison.  */\n-      lse.expr = gfc_build_function_call (gfor_fndecl_compare_string, tmp);\n+      lse.expr = build_function_call_expr (gfor_fndecl_compare_string, tmp);\n       gfc_add_block_to_block (&lse.post, &rse.post);\n \n       rse.expr = integer_zero_node;\n@@ -1824,7 +1824,7 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlen, tree dest,\n   tmp = gfc_chainon_list (tmp, dest);\n   tmp = gfc_chainon_list (tmp, slen);\n   tmp = gfc_chainon_list (tmp, src);\n-  tmp = gfc_build_function_call (gfor_fndecl_copy_string, tmp);\n+  tmp = build_function_call_expr (gfor_fndecl_copy_string, tmp);\n   gfc_add_expr_to_block (block, tmp);\n }\n "}, {"sha": "e3f4bdf6cdf6514fcc2c34d87e90ad70173d080d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -387,7 +387,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   if (n != END_BUILTINS)\n     {\n       tmp = built_in_decls[n];\n-      se->expr = gfc_build_function_call (tmp, arg);\n+      se->expr = build_function_call_expr (tmp, arg);\n       return;\n     }\n \n@@ -641,7 +641,7 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n   /* Get the decl and generate the call.  */\n   args = gfc_conv_intrinsic_function_args (se, expr);\n   fndecl = gfc_get_intrinsic_lib_fndecl (m, expr);\n-  se->expr = gfc_build_function_call (fndecl, args);\n+  se->expr = build_function_call_expr (fndecl, args);\n }\n \n /* Generate code for EXPONENT(X) intrinsic function.  */\n@@ -673,7 +673,7 @@ gfc_conv_intrinsic_exponent (gfc_se * se, gfc_expr * expr)\n       gcc_unreachable ();\n     }\n \n-  se->expr = gfc_build_function_call (fndecl, args);\n+  se->expr = build_function_call_expr (fndecl, args);\n }\n \n /* Evaluate a single upper or lower bound.  */\n@@ -795,7 +795,7 @@ gfc_conv_intrinsic_abs (gfc_se * se, gfc_expr * expr)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      se->expr = fold (gfc_build_function_call (built_in_decls[n], args));\n+      se->expr = build_function_call_expr (built_in_decls[n], args);\n       break;\n \n     default:\n@@ -961,7 +961,7 @@ gfc_conv_intrinsic_sign (gfc_se * se, gfc_expr * expr)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      se->expr = fold (gfc_build_function_call (tmp, arg));\n+      se->expr = build_function_call_expr (tmp, arg);\n       return;\n     }\n \n@@ -1057,14 +1057,14 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_ctime, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_ctime, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n   arglist = gfc_chainon_list (NULL_TREE, var);\n-  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_internal_free, arglist);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -1093,14 +1093,14 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_fdate, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_fdate, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n   arglist = gfc_chainon_list (NULL_TREE, var);\n-  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_internal_free, arglist);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -1131,14 +1131,14 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_ttynam, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_ttynam, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n   arglist = gfc_chainon_list (NULL_TREE, var);\n-  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_internal_free, arglist);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -2039,7 +2039,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      se->expr = gfc_build_function_call (tmp, arg);\n+      se->expr = build_function_call_expr (tmp, arg);\n       /* Convert the result back to the original type, if we extended\n \t the first argument's width above.  */\n       if (expr->ts.kind < 4)\n@@ -2129,7 +2129,7 @@ gfc_conv_intrinsic_len_trim (gfc_se * se, gfc_expr * expr)\n \n   args = gfc_conv_intrinsic_function_args (se, expr);\n   type = gfc_typenode_for_spec (&expr->ts);\n-  se->expr = gfc_build_function_call (gfor_fndecl_string_len_trim, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_string_len_trim, args);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2160,7 +2160,7 @@ gfc_conv_intrinsic_index (gfc_se * se, gfc_expr * expr)\n       TREE_VALUE (back) = convert (logical4_type_node, TREE_VALUE (back));\n     }\n \n-  se->expr = gfc_build_function_call (gfor_fndecl_string_index, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_string_index, args);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2254,7 +2254,7 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n   else\n     fndecl = gfor_fndecl_size0;\n \n-  se->expr = gfc_build_function_call (fndecl, args);\n+  se->expr = build_function_call_expr (fndecl, args);\n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = convert (type, se->expr);\n }\n@@ -2270,7 +2270,7 @@ gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, int op)\n \n   args = gfc_conv_intrinsic_function_args (se, expr);\n   /* Build a call for the comparison.  */\n-  se->expr = gfc_build_function_call (gfor_fndecl_compare_string, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_compare_string, args);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = build2 (op, type, se->expr,\n@@ -2294,7 +2294,7 @@ gfc_conv_intrinsic_adjust (gfc_se * se, gfc_expr * expr, tree fndecl)\n   var = gfc_conv_string_tmp (se, type, len);\n   args = tree_cons (NULL_TREE, var, args);\n \n-  tmp = gfc_build_function_call (fndecl, args);\n+  tmp = build_function_call_expr (fndecl, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n   se->expr = var;\n   se->string_length = len;\n@@ -2444,7 +2444,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n           gfc_add_block_to_block (&se->post, &arg2se.post);\n           args = gfc_chainon_list (args, arg2se.expr);\n           fndecl = gfor_fndecl_associated;\n-          se->expr = gfc_build_function_call (fndecl, args);\n+          se->expr = build_function_call_expr (fndecl, args);\n         }\n      }\n   se->expr = convert (gfc_typenode_for_spec (&expr->ts), se->expr);\n@@ -2477,7 +2477,7 @@ gfc_conv_intrinsic_scan (gfc_se * se, gfc_expr * expr)\n       TREE_VALUE (back) = convert (logical4_type_node, TREE_VALUE (back));\n     }\n \n-  se->expr = gfc_build_function_call (gfor_fndecl_string_scan, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_string_scan, args);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2510,7 +2510,7 @@ gfc_conv_intrinsic_verify (gfc_se * se, gfc_expr * expr)\n       TREE_VALUE (back) = convert (logical4_type_node, TREE_VALUE (back));\n     }\n \n-  se->expr = gfc_build_function_call (gfor_fndecl_string_verify, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_string_verify, args);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2601,7 +2601,7 @@ call_builtin_clz (tree result_type, tree op0)\n     gcc_unreachable ();\n \n   parms = tree_cons (NULL, op0, NULL);\n-  call = gfc_build_function_call (fn, parms);\n+  call = build_function_call_expr (fn, parms);\n \n   return convert (result_type, call);\n }\n@@ -2723,7 +2723,7 @@ gfc_conv_intrinsic_si_kind (gfc_se * se, gfc_expr * expr)\n   args = TREE_VALUE (args);\n   args = build_fold_addr_expr (args);\n   args = tree_cons (NULL_TREE, args, NULL_TREE);\n-  se->expr = gfc_build_function_call (gfor_fndecl_si_kind, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_si_kind, args);\n }\n \n /* Generate code for SELECTED_REAL_KIND (P, R) intrinsic function.  */\n@@ -2750,7 +2750,7 @@ gfc_conv_intrinsic_sr_kind (gfc_se * se, gfc_expr * expr)\n       gfc_add_block_to_block (&se->post, &argse.post);\n       args = gfc_chainon_list (args, argse.expr);\n     }\n-  se->expr = gfc_build_function_call (gfor_fndecl_sr_kind, args);\n+  se->expr = build_function_call_expr (gfor_fndecl_sr_kind, args);\n }\n \n \n@@ -2780,14 +2780,14 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   arglist = gfc_chainon_list (arglist, addr);\n   arglist = chainon (arglist, tmp);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_string_trim, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_string_trim, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n   arglist = gfc_chainon_list (NULL_TREE, var);\n-  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_internal_free, arglist);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -2821,7 +2821,7 @@ gfc_conv_intrinsic_repeat (gfc_se * se, gfc_expr * expr)\n   arglist = NULL_TREE;\n   arglist = gfc_chainon_list (arglist, var);\n   arglist = chainon (arglist, args);\n-  tmp = gfc_build_function_call (gfor_fndecl_string_repeat, arglist);\n+  tmp = build_function_call_expr (gfor_fndecl_string_repeat, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   se->expr = var;\n@@ -2840,7 +2840,7 @@ gfc_conv_intrinsic_iargc (gfc_se * se, gfc_expr * expr)\n \n   /* Call the library function.  This always returns an INTEGER(4).  */\n   fndecl = gfor_fndecl_iargc;\n-  tmp = gfc_build_function_call (fndecl, NULL_TREE);\n+  tmp = build_function_call_expr (fndecl, NULL_TREE);\n \n   /* Convert it to the required type.  */\n   type = gfc_typenode_for_spec (&expr->ts);"}, {"sha": "ed6cf9a07e092b4f1349bd5975ac455daa43c6cf", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -799,7 +799,7 @@ gfc_trans_open (gfc_code * code)\n \n   tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (iocall[IOCALL_OPEN], tmp);\n+  tmp = build_function_call_expr (iocall[IOCALL_OPEN], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   gfc_add_block_to_block (&block, &post_block);\n@@ -852,7 +852,7 @@ gfc_trans_close (gfc_code * code)\n \n   tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (iocall[IOCALL_CLOSE], tmp);\n+  tmp = build_function_call_expr (iocall[IOCALL_CLOSE], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   gfc_add_block_to_block (&block, &post_block);\n@@ -903,7 +903,7 @@ build_filepos (tree function, gfc_code * code)\n \n   tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (function, tmp);\n+  tmp = build_function_call_expr (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   gfc_add_block_to_block (&block, &post_block);\n@@ -1085,7 +1085,7 @@ gfc_trans_inquire (gfc_code * code)\n \n   tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (iocall[IOCALL_INQUIRE], tmp);\n+  tmp = build_function_call_expr (iocall[IOCALL_INQUIRE], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   gfc_add_block_to_block (&block, &post_block);\n@@ -1299,7 +1299,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n     NML_ADD_ARG (convert (gfc_charlen_type_node, integer_zero_node));\n \n   NML_ADD_ARG (dtype);\n-  tmp = gfc_build_function_call (iocall[IOCALL_SET_NML_VAL], args);\n+  tmp = build_function_call_expr (iocall[IOCALL_SET_NML_VAL], args);\n   gfc_add_expr_to_block (block, tmp);\n \n   /* If the object is an array, transfer rank times:\n@@ -1312,7 +1312,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n       NML_ADD_ARG (GFC_TYPE_ARRAY_STRIDE (dt, n_dim));\n       NML_ADD_ARG (GFC_TYPE_ARRAY_LBOUND (dt, n_dim));\n       NML_ADD_ARG (GFC_TYPE_ARRAY_UBOUND (dt, n_dim));\n-      tmp = gfc_build_function_call (iocall[IOCALL_SET_NML_VAL_DIM], args);\n+      tmp = build_function_call_expr (iocall[IOCALL_SET_NML_VAL_DIM], args);\n       gfc_add_expr_to_block (block, tmp);\n     }\n \n@@ -1467,7 +1467,7 @@ build_dt (tree function, gfc_code * code)\n \n   tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (function, tmp);\n+  tmp = build_function_call_expr (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n   gfc_add_block_to_block (&block, &post_block);\n@@ -1546,7 +1546,7 @@ gfc_trans_dt_end (gfc_code * code)\n \n   tmp = build_fold_addr_expr (dt_parm);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n-  tmp = gfc_build_function_call (function, tmp);\n+  tmp = build_function_call_expr (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n   gfc_add_block_to_block (&block, dt_post_end_block);\n   gfc_init_block (dt_post_end_block);\n@@ -1735,7 +1735,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   args = gfc_chainon_list (args, addr_expr);\n   args = gfc_chainon_list (args, arg2);\n \n-  tmp = gfc_build_function_call (function, args);\n+  tmp = build_function_call_expr (function, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n   gfc_add_block_to_block (&se->pre, &se->post);\n \n@@ -1762,7 +1762,7 @@ transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   args = gfc_chainon_list (args, addr_expr);\n   args = gfc_chainon_list (args, kind_arg);\n   args = gfc_chainon_list (args, charlen_arg);\n-  tmp = gfc_build_function_call (iocall[IOCALL_X_ARRAY], args);\n+  tmp = build_function_call_expr (iocall[IOCALL_X_ARRAY], args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n   gfc_add_block_to_block (&se->pre, &se->post);\n }"}, {"sha": "1b56cf478de03c6d09925eacc906786ec20bdca5", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -317,7 +317,7 @@ gfc_trans_pause (gfc_code * code)\n       fndecl = gfor_fndecl_pause_string;\n     }\n \n-  tmp = gfc_build_function_call (fndecl, args);\n+  tmp = build_function_call_expr (fndecl, args);\n   gfc_add_expr_to_block (&se.pre, tmp);\n \n   gfc_add_block_to_block (&se.pre, &se.post);\n@@ -357,7 +357,7 @@ gfc_trans_stop (gfc_code * code)\n       fndecl = gfor_fndecl_stop_string;\n     }\n \n-  tmp = gfc_build_function_call (fndecl, args);\n+  tmp = build_function_call_expr (fndecl, args);\n   gfc_add_expr_to_block (&se.pre, tmp);\n \n   gfc_add_block_to_block (&se.pre, &se.post);\n@@ -1283,7 +1283,7 @@ gfc_trans_character_select (gfc_code *code)\n \n   gfc_add_block_to_block (&block, &se.pre);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_select_string, args);\n+  tmp = build_function_call_expr (gfor_fndecl_select_string, args);\n   tmp = build1 (GOTO_EXPR, void_type_node, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n@@ -1534,7 +1534,7 @@ gfc_do_allocate (tree bytesize, tree size, tree * pdata, stmtblock_t * pblock,\n \ttmp = gfor_fndecl_internal_malloc64;\n       else\n \tgcc_unreachable ();\n-      tmp = gfc_build_function_call (tmp, args);\n+      tmp = build_function_call_expr (tmp, args);\n       tmp = convert (TREE_TYPE (tmpvar), tmp);\n       gfc_add_modify_expr (pblock, tmpvar, tmp);\n     }\n@@ -2019,7 +2019,7 @@ gfc_trans_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2, tree wheremask,\n     {\n       /* Free the temporary.  */\n       tmp = gfc_chainon_list (NULL_TREE, ptemp1);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (block, tmp);\n     }\n }\n@@ -2177,7 +2177,7 @@ gfc_trans_pointer_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2,\n   if (ptemp1)\n     {\n       tmp = gfc_chainon_list (NULL_TREE, ptemp1);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (block, tmp);\n     }\n }\n@@ -2468,7 +2468,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n \n               /* Free the temporary.  */\n               args = gfc_chainon_list (NULL_TREE, temp->temporary);\n-              tmp = gfc_build_function_call (gfor_fndecl_internal_free, args);\n+              tmp = build_function_call_expr (gfor_fndecl_internal_free, args);\n               gfc_add_expr_to_block (&block, tmp);\n \n               p = temp;\n@@ -2524,7 +2524,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n     {\n       /* Free the temporary for the mask.  */\n       tmp = gfc_chainon_list (NULL_TREE, pmask);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, tmp);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, tmp);\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   if (maskindex)\n@@ -3068,7 +3068,7 @@ gfc_trans_where (gfc_code * code)\n   while (temp)\n     {\n       args = gfc_chainon_list (NULL_TREE, temp->temporary);\n-      tmp = gfc_build_function_call (gfor_fndecl_internal_free, args);\n+      tmp = build_function_call_expr (gfor_fndecl_internal_free, args);\n       gfc_add_expr_to_block (&block, tmp);\n \n       p = temp;\n@@ -3185,7 +3185,7 @@ gfc_trans_allocate (gfc_code * code)\n \t  parm = gfc_chainon_list (NULL_TREE, val);\n \t  parm = gfc_chainon_list (parm, tmp);\n \t  parm = gfc_chainon_list (parm, pstat);\n-\t  tmp = gfc_build_function_call (gfor_fndecl_allocate, parm);\n+\t  tmp = build_function_call_expr (gfor_fndecl_allocate, parm);\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \n \t  if (code->expr)\n@@ -3291,7 +3291,7 @@ gfc_trans_deallocate (gfc_code * code)\n \n \t  parm = gfc_chainon_list (NULL_TREE, var);\n \t  parm = gfc_chainon_list (parm, pstat);\n-\t  tmp = gfc_build_function_call (gfor_fndecl_deallocate, parm);\n+\t  tmp = build_function_call_expr (gfor_fndecl_deallocate, parm);\n \t}\n \n       gfc_add_expr_to_block (&se.pre, tmp);"}, {"sha": "5c748833a62610bdf8c3691d0f3b6eba5f1e944d", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -298,24 +298,6 @@ gfc_build_array_ref (tree base, tree offset)\n }\n \n \n-/* Given a function declaration FNDECL and an argument list ARGLIST,\n-   build a CALL_EXPR.  */\n-\n-tree\n-gfc_build_function_call (tree fndecl, tree arglist)\n-{\n-  tree fn;\n-  tree call;\n-\n-  fn = gfc_build_addr_expr (NULL, fndecl);\n-  call = build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fndecl)), \n-\t\t fn, arglist, NULL);\n-  TREE_SIDE_EFFECTS (call) = 1;\n-\n-  return call;\n-}\n-\n-\n /* Generate a runtime error if COND is true.  */\n \n void\n@@ -347,7 +329,7 @@ gfc_trans_runtime_check (tree cond, tree msg, stmtblock_t * pblock)\n   tmp = build_int_cst (NULL_TREE, input_line);\n   args = gfc_chainon_list (args, tmp);\n \n-  tmp = gfc_build_function_call (gfor_fndecl_runtime_error, args);\n+  tmp = build_function_call_expr (gfor_fndecl_runtime_error, args);\n   gfc_add_expr_to_block (&block, tmp);\n \n   body = gfc_finish_block (&block);\n@@ -361,7 +343,7 @@ gfc_trans_runtime_check (tree cond, tree msg, stmtblock_t * pblock)\n       /* Tell the compiler that this isn't likely.  */\n       tmp = gfc_chainon_list (NULL_TREE, cond);\n       tmp = gfc_chainon_list (tmp, integer_zero_node);\n-      cond = gfc_build_function_call (built_in_decls[BUILT_IN_EXPECT], tmp);\n+      cond = build_function_call_expr (built_in_decls[BUILT_IN_EXPECT], tmp);\n \n       tmp = build3_v (COND_EXPR, cond, body, build_empty_stmt ());\n       gfc_add_expr_to_block (pblock, tmp);"}, {"sha": "2d637bd94063ad48ad86bb6c766aca72e0df0d95", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3380b80294c24160702c92f25237297ad0f6ca69/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=3380b80294c24160702c92f25237297ad0f6ca69", "patch": "@@ -345,9 +345,6 @@ tree gfc_get_extern_function_decl (gfc_symbol *);\n /* Return the decl for a function.  */\n tree gfc_get_function_decl (gfc_symbol *);\n \n-/* Build a CALL_EXPR.  */\n-tree gfc_build_function_call (tree, tree);\n-\n /* Build an ADDR_EXPR.  */\n tree gfc_build_addr_expr (tree, tree);\n "}]}