{"sha": "86acf60c5b442da37c863d0ac3c4e00f12e12d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhY2Y2MGM1YjQ0MmRhMzdjODYzZDBhYzNjNGUwMGYxMmUxMmQ4NQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-07-31T16:17:21Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-07-31T16:17:21Z"}, "message": "configure.ac (INTERPRETER): New AM_CONDITIONAL.\n\n\t* configure.ac (INTERPRETER): New AM_CONDITIONAL.\n\t* scripts/makemake.tcl (package_map): Mark jdwp and jvmti packages\n\tas being for interpreter only.  Place interpreter related files in\n\t'if INTERPRETER' block.\n\t(interpreter_package_files): New list.\n\t(interpreter_header_vars): Ditto.\n\t(emit_package_rule_to_list): Renamed from emit_package_rule with\n\tnew target list parameter.\n\t(emit_package_rule): Rewritten to call emit_package_rule_to_list.\n\t(emit_interpreter_rule): New function.\n\t(emit_source_var): Place interpreter related files in\n\tinterpreter_header_vars.\n\t* Makefile.am (ACLOCAL_AMFLAGS): Add -I libltdl.\n\t(libgcj_interpret_source_files): New variable.\n\t(libgcj_la_SOURCES): Move jvmti.cc and  interpret.cc to\n\tlibgcj_interpret_source_files and include\n\tlibgcj_interpret_source_files.\n\t(nat_jdwp_source_files): New variable.\n\t(nat_jvmti_source_files): Ditto.\n\t(nat_source_files): Move jdwp and jvmti related files to\n\tnat_jdwp_source_files and nat_jvmti_source_files and include\n\tnat_jdwp_source_files and nat_jvmti_source_files.\n\t* Makefile.in: Regenerate.\n\t* include/Makefile.in: Ditto.\n\t* testsuite/Makefile.in: Ditto.\n\t* gcj/Makefile.in: Ditto.\n\t* sources.am: Ditto.\n\t* configure: Ditto.\n\t* include/config.h.in: Ditto.\n\t* interpret.cc: Remove #ifdef INTERPRETER block.\n\t* stacktrace.cc (UnwindTraceFn): Do not handle proxy frames if\n\tinterpreter disabled.\n\t* include/java-interp.h (_Jv_FrameType): Move outside of\n\t#ifdef INTERPRETER block.\n\t* include/execution.h (_Jv_IndirectCompiledEngine::do_get_closure_list,\n\t_Jv_InterpreterEngine, _Jv_soleInterpreterEngine): Place in\n\t#ifdef INTERPRETER block.\n\t* jni.cc (jvmti.h, jvmti-int.h):  Only include if INTERPRETER is\n\tdefined.\n\t(_Jv_JNI_PopSystemFrame, _Jv_JNI_GetEnv): Only do jvmti processing\n\tif INTERPRETER is defined.\n\t* prims.cc (jvmti.h, jvmti-int.h, Jdwp.h, VMVirtualMachine.h):  Only\n\tinclude if INTERPRETER is defined.\n\t(defaultJdwpOptions, jdwpOptions, jvmti_agent_onload_func,\n\tjvmti_agent_onunload_func, jvmti_agentonload, jvmti_agentonunload,\n\tjvmti_agent_opts, load_jvmti_agent): Only define if INTERPRETER is\n\tdefined.\n\t(parse_x_arg): Only process 'runjdwp:' if INTERPRETER is defined.\n\t(parse_init_args): Only process jvmti related options if\n\tINTERPRETER is defined.\n\t(_Jv_CreateJavaVM): Only call _Jv_JVMTI_Init if INTERPRETER is\n\tdefined.\n\t(_Jv_RunMain): Only do jvmti and jdwp processing if INTERPRETER is\n\tdefined.\n\t* link.cc (jvmti.h, jvmti-int.h):  Only include if INTERPRETER is\n\tdefined.\n\t(_Jv_ThrowNoClassDefFoundError, _Jv_Linker::create_error_method):\n\tDefine if if INTERPRETER is not defined.\n\t(_Jv_Linker::wait_for_state): Only do jvmti proccessing if\n\tINTERPRETER is defined.\n\t* boehm.cc (closure_list_pointer, finalize_closure_list,\n\t_Jv_ClosureListFinalizer): Only define if INTERPRETER is\n\tdefined.\n\t* java/lang/natThread.cc (jvmti.h, jvmti-int.h):  Only include if\n\tINTERPRETER is defined.\n\t(finish_, _Jv_NotifyThreadStart): Only do jvmti proccessing if\n\tINTERPRETER is defined.\n\t* java/lang/Class.h (_Jv_InterpreterEngine): Move declaration\n\tand friend declaration inside #ifdef INTERPRETER block.\n\t* java/lang/natClass.cc (_Jv_ClosureList::releaseClosures,\n\t_Jv_ClosureList::registerClosure, _Jv_GetInterpClassSourceFile):\n\tOnly define if INTERPRETER is defined.\n\t* java/lang/reflect/natVMProxy.cc (UnsupportedOperationException.h):\n\tInclude.\n\t(generateProxyClass): Throw UnsupportedOperationException unless\n\tINTERPRETER is defined.\n\nFrom-SVN: r127097", "tree": {"sha": "6dc577fa9ea387e1b09b0eeec8e6facca682d8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc577fa9ea387e1b09b0eeec8e6facca682d8c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86acf60c5b442da37c863d0ac3c4e00f12e12d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86acf60c5b442da37c863d0ac3c4e00f12e12d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86acf60c5b442da37c863d0ac3c4e00f12e12d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86acf60c5b442da37c863d0ac3c4e00f12e12d85/comments", "author": null, "committer": null, "parents": [{"sha": "68ae229af3fb05bb303d5f1386baef1529219858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ae229af3fb05bb303d5f1386baef1529219858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ae229af3fb05bb303d5f1386baef1529219858"}], "stats": {"total": 569, "additions": 428, "deletions": 141}, "files": [{"sha": "a4f7f4f52eaf0593a5f66d89de8dbfabfc55f7a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -1,3 +1,82 @@\n+2007-07-31  David Daney  <ddaney@avtrex.com>\n+\n+\t* configure.ac (INTERPRETER): New AM_CONDITIONAL.\n+\t* scripts/makemake.tcl (package_map): Mark jdwp and jvmti packages\n+\tas being for interpreter only.  Place interpreter related files in\n+\t'if INTERPRETER' block.\n+\t(interpreter_package_files): New list.\n+\t(interpreter_header_vars): Ditto.\n+\t(emit_package_rule_to_list): Renamed from emit_package_rule with\n+\tnew target list parameter.\n+\t(emit_package_rule): Rewritten to call emit_package_rule_to_list.\n+\t(emit_interpreter_rule): New function.\n+\t(emit_source_var): Place interpreter related files in\n+\tinterpreter_header_vars.\n+\t* Makefile.am (ACLOCAL_AMFLAGS): Add -I libltdl.\n+\t(libgcj_interpret_source_files): New variable.\n+\t(libgcj_la_SOURCES): Move jvmti.cc and  interpret.cc to\n+\tlibgcj_interpret_source_files and include\n+\tlibgcj_interpret_source_files.\n+\t(nat_jdwp_source_files): New variable.\n+\t(nat_jvmti_source_files): Ditto.\n+\t(nat_source_files): Move jdwp and jvmti related files to\n+\tnat_jdwp_source_files and nat_jvmti_source_files and include\n+\tnat_jdwp_source_files and nat_jvmti_source_files.\n+\t* Makefile.in: Regenerate.\n+\t* include/Makefile.in: Ditto.\n+\t* testsuite/Makefile.in: Ditto.\n+\t* gcj/Makefile.in: Ditto.\n+\t* sources.am: Ditto.\n+\t* configure: Ditto.\n+\t* include/config.h.in: Ditto.\n+\t* interpret.cc: Remove #ifdef INTERPRETER block.\n+\t* stacktrace.cc (UnwindTraceFn): Do not handle proxy frames if\n+\tinterpreter disabled.\n+\t* include/java-interp.h (_Jv_FrameType): Move outside of\n+\t#ifdef INTERPRETER block.\n+\t* include/execution.h (_Jv_IndirectCompiledEngine::do_get_closure_list,\n+\t_Jv_InterpreterEngine, _Jv_soleInterpreterEngine): Place in\n+\t#ifdef INTERPRETER block.\n+\t* jni.cc (jvmti.h, jvmti-int.h):  Only include if INTERPRETER is\n+\tdefined.\n+\t(_Jv_JNI_PopSystemFrame, _Jv_JNI_GetEnv): Only do jvmti processing\n+\tif INTERPRETER is defined.\n+\t* prims.cc (jvmti.h, jvmti-int.h, Jdwp.h, VMVirtualMachine.h):  Only\n+\tinclude if INTERPRETER is defined.\n+\t(defaultJdwpOptions, jdwpOptions, jvmti_agent_onload_func,\n+\tjvmti_agent_onunload_func, jvmti_agentonload, jvmti_agentonunload,\n+\tjvmti_agent_opts, load_jvmti_agent): Only define if INTERPRETER is\n+\tdefined.\n+\t(parse_x_arg): Only process 'runjdwp:' if INTERPRETER is defined.\n+\t(parse_init_args): Only process jvmti related options if\n+\tINTERPRETER is defined.\n+\t(_Jv_CreateJavaVM): Only call _Jv_JVMTI_Init if INTERPRETER is\n+\tdefined.\n+\t(_Jv_RunMain): Only do jvmti and jdwp processing if INTERPRETER is\n+\tdefined.\n+\t* link.cc (jvmti.h, jvmti-int.h):  Only include if INTERPRETER is\n+\tdefined.\n+\t(_Jv_ThrowNoClassDefFoundError, _Jv_Linker::create_error_method):\n+\tDefine if if INTERPRETER is not defined.\n+\t(_Jv_Linker::wait_for_state): Only do jvmti proccessing if\n+\tINTERPRETER is defined.\n+\t* boehm.cc (closure_list_pointer, finalize_closure_list,\n+\t_Jv_ClosureListFinalizer): Only define if INTERPRETER is\n+\tdefined.\n+\t* java/lang/natThread.cc (jvmti.h, jvmti-int.h):  Only include if\n+\tINTERPRETER is defined.\n+\t(finish_, _Jv_NotifyThreadStart): Only do jvmti proccessing if\n+\tINTERPRETER is defined.\n+\t* java/lang/Class.h (_Jv_InterpreterEngine): Move declaration\n+\tand friend declaration inside #ifdef INTERPRETER block.\n+\t* java/lang/natClass.cc (_Jv_ClosureList::releaseClosures,\n+\t_Jv_ClosureList::registerClosure, _Jv_GetInterpClassSourceFile):\n+\tOnly define if INTERPRETER is defined.\n+\t* java/lang/reflect/natVMProxy.cc (UnsupportedOperationException.h):\n+\tInclude.\n+\t(generateProxyClass): Throw UnsupportedOperationException unless\n+\tINTERPRETER is defined.\n+\n 2007-07-29  Matthias Klose  <doko@ubuntu.com>\n \n \t* HACKING: Document regenerating configure."}, {"sha": "8e89f5a846456cbbe7e55f0ade98b3dec7240851", "filename": "libjava/Makefile.am", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -2,7 +2,7 @@\n \n AUTOMAKE_OPTIONS = foreign subdir-objects\n \n-ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n+ACLOCAL_AMFLAGS = -I . -I .. -I ../config -I libltdl\n \n # May be used by various substitution variables.\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n@@ -186,8 +186,14 @@ libgij_la_LIBADD = -L$(here)/.libs libgcj.la\n libgij_la_LDFLAGS = -rpath $(toolexeclibdir) \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n \n-libgcj_la_SOURCES = prims.cc jni.cc jvmti.cc exception.cc stacktrace.cc \\\n-\tlink.cc defineclass.cc interpret.cc verify.cc \\\n+if INTERPRETER\n+libgcj_interpret_source_files = jvmti.cc interpret.cc\n+else\n+libgcj_interpret_source_files = \n+endif\n+\n+libgcj_la_SOURCES = prims.cc jni.cc exception.cc stacktrace.cc \\\n+\tlink.cc defineclass.cc verify.cc $(libgcj_interpret_source_files) \\\n \t$(nat_source_files)\n \n ## We need to compile at least the interpreter this way.\n@@ -830,12 +836,22 @@ grmiregistry_LDADD = -L$(here)/.libs libgcj-tools.la\n grmiregistry_DEPENDENCIES = libgcj-tools.la\n \n ## ################################################################\n+if INTERPRETER\n+nat_jdwp_source_files = \\\n+gnu/classpath/jdwp/natVMFrame.cc \\\n+gnu/classpath/jdwp/natVMMethod.cc \\\n+gnu/classpath/jdwp/natVMVirtualMachine.cc\n \n+nat_jvmti_source_files = \\\n+gnu/gcj/jvmti/natBreakpoint.cc \\\n+gnu/gcj/jvmti/natNormalBreakpoint.cc\n+else\n+nat_jdwp_source_files = \n+nat_jvmti_source_files =\n+endif\n ## This lists all the C++ source files in subdirectories.\n nat_source_files = \\\n-gnu/classpath/jdwp/natVMFrame.cc \\\n-gnu/classpath/jdwp/natVMMethod.cc \\\n-gnu/classpath/jdwp/natVMVirtualMachine.cc \\\n+$(nat_jdwp_source_files) \\\n gnu/classpath/natConfiguration.cc \\\n gnu/classpath/natSystemProperties.cc \\\n gnu/classpath/natVMStackWalker.cc \\\n@@ -850,8 +866,7 @@ gnu/gcj/convert/natOutput_EUCJIS.cc \\\n gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n-gnu/gcj/jvmti/natBreakpoint.cc \\\n-gnu/gcj/jvmti/natNormalBreakpoint.cc \\\n+$(nat_jvmti_source_files) \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\"}, {"sha": "b9cd3c021445b62a27cfcd75ca673f93ffafbaaa", "filename": "libjava/Makefile.in", "status": "modified", "additions": 96, "deletions": 70, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -79,7 +79,8 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../compile \\\n @XLIB_AWT_TRUE@am__append_17 = $(xlib_nat_headers)\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/libltdl/acinclude.m4 \\\n+\t$(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n@@ -155,18 +156,21 @@ lib_gnu_awt_xlib_la_OBJECTS = $(am_lib_gnu_awt_xlib_la_OBJECTS)\n libgcj_tools_la_LIBADD =\n am_libgcj_tools_la_OBJECTS = classpath/tools/libgcj_tools_la-tools.lo\n libgcj_tools_la_OBJECTS = $(am_libgcj_tools_la_OBJECTS)\n-am__DEPENDENCIES_1 = gnu/awt.lo gnu/awt/j2d.lo gnu/classpath.lo \\\n-\tgnu/classpath/debug.lo gnu/classpath/jdwp.lo \\\n-\tgnu/classpath/jdwp/event.lo \\\n-\tgnu/classpath/jdwp/event/filters.lo \\\n-\tgnu/classpath/jdwp/exception.lo gnu/classpath/jdwp/id.lo \\\n-\tgnu/classpath/jdwp/processor.lo \\\n-\tgnu/classpath/jdwp/transport.lo gnu/classpath/jdwp/util.lo \\\n-\tgnu/classpath/jdwp/value.lo gnu/gcj.lo gnu/gcj/convert.lo \\\n-\tgnu/gcj/io.lo gnu/gcj/jvmti.lo gnu/gcj/runtime.lo \\\n-\tgnu/gcj/util.lo gnu/java/awt.lo gnu/java/awt/color.lo \\\n-\tgnu/java/awt/dnd.lo gnu/java/awt/font.lo \\\n-\tgnu/java/awt/font/autofit.lo gnu/java/awt/font/opentype.lo \\\n+@INTERPRETER_TRUE@am__DEPENDENCIES_1 = gnu/classpath/jdwp.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/event.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/event/filters.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/exception.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/id.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/processor.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/transport.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/util.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/value.lo gnu/gcj/jvmti.lo\n+am__DEPENDENCIES_2 = gnu/awt.lo gnu/awt/j2d.lo gnu/classpath.lo \\\n+\tgnu/classpath/debug.lo gnu/gcj.lo gnu/gcj/convert.lo \\\n+\tgnu/gcj/io.lo gnu/gcj/runtime.lo gnu/gcj/util.lo \\\n+\tgnu/java/awt.lo gnu/java/awt/color.lo gnu/java/awt/dnd.lo \\\n+\tgnu/java/awt/font.lo gnu/java/awt/font/autofit.lo \\\n+\tgnu/java/awt/font/opentype.lo \\\n \tgnu/java/awt/font/opentype/truetype.lo gnu/java/awt/image.lo \\\n \tgnu/java/awt/java2d.lo gnu/java/awt/peer.lo \\\n \tgnu/java/awt/peer/headless.lo gnu/java/awt/print.lo \\\n@@ -275,8 +279,9 @@ am__DEPENDENCIES_1 = gnu/awt.lo gnu/awt/j2d.lo gnu/classpath.lo \\\n \tjavax/swing/text/rtf.lo javax/swing/tree.lo \\\n \tjavax/swing/undo.lo javax/transaction.lo \\\n \tjavax/transaction/xa.lo org/ietf/jgss.lo sun/misc.lo \\\n-\tsun/reflect.lo sun/reflect/annotation.lo sun/reflect/misc.lo\n-am__DEPENDENCIES_2 = gnu-CORBA.lo gnu-java-awt-dnd-peer-gtk.lo \\\n+\tsun/reflect.lo sun/reflect/annotation.lo sun/reflect/misc.lo \\\n+\t$(am__DEPENDENCIES_1)\n+am__DEPENDENCIES_3 = gnu-CORBA.lo gnu-java-awt-dnd-peer-gtk.lo \\\n \tgnu-java-awt-peer-gtk.lo gnu-java-awt-peer-swing.lo \\\n \tgnu-java-beans.lo gnu-java-lang-management.lo \\\n \tgnu-java-util-prefs-gconf.lo gnu-javax-management.lo \\\n@@ -286,12 +291,12 @@ am__DEPENDENCIES_2 = gnu-CORBA.lo gnu-java-awt-dnd-peer-gtk.lo \\\n \tgnu-xml-validation.lo gnu-xml-xpath.lo java-lang-management.lo \\\n \tjavax-imageio.lo javax-rmi.lo javax-xml.lo org-omg.lo \\\n \torg-relaxng.lo org-w3c.lo org-xml.lo\n-am__DEPENDENCIES_3 = $(patsubst classpath/resource/%,%,$(addsuffix \\\n+am__DEPENDENCIES_4 = $(patsubst classpath/resource/%,%,$(addsuffix \\\n \t.lo,$(property_files)))\n-am__DEPENDENCIES_4 =\n-am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n-\tstacktrace.cc link.cc defineclass.cc interpret.cc verify.cc \\\n-\tgnu/classpath/jdwp/natVMFrame.cc \\\n+am__DEPENDENCIES_5 =\n+am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n+\tstacktrace.cc link.cc defineclass.cc verify.cc jvmti.cc \\\n+\tinterpret.cc gnu/classpath/jdwp/natVMFrame.cc \\\n \tgnu/classpath/jdwp/natVMMethod.cc \\\n \tgnu/classpath/jdwp/natVMVirtualMachine.cc \\\n \tgnu/classpath/natConfiguration.cc \\\n@@ -355,10 +360,13 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tjava/util/zip/natInflater.cc sun/misc/natUnsafe.cc boehm.cc \\\n \tnogc.cc posix.cc win32.cc darwin.cc posix-threads.cc \\\n \twin32-threads.cc no-threads.cc\n-am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n-\tgnu/classpath/jdwp/natVMMethod.lo \\\n-\tgnu/classpath/jdwp/natVMVirtualMachine.lo \\\n-\tgnu/classpath/natConfiguration.lo \\\n+@INTERPRETER_TRUE@am__objects_2 = jvmti.lo interpret.lo\n+@INTERPRETER_TRUE@am__objects_3 = gnu/classpath/jdwp/natVMFrame.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/natVMMethod.lo \\\n+@INTERPRETER_TRUE@\tgnu/classpath/jdwp/natVMVirtualMachine.lo\n+@INTERPRETER_TRUE@am__objects_4 = gnu/gcj/jvmti/natBreakpoint.lo \\\n+@INTERPRETER_TRUE@\tgnu/gcj/jvmti/natNormalBreakpoint.lo\n+am__objects_5 = $(am__objects_3) gnu/classpath/natConfiguration.lo \\\n \tgnu/classpath/natSystemProperties.lo \\\n \tgnu/classpath/natVMStackWalker.lo gnu/gcj/natCore.lo \\\n \tgnu/gcj/convert/JIS0208_to_Unicode.lo \\\n@@ -369,9 +377,7 @@ am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n \tgnu/gcj/convert/natOutput_EUCJIS.lo \\\n \tgnu/gcj/convert/natOutput_SJIS.lo \\\n \tgnu/gcj/io/natSimpleSHSStream.lo gnu/gcj/io/shs.lo \\\n-\tgnu/gcj/jvmti/natBreakpoint.lo \\\n-\tgnu/gcj/jvmti/natNormalBreakpoint.lo \\\n-\tgnu/gcj/runtime/natFinalizerThread.lo \\\n+\t$(am__objects_4) gnu/gcj/runtime/natFinalizerThread.lo \\\n \tgnu/gcj/runtime/natSharedLibLoader.lo \\\n \tgnu/gcj/runtime/natSystemClassLoader.lo \\\n \tgnu/gcj/runtime/natStringBuffer.lo gnu/gcj/util/natDebug.lo \\\n@@ -417,19 +423,19 @@ am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n \tjava/util/concurrent/atomic/natAtomicLong.lo \\\n \tjava/util/logging/natLogger.lo java/util/zip/natDeflater.lo \\\n \tjava/util/zip/natInflater.lo sun/misc/natUnsafe.lo\n-@USING_BOEHMGC_TRUE@am__objects_3 = boehm.lo\n-@USING_NOGC_TRUE@am__objects_4 = nogc.lo\n-@USING_POSIX_PLATFORM_TRUE@am__objects_5 = posix.lo\n-@USING_WIN32_PLATFORM_TRUE@am__objects_6 = win32.lo\n-@USING_DARWIN_CRT_TRUE@am__objects_7 = darwin.lo\n-@USING_POSIX_THREADS_TRUE@am__objects_8 = posix-threads.lo\n-@USING_WIN32_THREADS_TRUE@am__objects_9 = win32-threads.lo\n-@USING_NO_THREADS_TRUE@am__objects_10 = no-threads.lo\n-am_libgcj_la_OBJECTS = prims.lo jni.lo jvmti.lo exception.lo \\\n-\tstacktrace.lo link.lo defineclass.lo interpret.lo verify.lo \\\n-\t$(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n+@USING_BOEHMGC_TRUE@am__objects_6 = boehm.lo\n+@USING_NOGC_TRUE@am__objects_7 = nogc.lo\n+@USING_POSIX_PLATFORM_TRUE@am__objects_8 = posix.lo\n+@USING_WIN32_PLATFORM_TRUE@am__objects_9 = win32.lo\n+@USING_DARWIN_CRT_TRUE@am__objects_10 = darwin.lo\n+@USING_POSIX_THREADS_TRUE@am__objects_11 = posix-threads.lo\n+@USING_WIN32_THREADS_TRUE@am__objects_12 = win32-threads.lo\n+@USING_NO_THREADS_TRUE@am__objects_13 = no-threads.lo\n+am_libgcj_la_OBJECTS = prims.lo jni.lo exception.lo stacktrace.lo \\\n+\tlink.lo defineclass.lo verify.lo $(am__objects_2) \\\n \t$(am__objects_5) $(am__objects_6) $(am__objects_7) \\\n-\t$(am__objects_8) $(am__objects_9) $(am__objects_10)\n+\t$(am__objects_8) $(am__objects_9) $(am__objects_10) \\\n+\t$(am__objects_11) $(am__objects_12) $(am__objects_13)\n libgcj_la_OBJECTS = $(am_libgcj_la_OBJECTS)\n am_libgcj_bc_la_OBJECTS = libgcj_bc.lo\n libgcj_bc_la_OBJECTS = $(am_libgcj_bc_la_OBJECTS)\n@@ -624,6 +630,8 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n INTERPRETER = @INTERPRETER@\n+INTERPRETER_FALSE = @INTERPRETER_FALSE@\n+INTERPRETER_TRUE = @INTERPRETER_TRUE@\n JAR = @JAR@\n JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@\n@@ -800,7 +808,7 @@ toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n toolexecmainlibdir = @toolexecmainlibdir@\n AUTOMAKE_OPTIONS = foreign subdir-objects\n-ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n+ACLOCAL_AMFLAGS = -I . -I .. -I ../config -I libltdl\n \n # May be used by various substitution variables.\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n@@ -890,8 +898,10 @@ libgij_la_LIBADD = -L$(here)/.libs libgcj.la\n libgij_la_LDFLAGS = -rpath $(toolexeclibdir) \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n \n-libgcj_la_SOURCES = prims.cc jni.cc jvmti.cc exception.cc \\\n-\tstacktrace.cc link.cc defineclass.cc interpret.cc verify.cc \\\n+@INTERPRETER_FALSE@libgcj_interpret_source_files = \n+@INTERPRETER_TRUE@libgcj_interpret_source_files = jvmti.cc interpret.cc\n+libgcj_la_SOURCES = prims.cc jni.cc exception.cc stacktrace.cc link.cc \\\n+\tdefineclass.cc verify.cc $(libgcj_interpret_source_files) \\\n \t$(nat_source_files) $(am__append_7) $(am__append_8) \\\n \t$(am__append_9) $(am__append_10) $(am__append_11) \\\n \t$(am__append_12) $(am__append_13) $(am__append_14)\n@@ -7307,24 +7317,40 @@ sun_reflect_misc_source_files = \\\n sun/reflect/misc/ReflectUtil.java\n \n sun_reflect_misc_header_files = $(patsubst %.java,%.h,$(sun_reflect_misc_source_files))\n+@INTERPRETER_FALSE@interpreter_packages_source_files = \n+@INTERPRETER_TRUE@interpreter_packages_source_files = \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/event.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/event/filters.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/exception.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/id.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/processor.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/transport.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/util.list \\\n+@INTERPRETER_TRUE@  gnu/classpath/jdwp/value.list \\\n+@INTERPRETER_TRUE@  gnu/gcj/jvmti.list\n+\n+@INTERPRETER_FALSE@interpreter_header_files = \n+@INTERPRETER_TRUE@interpreter_header_files = \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_event_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_event_filters_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_exception_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_id_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_processor_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_transport_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_util_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_classpath_jdwp_value_header_files) \\\n+@INTERPRETER_TRUE@  $(gnu_gcj_jvmti_header_files)\n+\n all_packages_source_files = \\\n   gnu/awt.list \\\n   gnu/awt/j2d.list \\\n   gnu/classpath.list \\\n   gnu/classpath/debug.list \\\n-  gnu/classpath/jdwp.list \\\n-  gnu/classpath/jdwp/event.list \\\n-  gnu/classpath/jdwp/event/filters.list \\\n-  gnu/classpath/jdwp/exception.list \\\n-  gnu/classpath/jdwp/id.list \\\n-  gnu/classpath/jdwp/processor.list \\\n-  gnu/classpath/jdwp/transport.list \\\n-  gnu/classpath/jdwp/util.list \\\n-  gnu/classpath/jdwp/value.list \\\n   gnu/gcj.list \\\n   gnu/gcj/convert.list \\\n   gnu/gcj/io.list \\\n-  gnu/gcj/jvmti.list \\\n   gnu/gcj/runtime.list \\\n   gnu/gcj/util.list \\\n   gnu/java/awt.list \\\n@@ -7558,26 +7584,17 @@ all_packages_source_files = \\\n   sun/misc.list \\\n   sun/reflect.list \\\n   sun/reflect/annotation.list \\\n-  sun/reflect/misc.list\n+  sun/reflect/misc.list \\\n+  $(interpreter_packages_source_files)\n \n ordinary_header_files = \\\n   $(gnu_awt_header_files) \\\n   $(gnu_awt_j2d_header_files) \\\n   $(gnu_classpath_header_files) \\\n   $(gnu_classpath_debug_header_files) \\\n-  $(gnu_classpath_jdwp_header_files) \\\n-  $(gnu_classpath_jdwp_event_header_files) \\\n-  $(gnu_classpath_jdwp_event_filters_header_files) \\\n-  $(gnu_classpath_jdwp_exception_header_files) \\\n-  $(gnu_classpath_jdwp_id_header_files) \\\n-  $(gnu_classpath_jdwp_processor_header_files) \\\n-  $(gnu_classpath_jdwp_transport_header_files) \\\n-  $(gnu_classpath_jdwp_util_header_files) \\\n-  $(gnu_classpath_jdwp_value_header_files) \\\n   $(gnu_gcj_header_files) \\\n   $(gnu_gcj_convert_header_files) \\\n   $(gnu_gcj_io_header_files) \\\n-  $(gnu_gcj_jvmti_header_files) \\\n   $(gnu_gcj_runtime_header_files) \\\n   $(gnu_gcj_tools_gcj_dbtool_header_files) \\\n   $(gnu_gcj_util_header_files) \\\n@@ -7808,7 +7825,8 @@ ordinary_header_files = \\\n   $(sun_misc_header_files) \\\n   $(sun_reflect_header_files) \\\n   $(sun_reflect_annotation_header_files) \\\n-  $(sun_reflect_misc_header_files)\n+  $(sun_reflect_misc_header_files) \\\n+  $(interpreter_header_files)\n \n bc_objects = \\\n   gnu-CORBA.lo \\\n@@ -8046,10 +8064,19 @@ grmiregistry_LDFLAGS = --main=gnu.classpath.tools.rmiregistry.Main \\\n grmiregistry_LINK = $(GCJLINK)\n grmiregistry_LDADD = -L$(here)/.libs libgcj-tools.la\n grmiregistry_DEPENDENCIES = libgcj-tools.la\n+@INTERPRETER_FALSE@nat_jdwp_source_files = \n+@INTERPRETER_TRUE@nat_jdwp_source_files = \\\n+@INTERPRETER_TRUE@gnu/classpath/jdwp/natVMFrame.cc \\\n+@INTERPRETER_TRUE@gnu/classpath/jdwp/natVMMethod.cc \\\n+@INTERPRETER_TRUE@gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\n+@INTERPRETER_FALSE@nat_jvmti_source_files = \n+@INTERPRETER_TRUE@nat_jvmti_source_files = \\\n+@INTERPRETER_TRUE@gnu/gcj/jvmti/natBreakpoint.cc \\\n+@INTERPRETER_TRUE@gnu/gcj/jvmti/natNormalBreakpoint.cc\n+\n nat_source_files = \\\n-gnu/classpath/jdwp/natVMFrame.cc \\\n-gnu/classpath/jdwp/natVMMethod.cc \\\n-gnu/classpath/jdwp/natVMVirtualMachine.cc \\\n+$(nat_jdwp_source_files) \\\n gnu/classpath/natConfiguration.cc \\\n gnu/classpath/natSystemProperties.cc \\\n gnu/classpath/natVMStackWalker.cc \\\n@@ -8064,8 +8091,7 @@ gnu/gcj/convert/natOutput_EUCJIS.cc \\\n gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n-gnu/gcj/jvmti/natBreakpoint.cc \\\n-gnu/gcj/jvmti/natNormalBreakpoint.cc \\\n+$(nat_jvmti_source_files) \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\\n@@ -9726,7 +9752,7 @@ distclean-tags:\n distdir: $(DISTFILES)\n \t$(am__remove_distdir)\n \tmkdir $(distdir)\n-\t$(mkdir_p) $(distdir)/. $(distdir)/.. $(distdir)/../config $(distdir)/scripts\n+\t$(mkdir_p) $(distdir)/. $(distdir)/.. $(distdir)/../config $(distdir)/libltdl $(distdir)/scripts\n \t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n \ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n \tlist='$(DISTFILES)'; for file in $$list; do \\"}, {"sha": "4a7fc4a82302ccc6ab90c9eae33618adfd39feb8", "filename": "libjava/boehm.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -380,6 +380,7 @@ _Jv_AllocRawObj (jsize size)\n   return (void *) GC_MALLOC (size ? size : 1);\n }\n \n+#ifdef INTERPRETER\n typedef _Jv_ClosureList *closure_list_pointer;\n \n /* Release closures in a _Jv_ClosureList.  */\n@@ -402,6 +403,7 @@ _Jv_ClosureListFinalizer ()\n \t\t\t\t     NULL, NULL, NULL);\n   return clpp;\n }\n+#endif // INTERPRETER\n \n static void\n call_finalizer (GC_PTR obj, GC_PTR client_data)"}, {"sha": "174cac7370433c219d9a6573b5c1bb29bba6d943", "filename": "libjava/configure", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -459,7 +459,7 @@ ac_includes_default=\"\\\n #endif\"\n \n ac_subdirs_all=\"$ac_subdirs_all classpath libltdl\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM lt_ECHO CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM lt_ECHO CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER INTERPRETER_TRUE INTERPRETER_FALSE LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -18487,6 +18487,16 @@ fi\n INTERPRETER=\"$libgcj_interpreter\"\n \n \n+\n+if test \"$libgcj_interpreter\" = yes; then\n+  INTERPRETER_TRUE=\n+  INTERPRETER_FALSE='#'\n+else\n+  INTERPRETER_TRUE='#'\n+  INTERPRETER_FALSE=\n+fi\n+\n+\n echo \"$as_me:$LINENO: checking for exception model to use\" >&5\n echo $ECHO_N \"checking for exception model to use... $ECHO_C\" >&6\n ac_ext=cc\n@@ -18501,7 +18511,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 18504 \"configure\"\n+#line 18514 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -27948,6 +27958,13 @@ echo \"$as_me: error: conditional \\\"JAVA_HOME_SET\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${INTERPRETER_TRUE}\" && test -z \"${INTERPRETER_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"INTERPRETER\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"INTERPRETER\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${USING_WIN32_PLATFORM_TRUE}\" && test -z \"${USING_WIN32_PLATFORM_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"USING_WIN32_PLATFORM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -29180,6 +29197,8 @@ s,@JAVA_HOME_SET_TRUE@,$JAVA_HOME_SET_TRUE,;t t\n s,@JAVA_HOME_SET_FALSE@,$JAVA_HOME_SET_FALSE,;t t\n s,@JAVA_HOME@,$JAVA_HOME,;t t\n s,@INTERPRETER@,$INTERPRETER,;t t\n+s,@INTERPRETER_TRUE@,$INTERPRETER_TRUE,;t t\n+s,@INTERPRETER_FALSE@,$INTERPRETER_FALSE,;t t\n s,@LIBFFI@,$LIBFFI,;t t\n s,@LIBFFIINCS@,$LIBFFIINCS,;t t\n s,@PLATFORM@,$PLATFORM,;t t"}, {"sha": "70af506dd0f40bbadeef097e50ece7aacdb58534", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -564,6 +564,7 @@ if test \"$libgcj_interpreter\" = yes; then\n fi\n INTERPRETER=\"$libgcj_interpreter\"\n AC_SUBST(INTERPRETER)\n+AM_CONDITIONAL(INTERPRETER, test \"$libgcj_interpreter\" = yes)\n \n AC_MSG_CHECKING([for exception model to use])\n AC_LANG_PUSH(C++)"}, {"sha": "8b4c28ec229115dff0b546bf517cf14a791ce559", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -42,7 +42,9 @@ DIST_COMMON = $(gcj_HEADERS) $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(srcdir)/libgcj-config.h.in \\\n \t$(toolgcj_HEADERS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/libltdl/acinclude.m4 \\\n+\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n@@ -57,10 +59,11 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/tls.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n-\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltgcc.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/mingwld.m4 \\\n+\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/include/config.h libgcj-config.h\n@@ -150,6 +153,8 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n INTERPRETER = @INTERPRETER@\n+INTERPRETER_FALSE = @INTERPRETER_FALSE@\n+INTERPRETER_TRUE = @INTERPRETER_TRUE@\n JAR = @JAR@\n JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@"}, {"sha": "49f8767e09ce54df9d017c0f79db038c2a80df1c", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -41,7 +41,9 @@ subdir = include\n DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(srcdir)/config.h.in $(tool_include__HEADERS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/libltdl/acinclude.m4 \\\n+\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n@@ -56,10 +58,11 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/tls.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n-\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltgcc.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/mingwld.m4 \\\n+\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = config.h $(top_builddir)/gcj/libgcj-config.h\n@@ -149,6 +152,8 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n INTERPRETER = @INTERPRETER@\n+INTERPRETER_FALSE = @INTERPRETER_FALSE@\n+INTERPRETER_TRUE = @INTERPRETER_TRUE@\n JAR = @JAR@\n JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@"}, {"sha": "99da702417cc82d3b11237b992c5f8de969bb39f", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -46,6 +46,9 @@\n /* Define to 1 if you have the <bstring.h> header file. */\n #undef HAVE_BSTRING_H\n \n+/* Define to 1 if the target assembler supports thread-local storage. */\n+#undef HAVE_CC_TLS\n+\n /* Define to 1 if you have the `chmod' function. */\n #undef HAVE_CHMOD\n \n@@ -379,6 +382,10 @@\n    library search path. */\n #undef LTDL_SHLIBPATH_VAR\n \n+/* Define to the sub-directory in which libtool stores uninstalled libraries.\n+   */\n+#undef LT_OBJDIR\n+\n /* Define if MinGW libgcj uses the Windows UNICODE OS API. */\n #undef MINGW_LIBGCJ_UNICODE\n "}, {"sha": "c48b2fc32736b801985e0a03ad11f1b998eef1ca", "filename": "libjava/include/execution.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fexecution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fexecution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fexecution.h?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -199,6 +199,7 @@ struct _Jv_IndirectCompiledEngine : public _Jv_CompiledEngine\n     _Jv_Free (aux->field_initializers);\n   }\n \n+#ifdef INTERPRETER\n   static _Jv_ClosureList **do_get_closure_list (jclass klass)\n   {\n     _Jv_IndirectCompiledClass *aux = get_aux_info (klass);\n@@ -208,9 +209,10 @@ struct _Jv_IndirectCompiledEngine : public _Jv_CompiledEngine\n \n     return aux->closures;\n   }\n+#endif\n };\n \n-\n+#ifdef INTERPRETER\n \n // This handles interpreted code.\n class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n@@ -266,8 +268,9 @@ class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n   }\n };\n \n-\n extern _Jv_InterpreterEngine _Jv_soleInterpreterEngine;\n+#endif // INTERPRETER\n+\n extern _Jv_CompiledEngine _Jv_soleCompiledEngine;\n extern _Jv_IndirectCompiledEngine _Jv_soleIndirectCompiledEngine;\n #endif // __JAVA_EXECUTION_H__"}, {"sha": "b0d0da411c1f85d8b3d583fe8cd80dd22aef45b7", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -15,6 +15,13 @@ details.  */\n #include <java-cpool.h>\n #include <gnu/gcj/runtime/NameFinder.h>\n \n+enum _Jv_FrameType\n+{\n+  frame_native,\n+  frame_interpreter,\n+  frame_proxy\n+};\n+\n #ifdef INTERPRETER\n \n #pragma interface\n@@ -373,13 +380,6 @@ class _Jv_JNIMethod : public _Jv_MethodBase\n   }\n };\n \n-enum _Jv_FrameType\n-{\n-  frame_native,\n-  frame_interpreter,\n-  frame_proxy\n-};\n-\n //  The composite call stack as represented by a linked list of frames\n class _Jv_Frame\n {"}, {"sha": "0622c3998f3c5bde7963d49707832045cc213a6b", "filename": "libjava/interpret.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -43,8 +43,6 @@ details.  */\n #include <gnu/gcj/jvmti/Breakpoint.h>\n #include <gnu/gcj/jvmti/BreakpointManager.h>\n \n-#ifdef INTERPRETER\n-\n // Execution engine for interpreted code.\n _Jv_InterpreterEngine _Jv_soleInterpreterEngine;\n \n@@ -1932,5 +1930,3 @@ _Jv_CompileMethod (_Jv_InterpMethod* method)\n     }\n }\n #endif // DIRECT_THREADED\n-\n-#endif // INTERPRETER"}, {"sha": "d4a918483c3025078fbc45c5ac54666e9c7e2ef4", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -97,9 +97,9 @@ class _Jv_Linker;\n class _Jv_ExecutionEngine;\n class _Jv_CompiledEngine;\n class _Jv_IndirectCompiledEngine;\n-class _Jv_InterpreterEngine;\n \n #ifdef INTERPRETER\n+class _Jv_InterpreterEngine;\n class _Jv_ClassReader;\n class _Jv_InterpClass;\n class _Jv_InterpMethod;\n@@ -619,6 +619,7 @@ class java::lang::Class : public java::lang::Object\n   friend class ::_Jv_ClassReader;\t\n   friend class ::_Jv_InterpClass;\n   friend class ::_Jv_InterpMethod;\n+  friend class ::_Jv_InterpreterEngine;\n #endif\n   friend class ::_Jv_StackTrace;\n \n@@ -633,7 +634,6 @@ class java::lang::Class : public java::lang::Object\n   friend class ::_Jv_ExecutionEngine;\n   friend class ::_Jv_CompiledEngine;\n   friend class ::_Jv_IndirectCompiledEngine;\n-  friend class ::_Jv_InterpreterEngine;\n   friend class ::_Jv_ClosureList;\n \n   friend void ::_Jv_sharedlib_register_hook (jclass klass);"}, {"sha": "47d7739c71509f4d21de2be8e8e915a82fa952a4", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -671,6 +671,7 @@ java::lang::Class::finalize (void)\n   engine->unregister(this);\n }\n \n+#ifdef INTERPRETER\n void\n _Jv_ClosureList::releaseClosures (_Jv_ClosureList **closures)\n {\n@@ -692,6 +693,7 @@ _Jv_ClosureList::registerClosure (jclass klass, void *ptr)\n   this->next = *closures;\n   *closures = this;\n }\n+#endif\n \n // This implements the initialization process for a class.  From Spec\n // section 12.4.2.\n@@ -2065,6 +2067,7 @@ _Jv_GetClassState (jclass klass)\n   return klass->state;\n }\n \n+#ifdef INTERPRETER\n jstring\n _Jv_GetInterpClassSourceFile (jclass klass)\n {\n@@ -2077,3 +2080,4 @@ _Jv_GetInterpClassSourceFile (jclass klass)\n \n   return NULL;\n }\n+#endif"}, {"sha": "d6abff13f54cf95d4d718e02a9597c08967cf7ca", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -27,8 +27,11 @@ details.  */\n #include <java/lang/NullPointerException.h>\n \n #include <jni.h>\n+\n+#ifdef INTERPRETER\n #include <jvmti.h>\n #include \"jvmti-int.h\"\n+#endif\n \n #ifdef ENABLE_JVMPI\n #include <jvmpi.h>\n@@ -217,8 +220,10 @@ java::lang::Thread::finish_ ()\n   nt->park_helper.deactivate ();\n   group->removeThread (this);\n \n+#ifdef INTERPRETER\n   if (JVMTI_REQUESTED_EVENT (ThreadEnd))\n     _Jv_JVMTI_PostEvent (JVMTI_EVENT_THREAD_END, this, nt->jni_env);\n+#endif\n \n #ifdef ENABLE_JVMPI  \n   if (_Jv_JVMPI_Notify_THREAD_END)\n@@ -258,11 +263,13 @@ java::lang::Thread::finish_ ()\n static void\n _Jv_NotifyThreadStart (java::lang::Thread* thread)\n {\n+#ifdef INTERPRETER\n   if (JVMTI_REQUESTED_EVENT (ThreadStart))\n     {\n       natThread *nt = reinterpret_cast<natThread *> (thread->data);\n       _Jv_JVMTI_PostEvent (JVMTI_EVENT_THREAD_START, thread, nt->jni_env);\n     }\n+#endif\n \n #ifdef ENABLE_JVMPI\n       if (_Jv_JVMPI_Notify_THREAD_START)"}, {"sha": "a1b7dfcc3988cfd96993b57eb959649a04b05fa6", "filename": "libjava/java/lang/reflect/natVMProxy.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -42,6 +42,7 @@ details.  */\n #include <java/lang/IllegalArgumentException.h>\n #include <java/lang/Integer.h>\n #include <java/lang/StringBuffer.h>\n+#include <java/lang/UnsupportedOperationException.h>\n #include <java/lang/VMClassLoader.h>\n #include <java/lang/VMCompiler.h>\n #include <java/lang/reflect/InvocationHandler.h>\n@@ -65,6 +66,15 @@ details.  */\n using namespace java::lang::reflect;\n using namespace java::lang;\n \n+#ifndef INTERPRETER\n+jclass\n+java::lang::reflect::VMProxy::generateProxyClass\n+  (ClassLoader *, Proxy$ProxyData *)\n+{\n+  throw new UnsupportedOperationException (\n+    JvNewStringLatin1 (\"Interpreter not available\"));\n+}\n+#else\n typedef void (*closure_fun) (ffi_cif*, void*, void**, void*);\n static void *ncode (int method_index, jclass klass, _Jv_Method *self, closure_fun fun);\n static void run_proxy (ffi_cif*, void*, void**, void*);\n@@ -444,3 +454,5 @@ ncode (int method_index, jclass klass, _Jv_Method *self, closure_fun fun)\n   self->ncode = code;\n   return self->ncode;\n }\n+\n+#endif // INTERPRETER"}, {"sha": "8660753ee9b31f7f631121b4b8eaea9c3fbcd734", "filename": "libjava/jni.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -22,9 +22,10 @@ details.  */\n #ifdef ENABLE_JVMPI\n #include <jvmpi.h>\n #endif\n+#ifdef INTERPRETER\n #include <jvmti.h>\n #include \"jvmti-int.h\"\n-\n+#endif\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Throwable.h>\n@@ -452,7 +453,8 @@ _Jv_JNI_PopSystemFrame (JNIEnv *env)\n     _Jv_JNI_PopLocalFrame (env, NULL, MARK_SYSTEM);\n   else\n     env->locals = NULL;\n-  \n+\n+#ifdef INTERPRETER\n   if (__builtin_expect (env->ex != NULL, false))\n     {\n       jthrowable t = env->ex;\n@@ -461,6 +463,7 @@ _Jv_JNI_PopSystemFrame (JNIEnv *env)\n \t_Jv_ReportJVMTIExceptionThrow (t);\n       throw t;\n     }\n+#endif\n }\n \n template<typename T> T extract_from_jvalue(jvalue const & t);\n@@ -2535,12 +2538,14 @@ _Jv_JNI_GetEnv (JavaVM *, void **penv, jint version)\n     }\n #endif\n \n+#ifdef INTERPRETER\n   // Handle JVMTI requests\n   if (version == JVMTI_VERSION_1_0)\n     {\n       *penv = (void *) _Jv_GetJVMTIEnv ();\n       return 0;\n     }\n+#endif\n \n   // FIXME: do we really want to support 1.1?\n   if (version != JNI_VERSION_1_4 && version != JNI_VERSION_1_2"}, {"sha": "3b4f37d1d3c43abd17c5aa035c8c1942948fdc88", "filename": "libjava/link.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -33,8 +33,10 @@ details.  */\n #include <limits.h>\n #include <java-cpool.h>\n #include <execution.h>\n+#ifdef INTERPRETER\n #include <jvmti.h>\n #include \"jvmti-int.h\"\n+#endif\n #include <java/lang/Class.h>\n #include <java/lang/String.h>\n #include <java/lang/StringBuffer.h>\n@@ -853,7 +855,7 @@ _Jv_ThrowNoSuchMethodError ()\n   throw new java::lang::NoSuchMethodError;\n }\n \n-#if defined USE_LIBFFI && FFI_CLOSURES\n+#if defined USE_LIBFFI && FFI_CLOSURES && defined(INTERPRETER)\n // A function whose invocation is prepared using libffi. It gets called\n // whenever a static method of a missing class is invoked. The data argument\n // holds a reference to a String denoting the missing class.\n@@ -1039,7 +1041,7 @@ _Jv_Linker::find_iindex (jclass *ifaces, jshort *offsets, jshort num)\n   return i;\n }\n \n-#if defined USE_LIBFFI && FFI_CLOSURES\n+#if defined USE_LIBFFI && FFI_CLOSURES && defined(INTERPRETER)\n // We use a structure of this type to store the closure that\n // represents a missing method.\n struct method_closure\n@@ -2069,6 +2071,7 @@ _Jv_Linker::wait_for_state (jclass klass, int state)\n       throw new java::lang::LinkageError;\n   }\n \n+#ifdef INTERPRETER\n   if (__builtin_expect (klass->state == JV_STATE_LINKED, false)\n       && state >= JV_STATE_LINKED\n       && JVMTI_REQUESTED_EVENT (ClassPrepare))\n@@ -2077,4 +2080,5 @@ _Jv_Linker::wait_for_state (jclass klass, int state)\n       _Jv_JVMTI_PostEvent (JVMTI_EVENT_CLASS_PREPARE, self, jni_env,\n \t\t\t   klass);\n     }\n+#endif\n }"}, {"sha": "d94cd92cbc73fbb852240290223386f77a916a22", "filename": "libjava/prims.cc", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -32,8 +32,10 @@ details.  */\n #include <java/lang/ThreadGroup.h>\n #endif\n \n+#ifdef INTERPRETER\n #include <jvmti.h>\n #include \"jvmti-int.h\"\n+#endif\n \n #ifndef DISABLE_GETENV_PROPERTIES\n #include <ctype.h>\n@@ -67,8 +69,12 @@ details.  */\n #include <gnu/gcj/runtime/ExtensionClassLoader.h>\n #include <gnu/gcj/runtime/FinalizerThread.h>\n #include <execution.h>\n+\n+#ifdef INTERPRETER\n #include <gnu/classpath/jdwp/Jdwp.h>\n #include <gnu/classpath/jdwp/VMVirtualMachine.h>\n+#endif // INTERPRETER\n+\n #include <gnu/java/lang/MainThread.h>\n \n #ifdef USE_LTDL\n@@ -105,6 +111,7 @@ int _Jv_argc;\n \n // Debugging options\n static bool remoteDebug = false;\n+#ifdef INTERPRETER\n static char defaultJdwpOptions[] = \"\";\n static char *jdwpOptions = defaultJdwpOptions;\n \n@@ -117,6 +124,7 @@ typedef jint jvmti_agent_onunload_func (JavaVM *vm);\n static jvmti_agent_onload_func *jvmti_agentonload = NULL;\n static jvmti_agent_onunload_func *jvmti_agentonunload = NULL;\n static char *jvmti_agent_opts;\n+#endif // INTERPRETER\n \n // Argument support.\n int\n@@ -1173,6 +1181,7 @@ parse_x_arg (char* option_string)\n     {\n       remoteDebug = true;\n     }\n+#ifdef INTERPRETER\n   else if (! strncmp (option_string, \"runjdwp:\", 8))\n     {\n       if (strlen (option_string) > 8)\n@@ -1184,6 +1193,7 @@ parse_x_arg (char* option_string)\n \t  return -1;\n \t}\n     }\n+#endif // INTERPRETER\n   else if (! strncmp (option_string, \"bootclasspath:\", 14))\n     {\n       // FIXME: add a parse_bootclasspath_arg function\n@@ -1372,6 +1382,7 @@ parse_verbose_args (char* option_string,\n   return 0;\n }\n \n+#ifdef INTERPRETER\n // This function loads the agent functions for JVMTI from the library indicated\n // by name.  It returns a negative value on failure, the value of which\n // indicates where ltdl failed, it also prints an error message.\n@@ -1427,6 +1438,7 @@ load_jvmti_agent (const char *name)\n   // If LTDL cannot be used, return an error code indicating this.\n   return -99;\n }\n+#endif // INTERPRETER\n \n static jint\n parse_init_args (JvVMInitArgs* vm_args)\n@@ -1481,6 +1493,7 @@ parse_init_args (JvVMInitArgs* vm_args)\n \n \t  continue;\n \t}\n+#ifdef INTERPRETER\n       else if (! strncmp (option_string, \"-agentlib\", sizeof (\"-agentlib\") - 1))\n \t{\n           char *strPtr;\n@@ -1575,6 +1588,7 @@ parse_init_args (JvVMInitArgs* vm_args)\n \t  JVMTI::enabled = true;\n           continue;\n \t}\n+#endif // INTERPRETER\n       else\n         {\n \t  int r = -1;\n@@ -1666,7 +1680,10 @@ _Jv_CreateJavaVM (JvVMInitArgs* vm_args)\n   _Jv_platform_initialize ();\n \n   _Jv_JNI_Init ();\n+\n+#ifdef INTERPRETER\n   _Jv_JVMTI_Init ();\n+#endif\n \n   _Jv_GCInitializeFinalizers (&::gnu::gcj::runtime::FinalizerThread::finalizerReady);\n \n@@ -1734,7 +1751,8 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n \tmain_thread = new MainThread (JvNewStringUTF (name),\n \t\t\t\t      arg_vec, is_jar);\n       _Jv_AttachCurrentThread (main_thread);\n-      \n+\n+#ifdef INTERPRETER\n       // Start JVMTI if an agent function has been found.\n       if (jvmti_agentonload)\n         (*jvmti_agentonload) (_Jv_GetJavaVM (), jvmti_agent_opts, NULL);\n@@ -1755,6 +1773,7 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n       // Send VMInit\n       if (JVMTI_REQUESTED_EVENT (VMInit))\n \t_Jv_JVMTI_PostEvent (JVMTI_EVENT_VM_INIT, main_thread);\n+#endif // INTERPRETER\n     }\n   catch (java::lang::Throwable *t)\n     {\n@@ -1769,17 +1788,19 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n \n   _Jv_ThreadRun (main_thread);\n \n+#ifdef INTERPRETER\n   // Send VMDeath\n   if (JVMTI_REQUESTED_EVENT (VMDeath))\n     {\n       java::lang::Thread *thread = java::lang::Thread::currentThread ();\n       JNIEnv *jni_env = _Jv_GetCurrentJNIEnv ();\n       _Jv_JVMTI_PostEvent (JVMTI_EVENT_VM_DEATH, thread, jni_env);\n     }\n-    \n-   // Run JVMTI AgentOnUnload if it exists and an agent is loaded.\n+\n+  // Run JVMTI AgentOnUnload if it exists and an agent is loaded.\n   if (jvmti_agentonunload)\n     (*jvmti_agentonunload) (_Jv_GetJavaVM ());\n+#endif // INTERPRETER\n \n   // If we got here then something went wrong, as MainThread is not\n   // supposed to terminate."}, {"sha": "b1789a16d89cacbd9b8b9afa558433ae655b93c2", "filename": "libjava/scripts/makemake.tcl", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fscripts%2Fmakemake.tcl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fscripts%2Fmakemake.tcl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fmakemake.tcl?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -36,6 +36,11 @@ proc verbose {text} {\n #         objects in this package are not used.  Note however that\n #         most ignored files are actually handled by listing them in\n #         'standard.omit'\n+# * interpreter\n+#         objects in this package (and possibly sub-packages,\n+#         if they do not appear in the map) are only compiled if\n+#         the interpreter is enabled.  They are compiled as with the\n+#         'package' specifier.\n #\n # If a package does not appear in the map, the default is 'package'.\n global package_map\n@@ -93,6 +98,19 @@ set package_map(gnu/javax/swing/text/html/parser/support) package\n set package_map(gnu/gcj/xlib) package\n set package_map(gnu/awt/xlib) package\n \n+# These packages should only be included if the interpreter is\n+# enabled.\n+set package_map(gnu/classpath/jdwp) interpreter\n+set package_map(gnu/classpath/jdwp/event) interpreter\n+set package_map(gnu/classpath/jdwp/event/filters) interpreter\n+set package_map(gnu/classpath/jdwp/exception) interpreter\n+set package_map(gnu/classpath/jdwp/id) interpreter\n+set package_map(gnu/classpath/jdwp/processor) interpreter\n+set package_map(gnu/classpath/jdwp/transport) interpreter\n+set package_map(gnu/classpath/jdwp/util) interpreter\n+set package_map(gnu/classpath/jdwp/value) interpreter\n+set package_map(gnu/gcj/jvmti) interpreter\n+\n # Some BC ABI packages have classes which must not be compiled BC.\n # This maps such packages to a grep expression for excluding such\n # classes.\n@@ -138,9 +156,16 @@ set properties_files {}\n # List of all '@' files that we are going to compile.\n set package_files {}\n \n+# List of all '@' files that we are going to compile if the\n+# interpreter is enabled.\n+set interpreter_package_files {}\n+\n # List of all header file variables.\n set header_vars {}\n \n+# List of all header file variables for interpreter packages.\n+set interpreter_header_vars {}\n+\n # List of all BC object files.\n set bc_objects {}\n \n@@ -300,8 +325,8 @@ proc emit_bc_rule {package} {\n }\n \n # Emit a rule for a 'package' package.\n-proc emit_package_rule {package} {\n-  global package_map exclusion_map package_files\n+proc emit_package_rule_to_list {package package_files_list} {\n+  global package_map exclusion_map $package_files_list\n \n   if {$package == \".\"} {\n     set pkgname ordinary\n@@ -333,10 +358,20 @@ proc emit_package_rule {package} {\n \n   if {$pkgname != \"gnu/gcj/xlib\" && $pkgname != \"gnu/awt/xlib\"\n       && $pkgname != \"gnu/gcj/tools/gcj_dbtool\"} {\n-    lappend package_files $lname\n+    lappend  $package_files_list $lname\n   }\n }\n \n+proc emit_package_rule {package} {\n+  global package_files\n+  emit_package_rule_to_list $package package_files\n+}\n+\n+proc emit_interpreter_rule {package} {\n+  global interpreter_package_files\n+  emit_package_rule_to_list $package interpreter_package_files\n+}\n+\n # Emit a rule to build a package full of 'ordinary' files, that is,\n # one .o for each .java.\n proc emit_ordinary_rule {package} {\n@@ -382,7 +417,7 @@ proc emit_process_package_rule {platform} {\n # Emit a source file variable for a package, and corresponding header\n # file variable, if needed.\n proc emit_source_var {package} {\n-  global package_map name_map dir_map header_vars\n+  global package_map name_map dir_map header_vars interpreter_header_vars\n \n   if {$package == \".\"} {\n     set pkgname ordinary\n@@ -428,7 +463,11 @@ proc emit_source_var {package} {\n     puts \"${uname}_header_files = $result\"\n     puts \"\"\n     if {$pkgname != \"gnu/gcj/xlib\" && $pkgname != \"gnu/awt/xlib\"} {\n-      lappend header_vars \"${uname}_header_files\"\n+\tif {$package_map($package) == \"interpreter\"} {\n+          lappend interpreter_header_vars \"${uname}_header_files\"\n+\t} else {\n+          lappend header_vars \"${uname}_header_files\"\n+\t}\n     }\n   }\n }\n@@ -490,6 +529,8 @@ foreach package [lsort [array names package_map]] {\n     emit_ordinary_rule $package\n   } elseif {$package_map($package) == \"package\"} {\n     emit_package_rule $package\n+  } elseif {$package_map($package) == \"interpreter\"} {\n+    emit_interpreter_rule $package\n   } else {\n     error \"unrecognized type: $package_map($package)\"\n   }\n@@ -499,6 +540,21 @@ emit_process_package_rule Ecos\n emit_process_package_rule Win32\n emit_process_package_rule Posix\n \n+puts \"if INTERPRETER\"\n+pp_var interpreter_packages_source_files $interpreter_package_files\n+pp_var interpreter_header_files $interpreter_header_vars \"\\$(\" \")\"\n+puts \"\"\n+puts \"else\"\n+puts \"\"\n+puts \"interpreter_packages_source_files=\"\n+puts \"\"\n+puts \"interpreter_header_files=\"\n+puts \"\"\n+puts \"endif\"\n+\n+lappend package_files {$(interpreter_packages_source_files)}\n+lappend header_vars interpreter_header_files\n+\n pp_var all_packages_source_files $package_files\n pp_var ordinary_header_files $header_vars \"\\$(\" \")\"\n pp_var bc_objects $bc_objects"}, {"sha": "41f23fcdd9f3bfbf7dba3f57bacfdb4e5cc75a1e", "filename": "libjava/sources.am", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -8537,12 +8537,9 @@ java/process-Posix.list: java/lang/PosixProcess.java\n -include java/process-Posix.deps\n \n \n+if INTERPRETER\n \n-all_packages_source_files = \\\n-  gnu/awt.list \\\n-  gnu/awt/j2d.list \\\n-  gnu/classpath.list \\\n-  gnu/classpath/debug.list \\\n+interpreter_packages_source_files = \\\n   gnu/classpath/jdwp.list \\\n   gnu/classpath/jdwp/event.list \\\n   gnu/classpath/jdwp/event/filters.list \\\n@@ -8552,10 +8549,36 @@ all_packages_source_files = \\\n   gnu/classpath/jdwp/transport.list \\\n   gnu/classpath/jdwp/util.list \\\n   gnu/classpath/jdwp/value.list \\\n+  gnu/gcj/jvmti.list\n+\n+interpreter_header_files = \\\n+  $(gnu_classpath_jdwp_header_files) \\\n+  $(gnu_classpath_jdwp_event_header_files) \\\n+  $(gnu_classpath_jdwp_event_filters_header_files) \\\n+  $(gnu_classpath_jdwp_exception_header_files) \\\n+  $(gnu_classpath_jdwp_id_header_files) \\\n+  $(gnu_classpath_jdwp_processor_header_files) \\\n+  $(gnu_classpath_jdwp_transport_header_files) \\\n+  $(gnu_classpath_jdwp_util_header_files) \\\n+  $(gnu_classpath_jdwp_value_header_files) \\\n+  $(gnu_gcj_jvmti_header_files)\n+\n+else\n+\n+interpreter_packages_source_files=\n+\n+interpreter_header_files=\n+\n+endif\n+\n+all_packages_source_files = \\\n+  gnu/awt.list \\\n+  gnu/awt/j2d.list \\\n+  gnu/classpath.list \\\n+  gnu/classpath/debug.list \\\n   gnu/gcj.list \\\n   gnu/gcj/convert.list \\\n   gnu/gcj/io.list \\\n-  gnu/gcj/jvmti.list \\\n   gnu/gcj/runtime.list \\\n   gnu/gcj/util.list \\\n   gnu/java/awt.list \\\n@@ -8789,26 +8812,17 @@ all_packages_source_files = \\\n   sun/misc.list \\\n   sun/reflect.list \\\n   sun/reflect/annotation.list \\\n-  sun/reflect/misc.list\n+  sun/reflect/misc.list \\\n+  $(interpreter_packages_source_files)\n \n ordinary_header_files = \\\n   $(gnu_awt_header_files) \\\n   $(gnu_awt_j2d_header_files) \\\n   $(gnu_classpath_header_files) \\\n   $(gnu_classpath_debug_header_files) \\\n-  $(gnu_classpath_jdwp_header_files) \\\n-  $(gnu_classpath_jdwp_event_header_files) \\\n-  $(gnu_classpath_jdwp_event_filters_header_files) \\\n-  $(gnu_classpath_jdwp_exception_header_files) \\\n-  $(gnu_classpath_jdwp_id_header_files) \\\n-  $(gnu_classpath_jdwp_processor_header_files) \\\n-  $(gnu_classpath_jdwp_transport_header_files) \\\n-  $(gnu_classpath_jdwp_util_header_files) \\\n-  $(gnu_classpath_jdwp_value_header_files) \\\n   $(gnu_gcj_header_files) \\\n   $(gnu_gcj_convert_header_files) \\\n   $(gnu_gcj_io_header_files) \\\n-  $(gnu_gcj_jvmti_header_files) \\\n   $(gnu_gcj_runtime_header_files) \\\n   $(gnu_gcj_tools_gcj_dbtool_header_files) \\\n   $(gnu_gcj_util_header_files) \\\n@@ -9039,7 +9053,8 @@ ordinary_header_files = \\\n   $(sun_misc_header_files) \\\n   $(sun_reflect_header_files) \\\n   $(sun_reflect_annotation_header_files) \\\n-  $(sun_reflect_misc_header_files)\n+  $(sun_reflect_misc_header_files) \\\n+  $(interpreter_header_files)\n \n bc_objects = \\\n   gnu-CORBA.lo \\"}, {"sha": "8b97cf13e3d3f570c980462a8e4f339aed34689c", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -138,7 +138,6 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n       state->interp_frame = state->interp_frame->next_interp;\n     }\n   else \n-#endif\n   // We handle proxies in the same way as interpreted classes\n   if (_Jv_is_proxy (func_addr))\n     {\n@@ -148,6 +147,7 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n       state->interp_frame = state->interp_frame->next_interp;\n     }\n   else \n+#endif\n     {\n #ifdef HAVE_GETIPINFO\n       _Unwind_Ptr ip;"}, {"sha": "795106c737d2a2cbb9d2eb1cfae17ca35c24a249", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86acf60c5b442da37c863d0ac3c4e00f12e12d85/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=86acf60c5b442da37c863d0ac3c4e00f12e12d85", "patch": "@@ -39,7 +39,9 @@ target_triplet = @target@\n subdir = testsuite\n DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/libltdl/acinclude.m4 \\\n+\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n@@ -54,10 +56,11 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/tls.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n-\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltgcc.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/mingwld.m4 \\\n+\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/include/config.h \\\n@@ -138,6 +141,8 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n INTERPRETER = @INTERPRETER@\n+INTERPRETER_FALSE = @INTERPRETER_FALSE@\n+INTERPRETER_TRUE = @INTERPRETER_TRUE@\n JAR = @JAR@\n JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@"}]}