{"sha": "c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyZjZkMzNiZTZmMDc0M2M3OGI5ZDM3MjhjMmFlY2I1YzFhNWY2Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-01T10:38:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-01T10:38:03Z"}, "message": "re PR middle-end/32559 (ICE with vector arithmetic)\n\n        PR middle-end/32559\n        * fold-const.c (fold-binary) [PLUS_EXPR]: Convert ~X + X to 1 or\n        X + ~X to 1 only for INTEGRAL_TYPE_P type.\n\ntestsuite/ChangeLog:\n\n        PR middle-end/32559\n        * gcc.dg/pr32559.c: New test.\n\nFrom-SVN: r126164", "tree": {"sha": "660004e8d661d3b7d1c08602325e305d0f9f2ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660004e8d661d3b7d1c08602325e305d0f9f2ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/comments", "author": null, "committer": null, "parents": [{"sha": "344c77be01b87169aa6c588b559228e67533508a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344c77be01b87169aa6c588b559228e67533508a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344c77be01b87169aa6c588b559228e67533508a"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "2229807eebf71d2a5c802d2dd20f1ae7d7a7fff2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "patch": "@@ -1,3 +1,9 @@\n+2007-07-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/32559\n+\t* fold-const.c (fold-binary) [PLUS_EXPR]: Convert ~X + X to 1 or\n+\tX + ~X to 1 only for INTEGRAL_TYPE_P type.\n+\n 2007-06-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* configure.ac: Check for .gnu_attribute on MIPS.\n@@ -137,7 +143,7 @@\n \n 2006-06-30  Jan Hubicka  <jh@suse.cz>\n \n-\t* loop-unroll.c (unroll_loop_runtime_iterations): Unshare newly emit    \n+\t* loop-unroll.c (unroll_loop_runtime_iterations): Unshare newly emit\n \tcode.\n \n 2006-06-30  Thomas Neumann  <tneumann@users.sourceforge.net>"}, {"sha": "9dfd07fb8559f451b898e914b15ec14e0d0e91b9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "patch": "@@ -9270,27 +9270,13 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \treturn fold_build2 (MINUS_EXPR, type,\n \t\t\t    fold_convert (type, arg1),\n \t\t\t    fold_convert (type, TREE_OPERAND (arg0, 0)));\n-      /* Convert ~A + 1 to -A.  */\n-      if (INTEGRAL_TYPE_P (type)\n-\t  && TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && integer_onep (arg1))\n-\treturn fold_build1 (NEGATE_EXPR, type, TREE_OPERAND (arg0, 0));\n-\n-      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the\n-\t same or one.  */\n-      if ((TREE_CODE (arg0) == MULT_EXPR\n-\t   || TREE_CODE (arg1) == MULT_EXPR)\n-\t  && (!FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations))\n-        {\n-\t  tree tem = fold_plusminus_mult_expr (code, type, arg0, arg1);\n-\t  if (tem)\n-\t    return tem;\n-\t}\n \n-      if (! FLOAT_TYPE_P (type))\n+      if (INTEGRAL_TYPE_P (type))\n \t{\n-\t  if (integer_zerop (arg1))\n-\t    return non_lvalue (fold_convert (type, arg0));\n+\t  /* Convert ~A + 1 to -A.  */\n+\t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t      && integer_onep (arg1))\n+\t    return fold_build1 (NEGATE_EXPR, type, TREE_OPERAND (arg0, 0));\n \n \t  /* ~X + X is -1.  */\n \t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n@@ -9319,6 +9305,23 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  return omit_one_operand (type, t1, arg0);\n \t\t}\n \t    }\n+\t}\n+\n+      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the\n+\t same or one.  */\n+      if ((TREE_CODE (arg0) == MULT_EXPR\n+\t   || TREE_CODE (arg1) == MULT_EXPR)\n+\t  && (!FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations))\n+        {\n+\t  tree tem = fold_plusminus_mult_expr (code, type, arg0, arg1);\n+\t  if (tem)\n+\t    return tem;\n+\t}\n+\n+      if (! FLOAT_TYPE_P (type))\n+\t{\n+\t  if (integer_zerop (arg1))\n+\t    return non_lvalue (fold_convert (type, arg0));\n \n \t  /* If we are adding two BIT_AND_EXPR's, both of which are and'ing\n \t     with a constant, and the two constants have no bits in common,"}, {"sha": "ec17942a130f7a7a1ae1f94c77ea47bde17ca84f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "patch": "@@ -1,3 +1,9 @@\n+2007-067-01  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Volker Reichelt  <reichelt@netcologne.de>\n+\n+\tPR middle-end/32559\n+\t* gcc.dg/pr32559.c: New test.\n+\n 2007-07-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/25371"}, {"sha": "fee1c9790732507255699dbc5f53b61e95e5fe87", "filename": "gcc/testsuite/gcc.dg/pr32559.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32559.c?ref=c22f6d33be6f0743c78b9d3728c2aecb5c1a5f67", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int __attribute__((vector_size (8))) v;\n+\n+void foo()\n+{\n+  v += ~v;\n+}"}]}