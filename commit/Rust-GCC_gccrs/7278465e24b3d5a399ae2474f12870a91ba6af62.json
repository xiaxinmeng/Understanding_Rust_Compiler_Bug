{"sha": "7278465e24b3d5a399ae2474f12870a91ba6af62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3ODQ2NWUyNGIzZDVhMzk5YWUyNDc0ZjEyODcwYTkxYmE2YWY2Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-10-17T21:02:54Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-10-17T21:02:54Z"}, "message": "re PR c/63567 (Linux kernel build error due to non-static initializers)\n\n\tPR c/63567\n\t* c-typeck.c (digest_init): Allow initializing objects with static\n\tstorage duration with compound literals even in C99 and add pedwarn\n\tfor it.\n\n\t* gcc.dg/pr61096-1.c: Change dg-error into dg-warning.\n\t* gcc.dg/pr63567-1.c: New test.\n\t* gcc.dg/pr63567-2.c: New test.\n\nFrom-SVN: r216416", "tree": {"sha": "e31df103a9c2a703683c07fab2d8a2abd2dc0a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31df103a9c2a703683c07fab2d8a2abd2dc0a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7278465e24b3d5a399ae2474f12870a91ba6af62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7278465e24b3d5a399ae2474f12870a91ba6af62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7278465e24b3d5a399ae2474f12870a91ba6af62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7278465e24b3d5a399ae2474f12870a91ba6af62/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d83fa499b9895618ae8f63c004f3090b71d488ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83fa499b9895618ae8f63c004f3090b71d488ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83fa499b9895618ae8f63c004f3090b71d488ae"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "35b8dcd968e5e1cb1c8a2ce566a62cdf055f8f9d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -1,3 +1,10 @@\n+2014-10-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63567\n+\t* c-typeck.c (digest_init): Allow initializing objects with static\n+\tstorage duration with compound literals even in C99 and add pedwarn\n+\tfor it.\n+\n 2014-10-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63543"}, {"sha": "0dd33668d29c6de0f2f3ea1118a1d9520b8a58a0", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -6683,13 +6683,15 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \tinside_init = convert (type, inside_init);\n \n       if (require_constant\n-\t  && (code == VECTOR_TYPE || !flag_isoc99)\n \t  && TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n \t{\n \t  /* As an extension, allow initializing objects with static storage\n \t     duration with compound literals (which are then treated just as\n \t     the brace enclosed list they contain).  Also allow this for\n \t     vectors, as we can only assign them with compound literals.  */\n+\t  if (flag_isoc99 && code != VECTOR_TYPE)\n+\t    pedwarn_init (init_loc, OPT_Wpedantic, \"initializer element \"\n+\t\t\t  \"is not constant\");\n \t  tree decl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n \t  inside_init = DECL_INITIAL (decl);\n \t}"}, {"sha": "ea148476a96231398524e94810c8a1782d68b71a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -1,3 +1,10 @@\n+2014-10-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63567\n+\t* gcc.dg/pr61096-1.c: Change dg-error into dg-warning.\n+\t* gcc.dg/pr63567-1.c: New test.\n+\t* gcc.dg/pr63567-2.c: New test.\n+\n 2014-10-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63543"}, {"sha": "fa8932f8b6dcdbd0fd24cc8242d487933e317cfd", "filename": "gcc/testsuite/gcc.dg/pr61096-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -23,7 +23,7 @@ char w1[] = L\"foo\"; /* { dg-error \"13:char-array initialized from wide string\" }\n __WCHAR_TYPE__ w2[] = \"foo\"; /* { dg-error \"23:wide character array initialized from non-wide string\" } */\n __WCHAR_TYPE__ w3[] = U\"foo\"; /* { dg-error \"23:wide character array initialized from incompatible wide string\" } */\n schar a1[] = \"foo\"; /* { dg-error \"14:array of inappropriate type initialized from string constant\" } */\n-int a2[] = (int[]) { 1 }; /* { dg-error \"12:array initialized from non-constant array expression\" } */\n+int a2[] = (int[]) { 1 }; /* { dg-warning \"12:initializer element is not constant\" } */\n \n int a3 = e; /* { dg-error \"10:initializer element is not constant\" } */\n int a4 = (e, 1); /* { dg-error \"10:initializer element is not constant\" } */"}, {"sha": "97da171563e22c323607d24a66d29926108057ff", "filename": "gcc/testsuite/gcc.dg/pr63567-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-1.c?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/63567 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Allow initializing objects with static storage duration with\n+   compound literals even.  This is being used in Linux kernel.  */\n+\n+struct T { int i; };\n+struct S { struct T t; };\n+static struct S s = (struct S) { .t = { 42 } };"}, {"sha": "5ea2b37c36d5c96b1c5cf728a3007e2ee04caeb3", "filename": "gcc/testsuite/gcc.dg/pr63567-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278465e24b3d5a399ae2474f12870a91ba6af62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63567-2.c?ref=7278465e24b3d5a399ae2474f12870a91ba6af62", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/63567 */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+/* Allow initializing objects with static storage duration with\n+   compound literals.  This is being used in Linux kernel.  */\n+\n+struct T { int i; };\n+struct S { struct T t; };\n+static struct S s = (struct S) { .t = { 42 } }; /* { dg-warning \"initializer element is not constant\" } */"}]}