{"sha": "abebffc609506176f8ba3f64533e15ece49446c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlYmZmYzYwOTUwNjE3NmY4YmEzZjY0NTMzZTE1ZWNlNDk0NDZjMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-24T14:19:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-24T14:19:40Z"}, "message": "ipa-reference.c (ipa_reference_optimization_summary_d): Rename statics_not_read and statics_not_written to statics_read and...\n\n\n\t* ipa-reference.c (ipa_reference_optimization_summary_d): Rename\n\tstatics_not_read and statics_not_written to statics_read and\n\tstatics_written respectively.\n\t(no_module_statics): New static var.\n\t(ipa_reference_get_not_read_global): Rename to ...\n\t(ipa_reference_get_read_global): ... this.\n\t(ipa_reference_get_not_written_global): Rename to ...\n\t(ipa_reference_get_written_global): ... this.\n\t(dump_static_vars_set_to_file): Dump no_module_statics.\n\t(copy_static_var_set): Add for propagation parameter.\n\t(ipa_init): Initialize no_module_statics.\n\t(ipa_ref_opt_summary_t::duplicate): Update.\n\t(ipa_ref_opt_summary_t::remove): Update.\n\t(propagate): Update.\n\t(write_node_summary_p): Look correctly for bitmap differences.\n\t(ipa_reference_write_optimization_summary): Update.\n\t(ipa_reference_read_optimization_summary): Update.\n\t* ipa-reference.h\n\t(ipa_reference_get_not_read_global): Rename to ...\n\t(ipa_reference_get_read_global): ... this.\n\t(ipa_reference_get_not_written_global): Rename to ...\n\t(ipa_reference_get_written_global): ... this.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Update.\n\t(call_may_clobber_ref_p_1): Update.\n\nFrom-SVN: r277403", "tree": {"sha": "aca17ebbb9e91c9a33b1ce8a655285725218d089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca17ebbb9e91c9a33b1ce8a655285725218d089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abebffc609506176f8ba3f64533e15ece49446c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abebffc609506176f8ba3f64533e15ece49446c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abebffc609506176f8ba3f64533e15ece49446c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abebffc609506176f8ba3f64533e15ece49446c0/comments", "author": null, "committer": null, "parents": [{"sha": "39a6e72a9e0889180783c2e8810042503b511b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a6e72a9e0889180783c2e8810042503b511b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a6e72a9e0889180783c2e8810042503b511b11"}], "stats": {"total": 236, "additions": 151, "deletions": 85}, "files": [{"sha": "ae2f20ea1dfac791127d4f23cf5987059a8855a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abebffc609506176f8ba3f64533e15ece49446c0", "patch": "@@ -1,3 +1,30 @@\n+2019-10-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-reference.c (ipa_reference_optimization_summary_d): Rename\n+\tstatics_not_read and statics_not_written to statics_read and\n+\tstatics_written respectively.\n+\t(no_module_statics): New static var.\n+\t(ipa_reference_get_not_read_global): Rename to ...\n+\t(ipa_reference_get_read_global): ... this.\n+\t(ipa_reference_get_not_written_global): Rename to ...\n+\t(ipa_reference_get_written_global): ... this.\n+\t(dump_static_vars_set_to_file): Dump no_module_statics.\n+\t(copy_static_var_set): Add for propagation parameter.\n+\t(ipa_init): Initialize no_module_statics.\n+\t(ipa_ref_opt_summary_t::duplicate): Update.\n+\t(ipa_ref_opt_summary_t::remove): Update.\n+\t(propagate): Update.\n+\t(write_node_summary_p): Look correctly for bitmap differences.\n+\t(ipa_reference_write_optimization_summary): Update.\n+\t(ipa_reference_read_optimization_summary): Update.\n+\t* ipa-reference.h\n+\t(ipa_reference_get_not_read_global): Rename to ...\n+\t(ipa_reference_get_read_global): ... this.\n+\t(ipa_reference_get_not_written_global): Rename to ...\n+\t(ipa_reference_get_written_global): ... this.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Update.\n+\t(call_may_clobber_ref_p_1): Update.\n+\n 2019-10-24  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_hard_regno_nregs_has_padding): Remove"}, {"sha": "06c122551b8e5098a1ce392d052502f62ae3083e", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 112, "deletions": 77, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=abebffc609506176f8ba3f64533e15ece49446c0", "patch": "@@ -74,8 +74,8 @@ struct ipa_reference_global_vars_info_d\n \n struct ipa_reference_optimization_summary_d\n {\n-  bitmap statics_not_read;\n-  bitmap statics_not_written;\n+  bitmap statics_read;\n+  bitmap statics_written;\n };\n \n typedef ipa_reference_local_vars_info_d *ipa_reference_local_vars_info_t;\n@@ -103,6 +103,8 @@ varpool_node_hook_list *varpool_node_hooks;\n    static we are considering.  This is added to the local info when asm\n    code is found that clobbers all memory.  */\n static bitmap all_module_statics;\n+/* Zero bitmap.  */\n+static bitmap no_module_statics;\n /* Set of all statics that should be ignored because they are touched by\n    -fno-ipa-reference code.  */\n static bitmap ignore_module_statics;\n@@ -193,7 +195,7 @@ get_reference_optimization_summary (struct cgraph_node *node)\n    NULL if no data is available.  */\n \n bitmap\n-ipa_reference_get_not_read_global (struct cgraph_node *fn)\n+ipa_reference_get_read_global (struct cgraph_node *fn)\n {\n   if (!opt_for_fn (current_function_decl, flag_ipa_reference))\n     return NULL;\n@@ -208,10 +210,10 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n \t  || (avail == AVAIL_INTERPOSABLE\n \t      && flags_from_decl_or_type (fn->decl) & ECF_LEAF))\n       && opt_for_fn (fn2->decl, flag_ipa_reference))\n-    return info->statics_not_read;\n+    return info->statics_read;\n   else if (avail == AVAIL_NOT_AVAILABLE\n \t   && flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n-    return all_module_statics;\n+    return no_module_statics;\n   else\n     return NULL;\n }\n@@ -222,7 +224,7 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n    call.  Returns NULL if no data is available.  */\n \n bitmap\n-ipa_reference_get_not_written_global (struct cgraph_node *fn)\n+ipa_reference_get_written_global (struct cgraph_node *fn)\n {\n   if (!opt_for_fn (current_function_decl, flag_ipa_reference))\n     return NULL;\n@@ -237,10 +239,10 @@ ipa_reference_get_not_written_global (struct cgraph_node *fn)\n \t  || (avail == AVAIL_INTERPOSABLE\n \t      && flags_from_decl_or_type (fn->decl) & ECF_LEAF))\n       && opt_for_fn (fn2->decl, flag_ipa_reference))\n-    return info->statics_not_written;\n+    return info->statics_written;\n   else if (avail == AVAIL_NOT_AVAILABLE\n \t   && flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n-    return all_module_statics;\n+    return no_module_statics;\n   else\n     return NULL;\n }\n@@ -315,6 +317,8 @@ dump_static_vars_set_to_file (FILE *f, bitmap set)\n     return;\n   else if (set == all_module_statics)\n     fprintf (f, \"ALL\");\n+  else if (set == no_module_statics)\n+    fprintf (f, \"NO\");\n   else\n     EXECUTE_IF_SET_IN_BITMAP (set, 0, index, bi)\n       {\n@@ -358,10 +362,12 @@ union_static_var_sets (bitmap &x, bitmap y)\n    But if SET is NULL or the maximum set, return that instead.  */\n \n static bitmap\n-copy_static_var_set (bitmap set)\n+copy_static_var_set (bitmap set, bool for_propagation)\n {\n   if (set == NULL || set == all_module_statics)\n     return set;\n+  if (!for_propagation && set == no_module_statics)\n+    return set;\n   bitmap_obstack *o = set->obstack;\n   gcc_checking_assert (o);\n   bitmap copy = BITMAP_ALLOC (o);\n@@ -468,6 +474,7 @@ ipa_init (void)\n   bitmap_obstack_initialize (&local_info_obstack);\n   bitmap_obstack_initialize (&optimization_summary_obstack);\n   all_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n+  no_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n   ignore_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n \n   if (ipa_ref_var_info_summaries == NULL)\n@@ -552,10 +559,10 @@ ipa_ref_opt_summary_t::duplicate (cgraph_node *, cgraph_node *,\n \t\t\t\t  ipa_reference_optimization_summary_d\n \t\t\t\t  *dst_ginfo)\n {\n-  dst_ginfo->statics_not_read =\n-    copy_static_var_set (ginfo->statics_not_read);\n-  dst_ginfo->statics_not_written =\n-    copy_static_var_set (ginfo->statics_not_written);\n+  dst_ginfo->statics_read =\n+    copy_static_var_set (ginfo->statics_read, false);\n+  dst_ginfo->statics_written =\n+    copy_static_var_set (ginfo->statics_written, false);\n }\n \n /* Called when node is removed.  */\n@@ -564,13 +571,15 @@ void\n ipa_ref_opt_summary_t::remove (cgraph_node *,\n \t\t\t       ipa_reference_optimization_summary_d *ginfo)\n {\n-  if (ginfo->statics_not_read\n-      && ginfo->statics_not_read != all_module_statics)\n-    BITMAP_FREE (ginfo->statics_not_read);\n-\n-  if (ginfo->statics_not_written\n-      && ginfo->statics_not_written != all_module_statics)\n-    BITMAP_FREE (ginfo->statics_not_written);\n+  if (ginfo->statics_read\n+      && ginfo->statics_read != all_module_statics\n+      && ginfo->statics_read != no_module_statics)\n+    BITMAP_FREE (ginfo->statics_read);\n+\n+  if (ginfo->statics_written\n+      && ginfo->statics_written != all_module_statics\n+      && ginfo->statics_written != no_module_statics)\n+    BITMAP_FREE (ginfo->statics_written);\n }\n \n /* Analyze each function in the cgraph to see which global or statics\n@@ -802,11 +811,12 @@ propagate (void)\n       if (read_all)\n \tnode_g->statics_read = all_module_statics;\n       else\n-\tnode_g->statics_read = copy_static_var_set (node_l->statics_read);\n+\tnode_g->statics_read = copy_static_var_set (node_l->statics_read, true);\n       if (write_all)\n \tnode_g->statics_written = all_module_statics;\n       else\n-\tnode_g->statics_written = copy_static_var_set (node_l->statics_written);\n+\tnode_g->statics_written\n+\t  = copy_static_var_set (node_l->statics_written, true);\n \n       /* Merge the sets of this cycle with all sets of callees reached\n          from this cycle.  */\n@@ -890,40 +900,52 @@ propagate (void)\n       ipa_reference_vars_info_t node_info;\n       ipa_reference_global_vars_info_t node_g;\n \n+      /* No need to produce summaries for inline clones.  */\n+      if (node->global.inlined_to)\n+\tcontinue;\n+\n       node_info = get_reference_vars_info (node);\n-      if (!node->alias && opt_for_fn (node->decl, flag_ipa_reference)\n-\t  && (node->get_availability () > AVAIL_INTERPOSABLE\n-\t      || (flags_from_decl_or_type (node->decl) & ECF_LEAF)))\n+      if (!node->alias && opt_for_fn (node->decl, flag_ipa_reference))\n \t{\n \t  node_g = &node_info->global;\n+\t  bool read_all = \n+\t\t(node_g->statics_read == all_module_statics\n+\t\t || bitmap_equal_p (node_g->statics_read, all_module_statics));\n+\t  bool written_all = \n+\t\t(node_g->statics_written == all_module_statics\n+\t\t || bitmap_equal_p (node_g->statics_written,\n+\t\t\t\t    all_module_statics));\n+\n+\t  /* There is no need to produce summary if we collected nothing\n+\t     useful.  */\n+\t  if (read_all && written_all)\n+\t    continue;\n \n \t  ipa_reference_optimization_summary_d *opt\n \t    = ipa_ref_opt_sum_summaries->get_create (node);\n \n \t  /* Create the complimentary sets.  */\n \n \t  if (bitmap_empty_p (node_g->statics_read))\n-\t    opt->statics_not_read = all_module_statics;\n+\t    opt->statics_read = no_module_statics;\n+\t  else if (read_all)\n+\t    opt->statics_read = all_module_statics;\n \t  else\n \t    {\n-\t      opt->statics_not_read\n+\t      opt->statics_read\n \t\t = BITMAP_ALLOC (&optimization_summary_obstack);\n-\t      if (node_g->statics_read != all_module_statics)\n-\t\tbitmap_and_compl (opt->statics_not_read,\n-\t\t\t\t  all_module_statics,\n-\t\t\t\t  node_g->statics_read);\n+\t      bitmap_copy (opt->statics_read, node_g->statics_read);\n \t    }\n \n \t  if (bitmap_empty_p (node_g->statics_written))\n-\t    opt->statics_not_written = all_module_statics;\n+\t    opt->statics_written = no_module_statics;\n+\t  else if (written_all)\n+\t    opt->statics_written = all_module_statics;\n \t  else\n \t    {\n-\t      opt->statics_not_written\n+\t      opt->statics_written\n \t        = BITMAP_ALLOC (&optimization_summary_obstack);\n-\t      if (node_g->statics_written != all_module_statics)\n-\t\tbitmap_and_compl (opt->statics_not_written,\n-\t\t\t\t  all_module_statics,\n-\t\t\t\t  node_g->statics_written);\n+\t      bitmap_copy (opt->statics_written, node_g->statics_written);\n \t    }\n \t}\n    }\n@@ -958,9 +980,7 @@ write_node_summary_p (struct cgraph_node *node,\n   if (!node->definition || node->global.inlined_to)\n     return false;\n   info = get_reference_optimization_summary (node);\n-  if (!info\n-      || (bitmap_empty_p (info->statics_not_read)\n-\t  && bitmap_empty_p (info->statics_not_written)))\n+  if (!info)\n     return false;\n \n   /* See if we want to encode it.\n@@ -973,11 +993,17 @@ write_node_summary_p (struct cgraph_node *node,\n       && !referenced_from_this_partition_p (node, encoder))\n     return false;\n \n-  /* See if the info has non-empty intersections with vars we want to encode.  */\n-  if (!bitmap_intersect_p (info->statics_not_read, ltrans_statics)\n-      && !bitmap_intersect_p (info->statics_not_written, ltrans_statics))\n-    return false;\n-  return true;\n+  /* See if the info has non-empty intersections with vars we want to\n+     encode.  */\n+  bitmap_iterator bi;\n+  unsigned int i;\n+  EXECUTE_IF_AND_COMPL_IN_BITMAP (ltrans_statics, info->statics_read, 0,\n+\t\t\t\t  i, bi)\n+    return true;\n+  EXECUTE_IF_AND_COMPL_IN_BITMAP (ltrans_statics, info->statics_written, 0,\n+\t\t\t\t  i, bi)\n+    return true;\n+  return false;\n }\n \n /* Stream out BITS&LTRANS_STATICS as list of decls to OB.\n@@ -1079,9 +1105,9 @@ ipa_reference_write_optimization_summary (void)\n \t    node_ref = lto_symtab_encoder_encode (encoder, snode);\n \t    streamer_write_uhwi_stream (ob->main_stream, node_ref);\n \n-\t    stream_out_bitmap (ob, info->statics_not_read, ltrans_statics,\n+\t    stream_out_bitmap (ob, info->statics_read, ltrans_statics,\n \t\t\t       ltrans_statics_bitcount);\n-\t    stream_out_bitmap (ob, info->statics_not_written, ltrans_statics,\n+\t    stream_out_bitmap (ob, info->statics_written, ltrans_statics,\n \t\t\t       ltrans_statics_bitcount);\n \t  }\n       }\n@@ -1108,6 +1134,7 @@ ipa_reference_read_optimization_summary (void)\n   ipa_reference_vars_uids = 0;\n \n   all_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n+  no_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n \n   while ((file_data = file_data_vec[j++]))\n     {\n@@ -1156,57 +1183,65 @@ ipa_reference_read_optimization_summary (void)\n \t      ipa_reference_optimization_summary_d *info\n \t\t= ipa_ref_opt_sum_summaries->get_create (node);\n \n-\t      info->statics_not_read = BITMAP_ALLOC\n-\t\t(&optimization_summary_obstack);\n-\t      info->statics_not_written = BITMAP_ALLOC\n-\t\t(&optimization_summary_obstack);\n \t      if (dump_file)\n \t\tfprintf (dump_file,\n-\t\t\t \"\\nFunction name:%s:\\n  static not read:\",\n+\t\t\t \"\\nFunction name:%s:\\n  static read:\",\n \t\t\t node->dump_asm_name ());\n \n-\t      /* Set the statics not read.  */\n+\t      /* Set the statics read.  */\n \t      v_count = streamer_read_hwi (ib);\n \t      if (v_count == -1)\n \t\t{\n-\t\t  info->statics_not_read = all_module_statics;\n+\t\t  info->statics_read = all_module_statics;\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \" all module statics\");\n \t\t}\n+\t      else if (v_count == 0)\n+\t\tinfo->statics_read = no_module_statics;\n \t      else\n-\t\tfor (j = 0; j < (unsigned int)v_count; j++)\n-\t\t  {\n-\t\t    unsigned int var_index = streamer_read_uhwi (ib);\n-\t\t    tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n-\t\t\t\t\t\t\t\t   var_index);\n-\t\t    bitmap_set_bit (info->statics_not_read,\n-\t\t\t\t    ipa_reference_var_uid (v_decl));\n-\t\t    if (dump_file)\n-\t\t      fprintf (dump_file, \" %s\", fndecl_name (v_decl));\n-\t\t  }\n+\t\t{\n+\t\t  info->statics_read = BITMAP_ALLOC\n+\t\t    (&optimization_summary_obstack);\n+\t\t  for (j = 0; j < (unsigned int)v_count; j++)\n+\t\t    {\n+\t\t      unsigned int var_index = streamer_read_uhwi (ib);\n+\t\t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n+\t\t\t\t\t\t\t\t     var_index);\n+\t\t      bitmap_set_bit (info->statics_read,\n+\t\t\t\t      ipa_reference_var_uid (v_decl));\n+\t\t      if (dump_file)\n+\t\t\tfprintf (dump_file, \" %s\", fndecl_name (v_decl));\n+\t\t    }\n+\t\t}\n \n \t      if (dump_file)\n \t\tfprintf (dump_file,\n-\t\t\t \"\\n  static not written:\");\n-\t      /* Set the statics not written.  */\n+\t\t\t \"\\n  static written:\");\n+\t      /* Set the statics written.  */\n \t      v_count = streamer_read_hwi (ib);\n \t      if (v_count == -1)\n \t\t{\n-\t\t  info->statics_not_written = all_module_statics;\n+\t\t  info->statics_written = all_module_statics;\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \" all module statics\");\n \t\t}\n+\t      else if (v_count == 0)\n+\t\tinfo->statics_written = no_module_statics;\n \t      else\n-\t\tfor (j = 0; j < (unsigned int)v_count; j++)\n-\t\t  {\n-\t\t    unsigned int var_index = streamer_read_uhwi (ib);\n-\t\t    tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n-\t\t\t\t\t\t\t\t   var_index);\n-\t\t    bitmap_set_bit (info->statics_not_written,\n-\t\t\t\t    ipa_reference_var_uid (v_decl));\n-\t\t    if (dump_file)\n-\t\t      fprintf (dump_file, \" %s\", fndecl_name (v_decl));\n-\t\t  }\n+\t\t{\n+\t\t  info->statics_written = BITMAP_ALLOC\n+\t\t    (&optimization_summary_obstack);\n+\t\t  for (j = 0; j < (unsigned int)v_count; j++)\n+\t\t    {\n+\t\t      unsigned int var_index = streamer_read_uhwi (ib);\n+\t\t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n+\t\t\t\t\t\t\t\t     var_index);\n+\t\t      bitmap_set_bit (info->statics_written,\n+\t\t\t\t      ipa_reference_var_uid (v_decl));\n+\t\t      if (dump_file)\n+\t\t\tfprintf (dump_file, \" %s\", fndecl_name (v_decl));\n+\t\t    }\n+\t\t}\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"\\n\");\n \t    }"}, {"sha": "c7de073387e2c50fe435525331a2abf33bc14330", "filename": "gcc/ipa-reference.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Fipa-reference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Fipa-reference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.h?ref=abebffc609506176f8ba3f64533e15ece49446c0", "patch": "@@ -22,8 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_IPA_REFERENCE_H\n \n /* In ipa-reference.c  */\n-bitmap ipa_reference_get_not_read_global (struct cgraph_node *fn);\n-bitmap ipa_reference_get_not_written_global (struct cgraph_node *fn);\n+bitmap ipa_reference_get_read_global (struct cgraph_node *fn);\n+bitmap ipa_reference_get_written_global (struct cgraph_node *fn);\n void ipa_reference_c_finalize (void);\n int ipa_reference_var_uid (tree t);\n "}, {"sha": "8c63e3bf5a9f16649b30d25f85a4245852300903", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abebffc609506176f8ba3f64533e15ece49446c0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=abebffc609506176f8ba3f64533e15ece49446c0", "patch": "@@ -2529,14 +2529,16 @@ ref_maybe_used_by_call_p_1 (gcall *call, ao_ref *ref, bool tbaa_p)\n   if (callee != NULL_TREE && VAR_P (base) && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n-      bitmap not_read;\n+      bitmap read;\n+      int id;\n \n       /* FIXME: Callee can be an OMP builtin that does not have a call graph\n \t node yet.  We should enforce that there are nodes for all decls in the\n \t IL and remove this check instead.  */\n       if (node\n-\t  && (not_read = ipa_reference_get_not_read_global (node))\n-\t  && bitmap_bit_p (not_read, ipa_reference_var_uid (base)))\n+\t  && (id = ipa_reference_var_uid (base)) != -1\n+\t  && (read = ipa_reference_get_read_global (node))\n+\t  && !bitmap_bit_p (read, id))\n \tgoto process_args;\n     }\n \n@@ -2924,11 +2926,13 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref)\n   if (callee != NULL_TREE && VAR_P (base) && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n-      bitmap not_written;\n+      bitmap written;\n+      int id;\n \n       if (node\n-\t  && (not_written = ipa_reference_get_not_written_global (node))\n-\t  && bitmap_bit_p (not_written, ipa_reference_var_uid (base)))\n+\t  && (id = ipa_reference_var_uid (base)) != -1\n+\t  && (written = ipa_reference_get_written_global (node))\n+\t  && !bitmap_bit_p (written, id))\n \treturn false;\n     }\n "}]}