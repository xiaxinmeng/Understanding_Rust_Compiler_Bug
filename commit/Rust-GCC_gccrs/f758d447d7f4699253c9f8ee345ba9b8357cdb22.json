{"sha": "f758d447d7f4699253c9f8ee345ba9b8357cdb22", "node_id": "C_kwDOANBUbNoAKGY3NThkNDQ3ZDdmNDY5OTI1M2M5ZjhlZTM0NWJhOWI4MzU3Y2RiMjI", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-28T09:00:48Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-29T07:22:47Z"}, "message": "Check nonlinear iv in vect_can_advance_ivs_p.\n\nvectorizable_nonlinear_induction doesn't always guard\nvect_peel_nonlinear_iv_init when it's called by\nvect_update_ivs_after_vectorizer.\nIt's supposed to be guarded by vect_can_advance_ivs_p.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/107055\n\t* tree-vect-loop-manip.cc (vect_can_advance_ivs_p): Check for\n\tnonlinear induction variables.\n\t* tree-vect-loop.cc (vect_can_peel_nonlinear_iv_p): New\n\tfunctions.\n\t(vectorizable_nonlinear_induction): Put part codes into\n\tvect_can_peel_nonlinear_iv_p.\n\t* tree-vectorizer.h (vect_can_peel_nonlinear_iv_p): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107055.c: New test.", "tree": {"sha": "aa7628d98ba68a149c7cb9ebabdcfa94ed00ea99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7628d98ba68a149c7cb9ebabdcfa94ed00ea99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f758d447d7f4699253c9f8ee345ba9b8357cdb22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f758d447d7f4699253c9f8ee345ba9b8357cdb22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f758d447d7f4699253c9f8ee345ba9b8357cdb22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f758d447d7f4699253c9f8ee345ba9b8357cdb22/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e79a25b66cb7e0ddbd1410ecc86cec25588d172"}], "stats": {"total": 99, "additions": 64, "deletions": 35}, "files": [{"sha": "63bcb3d742e157d2d52a67d5a532f0ee6f5b4610", "filename": "gcc/testsuite/gcc.target/i386/pr107055.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107055.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107055.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107055.c?ref=f758d447d7f4699253c9f8ee345ba9b8357cdb22", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-tree-dce -fno-vect-cost-model -ftree-vectorize -fprofile-arcs\" } */\n+\n+#include \"../../gcc.dg/torture/pr24257.c\""}, {"sha": "1d96130c985e2defd141cfdf602224c73b4b41f2", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=f758d447d7f4699253c9f8ee345ba9b8357cdb22", "patch": "@@ -1413,6 +1413,7 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n   for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       tree evolution_part;\n+      enum vect_induction_op_type induction_type;\n \n       gphi *phi = gsi.phi ();\n       stmt_vec_info phi_info = loop_vinfo->lookup_stmt (phi);\n@@ -1432,6 +1433,15 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n \t  continue;\n \t}\n \n+      induction_type = STMT_VINFO_LOOP_PHI_EVOLUTION_TYPE (phi_info);\n+      if (induction_type != vect_step_op_add)\n+\t{\n+\t  if (!vect_can_peel_nonlinear_iv_p (loop_vinfo, induction_type))\n+\t    return false;\n+\n+\t  continue;\n+\t}\n+\n       /* Analyze the evolution function.  */\n \n       evolution_part = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (phi_info);"}, {"sha": "2536cc3cf4903f898245a9012b097a91d192e6b3", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=f758d447d7f4699253c9f8ee345ba9b8357cdb22", "patch": "@@ -8558,6 +8558,50 @@ vect_update_nonlinear_iv (gimple_seq* stmts, tree vectype,\n   return vec_def;\n \n }\n+\n+/* Return true if vectorizer can peel for nonlinear iv.  */\n+bool\n+vect_can_peel_nonlinear_iv_p (loop_vec_info loop_vinfo,\n+\t\t\t      enum vect_induction_op_type induction_type)\n+{\n+  tree niters_skip;\n+  /* Init_expr will be update by vect_update_ivs_after_vectorizer,\n+     if niters is unkown:\n+     For shift, when shift mount >= precision, there would be UD.\n+     For mult, don't known how to generate\n+     init_expr * pow (step, niters) for variable niters.\n+     For neg, it should be ok, since niters of vectorized main loop\n+     will always be multiple of 2.  */\n+  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+      && induction_type != vect_step_op_neg)\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"Peeling for epilogue is not supported\"\n+\t\t\t \" for nonlinear induction except neg\"\n+\t\t\t \" when iteration count is unknown.\\n\");\n+      return false;\n+    }\n+\n+  /* Also doens't support peel for neg when niter is variable.\n+     ??? generate something like niter_expr & 1 ? init_expr : -init_expr?  */\n+  niters_skip = LOOP_VINFO_MASK_SKIP_NITERS (loop_vinfo);\n+  if ((niters_skip != NULL_TREE\n+       && TREE_CODE (niters_skip) != INTEGER_CST)\n+      || (!vect_use_loop_mask_for_alignment_p (loop_vinfo)\n+\t  && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"Peeling for alignement is not supported\"\n+\t\t\t \" for nonlinear induction when niters_skip\"\n+\t\t\t \" is not constant.\\n\");\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Function vectorizable_induction\n \n    Check if STMT_INFO performs an nonlinear induction computation that can be\n@@ -8628,42 +8672,9 @@ vectorizable_nonlinear_induction (loop_vec_info loop_vinfo,\n       return false;\n     }\n \n-  /* Init_expr will be update by vect_update_ivs_after_vectorizer,\n-     if niters is unkown:\n-     For shift, when shift mount >= precision, there would be UD.\n-     For mult, don't known how to generate\n-     init_expr * pow (step, niters) for variable niters.\n-     For neg, it should be ok, since niters of vectorized main loop\n-     will always be multiple of 2.  */\n-  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-      && induction_type != vect_step_op_neg)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"Peeling for epilogue is not supported\"\n-\t\t\t \" for nonlinear induction except neg\"\n-\t\t\t \" when iteration count is unknown.\\n\");\n-      return false;\n-    }\n-\n-  /* Also doens't support peel for neg when niter is variable.\n-     ??? generate something like niter_expr & 1 ? init_expr : -init_expr?  */\n-  niters_skip = LOOP_VINFO_MASK_SKIP_NITERS (loop_vinfo);\n-  if ((niters_skip != NULL_TREE\n-       && TREE_CODE (niters_skip) != INTEGER_CST)\n-      || (!vect_use_loop_mask_for_alignment_p (loop_vinfo)\n-\t  && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0))\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"Peeling for alignement is not supported\"\n-\t\t\t \" for nonlinear induction when niters_skip\"\n-\t\t\t \" is not constant.\\n\");\n-      return false;\n-    }\n+  if (!vect_can_peel_nonlinear_iv_p (loop_vinfo, induction_type))\n+    return false;\n \n-  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-      && induction_type == vect_step_op_mul)\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (vectype)))\n     {\n       if (dump_enabled_p ())\n@@ -8799,6 +8810,7 @@ vectorizable_nonlinear_induction (loop_vec_info loop_vinfo,\n \n   gimple_seq stmts = NULL;\n \n+  niters_skip = LOOP_VINFO_MASK_SKIP_NITERS (loop_vinfo);\n   /* If we are using the loop mask to \"peel\" for alignment then we need\n      to adjust the start value here.  */\n   if (niters_skip != NULL_TREE)"}, {"sha": "4870c7544996e7d98248311bf4774083e9184063", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f758d447d7f4699253c9f8ee345ba9b8357cdb22/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f758d447d7f4699253c9f8ee345ba9b8357cdb22", "patch": "@@ -2343,6 +2343,9 @@ extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n /* Nonlinear induction.  */\n extern tree vect_peel_nonlinear_iv_init (gimple_seq*, tree, tree,\n \t\t\t\t\t tree, enum vect_induction_op_type);\n+extern bool\n+vect_can_peel_nonlinear_iv_p (loop_vec_info loop_vinfo,\n+\t\t\t      enum vect_induction_op_type induction_type);\n \n /* In tree-vect-slp.cc.  */\n extern void vect_slp_init (void);"}]}