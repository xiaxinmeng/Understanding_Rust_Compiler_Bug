{"sha": "bd1a56a0c3b639f1b343bf530bbdff004354848e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxYTU2YTBjM2I2MzlmMWIzNDNiZjUzMGJiZGZmMDA0MzU0ODQ4ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-09-07T03:01:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-07T03:01:53Z"}, "message": "libstdc++.exp: Check CXXFLAGS.\n\n2007-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/lib/libstdc++.exp: Check CXXFLAGS.\n\t* scripts/testsuite_flags.in: CXXFLAGS_default, matching dejagnu.\n\n\t* include/std/ostream: Spacing tweak.\n\t* include/ext/hashtable.h: Use <algorithm>.\n\t* include/ext/slist: Same.\n\t* include/ext/rope: Same.\n\t* include/bits/stl_function.h: Format.\n\t* include/tr1_impl/array: Remove section number in doxygen markup.\n\t* src/list.cc: Comment tweak.\t\n\t\n\t* docs/doxygen/user.cfg.in: Update for include/tr1_impl.\n\t\n\t* testsuite/25_algorithms/search_n/iterator.cc: Add using declaration.\n\t* testsuite/25_algorithms/nth_element/1.cc:  Same.\n\t* testsuite/21_strings/char_traits/requirements/short/1.cc: Use\n\tchar_type typedef to the underlying character type.\t\n\t* testsuite/21_strings/char_traits/requirements/wchar_t/typedefs.cc:\n\tRemove -ansi -pedantic-errors.\n\t* testsuite/21_strings/char_traits/requirements/char/typedefs.cc: Same.\n\t* testsuite/tr1/6_containers/headers/functional/synopsis.cc:\n\tRemove specializations.\n\nFrom-SVN: r128225", "tree": {"sha": "a7f60d09afc624e970db79ef96c69fd41964205a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f60d09afc624e970db79ef96c69fd41964205a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd1a56a0c3b639f1b343bf530bbdff004354848e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1a56a0c3b639f1b343bf530bbdff004354848e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1a56a0c3b639f1b343bf530bbdff004354848e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1a56a0c3b639f1b343bf530bbdff004354848e/comments", "author": null, "committer": null, "parents": [{"sha": "62a4a967a9ec706432d076cd352b64ca07b8445d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a4a967a9ec706432d076cd352b64ca07b8445d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a4a967a9ec706432d076cd352b64ca07b8445d"}], "stats": {"total": 391, "additions": 217, "deletions": 174}, "files": [{"sha": "950ff94b4667264ae23121ae7781d282fa07b04f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -1,3 +1,28 @@\n+2007-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Check CXXFLAGS.\n+\t* scripts/testsuite_flags.in: CXXFLAGS_default, matching dejagnu.\n+\n+\t* include/std/ostream: Spacing tweak.\n+\t* include/ext/hashtable.h: Use <algorithm>.\n+\t* include/ext/slist: Same.\n+\t* include/ext/rope: Same.\n+\t* include/bits/stl_function.h: Format.\n+\t* include/tr1_impl/array: Remove section number in doxygen markup.\n+\t* src/list.cc: Comment tweak.\t\n+\t\n+\t* docs/doxygen/user.cfg.in: Update for include/tr1_impl.\n+\t\n+\t* testsuite/25_algorithms/search_n/iterator.cc: Add using declaration.\n+\t* testsuite/25_algorithms/nth_element/1.cc:  Same.\n+\t* testsuite/21_strings/char_traits/requirements/short/1.cc: Use\n+\tchar_type typedef to the underlying character type.\t\n+\t* testsuite/21_strings/char_traits/requirements/wchar_t/typedefs.cc:\n+\tRemove -ansi -pedantic-errors.\n+\t* testsuite/21_strings/char_traits/requirements/char/typedefs.cc: Same.\n+\t* testsuite/tr1/6_containers/headers/functional/synopsis.cc:\n+\tRemove specializations.\n+\t\n 2007-09-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_vector.h (_Vector_base<>::_M_allocate):"}, {"sha": "647657c4f271d1993b73d187669226183f7464b4", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -60,6 +60,9 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n+/* Define if EBADMSG exists. */\n+#undef HAVE_EBADMSG\n+\n /* Define to 1 if you have the <endian.h> header file. */\n #undef HAVE_ENDIAN_H\n "}, {"sha": "9854f76a7a73586cfa10ec05f43b3f3301be2b01", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -300,7 +300,7 @@ INTERNAL_DOCS          = NO\n # in case and if your file system supports case sensitive file names. Windows \n # and Mac users are advised to set this option to NO.\n \n-CASE_SENSE_NAMES       = NO#\n+CASE_SENSE_NAMES       = NO\n \n # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen \n # will show members with their full class and namespace scopes in the \n@@ -480,6 +480,7 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/debug \\\n                          include/ext \\\n                          include/tr1 \\\n+                         include/tr1_impl \\\n                          include/algorithm \\\n                          include/array \\\n                          include/bitset \\\n@@ -580,15 +581,34 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/tr1/cwchar \\\n                          include/tr1/cwctype \\\n                          include/tr1/functional \\\n-                         include/tr1/hashtable \\\n+                         include/tr1/hashtable.h \\\n                          include/tr1/memory \\\n                          include/tr1/random \\\n                          include/tr1/regex \\\n                          include/tr1/tuple \\\n                          include/tr1/type_traits \\\n                          include/tr1/unordered_map \\\n                          include/tr1/unordered_set \\\n-                         include/tr1/utility\n+                         include/tr1_impl/utility \\\n+                         include/tr1_impl/array \\\n+                         include/tr1_impl/cctype \\\n+                         include/tr1_impl/cfenv \\\n+                         include/tr1_impl/cinttypes \\\n+                         include/tr1_impl/cmath \\\n+                         include/tr1_impl/complex \\\n+                         include/tr1_impl/cstdint \\\n+                         include/tr1_impl/cstdio \\\n+                         include/tr1_impl/cstdlib \\\n+                         include/tr1_impl/cwchar \\\n+                         include/tr1_impl/cwctype \\\n+                         include/tr1_impl/functional \\\n+                         include/tr1_impl/random \\\n+                         include/tr1_impl/regex \\\n+                         include/tr1_impl/tuple \\\n+                         include/tr1_impl/type_traits \\\n+                         include/tr1_impl/unordered_map \\\n+                         include/tr1_impl/unordered_set \\\n+                         include/tr1_impl/utility\n \n # If the value of the INPUT tag contains directories, you can use the\n # FILE_PATTERNS tag to specify one or more wildcard pattern (like\n@@ -1284,8 +1304,7 @@ UML_LOOK               = NO\n # If set to YES, the inheritance and collaboration graphs will show the \n # relations between templates and their instances.\n \n-#TEMPLATE_RELATIONS     = YES\n-TEMPLATE_RELATIONS     = NO\n+TEMPLATE_RELATIONS     = YES\n \n # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT \n # tags are set to YES then doxygen will generate a graph for each documented "}, {"sha": "ece42a3e2ebc5e749aece13d7821bca378401599", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 79, "deletions": 66, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -99,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  This is one of the @link s20_3_1_base functor base classes@endlink.\n    */\n-  template <class _Arg, class _Result>\n+  template<typename _Arg, typename _Result>\n     struct unary_function\n     {\n       typedef _Arg argument_type;   ///< @c argument_type is the type of the\n@@ -111,7 +111,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  This is one of the @link s20_3_1_base functor base classes@endlink.\n    */\n-  template <class _Arg1, class _Arg2, class _Result>\n+  template<typename _Arg1, typename _Arg2, typename _Result>\n     struct binary_function\n     {\n       typedef _Arg1 first_argument_type;   ///< the type of the first argument\n@@ -133,7 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct plus : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -142,7 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct minus : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -151,7 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct multiplies : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct divides : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -169,7 +169,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct modulus : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct negate : public unary_function<_Tp, _Tp>\n     {\n       _Tp\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct equal_to : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -204,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct not_equal_to : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -213,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct greater : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct less : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct greater_equal : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct less_equal : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct logical_and : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -266,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct logical_or : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n@@ -275,7 +275,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct logical_not : public unary_function<_Tp, bool>\n     {\n       bool\n@@ -286,23 +286,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 660. Missing Bitwise Operations.\n-  template <class _Tp>\n+  template<typename _Tp>\n     struct bit_and : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x & __y; }\n     };\n \n-  template <class _Tp>\n+  template<typename _Tp>\n     struct bit_or : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x | __y; }\n     };\n \n-  template <class _Tp>\n+  template<typename _Tp>\n     struct bit_xor : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n@@ -338,29 +338,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_5_negators negation functors@endlink.\n-  template <class _Predicate>\n+  template<typename _Predicate>\n     class unary_negate\n     : public unary_function<typename _Predicate::argument_type, bool>\n     {\n     protected:\n       _Predicate _M_pred;\n+\n     public:\n       explicit\n-      unary_negate(const _Predicate& __x) : _M_pred(__x) {}\n+      unary_negate(const _Predicate& __x) : _M_pred(__x) { }\n \n       bool\n       operator()(const typename _Predicate::argument_type& __x) const\n       { return !_M_pred(__x); }\n     };\n \n   /// One of the @link s20_3_5_negators negation functors@endlink.\n-  template <class _Predicate>\n+  template<typename _Predicate>\n     inline unary_negate<_Predicate>\n     not1(const _Predicate& __pred)\n     { return unary_negate<_Predicate>(__pred); }\n \n   /// One of the @link s20_3_5_negators negation functors@endlink.\n-  template <class _Predicate>\n+  template<typename _Predicate>\n     class binary_negate\n     : public binary_function<typename _Predicate::first_argument_type,\n \t\t\t     typename _Predicate::second_argument_type, bool>\n@@ -379,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_5_negators negation functors@endlink.\n-  template <class _Predicate>\n+  template<typename _Predicate>\n     inline binary_negate<_Predicate>\n     not2(const _Predicate& __pred)\n     { return binary_negate<_Predicate>(__pred); }\n@@ -417,18 +418,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template <class _Operation>\n+  template<typename _Operation>\n     class binder1st\n     : public unary_function<typename _Operation::second_argument_type,\n \t\t\t    typename _Operation::result_type>\n     {\n     protected:\n       _Operation op;\n       typename _Operation::first_argument_type value;\n+\n     public:\n       binder1st(const _Operation& __x,\n \t\tconst typename _Operation::first_argument_type& __y)\n-      : op(__x), value(__y) {}\n+      : op(__x), value(__y) { }\n \n       typename _Operation::result_type\n       operator()(const typename _Operation::second_argument_type& __x) const\n@@ -442,7 +444,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template <class _Operation, class _Tp>\n+  template<typename _Operation, typename _Tp>\n     inline binder1st<_Operation>\n     bind1st(const _Operation& __fn, const _Tp& __x)\n     {\n@@ -451,18 +453,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template <class _Operation>\n+  template<typename _Operation>\n     class binder2nd\n     : public unary_function<typename _Operation::first_argument_type,\n \t\t\t    typename _Operation::result_type>\n     {\n     protected:\n       _Operation op;\n       typename _Operation::second_argument_type value;\n+\n     public:\n       binder2nd(const _Operation& __x,\n \t\tconst typename _Operation::second_argument_type& __y)\n-      : op(__x), value(__y) {}\n+      : op(__x), value(__y) { }\n \n       typename _Operation::result_type\n       operator()(const typename _Operation::first_argument_type& __x) const\n@@ -476,7 +479,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template <class _Operation, class _Tp>\n+  template<typename _Operation, typename _Tp>\n     inline binder2nd<_Operation>\n     bind2nd(const _Operation& __fn, const _Tp& __x)\n     {\n@@ -506,56 +509,58 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @{\n    */\n   /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n-  template <class _Arg, class _Result>\n+  template<typename _Arg, typename _Result>\n     class pointer_to_unary_function : public unary_function<_Arg, _Result>\n     {\n     protected:\n       _Result (*_M_ptr)(_Arg);\n+\n     public:\n-      pointer_to_unary_function() {}\n+      pointer_to_unary_function() { }\n \n       explicit\n       pointer_to_unary_function(_Result (*__x)(_Arg))\n-      : _M_ptr(__x) {}\n+      : _M_ptr(__x) { }\n \n       _Result\n       operator()(_Arg __x) const\n       { return _M_ptr(__x); }\n     };\n \n   /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n-  template <class _Arg, class _Result>\n+  template<typename _Arg, typename _Result>\n     inline pointer_to_unary_function<_Arg, _Result>\n     ptr_fun(_Result (*__x)(_Arg))\n     { return pointer_to_unary_function<_Arg, _Result>(__x); }\n \n   /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n-  template <class _Arg1, class _Arg2, class _Result>\n+  template<typename _Arg1, typename _Arg2, typename _Result>\n     class pointer_to_binary_function\n     : public binary_function<_Arg1, _Arg2, _Result>\n     {\n     protected:\n       _Result (*_M_ptr)(_Arg1, _Arg2);\n+\n     public:\n-      pointer_to_binary_function() {}\n+      pointer_to_binary_function() { }\n \n       explicit\n       pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))\n-      : _M_ptr(__x) {}\n+      : _M_ptr(__x) { }\n \n       _Result\n       operator()(_Arg1 __x, _Arg2 __y) const\n       { return _M_ptr(__x, __y); }\n     };\n \n   /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n-  template <class _Arg1, class _Arg2, class _Result>\n+  template<typename _Arg1, typename _Arg2, typename _Result>\n     inline pointer_to_binary_function<_Arg1, _Arg2, _Result>\n     ptr_fun(_Result (*__x)(_Arg1, _Arg2))\n     { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }\n   /** @}  */\n \n-  template <class _Tp>\n+  template<typename _Tp>\n     struct _Identity : public unary_function<_Tp,_Tp>\n     {\n       _Tp&\n@@ -567,7 +572,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __x; }\n     };\n \n-  template <class _Pair>\n+  template<typename _Pair>\n     struct _Select1st : public unary_function<_Pair,\n \t\t\t\t\t      typename _Pair::first_type>\n     {\n@@ -580,7 +585,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __x.first; }\n     };\n \n-  template <class _Pair>\n+  template<typename _Pair>\n     struct _Select2nd : public unary_function<_Pair,\n \t\t\t\t\t      typename _Pair::second_type>\n     {\n@@ -609,178 +614,186 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     class mem_fun_t : public unary_function<_Tp*, _Ret>\n     {\n     public:\n       explicit\n       mem_fun_t(_Ret (_Tp::*__pf)())\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(_Tp* __p) const\n       { return (__p->*_M_f)(); }\n+\n     private:\n       _Ret (_Tp::*_M_f)();\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     class const_mem_fun_t : public unary_function<const _Tp*, _Ret>\n     {\n     public:\n       explicit\n       const_mem_fun_t(_Ret (_Tp::*__pf)() const)\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(const _Tp* __p) const\n       { return (__p->*_M_f)(); }\n+\n     private:\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     class mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n     public:\n       explicit\n       mem_fun_ref_t(_Ret (_Tp::*__pf)())\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(_Tp& __r) const\n       { return (__r.*_M_f)(); }\n+\n     private:\n       _Ret (_Tp::*_M_f)();\n   };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n     public:\n       explicit\n       const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(const _Tp& __r) const\n       { return (__r.*_M_f)(); }\n+\n     private:\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>\n     {\n     public:\n       explicit\n       mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(_Tp* __p, _Arg __x) const\n       { return (__p->*_M_f)(__x); }\n+\n     private:\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>\n     {\n     public:\n       explicit\n       const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(const _Tp* __p, _Arg __x) const\n       { return (__p->*_M_f)(__x); }\n+\n     private:\n       _Ret (_Tp::*_M_f)(_Arg) const;\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n     public:\n       explicit\n       mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(_Tp& __r, _Arg __x) const\n       { return (__r.*_M_f)(__x); }\n+\n     private:\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n   /// One of the @link s20_3_8_memadaptors adaptors for member\n   /// pointers@endlink.\n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n     public:\n       explicit\n       const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)\n-      : _M_f(__pf) {}\n+      : _M_f(__pf) { }\n \n       _Ret\n       operator()(const _Tp& __r, _Arg __x) const\n       { return (__r.*_M_f)(__x); }\n+\n     private:\n       _Ret (_Tp::*_M_f)(_Arg) const;\n     };\n \n   // Mem_fun adaptor helper functions.  There are only two:\n   // mem_fun and mem_fun_ref.\n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     inline mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)())\n     { return mem_fun_t<_Ret, _Tp>(__f); }\n \n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     inline const_mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)() const)\n     { return const_mem_fun_t<_Ret, _Tp>(__f); }\n \n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     inline mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)())\n     { return mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n-  template <class _Ret, class _Tp>\n+  template<typename _Ret, typename _Tp>\n     inline const_mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)() const)\n     { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     inline mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg))\n     { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     inline const_mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     inline mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\n     { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n-  template <class _Ret, class _Tp, class _Arg>\n+  template<typename _Ret, typename _Tp, typename _Arg>\n     inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }"}, {"sha": "e73b7df72c4fcdf6c4264838c5c6ab83d2c034d6", "filename": "libstdc++-v3/include/ext/hashtable.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -1,6 +1,6 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -67,7 +67,7 @@\n \n #include <vector>\n #include <iterator>\n-#include <bits/stl_algo.h>\n+#include <algorithm>\n #include <bits/stl_function.h>\n #include <ext/hash_fun.h>\n "}, {"sha": "b5489176c52fdd59dabd58b0d8348b7d7ac18eb4", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -49,15 +49,14 @@\n #ifndef _ROPE\n #define _ROPE 1\n \n-#include <bits/stl_algobase.h>\n+#include <algorithm>\n+#include <iosfwd>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n-#include <bits/stl_algo.h>\n #include <bits/stl_function.h>\n #include <bits/stl_numeric.h>\n #include <bits/allocator.h>\n #include <ext/hash_fun.h>\n-#include <iosfwd>\n #include <bits/gthr.h>\n \n # ifdef __GC"}, {"sha": "7ae9ffbe10153aac35a48965f5fee633be622505", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -1,6 +1,6 @@\n // Singly-linked list implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,7 +49,7 @@\n #ifndef _SLIST\n #define _SLIST 1\n \n-#include <bits/stl_algobase.h>\n+#include <algorithm>\n #include <bits/allocator.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>"}, {"sha": "4fb6d19b7fcc2008beaa3feeb1bda1d5e66ce7d8", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -539,7 +539,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const error_code& __e)\n-{ return (__out << __e.category().name().c_str() << ':' << __e.value()); }\n+    { return (__out << __e.category().name().c_str() << ':' << __e.value()); }\n #endif\n \n   // [27.6.2.7] standard basic_ostream manipulators"}, {"sha": "994d4ddcf6d7b948759c62624ec90767dd697b37", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -36,7 +36,7 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n-  /// @brief  struct array [6.2.2].\n+  /// @brief  struct array.\n   /// NB: Requires complete type _Tp.\n   template<typename _Tp, std::size_t _Nm>\n     struct array"}, {"sha": "16623e0f61573cf741352aef11ac111912e40ef5", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -54,10 +54,9 @@ case ${query} in\n       echo ${CC}\n       ;;\n     --cxxflags)\n-      CXXFLAGS_save=\"-g -O2 -D_GLIBCXX_ASSERT\"\n-      CXXFLAGS_config='@SECTION_FLAGS@ -fmessage-length=0 \n- \t\t      @CXXFLAGS@ @EXTRA_CXX_FLAGS@ '\n-      echo ${CXXFLAGS_save} ${CXXFLAGS_config}\n+      CXXFLAGS_default=\"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\"\n+      CXXFLAGS_config=\"@SECTION_FLAGS@ @CXXFLAGS@ @EXTRA_CXX_FLAGS@\"\n+      echo ${CXXFLAGS_default} ${CXXFLAGS_config}\n       ;;\n     --cxxpchflags)\n       PCHFLAGS=\"@glibcxx_PCHFLAGS@\""}, {"sha": "e1f82e69c5d37bb5b10659b60cca095650d44df0", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -115,7 +115,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n     do\n     {\n       std::swap(__tmp->_M_next, __tmp->_M_prev);\n-      __tmp = __tmp->_M_prev;     // Old next node is now prev.\n+\n+      // Old next node is now prev.\n+      __tmp = __tmp->_M_prev;     \n     } \n     while (__tmp != this);\n   }"}, {"sha": "13b703907664706fc06e0afab57fbed81ba9df06", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char/typedefs.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2Ftypedefs.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile }\n-// { dg-options \"-ansi -pedantic-errors\" } \n // 2001-02-11 gdr\n // Origin: Craig Rodrigues <rodrigc@mediaone.net>\n "}, {"sha": "2e1b631f75c84a6daf437b5a59871c0855e77914", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/short/1.cc", "status": "modified", "additions": 54, "deletions": 55, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -31,6 +31,7 @@\n \n void test02(void)\n {\n+  typedef short char_type;\n   bool test __attribute__((unused)) = true;\n  \n   // 21.1.1 character traits requirements\n@@ -45,67 +46,67 @@ void test02(void)\n   // pos      == X::pos_type\n   // state    == X::state_type\n \n-  // void X::assign(short c, short d)\n+  // void X::assign(char_type c, char_type d)\n   // assigns c = d;\n-  short c1 = 'z';\n-  short c2 = 'u';\n+  char_type c1 = 'z';\n+  char_type c2 = 'u';\n   VERIFY( c1 != c2 );\n-  std::char_traits<short>::assign(c1,c2);\n+  std::char_traits<char_type>::assign(c1,c2);\n   VERIFY( c1 == 'u' );\n \n-  // bool X::eq(short c, short d)\n+  // bool X::eq(char_type c, char_type d)\n   c1 = 'z';\n   c2 = 'u';\n-  VERIFY ( !std::char_traits<short>::eq(c1, c2) );\n-  VERIFY ( std::char_traits<short>::eq(c1, c1) );\n-  VERIFY ( std::char_traits<short>::eq(c2, c2) );\n+  VERIFY ( !std::char_traits<char_type>::eq(c1, c2) );\n+  VERIFY ( std::char_traits<char_type>::eq(c1, c1) );\n+  VERIFY ( std::char_traits<char_type>::eq(c2, c2) );\n \n-  // bool X::lt(short c, short d)\n+  // bool X::lt(char_type c, char_type d)\n   c1 = 'z';\n   c2 = 'u';\n-  VERIFY ( std::char_traits<short>::lt(c2, c1) );\n-  VERIFY ( !std::char_traits<short>::lt(c1, c2) );\n-  VERIFY ( !std::char_traits<short>::lt(c1, c1) );\n-  VERIFY ( !std::char_traits<short>::lt(c2, c2) );\n+  VERIFY ( std::char_traits<char_type>::lt(c2, c1) );\n+  VERIFY ( !std::char_traits<char_type>::lt(c1, c2) );\n+  VERIFY ( !std::char_traits<char_type>::lt(c1, c1) );\n+  VERIFY ( !std::char_traits<char_type>::lt(c2, c2) );\n \n-  // short* X::move(short* s, const short* p, size_t n)\n+  // char_type* X::move(char_type* s, const char_type* p, size_t n)\n   // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n   // correctly even where p is in [s, s + n), and yields s.   \n-  short array1[] = {'z', 'u', 'm', 'a', ' ', 'b', 'e', 'a', 'c', 'h',  0};\n-  const std::basic_string<short> str_01(array1 + 0, array1 + 10);\n+  char_type array1[] = {'z', 'u', 'm', 'a', ' ', 'b', 'e', 'a', 'c', 'h',  0};\n+  const std::basic_string<char_type> str_01(array1 + 0, array1 + 10);\n \n-  const short str_lit1[] = {'m', 'o', 'n', 't', 'a', 'r', 'a', ' ', 'a', 'n', 'd', ' ', 'o', 'c', 'e', 'a', 'n', ' ', 'b', 'e', 'a', 'c', 'h', 0};\n+  const char_type str_lit1[] = {'m', 'o', 'n', 't', 'a', 'r', 'a', ' ', 'a', 'n', 'd', ' ', 'o', 'c', 'e', 'a', 'n', ' ', 'b', 'e', 'a', 'c', 'h', 0};\n \n-  int len = sizeof(str_lit1)/sizeof(short) + sizeof(array1)/sizeof(short) - 1;\n+  int len = sizeof(str_lit1)/sizeof(char_type) + sizeof(array1)/sizeof(char_type) - 1;\n   // two terminating chars\n-  short array3[] = {'b', 'o', 'r', 'a', 'c', 'a', 'y', ',', ' ', 'p', 'h', 'i', 'l', 'i', 'p', 'p', 'i', 'n', 'e', 's', 0};\n-  short array2[len];\n-  std::char_traits<short>::copy(array2, array3, len);\n+  char_type array3[] = {'b', 'o', 'r', 'a', 'c', 'a', 'y', ',', ' ', 'p', 'h', 'i', 'l', 'i', 'p', 'p', 'i', 'n', 'e', 's', 0};\n+  char_type array2[len];\n+  std::char_traits<char_type>::copy(array2, array3, len);\n \n   VERIFY( str_lit1[0] == 'm' );\n   c1 = array2[0];\n   c2 = str_lit1[0];\n-  short c3 = array2[1];\n-  short c4 = str_lit1[1];\n-  std::char_traits<short>::move(array2, str_lit1, 0);\n+  char_type c3 = array2[1];\n+  char_type c4 = str_lit1[1];\n+  std::char_traits<char_type>::move(array2, str_lit1, 0);\n   VERIFY( array2[0] == c1 );\n   VERIFY( str_lit1[0] == c2 );\n-  std::char_traits<short>::move(array2, str_lit1, 1);\n+  std::char_traits<char_type>::move(array2, str_lit1, 1);\n   VERIFY( array2[0] == c2 );\n   VERIFY( str_lit1[0] == c2 );\n   VERIFY( array2[1] == c3 );\n   VERIFY( str_lit1[1] == c4 );\n-  std::char_traits<short>::move(array2, str_lit1, 2);\n+  std::char_traits<char_type>::move(array2, str_lit1, 2);\n   VERIFY( array2[0] == c2 );\n   VERIFY( str_lit1[0] == c2 );\n   VERIFY( array2[1] == c4 );\n   VERIFY( str_lit1[1] == c4 );\n  \n-  short* pc1 = array1 + 1;\n+  char_type* pc1 = array1 + 1;\n   c1 = pc1[0];\n   c2 = array1[0];\n   VERIFY( c1 != c2 );\n-  short* pc2 = std::char_traits<short>::move(array1, pc1, 0);\n+  char_type* pc2 = std::char_traits<char_type>::move(array1, pc1, 0);\n   c3 = pc1[0];\n   c4 = array1[0];\n   VERIFY( c1 == c3 );\n@@ -114,61 +115,59 @@ void test02(void)\n \n   c1 = pc1[0];\n   c2 = array1[0];\n-  short* pc3 = pc1;\n-  pc2 = std::char_traits<short>::move(array1, pc1, 10);\n+  char_type* pc3 = pc1;\n+  pc2 = std::char_traits<char_type>::move(array1, pc1, 10);\n   c3 = pc1[0];\n   c4 = array1[0];\n-  VERIFY( c1 != c3 ); // underlying short array changed.\n+  VERIFY( c1 != c3 ); // underlying char_type array changed.\n   VERIFY( c4 != c3 );\n   VERIFY( pc2 == array1 );\n   VERIFY( pc3 == pc1 ); // but pointers o-tay\n   c1 = *(str_01.data());\n   c2 = array1[0];\n   VERIFY( c1 != c2 );\n \n-  // size_t X::length(const short* p)\n-  len = std::char_traits<short>::length(str_lit1);\n-  VERIFY( len == sizeof(str_lit1) / sizeof(short) - 1 );\n+  // size_t X::length(const char_type* p)\n+  len = std::char_traits<char_type>::length(str_lit1);\n+  VERIFY( len == sizeof(str_lit1) / sizeof(char_type) - 1 );\n \n-  // const short* X::find(const short* s, size_t n, short c)\n-  const int N4 = sizeof(str_lit1) / sizeof(short);\n-  const short* pc4 = std::char_traits<short>::find(str_lit1, N4, 'a');\n+  // const char_type* X::find(const char_type* s, size_t n, char_type c)\n+  const int N4 = sizeof(str_lit1) / sizeof(char_type);\n+  const char_type* pc4 = std::char_traits<char_type>::find(str_lit1, N4, 'a');\n   VERIFY( pc4 != 0 );\n   VERIFY( *pc4 == 'a' );\n \n-  pc4 = std::char_traits<short>::find(str_lit1, N4, 0x0a73);\n+  pc4 = std::char_traits<char_type>::find(str_lit1, N4, 0x0a73);\n   VERIFY( pc4 == 0 );\n \n-  // short* X::assign(short* s, size_t n, short c)\n-  len = sizeof(array2) / sizeof(short);\n-  std::memset(array2, 0xaf, len * sizeof(short));\n+  // char_type* X::assign(char_type* s, size_t n, char_type c)\n+  len = sizeof(array2) / sizeof(char_type);\n+  std::memset(array2, 0xaf, len * sizeof(char_type));\n   VERIFY( array2[0] != 0x15a8 );\n \n-  pc1 = std::char_traits<short>::assign (array2, len, 0x15a8);\n+  pc1 = std::char_traits<char_type>::assign (array2, len, 0x15a8);\n   VERIFY( pc1 == array2 );\n   for (int i = 0; i < len; ++i)\n     VERIFY( array2[i] == 0x15a8 );\n \n-  // short* X::copy(short* s, const short* p, size_t n)\n-  int n1 = sizeof(str_lit1) / sizeof(short);\n-  pc1 = std::char_traits<short>::copy(array2, str_lit1, n1);\n-  len = std::char_traits<short>::length(array2);\n+  // char_type* X::copy(char_type* s, const char_type* p, size_t n)\n+  int n1 = sizeof(str_lit1) / sizeof(char_type);\n+  pc1 = std::char_traits<char_type>::copy(array2, str_lit1, n1);\n+  len = std::char_traits<char_type>::length(array2);\n   VERIFY( len == n1 - 1 );\n   for (int i = 0; i < len; ++i)\n     VERIFY( str_lit1[i] == array2[i] );\n \n-  // int X::compare(const short* p, const short* q, size_t n)\n-  const short* pconst1 = str_01.data();\n-  const short* pconst2 = str_lit1;\n+  // int X::compare(const char_type* p, const char_type* q, size_t n)\n+  const char_type* pconst1 = str_01.data();\n+  const char_type* pconst2 = str_lit1;\n \n-  VERIFY( std::char_traits<short>::compare(pconst1, pconst2, 10) > 0 );\n-  VERIFY( std::char_traits<short>::compare(pconst2, pconst1, 10) < 0 );\n-  VERIFY( std::char_traits<short>::compare(pconst1, pconst1, 10) == 0 );\n-  VERIFY( std::char_traits<short>::compare(pconst2, pconst2, 10) == 0 );\n+  VERIFY( std::char_traits<char_type>::compare(pconst1, pconst2, 10) > 0 );\n+  VERIFY( std::char_traits<char_type>::compare(pconst2, pconst1, 10) < 0 );\n+  VERIFY( std::char_traits<char_type>::compare(pconst1, pconst1, 10) == 0 );\n+  VERIFY( std::char_traits<char_type>::compare(pconst2, pconst2, 10) == 0 );\n }\n \n-\n-\n int main()\n { \n   test02();"}, {"sha": "6bd990aa11ff67c4bdfd5fa41108306ec6ac34c8", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/wchar_t/typedefs.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2Ftypedefs.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile }\n-// { dg-options \"-ansi -pedantic-errors\" } \n // 2001-02-11 gdr\n // Origin: Craig Rodrigues <rodrigc@mediaone.net>\n "}, {"sha": "2ce39dd4389565647aaa9c3919383fe6221fe4b1", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -25,6 +25,7 @@\n using __gnu_test::test_container;\n using __gnu_test::random_access_iterator_wrapper;\n using std::nth_element;\n+using std::partial_sort;\n \n typedef test_container<int, random_access_iterator_wrapper> Container;\n "}, {"sha": "2a9b0f42a0929baf3d15333ae0c6faf2afee3410", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/iterator.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -52,12 +52,15 @@ lexstep(int* start, int length)\n   return !carry;\n }\n \n-using __gnu_test::test_container;\n-using __gnu_test::random_access_iterator_wrapper;\n-using __gnu_test::bidirectional_iterator_wrapper;\n-using __gnu_test::forward_iterator_wrapper;\n+int main() \n+{\n+  using __gnu_test::test_container;\n+  using __gnu_test::random_access_iterator_wrapper;\n+  using __gnu_test::bidirectional_iterator_wrapper;\n+  using __gnu_test::forward_iterator_wrapper;\n+  \n+  using std::search_n;\n \n-int main() {\n   test_container<int,forward_iterator_wrapper> con(array1,array1 + 10);\n   VERIFY(search_n(con.end(), con.end(), 0, 1) == con.end());\n   VERIFY(search_n(con.end(), con.end(), 1, 1) == con.end());"}, {"sha": "70b588d20df96e2e5e29b15daaf298fdaebcc799", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -171,13 +171,6 @@ proc libstdc++_init { testfile } {\n \tset compiler [transform \"g++\"]\n     }\n \n-    # Default settings.\n-    set cxx [transform \"g++\"]\n-    set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\" \n-    set cxxldflags \"\"\n-    set cc [transform \"gcc\"]\n-    # Locate testsuite_hooks.h and other testsuite headers.\n-    set includes \"-I${srcdir}/util\"\n     # Adapt the defaults for special circumstances.\n     if [is_remote host] {\n \t# A remote host does not, in general, have access to the\n@@ -206,6 +199,12 @@ proc libstdc++_init { testfile } {\n \t\treturn \"untested\"\n \t    }\n \t}\n+\t# Default settings.\n+\tset cxx [transform \"g++\"]\n+\tset cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0 \" \n+\tset cxxldflags \"\"\n+\tset cc [transform \"gcc\"]\n+\t# Locate testsuite_hooks.h and other testsuite headers.\t\n \tset includes \"-Iutil\"\n     } elseif { [file exists $flags_file] } {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n@@ -215,6 +214,9 @@ proc libstdc++_init { testfile } {\n \tset cc [exec sh $flags_file --build-cc]\n \tset includes [exec sh $flags_file --build-includes]\n     }\n+    append cxxflags \" \"\n+    append cxxflags [getenv CXXFLAGS]\n+    v3track cxxflags 2\n \n     # Always use MO files built by this test harness.\n     set cxxflags \"$cxxflags -DLOCALEDIR=\\\".\\\"\"\n@@ -830,7 +832,6 @@ proc check_v3_target_namedlocale { } {\n proc check_v3_target_debug_mode { } {\n     global cxxflags\n     global et_debug_mode\n-\n     global tool\t\n \n     if { ![info exists et_debug_mode_target_name] } {"}, {"sha": "fd0b595eb3febe5b359115c99e00db08c2b34394", "filename": "libstdc++-v3/testsuite/tr1/6_containers/headers/functional/synopsis.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Ffunctional%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1a56a0c3b639f1b343bf530bbdff004354848e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Ffunctional%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Ffunctional%2Fsynopsis.cc?ref=bd1a56a0c3b639f1b343bf530bbdff004354848e", "patch": "@@ -29,24 +29,5 @@ namespace tr1 {\n   // [6.3.3] Hash function base template\n   template <class T> struct hash;\n \n-  // Hash function specializations\n-  template <> struct hash<bool>;\n-  template <> struct hash<char>;\n-  template <> struct hash<signed char>;\n-  template <> struct hash<unsigned char>;\n-  template <> struct hash<wchar_t>;\n-  template <> struct hash<short>;\n-  template <> struct hash<unsigned short>;\n-  template <> struct hash<int>;\n-  template <> struct hash<unsigned int>;\n-  template <> struct hash<long>;\n-  template <> struct hash<unsigned long>;\n-  template <> struct hash<float>;\n-  template <> struct hash<double>;\n-  template <> struct hash<long double>;\n-  template<class T> struct hash<T*>;\n-  template <> struct hash<std::string>;\n-  template <> struct hash<std::wstring>;\n-\n } // namespace tr1\n } // namespace std"}]}