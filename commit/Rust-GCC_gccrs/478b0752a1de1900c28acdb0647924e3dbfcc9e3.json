{"sha": "478b0752a1de1900c28acdb0647924e3dbfcc9e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4YjA3NTJhMWRlMTkwMGMyOGFjZGIwNjQ3OTI0ZTNkYmZjYzllMw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-29T18:42:07Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-29T18:42:07Z"}, "message": "except.c (push_eh_entry): Eliminate start of exception region label, as it isn't used.\n\n\t* except.c (push_eh_entry): Eliminate start of exception region\n\tlabel, as it isn't used.  Rename end_label to outer_context.\n\t(expand_eh_region_start_for_decl): Likewise.\n\t(expand_leftover_cleanups): Likewise.\n\t(expand_start_all_catch): Likewise.\n\t* except.h (eh_entry): Likewise.\n\t* except.c (expand_eh_region_end): Likewise.  Jump around the nop\n\tthat we insert, so that we can optimize it away, if it is unused,\n\talso so that flow analysis can tell if we fall through to the end\n\tof a function or not so that it can know if a function that returns\n\ta value, in fact does or not.\nFixes g++.jason/return2.C when using -fno-sjlj-exceptions\n\nFrom-SVN: r14135", "tree": {"sha": "2143b8a6eab35ce0032e661f721db4162356e522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2143b8a6eab35ce0032e661f721db4162356e522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/478b0752a1de1900c28acdb0647924e3dbfcc9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478b0752a1de1900c28acdb0647924e3dbfcc9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478b0752a1de1900c28acdb0647924e3dbfcc9e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478b0752a1de1900c28acdb0647924e3dbfcc9e3/comments", "author": null, "committer": null, "parents": [{"sha": "37c46b43dba86b48bb19d9f7ed231385e02c1abd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c46b43dba86b48bb19d9f7ed231385e02c1abd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c46b43dba86b48bb19d9f7ed231385e02c1abd"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "4701017326acd0ebfe0db6dbecfb3f6f8677c2c3", "filename": "gcc/except.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478b0752a1de1900c28acdb0647924e3dbfcc9e3/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478b0752a1de1900c28acdb0647924e3dbfcc9e3/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=478b0752a1de1900c28acdb0647924e3dbfcc9e3", "patch": "@@ -533,26 +533,22 @@ copy_eh_entry (entry)\n   return newentry;\n }\n \n-/* Push a new eh_node entry onto STACK, and return the start label for\n-   the entry.  */\n+/* Push a new eh_node entry onto STACK.  */\n \n-static rtx\n+static void\n push_eh_entry (stack)\n      struct eh_stack *stack;\n {\n   struct eh_node *node = (struct eh_node *) xmalloc (sizeof (struct eh_node));\n   struct eh_entry *entry = (struct eh_entry *) xmalloc (sizeof (struct eh_entry));\n \n-  entry->start_label = gen_label_rtx ();\n-  entry->end_label = gen_label_rtx ();\n+  entry->outer_context = gen_label_rtx ();\n   entry->exception_handler_label = gen_label_rtx ();\n   entry->finalization = NULL_TREE;\n \n   node->entry = entry;\n   node->chain = stack->top;\n   stack->top = node;\n-\n-  return entry->start_label;\n }\n \n /* Pop an entry from the given STACK.  */\n@@ -1007,7 +1003,7 @@ expand_eh_region_start_for_decl (decl)\n \n   if (exceptions_via_longjmp == 0)\n     note = emit_note (NULL_PTR, NOTE_INSN_EH_REGION_BEG);\n-  emit_label (push_eh_entry (&ehstack));\n+  push_eh_entry (&ehstack);\n   if (exceptions_via_longjmp == 0)\n     NOTE_BLOCK_NUMBER (note)\n       = CODE_LABEL_NUMBER (ehstack.top->entry->exception_handler_label);\n@@ -1047,21 +1043,25 @@ expand_eh_region_end (handler)\n \n   if (exceptions_via_longjmp == 0)\n     {\n+      rtx label;\n       rtx note = emit_note (NULL_PTR, NOTE_INSN_EH_REGION_END);\n       NOTE_BLOCK_NUMBER (note) = CODE_LABEL_NUMBER (entry->exception_handler_label);\n-    }\n \n-  /* Emit a label marking the end of this exception region.  */\n-  emit_label (entry->end_label);\n+      label = gen_label_rtx ();\n+      emit_jump (label);\n+\n+      /* Emit a label marking the end of this exception region that\n+\t is used for rethrowing into the outer context.  */\n+      emit_label (entry->outer_context);\n \n-  if (exceptions_via_longjmp == 0)\n-    {\n       /* Put in something that takes up space, as otherwise the end\n \t address for this EH region could have the exact same address as\n \t its outer region. This would cause us to miss the fact that\n \t resuming exception handling with this PC value would be inside\n \t the outer region.  */\n       emit_insn (gen_nop ());\n+      emit_barrier ();\n+      emit_label (label);\n     }\n \n   entry->finalization = handler;\n@@ -1181,11 +1181,12 @@ expand_leftover_cleanups ()\n \t    emit_throw ();\n \t  else\n \t    {\n-\t      /* The below can be optimized away, and we could just fall into the\n-\t\t next EH handler, if we are certain they are nested.  */\n+\t      /* The below can be optimized away, and we could just\n+\t\t fall into the next EH handler, if we are certain they\n+\t\t are nested.  */\n \t      /* Emit code to throw to the outer context if we fall off\n \t\t the end of the handler.  */\n-\t      expand_internal_throw (entry->end_label);\n+\t      expand_internal_throw (entry->outer_context);\n \t    }\n \t}\n \n@@ -1302,7 +1303,7 @@ expand_start_all_catch ()\n \t\t into the next EH handler) if we are certain they are\n \t\t nested.  */\n \n-\t      expand_internal_throw (entry->end_label);\n+\t      expand_internal_throw (entry->outer_context);\n \t    }\n \t}\n       free (entry);"}, {"sha": "14bb2349fb0213788400ba4eb89fb6dcfd0ceafb", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478b0752a1de1900c28acdb0647924e3dbfcc9e3/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478b0752a1de1900c28acdb0647924e3dbfcc9e3/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=478b0752a1de1900c28acdb0647924e3dbfcc9e3", "patch": "@@ -38,9 +38,7 @@ struct label_node {\n \n /* An eh_entry is used to describe one exception handling region.\n \n-   START_LABEL is the label corresponding to the start of the region.\n-\n-   END_LABEL is the label corresponding to the end of the region.\n+   OUTER_CONTEXT is the label used for rethrowing into the outer context.\n \n    EXCEPTION_HANDLER_LABEL is the label corresponding to the handler\n    for this region.\n@@ -50,8 +48,7 @@ struct label_node {\n    end of a group of try blocks.  */\n \n struct eh_entry {\n-  rtx start_label;\n-  rtx end_label;\n+  rtx outer_context;\n   rtx exception_handler_label;\n \n   tree finalization;"}]}