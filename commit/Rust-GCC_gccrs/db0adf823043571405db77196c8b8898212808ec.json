{"sha": "db0adf823043571405db77196c8b8898212808ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwYWRmODIzMDQzNTcxNDA1ZGI3NzE5NmM4Yjg4OTgyMTI4MDhlYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-06T15:46:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-06T15:46:53Z"}, "message": "Use backend interface for if statements.\n\nRename some temporary conversion functions to shorter names.\n\n\t* go-gcc.cc (Gcc_backend::if_statement): New function.\n\t(tree_to_stat): New function.\n\t(expr_to_tree): Renamed from expression_to_tree.\n\t(stat_to_tree): Renamed from statement_to_tree.\n\nFrom-SVN: r172052", "tree": {"sha": "0dc23eb2f1b6ff20645ffb5adce44203f0b5a406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc23eb2f1b6ff20645ffb5adce44203f0b5a406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db0adf823043571405db77196c8b8898212808ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0adf823043571405db77196c8b8898212808ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0adf823043571405db77196c8b8898212808ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0adf823043571405db77196c8b8898212808ec/comments", "author": null, "committer": null, "parents": [{"sha": "cfebcf30eae6e2f41e61d600f129872aaa286fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfebcf30eae6e2f41e61d600f129872aaa286fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfebcf30eae6e2f41e61d600f129872aaa286fb3"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "ff56bfe9883b3253020428406c0d6956c998a19c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=db0adf823043571405db77196c8b8898212808ec", "patch": "@@ -1,3 +1,10 @@\n+2011-04-06  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::if_statement): New function.\n+\t(tree_to_stat): New function.\n+\t(expr_to_tree): Renamed from expression_to_tree.\n+\t(stat_to_tree): Renamed from statement_to_tree.\n+\n 2011-04-06  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::expression_statement): New function."}, {"sha": "de689f8478e54747fa22f0c66af719bfdf73e5e8", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=db0adf823043571405db77196c8b8898212808ec", "patch": "@@ -176,6 +176,10 @@ class Gcc_backend : public Backend\n   return_statement(Bfunction*, const std::vector<Bexpression*>&,\n \t\t   source_location);\n \n+  Bstatement*\n+  if_statement(Bexpression* condition, Bstatement* then_block,\n+\t       Bstatement* else_block, source_location);\n+\n   // Labels.\n \n   Blabel*\n@@ -293,6 +297,25 @@ Gcc_backend::return_statement(Bfunction* bfunction,\n   return this->make_statement(ret);\n }\n \n+// If.\n+\n+Bstatement*\n+Gcc_backend::if_statement(Bexpression* condition, Bstatement* then_block,\n+\t\t\t  Bstatement* else_block, source_location location)\n+{\n+  tree cond_tree = condition->get_tree();\n+  tree then_tree = then_block->get_tree();\n+  tree else_tree = else_block == NULL ? NULL_TREE : else_block->get_tree();\n+  if (cond_tree == error_mark_node\n+      || then_tree == error_mark_node\n+      || else_tree == error_mark_node)\n+    return this->make_statement(error_mark_node);\n+  tree ret = build3(COND_EXPR, void_type_node, cond_tree, then_tree,\n+\t\t    else_tree);\n+  SET_EXPR_LOCATION(ret, location);\n+  return this->make_statement(ret);\n+}\n+\n // Make a label.\n \n Blabel*\n@@ -366,20 +389,26 @@ tree_to_expr(tree t)\n   return new Bexpression(t);\n }\n \n+Bstatement*\n+tree_to_stat(tree t)\n+{\n+  return new Bstatement(t);\n+}\n+\n Bfunction*\n tree_to_function(tree t)\n {\n   return new Bfunction(t);\n }\n \n tree\n-expression_to_tree(Bexpression* be)\n+expr_to_tree(Bexpression* be)\n {\n   return be->get_tree();\n }\n \n tree\n-statement_to_tree(Bstatement* bs)\n+stat_to_tree(Bstatement* bs)\n {\n   return bs->get_tree();\n }"}, {"sha": "a6c242680ff3459dc2ecbc0a1bb9126460086422", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=db0adf823043571405db77196c8b8898212808ec", "patch": "@@ -122,6 +122,11 @@ class Backend\n   return_statement(Bfunction*, const std::vector<Bexpression*>&,\n \t\t   source_location) = 0;\n \n+  // Create an if statement.  ELSE_BLOCK may be NULL.\n+  virtual Bstatement*\n+  if_statement(Bexpression* condition, Bstatement* then_block,\n+\t       Bstatement* else_block, source_location) = 0;\n+\n   // Labels.\n   \n   // Create a new label.  NAME will be empty if this is a label\n@@ -155,8 +160,9 @@ extern Backend* go_get_backend();\n // interface.\n \n extern Bexpression* tree_to_expr(tree);\n+extern Bstatement* tree_to_stat(tree);\n extern Bfunction* tree_to_function(tree);\n-extern tree expression_to_tree(Bexpression*);\n-extern tree statement_to_tree(Bstatement*);\n+extern tree expr_to_tree(Bexpression*);\n+extern tree stat_to_tree(Bstatement*);\n \n #endif // !defined(GO_BACKEND_H)"}, {"sha": "c516485f343cebc832581db365529f0e03049926", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=db0adf823043571405db77196c8b8898212808ec", "patch": "@@ -12598,8 +12598,7 @@ class Label_addr_expression : public Expression\n   tree\n   do_get_tree(Translate_context* context)\n   {\n-    return expression_to_tree(this->label_->get_addr(context,\n-\t\t\t\t\t\t     this->location()));\n+    return expr_to_tree(this->label_->get_addr(context, this->location()));\n   }\n \n  private:"}, {"sha": "131001a9ce1f54c7c49bba33f8655ec1b8b64d1e", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0adf823043571405db77196c8b8898212808ec/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=db0adf823043571405db77196c8b8898212808ec", "patch": "@@ -565,7 +565,7 @@ Assignment_statement::do_get_tree(Translate_context* context)\n   ret = context->backend()->assignment_statement(tree_to_expr(lhs_tree),\n \t\t\t\t\t\t tree_to_expr(rhs_tree),\n \t\t\t\t\t\t this->location());\n-  return statement_to_tree(ret);\n+  return stat_to_tree(ret);\n }\n \n // Make an assignment statement.\n@@ -1596,7 +1596,7 @@ Expression_statement::do_get_tree(Translate_context* context)\n   tree expr_tree = this->expr_->get_tree(context);\n   Bexpression* bexpr = tree_to_expr(expr_tree);\n   Bstatement* ret = context->backend()->expression_statement(bexpr);\n-  return statement_to_tree(ret);\n+  return stat_to_tree(ret);\n }\n \n // Make an expression statement from an Expression.\n@@ -2593,7 +2593,7 @@ Return_statement::do_get_tree(Translate_context* context)\n   Bstatement* ret;\n   ret = context->backend()->return_statement(tree_to_function(fndecl),\n \t\t\t\t\t     retvals, this->location());\n-  return statement_to_tree(ret);\n+  return stat_to_tree(ret);\n }\n \n // Make a return statement.\n@@ -2631,8 +2631,7 @@ class Bc_statement : public Statement\n   tree\n   do_get_tree(Translate_context* context)\n   {\n-    return statement_to_tree(this->label_->get_goto(context,\n-\t\t\t\t\t\t    this->location()));\n+    return stat_to_tree(this->label_->get_goto(context, this->location()));\n   }\n \n  private:\n@@ -2710,7 +2709,7 @@ Goto_statement::do_get_tree(Translate_context* context)\n   Blabel* blabel = this->label_->get_backend_label(context);\n   Bstatement* statement = context->backend()->goto_statement(blabel,\n \t\t\t\t\t\t\t     this->location());\n-  return statement_to_tree(statement);\n+  return stat_to_tree(statement);\n }\n \n // Make a goto statement.\n@@ -2743,8 +2742,7 @@ class Goto_unnamed_statement : public Statement\n   tree\n   do_get_tree(Translate_context* context)\n   {\n-    return statement_to_tree(this->label_->get_goto(context,\n-\t\t\t\t\t\t    this->location()));\n+    return stat_to_tree(this->label_->get_goto(context, this->location()));\n   }\n \n  private:\n@@ -2778,7 +2776,7 @@ Label_statement::do_get_tree(Translate_context* context)\n   Blabel* blabel = this->label_->get_backend_label(context);\n   Bstatement* statement;\n   statement = context->backend()->label_definition_statement(blabel);\n-  return statement_to_tree(statement);\n+  return stat_to_tree(statement);\n }\n \n // Make a label statement.\n@@ -2806,7 +2804,7 @@ class Unnamed_label_statement : public Statement\n \n   tree\n   do_get_tree(Translate_context* context)\n-  { return statement_to_tree(this->label_->get_definition(context)); }\n+  { return stat_to_tree(this->label_->get_definition(context)); }\n \n  private:\n   // The label.\n@@ -2914,14 +2912,17 @@ If_statement::do_get_tree(Translate_context* context)\n   tree else_tree = (this->else_block_ == NULL\n \t\t    ? NULL_TREE\n \t\t    : this->else_block_->get_tree(context));\n-  if (cond_tree == error_mark_node\n-      || then_tree == error_mark_node\n-      || else_tree == error_mark_node)\n-    return error_mark_node;\n-  tree ret = build3(COND_EXPR, void_type_node, cond_tree, then_tree,\n-\t\t    else_tree);\n-  SET_EXPR_LOCATION(ret, this->location());\n-  return ret;\n+\n+  Bexpression* cond_expr = tree_to_expr(cond_tree);\n+  Bstatement* then_stat = tree_to_stat(then_tree);\n+  Bstatement* else_stat = (else_tree == NULL_TREE\n+\t\t\t   ? NULL\n+\t\t\t   : tree_to_stat(else_tree));\n+  \n+  Bstatement* ret = context->backend()->if_statement(cond_expr, then_stat,\n+\t\t\t\t\t\t     else_stat,\n+\t\t\t\t\t\t     this->location());\n+  return stat_to_tree(ret);\n }\n \n // Make an if statement.\n@@ -3158,7 +3159,7 @@ Case_clauses::Case_clause::get_constant_tree(Translate_context* context,\n   if (!this->is_fallthrough_)\n     {\n       Bstatement* g = break_label->get_goto(context, this->location_);\n-      append_to_statement_list(statement_to_tree(g), stmt_list);\n+      append_to_statement_list(stat_to_tree(g), stmt_list);\n     }\n }\n \n@@ -3413,7 +3414,7 @@ Constant_switch_statement::do_get_tree(Translate_context* context)\n   append_to_statement_list(s, &stmt_list);\n \n   Bstatement* ldef = break_label->get_definition(context);\n-  append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n+  append_to_statement_list(stat_to_tree(ldef), &stmt_list);\n \n   return stmt_list;\n }\n@@ -4272,7 +4273,7 @@ Select_clauses::get_tree(Translate_context* context,\n       append_to_statement_list(default_clause->get_statements_tree(context),\n \t\t\t       &stmt_list);\n       Bstatement* ldef = break_label->get_definition(context);\n-      append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n+      append_to_statement_list(stat_to_tree(ldef), &stmt_list);\n       return stmt_list;\n     }\n \n@@ -4364,7 +4365,7 @@ Select_clauses::get_tree(Translate_context* context,\n     }\n \n   Bstatement* ldef = break_label->get_definition(context);\n-  append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n+  append_to_statement_list(stat_to_tree(ldef), &stmt_list);\n \n   tree switch_stmt = build3(SWITCH_EXPR, sizetype, call, stmt_list, NULL_TREE);\n   SET_EXPR_LOCATION(switch_stmt, location);\n@@ -4390,7 +4391,7 @@ Select_clauses::add_clause_tree(Translate_context* context, int case_index,\n \t\t\t  ? clause->location()\n \t\t\t  : clause->statements()->end_location());\n   Bstatement* g = bottom_label->get_goto(context, gloc);\n-  append_to_statement_list(statement_to_tree(g), stmt_list);\n+  append_to_statement_list(stat_to_tree(g), stmt_list);\n }\n \n // Class Select_statement."}]}