{"sha": "b75978d14fc35981ffd8bf060ee52300db4dae50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1OTc4ZDE0ZmMzNTk4MWZmZDhiZjA2MGVlNTIzMDBkYjRkYWU1MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-02T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-02T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "5b6bc0f6eced64613ded5e1150712129a39ba226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6bc0f6eced64613ded5e1150712129a39ba226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75978d14fc35981ffd8bf060ee52300db4dae50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75978d14fc35981ffd8bf060ee52300db4dae50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75978d14fc35981ffd8bf060ee52300db4dae50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75978d14fc35981ffd8bf060ee52300db4dae50/comments", "author": null, "committer": null, "parents": [{"sha": "ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae"}], "stats": {"total": 299, "additions": 298, "deletions": 1}, "files": [{"sha": "ef69e6a04b398deca296138aea337c59e3919ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,135 @@\n+2021-06-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/25290\n+\t* tree-ssa-phiopt.c (match_simplify_replacement):\n+\tNew function.\n+\t(tree_ssa_phiopt_worker): Use match_simplify_replacement.\n+\t(two_value_replacement): Change the comment about\n+\tconditional_replacement.\n+\t(conditional_replacement): Delete.\n+\n+2021-06-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/95481\n+\t* tree-tailcall.c (find_tail_calls): Handle empty typed\n+\treturn decls.\n+\n+2021-06-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gimplify.c (zero_sized_field_decl): Delete\n+\t(zero_sized_type): Delete\n+\t(gimplify_init_ctor_eval): Use is_empty_type instead\n+\tof zero_sized_field_decl.\n+\t(gimplify_modify_expr): Use is_empty_type instead of\n+\tzero_sized_type.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91859\n+\t* tree.h (CALL_FROM_NEW_OR_DELETE_P): Adjust comment.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94492\n+\t* diagnostic.h (warning_enabled_at): Declare.\n+\t* diagnostic.c (diagnostic_enabled): Factor out from...\n+\t(diagnostic_report_diagnostic): ...here.\n+\t(warning_enabled_at): New.\n+\n+2021-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp.c: Enable exporting of global ranges.\n+\n+2021-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR other/100826\n+\t* doc/invoke.texi: Mention that -fgcse-after-reload\n+\tis enabled with -O3.\n+\n+2021-06-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/98365\n+\t* tree-if-conv.c (strip_nop_cond_scalar_reduction): New function.\n+\t(is_cond_scalar_reduction): Handle nop_expr in cond scalar reduction.\n+\t(convert_scalar_cond_reduction): Ditto.\n+\t(predicate_scalar_phi): Ditto.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/100781\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Enable new\n+\tvalue calculation by default.\n+\t(ranger_cache::enable_new_values): New.\n+\t(ranger_cache::disable_new_values): New.\n+\t(ranger_cache::push_poor_value): Check if new values are allowed.\n+\t* gimple-range-cache.h (class ranger_cache): New member/methods.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Check for debug\n+\tstatement, and disable/renable new value calculation.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ssa_range_in_bb): Delete.\n+\t(ranger_cache::range_of_def): New.\n+\t(ranger_cache::entry_range): New.\n+\t(ranger_cache::exit_range): New.\n+\t(ranger_cache::range_of_expr): Adjust.\n+\t(ranger_cache::range_on_edge): Adjust.\n+\t(ranger_cache::propagate_cache): Call exit_range directly.\n+\t* gimple-range-cache.h (class ranger_cache): Adjust.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Adjust for\n+\tgori_compute being a member rather than base class.\n+\tdervied call to member call.\n+\t(ranger_cache::dump): No longer dump gori_map.\n+\t(ranger_cache::dump_bb): New.\n+\t(ranger_cache::get_non_stale_global_range): Adjust for gori_compute\n+\tbeing a member rather than base class.\n+\t(ranger_cache::set_global_range): Ditto.\n+\t(ranger_cache::ssa_range_in_bb): Ditto.\n+\t(ranger_cache::range_of_expr): New.\n+\t(ranger_cache::range_on_edge): New.\n+\t(ranger_cache::block_range): Adjust for gori_computes.  Debug changes.\n+\t(ranger_cache::propagate_cache):  Adjust debugging output.\n+\t(ranger_cache::fill_block_cache): Adjust for gori_computes.  Debug\n+\toutput changes.\n+\t* gimple-range-cache.h (class ranger_cache): Make gori_compute a\n+\tmember, and inherit from range_query instead.\n+\t(ranger_cache::dump_bb): New. split from dump.\n+\t* gimple-range-gori.cc (gori_compute::ssa_range_in_bb): Delete.\n+\t(gori_compute::expr_range_at_stmt): Delete.\n+\t(gori_compute::compute_name_range_op): Delete.\n+\t(gori_compute::compute_operand_range_switch): Add fur_source.\n+\t(gori_compute::compute_operand_range): Add fur_source param, inline\n+\told compute_name_range_op and optimize_logical_operands.\n+\t(struct tf_range): Delete.\n+\t(gori_compute::logical_combine): Adjust\n+\t(gori_compute::optimize_logical_operands): Delete.\n+\t(gori_compute::compute_logical_operands_in_chain): Delete.\n+\t(gori_compute::compute_logical_operands): Adjust.\n+\t(gori_compute::compute_operand1_range): Adjust to fur_source.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t(gori_compute::compute_operand1_and_operand2_range): Ditto.\n+\t(gori_compute::outgoing_edge_range_p): Add range_query parameter,\n+\tand adjust to fur_source.\n+\t* gimple-range-gori.h (class gori_compute): Simplify and adjust to\n+\trange_query and fur_source.\n+\t* gimple-range.cc (gimple_ranger::range_on_edge): Query range_on_edge\n+\tfrom the ranger_cache..\n+\t(gimple_ranger::fold_range_internal): Adjust to base class change of\n+\tranger_cache.\n+\t(gimple_ranger::dump_bb): Adjust dump.\n+\t* gimple-range.h (gimple_ranger):export gori computes object.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/100774\n+\t* gimple-range-cache.cc (ranger_cache::get_non_stale_global_range):\n+\tConstant values are also not stale.\n+\t(ranger_cache::set_global_range): Range invariant values should also\n+\thave the correct timestamp.\n+\n 2021-05-31  Martin Liska  <mliska@suse.cz>\n \n \t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):"}, {"sha": "54b764ae94c7140e445429865d78cb72b8bc23e8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1 +1 @@\n-20210601\n+20210602"}, {"sha": "cb2757c0b32825882107d0fc79bdc30693f8a5c8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,12 @@\n+2021-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR other/100759\n+\t* c-attribs.c (handle_optimize_attribute): Limit sanity check\n+\tto a situation where we are not in processing of an optimize\n+\tpragma.\n+\t* c-pragma.c (handle_pragma_pop_options): Restore target\n+\toptions.\n+\n 2021-05-31  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \tPR testsuite/100749"}, {"sha": "9a5fa7990f7d88419fa2f8ead019547c930ebfa1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,22 @@\n+2021-06-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/65816\n+\t* init.c (expand_aggr_init_1): Check\n+\ttype_has_non_user_provided_default_constructor instead of\n+\ttype_has_user_provided_constructor.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91859\n+\t* call.c (build_op_delete_call): Don't set CALL_FROM_NEW_OR_DELETE_P\n+\tfor destroying delete.\n+\t* init.c (build_delete): Don't clobber before destroying delete.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94492\n+\t* decl2.c (cp_warn_deprecated_use): Check warning_enabled_at.\n+\n 2021-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/88601"}, {"sha": "bab25eb7351ea8841ac294f16d6bc738022133b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,41 @@\n+2021-06-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n+\t(parallel) master taskloop (simd).\n+\t* frontend-passes.c (gfc_code_walker): Set in_omp_workshare\n+\tto false for parallel master taskloop (simd).\n+\t* gfortran.h (enum gfc_statement):\n+\tAdd ST_OMP_(END_)(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n+\t(enum gfc_exec_op): EXEC_OMP_(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n+\t* match.h (gfc_match_omp_master_taskloop,\n+\tgfc_match_omp_master_taskloop_simd,\n+\tgfc_match_omp_parallel_master_taskloop,\n+\tgfc_match_omp_parallel_master_taskloop_simd): New prototype.\n+\t* openmp.c (gfc_match_omp_parallel_master_taskloop,\n+\tgfc_match_omp_parallel_master_taskloop_simd,\n+\tgfc_match_omp_master_taskloop,\n+\tgfc_match_omp_master_taskloop_simd): New.\n+\t(gfc_match_omp_taskloop_simd): Permit 'reduction' clause.\n+\t(resolve_omp_clauses): Handle new combined directives; remove\n+\tinscan-reduction check to reduce multiple errors; add\n+\ttask-reduction error for 'taskloop simd'.\n+\t(gfc_resolve_omp_parallel_blocks,\n+\tresolve_omp_do, omp_code_to_statement,\n+\tgfc_resolve_omp_directive): Handle new combined constructs.\n+\t* parse.c (decode_omp_directive, next_statement,\n+\tgfc_ascii_statement, parse_omp_do, parse_omp_structured_block,\n+\tparse_executable): Likewise.\n+\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans.c (trans_code): Likewise.\n+\t* trans-openmp.c (gfc_split_omp_clauses,\n+\tgfc_trans_omp_directive): Likewise.\n+\t(gfc_trans_omp_parallel_master): Move after gfc_trans_omp_master_taskloop;\n+\thandle parallel master taskloop (simd) as well.\n+\t(gfc_trans_omp_taskloop): Take gfc_exec_op as arg.\n+\t(gfc_trans_omp_master_taskloop): New.\n+\n 2021-05-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* gfortran.texi (BOZ literal constants): Fix typo."}, {"sha": "46dc814739149aabc5644e49d095616dafabdcc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,64 @@\n+2021-06-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/65816\n+\t* g++.dg/cpp0x/constexpr-delegating3.C: New test.\n+\t* g++.dg/cpp0x/dc10.C: New test.\n+\t* g++.dg/cpp0x/initlist-base4.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init22.C: New test.\n+\n+2021-06-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/95481\n+\t* gcc.dg/tree-ssa/tailcall-10.c: New test.\n+\t* gcc.dg/tree-ssa/tailcall-11.c: New test.\n+\t* gcc.dg/tree-ssa/tailcall-12.c: New test.\n+\t* gcc.dg/tree-ssa/tailcall-13.c: New test.\n+\t* gcc.dg/tree-ssa/tailrecursion-8.c: New test.\n+\n+2021-06-01  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR testsuite/100750\n+\t* gcc.target/powerpc/rop-5.c: Require ELFv2 ABI.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91859\n+\t* g++.dg/cpp2a/destroying-delete5.C: New test.\n+\n+2021-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94492\n+\t* g++.dg/cpp0x/depr-copy4.C: New test.\n+\n+2021-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-55.c: Adjust for global ranges changes.\n+\t* gcc.dg/pr80776-1.c: Same.\n+\n+2021-06-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* gfortran.dg/gomp/reduction5.f90: Remove dg-error; the issue is\n+\tnow diagnosed with less error output.\n+\t* gfortran.dg/gomp/scan-1.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-3.f90: New test.\n+\t* gfortran.dg/gomp/taskloop-1.f90: New test.\n+\n+2021-06-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/98365\n+\t* gcc.target/i386/pr98365.c: New test.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/100781\n+\t* gcc.dg/pr100781.c: New.\n+\n+2021-06-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/100774\n+\t* g++.dg/pr100774.C: New.\n+\n 2021-05-31  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.dg/gomp/depend-iterator-1.f90: Use dg-do compile."}, {"sha": "3fe0a390799fa93477230ed5239c06097f578c5d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75978d14fc35981ffd8bf060ee52300db4dae50/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75978d14fc35981ffd8bf060ee52300db4dae50/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b75978d14fc35981ffd8bf060ee52300db4dae50", "patch": "@@ -1,3 +1,41 @@\n+2021-06-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/65816\n+\t* testsuite/23_containers/deque/allocator/default_init.cc,\n+\ttestsuite/23_containers/forward_list/allocator/default_init.cc,\n+\ttestsuite/23_containers/list/allocator/default_init.cc,\n+\ttestsuite/23_containers/map/allocator/default_init.cc,\n+\ttestsuite/23_containers/set/allocator/default_init.cc,\n+\ttestsuite/23_containers/vector/allocator/default_init.cc,\n+\ttestsuite/23_containers/vector/bool/allocator/default_init.cc:\n+\tRemove xfail.\n+\n+2021-06-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/unordered_map/96088.cc: Change\n+\teffective target to c++17.\n+\t* testsuite/23_containers/unordered_set/96088.cc: Likewise.\n+\n+2021-06-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Only test\n+\tisblank for C++11 and later.\n+\n+2021-06-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100833\n+\t* include/bits/ranges_base.h (ranges::advance(iter, n, sentinel)):\n+\tFix return value for no-op case.\n+\t* testsuite/24_iterators/range_operations/advance.cc: Test\n+\treturn values of three-argument overload.\n+\n+2021-06-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99453\n+\t* python/Makefile.am: Use archive name for printer hook if no\n+\tdynamic library name is available.\n+\t* python/Makefile.in: Regenerate.\n+\n 2021-05-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/abi.xml: Remove dead reference to \"Intel"}]}