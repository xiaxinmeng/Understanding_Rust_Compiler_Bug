{"sha": "dcffbadece5d19c214e2461f3872ddfa27321c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmZmJhZGVjZTVkMTljMjE0ZTI0NjFmMzg3MmRkZmEyNzMyMWMxZQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-11-01T20:25:35Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-11-01T20:25:35Z"}, "message": "ia64.h (MASK_INLINE_DIV_LAT): Remove.\n\n\t* config/ia64/ia64.h (MASK_INLINE_DIV_LAT): Remove.\n\t(MASK_INLINE_DIV_THR): Remove.\n\t(TARGET_INLINE_DIV_LAT): Remove.\n\t(TARGET_INLINE_DIV_THR): Remove.\n\t(TARGET_INLINE_DIV): Remove.\n\t(MASK_INLINE_FLOAT_DIV_LAT): New macro.\n\t(MASK_INLINE_FLOAT_DIV_THR): New macro.\n\t(MASK_INLINE_INT_DIV_LAT): New macro.\n\t(MASK_INLINE_INT_DIV_THR): New macro.\n\t(TARGET_INLINE_FLOAT_DIV_LAT): New macro.\n\t(TARGET_INLINE_FLOAT_DIV_THR): New macro.\n\t(TARGET_INLINE_INT_DIV_LAT): New macro.\n\t(TARGET_INLINE_INT_DIV_THR): New macro.\n\t(TARGET_INLINE_FLOAT_DIV): New macro.\n\t(TARGET_INLINE_INT_DIV): New macro.\n\t* config/ia64/ia64.md (divsi3): Change to use new macros.\n\t(modsi3): Ditto.\n\t(udivsi3): Ditto.\n\t(umodsi3): Ditto.\n\t(divsi3_internal): Ditto.\n\t(divdi3): Ditto.\n\t(moddi3): Ditto.\n\t(udivdi3): Ditto.\n\t(umoddi3): Ditto.\n\t(divdi3_internal_lat): Ditto.\n\t(divdi3_internal_thr): Ditto.\n\t(divsf3): Ditto.\n\t(divsf3_internal_lat): Ditto.\n\t(divsf3_internal_thr): Ditto.\n\t(divdf3): Ditto.\n\t(divdf3_internal_lat): Ditto.\n\t(divdf3_internal_thr): Ditto.\n\t(divtf3): Ditto.\n\t(divtf3_internal_lat): Ditto.\n\t(divtf3_internal_thr): Ditto.\n\t* config/ia64/ia64.c (ia64_override_options): Change\n\tto check new macros for conflicts in settings.\n\t* doc/invoke.texi (-minline-divide-min-latency): Remove.\n\t(-minline-divide-max-throughput): Remove.\n\t(-minline-float-divide-min-latency): New.\n\t(-minline-float-divide-max-throughput): New.\n\t(-minline-int-divide-min-latency): New.\n\t(-minline-int-divide-max-throughput): New.\n\nFrom-SVN: r58727", "tree": {"sha": "0141f143ab9597f67de6bd03ffeb77068070c416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0141f143ab9597f67de6bd03ffeb77068070c416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcffbadece5d19c214e2461f3872ddfa27321c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcffbadece5d19c214e2461f3872ddfa27321c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcffbadece5d19c214e2461f3872ddfa27321c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcffbadece5d19c214e2461f3872ddfa27321c1e/comments", "author": null, "committer": null, "parents": [{"sha": "0e75523eb4e5b6de0ba5557122653ba6d1c7e2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e75523eb4e5b6de0ba5557122653ba6d1c7e2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e75523eb4e5b6de0ba5557122653ba6d1c7e2b9"}], "stats": {"total": 174, "additions": 127, "deletions": 47}, "files": [{"sha": "66d3a2072bdf9f2594b35001c12c37d661d35127", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcffbadece5d19c214e2461f3872ddfa27321c1e", "patch": "@@ -1,3 +1,49 @@\n+2002-11-01  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.h (MASK_INLINE_DIV_LAT): Remove.\n+\t(MASK_INLINE_DIV_THR): Remove.\n+\t(TARGET_INLINE_DIV_LAT): Remove.\n+\t(TARGET_INLINE_DIV_THR): Remove.\n+\t(TARGET_INLINE_DIV): Remove.\n+\t(MASK_INLINE_FLOAT_DIV_LAT): New macro.\n+\t(MASK_INLINE_FLOAT_DIV_THR): New macro.\n+\t(MASK_INLINE_INT_DIV_LAT): New macro.\n+\t(MASK_INLINE_INT_DIV_THR): New macro.\n+\t(TARGET_INLINE_FLOAT_DIV_LAT): New macro.\n+\t(TARGET_INLINE_FLOAT_DIV_THR): New macro.\n+\t(TARGET_INLINE_INT_DIV_LAT): New macro.\n+\t(TARGET_INLINE_INT_DIV_THR): New macro.\n+\t(TARGET_INLINE_FLOAT_DIV): New macro.\n+\t(TARGET_INLINE_INT_DIV): New macro.\n+\t* config/ia64/ia64.md (divsi3): Change to use new macros.\n+\t(modsi3): Ditto.\n+\t(udivsi3): Ditto.\n+\t(umodsi3): Ditto.\n+\t(divsi3_internal): Ditto.\n+\t(divdi3): Ditto.\n+\t(moddi3): Ditto.\n+\t(udivdi3): Ditto.\n+\t(umoddi3): Ditto.\n+\t(divdi3_internal_lat): Ditto.\n+\t(divdi3_internal_thr): Ditto.\n+\t(divsf3): Ditto.\n+\t(divsf3_internal_lat): Ditto.\n+\t(divsf3_internal_thr): Ditto.\n+\t(divdf3): Ditto.\n+\t(divdf3_internal_lat): Ditto.\n+\t(divdf3_internal_thr): Ditto.\n+\t(divtf3): Ditto.\n+\t(divtf3_internal_lat): Ditto.\n+\t(divtf3_internal_thr): Ditto.\n+\t* config/ia64/ia64.c (ia64_override_options): Change\n+\tto check new macros for conflicts in settings.\n+\t* doc/invoke.texi (-minline-divide-min-latency): Remove.\n+\t(-minline-divide-max-throughput): Remove.\n+\t(-minline-float-divide-min-latency): New.\n+\t(-minline-float-divide-max-throughput): New.\n+\t(-minline-int-divide-min-latency): New.\n+\t(-minline-int-divide-max-throughput): New.\n+\t\n 2002-11-01  Richard Earnshaw  (rearnsha@arm.com)\n \n \tPR target/7856"}, {"sha": "a8b6a8e4701270f22c5faca1af1cdfddad66e105", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dcffbadece5d19c214e2461f3872ddfa27321c1e", "patch": "@@ -4169,10 +4169,16 @@ ia64_override_options ()\n   if (TARGET_AUTO_PIC)\n     target_flags |= MASK_CONST_GP;\n \n-  if (TARGET_INLINE_DIV_LAT && TARGET_INLINE_DIV_THR)\n+  if (TARGET_INLINE_FLOAT_DIV_LAT && TARGET_INLINE_FLOAT_DIV_THR)\n     {\n-      warning (\"cannot optimize division for both latency and throughput\");\n-      target_flags &= ~MASK_INLINE_DIV_THR;\n+      warning (\"cannot optimize floating point division for both latency and throughput\");\n+      target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n+    }\n+\n+  if (TARGET_INLINE_INT_DIV_LAT && TARGET_INLINE_INT_DIV_THR)\n+    {\n+      warning (\"cannot optimize integer division for both latency and throughput\");\n+      target_flags &= ~MASK_INLINE_INT_DIV_THR;\n     }\n \n   if (ia64_fixed_range_string)"}, {"sha": "578e354664434646e1c3da2eb5ad0be704d9c3bd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=dcffbadece5d19c214e2461f3872ddfa27321c1e", "patch": "@@ -85,9 +85,13 @@ extern int target_flags;\n \n #define MASK_AUTO_PIC\t0x00000400\t/* generate automatically PIC */\n \n-#define MASK_INLINE_DIV_LAT 0x00000800\t/* inline div, min latency.  */\n+#define MASK_INLINE_FLOAT_DIV_LAT 0x00000800 /* inline div, min latency.  */\n \n-#define MASK_INLINE_DIV_THR 0x00001000\t/* inline div, max throughput.  */\n+#define MASK_INLINE_FLOAT_DIV_THR 0x00001000 /* inline div, max throughput.  */\n+\n+#define MASK_INLINE_INT_DIV_LAT   0x00000800 /* inline div, min latency.  */\n+\n+#define MASK_INLINE_INT_DIV_THR   0x00001000 /* inline div, max throughput.  */\n \n #define MASK_DWARF2_ASM 0x40000000\t/* test dwarf2 line info via gas.  */\n \n@@ -113,12 +117,19 @@ extern int target_flags;\n \n #define TARGET_AUTO_PIC\t\t(target_flags & MASK_AUTO_PIC)\n \n-#define TARGET_INLINE_DIV_LAT\t(target_flags & MASK_INLINE_DIV_LAT)\n+#define TARGET_INLINE_FLOAT_DIV_LAT (target_flags & MASK_INLINE_FLOAT_DIV_LAT)\n+\n+#define TARGET_INLINE_FLOAT_DIV_THR (target_flags & MASK_INLINE_FLOAT_DIV_THR)\n+\n+#define TARGET_INLINE_INT_DIV_LAT   (target_flags & MASK_INLINE_INT_DIV_LAT)\n+\n+#define TARGET_INLINE_INT_DIV_THR   (target_flags & MASK_INLINE_INT_DIV_THR)\n \n-#define TARGET_INLINE_DIV_THR\t(target_flags & MASK_INLINE_DIV_THR)\n+#define TARGET_INLINE_FLOAT_DIV \\\n+  (target_flags & (MASK_INLINE_FLOAT_DIV_LAT | MASK_INLINE_FLOAT_DIV_THR))\n \n-#define TARGET_INLINE_DIV \\\n-  (target_flags & (MASK_INLINE_DIV_LAT | MASK_INLINE_DIV_THR))\n+#define TARGET_INLINE_INT_DIV \\\n+  (target_flags & (MASK_INLINE_INT_DIV_LAT | MASK_INLINE_INT_DIV_THR))\n \n #define TARGET_DWARF2_ASM\t(target_flags & MASK_DWARF2_ASM)\n \n@@ -165,10 +176,14 @@ extern int ia64_tls_size;\n       N_(\"gp is constant (but save/restore gp on indirect calls)\") },\t\\\n   { \"auto-pic\",\t\tMASK_AUTO_PIC,\t\t\t\t\t\\\n       N_(\"Generate self-relocatable code\") },\t\t\t\t\\\n-  { \"inline-divide-min-latency\", MASK_INLINE_DIV_LAT,\t\t\t\\\n-      N_(\"Generate inline division, optimize for latency\") },\t\t\\\n-  { \"inline-divide-max-throughput\", MASK_INLINE_DIV_THR,\t\t\\\n-      N_(\"Generate inline division, optimize for throughput\") },\t\\\n+  { \"inline-float-divide-min-latency\", MASK_INLINE_FLOAT_DIV_LAT,\t\\\n+      N_(\"Generate inline floating point division, optimize for latency\") },\\\n+  { \"inline-float-divide-max-throughput\", MASK_INLINE_FLOAT_DIV_THR,\t\\\n+      N_(\"Generate inline floating point division, optimize for throughput\") },\\\n+  { \"inline-int-divide-min-latency\", MASK_INLINE_INT_DIV_LAT,\t\t\\\n+      N_(\"Generate inline integer division, optimize for latency\") },\t\\\n+  { \"inline-int-divide-max-throughput\", MASK_INLINE_INT_DIV_THR,\t\\\n+      N_(\"Generate inline integer division, optimize for throughput\") },\\\n   { \"dwarf2-asm\", \tMASK_DWARF2_ASM,\t\t\t\t\\\n       N_(\"Enable Dwarf 2 line debug info via GNU as\")},\t\t\t\\\n   { \"no-dwarf2-asm\", \t-MASK_DWARF2_ASM,\t\t\t\t\\"}, {"sha": "c2275494c258cf8318d1dd72c7357cbabf5e9005", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=dcffbadece5d19c214e2461f3872ddfa27321c1e", "patch": "@@ -1987,7 +1987,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(div:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t(match_operand:SI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op1_tf, op2_tf, op0_tf, op0_di, twon34;\n   REAL_VALUE_TYPE twon34_r;\n@@ -2021,7 +2021,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(mod:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t(match_operand:SI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op2_neg, op1_di, div;\n \n@@ -2044,7 +2044,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(udiv:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t (match_operand:SI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op1_tf, op2_tf, op0_tf, op0_di, twon34;\n   REAL_VALUE_TYPE twon34_r;\n@@ -2078,7 +2078,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(umod:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t (match_operand:SI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op2_neg, op1_di, div;\n \n@@ -2105,7 +2105,7 @@\n    (clobber (match_scratch:TF 5 \"=&f\"))\n    (clobber (match_scratch:BI 6 \"=c\"))\n    (use (match_operand:TF 3 \"fr_register_operand\" \"f\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n@@ -2375,7 +2375,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(div:DI (match_operand:DI 1 \"general_operand\" \"\")\n \t\t(match_operand:DI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op1_tf, op2_tf, op0_tf;\n \n@@ -2391,7 +2391,7 @@\n   op2_tf = gen_reg_rtx (TFmode);\n   expand_float (op2_tf, operands[2], 0);\n \n-  if (TARGET_INLINE_DIV_LAT)\n+  if (TARGET_INLINE_INT_DIV_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_tf, op1_tf, op2_tf));\n   else\n     emit_insn (gen_divdi3_internal_thr (op0_tf, op1_tf, op2_tf));\n@@ -2404,7 +2404,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(mod:SI (match_operand:DI 1 \"general_operand\" \"\")\n \t\t(match_operand:DI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op2_neg, div;\n \n@@ -2421,7 +2421,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(udiv:DI (match_operand:DI 1 \"general_operand\" \"\")\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op1_tf, op2_tf, op0_tf;\n \n@@ -2437,7 +2437,7 @@\n   op2_tf = gen_reg_rtx (TFmode);\n   expand_float (op2_tf, operands[2], 1);\n \n-  if (TARGET_INLINE_DIV_LAT)\n+  if (TARGET_INLINE_INT_DIV_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_tf, op1_tf, op2_tf));\n   else\n     emit_insn (gen_divdi3_internal_thr (op0_tf, op1_tf, op2_tf));\n@@ -2450,7 +2450,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(umod:DI (match_operand:DI 1 \"general_operand\" \"\")\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV\"\n {\n   rtx op2_neg, div;\n \n@@ -2471,7 +2471,7 @@\n    (clobber (match_scratch:TF 4 \"=&f\"))\n    (clobber (match_scratch:TF 5 \"=&f\"))\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_LAT\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n@@ -2530,7 +2530,7 @@\n    (clobber (match_scratch:TF 3 \"=&f\"))\n    (clobber (match_scratch:TF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_THR\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_INT_DIV_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n@@ -2681,10 +2681,10 @@\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"fr_register_operand\" \"\")\n \t\t(match_operand:SF 2 \"fr_register_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV_LAT)\n     insn = gen_divsf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divsf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -2699,7 +2699,7 @@\n    (clobber (match_scratch:TF 3 \"=&f\"))\n    (clobber (match_scratch:TF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_LAT\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n@@ -2756,7 +2756,7 @@\n    (clobber (match_scratch:TF 3 \"=&f\"))\n    (clobber (match_scratch:TF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_THR\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n@@ -2990,10 +2990,10 @@\n   [(set (match_operand:DF 0 \"fr_register_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"fr_register_operand\" \"\")\n \t\t(match_operand:DF 2 \"fr_register_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV_LAT)\n     insn = gen_divdf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divdf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -3009,7 +3009,7 @@\n    (clobber (match_scratch:TF 4 \"=&f\"))\n    (clobber (match_scratch:TF 5 \"=&f\"))\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_LAT\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 7) (div:TF (const_int 1) (match_dup 9)))\n@@ -3089,7 +3089,7 @@\n    (clobber (match_scratch:TF 3 \"=&f\"))\n    (clobber (match_scratch:DF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_THR\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n@@ -3467,10 +3467,10 @@\n   [(set (match_operand:TF 0 \"fr_register_operand\" \"\")\n \t(div:TF (match_operand:TF 1 \"fr_register_operand\" \"\")\n \t\t(match_operand:TF 2 \"fr_register_operand\" \"\")))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV_LAT)\n     insn = gen_divtf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divtf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -3487,7 +3487,7 @@\n    (clobber (match_scratch:TF 5 \"=&f\"))\n    (clobber (match_scratch:TF 6 \"=&f\"))\n    (clobber (match_scratch:BI 7 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_LAT\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n@@ -3565,7 +3565,7 @@\n    (clobber (match_scratch:TF 3 \"=&f\"))\n    (clobber (match_scratch:TF 4 \"=&f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_DIV_THR\"\n+  \"INTEL_EXTENDED_IEEE_FORMAT && TARGET_INLINE_FLOAT_DIV_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))"}, {"sha": "c3605a39afa97354e263344ed5ec4d17e3b587c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcffbadece5d19c214e2461f3872ddfa27321c1e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dcffbadece5d19c214e2461f3872ddfa27321c1e", "patch": "@@ -622,8 +622,9 @@ in the following sections.\n @gccoptlist{\n -mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n -mvolatile-asm-stop  -mb-step  -mregister-names  -mno-sdata @gol\n--mconstant-gp  -mauto-pic  -minline-divide-min-latency @gol\n--minline-divide-max-throughput  -mno-dwarf2-asm @gol\n+-mconstant-gp  -mauto-pic  -minline-float-divide-min-latency @gol\n+-minline-float-divide-max-throughput -minline-int-divide-min-latency @gol\n+-minline-int-divide-max-throughput -mno-dwarf2-asm @gol\n -mfixed-range=@var{register-range}}\n \n @emph{D30V Options}\n@@ -9389,13 +9390,25 @@ useful when compiling kernel code.\n Generate code that is self-relocatable.  This implies @option{-mconstant-gp}.\n This is useful when compiling firmware code.\n \n-@item -minline-divide-min-latency\n-@opindex minline-divide-min-latency\n-Generate code for inline divides using the minimum latency algorithm.\n-\n-@item -minline-divide-max-throughput\n-@opindex minline-divide-max-throughput\n-Generate code for inline divides using the maximum throughput algorithm.\n+@item -minline-float-divide-min-latency\n+@opindex minline-float-divide-min-latency\n+Generate code for inline divides of floating point values\n+using the minimum latency algorithm.\n+\n+@item -minline-float-divide-max-throughput\n+@opindex minline-float-divide-max-throughput\n+Generate code for inline divides of floating point values\n+using the maximum throughput algorithm.\n+\n+@item -minline-int-divide-min-latency\n+@opindex minline-int-divide-min-latency\n+Generate code for inline divides of integer values\n+using the minimum latency algorithm.\n+\n+@item -minline-int-divide-max-throughput\n+@opindex minline-int-divide-max-throughput\n+Generate code for inline divides of integer values\n+using the maximum throughput algorithm.\n \n @item -mno-dwarf2-asm\n @itemx -mdwarf2-asm"}]}