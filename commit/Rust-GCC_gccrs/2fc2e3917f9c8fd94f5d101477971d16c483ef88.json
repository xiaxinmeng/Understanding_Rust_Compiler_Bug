{"sha": "2fc2e3917f9c8fd94f5d101477971d16c483ef88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjMmUzOTE3ZjljOGZkOTRmNWQxMDE0Nzc5NzFkMTZjNDgzZWY4OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-04T03:41:37Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-04T04:58:01Z"}, "message": "Support cond_{fma,fms,fnma,fnms} for vector float/double under AVX512.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_fma<mode>): New expander.\n\t(cond_fms<mode>): Ditto.\n\t(cond_fnma<mode>): Ditto.\n\t(cond_fnms<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_fma_double-1.c: New test.\n\t* gcc.target/i386/cond_op_fma_double-2.c: New test.\n\t* gcc.target/i386/cond_op_fma_float-1.c: New test.\n\t* gcc.target/i386/cond_op_fma_float-2.c: New test.", "tree": {"sha": "a2766b2a94feaa36463c5b2de0ea1c7a0db5461f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2766b2a94feaa36463c5b2de0ea1c7a0db5461f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fc2e3917f9c8fd94f5d101477971d16c483ef88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc2e3917f9c8fd94f5d101477971d16c483ef88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc2e3917f9c8fd94f5d101477971d16c483ef88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc2e3917f9c8fd94f5d101477971d16c483ef88/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e40cc7feb8abda85762e4f07719836d5c57f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e40cc7feb8abda85762e4f07719836d5c57f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e40cc7feb8abda85762e4f07719836d5c57f1a"}], "stats": {"total": 413, "additions": 413, "deletions": 0}, "files": [{"sha": "f5968e046697405999d741c035bcc7b0c7241466", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2fc2e3917f9c8fd94f5d101477971d16c483ef88", "patch": "@@ -4438,6 +4438,29 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"cond_fma<mode>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n+\t    (match_operand:VF_AVX512VL 4 \"vector_operand\"))\n+\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_fma<mode>4 (tmp,\n+\t\t\t     operands[2],\n+\t\t\t     operands[3],\n+\t\t\t     operands[4]));\n+  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (<MODE>mode,\n+\t\t\t\t\t\t  tmp,\n+\t\t\t\t\t\t  operands[5],\n+\t\t\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<avx512>_fmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4515,6 +4538,30 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"cond_fms<mode>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 4 \"vector_operand\")))\n+\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_fms<mode>4 (tmp,\n+\t\t\t     operands[2],\n+\t\t\t     operands[3],\n+\t\t\t     operands[4]));\n+  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (<MODE>mode,\n+\t\t\t\t\t\t  tmp,\n+\t\t\t\t\t\t  operands[5],\n+\t\t\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4594,6 +4641,30 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"cond_fnma<mode>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 2 \"vector_operand\"))\n+\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n+\t    (match_operand:VF_AVX512VL 4 \"vector_operand\"))\n+\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_fnma<mode>4 (tmp,\n+\t\t\t      operands[2],\n+\t\t\t      operands[3],\n+\t\t\t      operands[4]));\n+  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (<MODE>mode,\n+\t\t\t\t\t\t  tmp,\n+\t\t\t\t\t\t  operands[5],\n+\t\t\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4675,6 +4746,31 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"cond_fnms<mode>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 2 \"vector_operand\"))\n+\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 4 \"vector_operand\")))\n+\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_fnms<mode>4 (tmp,\n+\t\t\t      operands[2],\n+\t\t\t      operands[3],\n+\t\t\t      operands[4]));\n+  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (<MODE>mode,\n+\t\t\t\t\t\t  tmp,\n+\t\t\t\t\t\t  operands[5],\n+\t\t\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<avx512>_fnmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL"}, {"sha": "4e14b75743c7734748f81561e51e0e9c3308d77c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma_double-1.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-1.c?ref=2fc2e3917f9c8fd94f5d101477971d16c483ef88", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#ifndef NUM\n+#define NUM 800\n+#endif\n+#ifndef TYPE\n+#define TYPE double\n+#endif\n+#ifndef __BUILTIN_FMA\n+#define __BUILTIN_FMA __builtin_fma\n+#endif\n+\n+TYPE a[NUM], b[NUM], c[NUM], d[NUM], e[NUM], j[NUM];\n+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n+#define MAX(X,Y) ((X) < (Y) ? (Y) : (X))\n+\n+#define FMA3(OPNAME, OP1, OP2)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\t\t\\\n+  foo3_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE tmp = MAX(d[i], e[i]);\t\t\t\t\\\n+\tif (b[i] < c[i])\t\t\t\t\t\\\n+\t  a[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 tmp);\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  a[i] = tmp;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define FMAZ(OPNAME, OP1, OP2)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\t\t\\\n+  fooz_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\t\t\\\n+\ta[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 a[i]);\t\\\n+      else\t\t\t\t\t\t\t\\\n+\ta[i] = .0;\t\t\t\t\t\t\\\n+  }\n+\n+#define FMA1(OPNAME, OP1, OP2)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\t\t\\\n+  foo1_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\t\t\\\n+\ta[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 a[i]);\t\\\n+      else\t\t\t\t\t\t\t\\\n+\ta[i] = d[i];\t\t\t\t\t\t\\\n+  }\n+\n+\n+FMAZ (fma,, +);\n+FMAZ (fms,, -);\n+FMAZ (fnma, -, +);\n+FMAZ (fnms, -, -);\n+\n+FMA1 (fma,, +);\n+FMA1 (fms,, -);\n+FMA1 (fnma, -, +);\n+FMA1 (fnms, -, -);\n+\n+FMA3 (fma,, +);\n+FMA3 (fms,, -);\n+FMA3 (fnma, -, +);\n+FMA3 (fnms, -, -);"}, {"sha": "d8180de749170e9601071a3eb58a471271ea6672", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma_double-2.c", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_double-2.c?ref=2fc2e3917f9c8fd94f5d101477971d16c483ef88", "patch": "@@ -0,0 +1,206 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256\" } */\n+#define AVX512VL\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"cond_op_fma_double-1.c\"\n+#define FMA3_O2(OPNAME, OP1, OP2)\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\t\t\\\n+  foo3_o2_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE tmp = MAX(d[i], e[i]);\t\t\t\t\\\n+\tif (b[i] < c[i])\t\t\t\t\t\\\n+\t  j[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 tmp);\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  j[i] = tmp;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define FMAZ_O2(OPNAME, OP1, OP2)\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\t\t\\\n+  fooz_o2_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\t\t\\\n+\tj[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 a[i]);\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tj[i] = .0;\t\t\t\t\t\t\\\n+  }\n+\n+#define FMA1_O2(OPNAME, OP1, OP2)\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\t\t\\\n+  foo1_o2_##OPNAME ()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\t\t\\\n+\tj[i] = __BUILTIN_FMA (OP1 d[i], e[i], OP2 a[i]);\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tj[i] = d[i];\t\t\t\t\t\t\\\n+  }\n+\n+FMAZ_O2 (fma,, +);\n+FMAZ_O2 (fms,, -);\n+FMAZ_O2 (fnma, -, +);\n+FMAZ_O2 (fnms, -, -);\n+\n+FMA1_O2 (fma,, +);\n+FMA1_O2 (fms,, -);\n+FMA1_O2 (fnma, -, +);\n+FMA1_O2 (fnms, -, -);\n+\n+FMA3_O2 (fma,, +);\n+FMA3_O2 (fms,, -);\n+FMA3_O2 (fnma, -, +);\n+FMA3_O2 (fnms, -, -);\n+\n+static void\n+test_256 (void)\n+{\n+  int sign = -1;\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      a[i] = 0;\n+      d[i] = i * 2;\n+      e[i] = i * i * 3 - i * 9 + 153;\n+      b[i] = i * 83;\n+      c[i] = b[i] + sign;\n+      sign *= -1;\n+      j[i] = 1;\n+    }\n+  foo1_o2_fma ();\n+  /* foo1_fma need to be after foo1_o2_fma since\n+     it changes a[i] which is used by foo1_o2_fma.  */\n+  foo1_fma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo1_o2_fms ();\n+  foo1_fms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo1_o2_fnma ();\n+  foo1_fnma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo1_o2_fnms ();\n+  foo1_fnms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  fooz_o2_fma ();\n+  fooz_fma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  fooz_o2_fms ();\n+  fooz_fms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  fooz_o2_fnma ();\n+  fooz_fnma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  fooz_o2_fnms ();\n+  fooz_fnms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo3_o2_fma ();\n+  foo3_fma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo3_o2_fms ();\n+  foo3_fms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo3_o2_fnma ();\n+  foo3_fnma ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo3_o2_fnms ();\n+  foo3_fnms ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+}\n+\n+static void\n+test_128 ()\n+{\n+  \n+}"}, {"sha": "a5752e71b156cf1f2d9439a53bbd0e611ce6c3d6", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma_float-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-1.c?ref=2fc2e3917f9c8fd94f5d101477971d16c483ef88", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -DTYPE=float -fdump-tree-optimized -D__BUILTIN_FMA=__builtin_fmaf\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include \"cond_op_fma_double-1.c\""}, {"sha": "0097735dddb163da1a025251b4daca40ef7f0096", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma_float-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc2e3917f9c8fd94f5d101477971d16c483ef88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma_float-2.c?ref=2fc2e3917f9c8fd94f5d101477971d16c483ef88", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=float -D__BUILTIN_FMA=__builtin_fmaf\" } */\n+\n+#include \"cond_op_fma_double-2.c\""}]}