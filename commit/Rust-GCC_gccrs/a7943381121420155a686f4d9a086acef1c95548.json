{"sha": "a7943381121420155a686f4d9a086acef1c95548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5NDMzODExMjE0MjAxNTVhNjg2ZjRkOWEwODZhY2VmMWM5NTU0OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-30T21:01:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-30T21:01:20Z"}, "message": "defaults.h (TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill.\n\n        * defaults.h (TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill.\n        * toplev.c (process_options): Don't check it.\n        * doc/tm.texi: Don't document it.\n        * config/i386/linux.h (SUBTARGET_FRAME_POINTER_REQUIRED): New.\n        (TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill.\n        * config/i386/i386.c (ix86_frame_pointer_required): Suppress leaf\n        frame pointer optimization if current_function_profile.\n\nFrom-SVN: r54072", "tree": {"sha": "3189b9893a9a67b8c812585c0cceff80317e6568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3189b9893a9a67b8c812585c0cceff80317e6568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7943381121420155a686f4d9a086acef1c95548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7943381121420155a686f4d9a086acef1c95548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7943381121420155a686f4d9a086acef1c95548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7943381121420155a686f4d9a086acef1c95548/comments", "author": null, "committer": null, "parents": [{"sha": "de215bc6c56442bfb501afca9d8eaef9a3594066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de215bc6c56442bfb501afca9d8eaef9a3594066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de215bc6c56442bfb501afca9d8eaef9a3594066"}], "stats": {"total": 55, "additions": 15, "deletions": 40}, "files": [{"sha": "f1451581a5a848ddf7e6a2577dc8b19fd0129264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -1,3 +1,13 @@\n+2002-05-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* defaults.h (TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill.\n+\t* toplev.c (process_options): Don't check it.\n+\t* doc/tm.texi: Don't document it.\n+\t* config/i386/linux.h (SUBTARGET_FRAME_POINTER_REQUIRED): New.\n+\t(TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill.\n+\t* config/i386/i386.c (ix86_frame_pointer_required): Suppress leaf\n+\tframe pointer optimization if current_function_profile.\n+\n 2002-05-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* langhooks.c: Fix formatting."}, {"sha": "f89d1630bb9829dce5cd5cdc55d626c59c3a285f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -3885,7 +3885,8 @@ ix86_frame_pointer_required ()\n   /* In override_options, TARGET_OMIT_LEAF_FRAME_POINTER turns off\n      the frame pointer by default.  Turn it back on now if we've not\n      got a leaf function.  */\n-  if (TARGET_OMIT_LEAF_FRAME_POINTER && ! leaf_function_p ())\n+  if (TARGET_OMIT_LEAF_FRAME_POINTER\n+      && (!current_function_is_leaf || current_function_profile))\n     return 1;\n \n   return 0;"}, {"sha": "db1583ff9d56330e3e4344386a102eeb6d30b04c", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -62,14 +62,11 @@ Boston, MA 02111-1307, USA.  */\n     fprintf (FILE, \"\\tcall\\tmcount\\n\");\t\t\t\t\t\\\n }\n \n-/* True if it is possible to profile code that does not have a frame\n-   pointer.  \n-\n-   The GLIBC version of mcount for the x86 assumes that there is a\n+/* The GLIBC version of mcount for the x86 assumes that there is a\n    frame, so we cannot allow profiling without a frame pointer.  */\n \n-#undef TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n-#define TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER false\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED current_function_profile\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "6a1802722654ed37525115f03d5c11e328105759", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -397,13 +397,6 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n    ? ptrmemfunc_vbit_in_pfn : ptrmemfunc_vbit_in_delta)\n #endif\n \n-/* True if it is possible to profile code that does not have a frame\n-   pointer.  */\n-\n-#ifndef TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n-#define TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER true\n-#endif\n-\n #ifndef DEFAULT_GDB_EXTENSIONS\n #define DEFAULT_GDB_EXTENSIONS 1\n #endif"}, {"sha": "cc87da63325a03e5d347caea337635721388ea32", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -4160,22 +4160,6 @@ must not use the @var{labelno} argument to @code{FUNCTION_PROFILER}.\n @item PROFILE_BEFORE_PROLOGUE\n Define this macro if the code for function profiling should come before\n the function prologue.  Normally, the profiling code comes after.\n-\n-\n-@findex TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n-@item TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n-On some targets, it is impossible to use profiling when the frame\n-pointer has been omitted.  For example, on x86 GNU/Linux systems,\n-the @code{mcount} routine provided by the GNU C Library finds the\n-address of the routine that called the routine that called @code{mcount}\n-by looking in the immediate caller's stack frame.  If the immediate\n-caller has no frame pointer, this lookup will fail.\n-\n-By default, GCC assumes that the target does allow profiling when the\n-frame pointer is omitted.  This macro should be defined to a C\n-expression that evaluates to @code{false} if the target does not allow\n-profiling when the frame pointer is omitted.\n-\n @end table\n \n @node Tail Calls"}, {"sha": "b37a4f5a3232654784a9a5f4a2b3ee081a0ed6a7", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943381121420155a686f4d9a086acef1c95548/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943381121420155a686f4d9a086acef1c95548/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a7943381121420155a686f4d9a086acef1c95548", "patch": "@@ -4893,16 +4893,6 @@ process_options ()\n     warning (\"this target machine does not have delayed branches\");\n #endif\n \n-  /* Some operating systems do not allow profiling without a frame\n-     pointer.  */\n-  if (!TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n-      && profile_flag\n-      && flag_omit_frame_pointer)\n-    {\n-      error (\"profiling does not work without a frame pointer\");\n-      flag_omit_frame_pointer = 0;\n-    }\n-\n   user_label_prefix = USER_LABEL_PREFIX;\n   if (flag_leading_underscore != -1)\n     {"}]}