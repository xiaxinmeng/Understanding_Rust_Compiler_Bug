{"sha": "694e6b194b584505e10e89d373eba095df960f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0ZTZiMTk0YjU4NDUwNWUxMGU4OWQzNzNlYmEwOTVkZjk2MGYyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T15:15:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T15:15:17Z"}, "message": "[AArch64] Tweak iterator usage for [SU]Q{ADD,SUB}\n\nThe pattern:\n\n;; <su>q<addsub>\n\n(define_insn \"aarch64_<su_optab><optab><mode>\"\n  [(set (match_operand:VSDQ_I 0 \"register_operand\" \"=w\")\n\t(BINQOPS:VSDQ_I (match_operand:VSDQ_I 1 \"register_operand\" \"w\")\n\t\t\t  (match_operand:VSDQ_I 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"<su_optab><optab>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n  [(set_attr \"type\" \"neon_<optab><q>\")]\n)\n\nmeant that we overloaded \"optab\" to be \"qadd\" for both SQADD and\nUQADD.  Most other \"optab\" entries are instead the full optab name,\nwhich for these patterns would be \"ssadd\" and \"usadd\" respectively.\n(Unfortunately, the optabs don't extend to vectors yet, something\nthat would be good to fix in GCC 11.)\n\nThis patch therefore does what the comment implies and uses\nq<addsub> to distinguish qadd and qsub instead.\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (addsub): New code attribute.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su_optab><optab><mode>):\n\tRe-express as...\n\t(aarch64_<su_optab>q<addsub><mode>): ...this, making the same change\n\tin the asm string and attributes.  Fix indentation.\n\t* config/aarch64/aarch64-sve.md (@aarch64_<su_optab><optab><mode>):\n\tRe-express as...\n\t(@aarch64_sve_<optab><mode>): ...this.\n\t* config/aarch64/aarch64-sve-builtins.h\n\t(function_expander::expand_signed_unpred_op): Delete.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(function_expander::expand_signed_unpred_op): Likewise.\n\t(function_expander::map_to_rtx_codes): If the optab isn't defined,\n\ttry using code_for_aarch64_sve instead.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (svqadd_impl): Delete.\n\t(svqsub_impl): Likewise.\n\t(svqadd, svqsub): Use rtx_code_function instead.\n\nFrom-SVN: r280050", "tree": {"sha": "68f6b7d5ce669f197da6d34b766ae5e9d7ab6166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f6b7d5ce669f197da6d34b766ae5e9d7ab6166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/694e6b194b584505e10e89d373eba095df960f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694e6b194b584505e10e89d373eba095df960f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694e6b194b584505e10e89d373eba095df960f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694e6b194b584505e10e89d373eba095df960f26/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e828dfe91a39a7a898ca6d8827048760e08b236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e828dfe91a39a7a898ca6d8827048760e08b236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e828dfe91a39a7a898ca6d8827048760e08b236"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "7efa28ccaeb24163c1712251fad49396114cd0b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -1,3 +1,23 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (addsub): New code attribute.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su_optab><optab><mode>):\n+\tRe-express as...\n+\t(aarch64_<su_optab>q<addsub><mode>): ...this, making the same change\n+\tin the asm string and attributes.  Fix indentation.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_<su_optab><optab><mode>):\n+\tRe-express as...\n+\t(@aarch64_sve_<optab><mode>): ...this.\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(function_expander::expand_signed_unpred_op): Delete.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(function_expander::expand_signed_unpred_op): Likewise.\n+\t(function_expander::map_to_rtx_codes): If the optab isn't defined,\n+\ttry using code_for_aarch64_sve instead.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svqadd_impl): Delete.\n+\t(svqsub_impl): Likewise.\n+\t(svqadd, svqsub): Use rtx_code_function instead.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SRHSUB, URHSUB): Delete."}, {"sha": "b82d7b633eeea846f38a52ac3abab1c0d7f0afa4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -3696,13 +3696,13 @@\n )\n ;; <su>q<addsub>\n \n-(define_insn \"aarch64_<su_optab><optab><mode>\"\n+(define_insn \"aarch64_<su_optab>q<addsub><mode>\"\n   [(set (match_operand:VSDQ_I 0 \"register_operand\" \"=w\")\n \t(BINQOPS:VSDQ_I (match_operand:VSDQ_I 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:VSDQ_I 2 \"register_operand\" \"w\")))]\n+\t\t\t(match_operand:VSDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"<su_optab><optab>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n-  [(set_attr \"type\" \"neon_<optab><q>\")]\n+  \"<su_optab>q<addsub>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n+  [(set_attr \"type\" \"neon_q<addsub><q>\")]\n )\n \n ;; suqadd and usqadd"}, {"sha": "48af479cffb597f1a39a530539d5ea811e52acd5", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -1727,16 +1727,6 @@ class svptrue_pat_impl : public function_base\n   }\n };\n \n-class svqadd_impl : public function_base\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.expand_signed_unpred_op (SS_PLUS, US_PLUS);\n-  }\n-};\n-\n /* Implements svqdec[bhwd]{,_pat} and svqinc[bhwd]{,_pat}.  */\n class svqdec_svqinc_bhwd_impl : public function_base\n {\n@@ -1838,16 +1828,6 @@ class svqdecp_svqincp_impl : public function_base\n   rtx_code m_code_for_uint;\n };\n \n-class svqsub_impl : public function_base\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.expand_signed_unpred_op (SS_MINUS, US_MINUS);\n-  }\n-};\n-\n class svrdffr_impl : public function_base\n {\n public:\n@@ -2661,7 +2641,7 @@ FUNCTION (svptest_first, svptest_impl, (LT))\n FUNCTION (svptest_last, svptest_impl, (LTU))\n FUNCTION (svptrue, svptrue_impl,)\n FUNCTION (svptrue_pat, svptrue_pat_impl,)\n-FUNCTION (svqadd, svqadd_impl,)\n+FUNCTION (svqadd, rtx_code_function, (SS_PLUS, US_PLUS, -1))\n FUNCTION (svqdecb, svqdec_bhwd_impl, (QImode))\n FUNCTION (svqdecb_pat, svqdec_bhwd_impl, (QImode))\n FUNCTION (svqdecd, svqdec_bhwd_impl, (DImode))\n@@ -2680,7 +2660,7 @@ FUNCTION (svqinch_pat, svqinc_bhwd_impl, (HImode))\n FUNCTION (svqincp, svqdecp_svqincp_impl, (SS_PLUS, US_PLUS))\n FUNCTION (svqincw, svqinc_bhwd_impl, (SImode))\n FUNCTION (svqincw_pat, svqinc_bhwd_impl, (SImode))\n-FUNCTION (svqsub, svqsub_impl,)\n+FUNCTION (svqsub, rtx_code_function, (SS_MINUS, US_MINUS, -1))\n FUNCTION (svrbit, unspec_based_function, (UNSPEC_RBIT, UNSPEC_RBIT, -1))\n FUNCTION (svrdffr, svrdffr_impl,)\n FUNCTION (svrecpe, unspec_based_function, (-1, -1, UNSPEC_FRECPE))"}, {"sha": "b09067c72b46aa32c5a3d190676aa4bc7891968a", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -2871,14 +2871,20 @@ function_expander::use_contiguous_store_insn (insn_code icode)\n    (3) a normal unpredicated optab for PRED_none and PRED_x functions,\n        dropping the predicate in the latter case\n \n-   (4) \"cond_<optab><mode>\" otherwise\n+   (4) an unpredicated \"aarch64_sve_<code_optab><mode>\" for PRED_none and\n+       PRED_x functions, again dropping the predicate for PRED_x\n+\n+   (5) \"cond_<optab><mode>\" otherwise\n \n    where <optab> corresponds to:\n \n    - CODE_FOR_SINT for signed integers\n    - CODE_FOR_UINT for unsigned integers\n    - UNSPEC_FOR_FP for floating-point values\n \n+   and where <code_optab> is like <optab>, but uses CODE_FOR_SINT instead\n+   of UNSPEC_FOR_FP for floating-point values.\n+\n    MERGE_ARGNO is the argument that provides the values of inactive lanes for\n    _m functions, or DEFAULT_MERGE_ARGNO if we should apply the usual rules.  */\n rtx\n@@ -2913,7 +2919,12 @@ function_expander::map_to_rtx_codes (rtx_code code_for_sint,\n   /* Otherwise expand PRED_none and PRED_x operations without a predicate.\n      Floating-point operations conventionally use the signed rtx code.  */\n   if (pred == PRED_none || pred == PRED_x)\n-    return use_unpred_insn (direct_optab_handler (code_to_optab (code), 0));\n+    {\n+      icode = direct_optab_handler (code_to_optab (code), 0);\n+      if (icode == CODE_FOR_nothing)\n+\ticode = code_for_aarch64_sve (code, mode);\n+      return use_unpred_insn (icode);\n+    }\n \n   /* Don't use cond_*_optabs here, since not all codes have one yet.  */\n   if (type_suffix (0).integer_p)\n@@ -2964,22 +2975,6 @@ function_expander::map_to_unspecs (int unspec_for_sint, int unspec_for_uint,\n   return use_cond_insn (icode, merge_argno);\n }\n \n-/* Implement the call using an @aarch64 instruction and the\n-   instructions are parameterized by an rtx_code.  CODE_FOR_SINT\n-   is the rtx_code for signed integer operations, CODE_FOR_UINT\n-   is the rtx_code for unsigned integer operations.  */\n-rtx\n-function_expander::expand_signed_unpred_op (rtx_code code_for_sint,\n-\t\t\t\t\t    rtx_code code_for_uint)\n-{\n-  insn_code icode;\n-  if (type_suffix (0).unsigned_p)\n-    icode = code_for_aarch64 (code_for_uint, code_for_uint, vector_mode (0));\n-  else\n-    icode = code_for_aarch64 (code_for_sint, code_for_sint, vector_mode (0));\n-  return use_unpred_insn (icode);\n-}\n-\n /* Expand the call and return its lhs.  */\n rtx\n function_expander::expand ()"}, {"sha": "7d07c10e8cfa9be9290299be59f7dd467542917a", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -554,7 +554,6 @@ class function_expander : public function_call_info\n   rtx map_to_rtx_codes (rtx_code, rtx_code, int,\n \t\t\tunsigned int = DEFAULT_MERGE_ARGNO);\n   rtx map_to_unspecs (int, int, int, unsigned int = DEFAULT_MERGE_ARGNO);\n-  rtx expand_signed_unpred_op (rtx_code, rtx_code);\n \n   /* The function call expression.  */\n   tree call_expr;"}, {"sha": "fb33260d4dd9c48eb28ccf6675e2472066ff507a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -3879,7 +3879,7 @@\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated saturating signed addition and subtraction.\n-(define_insn \"@aarch64_<su_optab><optab><mode>\"\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w, ?&w, w\")\n \t(SBINQOPS:SVE_FULL_I\n \t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, 0, w, w, w\")\n@@ -3895,7 +3895,7 @@\n )\n \n ;; Unpredicated saturating unsigned addition and subtraction.\n-(define_insn \"@aarch64_<su_optab><optab><mode>\"\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w, w\")\n \t(UBINQOPS:SVE_FULL_I\n \t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w, w\")"}, {"sha": "dab3e4dac50c5f32d761f882c4fd00c664a7a858", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694e6b194b584505e10e89d373eba095df960f26/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=694e6b194b584505e10e89d373eba095df960f26", "patch": "@@ -1577,10 +1577,10 @@\n \t\t\t (mult \"mul\")\n \t\t\t (div \"div\")\n \t\t\t (udiv \"udiv\")\n-\t\t\t (ss_plus \"qadd\")\n-\t\t\t (us_plus \"qadd\")\n-\t\t\t (ss_minus \"qsub\")\n-\t\t\t (us_minus \"qsub\")\n+\t\t\t (ss_plus \"ssadd\")\n+\t\t\t (us_plus \"usadd\")\n+\t\t\t (ss_minus \"sssub\")\n+\t\t\t (us_minus \"ussub\")\n \t\t\t (ss_neg \"qneg\")\n \t\t\t (ss_abs \"qabs\")\n \t\t\t (smin \"smin\")\n@@ -1599,6 +1599,11 @@\n \t\t\t (gtu \"gtu\")\n \t\t\t (abs \"abs\")])\n \n+(define_code_attr addsub [(ss_plus \"add\")\n+\t\t\t  (us_plus \"add\")\n+\t\t\t  (ss_minus \"sub\")\n+\t\t\t  (us_minus \"sub\")])\n+\n ;; For comparison operators we use the FCM* and CM* instructions.\n ;; As there are no CMLE or CMLT instructions which act on 3 vector\n ;; operands, we must use CMGE or CMGT and swap the order of the"}]}