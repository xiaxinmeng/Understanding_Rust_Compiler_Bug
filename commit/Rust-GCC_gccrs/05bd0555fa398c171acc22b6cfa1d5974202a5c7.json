{"sha": "05bd0555fa398c171acc22b6cfa1d5974202a5c7", "node_id": "C_kwDOANBUbNoAKDA1YmQwNTU1ZmEzOThjMTcxYWNjMjJiNmNmYTFkNTk3NDIwMmE1Yzc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-20T17:31:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-20T17:31:24Z"}, "message": "Support Closure calls as generic trait bounds\n\nAddresses #195", "tree": {"sha": "5e79f9053d69d1bc3e03d015aa156d3209c33890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e79f9053d69d1bc3e03d015aa156d3209c33890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05bd0555fa398c171acc22b6cfa1d5974202a5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05bd0555fa398c171acc22b6cfa1d5974202a5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05bd0555fa398c171acc22b6cfa1d5974202a5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05bd0555fa398c171acc22b6cfa1d5974202a5c7/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f87dead4bf2da20bc3a22dc6ca7a373c9ed05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f87dead4bf2da20bc3a22dc6ca7a373c9ed05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f87dead4bf2da20bc3a22dc6ca7a373c9ed05c"}], "stats": {"total": 151, "additions": 104, "deletions": 47}, "files": [{"sha": "b077a12f7a35b47dc67ff718814ad48c70c5ebfd", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 69, "deletions": 47, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=05bd0555fa398c171acc22b6cfa1d5974202a5c7", "patch": "@@ -1693,53 +1693,10 @@ CompileExpr::visit (HIR::CallExpr &expr)\n   auto fn_address = CompileExpr::Compile (expr.get_fnexpr (), ctx);\n \n   // is this a closure call?\n-  if (RS_CLOSURE_TYPE_P (TREE_TYPE (fn_address)))\n-    {\n-      rust_assert (tyty->get_kind () == TyTy::TypeKind::CLOSURE);\n-      TyTy::ClosureType *closure = static_cast<TyTy::ClosureType *> (tyty);\n-\n-      std::vector<tree> tuple_arg_vals;\n-      for (auto &argument : expr.get_arguments ())\n-\t{\n-\t  auto rvalue = CompileExpr::Compile (argument.get (), ctx);\n-\t  tuple_arg_vals.push_back (rvalue);\n-\t}\n-\n-      tree tuple_args_tyty\n-\t= TyTyResolveCompile::compile (ctx, &closure->get_parameters ());\n-      tree tuple_args\n-\t= ctx->get_backend ()->constructor_expression (tuple_args_tyty, false,\n-\t\t\t\t\t\t       tuple_arg_vals, -1,\n-\t\t\t\t\t\t       expr.get_locus ());\n-\n-      // need to apply any autoderef's to the self argument\n-      HirId autoderef_mappings_id = expr.get_mappings ().get_hirid ();\n-      std::vector<Resolver::Adjustment> *adjustments = nullptr;\n-      bool ok\n-\t= ctx->get_tyctx ()->lookup_autoderef_mappings (autoderef_mappings_id,\n-\t\t\t\t\t\t\t&adjustments);\n-      rust_assert (ok);\n-\n-      // apply adjustments for the fn call\n-      tree self\n-\t= resolve_adjustements (*adjustments, fn_address, expr.get_locus ());\n-\n-      // args are always self, and the tuple of the args we are passing where\n-      // self is the path of the call-expr in this case the fn_address\n-      std::vector<tree> args;\n-      args.push_back (self);\n-      args.push_back (tuple_args);\n-\n-      // get the fn call address\n-      tree closure_call_site = ctx->lookup_closure_decl (closure);\n-      tree closure_call_address\n-\t= address_expression (closure_call_site, expr.get_locus ());\n-      translated\n-\t= ctx->get_backend ()->call_expression (closure_call_address, args,\n-\t\t\t\t\t\tnullptr /* static chain ?*/,\n-\t\t\t\t\t\texpr.get_locus ());\n-      return;\n-    }\n+  bool possible_trait_call\n+    = generate_possible_fn_trait_call (expr, fn_address, &translated);\n+  if (possible_trait_call)\n+    return;\n \n   bool is_varadic = false;\n   if (tyty->get_kind () == TyTy::TypeKind::FNDEF)\n@@ -3068,5 +3025,70 @@ CompileExpr::generate_closure_fntype (HIR::ClosureExpr &expr,\n   return TyTyResolveCompile::compile (ctx, item_tyty);\n }\n \n+bool\n+CompileExpr::generate_possible_fn_trait_call (HIR::CallExpr &expr,\n+\t\t\t\t\t      tree receiver, tree *result)\n+{\n+  TyTy::FnType *fn_sig = nullptr;\n+  bool found_overload = ctx->get_tyctx ()->lookup_operator_overload (\n+    expr.get_mappings ().get_hirid (), &fn_sig);\n+  if (!found_overload)\n+    return false;\n+\n+  auto id = fn_sig->get_ty_ref ();\n+  auto dId = fn_sig->get_id ();\n+\n+  tree function = error_mark_node;\n+  bool found_closure = ctx->lookup_function_decl (id, &function, dId, fn_sig);\n+  if (!found_closure)\n+    {\n+      // something went wrong we still return true as this was meant to be an fn\n+      // trait call\n+      *result = error_mark_node;\n+      return true;\n+    }\n+\n+  // need to apply any autoderef's to the self argument\n+  HirId autoderef_mappings_id = expr.get_mappings ().get_hirid ();\n+  std::vector<Resolver::Adjustment> *adjustments = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_autoderef_mappings (autoderef_mappings_id,\n+\t\t\t\t\t\t\t  &adjustments);\n+  rust_assert (ok);\n+\n+  // apply adjustments for the fn call\n+  tree self = resolve_adjustements (*adjustments, receiver, expr.get_locus ());\n+\n+  // resolve the arguments\n+  std::vector<tree> tuple_arg_vals;\n+  for (auto &argument : expr.get_arguments ())\n+    {\n+      auto rvalue = CompileExpr::Compile (argument.get (), ctx);\n+      tuple_arg_vals.push_back (rvalue);\n+    }\n+\n+  // this is always the 2nd argument in the function signature\n+  tree fnty = TREE_TYPE (function);\n+  tree fn_arg_tys = TYPE_ARG_TYPES (fnty);\n+  tree tuple_args_tyty_chain = TREE_CHAIN (fn_arg_tys);\n+  tree tuple_args_tyty = TREE_VALUE (tuple_args_tyty_chain);\n+\n+  tree tuple_args\n+    = ctx->get_backend ()->constructor_expression (tuple_args_tyty, false,\n+\t\t\t\t\t\t   tuple_arg_vals, -1,\n+\t\t\t\t\t\t   expr.get_locus ());\n+\n+  // args are always self, and the tuple of the args we are passing where\n+  // self is the path of the call-expr in this case the fn_address\n+  std::vector<tree> args;\n+  args.push_back (self);\n+  args.push_back (tuple_args);\n+\n+  tree call_address = address_expression (function, expr.get_locus ());\n+  *result = ctx->get_backend ()->call_expression (call_address, args,\n+\t\t\t\t\t\t  nullptr /* static chain ?*/,\n+\t\t\t\t\t\t  expr.get_locus ());\n+  return true;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "a259daf0d6923db39ff442a990aff2165cc40f54", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=05bd0555fa398c171acc22b6cfa1d5974202a5c7", "patch": "@@ -152,6 +152,9 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n \t\t\t\ttree compiled_closure_tyty,\n \t\t\t\tTyTy::FnType **fn_tyty);\n \n+  bool generate_possible_fn_trait_call (HIR::CallExpr &expr, tree receiver,\n+\t\t\t\t\ttree *result);\n+\n private:\n   CompileExpr (Context *ctx);\n "}, {"sha": "45b3b5ce8b4b6fdf465e97e6ac78f3b091cd2a2d", "filename": "gcc/testsuite/rust/execute/torture/closure2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fclosure2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bd0555fa398c171acc22b6cfa1d5974202a5c7/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fclosure2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fclosure2.rs?ref=05bd0555fa398c171acc22b6cfa1d5974202a5c7", "patch": "@@ -0,0 +1,32 @@\n+// { dg-output \"3\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"fn_once\"]\n+pub trait FnOnce<Args> {\n+    #[lang = \"fn_once_output\"]\n+    type Output;\n+\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+fn f<F: FnOnce(i32) -> i32>(g: F) {\n+    let call = g(1);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, call);\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let a = |i: i32| {\n+        let b = i + 2;\n+        b\n+    };\n+    f(a);\n+    0\n+}"}]}