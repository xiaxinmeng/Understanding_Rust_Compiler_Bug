{"sha": "3f46ef1ff6b040f8b61ef6311cbb025694db3594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0NmVmMWZmNmIwNDBmOGI2MWVmNjMxMWNiYjAyNTY5NGRiMzU5NA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-12-23T15:37:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-23T15:37:28Z"}, "message": "builtins.c (unterminated_array): Use empty brace initialization for c_strlen_data.\n\n2018-12-23  Martin Sebor  <msebor@redhat.com>\n\t    Jeff Law  <law@redhat.com>\n\n\t* builtins.c (unterminated_array): Use empty brace initialization\n\tfor c_strlen_data.\n\t(c_strlen, expand_builtin_strnlen): Likewise.\n\t(expand_builtin_stpcpy_1, fold_builtin_strlen): Likewise.\n\t* gimple-fold.c (get_range_strlen): Likewise.\n\t(gimple_fold_builtin_stpcpy): Likewise.\n\t* gimple-ssa-sprintf.c (get_string_length): Likewise.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r267376", "tree": {"sha": "9f3374a884a2b96dc8e7d2199c7e3b0ecf690f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3374a884a2b96dc8e7d2199c7e3b0ecf690f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f46ef1ff6b040f8b61ef6311cbb025694db3594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f46ef1ff6b040f8b61ef6311cbb025694db3594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f46ef1ff6b040f8b61ef6311cbb025694db3594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f46ef1ff6b040f8b61ef6311cbb025694db3594/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7bdd292d9366e3bf8171ca3aa246359655d0fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bdd292d9366e3bf8171ca3aa246359655d0fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bdd292d9366e3bf8171ca3aa246359655d0fd9"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "a63e7745536d2be3269da010177a8ca1d5cd144a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f46ef1ff6b040f8b61ef6311cbb025694db3594", "patch": "@@ -1,3 +1,14 @@\n+2018-12-23  Martin Sebor  <msebor@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* builtins.c (unterminated_array): Use empty brace initialization\n+\tfor c_strlen_data.\n+\t(c_strlen, expand_builtin_strnlen): Likewise.\n+\t(expand_builtin_stpcpy_1, fold_builtin_strlen): Likewise.\n+\t* gimple-fold.c (get_range_strlen): Likewise.\n+\t(gimple_fold_builtin_stpcpy): Likewise.\n+\t* gimple-ssa-sprintf.c (get_string_length): Likewise.\n+\n 2018-12-23  Alan Modra  <amodra@gmail.com>\n \n \tPR 88346"}, {"sha": "4a82f58d5f41f35a848925a65adefba65fca3f42", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3f46ef1ff6b040f8b61ef6311cbb025694db3594", "patch": "@@ -575,8 +575,7 @@ unterminated_array (tree exp, tree *size /* = NULL */, bool *exact /* = NULL */)\n {\n   /* C_STRLEN will return NULL and set DECL in the info\n      structure if EXP references a unterminated array.  */\n-  c_strlen_data data;\n-  memset (&data, 0, sizeof (c_strlen_data));\n+  c_strlen_data data = { };\n   tree len = c_strlen (exp, 1, &data);\n   if (len == NULL_TREE && data.len && data.decl)\n      {\n@@ -647,8 +646,7 @@ c_strlen (tree src, int only_value, c_strlen_data *data, unsigned eltsize)\n   /* If we were not passed a DATA pointer, then get one to a local\n      structure.  That avoids having to check DATA for NULL before\n      each time we want to use it.  */\n-  c_strlen_data local_strlen_data;\n-  memset (&local_strlen_data, 0, sizeof (c_strlen_data));\n+  c_strlen_data local_strlen_data = { };\n   if (!data)\n     data = &local_strlen_data;\n \n@@ -3085,8 +3083,7 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \n   /* FIXME: Change c_strlen() to return sizetype instead of ssizetype\n      so these conversions aren't necessary.  */\n-  c_strlen_data data;\n-  memset (&data, 0, sizeof (c_strlen_data));\n+  c_strlen_data data { };\n   tree len = c_strlen (src, 0, &data, 1);\n   if (len)\n     len = fold_convert_loc (loc, TREE_TYPE (bound), len);\n@@ -4086,8 +4083,7 @@ expand_builtin_stpcpy_1 (tree exp, rtx target, machine_mode mode)\n \t compile-time, not an expression containing a string.  This is\n \t because the latter will potentially produce pessimized code\n \t when used to produce the return value.  */\n-      c_strlen_data data;\n-      memset (&data, 0, sizeof (c_strlen_data));\n+      c_strlen_data data = { };\n       if (!c_getstr (src, NULL)\n \t  || !(len = c_strlen (src, 0, &data, 1)))\n \treturn expand_movstr (dst, src, target,\n@@ -8571,8 +8567,7 @@ fold_builtin_strlen (location_t loc, tree type, tree arg)\n     return NULL_TREE;\n   else\n     {\n-      c_strlen_data data;\n-      memset (&data, 0, sizeof (c_strlen_data));\n+      c_strlen_data data = { };\n       tree len = c_strlen (arg, 0, &data);\n \n       if (len)"}, {"sha": "af509740bb334d4f1c251e0c94596f579c37ad1f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3f46ef1ff6b040f8b61ef6311cbb025694db3594", "patch": "@@ -1335,8 +1335,7 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited, int type,\n \t}\n       else\n \t{\n-\t  c_strlen_data data;\n-\t  memset (&data, 0, sizeof (c_strlen_data));\n+\t  c_strlen_data data = { };\n \t  val = c_strlen (arg, 1, &data, eltsize);\n \n \t  /* If we potentially had a non-terminated string, then\n@@ -2824,8 +2823,7 @@ gimple_fold_builtin_stpcpy (gimple_stmt_iterator *gsi)\n     }\n \n   /* Set to non-null if ARG refers to an unterminated array.  */\n-  c_strlen_data data;\n-  memset (&data, 0, sizeof (c_strlen_data));\n+  c_strlen_data data = { };\n   tree len = c_strlen (src, 1, &data, 1);\n   if (!len\n       || TREE_CODE (len) != INTEGER_CST)"}, {"sha": "d6278305fc4f4e3aff781de688c88305f8d5d0cb", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f46ef1ff6b040f8b61ef6311cbb025694db3594/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=3f46ef1ff6b040f8b61ef6311cbb025694db3594", "patch": "@@ -2003,8 +2003,7 @@ get_string_length (tree str, unsigned eltsize)\n   if (!str)\n     return fmtresult ();\n \n-  c_strlen_data data;\n-  memset (&data, 0, sizeof (c_strlen_data));\n+  c_strlen_data data = { };\n   tree slen = c_strlen (str, 1, &data, eltsize);\n   if (slen && TREE_CODE (slen) == INTEGER_CST)\n     {"}]}