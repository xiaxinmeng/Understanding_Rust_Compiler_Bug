{"sha": "46eb666a79f04e992bd3405b0bb9a464cd8a2802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlYjY2NmE3OWYwNGU5OTJiZDM0MDViMGJiOWE0NjRjZDhhMjgwMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-02T08:14:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-02T08:14:54Z"}, "message": "tree-dfa.c (referenced_var_lookup): Remove.\n\n2012-08-02  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (referenced_var_lookup): Remove.\n\t(find_referenced_vars): Remove.\n\t(pass_referenced_vars): Likewise.\n\t(make_rename_temp): Do not add referenced vars.\n\t(dump_referenced_vars): Remove.\n\t(debug_referenced_vars): Likewise.\n\t(dump_dfa_stats): Do not dump referenced var stats.\n\t(find_vars_r): Remove.\n\t(find_referenced_vars_in): Likewise.\n\t(referenced_var_check_and_insert): Likewise.\n\t(add_referenced_var_1): Likewise.\n\t(remove_referenced_var): Likewise.\n\t* tree-flow.h (referenced_var_lookup): Likewise.\n\t(struct gimple_df): Remove referenced_vars member.\n\t(typedef referenced_var_iterator): Remove.\n\t(FOR_EACH_REFERENCED_VAR): Likewise.\n\t(num_referenced_vars): Likewise.\n\t(debug_referenced_vars, dump_referenced_vars): Likewise.\n\t(add_referenced_var_1, add_referenced_var): Likewise.\n\t(remove_referenced_var): Likewise.\n\t(find_referenced_vars_in): Likewise.\n\t* tree-flow-inline.h (gimple_referenced_vars): Remove.\n\t(first_referenced_var): Likewise.\n\t(end_referenced_vars_p): Likewise.\n\t(next_referenced_var): Likewise.\n\t* cfgexpand.c (update_alias_info_with_stack_vars): Remove assert.\n\t* gimple-pretty-print.c (pp_points_to_solution): Dump UIDs\n\tunconditionally.\n\t* tree-into-ssa.c (dump_decl_set): Likewise.\n\t(pass_build_ssa): Do not require PROP_referenced_vars.\n\t* tree-ssa.c (target_for_debug_bind): Virtual operands are\n\tnot suitable, but all register type vars are.\n\t(init_tree_ssa): Do not allocate referenced vars.\n\t(delete_tree_ssa): Do not free referenced vars.\n\t* cgraphunit.c (init_lowered_empty_function): Do not set\n\tPROP_referenced_vars.\n\t(assemble_thunk): Do not add referenced vars.\n\t* gimple-fold.c (canonicalize_constructor_val): Likewise.\n\t(gimplify_and_update_call_from_tree): Likewise.\n\t* gimple-streamer-in.c (input_bb): Likewise.\n\t* passes.c (init_optimization_passes): Do not run\n\tpass_referenced_vars.\n\t(dump_properties): Do not dump PROP_referenced_vars.\n\t* tree-inline.c (remap_decl): Do not add referenced vars.\n\t(remap_gimple_op_r): Likewise.\n\t(copy_tree_body_r): Likewise.\n\t(copy_bb): Likewise.\n\t(setup_one_parameter): Likewise.\n\t(declare_return_variable): Likewise.\n\t(copy_decl_for_dup_finish): Likewise.\n\t(copy_arguments_for_versioning): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-pass.h (PROP_referenced_vars): Remove.\n\t(pass_referenced_vars): Likewise.\n\t* tree-profile.c (gimple_gen_edge_profiler): Do not add referenced vars.\n\t(gimple_gen_interval_profiler): Likewise.\n\t(gimple_gen_pow2_profiler): Likewise.\n\t(gimple_gen_one_value_profiler): Likewise.\n\t(gimple_gen_ic_profiler): Likewise.\n\t(gimple_gen_average_profiler): Likewise.\n\t(gimple_gen_ior_profiler): Likewise.\n\t* tree-ssa-live.c (remove_unused_locals): Do not touch referenced vars.\n\t* tree-cfg.c (replace_ssa_name): Do not add referenced vars.\n\t(move_stmt_op): Likewise.\n\t* tree-ssa-operands.c (create_vop_var): Likewise.\n\t* gimple-low.c (record_vars_into): Likewise.\n\t* gimplify.c (gimple_regimplify_operands): Likewise.\n\t(force_gimple_operand_1): Likewise.\n\t* omp-low.c (expand_omp_for_generic): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t(expand_omp_atomic_pipeline): Likewise.\n\t* graphite-clast-to-gimple.c (graphite_create_new_loop): Likewise.\n\t(translate_clast_assignment): Likewise.\n\t* graphite-sese-to-poly.c (create_zero_dim_array): Likewise.\n\t(handle_scalar_deps_crossing_scop_limits): Likewise.\n\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n\t* ipa-split.c (split_function): Likewise.\n\t* matrix-reorg.c (transform_access_sites): Likewise.\n\t* trans-mem.c (tm_log_add): Likewise.\n\t(ipa_tm_insert_gettmclone_call): Likewise.\n\t* tree-complex.c (create_one_component_var): Likewise.\n\t* tree-if-conv.c (ifc_temp_var): Likewise.\n\t* tree-parloops.c (take_address_of): Likewise.\n\t(initialize_reductions): Likewise.\n\t(separate_decls_in_region_name): Likewise.\n\t(create_call_for_reduction_1): Likewise.\n\t(separate_decls_in_region): Likewise.\n\t* tree-predcom.c (predcom_tmp_var): Likewise.\n\t(reassociate_to_the_same_stmt): Likewise.\n\t* tree-sra.c (build_ref_for_offset): Likewise.\n\t(create_access_replacement): Likewise.\n\t(get_replaced_param_substitute): Likewise.\n\t(sra_ipa_reset_debug_stmts): Likewise.\n\t* tree-ssa-loop-im.c (rewrite_reciprocal): Likewise.\n\t(rewrite_bittest): Likewise.\n\t* tree-ssa-loop-ivopts.c (create_new_iv): Likewise.\n\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n\t(tree_transform_and_unroll_loop): Likewise.\n\t* tree-ssa-math-opts.c (powi_as_mults): Likewise.\n\t(build_and_insert_call): Likewise.\n\t(gimple_expand_builtin_cabs): Likewise.\n\t(execute_optimize_bswap): Likewise.\n\t* tree-ssa-phiopt.c (conditional_replacement): Likewise.\n\t(abs_replacement): Likewise.\n\t(cond_store_replacement): Likewise.\n\t(cond_if_else_store_replacement_1): Likewise.\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n\t* tree-ssa-pre.c (get_representative_for): Likewise.\n\t(create_expression_by_pieces): Likewise.\n\t(insert_into_preds_of_block): Likewise.\n\t* tree-ssa-propagate.c (update_call_from_tree): Likewise.\n\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n\t(eliminate_redundant_comparison): Likewise.\n\t(rewrite_expr_tree_parallel): Likewise.\n\t(get_reassoc_pow_ssa_name): Likewise.\n\t* tree-ssa-strlen.c (get_string_length): Likewise.\n\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n\t(build_arrays): Likewise.\n\t* tree-tailcall.c (adjust_return_value_with_ops): Likewise.\n\t(create_tailcall_accumulator): Likewise.\n\t* tree-vect-data-refs.c (vect_get_new_vect_var): Likewise.\n\t(vect_create_addr_base_for_vector_ref): Likewise.\n\t(vect_permute_store_chain): Likewise.\n\t(vect_permute_load_chain): Likewise.\n\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n\t* tree-vect-loop-manip.c (set_prologue_iterations): Likewise.\n\t(vect_build_loop_niters): Likewise.\n\t(vect_generate_tmps_on_preheader): Likewise.\n\t(vect_update_ivs_after_vectorizer): Likewise.\n\t(vect_gen_niters_for_prolog_loop): Likewise.\n\t(vect_do_peeling_for_alignment): Likewise.\n\t(vect_create_cond_for_align_checks): Likewise.\n\t* tree-vect-patterns.c (vect_recog_temp_ssa_var): Likewise.\n\t(vect_handle_widen_op_by_const): Likewise.\n\t(vect_operation_fits_smaller_type): Likewise.\n\t(vect_recog_over_widening_pattern): Likewise.\n\t* tree-vect-stmts.c (vect_init_vector): Likewise.\n\n\t* gcc.dg/torture/pta-callused-1.c: Adjust.\n\t* gcc.dg/torture/pta-ptrarith-3.c: Likewise.\n\t* gcc.dg/torture/ssa-pta-fn-1.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-19.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-ptrarith-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-ptrarith-2.c: Likewise.\n\nFrom-SVN: r190067", "tree": {"sha": "2d5192c2c186651200e37d636c85698c0eb873d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d5192c2c186651200e37d636c85698c0eb873d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46eb666a79f04e992bd3405b0bb9a464cd8a2802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb666a79f04e992bd3405b0bb9a464cd8a2802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eb666a79f04e992bd3405b0bb9a464cd8a2802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb666a79f04e992bd3405b0bb9a464cd8a2802/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7206ab1c324ac4e6a8e4a9d5bf19b1b1d91f68f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7206ab1c324ac4e6a8e4a9d5bf19b1b1d91f68f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7206ab1c324ac4e6a8e4a9d5bf19b1b1d91f68f"}], "stats": {"total": 784, "additions": 188, "deletions": 596}, "files": [{"sha": "c48a2e27ddc0b1ee6aacbb2211694b18fdf7acdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1,3 +1,143 @@\n+2012-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (referenced_var_lookup): Remove.\n+\t(find_referenced_vars): Remove.\n+\t(pass_referenced_vars): Likewise.\n+\t(make_rename_temp): Do not add referenced vars.\n+\t(dump_referenced_vars): Remove.\n+\t(debug_referenced_vars): Likewise.\n+\t(dump_dfa_stats): Do not dump referenced var stats.\n+\t(find_vars_r): Remove.\n+\t(find_referenced_vars_in): Likewise.\n+\t(referenced_var_check_and_insert): Likewise.\n+\t(add_referenced_var_1): Likewise.\n+\t(remove_referenced_var): Likewise.\n+\t* tree-flow.h (referenced_var_lookup): Likewise.\n+\t(struct gimple_df): Remove referenced_vars member.\n+\t(typedef referenced_var_iterator): Remove.\n+\t(FOR_EACH_REFERENCED_VAR): Likewise.\n+\t(num_referenced_vars): Likewise.\n+\t(debug_referenced_vars, dump_referenced_vars): Likewise.\n+\t(add_referenced_var_1, add_referenced_var): Likewise.\n+\t(remove_referenced_var): Likewise.\n+\t(find_referenced_vars_in): Likewise.\n+\t* tree-flow-inline.h (gimple_referenced_vars): Remove.\n+\t(first_referenced_var): Likewise.\n+\t(end_referenced_vars_p): Likewise.\n+\t(next_referenced_var): Likewise.\n+\t* cfgexpand.c (update_alias_info_with_stack_vars): Remove assert.\n+\t* gimple-pretty-print.c (pp_points_to_solution): Dump UIDs\n+\tunconditionally.\n+\t* tree-into-ssa.c (dump_decl_set): Likewise.\n+\t(pass_build_ssa): Do not require PROP_referenced_vars.\n+\t* tree-ssa.c (target_for_debug_bind): Virtual operands are\n+\tnot suitable, but all register type vars are.\n+\t(init_tree_ssa): Do not allocate referenced vars.\n+\t(delete_tree_ssa): Do not free referenced vars.\n+\t* cgraphunit.c (init_lowered_empty_function): Do not set\n+\tPROP_referenced_vars.\n+\t(assemble_thunk): Do not add referenced vars.\n+\t* gimple-fold.c (canonicalize_constructor_val): Likewise.\n+\t(gimplify_and_update_call_from_tree): Likewise.\n+\t* gimple-streamer-in.c (input_bb): Likewise.\n+\t* passes.c (init_optimization_passes): Do not run\n+\tpass_referenced_vars.\n+\t(dump_properties): Do not dump PROP_referenced_vars.\n+\t* tree-inline.c (remap_decl): Do not add referenced vars.\n+\t(remap_gimple_op_r): Likewise.\n+\t(copy_tree_body_r): Likewise.\n+\t(copy_bb): Likewise.\n+\t(setup_one_parameter): Likewise.\n+\t(declare_return_variable): Likewise.\n+\t(copy_decl_for_dup_finish): Likewise.\n+\t(copy_arguments_for_versioning): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t* tree-pass.h (PROP_referenced_vars): Remove.\n+\t(pass_referenced_vars): Likewise.\n+\t* tree-profile.c (gimple_gen_edge_profiler): Do not add referenced vars.\n+\t(gimple_gen_interval_profiler): Likewise.\n+\t(gimple_gen_pow2_profiler): Likewise.\n+\t(gimple_gen_one_value_profiler): Likewise.\n+\t(gimple_gen_ic_profiler): Likewise.\n+\t(gimple_gen_average_profiler): Likewise.\n+\t(gimple_gen_ior_profiler): Likewise.\n+\t* tree-ssa-live.c (remove_unused_locals): Do not touch referenced vars.\n+\t* tree-cfg.c (replace_ssa_name): Do not add referenced vars.\n+\t(move_stmt_op): Likewise.\n+\t* tree-ssa-operands.c (create_vop_var): Likewise.\n+\t* gimple-low.c (record_vars_into): Likewise.\n+\t* gimplify.c (gimple_regimplify_operands): Likewise.\n+\t(force_gimple_operand_1): Likewise.\n+\t* omp-low.c (expand_omp_for_generic): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t(expand_omp_atomic_pipeline): Likewise.\n+\t* graphite-clast-to-gimple.c (graphite_create_new_loop): Likewise.\n+\t(translate_clast_assignment): Likewise.\n+\t* graphite-sese-to-poly.c (create_zero_dim_array): Likewise.\n+\t(handle_scalar_deps_crossing_scop_limits): Likewise.\n+\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* matrix-reorg.c (transform_access_sites): Likewise.\n+\t* trans-mem.c (tm_log_add): Likewise.\n+\t(ipa_tm_insert_gettmclone_call): Likewise.\n+\t* tree-complex.c (create_one_component_var): Likewise.\n+\t* tree-if-conv.c (ifc_temp_var): Likewise.\n+\t* tree-parloops.c (take_address_of): Likewise.\n+\t(initialize_reductions): Likewise.\n+\t(separate_decls_in_region_name): Likewise.\n+\t(create_call_for_reduction_1): Likewise.\n+\t(separate_decls_in_region): Likewise.\n+\t* tree-predcom.c (predcom_tmp_var): Likewise.\n+\t(reassociate_to_the_same_stmt): Likewise.\n+\t* tree-sra.c (build_ref_for_offset): Likewise.\n+\t(create_access_replacement): Likewise.\n+\t(get_replaced_param_substitute): Likewise.\n+\t(sra_ipa_reset_debug_stmts): Likewise.\n+\t* tree-ssa-loop-im.c (rewrite_reciprocal): Likewise.\n+\t(rewrite_bittest): Likewise.\n+\t* tree-ssa-loop-ivopts.c (create_new_iv): Likewise.\n+\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n+\t(tree_transform_and_unroll_loop): Likewise.\n+\t* tree-ssa-math-opts.c (powi_as_mults): Likewise.\n+\t(build_and_insert_call): Likewise.\n+\t(gimple_expand_builtin_cabs): Likewise.\n+\t(execute_optimize_bswap): Likewise.\n+\t* tree-ssa-phiopt.c (conditional_replacement): Likewise.\n+\t(abs_replacement): Likewise.\n+\t(cond_store_replacement): Likewise.\n+\t(cond_if_else_store_replacement_1): Likewise.\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n+\t* tree-ssa-pre.c (get_representative_for): Likewise.\n+\t(create_expression_by_pieces): Likewise.\n+\t(insert_into_preds_of_block): Likewise.\n+\t* tree-ssa-propagate.c (update_call_from_tree): Likewise.\n+\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n+\t(eliminate_redundant_comparison): Likewise.\n+\t(rewrite_expr_tree_parallel): Likewise.\n+\t(get_reassoc_pow_ssa_name): Likewise.\n+\t* tree-ssa-strlen.c (get_string_length): Likewise.\n+\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n+\t(build_arrays): Likewise.\n+\t* tree-tailcall.c (adjust_return_value_with_ops): Likewise.\n+\t(create_tailcall_accumulator): Likewise.\n+\t* tree-vect-data-refs.c (vect_get_new_vect_var): Likewise.\n+\t(vect_create_addr_base_for_vector_ref): Likewise.\n+\t(vect_permute_store_chain): Likewise.\n+\t(vect_permute_load_chain): Likewise.\n+\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n+\t* tree-vect-loop-manip.c (set_prologue_iterations): Likewise.\n+\t(vect_build_loop_niters): Likewise.\n+\t(vect_generate_tmps_on_preheader): Likewise.\n+\t(vect_update_ivs_after_vectorizer): Likewise.\n+\t(vect_gen_niters_for_prolog_loop): Likewise.\n+\t(vect_do_peeling_for_alignment): Likewise.\n+\t(vect_create_cond_for_align_checks): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_temp_ssa_var): Likewise.\n+\t(vect_handle_widen_op_by_const): Likewise.\n+\t(vect_operation_fits_smaller_type): Likewise.\n+\t(vect_recog_over_widening_pattern): Likewise.\n+\t* tree-vect-stmts.c (vect_init_vector): Likewise.\n+\n 2012-08-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/52983"}, {"sha": "3be686936fbfb2305414ced3048b93bb82485254", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -620,13 +620,6 @@ update_alias_info_with_stack_vars (void)\n \t{\n \t  tree decl = stack_vars[j].decl;\n \t  unsigned int uid = DECL_PT_UID (decl);\n-\t  /* We should never end up partitioning SSA names (though they\n-\t     may end up on the stack).  Neither should we allocate stack\n-\t     space to something that is unused and thus unreferenced, except\n-\t     for -O0 where we are preserving even unreferenced variables.  */\n-\t  gcc_assert (DECL_P (decl)\n-\t\t      && (!optimize\n-\t\t\t  || referenced_var_lookup (cfun, DECL_UID (decl))));\n \t  bitmap_set_bit (part, uid);\n \t  *((bitmap *) pointer_map_insert (decls_to_partitions,\n \t\t\t\t\t   (void *)(size_t) uid)) = part;"}, {"sha": "12a254dad9d26686dbfc43c79a0f30be7a0cfc52", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1228,8 +1228,7 @@ init_lowered_empty_function (tree decl)\n \n   DECL_SAVED_TREE (decl) = error_mark_node;\n   cfun->curr_properties |=\n-    (PROP_gimple_lcf | PROP_gimple_leh | PROP_cfg | PROP_referenced_vars |\n-     PROP_ssa | PROP_gimple_any);\n+    (PROP_gimple_lcf | PROP_gimple_leh | PROP_cfg | PROP_ssa | PROP_gimple_any);\n \n   /* Create BB for body of the function and connect it properly.  */\n   bb = create_basic_block (NULL, (void *) 0, ENTRY_BLOCK_PTR);\n@@ -1454,12 +1453,8 @@ assemble_thunk (struct cgraph_node *node)\n \t\t\t\t      virtual_offset));\n       else\n         VEC_quick_push (tree, vargs, a);\n-      add_referenced_var (a);\n       for (i = 1, arg = DECL_CHAIN (a); i < nargs; i++, arg = DECL_CHAIN (arg))\n-\t{\n-\t  add_referenced_var (arg);\n-\t  VEC_quick_push (tree, vargs, arg);\n-\t}\n+\tVEC_quick_push (tree, vargs, arg);\n       call = gimple_build_call_vec (build_fold_addr_expr_loc (0, alias), vargs);\n       VEC_free (tree, heap, vargs);\n       gimple_call_set_from_thunk (call, true);"}, {"sha": "d708c80afa9ac748b227ce4142cf711faaa5bcda", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -169,12 +169,7 @@ canonicalize_constructor_val (tree cval, tree from_decl)\n \t  && !can_refer_decl_in_current_unit_p (base, from_decl))\n \treturn NULL_TREE;\n       if (TREE_CODE (base) == VAR_DECL)\n-\t{\n-\t  TREE_ADDRESSABLE (base) = 1;\n-\t  if (cfun && gimple_referenced_vars (cfun)\n-\t      && !is_global_var (base))\n-\t    add_referenced_var (base);\n-\t}\n+\tTREE_ADDRESSABLE (base) = 1;\n       else if (TREE_CODE (base) == FUNCTION_DECL)\n \t{\n \t  /* Make sure we create a cgraph node for functions we'll reference.\n@@ -653,9 +648,6 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n   for (i = gsi_start (stmts); !gsi_end_p (i); gsi_next (&i))\n     {\n       new_stmt = gsi_stmt (i);\n-      /* The replacement can expose previously unreferenced variables.  */\n-      if (gimple_in_ssa_p (cfun))\n-\tfind_referenced_vars_in (new_stmt);\n       /* If the new statement possibly has a VUSE, update it with exact SSA\n \t name we know will reach this one.  */\n       if (gimple_has_mem_ops (new_stmt))"}, {"sha": "f17d8e7750ab5758a56a902d5cb02cc0b0f5225c", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1009,8 +1009,6 @@ record_vars_into (tree vars, tree fn)\n \n       /* Record the variable.  */\n       add_local_decl (cfun, var);\n-      if (gimple_referenced_vars (cfun))\n-\tadd_referenced_var (var);\n     }\n \n   if (fn != current_function_decl)"}, {"sha": "a9b071c82e46b0f50f60554c07517d7bf9114c41", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -597,21 +597,8 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n       pp_string (buffer, \"{ \");\n       EXECUTE_IF_SET_IN_BITMAP (pt->vars, 0, i, bi)\n \t{\n-\t  tree var = referenced_var_lookup (cfun, i);\n-\t  if (var)\n-\t    {\n-\t      dump_generic_node (buffer, var, 0, dump_flags, false);\n-\t      if (DECL_PT_UID (var) != DECL_UID (var))\n-\t\t{\n-\t\t  pp_string (buffer, \"ptD.\");\n-\t\t  pp_decimal_int (buffer, DECL_PT_UID (var));\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      pp_string (buffer, \"D.\");\n-\t      pp_decimal_int (buffer, i);\n-\t    }\n+\t  pp_string (buffer, \"D.\");\n+\t  pp_decimal_int (buffer, i);\n \t  pp_character (buffer, ' ');\n \t}\n       pp_character (buffer, '}');"}, {"sha": "f40be0e6edfc81c497f5ff08809623da62dc0cc3", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -310,8 +310,6 @@ input_bb (struct lto_input_block *ib, enum LTO_tags tag,\n   while (tag)\n     {\n       gimple stmt = input_gimple_stmt (ib, data_in, fn, tag);\n-      if (!is_gimple_debug (stmt))\n-\tfind_referenced_vars_in (stmt);\n       gsi_insert_after (&bsi, stmt, GSI_NEW_STMT);\n \n       /* After the statement, expect a 0 delimiter or the EH region\n@@ -332,8 +330,7 @@ input_bb (struct lto_input_block *ib, enum LTO_tags tag,\n   tag = streamer_read_record_start (ib);\n   while (tag)\n     {\n-      gimple phi = input_phi (ib, bb, data_in, fn);\n-      find_referenced_vars_in (phi);\n+      input_phi (ib, bb, data_in, fn);\n       tag = streamer_read_record_start (ib);\n     }\n }"}, {"sha": "8c724892d1241ff963f1d81018ecbe58c7b03395", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -8363,7 +8363,7 @@ void\n gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n {\n   size_t i, num_ops;\n-  tree orig_lhs = NULL_TREE, lhs, t;\n+  tree orig_lhs = NULL_TREE, lhs;\n   gimple_seq pre = NULL;\n   gimple post_stmt = NULL;\n   struct gimplify_ctx gctx;\n@@ -8522,10 +8522,6 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n       break;\n     }\n \n-  if (gimple_referenced_vars (cfun))\n-    for (t = gimplify_ctxp->temps; t ; t = TREE_CHAIN (t))\n-      add_referenced_var (t);\n-\n   if (!gimple_seq_empty_p (pre))\n     gsi_insert_seq_before (gsi_p, pre, GSI_SAME_STMT);\n   if (post_stmt)\n@@ -8542,7 +8538,6 @@ tree\n force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n \t\t\tgimple_predicate gimple_test_f, tree var)\n {\n-  tree t;\n   enum gimplify_status ret;\n   struct gimplify_ctx gctx;\n \n@@ -8574,10 +8569,6 @@ force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n       gcc_assert (ret != GS_ERROR);\n     }\n \n-  if (gimple_referenced_vars (cfun))\n-    for (t = gimplify_ctxp->temps; t ; t = DECL_CHAIN (t))\n-      add_referenced_var (t);\n-\n   pop_gimplify_context (NULL);\n \n   return expr;"}, {"sha": "90ca682f9c69c3f20e950eebcc5592a6c9972dc5", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -949,8 +949,6 @@ graphite_create_new_loop (edge entry_edge, struct clast_for *stmt,\n     (entry_edge, lb, stride, ub, ivvar, &iv, &iv_after_increment,\n      outer ? outer : entry_edge->src->loop_father);\n \n-  add_referenced_var (ivvar);\n-\n   mpz_init (low);\n   mpz_init (up);\n   compute_bounds_for_loop (stmt, low, up);\n@@ -1221,7 +1219,6 @@ translate_clast_assignment (struct clast_assignment *stmt, edge next_e,\n   var = create_tmp_var (type, \"graphite_var\");\n   new_name = force_gimple_operand (clast_to_gcc_expression (type, expr, ip),\n \t\t\t\t   &stmts, true, var);\n-  add_referenced_var (var);\n   if (stmts)\n     {\n       gsi_insert_seq_on_edge (next_e, stmts);"}, {"sha": "ca3ae8f863348baf9e3cec899cad80c3849c5792", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -2100,8 +2100,6 @@ create_zero_dim_array (tree var, const char *base_name)\n   tree array_type = build_array_type (elt_type, index_type);\n   tree base = create_tmp_var (array_type, base_name);\n \n-  add_referenced_var (base);\n-\n   return build4 (ARRAY_REF, elt_type, base, integer_zero_node, NULL_TREE,\n \t\t NULL_TREE);\n }\n@@ -2405,7 +2403,6 @@ handle_scalar_deps_crossing_scop_limits (scop_p scop, tree def, gimple stmt)\n       gimple assign = gimple_build_assign (new_name, def);\n       gimple_stmt_iterator psi = gsi_after_labels (SESE_EXIT (region)->dest);\n \n-      add_referenced_var (var);\n       SSA_NAME_DEF_STMT (new_name) = assign;\n       update_stmt (assign);\n       gsi_insert_before (&psi, assign, GSI_SAME_STMT);"}, {"sha": "0c49fdf8f6c3f20be76df5d7f6f0b3866b29eb4a", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -2355,7 +2355,6 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments,\n \t  DECL_IGNORED_P (new_parm) = 1;\n \t  layout_decl (new_parm, 0);\n \n-\t  add_referenced_var (new_parm);\n \t  adj->base = parm;\n \t  adj->reduction = new_parm;\n "}, {"sha": "be21436f0d3ab7a035e6aafd512f9779688b1c64", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1083,7 +1083,6 @@ split_function (struct split_point *split_point)\n       {\n \t/* This parm might not have been used up to now, but is going to be\n \t   used, hence register it.  */\n-\tadd_referenced_var (parm);\n \tif (is_gimple_reg (parm))\n \t  {\n \t    arg = gimple_default_def (cfun, parm);"}, {"sha": "830980a20f0c6bc032f992618e58fab4b0dbec45", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1833,7 +1833,6 @@ transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \t\t\t\t== MEM_REF);\n \t\t    /* Emit convert statement to convert to type of use.  */\n \t\t    tmp = create_tmp_var (TREE_TYPE (lhs), \"new\");\n-\t\t    add_referenced_var (tmp);\n \t\t    rhs = gimple_assign_rhs1 (acc_info->stmt);\n \t\t    rhs = fold_convert (TREE_TYPE (tmp),\n \t\t\t\t\tTREE_OPERAND (rhs, 0));"}, {"sha": "1696fec253906ea46212b39e1bf001727ef33b0f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -3732,11 +3732,6 @@ expand_omp_for_generic (struct omp_region *region,\n   iend0 = create_tmp_var (fd->iter_type, \".iend0\");\n   TREE_ADDRESSABLE (istart0) = 1;\n   TREE_ADDRESSABLE (iend0) = 1;\n-  if (gimple_referenced_vars (cfun))\n-    {\n-      add_referenced_var (istart0);\n-      add_referenced_var (iend0);\n-    }\n \n   /* See if we need to bias by LLONG_MIN.  */\n   if (fd->iter_type == long_long_unsigned_type_node\n@@ -4458,7 +4453,6 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n   trip_var = create_tmp_reg (itype, \".trip\");\n   if (gimple_in_ssa_p (cfun))\n     {\n-      add_referenced_var (trip_var);\n       trip_init = make_ssa_name (trip_var, NULL);\n       trip_main = make_ssa_name (trip_var, NULL);\n       trip_back = make_ssa_name (trip_var, NULL);\n@@ -5305,11 +5299,7 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n       gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n       loadedi = create_tmp_var (itype, NULL);\n       if (gimple_in_ssa_p (cfun))\n-\t{\n-\t  add_referenced_var (iaddr);\n-\t  add_referenced_var (loadedi);\n-\t  loadedi = make_ssa_name (loadedi, NULL);\n-\t}\n+\tloadedi = make_ssa_name (loadedi, NULL);\n     }\n   else\n     {\n@@ -5386,8 +5376,6 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   else\n     {\n       old_vali = create_tmp_var (TREE_TYPE (loadedi), NULL);\n-      if (gimple_in_ssa_p (cfun))\n-\tadd_referenced_var (old_vali);\n       stmt = gimple_build_assign (old_vali, loadedi);\n       gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n "}, {"sha": "877a768515afa97e41aea77613772b09d0aa89f9", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1285,7 +1285,6 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_init_datastructures);\n       NEXT_PASS (pass_expand_omp);\n \n-      NEXT_PASS (pass_referenced_vars);\n       NEXT_PASS (pass_build_ssa);\n       NEXT_PASS (pass_lower_vector);\n       NEXT_PASS (pass_early_warn_uninitialized);\n@@ -2603,8 +2602,6 @@ dump_properties (FILE *dump, unsigned int props)\n     fprintf (dump, \"PROP_gimple_leh\\n\");\n   if (props & PROP_cfg)\n     fprintf (dump, \"PROP_cfg\\n\");\n-  if (props & PROP_referenced_vars)\n-    fprintf (dump, \"PROP_referenced_vars\\n\");\n   if (props & PROP_ssa)\n     fprintf (dump, \"PROP_ssa\\n\");\n   if (props & PROP_no_crit_edges)"}, {"sha": "c062bd978151ea848d0b4040b4565bafafd5e571", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1,3 +1,15 @@\n+2012-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/pta-callused-1.c: Adjust.\n+\t* gcc.dg/torture/pta-ptrarith-3.c: Likewise.\n+\t* gcc.dg/torture/ssa-pta-fn-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-19.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-ptrarith-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-ptrarith-2.c: Likewise.\n+\n 2012-08-01  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/54033"}, {"sha": "5ca71c2a02e77ce7cf3460159b6b73913cbb3967", "filename": "gcc/testsuite/gcc.dg/torture/pta-callused-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-callused-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-callused-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-callused-1.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -21,5 +21,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"p.._., points-to vars: { i j }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"p.._. = { i j }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "938fb296b405b43754f6f24cc9451b727267ecc5", "filename": "gcc/testsuite/gcc.dg/torture/pta-ptrarith-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -33,5 +33,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"q_., points-to vars: { i j k }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"q_. = { i j k }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "a90b1c62d3b7d87a6ce244c00db037e18362de45", "filename": "gcc/testsuite/gcc.dg/torture/ssa-pta-fn-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -56,7 +56,7 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"q_const_., points-to non-local, points-to vars: { i }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"q_pure_., points-to non-local, points-to escaped, points-to vars: { i }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"q_normal_., points-to non-local, points-to escaped, points-to vars: { }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"q_const_. = { NONLOCAL i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"q_pure_. = { ESCAPED NONLOCAL i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"q_normal_. = { ESCAPED NONLOCAL }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "ce36d2c225dd0ba2fec364bf08d7f34a09b50224", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-19.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias\" } */\n \n const static int a;\n \n@@ -26,5 +26,4 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump \"q_. = { a b }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"q_., points-to vars: { D..... b }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "a4244171305c14b60d619a66543b8e1feb4eb0d9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -33,5 +33,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to NULL, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED = { NULL ESCAPED NONLOCAL x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "8580382fca6972e8c2c169ad7605825373c2bc22", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -34,5 +34,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to NULL, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED = { NULL ESCAPED NONLOCAL x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "5a121a0d9a718e96137550861520c464cab248ee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -38,5 +38,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to NULL, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED = { NULL ESCAPED NONLOCAL x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "d4121122bbc20c0cf4601feed401905c22b55674", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-ptrarith-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -22,5 +22,5 @@ foo(int i, int j, int k, int off)\n   return *q;\n }\n \n-/* { dg-final { scan-tree-dump \"q_., points-to vars: { k }\" \"ealias\" } } */\n+/* { dg-final { scan-tree-dump \"q_. = { k }\" \"ealias\" } } */\n /* { dg-final { cleanup-tree-dump \"ealias\" } } */"}, {"sha": "430f216da9d01ea8ea2bc73d59dd28d9076ad211", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-ptrarith-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -22,5 +22,5 @@ foo(int i, int j, int k, int off)\n   return *q;\n }\n \n-/* { dg-final { scan-tree-dump \"q_., points-to vars: { i }\" \"ealias\" } } */\n+/* { dg-final { scan-tree-dump \"q_. = { i }\" \"ealias\" } } */\n /* { dg-final { cleanup-tree-dump \"ealias\" } } */"}, {"sha": "8afa24d0287454ccf4d65ca2e8a92fbf2f50731f", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1018,7 +1018,6 @@ tm_log_add (basic_block entry_block, tree addr, gimple stmt)\n \t  && !TREE_ADDRESSABLE (type))\n \t{\n \t  lp->save_var = create_tmp_reg (TREE_TYPE (lp->addr), \"tm_save\");\n-\t  add_referenced_var (lp->save_var);\n \t  lp->stmts = NULL;\n \t  lp->entry_block = entry_block;\n \t  /* Save addresses separately in dominator order so we don't\n@@ -4455,7 +4454,6 @@ ipa_tm_insert_gettmclone_call (struct cgraph_node *node,\n   gettm_fn = builtin_decl_explicit (safe ? BUILT_IN_TM_GETTMCLONE_SAFE\n \t\t\t\t    : BUILT_IN_TM_GETTMCLONE_IRR);\n   ret = create_tmp_var (ptr_type_node, NULL);\n-  add_referenced_var (ret);\n \n   if (!safe)\n     transaction_subcode_ior (region, GTMA_MAY_ENTER_IRREVOCABLE);\n@@ -4477,7 +4475,6 @@ ipa_tm_insert_gettmclone_call (struct cgraph_node *node,\n   /* Cast return value from tm_gettmclone* into appropriate function\n      pointer.  */\n   callfn = create_tmp_var (TREE_TYPE (old_fn), NULL);\n-  add_referenced_var (callfn);\n   g2 = gimple_build_assign (callfn,\n \t\t\t    fold_build1 (NOP_EXPR, TREE_TYPE (callfn), ret));\n   callfn = make_ssa_name (callfn, g2);"}, {"sha": "981b224cf381ea041411c6ca7f9f1965c5497c85", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -5949,9 +5949,6 @@ replace_ssa_name (tree name, struct pointer_map_t *vars_map,\n       replace_by_duplicate_decl (&decl, vars_map, to_context);\n \n       push_cfun (DECL_STRUCT_FUNCTION (to_context));\n-      if (gimple_in_ssa_p (cfun))\n-\tadd_referenced_var (decl);\n-\n       new_name = make_ssa_name (decl, SSA_NAME_DEF_STMT (name));\n       if (SSA_NAME_IS_DEFAULT_DEF (name))\n \tset_default_def (decl, new_name);\n@@ -6022,12 +6019,7 @@ move_stmt_op (tree *tp, int *walk_subtrees, void *data)\n \t  if ((TREE_CODE (t) == VAR_DECL\n \t       && !is_global_var (t))\n \t      || TREE_CODE (t) == CONST_DECL)\n-\t    {\n-\t      struct function *to_fn = DECL_STRUCT_FUNCTION (p->to_context);\n-\t      replace_by_duplicate_decl (tp, p->vars_map, p->to_context);\n-\t      if (gimple_referenced_vars (to_fn))\n-\t\tadd_referenced_var_1 (*tp, to_fn);\n-\t    }\n+\t    replace_by_duplicate_decl (tp, p->vars_map, p->to_context);\n \t}\n       *walk_subtrees = 0;\n     }"}, {"sha": "afc9d0a1c981e86d4fba810a005a50a57a318dc2", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -422,7 +422,6 @@ create_one_component_var (tree type, tree orig, const char *prefix,\n \t\t\t  const char *suffix, enum tree_code code)\n {\n   tree r = create_tmp_var (type, prefix);\n-  add_referenced_var (r);\n \n   DECL_SOURCE_LOCATION (r) = DECL_SOURCE_LOCATION (orig);\n   DECL_ARTIFICIAL (r) = 1;"}, {"sha": "39555ce4bac701016d545dcf72d9d9d24eacd5c4", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 226, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -63,56 +63,6 @@ static void collect_dfa_stats (struct dfa_stats_d *);\n /*---------------------------------------------------------------------------\n \t\t\tDataflow analysis (DFA) routines\n ---------------------------------------------------------------------------*/\n-/* Find all the variables referenced in the function.  This function\n-   builds the global arrays REFERENCED_VARS and CALL_CLOBBERED_VARS.\n-\n-   Note that this function does not look for statement operands, it simply\n-   determines what variables are referenced in the program and detects\n-   various attributes for each variable used by alias analysis and the\n-   optimizer.  */\n-\n-static unsigned int\n-find_referenced_vars (void)\n-{\n-  basic_block bb;\n-  gimple_stmt_iterator si;\n-\n-  FOR_EACH_BB (bb)\n-    {\n-      for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n-\t{\n-\t  gimple stmt = gsi_stmt (si);\n-\t  if (is_gimple_debug (stmt))\n-\t    continue;\n-\t  find_referenced_vars_in (gsi_stmt (si));\n-\t}\n-\n-      for (si = gsi_start_phis (bb); !gsi_end_p (si); gsi_next (&si))\n-\tfind_referenced_vars_in (gsi_stmt (si));\n-    }\n-\n-  return 0;\n-}\n-\n-struct gimple_opt_pass pass_referenced_vars =\n-{\n- {\n-  GIMPLE_PASS,\n-  \"*referenced_vars\",\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  find_referenced_vars,\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_FIND_REFERENCED_VARS,\t\t/* tv_id */\n-  PROP_gimple_leh | PROP_cfg,\t\t/* properties_required */\n-  PROP_referenced_vars,\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,                     \t\t/* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n- }\n-};\n-\n \n /* Renumber all of the gimple stmt uids.  */\n \n@@ -169,49 +119,14 @@ renumber_gimple_stmt_uids_in_blocks (basic_block *blocks, int n_blocks)\n tree\n make_rename_temp (tree type, const char *prefix)\n {\n-  tree t = create_tmp_reg (type, prefix);\n-\n-  if (gimple_referenced_vars (cfun))\n-    add_referenced_var (t);\n-\n-  return t;\n+  return create_tmp_reg (type, prefix);\n }\n \n \n \n /*---------------------------------------------------------------------------\n \t\t\t      Debugging functions\n ---------------------------------------------------------------------------*/\n-/* Dump the list of all the referenced variables in the current function to\n-   FILE.  */\n-\n-void\n-dump_referenced_vars (FILE *file)\n-{\n-  tree var;\n-  referenced_var_iterator rvi;\n-\n-  fprintf (file, \"\\nReferenced variables in %s: %u\\n\\n\",\n-\t   get_name (current_function_decl), (unsigned) num_referenced_vars);\n-\n-  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n-    {\n-      fprintf (file, \"Variable: \");\n-      dump_variable (file, var);\n-    }\n-\n-  fprintf (file, \"\\n\");\n-}\n-\n-\n-/* Dump the list of all the referenced variables to stderr.  */\n-\n-DEBUG_FUNCTION void\n-debug_referenced_vars (void)\n-{\n-  dump_referenced_vars (stderr);\n-}\n-\n \n /* Dump variable VAR and its may-aliases to FILE.  */\n \n@@ -297,11 +212,6 @@ dump_dfa_stats (FILE *file)\n   fprintf (file, fmt_str, \"\", \"  instances  \", \"used \");\n   fprintf (file, \"---------------------------------------------------------\\n\");\n \n-  size = num_referenced_vars * sizeof (tree);\n-  total += size;\n-  fprintf (file, fmt_str_1, \"Referenced variables\", (unsigned long)num_referenced_vars,\n-\t   SCALE (size), LABEL (size));\n-\n   size = dfa_stats.num_uses * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"USE operands\", dfa_stats.num_uses,\n@@ -397,97 +307,6 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n /*---------------------------------------------------------------------------\n \t\t\t     Miscellaneous helpers\n ---------------------------------------------------------------------------*/\n-/* Callback for walk_tree.  Used to collect variables referenced in\n-   the function.  */\n-\n-static tree\n-find_vars_r (tree *tp, int *walk_subtrees, void *data)\n-{\n-  struct function *fn = (struct function *) data;\n-\n-  /* If we are reading the lto info back in, we need to rescan the\n-     referenced vars.  */\n-  if (TREE_CODE (*tp) == SSA_NAME)\n-    add_referenced_var_1 (SSA_NAME_VAR (*tp), fn);\n-\n-  /* If T is a regular variable that the optimizers are interested\n-     in, add it to the list of variables.  */\n-  else if ((TREE_CODE (*tp) == VAR_DECL\n-\t    && !is_global_var (*tp))\n-\t   || TREE_CODE (*tp) == PARM_DECL\n-\t   || TREE_CODE (*tp) == RESULT_DECL)\n-    add_referenced_var_1 (*tp, fn);\n-\n-  /* Type, _DECL and constant nodes have no interesting children.\n-     Ignore them.  */\n-  else if (IS_TYPE_OR_DECL_P (*tp) || CONSTANT_CLASS_P (*tp))\n-    *walk_subtrees = 0;\n-\n-  return NULL_TREE;\n-}\n-\n-/* Find referenced variables in STMT.  */\n-\n-void\n-find_referenced_vars_in (gimple stmt)\n-{\n-  size_t i;\n-\n-  if (gimple_code (stmt) != GIMPLE_PHI)\n-    {\n-      for (i = 0; i < gimple_num_ops (stmt); i++)\n-\twalk_tree (gimple_op_ptr (stmt, i), find_vars_r, cfun, NULL);\n-    }\n-  else\n-    {\n-      walk_tree (gimple_phi_result_ptr (stmt), find_vars_r, cfun, NULL);\n-\n-      for (i = 0; i < gimple_phi_num_args (stmt); i++)\n-\t{\n-\t  tree arg = gimple_phi_arg_def (stmt, i);\n-\t  walk_tree (&arg, find_vars_r, cfun, NULL);\n-\t}\n-    }\n-}\n-\n-\n-/* Lookup UID in the referenced_vars hashtable and return the associated\n-   variable.  */\n-\n-tree\n-referenced_var_lookup (struct function *fn, unsigned int uid)\n-{\n-  tree h;\n-  struct tree_decl_minimal in;\n-  in.uid = uid;\n-  h = (tree) htab_find_with_hash (gimple_referenced_vars (fn), &in, uid);\n-  return h;\n-}\n-\n-/* Check if TO is in the referenced_vars hash table and insert it if not.\n-   Return true if it required insertion.  */\n-\n-static bool\n-referenced_var_check_and_insert (tree to, struct function *fn)\n-{\n-  tree *loc;\n-  struct tree_decl_minimal in;\n-  unsigned int uid = DECL_UID (to);\n-\n-  in.uid = uid;\n-  loc = (tree *) htab_find_slot_with_hash (gimple_referenced_vars (fn),\n-\t\t\t\t\t   &in, uid, INSERT);\n-  if (*loc)\n-    {\n-      /* DECL_UID has already been entered in the table.  Verify that it is\n-\t the same entry as TO.  See PR 27793.  */\n-      gcc_assert (*loc == to);\n-      return false;\n-    }\n-\n-  *loc = to;\n-  return true;\n-}\n \n /* Lookup VAR UID in the default_defs hashtable and return the associated\n    variable.  */\n@@ -536,50 +355,6 @@ set_default_def (tree var, tree def)\n    SSA_NAME_IS_DEFAULT_DEF (def) = true;\n }\n \n-/* Add VAR to the list of referenced variables if it isn't already there.  */\n-\n-bool\n-add_referenced_var_1 (tree var, struct function *fn)\n-{\n-  gcc_checking_assert (TREE_CODE (var) == VAR_DECL\n-\t\t       || TREE_CODE (var) == PARM_DECL\n-\t\t       || TREE_CODE (var) == RESULT_DECL);\n-\n-  gcc_checking_assert ((TREE_CODE (var) == VAR_DECL\n-\t\t\t&& VAR_DECL_IS_VIRTUAL_OPERAND (var))\n-\t\t       || !is_global_var (var));\n-\n-  /* Insert VAR into the referenced_vars hash table if it isn't present\n-     and allocate its var-annotation.  */\n-  if (referenced_var_check_and_insert (var, fn))\n-    return true;\n-\n-  return false;\n-}\n-\n-/* Remove VAR from the list of referenced variables and clear its\n-   var-annotation.  */\n-\n-void\n-remove_referenced_var (tree var)\n-{\n-  struct tree_decl_minimal in;\n-  void **loc;\n-  unsigned int uid = DECL_UID (var);\n-\n-  gcc_checking_assert (TREE_CODE (var) == VAR_DECL\n-\t\t       || TREE_CODE (var) == PARM_DECL\n-\t\t       || TREE_CODE (var) == RESULT_DECL);\n-\n-  gcc_checking_assert (!is_global_var (var));\n-\n-  in.uid = uid;\n-  loc = htab_find_slot_with_hash (gimple_referenced_vars (cfun), &in, uid,\n-\t\t\t\t  NO_INSERT);\n-  if (loc)\n-    htab_clear_slot (gimple_referenced_vars (cfun), loc);\n-}\n-\n \n /* If EXP is a handled component reference for a structure, return the\n    base variable.  The access range is delimited by bit positions *POFFSET and"}, {"sha": "15f31107475da9bd2d7b87ce768178cd303daaea", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -35,15 +35,6 @@ gimple_in_ssa_p (const struct function *fun)\n   return fun && fun->gimple_df && fun->gimple_df->in_ssa_p;\n }\n \n-/* Array of all variables referenced in the function.  */\n-static inline htab_t\n-gimple_referenced_vars (const struct function *fun)\n-{\n-  if (!fun || !fun->gimple_df)\n-    return NULL;\n-  return fun->gimple_df->referenced_vars;\n-}\n-\n /* Artificial variable used for the virtual operand FUD chain.  */\n static inline tree\n gimple_vop (const struct function *fun)\n@@ -98,34 +89,6 @@ next_htab_element (htab_iterator *hti)\n   return NULL;\n }\n \n-/* Initialize ITER to point to the first referenced variable in the\n-   referenced_vars hashtable, and return that variable.  */\n-\n-static inline tree\n-first_referenced_var (struct function *fn, referenced_var_iterator *iter)\n-{\n-  return (tree) first_htab_element (&iter->hti,\n-\t\t\t\t    gimple_referenced_vars (fn));\n-}\n-\n-/* Return true if we have hit the end of the referenced variables ITER is\n-   iterating through.  */\n-\n-static inline bool\n-end_referenced_vars_p (const referenced_var_iterator *iter)\n-{\n-  return end_htab_p (&iter->hti);\n-}\n-\n-/* Make ITER point to the next referenced_var in the referenced_var hashtable,\n-   and return that variable.  */\n-\n-static inline tree\n-next_referenced_var (referenced_var_iterator *iter)\n-{\n-  return (tree) next_htab_element (&iter->hti);\n-}\n-\n /* Get the number of the next statement uid to be allocated.  */\n static inline unsigned int\n gimple_stmt_max_uid (struct function *fn)"}, {"sha": "888f1f3195292a1a4a84afdef914980bb9ee7d54", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -45,9 +45,6 @@ struct GTY(()) tm_restart_node {\n    gimple_ accessor defined in tree-flow-inline.h, all publicly modifiable\n    fields should have gimple_set accessor.  */\n struct GTY(()) gimple_df {\n-  /* Array of all variables referenced in the function.  */\n-  htab_t GTY((param_is (union tree_node))) referenced_vars;\n-\n   /* A vector of all the noreturn calls passed to modify_stmt.\n      cleanup_control_flow uses it to detect cases where a mid-block\n      indirect call has been turned into a noreturn call.  When this\n@@ -292,24 +289,6 @@ extern int int_tree_map_eq (const void *, const void *);\n extern unsigned int uid_decl_map_hash (const void *);\n extern int uid_decl_map_eq (const void *, const void *);\n \n-typedef struct\n-{\n-  htab_iterator hti;\n-} referenced_var_iterator;\n-\n-/* This macro loops over all the referenced vars, one at a time, putting the\n-   current var in VAR.  Note:  You are not allowed to add referenced variables\n-   to the hashtable while using this macro.  Doing so may cause it to behave\n-   erratically.  */\n-\n-#define FOR_EACH_REFERENCED_VAR(FN, VAR, ITER)\t\t\\\n-  for ((VAR) = first_referenced_var ((FN), &(ITER));\t\\\n-       !end_referenced_vars_p (&(ITER));\t\t\\\n-       (VAR) = next_referenced_var (&(ITER)))\n-\n-extern tree referenced_var_lookup (struct function *, unsigned int);\n-#define num_referenced_vars htab_elements (gimple_referenced_vars (cfun))\n-\n #define num_ssa_names (VEC_length (tree, cfun->gimple_df->ssa_names))\n #define ssa_name(i) (VEC_index (tree, cfun->gimple_df->ssa_names, (i)))\n \n@@ -463,19 +442,13 @@ extern void renumber_gimple_stmt_uids (void);\n extern void renumber_gimple_stmt_uids_in_blocks (basic_block *, int);\n extern void dump_dfa_stats (FILE *);\n extern void debug_dfa_stats (void);\n-extern void debug_referenced_vars (void);\n-extern void dump_referenced_vars (FILE *);\n extern void dump_variable (FILE *, tree);\n extern void debug_variable (tree);\n-extern bool add_referenced_var_1 (tree, struct function *);\n-#define add_referenced_var(v) add_referenced_var_1 ((v), cfun)\n-extern void remove_referenced_var (tree);\n extern tree make_rename_temp (tree, const char *);\n extern void set_default_def (tree, tree);\n extern tree gimple_default_def (struct function *, tree);\n extern bool stmt_references_abnormal_ssa_name (gimple);\n extern tree get_addr_base_and_unit_offset (tree, HOST_WIDE_INT *);\n-extern void find_referenced_vars_in (gimple);\n extern void dump_enumerated_decls (FILE *, int);\n \n /* In tree-phinodes.c  */"}, {"sha": "7c695185096f6dd51c0da2ccb4aa60cb8d7db70e", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -227,7 +227,6 @@ ifc_temp_var (tree type, tree expr, gimple_stmt_iterator *gsi)\n \n   /* Create new temporary variable.  */\n   var = create_tmp_var (type, name);\n-  add_referenced_var (var);\n \n   /* Build new statement to assign EXPR to new variable.  */\n   stmt = gimple_build_assign (var, expr);"}, {"sha": "8ca912ef1b12bd8def6bf1d20d1506b9bc69538a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -338,17 +338,6 @@ remap_decl (tree decl, copy_body_data *id)\n \t    walk_tree (&DECL_QUALIFIER (t), copy_tree_body_r, id, NULL);\n \t}\n \n-      if ((TREE_CODE (t) == VAR_DECL\n-\t   || TREE_CODE (t) == RESULT_DECL\n-\t   || TREE_CODE (t) == PARM_DECL)\n-\t  && id->src_fn && DECL_STRUCT_FUNCTION (id->src_fn)\n-\t  && gimple_referenced_vars (DECL_STRUCT_FUNCTION (id->src_fn))\n-\t  /* We don't want to mark as referenced VAR_DECLs that were\n-\t     not marked as such in the src function.  */\n-\t  && (TREE_CODE (decl) != VAR_DECL\n-\t      || referenced_var_lookup (DECL_STRUCT_FUNCTION (id->src_fn),\n-\t\t\t\t\tDECL_UID (decl))))\n-\tadd_referenced_var (t);\n       return t;\n     }\n \n@@ -844,14 +833,6 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n       if (TREE_CODE (*tp) != OMP_CLAUSE)\n \tTREE_TYPE (*tp) = remap_type (TREE_TYPE (*tp), id);\n \n-      /* Global variables we haven't seen yet need to go into referenced\n-\t vars.  If not referenced from types only.  */\n-      if (gimple_referenced_vars (cfun)\n-\t  && TREE_CODE (*tp) == VAR_DECL && !is_global_var (*tp)\n-\t  && id->remapping_type_depth == 0\n-\t  && !processing_debug_stmt)\n-\tadd_referenced_var (*tp);\n-\n       if (TREE_CODE (*tp) == TARGET_EXPR && TREE_OPERAND (*tp, 3))\n \t{\n \t  /* The copied TARGET_EXPR has never been expanded, even if the\n@@ -1087,14 +1068,6 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t tweak some special cases.  */\n       copy_tree_r (tp, walk_subtrees, NULL);\n \n-      /* Global variables we haven't seen yet needs to go into referenced\n-\t vars.  If not referenced from types or debug stmts only.  */\n-      if (gimple_referenced_vars (cfun)\n-\t  && TREE_CODE (*tp) == VAR_DECL && !is_global_var (*tp)\n-\t  && id->remapping_type_depth == 0\n-\t  && !processing_debug_stmt)\n-\tadd_referenced_var (*tp);\n-\n       /* If EXPR has block defined, map it to newly constructed block.\n          When inlining we want EXPRs without block appear in the block\n \t of function call if we are not remapping a type.  */\n@@ -1764,7 +1737,6 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t      ssa_op_iter i;\n \t      tree def;\n \n-\t      find_referenced_vars_in (gsi_stmt (copy_gsi));\n \t      FOR_EACH_SSA_TREE_OPERAND (def, stmt, i, SSA_OP_DEF)\n \t\tif (TREE_CODE (def) == SSA_NAME)\n \t\t  SSA_NAME_DEF_STMT (def) = stmt;\n@@ -2558,28 +2530,13 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n      function.  */\n   var = copy_decl_to_var (p, id);\n \n-  /* We're actually using the newly-created var.  */\n-  if (gimple_in_ssa_p (cfun) && TREE_CODE (var) == VAR_DECL)\n-    add_referenced_var (var);\n-\n   /* Declare this new variable.  */\n   DECL_CHAIN (var) = *vars;\n   *vars = var;\n \n   /* Make gimplifier happy about this variable.  */\n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n \n-  /* We are eventually using the value - make sure all variables\n-     referenced therein are properly recorded.  */\n-  if (value\n-      && gimple_referenced_vars (cfun)\n-      && TREE_CODE (value) == ADDR_EXPR)\n-    {\n-      tree base = get_base_address (TREE_OPERAND (value, 0));\n-      if (base && TREE_CODE (base) == VAR_DECL && !is_global_var (base))\n-\tadd_referenced_var (base);\n-    }\n-\n   /* If the parameter is never assigned to, has no SSA_NAMEs created,\n      we would not need to create a new variable here at all, if it\n      weren't for debug info.  Still, we can just use the argument\n@@ -2885,9 +2842,6 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n   gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (callee_type)) == INTEGER_CST);\n \n   var = copy_result_decl_to_var (result, id);\n-  if (gimple_referenced_vars (cfun))\n-    add_referenced_var (var);\n-\n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n \n   /* Do not have the rest of GCC warn about this variable as it should\n@@ -2941,8 +2895,6 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n       && !is_gimple_val (var))\n     {\n       tree temp = create_tmp_var (TREE_TYPE (result), \"retvalptr\");\n-      if (gimple_referenced_vars (cfun))\n-\tadd_referenced_var (temp);\n       insert_decl_map (id, result, temp);\n       /* When RESULT_DECL is in SSA form, we need to remap and initialize\n \t it's default_def SSA_NAME.  */\n@@ -4773,14 +4725,6 @@ copy_decl_for_dup_finish (copy_body_data *id, tree decl, tree copy)\n        new function.  */\n     DECL_CONTEXT (copy) = id->dst_fn;\n \n-  if (TREE_CODE (decl) == VAR_DECL\n-      /* C++ clones functions during parsing, before\n-\t referenced_vars.  */\n-      && gimple_referenced_vars (DECL_STRUCT_FUNCTION (id->src_fn))\n-      && referenced_var_lookup (DECL_STRUCT_FUNCTION (id->src_fn),\n-\t\t\t\tDECL_UID (decl)))\n-    add_referenced_var (copy);\n-\n   return copy;\n }\n \n@@ -4894,7 +4838,6 @@ copy_arguments_for_versioning (tree orig_parm, copy_body_data * id,\n \t   as temporary variable later in function, the uses will be\n \t   replaced by local variable.  */\n \ttree var = copy_decl_to_var (arg, id);\n-\tadd_referenced_var (var);\n \tinsert_decl_map (id, arg, var);\n         /* Declare this new variable.  */\n         DECL_CHAIN (var) = *vars;\n@@ -5175,12 +5118,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t    if (TREE_CODE (op) == VIEW_CONVERT_EXPR)\n \t      op = TREE_OPERAND (op, 0);\n \n-\t    if (TREE_CODE (op) == ADDR_EXPR)\n-\t      {\n-\t\top = get_base_address (TREE_OPERAND (op, 0));\n-\t\tif (op && TREE_CODE (op) == VAR_DECL && !is_global_var (op))\n-\t\t  add_referenced_var (op);\n-\t      }\n \t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);\n \t    init = setup_one_parameter (&id, replace_info->old_tree,\n \t    \t\t\t        replace_info->new_tree, id.src_fn,"}, {"sha": "c18f080d13889c1dcef8798726c703a54e604aaa", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1551,11 +1551,7 @@ dump_decl_set (FILE *file, bitmap set)\n \n       EXECUTE_IF_SET_IN_BITMAP (set, 0, i, bi)\n \t{\n-\t  tree var = referenced_var_lookup (cfun, i);\n-\t  if (var)\n-\t    print_generic_expr (file, var, 0);\n-\t  else\n-\t    fprintf (file, \"D.%u\", i);\n+\t  fprintf (file, \"D.%u\", i);\n \t  fprintf (file, \" \");\n \t}\n \n@@ -2467,7 +2463,7 @@ struct gimple_opt_pass pass_build_ssa =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_SSA_OTHER,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_referenced_vars,\t/* properties_required */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n   PROP_ssa,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "d8dbc212e6bbfb331174d473a7ecf16bae3224da", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -482,7 +482,6 @@ take_address_of (tree obj, tree type, edge entry, htab_t decl_address,\n       bvar = create_tmp_var (TREE_TYPE (addr),\n \t\t\t     get_name (TREE_OPERAND\n \t\t\t\t         (TREE_OPERAND (*var_p, 0), 0)));\n-      add_referenced_var (bvar);\n       stmt = gimple_build_assign (bvar, addr);\n       name = make_ssa_name (bvar, stmt);\n       gimple_assign_set_lhs (stmt, name);\n@@ -540,7 +539,6 @@ initialize_reductions (void **slot, void *data)\n   /* Create a new variable to initialize the reduction.  */\n   type = TREE_TYPE (PHI_RESULT (reduc->reduc_phi));\n   bvar = create_tmp_var (type, \"reduction\");\n-  add_referenced_var (bvar);\n \n   c = build_omp_clause (gimple_location (reduc->reduc_stmt),\n \t\t\tOMP_CLAUSE_REDUCTION);\n@@ -805,7 +803,6 @@ separate_decls_in_region_name (tree name,\n     {\n       var_copy = create_tmp_var (TREE_TYPE (var), get_name (var));\n       DECL_GIMPLE_REG_P (var_copy) = DECL_GIMPLE_REG_P (var);\n-      add_referenced_var (var_copy);\n       nielt = XNEW (struct int_tree_map);\n       nielt->uid = uid;\n       nielt->to = var_copy;\n@@ -1066,7 +1063,6 @@ create_call_for_reduction_1 (void **slot, void *data)\n   new_bb = e->dest;\n \n   tmp_load = create_tmp_var (TREE_TYPE (TREE_TYPE (addr)), NULL);\n-  add_referenced_var (tmp_load);\n   tmp_load = make_ssa_name (tmp_load, NULL);\n   load = gimple_build_omp_atomic_load (tmp_load, addr);\n   SSA_NAME_DEF_STMT (tmp_load) = load;\n@@ -1352,9 +1348,7 @@ separate_decls_in_region (edge entry, edge exit, htab_t reduction_list,\n \n       /* Create the loads and stores.  */\n       *arg_struct = create_tmp_var (type, \".paral_data_store\");\n-      add_referenced_var (*arg_struct);\n       nvar = create_tmp_var (build_pointer_type (type), \".paral_data_load\");\n-      add_referenced_var (nvar);\n       *new_arg_struct = make_ssa_name (nvar, NULL);\n \n       ld_st_data->store = *arg_struct;"}, {"sha": "80ff51302eda2fc3d8b62d5eb00ff0d07dc18d11", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -142,7 +142,6 @@ struct simple_ipa_opt_pass\n #define PROP_gimple_lcf\t\t(1 << 1)\t/* lowered control flow */\n #define PROP_gimple_leh\t\t(1 << 2)\t/* lowered eh */\n #define PROP_cfg\t\t(1 << 3)\n-#define PROP_referenced_vars\t(1 << 4)\n #define PROP_ssa\t\t(1 << 5)\n #define PROP_no_crit_edges      (1 << 6)\n #define PROP_rtl\t\t(1 << 7)\n@@ -267,7 +266,6 @@ extern struct gimple_opt_pass pass_lower_eh_dispatch;\n extern struct gimple_opt_pass pass_lower_resx;\n extern struct gimple_opt_pass pass_build_cfg;\n extern struct gimple_opt_pass pass_early_tree_profile;\n-extern struct gimple_opt_pass pass_referenced_vars;\n extern struct gimple_opt_pass pass_cleanup_eh;\n extern struct gimple_opt_pass pass_sra;\n extern struct gimple_opt_pass pass_sra_early;"}, {"sha": "eb1538e52080ba4edb6a67a886baaf40a792960a", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1450,8 +1450,6 @@ predcom_tmp_var (tree ref, unsigned i, bitmap tmp_vars)\n   /* We never access the components of the temporary variable in predictive\n      commoning.  */\n   tree var = create_tmp_reg (type, get_lsm_tmp_name (ref, i));\n-\n-  add_referenced_var (var);\n   bitmap_set_bit (tmp_vars, DECL_UID (var));\n   return var;\n }\n@@ -2191,12 +2189,10 @@ reassociate_to_the_same_stmt (tree name1, tree name2)\n   /* Insert the new statement combining NAME1 and NAME2 before S1, and\n      combine it with the rhs of S1.  */\n   var = create_tmp_reg (type, \"predreastmp\");\n-  add_referenced_var (var);\n   new_name = make_ssa_name (var, NULL);\n   new_stmt = gimple_build_assign_with_ops (code, new_name, name1, name2);\n \n   var = create_tmp_reg (type, \"predreastmp\");\n-  add_referenced_var (var);\n   tmp_name = make_ssa_name (var, NULL);\n \n   /* Rhs of S1 may now be either a binary expression with operation"}, {"sha": "676461cd0870db90e468cc2fdb814130a99ee610", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -220,7 +220,6 @@ gimple_gen_edge_profiler (int edgeno, edge e)\n   one = build_int_cst (gcov_type_node, 1);\n   stmt1 = gimple_build_assign (gcov_type_tmp_var, ref);\n   gimple_assign_set_lhs (stmt1, make_ssa_name (gcov_type_tmp_var, stmt1));\n-  find_referenced_vars_in (stmt1);\n   stmt2 = gimple_build_assign_with_ops (PLUS_EXPR, gcov_type_tmp_var,\n \t\t\t\t\tgimple_assign_lhs (stmt1), one);\n   gimple_assign_set_lhs (stmt2, make_ssa_name (gcov_type_tmp_var, stmt2));\n@@ -267,7 +266,6 @@ gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_interval_profiler_fn, 4,\n \t\t\t    ref_ptr, val, start, steps);\n-  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -288,7 +286,6 @@ gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_pow2_profiler_fn, 2, ref_ptr, val);\n-  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -309,7 +306,6 @@ gimple_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned bas\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_one_value_profiler_fn, 2, ref_ptr, val);\n-  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -341,10 +337,8 @@ gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   tmp1 = create_tmp_reg (ptr_void, \"PROF\");\n   stmt1 = gimple_build_assign (ic_gcov_type_ptr_var, ref_ptr);\n-  find_referenced_vars_in (stmt1);\n   stmt2 = gimple_build_assign (tmp1, unshare_expr (value->hvalue.value));\n   gimple_assign_set_lhs (stmt2, make_ssa_name (tmp1, stmt2));\n-  find_referenced_vars_in (stmt2);\n   stmt3 = gimple_build_assign (ic_void_ptr_var, gimple_assign_lhs (stmt2));\n \n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n@@ -439,7 +433,6 @@ gimple_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_average_profiler_fn, 2, ref_ptr, val);\n-  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -460,7 +453,6 @@ gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_ior_profiler_fn, 2, ref_ptr, val);\n-  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n "}, {"sha": "4294173acad3f2cc82e397733550b152c2fa63c1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1449,7 +1449,6 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n \n       gcc_checking_assert (gsi);\n       tmp = create_tmp_reg (build_pointer_type (TREE_TYPE (prev_base)), NULL);\n-      add_referenced_var (tmp);\n       tmp = make_ssa_name (tmp, NULL);\n       addr = build_fold_addr_expr (unshare_expr (prev_base));\n       STRIP_USELESS_TYPE_CONVERSION (addr);\n@@ -1866,8 +1865,6 @@ create_access_replacement (struct access *access)\n   tree repl;\n \n   repl = create_tmp_var (access->type, \"SR\");\n-  add_referenced_var (repl);\n-\n   if (TREE_CODE (access->type) == COMPLEX_TYPE\n       || TREE_CODE (access->type) == VECTOR_TYPE)\n     {\n@@ -4198,7 +4195,6 @@ get_replaced_param_substitute (struct ipa_parm_adjustment *adj)\n       DECL_NAME (repl) = get_identifier (pretty_name);\n       obstack_free (&name_obstack, pretty_name);\n \n-      add_referenced_var (repl);\n       adj->new_ssa_base = repl;\n     }\n   else\n@@ -4582,7 +4578,6 @@ sra_ipa_reset_debug_stmts (ipa_parm_adjustment_vec adjustments)\n \t  SET_DECL_RTL (copy, 0);\n \t  TREE_USED (copy) = 1;\n \t  DECL_CONTEXT (copy) = current_function_decl;\n-\t  add_referenced_var (copy);\n \t  add_local_decl (cfun, copy);\n \t  DECL_CHAIN (copy) =\n \t    BLOCK_VARS (DECL_INITIAL (current_function_decl));"}, {"sha": "5128ed9b042c96361b49386d8b017b69d6f8441f", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -692,8 +692,7 @@ void\n remove_unused_locals (void)\n {\n   basic_block bb;\n-  tree var, t;\n-  referenced_var_iterator rvi;\n+  tree var;\n   bitmap global_unused_vars = NULL;\n   unsigned srcidx, dstidx, num, ix;\n   bool have_local_clobbers = false;\n@@ -828,7 +827,6 @@ remove_unused_locals (void)\n \t    }\n \t  else if (!is_used_p (var))\n \t    {\n-\t      remove_referenced_var (var);\n \t      if (cfun->nonlocal_goto_save_area\n \t\t  && TREE_OPERAND (cfun->nonlocal_goto_save_area, 0) == var)\n \t\tcfun->nonlocal_goto_save_area = NULL;\n@@ -847,14 +845,6 @@ remove_unused_locals (void)\n   if (dstidx != num)\n     VEC_truncate (tree, cfun->local_decls, dstidx);\n \n-  /* ???  We end up with decls in referenced-vars that are not in\n-     local-decls.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n-    if (TREE_CODE (t) == VAR_DECL\n-\t&& !VAR_DECL_IS_VIRTUAL_OPERAND (t)\n-\t&& !is_used_p (t))\n-      remove_referenced_var (t);\n-\n   remove_unused_scope_block_p (DECL_INITIAL (current_function_decl),\n \t\t\t       global_unused_vars);\n "}, {"sha": "a0a05a316659dcffdfc3179e08d9ba2d85466aa4", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -942,9 +942,7 @@ rewrite_reciprocal (gimple_stmt_iterator *bsi)\n   lhs = gimple_assign_lhs (stmt);\n   type = TREE_TYPE (lhs);\n \n-  var = create_tmp_var (type, \"reciptmp\");\n-  add_referenced_var (var);\n-  DECL_GIMPLE_REG_P (var) = 1;\n+  var = create_tmp_reg (type, \"reciptmp\");\n \n   real_one = build_one_cst (type);\n \n@@ -1024,7 +1022,6 @@ rewrite_bittest (gimple_stmt_iterator *bsi)\n \n       /* 1 << B */\n       var = create_tmp_var (TREE_TYPE (a), \"shifttmp\");\n-      add_referenced_var (var);\n       t = fold_build2 (LSHIFT_EXPR, TREE_TYPE (a),\n \t\t       build_int_cst (TREE_TYPE (a), 1), b);\n       stmt1 = gimple_build_assign (var, t);"}, {"sha": "d5fa6edbdfd969f5b7f1dac9f99c877efa4e580f", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -6017,7 +6017,6 @@ create_new_iv (struct ivopts_data *data, struct iv_cand *cand)\n     }\n \n   gimple_add_tmp_var (cand->var_before);\n-  add_referenced_var (cand->var_before);\n \n   base = unshare_expr (cand->iv->base);\n "}, {"sha": "74eda3cf19f1b4f96dea819f61d6a91a39031d80", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -56,10 +56,7 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n   edge pe = loop_preheader_edge (loop);\n \n   if (!var)\n-    {\n-      var = create_tmp_var (TREE_TYPE (base), \"ivtmp\");\n-      add_referenced_var (var);\n-    }\n+    var = create_tmp_var (TREE_TYPE (base), \"ivtmp\");\n \n   vb = make_ssa_name (var, NULL);\n   if (var_before)\n@@ -1009,15 +1006,9 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n \t\t\t\t\t     TREE_TYPE (next)))\n \tvar = SSA_NAME_VAR (init);\n       else if (useless_type_conversion_p (TREE_TYPE (next), TREE_TYPE (init)))\n-\t{\n-\t  var = create_tmp_var (TREE_TYPE (next), \"unrinittmp\");\n-\t  add_referenced_var (var);\n-\t}\n+\tvar = create_tmp_var (TREE_TYPE (next), \"unrinittmp\");\n       else\n-\t{\n-\t  var = create_tmp_var (TREE_TYPE (init), \"unrinittmp\");\n-\t  add_referenced_var (var);\n-\t}\n+\tvar = create_tmp_var (TREE_TYPE (init), \"unrinittmp\");\n \n       new_init = make_ssa_name (var, NULL);\n       phi_rest = create_phi_node (new_init, rest);"}, {"sha": "13e74bff630dd2fdd268d1d03f96688cd31b749a", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -989,8 +989,6 @@ powi_as_mults (gimple_stmt_iterator *gsi, location_t loc,\n   cache[1] = arg0;\n \n   target = create_tmp_reg (type, \"powmult\");\n-  add_referenced_var (target);\n-\n   result = powi_as_mults_1 (gsi, loc, type, (n < 0) ? -n : n, cache, target);\n \n   if (n >= 0)\n@@ -1041,10 +1039,7 @@ build_and_insert_call (gimple_stmt_iterator *gsi, location_t loc,\n   tree ssa_target;\n \n   if (!*var)\n-    {\n-      *var = create_tmp_reg (TREE_TYPE (arg), \"powroot\");\n-      add_referenced_var (*var);\n-    }\n+    *var = create_tmp_reg (TREE_TYPE (arg), \"powroot\");\n \n   call_stmt = gimple_build_call (fn, 1, arg);\n   ssa_target = make_ssa_name (*var, NULL);\n@@ -1354,8 +1349,6 @@ gimple_expand_builtin_cabs (gimple_stmt_iterator *gsi, location_t loc, tree arg)\n     return NULL_TREE;\n \n   target = create_tmp_reg (type, \"cabs\");\n-  add_referenced_var (target);\n-\n   real_part = build_and_insert_ref (gsi, loc, type, target,\n \t\t\t\t    REALPART_EXPR, arg);\n   addend1 = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n@@ -1900,7 +1893,6 @@ execute_optimize_bswap (void)\n \t      gimple convert_stmt;\n \n \t      bswap_tmp = create_tmp_var (bswap_type, \"bswapsrc\");\n-\t      add_referenced_var (bswap_tmp);\n \t      bswap_tmp = make_ssa_name (bswap_tmp, NULL);\n \n \t      convert_stmt = gimple_build_assign_with_ops (\n@@ -1918,7 +1910,6 @@ execute_optimize_bswap (void)\n \t      gimple convert_stmt;\n \n \t      bswap_tmp = create_tmp_var (bswap_type, \"bswapdst\");\n-\t      add_referenced_var (bswap_tmp);\n \t      bswap_tmp = make_ssa_name (bswap_tmp, NULL);\n \t      convert_stmt = gimple_build_assign_with_ops (\n \t\t               CONVERT_EXPR, gimple_assign_lhs (stmt), bswap_tmp, NULL);"}, {"sha": "328bb3dd0e30eb7c1e8ff2b652c98ea906729d5a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -177,7 +177,6 @@ create_vop_var (struct function *fn)\n   TREE_ADDRESSABLE (global_var) = 0;\n   VAR_DECL_IS_VIRTUAL_OPERAND (global_var) = 1;\n \n-  add_referenced_var_1 (global_var, fn);\n   fn->gimple_df->vop = global_var;\n }\n "}, {"sha": "c7af5e7ecccee2ff8dbaccfb6ae971cf02673ab8", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -691,7 +691,6 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n       source_location locus_0, locus_1;\n \n       new_var2 = create_tmp_var (TREE_TYPE (result), NULL);\n-      add_referenced_var (new_var2);\n       new_stmt = gimple_build_assign_with_ops (CONVERT_EXPR, new_var2,\n \t\t\t\t\t       new_var, NULL);\n       new_var2 = make_ssa_name (new_var2, new_stmt);\n@@ -1215,7 +1214,6 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n   if (negate)\n     {\n       tree tmp = create_tmp_var (TREE_TYPE (result), NULL);\n-      add_referenced_var (tmp);\n       lhs = make_ssa_name (tmp, NULL);\n     }\n   else\n@@ -1482,7 +1480,6 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n         of the memory touched by the store, if we need to.  */\n   if (!condstoretemp || TREE_TYPE (lhs) != TREE_TYPE (condstoretemp))\n     condstoretemp = create_tmp_reg (TREE_TYPE (lhs), \"cstore\");\n-  add_referenced_var (condstoretemp);\n \n   /* 3) Insert a load from the memory of the store to the temporary\n         on the edge which did not contain the store.  */\n@@ -1567,7 +1564,6 @@ cond_if_else_store_replacement_1 (basic_block then_bb, basic_block else_bb,\n \tof the memory touched by the store, if we need to.  */\n   if (!condstoretemp || TREE_TYPE (lhs) != TREE_TYPE (condstoretemp))\n     condstoretemp = create_tmp_reg (TREE_TYPE (lhs), \"cstore\");\n-  add_referenced_var (condstoretemp);\n \n   /* 3) Create a PHI node at the join block, with one argument\n \tholding the old RHS, and the other holding the temporary"}, {"sha": "2b77ec3ec26144f9d98626a2ed8a0bea093d8b52", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -196,7 +196,6 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t\t\t\t\t\t  old_arg,\n \t\t\t\t\t\t  TREE_OPERAND (rhs, 1)));\n \t  gcc_assert (is_gimple_reg (new_var));\n-\t  add_referenced_var (new_var);\n \t  new_var = make_ssa_name (new_var, tmp);\n \t  gimple_assign_set_lhs (tmp, new_var);\n \t  gimple_set_location (tmp, locus);"}, {"sha": "8c5bc6b9fcc8f108341822a9c1fc22dce6220ef5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1411,10 +1411,7 @@ get_representative_for (const pre_expr e)\n   /* Build and insert the assignment of the end result to the temporary\n      that we will return.  */\n   if (!pretemp || exprtype != TREE_TYPE (pretemp))\n-    {\n-      pretemp = create_tmp_reg (exprtype, \"pretmp\");\n-      add_referenced_var (pretemp);\n-    }\n+    pretemp = create_tmp_reg (exprtype, \"pretmp\");\n \n   name = make_ssa_name (pretemp, gimple_build_nop ());\n   VN_INFO_GET (name)->value_id = value_id;\n@@ -3110,7 +3107,6 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n     pretemp = create_tmp_reg (exprtype, \"pretmp\");\n \n   temp = pretemp;\n-  add_referenced_var (temp);\n \n   newstmt = gimple_build_assign (temp, folded);\n   name = make_ssa_name (temp, newstmt);\n@@ -3369,7 +3365,6 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n     prephitemp = create_tmp_var (type, \"prephitmp\");\n \n   temp = prephitemp;\n-  add_referenced_var (temp);\n \n   if (TREE_CODE (type) == COMPLEX_TYPE\n       || TREE_CODE (type) == VECTOR_TYPE)"}, {"sha": "cd58ab215e1ec2d877711f71179ef380f00b6944", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -793,7 +793,6 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n           STRIP_USELESS_TYPE_CONVERSION (expr);\n           lhs = create_tmp_var (TREE_TYPE (expr), NULL);\n           new_stmt = gimple_build_assign (lhs, expr);\n-          add_referenced_var (lhs);\n \t  if (gimple_in_ssa_p (cfun))\n \t    lhs = make_ssa_name (lhs, new_stmt);\n           gimple_assign_set_lhs (new_stmt, lhs);"}, {"sha": "179ceb7c74ed408b4c2b52ff340551b37b903a90", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1433,7 +1433,6 @@ undistribute_ops_list (enum tree_code opcode,\n \t      print_generic_expr (dump_file, oe1->op, 0);\n \t    }\n \t  tmpvar = create_tmp_reg (TREE_TYPE (oe1->op), NULL);\n-\t  add_referenced_var (tmpvar);\n \t  zero_one_operation (&oe1->op, c->oecode, c->op);\n \t  EXECUTE_IF_SET_IN_SBITMAP (candidates2, first+1, i, sbi0)\n \t    {\n@@ -1598,7 +1597,6 @@ eliminate_redundant_comparison (enum tree_code opcode,\n \t  tree newop2;\n \t  gcc_assert (COMPARISON_CLASS_P (t));\n \t  tmpvar = create_tmp_var (TREE_TYPE (t), NULL);\n-\t  add_referenced_var (tmpvar);\n \t  extract_ops_from_tree (t, &subcode, &newop1, &newop2);\n \t  STRIP_USELESS_TYPE_CONVERSION (newop1);\n \t  STRIP_USELESS_TYPE_CONVERSION (newop2);\n@@ -2454,7 +2452,6 @@ rewrite_expr_tree_parallel (gimple stmt, int width,\n     stmts[i] = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmts[i+1]));\n \n   lhs_var = create_tmp_reg (TREE_TYPE (last_rhs1), NULL);\n-  add_referenced_var (lhs_var);\n \n   for (i = 0; i < stmt_num; i++)\n     {\n@@ -3086,10 +3083,7 @@ static tree\n get_reassoc_pow_ssa_name (tree *target, tree type)\n {\n   if (!*target || !types_compatible_p (type, TREE_TYPE (*target)))\n-    {\n-      *target = create_tmp_reg (type, \"reassocpow\");\n-      add_referenced_var (*target);\n-    }\n+    *target = create_tmp_reg (type, \"reassocpow\");\n \n   return make_ssa_name (*target, NULL);\n }"}, {"sha": "e19ad5a0abdc4d41081dd948a0f487ba3ab34802", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -416,7 +416,6 @@ get_string_length (strinfo si)\n \t  fn = builtin_decl_implicit (BUILT_IN_STRLEN);\n \t  gcc_assert (lhs == NULL_TREE);\n \t  lhs_var = create_tmp_var (TREE_TYPE (TREE_TYPE (fn)), NULL);\n-\t  add_referenced_var (lhs_var);\n \t  tem = unshare_expr (gimple_call_arg (stmt, 0));\n \t  lenstmt = gimple_build_call (fn, 1, tem);\n \t  lhs = make_ssa_name (lhs_var, lenstmt);\n@@ -425,7 +424,6 @@ get_string_length (strinfo si)\n \t  gsi_insert_before (&gsi, lenstmt, GSI_SAME_STMT);\n \t  lhs_var = create_tmp_var (TREE_TYPE (gimple_call_arg (stmt, 0)),\n \t\t\t\t    NULL);\n-\t  add_referenced_var (lhs_var);\n \t  tem = gimple_call_arg (stmt, 0);\n           if (!ptrofftype_p (TREE_TYPE (lhs)))\n             {\n@@ -455,7 +453,6 @@ get_string_length (strinfo si)\n \t    }\n \t  gimple_call_set_fndecl (stmt, fn);\n \t  lhs_var = create_tmp_var (TREE_TYPE (TREE_TYPE (fn)), NULL);\n-\t  add_referenced_var (lhs_var);\n \t  lhs = make_ssa_name (lhs_var, stmt);\n \t  gimple_call_set_lhs (stmt, lhs);\n \t  update_stmt (stmt);"}, {"sha": "a03d3e6c19941f6caa14f860c5e8735e38ba3737", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -249,7 +249,8 @@ target_for_debug_bind (tree var)\n   if (!MAY_HAVE_DEBUG_STMTS)\n     return NULL_TREE;\n \n-  if (TREE_CODE (var) != VAR_DECL\n+  if ((TREE_CODE (var) != VAR_DECL\n+       || VAR_DECL_IS_VIRTUAL_OPERAND (var))\n       && TREE_CODE (var) != PARM_DECL)\n     return NULL_TREE;\n \n@@ -259,13 +260,9 @@ target_for_debug_bind (tree var)\n   if (DECL_IGNORED_P (var))\n     return NULL_TREE;\n \n-  if (!is_gimple_reg (var))\n-    {\n-      if (is_gimple_reg_type (TREE_TYPE (var))\n-\t  && referenced_var_lookup (cfun, DECL_UID (var)) == NULL_TREE)\n-\treturn var;\n-      return NULL_TREE;\n-    }\n+  /* var-tracking only tracks registers.  */\n+  if (!is_gimple_reg_type (TREE_TYPE (var)))\n+    return NULL_TREE;\n \n   return var;\n }\n@@ -1107,8 +1104,6 @@ void\n init_tree_ssa (struct function *fn)\n {\n   fn->gimple_df = ggc_alloc_cleared_gimple_df ();\n-  fn->gimple_df->referenced_vars = htab_create_ggc (20, uid_decl_map_hash,\n-\t\t\t\t     \t\t    uid_decl_map_eq, NULL);\n   fn->gimple_df->default_defs = htab_create_ggc (20, uid_ssaname_map_hash,\n \t\t\t\t                 uid_ssaname_map_eq, NULL);\n   pt_solution_reset (&fn->gimple_df->escaped);\n@@ -1150,10 +1145,6 @@ struct gimple_opt_pass pass_init_datastructures =\n void\n delete_tree_ssa (void)\n {\n-  /* Remove annotations from every referenced local variable.  */\n-  htab_delete (gimple_referenced_vars (cfun));\n-  cfun->gimple_df->referenced_vars = NULL;\n-\n   fini_ssanames ();\n \n   /* We no longer maintain the SSA operand cache at this point.  */"}, {"sha": "0630f1a5b93379efa25548e8df30023f4339f205", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -425,7 +425,6 @@ emit_case_bit_tests (gimple swtch, tree index_expr,\n \n   /* csui = (1 << (word_mode) idx) */\n   tmp = create_tmp_var (word_type_node, \"csui\");\n-  add_referenced_var (tmp);\n   csui = make_ssa_name (tmp, NULL);\n   tmp = fold_build2 (LSHIFT_EXPR, word_type_node, word_mode_one,\n \t\t     fold_convert (word_type_node, idx));\n@@ -1109,7 +1108,6 @@ build_arrays (gimple swtch, struct switch_conv_info *info)\n \n   arr_index_type = build_index_type (info->range_size);\n   tmp = create_tmp_var (utype, \"csui\");\n-  add_referenced_var (tmp);\n   tidx = make_ssa_name (tmp, NULL);\n   sub = fold_build2_loc (loc, MINUS_EXPR, utype,\n \t\t\t fold_convert_loc (loc, utype, info->index_expr),"}, {"sha": "078ec67fcf140df6ae096914bb81b31599c23b6a", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -613,8 +613,6 @@ adjust_return_value_with_ops (enum tree_code code, const char *label,\n   gimple stmt;\n   tree result;\n \n-  add_referenced_var (tmp);\n-\n   if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n     stmt = gimple_build_assign_with_ops (code, tmp, acc, op1);\n   else\n@@ -912,7 +910,6 @@ create_tailcall_accumulator (const char *label, basic_block bb, tree init)\n   tree tmp = create_tmp_reg (ret_type, label);\n   gimple phi;\n \n-  add_referenced_var (tmp);\n   phi = create_phi_node (tmp, bb);\n   /* RET_TYPE can be a float when -ffast-maths is enabled.  */\n   add_phi_arg (phi, fold_convert (ret_type, init), single_pred_edge (bb),"}, {"sha": "3223f4b34de968213071516ddb4ce26caa8b1d50", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -3432,7 +3432,6 @@ vect_get_new_vect_var (tree type, enum vect_var_kind var_kind, const char *name)\n     }\n   else\n     new_vect_var = create_tmp_reg (type, prefix);\n-  add_referenced_var (new_vect_var);\n \n   return new_vect_var;\n }\n@@ -3512,7 +3511,6 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n     }\n \n   data_ref_base_var = create_tmp_var (TREE_TYPE (data_ref_base), \"batmp\");\n-  add_referenced_var (data_ref_base_var);\n   data_ref_base = force_gimple_operand (data_ref_base, &seq, true,\n \t\t\t\t\tdata_ref_base_var);\n   gimple_seq_add_seq (new_stmt_list, seq);\n@@ -3522,15 +3520,13 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n \t\t\t    fold_convert (sizetype, base_offset),\n \t\t\t    fold_convert (sizetype, init));\n   dest = create_tmp_var (sizetype, \"base_off\");\n-  add_referenced_var (dest);\n   base_offset = force_gimple_operand (base_offset, &seq, true, dest);\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n   if (offset)\n     {\n       tree tmp = create_tmp_var (sizetype, \"offset\");\n \n-      add_referenced_var (tmp);\n       offset = fold_build2 (MULT_EXPR, sizetype,\n \t\t\t    fold_convert (sizetype, offset), step);\n       base_offset = fold_build2 (PLUS_EXPR, sizetype,\n@@ -4168,7 +4164,6 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \t  /* Create interleaving stmt:\n \t     high = VEC_PERM_EXPR <vect1, vect2, {0, nelt, 1, nelt+1, ...}>  */\n \t  perm_dest = create_tmp_reg (vectype, \"vect_inter_high\");\n-\t  add_referenced_var (perm_dest);\n \t  high = make_ssa_name (perm_dest, NULL);\n \t  perm_stmt\n \t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, high,\n@@ -4180,7 +4175,6 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \t     low = VEC_PERM_EXPR <vect1, vect2, {nelt/2, nelt*3/2, nelt/2+1,\n \t\t\t\t\t\t nelt*3/2+1, ...}>  */\n \t  perm_dest = create_tmp_reg (vectype, \"vect_inter_low\");\n-\t  add_referenced_var (perm_dest);\n \t  low = make_ssa_name (perm_dest, NULL);\n \t  perm_stmt\n \t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, low,\n@@ -4623,7 +4617,6 @@ vect_permute_load_chain (VEC(tree,heap) *dr_chain,\n \n \t  /* data_ref = permute_even (first_data_ref, second_data_ref);  */\n \t  perm_dest = create_tmp_reg (vectype, \"vect_perm_even\");\n-\t  add_referenced_var (perm_dest);\n \n \t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, perm_dest,\n \t\t\t\t\t\t     first_vect, second_vect,\n@@ -4637,7 +4630,6 @@ vect_permute_load_chain (VEC(tree,heap) *dr_chain,\n \n \t  /* data_ref = permute_odd (first_data_ref, second_data_ref);  */\n \t  perm_dest = create_tmp_reg (vectype, \"vect_perm_odd\");\n-\t  add_referenced_var (perm_dest);\n \n \t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, perm_dest,\n \t\t\t\t\t\t     first_vect, second_vect,"}, {"sha": "4b34c214d8656e828475036b8aaff8a571958893", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -668,7 +668,6 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t\t\t\t\t << shifts[i]) - 1);\n \t      cst = build_vector (type, vec);\n \t      addend = create_tmp_reg (type, NULL);\n-\t      add_referenced_var (addend);\n \t      addend = make_ssa_name (addend, NULL);\n \t      stmt = gimple_build_assign_with_ops3 (VEC_COND_EXPR, addend,\n \t\t\t\t\t\t    cond, cst, zero);"}, {"sha": "aaf804ae7f3243e9b9d29fb2881f5d76ae070f8f", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1078,7 +1078,6 @@ set_prologue_iterations (basic_block bb_before_first_loop,\n \n   var = create_tmp_var (TREE_TYPE (scalar_loop_iters),\n \t\t\t\"prologue_after_cost_adjust\");\n-  add_referenced_var (var);\n   prologue_after_cost_adjust_name =\n     force_gimple_operand (scalar_loop_iters, &stmts, false, var);\n \n@@ -1491,7 +1490,6 @@ vect_build_loop_niters (loop_vec_info loop_vinfo, gimple_seq seq)\n   tree ni = unshare_expr (LOOP_VINFO_NITERS (loop_vinfo));\n \n   var = create_tmp_var (TREE_TYPE (ni), \"niters\");\n-  add_referenced_var (var);\n   ni_name = force_gimple_operand (ni, &stmts, false, var);\n \n   pe = loop_preheader_edge (loop);\n@@ -1558,7 +1556,6 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n       if (!is_gimple_val (ni_minus_gap_name))\n \t{\n \t  var = create_tmp_var (TREE_TYPE (ni), \"ni_gap\");\n-          add_referenced_var (var);\n \n           stmts = NULL;\n           ni_minus_gap_name = force_gimple_operand (ni_minus_gap_name, &stmts,\n@@ -1583,7 +1580,6 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n   if (!is_gimple_val (ratio_name))\n     {\n       var = create_tmp_var (TREE_TYPE (ni), \"bnd\");\n-      add_referenced_var (var);\n \n       stmts = NULL;\n       ratio_name = force_gimple_operand (ratio_name, &stmts, true, var);\n@@ -1604,7 +1600,6 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n   if (!is_gimple_val (ratio_mult_vf_name))\n     {\n       var = create_tmp_var (TREE_TYPE (ni), \"ratio_mult_vf\");\n-      add_referenced_var (var);\n \n       stmts = NULL;\n       ratio_mult_vf_name = force_gimple_operand (ratio_mult_vf_name, &stmts,\n@@ -1829,7 +1824,6 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n \t\t\t  init_expr, fold_convert (type, off));\n \n       var = create_tmp_var (type, \"tmp\");\n-      add_referenced_var (var);\n \n       last_gsi = gsi_last_bb (exit_bb);\n       ni_name = force_gimple_operand_gsi (&last_gsi, ni, false, var,\n@@ -2035,7 +2029,6 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n     }\n \n   var = create_tmp_var (niters_type, \"prolog_loop_niters\");\n-  add_referenced_var (var);\n   stmts = NULL;\n   iters_name = force_gimple_operand (iters, &stmts, false, var);\n \n@@ -2153,7 +2146,6 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo,\n       edge pe = loop_preheader_edge (loop);\n       tree wide_iters = fold_convert (sizetype, niters_of_prolog_loop);\n       tree var = create_tmp_var (sizetype, \"prolog_loop_adjusted_niters\");\n-      add_referenced_var (var);\n       wide_prolog_niters = force_gimple_operand (wide_iters, &seq, false,\n                                                  var);\n       if (seq)\n@@ -2251,7 +2243,6 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n \n       sprintf (tmp_name, \"%s%d\", \"addr2int\", i);\n       addr_tmp = create_tmp_reg (int_ptrsize_type, tmp_name);\n-      add_referenced_var (addr_tmp);\n       addr_tmp_name = make_ssa_name (addr_tmp, NULL);\n       addr_stmt = gimple_build_assign_with_ops (NOP_EXPR, addr_tmp_name,\n \t\t\t\t\t\taddr_base, NULL_TREE);\n@@ -2265,7 +2256,6 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n           /* create: or_tmp = or_tmp | addr_tmp */\n           sprintf (tmp_name, \"%s%d\", \"orptrs\", i);\n           or_tmp = create_tmp_reg (int_ptrsize_type, tmp_name);\n-          add_referenced_var (or_tmp);\n \t  new_or_tmp_name = make_ssa_name (or_tmp, NULL);\n \t  or_stmt = gimple_build_assign_with_ops (BIT_IOR_EXPR,\n \t\t\t\t\t\t  new_or_tmp_name,\n@@ -2283,7 +2273,6 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n \n   /* create: and_tmp = or_tmp & mask  */\n   and_tmp = create_tmp_reg (int_ptrsize_type, \"andmask\" );\n-  add_referenced_var (and_tmp);\n   and_tmp_name = make_ssa_name (and_tmp, NULL);\n \n   and_stmt = gimple_build_assign_with_ops (BIT_AND_EXPR, and_tmp_name,"}, {"sha": "fabd65e2070bedd2dfc962d770fb0ae37c65bdba", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -207,8 +207,6 @@ static tree\n vect_recog_temp_ssa_var (tree type, gimple stmt)\n {\n   tree var = create_tmp_reg (type, \"patt\");\n-\n-  add_referenced_var (var);\n   var = make_ssa_name (var, stmt);\n   return var;\n }\n@@ -502,7 +500,6 @@ vect_handle_widen_op_by_const (gimple stmt, enum tree_code code,\n       /* Create a_T = (NEW_TYPE) a_t;  */\n       *oprnd = gimple_assign_rhs1 (def_stmt);\n       tmp = create_tmp_reg (new_type, NULL);\n-      add_referenced_var (tmp);\n       new_oprnd = make_ssa_name (tmp, NULL);\n       new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd, *oprnd,\n \t\t\t\t\t       NULL_TREE);\n@@ -1107,7 +1104,6 @@ vect_operation_fits_smaller_type (gimple stmt, tree def, tree *new_type,\n               /* Create NEW_OPRND = (INTERM_TYPE) OPRND.  */\n               oprnd = gimple_assign_rhs1 (def_stmt);\n               tmp = create_tmp_reg (interm_type, NULL);\n-              add_referenced_var (tmp);\n               new_oprnd = make_ssa_name (tmp, NULL);\n               new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n                                                        oprnd, NULL_TREE);\n@@ -1128,7 +1124,6 @@ vect_operation_fits_smaller_type (gimple stmt, tree def, tree *new_type,\n         {\n           /* Create a type conversion HALF_TYPE->INTERM_TYPE.  */\n           tmp = create_tmp_reg (interm_type, NULL);\n-          add_referenced_var (tmp);\n           new_oprnd = make_ssa_name (tmp, NULL);\n           new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n                                                    oprnd, NULL_TREE);\n@@ -1260,7 +1255,6 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n         {\n           /* Create NEW_TYPE->USE_TYPE conversion.  */\n           tmp = create_tmp_reg (use_type, NULL);\n-          add_referenced_var (tmp);\n           new_oprnd = make_ssa_name (tmp, NULL);\n           pattern_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n                                                        var, NULL_TREE);"}, {"sha": "8533919e52762c6545e0c54527616fe24fb6d699", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb666a79f04e992bd3405b0bb9a464cd8a2802/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=46eb666a79f04e992bd3405b0bb9a464cd8a2802", "patch": "@@ -1271,7 +1271,6 @@ vect_init_vector (gimple stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n \t  else\n \t    {\n \t      new_var = create_tmp_reg (TREE_TYPE (type), NULL);\n-\t      add_referenced_var (new_var);\n \t      init_stmt = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\t\t\tnew_var, val,\n \t\t\t\t\t\t\tNULL_TREE);"}]}