{"sha": "9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjMDVhZTU5MDA4Y2NkZDQ3OWVjYTcwZTZjMGM2NzQyZmFkNWIwZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-04-23T15:23:14Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-04-23T15:23:14Z"}, "message": "[ARM][1/3] Add rev field to rtx cost tables\n\n       * config/arm/aarch-common-protos.h (alu_cost_table): Add rev field.\n       * config/arm/aarch-cost-tables.h (generic_extra_costs): Specify\n       rev cost.\n       (cortex_a53_extra_costs): Likewise.\n       (cortex_a57_extra_costs): Likewise.\n       * config/arm/arm.c (cortexa9_extra_costs): Likewise.\n       (cortexa7_extra_costs): Likewise.\n       (cortexa8_extra_costs): Likewise.\n       (cortexa12_extra_costs): Likewise.\n       (cortexa15_extra_costs): Likewise.\n       (v7m_extra_costs): Likewise.\n       (arm_new_rtx_costs): Handle BSWAP.\n\nFrom-SVN: r209703", "tree": {"sha": "46d5a76dc85226b6d702c748b06ed322ae48107d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d5a76dc85226b6d702c748b06ed322ae48107d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0d8c86cd8a716fa1c936928f1157b53d134446b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d8c86cd8a716fa1c936928f1157b53d134446b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d8c86cd8a716fa1c936928f1157b53d134446b"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "6d3bab8d5d8eabf903eda18b0187a73058e88638", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "patch": "@@ -1,3 +1,18 @@\n+2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+       * config/arm/aarch-common-protos.h (alu_cost_table): Add rev field.\n+       * config/arm/aarch-cost-tables.h (generic_extra_costs): Specify\n+       rev cost.\n+       (cortex_a53_extra_costs): Likewise.\n+       (cortex_a57_extra_costs): Likewise.\n+       * config/arm/arm.c (cortexa9_extra_costs): Likewise.\n+       (cortexa7_extra_costs): Likewise.\n+       (cortexa8_extra_costs): Likewise.\n+       (cortexa12_extra_costs): Likewise.\n+       (cortexa15_extra_costs): Likewise.\n+       (v7m_extra_costs): Likewise.\n+       (arm_new_rtx_costs): Handle BSWAP.\n+\n 2013-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n        * config/arm/arm.c (cortexa8_extra_costs): New table."}, {"sha": "5693c3127d8f9c7378ba830c708f283225e4a013", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "patch": "@@ -54,6 +54,7 @@ struct alu_cost_table\n   const int bfi;\t\t/* Bit-field insert.  */\n   const int bfx;\t\t/* Bit-field extraction.  */\n   const int clz;\t\t/* Count Leading Zeros.  */\n+  const int rev;\t\t/* Reverse bits/bytes.  */\n   const int non_exec;\t\t/* Extra cost when not executing insn.  */\n   const bool non_exec_costs_exec; /* True if non-execution must add the exec\n \t\t\t\t     cost.  */"}, {"sha": "adf8708fccd3ea1a62edfcb4b5f6d30138278922", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "patch": "@@ -39,6 +39,7 @@ const struct cpu_cost_table generic_extra_costs =\n     0,\t\t\t/* bfi.  */\n     0,\t\t\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     COSTS_N_INSNS (1),\t/* non_exec.  */\n     false\t\t/* non_exec_costs_exec.  */\n   },\n@@ -139,6 +140,7 @@ const struct cpu_cost_table cortexa53_extra_costs =\n     COSTS_N_INSNS (1),\t/* bfi.  */\n     COSTS_N_INSNS (1),\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -239,6 +241,7 @@ const struct cpu_cost_table cortexa57_extra_costs =\n     COSTS_N_INSNS (1), /* bfi.  */\n     0,                 /* bfx.  */\n     0,                 /* clz.  */\n+    0,\t\t\t/* rev.  */\n     0,                 /* non_exec.  */\n     true               /* non_exec_costs_exec.  */\n   },"}, {"sha": "b14537437b656fa6a39525e322b84587f1c5a420", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "patch": "@@ -986,6 +986,7 @@ const struct cpu_cost_table cortexa9_extra_costs =\n     COSTS_N_INSNS (1),\t/* bfi.  */\n     COSTS_N_INSNS (1),\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -1086,6 +1087,7 @@ const struct cpu_cost_table cortexa8_extra_costs =\n     0,\t\t\t/* bfi.  */\n     0,\t\t\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -1188,6 +1190,7 @@ const struct cpu_cost_table cortexa7_extra_costs =\n     COSTS_N_INSNS (1),\t/* bfi.  */\n     COSTS_N_INSNS (1),\t/* bfx.  */\n     COSTS_N_INSNS (1),\t/* clz.  */\n+    COSTS_N_INSNS (1),\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -1289,6 +1292,7 @@ const struct cpu_cost_table cortexa12_extra_costs =\n     0,\t\t\t/* bfi.  */\n     COSTS_N_INSNS (1),\t/* bfx.  */\n     COSTS_N_INSNS (1),\t/* clz.  */\n+    COSTS_N_INSNS (1),\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -1389,6 +1393,7 @@ const struct cpu_cost_table cortexa15_extra_costs =\n     COSTS_N_INSNS (1),\t/* bfi.  */\n     0,\t\t\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n@@ -1489,6 +1494,7 @@ const struct cpu_cost_table v7m_extra_costs =\n     0,\t\t\t/* bfi.  */\n     0,\t\t\t/* bfx.  */\n     0,\t\t\t/* clz.  */\n+    0,\t\t\t/* rev.  */\n     COSTS_N_INSNS (1),\t/* non_exec.  */\n     false\t\t/* non_exec_costs_exec.  */\n   },\n@@ -9470,6 +9476,47 @@ arm_new_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n       *cost = LIBCALL_COST (2);\n       return false;\n \n+    case BSWAP:\n+      if (arm_arch6)\n+        {\n+          if (mode == SImode)\n+            {\n+              *cost = COSTS_N_INSNS (1);\n+              if (speed_p)\n+                *cost += extra_cost->alu.rev;\n+\n+              return false;\n+            }\n+        }\n+      else\n+        {\n+        /* No rev instruction available.  Look at arm_legacy_rev\n+           and thumb_legacy_rev for the form of RTL used then.  */\n+          if (TARGET_THUMB)\n+            {\n+              *cost = COSTS_N_INSNS (10);\n+\n+              if (speed_p)\n+                {\n+                  *cost += 6 * extra_cost->alu.shift;\n+                  *cost += 3 * extra_cost->alu.logical;\n+                }\n+            }\n+          else\n+            {\n+              *cost = COSTS_N_INSNS (5);\n+\n+              if (speed_p)\n+                {\n+                  *cost += 2 * extra_cost->alu.shift;\n+                  *cost += extra_cost->alu.arith_shift;\n+                  *cost += 2 * extra_cost->alu.logical;\n+                }\n+            }\n+          return true;\n+        }\n+      return false;\n+\n     case MINUS:\n       if (TARGET_HARD_FLOAT && GET_MODE_CLASS (mode) == MODE_FLOAT\n \t  && (mode == SFmode || !TARGET_VFP_SINGLE))"}]}