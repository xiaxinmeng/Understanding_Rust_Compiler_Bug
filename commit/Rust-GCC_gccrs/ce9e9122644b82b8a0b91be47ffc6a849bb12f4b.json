{"sha": "ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5ZTkxMjI2NDRiODJiOGEwYjkxYmU0N2ZmYzZhODQ5YmIxMmY0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@gnat.com", "date": "2001-10-26T00:28:10Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-26T00:28:10Z"}, "message": "* sem_ch3.adb:\n\n\t(Analyze_Number_Declaration): Handle error expression.\n\t(Signed_Integer_Type_Declaration): Handle error bound.\n\t(Analyze_Subtype_Indication): Handle error range.\n\n\t* sem_util.adb (Get_Index_Bounds): Check for Error.\n\nFrom-SVN: r46508", "tree": {"sha": "aa1a07d24245cb49b2e38f0d7cdde05d54c69b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1a07d24245cb49b2e38f0d7cdde05d54c69b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/comments", "author": null, "committer": null, "parents": [{"sha": "e12fbc9e0fd83631bf8258404ecd671b720f753e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12fbc9e0fd83631bf8258404ecd671b720f753e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12fbc9e0fd83631bf8258404ecd671b720f753e"}], "stats": {"total": 112, "additions": 79, "deletions": 33}, "files": [{"sha": "36efe38570b946ce3bddc141f2667bdfd4df8642", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "patch": "@@ -1,3 +1,12 @@\n+2001-10-25  Robert Dewar <dewar@gnat.com>\n+\n+\t* sem_ch3.adb:\n+\t(Analyze_Number_Declaration): Handle error expression.\n+\t(Signed_Integer_Type_Declaration): Handle error bound.\n+\t(Analyze_Subtype_Indication): Handle error range.\n+\t\n+\t* sem_util.adb (Get_Index_Bounds): Check for Error.\n+\n 2001-10-25  Robert Dewar <dewar@gnat.com>\n \n \t* restrict.adb (Set_No_Run_Time_Mode): Set Discard_Names as default "}, {"sha": "127637bd86230129bacf23864773bb6e42b61350", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.1354 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -1147,6 +1147,17 @@ package body Sem_Ch3 is\n \n       Set_Is_Pure (Id, Is_Pure (Current_Scope));\n \n+      --  Process expression, replacing error by integer zero, to avoid\n+      --  cascaded errors or aborts further along in the processing\n+\n+      --  Replace Error by integer zero, which seems least likely to\n+      --  cause cascaded errors.\n+\n+      if E = Error then\n+         Rewrite (E, Make_Integer_Literal (Sloc (E), Uint_0));\n+         Set_Error_Posted (E);\n+      end if;\n+\n       Analyze (E);\n \n       --  Verify that the expression is static and numeric. If\n@@ -2302,8 +2313,14 @@ package body Sem_Ch3 is\n \n    begin\n       Analyze (T);\n-      Analyze (R);\n-      Set_Etype (N, Etype (R));\n+\n+      if R /= Error then\n+         Analyze (R);\n+         Set_Etype (N, Etype (R));\n+      else\n+         Set_Error_Posted (R);\n+         Set_Error_Posted (T);\n+      end if;\n    end Analyze_Subtype_Indication;\n \n    ------------------------------\n@@ -12062,42 +12079,53 @@ package body Sem_Ch3 is\n \n       Lo := Low_Bound (Def);\n       Hi := High_Bound (Def);\n-      Analyze_And_Resolve (Lo, Any_Integer);\n-      Analyze_And_Resolve (Hi, Any_Integer);\n \n-      Check_Bound (Lo);\n-      Check_Bound (Hi);\n+      --  Arbitrarily use Integer as the type if either bound had an error\n \n-      if Errs then\n-         Hi := Type_High_Bound (Standard_Long_Long_Integer);\n-         Lo := Type_Low_Bound (Standard_Long_Long_Integer);\n-      end if;\n+      if Hi = Error or else Lo = Error then\n+         Base_Typ := Any_Integer;\n+         Set_Error_Posted (T, True);\n \n-      --  Find type to derive from\n+      --  Here both bounds are OK expressions\n \n-      Lo_Val := Expr_Value (Lo);\n-      Hi_Val := Expr_Value (Hi);\n+      else\n+         Analyze_And_Resolve (Lo, Any_Integer);\n+         Analyze_And_Resolve (Hi, Any_Integer);\n \n-      if Can_Derive_From (Standard_Short_Short_Integer) then\n-         Base_Typ := Base_Type (Standard_Short_Short_Integer);\n+         Check_Bound (Lo);\n+         Check_Bound (Hi);\n \n-      elsif Can_Derive_From (Standard_Short_Integer) then\n-         Base_Typ := Base_Type (Standard_Short_Integer);\n+         if Errs then\n+            Hi := Type_High_Bound (Standard_Long_Long_Integer);\n+            Lo := Type_Low_Bound (Standard_Long_Long_Integer);\n+         end if;\n \n-      elsif Can_Derive_From (Standard_Integer) then\n-         Base_Typ := Base_Type (Standard_Integer);\n+         --  Find type to derive from\n \n-      elsif Can_Derive_From (Standard_Long_Integer) then\n-         Base_Typ := Base_Type (Standard_Long_Integer);\n+         Lo_Val := Expr_Value (Lo);\n+         Hi_Val := Expr_Value (Hi);\n \n-      elsif Can_Derive_From (Standard_Long_Long_Integer) then\n-         Base_Typ := Base_Type (Standard_Long_Long_Integer);\n+         if Can_Derive_From (Standard_Short_Short_Integer) then\n+            Base_Typ := Base_Type (Standard_Short_Short_Integer);\n \n-      else\n-         Base_Typ := Base_Type (Standard_Long_Long_Integer);\n-         Error_Msg_N (\"integer type definition bounds out of range\", Def);\n-         Hi := Type_High_Bound (Standard_Long_Long_Integer);\n-         Lo := Type_Low_Bound (Standard_Long_Long_Integer);\n+         elsif Can_Derive_From (Standard_Short_Integer) then\n+            Base_Typ := Base_Type (Standard_Short_Integer);\n+\n+         elsif Can_Derive_From (Standard_Integer) then\n+            Base_Typ := Base_Type (Standard_Integer);\n+\n+         elsif Can_Derive_From (Standard_Long_Integer) then\n+            Base_Typ := Base_Type (Standard_Long_Integer);\n+\n+         elsif Can_Derive_From (Standard_Long_Long_Integer) then\n+            Base_Typ := Base_Type (Standard_Long_Long_Integer);\n+\n+         else\n+            Base_Typ := Base_Type (Standard_Long_Long_Integer);\n+            Error_Msg_N (\"integer type definition bounds out of range\", Def);\n+            Hi := Type_High_Bound (Standard_Long_Long_Integer);\n+            Lo := Type_Low_Bound (Standard_Long_Long_Integer);\n+         end if;\n       end if;\n \n       --  Complete both implicit base and declared first subtype entities"}, {"sha": "da2b6ce6378b67130ad96e59a5db4c6425f116c1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.541 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -2169,15 +2169,25 @@ package body Sem_Util is\n \n    procedure Get_Index_Bounds (N : Node_Id; L, H : out Node_Id) is\n       Kind : constant Node_Kind := Nkind (N);\n+      R    : Node_Id;\n \n    begin\n       if Kind = N_Range then\n          L := Low_Bound (N);\n          H := High_Bound (N);\n \n       elsif Kind = N_Subtype_Indication then\n-         L := Low_Bound  (Range_Expression (Constraint (N)));\n-         H := High_Bound (Range_Expression (Constraint (N)));\n+         R := Range_Expression (Constraint (N));\n+\n+         if R = Error then\n+            L := Error;\n+            H := Error;\n+            return;\n+\n+         else\n+            L := Low_Bound  (Range_Expression (Constraint (N)));\n+            H := High_Bound (Range_Expression (Constraint (N)));\n+         end if;\n \n       elsif Is_Entity_Name (N) and then Is_Type (Entity (N)) then\n          if Error_Posted (Scalar_Range (Entity (N))) then\n@@ -2198,7 +2208,6 @@ package body Sem_Util is\n          L := N;\n          H := N;\n       end if;\n-\n    end Get_Index_Bounds;\n \n    ------------------------"}]}