{"sha": "7148dede8a84e17cc0b00190d76fabbc1a717654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0OGRlZGU4YTg0ZTE3Y2MwYjAwMTkwZDc2ZmFiYmMxYTcxNzY1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-08-15T21:55:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-15T21:55:19Z"}, "message": "PR c++/90393 - ICE with thow in ?:\n\nMy previous patch for 64372 was incomplete: it only stopped making the\nnon-throw argument into an rvalue, lvalue_kind still considered the ?:\nexpression to be an rvalue, leaving us worse than before.\n\n\tPR c++/64372, DR 1560 - Gratuitous lvalue-to-rvalue conversion in ?:\n\t* tree.c (lvalue_kind): Handle throw in one arm.\n\t* typeck.c (rationalize_conditional_expr): Likewise.\n\t(cp_build_modify_expr): Likewise.\n\nFrom-SVN: r274550", "tree": {"sha": "f160ffecb6dcfc5746b9c4a402681d65b1e664fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f160ffecb6dcfc5746b9c4a402681d65b1e664fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7148dede8a84e17cc0b00190d76fabbc1a717654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7148dede8a84e17cc0b00190d76fabbc1a717654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7148dede8a84e17cc0b00190d76fabbc1a717654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7148dede8a84e17cc0b00190d76fabbc1a717654/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d321551cea11f27a9afd67ece9bbda095a579950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d321551cea11f27a9afd67ece9bbda095a579950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d321551cea11f27a9afd67ece9bbda095a579950"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "938ec486d9c15bf2aea5ffa0449c93b9d8786096", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -1,3 +1,12 @@\n+2019-08-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90393 - ICE with thow in ?:\n+\n+\tPR c++/64372, DR 1560 - Gratuitous lvalue-to-rvalue conversion in ?:\n+\t* tree.c (lvalue_kind): Handle throw in one arm.\n+\t* typeck.c (rationalize_conditional_expr): Likewise.\n+\t(cp_build_modify_expr): Likewise.\n+\n 2019-08-14  Jason Merrill  <jason@redhat.com>\n \n \tImplement P0848R3, Conditionally Trivial Special Member Functions."}, {"sha": "17a4df380c1178821133e87a8f023a77b7538341", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -236,10 +236,23 @@ lvalue_kind (const_tree ref)\n \t  gcc_assert (!type_dependent_expression_p (CONST_CAST_TREE (ref)));\n \t  goto default_;\n \t}\n-      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 1)\n-\t\t\t\t    ? TREE_OPERAND (ref, 1)\n-\t\t\t\t    : TREE_OPERAND (ref, 0));\n-      op2_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 2));\n+      {\n+\ttree op1 = TREE_OPERAND (ref, 1);\n+\tif (!op1) op1 = TREE_OPERAND (ref, 0);\n+\ttree op2 = TREE_OPERAND (ref, 2);\n+\top1_lvalue_kind = lvalue_kind (op1);\n+\top2_lvalue_kind = lvalue_kind (op2);\n+\tif (!op1_lvalue_kind != !op2_lvalue_kind)\n+\t  {\n+\t    /* The second or the third operand (but not both) is a\n+\t       throw-expression; the result is of the type\n+\t       and value category of the other.  */\n+\t    if (op1_lvalue_kind && TREE_CODE (op2) == THROW_EXPR)\n+\t      op2_lvalue_kind = op1_lvalue_kind;\n+\t    else if (op2_lvalue_kind && TREE_CODE (op1) == THROW_EXPR)\n+\t      op1_lvalue_kind = op2_lvalue_kind;\n+\t  }\n+      }\n       break;\n \n     case MODOP_EXPR:"}, {"sha": "e2a4f285a726191d9b358dfba68e865893126530", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -2308,13 +2308,15 @@ rationalize_conditional_expr (enum tree_code code, tree t,\n                                 complain);\n     }\n \n+  tree op1 = TREE_OPERAND (t, 1);\n+  if (TREE_CODE (op1) != THROW_EXPR)\n+    op1 = cp_build_unary_op (code, op1, false, complain);\n+  tree op2 = TREE_OPERAND (t, 2);\n+  if (TREE_CODE (op2) != THROW_EXPR)\n+    op2 = cp_build_unary_op (code, op2, false, complain);\n+\n   return\n-    build_conditional_expr (loc, TREE_OPERAND (t, 0),\n-\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 1), false,\n-                                               complain),\n-\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 2), false,\n-                                               complain),\n-                            complain);\n+    build_conditional_expr (loc, TREE_OPERAND (t, 0), op1, op2, complain);\n }\n \n /* Given the TYPE of an anonymous union field inside T, return the\n@@ -8160,8 +8162,9 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \tif (!lvalue_or_else (lhs, lv_assign, complain))\n \t  return error_mark_node;\n \n-\ttree op1 = cp_build_modify_expr (loc, TREE_OPERAND (lhs, 1),\n-\t\t\t\t\t modifycode, rhs, complain);\n+\ttree op1 = TREE_OPERAND (lhs, 1);\n+\tif (TREE_CODE (op1) != THROW_EXPR)\n+\t  op1 = cp_build_modify_expr (loc, op1, modifycode, rhs, complain);\n \t/* When sanitizing undefined behavior, even when rhs doesn't need\n \t   stabilization at this point, the sanitization might add extra\n \t   SAVE_EXPRs in there and so make sure there is no tree sharing\n@@ -8170,8 +8173,9 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \tif (sanitize_flags_p (SANITIZE_UNDEFINED\n \t\t\t      | SANITIZE_UNDEFINED_NONDEFAULT))\n \t  rhs = unshare_expr (rhs);\n-\ttree op2 = cp_build_modify_expr (loc, TREE_OPERAND (lhs, 2),\n-\t\t\t\t\t modifycode, rhs, complain);\n+\ttree op2 = TREE_OPERAND (lhs, 2);\n+\tif (TREE_CODE (op2) != THROW_EXPR)\n+\t  op2 = cp_build_modify_expr (loc, op2, modifycode, rhs, complain);\n \ttree cond = build_conditional_expr (input_location,\n \t\t\t\t\t    TREE_OPERAND (lhs, 0), op1, op2,\n \t\t\t\t\t    complain);"}, {"sha": "727fd7586f37f8fdf931b23316379cef39df98b6", "filename": "gcc/testsuite/g++.dg/abi/mangle53.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -1,10 +1,11 @@\n // { dg-do compile { target c++11 } }\n \n bool b;\n+int i;\n // { dg-final { scan-assembler \"_Z1fIiEDTquL_Z1bEfp_twLi42EET_\" } }\n-template <class T> auto f (T t) -> decltype(b?t:throw 42) { return 0; }\n+template <class T> auto f (T t) -> decltype(b?t:throw 42) { return i; }\n // { dg-final { scan-assembler \"_Z2f2IiEDTquL_Z1bEfp_trET_\" } }\n-template <class T> auto f2 (T t) -> decltype(b?t:throw) { return 0; }\n+template <class T> auto f2 (T t) -> decltype(b?t:throw) { return i; }\n \n int main()\n {"}, {"sha": "4a9d057a7578cd77a4b0da576da3279ef4160143", "filename": "gcc/testsuite/g++.dg/expr/cond15.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond15.C?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/90393\n+\n+struct S {\n+  S();\n+  S(const S&) {}\n+};\n+\n+S f() {\n+  const S m;\n+  return true ? m : throw 0;\n+}\n+\n+int main() {}"}, {"sha": "796828b25c06a21b4f223bbf9115d336b780ca0e", "filename": "gcc/testsuite/g++.dg/expr/cond16.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond16.C?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/90393\n+// { dg-do run }\n+\n+int c, d;\n+\n+struct string {\n+  string(const char *p): s(p) { ++c; }\n+  ~string() { ++d; }\n+  string(const string& str): s(str.s) { ++c; }\n+  const char* s;\n+  bool empty() const { return !s; }\n+};\n+    \n+string foo()\n+{\n+  string s(\"foo\");\n+  return s.empty() ? throw \"empty\" : s;\n+}\n+\n+int main()\n+{\n+  foo();\n+  if (c != d)\n+    __builtin_abort();\n+}"}, {"sha": "fe6d4296ab5036d583723bb1a4ab63cb86fe5ccd", "filename": "gcc/testsuite/g++.old-deja/g++.eh/cond1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcond1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcond1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcond1.C?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -22,8 +22,8 @@ void fn(int i)\n   (i ? throw X() : throw X());  // ok, void\n   \n   (i ? i : j) = 1; // ok, int &\n-  (i ? throw X() : j) = 1; // { dg-error \"\" } non-lvalue\n-  (i ? j : throw X()) = 1; // { dg-error \"\" } non-lvalue\n+  (i ? throw X() : j) = 1; // ok, int &\n+  (i ? j : throw X()) = 1; // ok, int &\n   (i ? throw X() : throw X()) = 1;  // { dg-error \"\" } void\n   \n   (i ? (void)1 : i++); // { dg-error \"\" } ANSI forbids"}, {"sha": "0d2baf9edf7f45abfdb8c7ece437643bbcef8c1d", "filename": "gcc/testsuite/g++.old-deja/g++.other/cond5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7148dede8a84e17cc0b00190d76fabbc1a717654/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C?ref=7148dede8a84e17cc0b00190d76fabbc1a717654", "patch": "@@ -35,8 +35,8 @@ void fn(int i)\n   (i ? throw X() : throw X());  // ok, void\n   \n   (i ? i : j) = 1; // ok, int &\n-  (i ? throw X() : j) = 1;    // { dg-error \"lvalue\" }\n-  (i ? j : throw X()) = 1;    // { dg-error \"lvalue\" }\n+  (i ? throw X() : j) = 1; // ok, int &\n+  (i ? j : throw X()) = 1; // ok, int &\n   (i ? throw X() : throw X()) = 1;  // { dg-error \"lvalue\" }\n   \n   (i ? (void)1 : i++);        // { dg-error \"throw-expression\" }"}]}