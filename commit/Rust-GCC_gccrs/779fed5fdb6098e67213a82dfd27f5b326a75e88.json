{"sha": "779fed5fdb6098e67213a82dfd27f5b326a75e88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5ZmVkNWZkYjYwOThlNjcyMTNhODJkZmQyN2Y1YjMyNmE3NWU4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:57:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:57:17Z"}, "message": "Fix folding of vector mask EQ/NE expressions\n\nfold_binary_loc assumed that if the type of the result wasn't a vector,\nthe operands wouldn't be either.  This isn't necessarily true for\nEQ_EXPR and NE_EXPR of vector masks, which can return a single scalar\nfor the mask as a whole.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* fold-const.c (fold_binary_loc): Check the argument types\n\trather than the result type when testing for a vector operation.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vec_bool_cmp_1.c: New test.\n\t* gcc.target/aarch64/sve/vec_bool_cmp_1_run.c: Likweise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256616", "tree": {"sha": "c7d81773fba7399e72265ef818081c1fb946baa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7d81773fba7399e72265ef818081c1fb946baa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/779fed5fdb6098e67213a82dfd27f5b326a75e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779fed5fdb6098e67213a82dfd27f5b326a75e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779fed5fdb6098e67213a82dfd27f5b326a75e88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779fed5fdb6098e67213a82dfd27f5b326a75e88/comments", "author": null, "committer": null, "parents": [{"sha": "dbc3af4fc620aeb6fbf088e961fe8658bbd959c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc3af4fc620aeb6fbf088e961fe8658bbd959c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc3af4fc620aeb6fbf088e961fe8658bbd959c7"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "d965d8fbb3a1e70e6e092383fa806a5c8064c5e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=779fed5fdb6098e67213a82dfd27f5b326a75e88", "patch": "@@ -1,3 +1,10 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* fold-const.c (fold_binary_loc): Check the argument types\n+\trather than the result type when testing for a vector operation.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/tm.texi.in (DWARF_LAZY_REGISTER_VALUE): Document."}, {"sha": "cfb1b3d0614c35629651978fc4cb79ff70bae2f1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=779fed5fdb6098e67213a82dfd27f5b326a75e88", "patch": "@@ -9323,7 +9323,7 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \n   if ((code == BIT_AND_EXPR || code == BIT_IOR_EXPR\n        || code == EQ_EXPR || code == NE_EXPR)\n-      && TREE_CODE (type) != VECTOR_TYPE\n+      && !VECTOR_TYPE_P (TREE_TYPE (arg0))\n       && ((truth_value_p (TREE_CODE (arg0))\n \t   && (truth_value_p (TREE_CODE (arg1))\n \t       || (TREE_CODE (arg1) == BIT_AND_EXPR"}, {"sha": "9997b287d9de3e8753b4864243bfec99bd049f49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=779fed5fdb6098e67213a82dfd27f5b326a75e88", "patch": "@@ -1,3 +1,10 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.target/aarch64/sve/vec_bool_cmp_1.c: New test.\n+\t* gcc.target/aarch64/sve/vec_bool_cmp_1_run.c: Likweise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* g++.target/aarch64/sve/aarch64-sve.exp: New harness."}, {"sha": "e60d1c5db1ccce68ad0cdf664a985474e0e65a4e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_bool_cmp_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1.c?ref=779fed5fdb6098e67213a82dfd27f5b326a75e88", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+#include <stdbool.h>\n+\n+#define VEC_BOOL(NAME, OP, VARTYPE, INDUCTYPE)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+vec_bool_##NAME##_##VARTYPE##_##INDUCTYPE (VARTYPE *dst, VARTYPE *src,\t\\\n+\t\t\t\t\t   INDUCTYPE start,\t\t\\\n+\t\t\t\t\t   INDUCTYPE n,\t\t\t\\\n+\t\t\t\t\t   INDUCTYPE mask)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (INDUCTYPE i = 0; i < n; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      bool lhs = i >= start;\t\t\t\t\t\t\\\n+      bool rhs = (i & mask) != 0x3D;\t\t\t\t\t\\\n+      if (lhs OP rhs)\t\t\t\t\t\t\t\\\n+        dst[i] = src[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_OP(T, NAME, OP)\t\t\t\\\n+  T (NAME, OP, uint8_t, uint8_t)\t\t\\\n+  T (NAME, OP, uint16_t, uint16_t)\t\t\\\n+  T (NAME, OP, uint32_t, uint32_t)\t\t\\\n+  T (NAME, OP, uint64_t, uint64_t)\t\t\\\n+  T (NAME, OP, float, uint32_t)\t\t\t\\\n+  T (NAME, OP, double, uint64_t)\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  TEST_OP (T, cmpeq, ==)\t\t\t\\\n+  TEST_OP (T, cmpne, !=)\n+\n+TEST_ALL (VEC_BOOL)\n+\n+/* Both cmpne and cmpeq loops will contain an exclusive predicate or.  */\n+/* { dg-final { scan-assembler-times {\\teors?\\tp[0-9]*\\.b, p[0-7]/z, p[0-9]*\\.b, p[0-9]*\\.b\\n} 12 } } */\n+/* cmpeq will also contain a predicate not operation.  */\n+/* { dg-final { scan-assembler-times {\\tnot\\tp[0-9]*\\.b, p[0-7]/z, p[0-9]*\\.b\\n} 6 } } */"}, {"sha": "cd0fd562f99bd5d51cedcd9140ff16999ffa1b5f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_bool_cmp_1_run.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779fed5fdb6098e67213a82dfd27f5b326a75e88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_bool_cmp_1_run.c?ref=779fed5fdb6098e67213a82dfd27f5b326a75e88", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O3 -fno-inline\" } */\n+\n+#include \"vec_bool_cmp_1.c\"\n+\n+#define N 103\n+\n+#define TEST_VEC_BOOL(NAME, OP, VARTYPE, INDUCTYPE)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  INDUCTYPE i;\t\t\t\t\t\t\t\\\n+  VARTYPE src[N];\t\t\t\t\t\t\\\n+  VARTYPE dst[N];\t\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      src[i] = i;\t\t\t\t\t\t\\\n+      dst[i] = i * 2;\t\t\t\t\t\t\\\n+      asm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  vec_bool_##NAME##_##VARTYPE##_##INDUCTYPE (dst, src, 13,\t\\\n+\t\t\t\t\t     97, 0xFF);\t\t\\\n+  for (i = 0; i < 13; i++)\t\t\t\t\t\\\n+    if (dst[i] != (VARTYPE) (0 OP 1 ? i : i * 2))\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  for (i = 13; i < 97; i++)\t\t\t\t\t\\\n+    if (dst[i] != (VARTYPE) (1 OP (i != 0x3D) ? i : i * 2))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  for (i = 97; i < N; i++)\t\t\t\t\t\\\n+    if (dst[i] != (i * 2))\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+}\n+\n+int __attribute__ ((optimize (1)))\n+main ()\n+{\n+  TEST_ALL (TEST_VEC_BOOL)\n+  return 0;\n+}"}]}