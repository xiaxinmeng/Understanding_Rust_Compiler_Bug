{"sha": "021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "node_id": "C_kwDOANBUbNoAKDAyMWFkOGU1Y2Y5YWI2NmUxYTBhNDFkY2UzYTU0NTg2ZmFjYjg2ZTA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-01T08:49:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-01T08:56:24Z"}, "message": "Fix PR c++/64697 at -O1 or above\n\nThe BFD fix eliminates the link failure and working code is generated at\n-O0, but _not_ when optimization is enabled because the optimizer changes:\n\n        movq    .refptr._ZTH1s(%rip), %rax\n        testq   %rax, %rax\n        je      .L2\n        call    _ZTH1s\n\ninto:\n\n        leaq    _ZTH1s(%rip), %rax\n        testq   %rax, %rax\n        je      .L2\n        call    _ZTH1s\n\nand the leaq now also gets the relocation overflow.  So the fix is to\nteach legitimate_pic_address_disp_p to reject the transformation when\nthe symbol is an external weak function, which yields:\n\n        cmpq    $0, .refptr._ZTH1s(%rip)\n        je      .L2\n        call    _ZTH1s\n\nand the cmpq keeps a relocation that does not overflow.\n\ngcc/\n\tPR c++/64697\n\t* config/i386/i386.c (legitimate_pic_address_disp_p): For PE-COFF do\n\tnot return true for external weak function symbols in medium model.", "tree": {"sha": "5f075ce4e78d8af86e42faa1b6c791ade269f624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f075ce4e78d8af86e42faa1b6c791ade269f624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0/comments", "author": null, "committer": null, "parents": [{"sha": "e705b8533aa0a00a65734eb5fd6344295723dccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e705b8533aa0a00a65734eb5fd6344295723dccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e705b8533aa0a00a65734eb5fd6344295723dccc"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "a566d84a61e55cde97907f7e2b2cde7499d22b0e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "patch": "@@ -10708,24 +10708,19 @@ legitimate_pic_address_disp_p (rtx disp)\n \t      if (is_imported_p (op0))\n \t\treturn true;\n \n-\t      if (SYMBOL_REF_FAR_ADDR_P (op0)\n-\t\t  || !SYMBOL_REF_LOCAL_P (op0))\n+\t      if (SYMBOL_REF_FAR_ADDR_P (op0) || !SYMBOL_REF_LOCAL_P (op0))\n \t\tbreak;\n \n-\t      /* Function-symbols need to be resolved only for\n-\t         large-model.\n-\t         For the small-model we don't need to resolve anything\n-\t         here.  */\n+\t      /* Non-external-weak function symbols need to be resolved only\n+\t\t for the large model.  Non-external symbols don't need to be\n+\t\t resolved for large and medium models.  For the small model,\n+\t\t we don't need to resolve anything here.  */\n \t      if ((ix86_cmodel != CM_LARGE_PIC\n-\t           && SYMBOL_REF_FUNCTION_P (op0))\n+\t\t   && SYMBOL_REF_FUNCTION_P (op0)\n+\t\t   && !(SYMBOL_REF_EXTERNAL_P (op0) && SYMBOL_REF_WEAK (op0)))\n+\t\t  || !SYMBOL_REF_EXTERNAL_P (op0)\n \t\t  || ix86_cmodel == CM_SMALL_PIC)\n \t\treturn true;\n-\t      /* Non-external symbols don't need to be resolved for\n-\t         large, and medium-model.  */\n-\t      if ((ix86_cmodel == CM_LARGE_PIC\n-\t\t   || ix86_cmodel == CM_MEDIUM_PIC)\n-\t\t  && !SYMBOL_REF_EXTERNAL_P (op0))\n-\t\treturn true;\n \t    }\n \t  else if (!SYMBOL_REF_FAR_ADDR_P (op0)\n \t\t   && (SYMBOL_REF_LOCAL_P (op0)"}]}