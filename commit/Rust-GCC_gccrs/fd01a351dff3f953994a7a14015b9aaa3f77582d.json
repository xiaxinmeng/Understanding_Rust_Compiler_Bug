{"sha": "fd01a351dff3f953994a7a14015b9aaa3f77582d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwMWEzNTFkZmYzZjk1Mzk5NGE3YTE0MDE1YjlhYWEzZjc3NTgyZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-05-10T12:16:09Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-05-10T12:16:09Z"}, "message": "re PR target/48896 (avr.o warnings)\n\n\tPR target/48896\n\t* config/avr/avr.c (avr_ret_register): Return unsigned int\n\tinstead of int.\n\t(avr_function_value): Mark fn_decl_or_type as unused, don't pass\n\tit to avr_libcall_value.\n\tavr_expand_builtin): Use EXPAND_NORMAL as arg 4 in calls to\n\texpand_expr.\n\t(avr_expand_binop_builtin): Ditto.\n\t(avr_expand_unop_builtin): Ditto.\n\nFrom-SVN: r173617", "tree": {"sha": "54a74e89982af775f62a7493fbfd75b1ac4a8c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a74e89982af775f62a7493fbfd75b1ac4a8c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd01a351dff3f953994a7a14015b9aaa3f77582d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd01a351dff3f953994a7a14015b9aaa3f77582d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd01a351dff3f953994a7a14015b9aaa3f77582d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd01a351dff3f953994a7a14015b9aaa3f77582d/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34cc3c861dc01807a8fbe392ba3f275286e7bf1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cc3c861dc01807a8fbe392ba3f275286e7bf1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cc3c861dc01807a8fbe392ba3f275286e7bf1b"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "6453217bc216f095339cfc0525d7f07b5cd91bc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd01a351dff3f953994a7a14015b9aaa3f77582d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd01a351dff3f953994a7a14015b9aaa3f77582d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd01a351dff3f953994a7a14015b9aaa3f77582d", "patch": "@@ -1,3 +1,15 @@\n+2011-05-10  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/48896\n+\t* config/avr/avr.c (avr_ret_register): Return unsigned int\n+\tinstead of int.\n+\t(avr_function_value): Mark fn_decl_or_type as unused, don't pass\n+\tit to avr_libcall_value.\n+\tavr_expand_builtin): Use EXPAND_NORMAL as arg 4 in calls to\n+\texpand_expr.\n+\t(avr_expand_binop_builtin): Ditto.\n+\t(avr_expand_unop_builtin): Ditto.\n+\n 2011-05-10  DJ Delorie  <dj@redhat.com>\n \n \t* config/rx/rx.h (JUMP_ALIGN, LABEL_ALIGN, LOOP_ALIGN): Define."}, {"sha": "ac4b3182d81d9572ff32cc1cb06628caf158a86a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd01a351dff3f953994a7a14015b9aaa3f77582d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd01a351dff3f953994a7a14015b9aaa3f77582d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=fd01a351dff3f953994a7a14015b9aaa3f77582d", "patch": "@@ -6178,7 +6178,7 @@ avr_reorg (void)\n \n /* Returns register number for function return value.*/\n \n-static inline int\n+static inline unsigned int\n avr_ret_register (void)\n {\n   return 24;\n@@ -6209,18 +6209,14 @@ avr_libcall_value (enum machine_mode mode,\n    function returns a value of data type VALTYPE.  */\n \n static rtx\n-avr_function_value (const_tree type, const_tree fn_decl_or_type,\n-\t\t    bool outgoing ATTRIBUTE_UNUSED)\n+avr_function_value (const_tree type,\n+                    const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+                    bool outgoing ATTRIBUTE_UNUSED)\n {\n   unsigned int offs;\n-  const_rtx func = fn_decl_or_type;\n-\n-  if (fn_decl_or_type\n-      && !DECL_P (fn_decl_or_type))\n-  fn_decl_or_type = NULL;\n \n   if (TYPE_MODE (type) != BLKmode)\n-    return avr_libcall_value (TYPE_MODE (type), func);\n+    return avr_libcall_value (TYPE_MODE (type), NULL_RTX);\n   \n   offs = int_size_in_bytes (type);\n   if (offs < 2)\n@@ -6711,7 +6707,7 @@ avr_expand_unop_builtin (enum insn_code icode, tree exp,\n {\n   rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n   enum machine_mode op0mode = GET_MODE (op0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n@@ -6752,8 +6748,8 @@ avr_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n   tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n   enum machine_mode op0mode = GET_MODE (op0);\n   enum machine_mode op1mode = GET_MODE (op1);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n@@ -6845,7 +6841,7 @@ avr_expand_builtin (tree exp, rtx target,\n     case AVR_BUILTIN_DELAY_CYCLES:\n       {\n         arg0 = CALL_EXPR_ARG (exp, 0);\n-        op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+        op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n         if (! CONST_INT_P (op0))\n           error (\"__builtin_avr_delay_cycles expects a compile time integer constant.\");"}]}