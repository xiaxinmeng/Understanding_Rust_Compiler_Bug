{"sha": "c111f6066043d3b7bc4141ca0411eae9294aa6c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExMWY2MDY2MDQzZDNiN2JjNDE0MWNhMDQxMWVhZTkyOTRhYTZjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-30T08:15:26Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-30T08:16:30Z"}, "message": "i386: Introduce reversed ADC and SBB patterns [PR98060]\n\nThe compiler is able to merge LTU comparisons with PLUS or MINUS pattern to\nform addition with carry (ADC) and subtraction with borrow (SBB) instructions:\n\n\top = op + carry\t\t[ADC $0, op]\n\top = op - carry\t\t[SBB $0, op]\n\nThe patch introduces reversed ADC and SBB insn patterns:\n\n\top = op + !carry\t[SBB $-1, op]\n\top = op - !carry\t[ADC $-1, op]\n\nallowing the compiler to also merge GEU comparisons.\n\n2021-04-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/98060\n\t* config/i386/i386.md (*add<mode>3_carry_0r): New insn pattern.\n\t(*addsi3_carry_zext_0r): Ditto.\n\t(*sub<mode>3_carry_0): Ditto.\n\t(*subsi3_carry_zext_0r): Ditto.\n\t* config/i386/predicates.md (ix86_carry_flag_unset_operator):\n\tNew predicate.\n\t* config/i386/i386.c (ix86_rtx_costs) <case PLUS, case MINUS>:\n\tAlso consider ix86_carry_flag_unset_operator to calculate\n\tthe cost of adc/sbb insn.\n\ngcc/testsuite/\n\n\tPR target/98060\n\t* gcc.target/i386/pr98060.c: New test.", "tree": {"sha": "939d67a66c9ca4f2fe200f34ee1168a88171c97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939d67a66c9ca4f2fe200f34ee1168a88171c97a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c111f6066043d3b7bc4141ca0411eae9294aa6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c111f6066043d3b7bc4141ca0411eae9294aa6c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c111f6066043d3b7bc4141ca0411eae9294aa6c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c111f6066043d3b7bc4141ca0411eae9294aa6c5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf3b10f27b1994cf4a9eb12079d85412ebc7cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf3b10f27b1994cf4a9eb12079d85412ebc7cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf3b10f27b1994cf4a9eb12079d85412ebc7cad"}], "stats": {"total": 138, "additions": 131, "deletions": 7}, "files": [{"sha": "780da108a7c88cea317cfdc0907e8322ba314249", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c111f6066043d3b7bc4141ca0411eae9294aa6c5", "patch": "@@ -20057,13 +20057,16 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t    }\n \t  else if (GET_CODE (XEXP (x, 0)) == PLUS)\n \t    {\n+\t      rtx op = XEXP (XEXP (x, 0), 0);\n+\n \t      /* Add with carry, ignore the cost of adding a carry flag.  */\n-\t      if (ix86_carry_flag_operator (XEXP (XEXP (x, 0), 0), mode))\n+\t      if (ix86_carry_flag_operator (op, mode)\n+\t\t  || ix86_carry_flag_unset_operator (op, mode))\n \t\t*total = cost->add;\n \t      else\n \t\t{\n \t\t  *total = cost->lea;\n-\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode,\n+\t\t  *total += rtx_cost (op, mode,\n \t\t\t\t      outer_code, opno, speed);\n \t\t}\n \n@@ -20081,7 +20084,8 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       if (GET_MODE_CLASS (mode) == MODE_INT\n \t  && GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n \t  && GET_CODE (XEXP (x, 0)) == MINUS\n-\t  && ix86_carry_flag_operator (XEXP (XEXP (x, 0), 1), mode))\n+\t  && (ix86_carry_flag_operator (XEXP (XEXP (x, 0), 1), mode)\n+\t      || ix86_carry_flag_unset_operator (XEXP (XEXP (x, 0), 1), mode)))\n \t{\n \t  *total = cost->add;\n \t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode,"}, {"sha": "f79fd122f565c709a87ae9344926713522de66a8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c111f6066043d3b7bc4141ca0411eae9294aa6c5", "patch": "@@ -6773,8 +6773,8 @@\n (define_insn \"*add<mode>3_carry_0\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(plus:SWI\n-\t  (match_operator:SWI 3 \"ix86_carry_flag_operator\"\n-\t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])\n+\t  (match_operator:SWI 2 \"ix86_carry_flag_operator\"\n+\t    [(reg FLAGS_REG) (const_int 0)])\n \t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n@@ -6784,6 +6784,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*add<mode>3_carry_0r\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(plus:SWI\n+\t  (match_operator:SWI 2 \"ix86_carry_flag_unset_operator\"\n+\t    [(reg FLAGS_REG) (const_int 0)])\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n+  \"sbb{<imodesuffix>}\\t{$-1, %0|%0, -1}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*addsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -6814,6 +6828,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*addsi3_carry_zext_0r\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (match_operator:SI 2 \"ix86_carry_flag_unset_operator\"\n+\t\t    [(reg FLAGS_REG) (const_int 0)])\n+\t\t   (match_operand:SI 1 \"register_operand\" \"0\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"sbb{l}\\t{$-1, %k0|%k0, -1}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; There is no point to generate ADCX instruction. ADC is shorter and faster.\n \n (define_insn \"addcarry<mode>\"\n@@ -6916,8 +6944,8 @@\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(minus:SWI\n \t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t  (match_operator:SWI 3 \"ix86_carry_flag_operator\"\n-\t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])))\n+\t  (match_operator:SWI 2 \"ix86_carry_flag_operator\"\n+\t    [(reg FLAGS_REG) (const_int 0)])))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n   \"sbb{<imodesuffix>}\\t{$0, %0|%0, 0}\"\n@@ -6926,6 +6954,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*sub<mode>3_carry_0r\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(minus:SWI\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operator:SWI 2 \"ix86_carry_flag_unset_operator\"\n+\t    [(reg FLAGS_REG) (const_int 0)])))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n+  \"adc{<imodesuffix>}\\t{$-1, %0|%0, -1}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*subsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -6958,6 +7000,21 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*subsi3_carry_zext_0r\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"0\")\n+\t    (match_operator:SI 2 \"ix86_carry_flag_unset_operator\"\n+\t      [(reg FLAGS_REG) (const_int 0)]))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"adc{l}\\t{$-1, %k0|%k0, -1}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"@sub<mode>3_carry_ccc\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC"}, {"sha": "6dfbb0873bef27f3b3d321ef05bf8947fe041bcb", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=c111f6066043d3b7bc4141ca0411eae9294aa6c5", "patch": "@@ -1455,6 +1455,22 @@\n   return code == LTU;\n })\n \n+;; Return true if OP is a valid comparison operator\n+;; testing carry flag to be unset.\n+(define_predicate \"ix86_carry_flag_unset_operator\"\n+  (match_code \"geu,ge\")\n+{\n+  machine_mode inmode = GET_MODE (XEXP (op, 0));\n+  enum rtx_code code = GET_CODE (op);\n+\n+  if (inmode == CCFPmode)\n+    code = ix86_fp_compare_code_to_integer (code);\n+  else if (inmode != CCmode && inmode != CCCmode && inmode != CCGZmode)\n+    return false;\n+\n+  return code == GEU;\n+})\n+\n ;; Return true if this comparison only requires testing one flag bit.\n (define_predicate \"ix86_trivial_fp_comparison_operator\"\n   (match_code \"gt,ge,unlt,unle,uneq,ltgt,ordered,unordered\"))"}, {"sha": "f82620ceb64a452bf0fb9efdba04ecfd75f65eee", "filename": "gcc/testsuite/gcc.target/i386/pr98060.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98060.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c111f6066043d3b7bc4141ca0411eae9294aa6c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98060.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98060.c?ref=c111f6066043d3b7bc4141ca0411eae9294aa6c5", "patch": "@@ -0,0 +1,47 @@\n+/* PR target/98060 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"set\" } } */\n+/* { dg-final { scan-assembler-times \"adc\"  4 } } */\n+/* { dg-final { scan-assembler-times \"sbb\"  4 } } */\n+\n+int r1 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 + (v0 >= v1);\n+}\n+\n+int r2 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 + (v0 <= v1);\n+}\n+\n+int r3 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 + (v0 > v1);\n+}\n+\n+int r4 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 + (v0 < v1);\n+}\n+\n+int r5 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 - (v0 >= v1);\n+}\n+\n+int r6 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 - (v0 <= v1);\n+}\n+\n+int r7 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 - (v0 > v1);\n+}\n+\n+int r8 (unsigned v0, unsigned v1, int v2)\n+{\n+  return v2 - (v0 < v1);\n+}"}]}