{"sha": "d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkNjY2OWUxN2RlN2FhMGM3ZDViZjMyOTU0ZmMxZmE3ZDcwNjA2ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:11:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:11:08Z"}, "message": "(addsi3): Code generation improvements (whether to use movab).\n\nFrom-SVN: r1448", "tree": {"sha": "dc1a1d98590101682949de183ae823dc2f7ccbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc1a1d98590101682949de183ae823dc2f7ccbeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e/comments", "author": null, "committer": null, "parents": [{"sha": "cdefd0d28a14c373ca18ea534bab5e69588ede50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdefd0d28a14c373ca18ea534bab5e69588ede50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdefd0d28a14c373ca18ea534bab5e69588ede50"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "93e925091ba5dda1f95b8a91085c576568763d6d", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=d3d6669e17de7aa0c7d5bf32954fc1fa7d70606e", "patch": "@@ -516,6 +516,19 @@\n    addf2 %1,%0\n    addf3 %1,%2,%0\")\n \n+/* The space-time-opcode tradeoffs for addition vary by model of VAX.\n+\n+   On a VAX 3 \"movab (r1)[r2],r3\" is faster than \"addl3 r1,r2,r3\",\n+   but it not faster on other models.\n+\n+   \"movab #(r1),r2\" is usually shorter than \"addl3 #,r1,r2\", and is\n+   faster on a VAX 3, but some VAXes (e.g. VAX 9000) will stall if\n+   a register is used in an address too soon after it is set.\n+   Compromise by using movab only when it is shorter than the add\n+   or the base register in the address is one of sp, ap, and fp,\n+   which are not modified very often.  */\n+\n+\n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n \t(plus:SI (match_operand:SI 1 \"general_operand\" \"g\")\n@@ -534,23 +547,37 @@\n \treturn \\\"subl2 $%n2,%0\\\";\n       if (GET_CODE (operands[2]) == CONST_INT\n \t  && (unsigned) INTVAL (operands[2]) >= 64\n-\t  && GET_CODE (operands[1]) == REG)\n+\t  && GET_CODE (operands[1]) == REG\n+\t  && ((INTVAL (operands[2]) < 32767 && INTVAL (operands[2]) > -32768)\n+\t      || REGNO (operands[1]) > 11))\n \treturn \\\"movab %c2(%1),%0\\\";\n       return \\\"addl2 %2,%0\\\";\n     }\n   if (rtx_equal_p (operands[0], operands[2]))\n     return \\\"addl2 %1,%0\\\";\n+\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && INTVAL (operands[2]) < 32767\n+      && INTVAL (operands[2]) > -32768\n+      && GET_CODE (operands[1]) == REG\n+      && push_operand (operands[0], SImode))\n+    return \\\"pushab %c2(%1)\\\";\n+\n   if (GET_CODE (operands[2]) == CONST_INT\n       && (unsigned) (- INTVAL (operands[2])) < 64)\n     return \\\"subl3 $%n2,%1,%0\\\";\n+\n   if (GET_CODE (operands[2]) == CONST_INT\n       && (unsigned) INTVAL (operands[2]) >= 64\n-      && GET_CODE (operands[1]) == REG)\n-    {\n-      if (push_operand (operands[0], SImode))\n-\treturn \\\"pushab %c2(%1)\\\";\n-      return \\\"movab %c2(%1),%0\\\";\n-    }\n+      && GET_CODE (operands[1]) == REG\n+      && ((INTVAL (operands[2]) < 32767 && INTVAL (operands[2]) > -32768)\n+\t  || REGNO (operands[1]) > 11))\n+    return \\\"movab %c2(%1),%0\\\";\n+\n+  /* Add this if using gcc on a VAX 3xxx:\n+  if (REG_P (operands[1]) && REG_P (operands[2]))\n+    return \\\"movab (%1)[%2],%0\\\";\n+  */\n   return \\\"addl3 %1,%2,%0\\\";\n }\")\n "}]}