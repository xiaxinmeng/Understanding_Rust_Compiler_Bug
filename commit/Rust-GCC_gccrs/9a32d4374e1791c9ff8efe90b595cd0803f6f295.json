{"sha": "9a32d4374e1791c9ff8efe90b595cd0803f6f295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzMmQ0Mzc0ZTE3OTFjOWZmOGVmZTkwYjU5NWNkMDgwM2Y2ZjI5NQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-01T23:59:20Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-01T23:59:20Z"}, "message": "fptr.c (__canonicalize_funcptr_for_compare): Initialize fixup values if saved GOT address doesn't match runtime address.\n\n\t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Initialize\n\tfixup values if saved GOT address doesn't match runtime address.\n\t(fixup_branch_offset): Reorder list.\n\nFrom-SVN: r231135", "tree": {"sha": "706f4b0ba69bdb4c7ebee8eaccf22b583bca9dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706f4b0ba69bdb4c7ebee8eaccf22b583bca9dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a32d4374e1791c9ff8efe90b595cd0803f6f295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a32d4374e1791c9ff8efe90b595cd0803f6f295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a32d4374e1791c9ff8efe90b595cd0803f6f295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a32d4374e1791c9ff8efe90b595cd0803f6f295/comments", "author": null, "committer": null, "parents": [{"sha": "b1b6836e90ee5e3f103e6150a7713bef51d5790c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b6836e90ee5e3f103e6150a7713bef51d5790c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b6836e90ee5e3f103e6150a7713bef51d5790c"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "8143db2222efc1390df09314f6dbd1da86573724", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a32d4374e1791c9ff8efe90b595cd0803f6f295/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a32d4374e1791c9ff8efe90b595cd0803f6f295/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9a32d4374e1791c9ff8efe90b595cd0803f6f295", "patch": "@@ -1,3 +1,9 @@\n+2015-12-01  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Initialize\n+\tfixup values if saved GOT address doesn't match runtime address.\n+\t(fixup_branch_offset): Reorder list.\n+\n 2015-11-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (VTV_CFLAGS): New variable."}, {"sha": "1fb0a9f14b2049a6a8f861e74e3f31dea2e33db6", "filename": "libgcc/config/pa/fptr.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a32d4374e1791c9ff8efe90b595cd0803f6f295/libgcc%2Fconfig%2Fpa%2Ffptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a32d4374e1791c9ff8efe90b595cd0803f6f295/libgcc%2Fconfig%2Fpa%2Ffptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ffptr.c?ref=9a32d4374e1791c9ff8efe90b595cd0803f6f295", "patch": "@@ -40,7 +40,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    the template should it be necessary to change the current branch\n    position.  */\n #define NOFFSETS 2\n-static int fixup_branch_offset[NOFFSETS] = { 32, -4 };\n+static int fixup_branch_offset[NOFFSETS] = { -4, 32 };\n \n #define GET_FIELD(X, FROM, TO) \\\n   ((X) >> (31 - (TO)) & ((1 << ((TO) - (FROM) + 1)) - 1))\n@@ -66,6 +66,7 @@ __canonicalize_funcptr_for_compare (fptr_t fptr)\n {\n   static unsigned int fixup_plabel[2];\n   static fixup_t fixup;\n+  static unsigned int *init_fixup;\n   unsigned int *plabel, *got;\n \n   /* -1 and page 0 are special.  -1 is used in crtend to mark the end of\n@@ -88,9 +89,11 @@ __canonicalize_funcptr_for_compare (fptr_t fptr)\n     return plabel[0];\n \n   /* Initialize our plabel for calling fixup if we haven't done so already.\n-     This code needs to be thread safe but we don't have to be too careful\n-     as the result is invariant.  */\n-  if (!fixup)\n+     We can't rely on static initialization so we check that any previous\n+     initialization was done for the current got address.  This code needs\n+     to be thread safe but we don't have to be too careful as the result\n+     is invariant.  */\n+  if (init_fixup != got)\n     {\n       int i;\n       unsigned int *iptr;\n@@ -121,6 +124,9 @@ __canonicalize_funcptr_for_compare (fptr_t fptr)\n       fixup_plabel[0] = (unsigned int) iptr + 8;  /* address of fixup */\n       fixup_plabel[1] = got[-1];\t\t  /* ltp for fixup */\n       fixup = (fixup_t) ((int) fixup_plabel | 3);\n+\n+      /* Save address of the global offset table.  */\n+      init_fixup = got;\n     }\n \n   /* Call fixup to resolve the function address.  got[1] contains the"}]}