{"sha": "1aeec6dc1f26657cc32ed107b3de255566fcca41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlZWM2ZGMxZjI2NjU3Y2MzMmVkMTA3YjNkZTI1NTU2NmZjY2E0MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-08-08T01:51:27Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-08-08T01:51:27Z"}, "message": "re PR rtl-optimization/67028 (combine bug. Different assumptions about subreg in different places.)\n\n\tPR rtl-optimization/67028\n\t* combine.c (simplify_comparison): Fix comment.  Rearrange code.\n\tAdd test to see if a const_int fits in the new mode.\n\ngcc/testsuite/\n\tPR rtl-optimization/67028\n\t* gcc.dg/pr67028.c: New testcase.\n\nFrom-SVN: r226731", "tree": {"sha": "e9ec333a8008794cd08d520fb3cdb36ff0415fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ec333a8008794cd08d520fb3cdb36ff0415fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeec6dc1f26657cc32ed107b3de255566fcca41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeec6dc1f26657cc32ed107b3de255566fcca41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeec6dc1f26657cc32ed107b3de255566fcca41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeec6dc1f26657cc32ed107b3de255566fcca41/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fa95f4ead2faf03bde6bb5c458e06f197b34ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa95f4ead2faf03bde6bb5c458e06f197b34ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa95f4ead2faf03bde6bb5c458e06f197b34ca2"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "c85c8e3adbe357eb55afef0ae7ac66da962d46f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aeec6dc1f26657cc32ed107b3de255566fcca41", "patch": "@@ -1,3 +1,9 @@\n+2015-08-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/67028\n+\t* combine.c (simplify_comparison): Fix comment.  Rearrange code.\n+\tAdd test to see if a const_int fits in the new mode.\n+\n 2015-08-07  DJ Delorie  <dj@redhat.com>\n \n \t* config/rx/rx.c (rx_mode_dependent_address_p): Remove unneeded asserts."}, {"sha": "8f98cbb6bdfccf08336ac0b84309475d0a40901a", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1aeec6dc1f26657cc32ed107b3de255566fcca41", "patch": "@@ -12057,14 +12057,15 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t      continue;\n \t    }\n \n-\t  /* If this is (and:M1 (subreg:M2 X 0) (const_int C1)) where C1\n+\t  /* If this is (and:M1 (subreg:M1 X:M2 0) (const_int C1)) where C1\n \t     fits in both M1 and M2 and the SUBREG is either paradoxical\n \t     or represents the low part, permute the SUBREG and the AND\n \t     and try again.  */\n-\t  if (GET_CODE (XEXP (op0, 0)) == SUBREG)\n+\t  if (GET_CODE (XEXP (op0, 0)) == SUBREG\n+\t      && CONST_INT_P (XEXP (op0, 1)))\n \t    {\n-\t      unsigned HOST_WIDE_INT c1;\n \t      tmode = GET_MODE (SUBREG_REG (XEXP (op0, 0)));\n+\t      unsigned HOST_WIDE_INT c1 = INTVAL (XEXP (op0, 1));\n \t      /* Require an integral mode, to avoid creating something like\n \t\t (AND:SF ...).  */\n \t      if (SCALAR_INT_MODE_P (tmode)\n@@ -12074,16 +12075,20 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t\t     have a defined value due to the AND operation.\n \t\t     However, if we commute the AND inside the SUBREG then\n \t\t     they no longer have defined values and the meaning of\n-\t\t     the code has been changed.  */\n+\t\t     the code has been changed.\n+\t\t     Also C1 should not change value in the smaller mode,\n+\t\t     see PR67028 (a positive C1 can become negative in the\n+\t\t     smaller mode, so that the AND does no longer mask the\n+\t\t     upper bits).  */\n \t\t  && ((WORD_REGISTER_OPERATIONS\n \t\t       && mode_width > GET_MODE_PRECISION (tmode)\n-\t\t       && mode_width <= BITS_PER_WORD)\n+\t\t       && mode_width <= BITS_PER_WORD\n+\t\t       && trunc_int_for_mode (c1, tmode) == (HOST_WIDE_INT) c1)\n \t\t      || (mode_width <= GET_MODE_PRECISION (tmode)\n \t\t\t  && subreg_lowpart_p (XEXP (op0, 0))))\n-\t\t  && CONST_INT_P (XEXP (op0, 1))\n \t\t  && mode_width <= HOST_BITS_PER_WIDE_INT\n \t\t  && HWI_COMPUTABLE_MODE_P (tmode)\n-\t\t  && ((c1 = INTVAL (XEXP (op0, 1))) & ~mask) == 0\n+\t\t  && (c1 & ~mask) == 0\n \t\t  && (c1 & ~GET_MODE_MASK (tmode)) == 0\n \t\t  && c1 != mask\n \t\t  && c1 != GET_MODE_MASK (tmode))"}, {"sha": "38b6f9ee49bc2c744afad0857d3b6d7ad4558259", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aeec6dc1f26657cc32ed107b3de255566fcca41", "patch": "@@ -1,3 +1,8 @@\n+2015-08-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/67028\n+\t* gcc.dg/pr67028.c: New testcase.\n+\n 2015-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/67029"}, {"sha": "b42fb8110ebb9df5c71bd4ddfdbe05a1806d6c76", "filename": "gcc/testsuite/gcc.dg/pr67028.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67028.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeec6dc1f26657cc32ed107b3de255566fcca41/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67028.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67028.c?ref=1aeec6dc1f26657cc32ed107b3de255566fcca41", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+short c = 0;\n+\n+int __attribute__ ((noinline)) f(void)\n+{\n+\tint d = 5;\n+\tsigned char e = (c != 1) * -2;\n+\tint a = (unsigned short)e > d;\n+\n+\treturn a;\n+}\n+\n+int main(void)\n+{\n+\tif (!f())\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}"}]}