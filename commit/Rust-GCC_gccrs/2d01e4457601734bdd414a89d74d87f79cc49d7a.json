{"sha": "2d01e4457601734bdd414a89d74d87f79cc49d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwMWU0NDU3NjAxNzM0YmRkNDE0YTg5ZDc0ZDg3Zjc5Y2M0OWQ3YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-25T04:32:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-25T04:32:45Z"}, "message": "sh-protos.h (symbol_ref_operand): Declare.\n\n* config/sh/sh-protos.h (symbol_ref_operand): Declare.\n* config/sh/sh.md (UNSPEC_CALLER): New constant.\n(calli_pcrel, call_valuei_pcrel): Use PIC_REG.\n(call_pcrel, call_value_pcrel): New insn_and_splits.\n(call, call_value): Use them.\n(call_site): New expand.\n(sym_label2reg, symPLT_label2reg): Adjust to hold call_sites.\n* config/sh/sh.h (OUTPUT_ADDR_CONST_EXTRA) [UNSPEC_CALLER]:\nOutput call_site label.\n(PREDICATE_CODES): Added symbol_ref_operand.\n* config/sh/sh.c (symbol_ref_operand): Define.\n* emit-rtl.c (try_split): Propagate CALL_INSN_FUNCTION_USAGE\nto CALL_INSNs in the split sequence.\n\nFrom-SVN: r37730", "tree": {"sha": "8e72d36c1c46338b2d043c44058356ff002181e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e72d36c1c46338b2d043c44058356ff002181e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d01e4457601734bdd414a89d74d87f79cc49d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d01e4457601734bdd414a89d74d87f79cc49d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d01e4457601734bdd414a89d74d87f79cc49d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d01e4457601734bdd414a89d74d87f79cc49d7a/comments", "author": null, "committer": null, "parents": [{"sha": "9eca082e508996b79dd3788d6223cded6055841b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eca082e508996b79dd3788d6223cded6055841b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eca082e508996b79dd3788d6223cded6055841b"}], "stats": {"total": 148, "additions": 124, "deletions": 24}, "files": [{"sha": "2365199cc0b1b14669fd5fa16030ffe9fd11ab5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -1,3 +1,19 @@\n+2000-11-25  Alexandre Oliva  <aoliva@redhat.com>, NIIBE Yutaka  <gniibe@m17n.org>\n+\n+\t* config/sh/sh-protos.h (symbol_ref_operand): Declare.\n+\t* config/sh/sh.md (UNSPEC_CALLER): New constant.\n+\t(calli_pcrel, call_valuei_pcrel): Use PIC_REG.\n+\t(call_pcrel, call_value_pcrel): New insn_and_splits.\n+\t(call, call_value): Use them.\n+\t(call_site): New expand.\n+\t(sym_label2reg, symPLT_label2reg): Adjust to hold call_sites.\n+\t* config/sh/sh.h (OUTPUT_ADDR_CONST_EXTRA) [UNSPEC_CALLER]:\n+\tOutput call_site label.\n+\t(PREDICATE_CODES): Added symbol_ref_operand.\n+\t* config/sh/sh.c (symbol_ref_operand): Define.\n+\t* emit-rtl.c (try_split): Propagate CALL_INSN_FUNCTION_USAGE\n+\tto CALL_INSNs in the split sequence.\n+\n 2000-11-24  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc (v850-*-*): Define c_target_objs and"}, {"sha": "79b66773f842cc191f224fb4aca5e7d8d3e94c5b", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -77,6 +77,7 @@ extern int regs_used PARAMS ((rtx, int));\n extern void fixup_addr_diff_vecs PARAMS ((rtx));\n extern int get_dest_uid PARAMS ((rtx, int));\n extern void final_prescan_insn PARAMS ((rtx, rtx *, int));\n+extern int symbol_ref_operand PARAMS ((rtx, enum machine_mode));\n extern int system_reg_operand PARAMS ((rtx, enum machine_mode));\n extern int general_movsrc_operand PARAMS ((rtx, enum machine_mode));\n extern int general_movdst_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "259e1480e46723bb59f1ea0bb9f26b4b2cf4cf96", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -4821,6 +4821,14 @@ fpul_operand (op, mode)\n \t  && GET_MODE (op) == mode);\n }\n \n+int\n+symbol_ref_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (op) == SYMBOL_REF);\n+}\n+\n int\n commutative_float_operator (op, mode)\n      rtx op;"}, {"sha": "9c516fc9a3ea431ff8c7e653a06f1855ea6da08b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -2201,6 +2201,15 @@ do { char dstr[30];\t\t\t\t\t\\\n \t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n \t    fputs (\"@PLT\", (STREAM));\t\t\t\t\t\\\n \t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_CALLER:\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      char name[32];\t\t\t\t\t\t\\\n+\t      /* LPCS stands for Label for PIC Call Site.  */\t\t\\\n+\t      ASM_GENERATE_INTERNAL_LABEL\t\t\t\t\\\n+\t\t(name, \"LPCS\", XINT (XVECEXP ((X), 0, 0), 0));\t\t\\\n+\t      assemble_name ((STREAM), name);\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n \t  default:\t\t\t\t\t\t\t\\\n \t    goto FAIL;\t\t\t\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n@@ -2297,7 +2306,8 @@ extern struct rtx_def *fpscr_rtx;\n   {\"general_movdst_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"logical_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"noncommutative_float_operator\", {MINUS, DIV}},\t\t\t\\\n-  {\"register_operand\", {SUBREG, REG}},\n+  {\"register_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n+  {\"symbol_ref_operand\", {SYMBOL_REF}},\n \n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, "}, {"sha": "2c0ba5d36fee4ba75214b92c7598594234c33afc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 80, "deletions": 23, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -108,6 +108,7 @@\n   (UNSPEC_GOT\t\t7)\n   (UNSPEC_GOTOFF\t8)\n   (UNSPEC_PLT\t\t9)\n+  (UNSPEC_CALLER\t10)\n   (UNSPEC_ICACHE\t12)\n \n   ;; These are used with unspec_volatile.\n@@ -3389,6 +3390,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI PIC_REG))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n@@ -3399,6 +3401,34 @@\n \t\t      (const_string \"single\") (const_string \"double\")))\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n+(define_insn_and_split \"call_pcrel\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI PIC_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (match_scratch:SI 2 \"=r\"))]\n+  \"TARGET_SH2 && optimize\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx lab = gen_call_site ();\n+\n+  if (SYMBOL_REF_FLAG (operands[0]))\n+    emit_insn (gen_sym_label2reg (operands[2], operands[0], lab));\n+  else\n+    emit_insn (gen_symPLT_label2reg (operands[2], operands[0], lab));\n+  emit_call_insn (gen_calli_pcrel (operands[2], operands[1], lab));\n+  DONE;\n+}\"\n+  [(set_attr \"type\" \"call\")\n+   (set (attr \"fp_mode\")\n+\t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n+\t\t      (const_string \"single\") (const_string \"double\")))\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_insn \"call_valuei\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n@@ -3418,6 +3448,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI PIC_REG))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n@@ -3428,6 +3459,36 @@\n \t\t      (const_string \"single\") (const_string \"double\")))\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n+(define_insn_and_split \"call_value_pcrel\"\n+  [(set (match_operand 0 \"\" \"=rf\")\n+\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI PIC_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"TARGET_SH2 && optimize\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx lab = gen_call_site ();\n+\n+  if (SYMBOL_REF_FLAG (operands[1]))\n+    emit_insn (gen_sym_label2reg (operands[3], operands[1], lab));\n+  else\n+    emit_insn (gen_symPLT_label2reg (operands[3], operands[1], lab));\n+  emit_call_insn (gen_call_valuei_pcrel (operands[0], operands[3],\n+\t\t\t\t\t operands[2], lab));\n+  DONE;\n+}\"\n+  [(set_attr \"type\" \"call\")\n+   (set (attr \"fp_mode\")\n+\t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n+\t\t      (const_string \"single\") (const_string \"double\")))\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_expand \"call\"\n   [(parallel [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n \t\t\t    (match_operand 1 \"\" \"\"))\n@@ -3436,18 +3497,12 @@\n   \"\"\n   \"\n {\n-  if (flag_pic && TARGET_SH2 && ! flag_unroll_loops\n+  if (flag_pic && TARGET_SH2 && optimize\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     {\n-      rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n-\n-      if (SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n-\temit_insn (gen_sym_label2reg (reg, XEXP (operands[0], 0), lab));\n-      else\n-\temit_insn (gen_symPLT_label2reg (reg, XEXP (operands[0], 0), lab));\n-      operands[0] = reg;\n-      emit_call_insn (gen_calli_pcrel (operands[0], operands[1], lab));\n+      emit_call_insn (gen_call_pcrel (XEXP (operands[0], 0), operands[1]));\n+      current_function_uses_pic_offset_table = 1;\n       DONE;\n     }\n   else\n@@ -3463,19 +3518,13 @@\n   \"\"\n   \"\n {\n-  if (flag_pic && TARGET_SH2 && ! flag_unroll_loops\n+  if (flag_pic && TARGET_SH2 && optimize\n       && GET_CODE (operands[1]) == MEM\n       && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n     {\n-      rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n-\n-      if (SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n-\temit_insn (gen_sym_label2reg (reg, XEXP (operands[1], 0), lab));\n-      else\n-\temit_insn (gen_symPLT_label2reg (reg, XEXP (operands[1], 0), lab));\n-      operands[1] = reg;\n-      emit_call_insn (gen_call_valuei_pcrel (operands[0], operands[1],\n-\t\t\t\t\t     operands[2], lab));\n+      emit_call_insn (gen_call_value_pcrel (operands[0], XEXP (operands[1], 0),\n+\t\t\t\t\t    operands[2]));\n+      current_function_uses_pic_offset_table = 1;\n       DONE;\n     }\n   else\n@@ -3597,13 +3646,22 @@\n }\n \")\n \n+(define_expand \"call_site\"\n+  [(unspec [(match_dup 0)] UNSPEC_CALLER)]\n+  \"\"\n+  \"\n+{\n+  static HOST_WIDE_INT i = 0;\n+  operands[0] = GEN_INT (i);\n+  i++;\n+}\")\n+\n (define_expand \"sym_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const (minus:SI\n \t\t(const (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC))\n \t\t(const (plus:SI\n-\t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))]\n-\t\t\t\tUNSPEC_PIC)\n+\t\t\t(match_operand:SI 2 \"\" \"\")\n \t\t\t(const_int 2))))))]\n   \"\" \"\")\n \n@@ -3637,8 +3695,7 @@\n \t\t\t(unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT)\n \t\t\t(pc)))\n \t\t(const (plus:SI\n-\t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))]\n-\t\t\t\tUNSPEC_PIC)\n+\t\t\t(match_operand:SI 2 \"\" \"\")\n \t\t\t(const_int 2))))))\n    (use (match_dup 3))]\n   ;; Even though the PIC register is not really used by the call"}, {"sha": "f658ec2cb9ace5b1fa8e5dae047f9407e8767693", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d01e4457601734bdd414a89d74d87f79cc49d7a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2d01e4457601734bdd414a89d74d87f79cc49d7a", "patch": "@@ -2438,6 +2438,14 @@ try_split (pat, trial, last)\n \t\t    LABEL_NUSES (JUMP_LABEL (trial))++;\n \t\t}\n \n+\t  /* If we are splitting a CALL_INSN, look for the CALL_INSN\n+\t     in SEQ and copy our CALL_INSN_FUNCTION_USAGE to it.  */\n+\t  if (GET_CODE (trial) == CALL_INSN)\n+\t    for (i = XVECLEN (seq, 0) - 1; i >= 0; i--)\n+\t      if (GET_CODE (XVECEXP (seq, 0, i)) == CALL_INSN)\n+\t\tCALL_INSN_FUNCTION_USAGE (XVECEXP (seq, 0, i))\n+\t\t  = CALL_INSN_FUNCTION_USAGE (trial);\n+\n \t  tem = emit_insn_after (seq, before);\n \n \t  delete_insn (trial);"}]}