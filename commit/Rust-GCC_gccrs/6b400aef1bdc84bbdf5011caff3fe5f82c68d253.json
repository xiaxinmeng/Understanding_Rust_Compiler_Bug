{"sha": "6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0MDBhZWYxYmRjODRiYmRmNTAxMWNhZmYzZmU1ZjgyYzY4ZDI1Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-08T18:43:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-08T18:43:48Z"}, "message": "analyzer: split out struct bit_range from class concrete_binding\n\ngcc/analyzer/ChangeLog:\n\t* store.cc (concrete_binding::dump_to_pp): Move bulk of\n\timplementation to...\n\t(bit_range::dump_to_pp): ...this new function.\n\t(bit_range::cmp): New.\n\t(concrete_binding::overlaps_p): Update for use of bit_range.\n\t(concrete_binding::cmp_ptr_ptr): Likewise.\n\t* store.h (struct bit_range): New.\n\t(class concrete_binding): Replace fields m_start_bit_offset and\n\tm_size_in_bits with new field m_bit_range.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "70ec581cd36da8f5ba13be52f27b43cc64d7b42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ec581cd36da8f5ba13be52f27b43cc64d7b42c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b400aef1bdc84bbdf5011caff3fe5f82c68d253/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5a5404cb68e5e39e296849944019b93a591646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5a5404cb68e5e39e296849944019b93a591646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5a5404cb68e5e39e296849944019b93a591646"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "f4bb7def7814aadda2471cb890f95e5ec8fd4877", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400aef1bdc84bbdf5011caff3fe5f82c68d253/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400aef1bdc84bbdf5011caff3fe5f82c68d253/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "patch": "@@ -236,28 +236,47 @@ binding_key::cmp (const binding_key *k1, const binding_key *k2)\n     }\n }\n \n-/* class concrete_binding : public binding_key.  */\n-\n-/* Implementation of binding_key::dump_to_pp vfunc for concrete_binding.  */\n+/* struct struct bit_range.  */\n \n void\n-concrete_binding::dump_to_pp (pretty_printer *pp, bool simple) const\n+bit_range::dump_to_pp (pretty_printer *pp) const\n {\n-  binding_key::dump_to_pp (pp, simple);\n-  pp_string (pp, \", start: \");\n+  pp_string (pp, \"start: \");\n   pp_wide_int (pp, m_start_bit_offset, SIGNED);\n   pp_string (pp, \", size: \");\n   pp_wide_int (pp, m_size_in_bits, SIGNED);\n   pp_string (pp, \", next: \");\n   pp_wide_int (pp, get_next_bit_offset (), SIGNED);\n }\n \n+int\n+bit_range::cmp (const bit_range &br1, const bit_range &br2)\n+{\n+  if (int start_cmp = wi::cmps (br1.m_start_bit_offset,\n+\t\t\t\tbr2.m_start_bit_offset))\n+    return start_cmp;\n+\n+  return wi::cmpu (br1.m_size_in_bits, br2.m_size_in_bits);\n+}\n+\n+/* class concrete_binding : public binding_key.  */\n+\n+/* Implementation of binding_key::dump_to_pp vfunc for concrete_binding.  */\n+\n+void\n+concrete_binding::dump_to_pp (pretty_printer *pp, bool simple) const\n+{\n+  binding_key::dump_to_pp (pp, simple);\n+  pp_string (pp, \", \");\n+  m_bit_range.dump_to_pp (pp);\n+}\n+\n /* Return true if this binding overlaps with OTHER.  */\n \n bool\n concrete_binding::overlaps_p (const concrete_binding &other) const\n {\n-  if (m_start_bit_offset < other.get_next_bit_offset ()\n+  if (get_start_bit_offset () < other.get_next_bit_offset ()\n       && get_next_bit_offset () > other.get_start_bit_offset ())\n     return true;\n   return false;\n@@ -274,10 +293,7 @@ concrete_binding::cmp_ptr_ptr (const void *p1, const void *p2)\n   if (int kind_cmp = b1->get_kind () - b2->get_kind ())\n     return kind_cmp;\n \n-  if (int start_cmp = wi::cmps (b1->m_start_bit_offset, b2->m_start_bit_offset))\n-    return start_cmp;\n-\n-  return wi::cmpu (b1->m_size_in_bits, b2->m_size_in_bits);\n+  return bit_range::cmp (b1->m_bit_range, b2->m_bit_range);\n }\n \n /* class symbolic_binding : public binding_key.  */"}, {"sha": "be09b427366244e064d5f5b6415608718aca37f9", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400aef1bdc84bbdf5011caff3fe5f82c68d253/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400aef1bdc84bbdf5011caff3fe5f82c68d253/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=6b400aef1bdc84bbdf5011caff3fe5f82c68d253", "patch": "@@ -267,6 +267,42 @@ class binding_key\n   enum binding_kind m_kind;\n };\n \n+struct bit_range\n+{\n+  bit_range (bit_offset_t start_bit_offset, bit_size_t size_in_bits)\n+  : m_start_bit_offset (start_bit_offset),\n+    m_size_in_bits (size_in_bits)\n+  {}\n+\n+  void dump_to_pp (pretty_printer *pp) const;\n+\n+  bit_offset_t get_start_bit_offset () const\n+  {\n+    return m_start_bit_offset;\n+  }\n+  bit_offset_t get_next_bit_offset () const\n+  {\n+    return m_start_bit_offset + m_size_in_bits;\n+  }\n+\n+  bool contains_p (bit_offset_t offset) const\n+  {\n+    return (offset >= get_start_bit_offset ()\n+\t    && offset < get_next_bit_offset ());\n+  }\n+\n+  bool operator== (const bit_range &other) const\n+  {\n+    return (m_start_bit_offset == other.m_start_bit_offset\n+\t    && m_size_in_bits == other.m_size_in_bits);\n+  }\n+\n+  static int cmp (const bit_range &br1, const bit_range &br2);\n+\n+  bit_offset_t m_start_bit_offset;\n+  bit_size_t m_size_in_bits;\n+};\n+\n /* Concrete subclass of binding_key, for describing a concrete range of\n    bits within the binding_map (e.g. \"bits 8-15\").  */\n \n@@ -279,46 +315,49 @@ class concrete_binding : public binding_key\n   concrete_binding (bit_offset_t start_bit_offset, bit_size_t size_in_bits,\n \t\t    enum binding_kind kind)\n   : binding_key (kind),\n-    m_start_bit_offset (start_bit_offset),\n-    m_size_in_bits (size_in_bits)\n+    m_bit_range (start_bit_offset, size_in_bits)\n   {}\n   bool concrete_p () const FINAL OVERRIDE { return true; }\n \n   hashval_t hash () const\n   {\n     inchash::hash hstate;\n-    hstate.add_wide_int (m_start_bit_offset);\n-    hstate.add_wide_int (m_size_in_bits);\n+    hstate.add_wide_int (m_bit_range.m_start_bit_offset);\n+    hstate.add_wide_int (m_bit_range.m_size_in_bits);\n     return hstate.end () ^ binding_key::impl_hash ();\n   }\n   bool operator== (const concrete_binding &other) const\n   {\n     if (!binding_key::impl_eq (other))\n       return false;\n-    return (m_start_bit_offset == other.m_start_bit_offset\n-\t    && m_size_in_bits == other.m_size_in_bits);\n+    return m_bit_range == other.m_bit_range;\n   }\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n \n   const concrete_binding *dyn_cast_concrete_binding () const FINAL OVERRIDE\n   { return this; }\n \n-  bit_offset_t get_start_bit_offset () const { return m_start_bit_offset; }\n-  bit_size_t get_size_in_bits () const { return m_size_in_bits; }\n+  bit_offset_t get_start_bit_offset () const\n+  {\n+    return m_bit_range.m_start_bit_offset;\n+  }\n+  bit_size_t get_size_in_bits () const\n+  {\n+    return m_bit_range.m_size_in_bits;\n+  }\n   /* Return the next bit offset after the end of this binding.  */\n   bit_offset_t get_next_bit_offset () const\n   {\n-    return m_start_bit_offset + m_size_in_bits;\n+    return m_bit_range.get_next_bit_offset ();\n   }\n \n   bool overlaps_p (const concrete_binding &other) const;\n \n   static int cmp_ptr_ptr (const void *, const void *);\n \n private:\n-  bit_offset_t m_start_bit_offset;\n-  bit_size_t m_size_in_bits;\n+  bit_range m_bit_range;\n };\n \n } // namespace ana"}]}