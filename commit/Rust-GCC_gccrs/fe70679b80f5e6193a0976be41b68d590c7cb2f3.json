{"sha": "fe70679b80f5e6193a0976be41b68d590c7cb2f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3MDY3OWI4MGY1ZTYxOTNhMDk3NmJlNDFiNjhkNTkwYzdjYjJmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-08T21:44:53Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-09T14:28:07Z"}, "message": "c++: Fix printing of decltype(nullptr) [PR97517]\n\nThe C++ printer doesn't handle NULLPTR_TYPE, so we issue the ugly\n\"'nullptr_type' not supported by...\".  Since NULLPTR_TYPE is\ndecltype(nullptr), it seemed reasonable to handle it where we\nhandle DECLTYPE_TYPE, that is, in the simple-type-specifier handler.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97517\n\t* cxx-pretty-print.c (cxx_pretty_printer::simple_type_specifier): Handle\n\tNULLPTR_TYPE.\n\t(pp_cxx_type_specifier_seq): Likewise.\n\t(cxx_pretty_printer::type_id): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97517\n\t* g++.dg/diagnostic/nullptr.C: New test.", "tree": {"sha": "cb27930bc49389c043a7adb431c4a28d616be061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb27930bc49389c043a7adb431c4a28d616be061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe70679b80f5e6193a0976be41b68d590c7cb2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe70679b80f5e6193a0976be41b68d590c7cb2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe70679b80f5e6193a0976be41b68d590c7cb2f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe70679b80f5e6193a0976be41b68d590c7cb2f3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d2f41785b24ad43c5a9d52aa289e33ac838f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d2f41785b24ad43c5a9d52aa289e33ac838f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d2f41785b24ad43c5a9d52aa289e33ac838f86"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "e18927008edd901ecc826e7f1efb0bda73132057", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe70679b80f5e6193a0976be41b68d590c7cb2f3/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe70679b80f5e6193a0976be41b68d590c7cb2f3/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=fe70679b80f5e6193a0976be41b68d590c7cb2f3", "patch": "@@ -1381,6 +1381,10 @@ cxx_pretty_printer::simple_type_specifier (tree t)\n       pp_cxx_right_paren (this);\n       break;\n \n+    case NULLPTR_TYPE:\n+      pp_cxx_ws_string (this, \"std::nullptr_t\");\n+      break;\n+\n     default:\n       c_pretty_printer::simple_type_specifier (t);\n       break;\n@@ -1408,6 +1412,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n     case TYPE_DECL:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n     case DECLTYPE_TYPE:\n+    case NULLPTR_TYPE:\n       pp_cxx_cv_qualifier_seq (pp, t);\n       pp->simple_type_specifier (t);\n       break;\n@@ -1873,6 +1878,7 @@ cxx_pretty_printer::type_id (tree t)\n     case TYPEOF_TYPE:\n     case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n+    case NULLPTR_TYPE:\n     case TEMPLATE_ID_EXPR:\n     case OFFSET_TYPE:\n       pp_cxx_type_specifier_seq (this, t);"}, {"sha": "bc0d8296bd9c7273f0bef5c7123f606e70220137", "filename": "gcc/testsuite/g++.dg/diagnostic/nullptr.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe70679b80f5e6193a0976be41b68d590c7cb2f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnullptr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe70679b80f5e6193a0976be41b68d590c7cb2f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnullptr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnullptr.C?ref=fe70679b80f5e6193a0976be41b68d590c7cb2f3", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/97517\n+// { dg-do compile { target c++20 } }\n+// Test that we print \"decltype(nullptr)\" correctly.\n+\n+template<typename T> struct Trait { static constexpr bool value = false; };\n+template<typename T> concept Concept = Trait<T>::value; // { dg-message {\\[with T = std::nullptr_t\\]} }\n+static_assert( Concept<decltype(nullptr)> ); // { dg-error \"static assertion failed\" }\n+// { dg-message \"constraints not satisfied\" \"\" { target *-*-* } .-1 }"}]}