{"sha": "229970c41d7a84ee408a5d8e75b6b153ce82bc35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5OTcwYzQxZDdhODRlZTQwOGE1ZDhlNzViNmIxNTNjZTgyYmMzNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-03-10T22:40:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-03-10T22:40:41Z"}, "message": "PR c++/16387, c++/16389\n\n        PR c++/16387, c++/16389\n        * typeck.c (cxx_alignof_expr, cxx_sizeof_expr): New functions.\n        (cxx_sizeof_or_alignof_expr): Split out from here.\n\nFrom-SVN: r111945", "tree": {"sha": "bef2e9f13e59886c83e1b826a130b6382dfc13b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef2e9f13e59886c83e1b826a130b6382dfc13b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229970c41d7a84ee408a5d8e75b6b153ce82bc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229970c41d7a84ee408a5d8e75b6b153ce82bc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229970c41d7a84ee408a5d8e75b6b153ce82bc35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229970c41d7a84ee408a5d8e75b6b153ce82bc35/comments", "author": null, "committer": null, "parents": [{"sha": "1a919c563225a398a53fff2a735f37fcf6a2c617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a919c563225a398a53fff2a735f37fcf6a2c617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a919c563225a398a53fff2a735f37fcf6a2c617"}], "stats": {"total": 113, "additions": 101, "deletions": 12}, "files": [{"sha": "77c03091754d63085630751477b6c219ee62d250", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=229970c41d7a84ee408a5d8e75b6b153ce82bc35", "patch": "@@ -1,3 +1,9 @@\n+2006-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/16387, c++/16389\n+\t* typeck.c (cxx_alignof_expr, cxx_sizeof_expr): New functions.\n+\t(cxx_sizeof_or_alignof_expr): Split out from here.\n+\n 2006-03-09  Diego Novillo  <dnovillo@redhat.com>\n \n \tMerge from gomp-20050608-branch\n@@ -209,7 +215,8 @@\n \t\t* decl.c (poplevel_named_label_1): Restore creation of the\n \t\tbad_decls list.\n \t\t(decl_jump_unsafe): Check for error_mark_node types.\n-\t\t(check_goto): Don't check cdtor_label.  Don't use identify_goto.                * semantics.c (finish_return_stmt): Do check_omp_return before\n+\t\t(check_goto): Don't check cdtor_label.  Don't use identify_goto.\n+                * semantics.c (finish_return_stmt): Do check_omp_return before\n \t\tconverting to cdtor_label goto.\n \n \t2005-10-21  Richard Henderson  <rth@redhat.com>"}, {"sha": "f94f09504fb570b545b11a698bdf5e7f6fa674e1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 70, "deletions": 11, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=229970c41d7a84ee408a5d8e75b6b153ce82bc35", "patch": "@@ -1267,20 +1267,17 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n   return value;\n }\n \n-/* Process a sizeof or alignof expression where the operand is an\n-   expression.  */\n+/* Process a sizeof expression where the operand is an expression.  */\n \n-tree\n-cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n+static tree\n+cxx_sizeof_expr (tree e)\n {\n-  const char *op_name = operator_name_info[(int) op].name;\n-\n   if (e == error_mark_node)\n     return error_mark_node;\n \n   if (processing_template_decl)\n     {\n-      e = build_min (op, size_type_node, e);\n+      e = build_min (SIZEOF_EXPR, size_type_node, e);\n       TREE_SIDE_EFFECTS (e) = 0;\n       TREE_READONLY (e) = 1;\n \n@@ -1291,13 +1288,13 @@ cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n       && TREE_CODE (TREE_OPERAND (e, 1)) == FIELD_DECL\n       && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))\n     {\n-      error (\"invalid application of %qs to a bit-field\", op_name);\n+      error (\"invalid application of %<sizeof%> to a bit-field\");\n       e = char_type_node;\n     }\n   else if (is_overloaded_fn (e))\n     {\n-      pedwarn (\"ISO C++ forbids applying %qs to an expression of \"\n-\t       \"function type\", op_name);\n+      pedwarn (\"ISO C++ forbids applying %<sizeof%> to an expression of \"\n+\t       \"function type\");\n       e = char_type_node;\n     }\n   else if (type_unknown_p (e))\n@@ -1308,9 +1305,71 @@ cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n   else\n     e = TREE_TYPE (e);\n \n-  return cxx_sizeof_or_alignof_type (e, op, true);\n+  return cxx_sizeof_or_alignof_type (e, SIZEOF_EXPR, true);\n }\n \n+/* Implement the __alignof keyword: Return the minimum required\n+   alignment of EXPR, measured in bytes.  For VAR_DECL's and\n+   FIELD_DECL's return DECL_ALIGN (which can be set from an\n+   \"aligned\" __attribute__ specification).  */\n+\n+static tree\n+cxx_alignof_expr (tree e)\n+{\n+  tree t;\n+  \n+  if (e == error_mark_node)\n+    return error_mark_node;\n+\n+  if (processing_template_decl)\n+    {\n+      e = build_min (ALIGNOF_EXPR, size_type_node, e);\n+      TREE_SIDE_EFFECTS (e) = 0;\n+      TREE_READONLY (e) = 1;\n+\n+      return e;\n+    }\n+\n+  if (TREE_CODE (e) == VAR_DECL)\n+    t = size_int (DECL_ALIGN_UNIT (e));\n+  else if (TREE_CODE (e) == COMPONENT_REF\n+\t   && TREE_CODE (TREE_OPERAND (e, 1)) == FIELD_DECL\n+\t   && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))\n+    {\n+      error (\"invalid application of %<__alignof%> to a bit-field\");\n+      t = size_one_node;\n+    }\n+  else if (TREE_CODE (e) == COMPONENT_REF\n+\t   && TREE_CODE (TREE_OPERAND (e, 1)) == FIELD_DECL)\n+    t = size_int (DECL_ALIGN_UNIT (TREE_OPERAND (e, 1)));\n+  else if (is_overloaded_fn (e))\n+    {\n+      pedwarn (\"ISO C++ forbids applying %<__alignof%> to an expression of \"\n+\t       \"function type\");\n+      t = size_one_node;\n+    }\n+  else if (type_unknown_p (e))\n+    {\n+      cxx_incomplete_type_error (e, TREE_TYPE (e));\n+      t = size_one_node;\n+    }\n+  else\n+    return cxx_sizeof_or_alignof_type (TREE_TYPE (e), ALIGNOF_EXPR, true);\n+\n+  return fold_convert (size_type_node, t);\n+}\n+\n+/* Process a sizeof or alignof expression where the operand is an\n+   expression.  */\n+\n+tree\n+cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n+{\n+  if (op == SIZEOF_EXPR)\n+    return cxx_sizeof_expr (e);\n+  else\n+    return cxx_alignof_expr (e);\n+}\n \f\n /* EXPR is being used in a context that is not a function call.\n    Enforce:"}, {"sha": "81e1ef48fbf173f42dcb22f9986eb011cd60e2c8", "filename": "gcc/testsuite/g++.dg/ext/alignof2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229970c41d7a84ee408a5d8e75b6b153ce82bc35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof2.C?ref=229970c41d7a84ee408a5d8e75b6b153ce82bc35", "patch": "@@ -0,0 +1,23 @@\n+// PRs 16387 and 16389\n+// We were treating alignof (sa.a) as alignof (typeof (sa.a)), which is\n+// wrong for some fields.\n+\n+extern \"C\" void abort();\n+\n+struct A\n+{\n+  double a; \n+} sa;\n+\n+struct B\n+{\n+  char c;\n+  double b;\n+} sb;\n+\n+int main()\n+{\n+  if (__alignof (sa) != __alignof (sa.a)\n+      || __alignof (sb) != __alignof (sb.b))\n+    abort();\n+}"}]}