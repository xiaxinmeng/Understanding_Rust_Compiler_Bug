{"sha": "8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwZDc0M2MyZGVlNmFmYWU1YzZmODYxYjA2NDJiN2IxMTJhNGE3MA==", "commit": {"author": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-08-17T15:00:35Z"}, "committer": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-09-15T14:51:28Z"}, "message": "tree-optimization/94234 - add plusminus-with-convert pattern\n\nAdd a rule (T)(A) +- (T)(B) -> (T)(A +- B), which works only when (A +- B)\ncould be folded to a simple value. By this rule, a plusminus-mult-with-convert\nexpression could be handed over to the rule (A * C) +- (B * C) -> (A +- B).\n\n2020-09-15  Feng Xue  <fxue@os.amperecomputing.com>\n\ngcc/\n\tPR tree-optimization/94234\n\t* match.pd (T)(A) +- (T)(B) -> (T)(A +- B): New simplification.\n\ngcc/testsuite/\n\tPR tree-optimization/94234\n\t* gcc.dg/pr94234-3.c: New test.", "tree": {"sha": "dc5f349561cd3bf9bbdca113a1504741fa88b513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5f349561cd3bf9bbdca113a1504741fa88b513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d743c2dee6afae5c6f861b0642b7b112a4a70/comments", "author": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e89fa0e2d7da77236cad50c0a9a33b7a4b97367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e89fa0e2d7da77236cad50c0a9a33b7a4b97367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e89fa0e2d7da77236cad50c0a9a33b7a4b97367"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "7d63bb973cbd70251a510d1d7be30c011e1071bf", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d743c2dee6afae5c6f861b0642b7b112a4a70/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d743c2dee6afae5c6f861b0642b7b112a4a70/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "patch": "@@ -2397,6 +2397,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        (plus (convert @0) (op @2 (convert @1))))))\n #endif\n \n+/* (T)(A) +- (T)(B) -> (T)(A +- B) only when (A +- B) could be simplified\n+   to a simple value.  */\n+#if GIMPLE\n+  (for op (plus minus)\n+   (simplify\n+    (op (convert @0) (convert @1))\n+     (if (INTEGRAL_TYPE_P (type)\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t  && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0))\n+\t  && types_match (TREE_TYPE (@0), TREE_TYPE (@1))\n+\t  && !TYPE_OVERFLOW_TRAPS (type)\n+\t  && !TYPE_OVERFLOW_SANITIZED (type))\n+      (convert (op! @0 @1)))))\n+#endif\n+\n   /* ~A + A -> -1 */\n   (simplify\n    (plus:c (bit_not @0) @0)"}, {"sha": "9bb9b46bd96b6331169ff15436bdfb9695092f53", "filename": "gcc/testsuite/gcc.dg/pr94234-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d743c2dee6afae5c6f861b0642b7b112a4a70/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d743c2dee6afae5c6f861b0642b7b112a4a70/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-3.c?ref=8f0d743c2dee6afae5c6f861b0642b7b112a4a70", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+\n+ptrdiff_t foo1 (char *a, size_t n)\n+{\n+  char *b1 = a + 8 * n;\n+  char *b2 = a + 8 * (n - 1);\n+\n+  return b1 - b2;\n+}\n+\n+int use_ptr (char *a, char *b);\n+\n+ptrdiff_t foo2 (char *a, size_t n)\n+{\n+  char *b1 = a + 8 * (n - 1);\n+  char *b2 = a + 8 * n;\n+\n+  use_ptr (b1, b2);\n+\n+  return b1 - b2;\n+}\n+\n+int use_int (int i);\n+\n+unsigned goo (unsigned m_param, unsigned n_param)\n+{\n+  unsigned b1 = m_param * (n_param + 2);\n+  unsigned b2 = m_param * (n_param + 1);\n+  int r = (int)(b1) - (int)(b2);\n+\n+  use_int (r);\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 8;\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return -8;\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return m_param\" 1 \"forwprop1\" } } */"}]}