{"sha": "30255340f644e560f84b0563a1bd3d97ef38c069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyNTUzNDBmNjQ0ZTU2MGY4NGIwNTYzYTFiZDNkOTdlZjM4YzA2OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-02-13T16:18:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-02-13T16:18:13Z"}, "message": "re PR libffi/60073 (64-bit libffi.call/cls_double_va.c FAILs after recent modification)\n\n\tPR libffi/60073\n\t* src/sparc/ffitarget.h (FFI_TARGET_SPECIFIC_VARIADIC): Define.\n\t(FFI_EXTRA_CIF_FIELDS): Likewise.\n\t(FFI_NATIVE_RAW_API): Move around.\n\t* src/sparc/ffi.c (ffi_prep_cif_machdep_core): New function from...\n\t(ffi_prep_cif_machdep): ...here.  Call ffi_prep_cif_machdep_core.\n\t(ffi_prep_cif_machdep_var): New function.\n\t(ffi_closure_sparc_inner_v9): Do not pass anonymous FP arguments in\n\tFP registers.\n\t* doc/libffi.texi (Introduction): Fix inaccuracy.\n\nFrom-SVN: r207763", "tree": {"sha": "71b968dc5cf8824d0de4f4ad075137f6d9b67a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b968dc5cf8824d0de4f4ad075137f6d9b67a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30255340f644e560f84b0563a1bd3d97ef38c069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30255340f644e560f84b0563a1bd3d97ef38c069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30255340f644e560f84b0563a1bd3d97ef38c069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30255340f644e560f84b0563a1bd3d97ef38c069/comments", "author": null, "committer": null, "parents": [{"sha": "662dae0db08b878a49f7a11cc35f8441fe7428b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662dae0db08b878a49f7a11cc35f8441fe7428b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662dae0db08b878a49f7a11cc35f8441fe7428b3"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "f4fe5178cfeee9ecdfe4af901bdd6a740381b468", "filename": "libffi/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=30255340f644e560f84b0563a1bd3d97ef38c069", "patch": "@@ -1,3 +1,16 @@\n+2014-02-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR libffi/60073\n+\t* src/sparc/ffitarget.h (FFI_TARGET_SPECIFIC_VARIADIC): Define.\n+\t(FFI_EXTRA_CIF_FIELDS): Likewise.\n+\t(FFI_NATIVE_RAW_API): Move around.\n+\t* src/sparc/ffi.c (ffi_prep_cif_machdep_core): New function from...\n+\t(ffi_prep_cif_machdep): ...here.  Call ffi_prep_cif_machdep_core.\n+\t(ffi_prep_cif_machdep_var): New function.\n+\t(ffi_closure_sparc_inner_v9): Do not pass anonymous FP arguments in\n+\tFP registers.\n+\t* doc/libffi.texi (Introduction): Fix inaccuracy.\n+\n 2013-12-10  Alan Modra  <amodra@gmail.com>\n \n \t* src/powerpc/ffitarget.h: Import from upstream.\n@@ -729,7 +742,7 @@\n \t* src/sparc/ffi.c (ffi_prep_closure_loc): Don't ASSERT ABI test,\n \tjust return FFI_BAD_ABI when things are wrong.\n \n-2012-02-11  Eric Botcazou  <ebotcazou@adacore.com>\n+2011-02-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* src/sparc/v9.S (STACKFRAME): Bump to 176.\n "}, {"sha": "04888ece62ef82c1ead0aeff424b801a0780bd52", "filename": "libffi/doc/libffi.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fdoc%2Flibffi.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fdoc%2Flibffi.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fdoc%2Flibffi.texi?ref=30255340f644e560f84b0563a1bd3d97ef38c069", "patch": "@@ -63,14 +63,14 @@ section entitled ``GNU General Public License''.\n @node Introduction\n @chapter What is libffi?\n \n-Compilers for high level languages generate code that follow certain\n+Compilers for high-level languages generate code that follow certain\n conventions.  These conventions are necessary, in part, for separate\n compilation to work.  One such convention is the @dfn{calling\n convention}.  The calling convention is a set of assumptions made by\n the compiler about where function arguments will be found on entry to\n a function.  A calling convention also specifies where the return\n-value for a function is found.  The calling convention is also\n-sometimes called the @dfn{ABI} or @dfn{Application Binary Interface}.\n+value for a function is found.  The calling convention is part of\n+what is called the @dfn{ABI} or @dfn{Application Binary Interface}.\n @cindex calling convention\n @cindex ABI\n @cindex Application Binary Interface"}, {"sha": "a4ee84ec51471f1caa6244a580ee2f3dc4916fe0", "filename": "libffi/src/sparc/ffi.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fsrc%2Fsparc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fsrc%2Fsparc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fffi.c?ref=30255340f644e560f84b0563a1bd3d97ef38c069", "patch": "@@ -249,7 +249,7 @@ int ffi_prep_args_v9(char *stack, extended_cif *ecif)\n }\n \n /* Perform machine dependent cif processing */\n-ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n+static ffi_status ffi_prep_cif_machdep_core(ffi_cif *cif)\n {\n   int wordsize;\n \n@@ -334,6 +334,19 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n   return FFI_OK;\n }\n \n+ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n+{\n+  cif->nfixedargs = cif->nargs;\n+  return ffi_prep_cif_machdep_core (cif);\n+}\n+\n+ffi_status ffi_prep_cif_machdep_var(ffi_cif *cif, unsigned int nfixedargs,\n+\t\t\t\t    unsigned int ntotalargs)\n+{\n+  cif->nfixedargs = nfixedargs;\n+  return ffi_prep_cif_machdep_core (cif);\n+}\n+\n int ffi_v9_layout_struct(ffi_type *arg, int off, char *ret, char *intg, char *flt)\n {\n   ffi_type **ptr = &arg->elements[0];\n@@ -604,8 +617,7 @@ ffi_closure_sparc_inner_v9(ffi_closure *closure,\n \n   /* Copy the caller's structure return address so that the closure\n      returns the data directly to the caller.  */\n-  if (cif->flags == FFI_TYPE_VOID\n-      && cif->rtype->type == FFI_TYPE_STRUCT)\n+  if (cif->flags == FFI_TYPE_VOID && cif->rtype->type == FFI_TYPE_STRUCT)\n     {\n       rvalue = (void *) gpr[0];\n       /* Skip the structure return address.  */\n@@ -619,6 +631,10 @@ ffi_closure_sparc_inner_v9(ffi_closure *closure,\n   /* Grab the addresses of the arguments from the stack frame.  */\n   for (i = 0; i < cif->nargs; i++)\n     {\n+      /* If the function is variadic, FP arguments are passed in FP\n+\t registers only if the corresponding parameter is named.  */\n+      const int named = (i < cif->nfixedargs);\n+\n       if (arg_types[i]->type == FFI_TYPE_STRUCT)\n \t{\n \t  if (arg_types[i]->size > 16)\n@@ -633,7 +649,9 @@ ffi_closure_sparc_inner_v9(ffi_closure *closure,\n \t\t\t\t   0,\n \t\t\t\t   (char *) &gpr[argn],\n \t\t\t\t   (char *) &gpr[argn],\n-\t\t\t\t   (char *) &fpr[argn]);\n+\t\t\t\t   named\n+\t\t\t\t   ? (char *) &fpr[argn]\n+\t\t\t\t   : (char *) &gpr[argn]);\n \t      avalue[i] = &gpr[argn];\n \t      argn += ALIGN(arg_types[i]->size, FFI_SIZEOF_ARG) / FFI_SIZEOF_ARG;\n \t    }\n@@ -649,6 +667,7 @@ ffi_closure_sparc_inner_v9(ffi_closure *closure,\n \t    argn++;\n #endif\n \t  if (i < fp_slot_max\n+\t      && named\n \t      && (arg_types[i]->type == FFI_TYPE_FLOAT\n \t\t  || arg_types[i]->type == FFI_TYPE_DOUBLE\n #if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n@@ -662,7 +681,7 @@ ffi_closure_sparc_inner_v9(ffi_closure *closure,\n     }\n \n   /* Invoke the closure.  */\n-  (closure->fun) (cif, rvalue, avalue, closure->user_data);\n+  closure->fun (cif, rvalue, avalue, closure->user_data);\n \n   /* Tell ffi_closure_sparc how to perform return type promotions.  */\n   return cif->rtype->type;"}, {"sha": "a1f5e494820f16584f7e6c390cdd10a950d3aa37", "filename": "libffi/src/sparc/ffitarget.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fsrc%2Fsparc%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30255340f644e560f84b0563a1bd3d97ef38c069/libffi%2Fsrc%2Fsparc%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fffitarget.h?ref=30255340f644e560f84b0563a1bd3d97ef38c069", "patch": "@@ -58,16 +58,17 @@ typedef enum ffi_abi {\n } ffi_abi;\n #endif\n \n+#define FFI_TARGET_SPECIFIC_VARIADIC 1\n+#define FFI_EXTRA_CIF_FIELDS unsigned int nfixedargs\n+\n /* ---- Definitions for closures ----------------------------------------- */\n \n #define FFI_CLOSURES 1\n-#define FFI_NATIVE_RAW_API 0\n-\n #ifdef SPARC64\n #define FFI_TRAMPOLINE_SIZE 24\n #else\n #define FFI_TRAMPOLINE_SIZE 16\n #endif\n+#define FFI_NATIVE_RAW_API 0\n \n #endif\n-"}]}