{"sha": "df569f7da567af4996821dc0a1871eec79957d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY1NjlmN2RhNTY3YWY0OTk2ODIxZGMwYTE4NzFlZWM3OTk1N2QwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:33:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:33:55Z"}, "message": "match.pd: Optimize ffs of known non-zero arg into ctz + 1 [PR94956]\n\nThe ffs expanders on several targets (x86, ia64, aarch64 at least)\nemit a conditional move or similar code to handle the case when the\nargument is 0, which makes the code longer.\nIf we know from VRP that the argument will not be zero, we can (if the\ntarget has also an ctz expander) just use ctz which is undefined at zero\nand thus the expander doesn't need to deal with that.\n\n2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94956\n\t* match.pd (FFS): Optimize __builtin_ffs* of non-zero argument into\n\t__builtin_ctz* + 1 if direct IFN_CTZ is supported.\n\n\t* gcc.target/i386/pr94956.c: New test.", "tree": {"sha": "cc4ced8f3fc3149413fca20171fb9bedf899abed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4ced8f3fc3149413fca20171fb9bedf899abed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df569f7da567af4996821dc0a1871eec79957d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df569f7da567af4996821dc0a1871eec79957d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df569f7da567af4996821dc0a1871eec79957d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df569f7da567af4996821dc0a1871eec79957d04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff33680165346cb291667f38dd2e9f25a74cc3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff33680165346cb291667f38dd2e9f25a74cc3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff33680165346cb291667f38dd2e9f25a74cc3c3"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "5bad3ff924b27004db2679ba3d866c53df7207f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df569f7da567af4996821dc0a1871eec79957d04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df569f7da567af4996821dc0a1871eec79957d04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df569f7da567af4996821dc0a1871eec79957d04", "patch": "@@ -1,5 +1,9 @@\n 2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94956\n+\t* match.pd (FFS): Optimize __builtin_ffs* of non-zero argument into\n+\t__builtin_ctz* + 1 if direct IFN_CTZ is supported.\n+\n \tPR tree-optimization/94913\n \t* match.pd (A - B + -1 >= A to B >= A): New simplification.\n \t(A - B > A to A < B): Don't test TYPE_OVERFLOW_WRAPS which is always"}, {"sha": "892df1ec3d39ee715d088ae9975c822460d48621", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=df569f7da567af4996821dc0a1871eec79957d04", "patch": "@@ -5986,6 +5986,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& direct_internal_fn_supported_p (IFN_POPCOUNT, type,\n \t\t\t\t\t   OPTIMIZE_FOR_BOTH))\n     (convert (IFN_POPCOUNT:type @0)))))\n+\n+/* __builtin_ffs needs to deal on many targets with the possible zero\n+   argument.  If we know the argument is always non-zero, __builtin_ctz + 1\n+   should lead to better code.  */\n+(simplify\n+ (FFS tree_expr_nonzero_p@0)\n+ (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && direct_internal_fn_supported_p (IFN_CTZ, TREE_TYPE (@0),\n+\t\t\t\t\t OPTIMIZE_FOR_SPEED))\n+  (plus (CTZ:type @0) { build_one_cst (type); })))\n #endif\n \n /* Simplify:"}, {"sha": "e8c54c7cd67764d88d6cb362b59ab8f8c624ab28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df569f7da567af4996821dc0a1871eec79957d04", "patch": "@@ -1,5 +1,8 @@\n 2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94956\n+\t* gcc.target/i386/pr94956.c: New test.\n+\n \tPR tree-optimization/94913\n \t* gcc.dg/tree-ssa/pr94913.c: New test.\n "}, {"sha": "cc27b451136d715c12dbf11433623bc3093db854", "filename": "gcc/testsuite/gcc.target/i386/pr94956.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df569f7da567af4996821dc0a1871eec79957d04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94956.c?ref=df569f7da567af4996821dc0a1871eec79957d04", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/94956 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmovne\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsete\\t\" } } */\n+\n+int\n+foo (unsigned x)\n+{\n+  if (x == 0) __builtin_unreachable ();\n+  return __builtin_ffs (x) - 1;\n+}\n+\n+int\n+bar (unsigned long x)\n+{\n+  if (x == 0) __builtin_unreachable ();\n+  return __builtin_ffsl (x) - 1;\n+}\n+\n+#ifdef __x86_64__\n+int\n+baz (unsigned long long x)\n+{\n+  if (x == 0) __builtin_unreachable ();\n+  return __builtin_ffsll (x) - 1;\n+}\n+#endif"}]}