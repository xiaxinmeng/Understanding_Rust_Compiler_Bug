{"sha": "a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjY2YzYzI4YzllN2E3OWFjZTNmMGMyMGQwMDBmMjg1YmM3MzJlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-11-27T10:09:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-11-27T10:09:32Z"}, "message": "mips-protos.h (mips_emit_binary): Declare.\n\ngcc/\n\t* config/mips/mips-protos.h (mips_emit_binary): Declare.\n\t* config/mips/mips.c (mips_emit_binary): Make global.\n\t(mips_set_mips16_mode): Turn off -mfix-r4000 in MIPS16 mode.\n\t(mips_conditional_register_usage): Don't treat LO and HI as\n\tregister operands in MIPS16 mode.\n\t(mips_mulsidi3_gen_fn): Use {u,}mulsidi3_{32,64}bit_mips16\n\tfor MIPS16 code.\n\t* config/mips/predicates.md (muldiv_target_operand): New predicate.\n\t(move_operand): Allow hilo_operand.\n\t* config/mips/mips.md (mul<mode>3): Explicitly specify LO as the\n\ttarget of MIPS16 multiplies, then move it into the target register.\n\t(mul<mode>3_internal, *macc2, *msac2): Use muldiv_target_operand.\n\t(<u>mulsidi3_32bit_mips16): New expander.\n\t(<u>mulsidi3_32bit): Use muldiv_target_operand.\n\t(<u>mulsidi3_32bit_r4000): Disable for ISA_HAS_DSP.\n\t(<u>mulsidi3_64bit): Require !TARGET_MIPS16.  Split into\n\t<u>mulsidi3_64bit_split.\n\t(<u>mulsidi3_64bit_mips16): New expander.\n\t(<u>mulsidi3_64bit_split): Likewise, using expansions from\n\ttwo previous define_splits.\n\t(<u>mulsidi3_64bit_hilo, *muls<u>_di, <u>msubsidi4): Use\n\tmuldiv_target_operand.\n\t(<su>mulsi3_highpart): Use <su>mulsi3_highpart_split for MIPS16 code.\n\t(<su>mulsi3_highpart_internal): Require !TARGET_MIPS16.\n\tSplit into <su>mulsi3_highpart_split.\n\t(<su>mulsi3_highpart_split): New expander.\n\t(<su>muldi3_highpart): Turn into a define_expand.\n\tUse <su>muldi3_highpart_split for MIPS16 code.\n\t(<su>muldi3_highpart_internal): Renamed from <su>muldi3_highpart.\n\tRequire !TARGET_MIPS16.  Split into <su>muldi3_highpart_split.\n\t(<su>muldi3_highpart_split): New expander.\n\t(<u>mulditi3): Explicitly specify LO as the target of MIPS16\n\tmultiplies, then move it into the target register.\n\t(<u>mulditi3_internal, <u>maddsidi4): Use muldiv_target_operand.\n\t(divmod<mode>4, udivmod<mode>4): Turn into define_expands.\n\tUse <u>divmod<mode>4_split for MIPS16 code, then explicitly\n\tmove LO into operand 0.\n\t(divmod<mode>4_internal, udivmod<mode>4_internal): Renamed\n\tfrom <u>divmod<mode>4.  Use muldiv_target_operand.\n\tRequire !TARGET_MIPS16.  Split into <u>divmod<mode>4_split.\n\t(<u>divmod<mode>4_split): New expander.\n\t(<u>divmod<GPR:mode>4_hilo_<HILO:mode>): Use muldiv_target_operand.\n\t(mfhi<GPR:mode>_<HILO:mode>): Use hilo_operand.\n\ngcc/testsuite/\n\t* gcc.target/mips/mult-2.c, gcc.target/mips/mult-3.c,\n\tgcc.target/mips/mult-4.c, gcc.target/mips/mult-5.c,\n\tgcc.target/mips/mult-6.c, gcc.target/mips/mult-7.c,\n\tgcc.target/mips/mult-8.c, gcc.target/mips/mult-9.c,\n\tgcc.target/mips/mult-10.c, gcc.target/mips/mult-11.c,\n\tgcc.target/mips/mult-12.c, gcc.target/mips/mult-13.c,\n\tgcc.target/mips/mult-14.c, gcc.target/mips/mult-15.c,\n\tgcc.target/mips/mult-16.c, gcc.target/mips/mult-17.c,\n\tgcc.target/mips/mult-18.c, gcc.target/mips/mult-19.c,\n\tgcc.target/mips/div-1.c, gcc.target/mips/div-2.c,\n\tgcc.target/mips/div-3.c, gcc.target/mips/div-4.c,\n\tgcc.target/mips/div-5.c, gcc.target/mips/div-6.c,\n\tgcc.target/mips/div-7.c, gcc.target/mips/div-8.c,\n\tgcc.target/mips/div-9.c, gcc.target/mips/div-10.c,\n\tgcc.target/mips/div-11.c, gcc.target/mips/div-12.c: New tests.\n\t* gcc.target/mips/fix-r4000-1.c (foo, bar): Add NOMIPS16.\n\t* gcc.target/mips/fix-r4000-2.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-3.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-4.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-5.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-6.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-7.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-8.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-9.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-10.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-11.c (foo): Likewise.\n\t* gcc.target/mips/fix-r4000-12.c (foo): Likewise.\n\nFrom-SVN: r181761", "tree": {"sha": "fc4988c84b4e820e462f8c7da4e0ef7622326369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4988c84b4e820e462f8c7da4e0ef7622326369"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "006b72bffc64518d4e486982c548ec831dae2392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006b72bffc64518d4e486982c548ec831dae2392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006b72bffc64518d4e486982c548ec831dae2392"}], "stats": {"total": 857, "additions": 730, "deletions": 127}, "files": [{"sha": "843c4460ffb0cd457ea834e9cb955e9c3f833eb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,3 +1,49 @@\n+2011-11-27  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-protos.h (mips_emit_binary): Declare.\n+\t* config/mips/mips.c (mips_emit_binary): Make global.\n+\t(mips_set_mips16_mode): Turn off -mfix-r4000 in MIPS16 mode.\n+\t(mips_conditional_register_usage): Don't treat LO and HI as\n+\tregister operands in MIPS16 mode.\n+\t(mips_mulsidi3_gen_fn): Use {u,}mulsidi3_{32,64}bit_mips16\n+\tfor MIPS16 code.\n+\t* config/mips/predicates.md (muldiv_target_operand): New predicate.\n+\t(move_operand): Allow hilo_operand.\n+\t* config/mips/mips.md (mul<mode>3): Explicitly specify LO as the\n+\ttarget of MIPS16 multiplies, then move it into the target register.\n+\t(mul<mode>3_internal, *macc2, *msac2): Use muldiv_target_operand.\n+\t(<u>mulsidi3_32bit_mips16): New expander.\n+\t(<u>mulsidi3_32bit): Use muldiv_target_operand.\n+\t(<u>mulsidi3_32bit_r4000): Disable for ISA_HAS_DSP.\n+\t(<u>mulsidi3_64bit): Require !TARGET_MIPS16.  Split into\n+\t<u>mulsidi3_64bit_split.\n+\t(<u>mulsidi3_64bit_mips16): New expander.\n+\t(<u>mulsidi3_64bit_split): Likewise, using expansions from\n+\ttwo previous define_splits.\n+\t(<u>mulsidi3_64bit_hilo, *muls<u>_di, <u>msubsidi4): Use\n+\tmuldiv_target_operand.\n+\t(<su>mulsi3_highpart): Use <su>mulsi3_highpart_split for MIPS16 code.\n+\t(<su>mulsi3_highpart_internal): Require !TARGET_MIPS16.\n+\tSplit into <su>mulsi3_highpart_split.\n+\t(<su>mulsi3_highpart_split): New expander.\n+\t(<su>muldi3_highpart): Turn into a define_expand.\n+\tUse <su>muldi3_highpart_split for MIPS16 code.\n+\t(<su>muldi3_highpart_internal): Renamed from <su>muldi3_highpart.\n+\tRequire !TARGET_MIPS16.  Split into <su>muldi3_highpart_split.\n+\t(<su>muldi3_highpart_split): New expander.\n+\t(<u>mulditi3): Explicitly specify LO as the target of MIPS16\n+\tmultiplies, then move it into the target register.\n+\t(<u>mulditi3_internal, <u>maddsidi4): Use muldiv_target_operand.\n+\t(divmod<mode>4, udivmod<mode>4): Turn into define_expands.\n+\tUse <u>divmod<mode>4_split for MIPS16 code, then explicitly\n+\tmove LO into operand 0.\n+\t(divmod<mode>4_internal, udivmod<mode>4_internal): Renamed\n+\tfrom <u>divmod<mode>4.  Use muldiv_target_operand.\n+\tRequire !TARGET_MIPS16.  Split into <u>divmod<mode>4_split.\n+\t(<u>divmod<mode>4_split): New expander.\n+\t(<u>divmod<GPR:mode>4_hilo_<HILO:mode>): Use muldiv_target_operand.\n+\t(mfhi<GPR:mode>_<HILO:mode>): Use hilo_operand.\n+\n 2011-11-27  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* hard-reg-set.h (target_hard_regs): Add x_accessible_reg_set"}, {"sha": "dbabdffaef08c6b9b1ddf63d00448ec1ac039080", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -191,6 +191,9 @@ extern int mips_split_const_insns (rtx);\n extern int mips_load_store_insns (rtx, rtx);\n extern int mips_idiv_insns (void);\n extern rtx mips_emit_move (rtx, rtx);\n+#ifdef RTX_CODE\n+extern void mips_emit_binary (enum rtx_code, rtx, rtx, rtx);\n+#endif\n extern rtx mips_pic_base_register (rtx);\n extern rtx mips_got_load (rtx, rtx, enum mips_symbol_type);\n extern bool mips_split_symbol (rtx, rtx, enum machine_mode, rtx *);"}, {"sha": "3fe91cd1e3e4f7b56a3cad6d2962cb5924f32e62", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -2398,7 +2398,7 @@ mips_force_unary (enum machine_mode mode, enum rtx_code code, rtx op0)\n \n /* Emit an instruction of the form (set TARGET (CODE OP0 OP1)).  */\n \n-static void\n+void\n mips_emit_binary (enum rtx_code code, rtx target, rtx op0, rtx op1)\n {\n   emit_insn (gen_rtx_SET (VOIDmode, target,\n@@ -15250,6 +15250,11 @@ mips_set_mips16_mode (int mips16_p)\n       /* MIPS16 has no BAL instruction.  */\n       target_flags &= ~MASK_RELAX_PIC_CALLS;\n \n+      /* The R4000 errata don't apply to any known MIPS16 cores.\n+\t It's simpler to make the R4000 fixes and MIPS16 mode\n+\t mutually exclusive.  */\n+      target_flags &= ~MASK_FIX_R4000;\n+\n       if (flag_pic && !TARGET_OLDABI)\n \tsorry (\"MIPS16 PIC for ABIs other than o32 and o64\");\n \n@@ -15856,12 +15861,12 @@ mips_conditional_register_usage (void)\n       SET_HARD_REG_BIT (accessible_reg_set, FPSW_REGNUM);\n       fixed_regs[FPSW_REGNUM] = call_used_regs[FPSW_REGNUM] = 1;\n     }\n-  /* In MIPS16 mode, we permit the $t temporary registers to be used\n-     for reload.  We prohibit the unused $s registers, since they\n-     are call-saved, and saving them via a MIPS16 register would\n-     probably waste more time than just reloading the value.  */\n   if (TARGET_MIPS16)\n     {\n+      /* In MIPS16 mode, we permit the $t temporary registers to be used\n+\t for reload.  We prohibit the unused $s registers, since they\n+\t are call-saved, and saving them via a MIPS16 register would\n+\t probably waste more time than just reloading the value.  */\n       fixed_regs[18] = call_used_regs[18] = 1;\n       fixed_regs[19] = call_used_regs[19] = 1;\n       fixed_regs[20] = call_used_regs[20] = 1;\n@@ -15871,6 +15876,12 @@ mips_conditional_register_usage (void)\n       fixed_regs[26] = call_used_regs[26] = 1;\n       fixed_regs[27] = call_used_regs[27] = 1;\n       fixed_regs[30] = call_used_regs[30] = 1;\n+\n+      /* Do not allow HI and LO to be treated as register operands.\n+\t There are no MTHI or MTLO instructions (or any real need\n+\t for them) and one-way registers cannot easily be reloaded.  */\n+      AND_COMPL_HARD_REG_SET (operand_reg_set,\n+\t\t\t      reg_class_contents[(int) MD_REGS]);\n     }\n   /* $f20-$f23 are call-clobbered for n64.  */\n   if (mips_abi == ABI_64)\n@@ -16056,12 +16067,20 @@ mips_mulsidi3_gen_fn (enum rtx_code ext_code)\n \t case we still expand mulsidi3 for DMUL.  */\n       if (ISA_HAS_DMUL3)\n \treturn signed_p ? gen_mulsidi3_64bit_dmul : NULL;\n+      if (TARGET_MIPS16)\n+\treturn (signed_p\n+\t\t? gen_mulsidi3_64bit_mips16\n+\t\t: gen_umulsidi3_64bit_mips16);\n       if (TARGET_FIX_R4000)\n \treturn NULL;\n       return signed_p ? gen_mulsidi3_64bit : gen_umulsidi3_64bit;\n     }\n   else\n     {\n+      if (TARGET_MIPS16)\n+\treturn (signed_p\n+\t\t? gen_mulsidi3_32bit_mips16\n+\t\t: gen_umulsidi3_32bit_mips16);\n       if (TARGET_FIX_R4000 && !ISA_HAS_DSP)\n \treturn signed_p ? gen_mulsidi3_32bit_r4000 : gen_umulsidi3_32bit_r4000;\n       return signed_p ? gen_mulsidi3_32bit : gen_umulsidi3_32bit;"}, {"sha": "55b7fffb6659eef9d7ac0cfa13a3f801a9996ebf", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 225, "deletions": 107, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1331,11 +1331,19 @@\n \t\t  (match_operand:GPR 2 \"register_operand\")))]\n   \"\"\n {\n+  rtx lo;\n+\n   if (TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A)\n     emit_insn (gen_mul<mode>3_mul3_loongson (operands[0], operands[1],\n                                              operands[2]));\n   else if (ISA_HAS_<D>MUL3)\n     emit_insn (gen_mul<mode>3_mul3 (operands[0], operands[1], operands[2]));\n+  else if (TARGET_MIPS16)\n+    {\n+      lo = gen_rtx_REG (<MODE>mode, LO_REGNUM);\n+      emit_insn (gen_mul<mode>3_internal (lo, operands[1], operands[2]));\n+      emit_move_insn (operands[0], lo);\n+    }\n   else if (TARGET_FIX_R4000)\n     emit_insn (gen_mul<mode>3_r4000 (operands[0], operands[1], operands[2]));\n   else\n@@ -1398,7 +1406,7 @@\n         (clobber (match_dup 0))])])\n \n (define_insn \"mul<mode>3_internal\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n+  [(set (match_operand:GPR 0 \"muldiv_target_operand\" \"=l\")\n \t(mult:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"!TARGET_FIX_R4000\"\n@@ -1575,7 +1583,7 @@\n ;; Patterns generated by the define_peephole2 below.\n \n (define_insn \"*macc2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n+  [(set (match_operand:SI 0 \"muldiv_target_operand\" \"=l\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"d\"))\n \t\t (match_dup 0)))\n@@ -1589,7 +1597,7 @@\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"*msac2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n+  [(set (match_operand:SI 0 \"muldiv_target_operand\" \"=l\")\n \t(minus:SI (match_dup 0)\n \t\t  (mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))))\n@@ -1744,11 +1752,25 @@\n   DONE;\n })\n \n+(define_expand \"<u>mulsidi3_32bit_mips16\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n+  \"!TARGET_64BIT && TARGET_MIPS16\"\n+{\n+  rtx hilo;\n+\n+  hilo = gen_rtx_REG (DImode, MD_REG_FIRST);\n+  emit_insn (gen_<u>mulsidi3_32bit (hilo, operands[1], operands[2]));\n+  emit_move_insn (operands[0], hilo);\n+  DONE;\n+})\n+\n ;; As well as being named patterns, these instructions are used by the\n ;; __builtin_mips_mult<u>() functions.  We must always make those functions\n ;; available if !TARGET_64BIT && ISA_HAS_DSP.\n (define_insn \"<u>mulsidi3_32bit\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=ka\")\n+  [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=ka\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"!TARGET_64BIT && (!TARGET_FIX_R4000 || ISA_HAS_DSP)\"\n@@ -1766,84 +1788,80 @@\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:DI 3 \"=x\"))]\n-  \"!TARGET_64BIT && TARGET_FIX_R4000\"\n+  \"!TARGET_64BIT && TARGET_FIX_R4000 && !ISA_HAS_DSP\"\n   \"mult<u>\\t%1,%2\\;mflo\\t%L0\\;mfhi\\t%M0\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"<u>mulsidi3_64bit\"\n+(define_insn_and_split \"<u>mulsidi3_64bit\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:TI 3 \"=x\"))\n    (clobber (match_scratch:DI 4 \"=d\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_DMUL3\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_DMUL3 && !TARGET_MIPS16\"\n   \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_<u>mulsidi3_64bit_split (operands[0], operands[1],\n+\t\t\t\t\t  operands[2], operands[4]));\n+  DONE;\n+}\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")\n    (set (attr \"length\")\n \t(if_then_else (match_test \"ISA_HAS_EXT_INS\")\n \t\t      (const_int 16)\n \t\t      (const_int 28)))])\n \n-(define_split\n-  [(set (match_operand:DI 0 \"d_operand\")\n-\t(mult:DI (any_extend:DI (match_operand:SI 1 \"d_operand\"))\n-\t\t (any_extend:DI (match_operand:SI 2 \"d_operand\"))))\n-   (clobber (match_operand:TI 3 \"hilo_operand\"))\n-   (clobber (match_operand:DI 4 \"d_operand\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000 && ISA_HAS_EXT_INS && reload_completed\"\n-  [(set (match_dup 3)\n-\t(unspec:TI [(mult:DI (any_extend:DI (match_dup 1))\n-\t\t\t     (any_extend:DI (match_dup 2)))]\n-\t\t   UNSPEC_SET_HILO))\n-\n-   ;; OP0 <- LO, OP4 <- HI\n-   (set (match_dup 0) (match_dup 5))\n-   (set (match_dup 4) (unspec:DI [(match_dup 3)] UNSPEC_MFHI))\n-\n-   (set (zero_extract:DI (match_dup 0) (const_int 32) (const_int 32))\n-\t(match_dup 4))]\n-  { operands[5] = gen_rtx_REG (DImode, LO_REGNUM); })\n+(define_expand \"<u>mulsidi3_64bit_mips16\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n+  \"TARGET_64BIT && TARGET_MIPS16\"\n+{\n+  emit_insn (gen_<u>mulsidi3_64bit_split (operands[0], operands[1],\n+\t\t\t\t\t  operands[2], gen_reg_rtx (DImode)));\n+  DONE;\n+})\n \n-(define_split\n-  [(set (match_operand:DI 0 \"d_operand\")\n-\t(mult:DI (any_extend:DI (match_operand:SI 1 \"d_operand\"))\n-\t\t (any_extend:DI (match_operand:SI 2 \"d_operand\"))))\n-   (clobber (match_operand:TI 3 \"hilo_operand\"))\n-   (clobber (match_operand:DI 4 \"d_operand\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_EXT_INS && reload_completed\"\n-  [(set (match_dup 3)\n-\t(unspec:TI [(mult:DI (any_extend:DI (match_dup 1))\n-\t\t\t     (any_extend:DI (match_dup 2)))]\n-\t\t   UNSPEC_SET_HILO))\n-\n-   ;; OP0 <- LO, OP4 <- HI\n-   (set (match_dup 0) (match_dup 5))\n-   (set (match_dup 4) (unspec:DI [(match_dup 3)] UNSPEC_MFHI))\n-\n-   ;; Zero-extend OP0.\n-   (set (match_dup 0)\n-\t(ashift:DI (match_dup 0)\n-\t\t   (const_int 32)))\n-   (set (match_dup 0)\n-\t(lshiftrt:DI (match_dup 0)\n-\t\t     (const_int 32)))\n+(define_expand \"<u>mulsidi3_64bit_split\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n+  \"\"\n+{\n+  rtx hilo;\n \n-   ;; Shift OP4 into place.\n-   (set (match_dup 4)\n-\t(ashift:DI (match_dup 4)\n-\t\t   (const_int 32)))\n+  hilo = gen_rtx_REG (TImode, MD_REG_FIRST);\n+  emit_insn (gen_<u>mulsidi3_64bit_hilo (hilo, operands[1], operands[2]));\n \n-   ;; OR the two halves together\n-   (set (match_dup 0)\n-\t(ior:DI (match_dup 0)\n-\t\t(match_dup 4)))]\n-  { operands[5] = gen_rtx_REG (DImode, LO_REGNUM); })\n+  emit_move_insn (operands[0], gen_rtx_REG (DImode, LO_REGNUM));\n+  emit_insn (gen_mfhidi_ti (operands[3], hilo));\n+\n+  if (ISA_HAS_EXT_INS)\n+    emit_insn (gen_insvdi (operands[0], GEN_INT (32), GEN_INT (32),\n+\t\t\t   operands[3]));\n+  else\n+    {\n+      /* Zero-extend the low part.  */\n+      mips_emit_binary (ASHIFT, operands[0], operands[0], GEN_INT (32));\n+      mips_emit_binary (LSHIFTRT, operands[0], operands[0], GEN_INT (32));\n+\n+      /* Shift the high part into place.  */\n+      mips_emit_binary (ASHIFT, operands[3], operands[3], GEN_INT (32));\n+\n+      /* OR the two halves together.  */\n+      mips_emit_binary (IOR, operands[0], operands[0], operands[3]);\n+    }\n+  DONE;\n+})\n \n (define_insn \"<u>mulsidi3_64bit_hilo\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:TI 0 \"muldiv_target_operand\" \"=x\")\n \t(unspec:TI\n \t  [(mult:DI\n \t     (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n@@ -1867,7 +1885,7 @@\n \n ;; Widening multiply with negation.\n (define_insn \"*muls<u>_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=x\")\n         (neg:DI\n \t (mult:DI\n \t  (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n@@ -1885,9 +1903,9 @@\n ;; in GENERATE_MADD_MSUB for -mno-dsp, but always ignore them for -mdsp,\n ;; even if !ISA_HAS_DSP_MULT.\n (define_insn \"<u>msubsidi4\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=ka\")\n+  [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=ka\")\n         (minus:DI\n-\t   (match_operand:DI 3 \"register_operand\" \"0\")\n+\t   (match_operand:DI 3 \"muldiv_target_operand\" \"0\")\n \t   (mult:DI\n \t      (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t      (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n@@ -1918,6 +1936,9 @@\n     emit_insn (gen_<su>mulsi3_highpart_mulhi_internal (operands[0],\n \t\t\t\t\t\t       operands[1],\n \t\t\t\t\t\t       operands[2]));\n+  else if (TARGET_MIPS16)\n+    emit_insn (gen_<su>mulsi3_highpart_split (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n   else\n     emit_insn (gen_<su>mulsi3_highpart_internal (operands[0], operands[1],\n \t\t\t\t\t         operands[2]));\n@@ -1932,10 +1953,27 @@\n \t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"!ISA_HAS_MULHI\"\n+  \"!ISA_HAS_MULHI && !TARGET_MIPS16\"\n   { return TARGET_FIX_R4000 ? \"mult<u>\\t%1,%2\\n\\tmfhi\\t%0\" : \"#\"; }\n   \"&& reload_completed && !TARGET_FIX_R4000\"\n   [(const_int 0)]\n+{\n+  emit_insn (gen_<su>mulsi3_highpart_split (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n+  DONE;\n+}\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_expand \"<su>mulsi3_highpart_split\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\")))\n+\t  (const_int 32))))]\n+  \"\"\n {\n   rtx hilo;\n \n@@ -1952,10 +1990,7 @@\n       emit_insn (gen_mfhisi_di (operands[0], hilo));\n     }\n   DONE;\n-}\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"length\" \"8\")])\n+})\n \n (define_insn \"<su>mulsi3_highpart_mulhi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1989,37 +2024,79 @@\n ;; Disable unsigned multiplication for -mfix-vr4120.  This is for VR4120\n ;; errata MD(0), which says that dmultu does not always produce the\n ;; correct result.\n-(define_insn_and_split \"<su>muldi3_highpart\"\n+(define_expand \"<su>muldi3_highpart\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(truncate:DI\n+\t (lshiftrt:TI\n+\t  (mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n+\t\t   (any_extend:TI (match_operand:DI 2 \"register_operand\")))\n+\t  (const_int 64))))]\n+  \"TARGET_64BIT && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n+{\n+  if (TARGET_MIPS16)\n+    emit_insn (gen_<su>muldi3_highpart_split (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n+  else\n+    emit_insn (gen_<su>muldi3_highpart_internal (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"<su>muldi3_highpart_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(truncate:DI\n \t (lshiftrt:TI\n \t  (mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n \t\t   (any_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n \t  (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n+  \"TARGET_64BIT\n+   && !TARGET_MIPS16\n+   && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n   { return TARGET_FIX_R4000 ? \"dmult<u>\\t%1,%2\\n\\tmfhi\\t%0\" : \"#\"; }\n   \"&& reload_completed && !TARGET_FIX_R4000\"\n   [(const_int 0)]\n+{\n+  emit_insn (gen_<su>muldi3_highpart_split (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n+  DONE;\n+}\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_expand \"<su>muldi3_highpart_split\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(truncate:DI\n+\t (lshiftrt:TI\n+\t  (mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n+\t\t   (any_extend:TI (match_operand:DI 2 \"register_operand\")))\n+\t  (const_int 64))))]\n+  \"\"\n {\n   rtx hilo;\n \n   hilo = gen_rtx_REG (TImode, MD_REG_FIRST);\n   emit_insn (gen_<u>mulditi3_internal (hilo, operands[1], operands[2]));\n   emit_insn (gen_mfhidi_ti (operands[0], hilo));\n   DONE;\n-}\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"length\" \"8\")])\n+})\n \n (define_expand \"<u>mulditi3\"\n   [(set (match_operand:TI 0 \"register_operand\")\n \t(mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t (any_extend:TI (match_operand:DI 2 \"register_operand\"))))]\n   \"TARGET_64BIT && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n {\n-  if (TARGET_FIX_R4000)\n+  rtx hilo;\n+\n+  if (TARGET_MIPS16)\n+    {\n+      hilo = gen_rtx_REG (TImode, MD_REG_FIRST);\n+      emit_insn (gen_<u>mulditi3_internal (hilo, operands[1], operands[2]));\n+      emit_move_insn (operands[0], hilo);\n+    }\n+  else if (TARGET_FIX_R4000)\n     emit_insn (gen_<u>mulditi3_r4000 (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_<u>mulditi3_internal (operands[0], operands[1],\n@@ -2028,7 +2105,7 @@\n })\n \n (define_insn \"<u>mulditi3_internal\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:TI 0 \"muldiv_target_operand\" \"=x\")\n \t(mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:TI (match_operand:DI 2 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT\n@@ -2067,11 +2144,11 @@\n ;; See the comment above <u>msubsidi4 for the relationship between\n ;; ISA_HAS_DSP and ISA_HAS_DSP_MULT.\n (define_insn \"<u>maddsidi4\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=ka\")\n+  [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=ka\")\n \t(plus:DI\n \t (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t  (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t (match_operand:DI 3 \"register_operand\" \"0\")))]\n+\t (match_operand:DI 3 \"muldiv_target_operand\" \"0\")))]\n   \"(TARGET_MAD || ISA_HAS_MACC || GENERATE_MADD_MSUB || ISA_HAS_DSP)\n    && !TARGET_64BIT\"\n {\n@@ -2311,72 +2388,113 @@\n \n ;; VR4120 errata MD(A1): signed division instructions do not work correctly\n ;; with negative operands.  We use special libgcc functions instead.\n-(define_insn_and_split \"divmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n+(define_expand \"divmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(div:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t (match_operand:GPR 2 \"register_operand\")))\n+   (set (match_operand:GPR 3 \"register_operand\")\n+\t(mod:GPR (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"!TARGET_FIX_VR4120\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      emit_insn (gen_divmod<mode>4_split (operands[3], operands[1],\n+\t\t\t\t\t  operands[2]));\n+      emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n+    }\n+  else\n+    emit_insn (gen_divmod<mode>4_internal (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], operands[3]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"divmod<mode>4_internal\"\n+  [(set (match_operand:GPR 0 \"muldiv_target_operand\" \"=l\")\n \t(div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(mod:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n-  \"!TARGET_FIX_VR4120\"\n+  \"!TARGET_FIX_VR4120 && !TARGET_MIPS16\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  rtx hilo;\n-\n-  if (TARGET_64BIT)\n-    {\n-      hilo = gen_rtx_REG (TImode, MD_REG_FIRST);\n-      emit_insn (gen_divmod<mode>4_hilo_ti (hilo, operands[1], operands[2]));\n-      emit_insn (gen_mfhi<mode>_ti (operands[3], hilo));\n-    }\n-  else\n-    {\n-      hilo = gen_rtx_REG (DImode, MD_REG_FIRST);\n-      emit_insn (gen_divmod<mode>4_hilo_di (hilo, operands[1], operands[2]));\n-      emit_insn (gen_mfhi<mode>_di (operands[3], hilo));\n-    }\n+  emit_insn (gen_divmod<mode>4_split (operands[3], operands[1], operands[2]));\n   DONE;\n }\n  [(set_attr \"type\" \"idiv\")\n   (set_attr \"mode\" \"<MODE>\")\n   (set_attr \"length\" \"8\")])\n \n-(define_insn_and_split \"udivmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n+(define_expand \"udivmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(udiv:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t  (match_operand:GPR 2 \"register_operand\")))\n+   (set (match_operand:GPR 3 \"register_operand\")\n+\t(umod:GPR (match_dup 1)\n+\t\t  (match_dup 2)))]\n+  \"\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1],\n+\t\t\t\t\t   operands[2]));\n+      emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n+    }\n+  else\n+    emit_insn (gen_udivmod<mode>4_internal (operands[0], operands[1],\n+\t\t\t\t\t    operands[2], operands[3]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"udivmod<mode>4_internal\"\n+  [(set (match_operand:GPR 0 \"muldiv_target_operand\" \"=l\")\n \t(udiv:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(umod:GPR (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"\"\n+  \"!TARGET_MIPS16\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n+{\n+  emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1], operands[2]));\n+  DONE;\n+}\n+ [(set_attr \"type\" \"idiv\")\n+  (set_attr \"mode\" \"<MODE>\")\n+  (set_attr \"length\" \"8\")])\n+\n+(define_expand \"<u>divmod<mode>4_split\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(any_mod:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t     (match_operand:GPR 2 \"register_operand\")))]\n+  \"\"\n {\n   rtx hilo;\n \n   if (TARGET_64BIT)\n     {\n       hilo = gen_rtx_REG (TImode, MD_REG_FIRST);\n-      emit_insn (gen_udivmod<mode>4_hilo_ti (hilo, operands[1], operands[2]));\n-      emit_insn (gen_mfhi<mode>_ti (operands[3], hilo));\n+      emit_insn (gen_<u>divmod<mode>4_hilo_ti (hilo, operands[1],\n+\t\t\t\t\t       operands[2]));\n+      emit_insn (gen_mfhi<mode>_ti (operands[0], hilo));\n     }\n   else\n     {\n       hilo = gen_rtx_REG (DImode, MD_REG_FIRST);\n-      emit_insn (gen_udivmod<mode>4_hilo_di (hilo, operands[1], operands[2]));\n-      emit_insn (gen_mfhi<mode>_di (operands[3], hilo));\n+      emit_insn (gen_<u>divmod<mode>4_hilo_di (hilo, operands[1],\n+\t\t\t\t\t       operands[2]));\n+      emit_insn (gen_mfhi<mode>_di (operands[0], hilo));\n     }\n   DONE;\n-}\n- [(set_attr \"type\" \"idiv\")\n-  (set_attr \"mode\" \"<MODE>\")\n-  (set_attr \"length\" \"8\")])\n+})\n \n (define_insn \"<u>divmod<GPR:mode>4_hilo_<HILO:mode>\"\n-  [(set (match_operand:HILO 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:HILO 0 \"muldiv_target_operand\" \"=x\")\n \t(unspec:HILO\n \t  [(any_div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t\t(match_operand:GPR 2 \"register_operand\" \"d\"))]\n@@ -4590,7 +4708,7 @@\n ;; and the errata related to -mfix-vr4130.\n (define_insn \"mfhi<GPR:mode>_<HILO:mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(unspec:GPR [(match_operand:HILO 1 \"register_operand\" \"x\")]\n+\t(unspec:GPR [(match_operand:HILO 1 \"hilo_operand\" \"x\")]\n \t\t    UNSPEC_MFHI))]\n   \"\"\n   { return ISA_HAS_MACCHI ? \"<GPR:d>macchi\\t%0,%.,%.\" : \"mfhi\\t%0\"; }"}, {"sha": "5e9398e69f3c171dd57e1d5d227a5317dc15e8ff", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -127,6 +127,11 @@\n   (and (match_code \"reg,subreg\")\n        (match_test \"ST_REG_P (true_regnum (op))\")))\n \n+(define_predicate \"muldiv_target_operand\"\n+  (if_then_else (match_test \"TARGET_MIPS16\")\n+\t\t(match_operand 0 \"hilo_operand\")\n+\t\t(match_operand 0 \"register_operand\")))\n+\n (define_special_predicate \"pc_or_label_operand\"\n   (match_code \"pc,label_ref\"))\n \n@@ -189,7 +194,9 @@\n })\n \n (define_predicate \"move_operand\"\n-  (match_operand 0 \"general_operand\")\n+  ;; Allow HI and LO to be used as the source of a MIPS16 move.\n+  (ior (match_operand 0 \"general_operand\")\n+       (match_operand 0 \"hilo_operand\"))\n {\n   enum mips_symbol_type symbol_type;\n "}, {"sha": "c1bce164c7679ce7f84af6fe9d3c2e586f62d370", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,3 +1,33 @@\n+2011-11-27  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/mult-2.c, gcc.target/mips/mult-3.c,\n+\tgcc.target/mips/mult-4.c, gcc.target/mips/mult-5.c,\n+\tgcc.target/mips/mult-6.c, gcc.target/mips/mult-7.c,\n+\tgcc.target/mips/mult-8.c, gcc.target/mips/mult-9.c,\n+\tgcc.target/mips/mult-10.c, gcc.target/mips/mult-11.c,\n+\tgcc.target/mips/mult-12.c, gcc.target/mips/mult-13.c,\n+\tgcc.target/mips/mult-14.c, gcc.target/mips/mult-15.c,\n+\tgcc.target/mips/mult-16.c, gcc.target/mips/mult-17.c,\n+\tgcc.target/mips/mult-18.c, gcc.target/mips/mult-19.c,\n+\tgcc.target/mips/div-1.c, gcc.target/mips/div-2.c,\n+\tgcc.target/mips/div-3.c, gcc.target/mips/div-4.c,\n+\tgcc.target/mips/div-5.c, gcc.target/mips/div-6.c,\n+\tgcc.target/mips/div-7.c, gcc.target/mips/div-8.c,\n+\tgcc.target/mips/div-9.c, gcc.target/mips/div-10.c,\n+\tgcc.target/mips/div-11.c, gcc.target/mips/div-12.c: New tests.\n+\t* gcc.target/mips/fix-r4000-1.c (foo, bar): Add NOMIPS16.\n+\t* gcc.target/mips/fix-r4000-2.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-3.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-4.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-5.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-6.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-7.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-8.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-9.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-10.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-11.c (foo): Likewise.\n+\t* gcc.target/mips/fix-r4000-12.c (foo): Likewise.\n+\n 2011-11-27  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/mips.exp (mips-dg-options): Make -mno-dsp"}, {"sha": "e1976c25e0dae136f92de86da9e72c321e252246", "filename": "gcc/testsuite/gcc.target/mips/div-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-1.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tddiv\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x / y;\n+}"}, {"sha": "23075da2c3deb0e1610b284aa47624a64abacc9e", "filename": "gcc/testsuite/gcc.target/mips/div-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-10.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdivu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x / y;\n+}"}, {"sha": "68f1658484b40e955b87f3dc2db1e82f3466a707", "filename": "gcc/testsuite/gcc.target/mips/div-11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-11.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdiv\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x % y;\n+}"}, {"sha": "c2384b20a9d1894c2098117819f0b06ab9acbb98", "filename": "gcc/testsuite/gcc.target/mips/div-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-12.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdivu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x % y;\n+}"}, {"sha": "af6e2fa8e1aab24ae96cc14c38c3fa48b3dddc08", "filename": "gcc/testsuite/gcc.target/mips/div-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-2.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tddivu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x / y;\n+}"}, {"sha": "684b6a8e441cb0fa8a045fa9eb3cd606d19baa3a", "filename": "gcc/testsuite/gcc.target/mips/div-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-3.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tddiv\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x % y;\n+}"}, {"sha": "251b88f8164cc23a8ee376f1e4d6ed13e17f40fb", "filename": "gcc/testsuite/gcc.target/mips/div-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-4.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tddivu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x % y;\n+}"}, {"sha": "a08f3e6f4bd80ac2b91b633147b7a74b84fb260e", "filename": "gcc/testsuite/gcc.target/mips/div-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-5.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdiv\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x / y;\n+}"}, {"sha": "23075da2c3deb0e1610b284aa47624a64abacc9e", "filename": "gcc/testsuite/gcc.target/mips/div-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-6.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdivu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x / y;\n+}"}, {"sha": "68f1658484b40e955b87f3dc2db1e82f3466a707", "filename": "gcc/testsuite/gcc.target/mips/div-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-7.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdiv\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x % y;\n+}"}, {"sha": "c2384b20a9d1894c2098117819f0b06ab9acbb98", "filename": "gcc/testsuite/gcc.target/mips/div-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-8.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdivu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x % y;\n+}"}, {"sha": "a08f3e6f4bd80ac2b91b633147b7a74b84fb260e", "filename": "gcc/testsuite/gcc.target/mips/div-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-9.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdiv\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x / y;\n+}"}, {"sha": "551d3549d846fcc1d5c4c4a7f836421526e58b47", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-1.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -O2 -dp\" } */\n typedef int int32_t;\n typedef int uint32_t;\n-int32_t foo (int32_t x, int32_t y) { return x * y; }\n-uint32_t bar (uint32_t x, uint32_t y) { return x * y; }\n+NOMIPS16 int32_t foo (int32_t x, int32_t y) { return x * y; }\n+NOMIPS16 uint32_t bar (uint32_t x, uint32_t y) { return x * y; }\n /* { dg-final { scan-assembler-times \"[concat {\\tmult\\t\\$[45],\\$[45][^\\n]+mulsi3_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n}]\" 2 } } */"}, {"sha": "8c938b7d2194bf11f3ab1423d9fe534009d07897", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-10.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -4,5 +4,5 @@\n /* { dg-options \"-mips3 -mfix-r4000 -mgp64 -O2 -fno-split-wide-types -dp -EL\" } */\n typedef unsigned long long uint64_t;\n typedef unsigned int uint128_t __attribute__((mode(TI)));\n-uint128_t foo (uint64_t x, uint64_t y) { return (uint128_t) x * y; }\n+NOMIPS16 uint128_t foo (uint64_t x, uint64_t y) { return (uint128_t) x * y; }\n /* { dg-final { scan-assembler \"[concat {\\tdmultu\\t\\$[45],\\$[45][^\\n]+umulditi3_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n\\tmfhi\\t\\$3\\n}]\" } } */"}, {"sha": "7cfad3d2f79bc0863bf35cd8081e2ae4cd3c75c2", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-11.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,4 +1,4 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -mgp64 -O2 -dp\" } */\n typedef long long int64_t;\n-int64_t foo (int64_t x) { return x / 11993; }\n+NOMIPS16 int64_t foo (int64_t x) { return x / 11993; }\n /* { dg-final { scan-assembler \"[concat {\\tdmult\\t\\$4,\\$[0-9]+[^\\n]+smuldi3_highpart[^\\n]+\\n\\tmfhi\\t\\$[0-9]+\\n}]\" } } */"}, {"sha": "d449283ddf325a8e22aa36155cb8f3c654450bd6", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-12.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,4 +1,4 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -mgp64 -O2 -dp\" } */\n typedef unsigned long long uint64_t;\n-uint64_t foo (uint64_t x) { return x / 11993; }\n+NOMIPS16 uint64_t foo (uint64_t x) { return x / 11993; }\n /* { dg-final { scan-assembler \"[concat {\\tdmultu\\t\\$4,\\$[0-9]+[^\\n]+umuldi3_highpart[^\\n]+\\n\\tmfhi\\t\\$[0-9]+\\n}]\" } } */"}, {"sha": "6cb7d3594e09ed7060a0fe7e3ff9fa1df326e7ff", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-mips1 -mfix-r4000 -O2 -dp -EB\" } */\n typedef int int32_t;\n typedef long long int64_t;\n-int32_t foo (int32_t x, int32_t y) { return ((int64_t) x * y) >> 32; }\n+NOMIPS16 int32_t foo (int32_t x, int32_t y) { return ((int64_t) x * y) >> 32; }\n /* ??? A highpart pattern would be a better choice, but we currently\n    don't use them.  */\n /* { dg-final { scan-assembler \"[concat {\\tmult\\t\\$[45],\\$[45][^\\n]+mulsidi3_32bit_r4000[^\\n]+\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "bd12509d1bd9036af1668c16ca24fe0756def985", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-mips1 -mfix-r4000 -O2 -dp -EB\" } */\n typedef unsigned int uint32_t;\n typedef unsigned long long uint64_t;\n-uint32_t foo (uint32_t x, uint32_t y) { return ((uint64_t) x * y) >> 32; }\n+NOMIPS16 uint32_t foo (uint32_t x, uint32_t y) { return ((uint64_t) x * y) >> 32; }\n /* ??? A highpart pattern would be a better choice, but we currently\n    don't use them.  */\n /* { dg-final { scan-assembler \"[concat {\\tmultu\\t\\$[45],\\$[45][^\\n]+umulsidi3_32bit_r4000[^\\n]+\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "3854db8967dc6df385baff279b76f0d9cdc97db0", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-4.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -4,5 +4,5 @@\n /* { dg-options \"-mips1 -mfix-r4000 -O2 -fno-split-wide-types -dp -EL\" } */\n typedef int int32_t;\n typedef long long int64_t;\n-int64_t foo (int32_t x, int32_t y) { return (int64_t) x * y; }\n+NOMIPS16 int64_t foo (int32_t x, int32_t y) { return (int64_t) x * y; }\n /* { dg-final { scan-assembler \"[concat {\\tmult\\t\\$[45],\\$[45][^\\n]+mulsidi3_32bit_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n\\tmfhi\\t\\$3\\n}]\" } } */"}, {"sha": "c46300f62dbb6f31308addb4b155485c78765c05", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-5.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -4,5 +4,5 @@\n /* { dg-options \"-mips1 -mfix-r4000 -O2 -fno-split-wide-types -dp -EL\" } */\n typedef unsigned int uint32_t;\n typedef unsigned long long uint64_t;\n-uint64_t foo (uint32_t x, uint32_t y) { return (uint64_t) x * y; }\n+NOMIPS16 uint64_t foo (uint32_t x, uint32_t y) { return (uint64_t) x * y; }\n /* { dg-final { scan-assembler \"[concat {\\tmultu\\t\\$[45],\\$[45][^\\n]+umulsidi3_32bit_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n\\tmfhi\\t\\$3\\n}]\" } } */"}, {"sha": "1e33cc4f7656bccee4f7e419fef61f48761398a7", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-6.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -mgp64 -O2 -dp\" } */\n typedef long long int64_t;\n typedef unsigned long long uint64_t;\n-int64_t foo (int64_t x, int64_t y) { return x * y; }\n-uint64_t bar (uint64_t x, uint64_t y) { return x * y; }\n+NOMIPS16 int64_t foo (int64_t x, int64_t y) { return x * y; }\n+NOMIPS16 uint64_t bar (uint64_t x, uint64_t y) { return x * y; }\n /* { dg-final { scan-assembler-times \"[concat {\\tdmult\\t\\$[45],\\$[45][^\\n]+muldi3_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n}]\" 2 } } */"}, {"sha": "118ba99dfebe2096ef9a8e659a96245d21b9f335", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -O2 -mgp64 -dp -EB\" } */\n typedef long long int64_t;\n typedef int int128_t __attribute__((mode(TI)));\n-int64_t foo (int64_t x, int64_t y) { return ((int128_t) x * y) >> 64; }\n+NOMIPS16 int64_t foo (int64_t x, int64_t y) { return ((int128_t) x * y) >> 64; }\n /* ??? A highpart pattern would be a better choice, but we currently\n    don't use them.  */\n /* { dg-final { scan-assembler \"[concat {\\tdmult\\t\\$[45],\\$[45][^\\n]+mulditi3[^\\n]+\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "f2c71c1ef1a32d43f5d60877b24dafa9d0c92147", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-march=r4000 -mfix-r4000 -O2 -mgp64 -dp -EB\" } */\n typedef unsigned long long uint64_t;\n typedef unsigned int uint128_t __attribute__((mode(TI)));\n-uint64_t foo (uint64_t x, uint64_t y) { return ((uint128_t) x * y) >> 64; }\n+NOMIPS16 uint64_t foo (uint64_t x, uint64_t y) { return ((uint128_t) x * y) >> 64; }\n /* ??? A highpart pattern would be a better choice, but we currently\n    don't use them.  */\n /* { dg-final { scan-assembler \"[concat {\\tdmultu\\t\\$[45],\\$[45][^\\n]+umulditi3[^\\n]+\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "da9c11364d2e28411b53ed375933c6219a9b4965", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-9.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -4,5 +4,5 @@\n /* { dg-options \"-mips3 -mfix-r4000 -mgp64 -O2 -fno-split-wide-types -dp -EL\" } */\n typedef long long int64_t;\n typedef int int128_t __attribute__((mode(TI)));\n-int128_t foo (int64_t x, int64_t y) { return (int128_t) x * y; }\n+NOMIPS16 int128_t foo (int64_t x, int64_t y) { return (int128_t) x * y; }\n /* { dg-final { scan-assembler \"[concat {\\tdmult\\t\\$[45],\\$[45][^\\n]+mulditi3_r4000[^\\n]+\\n\\tmflo\\t\\$2\\n\\tmfhi\\t\\$3\\n}]\" } } */"}, {"sha": "0b990c364135d51edb5c8eaebe66a5301bfd0e64", "filename": "gcc/testsuite/gcc.target/mips/mult-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-10.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O2 -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return ((DI) x * y) >> 32;\n+}"}, {"sha": "d2ba695f6dda4ad683c344357b30ee96d0ad243e", "filename": "gcc/testsuite/gcc.target/mips/mult-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-11.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O2 -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return ((DI) x * y) >> 32;\n+}"}, {"sha": "bd772d2cd7420208ea39eda0d82d867d9d89451f", "filename": "gcc/testsuite/gcc.target/mips/mult-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-12.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x * y;\n+}"}, {"sha": "e0859f629f3e342c5d7254140d137f8b9a46d060", "filename": "gcc/testsuite/gcc.target/mips/mult-13.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-13.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x * y;\n+}"}, {"sha": "c4b54b7ec455b62fdedc4627b1de6bd29af5d5ce", "filename": "gcc/testsuite/gcc.target/mips/mult-14.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-14.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdsll\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdsrl\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 DI\n+f (SI x, SI y)\n+{\n+  return (DI) x * y;\n+}"}, {"sha": "a96049e04e6cdbdc2f27bf750368e3bd29def642", "filename": "gcc/testsuite/gcc.target/mips/mult-15.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-15.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdsll\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdsrl\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 DI\n+f (SI x, SI y)\n+{\n+  return (DI) x * y;\n+}"}, {"sha": "cb1707d912527d5c38b7fa80b14b43f10a2e97d1", "filename": "gcc/testsuite/gcc.target/mips/mult-16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-16.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O2 -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return ((DI) x * y) >> 32;\n+}"}, {"sha": "3539f63d96a946fa516206d0f7c4f398971da35f", "filename": "gcc/testsuite/gcc.target/mips/mult-17.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-17.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return ((DI) x * y) >> 32;\n+}"}, {"sha": "cfdac8b0de168c87efba337c6199898c58313014", "filename": "gcc/testsuite/gcc.target/mips/mult-18.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-18.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x * y;\n+}"}, {"sha": "47cdd5c23c329e1dd3104be356b52daaa42b63ad", "filename": "gcc/testsuite/gcc.target/mips/mult-19.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-19.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp32 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 SI\n+f (SI x, SI y)\n+{\n+  return x * y;\n+}"}, {"sha": "8494e14c358ff6a9cd03c4749cb9a60e7a1f1168", "filename": "gcc/testsuite/gcc.target/mips/mult-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-2.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+\n+typedef int TI __attribute__((mode(TI)));\n+typedef int DI __attribute__((mode(DI)));\n+\n+MIPS16 TI\n+f (DI x, DI y)\n+{\n+  return (TI) x * y;\n+}"}, {"sha": "fa7cfa34e23882919cf040066b947fafff8784ab", "filename": "gcc/testsuite/gcc.target/mips/mult-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-3.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmultu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+\n+typedef unsigned int TI __attribute__((mode(TI)));\n+typedef unsigned int DI __attribute__((mode(DI)));\n+\n+MIPS16 TI\n+f (DI x, DI y)\n+{\n+  return (TI) x * y;\n+}"}, {"sha": "d579f0023d2fbcd0eadb254c98c94234c5dd8cc2", "filename": "gcc/testsuite/gcc.target/mips/mult-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-4.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O2 -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+\n+typedef int TI __attribute__((mode(TI)));\n+typedef int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return ((TI) x * y) >> 64;\n+}"}, {"sha": "6df86a1163dd2371b218880062d5d86cfd73e754", "filename": "gcc/testsuite/gcc.target/mips/mult-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-5.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmultu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+\n+typedef unsigned int TI __attribute__((mode(TI)));\n+typedef unsigned int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return ((TI) x * y) >> 64;\n+}"}, {"sha": "a6b910ec4020c53d46d9b17bb959bd38bc2faf2c", "filename": "gcc/testsuite/gcc.target/mips/mult-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-6.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x * y;\n+}"}, {"sha": "7c2989baa52198093cc89fb49324cade0e6d476f", "filename": "gcc/testsuite/gcc.target/mips/mult-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-7.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tdmultu?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmfhi\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+\n+MIPS16 DI\n+f (DI x, DI y)\n+{\n+  return x * y;\n+}"}, {"sha": "3e3acde81e34fd5701eb28f3578dad030e4cea25", "filename": "gcc/testsuite/gcc.target/mips/mult-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-8.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O2 -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tdsll\\t\" 2 } } */\n+/* { dg-final { scan-assembler \"\\tdsrl\\t\" } } */\n+\n+typedef int DI __attribute__((mode(DI)));\n+typedef int SI __attribute__((mode(SI)));\n+\n+MIPS16 DI\n+f (SI x, SI y)\n+{\n+  return (DI) x * y;\n+}"}, {"sha": "aa2ededa67aa8904d430a197c4e9b71ae0b73e38", "filename": "gcc/testsuite/gcc.target/mips/mult-9.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-9.c?ref=a2ccf3c28c9e7a79ace3f0c20d000f285bc732e5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O2 -mgp64 (-mips16)\" } */\n+/* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmfhi\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tdsll\\t\" 2 } } */\n+/* { dg-final { scan-assembler \"\\tdsrl\\t\" } } */\n+\n+typedef unsigned int DI __attribute__((mode(DI)));\n+typedef unsigned int SI __attribute__((mode(SI)));\n+\n+MIPS16 DI\n+f (SI x, SI y)\n+{\n+  return (DI) x * y;\n+}"}]}