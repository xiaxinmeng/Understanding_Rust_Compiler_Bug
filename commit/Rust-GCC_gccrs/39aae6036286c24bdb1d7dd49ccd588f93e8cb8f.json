{"sha": "39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhYWU2MDM2Mjg2YzI0YmRiMWQ3ZGQ0OWNjZDU4OGY5M2U4Y2I4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-26T14:35:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-26T14:35:48Z"}, "message": "re PR debug/87443 (GCC mixes abstract and concrete instances in abstract origins for inlines)\n\n2018-09-26  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/87443\n\t* dwarf2out.c (gen_lexical_block_die): Do not equate inline\n\tor concrete instance DIE to the tree.  Create abstract origin\n\tattributes also for concrete instances.\n\n\t* gcc.dg/debug/dwarf2/inline5.c: New testcase.\n\nFrom-SVN: r264643", "tree": {"sha": "aee922778068a10b1c7fee9895b469b8cd303469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee922778068a10b1c7fee9895b469b8cd303469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b4e3b9a661e6316b0fe2a966347fc8e9c39d552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4e3b9a661e6316b0fe2a966347fc8e9c39d552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4e3b9a661e6316b0fe2a966347fc8e9c39d552"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "a9e276957d2a828149ca3a2d24fc896d92f64335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "patch": "@@ -1,3 +1,10 @@\n+2018-09-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/87443\n+\t* dwarf2out.c (gen_lexical_block_die): Do not equate inline\n+\tor concrete instance DIE to the tree.  Create abstract origin\n+\tattributes also for concrete instances.\n+\n 2018-09-26  Alexey Neyman  <stilor@att.net>\n \n \t* graphite.h: Include <isl/id.h> and <isl/space.h>; these"}, {"sha": "b0c5c4f2512ce79ccbc779e719d3270e74e57095", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "patch": "@@ -24091,18 +24091,16 @@ gen_lexical_block_die (tree stmt, dw_die_ref context_die)\n     }\n   else if (BLOCK_ABSTRACT_ORIGIN (stmt))\n     {\n-      /* If this is an inlined instance, create a new lexical die for\n-\t anything below to attach DW_AT_abstract_origin to.  */\n+      /* If this is an inlined or conrecte instance, create a new lexical\n+\t die for anything below to attach DW_AT_abstract_origin to.  */\n       if (old_die)\n-\t{\n-\t  stmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n-\t  equate_block_to_die (stmt, stmt_die);\n-\t  old_die = NULL;\n-\t}\n+\tstmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n \n       tree origin = block_ultimate_origin (stmt);\n-      if (origin != NULL_TREE && origin != stmt)\n+      if (origin != NULL_TREE && (origin != stmt || old_die))\n \tadd_abstract_origin_attribute (stmt_die, origin);\n+\n+      old_die = NULL;\n     }\n \n   if (old_die)"}, {"sha": "aa005e71441722601bd4618bfe094ddd49afef9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "patch": "@@ -1,3 +1,8 @@\n+2018-09-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/87443\n+\t* gcc.dg/debug/dwarf2/inline5.c: New testcase.\n+\n 2018-09-26  Martin Jambor  <mjambor@suse.cz>\n \n \tPR c/87347"}, {"sha": "4f4463b1868f0eaedfe04d254ee4396d2ea8e56b", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aae6036286c24bdb1d7dd49ccd588f93e8cb8f/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline5.c?ref=39aae6036286c24bdb1d7dd49ccd588f93e8cb8f", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that the concrete instance DW_TAG_lexical_block has an abstract\n+   origin.  Verify that the inline instance has the abstract instance as\n+   abstract origin rather than the concrete one.  */\n+/* { dg-options \"-O -gdwarf -dA\" } */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_inlined_subroutine\" 2 } } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_lexical_block\\\\)\\[^#\\]*# DW_AT_abstract_origin\" 2 } } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_lexical_block\\\\)\\[^#\\]*# \\\\(DIE \\\\(0x\\[0-9a-f\\]*\\\\) DW_TAG_variable\" 1 } } */\n+/* We do not know which is output first so look for both invalid abstract\n+   origins on the lexical blocks (knowing that the abstract instance has\n+   no attribute following the DW_TAG_lexical_block.  */\n+/* { dg-final { scan-assembler-not \"\\\\(DIE \\\\(0x(\\[0-9a-f\\]*)\\\\) DW_TAG_lexical_block\\\\)\\[^#\\]*# \\[^(\\].*DW_TAG_lexical_block\\\\)\\[^#x\\]*x\\\\1\\[^#\\]*# DW_AT_abstract_origin\" } } */\n+/* { dg-final { scan-assembler-not \"DW_TAG_lexical_block\\\\)\\[^#x\\]*x(\\[0-9a-f\\]*)\\[^#\\]*# DW_AT_abstract_origin.*\\\\(DIE \\\\(0x\\\\1\\\\) DW_TAG_lexical_block\\\\)\\[^#\\]*# DW_AT\" } } */\n+\n+int foo (int i)\n+{\n+    {\n+      volatile int j = i + 3;\n+      return j - 2;\n+    }\n+}\n+int main()\n+{\n+  volatile int z = foo (-1);\n+  return z;\n+}"}]}