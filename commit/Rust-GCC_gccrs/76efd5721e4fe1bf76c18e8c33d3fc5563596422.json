{"sha": "76efd5721e4fe1bf76c18e8c33d3fc5563596422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlZmQ1NzIxZTRmZTFiZjc2YzE4ZThjMzNkM2ZjNTU2MzU5NjQyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T12:45:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T12:45:02Z"}, "message": "[multiple changes]\n\n2009-07-13  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb: Minor comment change\n\n2009-07-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): Generate dummy reference for\n\ttype of iteration, to prevent spurious warnings.\n\n2009-07-13  Nicolas Roche  <roche@adacore.com>\n\n\t* s-oscons-tmplt.c: On VxWorks target ensure that vxWorks.h is always\n\tincluded.\n\n2009-07-13  Arnaud Charlet  <charlet@adacore.com>\n\n\t* switch-c.adb, usage.adb, sem_ch9.adb, gnat_ugn.texi, rtsfind.adb,\n\tgnat1drv.adb, opt.ads, sem_ch13.adb (Inspector_Mode): Renamed to\n\tGenerate_SCIL.\n\t(CodePeer_Mode): New -gnatC switch.\n\t(Adjust_Global_Switches): Adjust settings for Generate_SCIL and\n\tCodePeer_Mode.\n\nFrom-SVN: r149578", "tree": {"sha": "d03872a2c2b61b935d065d5d194a6924e8f5a7bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d03872a2c2b61b935d065d5d194a6924e8f5a7bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76efd5721e4fe1bf76c18e8c33d3fc5563596422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76efd5721e4fe1bf76c18e8c33d3fc5563596422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76efd5721e4fe1bf76c18e8c33d3fc5563596422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76efd5721e4fe1bf76c18e8c33d3fc5563596422/comments", "author": null, "committer": null, "parents": [{"sha": "1047580000fa66c7c77e88b72a49ecc86c13c803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1047580000fa66c7c77e88b72a49ecc86c13c803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1047580000fa66c7c77e88b72a49ecc86c13c803"}], "stats": {"total": 201, "additions": 173, "deletions": 28}, "files": [{"sha": "7e8d26dca5a6eaa648e8af96c013146b50d09059", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -1,3 +1,26 @@\n+2009-07-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb: Minor comment change\n+\n+2009-07-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): Generate dummy reference for\n+\ttype of iteration, to prevent spurious warnings.\n+\n+2009-07-13  Nicolas Roche  <roche@adacore.com>\n+\n+\t* s-oscons-tmplt.c: On VxWorks target ensure that vxWorks.h is always\n+\tincluded.\n+\n+2009-07-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb, usage.adb, sem_ch9.adb, gnat_ugn.texi, rtsfind.adb,\n+\tgnat1drv.adb, opt.ads, sem_ch13.adb (Inspector_Mode): Renamed to\n+\tGenerate_SCIL.\n+\t(CodePeer_Mode): New -gnatC switch.\n+\t(Adjust_Global_Switches): Adjust settings for Generate_SCIL and\n+\tCodePeer_Mode.\n+\n 2009-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* checks.adb (Selected_Range_Checks): Do not consider that a non-static"}, {"sha": "3a0ab48320c7e064e145450a59ab4467bae3b803", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -7916,12 +7916,10 @@ package body Exp_Ch4 is\n \n    begin\n       --  Nothing at all to do if conversion is to the identical type so remove\n-      --  the conversion completely, it is useless.\n+      --  the conversion completely, it is useless, except that it may carry\n+      --  an Assignment_OK attribute, which must be propagated to the operand.\n \n       if Operand_Type = Target_Type then\n-\n-         --  Propagate Assignment_OK attribute to the operand\n-\n          if Assignment_OK (N) then\n             Set_Assignment_OK (Operand);\n          end if;\n@@ -8514,12 +8512,10 @@ package body Exp_Ch4 is\n \n    begin\n       --  Nothing at all to do if conversion is to the identical type so remove\n-      --  the conversion completely, it is useless.\n+      --  the conversion completely, it is useless, except that it may carry\n+      --  an Assignment_OK indication which must be proprgated to the operand.\n \n       if Operand_Type = Target_Type then\n-\n-         --  Propagate Assignment_OK attribute to the operand\n-\n          if Assignment_OK (N) then\n             Set_Assignment_OK (Operand);\n          end if;"}, {"sha": "b7875561840e14694480b5c9c0d79efa411d2527", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 98, "deletions": 9, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -61,6 +61,7 @@ with Sinput.L; use Sinput.L;\n with Snames;\n with Sprint;   use Sprint;\n with Stringt;\n+with Stylesw;  use Stylesw;\n with Targparm; use Targparm;\n with Tree_Gen;\n with Treepr;   use Treepr;\n@@ -70,6 +71,7 @@ with Uintp;    use Uintp;\n with Uname;    use Uname;\n with Urealp;\n with Usage;\n+with Validsw;  use Validsw;\n \n with System.Assertions;\n \n@@ -108,6 +110,11 @@ procedure Gnat1drv is\n \n    procedure Adjust_Global_Switches is\n    begin\n+      --  Debug flag -gnatd.I is a synonym of Generate_SCIL\n+\n+      if Debug_Flag_Dot_II then\n+         Generate_SCIL := True;\n+      end if;\n \n       --  Set ASIS mode if -gnatt and -gnatc are set\n \n@@ -122,19 +129,101 @@ procedure Gnat1drv is\n \n          Inline_Active := False;\n \n-         --  Turn off Inspector mode in ASIS mode, since Inspector requires\n-         --  front-end expansion.\n+         --  Turn off SCIL generation in ASIS mode, since SCIL requires front-\n+         --  end expansion.\n+\n+         Generate_SCIL := False;\n+      end if;\n+\n+      --  SCIL mode needs to disable front-end inlining since the generated\n+      --  trees (in particular order and consistency between specs compiled\n+      --  as part of a main unit or as part of a with-clause) are causing\n+      --  troubles.\n \n-         Inspector_Mode := False;\n+      if Generate_SCIL then\n+         Front_End_Inlining := False;\n       end if;\n \n-      --  Inspector mode needs to disable front-end inlining since the\n-      --  generated trees (in particular order and consistency between specs\n-      --  compiled as part of a main unit or as part of a with-clause) are\n-      --  causing troubles.\n+      --  Tune settings for optimal SCIL generation in CodePeer_Mode\n+\n+      if CodePeer_Mode then\n+\n+         --  Turn off inlining, confuses codepeer output and gains nothing\n \n-      if Inspector_Mode then\n          Front_End_Inlining := False;\n+         Inline_Active      := False;\n+\n+         --  Turn off ASIS mode: incompatible with front-end expansion.\n+\n+         ASIS_Mode := False;\n+\n+         --  Turn off dynamic elaboration checks: generates inconsitencies in\n+         --  trees between specs compiled as part of a main unit or as part of\n+         --  a with-clause.\n+\n+         Dynamic_Elaboration_Checks := False;\n+\n+         --  Suppress overflow checks since this is handled implicitely by\n+         --  codepeer. Enable all other language checks.\n+\n+         Suppress_Options       := (Overflow_Check => True, others => False);\n+         Enable_Overflow_Checks := False;\n+\n+         --  Kill debug of generated code, since it messes up sloc values\n+\n+         Debug_Generated_Code := False;\n+\n+         --  Turn cross-referencing on in case it was disabled (by e.g. -gnatD)\n+         --  Do we really need to spend time generating xref in codepeer\n+         --  mode??? Consider setting Xref_Active to False.\n+\n+         Xref_Active := True;\n+\n+         --  Polling mode forced off, since it generates confusing junk\n+\n+         Polling_Required := False;\n+\n+         --  Set operating mode to check semantics with full front-end\n+         --  expansion, but no back-end code generation.\n+\n+         Operating_Mode := Check_Semantics;\n+         Debug_Flag_X   := True;\n+\n+         --  We need SCIL generation of course\n+\n+         Generate_SCIL := True;\n+\n+         --  Enable assertions and debug pragmas, since they give codepeer\n+         --  valuable extra information.\n+\n+         Assertions_Enabled     := True;\n+         Debug_Pragmas_Enabled  := True;\n+\n+         --  Suppress compiler warnings, since what we are interested in here\n+         --  is what codepeer can find out. Also disable all simple value\n+         --  propagation. This is an optimization which is valuable for code\n+         --  optimization, and also for generation of compiler warnings, but\n+         --  these are being turned off anyway, and codepeer understands\n+         --  things more clearly if references are not optimized in this way.\n+\n+         Warning_Mode  := Suppress;\n+         Debug_Flag_MM := True;\n+\n+         --  Set normal RM validity checking, and checking of IN OUT parameters\n+         --  (this might give codepeer more useful checks to analyze, to be\n+         --  confirmed???). All other validity checking is turned off, since\n+         --  this can generate very complex trees that only confuse codepeer\n+         --  and do not bring enough useful info.\n+\n+         Reset_Validity_Check_Options;\n+         Validity_Check_Default       := True;\n+         Validity_Check_In_Out_Params := True;\n+         Validity_Check_In_Params     := True;\n+\n+         --  Turn off style check options since we are not interested in any\n+         --  front-end warnings when we are getting code peer output.\n+\n+         Reset_Style_Check_Options;\n       end if;\n \n       --  Set Configurable_Run_Time mode if system.ads flag set\n@@ -752,7 +841,7 @@ begin\n       --  a VM, since representations are largely symbolic there.\n \n       if Back_End_Mode = Declarations_Only\n-        and then (not (Back_Annotate_Rep_Info or Inspector_Mode)\n+        and then (not (Back_Annotate_Rep_Info or Generate_SCIL)\n                    or else Main_Kind = N_Subunit\n                    or else Targparm.Frontend_Layout_On_Target\n                    or else Targparm.VM_Target /= No_VM)"}, {"sha": "779a7614c6a352d1c602c6396e74fd9b230d7298", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -4090,6 +4090,14 @@ Assume no invalid (bad) values except for 'Valid attribute use.\n @cindex @option{-gnatc} (@command{gcc})\n Check syntax and semantics only (no code generation attempted).\n \n+@item -gnatC\n+@cindex @option{-gnatC} (@command{gcc})\n+Generate CodePeer information (no code generation attempted).\n+This switch will generate an intermediate representation suitable for\n+use by CodePeer (@file{.scil} files). This switch is not compatible with\n+code generation (it will, among other things, disable some switches such\n+as -gnatn, and enable others such as -gnata).\n+\n @item -gnatd\n @cindex @option{-gnatd} (@command{gcc})\n Specify debug options for the compiler. The string of characters after"}, {"sha": "906a782022ebde2e24cd3f0939ed0dcff927860d", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -38,7 +38,6 @@\n --  use the Project Manager. These tools include gnatmake, gnatname, the gnat\n --  driver, gnatclean, gprbuild and gprclean.\n \n-with Debug;\n with Hostparm; use Hostparm;\n with Types;    use Types;\n \n@@ -257,6 +256,11 @@ package Opt is\n    --  Set to True to enable checking for unused withs, and also the case\n    --  of withing a package and using none of the entities in the package.\n \n+   CodePeer_Mode : Boolean := False;\n+   --  GNAT\n+   --  Enable full CodePeer mode (SCIL generation, disable switches that\n+   --  interact badly with it, etc...).\n+\n    Commands_To_Stdout : Boolean := False;\n    --  GNATMAKE\n    --  True if echoed commands to be written to stdout instead of stderr\n@@ -637,12 +641,9 @@ package Opt is\n    --  then elaboration flag checks are to be generated in the binder\n    --  generated file.\n \n-   Inspector_Mode : Boolean renames Debug.Debug_Flag_Dot_II;\n+   Generate_SCIL : Boolean := False;\n    --  GNAT\n-   --  Set True to activate Inspector mode (-gnatd.I switch). In particular\n-   --  this enables SCIL generation. When VM_Target /= None, the compiler will\n-   --  also attempt to generate code even in case of unsupported construct\n-   --  instead of displaying an error.\n+   --  Set True to activate SCIL code generation.\n \n    Invalid_Value_Used : Boolean := False;\n    --  GNAT"}, {"sha": "32323fc593e2474fb3bb027cd90789dc691c7d6c", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -799,12 +799,12 @@ package body Rtsfind is\n    procedure Maybe_Add_With (U : in out RT_Unit_Table_Record) is\n    begin\n       --  We do not need to generate a with_clause for a call issued from\n-      --  RTE_Component_Available. However, for Inspector, we need these\n+      --  RTE_Component_Available. However, for CodePeer, we need these\n       --  additional with's, because for a sequence like \"if RTE_Available (X)\n       --  then ... RTE (X)\" the RTE call fails to create some necessary\n       --  with's.\n \n-      if RTE_Available_Call and then not Inspector_Mode then\n+      if RTE_Available_Call and then not Generate_SCIL then\n          return;\n       end if;\n "}, {"sha": "6ec1b1ef6bda0ac72ee2ab46730e03187bcbf02d", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -89,6 +89,10 @@ pragma Style_Checks (\"M32766\");\n # define HAVE_TERMIOS\n #endif\n \n+#if defined (__vxworks)\n+#include <vxWorks.h>\n+#endif\n+\n #include \"gsocket.h\"\n \n #ifdef DUMMY"}, {"sha": "2ec5334c573877550da070a368ccab62672a5fc2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -1215,7 +1215,7 @@ package body Sem_Ch13 is\n \n             if VM_Target = No_VM then\n                Set_Has_External_Tag_Rep_Clause (U_Ent);\n-            elsif not Inspector_Mode then\n+            else\n                Error_Msg_Name_1 := Attr;\n                Error_Msg_N\n                  (\"% attribute unsupported in this configuration\", Nam);"}, {"sha": "fe7ffbc49c3a8ecbdba8b881212af1e04bf85877", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -1832,6 +1832,11 @@ package body Sem_Ch5 is\n \n                   Set_Ekind          (Id, E_Loop_Parameter);\n                   Set_Etype          (Id, Etype (DS));\n+\n+                  --  Treat a range as an implicit reference to the type, to\n+                  --  inhibit spurious warnings.\n+\n+                  Generate_Reference (Base_Type (Etype (DS)), N, ' ');\n                   Set_Is_Known_Valid (Id, True);\n \n                   --  The loop is not a declarative part, so the only entity"}, {"sha": "9a242d5eedd4fedfbd70a767fdbc5f08b5c421c2", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1518,7 +1518,7 @@ package body Sem_Ch9 is\n          Generate_Reference (Entry_Id, Entry_Name);\n \n          if Present (First_Formal (Entry_Id)) then\n-            if VM_Target = JVM_Target and then not Inspector_Mode then\n+            if VM_Target = JVM_Target then\n                Error_Msg_N\n                  (\"arguments unsupported in requeue statement\",\n                   First_Formal (Entry_Id));"}, {"sha": "f0acc45c7669478daf22926a1f06cb98830fde4e", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -228,6 +228,12 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Operating_Mode := Check_Semantics;\n \n+            --  Processing for C switch\n+\n+            when 'C' =>\n+               Ptr := Ptr + 1;\n+               CodePeer_Mode := True;\n+\n             --  Processing for d switch\n \n             when 'd' =>\n@@ -358,6 +364,14 @@ package body Switch.C is\n \n                      return;\n \n+                  --  -gnateC switch (CodePeer SCIL generation)\n+                  --  Not enabled for now, keep it for later???\n+                  --  use -gnatd.I only for now\n+\n+                  --  when 'C' =>\n+                  --     Ptr := Ptr + 1;\n+                  --     Generate_SCIL := True;\n+\n                   --  -gnateD switch (preprocessing symbol definition)\n \n                   when 'D' =>"}, {"sha": "47e7899755979d10f13f74b32ccc1a3f9bb4ecb2", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76efd5721e4fe1bf76c18e8c33d3fc5563596422/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=76efd5721e4fe1bf76c18e8c33d3fc5563596422", "patch": "@@ -150,6 +150,11 @@ begin\n    Write_Switch_Char (\"c\");\n    Write_Line (\"Check syntax and semantics only (no code generation)\");\n \n+   --  Line for -gnatC switch\n+\n+   Write_Switch_Char (\"C\");\n+   Write_Line (\"Generate CodePeer information (no code generation)\");\n+\n    --  Line for -gnatd switch\n \n    Write_Switch_Char (\"d?\");"}]}