{"sha": "387c39e1ec5495397ee67700ca21c971910fc28a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3YzM5ZTFlYzU0OTUzOTdlZTY3NzAwY2EyMWM5NzE5MTBmYzI4YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-14T18:54:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-14T18:54:48Z"}, "message": "alpha.c (alpha_emit_conditional_move): Handle TFmode compares.\n\n\t* config/alpha/alpha.c (alpha_emit_conditional_move): Handle\n\tTFmode compares.\n\nFrom-SVN: r150773", "tree": {"sha": "cac68c1925d493dad814b2187ebcccf0533f420f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cac68c1925d493dad814b2187ebcccf0533f420f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387c39e1ec5495397ee67700ca21c971910fc28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387c39e1ec5495397ee67700ca21c971910fc28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387c39e1ec5495397ee67700ca21c971910fc28a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387c39e1ec5495397ee67700ca21c971910fc28a/comments", "author": null, "committer": null, "parents": [{"sha": "c105751c468d9a05fb65ad1a22b8899dc1a1ae51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c105751c468d9a05fb65ad1a22b8899dc1a1ae51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c105751c468d9a05fb65ad1a22b8899dc1a1ae51"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "881903f8461fa6a1760b64aa8ccbc1537f8ef5c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c39e1ec5495397ee67700ca21c971910fc28a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c39e1ec5495397ee67700ca21c971910fc28a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=387c39e1ec5495397ee67700ca21c971910fc28a", "patch": "@@ -1,7 +1,11 @@\n+2009-08-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_conditional_move): Handle\n+\tTFmode compares.\n+\n 2009-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/30789\n-\n \t* builtins.c (do_mpc_arg2): Make extern, define for any MPC\n \tversion.  Move declaration...\n \t* real.h (do_mpc_arg2): ... here.\n@@ -27,7 +31,7 @@\n \n \tPR target/40934\n \t* config/i386/i386.c (ix86_fp_comparison_strategy):\n-\tOnly enable/disable sahf at function granularity. \n+\tOnly enable/disable sahf at function granularity.\n \n 2009-08-14  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -58,11 +62,11 @@\n \n 2009-08-13  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n \n-\t* tree-ssa-loop-prefetch.c \n-\t(prune_ref_by_group_reuse): Enhance probabilistic analysis \n+\t* tree-ssa-loop-prefetch.c\n+\t(prune_ref_by_group_reuse): Enhance probabilistic analysis\n \tfor long-stride pruning.\n \t(compute_miss_rate): New function to compute the probability\n-\tthat two memory references access different cache lines. \n+\tthat two memory references access different cache lines.\n \n 2009-08-13  Dave Korn  <dave.korn.cygwin@gmail.com>\n "}, {"sha": "1e761653fe95d2fb04d198816f60bc2dca5ece9d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c39e1ec5495397ee67700ca21c971910fc28a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c39e1ec5495397ee67700ca21c971910fc28a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=387c39e1ec5495397ee67700ca21c971910fc28a", "patch": "@@ -2666,6 +2666,13 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n   int local_fast_math = flag_unsafe_math_optimizations;\n   rtx tem;\n \n+  if (cmp_mode == TFmode)\n+    {\n+      op0 = alpha_emit_xfloating_compare (&code, op0, op1);\n+      op1 = const0_rtx;\n+      cmp_mode = DImode;\n+    }\n+\n   gcc_assert (cmp_mode == DFmode || cmp_mode == DImode);\n \n   if (FLOAT_MODE_P (cmp_mode) != FLOAT_MODE_P (mode))"}]}