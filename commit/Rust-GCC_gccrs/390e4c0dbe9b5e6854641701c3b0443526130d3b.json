{"sha": "390e4c0dbe9b5e6854641701c3b0443526130d3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwZTRjMGRiZTliNWU2ODU0NjQxNzAxYzNiMDQ0MzUyNjEzMGQzYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-04-16T19:04:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-04-16T19:04:07Z"}, "message": "c++config (_GLIBCXX_STD): New.\n\n\n2004-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/c++config (_GLIBCXX_STD): New.\n\t* src/list.cc: Use it.\n\t* include/std/std_bitset.h: Same.\n\t* include/bits/vector.tcc: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_list.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\t* include/bits/stl_bvector.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/deque.tcc: Same.\n\t* include/bits/list.tcc: Same.\n\t* include/debug/vector: Same.\n\t* include/debug/set.h: Same.\n\t* include/debug/multiset.h: Same.\n\t* include/debug/multimap.h: Same.\n\t* include/debug/map.h: Same.\n\t* include/debug/list: Same.\n\t* include/debug/deque: Same.\n\t* include/debug/bitset: Same.\n\t* include/debug/formatter.h (__gnu_debug): Remove using directive.\n\tAdd using declaration for std::type_info.\n\t* include/debug/safe_iterator.h: Add using declaration for\n\tstd::iterator_traits and std::pair.\n\t* src/debug_list.cc: New.\n\t* src/Makefile.am: Add debug_list.cc.\n\t* src/Makefile.in: Regenerate.\n\t* config/linker-map.gnu: Add _List_node_base exports for std and\n\t__gnu_norm.\n\n\t* include/bits/stl_bvector.h (_Bvector_base): Use _Bvector_impl\n\tidiom that other containers use.\n\t* testsuite/23_containers/vector/bool/clear_allocator.cc: New.\n\nFrom-SVN: r80763", "tree": {"sha": "926a5c55b0430c333ec876a831929183b8900216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926a5c55b0430c333ec876a831929183b8900216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/390e4c0dbe9b5e6854641701c3b0443526130d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390e4c0dbe9b5e6854641701c3b0443526130d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/390e4c0dbe9b5e6854641701c3b0443526130d3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390e4c0dbe9b5e6854641701c3b0443526130d3b/comments", "author": null, "committer": null, "parents": [{"sha": "31e632d3e47f22d310f36709f6d983cb1a8dba92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e632d3e47f22d310f36709f6d983cb1a8dba92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e632d3e47f22d310f36709f6d983cb1a8dba92"}], "stats": {"total": 534, "additions": 361, "deletions": 173}, "files": [{"sha": "386efbc3e830781e254853695d3cc3b2bb752cd5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,3 +1,41 @@\n+2004-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/bits/c++config (_GLIBCXX_STD): New.\n+\t* src/list.cc: Use it.\n+\t* include/std/std_bitset.h: Same.\n+\t* include/bits/vector.tcc: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_list.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/deque.tcc: Same.\n+\t* include/bits/list.tcc: Same.\n+\t* include/debug/vector: Same.\n+\t* include/debug/set.h: Same.\n+\t* include/debug/multiset.h: Same.\n+\t* include/debug/multimap.h: Same.\n+\t* include/debug/map.h: Same.\n+\t* include/debug/list: Same.\n+\t* include/debug/deque: Same.\n+\t* include/debug/bitset: Same.\t\n+\t* include/debug/formatter.h (__gnu_debug): Remove using directive.\n+\tAdd using declaration for std::type_info.\n+\t* include/debug/safe_iterator.h: Add using declaration for\n+\tstd::iterator_traits and std::pair.\n+\t* src/debug_list.cc: New.\n+\t* src/Makefile.am: Add debug_list.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* config/linker-map.gnu: Add _List_node_base exports for std and\n+\t__gnu_norm.\n+\n+\t* include/bits/stl_bvector.h (_Bvector_base): Use _Bvector_impl\n+\tidiom that other containers use.\n+\t* testsuite/23_containers/vector/bool/clear_allocator.cc: New.\n+\t\t\t\n 2004-04-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/14975"}, {"sha": "cf4d198bdc189486904141b3fafb4bd8fa592fdd", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -44,7 +44,7 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \\\n \t$(top_srcdir)/configure $(top_srcdir)/fragment.am \\\n \t$(top_srcdir)/scripts/check_survey.in \\\n \t$(top_srcdir)/scripts/testsuite_flags.in ../ABOUT-NLS \\\n-\t../COPYING ../COPYING.LIB ../ChangeLog ../README \\\n+\t../COPYING ../COPYING.LIB ../ChangeLog ../README ../compile \\\n \t../config.guess ../config.rpath ../config.sub ../install-sh \\\n \t../ltcf-c.sh ../ltcf-cxx.sh ../ltcf-gcj.sh ../ltconfig \\\n \t../ltmain.sh ../missing ../mkinstalldirs ../ylwrap ChangeLog \\"}, {"sha": "b9205db85a03a0044b6b0ae867b3f3b1e8aa5ba2", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -55,6 +55,11 @@ GLIBCXX_3.4 {\n       std::locale::_S_normalize_category*;\n       std::locale::_[T-Za-z]*;\n       std::[A-Zm-z]*;\n+      std::_List_node_base::hook*;\n+      std::_List_node_base::swap*;\n+      std::_List_node_base::unhook*;\n+      std::_List_node_base::reverse*;\n+      std::_List_node_base::transfer*;\n       std::__throw_*;\n       std::__basic_file*;\n       std::__timepunct*;\n@@ -66,10 +71,14 @@ GLIBCXX_3.4 {\n       std::__moneypunct_cache*;\n       std::__numpunct_cache*;\n       std::__timepunct_cache*;\n-      __gnu_norm::*;\n       __gnu_debug::_Safe_iterator_base*;\n       __gnu_debug::_Safe_sequence_base*;\n-      __gnu_debug::_Error_formatter*\n+      __gnu_debug::_Error_formatter*;\n+      __gnu_norm::_List_node_base::hook*;\n+      __gnu_norm::_List_node_base::swap*;\n+      __gnu_norm::_List_node_base::unhook*;\n+      __gnu_norm::_List_node_base::reverse*;\n+      __gnu_norm::_List_node_base::transfer*\n     };\n \n     # Names not in an 'extern' block are mangled names."}, {"sha": "473777f8d2aa217b46e7d2c5cb1fb5d02ff3e9a7", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Predefined symbols and macros -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -51,27 +51,30 @@\n # define _GLIBCXX_EXTERN_TEMPLATE 1\n #endif\n \n-// To enable debug mode.\n-namespace __gnu_norm \n-{ \n-  using namespace std; \n-}\n-\n+// Debug mode support. Debug mode basic_string is not allowed to be\n+// associated with std, because of locale and exception link\n+// dependence.\n namespace __gnu_debug_def { }\n \n namespace __gnu_debug \n { \n-  using namespace __gnu_debug_def __attribute__ ((strong));\n+  using namespace __gnu_debug_def;\n }\n \n+#ifdef _GLIBCXX_DEBUG\n+# define _GLIBCXX_STD __gnu_norm\n+namespace __gnu_norm \n+{ \n+  using namespace std; \n+}\n namespace std\n {\n-#ifdef _GLIBCXX_DEBUG\n   using namespace __gnu_debug_def __attribute__ ((strong));\n+}\n #else\n-  using namespace __gnu_norm __attribute__ ((strong));\n+# define _GLIBCXX_STD std\n #endif\n-}\n+\n \n // The remainder of the prewritten config is automatic; all the\n // user hooks are listed above."}, {"sha": "e8e043886abbfee5e2fb36b6237f4d8b1e9eb79f", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -61,7 +61,7 @@\n #ifndef _DEQUE_TCC\n #define _DEQUE_TCC 1\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   template <typename _Tp, typename _Alloc>\n     deque<_Tp,_Alloc>&\n@@ -714,6 +714,6 @@ namespace __gnu_norm\n       this->_M_impl._M_start._M_set_node(__new_nstart);\n       this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);\n     }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif"}, {"sha": "aaaa8c364bdffdcaedfa1bc109a2818fea1acb73", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -61,7 +61,7 @@\n #ifndef _LIST_TCC\n #define _LIST_TCC 1\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   template<typename _Tp, typename _Alloc>\n     void\n@@ -371,7 +371,7 @@ namespace __gnu_norm\n \t    swap( *(__fill-1) );\n \t  }\n       }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _LIST_TCC */\n "}, {"sha": "4ecdf4449259fa0439bb6955ba9419a78d97081c", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 109, "deletions": 98, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,4 +1,4 @@\n-// bit_vector and vector<bool> specialization -*- C++ -*-\n+// vector<bool> specialization -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n@@ -61,7 +61,7 @@\n #ifndef _BVECTOR_H\n #define _BVECTOR_H 1\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   typedef unsigned long _Bit_type;\n   enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n@@ -322,7 +322,8 @@ namespace __gnu_norm\n       return *this;\n     }\n \n-    const_iterator operator+(difference_type __i) const {\n+    const_iterator \n+    operator+(difference_type __i) const {\n       const_iterator __tmp = *this;\n       return __tmp += __i;\n     }\n@@ -345,47 +346,52 @@ namespace __gnu_norm\n \n   template<class _Alloc>\n     class _Bvector_base\n-    : public _Alloc::template rebind<_Bit_type>::other\n     {\n       typedef typename _Alloc::template rebind<_Bit_type>::other\n         _Bit_alloc_type;\n+      \n+      struct _Bvector_impl : public _Bit_alloc_type\n+      {\n+\t_Bit_iterator \t_M_start;\n+\t_Bit_iterator \t_M_finish;\n+\t_Bit_type* \t_M_end_of_storage;\n+\t_Bvector_impl(const _Bit_alloc_type& __a)\n+\t: _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)\n+\t{ }\n+      };\n \n     public:\n       typedef _Alloc allocator_type;\n \n       allocator_type\n       get_allocator() const\n-      { return *static_cast<const _Bit_alloc_type*>(this); }\n+      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }\n \n-      _Bvector_base(const allocator_type& __a)\n-      : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0) { }\n+      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }\n \n       ~_Bvector_base() { this->_M_deallocate(); }\n \n     protected:\n+      _Bvector_impl _M_impl;\n+\n       _Bit_type*\n-      _M_bit_alloc(size_t __n)\n-      { return _Bit_alloc_type::allocate((__n + _S_word_bit - 1)\n-\t\t\t\t\t / _S_word_bit); }\n+      _M_allocate(size_t __n)\n+      { return _M_impl.allocate((__n + _S_word_bit - 1) / _S_word_bit); }\n \n       void\n       _M_deallocate()\n       {\n-\tif (_M_start._M_p)\n-\t  _Bit_alloc_type::deallocate(_M_start._M_p,\n-\t\t\t\t      _M_end_of_storage - _M_start._M_p);\n+\tif (_M_impl._M_start._M_p)\n+\t  _M_impl.deallocate(_M_impl._M_start._M_p,\n+\t\t\t    _M_impl._M_end_of_storage - _M_impl._M_start._M_p);\n       }\n-\n-      _Bit_iterator _M_start;\n-      _Bit_iterator _M_finish;\n-      _Bit_type* _M_end_of_storage;\n     };\n-} // namespace __gnu_norm\n+} // namespace std\n \n // Declare a partial specialization of vector<T, Alloc>.\n #include <bits/stl_vector.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   /**\n    *  @brief  A specialization of vector for booleans which offers fixed time\n@@ -429,51 +435,50 @@ template<typename _Alloc>\n     { return _Bvector_base<_Alloc>::get_allocator(); }\n \n   protected:\n-    using _Bvector_base<_Alloc>::_M_bit_alloc;\n+    using _Bvector_base<_Alloc>::_M_allocate;\n     using _Bvector_base<_Alloc>::_M_deallocate;\n-    using _Bvector_base<_Alloc>::_M_start;\n-    using _Bvector_base<_Alloc>::_M_finish;\n-    using _Bvector_base<_Alloc>::_M_end_of_storage;\n \n   protected:\n     void _M_initialize(size_type __n)\n     {\n-      _Bit_type* __q = this->_M_bit_alloc(__n);\n-      this->_M_end_of_storage = __q + (__n + _S_word_bit - 1) / _S_word_bit;\n-      this->_M_start = iterator(__q, 0);\n-      this->_M_finish = this->_M_start + difference_type(__n);\n+      _Bit_type* __q = this->_M_allocate(__n);\n+      this->_M_impl._M_end_of_storage = __q \n+\t                               + (__n + _S_word_bit - 1) / _S_word_bit;\n+      this->_M_impl._M_start = iterator(__q, 0);\n+      this->_M_impl._M_finish = this->_M_start + difference_type(__n);\n     }\n \n     void _M_insert_aux(iterator __position, bool __x)\n     {\n-      if (this->_M_finish._M_p != this->_M_end_of_storage)\n+      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)\n \t{\n-\t  std::copy_backward(__position, this->_M_finish, this->_M_finish + 1);\n+\t  std::copy_backward(__position, this->_M_impl._M_finish, \n+\t\t\t     this->_M_impl._M_finish + 1);\n \t  *__position = __x;\n-\t  ++this->_M_finish;\n+\t  ++this->_M_impl._M_finish;\n \t}\n       else\n \t{\n \t  const size_type __len = size() ? 2 * size()\n \t                                 : static_cast<size_type>(_S_word_bit);\n-\t  _Bit_type * __q = this->_M_bit_alloc(__len);\n+\t  _Bit_type * __q = this->_M_allocate(__len);\n \t  iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n \t  *__i++ = __x;\n-\t  this->_M_finish = std::copy(__position, end(), __i);\n+\t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t  this->_M_deallocate();\n-\t  this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)\n+\t  this->_M_impl._M_end_of_storage = __q + (__len + _S_word_bit - 1)\n \t\t\t\t    / _S_word_bit;\n-\t  this->_M_start = iterator(__q, 0);\n+\t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }\n \n     template<class _InputIterator>\n     void _M_initialize_range(_InputIterator __first, _InputIterator __last,\n                              input_iterator_tag)\n     {\n-      this->_M_start = iterator();\n-      this->_M_finish = iterator();\n-      this->_M_end_of_storage = 0;\n+      this->_M_impl._M_start = iterator();\n+      this->_M_impl._M_finish = iterator();\n+      this->_M_impl._M_end_of_storage = 0;\n       for ( ; __first != __last; ++__first)\n         push_back(*__first);\n     }\n@@ -484,13 +489,12 @@ template<typename _Alloc>\n     {\n       const size_type __n = std::distance(__first, __last);\n       _M_initialize(__n);\n-      std::copy(__first, __last, this->_M_start);\n+      std::copy(__first, __last, this->_M_impl._M_start);\n     }\n \n     template<class _InputIterator>\n-    void _M_insert_range(iterator __pos,\n-                         _InputIterator __first, _InputIterator __last,\n-                         input_iterator_tag)\n+    void _M_insert_range(iterator __pos, _InputIterator __first, \n+\t\t\t _InputIterator __last, input_iterator_tag)\n     {\n       for ( ; __first != __last; ++__first)\n \t{\n@@ -500,47 +504,46 @@ template<typename _Alloc>\n     }\n \n     template<class _ForwardIterator>\n-    void _M_insert_range(iterator __position,\n-                         _ForwardIterator __first, _ForwardIterator __last,\n-                         forward_iterator_tag)\n+    void _M_insert_range(iterator __position, _ForwardIterator __first, \n+\t\t\t _ForwardIterator __last, forward_iterator_tag)\n     {\n       if (__first != __last)\n \t{\n \t  size_type __n = std::distance(__first, __last);\n \t  if (capacity() - size() >= __n)\n \t    {\n \t      std::copy_backward(__position, end(),\n-\t\t\t\t this->_M_finish + difference_type(__n));\n+\t\t\t       this->_M_impl._M_finish + difference_type(__n));\n \t      std::copy(__first, __last, __position);\n-\t      this->_M_finish += difference_type(__n);\n+\t      this->_M_impl._M_finish += difference_type(__n);\n \t    }\n \t  else\n \t    {\n \t      const size_type __len = size() + std::max(size(), __n);\n-\t      _Bit_type * __q = this->_M_bit_alloc(__len);\n+\t      _Bit_type * __q = this->_M_allocate(__len);\n \t      iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n \t      __i = std::copy(__first, __last, __i);\n-\t      this->_M_finish = std::copy(__position, end(), __i);\n+\t      this->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t      this->_M_deallocate();\n-\t      this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)\n-\t\t                        / _S_word_bit;\n-\t      this->_M_start = iterator(__q, 0);\n+\t      this->_M_impl._M_end_of_storage = __q + (__len + _S_word_bit - 1)\n+\t\t                                / _S_word_bit;\n+\t      this->_M_impl._M_start = iterator(__q, 0);\n \t    }\n \t}\n     }\n \n   public:\n     iterator begin()\n-    { return this->_M_start; }\n+    { return this->_M_impl._M_start; }\n \n     const_iterator begin() const\n-    { return this->_M_start; }\n+    { return this->_M_impl._M_start; }\n \n     iterator end()\n-    { return this->_M_finish; }\n+    { return this->_M_impl._M_finish; }\n \n     const_iterator end() const\n-    { return this->_M_finish; }\n+    { return this->_M_impl._M_finish; }\n \n     reverse_iterator rbegin()\n     { return reverse_iterator(end()); }\n@@ -561,7 +564,7 @@ template<typename _Alloc>\n     { return size_type(-1); }\n \n     size_type capacity() const\n-    { return size_type(const_iterator(this->_M_end_of_storage, 0)\n+    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)\n \t\t       - begin()); }\n     bool empty() const\n     { return begin() == end(); }\n@@ -587,45 +590,49 @@ template<typename _Alloc>\n     explicit vector(const allocator_type& __a = allocator_type())\n       : _Bvector_base<_Alloc>(__a) { }\n \n-    vector(size_type __n, bool __value,\n+    vector(size_type __n, bool __value, \n \t   const allocator_type& __a = allocator_type())\n-      : _Bvector_base<_Alloc>(__a)\n+    : _Bvector_base<_Alloc>(__a)\n     {\n       _M_initialize(__n);\n-      std::fill(this->_M_start._M_p, this->_M_end_of_storage, __value ? ~0 : 0);\n+      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage, \n+\t\t__value ? ~0 : 0);\n     }\n \n     explicit vector(size_type __n)\n-      : _Bvector_base<_Alloc>(allocator_type())\n+    : _Bvector_base<_Alloc>(allocator_type())\n     {\n       _M_initialize(__n);\n-      std::fill(this->_M_start._M_p, this->_M_end_of_storage, 0);\n+      std::fill(this->_M_impl._M_start._M_p, \n+\t\tthis->_M_impl._M_end_of_storage, 0);\n     }\n \n     vector(const vector& __x) : _Bvector_base<_Alloc>(__x.get_allocator())\n     {\n       _M_initialize(__x.size());\n-      std::copy(__x.begin(), __x.end(), this->_M_start);\n+      std::copy(__x.begin(), __x.end(), this->_M_impl._M_start);\n     }\n \n     // Check whether it's an integral type.  If so, it's not an iterator.\n-\n     template<class _Integer>\n     void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n     {\n       _M_initialize(__n);\n-      std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+      std::fill(this->_M_impl._M_start._M_p, \n+\t\tthis->_M_impl._M_end_of_storage, __x ? ~0 : 0);\n     }\n \n     template<class _InputIterator>\n-    void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n-                                __false_type)\n-    { _M_initialize_range(__first, __last, std::__iterator_category(__first)); }\n+      void \n+      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+\t\t\t     __false_type)\n+      { _M_initialize_range(__first, __last, \n+\t\t\t    std::__iterator_category(__first)); }\n \n     template<class _InputIterator>\n-    vector(_InputIterator __first, _InputIterator __last,\n-             const allocator_type& __a = allocator_type())\n-      : _Bvector_base<_Alloc>(__a)\n+      vector(_InputIterator __first, _InputIterator __last,\n+\t     const allocator_type& __a = allocator_type())\n+    : _Bvector_base<_Alloc>(__a)\n     {\n       typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n       _M_initialize_dispatch(__first, __last, _Integral());\n@@ -643,7 +650,7 @@ template<typename _Alloc>\n \t  _M_initialize(__x.size());\n \t}\n       std::copy(__x.begin(), __x.end(), begin());\n-      this->_M_finish = begin() + difference_type(__x.size());\n+      this->_M_impl._M_finish = begin() + difference_type(__x.size());\n       return *this;\n     }\n \n@@ -656,13 +663,15 @@ template<typename _Alloc>\n     {\n       if (__n > size())\n \t{\n-\t  std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+\t  std::fill(this->_M_impl._M_start._M_p, \n+\t\t    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);\n \t  insert(end(), __n - size(), __x);\n \t}\n       else\n \t{\n \t  erase(begin() + __n, end());\n-\t  std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+\t  std::fill(this->_M_impl._M_start._M_p, \n+\t\t    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);\n \t}\n     }\n \n@@ -720,11 +729,12 @@ template<typename _Alloc>\n \t__throw_length_error(__N(\"vector::reserve\"));\n       if (this->capacity() < __n)\n \t{\n-\t  _Bit_type* __q = this->_M_bit_alloc(__n);\n-\t  this->_M_finish = std::copy(begin(), end(), iterator(__q, 0));\n+\t  _Bit_type* __q = this->_M_allocate(__n);\n+\t  this->_M_impl._M_finish = std::copy(begin(), end(), \n+\t\t\t\t\t      iterator(__q, 0));\n \t  this->_M_deallocate();\n-\t  this->_M_start = iterator(__q, 0);\n-\t  this->_M_end_of_storage = __q + (__n + _S_word_bit - 1) / _S_word_bit;\n+\t  this->_M_impl._M_start = iterator(__q, 0);\n+\t  this->_M_impl._M_end_of_storage = __q + (__n + _S_word_bit - 1) / _S_word_bit;\n \t}\n     }\n \n@@ -742,17 +752,18 @@ template<typename _Alloc>\n \n     void push_back(bool __x)\n     {\n-      if (this->_M_finish._M_p != this->_M_end_of_storage)\n-        *this->_M_finish++ = __x;\n+      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)\n+        *this->_M_impl._M_finish++ = __x;\n       else\n         _M_insert_aux(end(), __x);\n     }\n \n     void swap(vector<bool, _Alloc>& __x)\n     {\n-      std::swap(this->_M_start, __x._M_start);\n-      std::swap(this->_M_finish, __x._M_finish);\n-      std::swap(this->_M_end_of_storage, __x._M_end_of_storage);\n+      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n+      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);\n+      std::swap(this->_M_impl._M_end_of_storage, \n+\t\t__x._M_impl._M_end_of_storage);\n     }\n \n     // [23.2.5]/1, third-to-last entry in synopsis listing\n@@ -766,9 +777,9 @@ template<typename _Alloc>\n     iterator insert(iterator __position, bool __x = bool())\n     {\n       const difference_type __n = __position - begin();\n-      if (this->_M_finish._M_p != this->_M_end_of_storage\n+      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage\n \t  && __position == end())\n-        *this->_M_finish++ = __x;\n+        *this->_M_impl._M_finish++ = __x;\n       else\n         _M_insert_aux(__position, __x);\n       return begin() + __n;\n@@ -803,42 +814,42 @@ template<typename _Alloc>\n       if (capacity() - size() >= __n)\n \t{\n \t  std::copy_backward(__position, end(),\n-\t\t\t     this->_M_finish + difference_type(__n));\n+\t\t\t     this->_M_impl._M_finish + difference_type(__n));\n \t  std::fill(__position, __position + difference_type(__n), __x);\n-\t  this->_M_finish += difference_type(__n);\n+\t  this->_M_impl._M_finish += difference_type(__n);\n \t}\n       else\n \t{\n \t  const size_type __len = size() + std::max(size(), __n);\n-\t  _Bit_type * __q = this->_M_bit_alloc(__len);\n+\t  _Bit_type * __q = this->_M_allocate(__len);\n \t  iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n \t  std::fill_n(__i, __n, __x);\n-\t  this->_M_finish = std::copy(__position, end(),\n-\t\t\t\t      __i + difference_type(__n));\n+\t  this->_M_impl._M_finish = std::copy(__position, end(),\n+\t\t\t\t\t      __i + difference_type(__n));\n \t  this->_M_deallocate();\n-\t  this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)\n-\t                            / _S_word_bit;\n-\t  this->_M_start = iterator(__q, 0);\n+\t  this->_M_impl._M_end_of_storage = __q + (__len + _S_word_bit - 1)\n+\t                                    / _S_word_bit;\n+\t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }\n \n     void insert(iterator __position, size_type __n, bool __x)\n     { _M_fill_insert(__position, __n, __x); }\n \n     void pop_back()\n-    { --this->_M_finish; }\n+    { --this->_M_impl._M_finish; }\n \n     iterator erase(iterator __position)\n     {\n       if (__position + 1 != end())\n         std::copy(__position + 1, end(), __position);\n-      --this->_M_finish;\n+      --this->_M_impl._M_finish;\n       return __position;\n     }\n \n     iterator erase(iterator __first, iterator __last)\n     {\n-      this->_M_finish = std::copy(__last, end(), __first);\n+      this->_M_impl._M_finish = std::copy(__last, end(), __first);\n       return __first;\n     }\n \n@@ -852,14 +863,14 @@ template<typename _Alloc>\n \n     void flip()\n     {\n-      for (_Bit_type * __p = this->_M_start._M_p;\n-\t   __p != this->_M_end_of_storage; ++__p)\n+      for (_Bit_type * __p = this->_M_impl._M_start._M_p;\n+\t   __p != this->_M_impl._M_end_of_storage; ++__p)\n         *__p = ~*__p;\n     }\n \n     void clear()\n     { erase(begin(), end()); }\n   };\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif"}, {"sha": "c2f01a00d3102e9a60aca3fbd34076a43b2274a1", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -65,7 +65,7 @@\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   /**\n    *  @if maint\n@@ -1496,6 +1496,6 @@ namespace __gnu_norm\n     inline void\n     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _DEQUE_H */"}, {"sha": "c94a0a9bf73b44c95d73b34a32309a0ac73a5442", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -63,7 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   // Supporting structures are split into common and templated types; the\n   // latter publicly inherits from the former in an effort to reduce code\n@@ -1247,7 +1247,7 @@ namespace __gnu_norm\n     inline void\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _LIST_H */\n "}, {"sha": "bd78f57cdf90da3577e9cae9a8ea360e50a80ebe", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -63,7 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n@@ -689,6 +689,6 @@ namespace __gnu_norm\n     inline void\n     swap(map<_Key,_Tp,_Compare,_Alloc>& __x, map<_Key,_Tp,_Compare,_Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _MAP_H */"}, {"sha": "c44aa74a6923f21bf990b7ba938e8b97b0bd0d04", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -63,7 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   // Forward declaration of operators < and ==, needed for friend declaration.\n \n@@ -673,6 +673,6 @@ namespace __gnu_norm\n     swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n          multimap<_Key,_Tp,_Compare,_Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _MULTIMAP_H */"}, {"sha": "c82dee68e4efcb51ef97027be1a97069714b2312", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -63,7 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n \n   // Forward declaration of operators < and ==, needed for friend declaration.\n@@ -580,6 +580,6 @@ namespace __gnu_norm\n \t multiset<_Key,_Compare,_Alloc>& __y)\n     { __x.swap(__y); }\n \n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _MULTISET_H */"}, {"sha": "bb28bddc7af991b90e16797a45298c815da7421d", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -63,7 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   // Forward declarations of operators < and ==, needed for friend declaration.\n   template<class _Key, class _Compare = less<_Key>,\n@@ -588,6 +588,6 @@ namespace __gnu_norm\n     swap(set<_Key,_Compare,_Alloc>& __x, set<_Key,_Compare,_Alloc>& __y)\n     { __x.swap(__y); }\n \n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _SET_H */"}, {"sha": "b025393a741892405617a2125be6bedfef63d4ae", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -65,7 +65,7 @@\n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   /**\n    *  @if maint\n@@ -927,6 +927,6 @@ namespace __gnu_norm\n     inline void\n     swap(vector<_Tp,_Alloc>& __x, vector<_Tp,_Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _VECTOR_H */"}, {"sha": "abd1ba76250eb5eaccb738b9670046b679e06c66", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -61,7 +61,7 @@\n #ifndef _VECTOR_TCC\n #define _VECTOR_TCC 1\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   template<typename _Tp, typename _Alloc>\n     void\n@@ -409,6 +409,6 @@ namespace __gnu_norm\n         }\n       }\n     }\n-} // namespace __gnu_norm\n+} // namespace std\n \n #endif /* _VECTOR_TCC */"}, {"sha": "2e2364ff9300dfc06730a2ae864d94e45e010dbf", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging bitset implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,9 +39,10 @@ namespace __gnu_debug_def\n {\n   template<size_t _Nb>\n     class bitset\n-    : public __gnu_norm::bitset<_Nb>, public __gnu_debug::_Safe_sequence_base\n+    : public _GLIBCXX_STD::bitset<_Nb>, \n+      public __gnu_debug::_Safe_sequence_base\n     {\n-      typedef  __gnu_norm::bitset<_Nb>\t\t_Base;\n+      typedef _GLIBCXX_STD::bitset<_Nb> _Base;\n       typedef __gnu_debug::_Safe_sequence_base  _Safe_base;\n \n     public:"}, {"sha": "c39a49c04610595f54ff718f248a4768104601d5", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,10 +39,10 @@ namespace __gnu_debug_def\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class deque\n-    : public  __gnu_norm::deque<_Tp, _Allocator>,\n-    public __gnu_debug::_Safe_sequence<deque<_Tp, _Allocator> >\n+    : public _GLIBCXX_STD::deque<_Tp, _Allocator>,\n+      public __gnu_debug::_Safe_sequence<deque<_Tp, _Allocator> >\n     {\n-      typedef  __gnu_norm::deque<_Tp, _Allocator> _Base;\n+      typedef  _GLIBCXX_STD::deque<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<deque> _Safe_base;\n \n     public:"}, {"sha": "7022fa7007771324b9ccd3b67aec9e0537efa227", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debug-mode error formatting implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,7 +36,7 @@\n \n namespace __gnu_debug\n {\n-  using namespace std;\n+  using std::type_info;\n \n   /** Determine if the two types are the same. */\n   template<typename _Type1, typename _Type2>"}, {"sha": "556c9d9acff7f6b044bc79e5ff55f0c53f401605", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,10 +40,10 @@ namespace __gnu_debug_def\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class list\n-    : public __gnu_norm::list<_Tp, _Allocator>,\n+    : public _GLIBCXX_STD::list<_Tp, _Allocator>,\n       public __gnu_debug::_Safe_sequence<list<_Tp, _Allocator> >\n     {\n-      typedef __gnu_norm::list<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD::list<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<list>  _Safe_base;\n \n     public:\n@@ -76,7 +76,7 @@ namespace __gnu_debug_def\n       template<class _InputIterator>\n       list(_InputIterator __first, _InputIterator __last,\n \t   const _Allocator& __a = _Allocator())\n-\t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last, __a)\n+      : _Base(__gnu_debug::__check_valid_range(__first, __last), __last, __a)\n       { }\n \n "}, {"sha": "2a6794b31e0eab147fac96ac40bce80c17773c7a", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging map implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,10 +40,10 @@ namespace __gnu_debug_def\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class map\n-    : public __gnu_norm::map<_Key, _Tp, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD::map<_Key, _Tp, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<map<_Key, _Tp, _Compare, _Allocator> >\n     {\n-      typedef __gnu_norm::map<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD::map<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<map> _Safe_base;\n \n     public:"}, {"sha": "4de1e3b58f47b06c71e85c2c1eb42c65dd94218f", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,10 +40,10 @@ namespace __gnu_debug_def\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap\n-    : public __gnu_norm::multimap<_Key, _Tp, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD::multimap<_Key, _Tp, _Compare, _Allocator>,\n     public __gnu_debug::_Safe_sequence<multimap<_Key,_Tp,_Compare,_Allocator> >\n     {\n-      typedef __gnu_norm::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multimap> _Safe_base;\n \n     public:"}, {"sha": "92042fef68cefd18f469948da43d6c189f283259", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,10 +40,10 @@ namespace __gnu_debug_def\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class multiset\n-    : public __gnu_norm::multiset<_Key, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD::multiset<_Key, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<multiset<_Key, _Compare, _Allocator> >\n     {\n-      typedef __gnu_norm::multiset<_Key, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD::multiset<_Key, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multiset> _Safe_base;\n \n     public:"}, {"sha": "7482d6caa6598e2abb7bcb21284773a064f1bd2c", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Safe iterator implementation  -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,6 +38,9 @@\n \n namespace __gnu_debug\n {\n+  using std::iterator_traits;\n+  using std::pair;\n+\n   /** Iterators that derive from _Safe_iterator_base but that aren't\n    *  _Safe_iterators can be determined singular or non-singular via\n    *  _Safe_iterator_base."}, {"sha": "8656cb0aff676fe1eba99c441d7d11ba2e7d6890", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging set implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,10 +40,10 @@ namespace __gnu_debug_def\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class set\n-    : public __gnu_norm::set<_Key,_Compare,_Allocator>,\n+    : public _GLIBCXX_STD::set<_Key,_Compare,_Allocator>,\n       public __gnu_debug::_Safe_sequence<set<_Key, _Compare, _Allocator> >\n     {\n-      typedef __gnu_norm::set<_Key,_Compare,_Allocator> _Base;\n+      typedef _GLIBCXX_STD::set<_Key,_Compare,_Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<set> _Safe_base;\n \n     public:"}, {"sha": "0cc2997b9754b2e0abfd04d5d1115042d8116e9f", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -1,6 +1,6 @@\n // Debugging vector implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,10 +41,10 @@ namespace __gnu_debug_def\n   template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n     class vector\n-    : public __gnu_norm::vector<_Tp, _Allocator>,\n+    : public _GLIBCXX_STD::vector<_Tp, _Allocator>,\n       public __gnu_debug::_Safe_sequence<vector<_Tp, _Allocator> >\n     {\n-      typedef __gnu_norm::vector<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD::vector<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<vector>              _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "fba62c15bcacb4940af0adc5330c7cf6e6fa8311", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -59,12 +59,11 @@\n #include <ostream>     // For ostream (operator<<)\n #include <istream>     // For istream (operator>>)\n \n-\n #define _GLIBCXX_BITSET_BITS_PER_WORD  numeric_limits<unsigned long>::digits\n #define _GLIBCXX_BITSET_WORDS(__n) \\\n  ((__n) < 1 ? 0 : ((__n) + _GLIBCXX_BITSET_BITS_PER_WORD - 1)/_GLIBCXX_BITSET_BITS_PER_WORD)\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   /**\n    *  @if maint\n@@ -1218,7 +1217,7 @@ namespace __gnu_norm\n       return __os << __tmp;\n     }\n   //@}\n-} // namespace __gnu_norm\n+} // namespace std\n \n #undef _GLIBCXX_BITSET_WORDS\n #undef _GLIBCXX_BITSET_BITS_PER_WORD"}, {"sha": "ed4c7107901025eb8e7ceb4d2670057308817430", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -101,6 +101,7 @@ sources = \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n+\tdebug_list.cc \\\n \tfunctexcept.cc \\\n \tglobals_locale.cc \\\n \tglobals_io.cc \\"}, {"sha": "aa192c2b1e2e5d307e80b8b6c688bd02b896224b", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -59,12 +59,12 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tnumeric_members.lo time_members.lo\n am__objects_2 = basic_file.lo c++locale.lo\n am__objects_3 = allocator.lo codecvt.lo complex_io.lo ctype.lo \\\n-\tdebug.lo functexcept.lo globals_locale.lo globals_io.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n-\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n-\tstdexcept.lo strstream.lo tree.lo allocator-inst.lo \\\n-\tconcept-inst.lo fstream-inst.lo ext-inst.lo io-inst.lo \\\n-\tistream-inst.lo locale-inst.lo locale-misc-inst.lo \\\n+\tdebug.lo debug_list.lo functexcept.lo globals_locale.lo \\\n+\tglobals_io.lo ios.lo ios_failure.lo ios_init.lo ios_locale.lo \\\n+\tlimits.lo list.lo locale.lo locale_init.lo locale_facets.lo \\\n+\tlocalename.lo stdexcept.lo strstream.lo tree.lo \\\n+\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n+\tio-inst.lo istream-inst.lo locale-inst.lo locale-misc-inst.lo \\\n \tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo $(am__objects_1) $(am__objects_2)\n@@ -299,6 +299,7 @@ sources = \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n+\tdebug_list.cc \\\n \tfunctexcept.cc \\\n \tglobals_locale.cc \\\n \tglobals_io.cc \\"}, {"sha": "3d14b28f4b9eace4135ed0c88169370223399751", "filename": "libstdc++-v3/src/debug_list.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -0,0 +1,34 @@\n+// Debugging mode support code for list -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#define _GLIBCXX_DEBUG\n+\n+#include <bits/c++config.h>\n+\n+#include \"list.cc\""}, {"sha": "ec94053b41116425d5ebbad7c3275adf2f0c245a", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -55,7 +55,7 @@\n \n #include <list>\n \n-namespace __gnu_norm\n+namespace _GLIBCXX_STD\n {\n   void\n   _List_node_base::swap(_List_node_base& __x, _List_node_base& __y)\n@@ -121,7 +121,7 @@ namespace __gnu_norm\n   }\n \n   void\n-  _List_node_base::hook(_List_node_base * const __position)\n+  _List_node_base::hook(_List_node_base* const __position)\n   {\n     this->_M_next = __position;\n     this->_M_prev = __position->_M_prev;\n@@ -137,5 +137,5 @@ namespace __gnu_norm\n     __prev_node->_M_next = __next_node;\n     __next_node->_M_prev = __prev_node;\n   }\n-} // namespace __gnu_norm\n+} // namespace std\n "}, {"sha": "ff1771626748ce3c56b171c3b73447c8b8982e91", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/clear_allocator.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e4c0dbe9b5e6854641701c3b0443526130d3b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc?ref=390e4c0dbe9b5e6854641701c3b0443526130d3b", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <vector>\n+#include <ext/new_allocator.h>\n+\n+using namespace std;\n+using __gnu_cxx::new_allocator;\n+\n+template<typename T>\n+  class clear_alloc : public new_allocator<T> \n+  {\n+  public:\n+\n+    template <typename T1>\n+      struct rebind \n+      { typedef clear_alloc<T1> other; };\n+\n+    virtual void clear() throw()\n+    { }\n+\n+    clear_alloc() throw()\n+    { }\n+    \n+    clear_alloc(clear_alloc const& _wa) throw()\n+    { }\n+    \n+    template<typename T1>\n+      clear_alloc(clear_alloc<T1> const& _wa) throw()\n+      { }\n+\n+    virtual ~clear_alloc() throw()\n+    { this->clear(); }\n+\n+    T* allocate(typename new_allocator<T>::size_type n, const void *hint = 0)\n+    {\n+      this->clear();\n+      return new_allocator<T>::allocate(n, hint);\n+    }\n+    \n+    void deallocate(T *ptr, typename new_allocator<T>::size_type n)\n+    {\n+      this->clear();\n+      new_allocator<T>::deallocate(ptr, n);\n+    }\n+  };\n+\n+template<typename Container>\n+  void Check_Container()\n+  {\n+    Container* pic = new Container;\n+    int x = 230;\n+    \n+    while (x--)\n+      {\n+\tpic->push_back(x);\n+      }\n+    \n+    pic->get_allocator();\n+    \n+    // The following has led to infinite recursions or cores.\n+    pic->clear();\n+\n+    delete pic;\n+  }\n+\n+\n+int main()\n+{\n+  Check_Container<std::vector<bool, clear_alloc<bool> > >();\n+  return 0;\n+}\n+"}]}