{"sha": "c66f079e8d2c33f5996fc0b7383153336a957efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2ZjA3OWU4ZDJjMzNmNTk5NmZjMGI3MzgzMTUzMzM2YTk1N2VmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-09T06:15:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-09T06:15:18Z"}, "message": "predict.c (PROB_NEVER, [...]): New.\n\n        * predict.c (PROB_NEVER, PROB_VERY_UNLIKELY): New.\n        (PROB_UNLIKELY, PROB_EVEN, PROB_LIKELY): New.\n        (PROB_VERY_LIKELY, PROB_ALWAYS): New.\n        (estimate_probability, expected_value_to_br_prob): Use them.\n\nFrom-SVN: r33792", "tree": {"sha": "4e267c18c32a4fdd44a7212340170c2318268bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e267c18c32a4fdd44a7212340170c2318268bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c66f079e8d2c33f5996fc0b7383153336a957efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66f079e8d2c33f5996fc0b7383153336a957efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66f079e8d2c33f5996fc0b7383153336a957efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66f079e8d2c33f5996fc0b7383153336a957efd/comments", "author": null, "committer": null, "parents": [{"sha": "2ff00dd433d9ad9b342bbaa2eb90ced859a02874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff00dd433d9ad9b342bbaa2eb90ced859a02874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff00dd433d9ad9b342bbaa2eb90ced859a02874"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "85f3ea1dbca2a17c8d61503719b595888a634a7d", "filename": "gcc/predict.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66f079e8d2c33f5996fc0b7383153336a957efd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66f079e8d2c33f5996fc0b7383153336a957efd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=c66f079e8d2c33f5996fc0b7383153336a957efd", "patch": "@@ -48,6 +48,14 @@\n #include \"expr.h\"\n \n \n+/* Random guesstimation given names.  */\n+#define PROB_NEVER\t\t(0)\n+#define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 10 - 1)\n+#define PROB_UNLIKELY\t\t(REG_BR_PROB_BASE * 4 / 10 - 1)\n+#define PROB_EVEN\t\t(REG_BR_PROB_BASE / 2)\n+#define PROB_LIKELY\t\t(REG_BR_PROB_BASE - PROB_UNLIKELY)\n+#define PROB_VERY_LIKELY\t(REG_BR_PROB_BASE - PROB_VERY_UNLIKELY)\n+#define PROB_ALWAYS\t\t(REG_BR_PROB_BASE)\n \n /* Statically estimate the probability that a branch will be taken.\n    ??? In the next revision there will be a number of other predictors added\n@@ -89,7 +97,7 @@ estimate_probability (loops_info)\n \t\t  if (! find_reg_note (last_insn, REG_BR_PROB, 0))\n \t\t    REG_NOTES (last_insn)\n \t\t      = gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t\t\t   GEN_INT (REG_BR_PROB_BASE),\n+\t\t\t\t\t   GEN_INT (PROB_VERY_LIKELY),\n \t\t\t\t\t   REG_NOTES (last_insn));\n \t\t}\n \t}\n@@ -124,9 +132,9 @@ estimate_probability (loops_info)\n \tif (e->dest->succ == NULL)\n \t  {\n \t    if (e->flags & EDGE_FALLTHRU)\n-\t      prob = REG_BR_PROB_BASE;\n+\t      prob = PROB_ALWAYS;\n \t    else\n-\t      prob = 0;\n+\t      prob = PROB_NEVER;\n \t    goto emitnote;\n \t  }\n \n@@ -142,7 +150,7 @@ estimate_probability (loops_info)\n \t\t  || (GET_CODE (XEXP (cond, 1)) == REG\n \t\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 1))))))\n \t    {\n-\t      prob = REG_BR_PROB_BASE / 10;\n+\t      prob = PROB_UNLIKELY;\n \t      goto emitnote;\n \t    }\n \t  break;\n@@ -153,7 +161,7 @@ estimate_probability (loops_info)\n \t\t  || (GET_CODE (XEXP (cond, 1)) == REG\n \t\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 1))))))\n \t    {\n-\t      prob = REG_BR_PROB_BASE - (REG_BR_PROB_BASE / 10);\n+\t      prob = PROB_LIKELY;\n \t      goto emitnote;\n \t    }\n \t  break;\n@@ -170,20 +178,20 @@ estimate_probability (loops_info)\n \t{\n \tcase CONST_INT:\n \t  /* Unconditional branch.  */\n-\t  prob = (cond == const0_rtx ? 0 : REG_BR_PROB_BASE);\n+\t  prob = (cond == const0_rtx ? PROB_NEVER : PROB_ALWAYS);\n \t  goto emitnote;\n \n \tcase EQ:\n-\t  prob = REG_BR_PROB_BASE / 10;\n+\t  prob = PROB_UNLIKELY;\n \t  goto emitnote;\n \tcase NE:\n-\t  prob = REG_BR_PROB_BASE - (REG_BR_PROB_BASE / 10);\n+\t  prob = PROB_LIKELY;\n \t  goto emitnote;\n \tcase LE:\n \tcase LT:\n \t  if (XEXP (cond, 1) == const0_rtx)\n \t    {\n-\t      prob = REG_BR_PROB_BASE / 10;\n+\t      prob = PROB_UNLIKELY;\n \t      goto emitnote;\n \t    }\n \t  break;\n@@ -193,7 +201,7 @@ estimate_probability (loops_info)\n \t      || (GET_CODE (XEXP (cond, 1)) == CONST_INT\n \t\t  && INTVAL (XEXP (cond, 1)) == -1))\n \t    {\n-\t      prob = REG_BR_PROB_BASE - (REG_BR_PROB_BASE / 10);\n+\t      prob = PROB_LIKELY;\n \t      goto emitnote;\n \t    }\n \t  break;\n@@ -203,7 +211,7 @@ estimate_probability (loops_info)\n \t}\n \n       /* If we havn't chosen something by now, predict 50-50.  */\n-      prob = REG_BR_PROB_BASE / 2;\n+      prob = PROB_EVEN;\n \n     emitnote:\n       REG_NOTES (last_insn)\n@@ -280,8 +288,10 @@ expected_value_to_br_prob ()\n \n       /* Turn the condition into a scaled branch probability.  */\n       if (cond == const1_rtx)\n-\tcond = GEN_INT (REG_BR_PROB_BASE);\n-      else if (cond != const0_rtx)\n+\tcond = GEN_INT (PROB_VERY_LIKELY);\n+      else if (cond == const0_rtx)\n+\tcond = GEN_INT (PROB_VERY_UNLIKELY);\n+      else\n \tabort ();\n       REG_NOTES (insn) = alloc_EXPR_LIST (REG_BR_PROB, cond, REG_NOTES (insn));\n     }"}]}