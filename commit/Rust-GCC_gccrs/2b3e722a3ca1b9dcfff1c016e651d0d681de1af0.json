{"sha": "2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzZTcyMmEzY2ExYjlkY2ZmZjFjMDE2ZTY1MWQwZDY4MWRlMWFmMA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-10-27T19:57:39Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-10-27T20:01:26Z"}, "message": "Fix PR97497\n\nThis works around a limitation of gcse with handling of partially\nclobbered registers.  With this patch our GOT pointer register r12 is\nnot marked as partially clobbered anymore for the -m31 -mzarch -fpic\ncombination. This is correct since all the bits in r12 we actually\ncare about are in fact preserved.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/97497\n\t* config/s390/s390.c (s390_hard_regno_call_part_clobbered): Do not\n\treturn true for r12 when -fpic is used.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/pr97497.c: New test.", "tree": {"sha": "8d53373084046f89e9d9ad197f17d28198525265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d53373084046f89e9d9ad197f17d28198525265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a764c40079a493826a3678174f908941a383644e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a764c40079a493826a3678174f908941a383644e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a764c40079a493826a3678174f908941a383644e"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "3c3feb2769b707a7e08cb9f65ed9c136f525ecda", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "patch": "@@ -10376,9 +10376,16 @@ static bool\n s390_hard_regno_call_part_clobbered (unsigned int, unsigned int regno,\n \t\t\t\t     machine_mode mode)\n {\n+  /* For r12 we know that the only bits we actually care about are\n+     preserved across function calls.  Since r12 is a fixed reg all\n+     accesses to r12 are generated by the backend.\n+\n+     This workaround is necessary until gcse implements proper\n+     tracking of partially clobbered registers.  */\n   if (!TARGET_64BIT\n       && TARGET_ZARCH\n       && GET_MODE_SIZE (mode) > 4\n+      && (!flag_pic || regno != PIC_OFFSET_TABLE_REGNUM)\n       && ((regno >= 6 && regno <= 15) || regno == 32))\n     return true;\n "}, {"sha": "460c8503f8c8da0b5fb823d5bd1ddfcaf81ce018", "filename": "gcc/testsuite/gcc.target/s390/pr97497.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr97497.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3e722a3ca1b9dcfff1c016e651d0d681de1af0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr97497.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr97497.c?ref=2b3e722a3ca1b9dcfff1c016e651d0d681de1af0", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -march=z900 -mzarch -fpic\" } */\n+\n+char *t;\n+\n+void __attribute__((noinline,noclone))\n+bar(int a, char* b)\n+{\n+  if (a != 1)\n+    __builtin_abort();\n+}\n+\n+void __attribute__((noinline,noclone))\n+baz(char* a, int b)\n+{\n+  if (b != 1)\n+    __builtin_abort();\n+}\n+\n+int __attribute__((noinline,noclone))\n+foo (int a)\n+{\n+  bar (1, t);\n+  if (a)\n+    baz (t, 1);\n+\n+  bar (1, t);\n+}\n+\n+int\n+main ()\n+{\n+  foo (1);\n+\n+  return 0;\n+}"}]}