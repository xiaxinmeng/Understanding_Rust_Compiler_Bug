{"sha": "c5288df751f9ecd11898dec5f2a7b6b03267f79e", "node_id": "C_kwDOANBUbNoAKGM1Mjg4ZGY3NTFmOWVjZDExODk4ZGVjNWYyYTdiNmIwMzI2N2Y3OWU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-11T17:46:50Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-11T17:51:18Z"}, "message": "PR tree-optimization/98335: Improvements to DSE's compute_trims.\n\nThis patch is the main middle-end piece of a fix for PR tree-opt/98335,\nwhich is a code-quality regression affecting mainline.  The issue occurs\nin DSE's (dead store elimination's) compute_trims function that determines\nwhere a store to memory can be trimmed.  In the testcase given in the\nPR, this function notices that the first byte of a DImode store is dead,\nand replaces the 8-byte store at (aligned) offset zero, with a 7-byte store\nat (unaligned) offset one.  Most architectures can store a power-of-two\nbytes (up to a maximum) in single instruction, so writing 7 bytes requires\nmore instructions than writing 8 bytes.  This patch follows Jakub Jelinek's\nsuggestion in comment 5, that compute_trims needs improved heuristics.\n\nOn x86_64-pc-linux-gnu with -O2 the new test case in the PR goes from:\n\n        movl    $0, -24(%rsp)\n        movabsq $72057594037927935, %rdx\n        movl    $0, -21(%rsp)\n        andq    -24(%rsp), %rdx\n        movq    %rdx, %rax\n        salq    $8, %rax\n        movb    c(%rip), %al\n        ret\n\nto\n\n        xorl    %eax, %eax\n        movb    c(%rip), %al\n        ret\n\n2022-03-11  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\tPR tree-optimization/98335\n\t* builtins.cc (get_object_alignment_2): Export.\n\t* builtins.h (get_object_alignment_2): Likewise.\n\t* tree-ssa-alias.cc (ao_ref_alignment): New.\n\t* tree-ssa-alias.h (ao_ref_alignment): Declare.\n\n\t* tree-ssa-dse.cc (compute_trims): Improve logic deciding whether\n\tto align head/tail, writing more bytes but using fewer store insns.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/98335\n\t* g++.dg/pr98335.C: New test case.\n\t* gcc.dg/pr86010.c: New test case.\n\t* gcc.dg/pr86010-2.c: New test case.", "tree": {"sha": "6ba408ab136ef26fb762ca5138c9958f341f1529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba408ab136ef26fb762ca5138c9958f341f1529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5288df751f9ecd11898dec5f2a7b6b03267f79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288df751f9ecd11898dec5f2a7b6b03267f79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5288df751f9ecd11898dec5f2a7b6b03267f79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288df751f9ecd11898dec5f2a7b6b03267f79e/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098c538ae8c0c5e281d9191a6b54ffe38b624ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098c538ae8c0c5e281d9191a6b54ffe38b624ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098c538ae8c0c5e281d9191a6b54ffe38b624ef3"}], "stats": {"total": 144, "additions": 139, "deletions": 5}, "files": [{"sha": "4c6c29390531d8ae9765add598621727213b23ec", "filename": "gcc/builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -233,7 +233,7 @@ called_as_built_in (tree node)\n    If ADDR_P is true we are taking the address of the memory reference EXP\n    and thus cannot rely on the access taking place.  */\n \n-static bool\n+bool\n get_object_alignment_2 (tree exp, unsigned int *alignp,\n \t\t\tunsigned HOST_WIDE_INT *bitposp, bool addr_p)\n {"}, {"sha": "5ad830c9fbf18d2b1f0d479448662af522891437", "filename": "gcc/builtins.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -52,6 +52,8 @@ extern bool force_folding_builtin_constant_p;\n extern bool called_as_built_in (tree);\n extern bool get_object_alignment_1 (tree, unsigned int *,\n \t\t\t\t    unsigned HOST_WIDE_INT *);\n+extern bool get_object_alignment_2 (tree, unsigned int *,\n+\t\t\t\t    unsigned HOST_WIDE_INT *, bool);\n extern unsigned int get_object_alignment (tree);\n extern bool get_pointer_alignment_1 (tree, unsigned int *,\n \t\t\t\t     unsigned HOST_WIDE_INT *);"}, {"sha": "c54f4d931ca8d62d9f33b1af86feb529608eb57a", "filename": "gcc/testsuite/g++.dg/pr98335.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98335.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98335.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98335.C?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct Data {\n+  char a;\n+  int b;\n+};\n+\n+char c;\n+\n+Data val(int idx) {\n+  return { c };  // { dg-warning \"extended initializer\" \"c++ 98\"  { target { c++98_only } } }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" + 1B] = {}\" \"optimized\" } } */"}, {"sha": "4c82e65aeb5c42fbd47f58d3a70d50012f989230", "filename": "gcc/testsuite/gcc.dg/pr86010-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010-2.c?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void f (void*);\n+\n+void g (char *a)\n+{\n+  __builtin_memset (a, 0, 8);\n+  __builtin_memset (a, 0, 8);\n+\n+  f (a);\n+}\n+\n+void h (char *a)\n+{\n+  __builtin_memset (a, 0, 8);\n+  __builtin_memset (a, 0, 7);\n+\n+  f (a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 2 \"optimized\" } } */"}, {"sha": "ac2798932688a8e2d4b244747ff8c130e70292dc", "filename": "gcc/testsuite/gcc.dg/pr86010.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86010.c?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void f (void*);\n+\n+void g (void)\n+{\n+  char a[8];\n+  __builtin_memset (a, 0, 8);\n+  __builtin_memset (a, 0, 8);\n+\n+  f (a);\n+}\n+\n+void h (void)\n+{\n+  char a[8];\n+  __builtin_memset (a, 0, 8);\n+  __builtin_memset (a, 0, 7);\n+\n+  f (a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 2 \"optimized\" } } */"}, {"sha": "50bd47b31f3ee1bdfd33b91d629615ed6d687011", "filename": "gcc/tree-ssa-alias.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-alias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-alias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.cc?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -790,6 +790,29 @@ ao_ref_alias_ptr_type (ao_ref *ref)\n   return ret;\n }\n \n+/* Return the alignment of the access *REF and store it in the *ALIGN\n+   and *BITPOS pairs.  Returns false if no alignment could be determined.\n+   See get_object_alignment_2 for details.  */\n+\n+bool\n+ao_ref_alignment (ao_ref *ref, unsigned int *align,\n+\t\t  unsigned HOST_WIDE_INT *bitpos)\n+{\n+  if (ref->ref)\n+    return get_object_alignment_1 (ref->ref, align, bitpos);\n+\n+  /* When we just have ref->base we cannot use get_object_alignment since\n+     that will eventually use the type of the appearant access while for\n+     example ao_ref_init_from_ptr_and_range is not careful to adjust that.  */\n+  *align = BITS_PER_UNIT;\n+  HOST_WIDE_INT offset;\n+  if (!ref->offset.is_constant (&offset)\n+      || !get_object_alignment_2 (ref->base, align, bitpos, true))\n+    return false;\n+  *bitpos += (unsigned HOST_WIDE_INT)offset * BITS_PER_UNIT;\n+  *bitpos = *bitpos & (*align - 1);\n+  return true;\n+}\n \n /* Init an alias-oracle reference representation from a gimple pointer\n    PTR a range specified by OFFSET, SIZE and MAX_SIZE under the assumption"}, {"sha": "dfb21275657ebc4e4545d60bf921b72202e5a141", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -119,6 +119,8 @@ extern alias_set_type ao_ref_alias_set (ao_ref *);\n extern alias_set_type ao_ref_base_alias_set (ao_ref *);\n extern tree ao_ref_alias_ptr_type (ao_ref *);\n extern tree ao_ref_base_alias_ptr_type (ao_ref *);\n+extern bool ao_ref_alignment (ao_ref *, unsigned int *,\n+\t\t\t      unsigned HOST_WIDE_INT *);\n extern bool ptr_deref_may_alias_global_p (tree);\n extern bool ptr_derefs_may_alias_p (tree, tree);\n extern bool ptrs_compare_unequal (tree, tree);"}, {"sha": "3beaed3ad38adaf4ac2f3da05e28fc9cf3321a3b", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288df751f9ecd11898dec5f2a7b6b03267f79e/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=c5288df751f9ecd11898dec5f2a7b6b03267f79e", "patch": "@@ -405,10 +405,56 @@ compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail,\n   int first_live = bitmap_first_set_bit (live);\n   *trim_head = first_live - first_orig;\n \n-  /* If more than a word remains, then make sure to keep the\n-     starting point at least word aligned.  */\n-  if (last_live - first_live > UNITS_PER_WORD)\n-    *trim_head &= ~(UNITS_PER_WORD - 1);\n+  /* If REF is aligned, try to maintain this alignment if it reduces\n+     the number of (power-of-two sized aligned) writes to memory.  */\n+  unsigned int align_bits;\n+  unsigned HOST_WIDE_INT bitpos;\n+  if ((*trim_head || *trim_tail)\n+      && last_live - first_live >= 2\n+      && ao_ref_alignment (ref, &align_bits, &bitpos)\n+      && align_bits >= 32\n+      && bitpos == 0\n+      && align_bits % BITS_PER_UNIT == 0)\n+    {\n+      unsigned int align_units = align_bits / BITS_PER_UNIT;\n+      if (align_units > 16)\n+\talign_units = 16;\n+      while ((first_live | (align_units - 1)) > (unsigned int)last_live)\n+\talign_units >>= 1;\n+\n+      if (*trim_head)\n+\t{\n+\t  unsigned int pos = first_live & (align_units - 1);\n+\t  for (unsigned int i = 1; i <= align_units; i <<= 1)\n+\t    {\n+\t      unsigned int mask = ~(i - 1);\n+\t      unsigned int bytes = align_units - (pos & mask);\n+\t      if (wi::popcount (bytes) <= 1)\n+\t\t{\n+\t\t  *trim_head &= mask;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+\n+      if (*trim_tail)\n+\t{\n+\t  unsigned int pos = last_live & (align_units - 1);\n+\t  for (unsigned int i = 1; i <= align_units; i <<= 1)\n+\t    {\n+\t      int mask = i - 1;\n+\t      unsigned int bytes = (pos | mask) + 1;\n+\t      if ((last_live | mask) > (last_live + *trim_tail))\n+\t\tbreak;\n+\t      if (wi::popcount (bytes) <= 1)\n+\t\t{\n+\t\t  unsigned int extra = (last_live | mask) - last_live;\n+\t\t  *trim_tail -= extra;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+    }\n \n   if ((*trim_head || *trim_tail)\n       && dump_file && (dump_flags & TDF_DETAILS))"}]}