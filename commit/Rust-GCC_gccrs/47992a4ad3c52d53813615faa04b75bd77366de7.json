{"sha": "47992a4ad3c52d53813615faa04b75bd77366de7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5OTJhNGFkM2M1MmQ1MzgxMzYxNWZhYTA0Yjc1YmQ3NzM2NmRlNw==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-01-05T00:22:39Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-01-05T00:22:39Z"}, "message": "re PR fortran/23675 (ICE in gfc_finish_var_decl (string manipulation))\n\n2006-01-05  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/23675\n        * expr.c (gfc_expr_set_symbols_referenced): New function.\n        * gfortran.h: Add a function prototype for it.\n        * resolve.c (resolve_function): Use it for\n        use associated character functions lengths.\n        * expr.c, gfortran.h, resolve.c: Updated copyright years.\n\n\ntestsuite/\n2006-01-05  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/23675\n        gfortran.dg/char_result_11.f90: New.\n\nFrom-SVN: r109368", "tree": {"sha": "a42ceb784a2f457a75a6524b59a5d032cc626759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a42ceb784a2f457a75a6524b59a5d032cc626759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47992a4ad3c52d53813615faa04b75bd77366de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47992a4ad3c52d53813615faa04b75bd77366de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47992a4ad3c52d53813615faa04b75bd77366de7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47992a4ad3c52d53813615faa04b75bd77366de7/comments", "author": null, "committer": null, "parents": [{"sha": "2653b241f2cea506f507bbfeb556a8dc63abdb64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2653b241f2cea506f507bbfeb556a8dc63abdb64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2653b241f2cea506f507bbfeb556a8dc63abdb64"}], "stats": {"total": 219, "additions": 214, "deletions": 5}, "files": [{"sha": "38781ee1172fcbb2ab46d3091ba3021c027f7e6b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -1,3 +1,12 @@\n+2006-01-05  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/23675\n+\t* expr.c (gfc_expr_set_symbols_referenced): New function.\n+\t* gfortran.h: Add a function prototype for it.\n+\t* resolve.c (resolve_function): Use it for\n+\tuse associated character functions lengths.\n+\t* expr.c, gfortran.h, resolve.c: Updated copyright years.\n+\n 2006-01-03  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/25101"}, {"sha": "11bf277ae58513d21c03ab2393d5f8f43eb1db03", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -1,6 +1,6 @@\n /* Routines for manipulation of expression nodes.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software \n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -2110,3 +2110,73 @@ gfc_get_variable_expr (gfc_symtree * var)\n   return e;\n }\n \n+\n+/* Traverse expr, marking all EXPR_VARIABLE symbols referenced.  */\n+\n+void\n+gfc_expr_set_symbols_referenced (gfc_expr * expr)\n+{\n+  gfc_actual_arglist *arg;\n+  gfc_constructor *c;\n+  gfc_ref *ref;\n+  int i;\n+\n+  if (!expr) return;\n+\n+  switch (expr->expr_type)\n+    {\n+    case EXPR_OP:\n+      gfc_expr_set_symbols_referenced (expr->value.op.op1);\n+      gfc_expr_set_symbols_referenced (expr->value.op.op2);\n+      break;\n+\n+    case EXPR_FUNCTION:\n+      for (arg = expr->value.function.actual; arg; arg = arg->next)\n+        gfc_expr_set_symbols_referenced (arg->expr);\n+      break;\n+\n+    case EXPR_VARIABLE:\n+      gfc_set_sym_referenced (expr->symtree->n.sym);\n+      break;\n+\n+    case EXPR_CONSTANT:\n+    case EXPR_NULL:\n+    case EXPR_SUBSTRING:\n+      break;\n+\n+    case EXPR_STRUCTURE:\n+    case EXPR_ARRAY:\n+      for (c = expr->value.constructor; c; c = c->next)\n+        gfc_expr_set_symbols_referenced (c->expr);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+\n+    for (ref = expr->ref; ref; ref = ref->next)\n+      switch (ref->type)\n+        {\n+        case REF_ARRAY:\n+          for (i = 0; i < ref->u.ar.dimen; i++)\n+            {\n+              gfc_expr_set_symbols_referenced (ref->u.ar.start[i]);\n+              gfc_expr_set_symbols_referenced (ref->u.ar.end[i]);\n+              gfc_expr_set_symbols_referenced (ref->u.ar.stride[i]);\n+            }\n+          break;\n+           \n+        case REF_COMPONENT:\n+          break;\n+           \n+        case REF_SUBSTRING:\n+          gfc_expr_set_symbols_referenced (ref->u.ss.start);\n+          gfc_expr_set_symbols_referenced (ref->u.ss.end);\n+          break;\n+           \n+        default:\n+          gcc_unreachable ();\n+          break;\n+        }\n+}"}, {"sha": "2f1ddf14f196af1fd8d8c7454bdac9dcbe04a2fc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -1,6 +1,6 @@\n /* gfortran header file\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software \n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -1854,6 +1854,7 @@ try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);\n gfc_expr *gfc_get_variable_expr (gfc_symtree *);\n \n+void gfc_expr_set_symbols_referenced (gfc_expr * expr);\n \n /* st.c */\n extern gfc_code new_st;"}, {"sha": "2e870bbc9687828f2ed6e00136b849b825fca19e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -1,5 +1,6 @@\n /* Perform type resolution on the various stuctures.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, \n+   Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -1167,6 +1168,16 @@ resolve_function (gfc_expr * expr)\n \t}\n     }\n \n+  /* Character lengths of use associated functions may contains references to\n+     symbols not referenced from the current program unit otherwise.  Make sure\n+     those symbols are marked as referenced.  */\n+\n+  if (expr->ts.type == BT_CHARACTER && expr->value.function.esym \n+      && expr->value.function.esym->attr.use_assoc)\n+    {\n+      gfc_expr_set_symbols_referenced (expr->ts.cl->length);\n+    }\n+\n   if (t == SUCCESS)\n     find_noncopying_intrinsics (expr->value.function.esym,\n \t\t\t\texpr->value.function.actual);"}, {"sha": "b1b97b4ca83f925980b93a0edf82f3c2908e19c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -1,3 +1,8 @@\n+2006-01-05  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/23675\n+\tgfortran.dg/char_result_11.f90: New.\n+\n 2006-01-04  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24782"}, {"sha": "ff10b1afdc7902df5d54223b55c0845cbabf1b16", "filename": "gcc/testsuite/gfortran.dg/char_result_11.f90", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47992a4ad3c52d53813615faa04b75bd77366de7/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90?ref=47992a4ad3c52d53813615faa04b75bd77366de7", "patch": "@@ -0,0 +1,113 @@\n+! { dg-do compile }\n+! PR 23675: Character function of module variable length\n+module cutils\n+\n+    implicit none\n+    private\n+   \n+    type t\n+        integer :: k = 25\n+        integer :: kk(3) = (/30, 40, 50 /)\n+    end type t\n+\n+    integer :: m1 = 25, m2 = 25, m3 = 25, m4 = 25, m5 = 25\n+    integer :: n1 = 3, n2 = 3, n3 = 3, n4 = 3, n5 = 3, n6 = 3, n7 = 3, n8 = 3, n9 = 3\n+    character(10) :: s = \"abcdefghij\"\n+    integer :: x(4) = (/ 30, 40, 50, 60 /)\n+    type(t) :: tt1(5), tt2(5)\n+\n+    public :: IntToChar1, IntToChar2, IntToChar3, IntToChar4, IntToChar5, &\n+                IntToChar6, IntToChar7, IntToChar8\n+\n+contains\n+\n+    pure integer function get_k(tt)\n+        type(t), intent(in) :: tt\n+\n+        get_k = tt%k\n+    end function get_k\n+ \n+    function IntToChar1(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=m1)  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar1\n+ \n+    function IntToChar2(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=m2+n1)  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar2\n+ \n+    function IntToChar3(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=iachar(s(n2:n3)))  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar3\n+ \n+    function IntToChar4(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=tt1(n4)%k)  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar4\n+ \n+    function IntToChar5(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=maxval((/m3, n5/)))  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar5\n+ \n+    function IntToChar6(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=x(n6))  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar6\n+ \n+    function IntToChar7(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=tt2(min(m4, n7, 2))%kk(n8))  :: a\n+     \n+        write(a, *) integerValue\n+    end function IntToChar7\n+ \n+    function IntToChar8(integerValue) result(a)\n+        integer, intent(in) :: integerValue\n+        character(len=get_k(t(m5, (/31, n9, 53/))))  :: a\n+ \n+        write(a, *) integerValue\n+    end function IntToChar8\n+\n+end module cutils\n+\n+\n+program test\n+\n+    use cutils\n+\n+    implicit none\n+    character(25) :: str\n+    \n+    str = IntToChar1(3)\n+    print *, str\n+    str = IntToChar2(3)\n+    print *, str\n+    str = IntToChar3(3)\n+    print *, str\n+    str = IntToChar4(3)\n+    print *, str\n+    str = IntToChar5(3)\n+    print *, str\n+    str = IntToChar6(3)\n+    print *, str\n+    str = IntToChar7(3)\n+    print *, str\n+    str = IntToChar8(3)\n+    print *, str\n+\n+end program test"}]}