{"sha": "39f9091275d3f30ab02adbccb8ad2a3d36560803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmOTA5MTI3NWQzZjMwYWIwMmFkYmNjYjhhZDJhM2QzNjU2MDgwMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-07-01T12:32:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-07-01T12:32:35Z"}, "message": "[AArch64] Implement some vca*_f[32,64] intrinsics.\n\n\t* config/aarch64/arm_neon.h (vcage_f64): New intrinsic.\n\t(vcagt_f64): Likewise.\n\t(vcale_f64): Likewise.\n\t(vcaled_f64): Likewise.\n\t(vcales_f32): Likewise.\n\t(vcalt_f64): Likewise.\n\t(vcaltd_f64): Likewise.\n\t(vcalts_f32): Likewise.\n\n\t* gcc.target/aarch64/simd/vcage_f64.c: New test.\n\t* gcc.target/aarch64/simd/vcagt_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vcale_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vcaled_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vcales_f32.c: Likewise.\n\t* gcc.target/aarch64/simd/vcalt_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vcaltd_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vcalts_f32.c: Likewise.\n\nFrom-SVN: r212196", "tree": {"sha": "fbed19d35222c33e088f323b9315b4ecf75322da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbed19d35222c33e088f323b9315b4ecf75322da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f9091275d3f30ab02adbccb8ad2a3d36560803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f9091275d3f30ab02adbccb8ad2a3d36560803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f9091275d3f30ab02adbccb8ad2a3d36560803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f9091275d3f30ab02adbccb8ad2a3d36560803/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f28056435603d31f7ff76a6c84d6200be544b4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28056435603d31f7ff76a6c84d6200be544b4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28056435603d31f7ff76a6c84d6200be544b4a3"}], "stats": {"total": 366, "additions": 366, "deletions": 0}, "files": [{"sha": "a2d97efa09249c2852692f825912a4b5ba45f656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -1,3 +1,14 @@\n+2014-07-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vcage_f64): New intrinsic.\n+\t(vcagt_f64): Likewise.\n+\t(vcale_f64): Likewise.\n+\t(vcaled_f64): Likewise.\n+\t(vcales_f32): Likewise.\n+\t(vcalt_f64): Likewise.\n+\t(vcaltd_f64): Likewise.\n+\t(vcalts_f32): Likewise.\n+\n 2014-07-01  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/invoke.texi: Document -Wint-conversion."}, {"sha": "83ac5e96d422ceccadcb212ec792665b78c03fae", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -13823,6 +13823,12 @@ vaesimcq_u8 (uint8x16_t data)\n \n /* vcage  */\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vcage_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return vabs_f64 (__a) >= vabs_f64 (__b);\n+}\n+\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vcages_f32 (float32_t __a, float32_t __b)\n {\n@@ -13867,6 +13873,12 @@ vcagt_f32 (float32x2_t __a, float32x2_t __b)\n   return vabs_f32 (__a) > vabs_f32 (__b);\n }\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vcagt_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return vabs_f64 (__a) > vabs_f64 (__b);\n+}\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcagtq_f32 (float32x4_t __a, float32x4_t __b)\n {\n@@ -13893,6 +13905,24 @@ vcale_f32 (float32x2_t __a, float32x2_t __b)\n   return vabs_f32 (__a) <= vabs_f32 (__b);\n }\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vcale_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return vabs_f64 (__a) <= vabs_f64 (__b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcaled_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_fabs (__a) <= __builtin_fabs (__b) ? -1 : 0;\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcales_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_fabsf (__a) <= __builtin_fabsf (__b) ? -1 : 0;\n+}\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcaleq_f32 (float32x4_t __a, float32x4_t __b)\n {\n@@ -13913,6 +13943,18 @@ vcalt_f32 (float32x2_t __a, float32x2_t __b)\n   return vabs_f32 (__a) < vabs_f32 (__b);\n }\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vcalt_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return vabs_f64 (__a) < vabs_f64 (__b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcaltd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_fabs (__a) < __builtin_fabs (__b) ? -1 : 0;\n+}\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcaltq_f32 (float32x4_t __a, float32x4_t __b)\n {\n@@ -13925,6 +13967,12 @@ vcaltq_f64 (float64x2_t __a, float64x2_t __b)\n   return vabsq_f64 (__a) < vabsq_f64 (__b);\n }\n \n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcalts_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_fabsf (__a) < __builtin_fabsf (__b) ? -1 : 0;\n+}\n+\n /* vceq - vector.  */\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))"}, {"sha": "e12393c9e59681b19f304a4fd3f464f4d68e6491", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -1,3 +1,14 @@\n+2014-07-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vcage_f64.c: New test.\n+\t* gcc.target/aarch64/simd/vcagt_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcale_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcaled_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcales_f32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcalt_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcaltd_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vcalts_f32.c: Likewise.\n+\n 2014-07-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp1y/pr59867.C: Fix target selector."}, {"sha": "7ddef58e4af8866549653909d33f7844d8e905f3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcage_f64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcage_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcage_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcage_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,38 @@\n+/* Test the vcage_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+  float64x1_t arg1, arg2;\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) >= __builtin_fabs (in[j]) ? -1 : 0;\n+        arg1 = (float64x1_t) { in[i] };\n+        arg2 = (float64x1_t) { in[j] };\n+        actual = vget_lane_u64 (vcage_f64 (arg1, arg2), 0);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facge\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "df6911a24894f55bc973c282e97809754639c22f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcagt_f64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcagt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcagt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcagt_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,38 @@\n+/* Test the vcagt_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+  float64x1_t arg1, arg2;\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) > __builtin_fabs (in[j]) ? -1 : 0;\n+        arg1 = (float64x1_t) { in[i] };\n+        arg2 = (float64x1_t) { in[j] };\n+        actual = vget_lane_u64 (vcagt_f64 (arg1, arg2), 0);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facgt\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "574bfea1b7ae20269312b40ec797d851d993a273", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcale_f64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcale_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcale_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcale_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,38 @@\n+/* Test the vcale_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+  float64x1_t arg1, arg2;\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) <= __builtin_fabs (in[j]) ? -1 : 0;\n+        arg1 = (float64x1_t) { in[i] };\n+        arg2 = (float64x1_t) { in[j] };\n+        actual = vget_lane_u64 (vcale_f64 (arg1, arg2), 0);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facge\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9ea31d6c0fea5c6528cd0e1b39b6e35787589733", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcaled_f64.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaled_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaled_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaled_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vcaled_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) <= __builtin_fabs (in[j]) ? -1 : 0;\n+        actual = vcaled_f64 (in[i], in[j]);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facge\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a69a096a7652bca68995af3daaa55710add9b7b2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcales_f32.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcales_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcales_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcales_f32.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vcales_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float32_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint32_t expected;\n+  uint32_t actual;\n+\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) <= __builtin_fabs (in[j]) ? -1 : 0;\n+        actual = vcales_f32 (in[i], in[j]);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facge\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d5bf5f37ebabcb8af74fedd1e38597feb078c639", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcalt_f64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalt_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,38 @@\n+/* Test the vcalt_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+  float64x1_t arg1, arg2;\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) < __builtin_fabs (in[j]) ? -1 : 0;\n+        arg1 = (float64x1_t) { in[i] };\n+        arg2 = (float64x1_t) { in[j] };\n+        actual = vget_lane_u64 (vcalt_f64 (arg1, arg2), 0);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facgt\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "fcdd75b6af78ddbb22251e9c6dbd289d6f6bcde7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcaltd_f64.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaltd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaltd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcaltd_f64.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vcaltd_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float64_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint64_t expected;\n+  uint64_t actual;\n+\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) < __builtin_fabs (in[j]) ? -1 : 0;\n+        actual = vcaltd_f64 (in[i], in[j]);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facgt\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0799dd7486658d6353e28c006d69f741a4dec08e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcalts_f32.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalts_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f9091275d3f30ab02adbccb8ad2a3d36560803/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalts_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcalts_f32.c?ref=39f9091275d3f30ab02adbccb8ad2a3d36560803", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vcalts_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+volatile float32_t in[SIZE] = { -10.4, -3.14, 0.0, 1.5, 5.3, 532.3 };\n+\n+int\n+main (void)\n+{\n+  uint32_t expected;\n+  uint32_t actual;\n+\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; ++i)\n+   for (j = 0; j < SIZE; ++j)\n+     {\n+        expected = __builtin_fabs (in[i]) < __builtin_fabs (in[j]) ? -1 : 0;\n+        actual = vcalts_f32 (in[i], in[j]);\n+\n+        if (actual != expected)\n+          abort ();\n+     }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"facgt\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}