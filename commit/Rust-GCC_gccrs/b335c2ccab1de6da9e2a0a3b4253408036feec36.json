{"sha": "b335c2ccab1de6da9e2a0a3b4253408036feec36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzNWMyY2NhYjFkZTZkYTllMmEwYTNiNDI1MzQwODAzNmZlZWMzNg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-03-19T20:41:45Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-03-19T20:41:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r526", "tree": {"sha": "835f283d52c10e4198adffd60d81eb776bc62c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835f283d52c10e4198adffd60d81eb776bc62c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b335c2ccab1de6da9e2a0a3b4253408036feec36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b335c2ccab1de6da9e2a0a3b4253408036feec36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b335c2ccab1de6da9e2a0a3b4253408036feec36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b335c2ccab1de6da9e2a0a3b4253408036feec36/comments", "author": null, "committer": null, "parents": [{"sha": "d742f26c5bb11a55364d269688ae8bb69f35c4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d742f26c5bb11a55364d269688ae8bb69f35c4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d742f26c5bb11a55364d269688ae8bb69f35c4c2"}], "stats": {"total": 232, "additions": 164, "deletions": 68}, "files": [{"sha": "0aaa69acfc22e6f0b4ac79ea3f70ac9d8963a40e", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -99,26 +99,23 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define FRAME_POINTER_REQUIRED \\\n   (current_function_calls_setjmp || current_function_calls_longjmp)\n \f\n-/* Define a few machine-specific details\n-   of the implementation of constructors.\n+/* Define a few machine-specific details of the implementation of\n+   constructors.\n \n-   CTORS_SECTION_ASM_OP should be defined to concatenate\n-   the macro INIT_SECTION_ASM_OP, a newline, and a push instruction\n-   to push a word containing 0 (or some equivalent of that).\n+   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n+   and CTOR_LIST_END to contribute to the .init section an instruction to\n+   push a word containing 0 (or some equivalent of that).\n \n-   ASM_OUTPUT_CONSTRUCTOR should be defined\n-   to push the address of the constructor.  */\n+   ASM_OUTPUT_CONSTRUCTOR should be defined to push the address of the\n+   constructor.  */\n \n #undef INIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP     \".section .init,\\\"x\\\"\"\n \n-#define CTORS_SECTION_ASM_OP \\\n-  INIT_SECTION_ASM_OP \"\\n\"\t\\\n-  \"\\tpushl $0\\n\\t\"\t\t\\\n-  DATA_SECTION_ASM_OP\n-/* The reason we end with DATA_SECTION_ASM_OP is to prevent the\n-   initial and final table elements (see crtstuff.c) from getting into\n-   the .init section and causing a crash.  */\n+#define CTOR_LIST_BEGIN\t\t\t\t\\\n+  asm (INIT_SECTION_ASM_OP);\t\t\t\\\n+  asm (\"pushl $0\")\n+#define CTOR_LIST_END CTOR_LIST_BEGIN\n \n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\"}, {"sha": "0662aaacd154ea88125992215b6918a9a8746e76", "filename": "gcc/config/m88k/sysv3.h", "status": "modified", "additions": 69, "deletions": 31, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fsysv3.h?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -59,15 +59,38 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef\tUSE_LIBG\n #define\tUSE_LIBG\n \n-/* Define a few machine-specific details\n-   of the implementation of constructors.\n-\n-   CTORS_SECTION_ASM_OP should be defined to concatenate\n-   the macro INIT_SECTION_ASM_OP, a newline, and a push instruction\n-   to push a word containing 0 (or some equivalent of that).\n-\n-   ASM_OUTPUT_CONSTRUCTOR should be defined\n-   to push the address of the constructor.  */\n+/* Define a few machine-specific details of the implementation of\n+   constructors.  */\n+\n+/* Although the .init section is used, it is not automatically invoked.  */\n+#define INVOKE__main\n+\n+/* State that atexit exists so __do_global_ctors will register\n+   __do_global_dtors.  */\n+#define HAVE_ATEXIT\n+\n+#if (STACK_BOUNDARY / BITS_PER_UNIT) == 16 && REG_PARM_STACK_SPACE (0) == 32\n+#define CTOR_LIST_BEGIN\t    \t\t\\\n+  asm (INIT_SECTION_ASM_OP);\t\t\\\n+  asm (\"\\tsubu\\t r31,r31,16\");\t\t\\\n+  asm (\"\\tst\\t r0,r31,32\");\t\t\n+#define CTOR_LIST_END\n+#endif\n+\n+/* ASM_OUTPUT_CONSTRUCTOR outputs code into the .init section to push the\n+   address of the constructor.  This becomes the body of __do_global_ctors\n+   in crtstuff.c.  r13 is a temporary register.  */\n+#undef\tASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    init_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tor.u\\t r13,r0,hi16(\");\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \")\\n\\tor\\t r13,r13,lo16(\");\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \")\\n\\tsubu\\t r31,r31,%d\\n\\tst\\t r13,r31,%d\\n\",\t\\\n+\t     STACK_BOUNDARY / BITS_PER_UNIT, REG_PARM_STACK_SPACE (0));\t\\\n+  } while (0)\n \n #undef\tDO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n@@ -77,26 +100,41 @@ do {\t\t\t\t\t\t\t\t\t\\\n     (*p) ();\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-#undef\tCTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP  \t\t\t\\\n-  INIT_SECTION_ASM_OP \"\\n\"\t\t\t\\\n-  \"subu\\t r31,r31,16\\n\\tst\\t r0,r31,32\\n\\t\"\t\\\n-  DATA_SECTION_ASM_OP\n-\n-/* The reason we end with DATA_SECTION_ASM_OP is to prevent the\n-   initial and final table elements (see crtstuff.c) from getting into\n-   the .init section and causing a crash.  */\n-\n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+#define DTOR_LIST_BEGIN\t\t\t\t\t\t\t\\\n+  asm (FINI_SECTION_ASM_OP);\t\t\t\t\t\t\\\n+  func_ptr __DTOR_LIST__[4] = { (func_ptr) (-1), (func_ptr) (-1),\t\\\n+\t\t\t\t(func_ptr) (-1), (func_ptr) (-1) }\n+#define DTOR_LIST_END\t\t\t\t\t\t  \t\\\n+  asm (FINI_SECTION_ASM_OP);\t\t\t\t\t\t\\\n+  func_ptr __DTOR_END__[4] = { (func_ptr) 0, (func_ptr) 0,\t\t\\\n+\t\t\t       (func_ptr) 0, (func_ptr) 0 }  \n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  The table is constructed in the .fini section\n+   so that an explicit linker script is not required.  The complication\n+   is that this section is padded with NOP instructions and to either\n+   8 or 16 byte alignment depending on the specific system.  A clever\n+   way to avoid trouble is to output a block of 16 bytes where the\n+   extra words are known values (-1).  */\n+#undef\tASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\tor.u r13,r0,hi16(\");\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \")\\nor\\t r13,r13,lo16(\");\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \")\\n\\tsubu r31,r31,16\\nst\\t r13,r31,32\\n\"); \\\n-  } while (0)\n-\n-#undef\tDTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP FINI_SECTION_ASM_OP\n+    register int i;\t\t\t\t\\\n+    fini_section ();\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", ASM_LONG);\t\\\n+    assemble_name (FILE,NAME);\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+    for (i = 1; i < 4; i++)\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\t -1\\n\", ASM_LONG);\t\\\n+    } while (0)\n+\n+/* Walk the list looking for the terminating zero and ignoring all values of\n+   -1.  */\n+#undef\tDO_GLOBAL_DTORS_BODY\n+#define DO_GLOBAL_DTORS_BODY\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\\\n+    for (i = 0; __DTOR_LIST__[i] != 0; i++)\t\\\n+      if (((int *)__DTOR_LIST__)[i] != -1)\t\\\n+\t__DTOR_LIST__[i] ();\t\t\t\\\n+  } while (0)\t\t\t\t\t"}, {"sha": "9e871537a2fe9fdf8e9e5c45c113fd1c12a649de", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -172,25 +172,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n    unless the specific tm.h file turns it on by defining\n    USE_CONST_SECTION as 1.  */\n \n-/* The support for constructors and destructors depends on two\n-   machine-specific macros that the individual tm.h file has to define:\n+/* Define a few machine-specific details of the implementation of\n+   constructors.\n \n-   CTORS_SECTION_ASM_OP should be defined to concatenate\n-   the macro INIT_SECTION_ASM_OP, a newline, and a push instruction\n-   to push a word containing 0 (or some equivalent of that).\n+   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n+   and CTOR_LIST_END to contribute to the .init section an instruction to\n+   push a word containing 0 (or some equivalent of that).\n \n-   ASM_OUTPUT_CONSTRUCTOR should be defined\n-   to push the address of the constructor.  */\n+   Define ASM_OUTPUT_CONSTRUCTOR to push the address of the constructor.  */\n \n #define USE_CONST_SECTION\t0\n \n #define INIT_SECTION_ASM_OP     \".section\\t.init\"\n #define FINI_SECTION_ASM_OP     \".section .fini,\\\"x\\\"\"\n #define CONST_SECTION_ASM_OP\t\".section\\t.rodata, \\\"x\\\"\"\n-\n+#define CTORS_SECTION_ASM_OP\tINIT_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n-/* CTORS_SECTION_ASM_OP is machine-dependent\n-   because it pushes on the stack.  */\n+\n+/* CTOR_LIST_BEGIN and CTOR_LIST_END are machine-dependent\n+   because they push on the stack.  */\n \n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a13fbf20ba856c1d7b0533cdeac40519e4999daf", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -69,8 +69,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #ifdef INIT_SECTION_ASM_OP\n \n-/* Force cc1 to switch to .text section.  */\n-static void force_to_text () { }\n+/* The function __do_global_ctors_aux is compiled twice (once in crtbegin.o\n+   and once in crtend.o).  It must be declared static to aviod a link\n+   error.  Here, we define __do_global_ctors as an externally callable\n+   function.  It is externally callable so that __main can invoke it when\n+   INVOKE__main is defined.  This has the additional effect of forcing cc1\n+   to switch to the .text section.  */\n+void __do_global_ctors () { __do_global_ctors_aux (); }\n \n asm (INIT_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n \n@@ -90,7 +95,7 @@ asm (INIT_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n    file-scope static-storage C++ objects within shared libraries.   */\n \n static void\n-__do_global_ctors ()\t\t/* prologue goes in .init section */\n+__do_global_ctors_aux ()\t/* prologue goes in .init section */\n {\n   asm (TEXT_SECTION_ASM_OP);\t/* don't put epilogue and body in .init */\n   DO_GLOBAL_CTORS_BODY;\n@@ -104,11 +109,19 @@ static func_ptr force_to_data[0] = { };\n \n /* The -1 is a flag to __do_global_[cd]tors\n    indicating that this table does not start with a count of elements.  */\n+#ifdef CTOR_LIST_BEGIN\n+CTOR_LIST_BEGIN;\n+#else\n asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };\n+#endif\n \n+#ifdef DTOR_LIST_BEGIN\n+DTOR_LIST_BEGIN;\n+#else\n asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n+#endif\n \n #endif /* defined(CRT_BEGIN) */\n \n@@ -129,7 +142,7 @@ func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n */\n \n static void\n-__do_global_ctors ()\t\t/* prologue goes in .text section */\n+__do_global_ctors_aux ()\t/* prologue goes in .text section */\n {\n   asm (INIT_SECTION_ASM_OP);\n   DO_GLOBAL_CTORS_BODY;\n@@ -141,10 +154,18 @@ __do_global_ctors ()\t\t/* prologue goes in .text section */\n /* Force cc1 to switch to .data section.  */\n static func_ptr force_to_data[0] = { };\n \n+#ifdef CTOR_LIST_END\n+CTOR_LIST_END;\n+#else\n asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+#endif\n \n+#ifdef DTOR_LIST_END\n+DTOR_LIST_END;\n+#else\n asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+#endif\n \n #endif /* defined(CRT_END) */"}, {"sha": "d250d5be8b677598550d30d50dc65ac7e2bf7c79", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -1028,7 +1028,7 @@ fixup_var_refs_insns (var, insn, toplevel)\n \n \t\t      /* We can not separate USE insns from the CALL_INSN\n \t\t\t that they belong to.  If this is a CALL_INSN, insert\n-\t\t\t the move insn before the USE insns preceeding it\n+\t\t\t the move insn before the USE insns preceding it\n \t\t\t instead of immediately before the insn.  */\n \t\t      if (GET_CODE (insn) == CALL_INSN)\n \t\t\t{\n@@ -1904,7 +1904,7 @@ instantiate_decls (fndecl, valid_only)\n       if (DECL_RTL (decl) && GET_CODE (DECL_RTL (decl)) == MEM)\n \tinstantiate_virtual_regs_1 (&XEXP (DECL_RTL (decl), 0),\n \t\t\t\t    valid_only ? DECL_RTL (decl) : 0, 0);\n-#if 0 /* This is probably correct, but it seems to require fixes\n+#if 1 /* This is probably correct, but it seems to require fixes\n \t elsewhere in order to work.  Let's fix them in 2.1.  */\n       if (DECL_INCOMING_RTL (decl)\n \t  && GET_CODE (DECL_INCOMING_RTL (decl)) == MEM)\n@@ -2167,7 +2167,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n       /* Most cases of MEM that convert to valid addresses have already been\n \t handled by our scan of regno_reg_rtx.  The only special handling we\n \t need here is to make a copy of the rtx to ensure it isn't being\n-\t shared if we have to change it to a psuedo. \n+\t shared if we have to change it to a pseudo. \n \n \t If the rtx is a simple reference to an address via a virtual register,\n \t it can potentially be shared.  In such cases, first try to make it\n@@ -2778,7 +2778,7 @@ assign_parms (fndecl, second_time)\n #if 0 /* This change was turned off because it makes compilation bigger.  */\n \t\t  !optimize\n #else /* It's not clear why the following was replaced.  */\n-\t\t  /* Obsoleted by preceeding line. */\n+\t\t  /* Obsoleted by preceding line. */\n \t\t  (obey_regdecls && ! TREE_REGDECL (parm)\n \t\t   && ! TREE_INLINE (fndecl))\n #endif\n@@ -3212,6 +3212,12 @@ setjmp_protect (block)\n \t || TREE_CODE (decl) == PARM_DECL)\n \t&& DECL_RTL (decl) != 0\n \t&& GET_CODE (DECL_RTL (decl)) == REG\n+\t/* If this variable came from an inline function, it must be\n+\t   that it's life doesn't overlap the setjmp.  If there was a\n+\t   setjmp in the function, it would already be in memory.  We\n+\t   must exclude such variable because their DECL_RTL might be\n+\t   set to strange things such as virtual_stack_vars_rtx.  */\n+\t&& ! DECL_FROM_INLINE (decl)\n \t&& (\n #ifdef NON_SAVING_SETJMP\n \t    /* If longjmp doesn't restore the registers,\n@@ -3623,10 +3629,10 @@ mark_varargs ()\n void\n expand_main_function ()\n {\n-#ifndef INIT_SECTION_ASM_OP\n+#if !defined (INIT_SECTION_ASM_OP) || defined (INVOKE__main)\n   emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__main\"), 0,\n \t\t     VOIDmode, 0);\n-#endif /* not INIT_SECTION_ASM_OP */\n+#endif /* not INIT_SECTION_ASM_OP or INVOKE__main */\n }\n \f\n /* Start the RTL for a new function, and set variables used for"}, {"sha": "a770502aea84e2ee86b3cab671a0cb28c2b0fb1a", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b335c2ccab1de6da9e2a0a3b4253408036feec36/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=b335c2ccab1de6da9e2a0a3b4253408036feec36", "patch": "@@ -29,7 +29,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    do not apply.  */\n \n #include \"tm.h\"\n+#ifndef L_trampoline\n #include \"gstddef.h\"\n+#endif\n \n /* Don't use `fancy_abort' here even if config.h says to use it.  */\n #ifdef abort\n@@ -864,8 +866,13 @@ asm (\"__builtin_saveregs:\");\n #endif /* not SVR4 */\n #else /* not __i860__ */\n #ifdef __sparc__\n+#ifdef NO_UNDERSCORES\n+\tasm (\".global __builtin_saveregs\");\n+\tasm (\"__builtin_saveregs:\");\n+#else\n \tasm (\".global ___builtin_saveregs\");\n \tasm (\"___builtin_saveregs:\");\n+#endif\n \tasm (\"st %i0,[%fp+68]\");\n \tasm (\"st %i1,[%fp+72]\");\n \tasm (\"st %i2,[%fp+76]\");\n@@ -1219,6 +1226,31 @@ __enable_execute_stack ()\n   asm (\"pich\");\n }\n #endif /* __convex__ */\n+\n+#ifdef __pyr__\n+\n+#include <stdio.h>\n+#include <sys/mman.h>\n+#include <sys/types.h>\n+#include <sys/param.h>\n+#include <sys/vmmac.h>\n+\n+/* Modified from the convex -code above.\n+   mremap promises to clear the i-cache. */\n+\n+void\n+__enable_execute_stack ()\n+{\n+  int fp;\n+  if (mprotect (((unsigned int)&fp/PAGSIZ)*PAGSIZ, PAGSIZ,\n+\t\tPROT_READ|PROT_WRITE|PROT_EXEC))\n+    {\n+      perror (\"mprotect in __enable_execute_stack\");\n+      fflush (stderr);\n+      abort ();\n+    }\n+}\n+#endif /* __pyr__ */\n #endif /* L_trampoline */\n \f\n #ifdef L__main\n@@ -1271,7 +1303,9 @@ __do_global_ctors ()\n   DO_GLOBAL_CTORS_BODY;\n   ON_EXIT (__do_global_dtors, 0);\n }\n+#endif /* no INIT_SECTION_ASM_OP */\n \n+#if !defined (INIT_SECTION_ASM_OP) || defined (INVOKE__main)\n /* Subroutine called automatically by `main'.\n    Compiling a global function named `main'\n    produces an automatic call to this function at the beginning.\n@@ -1291,7 +1325,7 @@ __main ()\n       __do_global_ctors ();\n     }\n }\n-#endif /* no INIT_SECTION_ASM_OP */\n+#endif /* no INIT_SECTION_ASM_OP or INVOKE__main */\n \n #endif /* L__main */\n \f\n@@ -1306,10 +1340,10 @@ __main ()\n \n /* We declare the lists here with two elements each,\n    so that they are valid empty lists if no other definition is loaded.  */\n-#ifndef INIT_SECTION_ASM_OP\n+#if !defined(INIT_SECTION_ASM_OP) && !defined(CTOR_LISTS_DEFINED_EXTERNALLY)\n func_ptr __CTOR_LIST__[2];\n func_ptr __DTOR_LIST__[2];\n-#endif /* INIT_SECTION_ASM_OP */\n+#endif /* no INIT_SECTION_ASM_OP and not CTOR_LISTS_DEFINED_EXTERNALLY */\n \n #ifndef ON_EXIT\n "}]}