{"sha": "cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxMWJkY2M0NzI1OGNmOWM2ZjdmYjJiZTBlNzU2M2RjNGE0OWE4Yg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2003-09-27T20:17:21Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-09-27T20:17:21Z"}, "message": "re PR java/1333 (private field access modifier not implemented correctly)\n\n2003-09-27  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\t    Bryce McKinlay  <bryce@mckinlay.net.nz>\n\n\tPR java/1333:\n\t* parse.y (not_accessible_field_error): New function.\n\t(resolve_expression_name): Check field access permissions.\n\t(resolve_qualified_expression_name): Use\n\tnot_accessible_field_error.\n\t(resolve_qualified_expression_name): Likewise.\n\nCo-Authored-By: Bryce McKinlay <bryce@mckinlay.net.nz>\n\nFrom-SVN: r71862", "tree": {"sha": "3485babeba4dbbe5bfd07f7e6ee36c9479bceb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3485babeba4dbbe5bfd07f7e6ee36c9479bceb9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b/comments", "author": null, "committer": null, "parents": [{"sha": "e8226879d081098068ec39a204094449e38f3595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8226879d081098068ec39a204094449e38f3595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8226879d081098068ec39a204094449e38f3595"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "a79d73ad5a9f7c3afc4ec90e01ab3b9be4d8fed1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "patch": "@@ -1,3 +1,13 @@\n+2003-09-27  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\t    Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\tPR java/1333:\n+\t* parse.y (not_accessible_field_error): New function.\n+\t(resolve_expression_name): Check field access permissions.\n+\t(resolve_qualified_expression_name): Use\n+\tnot_accessible_field_error.\n+\t(resolve_qualified_expression_name): Likewise.\n+\n 2003-09-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* class.c (build_utf8_ref): Test for HAVE_GAS_SHF_MERGE value."}, {"sha": "e40971925b07f7f294d88a71a4ec66d47b0808a9", "filename": "gcc/java/parse.y", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=cd11bdcc47258cf9c6f7fb2be0e7563dc4a49a8b", "patch": "@@ -250,6 +250,7 @@ static void java_check_regular_methods (tree);\n static void check_interface_throws_clauses (tree, tree);\n static void java_check_abstract_methods (tree);\n static void unreachable_stmt_error (tree);\n+static int not_accessible_field_error (tree, tree);\n static tree find_expr_with_wfl (tree);\n static void missing_return_error (tree);\n static tree build_new_array_init (int, tree);\n@@ -3161,6 +3162,18 @@ unreachable_stmt_error (tree node)\n     abort ();\n }\n \n+static int\n+not_accessible_field_error (tree wfl, tree decl)\n+{\n+  parse_error_context \n+    (wfl, \"Can't access %s field `%s.%s' from `%s'\",\n+     java_accstring_lookup (get_access_flags_from_decl (decl)),\n+     GET_TYPE_NAME (DECL_CONTEXT (decl)),\n+     IDENTIFIER_POINTER (DECL_NAME (decl)),\n+     IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class))));\n+  return 1;\n+}\n+\n int\n java_report_errors (void)\n {\n@@ -9353,6 +9366,12 @@ resolve_expression_name (tree id, tree *orig)\n \t      /* We may be asked to save the real field access node */\n \t      if (orig)\n \t\t*orig = access;\n+\t      /* Last check: can we access the field? */\n+\t      if (not_accessible_p (current_class, decl, NULL_TREE, 0))\n+\t\t{\n+\t\t  not_accessible_field_error (id, decl);\n+\t\t  return error_mark_node;\n+\t\t}\n \t      /* And we return what we got */\n \t      return access;\n \t    }\n@@ -9832,15 +9851,7 @@ resolve_qualified_expression_name (tree wfl, tree *found_decl,\n \t    }\n \n \t  if (not_accessible_p (TREE_TYPE (decl), decl, type, 0))\n-\t    {\n-\t      parse_error_context\n-\t\t(qual_wfl, \"Can't access %s field `%s.%s' from `%s'\",\n-\t\t java_accstring_lookup (get_access_flags_from_decl (decl)),\n-\t\t GET_TYPE_NAME (type),\n-\t\t IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t\t IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class))));\n-\t      return 1;\n-\t    }\n+ \t    return not_accessible_field_error (qual_wfl, decl);\n \t  check_deprecation (qual_wfl, decl);\n \n \t  type = TREE_TYPE (decl);\n@@ -9961,18 +9972,7 @@ resolve_qualified_expression_name (tree wfl, tree *found_decl,\n \t      /* Check on accessibility here */\n \t      if (not_accessible_p (current_class, field_decl,\n \t\t\t\t    DECL_CONTEXT (field_decl), from_super))\n-\t\t{\n-\t\t  parse_error_context\n-\t\t    (qual_wfl,\n-\t\t     \"Can't access %s field `%s.%s' from `%s'\",\n-\t\t     java_accstring_lookup\n-\t\t       (get_access_flags_from_decl (field_decl)),\n-\t\t     GET_TYPE_NAME (type),\n-\t\t     IDENTIFIER_POINTER (DECL_NAME (field_decl)),\n-\t\t     IDENTIFIER_POINTER\n-\t\t       (DECL_NAME (TYPE_NAME (current_class))));\n-\t\t  return 1;\n-\t\t}\n+ \t\treturn not_accessible_field_error (qual_wfl,field_decl);    \n \t      check_deprecation (qual_wfl, field_decl);\n \n \t      /* There are things to check when fields are accessed"}]}