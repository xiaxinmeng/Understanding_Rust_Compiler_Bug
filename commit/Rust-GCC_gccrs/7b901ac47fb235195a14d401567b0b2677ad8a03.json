{"sha": "7b901ac47fb235195a14d401567b0b2677ad8a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MDFhYzQ3ZmIyMzUxOTVhMTRkNDAxNTY3YjBiMjY3N2FkOGEwMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-07-19T16:23:52Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-07-19T16:23:52Z"}, "message": "gfortran.h (new): Remove macro.\n\n\t* gfortran.h (new): Remove macro.\n\t* array.c (gfc_append_constructor, match_array_list,\n\tgfc_match_array_constructor): Likewise.\n\t* bbt.c (insert, gfc_insert_bbt): Likewise.\n\t* decl.c (var_element, top_var_list, top_val_list, gfc_match_data,\n\tget_proc_name): Likewise.\n\t* expr.c (gfc_copy_actual_arglist): Likewise.\n\t* interface.c (compare_actual_formal, check_new_interface,\n\tgfc_add_interface): Likewise.\n\t* intrinsic.c gfc_convert_type_warn, gfc_convert_chartype):\n\tLikewise.\n\t* io.c (match_io_iterator, match_io_list): Likewise.\n\t* match.c (match_forall_header): Likewise.\n\t* matchexp.c (build_node): Likewise.\n\t* module.c (gfc_match_use): Likewise.\n\t* scanner.c (load_file): Likewise.\n\t* st.c (gfc_append_code): Likewise.\n\t* symbol.c (save_symbol_data, gfc_get_sym_tree, gfc_undo_symbols,\n\tgfc_commit_symbols): Likewise.\n\t* trans-common.c (build_field): Likewise.\n\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n\t* trans-expr.c (gfc_free_interface_mapping,\n\tgfc_get_interface_mapping_charlen, gfc_add_interface_mapping,\n\tgfc_finish_interface_mapping,\n\tgfc_apply_interface_mapping_to_expr): Likewise.\n\t* trans.h (gfc_interface_sym_mapping): Likewise.\n\nFrom-SVN: r137982", "tree": {"sha": "551ba2fcd23f90c6d0662b04e981e74aa6a5abd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551ba2fcd23f90c6d0662b04e981e74aa6a5abd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b901ac47fb235195a14d401567b0b2677ad8a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b901ac47fb235195a14d401567b0b2677ad8a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b901ac47fb235195a14d401567b0b2677ad8a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b901ac47fb235195a14d401567b0b2677ad8a03/comments", "author": null, "committer": null, "parents": [{"sha": "a1ee985fa319b7a55e52ddd62f266e42ef9ae067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ee985fa319b7a55e52ddd62f266e42ef9ae067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ee985fa319b7a55e52ddd62f266e42ef9ae067"}], "stats": {"total": 461, "additions": 244, "deletions": 217}, "files": [{"sha": "87279c4131edb9d69d6794eb2ba4b92800d07298", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -1,3 +1,32 @@\n+2008-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.h (new): Remove macro.\n+\t* array.c (gfc_append_constructor, match_array_list,\n+\tgfc_match_array_constructor): Likewise.\n+\t* bbt.c (insert, gfc_insert_bbt): Likewise.\n+\t* decl.c (var_element, top_var_list, top_val_list, gfc_match_data,\n+\tget_proc_name): Likewise.\n+\t* expr.c (gfc_copy_actual_arglist): Likewise.\n+\t* interface.c (compare_actual_formal, check_new_interface,\n+\tgfc_add_interface): Likewise.\n+\t* intrinsic.c gfc_convert_type_warn, gfc_convert_chartype):\n+\tLikewise.\n+\t* io.c (match_io_iterator, match_io_list): Likewise.\n+\t* match.c (match_forall_header): Likewise.\n+\t* matchexp.c (build_node): Likewise.\n+\t* module.c (gfc_match_use): Likewise.\n+\t* scanner.c (load_file): Likewise.\n+\t* st.c (gfc_append_code): Likewise.\n+\t* symbol.c (save_symbol_data, gfc_get_sym_tree, gfc_undo_symbols,\n+\tgfc_commit_symbols): Likewise.\n+\t* trans-common.c (build_field): Likewise.\n+\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n+\t* trans-expr.c (gfc_free_interface_mapping,\n+\tgfc_get_interface_mapping_charlen, gfc_add_interface_mapping,\n+\tgfc_finish_interface_mapping,\n+\tgfc_apply_interface_mapping_to_expr): Likewise.\n+\t* trans.h (gfc_interface_sym_mapping): Likewise.\n+\n 2008-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gfortran.h (operator): Remove macro."}, {"sha": "ab9e42842fd52d7502f40f12185c2819560ef9e1", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -592,7 +592,7 @@ gfc_start_constructor (bt type, int kind, locus *where)\n    node onto the constructor.  */\n \n void\n-gfc_append_constructor (gfc_expr *base, gfc_expr *new)\n+gfc_append_constructor (gfc_expr *base, gfc_expr *new_expr)\n {\n   gfc_constructor *c;\n \n@@ -608,9 +608,9 @@ gfc_append_constructor (gfc_expr *base, gfc_expr *new)\n       c = c->next;\n     }\n \n-  c->expr = new;\n+  c->expr = new_expr;\n \n-  if (new->ts.type != base->ts.type || new->ts.kind != base->ts.kind)\n+  if (new_expr->ts.type != base->ts.type || new_expr->ts.kind != base->ts.kind)\n     gfc_internal_error (\"gfc_append_constructor(): New node has wrong kind\");\n }\n \n@@ -755,7 +755,7 @@ static match match_array_cons_element (gfc_constructor **);\n static match\n match_array_list (gfc_constructor **result)\n {\n-  gfc_constructor *p, *head, *tail, *new;\n+  gfc_constructor *p, *head, *tail, *new_cons;\n   gfc_iterator iter;\n   locus old_loc;\n   gfc_expr *e;\n@@ -790,7 +790,7 @@ match_array_list (gfc_constructor **result)\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n \n-      m = match_array_cons_element (&new);\n+      m = match_array_cons_element (&new_cons);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n@@ -801,8 +801,8 @@ match_array_list (gfc_constructor **result)\n \t  goto cleanup;\t\t/* Could be a complex constant */\n \t}\n \n-      tail->next = new;\n-      tail = new;\n+      tail->next = new_cons;\n+      tail = new_cons;\n \n       if (gfc_match_char (',') != MATCH_YES)\n \t{\n@@ -881,7 +881,7 @@ match_array_cons_element (gfc_constructor **result)\n match\n gfc_match_array_constructor (gfc_expr **result)\n {\n-  gfc_constructor *head, *tail, *new;\n+  gfc_constructor *head, *tail, *new_cons;\n   gfc_expr *expr;\n   gfc_typespec ts;\n   locus where;\n@@ -937,18 +937,18 @@ gfc_match_array_constructor (gfc_expr **result)\n \n   for (;;)\n     {\n-      m = match_array_cons_element (&new);\n+      m = match_array_cons_element (&new_cons);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n \tgoto syntax;\n \n       if (head == NULL)\n-\thead = new;\n+\thead = new_cons;\n       else\n-\ttail->next = new;\n+\ttail->next = new_cons;\n \n-      tail = new;\n+      tail = new_cons;\n \n       if (gfc_match_char (',') == MATCH_NO)\n \tbreak;"}, {"sha": "fa60e4fee22250f7a61f1743f1975cb79f6f40c0", "filename": "gcc/fortran/bbt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fbbt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fbbt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fbbt.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -93,24 +93,24 @@ rotate_right (gfc_bbt *t)\n    aborts if we find a duplicate key.  */\n \n static gfc_bbt *\n-insert (gfc_bbt *new, gfc_bbt *t, compare_fn compare)\n+insert (gfc_bbt *new_bbt, gfc_bbt *t, compare_fn compare)\n {\n   int c;\n \n   if (t == NULL)\n-    return new;\n+    return new_bbt;\n \n-  c = (*compare) (new, t);\n+  c = (*compare) (new_bbt, t);\n \n   if (c < 0)\n     {\n-      t->left = insert (new, t->left, compare);\n+      t->left = insert (new_bbt, t->left, compare);\n       if (t->priority < t->left->priority)\n \tt = rotate_right (t);\n     }\n   else if (c > 0)\n     {\n-      t->right = insert (new, t->right, compare);\n+      t->right = insert (new_bbt, t->right, compare);\n       if (t->priority < t->right->priority)\n \tt = rotate_left (t);\n     }\n@@ -126,12 +126,12 @@ insert (gfc_bbt *new, gfc_bbt *t, compare_fn compare)\n    already exists.  */\n \n void\n-gfc_insert_bbt (void *root, void *new, compare_fn compare)\n+gfc_insert_bbt (void *root, void *new_node, compare_fn compare)\n {\n   gfc_bbt **r, *n;\n \n   r = (gfc_bbt **) root;\n-  n = (gfc_bbt *) new;\n+  n = (gfc_bbt *) new_node;\n   n->priority = pseudo_random ();\n   *r = insert (n, *r, compare);\n }"}, {"sha": "b7b98d544b3650b0899861e0e3affed348886074", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -231,21 +231,21 @@ var_list (gfc_data_variable *parent)\n    variable-iterator list.  */\n \n static match\n-var_element (gfc_data_variable *new)\n+var_element (gfc_data_variable *new_var)\n {\n   match m;\n   gfc_symbol *sym;\n \n-  memset (new, 0, sizeof (gfc_data_variable));\n+  memset (new_var, 0, sizeof (gfc_data_variable));\n \n   if (gfc_match_char ('(') == MATCH_YES)\n-    return var_list (new);\n+    return var_list (new_var);\n \n-  m = gfc_match_variable (&new->expr, 0);\n+  m = gfc_match_variable (&new_var->expr, 0);\n   if (m != MATCH_YES)\n     return m;\n \n-  sym = new->expr->symtree->n.sym;\n+  sym = new_var->expr->symtree->n.sym;\n \n   if (!sym->attr.function && gfc_current_ns->parent\n       && gfc_current_ns->parent == sym->ns)\n@@ -262,7 +262,7 @@ var_element (gfc_data_variable *new)\n \t\t\t sym->name) == FAILURE)\n     return MATCH_ERROR;\n \n-  if (gfc_add_data (&sym->attr, sym->name, &new->expr->where) == FAILURE)\n+  if (gfc_add_data (&sym->attr, sym->name, &new_var->expr->where) == FAILURE)\n     return MATCH_ERROR;\n \n   return MATCH_YES;\n@@ -274,7 +274,7 @@ var_element (gfc_data_variable *new)\n static match\n top_var_list (gfc_data *d)\n {\n-  gfc_data_variable var, *tail, *new;\n+  gfc_data_variable var, *tail, *new_var;\n   match m;\n \n   tail = NULL;\n@@ -287,15 +287,15 @@ top_var_list (gfc_data *d)\n       if (m == MATCH_ERROR)\n \treturn MATCH_ERROR;\n \n-      new = gfc_get_data_variable ();\n-      *new = var;\n+      new_var = gfc_get_data_variable ();\n+      *new_var = var;\n \n       if (tail == NULL)\n-\td->var = new;\n+\td->var = new_var;\n       else\n-\ttail->next = new;\n+\ttail->next = new_var;\n \n-      tail = new;\n+      tail = new_var;\n \n       if (gfc_match_char ('/') == MATCH_YES)\n \tbreak;\n@@ -404,7 +404,7 @@ match_data_constant (gfc_expr **result)\n static match\n top_val_list (gfc_data *data)\n {\n-  gfc_data_value *new, *tail;\n+  gfc_data_value *new_val, *tail;\n   gfc_expr *expr;\n   match m;\n \n@@ -418,15 +418,15 @@ top_val_list (gfc_data *data)\n       if (m == MATCH_ERROR)\n \treturn MATCH_ERROR;\n \n-      new = gfc_get_data_value ();\n-      mpz_init (new->repeat);\n+      new_val = gfc_get_data_value ();\n+      mpz_init (new_val->repeat);\n \n       if (tail == NULL)\n-\tdata->value = new;\n+\tdata->value = new_val;\n       else\n-\ttail->next = new;\n+\ttail->next = new_val;\n \n-      tail = new;\n+      tail = new_val;\n \n       if (expr->ts.type != BT_INTEGER || gfc_match_char ('*') != MATCH_YES)\n \t{\n@@ -518,26 +518,26 @@ match_old_style_init (const char *name)\n match\n gfc_match_data (void)\n {\n-  gfc_data *new;\n+  gfc_data *new_data;\n   match m;\n \n   set_in_match_data (true);\n \n   for (;;)\n     {\n-      new = gfc_get_data ();\n-      new->where = gfc_current_locus;\n+      new_data = gfc_get_data ();\n+      new_data->where = gfc_current_locus;\n \n-      m = top_var_list (new);\n+      m = top_var_list (new_data);\n       if (m != MATCH_YES)\n \tgoto cleanup;\n \n-      m = top_val_list (new);\n+      m = top_val_list (new_data);\n       if (m != MATCH_YES)\n \tgoto cleanup;\n \n-      new->next = gfc_current_ns->data;\n-      gfc_current_ns->data = new;\n+      new_data->next = gfc_current_ns->data;\n+      gfc_current_ns->data = new_data;\n \n       if (gfc_match_eos () == MATCH_YES)\n \tbreak;\n@@ -557,7 +557,7 @@ gfc_match_data (void)\n \n cleanup:\n   set_in_match_data (false);\n-  gfc_free_data (new);\n+  gfc_free_data (new_data);\n   return MATCH_ERROR;\n }\n \n@@ -781,7 +781,7 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n   sym = *result;\n   gfc_current_ns->refs++;\n \n-  if (sym && !sym->new && gfc_current_state () != COMP_INTERFACE)\n+  if (sym && !sym->gfc_new && gfc_current_state () != COMP_INTERFACE)\n     {\n       /* Trap another encompassed procedure with the same name.  All\n \t these conditions are necessary to avoid picking up an entry"}, {"sha": "aabcb4f7fb13c98eebdc404b725aedf9a4fb1c39", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -65,24 +65,24 @@ gfc_free_actual_arglist (gfc_actual_arglist *a1)\n gfc_actual_arglist *\n gfc_copy_actual_arglist (gfc_actual_arglist *p)\n {\n-  gfc_actual_arglist *head, *tail, *new;\n+  gfc_actual_arglist *head, *tail, *new_arg;\n \n   head = tail = NULL;\n \n   for (; p; p = p->next)\n     {\n-      new = gfc_get_actual_arglist ();\n-      *new = *p;\n+      new_arg = gfc_get_actual_arglist ();\n+      *new_arg = *p;\n \n-      new->expr = gfc_copy_expr (p->expr);\n-      new->next = NULL;\n+      new_arg->expr = gfc_copy_expr (p->expr);\n+      new_arg->next = NULL;\n \n       if (head == NULL)\n-\thead = new;\n+\thead = new_arg;\n       else\n-\ttail->next = new;\n+\ttail->next = new_arg;\n \n-      tail = new;\n+      tail = new_arg;\n     }\n \n   return head;"}, {"sha": "5a3b4c87f264aed247f93e627f442d5c031a8272", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -1053,8 +1053,6 @@ typedef struct gfc_symbol\n      the old symbol.  */\n \n   struct gfc_symbol *old_symbol, *tlink;\n-  /* FIXME: This macro is temporary until we convert everything.  */\n-#define new gfc_new\n   unsigned mark:1, gfc_new:1;\n   /* Nonzero if all equivalences associated with this symbol have been\n      processed.  */"}, {"sha": "d4809f0d5fbf5e25366f10ab529ee9a57d454a49", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -1823,7 +1823,7 @@ static int\n compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       int ranks_must_agree, int is_elemental, locus *where)\n {\n-  gfc_actual_arglist **new, *a, *actual, temp;\n+  gfc_actual_arglist **new_arg, *a, *actual, temp;\n   gfc_formal_arglist *f;\n   int i, n, na;\n   unsigned long actual_size, formal_size;\n@@ -1837,10 +1837,10 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   for (f = formal; f; f = f->next)\n     n++;\n \n-  new = (gfc_actual_arglist **) alloca (n * sizeof (gfc_actual_arglist *));\n+  new_arg = (gfc_actual_arglist **) alloca (n * sizeof (gfc_actual_arglist *));\n \n   for (i = 0; i < n; i++)\n-    new[i] = NULL;\n+    new_arg[i] = NULL;\n \n   na = 0;\n   f = formal;\n@@ -1868,7 +1868,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t      return 0;\n \t    }\n \n-\t  if (new[i] != NULL)\n+\t  if (new_arg[i] != NULL)\n \t    {\n \t      if (where)\n \t\tgfc_error (\"Keyword argument '%s' at %L is already associated \"\n@@ -2113,14 +2113,14 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n       if (a == actual)\n \tna = i;\n \n-      new[i++] = a;\n+      new_arg[i++] = a;\n     }\n \n   /* Make sure missing actual arguments are optional.  */\n   i = 0;\n   for (f = formal; f; f = f->next, i++)\n     {\n-      if (new[i] != NULL)\n+      if (new_arg[i] != NULL)\n \tcontinue;\n       if (f->sym == NULL)\n \t{\n@@ -2142,27 +2142,27 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n      argument list with null arguments in the right places.  The head\n      of the list remains the head.  */\n   for (i = 0; i < n; i++)\n-    if (new[i] == NULL)\n-      new[i] = gfc_get_actual_arglist ();\n+    if (new_arg[i] == NULL)\n+      new_arg[i] = gfc_get_actual_arglist ();\n \n   if (na != 0)\n     {\n-      temp = *new[0];\n-      *new[0] = *actual;\n+      temp = *new_arg[0];\n+      *new_arg[0] = *actual;\n       *actual = temp;\n \n-      a = new[0];\n-      new[0] = new[na];\n-      new[na] = a;\n+      a = new_arg[0];\n+      new_arg[0] = new_arg[na];\n+      new_arg[na] = a;\n     }\n \n   for (i = 0; i < n - 1; i++)\n-    new[i]->next = new[i + 1];\n+    new_arg[i]->next = new_arg[i + 1];\n \n-  new[i]->next = NULL;\n+  new_arg[i]->next = NULL;\n \n   if (*ap == NULL && n > 0)\n-    *ap = new[0];\n+    *ap = new_arg[0];\n \n   /* Note the types of omitted optional arguments.  */\n   for (a = *ap, f = formal; a; a = a->next, f = f->next)\n@@ -2732,16 +2732,16 @@ gfc_extend_assign (gfc_code *c, gfc_namespace *ns)\n    procedures can be present without interfaces.  */\n \n static try\n-check_new_interface (gfc_interface *base, gfc_symbol *new)\n+check_new_interface (gfc_interface *base, gfc_symbol *new_sym)\n {\n   gfc_interface *ip;\n \n   for (ip = base; ip; ip = ip->next)\n     {\n-      if (ip->sym == new)\n+      if (ip->sym == new_sym)\n \t{\n \t  gfc_error (\"Entity '%s' at %C is already present in the interface\",\n-\t\t     new->name);\n+\t\t     new_sym->name);\n \t  return FAILURE;\n \t}\n     }\n@@ -2753,7 +2753,7 @@ check_new_interface (gfc_interface *base, gfc_symbol *new)\n /* Add a symbol to the current interface.  */\n \n try\n-gfc_add_interface (gfc_symbol *new)\n+gfc_add_interface (gfc_symbol *new_sym)\n {\n   gfc_interface **head, *intr;\n   gfc_namespace *ns;\n@@ -2771,48 +2771,48 @@ gfc_add_interface (gfc_symbol *new)\n \t  {\n \t    case INTRINSIC_EQ:\n \t    case INTRINSIC_EQ_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_EQ], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_EQ_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_EQ], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_EQ_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_NE:\n \t    case INTRINSIC_NE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_NE], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_NE_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_NE], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_NE_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_GT:\n \t    case INTRINSIC_GT_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_GT], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_GT_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_GT], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_GT_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_GE:\n \t    case INTRINSIC_GE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_GE], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_GE_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_GE], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_GE_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_LT:\n \t    case INTRINSIC_LT_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_LT], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_LT_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_LT], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_LT_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_LE:\n \t    case INTRINSIC_LE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_LE], new) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_LE_OS], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[INTRINSIC_LE], new_sym) == FAILURE ||\n+\t          check_new_interface (ns->op[INTRINSIC_LE_OS], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    default:\n-\t      if (check_new_interface (ns->op[current_interface.op], new) == FAILURE)\n+\t      if (check_new_interface (ns->op[current_interface.op], new_sym) == FAILURE)\n \t\treturn FAILURE;\n \t  }\n \n@@ -2826,15 +2826,15 @@ gfc_add_interface (gfc_symbol *new)\n \t  if (sym == NULL)\n \t    continue;\n \n-\t  if (check_new_interface (sym->generic, new) == FAILURE)\n+\t  if (check_new_interface (sym->generic, new_sym) == FAILURE)\n \t    return FAILURE;\n \t}\n \n       head = &current_interface.sym->generic;\n       break;\n \n     case INTERFACE_USER_OP:\n-      if (check_new_interface (current_interface.uop->op, new)\n+      if (check_new_interface (current_interface.uop->op, new_sym)\n \t  == FAILURE)\n \treturn FAILURE;\n \n@@ -2846,7 +2846,7 @@ gfc_add_interface (gfc_symbol *new)\n     }\n \n   intr = gfc_get_interface ();\n-  intr->sym = new;\n+  intr->sym = new_sym;\n   intr->where = gfc_current_locus;\n \n   intr->next = *head;"}, {"sha": "4c55a2c99baffce6cc318bc9a70aa762097c82a0", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -3680,7 +3680,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   gfc_intrinsic_sym *sym;\n   gfc_typespec from_ts;\n   locus old_where;\n-  gfc_expr *new;\n+  gfc_expr *new_expr;\n   int rank;\n   mpz_t *shape;\n \n@@ -3722,29 +3722,29 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   rank = expr->rank;\n   shape = expr->shape;\n \n-  new = gfc_get_expr ();\n-  *new = *expr;\n-\n-  new = gfc_build_conversion (new);\n-  new->value.function.name = sym->lib_name;\n-  new->value.function.isym = sym;\n-  new->where = old_where;\n-  new->rank = rank;\n-  new->shape = gfc_copy_shape (shape, rank);\n-\n-  gfc_get_ha_sym_tree (sym->name, &new->symtree);\n-  new->symtree->n.sym->ts = *ts;\n-  new->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  new->symtree->n.sym->attr.function = 1;\n-  new->symtree->n.sym->attr.elemental = 1;\n-  new->symtree->n.sym->attr.pure = 1;\n-  new->symtree->n.sym->attr.referenced = 1;\n-  gfc_intrinsic_symbol(new->symtree->n.sym);\n-  gfc_commit_symbol (new->symtree->n.sym);\n-\n-  *expr = *new;\n-\n-  gfc_free (new);\n+  new_expr = gfc_get_expr ();\n+  *new_expr = *expr;\n+\n+  new_expr = gfc_build_conversion (new_expr);\n+  new_expr->value.function.name = sym->lib_name;\n+  new_expr->value.function.isym = sym;\n+  new_expr->where = old_where;\n+  new_expr->rank = rank;\n+  new_expr->shape = gfc_copy_shape (shape, rank);\n+\n+  gfc_get_ha_sym_tree (sym->name, &new_expr->symtree);\n+  new_expr->symtree->n.sym->ts = *ts;\n+  new_expr->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n+  new_expr->symtree->n.sym->attr.function = 1;\n+  new_expr->symtree->n.sym->attr.elemental = 1;\n+  new_expr->symtree->n.sym->attr.pure = 1;\n+  new_expr->symtree->n.sym->attr.referenced = 1;\n+  gfc_intrinsic_symbol(new_expr->symtree->n.sym);\n+  gfc_commit_symbol (new_expr->symtree->n.sym);\n+\n+  *expr = *new_expr;\n+\n+  gfc_free (new_expr);\n   expr->ts = *ts;\n \n   if (gfc_is_constant_expr (expr->value.function.actual->expr)\n@@ -3779,7 +3779,7 @@ gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n   gfc_intrinsic_sym *sym;\n   gfc_typespec from_ts;\n   locus old_where;\n-  gfc_expr *new;\n+  gfc_expr *new_expr;\n   int rank;\n   mpz_t *shape;\n \n@@ -3794,28 +3794,28 @@ gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n   rank = expr->rank;\n   shape = expr->shape;\n \n-  new = gfc_get_expr ();\n-  *new = *expr;\n+  new_expr = gfc_get_expr ();\n+  *new_expr = *expr;\n \n-  new = gfc_build_conversion (new);\n-  new->value.function.name = sym->lib_name;\n-  new->value.function.isym = sym;\n-  new->where = old_where;\n-  new->rank = rank;\n-  new->shape = gfc_copy_shape (shape, rank);\n+  new_expr = gfc_build_conversion (new_expr);\n+  new_expr->value.function.name = sym->lib_name;\n+  new_expr->value.function.isym = sym;\n+  new_expr->where = old_where;\n+  new_expr->rank = rank;\n+  new_expr->shape = gfc_copy_shape (shape, rank);\n \n-  gfc_get_ha_sym_tree (sym->name, &new->symtree);\n-  new->symtree->n.sym->ts = *ts;\n-  new->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  new->symtree->n.sym->attr.function = 1;\n-  new->symtree->n.sym->attr.elemental = 1;\n-  new->symtree->n.sym->attr.referenced = 1;\n-  gfc_intrinsic_symbol(new->symtree->n.sym);\n-  gfc_commit_symbol (new->symtree->n.sym);\n+  gfc_get_ha_sym_tree (sym->name, &new_expr->symtree);\n+  new_expr->symtree->n.sym->ts = *ts;\n+  new_expr->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n+  new_expr->symtree->n.sym->attr.function = 1;\n+  new_expr->symtree->n.sym->attr.elemental = 1;\n+  new_expr->symtree->n.sym->attr.referenced = 1;\n+  gfc_intrinsic_symbol(new_expr->symtree->n.sym);\n+  gfc_commit_symbol (new_expr->symtree->n.sym);\n \n-  *expr = *new;\n+  *expr = *new_expr;\n \n-  gfc_free (new);\n+  gfc_free (new_expr);\n   expr->ts = *ts;\n \n   if (gfc_is_constant_expr (expr->value.function.actual->expr)"}, {"sha": "4af097108837331757bb26f211ff421dafe1ab3e", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -2623,7 +2623,7 @@ static match match_io_element (io_kind, gfc_code **);\n static match\n match_io_iterator (io_kind k, gfc_code **result)\n {\n-  gfc_code *head, *tail, *new;\n+  gfc_code *head, *tail, *new_code;\n   gfc_iterator *iter;\n   locus old_loc;\n   match m;\n@@ -2659,7 +2659,7 @@ match_io_iterator (io_kind k, gfc_code **result)\n \t  break;\n \t}\n \n-      m = match_io_element (k, &new);\n+      m = match_io_element (k, &new_code);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n@@ -2669,7 +2669,7 @@ match_io_iterator (io_kind k, gfc_code **result)\n \t  goto cleanup;\n \t}\n \n-      tail = gfc_append_code (tail, new);\n+      tail = gfc_append_code (tail, new_code);\n \n       if (gfc_match_char (',') != MATCH_YES)\n \t{\n@@ -2683,15 +2683,15 @@ match_io_iterator (io_kind k, gfc_code **result)\n   if (gfc_match_char (')') != MATCH_YES)\n     goto syntax;\n \n-  new = gfc_get_code ();\n-  new->op = EXEC_DO;\n-  new->ext.iterator = iter;\n+  new_code = gfc_get_code ();\n+  new_code->op = EXEC_DO;\n+  new_code->ext.iterator = iter;\n \n-  new->block = gfc_get_code ();\n-  new->block->op = EXEC_DO;\n-  new->block->next = head;\n+  new_code->block = gfc_get_code ();\n+  new_code->block->op = EXEC_DO;\n+  new_code->block->next = head;\n \n-  *result = new;\n+  *result = new_code;\n   return MATCH_YES;\n \n syntax:\n@@ -2799,7 +2799,7 @@ match_io_element (io_kind k, gfc_code **cpp)\n static match\n match_io_list (io_kind k, gfc_code **head_p)\n {\n-  gfc_code *head, *tail, *new;\n+  gfc_code *head, *tail, *new_code;\n   match m;\n \n   *head_p = head = tail = NULL;\n@@ -2808,15 +2808,15 @@ match_io_list (io_kind k, gfc_code **head_p)\n \n   for (;;)\n     {\n-      m = match_io_element (k, &new);\n+      m = match_io_element (k, &new_code);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n \tgoto syntax;\n \n-      tail = gfc_append_code (tail, new);\n+      tail = gfc_append_code (tail, new_code);\n       if (head == NULL)\n-\thead = new;\n+\thead = new_code;\n \n       if (gfc_match_eos () == MATCH_YES)\n \tbreak;"}, {"sha": "19a97e930e940f68e21db3bb2508b6d9c3e0111e", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -3836,7 +3836,7 @@ match_forall_iterator (gfc_forall_iterator **result)\n static match\n match_forall_header (gfc_forall_iterator **phead, gfc_expr **mask)\n {\n-  gfc_forall_iterator *head, *tail, *new;\n+  gfc_forall_iterator *head, *tail, *new_iter;\n   gfc_expr *msk;\n   match m;\n \n@@ -3848,27 +3848,27 @@ match_forall_header (gfc_forall_iterator **phead, gfc_expr **mask)\n   if (gfc_match_char ('(') != MATCH_YES)\n     return MATCH_NO;\n \n-  m = match_forall_iterator (&new);\n+  m = match_forall_iterator (&new_iter);\n   if (m == MATCH_ERROR)\n     goto cleanup;\n   if (m == MATCH_NO)\n     goto syntax;\n \n-  head = tail = new;\n+  head = tail = new_iter;\n \n   for (;;)\n     {\n       if (gfc_match_char (',') != MATCH_YES)\n \tbreak;\n \n-      m = match_forall_iterator (&new);\n+      m = match_forall_iterator (&new_iter);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n \n       if (m == MATCH_YES)\n \t{\n-\t  tail->next = new;\n-\t  tail = new;\n+\t  tail->next = new_iter;\n+\t  tail = new_iter;\n \t  continue;\n \t}\n "}, {"sha": "a53c69bc71b88bdaa6cc5577fb6397e4ab58f5bd", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -211,17 +211,17 @@ static gfc_expr *\n build_node (gfc_intrinsic_op op, locus *where,\n \t    gfc_expr *op1, gfc_expr *op2)\n {\n-  gfc_expr *new;\n+  gfc_expr *new_expr;\n \n-  new = gfc_get_expr ();\n-  new->expr_type = EXPR_OP;\n-  new->value.op.op = op;\n-  new->where = *where;\n+  new_expr = gfc_get_expr ();\n+  new_expr->expr_type = EXPR_OP;\n+  new_expr->value.op.op = op;\n+  new_expr->where = *where;\n \n-  new->value.op.op1 = op1;\n-  new->value.op.op2 = op2;\n+  new_expr->value.op.op1 = op1;\n+  new_expr->value.op.op2 = op2;\n \n-  return new;\n+  return new_expr;\n }\n \n "}, {"sha": "365dd98a60fb3b13cc9f1f279d0b1dd992e3fc54", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -502,7 +502,7 @@ match\n gfc_match_use (void)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1], module_nature[GFC_MAX_SYMBOL_LEN + 1];\n-  gfc_use_rename *tail = NULL, *new;\n+  gfc_use_rename *tail = NULL, *new_use;\n   interface_type type, type2;\n   gfc_intrinsic_op op;\n   match m;\n@@ -581,19 +581,19 @@ gfc_match_use (void)\n   for (;;)\n     {\n       /* Get a new rename struct and add it to the rename list.  */\n-      new = gfc_get_use_rename ();\n-      new->where = gfc_current_locus;\n-      new->found = 0;\n+      new_use = gfc_get_use_rename ();\n+      new_use->where = gfc_current_locus;\n+      new_use->found = 0;\n \n       if (gfc_rename_list == NULL)\n-\tgfc_rename_list = new;\n+\tgfc_rename_list = new_use;\n       else\n-\ttail->next = new;\n-      tail = new;\n+\ttail->next = new_use;\n+      tail = new_use;\n \n       /* See what kind of interface we're dealing with.  Assume it is\n \t not an operator.  */\n-      new->op = INTRINSIC_NONE;\n+      new_use->op = INTRINSIC_NONE;\n       if (gfc_match_generic_spec (&type, name, &op) == MATCH_ERROR)\n \tgoto cleanup;\n \n@@ -614,16 +614,16 @@ gfc_match_use (void)\n \t    goto cleanup;\n \n \t  if (type == INTERFACE_USER_OP)\n-\t    new->op = INTRINSIC_USER;\n+\t    new_use->op = INTRINSIC_USER;\n \n \t  if (only_flag)\n \t    {\n \t      if (m != MATCH_YES)\n-\t\tstrcpy (new->use_name, name);\n+\t\tstrcpy (new_use->use_name, name);\n \t      else\n \t\t{\n-\t\t  strcpy (new->local_name, name);\n-\t\t  m = gfc_match_generic_spec (&type2, new->use_name, &op);\n+\t\t  strcpy (new_use->local_name, name);\n+\t\t  m = gfc_match_generic_spec (&type2, new_use->use_name, &op);\n \t\t  if (type != type2)\n \t\t    goto syntax;\n \t\t  if (m == MATCH_NO)\n@@ -636,9 +636,9 @@ gfc_match_use (void)\n \t    {\n \t      if (m != MATCH_YES)\n \t\tgoto syntax;\n-\t      strcpy (new->local_name, name);\n+\t      strcpy (new_use->local_name, name);\n \n-\t      m = gfc_match_generic_spec (&type2, new->use_name, &op);\n+\t      m = gfc_match_generic_spec (&type2, new_use->use_name, &op);\n \t      if (type != type2)\n \t\tgoto syntax;\n \t      if (m == MATCH_NO)\n@@ -647,8 +647,8 @@ gfc_match_use (void)\n \t\tgoto cleanup;\n \t    }\n \n-\t  if (strcmp (new->use_name, module_name) == 0\n-\t      || strcmp (new->local_name, module_name) == 0)\n+\t  if (strcmp (new_use->use_name, module_name) == 0\n+\t      || strcmp (new_use->local_name, module_name) == 0)\n \t    {\n \t      gfc_error (\"The name '%s' at %C has already been used as \"\n \t\t\t \"an external module name.\", module_name);\n@@ -657,7 +657,7 @@ gfc_match_use (void)\n \t  break;\n \n \tcase INTERFACE_INTRINSIC_OP:\n-\t  new->op = op;\n+\t  new_use->op = op;\n \t  break;\n \n \tdefault:"}, {"sha": "6e6017a9004e53186265d218391839cc192e8b0c", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -1840,11 +1840,11 @@ load_file (const char *filename, bool initial)\n \t\t\t\t&& line[2] == (unsigned char) '\\xBF')))\n \t{\n \t  int n = line[1] == (unsigned char) '\\xBB' ? 3 : 2;\n-\t  gfc_char_t *new = gfc_get_wide_string (line_len);\n+\t  gfc_char_t *new_char = gfc_get_wide_string (line_len);\n \n-\t  wide_strcpy (new, &line[n]);\n+\t  wide_strcpy (new_char, &line[n]);\n \t  gfc_free (line);\n-\t  line = new;\n+\t  line = new_char;\n \t  len -= n;\n \t}\n "}, {"sha": "790dec6cf58fce97aae5f1d5a9997d249b6ae952", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -58,20 +58,20 @@ gfc_get_code (void)\n    its tail, returning a pointer to the new tail.  */\n \n gfc_code *\n-gfc_append_code (gfc_code *tail, gfc_code *new)\n+gfc_append_code (gfc_code *tail, gfc_code *new_code)\n {\n   if (tail != NULL)\n     {\n       while (tail->next != NULL)\n \ttail = tail->next;\n \n-      tail->next = new;\n+      tail->next = new_code;\n     }\n \n-  while (new->next != NULL)\n-    new = new->next;\n+  while (new_code->next != NULL)\n+    new_code = new_code->next;\n \n-  return new;\n+  return new_code;\n }\n \n "}, {"sha": "ca1237e78d914585656b019d74ac1a3a72546910", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -2451,7 +2451,7 @@ static void\n save_symbol_data (gfc_symbol *sym)\n {\n \n-  if (sym->new || sym->old_symbol != NULL)\n+  if (sym->gfc_new || sym->old_symbol != NULL)\n     return;\n \n   sym->old_symbol = XCNEW (gfc_symbol);\n@@ -2495,7 +2495,7 @@ gfc_get_sym_tree (const char *name, gfc_namespace *ns, gfc_symtree **result)\n       p->old_symbol = NULL;\n       p->tlink = changed_syms;\n       p->mark = 1;\n-      p->new = 1;\n+      p->gfc_new = 1;\n       changed_syms = p;\n \n       st = gfc_new_symtree (&ns->sym_root, name);\n@@ -2643,7 +2643,7 @@ gfc_undo_symbols (void)\n     {\n       q = p->tlink;\n \n-      if (p->new)\n+      if (p->gfc_new)\n \t{\n \t  /* Symbol was new.  */\n \t  if (p->attr.in_common && p->common_block->head)\n@@ -2779,7 +2779,7 @@ gfc_commit_symbols (void)\n       q = p->tlink;\n       p->tlink = NULL;\n       p->mark = 0;\n-      p->new = 0;\n+      p->gfc_new = 0;\n       free_old_symbol (p);\n     }\n   changed_syms = NULL;\n@@ -2808,7 +2808,7 @@ gfc_commit_symbol (gfc_symbol *sym)\n \n   sym->tlink = NULL;\n   sym->mark = 0;\n-  sym->new = 0;\n+  sym->gfc_new = 0;\n \n   free_old_symbol (sym);\n }"}, {"sha": "4b95f5fbe7817d9168598ba1967ab42539a3853a", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -321,10 +321,10 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n   /* If this field is volatile, mark it.  */\n   if (h->sym->attr.volatile_)\n     {\n-      tree new;\n+      tree new_type;\n       TREE_THIS_VOLATILE (field) = 1;\n-      new = build_qualified_type (TREE_TYPE (field), TYPE_QUAL_VOLATILE);\n-      TREE_TYPE (field) = new;\n+      new_type = build_qualified_type (TREE_TYPE (field), TYPE_QUAL_VOLATILE);\n+      TREE_TYPE (field) = new_type;\n     }\n \n   h->field = field;"}, {"sha": "5fe460e91e215bf42635bf556444d01d68a73928", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -461,7 +461,7 @@ gfc_finish_decl (tree decl)\n static void\n gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n {\n-  tree new;\n+  tree new_type;\n   /* TREE_ADDRESSABLE means the address of this variable is actually needed.\n      This is the equivalent of the TARGET variables.\n      We also need to set this if the variable is passed by reference in a\n@@ -535,8 +535,8 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n   if (sym->attr.volatile_)\n     {\n       TREE_THIS_VOLATILE (decl) = 1;\n-      new = build_qualified_type (TREE_TYPE (decl), TYPE_QUAL_VOLATILE);\n-      TREE_TYPE (decl) = new;\n+      new_type = build_qualified_type (TREE_TYPE (decl), TYPE_QUAL_VOLATILE);\n+      TREE_TYPE (decl) = new_type;\n     } \n \n   /* Keep variables larger than max-stack-var-size off stack.  */"}, {"sha": "568febc956e53b8c80a3238dd60853b695cd952e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -1460,9 +1460,9 @@ gfc_free_interface_mapping (gfc_interface_mapping * mapping)\n   for (sym = mapping->syms; sym; sym = nextsym)\n     {\n       nextsym = sym->next;\n-      gfc_free_symbol (sym->new->n.sym);\n+      gfc_free_symbol (sym->new_sym->n.sym);\n       gfc_free_expr (sym->expr);\n-      gfc_free (sym->new);\n+      gfc_free (sym->new_sym);\n       gfc_free (sym);\n     }\n   for (cl = mapping->charlens; cl; cl = nextcl)\n@@ -1481,14 +1481,14 @@ static gfc_charlen *\n gfc_get_interface_mapping_charlen (gfc_interface_mapping * mapping,\n \t\t\t\t   gfc_charlen * cl)\n {\n-  gfc_charlen *new;\n+  gfc_charlen *new_charlen;\n \n-  new = gfc_get_charlen ();\n-  new->next = mapping->charlens;\n-  new->length = gfc_copy_expr (cl->length);\n+  new_charlen = gfc_get_charlen ();\n+  new_charlen->next = mapping->charlens;\n+  new_charlen->length = gfc_copy_expr (cl->length);\n \n-  mapping->charlens = new;\n-  return new;\n+  mapping->charlens = new_charlen;\n+  return new_charlen;\n }\n \n \n@@ -1597,7 +1597,7 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n   sm = XCNEW (gfc_interface_sym_mapping);\n   sm->next = mapping->syms;\n   sm->old = sym;\n-  sm->new = new_symtree;\n+  sm->new_sym = new_symtree;\n   sm->expr = gfc_copy_expr (expr);\n   mapping->syms = sm;\n \n@@ -1689,10 +1689,10 @@ gfc_finish_interface_mapping (gfc_interface_mapping * mapping,\n   gfc_se se;\n \n   for (sym = mapping->syms; sym; sym = sym->next)\n-    if (sym->new->n.sym->ts.type == BT_CHARACTER\n-\t&& !sym->new->n.sym->ts.cl->backend_decl)\n+    if (sym->new_sym->n.sym->ts.type == BT_CHARACTER\n+\t&& !sym->new_sym->n.sym->ts.cl->backend_decl)\n       {\n-\texpr = sym->new->n.sym->ts.cl->length;\n+\texpr = sym->new_sym->n.sym->ts.cl->length;\n \tgfc_apply_interface_mapping_to_expr (mapping, expr);\n \tgfc_init_se (&se, NULL);\n \tgfc_conv_expr (&se, expr);\n@@ -1701,7 +1701,7 @@ gfc_finish_interface_mapping (gfc_interface_mapping * mapping,\n \tgfc_add_block_to_block (pre, &se.pre);\n \tgfc_add_block_to_block (post, &se.post);\n \n-\tsym->new->n.sym->ts.cl->backend_decl = se.expr;\n+\tsym->new_sym->n.sym->ts.cl->backend_decl = se.expr;\n       }\n }\n \n@@ -1931,8 +1931,8 @@ gfc_apply_interface_mapping_to_expr (gfc_interface_mapping * mapping,\n   for (sym = mapping->syms; sym; sym = sym->next)\n     if (expr->symtree && sym->old == expr->symtree->n.sym)\n       {\n-\tif (sym->new->n.sym->backend_decl)\n-\t  expr->symtree = sym->new;\n+\tif (sym->new_sym->n.sym->backend_decl)\n+\t  expr->symtree = sym->new_sym;\n \telse if (sym->expr)\n \t  gfc_replace_expr (expr, gfc_copy_expr (sym->expr));\n       }\n@@ -1964,9 +1964,9 @@ gfc_apply_interface_mapping_to_expr (gfc_interface_mapping * mapping,\n       for (sym = mapping->syms; sym; sym = sym->next)\n \tif (sym->old == expr->value.function.esym)\n \t  {\n-\t    expr->value.function.esym = sym->new->n.sym;\n+\t    expr->value.function.esym = sym->new_sym->n.sym;\n \t    gfc_map_fcn_formal_to_actual (expr, sym->expr, mapping);\n-\t    expr->value.function.esym->result = sym->new->n.sym;\n+\t    expr->value.function.esym->result = sym->new_sym->n.sym;\n \t  }\n       break;\n "}, {"sha": "d19c6794a305030b152e53bd6d51f6304ea1af3e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b901ac47fb235195a14d401567b0b2677ad8a03/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=7b901ac47fb235195a14d401567b0b2677ad8a03", "patch": "@@ -710,7 +710,7 @@ typedef struct gfc_interface_sym_mapping\n {\n   struct gfc_interface_sym_mapping *next;\n   gfc_symbol *old;\n-  gfc_symtree *new;\n+  gfc_symtree *new_sym;\n   gfc_expr *expr;\n }\n gfc_interface_sym_mapping;"}]}