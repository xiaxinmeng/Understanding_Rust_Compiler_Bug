{"sha": "e1da2b17fa1e397a0b12782881103bb764bce4cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkYTJiMTdmYTFlMzk3YTBiMTI3ODI4ODExMDNiYjc2NGJjZTRjZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-08T12:48:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-08T12:48:53Z"}, "message": "decl.c (prepend_attributes): Fix typo.\n\n\t* decl.c (prepend_attributes): Fix typo.\n\t* trans.c (Pragma_to_gnu): Likewise.\n\t* utils.c (gnat_genericize): Likewise.\n\nFrom-SVN: r134094", "tree": {"sha": "1d03a24053e4c98ac73469d931b004e0cc538d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d03a24053e4c98ac73469d931b004e0cc538d65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1da2b17fa1e397a0b12782881103bb764bce4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1da2b17fa1e397a0b12782881103bb764bce4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1da2b17fa1e397a0b12782881103bb764bce4cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1da2b17fa1e397a0b12782881103bb764bce4cd/comments", "author": null, "committer": null, "parents": [{"sha": "2b3dffa66b6294bea45c75538efdf5fe9fd53293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3dffa66b6294bea45c75538efdf5fe9fd53293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3dffa66b6294bea45c75538efdf5fe9fd53293"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "4121fe7023ef335672d5e5f1f86856138d457743", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -1,3 +1,9 @@\n+2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (prepend_attributes): Fix typo.\n+\t* trans.c (Pragma_to_gnu): Likewise.\n+\t* utils.c (gnat_genericize): Likewise.\n+\n 2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n             Richard Kenner  <kenner@adacore.com>\n \n@@ -2380,8 +2386,8 @@ PR ada/10768\n \n 2008-03-18  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * misc.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n-\t\n+\t* misc.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n+\n 2008-03-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gnat_rm.texi (Implementation Defined Characteristics)"}, {"sha": "b38c34da5730bfebc997ae71b63c7fd484f07586", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *"}, {"sha": "545730b0465bf6bf4a1a4b1d539c664bb7bac4fd", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -2183,7 +2183,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      gnu_type = gnat_to_gnu_type (Original_Array_Type (gnat_entity));\n \t      for (index = array_dim - 1; index >= 0; index--)\n \t\tgnu_type = TREE_TYPE (gnu_type);\n-\t\n+\n \t      /* One of the above calls might have caused us to be elaborated,\n \t\t so don't blow up if so.  */\n \t      if (present_gnu_tree (gnat_entity))\n@@ -5107,7 +5107,7 @@ prepend_attributes (Entity_Id gnat_entity, struct attrib ** attr_list)\n \t\t\t\t\t\t  (First (gnat_assoc)))))));\n \t  }\n \n-\tswitch (Get_Pragma_Id (Pragma_Identifier (Chars (gnat_temp))))\n+\tswitch (Get_Pragma_Id (Chars (Pragma_Identifier (gnat_temp))))\n \t  {\n \t  case Pragma_Machine_Attribute:\n \t    etype = ATTR_MACHINE_ATTRIBUTE;"}, {"sha": "a6440d58b73e81a02d32a35c0d176741cc236113", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -691,7 +691,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n       || !Is_Pragma_Name (Chars (Pragma_Identifier (gnat_node))))\n     return gnu_result;\n \n-  switch (Get_Pragma_Id (Pragma_Identifier (Chars (gnat_node))))\n+  switch (Get_Pragma_Id (Chars (Pragma_Identifier (gnat_node))))\n     {\n     case Pragma_Inspection_Point:\n       /* Do nothing at top level: all such variables are already viewable.  */\n@@ -3673,7 +3673,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \n       /* If the result is a pointer type, see if we are improperly\n \t converting to a stricter alignment.  */\n-\n       if (STRICT_ALIGNMENT && POINTER_TYPE_P (gnu_result_type)\n \t  && IN (Ekind (Etype (gnat_node)), Access_Kind))\n \t{"}, {"sha": "1625484b6aa89e04e46eb873157c4fb3f6a75dde", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -2098,7 +2098,7 @@ gnat_genericize (tree fndecl)\n      type, and the gimplifier ICEs on such attempts.  Second, the middle-end\n      now relies on a different attribute for such cases (DECL_BY_REFERENCE on\n      RESULT/PARM_DECLs), and expects the user invisible by-reference-ness to\n-     be explicitely accounted for by the front-end in the function body.\n+     be explicitly accounted for by the front-end in the function body.\n \n      We achieve the complete transformation in two steps:\n \n@@ -2116,15 +2116,15 @@ gnat_genericize (tree fndecl)\n      strategy, which escapes the gimplifier temporary creation issues by\n      creating it's own temporaries using TARGET_EXPR nodes.  Our way relies\n      on simple specific support code in aggregate_value_p to look at the\n-     target function result decl explicitely.  */\n+     target function result decl explicitly.  */\n \n   struct pointer_set_t *p_set;\n   tree decl_result = DECL_RESULT (fndecl);\n \n   if (!DECL_BY_REFERENCE (decl_result))\n     return;\n \n-  /* Make the DECL_RESULT explicitely by-reference and adjust all the\n+  /* Make the DECL_RESULT explicitly by-reference and adjust all the\n      occurrences in the function body using the common tree-walking facility.\n      We want to see every occurrence of the result decl to adjust the\n      referencing tree, so need to use our own pointer set to control which"}, {"sha": "170fad7fac1baaa49abc79502ec88e6e92c266df", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1da2b17fa1e397a0b12782881103bb764bce4cd/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=e1da2b17fa1e397a0b12782881103bb764bce4cd", "patch": "@@ -243,7 +243,7 @@ find_common_type (tree t1, tree t2)\n      would better be handled upstream (types should be made consistent before\n      calling into build_binary_op), some others are really expected and we\n      have to be careful.  */\n-     \n+\n   /* We must prevent writing more than what the target may hold if this is for\n      an assignment and the case of tagged types is handled in build_binary_op\n      so use the lhs type if it is known to be smaller, or of constant size and"}]}