{"sha": "089ccc04e4680411e63e66040414dd36188fbdfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5Y2NjMDRlNDY4MDQxMWU2M2U2NjA0MDQxNGRkMzYxODhmYmRmYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-10-01T19:35:01Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-10-01T19:35:01Z"}, "message": "algobase.h (mismatch, equal): Provide parallel version for N3671 overloads.\n\n2013-10-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/parallel/algobase.h (mismatch, equal): Provide parallel\n\tversion for N3671 overloads.\n\nFrom-SVN: r203082", "tree": {"sha": "95fcf5b07cc6fef48c08e51b206edbf9757b3851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fcf5b07cc6fef48c08e51b206edbf9757b3851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/089ccc04e4680411e63e66040414dd36188fbdfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089ccc04e4680411e63e66040414dd36188fbdfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089ccc04e4680411e63e66040414dd36188fbdfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089ccc04e4680411e63e66040414dd36188fbdfb/comments", "author": null, "committer": null, "parents": [{"sha": "c8e318b0429daac458706dd5a55a69b2a5bc9d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e318b0429daac458706dd5a55a69b2a5bc9d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e318b0429daac458706dd5a55a69b2a5bc9d6d"}], "stats": {"total": 170, "additions": 147, "deletions": 23}, "files": [{"sha": "fd237ed7612528efb63f0089bed1c49bc7643bf6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089ccc04e4680411e63e66040414dd36188fbdfb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089ccc04e4680411e63e66040414dd36188fbdfb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=089ccc04e4680411e63e66040414dd36188fbdfb", "patch": "@@ -1,3 +1,8 @@\n+2013-10-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/parallel/algobase.h (mismatch, equal): Provide parallel\n+\tversion for N3671 overloads.\n+\n 2013-10-01  Paul Pluzhnikov  <ppluzhnikov@google.com>\n \n \t* src/c++11/snprintf_lite.cc: Add missing"}, {"sha": "1acb63e921b0fe798fdefb121076bcae305bccfc", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 142, "deletions": 23, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089ccc04e4680411e63e66040414dd36188fbdfb/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089ccc04e4680411e63e66040414dd36188fbdfb/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=089ccc04e4680411e63e66040414dd36188fbdfb", "patch": "@@ -94,17 +94,13 @@ namespace __parallel\n     inline pair<_IIter1, _IIter2>\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2)\n     {\n-      typedef std::iterator_traits<_IIter1> _Iterator1Traits;\n-      typedef std::iterator_traits<_IIter2> _Iterator2Traits;\n-      typedef typename _Iterator1Traits::value_type _ValueType1;\n-      typedef typename _Iterator2Traits::value_type _ValueType2;\n-      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n-      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n-\n-      typedef __gnu_parallel::_EqualTo<_ValueType1, _ValueType2> _EqualTo;\n+      typedef __gnu_parallel::_EqualTo<\n+\ttypename std::iterator_traits<_IIter1>::value_type,\n+\ttypename std::iterator_traits<_IIter2>::value_type> _EqualTo;\n \n       return __mismatch_switch(__begin1, __end1, __begin2, _EqualTo(),\n-                               _IteratorCategory1(), _IteratorCategory2());\n+                               std::__iterator_category(__begin1),\n+\t\t\t       std::__iterator_category(__begin2));\n     }\n \n   // Public interface\n@@ -113,32 +109,93 @@ namespace __parallel\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n              _Predicate __pred)\n     {\n-      typedef std::iterator_traits<_IIter1> _Iterator1Traits;\n-      typedef std::iterator_traits<_IIter2> _Iterator2Traits;\n-      typedef typename _Iterator1Traits::iterator_category _IteratorCategory1;\n-      typedef typename _Iterator2Traits::iterator_category _IteratorCategory2;\n-\n       return __mismatch_switch(__begin1, __end1, __begin2, __pred,\n-                               _IteratorCategory1(), _IteratorCategory2());\n+                               std::__iterator_category(__begin1),\n+\t\t\t       std::__iterator_category(__begin2));\n     }\n \n #if __cplusplus > 201103L\n+  // Sequential fallback.\n   template<typename _InputIterator1, typename _InputIterator2>\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t     _InputIterator2 __first2, _InputIterator2 __last2)\n+\t     _InputIterator2 __first2, _InputIterator2 __last2,\n+\t     __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_A::mismatch(__first1, __last1, __first2, __last2); }\n \n+  // Sequential fallback.\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2,\n-\t     _BinaryPredicate __binary_pred)\n+\t     _BinaryPredicate __binary_pred,\n+\t     __gnu_parallel::sequential_tag)\n     {\n       return _GLIBCXX_STD_A::mismatch(__first1, __last1, __first2, __last2,\n \t\t\t\t      __binary_pred);\n     }\n+\n+  // Sequential fallback for input iterator case\n+  template<typename _IIter1, typename _IIter2,\n+           typename _Predicate, typename _IteratorTag1, typename _IteratorTag2>\n+    inline pair<_IIter1, _IIter2>\n+    __mismatch_switch(_IIter1 __begin1, _IIter1 __end1,\n+\t\t      _IIter2 __begin2, _IIter2 __end2, _Predicate __pred,\n+\t\t      _IteratorTag1, _IteratorTag2)\n+    {\n+      return _GLIBCXX_STD_A::mismatch(__begin1, __end1,\n+\t\t\t\t      __begin2, __end2, __pred);\n+    }\n+\n+  // Parallel mismatch for random access iterators\n+  template<typename _RAIter1, typename _RAIter2, typename _Predicate>\n+    pair<_RAIter1, _RAIter2>\n+    __mismatch_switch(_RAIter1 __begin1, _RAIter1 __end1,\n+                      _RAIter2 __begin2, _RAIter2 __end2, _Predicate __pred, \n+                      random_access_iterator_tag, random_access_iterator_tag)\n+    {\n+      if (_GLIBCXX_PARALLEL_CONDITION(true))\n+        {\n+\t  if ((__end2 - __begin2) < (__end1 - __begin1))\n+\t    __end1 = __begin1 + (__end2 - __begin2);\n+\n+          _RAIter1 __res =\n+            __gnu_parallel::__find_template(__begin1, __end1, __begin2, __pred,\n+                                            __gnu_parallel::\n+                                            __mismatch_selector()).first;\n+          return make_pair(__res , __begin2 + (__res - __begin1));\n+        }\n+      else\n+        return _GLIBCXX_STD_A::mismatch(__begin1, __end1,\n+\t\t\t\t\t__begin2, __end2, __pred);\n+    }\n+\n+  template<typename _IIter1, typename _IIter2>\n+    inline pair<_IIter1, _IIter2>\n+    mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2)\n+    {\n+      typedef __gnu_parallel::_EqualTo<\n+\ttypename std::iterator_traits<_IIter1>::value_type,\n+\ttypename std::iterator_traits<_IIter2>::value_type> _EqualTo;\n+\n+      return __mismatch_switch(__begin1, __end1, __begin2, __end2, _EqualTo(),\n+\t\t\t       std::__iterator_category(__begin1),\n+\t\t\t       std::__iterator_category(__begin2));\n+    }\n+\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _BinaryPredicate>\n+    inline pair<_InputIterator1, _InputIterator2>\n+    mismatch(_InputIterator1 __begin1, _InputIterator1 __end1,\n+\t     _InputIterator2 __begin2, _InputIterator2 __end2,\n+\t     _BinaryPredicate __binary_pred)\n+    {\n+      return __mismatch_switch(__begin1, __end1, __begin2, __end2,\n+\t\t\t       __binary_pred,\n+\t\t\t       std::__iterator_category(__begin1),\n+\t\t\t       std::__iterator_category(__begin2));\n+    }\n #endif\n \n   // Sequential fallback\n@@ -175,19 +232,81 @@ namespace __parallel\n     }\n \n #if __cplusplus > 201103L\n-  template<typename _II1, typename _II2>\n+  // Sequential fallback\n+  template<typename _IIter1, typename _IIter2>\n     inline bool\n-    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-    { return _GLIBCXX_STD_A::equal(__first1, __last1, __first2, __last2); }\n+    equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2,\n+\t  __gnu_parallel::sequential_tag)\n+    {\n+      return _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __end2);\n+    }\n \n+  // Sequential fallback\n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n     inline bool\n-    equal(_IIter1 __first1, _IIter1 __last1,\n-\t  _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)\n+    equal(_IIter1 __begin1, _IIter1 __end1,\n+\t  _IIter2 __begin2, _IIter2 __end2, _BinaryPredicate __binary_pred,\n+\t  __gnu_parallel::sequential_tag)\n     {\n-      return _GLIBCXX_STD_A::equal(__first1, __last1, __first2, __last2,\n+      return _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __end2,\n \t\t\t\t   __binary_pred);\n     }\n+\n+  // Sequential fallback for input iterator case\n+  template<typename _IIter1, typename _IIter2,\n+           typename _Predicate, typename _IteratorTag1, typename _IteratorTag2>\n+    inline bool\n+    __equal_switch(_IIter1 __begin1, _IIter1 __end1,\n+\t\t   _IIter2 __begin2, _IIter2 __end2, _Predicate __pred,\n+\t\t   _IteratorTag1, _IteratorTag2)\n+    {\n+      return _GLIBCXX_STD_A::equal(__begin1, __end1,\n+\t\t\t\t   __begin2, __end2, __pred);\n+    }\n+\n+  // Parallel equal for random access iterators\n+  template<typename _RAIter1, typename _RAIter2, typename _Predicate>\n+    inline bool\n+    __equal_switch(_RAIter1 __begin1, _RAIter1 __end1,\n+\t\t   _RAIter2 __begin2, _RAIter2 __end2, _Predicate __pred, \n+\t\t   random_access_iterator_tag, random_access_iterator_tag)\n+    {\n+      if (_GLIBCXX_PARALLEL_CONDITION(true))\n+        {\n+\t  if (std::distance(__begin1, __end1)\n+\t      != std::distance(__begin2, __end2))\n+\t    return false;\n+\n+\t  return __gnu_parallel::mismatch(__begin1, __end1, __begin2, __end2,\n+\t\t\t\t\t  __pred).first == __end1;\n+        }\n+      else\n+        return _GLIBCXX_STD_A::equal(__begin1, __end1,\n+\t\t\t\t     __begin2, __end2, __pred);\n+    }\n+\n+  template<typename _IIter1, typename _IIter2>\n+    inline bool\n+    equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2)\n+    {\n+      typedef __gnu_parallel::_EqualTo<\n+\ttypename std::iterator_traits<_IIter1>::value_type,\n+\ttypename std::iterator_traits<_IIter2>::value_type> _EqualTo;\n+\n+      return __equal_switch(__begin1, __end1, __begin2, __end2, _EqualTo(),\n+\t\t\t    std::__iterator_category(__begin1),\n+\t\t\t    std::__iterator_category(__begin2));\n+    }\n+\n+  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    inline bool\n+    equal(_IIter1 __begin1, _IIter1 __end1,\n+\t  _IIter2 __begin2, _IIter2 __end2, _BinaryPredicate __binary_pred)\n+    {\n+      return __equal_switch(__begin1, __end1, __begin2, __end2, __binary_pred,\n+\t\t\t    std::__iterator_category(__begin1),\n+\t\t\t    std::__iterator_category(__begin2));\n+    }\n #endif\n \n   // Sequential fallback"}]}