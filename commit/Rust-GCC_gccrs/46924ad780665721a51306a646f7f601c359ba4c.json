{"sha": "46924ad780665721a51306a646f7f601c359ba4c", "node_id": "C_kwDOANBUbNoAKDQ2OTI0YWQ3ODA2NjU3MjFhNTEzMDZhNjQ2ZjdmNjAxYzM1OWJhNGM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-12-12T20:31:05Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-05T14:29:57Z"}, "message": "ada: Fix incorrect warning about unreferenced packed arrays\n\nThis patch fixes a bug in which a reference to a renaming of a\ncomponent of a packed array was not counted as a reference,\nand thus caused incorrect warnings about unreferenced objects.\n\ngcc/ada/\n\n\t* sem_ch5.adb (Analyze_Assignment): Fix the bug by checking\n\tOriginal_Node. The renaming might be elsewhere, but the (original)\n\treference is right here.\n\t* errout.adb: Remove pragma Unreferenced which was added because\n\tof the above bug.\n\t* einfo.ads: Misc cleanup.\n\t* lib.adb: Likewise.\n\t* lib.ads: Likewise.", "tree": {"sha": "a4ea9c820d81bf9b1120dff93fc44d1655cd6d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ea9c820d81bf9b1120dff93fc44d1655cd6d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46924ad780665721a51306a646f7f601c359ba4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46924ad780665721a51306a646f7f601c359ba4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46924ad780665721a51306a646f7f601c359ba4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46924ad780665721a51306a646f7f601c359ba4c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24888388bab339cf8a8726ca67a0b4947a2d9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24888388bab339cf8a8726ca67a0b4947a2d9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24888388bab339cf8a8726ca67a0b4947a2d9ce"}], "stats": {"total": 126, "additions": 41, "deletions": 85}, "files": [{"sha": "94022e7c6356a563500122f1df13991903d30b5b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=46924ad780665721a51306a646f7f601c359ba4c", "patch": "@@ -1865,7 +1865,7 @@ package Einfo is\n --    Has_Per_Object_Constraint\n --       Defined in E_Component entities. Set if the subtype of the component\n --       has a per object constraint. Per object constraints result from the\n---       following situations :\n+--       following situations:\n --\n --       1. N_Attribute_Reference - when the prefix is the enclosing type and\n --          the attribute is Access.\n@@ -4136,14 +4136,14 @@ package Einfo is\n --       set instead, or a similar appearance as an out parameter actual, in\n --       which case Referenced_As_Out_Parameter is set.\n \n---    Referenced_As_LHS :\n+--    Referenced_As_LHS\n --       Defined in all entities. This flag is set instead of Referenced if a\n --       simple variable that is not a renaming appears as the left side of an\n --       assignment. The reason we distinguish this kind of reference is that\n --       we have a separate warning for variables that are only assigned and\n --       never read.\n \n---    Referenced_As_Out_Parameter :\n+--    Referenced_As_Out_Parameter\n --       Defined in all entities. This flag is set instead of Referenced if a\n --       simple variable that is not a renaming appears as an actual for an out\n --       formal. The reason we distinguish this kind of reference is that"}, {"sha": "151096607c60801bd394bb22cc2235d5ea59101a", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=46924ad780665721a51306a646f7f601c359ba4c", "patch": "@@ -53,7 +53,7 @@ with Stand;          use Stand;\n with Stylesw;        use Stylesw;\n with System.OS_Lib;\n with Uname;          use Uname;\n-with Warnsw; pragma Unreferenced (Warnsw); -- disable spurious warning\n+with Warnsw;\n \n package body Errout is\n "}, {"sha": "68ae46a3584ec0c63ced9bd8be3a1994052e6794", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 25, "deletions": 71, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=46924ad780665721a51306a646f7f601c359ba4c", "patch": "@@ -320,15 +320,13 @@ package body Lib is\n    begin\n       if S1 = No_Location or else S2 = No_Location then\n          return No;\n+      end if;\n \n-      elsif S1 = Standard_Location then\n-         if S2 = Standard_Location then\n-            return Yes_Same;\n-         else\n-            return No;\n-         end if;\n+      if S1 = S2 then\n+         return Yes_Same;\n+      end if;\n \n-      elsif S2 = Standard_Location then\n+      if S1 = Standard_Location or else S2 = Standard_Location then\n          return No;\n       end if;\n \n@@ -841,53 +839,36 @@ package body Lib is\n      (N : Node_Or_Entity_Id) return Boolean\n    is\n    begin\n-      if Sloc (N) = Standard_Location then\n-         return False;\n-\n-      elsif Sloc (N) = No_Location then\n-         return False;\n-\n       --  Special case Itypes to test the Sloc of the associated node. The\n       --  reason we do this is for possible calls from gigi after -gnatD\n       --  processing is complete in sprint. This processing updates the\n       --  sloc fields of all nodes in the tree, but itypes are not in the\n       --  tree so their slocs do not get updated.\n \n-      elsif Nkind (N) = N_Defining_Identifier\n-        and then Is_Itype (N)\n-      then\n+      if Nkind (N) = N_Defining_Identifier and then Is_Itype (N) then\n          return In_Extended_Main_Code_Unit (Associated_Node_For_Itype (N));\n-\n-      --  Otherwise see if we are in the main unit\n-\n-      elsif Get_Code_Unit (Sloc (N)) = Get_Code_Unit (Cunit (Main_Unit)) then\n-         return True;\n-\n-      --  Node may be in spec (or subunit etc) of main unit\n-\n-      else\n-         return In_Same_Extended_Unit (N, Cunit (Main_Unit));\n       end if;\n+\n+      return In_Extended_Main_Code_Unit (Sloc (N));\n    end In_Extended_Main_Code_Unit;\n \n    function In_Extended_Main_Code_Unit (Loc : Source_Ptr) return Boolean is\n    begin\n-      if Loc = Standard_Location then\n-         return False;\n+      --  Special value cases\n \n-      elsif Loc = No_Location then\n+      if Loc in No_Location | Standard_Location then\n          return False;\n+      end if;\n \n       --  Otherwise see if we are in the main unit\n \n-      elsif Get_Code_Unit (Loc) = Get_Code_Unit (Cunit (Main_Unit)) then\n+      if Get_Code_Unit (Loc) = Get_Code_Unit (Cunit (Main_Unit)) then\n          return True;\n+      end if;\n \n       --  Location may be in spec (or subunit etc) of main unit\n \n-      else\n-         return In_Same_Extended_Unit (Loc, Sloc (Cunit (Main_Unit)));\n-      end if;\n+      return In_Same_Extended_Unit (Loc, Sloc (Cunit (Main_Unit)));\n    end In_Extended_Main_Code_Unit;\n \n    ----------------------------------\n@@ -897,69 +878,42 @@ package body Lib is\n    function In_Extended_Main_Source_Unit\n      (N : Node_Or_Entity_Id) return Boolean\n    is\n-      Nloc : constant Source_Ptr := Sloc (N);\n-      Mloc : constant Source_Ptr := Sloc (Cunit (Main_Unit));\n-\n    begin\n-      --  If parsing, then use the global flag to indicate result\n-\n-      if Compiler_State = Parsing then\n-         return Parsing_Main_Extended_Source;\n-\n-      --  Special value cases\n-\n-      elsif Nloc = Standard_Location then\n-         return False;\n-\n-      elsif Nloc = No_Location then\n-         return False;\n-\n       --  Special case Itypes to test the Sloc of the associated node. The\n       --  reason we do this is for possible calls from gigi after -gnatD\n       --  processing is complete in sprint. This processing updates the\n       --  sloc fields of all nodes in the tree, but itypes are not in the\n       --  tree so their slocs do not get updated.\n \n-      elsif Nkind (N) = N_Defining_Identifier\n-        and then Is_Itype (N)\n-      then\n+      if Nkind (N) = N_Defining_Identifier and then Is_Itype (N) then\n+         pragma Assert (Compiler_State /= Parsing);\n          return In_Extended_Main_Source_Unit (Associated_Node_For_Itype (N));\n-\n-      --  Otherwise compare original locations to see if in same unit\n-\n-      else\n-         return\n-           In_Same_Extended_Unit\n-             (Original_Location (Nloc), Original_Location (Mloc));\n       end if;\n+\n+      return In_Extended_Main_Source_Unit (Sloc (N));\n    end In_Extended_Main_Source_Unit;\n \n    function In_Extended_Main_Source_Unit\n      (Loc : Source_Ptr) return Boolean\n    is\n-      Mloc : constant Source_Ptr := Sloc (Cunit (Main_Unit));\n-\n    begin\n       --  If parsing, then use the global flag to indicate result\n \n       if Compiler_State = Parsing then\n          return Parsing_Main_Extended_Source;\n+      end if;\n \n       --  Special value cases\n \n-      elsif Loc = Standard_Location then\n-         return False;\n-\n-      elsif Loc = No_Location then\n+      if Loc in No_Location | Standard_Location then\n          return False;\n+      end if;\n \n-      --  Otherwise compare original locations to see if in same unit\n+      --  Otherwise compare original locations\n \n-      else\n-         return\n-           In_Same_Extended_Unit\n-             (Original_Location (Loc), Original_Location (Mloc));\n-      end if;\n+      return In_Same_Extended_Unit\n+        (Original_Location (Loc),\n+         Original_Location (Sloc (Cunit (Main_Unit))));\n    end In_Extended_Main_Source_Unit;\n \n    ----------------------"}, {"sha": "6937eedc9a936c2ae51b74311f3396b0ccd7f3cd", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=46924ad780665721a51306a646f7f601c359ba4c", "patch": "@@ -46,7 +46,7 @@ package Lib is\n    Parsing_Main_Extended_Source : Boolean := False;\n    --  Set True if we are currently parsing a file that is part of the main\n    --  extended source (the main unit, its spec, or one of its subunits). This\n-   --  flag to implement In_Extended_Main_Source_Unit.\n+   --  is used to implement In_Extended_Main_Source_Unit.\n \n    Analysing_Subunit_Of_Main : Boolean := False;\n    --  Set to True when analyzing a subunit of the main source. When True, if\n@@ -616,8 +616,7 @@ package Lib is\n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n    function In_Extended_Main_Code_Unit (Loc : Source_Ptr) return Boolean;\n-   --  Same function as above, but argument is a source pointer rather\n-   --  than a node.\n+   --  Same as above, but for Source_Ptr\n \n    function In_Extended_Main_Source_Unit\n      (N : Node_Or_Entity_Id) return Boolean;\n@@ -631,7 +630,7 @@ package Lib is\n    --  and the parent unit spec if it is separate.\n \n    function In_Extended_Main_Source_Unit (Loc : Source_Ptr) return Boolean;\n-   --  Same function as above, but argument is a source pointer\n+   --  Same as above, but for Source_Ptr\n \n    function ipu (N : Node_Or_Entity_Id) return Boolean;\n    --  Same as In_Predefined_Unit, but renamed so it can assist debugging.\n@@ -646,7 +645,7 @@ package Lib is\n \n    function In_Predefined_Unit (S : Source_Ptr) return Boolean;\n    pragma Inline (In_Predefined_Unit);\n-   --  Same function as above but argument is a source pointer\n+   --  Same as above, but for Source_Ptr\n \n    function In_Internal_Unit (N : Node_Or_Entity_Id) return Boolean;\n    function In_Internal_Unit (S : Source_Ptr) return Boolean;"}, {"sha": "a8834b8f6a048a7e754d17ce7175d6dddbfcf69e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46924ad780665721a51306a646f7f601c359ba4c/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=46924ad780665721a51306a646f7f601c359ba4c", "patch": "@@ -1154,13 +1154,16 @@ package body Sem_Ch5 is\n \n       Record_Elaboration_Scenario (N);\n \n-      --  Set Referenced_As_LHS if appropriate. We only set this flag if the\n-      --  assignment is a source assignment in the extended main source unit.\n-      --  We are not interested in any reference information outside this\n-      --  context, or in compiler generated assignment statements.\n+      --  Set Referenced_As_LHS if appropriate. We are not interested in\n+      --  compiler-generated assignment statements, nor in references outside\n+      --  the extended main source unit. We check whether the Original_Node is\n+      --  in the extended main source unit because in the case of a renaming of\n+      --  a component of a packed array, the Lhs itself has a Sloc from the\n+      --  place of the renaming.\n \n       if Comes_From_Source (N)\n-        and then In_Extended_Main_Source_Unit (Lhs)\n+        and then (In_Extended_Main_Source_Unit (Lhs)\n+          or else In_Extended_Main_Source_Unit (Original_Node (Lhs)))\n       then\n          Set_Referenced_Modified (Lhs, Out_Param => False);\n       end if;"}]}