{"sha": "5751556c9e6dc012ade461c04624ef9c39d1d6cf", "node_id": "C_kwDOANBUbNoAKDU3NTE1NTZjOWU2ZGMwMTJhZGU0NjFjMDQ2MjRlZjljMzlkMWQ2Y2Y", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-17T18:09:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-18T00:15:08Z"}, "message": "gccrs: add new apply_primtiive_type_hint to inference variables\n\nIn the senario where you infer types via unify_site_and but choose to not\ncommit the result you can end up with coercion to infer the result later on\nwhich does not get fully replaced resulting in a stray inference variable\nthat can be left alone as a general inference variable leading to missing\ntype context info. This patch gives support to add type hints to inference\nvariables so they can be defaulted correctly in more complex cases. The\nold system relied on the unification result commiting and overriding the\ninference variables so they dissapear out of the current typeing context.\n\nThis was needed to fix #1981 where it is valid to inject inference\nvariables here. This lead to a regression in a few of the complex generic\ntrait test cases such as execute/torture/traits9.rs which had the wrong\nargument type and defaulted wrongly to i32 instead of isize.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::resolve_literal): fix ctor\n\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): likewise\n\t* typecheck/rust-hir-type-check-type.cc (TypeCheckType::visit): likewise\n\t* typecheck/rust-typecheck-context.cc (TypeCheckContext::push_new_loop_context): likewise\n\t* typecheck/rust-tyty-util.cc (TyVar::get_implicit_infer_var): likewise\n\t* typecheck/rust-tyty.cc (InferType::InferType): new ctor with type hint\n\t(InferType::clone): fix ctor\n\t(InferType::apply_primitive_type_hint): new function to apply possible hint\n\t* typecheck/rust-tyty.h: update prototypes\n\t* typecheck/rust-unify.cc (UnifyRules::expect_inference_variable): apply type hints\n\t(UnifyRules::expect_bool): likewise\n\t(UnifyRules::expect_char): likewise\n\t(UnifyRules::expect_int): likewise\n\t(UnifyRules::expect_uint): likewise\n\t(UnifyRules::expect_float): likewise\n\t(UnifyRules::expect_isize): likewise\n\t(UnifyRules::expect_usize): likewise\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "68a3ff6ed1e155c00ce74be4610144da965d80e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a3ff6ed1e155c00ce74be4610144da965d80e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5751556c9e6dc012ade461c04624ef9c39d1d6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5751556c9e6dc012ade461c04624ef9c39d1d6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5751556c9e6dc012ade461c04624ef9c39d1d6cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5751556c9e6dc012ade461c04624ef9c39d1d6cf/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be27571c110d99fe55324a9c2b6622787b08fb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be27571c110d99fe55324a9c2b6622787b08fb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be27571c110d99fe55324a9c2b6622787b08fb52"}], "stats": {"total": 329, "additions": 293, "deletions": 36}, "files": [{"sha": "9618bb80a9a343bedbea23659370f20cfff9336f", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -165,6 +165,7 @@ TypeCheckBase::resolve_literal (const Analysis::NodeMapping &expr_mappings,\n \t    infered\n \t      = new TyTy::InferType (expr_mappings.get_hirid (),\n \t\t\t\t     TyTy::InferType::InferTypeKind::INTEGRAL,\n+\t\t\t\t     TyTy::InferType::TypeHint::Default (),\n \t\t\t\t     locus);\n \t    break;\n \t  }\n@@ -189,6 +190,7 @@ TypeCheckBase::resolve_literal (const Analysis::NodeMapping &expr_mappings,\n \t    infered\n \t      = new TyTy::InferType (expr_mappings.get_hirid (),\n \t\t\t\t     TyTy::InferType::InferTypeKind::FLOAT,\n+\t\t\t\t     TyTy::InferType::TypeHint::Default (),\n \t\t\t\t     locus);\n \t    break;\n \t  }"}, {"sha": "3456b954bd402a313849f0535ed70bde9cedb100", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -127,11 +127,11 @@ TypeCheckStmt::visit (HIR::LetStmt &stmt)\n       // let x;\n       else\n \t{\n-\t  TypeCheckPattern::Resolve (\n-\t    &stmt_pattern,\n-\t    new TyTy::InferType (\n-\t      stmt_pattern.get_pattern_mappings ().get_hirid (),\n-\t      TyTy::InferType::InferTypeKind::GENERAL, stmt.get_locus ()));\n+\t  auto infer = new TyTy::InferType (\n+\t    stmt_pattern.get_pattern_mappings ().get_hirid (),\n+\t    TyTy::InferType::InferTypeKind::GENERAL,\n+\t    TyTy::InferType::TypeHint::Default (), stmt.get_locus ());\n+\t  TypeCheckPattern::Resolve (&stmt_pattern, infer);\n \t}\n     }\n }"}, {"sha": "eef9b6ca915d55fc1213f55ac16b3601a58558ed", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -635,6 +635,7 @@ TypeCheckType::visit (HIR::InferredType &type)\n {\n   translated = new TyTy::InferType (type.get_mappings ().get_hirid (),\n \t\t\t\t    TyTy::InferType::InferTypeKind::GENERAL,\n+\t\t\t\t    TyTy::InferType::TypeHint::Default (),\n \t\t\t\t    type.get_locus ());\n }\n "}, {"sha": "8bca751e7881894f6f6b80d0d0c74584bc394f93", "filename": "gcc/rust/typecheck/rust-typecheck-context.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -184,7 +184,8 @@ void\n TypeCheckContext::push_new_loop_context (HirId id, Location locus)\n {\n   TyTy::BaseType *infer_var\n-    = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL, locus);\n+    = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL,\n+\t\t\t   TyTy::InferType::TypeHint::Default (), locus);\n   loop_type_stack.push_back (infer_var);\n }\n "}, {"sha": "5eb399c86d15e155df39d51791e4f313ac5d79e1", "filename": "gcc/rust/typecheck/rust-tyty-util.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -48,7 +48,8 @@ TyVar::get_implicit_infer_var (Location locus)\n   auto context = Resolver::TypeCheckContext::get ();\n \n   InferType *infer = new InferType (mappings->get_next_hir_id (),\n-\t\t\t\t    InferType::InferTypeKind::GENERAL, locus);\n+\t\t\t\t    InferType::InferTypeKind::GENERAL,\n+\t\t\t\t    InferType::TypeHint::Default (), locus);\n   context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n \t\t\t\t\t       UNKNOWN_NODEID,\n \t\t\t\t\t       infer->get_ref (),"}, {"sha": "51d35f600e192c08148c38fd13a112f9f67a22e7", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 210, "deletions": 17, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -935,18 +935,18 @@ BaseType::needs_generic_substitutions () const\n \n // InferType\n \n-InferType::InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n-\t\t      std::set<HirId> refs)\n+InferType::InferType (HirId ref, InferTypeKind infer_kind, TypeHint hint,\n+\t\t      Location locus, std::set<HirId> refs)\n   : BaseType (ref, ref, TypeKind::INFER,\n \t      {Resolver::CanonicalPath::create_empty (), locus}, refs),\n-    infer_kind (infer_kind)\n+    infer_kind (infer_kind), default_hint (hint)\n {}\n \n InferType::InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind,\n-\t\t      Location locus, std::set<HirId> refs)\n+\t\t      TypeHint hint, Location locus, std::set<HirId> refs)\n   : BaseType (ref, ty_ref, TypeKind::INFER,\n \t      {Resolver::CanonicalPath::create_empty (), locus}, refs),\n-    infer_kind (infer_kind)\n+    infer_kind (infer_kind), default_hint (hint)\n {}\n \n InferType::InferTypeKind\n@@ -1012,7 +1012,7 @@ InferType::clone () const\n \n   InferType *clone\n     = new InferType (mappings->get_next_hir_id (), get_infer_kind (),\n-\t\t     get_ident ().locus, get_combined_refs ());\n+\t\t     default_hint, get_ident ().locus, get_combined_refs ());\n \n   context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n \t\t\t\t\t       UNKNOWN_NODEID,\n@@ -1033,24 +1033,217 @@ InferType::default_type (BaseType **type) const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n   bool ok = false;\n-  switch (infer_kind)\n+\n+  if (default_hint.kind == TypeKind::ERROR)\n     {\n-    case GENERAL:\n+      switch (infer_kind)\n+\t{\n+\tcase GENERAL:\n+\t  return false;\n+\n+\t  case INTEGRAL: {\n+\t    ok = context->lookup_builtin (\"i32\", type);\n+\t    rust_assert (ok);\n+\t    return ok;\n+\t  }\n+\n+\t  case FLOAT: {\n+\t    ok = context->lookup_builtin (\"f64\", type);\n+\t    rust_assert (ok);\n+\t    return ok;\n+\t  }\n+\t}\n+      return false;\n+    }\n+\n+  switch (default_hint.kind)\n+    {\n+    case ISIZE:\n+      ok = context->lookup_builtin (\"isize\", type);\n+      rust_assert (ok);\n+      return ok;\n+\n+    case USIZE:\n+      ok = context->lookup_builtin (\"usize\", type);\n+      rust_assert (ok);\n+      return ok;\n+\n+    case INT:\n+      switch (default_hint.szhint)\n+\t{\n+\tcase TypeHint::SizeHint::S8:\n+\t  ok = context->lookup_builtin (\"i8\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S16:\n+\t  ok = context->lookup_builtin (\"i16\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S32:\n+\t  ok = context->lookup_builtin (\"i32\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S64:\n+\t  ok = context->lookup_builtin (\"i64\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S128:\n+\t  ok = context->lookup_builtin (\"i128\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    case UINT:\n+      switch (default_hint.szhint)\n+\t{\n+\tcase TypeHint::SizeHint::S8:\n+\t  ok = context->lookup_builtin (\"u8\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S16:\n+\t  ok = context->lookup_builtin (\"u16\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S32:\n+\t  ok = context->lookup_builtin (\"u32\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S64:\n+\t  ok = context->lookup_builtin (\"u64\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S128:\n+\t  ok = context->lookup_builtin (\"u128\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    case TypeKind::FLOAT:\n+      switch (default_hint.szhint)\n+\t{\n+\tcase TypeHint::SizeHint::S32:\n+\t  ok = context->lookup_builtin (\"f32\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tcase TypeHint::SizeHint::S64:\n+\t  ok = context->lookup_builtin (\"f64\", type);\n+\t  rust_assert (ok);\n+\t  return ok;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    default:\n       return false;\n+    }\n \n-      case INTEGRAL: {\n-\tok = context->lookup_builtin (\"i32\", type);\n-\trust_assert (ok);\n-\treturn ok;\n+  return false;\n+}\n+\n+void\n+InferType::apply_primitive_type_hint (const BaseType &hint)\n+{\n+  switch (hint.get_kind ())\n+    {\n+    case ISIZE:\n+    case USIZE:\n+      infer_kind = INTEGRAL;\n+      default_hint.kind = hint.get_kind ();\n+      break;\n+\n+      case INT: {\n+\tinfer_kind = INTEGRAL;\n+\tconst IntType &i = static_cast<const IntType &> (hint);\n+\tdefault_hint.kind = hint.get_kind ();\n+\tdefault_hint.shint = TypeHint::SignedHint::SIGNED;\n+\tswitch (i.get_int_kind ())\n+\t  {\n+\t  case IntType::I8:\n+\t    default_hint.szhint = TypeHint::SizeHint::S8;\n+\t    break;\n+\t  case IntType::I16:\n+\t    default_hint.szhint = TypeHint::SizeHint::S16;\n+\t    break;\n+\t  case IntType::I32:\n+\t    default_hint.szhint = TypeHint::SizeHint::S32;\n+\t    break;\n+\t  case IntType::I64:\n+\t    default_hint.szhint = TypeHint::SizeHint::S64;\n+\t    break;\n+\t  case IntType::I128:\n+\t    default_hint.szhint = TypeHint::SizeHint::S128;\n+\t    break;\n+\t  }\n+      }\n+      break;\n+\n+      case UINT: {\n+\tinfer_kind = INTEGRAL;\n+\tconst UintType &i = static_cast<const UintType &> (hint);\n+\tdefault_hint.kind = hint.get_kind ();\n+\tdefault_hint.shint = TypeHint::SignedHint::UNSIGNED;\n+\tswitch (i.get_uint_kind ())\n+\t  {\n+\t  case UintType::U8:\n+\t    default_hint.szhint = TypeHint::SizeHint::S8;\n+\t    break;\n+\t  case UintType::U16:\n+\t    default_hint.szhint = TypeHint::SizeHint::S16;\n+\t    break;\n+\t  case UintType::U32:\n+\t    default_hint.szhint = TypeHint::SizeHint::S32;\n+\t    break;\n+\t  case UintType::U64:\n+\t    default_hint.szhint = TypeHint::SizeHint::S64;\n+\t    break;\n+\t  case UintType::U128:\n+\t    default_hint.szhint = TypeHint::SizeHint::S128;\n+\t    break;\n+\t  }\n       }\n+      break;\n+\n+      case TypeKind::FLOAT: {\n+\tinfer_kind = FLOAT;\n+\tdefault_hint.shint = TypeHint::SignedHint::SIGNED;\n+\tdefault_hint.kind = hint.get_kind ();\n+\tconst FloatType &i = static_cast<const FloatType &> (hint);\n+\tswitch (i.get_float_kind ())\n+\t  {\n+\t  case FloatType::F32:\n+\t    default_hint.szhint = TypeHint::SizeHint::S32;\n+\t    break;\n \n-      case FLOAT: {\n-\tok = context->lookup_builtin (\"f64\", type);\n-\trust_assert (ok);\n-\treturn ok;\n+\t  case FloatType::F64:\n+\t    default_hint.szhint = TypeHint::SizeHint::S64;\n+\t    break;\n+\t  }\n       }\n+      break;\n+\n+    default:\n+      // TODO bool, char, never??\n+      break;\n     }\n-  return false;\n }\n \n // ErrorType"}, {"sha": "ffd7e3e539283ed439b2fdde6881348cb6678f29", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -188,12 +188,41 @@ class InferType : public BaseType\n     FLOAT\n   };\n \n-  InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n-\t     std::set<HirId> refs = std::set<HirId> ());\n+  struct TypeHint\n+  {\n+    enum SignedHint\n+    {\n+      SIGNED,\n+      UNSIGNED,\n+\n+      UNKNOWN\n+    };\n+    enum SizeHint\n+    {\n+      S8,\n+      S16,\n+      S32,\n+      S64,\n+      S128,\n+      SUNKNOWN\n+    };\n+\n+    TyTy::TypeKind kind;\n+    SignedHint shint;\n+    SizeHint szhint;\n+\n+    static TypeHint Default ()\n+    {\n+      return TypeHint{TypeKind::ERROR, UNKNOWN, SUNKNOWN};\n+    }\n+  };\n \n-  InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind, Location locus,\n+  InferType (HirId ref, InferTypeKind infer_kind, TypeHint hint, Location locus,\n \t     std::set<HirId> refs = std::set<HirId> ());\n \n+  InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind, TypeHint hint,\n+\t     Location locus, std::set<HirId> refs = std::set<HirId> ());\n+\n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n \n@@ -209,8 +238,11 @@ class InferType : public BaseType\n \n   bool default_type (BaseType **type) const;\n \n+  void apply_primitive_type_hint (const TyTy::BaseType &hint);\n+\n private:\n   InferTypeKind infer_kind;\n+  TypeHint default_hint;\n };\n \n class ErrorType : public BaseType"}, {"sha": "4b13d87525ce302fb3ee7a6b5ff3255220a70a1d", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5751556c9e6dc012ade461c04624ef9c39d1d6cf/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=5751556c9e6dc012ade461c04624ef9c39d1d6cf", "patch": "@@ -334,7 +334,10 @@ UnifyRules::expect_inference_variable (TyTy::InferType *ltype,\n \t\t\t|| (ltype->get_infer_kind ()\n \t\t\t    == TyTy::InferType::InferTypeKind::INTEGRAL);\n \tif (is_valid)\n-\t  return rtype->clone ();\n+\t  {\n+\t    ltype->apply_primitive_type_hint (*rtype);\n+\t    return rtype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -344,7 +347,10 @@ UnifyRules::expect_inference_variable (TyTy::InferType *ltype,\n \t\t\t|| (ltype->get_infer_kind ()\n \t\t\t    == TyTy::InferType::InferTypeKind::FLOAT);\n \tif (is_valid)\n-\t  return rtype->clone ();\n+\t  {\n+\t    ltype->apply_primitive_type_hint (*rtype);\n+\t    return rtype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1133,7 +1139,10 @@ UnifyRules::expect_bool (TyTy::BoolType *ltype, TyTy::BaseType *rtype)\n \tbool is_valid\n \t  = r->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1177,7 +1186,10 @@ UnifyRules::expect_char (TyTy::CharType *ltype, TyTy::BaseType *rtype)\n \tbool is_valid\n \t  = r->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1222,7 +1234,10 @@ UnifyRules::expect_int (TyTy::IntType *ltype, TyTy::BaseType *rtype)\n \t  = r->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL\n \t    || r->get_infer_kind () == TyTy::InferType::InferTypeKind::INTEGRAL;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1273,7 +1288,10 @@ UnifyRules::expect_uint (TyTy::UintType *ltype, TyTy::BaseType *rtype)\n \t  = r->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL\n \t    || r->get_infer_kind () == TyTy::InferType::InferTypeKind::INTEGRAL;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1324,7 +1342,10 @@ UnifyRules::expect_float (TyTy::FloatType *ltype, TyTy::BaseType *rtype)\n \t  = r->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL\n \t    || r->get_infer_kind () == TyTy::InferType::InferTypeKind::FLOAT;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1374,7 +1395,10 @@ UnifyRules::expect_isize (TyTy::ISizeType *ltype, TyTy::BaseType *rtype)\n \tbool is_valid\n \t  = r->get_infer_kind () != TyTy::InferType::InferTypeKind::FLOAT;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n \n@@ -1418,7 +1442,10 @@ UnifyRules::expect_usize (TyTy::USizeType *ltype, TyTy::BaseType *rtype)\n \tbool is_valid\n \t  = r->get_infer_kind () != TyTy::InferType::InferTypeKind::FLOAT;\n \tif (is_valid)\n-\t  return ltype->clone ();\n+\t  {\n+\t    r->apply_primitive_type_hint (*ltype);\n+\t    return ltype->clone ();\n+\t  }\n       }\n       break;\n "}]}