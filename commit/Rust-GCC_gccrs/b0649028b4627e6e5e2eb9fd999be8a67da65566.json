{"sha": "b0649028b4627e6e5e2eb9fd999be8a67da65566", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2NDkwMjhiNDYyN2U2ZTVlMmViOWZkOTk5YmU4YTY3ZGE2NTU2Ng==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2003-03-11T07:07:25Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-03-11T07:07:25Z"}, "message": "ctype_inline.h: Support _M_table when so installed.\n\n\t* config/os/bsd/freebsd/ctype_inline.h:  Support _M_table\n\twhen so installed.\n\t* testsuite/22_locale/ctype/cons/char/1.cc: Fix typo.\n\nFrom-SVN: r64163", "tree": {"sha": "a0727aa953187193ceff6df4027bee0b2f1ff9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0727aa953187193ceff6df4027bee0b2f1ff9ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0649028b4627e6e5e2eb9fd999be8a67da65566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0649028b4627e6e5e2eb9fd999be8a67da65566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0649028b4627e6e5e2eb9fd999be8a67da65566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0649028b4627e6e5e2eb9fd999be8a67da65566/comments", "author": null, "committer": null, "parents": [{"sha": "cb60f38d5b06fd610dbf5216d8751f8db0274edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb60f38d5b06fd610dbf5216d8751f8db0274edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb60f38d5b06fd610dbf5216d8751f8db0274edd"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "f66c6e40d8847b1941dc61ac92cc9042be541165", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0649028b4627e6e5e2eb9fd999be8a67da65566", "patch": "@@ -1,5 +1,9 @@\n 2003-03-11  Loren J. Rittle  <ljrittle@acm.org>\n \n+\t* config/os/bsd/freebsd/ctype_inline.h:  Support _M_table\n+\twhen so installed.\n+\t* testsuite/22_locale/ctype/cons/char/1.cc: Fix typo.\n+\n \t* testsuite/testsuite_hooks.h (run_tests_wrapped_env): Do not\n \treport lack of setenv().\n "}, {"sha": "d69324ad572039e96c538d0b8a11580f0d6626a2", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_inline.h", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h?ref=b0649028b4627e6e5e2eb9fd999be8a67da65566", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,57 +38,69 @@\n   ctype<char>::\n   is(mask __m, char __c) const\n   { \n-    return __istype(__c, __m);\n+    if (_M_table)\n+      return _M_table[static_cast<unsigned char>(__c)] & __m;\n+    else\n+      return __istype(__c, __m);\n   }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n+    if (_M_table)\n+      while (__low < __high)\n+\t*__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    else\n+      for (;__low < __high; ++__vec, ++__low)\n+\t{\n #if defined (_CTYPE_S) || defined (__istype)\n-\t*__vec = __maskrune (*__low, upper | lower | alpha | digit | xdigit\n-\t\t\t     | space | print | graph | cntrl | punct | alnum);\n+\t  *__vec = __maskrune (*__low, upper | lower | alpha | digit | xdigit\n+\t\t\t       | space | print | graph | cntrl | punct | alnum);\n #else\n-\tmask __m = 0;\n-\tif (this->is(upper, *__low)) __m |= upper;\n-\tif (this->is(lower, *__low)) __m |= lower;\n-\tif (this->is(alpha, *__low)) __m |= alpha;\n-\tif (this->is(digit, *__low)) __m |= digit;\n-\tif (this->is(xdigit, *__low)) __m |= xdigit;\n-\tif (this->is(space, *__low)) __m |= space;\n-\tif (this->is(print, *__low)) __m |= print;\n-\tif (this->is(graph, *__low)) __m |= graph;\n-\tif (this->is(cntrl, *__low)) __m |= cntrl;\n-\tif (this->is(punct, *__low)) __m |= punct;\n-\t// Do not include explicit line for alnum mask since it is a\n-\t// pure composite of masks on FreeBSD.\n-\t*__vec = __m;\n+\t  mask __m = 0;\n+\t  if (this->is(upper, *__low)) __m |= upper;\n+\t  if (this->is(lower, *__low)) __m |= lower;\n+\t  if (this->is(alpha, *__low)) __m |= alpha;\n+\t  if (this->is(digit, *__low)) __m |= digit;\n+\t  if (this->is(xdigit, *__low)) __m |= xdigit;\n+\t  if (this->is(space, *__low)) __m |= space;\n+\t  if (this->is(print, *__low)) __m |= print;\n+\t  if (this->is(graph, *__low)) __m |= graph;\n+\t  if (this->is(cntrl, *__low)) __m |= cntrl;\n+\t  if (this->is(punct, *__low)) __m |= punct;\n+\t  // Do not include explicit line for alnum mask since it is a\n+\t  // pure composite of masks on FreeBSD.\n+\t  *__vec = __m;\n #endif\n-      }\n+\t}\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !this->is(__m, *__low))\n-      ++__low;\n+    if (_M_table)\n+      while (__low < __high\n+\t     && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+\t++__low;\n+    else\n+      while (__low < __high && !this->is(__m, *__low))\n+\t++__low;\n     return __low;\n   }\n \n   const char*\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && this->is(__m, *__low) != 0)\n-      ++__low;\n+    if (_M_table)\n+      while (__low < __high\n+\t     && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+\t++__low;\n+    else\n+      while (__low < __high && this->is(__m, *__low) != 0)\n+\t++__low;\n     return __low;\n   }\n-\n-\n-\n-\n-"}, {"sha": "5ad3877cfd8c227261b8636ac5252d5192107651", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0649028b4627e6e5e2eb9fd999be8a67da65566/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc?ref=b0649028b4627e6e5e2eb9fd999be8a67da65566", "patch": "@@ -57,7 +57,7 @@ void test01()\n \n   comma_ctype obj2(tmp);\n   const ctype_base::mask* ctable = obj2.get_table();\n-  VERIFY ( tmp = ctable );\n+  VERIFY ( tmp == ctable );\n }\n \n int main() "}]}