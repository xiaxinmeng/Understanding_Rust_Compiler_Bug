{"sha": "21f657a48fe0d110f3d35646657090cd77d0f76a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmNjU3YTQ4ZmUwZDExMGYzZDM1NjQ2NjU3MDkwY2Q3N2QwZjc2YQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-01-24T16:06:34Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-01-24T16:06:34Z"}, "message": "Mitigation for PR target/88469 on arm-based systems bootstrapping with gcc-6/7/8\n\nThis patch, for gcc 8/9 is a mitigation patch for PR target/88469\nwhere gcc-6/7/8 miscompile a structure whose alignment is dominated by\na 64-bit bitfield member.  Since the PCS rules for such a type must\nignore any overalignment of the base type we cannot address this by\nsimply adding a larger alignment to the class.  We can, however, force\nthe alignment of the bit-field itself and GCC will handle that as\ndesired.\n\n\tPR target/88469\n\t* profile-count.h (profile_count): On ARM systems using GCC 6/7/8\n\tforce the alignment of m_val.\n\nFrom-SVN: r268240", "tree": {"sha": "dfeb8cb4562d124b0e15d2b56ceeb02d1c659638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfeb8cb4562d124b0e15d2b56ceeb02d1c659638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21f657a48fe0d110f3d35646657090cd77d0f76a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f657a48fe0d110f3d35646657090cd77d0f76a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f657a48fe0d110f3d35646657090cd77d0f76a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f657a48fe0d110f3d35646657090cd77d0f76a/comments", "author": null, "committer": null, "parents": [{"sha": "e658669fe18d27bbde85085d648f0392f3f9bce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e658669fe18d27bbde85085d648f0392f3f9bce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e658669fe18d27bbde85085d648f0392f3f9bce6"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "ca6dfe6657795315244664ed359eccb9fc4e267c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f657a48fe0d110f3d35646657090cd77d0f76a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f657a48fe0d110f3d35646657090cd77d0f76a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21f657a48fe0d110f3d35646657090cd77d0f76a", "patch": "@@ -1,3 +1,9 @@\n+2019-01-24  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/88469\n+\t* profile-count.h (profile_count): On ARM systems using GCC 6/7/8\n+\tforce the alignment of m_val.\n+\n 2019-01-24  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/87187"}, {"sha": "d6de61f0a61816be3b61c65372feacd67f671d63", "filename": "gcc/profile-count.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f657a48fe0d110f3d35646657090cd77d0f76a/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f657a48fe0d110f3d35646657090cd77d0f76a/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=21f657a48fe0d110f3d35646657090cd77d0f76a", "patch": "@@ -649,7 +649,17 @@ class GTY(()) profile_count\n private:\n   static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;\n \n-  uint64_t m_val : n_bits;\n+#if defined (__arm__) && (__GNUC__ >= 6 && __GNUC__ <= 8)\n+  /* Work-around for PR88469.  A bug in the gcc-6/7/8 PCS layout code\n+     incorrectly detects the alignment of a structure where the only\n+     64-bit aligned object is a bit-field.  We force the alignment of\n+     the entire field to mitigate this.  */\n+#define UINT64_BIT_FIELD_ALIGN __attribute__ ((aligned(8)))\n+#else\n+#define UINT64_BIT_FIELD_ALIGN\n+#endif\n+  uint64_t UINT64_BIT_FIELD_ALIGN m_val : n_bits;\n+#undef UINT64_BIT_FIELD_ALIGN\n   enum profile_quality m_quality : 3;\n \n   /* Return true if both values can meaningfully appear in single function"}]}