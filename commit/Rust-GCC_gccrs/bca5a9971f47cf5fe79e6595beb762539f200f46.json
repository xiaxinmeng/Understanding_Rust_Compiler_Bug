{"sha": "bca5a9971f47cf5fe79e6595beb762539f200f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNWE5OTcxZjQ3Y2Y1ZmU3OWU2NTk1YmViNzYyNTM5ZjIwMGY0Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:02:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:02:47Z"}, "message": "[AArch64] Add support for SVE CLS and CLZ\n\nThis patch adds support for unpredicated SVE CLS and CLZ.  A later patch\nwill add support for predicated unary integer arithmetic.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_INT_UNARY): Add clrsb and clz.\n\t(optab, sve_int_op): Handle them.\n\t* config/aarch64/aarch64-sve.md: Expand comment.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-clz.c: Force SVE off.\n\t* gcc.target/aarch64/sve/clrsb_1.c: New test.\n\t* gcc.target/aarch64/sve/clrsb_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/clz_1.c: Likewise.\n\t* gcc.target/aarch64/sve/clz_1_run.c: Likewise.\n\nFrom-SVN: r274437", "tree": {"sha": "37297284d9c4420e434605cce6746d9d597990b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37297284d9c4420e434605cce6746d9d597990b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca5a9971f47cf5fe79e6595beb762539f200f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca5a9971f47cf5fe79e6595beb762539f200f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca5a9971f47cf5fe79e6595beb762539f200f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca5a9971f47cf5fe79e6595beb762539f200f46/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a229966c9c76afe0cf18c566a3c13ddde3878288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a229966c9c76afe0cf18c566a3c13ddde3878288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a229966c9c76afe0cf18c566a3c13ddde3878288"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "b5b4414911c4bca8c8bb2ce1511f86b0af4e2d47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_INT_UNARY): Add clrsb and clz.\n+\t(optab, sve_int_op): Handle them.\n+\t* config/aarch64/aarch64-sve.md: Expand comment.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/predicates.md (const_1_to_3_operand): New predicate."}, {"sha": "7e696d8c72317c53c660d3ba1c940d625e2a1a69", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -1422,6 +1422,8 @@\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - ABS\n+;; - CLS (= clrsb)\n+;; - CLZ\n ;; - CNT (= popcount)\n ;; - NEG\n ;; - NOT"}, {"sha": "bc5b96a29d45191de4077a93edca595dd121e605", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -1276,7 +1276,7 @@\n (define_code_iterator FAC_COMPARISONS [lt le ge gt])\n \n ;; SVE integer unary operations.\n-(define_code_iterator SVE_INT_UNARY [abs neg not popcount])\n+(define_code_iterator SVE_INT_UNARY [abs neg not clrsb clz popcount])\n \n ;; SVE integer binary operations.\n (define_code_iterator SVE_INT_BINARY [plus minus mult smax umax smin umin\n@@ -1307,6 +1307,8 @@\n \t\t\t (unsigned_fix \"fixuns\")\n \t\t\t (float \"float\")\n \t\t\t (unsigned_float \"floatuns\")\n+\t\t\t (clrsb \"clrsb\")\n+\t\t\t (clz \"clz\")\n \t\t\t (popcount \"popcount\")\n \t\t\t (and \"and\")\n \t\t\t (ior \"ior\")\n@@ -1474,6 +1476,8 @@\n \t\t\t      (ior \"orr\")\n \t\t\t      (xor \"eor\")\n \t\t\t      (not \"not\")\n+\t\t\t      (clrsb \"cls\")\n+\t\t\t      (clz \"clz\")\n \t\t\t      (popcount \"cnt\")])\n \n (define_code_attr sve_int_op_rev [(plus \"add\")"}, {"sha": "1a2d800361ab21115695774ff48fc824713e1cb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -1,3 +1,11 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vect-clz.c: Force SVE off.\n+\t* gcc.target/aarch64/sve/clrsb_1.c: New test.\n+\t* gcc.target/aarch64/sve/clrsb_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/clz_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/clz_1_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/adr_1.c: New test."}, {"sha": "bdc9856faafada6cc6f87ac060036968c23bbc81", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clrsb_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1.c?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+clrsb_32 (unsigned int *restrict dst, uint32_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_clrsb (src[i]);\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+clrsb_64 (unsigned int *restrict dst, uint64_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_clrsbll (src[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tcls\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcls\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "287630d7f48684c2bfec1cbcc2b3577c6a8c2184", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clrsb_1_run.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclrsb_1_run.c?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"clrsb_1.c\"\n+\n+extern void abort (void) __attribute__ ((noreturn));\n+\n+unsigned int data[] = {\n+  0xffffff80, 24,\n+  0xffffffff, 31,\n+  0x00000000, 31,\n+  0x80000000, 0,\n+  0x7fffffff, 0,\n+  0x000003ff, 21,\n+  0x1fffffff, 2,\n+  0x0000ffff, 15,\n+  0xffff0000, 15\n+};\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  unsigned int count = sizeof (data) / sizeof (data[0]) / 2;\n+\n+  uint32_t in32[count];\n+  unsigned int out32[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in32[i] = data[i * 2];\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  clrsb_32 (out32, in32, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out32[i] != data[i * 2 + 1])\n+      abort ();\n+\n+  uint64_t in64[count];\n+  unsigned int out64[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in64[i] = (uint64_t) data[i * 2] << 32;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  clrsb_64 (out64, in64, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out64[i] != (data[i * 2] ? data[i * 2 + 1] : 63))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "0c7a4e6d7688dd49ced5476482c8ea6e215bc768", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clz_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1.c?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+clz_32 (unsigned int *restrict dst, uint32_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_clz (src[i]);\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+clz_64 (unsigned int *restrict dst, uint64_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_clzll (src[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tclz\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tclz\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "12d9cf276762b76d0a28900241e357a436b94d37", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clz_1_run.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclz_1_run.c?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"clz_1.c\"\n+\n+extern void abort (void) __attribute__ ((noreturn));\n+\n+unsigned int data[] = {\n+  0xffffff80, 0,\n+  0xffffffff, 0,\n+  0x00000000, 32,\n+  0x80000000, 0,\n+  0x7fffffff, 1,\n+  0x000003ff, 22,\n+  0x1fffffff, 3,\n+  0x0000ffff, 16,\n+  0xffff0000, 0\n+};\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  unsigned int count = sizeof (data) / sizeof (data[0]) / 2;\n+\n+  uint32_t in32[count];\n+  unsigned int out32[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in32[i] = data[i * 2];\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  clz_32 (out32, in32, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out32[i] != data[i * 2 + 1])\n+      abort ();\n+\n+  uint64_t in64[count];\n+  unsigned int out64[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in64[i] = (uint64_t) data[i * 2] << 10;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  clz_64 (out64, in64, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out64[i] != (data[i * 2] ? data[i * 2 + 1] + 22 : 64))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "cd181c3461df06ad7f2d686769d96a0a5fd2e796", "filename": "gcc/testsuite/gcc.target/aarch64/vect-clz.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-clz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca5a9971f47cf5fe79e6595beb762539f200f46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-clz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-clz.c?ref=bca5a9971f47cf5fe79e6595beb762539f200f46", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -save-temps -fno-inline -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n extern void abort ();\n \n void"}]}