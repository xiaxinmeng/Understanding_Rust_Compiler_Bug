{"sha": "6920d5a1a2834e9c62d441b8f4c6186b01107d13", "node_id": "C_kwDOANBUbNoAKDY5MjBkNWExYTI4MzRlOWM2MmQ0NDFiOGY0YzYxODZiMDExMDdkMTM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-19T13:16:01Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-19T13:16:01Z"}, "message": "Fortran: Fix \"str\" to scalar descriptor conversion [PR92482]\n\n\tPR fortran/92482\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.c (gfc_conv_procedure_call): Use TREE_OPERAND not\n\tbuild_fold_indirect_ref_loc to undo an ADDR_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/bind-c-char-descr.f90: Remove xfail; extend a bit.", "tree": {"sha": "bda31ae2b56a9fa2b92e111596c2380eeee54c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda31ae2b56a9fa2b92e111596c2380eeee54c35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6920d5a1a2834e9c62d441b8f4c6186b01107d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6920d5a1a2834e9c62d441b8f4c6186b01107d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6920d5a1a2834e9c62d441b8f4c6186b01107d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6920d5a1a2834e9c62d441b8f4c6186b01107d13/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ef92e79f9f1c4275a9e19652439089a310627d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ef92e79f9f1c4275a9e19652439089a310627d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ef92e79f9f1c4275a9e19652439089a310627d"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "29697e69e75b7a28cc779861fdb55e177dadfd0d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6920d5a1a2834e9c62d441b8f4c6186b01107d13/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6920d5a1a2834e9c62d441b8f4c6186b01107d13/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6920d5a1a2834e9c62d441b8f4c6186b01107d13", "patch": "@@ -6640,7 +6640,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t    {\n \t\t      tmp = parmse.expr;\n \t\t      if (TREE_CODE (tmp) == ADDR_EXPR)\n-\t\t\ttmp = build_fold_indirect_ref_loc (input_location, tmp);\n+\t\t\ttmp = TREE_OPERAND (tmp, 0);\n \t\t      parmse.expr = gfc_conv_scalar_to_descriptor (&parmse, tmp,\n \t\t\t\t\t\t\t\t   fsym->attr);\n \t\t      parmse.expr = gfc_build_addr_expr (NULL_TREE,"}, {"sha": "8829fd1f71bfd83a50b6b10606ac798450b58d48", "filename": "gcc/testsuite/gfortran.dg/bind-c-char-descr.f90", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6920d5a1a2834e9c62d441b8f4c6186b01107d13/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-char-descr.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6920d5a1a2834e9c62d441b8f4c6186b01107d13/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-char-descr.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-char-descr.f90?ref=6920d5a1a2834e9c62d441b8f4c6186b01107d13", "patch": "@@ -2,7 +2,6 @@\n !\n ! Contributed by Jos\u00e9 Rui Faustino de Sousa \n !\n-! Note the xfail issue below for 'strg_print_2(\"abc\")\n \n program strp_p\n \n@@ -24,13 +23,18 @@ program strp_p\n   if (len(str) /= 3 .or. str /= \"abc\") stop 1\n   if (len(strp_1) /= 3 .or. strp_1 /= \"abc\") stop 2\n   if (len(strp_2) /= 3 .or. strp_2 /= \"abc\") stop 3\n-  call strg_print_0(\"abc\") ! Error (10.0.0) or segmentation fault (9.1.0)\n-  call strg_print_0(str) ! Error (10.0.0) or segmentation fault (9.1.0)\n-  call strg_print_0(strp_1) ! Error (10.0.0) or segmentation fault (9.1.0)\n-  call strg_print_0(strp_2) ! Error (10.0.0) or segmentation fault (9.1.0)\n-  call strg_print_1(strp_1) ! Not yet supported\n+  call strg_print_0(\"abc\")\n+  call strg_print_0(str)\n+  call strg_print_0(strp_1)\n+  call strg_print_0(strp_2)\n+  call strg_print_0_c(\"abc\")\n+  call strg_print_0_c(str)\n+  call strg_print_0_c(strp_1)\n+  call strg_print_0_c(strp_2)\n+  call strg_print_1(strp_1)\n+  call strg_print_1_c(strp_1)\n \n-  call strg_print_2(\"abc\", xfail=.true.)\n+  call strg_print_2(\"abc\")\n   call strg_print_2(str)\n   call strg_print_2(strp_1)\n   call strg_print_2(strp_2)\n@@ -42,14 +46,21 @@ program strp_p\n \n contains\n \n-  subroutine strg_print_0(this) bind(c) ! Error (10.0.0 20191106) or warning (9.1.0) issued with bind(c)\n+  subroutine strg_print_0 (this)\n     character(len=*, kind=c_char), target, intent(in) :: this\n \n     if (len (this) /= 3) stop 10\n     if (this /= \"abc\") stop 11\n   end subroutine strg_print_0\n+\n+  subroutine strg_print_0_c (this) bind(c)\n+    character(len=*, kind=c_char), target, intent(in) :: this\n+\n+    if (len (this) /= 3) stop 10\n+    if (this /= \"abc\") stop 11\n+  end subroutine strg_print_0_c\n   \n-  subroutine strg_print_1(this) bind(c) ! Not yet supported with bind(c)\n+  subroutine strg_print_1 (this) bind(c)\n     character(len=:, kind=c_char), pointer, intent(in) :: this\n     character(len=:), pointer :: strn\n \n@@ -63,26 +74,34 @@ subroutine strg_print_1(this) bind(c) ! Not yet supported with bind(c)\n        if (this /= \"abc\") stop 25\n      end if\n    end subroutine strg_print_1\n+\n+  subroutine strg_print_1_c (this) bind(c)\n+    character(len=:, kind=c_char), pointer, intent(in) :: this\n+    character(len=:), pointer :: strn\n+\n+    if (.not. associated (this)) stop 20\n+    if (len (this) /= 3) stop 21\n+    if (this /= \"abc\") stop 22\n+     strn => this\n+     if (.not. associated (strn)) stop 23\n+     if(associated(strn))then\n+       if (len (this) /= 3) stop 24\n+       if (this /= \"abc\") stop 25\n+     end if\n+   end subroutine strg_print_1_c\n   \n-  subroutine strg_print_2(this, xfail)\n+  subroutine strg_print_2(this)\n     use, intrinsic :: iso_c_binding, only: &\n       c_loc, c_f_pointer\n     \n     type(*), target, intent(in) :: this(..)\n-    logical, optional, value :: xfail\n     character(len=l), pointer :: strn\n \n     call c_f_pointer(c_loc(this), strn)\n     if (.not. associated (strn)) stop 30\n-    if(associated(strn))then\n+    if (associated(strn)) then\n       if (len (strn) /= 3) stop 31\n-      if (strn /= \"abc\") then\n-        if (present (xfail)) then\n-          print *, 'INVALID STRING - EXPECTED \"abc\" / PR47225'\n-        else\n-          stop 32\n-        end if\n-      end if\n+      if (strn /= \"abc\") stop 32\n     end if\n   end subroutine strg_print_2\n "}]}