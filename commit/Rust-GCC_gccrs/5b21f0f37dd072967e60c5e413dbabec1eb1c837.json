{"sha": "5b21f0f37dd072967e60c5e413dbabec1eb1c837", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyMWYwZjM3ZGQwNzI5NjdlNjBjNWU0MTNkYmFiZWMxZWIxYzgzNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-29T12:20:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-29T12:20:39Z"}, "message": "re PR middle-end/38212 (restrict implementation causes wrong-code)\n\n2009-06-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/38212\n\t* alias.c (find_base_decl): Remove.\n\t(get_deref_alias_set_1): Remove restrict handling.\n\t* c-common.c (c_apply_type_quals_to_decl): Do not set\n\tDECL_POINTER_ALIAS_SET.\n\t* gimplify.c (find_single_pointer_decl_1): Remove.\n\t(find_single_pointer_decl): Likewise.\n\t(internal_get_tmp_var): Remove restrict handling.\n\t(gimple_regimplify_operands): Likewise.\n\t* omp-low.c (expand_omp_atomic_pipeline): Do not set\n\tDECL_POINTER_ALIAS_SET. Use ref-all pointers.\n\t* print-tree.c (print_node): Do not print DECL_POINTER_ALIAS_SET.\n\t* tree.c (restrict_base_for_decl): Remove.\n\t(init_ttree): Do not allocate it.\n\t(make_node_stat): Do not set DECL_POINTER_ALIAS_SET.  Set\n\tLABEL_DECL_UID for label decls.\n\t(copy_node_stat): Do not copy restrict information.\n\t(decl_restrict_base_lookup): Remove.\n\t(decl_restrict_base_insert): Likewise.\n\t(print_restrict_base_statistics): Likewise.\n\t(dump_tree_statistics): Do not call print_restrict_base_statistics.\n\t* tree.h (DECL_POINTER_ALIAS_SET): Remove.\n\t(DECL_POINTER_ALIAS_SET_KNOWN_P): Likewise.\n\t(struct tree_decl_common): Rename pointer_alias_set to label_decl_uid.\n\t(LABEL_DECL_UID): Adjust.\n\t(DECL_BASED_ON_RESTRICT_P): Remove.\n\t(DECL_GET_RESTRICT_BASE): Likewise.\n\t(SET_DECL_RESTRICT_BASE): Likewise.\n\t(struct tree_decl_with_vis): Remove based_on_restrict_p flag.\n\n\t* config/i386/i386.c (ix86_gimplify_va_arg): Use ref-all pointers\n\tinstead of DECL_POINTER_ALIAS_SET.\n\t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Likewise.\n\t* config/s390/s390.c (s390_gimplify_va_arg): Likewise.\n\t* config/spu/spu.c (spu_gimplify_va_arg_expr): Likewise.\n\n\t* gcc.c-torture/execute/pr38212.c: New testcase.\n\nFrom-SVN: r149047", "tree": {"sha": "e708803ab158cd132fb494655ffed7aec0ca820d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e708803ab158cd132fb494655ffed7aec0ca820d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b21f0f37dd072967e60c5e413dbabec1eb1c837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b21f0f37dd072967e60c5e413dbabec1eb1c837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b21f0f37dd072967e60c5e413dbabec1eb1c837", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b21f0f37dd072967e60c5e413dbabec1eb1c837/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a782ebdacc6a5227ed464d47eb3cc27e252c6a"}], "stats": {"total": 391, "additions": 94, "deletions": 297}, "files": [{"sha": "3066cbe65f8d6cbf74ce2a8422b9dd344ca726d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -1,3 +1,41 @@\n+2009-06-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/38212\n+\t* alias.c (find_base_decl): Remove.\n+\t(get_deref_alias_set_1): Remove restrict handling.\n+\t* c-common.c (c_apply_type_quals_to_decl): Do not set\n+\tDECL_POINTER_ALIAS_SET.\n+\t* gimplify.c (find_single_pointer_decl_1): Remove.\n+\t(find_single_pointer_decl): Likewise.\n+\t(internal_get_tmp_var): Remove restrict handling.\n+\t(gimple_regimplify_operands): Likewise.\n+\t* omp-low.c (expand_omp_atomic_pipeline): Do not set\n+\tDECL_POINTER_ALIAS_SET. Use ref-all pointers.\n+\t* print-tree.c (print_node): Do not print DECL_POINTER_ALIAS_SET.\n+\t* tree.c (restrict_base_for_decl): Remove.\n+\t(init_ttree): Do not allocate it.\n+\t(make_node_stat): Do not set DECL_POINTER_ALIAS_SET.  Set\n+\tLABEL_DECL_UID for label decls.\n+\t(copy_node_stat): Do not copy restrict information.\n+\t(decl_restrict_base_lookup): Remove.\n+\t(decl_restrict_base_insert): Likewise.\n+\t(print_restrict_base_statistics): Likewise.\n+\t(dump_tree_statistics): Do not call print_restrict_base_statistics.\n+\t* tree.h (DECL_POINTER_ALIAS_SET): Remove.\n+\t(DECL_POINTER_ALIAS_SET_KNOWN_P): Likewise.\n+\t(struct tree_decl_common): Rename pointer_alias_set to label_decl_uid.\n+\t(LABEL_DECL_UID): Adjust.\n+\t(DECL_BASED_ON_RESTRICT_P): Remove.\n+\t(DECL_GET_RESTRICT_BASE): Likewise.\n+\t(SET_DECL_RESTRICT_BASE): Likewise.\n+\t(struct tree_decl_with_vis): Remove based_on_restrict_p flag.\n+\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Use ref-all pointers\n+\tinstead of DECL_POINTER_ALIAS_SET.\n+\t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Likewise.\n+\t* config/s390/s390.c (s390_gimplify_va_arg): Likewise.\n+\t* config/spu/spu.c (spu_gimplify_va_arg_expr): Likewise.\n+\n 2009-06-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40579"}, {"sha": "248600179f8356220238a8a5d6a67ff5b36ee0f6", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 101, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -155,7 +155,6 @@ static int base_alias_check (rtx, rtx, enum machine_mode,\n static rtx find_base_value (rtx);\n static int mems_in_disjoint_alias_sets_p (const_rtx, const_rtx);\n static int insert_subset_children (splay_tree_node, void*);\n-static tree find_base_decl (tree);\n static alias_set_entry get_alias_set_entry (alias_set_type);\n static const_rtx fixed_scalar_and_varying_struct_p (const_rtx, const_rtx, rtx, rtx,\n \t\t\t\t\t\t    bool (*) (const_rtx, bool));\n@@ -422,57 +421,6 @@ objects_must_conflict_p (tree t1, tree t2)\n   return alias_sets_must_conflict_p (set1, set2);\n }\n \f\n-/* T is an expression with pointer type.  Find the DECL on which this\n-   expression is based.  (For example, in `a[i]' this would be `a'.)\n-   If there is no such DECL, or a unique decl cannot be determined,\n-   NULL_TREE is returned.  */\n-\n-static tree\n-find_base_decl (tree t)\n-{\n-  tree d0, d1;\n-\n-  if (t == 0 || t == error_mark_node || ! POINTER_TYPE_P (TREE_TYPE (t)))\n-    return 0;\n-\n-  if (TREE_CODE (t) == SSA_NAME)\n-    t = SSA_NAME_VAR (t);\n-\n-  /* If this is a declaration, return it.  If T is based on a restrict\n-     qualified decl, return that decl.  */\n-  if (DECL_P (t))\n-    {\n-      if (TREE_CODE (t) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (t))\n-\tt = DECL_GET_RESTRICT_BASE (t);\n-      return t;\n-    }\n-\n-  /* Handle general expressions.  It would be nice to deal with\n-     COMPONENT_REFs here.  If we could tell that `a' and `b' were the\n-     same, then `a->f' and `b->f' are also the same.  */\n-  switch (TREE_CODE_CLASS (TREE_CODE (t)))\n-    {\n-    case tcc_unary:\n-      return find_base_decl (TREE_OPERAND (t, 0));\n-\n-    case tcc_binary:\n-      /* Return 0 if found in neither or both are the same.  */\n-      d0 = find_base_decl (TREE_OPERAND (t, 0));\n-      d1 = find_base_decl (TREE_OPERAND (t, 1));\n-      if (d0 == d1)\n-\treturn d0;\n-      else if (d0 == 0)\n-\treturn d1;\n-      else if (d1 == 0)\n-\treturn d0;\n-      else\n-\treturn 0;\n-\n-    default:\n-      return 0;\n-    }\n-}\n-\n /* Return true if all nested component references handled by\n    get_inner_reference in T are such that we should use the alias set\n    provided by the object at the heart of T.\n@@ -532,56 +480,9 @@ get_deref_alias_set_1 (tree t)\n   if (!flag_strict_aliasing)\n     return 0;\n \n+  /* All we care about is the type.  */\n   if (! TYPE_P (t))\n-    {\n-      tree decl = find_base_decl (t);\n-\n-      if (decl && DECL_POINTER_ALIAS_SET_KNOWN_P (decl))\n-\t{\n-\t  /* If we haven't computed the actual alias set, do it now.  */\n-\t  if (DECL_POINTER_ALIAS_SET (decl) == -2)\n-\t    {\n-\t      tree pointed_to_type = TREE_TYPE (TREE_TYPE (decl));\n-\n-\t      /* No two restricted pointers can point at the same thing.\n-\t\t However, a restricted pointer can point at the same thing\n-\t\t as an unrestricted pointer, if that unrestricted pointer\n-\t\t is based on the restricted pointer.  So, we make the\n-\t\t alias set for the restricted pointer a subset of the\n-\t\t alias set for the type pointed to by the type of the\n-\t\t decl.  */\n-\t      alias_set_type pointed_to_alias_set\n-\t\t  = get_alias_set (pointed_to_type);\n-\n-\t      if (pointed_to_alias_set == 0)\n-\t\t/* It's not legal to make a subset of alias set zero.  */\n-\t\tDECL_POINTER_ALIAS_SET (decl) = 0;\n-\t      else if (AGGREGATE_TYPE_P (pointed_to_type))\n-\t\t/* For an aggregate, we must treat the restricted\n-\t\t   pointer the same as an ordinary pointer.  If we\n-\t\t   were to make the type pointed to by the\n-\t\t   restricted pointer a subset of the pointed-to\n-\t\t   type, then we would believe that other subsets\n-\t\t   of the pointed-to type (such as fields of that\n-\t\t   type) do not conflict with the type pointed to\n-\t\t   by the restricted pointer.  */\n-\t\tDECL_POINTER_ALIAS_SET (decl)\n-\t\t    = pointed_to_alias_set;\n-\t      else\n-\t\t{\n-\t\t  DECL_POINTER_ALIAS_SET (decl) = new_alias_set ();\n-\t\t  record_alias_subset (pointed_to_alias_set,\n-\t\t\t\t       DECL_POINTER_ALIAS_SET (decl));\n-\t\t}\n-\t    }\n-\n-\t  /* We use the alias set indicated in the declaration.  */\n-\t  return DECL_POINTER_ALIAS_SET (decl);\n-\t}\n-\n-      /* Now all we care about is the type.  */\n-      t = TREE_TYPE (t);\n-    }\n+    t = TREE_TYPE (t);\n \n   /* If we have an INDIRECT_REF via a void pointer, we don't\n      know anything about what that might alias.  Likewise if the"}, {"sha": "1ff92920b65bc184eb12eac97be9d232324a0fb2", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -4046,11 +4046,6 @@ c_apply_type_quals_to_decl (int type_quals, tree decl)\n \t  || !POINTER_TYPE_P (type)\n \t  || !C_TYPE_OBJECT_OR_INCOMPLETE_P (TREE_TYPE (type)))\n \terror (\"invalid use of %<restrict%>\");\n-      else if (flag_strict_aliasing && type == TREE_TYPE (decl))\n-\t/* Indicate we need to make a unique alias set for this pointer.\n-\t   We can't do it here because it might be pointing to an\n-\t   incomplete type.  */\n-\tDECL_POINTER_ALIAS_SET (decl) = -2;\n     }\n }\n "}, {"sha": "42bf323855b6dde8e2e417d93f02aeb2bf970683", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -6928,7 +6928,6 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   /* Pull the value out of the saved registers.  */\n \n   addr = create_tmp_var (ptr_type_node, \"addr\");\n-  DECL_POINTER_ALIAS_SET (addr) = get_varargs_alias_set ();\n \n   if (container)\n     {\n@@ -6983,9 +6982,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       else\n \t{\n \t  int_addr = create_tmp_var (ptr_type_node, \"int_addr\");\n-\t  DECL_POINTER_ALIAS_SET (int_addr) = get_varargs_alias_set ();\n \t  sse_addr = create_tmp_var (ptr_type_node, \"sse_addr\");\n-\t  DECL_POINTER_ALIAS_SET (sse_addr) = get_varargs_alias_set ();\n \t}\n \n       /* First ensure that we fit completely in registers.  */\n@@ -7123,7 +7120,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   if (container)\n     gimple_seq_add_stmt (pre_p, gimple_build_label (lab_over));\n \n-  ptrtype = build_pointer_type (type);\n+  ptrtype = build_pointer_type_for_mode (type, ptr_mode, true);\n   addr = fold_convert (ptrtype, addr);\n \n   if (indirect_p)"}, {"sha": "20657215128eed68d825941d8aa21a8cd6fb905e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -7620,7 +7620,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   int size, rsize, n_reg, sav_ofs, sav_scale;\n   tree lab_false, lab_over, addr;\n   int align;\n-  tree ptrtype = build_pointer_type (type);\n+  tree ptrtype = build_pointer_type_for_mode (type, ptr_mode, true);\n   int regalign = 0;\n   gimple stmt;\n \n@@ -7711,7 +7711,6 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   lab_over = NULL;\n   addr = create_tmp_var (ptr_type_node, \"addr\");\n-  DECL_POINTER_ALIAS_SET (addr) = get_varargs_alias_set ();\n \n   /*  AltiVec vectors never go in registers when -mabi=altivec.  */\n   if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (TYPE_MODE (type)))"}, {"sha": "350850ace3610a93e83730323bda71a8626bc6be", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -8624,7 +8624,6 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   lab_false = create_artificial_label (UNKNOWN_LOCATION);\n   lab_over = create_artificial_label (UNKNOWN_LOCATION);\n   addr = create_tmp_var (ptr_type_node, \"addr\");\n-  DECL_POINTER_ALIAS_SET (addr) = get_varargs_alias_set ();\n \n   t = fold_convert (TREE_TYPE (reg), size_int (max_reg));\n   t = build2 (GT_EXPR, boolean_type_node, reg, t);\n@@ -8671,13 +8670,14 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   if (indirect_p)\n     {\n-      t = build_pointer_type (build_pointer_type (type));\n+      t = build_pointer_type_for_mode (build_pointer_type (type),\n+\t\t\t\t       ptr_mode, true);\n       addr = fold_convert (t, addr);\n       addr = build_va_arg_indirect_ref (addr);\n     }\n   else\n     {\n-      t = build_pointer_type (type);\n+      t = build_pointer_type_for_mode (type, ptr_mode, true);\n       addr = fold_convert (t, addr);\n     }\n "}, {"sha": "f86bda668de530a04e7529352b7523b598657e56", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -4068,7 +4068,6 @@ spu_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n     build3 (COMPONENT_REF, TREE_TYPE (f_skip), valist, f_skip, NULL_TREE);\n \n   addr = create_tmp_var (ptr_type_node, \"va_arg\");\n-  DECL_POINTER_ALIAS_SET (addr) = get_varargs_alias_set ();\n \n   /* if an object is dynamically sized, a pointer to it is passed\n      instead of the object itself. */\n@@ -4098,7 +4097,8 @@ spu_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n   tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node, addr, paddedsize);\n   gimplify_assign (unshare_expr (args), tmp, pre_p);\n \n-  addr = fold_convert (build_pointer_type (type), addr);\n+  addr = fold_convert (build_pointer_type_for_mode (type, ptr_mode, true),\n+\t\t       addr);\n \n   if (pass_by_reference_p)\n     addr = build_va_arg_indirect_ref (addr);"}, {"sha": "33e5a2e86691bdc7347aac7a4588b97b7acd0fab", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 79, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -430,57 +430,6 @@ remove_suffix (char *name, int len)\n     }\n }\n \n-/* Subroutine for find_single_pointer_decl.  */\n-\n-static tree\n-find_single_pointer_decl_1 (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t\t    void *data)\n-{\n-  tree *pdecl = (tree *) data;\n-\n-  /* We are only looking for pointers at the same level as the\n-     original tree; we must not look through any indirections.\n-     Returning anything other than NULL_TREE will cause the caller to\n-     not find a base.  */\n-  if (REFERENCE_CLASS_P (*tp))\n-    return *tp;\n-\n-  if (DECL_P (*tp) && POINTER_TYPE_P (TREE_TYPE (*tp)))\n-    {\n-      if (*pdecl)\n-\t{\n-\t  /* We already found a pointer decl; return anything other\n-\t     than NULL_TREE to unwind from walk_tree signalling that\n-\t     we have a duplicate.  */\n-\t  return *tp;\n-\t}\n-      *pdecl = *tp;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Find the single DECL of pointer type in the tree T, used directly\n-   rather than via an indirection, and return it.  If there are zero\n-   or more than one such DECLs, return NULL.  */\n-\n-static tree\n-find_single_pointer_decl (tree t)\n-{\n-  tree decl = NULL_TREE;\n-\n-  if (walk_tree (&t, find_single_pointer_decl_1, &decl, NULL))\n-    {\n-      /* find_single_pointer_decl_1 returns a nonzero value, causing\n-\t walk_tree to return a nonzero value, to indicate that it\n-\t found more than one pointer DECL or that it found an\n-\t indirection.  */\n-      return NULL_TREE;\n-    }\n-\n-  return decl;\n-}\n-\n /* Create a new temporary name with PREFIX.  Returns an identifier.  */\n \n static GTY(()) unsigned int tmp_var_id_num;\n@@ -653,27 +602,10 @@ internal_get_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n \n   t = lookup_tmp_var (val, is_formal);\n \n-  if (is_formal)\n-    {\n-      tree u = find_single_pointer_decl (val);\n-\n-      if (u && TREE_CODE (u) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (u))\n-\tu = DECL_GET_RESTRICT_BASE (u);\n-      if (u && TYPE_RESTRICT (TREE_TYPE (u)))\n-\t{\n-\t  if (DECL_BASED_ON_RESTRICT_P (t))\n-\t    gcc_assert (u == DECL_GET_RESTRICT_BASE (t));\n-\t  else\n-\t    {\n-\t      DECL_BASED_ON_RESTRICT_P (t) = 1;\n-\t      SET_DECL_RESTRICT_BASE (t, u);\n-\t    }\n-\t}\n-\n-      if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-\t  || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-\tDECL_GIMPLE_REG_P (t) = 1;\n-    }\n+  if (is_formal\n+      && (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n+\t  || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE))\n+    DECL_GIMPLE_REG_P (t) = 1;\n \n   mod = build2 (INIT_EXPR, TREE_TYPE (t), t, unshare_expr (val));\n \n@@ -7766,13 +7698,6 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n \t\tDECL_GIMPLE_REG_P (temp) = 1;\n \t      if (TREE_CODE (orig_lhs) == SSA_NAME)\n \t\torig_lhs = SSA_NAME_VAR (orig_lhs);\n-\t      if (TREE_CODE (orig_lhs) == VAR_DECL\n-\t\t  && DECL_BASED_ON_RESTRICT_P (orig_lhs))\n-\t\t{\n-\t\t  DECL_BASED_ON_RESTRICT_P (temp) = 1;\n-\t\t  SET_DECL_RESTRICT_BASE (temp,\n-\t\t\t\t\t  DECL_GET_RESTRICT_BASE (orig_lhs));\n-\t\t}\n \n \t      if (gimple_in_ssa_p (cfun))\n \t\ttemp = make_ssa_name (temp, NULL);"}, {"sha": "e5649b1f88a2a565f229e19aa35ef4e3fb1f3169", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -5016,14 +5016,14 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n     {\n       tree iaddr_val;\n \n-      iaddr = create_tmp_var (build_pointer_type (itype), NULL);\n+      iaddr = create_tmp_var (build_pointer_type_for_mode (itype, ptr_mode,\n+\t\t\t\t\t\t\t   true), NULL);\n       iaddr_val\n \t= force_gimple_operand_gsi (&si,\n \t\t\t\t    fold_convert (TREE_TYPE (iaddr), addr),\n \t\t\t\t    false, NULL_TREE, true, GSI_SAME_STMT);\n       stmt = gimple_build_assign (iaddr, iaddr_val);\n       gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n-      DECL_POINTER_ALIAS_SET (iaddr) = 0;\n       loadedi = create_tmp_var (itype, NULL);\n       if (gimple_in_ssa_p (cfun))\n \t{"}, {"sha": "28235c5e57dd2eede0f901d392501c513fdae88e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -483,10 +483,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t\t\t built_in_class_names[(int) DECL_BUILT_IN_CLASS (node)],\n \t\t\t built_in_names[(int) DECL_FUNCTION_CODE (node)]);\n \t    }\n-\t  \n-\t  if (DECL_POINTER_ALIAS_SET_KNOWN_P (node))\n-\t    fprintf (file, \" alias set \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t     (HOST_WIDE_INT) DECL_POINTER_ALIAS_SET (node));\n \t}\n       if (code == FIELD_DECL)\n \t{"}, {"sha": "dbac55fdf805b069c474632d0685b9df80db0c15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -1,3 +1,8 @@\n+2009-06-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/38212\n+\t* gcc.c-torture/execute/pr38212.c: New testcase.\n+\n 2009-06-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40579"}, {"sha": "867d4c17431645eecdcfc480289575619b57bb02", "filename": "gcc/testsuite/gcc.c-torture/execute/pr38212.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38212.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38212.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38212.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -0,0 +1,22 @@\n+int __attribute__((noinline))\n+foo (int *__restrict p, int i)\n+{\n+  int *__restrict q;\n+  int *__restrict r;\n+  int v, w;\n+  q = p + 1;\n+  r = q - i;\n+  v = *r;\n+  *p = 1;\n+  w = *r;\n+  return v + w;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  int i = 0;\n+  if (foo (&i, 1) != 1)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "a42f36952757887d7842053173fbda3e35e7e2be", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -194,9 +194,6 @@ static GTY ((if_marked (\"tree_priority_map_marked_p\"),\n \t     param_is (struct tree_priority_map)))\n   htab_t init_priority_for_decl;\n \n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n-  htab_t restrict_base_for_decl;\n-\n static void set_type_quals (tree, int);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n@@ -273,8 +270,6 @@ init_ttree (void)\n \t\t\t\t\t tree_map_eq, 0);\n   init_priority_for_decl = htab_create_ggc (512, tree_priority_map_hash,\n \t\t\t\t\t    tree_priority_map_eq, 0);\n-  restrict_base_for_decl = htab_create_ggc (256, tree_map_hash,\n-\t\t\t\t\t    tree_map_eq, 0);\n \n   int_cst_hash_table = htab_create_ggc (1024, int_cst_hash_hash,\n \t\t\t\t\tint_cst_hash_eq, NULL);\n@@ -658,11 +653,11 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \t    }\n \t  else\n \t    DECL_ALIGN (t) = 1;\n-\t  /* We have not yet computed the alias set for this declaration.  */\n-\t  DECL_POINTER_ALIAS_SET (t) = -1;\n \t}\n       DECL_SOURCE_LOCATION (t) = input_location;\n       DECL_UID (t) = next_decl_uid++;\n+      if (TREE_CODE (t) == LABEL_DECL)\n+\tLABEL_DECL_UID (t) = -1;\n \n       break;\n \n@@ -748,11 +743,6 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \t  SET_DECL_INIT_PRIORITY (t, DECL_INIT_PRIORITY (node));\n \t  DECL_HAS_INIT_PRIORITY_P (t) = 1;\n \t}\n-      if (TREE_CODE (node) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (node))\n-\t{\n-\t  SET_DECL_RESTRICT_BASE (t, DECL_GET_RESTRICT_BASE (node));\n-\t  DECL_BASED_ON_RESTRICT_P (t) = 1;\n-\t}\n     }\n   else if (TREE_CODE_CLASS (code) == tcc_type)\n     {\n@@ -4523,36 +4513,6 @@ decl_fini_priority_insert (tree decl, priority_type priority)\n   h->fini = priority;\n }  \n \n-/* Look up a restrict qualified base decl for FROM.  */\n-\n-tree\n-decl_restrict_base_lookup (tree from)\n-{\n-  struct tree_map *h;\n-  struct tree_map in;\n-\n-  in.base.from = from;\n-  h = (struct tree_map *) htab_find_with_hash (restrict_base_for_decl, &in,\n-\t\t\t\t\t       htab_hash_pointer (from));\n-  return h ? h->to : NULL_TREE;\n-}\n-\n-/* Record the restrict qualified base TO for FROM.  */\n-\n-void\n-decl_restrict_base_insert (tree from, tree to)\n-{\n-  struct tree_map *h;\n-  void **loc;\n-\n-  h = GGC_NEW (struct tree_map);\n-  h->hash = htab_hash_pointer (from);\n-  h->base.from = from;\n-  h->to = to;\n-  loc = htab_find_slot_with_hash (restrict_base_for_decl, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n-}\n-\n /* Print out the statistics for the DECL_DEBUG_EXPR hash table.  */\n \n static void\n@@ -4575,20 +4535,6 @@ print_value_expr_statistics (void)\n \t   htab_collisions (value_expr_for_decl));\n }\n \n-/* Print out statistics for the RESTRICT_BASE_FOR_DECL hash table, but\n-   don't print anything if the table is empty.  */\n-\n-static void\n-print_restrict_base_statistics (void)\n-{\n-  if (htab_elements (restrict_base_for_decl) != 0)\n-    fprintf (stderr,\n-\t     \"RESTRICT_BASE    hash: size %ld, %ld elements, %f collisions\\n\",\n-\t     (long) htab_size (restrict_base_for_decl),\n-\t     (long) htab_elements (restrict_base_for_decl),\n-\t     htab_collisions (restrict_base_for_decl));\n-}\n-\n /* Lookup a debug expression for FROM, and return it if we find one.  */\n \n tree \n@@ -7100,7 +7046,6 @@ dump_tree_statistics (void)\n   print_type_hash_statistics ();\n   print_debug_expr_statistics ();\n   print_value_expr_statistics ();\n-  print_restrict_base_statistics ();\n   lang_hooks.print_statistics ();\n }\n \f"}, {"sha": "3a748a7fefaa141bcbb86f0efc25e59c4b9c4382", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 38, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21f0f37dd072967e60c5e413dbabec1eb1c837/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5b21f0f37dd072967e60c5e413dbabec1eb1c837", "patch": "@@ -2565,16 +2565,6 @@ struct GTY(()) tree_decl_minimal {\n #define DECL_LANG_FLAG_6(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_6)\n #define DECL_LANG_FLAG_7(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_7)\n \n-/* Used to indicate an alias set for the memory pointed to by this\n-   particular FIELD_DECL, PARM_DECL, or VAR_DECL, which must have\n-   pointer (or reference) type.  */\n-#define DECL_POINTER_ALIAS_SET(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->decl_common.pointer_alias_set)\n-\n-/* Nonzero if an alias set has been assigned to this declaration.  */\n-#define DECL_POINTER_ALIAS_SET_KNOWN_P(NODE) \\\n-  (DECL_POINTER_ALIAS_SET (NODE) != - 1)\n-\n /* Nonzero for a decl which is at file scope.  */\n #define DECL_FILE_SCOPE_P(EXP) \t\t\t\t\t\\\n   (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\\n@@ -2646,7 +2636,7 @@ struct GTY(()) tree_decl_common {\n   /* DECL_ALIGN.  It should have the same size as TYPE_ALIGN.  */\n   unsigned int align;\n \n-  alias_set_type pointer_alias_set;\n+  int label_decl_uid;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_decl *lang_specific;\n };\n@@ -2776,7 +2766,7 @@ struct GTY(()) tree_field_decl {\n    dense, unique within any one function, and may be used to index arrays.\n    If the value is -1, then no UID has been assigned.  */\n #define LABEL_DECL_UID(NODE) \\\n-  (LABEL_DECL_CHECK (NODE)->decl_common.pointer_alias_set)\n+  (LABEL_DECL_CHECK (NODE)->decl_common.label_decl_uid)\n \n /* In LABEL_DECL nodes, nonzero means that an error message about\n    jumping into such a binding contour has been printed for this label.  */\n@@ -2828,21 +2818,6 @@ struct GTY(()) tree_parm_decl {\n /* Used to indicate that the DECL is a dllimport.  */\n #define DECL_DLLIMPORT_P(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.dllimport_flag)\n \n-/* DECL_BASED_ON_RESTRICT_P records whether a VAR_DECL is a temporary\n-   based on a variable with a restrict qualified type.  If it is,\n-   DECL_RESTRICT_BASE returns the restrict qualified variable on which\n-   it is based.  */\n-\n-#define DECL_BASED_ON_RESTRICT_P(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->decl_with_vis.based_on_restrict_p)\n-#define DECL_GET_RESTRICT_BASE(NODE) \\\n-  (decl_restrict_base_lookup (VAR_DECL_CHECK (NODE)))\n-#define SET_DECL_RESTRICT_BASE(NODE, VAL) \\\n-  (decl_restrict_base_insert (VAR_DECL_CHECK (NODE), (VAL)))\n-\n-extern tree decl_restrict_base_lookup (tree);\n-extern void decl_restrict_base_insert (tree, tree);\n-\n /* Used in a DECL to indicate that, even if it TREE_PUBLIC, it need\n    not be put out unless it is needed in this translation unit.\n    Entities like this are shared across translation units (like weak\n@@ -2933,28 +2908,27 @@ struct GTY(()) tree_decl_with_vis {\n  tree comdat_group;\n \n  /* Belong to VAR_DECL exclusively.  */\n- unsigned defer_output:1;\n- unsigned hard_register:1;\n- unsigned thread_local:1;\n- unsigned common_flag:1;\n+ unsigned defer_output : 1;\n+ unsigned hard_register : 1;\n+ unsigned thread_local : 1;\n+ unsigned common_flag : 1;\n  unsigned in_text_section : 1;\n  unsigned dllimport_flag : 1;\n- unsigned based_on_restrict_p : 1;\n  /* Used by C++.  Might become a generic decl flag.  */\n  unsigned shadowed_for_var_p : 1;\n-\n  /* Don't belong to VAR_DECL exclusively.  */\n- unsigned weak_flag:1;\n+ unsigned weak_flag : 1;\n+\n  unsigned seen_in_bind_expr : 1;\n  unsigned comdat_flag : 1;\n  ENUM_BITFIELD(symbol_visibility) visibility : 2;\n  unsigned visibility_specified : 1;\n- /* Belong to FUNCTION_DECL exclusively.  */\n- unsigned init_priority_p:1;\n-\n  /* Belongs to VAR_DECL exclusively.  */\n  ENUM_BITFIELD(tls_model) tls_model : 3;\n- /* 14 unused bits. */\n+\n+ /* Belong to FUNCTION_DECL exclusively.  */\n+ unsigned init_priority_p : 1;\n+ /* 15 unused bits. */\n };\n \n /* In a VAR_DECL that's static,"}]}