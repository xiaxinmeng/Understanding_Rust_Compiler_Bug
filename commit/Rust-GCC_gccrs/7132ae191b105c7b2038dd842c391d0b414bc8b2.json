{"sha": "7132ae191b105c7b2038dd842c391d0b414bc8b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzMmFlMTkxYjEwNWM3YjIwMzhkZDg0MmMzOTFkMGI0MTRiYzhiMg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-04-29T08:39:22Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-04-29T08:39:22Z"}, "message": "[ARC] Fix unwanted match for sign extend 16-bit constant.\n\nThe combine pass may conclude umulhisi3_imm pattern can accept also sign\nextended 16-bit constants. This patch prohibits the combine in considering\nthis pattern as suitable.\n\ngcc/\n2016-04-29  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.h (UNSIGNED_INT12, UNSIGNED_INT16): Define.\n\t* config/arc/arc.md (umulhisi3): Use arc_short_operand predicate.\n\t(umulhisi3_imm): Update predicates and constraint letters.\n\t(umulhisi3_reg): Declare instruction as commutative.\n\t* config/arc/constraints.md (J12, J16): New constraints.\n\t* config/arc/predicates.md (short_unsigned_const_operand): New\n\tpredicate.\n\t(arc_short_operand): Likewise.\n\t* testsuite/gcc.target/arc/umulsihi3_z.c: New file.\n\nFrom-SVN: r235623", "tree": {"sha": "836c273f4dc60988425a41f3115b2d866f428521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836c273f4dc60988425a41f3115b2d866f428521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7132ae191b105c7b2038dd842c391d0b414bc8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7132ae191b105c7b2038dd842c391d0b414bc8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7132ae191b105c7b2038dd842c391d0b414bc8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7132ae191b105c7b2038dd842c391d0b414bc8b2/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98998245d99f06946b4d5ed6744c77c3760f1141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98998245d99f06946b4d5ed6744c77c3760f1141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98998245d99f06946b4d5ed6744c77c3760f1141"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "a92fd768eeeb3fd660f5a473fc17c73574ef03c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -1,3 +1,15 @@\n+2016-04-29  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.h (UNSIGNED_INT12, UNSIGNED_INT16): Define.\n+\t* config/arc/arc.md (umulhisi3): Use arc_short_operand predicate.\n+\t(umulhisi3_imm): Update predicates and constraint letters.\n+\t(umulhisi3_reg): Declare instruction as commutative.\n+\t* config/arc/constraints.md (J12, J16): New constraints.\n+\t* config/arc/predicates.md (short_unsigned_const_operand): New\n+\tpredicate.\n+\t(arc_short_operand): Likewise.\n+\t* testsuite/gcc.target/arc/umulsihi3_z.c: New file.\n+\n 2016-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/13962"}, {"sha": "bc14d11ab1f9b98ad2fa51d99549b7de6282199e", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -815,6 +815,8 @@ extern enum reg_class arc_regno_reg_class[];\n #define UNSIGNED_INT6(X) ((unsigned) (X) < 0x40)\n #define UNSIGNED_INT7(X) ((unsigned) (X) < 0x80)\n #define UNSIGNED_INT8(X) ((unsigned) (X) < 0x100)\n+#define UNSIGNED_INT12(X) ((unsigned) (X) < 0x800)\n+#define UNSIGNED_INT16(X) ((unsigned) (X) < 0x10000)\n #define IS_ONE(X) ((X) == 1)\n #define IS_ZERO(X) ((X) == 0)\n "}, {"sha": "d1a9159411da268e12eb5a54a2f9621720a4c015", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -1820,7 +1820,7 @@\n (define_expand \"umulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\"                           \"\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\"  \"\"))\n-\t\t (zero_extend:SI (match_operand:HI 2 \"nonmemory_operand\" \"\"))))]\n+\t\t (zero_extend:SI (match_operand:HI 2 \"arc_short_operand\" \"\"))))]\n   \"TARGET_MPYW\"\n   \"{\n     if (CONSTANT_P (operands[2]))\n@@ -1832,9 +1832,9 @@\n )\n \n (define_insn \"umulhisi3_imm\"\n-  [(set (match_operand:SI 0 \"register_operand\"                          \"=r, r,r,  r,  r\")\n-\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \" 0, r,0,  0,  r\"))\n-\t\t (match_operand:HI 2 \"short_const_int_operand\"          \" L, L,I,C16,C16\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"                          \"=r, r,  r,  r,  r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0, r,  0,  0,  r\"))\n+\t\t (match_operand:HI 2 \"short_unsigned_const_operand\"     \" L, L,J12,J16,J16\")))]\n   \"TARGET_MPYW\"\n   \"mpyuw%? %0,%1,%2\"\n   [(set_attr \"length\" \"4,4,4,8,8\")\n@@ -1846,7 +1846,7 @@\n \n (define_insn \"umulhisi3_reg\"\n   [(set (match_operand:SI 0 \"register_operand\"                          \"=Rcqq, r, r\")\n-\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"    0, 0, r\"))\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"   %0, 0, r\"))\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \" Rcqq, r, r\"))))]\n   \"TARGET_MPYW\"\n   \"mpyuw%? %0,%1,%2\""}, {"sha": "5069d7d9746de3dbd7621a755a7435fdf70b168f", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -499,3 +499,15 @@\n (define_memory_constraint \"ATO\"\n   \"A memory with only a base register\"\n   (match_operand 0 \"mem_noofs_operand\"))\n+\n+(define_constraint \"J12\"\n+  \"@internal\n+   An unsigned 12-bit integer constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UNSIGNED_INT12 (ival)\")))\n+\n+(define_constraint \"J16\"\n+  \"@internal\n+   An unsigned 16-bit integer constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UNSIGNED_INT16 (ival)\")))"}, {"sha": "8e4b4b40c543c46b471715664322f7acdf2c4858", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -838,3 +838,11 @@\n   (ior (match_operand:SI 0 \"cmem_address_0\")\n        (match_operand:SI 0 \"cmem_address_1\")\n        (match_operand:SI 0 \"cmem_address_2\")))\n+\n+(define_predicate \"short_unsigned_const_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"satisfies_constraint_J16 (op)\")))\n+\n+(define_predicate \"arc_short_operand\"\n+  (ior (match_test \"register_operand (op, mode)\")\n+       (match_test \"short_unsigned_const_operand (op, mode)\")))"}, {"sha": "cf1c00d806ac3cf96808d59258ca8ac16c2c3a5a", "filename": "gcc/testsuite/gcc.target/arc/umulsihi3_z.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fumulsihi3_z.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7132ae191b105c7b2038dd842c391d0b414bc8b2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fumulsihi3_z.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fumulsihi3_z.c?ref=7132ae191b105c7b2038dd842c391d0b414bc8b2", "patch": "@@ -0,0 +1,23 @@\n+/* Check if the optimizers are not removing the umulsihi3_imm\n+   instruction.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+#include <stdint.h>\n+\n+static int32_t test (int16_t reg_val)\n+{\n+  int32_t x = (reg_val & 0xf) * 62500;\n+  return x;\n+}\n+\n+int main (void)\n+{\n+  volatile int32_t x = 0xc172;\n+  x = test (x);\n+\n+  if (x != 0x0001e848)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}]}