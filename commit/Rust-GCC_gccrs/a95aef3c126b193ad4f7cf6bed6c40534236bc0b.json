{"sha": "a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1YWVmM2MxMjZiMTkzYWQ0ZjdjZjZiZWQ2YzQwNTM0MjM2YmMwYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-01-17T20:25:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-01-17T20:25:01Z"}, "message": "re PR c++/59270 ([c++11] ICE with decltype of a broken class)\n\n/cp\n2014-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59270\n\tPR c++/58811\n\t* init.c (build_value_init_noctor): Don't pass error_mark_node to\n\tbuild_value_init.\n\n/testsuite\n2014-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59270\n\tPR c++/58811\n\t* g++.dg/cpp0x/decltype-incomplete1.C: New.\n\t* g++.dg/init/pr58811.C: Likewise.\n\nFrom-SVN: r206731", "tree": {"sha": "a44fec4e4862e692907a24e3c7eaace881f5c487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a44fec4e4862e692907a24e3c7eaace881f5c487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/comments", "author": null, "committer": null, "parents": [{"sha": "aef836828d33f32ac63d67d0e83180551b5a6fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef836828d33f32ac63d67d0e83180551b5a6fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef836828d33f32ac63d67d0e83180551b5a6fa8"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "0508ea07862acc418c3471e06c89fb18a6f25c81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "patch": "@@ -1,3 +1,10 @@\n+2014-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59270\n+\tPR c++/58811\n+\t* init.c (build_value_init_noctor): Don't pass error_mark_node to\n+\tbuild_value_init.\n+\n 2014-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59269"}, {"sha": "194a79777f4754298587d3d727fe37d90780acfd", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "patch": "@@ -400,6 +400,9 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \n \t      ftype = TREE_TYPE (field);\n \n+\t      if (ftype == error_mark_node)\n+\t\tcontinue;\n+\n \t      /* We could skip vfields and fields of types with\n \t\t user-defined constructors, but I think that won't improve\n \t\t performance at all; it should be simpler in general just"}, {"sha": "c471ae98aa948aa24cdb49e24be51a9f3720a3cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "patch": "@@ -1,3 +1,10 @@\n+2014-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59270\n+\tPR c++/58811\n+\t* g++.dg/cpp0x/decltype-incomplete1.C: New.\n+\t* g++.dg/init/pr58811.C: Likewise.\n+\n 2014-01-17  Jeff Law  <law@redhat.com>\n \n         PR middle-end/57904"}, {"sha": "f46d0ba4194ff7b7bcacbf52edd57f5d336f8139", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-incomplete1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-incomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-incomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-incomplete1.C?ref=a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59270\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  struct B b; // { dg-error \"incomplete type\" }\n+};\n+\n+decltype(A()) a;"}, {"sha": "42e7fac42f78f154de8c911c2567340012ebc854", "filename": "gcc/testsuite/g++.dg/init/pr58811.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr58811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95aef3c126b193ad4f7cf6bed6c40534236bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr58811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr58811.C?ref=a95aef3c126b193ad4f7cf6bed6c40534236bc0b", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/58811\n+\n+struct B\n+{\n+  struct A a; // { dg-error \"incomplete type\" }\n+};\n+\n+void foo()\n+{\n+  B();\n+}"}]}