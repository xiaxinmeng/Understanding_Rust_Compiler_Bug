{"sha": "d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxYWY4MmI0Y2Y0Yzk1YzRhNzQ1MWRmMjE4MGNjNmViYjQ0ODU2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T12:39:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T12:39:24Z"}, "message": "i386: Fix V{64QI,32HI}mode constant permutations [PR94509]\n\nThe following testcases are miscompiled, because expand_vec_perm_pshufb\nincorrectly thinks it can use vpshufb instruction for the permutations\nwhen it can't.\nThe\n          if (vmode == V32QImode)\n            {\n              /* vpshufb only works intra lanes, it is not\n                 possible to shuffle bytes in between the lanes.  */\n              for (i = 0; i < nelt; ++i)\n                if ((d->perm[i] ^ i) & (nelt / 2))\n                  return false;\n            }\nintra-lane check which is correct has been copied and adjusted for 64-byte\nmodes into:\n          if (vmode == V64QImode)\n            {\n              /* vpshufb only works intra lanes, it is not\n                 possible to shuffle bytes in between the lanes.  */\n              for (i = 0; i < nelt; ++i)\n                if ((d->perm[i] ^ i) & (nelt / 4))\n                  return false;\n            }\nwhich is not correct, because 64-byte modes have 4 lanes rather than just\ntwo and the above is only testing that the permutation grabs even lane elts\nfrom even lanes and odd lane elts from odd lanes, but not that they are\nfrom the same 256-bit half.\n\nThe following patch fixes it by using 3 * nelt / 4 instead of nelt / 4,\nso we actually check the most significant 2 bits rather than just one.\n\n2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94509\n\t* config/i386/i386-expand.c (expand_vec_perm_pshufb): Fix the check\n\tfor inter-lane permutation for 64-byte modes.\n\n\t* gcc.target/i386/avx512bw-pr94509-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr94509-2.c: New test.", "tree": {"sha": "83cf14d47f41bf298b86f5e1d8960ede45a9ee9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83cf14d47f41bf298b86f5e1d8960ede45a9ee9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df50a059fbd4d4a1cb067bd43caccdfca0327a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df50a059fbd4d4a1cb067bd43caccdfca0327a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df50a059fbd4d4a1cb067bd43caccdfca0327a8"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "566967cd62fdfda8a405729dd66ac0a5d0843e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "patch": "@@ -1,3 +1,9 @@\n+2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94509\n+\t* config/i386/i386-expand.c (expand_vec_perm_pshufb): Fix the check\n+\tfor inter-lane permutation for 64-byte modes.\n+\n 2020-04-07  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rs6000/t-rtems: Delete mcpu=8540 multilib."}, {"sha": "48f00c5fcfc6cc9173ee968190dc05198ed2ef11", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "patch": "@@ -16781,7 +16781,7 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \t      /* vpshufb only works intra lanes, it is not\n \t\t possible to shuffle bytes in between the lanes.  */\n \t      for (i = 0; i < nelt; ++i)\n-\t\tif ((d->perm[i] ^ i) & (nelt / 4))\n+\t\tif ((d->perm[i] ^ i) & (3 * nelt / 4))\n \t\t  return false;\n \t    }\n \t}"}, {"sha": "af475d42de459f2380cfaf361bc2a6027fbf207d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "patch": "@@ -1,5 +1,9 @@\n 2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94509\n+\t* gcc.target/i386/avx512bw-pr94509-1.c: New test.\n+\t* gcc.target/i386/avx512bw-pr94509-2.c: New test.\n+\n \tPR c++/94512\n \t* g++.dg/gomp/pr94512.C: New test.\n "}, {"sha": "6cd79b7443fecabd92c1ffa8ce1226614748e41f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr94509-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-1.c?ref=d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/94509 */\n+/* { dg-do run { target avx512bw } } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+typedef unsigned short __attribute__ ((__vector_size__ (64))) V;\n+\n+__attribute__((noipa)) V\n+foo (V x)\n+{\n+  return __builtin_shuffle (x, (V) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t     15, 15, 15, 15, 15, 15, 15, 15,\n+\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t     15, 15, 15, 15, 15, 15, 15, 15 });\n+}\n+\n+static void\n+TEST (void)\n+{\n+  V v = foo ((V) { 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t   9, 10, 11, 12, 13, 14, 15, 16,\n+\t\t   17, 18, 19, 20, 21, 22, 23, 24,\n+\t\t   25, 26, 27, 28, 29, 30, 31, 32 });\n+  unsigned int i;\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != ((i & 8) ? 16 : 1))\n+      abort ();\n+}"}, {"sha": "089e3f211b971e4181ce7646b67b630db6d4cc86", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr94509-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51af82b4cf4c95c4a7451df2180cc6ebb44856b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94509-2.c?ref=d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/94509 */\n+/* { dg-do run { target avx512bw } } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+typedef unsigned char __attribute__ ((__vector_size__ (64))) V;\n+\n+__attribute__((noipa)) V\n+foo (V x)\n+{\n+  return __builtin_shuffle (x, (V) { 0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t     0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t     30, 31, 30, 31, 30, 31, 30, 31,\n+\t\t\t\t     30, 31, 30, 31, 30, 31, 30, 31,\n+\t\t\t\t     0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t     0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t     30, 31, 30, 31, 30, 31, 30, 31,\n+\t\t\t\t     30, 31, 30, 31, 30, 31, 30, 31 });\n+}\n+\n+static void\n+TEST (void)\n+{\n+  V v = foo ((V) { 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t   9, 10, 11, 12, 13, 14, 15, 16,\n+\t\t   17, 18, 19, 20, 21, 22, 23, 24,\n+\t\t   25, 26, 27, 28, 29, 30, 31, 32,\n+\t\t   33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t   41, 42, 43, 44, 45, 46, 47, 48,\n+\t\t   49, 50, 51, 52, 53, 54, 55, 56,\n+\t\t   57, 58, 59, 60, 61, 62, 63, 64 });\n+  unsigned int i;\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != ((i & 16) ? 31 : 1) + (i & 1))\n+      abort ();\n+}"}]}