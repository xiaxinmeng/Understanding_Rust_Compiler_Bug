{"sha": "c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5NzllYWY1N2FhYjNkYzRjOWVlMzQ4MWI3ZGUxOTMzYzlhODYzMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-07-11T09:43:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-07-11T09:43:25Z"}, "message": "re PR tree-optimization/32589 (exp_dbug.adb:981: error: invalid array index)\n\n\tPR tree-optimization/32589\n\t* doc/tree-ssa.texi (Rough GIMPLE Grammar): Add missing rule.\n\t* tree-gimple.c (is_gimple_min_invariant): Clarify head comment.\n\t* tree-ssa-propagate.c (valid_gimple_expression_p): New\n\tpredicate, extracted from...\n\t(set_rhs): ...here.  Call it for the expression on entry.\n\t* tree-ssa-propagate.h (valid_gimple_expression_p): Declare.\n\t* tree-ssa-sccvn.c: Include tree-ssa-propagate.h.\n\t(simplify_binary_expression): Use valid_gimple_expression_p\n\tto validate the simplification.\n\t* Makefile.in (tree-ssa-sccvn.o): Depends on tree-ssa-propagate.h.\n\nFrom-SVN: r126545", "tree": {"sha": "a59a2918eee22f42930a6b43e324b024d35f724e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59a2918eee22f42930a6b43e324b024d35f724e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/comments", "author": null, "committer": null, "parents": [{"sha": "13c0a63051e154d83fad6063c40d17183246b098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c0a63051e154d83fad6063c40d17183246b098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c0a63051e154d83fad6063c40d17183246b098"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "3948f3cab79bb1871ded4516dce860c940562619", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -1,10 +1,23 @@\n+2007-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/32589\n+\t* doc/tree-ssa.texi (Rough GIMPLE Grammar): Add missing rule.\n+\t* tree-gimple.c (is_gimple_min_invariant): Clarify head comment.\n+\t* tree-ssa-propagate.c (valid_gimple_expression_p): New\n+\tpredicate, extracted from...\n+\t(set_rhs): ...here.  Call it for the expression on entry.\n+\t* tree-ssa-propagate.h (valid_gimple_expression_p): Declare.\n+\t* tree-ssa-sccvn.c: Include tree-ssa-propagate.h.\n+\t(simplify_binary_expression): Use valid_gimple_expression_p\n+\tto validate the simplification.\n+\t* Makefile.in (tree-ssa-sccvn.o): Depends on tree-ssa-propagate.h.\n+\n 2007-07-11  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/cygming.h (PREFERRED_DEBUGGING_TYPE): Define to\n \tDWARF2_DEBUG on 32 bit target too.\n \t(DWARF2_UNWIND_INFO): Reorganize 64-bit vs 32-bit definition. \n \n-\n 2007-07-11  Nick Clifton  <nickc@redhat.com>\n \n \t* config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Provide alternative"}, {"sha": "3b490c04e37ee1257be5f0ee8fc474ae87b89d6b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -2042,7 +2042,7 @@ tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) $(CFGLOOP_H) \\\n    alloc-pool.h $(BASIC_BLOCK_H) bitmap.h $(HASHTAB_H) $(TREE_GIMPLE_H) \\\n-   $(TREE_INLINE_H) tree-iterator.h tree-ssa-sccvn.h\n+   $(TREE_INLINE_H) tree-iterator.h tree-ssa-propagate.h tree-ssa-sccvn.h\n tree-vn.o : tree-vn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) \\\n    $(TREE_H) $(TREE_FLOW_H) $(HASHTAB_H) langhooks.h tree-pass.h \\\n    $(TREE_DUMP_H) $(DIAGNOSTIC_H) tree-ssa-sccvn.h"}, {"sha": "fcbee88fbe34ef995fc77795ff0ca8d450287966", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 2004, 2005 Free Software Foundation, Inc.\n+@c Copyright (c) 2004, 2005, 2007 Free Software Foundation, Inc.\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -680,7 +680,7 @@ void f()\n    bitfieldref  : BIT_FIELD_REF\n                         op0 -> inner-compref\n                         op1 -> CONST\n-                        op2 -> var\n+                        op2 -> val\n \n    compref      : inner-compref\n                 | TARGET_MEM_REF\n@@ -718,6 +718,8 @@ void f()\n                         op1 -> val\n \n    val          : ID\n+                | invariant ADDR_EXPR\n+                        op0 -> addr-expr-arg\n                 | CONST\n \n    rhs          : lhs"}, {"sha": "004561856810a26e6de898db339aa72afd7fcae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -1,3 +1,7 @@\n+2007-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/invariant_index.ad[sb]: New test.\n+\n 2007-07-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/32560"}, {"sha": "69ad47ac192a07046fdbfa82725aa8506fd60409", "filename": "gcc/testsuite/gnat.dg/invariant_index.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.adb?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatp\" }\n+\n+package body Invariant_Index is\n+\n+   procedure Proc (S : String) is\n+      N : constant Integer := S'Length;\n+   begin\n+      Name_Buffer (1 + N .. Name_Len + N) := Name_Buffer (1 .. Name_Len);\n+      Name_Buffer (1 .. N) := S;\n+      Name_Len := Name_Len + N;\n+   end;\n+\n+end Invariant_Index;"}, {"sha": "77c46fc39e87b7d2e45a53dafb76a8e28ee740ca", "filename": "gcc/testsuite/gnat.dg/invariant_index.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finvariant_index.ads?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -0,0 +1,8 @@\n+package Invariant_Index is\n+\n+   Name_Buffer : String (1 .. 100);\n+   Name_Len : Natural;\n+\n+   procedure Proc (S : String);\n+\n+end Invariant_Index;"}, {"sha": "8f88f1d9866ee66790b765da4a7a1a823558fa0d", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -166,7 +166,7 @@ is_gimple_addressable (tree t)\n \t  || INDIRECT_REF_P (t));\n }\n \n-/* Return true if T is function invariant.  Or rather a restricted\n+/* Return true if T is a GIMPLE minimal invariant.  It's a restricted\n    form of function invariant.  */\n \n bool"}, {"sha": "096664d90d1f51ab399490b440c63afc9a09a658", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -573,24 +573,17 @@ get_rhs (tree stmt)\n }\n \n \n-/* Set the main expression of *STMT_P to EXPR.  If EXPR is not a valid\n-   GIMPLE expression no changes are done and the function returns\n-   false.  */\n+/* Return true if EXPR is a valid GIMPLE expression.  */\n \n bool\n-set_rhs (tree *stmt_p, tree expr)\n+valid_gimple_expression_p (tree expr)\n {\n-  tree stmt = *stmt_p, op;\n   enum tree_code code = TREE_CODE (expr);\n-  stmt_ann_t ann;\n-  tree var;\n-  ssa_op_iter iter;\n \n-  /* Verify the constant folded result is valid gimple.  */\n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_declaration:\n-      if (!is_gimple_variable(expr))\n+      if (!is_gimple_variable (expr))\n \treturn false;\n       break;\n \n@@ -665,6 +658,25 @@ set_rhs (tree *stmt_p, tree expr)\n       return false;\n     }\n \n+  return true;\n+}\n+\n+\n+/* Set the main expression of *STMT_P to EXPR.  If EXPR is not a valid\n+   GIMPLE expression no changes are done and the function returns\n+   false.  */\n+\n+bool\n+set_rhs (tree *stmt_p, tree expr)\n+{\n+  tree stmt = *stmt_p, op;\n+  stmt_ann_t ann;\n+  tree var;\n+  ssa_op_iter iter;\n+\n+  if (!valid_gimple_expression_p (expr))\n+    return false;\n+\n   if (EXPR_HAS_LOCATION (stmt)\n       && (EXPR_P (expr)\n \t  || GIMPLE_STMT_P (expr))"}, {"sha": "94a052624a81664a2c1d81d2e756cb3abff79a8c", "filename": "gcc/tree-ssa-propagate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-propagate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-propagate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.h?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -114,6 +114,7 @@ typedef enum ssa_prop_result (*ssa_prop_visit_phi_fn) (tree);\n /* In tree-ssa-propagate.c  */\n void ssa_propagate (ssa_prop_visit_stmt_fn, ssa_prop_visit_phi_fn);\n tree get_rhs (tree);\n+bool valid_gimple_expression_p (tree expr);\n bool set_rhs (tree *, tree);\n tree first_vdef (tree);\n bool stmt_makes_single_load (tree);"}, {"sha": "5c3acb2a6a7c97f2f5a6aa4ad2d54daefd9e1dce", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2979eaf57aab3dc4c9ee3481b7de1933c9a8633/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c2979eaf57aab3dc4c9ee3481b7de1933c9a8633", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"bitmap.h\"\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n+#include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-sccvn.h\"\n \n /* This algorithm is based on the SCC algorithm presented by Keith\n@@ -1397,42 +1398,16 @@ simplify_binary_expression (tree rhs)\n       else if (SSA_VAL (op1) != VN_TOP && SSA_VAL (op1) != op1)\n \top1 = VN_INFO (op1)->valnum;\n     }\n+\n   result = fold_binary (TREE_CODE (rhs), TREE_TYPE (rhs), op0, op1);\n \n   /* Make sure result is not a complex expression consisting\n      of operators of operators (IE (a + b) + (a + c))\n      Otherwise, we will end up with unbounded expressions if\n      fold does anything at all.  */\n-  if (result)\n-    {\n-      if (is_gimple_min_invariant (result))\n-\treturn result;\n-      else if (SSA_VAR_P (result))\n-\treturn result;\n-      else if (EXPR_P (result))\n-\t{\n-\t  switch (TREE_CODE_CLASS (TREE_CODE (result)))\n-\t    {\n-\t    case tcc_unary:\n-\t      {\n-\t\ttree op0 = TREE_OPERAND (result, 0);\n-\t\tif (!EXPR_P (op0))\n-\t\t  return result;\n-\t      }\n-\t      break;\n-\t    case tcc_binary:\n-\t      {\n-\t\ttree op0 = TREE_OPERAND (result, 0);\n-\t\ttree op1 = TREE_OPERAND (result, 1);\n-\t\tif (!EXPR_P (op0) && !EXPR_P (op1))\n-\t\t  return result;\n-\t      }\n-\t      break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-    }\n+  if (result && valid_gimple_expression_p (result))\n+    return result;\n+\n   return NULL_TREE;\n }\n "}]}