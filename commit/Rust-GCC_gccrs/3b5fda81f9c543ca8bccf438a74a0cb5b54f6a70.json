{"sha": "3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1ZmRhODFmOWM1NDNjYThiY2NmNDM4YTc0YTBjYjViNTRmNmE3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-11T18:17:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-11T18:17:43Z"}, "message": "re PR middle-end/44071 (ICE with asm goto and __builtin_unreachable())\n\n\tPR middle-end/44071\n\t* cfglayout.c (fixup_reorder_chain): Allow asm goto to have\n\tno fallthru edge.\n\t* cfgcleanup.c (try_optimize_cfg): When in cfglayout mode\n\toptimizing away empty bb with no successors, move over its\n\tfooter chain to fallthru predecessor.\n\t* cfgrtl.c (patch_jump_insn): Update also REG_LABEL_OPERAND.\n\t(rtl_split_edge): For asm goto call patch_jump_insn even if\n\tsplitting fallthru edge.\n\n\t* c-c++-common/asmgoto-4.c: New test.\n\t* gcc.target/i386/pr44071.c: New test.\n\nFrom-SVN: r159288", "tree": {"sha": "1cb4796f120b34f94f9e016946901fdcba7136f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cb4796f120b34f94f9e016946901fdcba7136f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3895ec538abb365483f1ff862f1fe0e78a3119d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3895ec538abb365483f1ff862f1fe0e78a3119d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3895ec538abb365483f1ff862f1fe0e78a3119d5"}], "stats": {"total": 209, "additions": 205, "deletions": 4}, "files": [{"sha": "24f210b3cc604567066a7ef59495011ee55b9eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -1,5 +1,15 @@\n 2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/44071\n+\t* cfglayout.c (fixup_reorder_chain): Allow asm goto to have\n+\tno fallthru edge.\n+\t* cfgcleanup.c (try_optimize_cfg): When in cfglayout mode\n+\toptimizing away empty bb with no successors, move over its\n+\tfooter chain to fallthru predecessor.\n+\t* cfgrtl.c (patch_jump_insn): Update also REG_LABEL_OPERAND.\n+\t(rtl_split_edge): For asm goto call patch_jump_insn even if\n+\tsplitting fallthru edge.\n+\n \tPR c++/44059\n \t* config/elfos.h (ASM_DECLARE_OBJECT_NAME): Use qnu_unique_object\n \teven for DECL_ONE_ONLY DECL_ARTIFICIAL !TREE_READONLY decls."}, {"sha": "75f56519a26ca79ef847ea11b7d861c6e61f99ea", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -1999,6 +1999,25 @@ try_optimize_cfg (int mode)\n \t\t      && single_succ_edge (ENTRY_BLOCK_PTR)->dest != b))\n \t\t{\n \t\t  c = b->prev_bb;\n+\t\t  if ((mode & CLEANUP_CFGLAYOUT)\n+\t\t      && EDGE_COUNT (b->preds) > 0\n+\t\t      && b->il.rtl->footer\n+\t\t      && BARRIER_P (b->il.rtl->footer))\n+\t\t    {\n+\t\t      edge e;\n+\t\t      edge_iterator ei;\n+\n+\t\t      FOR_EACH_EDGE (e, ei, b->preds)\n+\t\t\tif (e->flags & EDGE_FALLTHRU)\n+\t\t\t  {\n+\t\t\t    if (e->src->il.rtl->footer == NULL)\n+\t\t\t      {\n+\t\t\t\te->src->il.rtl->footer = b->il.rtl->footer;\n+\t\t\t\tb->il.rtl->footer = NULL;\n+\t\t\t      }\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t    }\n \t\t  delete_basic_block (b);\n \t\t  if (!(mode & CLEANUP_CFGLAYOUT))\n \t\t    changed = true;"}, {"sha": "7ba289f1a58cede8010eecda7907f6a9bbb7d65d", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -1,5 +1,5 @@\n /* Basic block reordering routines for the GNU compiler.\n-   Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -861,8 +861,11 @@ fixup_reorder_chain (void)\n \t    }\n \t  else if (extract_asm_operands (PATTERN (bb_end_insn)) != NULL)\n \t    {\n-\t      /* If the old fallthru is still next, nothing to do.  */\n-\t      if (bb->aux == e_fall->dest\n+\t      /* If the old fallthru is still next or if\n+\t\t asm goto doesn't have a fallthru (e.g. when followed by\n+\t\t __builtin_unreachable ()), nothing to do.  */\n+\t      if (! e_fall\n+\t\t  || bb->aux == e_fall->dest\n \t\t  || e_fall->dest == EXIT_BLOCK_PTR)\n \t\tcontinue;\n "}, {"sha": "abdbf9d8598f8785e69c3793328d427462913ac0", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -994,6 +994,9 @@ patch_jump_insn (rtx insn, rtx old_label, basic_block new_bb)\n \t      && !find_reg_note (insn, REG_LABEL_TARGET, new_label))\n \t    add_reg_note (insn, REG_LABEL_TARGET, new_label);\n \t}\n+      while ((note = find_reg_note (insn, REG_LABEL_OPERAND, old_label))\n+\t     != NULL_RTX)\n+\tXEXP (note, 0) = new_label;\n     }\n   else\n     {\n@@ -1407,7 +1410,22 @@ rtl_split_edge (edge edge_in)\n       gcc_assert (redirected);\n     }\n   else\n-    redirect_edge_succ (edge_in, bb);\n+    {\n+      if (edge_in->src != ENTRY_BLOCK_PTR)\n+\t{\n+\t  /* For asm goto even splitting of fallthru edge might\n+\t     need insn patching, as other labels might point to the\n+\t     old label.  */\n+\t  rtx last = BB_END (edge_in->src);\n+\t  if (last\n+\t      && JUMP_P (last)\n+\t      && edge_in->dest != EXIT_BLOCK_PTR\n+\t      && extract_asm_operands (PATTERN (last)) != NULL_RTX\n+\t      && patch_jump_insn (last, before, bb))\n+\t    df_set_bb_dirty (edge_in->src);\n+\t}\n+      redirect_edge_succ (edge_in, bb);\n+    }\n \n   return bb;\n }"}, {"sha": "ee0fab84ca2518698ff436f1e7b78157379f822d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -1,5 +1,9 @@\n 2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/44071\n+\t* c-c++-common/asmgoto-4.c: New test.\n+\t* gcc.target/i386/pr44071.c: New test.\n+\n \tPR c++/44062\n \t* c-c++-common/Wunused-var-7.c: New test.\n \t* g++.dg/warn/Wunused-var-9.C: New test."}, {"sha": "4532bf196eee1a29a7816db8f1dd0c0572985000", "filename": "gcc/testsuite/c-c++-common/asmgoto-4.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasmgoto-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasmgoto-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasmgoto-4.c?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -0,0 +1,44 @@\n+/* PR middle-end/44071 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline int\n+f1 (void)\n+{\n+  asm goto (\"\" : : : : l1, l2);\n+  __builtin_unreachable ();\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+int\n+b1 (int x)\n+{\n+  if (f1 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}\n+\n+static inline int\n+f2 (void)\n+{\n+  asm goto (\"\" : : : : l1, l2);\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+int\n+b2 (int x)\n+{\n+  if (f2 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}"}, {"sha": "514c5e2fd2c1017a71e61924b17868b71e1bcbf8", "filename": "gcc/testsuite/gcc.target/i386/pr44071.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44071.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44071.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44071.c?ref=3b5fda81f9c543ca8bccf438a74a0cb5b54f6a70", "patch": "@@ -0,0 +1,103 @@\n+/* PR middle-end/44071 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline int\n+f1 (void)\n+{\n+  asm goto (\"jmp %l[l1]\" : : : : l1, l2);\n+  __builtin_unreachable ();\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+b1 (int x)\n+{\n+  if (f1 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}\n+\n+static inline int\n+f2 (void)\n+{\n+  asm goto (\"jmp %l[l2]\" : : : : l1, l2);\n+  __builtin_unreachable ();\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+b2 (int x)\n+{\n+  if (f2 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}\n+\n+static inline int\n+f3 (void)\n+{\n+  asm goto (\"jmp %l[l1]\" : : : : l1, l2);\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+b3 (int x)\n+{\n+  if (f3 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}\n+\n+static inline int\n+f4 (void)\n+{\n+  asm goto (\"jmp %l[l2]\" : : : : l1, l2);\n+ l1:\n+  return 1;\n+ l2:\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+b4 (int x)\n+{\n+  if (f4 () || x == 6)\n+    x = 1;\n+  else\n+    x = 2;\n+  return x;\n+}\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int x;\n+  asm (\"\" : \"=r\" (x) : \"0\" (0));\n+  if (b1 (x) != 1 || b1 (x + 6) != 1)\n+    abort ();\n+  if (b2 (x) != 2 || b2 (x + 6) != 1)\n+    abort ();\n+  if (b3 (x) != 1 || b3 (x + 6) != 1)\n+    abort ();\n+  if (b4 (x) != 2 || b4 (x + 6) != 1)\n+    abort ();\n+  return 0;\n+}"}]}