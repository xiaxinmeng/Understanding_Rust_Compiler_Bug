{"sha": "d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkMzQ4YTlmZTQ3MGI3YzZlYWQ1OWExMGRiOTYwNzhhOWZhZjdjYQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2012-09-04T22:57:09Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-09-04T22:57:09Z"}, "message": "random: Add __gnu_cxx::beta_distribution<> class.\n\n\n\t* libstdc++-v3/include/ext/random: Add __gnu_cxx::beta_distribution<>\n\tclass.\n\t* libstdc++-v3/include/ext/random.tcc: Add out-of-line functions for\n\t__gnu_cxx::beta_distribution<>.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\toperators/equal.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\toperators/serialize.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\toperators/inequal.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\tcons/parms.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\tcons/default.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\trequirements/typedefs.cc: New file.\n\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n\trequirements/explicit_instantiation/1.cc: New file.\n\nFrom-SVN: r190954", "tree": {"sha": "86d1c07db6cb8a031f319e70087871c5c52ce29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d1c07db6cb8a031f319e70087871c5c52ce29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abd16fb1120cfebd99f4efc9eba9b326fdf05715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd16fb1120cfebd99f4efc9eba9b326fdf05715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd16fb1120cfebd99f4efc9eba9b326fdf05715"}], "stats": {"total": 612, "additions": 612, "deletions": 0}, "files": [{"sha": "dd5c526e71c28655e565495f0260b6ab44262f49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -1,3 +1,24 @@\n+2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* libstdc++-v3/include/ext/random: Add __gnu_cxx::beta_distribution<>\n+\tclass.\n+\t* libstdc++-v3/include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::beta_distribution<>.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\toperators/equal.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\toperators/serialize.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\toperators/inequal.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\tcons/parms.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\tcons/default.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\trequirements/typedefs.cc: New file.\n+\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\trequirements/explicit_instantiation/1.cc: New file.\n+\n 2012-09-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR bootstrap/54453"}, {"sha": "9563e6a05001940b654fb6f865922beb00d2b5cb", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -374,6 +374,223 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    0x3bd2b64bU, 0x0c64b1e4U>\n     sfmt216091_64;\n \n+\n+  /**\n+   * @brief A beta continuous distribution for random numbers.\n+   *\n+   * The formula for the beta probability density function is:\n+   * @f[\n+   *     p(x|\\alpha,\\beta) = \\frac{1}{B(\\alpha,\\beta)}\n+   *                         x^{\\alpha - 1} (1 - x)^{\\beta - 1}\n+   * @f]\n+   */\n+  template<typename _RealType = double>\n+    class beta_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef beta_distribution<_RealType> distribution_type;\n+\tfriend class beta_distribution<_RealType>;\n+\n+\texplicit\n+\tparam_type(_RealType __alpha_val = _RealType(1),\n+\t\t   _RealType __beta_val = _RealType(1))\n+\t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_beta > _RealType(0));\n+\t}\n+\n+\t_RealType\n+\talpha() const\n+\t{ return _M_alpha; }\n+\n+\t_RealType\n+\tbeta() const\n+\t{ return _M_beta; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_alpha == __p2._M_alpha\n+\t\t  && __p1._M_beta == __p2._M_beta); }\n+\n+      private:\n+\tvoid\n+\t_M_initialize();\n+\n+\t_RealType _M_alpha;\n+\t_RealType _M_beta;\n+      };\n+\n+    public:\n+      /**\n+       * @brief Constructs a beta distribution with parameters\n+       * @f$\\alpha@f$ and @f$\\beta@f$.\n+       */\n+      explicit\n+      beta_distribution(_RealType __alpha_val = _RealType(1),\n+\t\t\t_RealType __beta_val = _RealType(1))\n+      : _M_param(__alpha_val, __beta_val)\n+      { }\n+\n+      explicit\n+      beta_distribution(const param_type& __p)\n+      : _M_param(__p)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Returns the @f$\\alpha@f$ of the distribution.\n+       */\n+      _RealType\n+      alpha() const\n+      { return _M_param.alpha(); }\n+\n+      /**\n+       * @brief Returns the @f$\\beta@f$ of the distribution.\n+       */\n+      _RealType\n+      beta() const\n+      { return _M_param.beta(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return result_type(0); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return result_type(1); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->param()); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two beta distributions have the same\n+       *        parameters and the sequences that would be generated\n+       *        are equal.\n+       */\n+      friend bool\n+      operator==(const beta_distribution& __d1,\n+\t\t const beta_distribution& __d2)\n+      { return __d1.param() == __d2.param(); }\n+\n+      /**\n+       * @brief Inserts a %beta_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %beta_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::beta_distribution<_RealType1>& __x);\n+\n+      /**\n+       * @brief Extracts a %beta_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %beta_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::beta_distribution<_RealType1>& __x);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  /**\n+   * @brief Return true if two beta distributions are different.\n+   */\n+   template<typename _RealType>\n+     inline bool\n+     operator!=(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n+\t\tconst __gnu_cxx::beta_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "1776b0df163013db8711af5447fedda58bf551a3", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -438,6 +438,106 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  /**\n+   * Iteration method due to M.D. J<o:>hnk.\n+   *\n+   * M.D. J<o:>hnk, Erzeugung von betaverteilten und gammaverteilten\n+   * Zufallszahlen, Metrika, Volume 8, 1964\n+   */\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename beta_distribution<_RealType>::result_type\n+      beta_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tresult_type __x, __y;\n+\tdo\n+\t  {\n+\t    __x = std::exp(std::log(__aurng()) / __param.alpha());\n+\t    __y = std::exp(std::log(__aurng()) / __param.beta());\n+\t  }\n+\twhile (__x + __y > result_type(1));\n+\n+\treturn __x / (__x + __y);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      beta_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    result_type __x, __y;\n+\t    do\n+\t      {\n+\t\t__x = std::exp(std::log(__aurng()) / __param.alpha());\n+\t\t__y = std::exp(std::log(__aurng()) / __param.beta());\n+\t      }\n+\t    while (__x + __y > result_type(1));\n+\n+\t    *__f++ = __x / (__x + __y);\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::beta_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.alpha() << __space << __x.beta();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::beta_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __alpha_val, __beta_val;\n+      __is >> __alpha_val >> __beta_val;\n+      __x.param(typename __gnu_cxx::beta_distribution<_RealType>::\n+\t\tparam_type(__alpha_val, __beta_val));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "3aa2d851e9873b5a4cb7538d924fb4a5b211ddec", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::beta_distribution<> u;\n+  VERIFY( u.alpha() == 1.0 );\n+  VERIFY( u.beta() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d6c0b18da76c9604965363fad160aa00de9f599", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/cons/parms.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::beta_distribution<> u(1.5, 3.0);\n+  VERIFY( u.alpha() == 1.5 );\n+  VERIFY( u.beta() == 3.0 );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a31a6545d53a8f6aac37a8c9d3f3e3495b0867db", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fequal.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::beta_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d7eda3935bf12db331adf67d7757643317b5b02b", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Finequal.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::beta_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dd2fed8d590a4e54b7f62de03f44b84301e2384c", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/operators/serialize.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Foperators%2Fserialize.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  __gnu_cxx::beta_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a572b1478aeb0c0211aabebcae6f99ab9cdb4d30", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::beta_distribution<float>;\n+template class __gnu_cxx::beta_distribution<double>;\n+template class __gnu_cxx::beta_distribution<long double>;"}, {"sha": "33b18ae535c63dc6357a71aafef15cdebfff2c51", "filename": "libstdc++-v3/testsuite/26_numerics/random/beta_distribution/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d348a9fe470b7c6ead59a10db96078a9faf7ca/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbeta_distribution%2Frequirements%2Ftypedefs.cc?ref=d4d348a9fe470b7c6ead59a10db96078a9faf7ca", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::beta_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}