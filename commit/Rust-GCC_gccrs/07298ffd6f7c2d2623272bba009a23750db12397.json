{"sha": "07298ffd6f7c2d2623272bba009a23750db12397", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyOThmZmQ2ZjdjMmQyNjIzMjcyYmJhMDA5YTIzNzUwZGIxMjM5Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-07-14T08:36:47Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-07-14T08:36:47Z"}, "message": "call.c (build_conditional_expr_1): Handle the case with 1 vector and 2 scalars.\n\n2013-07-14  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/cp/\n\t* call.c (build_conditional_expr_1): Handle the case with 1 vector\n\tand 2 scalars. Call save_expr before building a vector.\n\t* typeck.c (cp_build_binary_op): Check complain before complaining.\n\ngcc/testsuite/\n\t* g++.dg/ext/vector19.C: Adapt.\n\t* g++.dg/ext/vector23.C: New testcase.\n\nFrom-SVN: r200947", "tree": {"sha": "9d42f5227429601994deb716a51f062f0728c539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d42f5227429601994deb716a51f062f0728c539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07298ffd6f7c2d2623272bba009a23750db12397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07298ffd6f7c2d2623272bba009a23750db12397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07298ffd6f7c2d2623272bba009a23750db12397", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07298ffd6f7c2d2623272bba009a23750db12397/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52d676b6c27f1c160c82251559606beec8089384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d676b6c27f1c160c82251559606beec8089384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d676b6c27f1c160c82251559606beec8089384"}], "stats": {"total": 119, "additions": 107, "deletions": 12}, "files": [{"sha": "b7de099ac62d801e978b268a180f217474ba0ed1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -1,3 +1,9 @@\n+2013-07-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* call.c (build_conditional_expr_1): Handle the case with 1 vector\n+\tand 2 scalars. Call save_expr before building a vector.\n+\t* typeck.c (cp_build_binary_op): Check complain before complaining.\n+\n 2013-07-13  Lubos Lunak  <l.lunak@suse.cz>\n \n \tPR c++/55203"}, {"sha": "3bb90ef99ee6155c75845a4120d8001d22337e16", "filename": "gcc/cp/call.c", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -4405,10 +4405,54 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n       if (TREE_CODE (arg2_type) != VECTOR_TYPE\n \t  && TREE_CODE (arg3_type) != VECTOR_TYPE)\n \t{\n-\t  if (complain & tf_error)\n-\t    error_at (loc, \"at least one operand of a vector conditional \"\n-\t\t      \"operator must be a vector\");\n-\t  return error_mark_node;\n+\t  /* Rely on the error messages of the scalar version.  */\n+\t  tree scal = build_conditional_expr_1 (loc, integer_one_node,\n+\t\t\t\t\t\torig_arg2, orig_arg3, complain);\n+\t  if (scal == error_mark_node)\n+\t    return error_mark_node;\n+\t  tree stype = TREE_TYPE (scal);\n+\t  tree ctype = TREE_TYPE (arg1_type);\n+\t  if (TYPE_SIZE (stype) != TYPE_SIZE (ctype)\n+\t      || (!INTEGRAL_TYPE_P (stype) && !SCALAR_FLOAT_TYPE_P (stype)))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror_at (loc, \"inferred scalar type %qT is not an integer or \"\n+\t\t\t  \"floating point type of the same size as %qT\", stype,\n+\t\t\t  COMPARISON_CLASS_P (arg1)\n+\t\t\t  ? TREE_TYPE (TREE_TYPE (TREE_OPERAND (arg1, 0)))\n+\t\t\t  : ctype);\n+\t      return error_mark_node;\n+\t    }\n+\n+\t  tree vtype = build_opaque_vector_type (stype,\n+\t\t\t TYPE_VECTOR_SUBPARTS (arg1_type));\n+\t  /* We could pass complain & tf_warning to unsafe_conversion_p,\n+\t     but the warnings (like Wsign-conversion) have already been\n+\t     given by the scalar build_conditional_expr_1. We still check\n+\t     unsafe_conversion_p to forbid truncating long long -> float.  */\n+\t  if (unsafe_conversion_p (stype, arg2, false))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror_at (loc, \"conversion of scalar %qT to vector %qT \"\n+\t\t\t       \"involves truncation\", arg2_type, vtype);\n+\t      return error_mark_node;\n+\t    }\n+\t  if (unsafe_conversion_p (stype, arg3, false))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror_at (loc, \"conversion of scalar %qT to vector %qT \"\n+\t\t\t       \"involves truncation\", arg3_type, vtype);\n+\t      return error_mark_node;\n+\t    }\n+\n+\t  arg2 = cp_convert (stype, arg2, complain);\n+\t  arg2 = save_expr (arg2);\n+\t  arg2 = build_vector_from_val (vtype, arg2);\n+\t  arg2_type = vtype;\n+\t  arg3 = cp_convert (stype, arg3, complain);\n+\t  arg3 = save_expr (arg3);\n+\t  arg3 = build_vector_from_val (vtype, arg3);\n+\t  arg3_type = vtype;\n \t}\n \n       if ((TREE_CODE (arg2_type) == VECTOR_TYPE)\n@@ -4424,13 +4468,15 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t\treturn error_mark_node;\n \t      case stv_firstarg:\n \t\t{\n+\t\t  arg2 = save_expr (arg2);\n \t\t  arg2 = convert (TREE_TYPE (arg3_type), arg2);\n \t\t  arg2 = build_vector_from_val (arg3_type, arg2);\n \t\t  arg2_type = TREE_TYPE (arg2);\n \t\t  break;\n \t\t}\n \t      case stv_secondarg:\n \t\t{\n+\t\t  arg3 = save_expr (arg3);\n \t\t  arg3 = convert (TREE_TYPE (arg2_type), arg3);\n \t\t  arg3 = build_vector_from_val (arg2_type, arg3);\n \t\t  arg3_type = TREE_TYPE (arg3);"}, {"sha": "ef781a3c644d9d097e2af8c964fa48b8f0736a69", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -4535,23 +4535,38 @@ cp_build_binary_op (location_t location,\n \t  if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n \t\t\t\t\t\t\t  TREE_TYPE (type1)))\n \t    {\n-\t      error_at (location, \"comparing vectors with different \"\n-\t\t\t\t  \"element types\");\n-\t      inform (location, \"operand types are %qT and %qT\", type0, type1);\n+\t      if (complain & tf_error)\n+\t\t{\n+\t\t  error_at (location, \"comparing vectors with different \"\n+\t\t\t\t      \"element types\");\n+\t\t  inform (location, \"operand types are %qT and %qT\",\n+\t\t\t  type0, type1);\n+\t\t}\n \t      return error_mark_node;\n \t    }\n \n \t  if (TYPE_VECTOR_SUBPARTS (type0) != TYPE_VECTOR_SUBPARTS (type1))\n \t    {\n-\t      error_at (location, \"comparing vectors with different \"\n-\t\t\t\t  \"number of elements\");\n-\t      inform (location, \"operand types are %qT and %qT\", type0, type1);\n+\t      if (complain & tf_error)\n+\t\t{\n+\t\t  error_at (location, \"comparing vectors with different \"\n+\t\t\t\t      \"number of elements\");\n+\t\t  inform (location, \"operand types are %qT and %qT\",\n+\t\t\t  type0, type1);\n+\t\t}\n \t      return error_mark_node;\n \t    }\n \n \t  /* Always construct signed integer vector type.  */\n \t  intt = c_common_type_for_size (GET_MODE_BITSIZE\n \t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n+\t  if (!intt)\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror_at (location, \"could not find an integer type \"\n+\t\t\t  \"of the same size as %qT\", TREE_TYPE (type0));\n+\t      return error_mark_node;\n+\t    }\n \t  result_type = build_opaque_vector_type (intt,\n \t\t\t\t\t\t  TYPE_VECTOR_SUBPARTS (type0));\n \t  converted = 1;"}, {"sha": "8f2d5a907ba15ff1d8b2ade06a8d21c43d03ad3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -1,3 +1,8 @@\n+2013-07-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* g++.dg/ext/vector19.C: Adapt.\n+\t* g++.dg/ext/vector23.C: New testcase.\n+\n 2013-07-12  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/55771"}, {"sha": "4fd937fa27e4a4e9765dff894a2a4ecabe5fc104", "filename": "gcc/testsuite/g++.dg/ext/vector19.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -37,8 +37,7 @@ void j (vec2 *x, vec2 *y, vec2 *z, vec *t)\n   *x = (*y < *z) ? *x : 4.2; /* { dg-error \"\" } */\n   *y = (*x < *z) ? 2.5 : *y; /* { dg-error \"\" } */\n   *t = *t ? *t : *t; /* { dg-error \"\" } */\n-  *z = (*x < *z) ? '1' : '0'; /* { dg-error \"\" } */\n-  // The last one may eventually be accepted.\n+  *z = (*x < *z) ? '1' : '0';\n }\n \n template <class A, class B>"}, {"sha": "4e18427546f61621d8444e2a22859b0897227c35", "filename": "gcc/testsuite/g++.dg/ext/vector23.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07298ffd6f7c2d2623272bba009a23750db12397/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C?ref=07298ffd6f7c2d2623272bba009a23750db12397", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu++1y -Wsign-conversion\" } */\n+\n+typedef double vecd __attribute__((vector_size(4*sizeof(double))));\n+typedef float vecf __attribute__((vector_size(8*sizeof(float))));\n+typedef long vecl __attribute__((vector_size(4*sizeof(long))));\n+typedef short vecs __attribute__((vector_size(8*sizeof(short))));\n+typedef char vecc __attribute__((vector_size(16*sizeof(char))));\n+\n+auto f(vecf*a,float d,long long i){\n+  return (*a<0)?d:i; // { dg-error \"truncation\" }\n+}\n+auto g(vecc*a){\n+  return (*a<0)?3LL:42UL; // { dg-error \"inferred scalar type\" }\n+}\n+auto h(vecd*a){\n+  return (*a<0)?'a':'c'; // { dg-error \"inferred scalar type \\[^\\\\n\\]*double\" }\n+}\n+auto i(vecc*a){\n+  return (*a<0)?1:0.; // { dg-error \"inferred scalar type\" }\n+}\n+auto j(vecl*a,long i,unsigned long k){\n+  return (*a<0)?i:k; // { dg-warning \"may change the sign\" }\n+}"}]}