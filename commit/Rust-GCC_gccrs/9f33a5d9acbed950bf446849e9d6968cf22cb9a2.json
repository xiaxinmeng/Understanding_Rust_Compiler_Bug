{"sha": "9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzM2E1ZDlhY2JlZDk1MGJmNDQ2ODQ5ZTlkNjk2OGNmMjJjYjlhMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-21T09:51:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-21T09:51:14Z"}, "message": "Pass rtx and index to read-md.c iterator routines\n\nThe read-md.c iterator callbacks previously used a void * to record the\nposition at which the iterator value should be installed.  This doesn't\nscale easily to the SUBREG_BYTE representation used by a later patch,\nso this patch replaces the void * with both an rtx and an operand\nnumber.  The operand number is ignored for modes and codes.\n\n2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* read-md.h (md_reader::record_potential_iterator_use): Replace\n\tpointer argument with an rtx and an index.\n\t* read-rtl.c (iterator_group::apply_iterator): Likewise.\n\t(apply_mode_iterator): Likewise.\n\t(apply_code_iterator): Likewise.\n\t(apply_int_iterator): Likewise.\n\t(apply_subst_iterator): Likewise.\n\t(record_iterator_use): Likewise.\n\t(record_attribute_use): Likewise.\n\t(md_reader::record_potential_iterator_use): Likewise.  Update calls\n\tto record_iterator_use and apply_iterator.\n\t(iterator_use): Replace ptr with x and index.\n\t(attribute_use): Likewise.\n\t(apply_attribute_uses): Update calls to apply_iterator.\n\t(apply_iterators): Likewise.  Update initialization of iterator_use.\n\t(rtx_reader::read_rtx_code): Update calls to record_iterator_use\n\tand record_potential_iterator_use.\n\t(rtx_reader::read_rtx_operand): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251219", "tree": {"sha": "a9ed53967318f72eaa0abd88f2b9a81fcd2a139e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ed53967318f72eaa0abd88f2b9a81fcd2a139e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/comments", "author": null, "committer": null, "parents": [{"sha": "38fbc003332134ef0a04d319fb71b297f67c6988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fbc003332134ef0a04d319fb71b297f67c6988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38fbc003332134ef0a04d319fb71b297f67c6988"}], "stats": {"total": 115, "additions": 76, "deletions": 39}, "files": [{"sha": "4d27ba57e64a4bf5a96e346afafc1a85bcf46bff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "patch": "@@ -1,3 +1,26 @@\n+2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* read-md.h (md_reader::record_potential_iterator_use): Replace\n+\tpointer argument with an rtx and an index.\n+\t* read-rtl.c (iterator_group::apply_iterator): Likewise.\n+\t(apply_mode_iterator): Likewise.\n+\t(apply_code_iterator): Likewise.\n+\t(apply_int_iterator): Likewise.\n+\t(apply_subst_iterator): Likewise.\n+\t(record_iterator_use): Likewise.\n+\t(record_attribute_use): Likewise.\n+\t(md_reader::record_potential_iterator_use): Likewise.  Update calls\n+\tto record_iterator_use and apply_iterator.\n+\t(iterator_use): Replace ptr with x and index.\n+\t(attribute_use): Likewise.\n+\t(apply_attribute_uses): Update calls to apply_iterator.\n+\t(apply_iterators): Likewise.  Update initialization of iterator_use.\n+\t(rtx_reader::read_rtx_code): Update calls to record_iterator_use\n+\tand record_potential_iterator_use.\n+\t(rtx_reader::read_rtx_operand): Likewise.\n+\n 2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "9791ac27e30c57924a59b0d13b1e957bf72befc6", "filename": "gcc/read-md.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "patch": "@@ -162,7 +162,8 @@ class md_reader\n   rtx copy_rtx_for_iterators (rtx original);\n   void read_conditions ();\n   void record_potential_iterator_use (struct iterator_group *group,\n-\t\t\t\t      void *ptr, const char *name);\n+\t\t\t\t      rtx x, unsigned int index,\n+\t\t\t\t      const char *name);\n   struct mapping *read_mapping (struct iterator_group *group, htab_t table);\n \n   const char *get_top_level_filename () const { return m_toplevel_fname; }"}, {"sha": "3e13e4cc2d60008ccc3378684d42936e4b6221bd", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33a5d9acbed950bf446849e9d6968cf22cb9a2/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=9f33a5d9acbed950bf446849e9d6968cf22cb9a2", "patch": "@@ -76,17 +76,22 @@ struct iterator_group {\n      return its integer value.  */\n   int (*find_builtin) (const char *);\n \n-  /* Make the given pointer use the given iterator value.  */\n-  void (*apply_iterator) (void *, int);\n+  /* Make the given rtx use the iterator value given by the third argument.\n+     If the iterator applies to operands, the second argument gives the\n+     operand index, otherwise it is ignored.  */\n+  void (*apply_iterator) (rtx, unsigned int, int);\n };\n \n /* Records one use of an iterator.  */\n struct iterator_use {\n   /* The iterator itself.  */\n   struct mapping *iterator;\n \n-  /* The location of the use, as passed to the apply_iterator callback.  */\n-  void *ptr;\n+  /* The location of the use, as passed to the apply_iterator callback.\n+     The index is the number of the operand that used the iterator\n+     if applicable, otherwise it is ignored.  */\n+  rtx x;\n+  unsigned int index;\n };\n \n /* Records one use of an attribute (the \"<[iterator:]attribute>\" syntax)\n@@ -98,8 +103,11 @@ struct attribute_use {\n   /* The name of the attribute, possibly with an \"iterator:\" prefix.  */\n   const char *value;\n \n-  /* The location of the use, as passed to GROUP's apply_iterator callback.  */\n-  void *ptr;\n+  /* The location of the use, as passed to GROUP's apply_iterator callback.\n+     The index is the number of the operand that used the iterator\n+     if applicable, otherwise it is ignored.  */\n+  rtx x;\n+  unsigned int index;\n };\n \n /* This struct is used to link subst_attr named ATTR_NAME with\n@@ -150,9 +158,9 @@ find_mode (const char *name)\n }\n \n static void\n-apply_mode_iterator (void *loc, int mode)\n+apply_mode_iterator (rtx x, unsigned int, int mode)\n {\n-  PUT_MODE ((rtx) loc, (machine_mode) mode);\n+  PUT_MODE (x, (machine_mode) mode);\n }\n \n /* In compact dumps, the code of insns is prefixed with \"c\", giving \"cinsn\",\n@@ -193,9 +201,9 @@ find_code (const char *name)\n }\n \n static void\n-apply_code_iterator (void *loc, int code)\n+apply_code_iterator (rtx x, unsigned int, int code)\n {\n-  PUT_CODE ((rtx) loc, (enum rtx_code) code);\n+  PUT_CODE (x, (enum rtx_code) code);\n }\n \n /* Implementations of the iterator_group callbacks for ints.  */\n@@ -212,24 +220,23 @@ find_int (const char *name)\n }\n \n static void\n-apply_int_iterator (void *loc, int value)\n+apply_int_iterator (rtx x, unsigned int index, int value)\n {\n-  *(int *)loc = value;\n+  XINT (x, index) = value;\n }\n \n #ifdef GENERATOR_FILE\n \n /* This routine adds attribute or does nothing depending on VALUE.  When\n    VALUE is 1, it does nothing - the first duplicate of original\n    template is kept untouched when it's subjected to a define_subst.\n-   When VALUE isn't 1, the routine modifies RTL-template LOC, adding\n+   When VALUE isn't 1, the routine modifies RTL-template RT, adding\n    attribute, named exactly as define_subst, which later will be\n    applied.  If such attribute has already been added, then no the\n    routine has no effect.  */\n static void\n-apply_subst_iterator (void *loc, int value)\n+apply_subst_iterator (rtx rt, unsigned int, int value)\n {\n-  rtx rt = (rtx)loc;\n   rtx new_attr;\n   rtvec attrs_vec, new_attrs_vec;\n   int i;\n@@ -516,7 +523,7 @@ apply_attribute_uses (void)\n       v = map_attr_string (ause->value);\n       if (!v)\n \tfatal_with_file_and_line (\"unknown iterator value `%s'\", ause->value);\n-      ause->group->apply_iterator (ause->ptr,\n+      ause->group->apply_iterator (ause->x, ause->index,\n \t\t\t\t   ause->group->find_builtin (v->string));\n     }\n }\n@@ -583,7 +590,8 @@ apply_iterators (rtx original, vec<rtx> *queue)\n \t  if (iuse->iterator->group == &substs)\n \t    continue;\n \t  v = iuse->iterator->current_value;\n-\t  iuse->iterator->group->apply_iterator (iuse->ptr, v->number);\n+\t  iuse->iterator->group->apply_iterator (iuse->x, iuse->index,\n+\t\t\t\t\t\t v->number);\n \t  condition = rtx_reader_ptr->join_c_conditions (condition, v->string);\n \t}\n       apply_attribute_uses ();\n@@ -598,9 +606,11 @@ apply_iterators (rtx original, vec<rtx> *queue)\n \t  v = iuse->iterator->current_value;\n \t  if (iuse->iterator->group == &substs)\n \t    {\n-\t      iuse->ptr = x;\n+\t      iuse->x = x;\n+\t      iuse->index = 0;\n \t      current_iterator_name = iuse->iterator->name;\n-\t      iuse->iterator->group->apply_iterator (iuse->ptr, v->number);\n+\t      iuse->iterator->group->apply_iterator (iuse->x, iuse->index,\n+\t\t\t\t\t\t     v->number);\n \t    }\n \t}\n       /* Add the new rtx to the end of the queue.  */\n@@ -860,33 +870,36 @@ validate_const_wide_int (const char *string)\n     fatal_with_file_and_line (\"invalid hex constant \\\"%s\\\"\\n\", string);\n }\n \n-/* Record that PTR uses iterator ITERATOR.  */\n+/* Record that X uses iterator ITERATOR.  If the use is in an operand\n+   of X, INDEX is the index of that operand, otherwise it is ignored.  */\n \n static void\n-record_iterator_use (struct mapping *iterator, void *ptr)\n+record_iterator_use (struct mapping *iterator, rtx x, unsigned int index)\n {\n-  struct iterator_use iuse = {iterator, ptr};\n+  struct iterator_use iuse = {iterator, x, index};\n   iterator_uses.safe_push (iuse);\n }\n \n-/* Record that PTR uses attribute VALUE, which must match a built-in\n-   value from group GROUP.  */\n+/* Record that X uses attribute VALUE, which must match a built-in\n+   value from group GROUP.  If the use is in an operand of X, INDEX\n+   is the index of that operand, otherwise it is ignored.  */\n \n static void\n-record_attribute_use (struct iterator_group *group, void *ptr,\n-\t\t      const char *value)\n+record_attribute_use (struct iterator_group *group, rtx x,\n+\t\t      unsigned int index, const char *value)\n {\n-  struct attribute_use ause = {group, value, ptr};\n+  struct attribute_use ause = {group, value, x, index};\n   attribute_uses.safe_push (ause);\n }\n \n /* Interpret NAME as either a built-in value, iterator or attribute\n-   for group GROUP.  PTR is the value to pass to GROUP's apply_iterator\n-   callback.  */\n+   for group GROUP.  X and INDEX are the values to pass to GROUP's\n+   apply_iterator callback.  */\n \n void\n md_reader::record_potential_iterator_use (struct iterator_group *group,\n-\t\t\t\t\t  void *ptr, const char *name)\n+\t\t\t\t\t  rtx x, unsigned int index,\n+\t\t\t\t\t  const char *name)\n {\n   struct mapping *m;\n   size_t len;\n@@ -897,15 +910,16 @@ md_reader::record_potential_iterator_use (struct iterator_group *group,\n       /* Copy the attribute string into permanent storage, without the\n \t angle brackets around it.  */\n       obstack_grow0 (&m_string_obstack, name + 1, len - 2);\n-      record_attribute_use (group, ptr, XOBFINISH (&m_string_obstack, char *));\n+      record_attribute_use (group, x, index,\n+\t\t\t    XOBFINISH (&m_string_obstack, char *));\n     }\n   else\n     {\n       m = (struct mapping *) htab_find (group->iterators, &name);\n       if (m != 0)\n-\trecord_iterator_use (m, ptr);\n+\trecord_iterator_use (m, x, index);\n       else\n-\tgroup->apply_iterator (ptr, group->find_builtin (name));\n+\tgroup->apply_iterator (x, index, group->find_builtin (name));\n     }\n }\n \n@@ -1288,7 +1302,7 @@ rtx_reader::read_rtx_code (const char *code_name)\n     }\n \n   if (iterator)\n-    record_iterator_use (iterator, return_rtx);\n+    record_iterator_use (iterator, return_rtx, 0);\n \n   /* Check for flags. */\n   read_flags (return_rtx);\n@@ -1317,7 +1331,7 @@ rtx_reader::read_rtx_code (const char *code_name)\n   if (c == ':')\n     {\n       read_name (&name);\n-      record_potential_iterator_use (&modes, return_rtx, name.string);\n+      record_potential_iterator_use (&modes, return_rtx, 0, name.string);\n     }\n   else\n     unread_char (c);\n@@ -1555,7 +1569,7 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n \t\t  m = 0;\n \t      }\n \t    if (m != 0)\n-\t      record_iterator_use (m, return_rtx);\n+\t      record_iterator_use (m, return_rtx, 0);\n \t  }\n #endif /* #ifdef GENERATOR_FILE */\n \n@@ -1596,8 +1610,7 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n     case 'n':\n       /* Can be an iterator or an integer constant.  */\n       read_name (&name);\n-      record_potential_iterator_use (&ints, &XINT (return_rtx, idx),\n-\t\t\t\t     name.string);\n+      record_potential_iterator_use (&ints, return_rtx, idx, name.string);\n       break;\n \n     case 'r':"}]}