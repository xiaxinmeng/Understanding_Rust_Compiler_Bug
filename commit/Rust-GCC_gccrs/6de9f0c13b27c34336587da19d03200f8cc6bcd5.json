{"sha": "6de9f0c13b27c34336587da19d03200f8cc6bcd5", "node_id": "C_kwDOANBUbNoAKDZkZTlmMGMxM2IyN2MzNDMzNjU4N2RhMTlkMDMyMDBmOGNjNmJjZDU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-02T06:44:37Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-01T09:09:10Z"}, "message": "Append target/optimize attr to the current cmdline.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (parse_optimize_options): Combine optimize\n\toptions with what was provided on the command line.\n\ngcc/ChangeLog:\n\n\t* toplev.c (toplev::main): Save decoded optimization options.\n\t* toplev.h (save_opt_decoded_options): New.\n\t* doc/extend.texi: Be more clear about optimize and target\n\tattributes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512er-vrsqrt28ps-3.c: Disable fast math.\n\t* gcc.target/i386/avx512er-vrsqrt28ps-5.c: Likewise.\n\t* gcc.target/i386/attr-optimize.c: New test.", "tree": {"sha": "3823c11c2c1796289a7516f9a94976ee601b2bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3823c11c2c1796289a7516f9a94976ee601b2bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de9f0c13b27c34336587da19d03200f8cc6bcd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de9f0c13b27c34336587da19d03200f8cc6bcd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de9f0c13b27c34336587da19d03200f8cc6bcd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de9f0c13b27c34336587da19d03200f8cc6bcd5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "7b99a5546eaa15233cb3aa61b75ec697bfb80d79", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -5904,9 +5904,22 @@ parse_optimize_options (tree args, bool attr_p)\n       j++;\n     }\n   decoded_options_count = j;\n-  /* And apply them.  */\n+\n+  /* Merge the decoded options with save_decoded_options.  */\n+  unsigned save_opt_count = save_opt_decoded_options.length ();\n+  unsigned merged_decoded_options_count\n+    = save_opt_count + decoded_options_count;\n+  cl_decoded_option *merged_decoded_options\n+    = XNEWVEC (cl_decoded_option, merged_decoded_options_count);\n+\n+  for (unsigned i = 0; i < save_opt_count; ++i)\n+    merged_decoded_options[i] = save_opt_decoded_options[i];\n+  for (unsigned i = 0; i < decoded_options_count; ++i)\n+    merged_decoded_options[save_opt_count + i] = decoded_options[i];\n+\n+   /* And apply them.  */\n   decode_options (&global_options, &global_options_set,\n-\t\t  decoded_options, decoded_options_count,\n+\t\t  merged_decoded_options, merged_decoded_options_count,\n \t\t  input_location, global_dc, NULL);\n   free (decoded_options);\n "}, {"sha": "133b82eef381cdd763647066f56239e9fb32ce8d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -3663,7 +3663,10 @@ take function pointer arguments.\n @cindex @code{optimize} function attribute\n The @code{optimize} attribute is used to specify that a function is to\n be compiled with different optimization options than specified on the\n-command line.  Valid arguments are constant non-negative integers and\n+command line.  The optimize attribute arguments of a function behave\n+behave as if appended to the command-line.\n+\n+Valid arguments are constant non-negative integers and\n strings.  Each numeric argument specifies an optimization @var{level}.\n Each @var{string} argument consists of one or more comma-separated\n substrings.  Each substring that begins with the letter @code{O} refers\n@@ -3867,7 +3870,8 @@ This attribute prevents stack protection code for the function.\n Multiple target back ends implement the @code{target} attribute\n to specify that a function is to\n be compiled with different target options than specified on the\n-command line.  One or more strings can be provided as arguments.\n+command line.  The original target command-line options are ignored.\n+One or more strings can be provided as arguments.\n Each string consists of one or more comma-separated suffixes to\n the @code{-m} prefix jointly forming the name of a machine-dependent\n option.  @xref{Submodel Options,,Machine-Dependent Options}."}, {"sha": "f5db028f1fdc007134b6195e2b8e0c6865f6fd64", "filename": "gcc/testsuite/gcc.target/i386/attr-optimize.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-optimize.c?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O1 -ftree-slp-vectorize -march=znver1 -fdump-tree-optimized\" } */\n+\n+/* Use -O2, but -ftree-slp-vectorize option should be preserved and used.  */\n+#pragma GCC optimize \"-O2\"\n+\n+typedef struct {\n+  long n[4];\n+} secp256k1_fe;\n+\n+void *a;\n+int c;\n+static void\n+fn1(secp256k1_fe *p1, int p2)\n+{\n+  p1->n[0] = p1->n[1] = p2;\n+}\n+void\n+fn2()\n+{\n+  fn1(a, !c);\n+}\n+\n+/* { dg-final { scan-tree-dump { MEM <vector\\(2\\) long int> \\[[^]]*\\] = } \"optimized\" } } */"}, {"sha": "40aefb50844428bc01553ec97c67f1151efb05a2", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ps-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-3.c?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -8,7 +8,7 @@\n #define MAX 1000\n #define EPS 0.00001\n \n-__attribute__ ((noinline, optimize (1)))\n+__attribute__ ((noinline, optimize (1, \"-fno-fast-math\")))\n void static\n compute_rsqrt_ref (float *a, float *r)\n {"}, {"sha": "498f4d50aa52082990da0f919a44ad220ee86d80", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ps-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-5.c?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -8,7 +8,7 @@\n #define MAX 1000\n #define EPS 0.00001\n \n-__attribute__ ((noinline, optimize (1)))\n+__attribute__ ((noinline, optimize (1, \"-fno-fast-math\")))\n void static\n compute_sqrt_ref (float *a, float *r)\n {"}, {"sha": "78bb7e9749b611ea71d1213cf302bab83f6703b5", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -121,6 +121,9 @@ static bool no_backend;\n struct cl_decoded_option *save_decoded_options;\n unsigned int save_decoded_options_count;\n \n+/* Vector of saved Optimization decoded command line options.  */\n+auto_vec<cl_decoded_option> save_opt_decoded_options;\n+\n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize in process_options ().  */\n #define AUTODETECT_VALUE 2\n@@ -2334,6 +2337,11 @@ toplev::main (int argc, char **argv)\n \t\t\t\t\t\t&save_decoded_options,\n \t\t\t\t\t\t&save_decoded_options_count);\n \n+  /* Save Optimization decoded options.  */\n+  for (unsigned i = 0; i < save_decoded_options_count; ++i)\n+    if (cl_options[save_decoded_options[i].opt_index].flags & CL_OPTIMIZATION)\n+      save_opt_decoded_options.safe_push (save_decoded_options[i]);\n+\n   /* Perform language-specific options initialization.  */\n   lang_hooks.init_options (save_decoded_options_count, save_decoded_options);\n "}, {"sha": "c44c5ff926a97fdb4af1e8e6c0975e9b3162049e", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de9f0c13b27c34336587da19d03200f8cc6bcd5/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=6de9f0c13b27c34336587da19d03200f8cc6bcd5", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Decoded options, and number of such options.  */\n extern struct cl_decoded_option *save_decoded_options;\n extern unsigned int save_decoded_options_count;\n+extern auto_vec<cl_decoded_option> save_opt_decoded_options;\n \n class timer;\n "}]}