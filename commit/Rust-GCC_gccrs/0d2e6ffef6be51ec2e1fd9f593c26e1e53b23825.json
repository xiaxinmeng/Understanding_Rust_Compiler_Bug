{"sha": "0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyZTZmZmVmNmJlNTFlYzJlMWZkOWY1OTNjMjZlMWU1M2IyMzgyNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-09T10:22:25Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-09T10:22:25Z"}, "message": "2004-10-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/CharArrayWriter.java\n\t(resize): Removed redundant 'final' modifier.\n\t* java/io/DataInputStream.java\n\t(readFully): Throw IndexOutOfBoundsException of len < 0.\n\t* java/io/FileDescriptor.java,\n\tjava/io/FileInputStream.java,\n\tjava/io/FileOutputStream.java,\n\tjava/io/ObjectOutputStream.java,\n\tjava/io/ObjectStreamClass.java,\n\tjava/io/PipedInputStream.java,\n\tjava/io/RandomAccessFile.java:\n\tReorganized import statements.\n\nFrom-SVN: r88817", "tree": {"sha": "04d93d4345002da39f40c4b245b32b95cf71792d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d93d4345002da39f40c4b245b32b95cf71792d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/comments", "author": null, "committer": null, "parents": [{"sha": "f507003ab2cbdd93f272983727237516c054b34b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f507003ab2cbdd93f272983727237516c054b34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f507003ab2cbdd93f272983727237516c054b34b"}], "stats": {"total": 124, "additions": 73, "deletions": 51}, "files": [{"sha": "856ac3ae5ec05a7e12fa1ef59a6e2600e518c506", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -1,3 +1,18 @@\n+2004-10-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/CharArrayWriter.java\n+\t(resize): Removed redundant 'final' modifier.\n+\t* java/io/DataInputStream.java\n+\t(readFully): Throw IndexOutOfBoundsException of len < 0.\n+\t* java/io/FileDescriptor.java,\n+\tjava/io/FileInputStream.java,\n+\tjava/io/FileOutputStream.java,\n+\tjava/io/ObjectOutputStream.java,\n+\tjava/io/ObjectStreamClass.java,\n+\tjava/io/PipedInputStream.java,\n+\tjava/io/RandomAccessFile.java:\n+\tReorganized import statements.\n+\n 2004-10-09  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/rmi/rmic/RMIC.java,"}, {"sha": "7453996c346416017eb45ddc001a705098cc0afc", "filename": "libjava/java/io/CharArrayWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharArrayWriter.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -249,7 +249,7 @@ public void writeTo (Writer out) throws IOException\n    * application programmers by setting their initial buffer size big\n    * enough to hold everything if possible.\n    */\n-  private final void resize (int len)\n+  private void resize (int len)\n   {\n     if (count + len >= buf.length)\n       {"}, {"sha": "b74fabe63f6dc392ce47c23c411951ebd069e85a", "filename": "libjava/java/io/DataInputStream.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FDataInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FDataInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInputStream.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -279,6 +279,9 @@ public final void readFully (byte[] b) throws IOException\n    */\n   public final void readFully (byte[] buf, int offset, int len) throws IOException\n   {\n+    if (len < 0)\n+      throw new IndexOutOfBoundsException(\"Negative length: \" + len);\n+    \n     while (len > 0)\n       {\n \t// in.read will block until some data is available."}, {"sha": "e3c1a18bd9ff005a4ec8177a6aed9ac6036a965f", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -39,9 +39,10 @@\n \n package java.io;\n \n+import gnu.java.nio.channels.FileChannelImpl;\n+\n import java.nio.channels.ByteChannel;\n import java.nio.channels.FileChannel;\n-import gnu.java.nio.channels.FileChannelImpl;\n \n /**\n  * This class represents an opaque file handle as a Java class.  It should"}, {"sha": "41d240352c757136cf1871940ae7c317e1eb6bec", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -38,9 +38,10 @@\n \n package java.io;\n \n-import java.nio.channels.FileChannel;\n import gnu.java.nio.channels.FileChannelImpl;\n \n+import java.nio.channels.FileChannel;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com."}, {"sha": "d81d6d19bcf7e60cb7debcf23fa02dcfc5a560da", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -38,9 +38,10 @@\n \n package java.io;\n \n-import java.nio.channels.FileChannel;\n import gnu.java.nio.channels.FileChannelImpl;\n \n+import java.nio.channels.FileChannel;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1."}, {"sha": "91c985856544f58ed08037ed94797b94bb53845c", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -1,5 +1,6 @@\n /* ObjectOutputStream.java -- Class used to write serialized objects\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,19 +39,18 @@\n \n package java.io;\n \n+import gnu.classpath.Configuration;\n+import gnu.java.io.ObjectIdentityWrapper;\n+import gnu.java.lang.reflect.TypeSignature;\n+import gnu.java.security.action.SetAccessibleAction;\n+\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.lang.reflect.InvocationTargetException;\n-import java.security.PrivilegedAction;\n+import java.lang.reflect.Method;\n import java.security.AccessController;\n import java.util.Hashtable;\n \n-import gnu.java.io.ObjectIdentityWrapper;\n-import gnu.java.lang.reflect.TypeSignature;\n-import gnu.java.security.action.SetAccessibleAction;\n-import gnu.classpath.Configuration;\n-\n /**\n  * An <code>ObjectOutputStream</code> can be used to write objects\n  * as well as primitive data in a platform-independent manner to an"}, {"sha": "d133afc08f93335d29e9275ef1c3d39dfa0c3be7", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -2,43 +2,48 @@\n    about serialized objects.\n    Copyright (C) 1998, 1999, 2000, 2001, 2003  Free Software Foundation, Inc.\n \n-   This file is part of GNU Classpath.\n+This file is part of GNU Classpath.\n \n-   GNU Classpath is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n-   GNU Classpath is distributed in the hope that it will be useful, but\n-   WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-   General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GNU Classpath; see the file COPYING.  If not, write to the\n-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.\n-\n-   Linking this library statically or dynamically with other modules is\n-   making a combined work based on this library.  Thus, the terms and\n-   conditions of the GNU General Public License cover the whole\n-   combination.\n-\n-   As a special exception, the copyright holders of this library give you\n-   permission to link this library with independent modules to produce an\n-   executable, regardless of the license terms of these independent\n-   modules, and to copy and distribute the resulting executable under\n-   terms of your choice, provided that you also meet, for each linked\n-   independent module, the terms and conditions of the license of that\n-   module.  An independent module is a module which is not derived from\n-   or based on this library.  If you modify this library, you may extend\n-   this exception to your version of the library, but you are not\n-   obligated to do so.  If you do not wish to do so, delete this\n-   exception statement from your version. */\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n \n package java.io;\n \n+import gnu.java.io.NullOutputStream;\n+import gnu.java.lang.reflect.TypeSignature;\n+import gnu.java.security.action.SetAccessibleAction;\n+import gnu.java.security.provider.Gnu;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n@@ -55,11 +60,6 @@\n import java.util.Comparator;\n import java.util.Hashtable;\n import java.util.Vector;\n-import gnu.java.io.NullOutputStream;\n-import gnu.java.lang.reflect.TypeSignature;\n-import gnu.java.security.action.SetAccessibleAction;\n-import gnu.java.security.provider.Gnu;\n-\n \n public class ObjectStreamClass implements Serializable\n {"}, {"sha": "97700a07ff10d61ae69cde100748145b30beb252", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -35,12 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+package java.io;\n+\n // NOTE: This implementation is very similar to that of PipedReader.  If you \n // fix a bug in here, chances are you should make a similar change to the \n // PipedReader code.\n \n-package java.io;\n-\n /**\n   * An input stream that reads its bytes from an output stream\n   * to which it is connected. "}, {"sha": "a99abd2d6b490357f3b9c3b39177994e3e02f862", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "patch": "@@ -38,9 +38,10 @@\n \n package java.io;\n \n-import java.nio.channels.FileChannel;\n import gnu.java.nio.channels.FileChannelImpl;\n \n+import java.nio.channels.FileChannel;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status: Believe complete and correct to 1.1."}]}