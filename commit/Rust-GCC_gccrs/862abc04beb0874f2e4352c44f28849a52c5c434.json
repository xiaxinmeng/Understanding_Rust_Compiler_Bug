{"sha": "862abc04beb0874f2e4352c44f28849a52c5c434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyYWJjMDRiZWIwODc0ZjJlNDM1MmM0NGYyODg0OWE1MmM1YzQzNA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:18:29Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:18:29Z"}, "message": "[AArch64] Improve code generation for float16 vector code\n\ngcc/:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>,\n\taarch64_dup_lane<mode>, aarch64_dup_lane_<vswap_width_name><mode>,\n\taarch64_simd_vec_set<mode>, vec_set<mode>, vec_perm_const<mode>,\n\tvec_init<mode>, *aarch64_simd_ld1r<mode>, vec_extract<mode>): Add\n\tV4HF and V8HF variants to iterator.\n\n\t* config/aarch64/aarch64.c (aarch64_evpc_dup): Add V4HF and V8HF cases.\n\n\t* config/aarch64/iterators.md (VDQF_F16): New.\n\t(VSWAP_WIDTH, vswap_width_name): Add V4HF and V8HF cases.\n\nFrom-SVN: r227550", "tree": {"sha": "bf2e641ff14bdb561987a390c8a0d0b76c73c841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf2e641ff14bdb561987a390c8a0d0b76c73c841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/862abc04beb0874f2e4352c44f28849a52c5c434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862abc04beb0874f2e4352c44f28849a52c5c434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862abc04beb0874f2e4352c44f28849a52c5c434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862abc04beb0874f2e4352c44f28849a52c5c434/comments", "author": null, "committer": null, "parents": [{"sha": "7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "f9203d705117243531a3d18bf16a0a03f407c490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=862abc04beb0874f2e4352c44f28849a52c5c434", "patch": "@@ -1,3 +1,16 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>,\n+\taarch64_dup_lane<mode>, aarch64_dup_lane_<vswap_width_name><mode>,\n+\taarch64_simd_vec_set<mode>, vec_set<mode>, vec_perm_const<mode>,\n+\tvec_init<mode>, *aarch64_simd_ld1r<mode>, vec_extract<mode>): Add\n+\tV4HF and V8HF variants to iterator.\n+\n+\t* config/aarch64/aarch64.c (aarch64_evpc_dup): Add V4HF and V8HF cases.\n+\n+\t* config/aarch64/iterators.md (VDQF_F16): New.\n+\t(VSWAP_WIDTH, vswap_width_name): Add V4HF and V8HF cases.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/arm_neon.h (vreinterpret_p8_f16, vreinterpret_p16_f16,"}, {"sha": "426bcb6242731c4a6e9c28d7cb5aa0ae372df721", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=862abc04beb0874f2e4352c44f28849a52c5c434", "patch": "@@ -53,18 +53,19 @@\n )\n \n (define_insn \"aarch64_simd_dup<mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (vec_duplicate:VDQF (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VDQF_F16\n+\t  (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_dup<q>\")]\n )\n \n (define_insn \"aarch64_dup_lane<mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n-\t(vec_duplicate:VALL\n+  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VALL_F16\n \t  (vec_select:<VEL>\n-\t    (match_operand:VALL 1 \"register_operand\" \"w\")\n+\t    (match_operand:VALL_F16 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n           )))]\n   \"TARGET_SIMD\"\n@@ -76,8 +77,8 @@\n )\n \n (define_insn \"aarch64_dup_lane_<vswap_width_name><mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n-\t(vec_duplicate:VALL\n+  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VALL_F16\n \t  (vec_select:<VEL>\n \t    (match_operand:<VSWAP_WIDTH> 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n@@ -834,11 +835,11 @@\n )\n \n (define_insn \"aarch64_simd_vec_set<mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (vec_merge:VDQF\n-\t    (vec_duplicate:VDQF\n+  [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w\")\n+\t(vec_merge:VDQF_F16\n+\t    (vec_duplicate:VDQF_F16\n \t\t(match_operand:<VEL> 1 \"register_operand\" \"w\"))\n-\t    (match_operand:VDQF 3 \"register_operand\" \"0\")\n+\t    (match_operand:VDQF_F16 3 \"register_operand\" \"0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -851,7 +852,7 @@\n )\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VDQF 0 \"register_operand\" \"+w\")\n+  [(match_operand:VDQF_F16 0 \"register_operand\" \"+w\")\n    (match_operand:<VEL> 1 \"register_operand\" \"w\")\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n@@ -4670,9 +4671,9 @@\n ;; vec_perm support\n \n (define_expand \"vec_perm_const<mode>\"\n-  [(match_operand:VALL 0 \"register_operand\")\n-   (match_operand:VALL 1 \"register_operand\")\n-   (match_operand:VALL 2 \"register_operand\")\n+  [(match_operand:VALL_F16 0 \"register_operand\")\n+   (match_operand:VALL_F16 1 \"register_operand\")\n+   (match_operand:VALL_F16 2 \"register_operand\")\n    (match_operand:<V_cmp_result> 3)]\n   \"TARGET_SIMD\"\n {\n@@ -4936,7 +4937,7 @@\n ;; Standard pattern name vec_init<mode>.\n \n (define_expand \"vec_init<mode>\"\n-  [(match_operand:VALL 0 \"register_operand\" \"\")\n+  [(match_operand:VALL_F16 0 \"register_operand\" \"\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_SIMD\"\n {\n@@ -4945,8 +4946,8 @@\n })\n \n (define_insn \"*aarch64_simd_ld1r<mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n-\t(vec_duplicate:VALL\n+  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VALL_F16\n \t  (match_operand:<VEL> 1 \"aarch64_simd_struct_operand\" \"Utv\")))]\n   \"TARGET_SIMD\"\n   \"ld1r\\\\t{%0.<Vtype>}, %1\"\n@@ -4993,7 +4994,7 @@\n \n (define_expand \"vec_extract<mode>\"\n   [(match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"\")\n-   (match_operand:VALL 1 \"register_operand\" \"\")\n+   (match_operand:VALL_F16 1 \"register_operand\" \"\")\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n {"}, {"sha": "feb7b28db1e1d2b1aafae12ce3238a45e615f389", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=862abc04beb0874f2e4352c44f28849a52c5c434", "patch": "@@ -11906,6 +11906,8 @@ aarch64_evpc_dup (struct expand_vec_perm_d *d)\n     case V4SImode: gen = gen_aarch64_dup_lanev4si; break;\n     case V2SImode: gen = gen_aarch64_dup_lanev2si; break;\n     case V2DImode: gen = gen_aarch64_dup_lanev2di; break;\n+    case V8HFmode: gen = gen_aarch64_dup_lanev8hf; break;\n+    case V4HFmode: gen = gen_aarch64_dup_lanev4hf; break;\n     case V4SFmode: gen = gen_aarch64_dup_lanev4sf; break;\n     case V2SFmode: gen = gen_aarch64_dup_lanev2sf; break;\n     case V2DFmode: gen = gen_aarch64_dup_lanev2df; break;"}, {"sha": "0210602a84077219192abbb5b23f6c19077d7577", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862abc04beb0874f2e4352c44f28849a52c5c434/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=862abc04beb0874f2e4352c44f28849a52c5c434", "patch": "@@ -82,7 +82,10 @@\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n (define_mode_iterator PTR [(SI \"ptr_mode == SImode\") (DI \"ptr_mode == DImode\")])\n \n-;; Vector Float modes.\n+;; Vector Float modes suitable for moving, loading and storing.\n+(define_mode_iterator VDQF_F16 [V4HF V8HF V2SF V4SF V2DF])\n+\n+;; Vector Float modes, barring HF modes.\n (define_mode_iterator VDQF [V2SF V4SF V2DF])\n \n ;; Vector Float modes, and DF.\n@@ -627,12 +630,14 @@\n \t\t\t\t(V2SI \"V4SI\") (V4SI  \"V2SI\")\n \t\t\t\t(DI   \"V2DI\") (V2DI  \"DI\")\n \t\t\t\t(V2SF \"V4SF\") (V4SF  \"V2SF\")\n+\t\t\t\t(V4HF \"V8HF\") (V8HF  \"V4HF\")\n \t\t\t\t(DF   \"V2DF\") (V2DF  \"DF\")])\n \n (define_mode_attr vswap_width_name [(V8QI \"to_128\") (V16QI \"to_64\")\n \t\t\t\t    (V4HI \"to_128\") (V8HI  \"to_64\")\n \t\t\t\t    (V2SI \"to_128\") (V4SI  \"to_64\")\n \t\t\t\t    (DI   \"to_128\") (V2DI  \"to_64\")\n+\t\t\t\t    (V4HF \"to_128\") (V8HF  \"to_64\")\n \t\t\t\t    (V2SF \"to_128\") (V4SF  \"to_64\")\n \t\t\t\t    (DF   \"to_128\") (V2DF  \"to_64\")])\n "}]}