{"sha": "455cd615c2dde26432ae38a5529a73789df52106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1Y2Q2MTVjMmRkZTI2NDMyYWUzOGE1NTI5YTczNzg5ZGY1MjEwNg==", "commit": {"author": {"name": "Adam King", "email": "aking@dreammechanics.com", "date": "2002-04-07T11:27:00Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-04-07T11:27:00Z"}, "message": "natSystem.cc (init_properties): Call new function _Jv_platform_initProperties.\n\n2002-04-07  Adam King <aking@dreammechanics.com>\n\n\t* java/lang/natSystem.cc (init_properties): Call new function\n\t_Jv_platform_initProperties.\n\t* win32 (_Jv_platform_initProperties): New function that adds Win32\n\tsupport for the System properties os.name, os.arch, os.version,\n\tuser.name, user.home, and user.dir.\n\t* include/posix.h, include/win32.h, posix.cc: New function\n\t_Jv_platform_initProperties.\n\nFrom-SVN: r51989", "tree": {"sha": "069e876f78e2a8d34d5f4bb0c46db26f878a30bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/069e876f78e2a8d34d5f4bb0c46db26f878a30bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/455cd615c2dde26432ae38a5529a73789df52106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455cd615c2dde26432ae38a5529a73789df52106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455cd615c2dde26432ae38a5529a73789df52106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455cd615c2dde26432ae38a5529a73789df52106/comments", "author": null, "committer": null, "parents": [{"sha": "1abbe5b516d49d696910b03440f65c5819f8d755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abbe5b516d49d696910b03440f65c5819f8d755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1abbe5b516d49d696910b03440f65c5819f8d755"}], "stats": {"total": 183, "additions": 167, "deletions": 16}, "files": [{"sha": "e29b4d295e1446dbe1f4f57d769d87e3dc9fdac6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -1,3 +1,13 @@\n+2002-04-07  Adam King <aking@dreammechanics.com>\n+\n+\t* java/lang/natSystem.cc (init_properties): Call new function\n+\t_Jv_platform_initProperties.\n+\t* win32 (_Jv_platform_initProperties): New function that adds Win32 \n+\tsupport for the System properties os.name, os.arch, os.version, \n+\tuser.name, user.home, and user.dir.\n+\t* include/posix.h, include/win32.h, posix.cc: New function\n+\t_Jv_platform_initProperties.\n+\n 2002-04-06  Mark Wielaard <mark@klomp.org>\n \n \t* java/lang/Character,java (isDefined): getType() != UNASSIGNED."}, {"sha": "8fa782fc6622383c16312b62404f10c86ac8dfbd", "filename": "libjava/include/posix.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -34,10 +34,12 @@ details.  */\n #include <fcntl.h>\n \n #include <gcj/cni.h>\n+#include <java/util/Properties.h>\n \n extern int _Jv_select (int n, fd_set *, fd_set *, fd_set *, struct timeval *);\n extern jlong _Jv_platform_gettimeofday ();\n extern void _Jv_platform_initialize (void);\n+extern void _Jv_platform_initProperties (java::util::Properties*);\n \n inline void\n _Jv_platform_close_on_exec (jint fd)"}, {"sha": "9a8a769091447534b26f074578ec4a54b4bfc41a", "filename": "libjava/include/win32.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -17,8 +17,10 @@ details.  */\n #undef __INSIDE_CYGWIN__\n #include <winsock.h>\n #include <gcj/cni.h>\n+#include <java/util/Properties.h>\n \n extern void _Jv_platform_initialize (void);\n+extern void _Jv_platform_initProperties (java::util::Properties*);\n extern jlong _Jv_platform_gettimeofday ();\n \n inline void"}, {"sha": "b8467f2077b8e7f3eb8aa782940631eba581cfa8", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -333,22 +333,6 @@ java::lang::System::init_properties (void)\n   \n   SET (\"file.encoding\", default_file_encoding);\n \n-#ifdef WIN32\n-  SET (\"file.separator\", \"\\\\\");\n-  SET (\"path.separator\", \";\");\n-  SET (\"line.separator\", \"\\r\\n\");\n-  SET (\"java.io.tmpdir\", \"C:\\\\temp\");\n-#else\n-  // Unix.\n-  SET (\"file.separator\", \"/\");\n-  SET (\"path.separator\", \":\");\n-  SET (\"line.separator\", \"\\n\");\n-  char *tmpdir = ::getenv(\"TMPDIR\");\n-  if (! tmpdir)\n-    tmpdir = \"/tmp\";\n-  SET (\"java.io.tmpdir\", tmpdir);\n-#endif\n-\n #ifdef HAVE_UNAME\n   struct utsname u;\n   if (! uname (&u))\n@@ -515,6 +499,10 @@ java::lang::System::init_properties (void)\n       newprops->put(JvNewStringLatin1 (\"java.class.path\"),\n \t\t      sb->toString ());\n     }\n+\n+  // Allow platform specific settings and overrides.\n+  _Jv_platform_initProperties (newprops);\n+\n   // Finally, set the field. This ensures that concurrent getProperty() \n   // calls will return initialized values without requiring them to be \n   // synchronized in the common case."}, {"sha": "ebff1c9ec79606088e1ef2ebe246d27f32eb3e74", "filename": "libjava/posix.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -12,12 +12,14 @@ details.  */\n \n #include \"posix.h\"\n \n+#include <stdlib.h>\n #include <errno.h>\n #include <signal.h>\n \n #include <jvm.h>\n #include <java/lang/Thread.h>\n #include <java/io/InterruptedIOException.h>\n+#include <java/util/Properties.h>\n \n #if defined (ECOS)\n extern \"C\" unsigned long long _clock (void);\n@@ -62,6 +64,23 @@ _Jv_platform_initialize (void)\n #endif\n }\n \n+// Set platform-specific System properties.\n+void\n+_Jv_platform_initProperties (java::util::Properties* newprops)\n+{\n+  // A convenience define.\n+#define SET(Prop,Val) \\\n+  newprops->put(JvNewStringLatin1 (Prop), JvNewStringLatin1 (Val))\n+\n+  SET (\"file.separator\", \"/\");\n+  SET (\"path.separator\", \":\");\n+  SET (\"line.separator\", \"\\n\");\n+  char *tmpdir = ::getenv(\"TMPDIR\");\n+  if (! tmpdir)\n+    tmpdir = \"/tmp\";\n+  SET (\"java.io.tmpdir\", tmpdir);\n+}\n+\n static inline void\n internal_gettimeofday (struct timeval *result)\n {"}, {"sha": "78f57b348dd40e26b8775c357a5b3f547a090aae", "filename": "libjava/win32.cc", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455cd615c2dde26432ae38a5529a73789df52106/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=455cd615c2dde26432ae38a5529a73789df52106", "patch": "@@ -11,9 +11,11 @@ details.  */\n #include <config.h>\n #include <jvm.h>\n #include <sys/timeb.h>\n+#include <stdlib.h>\n \n #include \"platform.h\"\n #include <java/lang/ArithmeticException.h>\n+#include <java/util/Properties.h>\n \n static LONG CALLBACK\n win32_exception_handler (LPEXCEPTION_POINTERS e)\n@@ -62,3 +64,131 @@ __mingwthr_key_dtor (DWORD, void (*) (void *))\n   //        approximately 24 bytes per thread created.\n   return 0;\n }\n+\n+// Set platform-specific System properties.\n+void\n+_Jv_platform_initProperties (java::util::Properties* newprops)\n+{\n+  // A convenience define.\n+#define SET(Prop,Val) \\\n+  newprops->put(JvNewStringLatin1 (Prop), JvNewStringLatin1 (Val))\n+\n+  SET (\"file.separator\", \"\\\\\");\n+  SET (\"path.separator\", \";\");\n+  SET (\"line.separator\", \"\\r\\n\");\n+  SET (\"java.io.tmpdir\", \"C:\\\\temp\");\n+\n+  // Use GetCurrentDirectory to set 'user.dir'.\n+  DWORD buflen = MAX_PATH;\n+  char* buffer = (char *) malloc (buflen);\n+  if (buffer != NULL)\n+    {\n+      if (GetCurrentDirectory (buflen, buffer))\n+          SET (\"user.dir\", buffer);\n+      free (buffer);\n+    }\n+  \n+  // Use GetUserName to set 'user.name'.\n+  buflen = 257;  // UNLEN + 1\n+  buffer = (char *) malloc (buflen);\n+  if (buffer != NULL)\n+    {\n+      if (GetUserName (buffer, &buflen))\n+        SET (\"user.name\", buffer);\n+      free (buffer);\n+    }\n+\n+  // According to the api documentation for 'GetWindowsDirectory()', the \n+  // environmental variable HOMEPATH always specifies the user's home \n+  // directory or a default directory.  On the 3 windows machines I checked\n+  // only 1 had it set.  If it's not set, JDK1.3.1 seems to set it to\n+  // the windows directory, so we'll do the same.\n+  char* userHome = NULL;\n+  if ((userHome = ::getenv( \"HOMEPATH\" )) == NULL )\n+    {\n+      // Check HOME since it's what I use.\n+      if ((userHome = ::getenv( \"HOME\" )) == NULL )\n+        {\n+          // Not found - use the windows directory like JDK1.3.1 does.\n+          char* winHome = (char *)malloc (MAX_PATH);\n+          if ( winHome != NULL )\n+            {\n+              if (GetWindowsDirectory (winHome, MAX_PATH))\n+                  SET (\"user.home\", winHome);\n+              free (winHome);\n+            }\n+        }\n+     }\n+  if( userHome != NULL )\n+    SET (\"user.home\", userHome);\n+\n+  // Get and set some OS info.\n+  OSVERSIONINFO osvi;\n+  ZeroMemory (&osvi, sizeof(OSVERSIONINFO));\n+  osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+  if (GetVersionEx (&osvi))\n+    {\n+      char *buffer = (char *) malloc (30);\n+      if (buffer != NULL)\n+        {\n+          sprintf (buffer, \"%d.%d\", (int)osvi.dwMajorVersion, (int)osvi.dwMinorVersion);\n+          SET (\"os.version\", buffer);\n+          free (buffer);\n+        }\n+\n+      switch (osvi.dwPlatformId)\n+        {\n+          case VER_PLATFORM_WIN32_WINDOWS:\n+            if (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 0)\n+              SET (\"os.name\", \"Windows 95\");\n+            else if (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 10)\n+              SET (\"os.name\", \"Windows 98\");\n+            else if (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 90)\n+              SET (\"os.name\", \"Windows Me\");\n+            else\n+              SET (\"os.name\", \"Windows ??\"); \n+            break;\n+\n+          case VER_PLATFORM_WIN32_NT:\n+            if (osvi.dwMajorVersion <= 4 )\n+              SET (\"os.name\", \"Windows NT\");\n+            else if (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 0)\n+              SET (\"os.name\", \"Windows 2000\");\n+            else if (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1)\n+              SET (\"os.name\", \"Windows XP\");\n+            else\n+              SET (\"os.name\", \"Windows NT ??\");\n+            break;\n+\n+          default:\n+            SET (\"os.name\", \"Windows UNKNOWN\");\n+            break;\n+       }\n+  }\n+\n+  // Set the OS architecture.\n+  SYSTEM_INFO si;\n+  GetSystemInfo (&si);\n+  switch( si.dwProcessorType )\n+    {\n+      case PROCESSOR_INTEL_386:\n+        SET (\"os.arch\", \"i386\");\n+        break;\n+      case PROCESSOR_INTEL_486:\n+        SET (\"os.arch\", \"i486\");\n+        break;\n+      case PROCESSOR_INTEL_PENTIUM:\n+        SET (\"os.arch\", \"i586\");\n+        break;\n+      case PROCESSOR_MIPS_R4000:\t\n+        SET (\"os.arch\", \"MIPS4000\");\n+        break;\n+      case PROCESSOR_ALPHA_21064:\n+        SET (\"os.arch\", \"ALPHA\");\n+        break;\n+      default:\n+        SET (\"os.arch\", \"unknown\");\n+        break;\n+    }\n+}\n+"}]}