{"sha": "c3b247b44564c667972e0ed6f7673530378813e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiMjQ3YjQ0NTY0YzY2Nzk3MmUwZWQ2Zjc2NzM1MzAzNzg4MTNlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-13T22:54:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-13T22:54:03Z"}, "message": "function.c (put_var_into_stack): Use type_for_mode to calculate part_type.\n\n        * function.c (put_var_into_stack): Use type_for_mode to calculate\n        part_type.  Use MEM_SET_IN_STRUCT_P.\n        * expr.c (store_field): Handle CONCAT.\n        (store_constructor): Use fields_length.\n        * tree.c (fields_length): New fn.\n        * tree.h: Declare it.\n\nFrom-SVN: r32514", "tree": {"sha": "fdc1be5ec41c1b886780e4d8de0c601ad6838917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdc1be5ec41c1b886780e4d8de0c601ad6838917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3b247b44564c667972e0ed6f7673530378813e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b247b44564c667972e0ed6f7673530378813e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b247b44564c667972e0ed6f7673530378813e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b247b44564c667972e0ed6f7673530378813e5/comments", "author": null, "committer": null, "parents": [{"sha": "45b966db65e4ab054d31f01f65b7a98023dbcb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b966db65e4ab054d31f01f65b7a98023dbcb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b966db65e4ab054d31f01f65b7a98023dbcb54"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "9ce13dab78c9e95a0709704bf02ef9cc6380cff9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3b247b44564c667972e0ed6f7673530378813e5", "patch": "@@ -1,3 +1,12 @@\n+2000-03-13  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* function.c (put_var_into_stack): Use type_for_mode to calculate\n+\tpart_type.  Use MEM_SET_IN_STRUCT_P.\n+\t* expr.c (store_field): Handle CONCAT.\n+\t(store_constructor): Use fields_length.\n+\t* tree.c (fields_length): New fn.\n+\t* tree.h: Declare it.\n+\n 2000-03-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* Makefile.in (LIBCPP_OBJS): Add cpplex.o."}, {"sha": "5ba5ee610cf75dc92ed997c3842aba35acf3612e", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c3b247b44564c667972e0ed6f7673530378813e5", "patch": "@@ -4151,7 +4151,7 @@ store_constructor (exp, target, align, cleared, size)\n \t clear the whole structure first.  */\n       else if (size > 0\n \t       && ((list_length (CONSTRUCTOR_ELTS (exp))\n-\t\t    != list_length (TYPE_FIELDS (type)))\n+\t\t    != fields_length (type))\n \t\t   || mostly_zeros_p (exp)))\n \t{\n \t  if (! cleared)\n@@ -4758,6 +4758,15 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n       return blk_object;\n     }\n \n+  if (GET_CODE (target) == CONCAT)\n+    {\n+      /* We're storing into a struct containing a single __complex.  */\n+\n+      if (bitpos != 0)\n+\tabort ();\n+      return store_expr (exp, target, 0);\n+    }\n+\n   /* If the structure is in a register or if the component\n      is a bit field, we cannot use addressing to access it.\n      Use bit-field techniques or SUBREG to store in it.  */"}, {"sha": "318d16b94447826a5af79a4e7dcdd3222b6c111f", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c3b247b44564c667972e0ed6f7673530378813e5", "patch": "@@ -1383,7 +1383,7 @@ put_var_into_stack (decl)\n       /* A CONCAT contains two pseudos; put them both in the stack.\n \t We do it so they end up consecutive.  */\n       enum machine_mode part_mode = GET_MODE (XEXP (reg, 0));\n-      tree part_type = TREE_TYPE (TREE_TYPE (decl));\n+      tree part_type = type_for_mode (part_mode, 0);\n #ifdef FRAME_GROWS_DOWNWARD\n       /* Since part 0 should have a lower address, do it second.  */\n       put_reg_into_stack (function, XEXP (reg, 1), part_type, part_mode,\n@@ -1409,6 +1409,7 @@ put_var_into_stack (decl)\n       PUT_CODE (reg, MEM);\n       MEM_VOLATILE_P (reg) = MEM_VOLATILE_P (XEXP (reg, 0));\n       MEM_ALIAS_SET (reg) = get_alias_set (decl);\n+      MEM_SET_IN_STRUCT_P (reg, AGGREGATE_TYPE_P (TREE_TYPE (decl)));\n \n       /* The two parts are in memory order already.\n \t Use the lower parts address as ours.  */"}, {"sha": "d52179c44d1a931bd27d8f8fbec2c44622261c69", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c3b247b44564c667972e0ed6f7673530378813e5", "patch": "@@ -2004,6 +2004,22 @@ list_length (t)\n   return len;\n }\n \n+/* Returns the number of FIELD_DECLs in TYPE.  */\n+\n+int\n+fields_length (type)\n+     tree type;\n+{\n+  tree t = TYPE_FIELDS (type);\n+  int count = 0;\n+\n+  for (; t; t = TREE_CHAIN (t))\n+    if (TREE_CODE (t) == FIELD_DECL)\n+      ++count;\n+\n+  return count;\n+}\n+\n /* Concatenate two chains of nodes (chained through TREE_CHAIN)\n    by modifying the last node in chain 1 to point to chain 2.\n    This is the Lisp primitive `nconc'.  */"}, {"sha": "5d4bdffb73caaaf99de9b265ead3e94696b252fd", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b247b44564c667972e0ed6f7673530378813e5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c3b247b44564c667972e0ed6f7673530378813e5", "patch": "@@ -1930,6 +1930,10 @@ extern tree nreverse\t\t\tPARAMS ((tree));\n \n extern int list_length\t\t\tPARAMS ((tree));\n \n+/* Returns the number of FIELD_DECLs in a type.  */\n+\n+extern int fields_length\t\tPARAMS ((tree));\n+\n /* integer_zerop (tree x) is nonzero if X is an integer constant of value 0 */\n \n extern int integer_zerop\t\tPARAMS ((tree));"}]}