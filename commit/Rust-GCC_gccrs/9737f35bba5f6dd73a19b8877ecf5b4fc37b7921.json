{"sha": "9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczN2YzNWJiYTVmNmRkNzNhMTliODg3N2VjZjViNGZjMzdiNzkyMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-13T13:57:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-13T13:57:05Z"}, "message": "re PR tree-optimization/24574 (a!=0?a/10:0 is not reduced to a/10)\n\n2016-07-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/24574\n\t* tree-ssa-phiopt.c (absorbing_element_p): Pass in argument\n\tposition and add shift, rotate, divison and modulo support\n\tfor left zero.\n\t(value_replacement): Pass in argument position to absorbing_element_p.\n\n\t* gcc.dg/pr24574.c: New testcase.\n\nFrom-SVN: r238299", "tree": {"sha": "743755983303d6111684311ede069768ee2eb566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743755983303d6111684311ede069768ee2eb566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62c0ea4b14d5cc56b9a2a4c85f8d77f136434680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c0ea4b14d5cc56b9a2a4c85f8d77f136434680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c0ea4b14d5cc56b9a2a4c85f8d77f136434680"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "cd416b7d8e9646333158c1ed0a785f120b110323", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "patch": "@@ -1,3 +1,11 @@\n+2016-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/24574\n+\t* tree-ssa-phiopt.c (absorbing_element_p): Pass in argument\n+\tposition and add shift, rotate, divison and modulo support\n+\tfor left zero.\n+\t(value_replacement): Pass in argument position to absorbing_element_p.\n+\n 2016-07-13  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR ipa/71633"}, {"sha": "92a7cb63ebf94000091af9a939ce7b321085c702", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "patch": "@@ -1,3 +1,8 @@\n+2016-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/24574\n+\t* gcc.dg/pr24574.c: New testcase.\n+\n 2016-07-13  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* c-c++-common/Wduplicated-cond-3.c (fn10): Use smaller "}, {"sha": "db0d8692a76d10eb6fb83eedead5eb258159232e", "filename": "gcc/testsuite/gcc.dg/pr24574.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c?ref=9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+\n+int f0(int i)\n+{\n+  if (i == 0) return 0;\n+  return i/10;\n+}\n+int f1(int i)\n+{\n+  return i?i/10:0;\n+}\n+\n+int f2(int i)\n+{\n+  if (i == 0) return 0;\n+  return i%10;\n+}\n+int f3(int i)\n+{\n+  return i?i%10:0;\n+}\n+\n+int f4(int i)\n+{\n+  if (i == 0) return 0;\n+  return i<<10;\n+}\n+int f5(int i)\n+{\n+  return i?i<<10:0;\n+}\n+\n+/* We should if-convert all functions to carry out the operation\n+   unconditionally.  */\n+/* { dg-final { scan-tree-dump-not \"= PHI\" \"phiopt1\" } } */"}, {"sha": "dd9aa0195fad67aaf902a5c9014c951838a3fe8f", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9737f35bba5f6dd73a19b8877ecf5b4fc37b7921/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9737f35bba5f6dd73a19b8877ecf5b4fc37b7921", "patch": "@@ -812,7 +812,7 @@ neutral_element_p (tree_code code, tree arg, bool right)\n /* Returns true if ARG is an absorbing element for operation CODE.  */\n \n static bool\n-absorbing_element_p (tree_code code, tree arg)\n+absorbing_element_p (tree_code code, tree arg, bool right)\n {\n   switch (code)\n     {\n@@ -823,6 +823,21 @@ absorbing_element_p (tree_code code, tree arg)\n     case BIT_AND_EXPR:\n       return integer_zerop (arg);\n \n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n+    case LROTATE_EXPR:\n+    case RROTATE_EXPR:\n+    case TRUNC_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case ROUND_DIV_EXPR:\n+    case EXACT_DIV_EXPR:\n+    case TRUNC_MOD_EXPR:\n+    case CEIL_MOD_EXPR:\n+    case FLOOR_MOD_EXPR:\n+    case ROUND_MOD_EXPR:\n+      return !right && integer_zerop (arg);\n+\n     default:\n       return false;\n     }\n@@ -994,9 +1009,10 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t      && operand_equal_for_phi_arg_p (rhs1, cond_lhs)\n \t      && neutral_element_p (code_def, cond_rhs, false))\n \t  || (operand_equal_for_phi_arg_p (arg1, cond_rhs)\n-\t      && (operand_equal_for_phi_arg_p (rhs2, cond_lhs)\n-\t\t  || operand_equal_for_phi_arg_p (rhs1, cond_lhs))\n-\t      && absorbing_element_p (code_def, cond_rhs))))\n+\t      && ((operand_equal_for_phi_arg_p (rhs2, cond_lhs)\n+\t\t   && absorbing_element_p (code_def, cond_rhs, true))\n+\t\t  || (operand_equal_for_phi_arg_p (rhs1, cond_lhs)\n+\t\t      && absorbing_element_p (code_def, cond_rhs, false))))))\n     {\n       gsi = gsi_for_stmt (cond);\n       if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))"}]}