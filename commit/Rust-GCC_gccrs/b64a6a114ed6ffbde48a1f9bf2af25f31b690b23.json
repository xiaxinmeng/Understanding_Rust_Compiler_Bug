{"sha": "b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0YTZhMTE0ZWQ2ZmZiZGU0OGExZjliZjJhZjI1ZjMxYjY5MGIyMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-11T11:31:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-11T11:31:24Z"}, "message": "gcc.texi: Move several chapters out to ...\n\n\t* doc/gcc.texi: Move several chapters out to ...\n\t* doc/bugreport.texi, doc/contribute.texi, doc/frontends.texi,\n\tdoc/service.texi, doc/standards.texi, doc/trouble.texi,\n\tdoc/vms.texi: ... here.  New files.\n\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n\nFrom-SVN: r46929", "tree": {"sha": "fb11a0a4586ddc121bcbc19d21bd432eb1b5ed34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb11a0a4586ddc121bcbc19d21bd432eb1b5ed34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaec9b3d7ed15d4d07e0091a361e52c73d2170b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaec9b3d7ed15d4d07e0091a361e52c73d2170b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaec9b3d7ed15d4d07e0091a361e52c73d2170b3"}], "stats": {"total": 4972, "additions": 2514, "deletions": 2458}, "files": [{"sha": "f4825e7992e8950d5f08d506b74208e77dc3dbfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -1,3 +1,11 @@\n+2001-11-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi: Move several chapters out to ...\n+\t* doc/bugreport.texi, doc/contribute.texi, doc/frontends.texi,\n+\tdoc/service.texi, doc/standards.texi, doc/trouble.texi,\n+\tdoc/vms.texi: ... here.  New files.\n+\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n+\n 2001-11-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* ChangeLog.2, ChangeLog.3, ChangeLog.4, ChangeLog.5, ChangeLog,"}, {"sha": "2112a0734df2d3429dfbce5fa5cef0b3118af69b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -2315,7 +2315,10 @@ $(docdir)/gcc.info: $(docdir)/gcc.texi $(docdir)/extend.texi \\\n \t $(docdir)/c-tree.texi $(docdir)/rtl.texi $(docdir)/tm.texi \\\n \t $(docdir)/gcov.texi $(docdir)/contrib.texi $(docdir)/objc.texi \\\n \t $(docdir)/include/fdl.texi $(docdir)/include/gpl.texi \\\n-\t $(docdir)/include/funding.texi\n+\t $(docdir)/include/funding.texi $(docdir)/bugreport.texi \\\n+\t $(docdir)/contribute.texi $(docdir)/frontends.texi \\\n+\t $(docdir)/service.texi $(docdir)/standards.texi \\\n+\t $(docdir)/trouble.texi $(docdir)/vms.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/gcc.info doc/gcc.texi\n \n $(docdir)/cppinternals.info: $(docdir)/cppinternals.texi\n@@ -2333,7 +2336,10 @@ gcc.dvi: $(docdir)/gcc.texi $(docdir)/extend.texi $(docdir)/install-old.texi \\\n \t $(docdir)/rtl.texi $(docdir)/tm.texi $(docdir)/gcov.texi \\\n \t $(docdir)/contrib.texi $(docdir)/objc.texi \\\n \t $(docdir)/include/fdl.texi $(docdir)/include/gpl.texi \\\n-\t $(docdir)/include/funding.texi\n+\t $(docdir)/include/funding.texi $(docdir)/bugreport.texi \\\n+\t $(docdir)/contribute.texi $(docdir)/frontends.texi \\\n+\t $(docdir)/service.texi $(docdir)/standards.texi \\\n+\t $(docdir)/trouble.texi $(docdir)/vms.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/gcc.texi\n \n cppinternals.dvi: $(docdir)/cppinternals.texi"}, {"sha": "1ac26c5fa5df9b6ca9ed5f937bbb718ea11f53d3", "filename": "gcc/doc/bugreport.texi", "status": "added", "additions": 394, "deletions": 0, "changes": 394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,394 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Bugs\n+@chapter Reporting Bugs\n+@cindex bugs\n+@cindex reporting bugs\n+\n+Your bug reports play an essential role in making GCC reliable.\n+\n+When you encounter a problem, the first thing to do is to see if it is\n+already known.  @xref{Trouble}.  If it isn't known, then you should\n+report the problem.\n+\n+Reporting a bug may help you by bringing a solution to your problem, or\n+it may not.  (If it does not, look in the service directory; see\n+@ref{Service}.)  In any case, the principal function of a bug report is\n+to help the entire community by making the next version of GCC work\n+better.  Bug reports are your contribution to the maintenance of GCC@.\n+\n+Since the maintainers are very overloaded, we cannot respond to every\n+bug report.  However, if the bug has not been fixed, we are likely to\n+send you a patch and ask you to tell us whether it works.\n+\n+In order for a bug report to serve its purpose, you must include the\n+information that makes for fixing the bug.\n+\n+@menu\n+* Criteria:  Bug Criteria.   Have you really found a bug?\n+* Where: Bug Lists.\t     Where to send your bug report.\n+* Reporting: Bug Reporting.  How to report a bug effectively.\n+* GNATS: gccbug.             You can use a bug reporting tool.\n+* Known: Trouble.            Known problems.\n+* Help: Service.             Where to ask for help.\n+@end menu\n+\n+@node Bug Criteria,Bug Lists,,Bugs\n+@section Have You Found a Bug?\n+@cindex bug criteria\n+\n+If you are not sure whether you have found a bug, here are some guidelines:\n+\n+@itemize @bullet\n+@cindex fatal signal\n+@cindex core dump\n+@item\n+If the compiler gets a fatal signal, for any input whatever, that is a\n+compiler bug.  Reliable compilers never crash.\n+\n+@cindex invalid assembly code\n+@cindex assembly code, invalid\n+@item\n+If the compiler produces invalid assembly code, for any input whatever\n+(except an @code{asm} statement), that is a compiler bug, unless the\n+compiler reports errors (not just warnings) which would ordinarily\n+prevent the assembler from being run.\n+\n+@cindex undefined behavior\n+@cindex undefined function value\n+@cindex increment operators\n+@item\n+If the compiler produces valid assembly code that does not correctly\n+execute the input source code, that is a compiler bug.\n+\n+However, you must double-check to make sure, because you may have run\n+into an incompatibility between GNU C and traditional C\n+(@pxref{Incompatibilities}).  These incompatibilities might be considered\n+bugs, but they are inescapable consequences of valuable features.\n+\n+Or you may have a program whose behavior is undefined, which happened\n+by chance to give the desired results with another C or C++ compiler.\n+\n+For example, in many nonoptimizing compilers, you can write @samp{x;}\n+at the end of a function instead of @samp{return x;}, with the same\n+results.  But the value of the function is undefined if @code{return}\n+is omitted; it is not a bug when GCC produces different results.\n+\n+Problems often result from expressions with two increment operators,\n+as in @code{f (*p++, *p++)}.  Your previous compiler might have\n+interpreted that expression the way you intended; GCC might\n+interpret it another way.  Neither compiler is wrong.  The bug is\n+in your code.\n+\n+After you have localized the error to a single source line, it should\n+be easy to check for these things.  If your program is correct and\n+well defined, you have found a compiler bug.\n+\n+@item\n+If the compiler produces an error message for valid input, that is a\n+compiler bug.\n+\n+@cindex invalid input\n+@item\n+If the compiler does not produce an error message for invalid input,\n+that is a compiler bug.  However, you should note that your idea of\n+``invalid input'' might be my idea of ``an extension'' or ``support\n+for traditional practice''.\n+\n+@item\n+If you are an experienced user of one of the languages GCC supports, your\n+suggestions for improvement of GCC are welcome in any case.\n+@end itemize\n+\n+@node Bug Lists,Bug Reporting,Bug Criteria,Bugs\n+@section Where to Report Bugs\n+@cindex bug report mailing lists\n+@kindex gcc-bugs@@gcc.gnu.org or bug-gcc@@gnu.org\n+Send bug reports for the GNU Compiler Collection to\n+@email{gcc-bugs@@gcc.gnu.org}.  In accordance with the GNU-wide\n+convention, in which bug reports for tool ``foo'' are sent\n+to @samp{bug-foo@@gnu.org}, the address @email{bug-gcc@@gnu.org}\n+may also be used; it will forward to the address given above.\n+\n+Please read @uref{http://gcc.gnu.org/bugs.html} for additional and/or\n+more up-to-date bug reporting instructions before you post a bug report.\n+\n+@node Bug Reporting,gccbug,Bug Lists,Bugs\n+@section How to Report Bugs\n+@cindex compiler bugs, reporting\n+\n+The fundamental principle of reporting bugs usefully is this:\n+@strong{report all the facts}.  If you are not sure whether to state a\n+fact or leave it out, state it!\n+\n+Often people omit facts because they think they know what causes the\n+problem and they conclude that some details don't matter.  Thus, you might\n+assume that the name of the variable you use in an example does not matter.\n+Well, probably it doesn't, but one cannot be sure.  Perhaps the bug is a\n+stray memory reference which happens to fetch from the location where that\n+name is stored in memory; perhaps, if the name were different, the contents\n+of that location would fool the compiler into doing the right thing despite\n+the bug.  Play it safe and give a specific, complete example.  That is the\n+easiest thing for you to do, and the most helpful.\n+\n+Keep in mind that the purpose of a bug report is to enable someone to\n+fix the bug if it is not known.  It isn't very important what happens if\n+the bug is already known.  Therefore, always write your bug reports on\n+the assumption that the bug is not known.\n+\n+Sometimes people give a few sketchy facts and ask, ``Does this ring a\n+bell?''  This cannot help us fix a bug, so it is basically useless.  We\n+respond by asking for enough details to enable us to investigate.\n+You might as well expedite matters by sending them to begin with.\n+\n+Try to make your bug report self-contained.  If we have to ask you for\n+more information, it is best if you include all the previous information\n+in your response, as well as the information that was missing.\n+\n+Please report each bug in a separate message.  This makes it easier for\n+us to track which bugs have been fixed and to forward your bugs reports\n+to the appropriate maintainer.\n+\n+To enable someone to investigate the bug, you should include all these\n+things:\n+\n+@itemize @bullet\n+@item\n+The version of GCC@.  You can get this by running it with the\n+@option{-v} option.\n+\n+Without this, we won't know whether there is any point in looking for\n+the bug in the current version of GCC@.\n+\n+@item\n+A complete input file that will reproduce the bug.  If the bug is in the\n+C preprocessor, send a source file and any header files that it\n+requires.  If the bug is in the compiler proper (@file{cc1}), send the\n+preprocessor output generated by adding @option{-save-temps} to the\n+compilation command (@pxref{Debugging Options}).  When you do this, use\n+the same @option{-I}, @option{-D} or @option{-U} options that you used in\n+actual compilation.  Then send the @var{input}.i or @var{input}.ii files\n+generated.\n+\n+A single statement is not enough of an example.  In order to compile it,\n+it must be embedded in a complete file of compiler input; and the bug\n+might depend on the details of how this is done.\n+\n+Without a real example one can compile, all anyone can do about your bug\n+report is wish you luck.  It would be futile to try to guess how to\n+provoke the bug.  For example, bugs in register allocation and reloading\n+frequently depend on every little detail of the function they happen in.\n+\n+Even if the input file that fails comes from a GNU program, you should\n+still send the complete test case.  Don't ask the GCC maintainers to\n+do the extra work of obtaining the program in question---they are all\n+overworked as it is.  Also, the problem may depend on what is in the\n+header files on your system; it is unreliable for the GCC maintainers\n+to try the problem with the header files available to them.  By sending\n+CPP output, you can eliminate this source of uncertainty and save us\n+a certain percentage of wild goose chases.\n+\n+@item\n+The command arguments you gave GCC to compile that example\n+and observe the bug.  For example, did you use @option{-O}?  To guarantee\n+you won't omit something important, list all the options.\n+\n+If we were to try to guess the arguments, we would probably guess wrong\n+and then we would not encounter the bug.\n+\n+@item\n+The type of machine you are using, and the operating system name and\n+version number.\n+\n+@item\n+The operands you gave to the @code{configure} command when you installed\n+the compiler.\n+\n+@item\n+A complete list of any modifications you have made to the compiler\n+source.  (We don't promise to investigate the bug unless it happens in\n+an unmodified compiler.  But if you've made modifications and don't tell\n+us, then you are sending us on a wild goose chase.)\n+\n+Be precise about these changes.  A description in English is not\n+enough---send a context diff for them.\n+\n+Adding files of your own (such as a machine description for a machine we\n+don't support) is a modification of the compiler source.\n+\n+@item\n+Details of any other deviations from the standard procedure for installing\n+GCC@.\n+\n+@item\n+A description of what behavior you observe that you believe is\n+incorrect.  For example, ``The compiler gets a fatal signal,'' or,\n+``The assembler instruction at line 208 in the output is incorrect.''\n+\n+Of course, if the bug is that the compiler gets a fatal signal, then one\n+can't miss it.  But if the bug is incorrect output, the maintainer might\n+not notice unless it is glaringly wrong.  None of us has time to study\n+all the assembler code from a 50-line C program just on the chance that\n+one instruction might be wrong.  We need @emph{you} to do this part!\n+\n+Even if the problem you experience is a fatal signal, you should still\n+say so explicitly.  Suppose something strange is going on, such as, your\n+copy of the compiler is out of synch, or you have encountered a bug in\n+the C library on your system.  (This has happened!)  Your copy might\n+crash and the copy here would not.  If you @i{said} to expect a crash,\n+then when the compiler here fails to crash, we would know that the bug\n+was not happening.  If you don't say to expect a crash, then we would\n+not know whether the bug was happening.  We would not be able to draw\n+any conclusion from our observations.\n+\n+If the problem is a diagnostic when compiling GCC with some other\n+compiler, say whether it is a warning or an error.\n+\n+Often the observed symptom is incorrect output when your program is run.\n+Sad to say, this is not enough information unless the program is short\n+and simple.  None of us has time to study a large program to figure out\n+how it would work if compiled correctly, much less which line of it was\n+compiled wrong.  So you will have to do that.  Tell us which source line\n+it is, and what incorrect result happens when that line is executed.  A\n+person who understands the program can find this as easily as finding a\n+bug in the program itself.\n+\n+@item\n+If you send examples of assembler code output from GCC,\n+please use @option{-g} when you make them.  The debugging information\n+includes source line numbers which are essential for correlating the\n+output with the input.\n+\n+@item\n+If you wish to mention something in the GCC source, refer to it by\n+context, not by line number.\n+\n+The line numbers in the development sources don't match those in your\n+sources.  Your line numbers would convey no useful information to the\n+maintainers.\n+\n+@item\n+Additional information from a debugger might enable someone to find a\n+problem on a machine which he does not have available.  However, you\n+need to think when you collect this information if you want it to have\n+any chance of being useful.\n+\n+@cindex backtrace for bug reports\n+For example, many people send just a backtrace, but that is never\n+useful by itself.  A simple backtrace with arguments conveys little\n+about GCC because the compiler is largely data-driven; the same\n+functions are called over and over for different RTL insns, doing\n+different things depending on the details of the insn.\n+\n+Most of the arguments listed in the backtrace are useless because they\n+are pointers to RTL list structure.  The numeric values of the\n+pointers, which the debugger prints in the backtrace, have no\n+significance whatever; all that matters is the contents of the objects\n+they point to (and most of the contents are other such pointers).\n+\n+In addition, most compiler passes consist of one or more loops that\n+scan the RTL insn sequence.  The most vital piece of information about\n+such a loop---which insn it has reached---is usually in a local variable,\n+not in an argument.\n+\n+@findex debug_rtx\n+What you need to provide in addition to a backtrace are the values of\n+the local variables for several stack frames up.  When a local\n+variable or an argument is an RTX, first print its value and then use\n+the GDB command @code{pr} to print the RTL expression that it points\n+to.  (If GDB doesn't run on your machine, use your debugger to call\n+the function @code{debug_rtx} with the RTX as an argument.)  In\n+general, whenever a variable is a pointer, its value is no use\n+without the data it points to.\n+@end itemize\n+\n+Here are some things that are not necessary:\n+\n+@itemize @bullet\n+@item\n+A description of the envelope of the bug.\n+\n+Often people who encounter a bug spend a lot of time investigating\n+which changes to the input file will make the bug go away and which\n+changes will not affect it.\n+\n+This is often time consuming and not very useful, because the way we\n+will find the bug is by running a single example under the debugger with\n+breakpoints, not by pure deduction from a series of examples.  You might\n+as well save your time for something else.\n+\n+Of course, if you can find a simpler example to report @emph{instead} of\n+the original one, that is a convenience.  Errors in the output will be\n+easier to spot, running under the debugger will take less time, etc.\n+Most GCC bugs involve just one function, so the most straightforward\n+way to simplify an example is to delete all the function definitions\n+except the one where the bug occurs.  Those earlier in the file may be\n+replaced by external declarations if the crucial function depends on\n+them.  (Exception: inline functions may affect compilation of functions\n+defined later in the file.)\n+\n+However, simplification is not vital; if you don't want to do this,\n+report the bug anyway and send the entire test case you used.\n+\n+@item\n+In particular, some people insert conditionals @samp{#ifdef BUG} around\n+a statement which, if removed, makes the bug not happen.  These are just\n+clutter; we won't pay any attention to them anyway.  Besides, you should\n+send us cpp output, and that can't have conditionals.\n+\n+@item\n+A patch for the bug.\n+\n+A patch for the bug is useful if it is a good one.  But don't omit the\n+necessary information, such as the test case, on the assumption that a\n+patch is all we need.  We might see problems with your patch and decide\n+to fix the problem another way, or we might not understand it at all.\n+\n+Sometimes with a program as complicated as GCC it is very hard to\n+construct an example that will make the program follow a certain path\n+through the code.  If you don't send the example, we won't be able to\n+construct one, so we won't be able to verify that the bug is fixed.\n+\n+And if we can't understand what bug you are trying to fix, or why your\n+patch should be an improvement, we won't install it.  A test case will\n+help us to understand.\n+\n+See @uref{http://gcc.gnu.org/contribute.html}\n+for guidelines on how to make it easy for us to\n+understand and install your patches.\n+\n+@item\n+A guess about what the bug is or what it depends on.\n+\n+Such guesses are usually wrong.  Even I can't guess right about such\n+things without first using the debugger to find the facts.\n+\n+@item\n+A core dump file.\n+\n+We have no way of examining a core dump for your type of machine\n+unless we have an identical system---and if we do have one,\n+we should be able to reproduce the crash ourselves.\n+@end itemize\n+\n+@node gccbug,, Bug Reporting, Bugs\n+@section The gccbug script\n+@cindex gccbug script\n+\n+To simplify creation of bug reports, and to allow better tracking of\n+reports, we use the GNATS bug tracking system.  Part of that system is\n+the @code{gccbug} script.  This is a Unix shell script, so you need a\n+shell to run it.  It is normally installed in the same directory where\n+@code{gcc} is installed.\n+\n+The gccbug script is derived from send-pr, @pxref{using\n+send-pr,,Creating new Problem Reports,send-pr,Reporting Problems}.  When\n+invoked, it starts a text editor so you can fill out the various fields\n+of the report.  When the you quit the editor, the report is automatically\n+send to the bug reporting address.\n+\n+A number of fields in this bug report form are specific to GCC, and are\n+explained at @uref{http://gcc.gnu.org/gnats.html}."}, {"sha": "f9a5f970af28333e4aa5d0a4b032cba200ce756f", "filename": "gcc/doc/contribute.texi", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fcontribute.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fcontribute.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontribute.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,25 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Contributing\n+@chapter Contributing to GCC Development\n+\n+If you would like to help pretest GCC releases to assure they work well,\n+our current development sources are available by CVS (see\n+@uref{http://gcc.gnu.org/cvs.html}).  Source and binary snapshots are\n+also available for FTP; see @uref{http://gcc.gnu.org/snapshots.html}.\n+\n+If you would like to work on improvements to GCC, please read the\n+advice at these URLs:\n+\n+@smallexample\n+@uref{http://gcc.gnu.org/contribute.html} \n+@uref{http://gcc.gnu.org/contributewhy.html}\n+@end smallexample\n+\n+@noindent\n+for information on how to make useful contributions and avoid\n+duplication of effort.  Suggested projects are listed at\n+@uref{http://gcc.gnu.org/projects/}."}, {"sha": "ffaa9aa6fe8f6c091943fe774ee10470ed67a604", "filename": "gcc/doc/frontends.texi", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Ffrontends.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Ffrontends.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffrontends.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,70 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node G++ and GCC\n+@chapter Compile C, C++, Objective-C, Ada, CHILL, Fortran, or Java\n+\n+@cindex Objective-C\n+@cindex Fortran\n+@cindex Java\n+@cindex CHILL\n+@cindex Ada\n+Several versions of the compiler (C, C++, Objective-C, Ada, CHILL,\n+Fortran, and Java) are integrated; this is why we use the name\n+``GNU Compiler Collection''.  GCC can compile programs written in any of these\n+languages.  The Ada, CHILL, Fortran, and Java compilers are described in\n+separate manuals.\n+\n+@cindex GCC\n+``GCC'' is a common shorthand term for the GNU Compiler Collection.  This is both\n+the most general name for the compiler, and the name used when the\n+emphasis is on compiling C programs (as the abbreviation formerly\n+stood for ``GNU C Compiler'').\n+\n+@cindex C++\n+@cindex G++\n+When referring to C++ compilation, it is usual to call the compiler\n+``G++''.  Since there is only one compiler, it is also accurate to call\n+it ``GCC'' no matter what the language context; however, the term\n+``G++'' is more useful when the emphasis is on compiling C++ programs.\n+\n+@cindex Ada\n+@cindex GNAT\n+Similarly, when we talk about Ada compilation, we usually call the\n+compiler ``GNAT'', for the same reasons.\n+\n+We use the name ``GCC'' to refer to the compilation system as a\n+whole, and more specifically to the language-independent part of the\n+compiler.  For example, we refer to the optimization options as\n+affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n+\n+Front ends for other languages, such as Mercury and Pascal exist but\n+have not yet been integrated into GCC@.  These front ends, like that for C++,\n+are built in subdirectories of GCC and link to it.  The result is an\n+integrated compiler that can compile programs written in C, C++,\n+Objective-C, or any of the languages for which you have installed front\n+ends.\n+\n+In this manual, we only discuss the options for the C, Objective-C, and\n+C++ compilers and those of the GCC core.  Consult the documentation\n+of the other front ends for the options to use when compiling programs\n+written in other languages.\n+\n+@cindex compiler compared to C++ preprocessor\n+@cindex intermediate C version, nonexistent\n+@cindex C intermediate output, nonexistent\n+G++ is a @emph{compiler}, not merely a preprocessor.  G++ builds object\n+code directly from your C++ program source.  There is no intermediate C\n+version of the program.  (By contrast, for example, some other\n+implementations use a program that generates a C program from your C++\n+source.)  Avoiding an intermediate C representation of the program means\n+that you get better object code, and better debugging information.  The\n+GNU debugger, GDB, works with this information in the object code to\n+give you comprehensive C++ source-level editing capabilities\n+(@pxref{C,,C and C++,gdb.info, Debugging with GDB}).\n+\n+@c FIXME!  Someone who knows something about Objective-C ought to put in\n+@c a paragraph or two about it here, and move the index entry down when\n+@c there is more to point to than the general mention in the 1st par."}, {"sha": "43301abf567c17dc2a0c28b2477759e04c8498df", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 9, "deletions": 2456, "changes": 2465, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -277,242 +277,10 @@ bugs.  It corresponds to GCC version 3.1.\n @end menu\n \n @ifset USING\n-@node G++ and GCC\n-@chapter Compile C, C++, Objective-C, Ada, CHILL, Fortran, or Java\n-\n-@cindex Objective-C\n-@cindex Fortran\n-@cindex Java\n-@cindex CHILL\n-@cindex Ada\n-Several versions of the compiler (C, C++, Objective-C, Ada, CHILL,\n-Fortran, and Java) are integrated; this is why we use the name\n-``GNU Compiler Collection''.  GCC can compile programs written in any of these\n-languages.  The Ada, CHILL, Fortran, and Java compilers are described in\n-separate manuals.\n-\n-@cindex GCC\n-``GCC'' is a common shorthand term for the GNU Compiler Collection.  This is both\n-the most general name for the compiler, and the name used when the\n-emphasis is on compiling C programs (as the abbreviation formerly\n-stood for ``GNU C Compiler'').\n-\n-@cindex C++\n-@cindex G++\n-When referring to C++ compilation, it is usual to call the compiler\n-``G++''.  Since there is only one compiler, it is also accurate to call\n-it ``GCC'' no matter what the language context; however, the term\n-``G++'' is more useful when the emphasis is on compiling C++ programs.\n-\n-@cindex Ada\n-@cindex GNAT\n-Similarly, when we talk about Ada compilation, we usually call the\n-compiler ``GNAT'', for the same reasons.\n-\n-We use the name ``GCC'' to refer to the compilation system as a\n-whole, and more specifically to the language-independent part of the\n-compiler.  For example, we refer to the optimization options as\n-affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n-\n-Front ends for other languages, such as Mercury and Pascal exist but\n-have not yet been integrated into GCC@.  These front ends, like that for C++,\n-are built in subdirectories of GCC and link to it.  The result is an\n-integrated compiler that can compile programs written in C, C++,\n-Objective-C, or any of the languages for which you have installed front\n-ends.\n-\n-In this manual, we only discuss the options for the C, Objective-C, and\n-C++ compilers and those of the GCC core.  Consult the documentation\n-of the other front ends for the options to use when compiling programs\n-written in other languages.\n-\n-@cindex compiler compared to C++ preprocessor\n-@cindex intermediate C version, nonexistent\n-@cindex C intermediate output, nonexistent\n-G++ is a @emph{compiler}, not merely a preprocessor.  G++ builds object\n-code directly from your C++ program source.  There is no intermediate C\n-version of the program.  (By contrast, for example, some other\n-implementations use a program that generates a C program from your C++\n-source.)  Avoiding an intermediate C representation of the program means\n-that you get better object code, and better debugging information.  The\n-GNU debugger, GDB, works with this information in the object code to\n-give you comprehensive C++ source-level editing capabilities\n-(@pxref{C,,C and C++,gdb.info, Debugging with GDB}).\n-\n-@c FIXME!  Someone who knows something about Objective-C ought to put in\n-@c a paragraph or two about it here, and move the index entry down when\n-@c there is more to point to than the general mention in the 1st par.\n-\n-@node Standards\n-@chapter Language Standards Supported by GCC\n-@cindex C standard\n-@cindex C standards\n-@cindex ANSI C standard\n-@cindex ANSI C\n-@cindex ANSI C89\n-@cindex C89\n-@cindex ANSI X3.159-1989\n-@cindex X3.159-1989\n-@cindex ISO C standard\n-@cindex ISO C\n-@cindex ISO C89\n-@cindex ISO C90\n-@cindex ISO/IEC 9899\n-@cindex ISO 9899\n-@cindex C90\n-@cindex ISO C94\n-@cindex C94\n-@cindex ISO C95\n-@cindex C95\n-@cindex ISO C99\n-@cindex C99\n-@cindex ISO C9X\n-@cindex C9X\n-@cindex Technical Corrigenda\n-@cindex TC1\n-@cindex Technical Corrigendum 1\n-@cindex TC2\n-@cindex Technical Corrigendum 2\n-@cindex AMD1\n-@cindex freestanding implementation\n-@cindex freestanding environment\n-@cindex hosted implementation\n-@cindex hosted environment\n-@findex __STDC_HOSTED__\n-\n-For each language compiled by GCC for which there is a standard, GCC\n-attempts to follow one or more versions of that standard, possibly\n-with some exceptions, and possibly with some extensions.\n-\n-GCC supports three versions of the C standard, although support for\n-the most recent version is not yet complete.\n-\n-@opindex std\n-@opindex ansi\n-@opindex pedantic\n-@opindex pedantic-errors\n-The original ANSI C standard (X3.159-1989) was ratified in 1989 and\n-published in 1990.  This standard was ratified as an ISO standard\n-(ISO/IEC 9899:1990) later in 1990.  There were no technical\n-differences between these publications, although the sections of the\n-ANSI standard were renumbered and became clauses in the ISO standard.\n-This standard, in both its forms, is commonly known as @dfn{C89}, or\n-occasionally as @dfn{C90}, from the dates of ratification.  The ANSI\n-standard, but not the ISO standard, also came with a Rationale\n-document.  To select this standard in GCC, use one of the options\n-@option{-ansi}, @option{-std=c89} or @option{-std=iso9899:1990}; to obtain\n-all the diagnostics required by the standard, you should also specify\n-@option{-pedantic} (or @option{-pedantic-errors} if you want them to be\n-errors rather than warnings).  @xref{C Dialect Options,,Options\n-Controlling C Dialect}.\n-\n-Errors in the 1990 ISO C standard were corrected in two Technical\n-Corrigenda published in 1994 and 1996.  GCC does not support the\n-uncorrected version.\n-\n-An amendment to the 1990 standard was published in 1995.  This\n-amendment added digraphs and @code{__STDC_VERSION__} to the language,\n-but otherwise concerned the library.  This amendment is commonly known\n-as @dfn{AMD1}; the amended standard is sometimes known as @dfn{C94} or\n-@dfn{C95}.  To select this standard in GCC, use the option\n-@option{-std=iso9899:199409} (with, as for other standard versions,\n-@option{-pedantic} to receive all required diagnostics).\n-\n-A new edition of the ISO C standard was published in 1999 as ISO/IEC\n-9899:1999, and is commonly known as @dfn{C99}.  GCC has incomplete\n-support for this standard version; see\n-@uref{http://gcc.gnu.org/c99status.html} for details.  To select this\n-standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in\n-development, drafts of this standard version were referred to as\n-@dfn{C9X}.)\n-\n-@opindex traditional\n-GCC also has some limited support for traditional (pre-ISO) C with the\n-@option{-traditional} option.  This support may be of use for compiling\n-some very old programs that have not been updated to ISO C, but should\n-not be used for new programs.  It will not work with some modern C\n-libraries such as the GNU C library.\n-\n-By default, GCC provides some extensions to the C language that on\n-rare occasions conflict with the C standard.  @xref{C\n-Extensions,,Extensions to the C Language Family}.  Use of the\n-@option{-std} options listed above will disable these extensions where\n-they conflict with the C standard version selected.  You may also\n-select an extended version of the C language explicitly with\n-@option{-std=gnu89} (for C89 with GNU extensions) or @option{-std=gnu99}\n-(for C99 with GNU extensions).  The default, if no C language dialect\n-options are given, is @option{-std=gnu89}; this will change to\n-@option{-std=gnu99} in some future release when the C99 support is\n-complete.  Some features that are part of the C99 standard are\n-accepted as extensions in C89 mode.\n-\n-The ISO C standard defines (in clause 4) two classes of conforming\n-implementation.  A @dfn{conforming hosted implementation} supports the\n-whole standard including all the library facilities; a @dfn{conforming\n-freestanding implementation} is only required to provide certain\n-library facilities: those in @code{<float.h>}, @code{<limits.h>},\n-@code{<stdarg.h>}, and @code{<stddef.h>}; since AMD1, also those in\n-@code{<iso646.h>}; and in C99, also those in @code{<stdbool.h>} and\n-@code{<stdint.h>}.  In addition, complex types, added in C99, are not\n-required for freestanding implementations.  The standard also defines\n-two environments for programs, a @dfn{freestanding environment},\n-required of all implementations and which may not have library\n-facilities beyond those required of freestanding implementations,\n-where the handling of program startup and termination are\n-implementation-defined, and a @dfn{hosted environment}, which is not\n-required, in which all the library facilities are provided and startup\n-is through a function @code{int main (void)} or @code{int main (int,\n-char *[])}.  An OS kernel would be a freestanding environment; a\n-program using the facilities of an operating system would normally be\n-in a hosted implementation.\n-\n-@opindex ffreestanding\n-GCC aims towards being usable as a conforming freestanding\n-implementation, or as the compiler for a conforming hosted\n-implementation.  By default, it will act as the compiler for a hosted\n-implementation, defining @code{__STDC_HOSTED__} as @code{1} and\n-presuming that when the names of ISO C functions are used, they have\n-the semantics defined in the standard.  To make it act as a conforming\n-freestanding implementation for a freestanding environment, use the\n-option @option{-ffreestanding}; it will then define\n-@code{__STDC_HOSTED__} to @code{0} and not make assumptions about the\n-meanings of function names from the standard library.  To build an OS\n-kernel, you may well still need to make your own arrangements for\n-linking and startup.  @xref{C Dialect Options,,Options Controlling C\n-Dialect}.\n-\n-GCC does not provide the library facilities required only of hosted\n-implementations, nor yet all the facilities required by C99 of\n-freestanding implementations; to use the facilities of a hosted\n-environment, you will need to find them elsewhere (for example, in the\n-GNU C library).  @xref{Standard Libraries,,Standard Libraries}.\n-\n-For references to Technical Corrigenda, Rationale documents and\n-information concerning the history of C that is available online, see\n-@uref{http://gcc.gnu.org/readings.html}\n-\n-@c FIXME: details of C++ standard.\n-\n-There is no formal written standard for Objective-C@.  The most\n-authoritative manual is ``Object-Oriented Programming and the\n-Objective-C Language'', available at a number of web sites;\n-@uref{http://developer.apple.com/techpubs/macosx/Cocoa/ObjectiveC/} has a\n-recent version, while @uref{http://www.toodarkpark.org/computers/objc/}\n-is an older example.  @uref{http://www.gnustep.org} includes useful\n-information as well.\n-\n-@xref{Top, GNAT Reference Manual, About This Guide, gnat_rm, \n-GNAT Reference Manual}, for information on standard\n-conformance and compatibility of the Ada compiler.\n-\n-@xref{References,,Language Definition References, chill, GNU Chill},\n-for details of the CHILL standard.\n-\n-@xref{Language,,The GNU Fortran Language, g77, Using and Porting GNU\n-Fortran}, for details of the Fortran language supported by GCC@.\n-\n-@xref{Compatibility,,Compatibility with the Java Platform, gcj, GNU gcj},\n-for details of compatibility between @code{gcj} and the Java Platform.\n+\n+@include frontends.texi\n+\n+@include standards.texi\n \n @include invoke.texi\n \n@@ -524,2230 +292,15 @@ for details of compatibility between @code{gcj} and the Java Platform.\n \n @include gcov.texi\n \n-@node Trouble\n-@chapter Known Causes of Trouble with GCC\n-@cindex bugs, known\n-@cindex installation trouble\n-@cindex known causes of trouble\n-\n-This section describes known problems that affect users of GCC@.  Most\n-of these are not GCC bugs per se---if they were, we would fix them.\n-But the result for a user may be like the result of a bug.\n-\n-Some of these problems are due to bugs in other software, some are\n-missing features that are too much work to add, and some are places\n-where people's opinions differ as to what is best.\n-\n-@menu\n-* Actual Bugs::\t\t      Bugs we will fix later.\n-* Cross-Compiler Problems::   Common problems of cross compiling with GCC.\n-* Interoperation::      Problems using GCC with other compilers,\n-\t\t\t   and with certain linkers, assemblers and debuggers.\n-* External Bugs::\tProblems compiling certain programs.\n-* Incompatibilities::   GCC is incompatible with traditional C.\n-* Fixed Headers::       GCC uses corrected versions of system header files.\n-                           This is necessary, but doesn't always work smoothly.\n-* Standard Libraries::  GCC uses the system C library, which might not be\n-                           compliant with the ISO C standard.\n-* Disappointments::     Regrettable things we can't change, but not quite bugs.\n-* C++ Misunderstandings::     Common misunderstandings with GNU C++.\n-* Protoize Caveats::    Things to watch out for when using @code{protoize}.\n-* Non-bugs::\t\tThings we think are right, but some others disagree.\n-* Warnings and Errors:: Which problems in your code get warnings,\n-                         and which get errors.\n-@end menu\n-\n-@node Actual Bugs\n-@section Actual Bugs We Haven't Fixed Yet\n-\n-@itemize @bullet\n-@item\n-The @code{fixincludes} script interacts badly with automounters; if the\n-directory of system header files is automounted, it tends to be\n-unmounted while @code{fixincludes} is running.  This would seem to be a\n-bug in the automounter.  We don't know any good way to work around it.\n-\n-@item\n-The @code{fixproto} script will sometimes add prototypes for the\n-@code{sigsetjmp} and @code{siglongjmp} functions that reference the\n-@code{jmp_buf} type before that type is defined.  To work around this,\n-edit the offending file and place the typedef in front of the\n-prototypes.\n-\n-@item\n-@opindex pedantic-errors\n-When @option{-pedantic-errors} is specified, GCC will incorrectly give\n-an error message when a function name is specified in an expression\n-involving the comma operator.\n-@end itemize\n-\n-@node Cross-Compiler Problems\n-@section Cross-Compiler Problems\n-\n-You may run into problems with cross compilation on certain machines,\n-for several reasons.\n-\n-@itemize @bullet\n-@item\n-Cross compilation can run into trouble for certain machines because\n-some target machines' assemblers require floating point numbers to be\n-written as @emph{integer} constants in certain contexts.\n-\n-The compiler writes these integer constants by examining the floating\n-point value as an integer and printing that integer, because this is\n-simple to write and independent of the details of the floating point\n-representation.  But this does not work if the compiler is running on\n-a different machine with an incompatible floating point format, or\n-even a different byte-ordering.\n-\n-In addition, correct constant folding of floating point values\n-requires representing them in the target machine's format.\n-(The C standard does not quite require this, but in practice\n-it is the only way to win.)\n-\n-It is now possible to overcome these problems by defining macros such\n-as @code{REAL_VALUE_TYPE}.  But doing so is a substantial amount of\n-work for each target machine.\n-@ifset INTERNALS\n-@xref{Cross-compilation}.\n-@end ifset\n-@ifclear INTERNALS\n-@xref{Cross-compilation,,Cross Compilation and Floating Point Format,\n-gcc.info, Using and Porting GCC}.\n-@end ifclear\n-\n-@item\n-At present, the program @file{mips-tfile} which adds debug\n-support to object files on MIPS systems does not work in a cross\n-compile environment.\n-@end itemize\n-\n-@node Interoperation\n-@section Interoperation\n-\n-This section lists various difficulties encountered in using GCC\n-together with other compilers or with the assemblers, linkers,\n-libraries and debuggers on certain systems.\n-\n-@itemize @bullet\n-@item\n-Objective-C does not work on the RS/6000.\n-\n-@item\n-G++ does not do name mangling in the same way as other C++\n-compilers.  This means that object files compiled with one compiler\n-cannot be used with another.\n-\n-This effect is intentional, to protect you from more subtle problems.\n-Compilers differ as to many internal details of C++ implementation,\n-including: how class instances are laid out, how multiple inheritance is\n-implemented, and how virtual function calls are handled.  If the name\n-encoding were made the same, your programs would link against libraries\n-provided from other compilers---but the programs would then crash when\n-run.  Incompatible libraries are then detected at link time, rather than\n-at run time.\n-\n-@item\n-Older GDB versions sometimes fail to read the output of GCC version\n-2.  If you have trouble, get GDB version 4.4 or later.\n-\n-@item\n-@cindex DBX\n-DBX rejects some files produced by GCC, though it accepts similar\n-constructs in output from PCC@.  Until someone can supply a coherent\n-description of what is valid DBX input and what is not, there is\n-nothing I can do about these problems.  You are on your own.\n-\n-@item\n-The GNU assembler (GAS) does not support PIC@.  To generate PIC code, you\n-must use some other assembler, such as @file{/bin/as}.\n-\n-@item\n-On some BSD systems, including some versions of Ultrix, use of profiling\n-causes static variable destructors (currently used only in C++) not to\n-be run.\n-\n-@ignore\n-@cindex @code{vfork}, for the Sun-4\n-@item\n-There is a bug in @code{vfork} on the Sun-4 which causes the registers\n-of the child process to clobber those of the parent.  Because of this,\n-programs that call @code{vfork} are likely to lose when compiled\n-optimized with GCC when the child code alters registers which contain\n-C variables in the parent.  This affects variables which are live in the\n-parent across the call to @code{vfork}.\n-\n-If you encounter this, you can work around the problem by declaring\n-variables @code{volatile} in the function that calls @code{vfork}, until\n-the problem goes away, or by not declaring them @code{register} and not\n-using @option{-O} for those source files.\n-@end ignore\n-\n-@item\n-On some SGI systems, when you use @option{-lgl_s} as an option,\n-it gets translated magically to @samp{-lgl_s -lX11_s -lc_s}.\n-Naturally, this does not happen when you use GCC@.\n-You must specify all three options explicitly.\n-\n-@item\n-On a Sparc, GCC aligns all values of type @code{double} on an 8-byte\n-boundary, and it expects every @code{double} to be so aligned.  The Sun\n-compiler usually gives @code{double} values 8-byte alignment, with one\n-exception: function arguments of type @code{double} may not be aligned.\n-\n-As a result, if a function compiled with Sun CC takes the address of an\n-argument of type @code{double} and passes this pointer of type\n-@code{double *} to a function compiled with GCC, dereferencing the\n-pointer may cause a fatal signal.\n-\n-One way to solve this problem is to compile your entire program with GCC@.\n-Another solution is to modify the function that is compiled with\n-Sun CC to copy the argument into a local variable; local variables\n-are always properly aligned.  A third solution is to modify the function\n-that uses the pointer to dereference it via the following function\n-@code{access_double} instead of directly with @samp{*}:\n-\n-@smallexample\n-inline double\n-access_double (double *unaligned_ptr)\n-@{\n-  union d2i @{ double d; int i[2]; @};\n-\n-  union d2i *p = (union d2i *) unaligned_ptr;\n-  union d2i u;\n-\n-  u.i[0] = p->i[0];\n-  u.i[1] = p->i[1];\n-\n-  return u.d;\n-@}\n-@end smallexample\n-\n-@noindent\n-Storing into the pointer can be done likewise with the same union.\n-\n-@item\n-On Solaris, the @code{malloc} function in the @file{libmalloc.a} library\n-may allocate memory that is only 4 byte aligned.  Since GCC on the\n-Sparc assumes that doubles are 8 byte aligned, this may result in a\n-fatal signal if doubles are stored in memory allocated by the\n-@file{libmalloc.a} library.\n-\n-The solution is to not use the @file{libmalloc.a} library.  Use instead\n-@code{malloc} and related functions from @file{libc.a}; they do not have\n-this problem.\n-\n-@item\n-Sun forgot to include a static version of @file{libdl.a} with some\n-versions of SunOS (mainly 4.1).  This results in undefined symbols when\n-linking static binaries (that is, if you use @option{-static}).  If you\n-see undefined symbols @code{_dlclose}, @code{_dlsym} or @code{_dlopen}\n-when linking, compile and link against the file\n-@file{mit/util/misc/dlsym.c} from the MIT version of X windows.\n-\n-@item\n-The 128-bit long double format that the Sparc port supports currently\n-works by using the architecturally defined quad-word floating point\n-instructions.  Since there is no hardware that supports these\n-instructions they must be emulated by the operating system.  Long\n-doubles do not work in Sun OS versions 4.0.3 and earlier, because the\n-kernel emulator uses an obsolete and incompatible format.  Long doubles\n-do not work in Sun OS version 4.1.1 due to a problem in a Sun library.\n-Long doubles do work on Sun OS versions 4.1.2 and higher, but GCC\n-does not enable them by default.  Long doubles appear to work in Sun OS\n-5.x (Solaris 2.x).\n-\n-@item\n-On HP-UX version 9.01 on the HP PA, the HP compiler @code{cc} does not\n-compile GCC correctly.  We do not yet know why.  However, GCC\n-compiled on earlier HP-UX versions works properly on HP-UX 9.01 and can\n-compile itself properly on 9.01.\n-\n-@item\n-On the HP PA machine, ADB sometimes fails to work on functions compiled\n-with GCC@.  Specifically, it fails to work on functions that use\n-@code{alloca} or variable-size arrays.  This is because GCC doesn't\n-generate HP-UX unwind descriptors for such functions.  It may even be\n-impossible to generate them.\n-\n-@item\n-Debugging (@option{-g}) is not supported on the HP PA machine, unless you use\n-the preliminary GNU tools (@pxref{Installation}).\n-\n-@item\n-Taking the address of a label may generate errors from the HP-UX\n-PA assembler.  GAS for the PA does not have this problem.\n-\n-@item\n-Using floating point parameters for indirect calls to static functions\n-will not work when using the HP assembler.  There simply is no way for GCC\n-to specify what registers hold arguments for static functions when using\n-the HP assembler.  GAS for the PA does not have this problem.\n-\n-@item\n-In extremely rare cases involving some very large functions you may\n-receive errors from the HP linker complaining about an out of bounds\n-unconditional branch offset.  This used to occur more often in previous\n-versions of GCC, but is now exceptionally rare.  If you should run\n-into it, you can work around by making your function smaller.\n-\n-@item\n-GCC compiled code sometimes emits warnings from the HP-UX assembler of\n-the form:\n-\n-@smallexample\n-(warning) Use of GR3 when\n-  frame >= 8192 may cause conflict.\n-@end smallexample\n-\n-These warnings are harmless and can be safely ignored.\n-\n-@item\n-The current version of the assembler (@file{/bin/as}) for the RS/6000\n-has certain problems that prevent the @option{-g} option in GCC from\n-working.  Note that @file{Makefile.in} uses @option{-g} by default when\n-compiling @file{libgcc2.c}.\n-\n-IBM has produced a fixed version of the assembler.  The upgraded\n-assembler unfortunately was not included in any of the AIX 3.2 update\n-PTF releases (3.2.2, 3.2.3, or 3.2.3e).  Users of AIX 3.1 should request\n-PTF U403044 from IBM and users of AIX 3.2 should request PTF U416277.\n-See the file @file{README.RS6000} for more details on these updates.\n-\n-You can test for the presence of a fixed assembler by using the\n-command\n-\n-@smallexample\n-as -u < /dev/null\n-@end smallexample\n-\n-@noindent\n-If the command exits normally, the assembler fix already is installed.\n-If the assembler complains that @option{-u} is an unknown flag, you need to\n-order the fix.\n-\n-@item\n-On the IBM RS/6000, compiling code of the form\n-\n-@smallexample\n-extern int foo;\n-\n-@dots{} foo @dots{}\n-\n-static int foo;\n-@end smallexample\n-\n-@noindent\n-will cause the linker to report an undefined symbol @code{foo}.\n-Although this behavior differs from most other systems, it is not a\n-bug because redefining an @code{extern} variable as @code{static}\n-is undefined in ISO C@.\n-\n-@item\n-AIX on the RS/6000 provides support (NLS) for environments outside of\n-the United States.  Compilers and assemblers use NLS to support\n-locale-specific representations of various objects including\n-floating-point numbers (@samp{.} vs @samp{,} for separating decimal fractions).\n-There have been problems reported where the library linked with GCC does\n-not produce the same floating-point formats that the assembler accepts.\n-If you have this problem, set the @env{LANG} environment variable to\n-@samp{C} or @samp{En_US}.\n-\n-@item\n-@opindex fdollars-in-identifiers\n-Even if you specify @option{-fdollars-in-identifiers},\n-you cannot successfully use @samp{$} in identifiers on the RS/6000 due\n-to a restriction in the IBM assembler.  GAS supports these\n-identifiers.\n-\n-@item\n-On the RS/6000, XLC version 1.3.0.0 will miscompile @file{jump.c}.  XLC\n-version 1.3.0.1 or later fixes this problem.  You can obtain XLC-1.3.0.2\n-by requesting PTF 421749 from IBM@.\n-\n-@item\n-@opindex mno-serialize-volatile\n-There is an assembler bug in versions of DG/UX prior to 5.4.2.01 that\n-occurs when the @samp{fldcr} instruction is used.  GCC uses\n-@samp{fldcr} on the 88100 to serialize volatile memory references.  Use\n-the option @option{-mno-serialize-volatile} if your version of the\n-assembler has this bug.\n-\n-@item\n-On VMS, GAS versions 1.38.1 and earlier may cause spurious warning\n-messages from the linker.  These warning messages complain of mismatched\n-psect attributes.  You can ignore them.  @xref{VMS Install}.\n-\n-@item\n-On NewsOS version 3, if you include both of the files @file{stddef.h}\n-and @file{sys/types.h}, you get an error because there are two typedefs\n-of @code{size_t}.  You should change @file{sys/types.h} by adding these\n-lines around the definition of @code{size_t}:\n-\n-@smallexample\n-#ifndef _SIZE_T\n-#define _SIZE_T\n-@var{actual-typedef-here}\n-#endif\n-@end smallexample\n-\n-@cindex Alliant\n-@item\n-On the Alliant, the system's own convention for returning structures\n-and unions is unusual, and is not compatible with GCC no matter\n-what options are used.\n-\n-@cindex RT PC\n-@cindex IBM RT PC\n-@item\n-@opindex mhc-struct-return\n-On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n-convention for structure and union returning.  Use the option\n-@option{-mhc-struct-return} to tell GCC to use a convention compatible\n-with it.\n-\n-@cindex VAX calling convention\n-@cindex Ultrix calling convention\n-@item\n-@opindex fcall-saved\n-On Ultrix, the Fortran compiler expects registers 2 through 5 to be saved\n-by function calls.  However, the C compiler uses conventions compatible\n-with BSD Unix: registers 2 through 5 may be clobbered by function calls.\n-\n-GCC uses the same convention as the Ultrix C compiler.  You can use\n-these options to produce code compatible with the Fortran compiler:\n-\n-@smallexample\n--fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5\n-@end smallexample\n-\n-@item\n-On the WE32k, you may find that programs compiled with GCC do not\n-work with the standard shared C library.  You may need to link with\n-the ordinary C compiler.  If you do so, you must specify the following\n-options:\n-\n-@smallexample\n--L/usr/local/lib/gcc-lib/we32k-att-sysv/2.8.1 -lgcc -lc_s\n-@end smallexample\n-\n-The first specifies where to find the library @file{libgcc.a}\n-specified with the @option{-lgcc} option.\n-\n-GCC does linking by invoking @command{ld}, just as @command{cc} does, and\n-there is no reason why it @emph{should} matter which compilation program\n-you use to invoke @command{ld}.  If someone tracks this problem down,\n-it can probably be fixed easily.\n-\n-@item\n-On the Alpha, you may get assembler errors about invalid syntax as a\n-result of floating point constants.  This is due to a bug in the C\n-library functions @code{ecvt}, @code{fcvt} and @code{gcvt}.  Given valid\n-floating point numbers, they sometimes print @samp{NaN}.\n-\n-@item\n-On Irix 4.0.5F (and perhaps in some other versions), an assembler bug\n-sometimes reorders instructions incorrectly when optimization is turned\n-on.  If you think this may be happening to you, try using the GNU\n-assembler; GAS version 2.1 supports ECOFF on Irix.\n-\n-@opindex noasmopt\n-Or use the @option{-noasmopt} option when you compile GCC with itself,\n-and then again when you compile your program.  (This is a temporary\n-kludge to turn off assembler optimization on Irix.)  If this proves to\n-be what you need, edit the assembler spec in the file @file{specs} so\n-that it unconditionally passes @option{-O0} to the assembler, and never\n-passes @option{-O2} or @option{-O3}.\n-@end itemize\n-\n-@node External Bugs\n-@section Problems Compiling Certain Programs\n-\n-@c prevent bad page break with this line\n-Certain programs have problems compiling.\n-\n-@itemize @bullet\n-@item\n-Parse errors may occur compiling X11 on a Decstation running Ultrix 4.2\n-because of problems in DEC's versions of the X11 header files\n-@file{X11/Xlib.h} and @file{X11/Xutil.h}.  People recommend adding\n-@option{-I/usr/include/mit} to use the MIT versions of the header files,\n-using the @option{-traditional} switch to turn off ISO C, or fixing the\n-header files by adding this:\n-\n-@example\n-#ifdef __STDC__\n-#define NeedFunctionPrototypes 0\n-#endif\n-@end example\n-\n-@item\n-On various 386 Unix systems derived from System V, including SCO, ISC,\n-and ESIX, you may get error messages about running out of virtual memory\n-while compiling certain programs.\n-\n-You can prevent this problem by linking GCC with the GNU malloc\n-(which thus replaces the malloc that comes with the system).  GNU malloc\n-is available as a separate package, and also in the file\n-@file{src/gmalloc.c} in the GNU Emacs 19 distribution.\n-\n-If you have installed GNU malloc as a separate library package, use this\n-option when you relink GCC:\n-\n-@example\n-MALLOC=/usr/local/lib/libgmalloc.a\n-@end example\n-\n-Alternatively, if you have compiled @file{gmalloc.c} from Emacs 19, copy\n-the object file to @file{gmalloc.o} and use this option when you relink\n-GCC:\n-\n-@example\n-MALLOC=gmalloc.o\n-@end example\n-@end itemize\n-\n-@node Incompatibilities\n-@section Incompatibilities of GCC\n-@cindex incompatibilities of GCC\n-@opindex traditional\n-\n-There are several noteworthy incompatibilities between GNU C and K&R\n-(non-ISO) versions of C@.  The @option{-traditional} option\n-eliminates many of these incompatibilities, @emph{but not all}, by\n-telling GCC to behave like a K&R C compiler.\n-\n-@itemize @bullet\n-@cindex string constants\n-@cindex read-only strings\n-@cindex shared strings\n-@item\n-GCC normally makes string constants read-only.  If several\n-identical-looking string constants are used, GCC stores only one\n-copy of the string.\n-\n-@cindex @code{mktemp}, and constant strings\n-One consequence is that you cannot call @code{mktemp} with a string\n-constant argument.  The function @code{mktemp} always alters the\n-string its argument points to.\n-\n-@cindex @code{sscanf}, and constant strings\n-@cindex @code{fscanf}, and constant strings\n-@cindex @code{scanf}, and constant strings\n-Another consequence is that @code{sscanf} does not work on some systems\n-when passed a string constant as its format control string or input.\n-This is because @code{sscanf} incorrectly tries to write into the string\n-constant.  Likewise @code{fscanf} and @code{scanf}.\n-\n-@opindex fwritable-strings\n-The best solution to these problems is to change the program to use\n-@code{char}-array variables with initialization strings for these\n-purposes instead of string constants.  But if this is not possible,\n-you can use the @option{-fwritable-strings} flag, which directs GCC\n-to handle string constants the same way most C compilers do.\n-@option{-traditional} also has this effect, among others.\n-\n-@item\n-@code{-2147483648} is positive.\n-\n-This is because 2147483648 cannot fit in the type @code{int}, so\n-(following the ISO C rules) its data type is @code{unsigned long int}.\n-Negating this value yields 2147483648 again.\n-\n-@item\n-GCC does not substitute macro arguments when they appear inside of\n-string constants.  For example, the following macro in GCC\n-\n-@example\n-#define foo(a) \"a\"\n-@end example\n-\n-@noindent\n-will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n-\n-The @option{-traditional} option directs GCC to handle such cases\n-(among others) in the old-fashioned (non-ISO) fashion.\n-\n-@cindex @code{setjmp} incompatibilities\n-@cindex @code{longjmp} incompatibilities\n-@item\n-When you use @code{setjmp} and @code{longjmp}, the only automatic\n-variables guaranteed to remain valid are those declared\n-@code{volatile}.  This is a consequence of automatic register\n-allocation.  Consider this function:\n-\n-@example\n-jmp_buf j;\n-\n-foo ()\n-@{\n-  int a, b;\n-\n-  a = fun1 ();\n-  if (setjmp (j))\n-    return a;\n-\n-  a = fun2 ();\n-  /* @r{@code{longjmp (j)} may occur in @code{fun3}.} */\n-  return a + fun3 ();\n-@}\n-@end example\n-\n-Here @code{a} may or may not be restored to its first value when the\n-@code{longjmp} occurs.  If @code{a} is allocated in a register, then\n-its first value is restored; otherwise, it keeps the last value stored\n-in it.\n-\n-@opindex W\n-If you use the @option{-W} option with the @option{-O} option, you will\n-get a warning when GCC thinks such a problem might be possible.\n-\n-The @option{-traditional} option directs GCC to put variables in\n-the stack by default, rather than in registers, in functions that\n-call @code{setjmp}.  This results in the behavior found in\n-traditional C compilers.\n-\n-@item\n-Programs that use preprocessing directives in the middle of macro\n-arguments do not work with GCC@.  For example, a program like this\n-will not work:\n-\n-@example\n-@group\n-foobar (\n-#define luser\n-        hack)\n-@end group\n-@end example\n-\n-ISO C does not permit such a construct.  It would make sense to support\n-it when @option{-traditional} is used, but it is too much work to\n-implement.\n-\n-@item\n-K&R compilers allow comments to cross over an inclusion boundary\n-(i.e.@: started in an include file and ended in the including file).  I think\n-this would be quite ugly and can't imagine it could be needed.\n-\n-@cindex external declaration scope\n-@cindex scope of external declarations\n-@cindex declaration scope\n-@item\n-Declarations of external variables and functions within a block apply\n-only to the block containing the declaration.  In other words, they\n-have the same scope as any other declaration in the same place.\n-\n-In some other C compilers, a @code{extern} declaration affects all the\n-rest of the file even if it happens within a block.\n-\n-The @option{-traditional} option directs GCC to treat all @code{extern}\n-declarations as global, like traditional compilers.\n-\n-@item\n-In traditional C, you can combine @code{long}, etc., with a typedef name,\n-as shown here:\n-\n-@example\n-typedef int foo;\n-typedef long foo bar;\n-@end example\n-\n-In ISO C, this is not allowed: @code{long} and other type modifiers\n-require an explicit @code{int}.  Because this criterion is expressed\n-by Bison grammar rules rather than C code, the @option{-traditional}\n-flag cannot alter it.\n-\n-@cindex typedef names as function parameters\n-@item\n-PCC allows typedef names to be used as function parameters.  The\n-difficulty described immediately above applies here too.\n-\n-@item\n-When in @option{-traditional} mode, GCC allows the following erroneous\n-pair of declarations to appear together in a given scope:\n-\n-@example\n-typedef int foo;\n-typedef foo foo;\n-@end example\n-\n-@item\n-GCC treats all characters of identifiers as significant, even when in\n-@option{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n-first eight characters are significant, although more may be used.''.\n-Also according to K&R-1 (2.2), ``An identifier is a sequence of letters\n-and digits; the first character must be a letter.  The underscore _\n-counts as a letter.'', but GCC also allows dollar signs in identifiers.\n-\n-@cindex whitespace\n-@item\n-PCC allows whitespace in the middle of compound assignment operators\n-such as @samp{+=}.  GCC, following the ISO standard, does not\n-allow this.  The difficulty described immediately above applies here\n-too.\n-\n-@cindex apostrophes\n-@cindex '\n-@item\n-GCC complains about unterminated character constants inside of\n-preprocessing conditionals that fail.  Some programs have English\n-comments enclosed in conditionals that are guaranteed to fail; if these\n-comments contain apostrophes, GCC will probably report an error.  For\n-example, this code would produce an error:\n-\n-@example\n-#if 0\n-You can't expect this to work.\n-#endif\n-@end example\n-\n-The best solution to such a problem is to put the text into an actual\n-C comment delimited by @samp{/*@dots{}*/}.  However,\n-@option{-traditional} suppresses these error messages.\n+@include trouble.texi\n \n-@item\n-Many user programs contain the declaration @samp{long time ();}.  In the\n-past, the system header files on many systems did not actually declare\n-@code{time}, so it did not matter what type your program declared it to\n-return.  But in systems with ISO C headers, @code{time} is declared to\n-return @code{time_t}, and if that is not the same as @code{long}, then\n-@samp{long time ();} is erroneous.\n-\n-The solution is to change your program to use appropriate system headers\n-(@code{<time.h>} on systems with ISO C headers) and not to declare\n-@code{time} if the system header files declare it, or failing that to\n-use @code{time_t} as the return type of @code{time}.\n-\n-@cindex @code{float} as function value type\n-@item\n-When compiling functions that return @code{float}, PCC converts it to\n-a double.  GCC actually returns a @code{float}.  If you are concerned\n-with PCC compatibility, you should declare your functions to return\n-@code{double}; you might as well say what you mean.\n-\n-@cindex structures\n-@cindex unions\n-@item\n-When compiling functions that return structures or unions, GCC\n-output code normally uses a method different from that used on most\n-versions of Unix.  As a result, code compiled with GCC cannot call\n-a structure-returning function compiled with PCC, and vice versa.\n-\n-The method used by GCC is as follows: a structure or union which is\n-1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or union\n-with any other size is stored into an address supplied by the caller\n-(usually in a special, fixed register, but on some machines it is passed\n-on the stack).  The machine-description macros @code{STRUCT_VALUE} and\n-@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n-\n-By contrast, PCC on most target machines returns structures and unions\n-of any size by copying the data into an area of static storage, and then\n-returning the address of that storage as if it were a pointer value.\n-The caller must copy the data from that memory area to the place where\n-the value is wanted.  GCC does not use this method because it is\n-slower and nonreentrant.\n-\n-On some newer machines, PCC uses a reentrant convention for all\n-structure and union returning.  GCC on most of these machines uses a\n-compatible convention when returning structures and unions in memory,\n-but still returns small structures and unions in registers.\n-\n-@opindex fpcc-struct-return\n-You can tell GCC to use a compatible convention for all structure and\n-union returning with the option @option{-fpcc-struct-return}.\n-\n-@cindex preprocessing tokens\n-@cindex preprocessing numbers\n-@item\n-GCC complains about program fragments such as @samp{0x74ae-0x4000}\n-which appear to be two hexadecimal constants separated by the minus\n-operator.  Actually, this string is a single @dfn{preprocessing token}.\n-Each such token must correspond to one token in C@.  Since this does not,\n-GCC prints an error message.  Although it may appear obvious that what\n-is meant is an operator and two values, the ISO C standard specifically\n-requires that this be treated as erroneous.\n-\n-A @dfn{preprocessing token} is a @dfn{preprocessing number} if it\n-begins with a digit and is followed by letters, underscores, digits,\n-periods and @samp{e+}, @samp{e-}, @samp{E+}, @samp{E-}, @samp{p+},\n-@samp{p-}, @samp{P+}, or @samp{P-} character sequences.  (In strict C89\n-mode, the sequences @samp{p+}, @samp{p-}, @samp{P+} and @samp{P-} cannot\n-appear in preprocessing numbers.)\n-\n-To make the above program fragment valid, place whitespace in front of\n-the minus sign.  This whitespace will end the preprocessing number.\n-@end itemize\n-\n-@node Fixed Headers\n-@section Fixed Header Files\n+@include bugreport.texi\n \n-GCC needs to install corrected versions of some system header files.\n-This is because most target systems have some header files that won't\n-work with GCC unless they are changed.  Some have bugs, some are\n-incompatible with ISO C, and some depend on special features of other\n-compilers.\n+@include service.texi\n \n-Installing GCC automatically creates and installs the fixed header\n-files, by running a program called @code{fixincludes} (or for certain\n-targets an alternative such as @code{fixinc.svr4}).  Normally, you\n-don't need to pay attention to this.  But there are cases where it\n-doesn't do the right thing automatically.\n-\n-@itemize @bullet\n-@item\n-If you update the system's header files, such as by installing a new\n-system version, the fixed header files of GCC are not automatically\n-updated.  The easiest way to update them is to reinstall GCC@.  (If\n-you want to be clever, look in the makefile and you can find a\n-shortcut.)\n-\n-@item\n-On some systems, in particular SunOS 4, header file directories contain\n-machine-specific symbolic links in certain places.  This makes it\n-possible to share most of the header files among hosts running the\n-same version of SunOS 4 on different machine models.\n-\n-The programs that fix the header files do not understand this special\n-way of using symbolic links; therefore, the directory of fixed header\n-files is good only for the machine model used to build it.\n-\n-In SunOS 4, only programs that look inside the kernel will notice the\n-difference between machine models.  Therefore, for most purposes, you\n-need not be concerned about this.\n-\n-It is possible to make separate sets of fixed header files for the\n-different machine models, and arrange a structure of symbolic links so\n-as to use the proper set, but you'll have to do this by hand.\n-\n-@item\n-On Lynxos, GCC by default does not fix the header files.  This is\n-because bugs in the shell cause the @code{fixincludes} script to fail.\n-\n-This means you will encounter problems due to bugs in the system header\n-files.  It may be no comfort that they aren't GCC's fault, but it\n-does mean that there's nothing for us to do about them.\n-@end itemize\n-\n-@node Standard Libraries\n-@section Standard Libraries\n-\n-@opindex Wall\n-GCC by itself attempts to be a conforming freestanding implementation.\n-@xref{Standards,,Language Standards Supported by GCC}, for details of\n-what this means.  Beyond the library facilities required of such an\n-implementation, the rest of the C library is supplied by the vendor of\n-the operating system.  If that C library doesn't conform to the C\n-standards, then your programs might get warnings (especially when using\n-@option{-Wall}) that you don't expect.\n-\n-For example, the @code{sprintf} function on SunOS 4.1.3 returns\n-@code{char *} while the C standard says that @code{sprintf} returns an\n-@code{int}.  The @code{fixincludes} program could make the prototype for\n-this function match the Standard, but that would be wrong, since the\n-function will still return @code{char *}.\n-\n-If you need a Standard compliant library, then you need to find one, as\n-GCC does not provide one.  The GNU C library (called @code{glibc})\n-provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for\n-GNU/Linux and HURD-based GNU systems; no recent version of it supports\n-other systems, though some very old versions did.  Version 2.2 of the\n-GNU C library includes nearly complete C99 support.  You could also ask\n-your operating system vendor if newer libraries are available.\n-\n-@node Disappointments\n-@section Disappointments and Misunderstandings\n-\n-These problems are perhaps regrettable, but we don't know any practical\n-way around them.\n-\n-@itemize @bullet\n-@item\n-Certain local variables aren't recognized by debuggers when you compile\n-with optimization.\n-\n-This occurs because sometimes GCC optimizes the variable out of\n-existence.  There is no way to tell the debugger how to compute the\n-value such a variable ``would have had'', and it is not clear that would\n-be desirable anyway.  So GCC simply does not mention the eliminated\n-variable when it writes debugging information.\n-\n-You have to expect a certain amount of disagreement between the\n-executable and your source code, when you use optimization.\n-\n-@cindex conflicting types\n-@cindex scope of declaration\n-@item\n-Users often think it is a bug when GCC reports an error for code\n-like this:\n-\n-@example\n-int foo (struct mumble *);\n-\n-struct mumble @{ @dots{} @};\n-\n-int foo (struct mumble *x)\n-@{ @dots{} @}\n-@end example\n-\n-This code really is erroneous, because the scope of @code{struct\n-mumble} in the prototype is limited to the argument list containing it.\n-It does not refer to the @code{struct mumble} defined with file scope\n-immediately below---they are two unrelated types with similar names in\n-different scopes.\n-\n-But in the definition of @code{foo}, the file-scope type is used\n-because that is available to be inherited.  Thus, the definition and\n-the prototype do not match, and you get an error.\n-\n-This behavior may seem silly, but it's what the ISO standard specifies.\n-It is easy enough for you to make your code work by moving the\n-definition of @code{struct mumble} above the prototype.  It's not worth\n-being incompatible with ISO C just to avoid an error for the example\n-shown above.\n-\n-@item\n-Accesses to bit-fields even in volatile objects works by accessing larger\n-objects, such as a byte or a word.  You cannot rely on what size of\n-object is accessed in order to read or write the bit-field; it may even\n-vary for a given bit-field according to the precise usage.\n-\n-If you care about controlling the amount of memory that is accessed, use\n-volatile but do not use bit-fields.\n-\n-@item\n-GCC comes with shell scripts to fix certain known problems in system\n-header files.  They install corrected copies of various header files in\n-a special directory where only GCC will normally look for them.  The\n-scripts adapt to various systems by searching all the system header\n-files for the problem cases that we know about.\n-\n-If new system header files are installed, nothing automatically arranges\n-to update the corrected header files.  You will have to reinstall GCC\n-to fix the new header files.  More specifically, go to the build\n-directory and delete the files @file{stmp-fixinc} and\n-@file{stmp-headers}, and the subdirectory @code{include}; then do\n-@samp{make install} again.\n-\n-@item\n-@cindex floating point precision\n-On 68000 and x86 systems, for instance, you can get paradoxical results\n-if you test the precise values of floating point numbers.  For example,\n-you can find that a floating point value which is not a NaN is not equal\n-to itself.  This results from the fact that the floating point registers\n-hold a few more bits of precision than fit in a @code{double} in memory.\n-Compiled code moves values between memory and floating point registers\n-at its convenience, and moving them into memory truncates them.\n-\n-@opindex ffloat-store\n-You can partially avoid this problem by using the @option{-ffloat-store}\n-option (@pxref{Optimize Options}).\n-\n-@item\n-On the MIPS, variable argument functions using @file{varargs.h}\n-cannot have a floating point value for the first argument.  The\n-reason for this is that in the absence of a prototype in scope,\n-if the first argument is a floating point, it is passed in a\n-floating point register, rather than an integer register.\n-\n-If the code is rewritten to use the ISO standard @file{stdarg.h}\n-method of variable arguments, and the prototype is in scope at\n-the time of the call, everything will work fine.\n-\n-@item\n-On the H8/300 and H8/300H, variable argument functions must be\n-implemented using the ISO standard @file{stdarg.h} method of\n-variable arguments.  Furthermore, calls to functions using @file{stdarg.h}\n-variable arguments must have a prototype for the called function\n-in scope at the time of the call.\n-@end itemize\n-\n-@node C++ Misunderstandings\n-@section Common Misunderstandings with GNU C++\n-\n-@cindex misunderstandings in C++\n-@cindex surprises in C++\n-@cindex C++ misunderstandings\n-C++ is a complex language and an evolving one, and its standard\n-definition (the ISO C++ standard) was only recently completed.  As a\n-result, your C++ compiler may occasionally surprise you, even when its\n-behavior is correct.  This section discusses some areas that frequently\n-give rise to questions of this sort.\n-\n-@menu\n-* Static Definitions::  Static member declarations are not definitions\n-* Temporaries::         Temporaries may vanish before you expect\n-* Copy Assignment::     Copy Assignment operators copy virtual bases twice\n-@end menu\n-\n-@node Static Definitions\n-@subsection Declare @emph{and} Define Static Members\n-\n-@cindex C++ static data, declaring and defining\n-@cindex static data in C++, declaring and defining\n-@cindex declaring static data in C++\n-@cindex defining static data in C++\n-When a class has static data members, it is not enough to @emph{declare}\n-the static member; you must also @emph{define} it.  For example:\n-\n-@example\n-class Foo\n-@{\n-  @dots{}\n-  void method();\n-  static int bar;\n-@};\n-@end example\n-\n-This declaration only establishes that the class @code{Foo} has an\n-@code{int} named @code{Foo::bar}, and a member function named\n-@code{Foo::method}.  But you still need to define @emph{both}\n-@code{method} and @code{bar} elsewhere.  According to the ISO\n-standard, you must supply an initializer in one (and only one) source\n-file, such as:\n-\n-@example\n-int Foo::bar = 0;\n-@end example\n-\n-Other C++ compilers may not correctly implement the standard behavior.\n-As a result, when you switch to @code{g++} from one of these compilers,\n-you may discover that a program that appeared to work correctly in fact\n-does not conform to the standard: @code{g++} reports as undefined\n-symbols any static data members that lack definitions.\n-\n-@node Temporaries\n-@subsection Temporaries May Vanish Before You Expect\n-\n-@cindex temporaries, lifetime of\n-@cindex portions of temporary objects, pointers to\n-It is dangerous to use pointers or references to @emph{portions} of a\n-temporary object.  The compiler may very well delete the object before\n-you expect it to, leaving a pointer to garbage.  The most common place\n-where this problem crops up is in classes like string classes,\n-especially ones that define a conversion function to type @code{char *}\n-or @code{const char *}---which is one reason why the standard\n-@code{string} class requires you to call the @code{c_str} member\n-function.  However, any class that returns a pointer to some internal\n-structure is potentially subject to this problem.\n-\n-For example, a program may use a function @code{strfunc} that returns\n-@code{string} objects, and another function @code{charfunc} that\n-operates on pointers to @code{char}:\n-\n-@example\n-string strfunc ();\n-void charfunc (const char *);\n-\n-void\n-f ()\n-@{\n-  const char *p = strfunc().c_str();\n-  @dots{}\n-  charfunc (p);\n-  @dots{}\n-  charfunc (p);\n-@}\n-@end example\n-\n-@noindent\n-In this situation, it may seem reasonable to save a pointer to the C\n-string returned by the @code{c_str} member function and use that rather\n-than call @code{c_str} repeatedly.  However, the temporary string\n-created by the call to @code{strfunc} is destroyed after @code{p} is\n-initialized, at which point @code{p} is left pointing to freed memory.\n-\n-Code like this may run successfully under some other compilers,\n-particularly obsolete cfront-based compilers that delete temporaries\n-along with normal local variables.  However, the GNU C++ behavior is\n-standard-conforming, so if your program depends on late destruction of\n-temporaries it is not portable.\n-\n-The safe way to write such code is to give the temporary a name, which\n-forces it to remain until the end of the scope of the name.  For\n-example:\n-\n-@example\n-string& tmp = strfunc ();\n-charfunc (tmp.c_str ());\n-@end example\n-\n-@node Copy Assignment\n-@subsection Implicit Copy-Assignment for Virtual Bases\n-\n-When a base class is virtual, only one subobject of the base class\n-belongs to each full object.  Also, the constructors and destructors are\n-invoked only once, and called from the most-derived class.  However, such\n-objects behave unspecified when being assigned.  For example:\n-\n-@example\n-struct Base@{\n-  char *name;\n-  Base(char *n) : name(strdup(n))@{@}\n-  Base& operator= (const Base& other)@{\n-   free (name);\n-   name = strdup (other.name);\n-  @}\n-@};\n-\n-struct A:virtual Base@{\n-  int val;\n-  A():Base(\"A\")@{@}\n-@};\n-\n-struct B:virtual Base@{\n-  int bval;\n-  B():Base(\"B\")@{@}\n-@};\n-\n-struct Derived:public A, public B@{\n-  Derived():Base(\"Derived\")@{@}\n-@};\n-\n-void func(Derived &d1, Derived &d2)\n-@{\n-  d1 = d2;\n-@}\n-@end example\n-\n-The C++ standard specifies that @samp{Base::Base} is only called once\n-when constructing or copy-constructing a Derived object.  It is\n-unspecified whether @samp{Base::operator=} is called more than once when\n-the implicit copy-assignment for Derived objects is invoked (as it is\n-inside @samp{func} in the example).\n-\n-g++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n-direct bases, then assign all members.  In that algorithm, the virtual\n-base subobject can be encountered many times.  In the example, copying\n-proceeds in the following order: @samp{val}, @samp{name} (via\n-@code{strdup}), @samp{bval}, and @samp{name} again.\n-\n-If application code relies on copy-assignment, a user-defined\n-copy-assignment operator removes any uncertainties.  With such an\n-operator, the application can define whether and how the virtual base\n-subobject is assigned.\n-\n-@node Protoize Caveats\n-@section Caveats of using @command{protoize}\n-\n-The conversion programs @command{protoize} and @command{unprotoize} can\n-sometimes change a source file in a way that won't work unless you\n-rearrange it.\n-\n-@itemize @bullet\n-@item\n-@command{protoize} can insert references to a type name or type tag before\n-the definition, or in a file where they are not defined.\n-\n-If this happens, compiler error messages should show you where the new\n-references are, so fixing the file by hand is straightforward.\n-\n-@item\n-There are some C constructs which @command{protoize} cannot figure out.\n-For example, it can't determine argument types for declaring a\n-pointer-to-function variable; this you must do by hand.  @command{protoize}\n-inserts a comment containing @samp{???} each time it finds such a\n-variable; so you can find all such variables by searching for this\n-string.  ISO C does not require declaring the argument types of\n-pointer-to-function types.\n-\n-@item\n-Using @command{unprotoize} can easily introduce bugs.  If the program\n-relied on prototypes to bring about conversion of arguments, these\n-conversions will not take place in the program without prototypes.\n-One case in which you can be sure @command{unprotoize} is safe is when\n-you are removing prototypes that were made with @command{protoize}; if\n-the program worked before without any prototypes, it will work again\n-without them.\n-\n-@opindex Wconversion\n-You can find all the places where this problem might occur by compiling\n-the program with the @option{-Wconversion} option.  It prints a warning\n-whenever an argument is converted.\n-\n-@item\n-Both conversion programs can be confused if there are macro calls in and\n-around the text to be converted.  In other words, the standard syntax\n-for a declaration or definition must not result from expanding a macro.\n-This problem is inherent in the design of C and cannot be fixed.  If\n-only a few functions have confusing macro calls, you can easily convert\n-them manually.\n-\n-@item\n-@command{protoize} cannot get the argument types for a function whose\n-definition was not actually compiled due to preprocessing conditionals.\n-When this happens, @command{protoize} changes nothing in regard to such\n-a function.  @command{protoize} tries to detect such instances and warn\n-about them.\n-\n-You can generally work around this problem by using @command{protoize} step\n-by step, each time specifying a different set of @option{-D} options for\n-compilation, until all of the functions have been converted.  There is\n-no automatic way to verify that you have got them all, however.\n-\n-@item\n-Confusion may result if there is an occasion to convert a function\n-declaration or definition in a region of source code where there is more\n-than one formal parameter list present.  Thus, attempts to convert code\n-containing multiple (conditionally compiled) versions of a single\n-function header (in the same vicinity) may not produce the desired (or\n-expected) results.\n-\n-If you plan on converting source files which contain such code, it is\n-recommended that you first make sure that each conditionally compiled\n-region of source code which contains an alternative function header also\n-contains at least one additional follower token (past the final right\n-parenthesis of the function header).  This should circumvent the\n-problem.\n-\n-@item\n-@command{unprotoize} can become confused when trying to convert a function\n-definition or declaration which contains a declaration for a\n-pointer-to-function formal argument which has the same name as the\n-function being defined or declared.  We recommend you avoid such choices\n-of formal parameter names.\n-\n-@item\n-You might also want to correct some of the indentation by hand and break\n-long lines.  (The conversion programs don't write lines longer than\n-eighty characters in any case.)\n-@end itemize\n-\n-@node Non-bugs\n-@section Certain Changes We Don't Want to Make\n-\n-This section lists changes that people frequently request, but which\n-we do not make because we think GCC is better without them.\n-\n-@itemize @bullet\n-@item\n-Checking the number and type of arguments to a function which has an\n-old-fashioned definition and no prototype.\n-\n-Such a feature would work only occasionally---only for calls that appear\n-in the same file as the called function, following the definition.  The\n-only way to check all calls reliably is to add a prototype for the\n-function.  But adding a prototype eliminates the motivation for this\n-feature.  So the feature is not worthwhile.\n-\n-@item\n-Warning about using an expression whose type is signed as a shift count.\n-\n-Shift count operands are probably signed more often than unsigned.\n-Warning about this would cause far more annoyance than good.\n-\n-@item\n-Warning about assigning a signed value to an unsigned variable.\n-\n-Such assignments must be very common; warning about them would cause\n-more annoyance than good.\n-\n-@item\n-Warning when a non-void function value is ignored.\n-\n-Coming as I do from a Lisp background, I balk at the idea that there is\n-something dangerous about discarding a value.  There are functions that\n-return values which some callers may find useful; it makes no sense to\n-clutter the program with a cast to @code{void} whenever the value isn't\n-useful.\n-\n-@item\n-@opindex fshort-enums\n-Making @option{-fshort-enums} the default.\n-\n-This would cause storage layout to be incompatible with most other C\n-compilers.  And it doesn't seem very important, given that you can get\n-the same result in other ways.  The case where it matters most is when\n-the enumeration-valued object is inside a structure, and in that case\n-you can specify a field width explicitly.\n-\n-@item\n-Making bit-fields unsigned by default on particular machines where ``the\n-ABI standard'' says to do so.\n-\n-The ISO C standard leaves it up to the implementation whether a bit-field\n-declared plain @code{int} is signed or not.  This in effect creates two\n-alternative dialects of C@.\n-\n-@opindex fsigned-bitfields\n-@opindex funsigned-bitfields\n-The GNU C compiler supports both dialects; you can specify the signed\n-dialect with @option{-fsigned-bitfields} and the unsigned dialect with\n-@option{-funsigned-bitfields}.  However, this leaves open the question of\n-which dialect to use by default.\n-\n-Currently, the preferred dialect makes plain bit-fields signed, because\n-this is simplest.  Since @code{int} is the same as @code{signed int} in\n-every other context, it is cleanest for them to be the same in bit-fields\n-as well.\n-\n-Some computer manufacturers have published Application Binary Interface\n-standards which specify that plain bit-fields should be unsigned.  It is\n-a mistake, however, to say anything about this issue in an ABI@.  This is\n-because the handling of plain bit-fields distinguishes two dialects of C@.\n-Both dialects are meaningful on every type of machine.  Whether a\n-particular object file was compiled using signed bit-fields or unsigned\n-is of no concern to other object files, even if they access the same\n-bit-fields in the same data structures.\n-\n-A given program is written in one or the other of these two dialects.\n-The program stands a chance to work on most any machine if it is\n-compiled with the proper dialect.  It is unlikely to work at all if\n-compiled with the wrong dialect.\n-\n-Many users appreciate the GNU C compiler because it provides an\n-environment that is uniform across machines.  These users would be\n-inconvenienced if the compiler treated plain bit-fields differently on\n-certain machines.\n-\n-Occasionally users write programs intended only for a particular machine\n-type.  On these occasions, the users would benefit if the GNU C compiler\n-were to support by default the same dialect as the other compilers on\n-that machine.  But such applications are rare.  And users writing a\n-program to run on more than one type of machine cannot possibly benefit\n-from this kind of compatibility.\n-\n-This is why GCC does and will treat plain bit-fields in the same\n-fashion on all types of machines (by default).\n-\n-There are some arguments for making bit-fields unsigned by default on all\n-machines.  If, for example, this becomes a universal de facto standard,\n-it would make sense for GCC to go along with it.  This is something\n-to be considered in the future.\n-\n-(Of course, users strongly concerned about portability should indicate\n-explicitly in each bit-field whether it is signed or not.  In this way,\n-they write programs which have the same meaning in both C dialects.)\n-\n-@item\n-@opindex ansi\n-@opindex traditional\n-@opindex std\n-Undefining @code{__STDC__} when @option{-ansi} is not used.\n-\n-Currently, GCC defines @code{__STDC__} as long as you don't use\n-@option{-traditional}.  This provides good results in practice.\n-\n-Programmers normally use conditionals on @code{__STDC__} to ask whether\n-it is safe to use certain features of ISO C, such as function\n-prototypes or ISO token concatenation.  Since plain @command{gcc} supports\n-all the features of ISO C, the correct answer to these questions is\n-``yes''.\n-\n-Some users try to use @code{__STDC__} to check for the availability of\n-certain library facilities.  This is actually incorrect usage in an ISO\n-C program, because the ISO C standard says that a conforming\n-freestanding implementation should define @code{__STDC__} even though it\n-does not have the library facilities.  @samp{gcc -ansi -pedantic} is a\n-conforming freestanding implementation, and it is therefore required to\n-define @code{__STDC__}, even though it does not come with an ISO C\n-library.\n-\n-Sometimes people say that defining @code{__STDC__} in a compiler that\n-does not completely conform to the ISO C standard somehow violates the\n-standard.  This is illogical.  The standard is a standard for compilers\n-that claim to support ISO C, such as @samp{gcc -ansi}---not for other\n-compilers such as plain @command{gcc}.  Whatever the ISO C standard says\n-is relevant to the design of plain @command{gcc} without @option{-ansi} only\n-for pragmatic reasons, not as a requirement.\n-\n-GCC normally defines @code{__STDC__} to be 1, and in addition\n-defines @code{__STRICT_ANSI__} if you specify the @option{-ansi} option,\n-or a @option{-std} option for strict conformance to some version of ISO C@.\n-On some hosts, system include files use a different convention, where\n-@code{__STDC__} is normally 0, but is 1 if the user specifies strict\n-conformance to the C Standard.  GCC follows the host convention when\n-processing system include files, but when processing user files it follows\n-the usual GNU C convention.\n-\n-@item\n-Undefining @code{__STDC__} in C++.\n-\n-Programs written to compile with C++-to-C translators get the\n-value of @code{__STDC__} that goes with the C compiler that is\n-subsequently used.  These programs must test @code{__STDC__}\n-to determine what kind of C preprocessor that compiler uses:\n-whether they should concatenate tokens in the ISO C fashion\n-or in the traditional fashion.\n-\n-These programs work properly with GNU C++ if @code{__STDC__} is defined.\n-They would not work otherwise.\n-\n-In addition, many header files are written to provide prototypes in ISO\n-C but not in traditional C@.  Many of these header files can work without\n-change in C++ provided @code{__STDC__} is defined.  If @code{__STDC__}\n-is not defined, they will all fail, and will all need to be changed to\n-test explicitly for C++ as well.\n-\n-@item\n-Deleting ``empty'' loops.\n-\n-Historically, GCC has not deleted ``empty'' loops under the\n-assumption that the most likely reason you would put one in a program is\n-to have a delay, so deleting them will not make real programs run any\n-faster.\n-\n-However, the rationale here is that optimization of a nonempty loop\n-cannot produce an empty one, which holds for C but is not always the\n-case for C++.\n-\n-@opindex funroll-loops\n-Moreover, with @option{-funroll-loops} small ``empty'' loops are already\n-removed, so the current behavior is both sub-optimal and inconsistent\n-and will change in the future.\n-\n-@item\n-Making side effects happen in the same order as in some other compiler.\n-\n-@cindex side effects, order of evaluation\n-@cindex order of evaluation, side effects\n-It is never safe to depend on the order of evaluation of side effects.\n-For example, a function call like this may very well behave differently\n-from one compiler to another:\n-\n-@example\n-void func (int, int);\n-\n-int i = 2;\n-func (i++, i++);\n-@end example\n-\n-There is no guarantee (in either the C or the C++ standard language\n-definitions) that the increments will be evaluated in any particular\n-order.  Either increment might happen first.  @code{func} might get the\n-arguments @samp{2, 3}, or it might get @samp{3, 2}, or even @samp{2, 2}.\n-\n-@item\n-Not allowing structures with volatile fields in registers.\n-\n-Strictly speaking, there is no prohibition in the ISO C standard\n-against allowing structures with volatile fields in registers, but\n-it does not seem to make any sense and is probably not what you wanted\n-to do.  So the compiler will give an error message in this case.\n-\n-@item\n-Making certain warnings into errors by default.\n-\n-Some ISO C testsuites report failure when the compiler does not produce\n-an error message for a certain program.\n-\n-@opindex pedantic-errors\n-ISO C requires a ``diagnostic'' message for certain kinds of invalid\n-programs, but a warning is defined by GCC to count as a diagnostic.  If\n-GCC produces a warning but not an error, that is correct ISO C support.\n-If test suites call this ``failure'', they should be run with the GCC\n-option @option{-pedantic-errors}, which will turn these warnings into\n-errors.\n-\n-@end itemize\n-\n-@node Warnings and Errors\n-@section Warning Messages and Error Messages\n-\n-@cindex error messages\n-@cindex warnings vs errors\n-@cindex messages, warning and error\n-The GNU compiler can produce two kinds of diagnostics: errors and\n-warnings.  Each kind has a different purpose:\n-\n-@itemize @w{}\n-@item\n-@dfn{Errors} report problems that make it impossible to compile your\n-program.  GCC reports errors with the source file name and line\n-number where the problem is apparent.\n-\n-@item\n-@dfn{Warnings} report other unusual conditions in your code that\n-@emph{may} indicate a problem, although compilation can (and does)\n-proceed.  Warning messages also report the source file name and line\n-number, but include the text @samp{warning:} to distinguish them\n-from error messages.\n-@end itemize\n-\n-Warnings may indicate danger points where you should check to make sure\n-that your program really does what you intend; or the use of obsolete\n-features; or the use of nonstandard features of GNU C or C++.  Many\n-warnings are issued only if you ask for them, with one of the @option{-W}\n-options (for instance, @option{-Wall} requests a variety of useful\n-warnings).\n-\n-@opindex pedantic\n-@opindex pedantic-errors\n-GCC always tries to compile your program if possible; it never\n-gratuitously rejects a program whose meaning is clear merely because\n-(for instance) it fails to conform to a standard.  In some cases,\n-however, the C and C++ standards specify that certain extensions are\n-forbidden, and a diagnostic @emph{must} be issued by a conforming\n-compiler.  The @option{-pedantic} option tells GCC to issue warnings in\n-such cases; @option{-pedantic-errors} says to make them errors instead.\n-This does not mean that @emph{all} non-ISO constructs get warnings\n-or errors.\n-\n-@xref{Warning Options,,Options to Request or Suppress Warnings}, for\n-more detail on these and related command-line options.\n-\n-@node Bugs\n-@chapter Reporting Bugs\n-@cindex bugs\n-@cindex reporting bugs\n-\n-Your bug reports play an essential role in making GCC reliable.\n-\n-When you encounter a problem, the first thing to do is to see if it is\n-already known.  @xref{Trouble}.  If it isn't known, then you should\n-report the problem.\n-\n-Reporting a bug may help you by bringing a solution to your problem, or\n-it may not.  (If it does not, look in the service directory; see\n-@ref{Service}.)  In any case, the principal function of a bug report is\n-to help the entire community by making the next version of GCC work\n-better.  Bug reports are your contribution to the maintenance of GCC@.\n-\n-Since the maintainers are very overloaded, we cannot respond to every\n-bug report.  However, if the bug has not been fixed, we are likely to\n-send you a patch and ask you to tell us whether it works.\n-\n-In order for a bug report to serve its purpose, you must include the\n-information that makes for fixing the bug.\n-\n-@menu\n-* Criteria:  Bug Criteria.   Have you really found a bug?\n-* Where: Bug Lists.\t     Where to send your bug report.\n-* Reporting: Bug Reporting.  How to report a bug effectively.\n-* GNATS: gccbug.             You can use a bug reporting tool.\n-* Known: Trouble.            Known problems.\n-* Help: Service.             Where to ask for help.\n-@end menu\n-\n-@node Bug Criteria,Bug Lists,,Bugs\n-@section Have You Found a Bug?\n-@cindex bug criteria\n-\n-If you are not sure whether you have found a bug, here are some guidelines:\n-\n-@itemize @bullet\n-@cindex fatal signal\n-@cindex core dump\n-@item\n-If the compiler gets a fatal signal, for any input whatever, that is a\n-compiler bug.  Reliable compilers never crash.\n-\n-@cindex invalid assembly code\n-@cindex assembly code, invalid\n-@item\n-If the compiler produces invalid assembly code, for any input whatever\n-(except an @code{asm} statement), that is a compiler bug, unless the\n-compiler reports errors (not just warnings) which would ordinarily\n-prevent the assembler from being run.\n-\n-@cindex undefined behavior\n-@cindex undefined function value\n-@cindex increment operators\n-@item\n-If the compiler produces valid assembly code that does not correctly\n-execute the input source code, that is a compiler bug.\n-\n-However, you must double-check to make sure, because you may have run\n-into an incompatibility between GNU C and traditional C\n-(@pxref{Incompatibilities}).  These incompatibilities might be considered\n-bugs, but they are inescapable consequences of valuable features.\n-\n-Or you may have a program whose behavior is undefined, which happened\n-by chance to give the desired results with another C or C++ compiler.\n-\n-For example, in many nonoptimizing compilers, you can write @samp{x;}\n-at the end of a function instead of @samp{return x;}, with the same\n-results.  But the value of the function is undefined if @code{return}\n-is omitted; it is not a bug when GCC produces different results.\n-\n-Problems often result from expressions with two increment operators,\n-as in @code{f (*p++, *p++)}.  Your previous compiler might have\n-interpreted that expression the way you intended; GCC might\n-interpret it another way.  Neither compiler is wrong.  The bug is\n-in your code.\n-\n-After you have localized the error to a single source line, it should\n-be easy to check for these things.  If your program is correct and\n-well defined, you have found a compiler bug.\n-\n-@item\n-If the compiler produces an error message for valid input, that is a\n-compiler bug.\n-\n-@cindex invalid input\n-@item\n-If the compiler does not produce an error message for invalid input,\n-that is a compiler bug.  However, you should note that your idea of\n-``invalid input'' might be my idea of ``an extension'' or ``support\n-for traditional practice''.\n-\n-@item\n-If you are an experienced user of one of the languages GCC supports, your\n-suggestions for improvement of GCC are welcome in any case.\n-@end itemize\n-\n-@node Bug Lists,Bug Reporting,Bug Criteria,Bugs\n-@section Where to Report Bugs\n-@cindex bug report mailing lists\n-@kindex gcc-bugs@@gcc.gnu.org or bug-gcc@@gnu.org\n-Send bug reports for the GNU Compiler Collection to\n-@email{gcc-bugs@@gcc.gnu.org}.  In accordance with the GNU-wide\n-convention, in which bug reports for tool ``foo'' are sent\n-to @samp{bug-foo@@gnu.org}, the address @email{bug-gcc@@gnu.org}\n-may also be used; it will forward to the address given above.\n-\n-Please read @uref{http://gcc.gnu.org/bugs.html} for additional and/or\n-more up-to-date bug reporting instructions before you post a bug report.\n-\n-@node Bug Reporting,gccbug,Bug Lists,Bugs\n-@section How to Report Bugs\n-@cindex compiler bugs, reporting\n-\n-The fundamental principle of reporting bugs usefully is this:\n-@strong{report all the facts}.  If you are not sure whether to state a\n-fact or leave it out, state it!\n-\n-Often people omit facts because they think they know what causes the\n-problem and they conclude that some details don't matter.  Thus, you might\n-assume that the name of the variable you use in an example does not matter.\n-Well, probably it doesn't, but one cannot be sure.  Perhaps the bug is a\n-stray memory reference which happens to fetch from the location where that\n-name is stored in memory; perhaps, if the name were different, the contents\n-of that location would fool the compiler into doing the right thing despite\n-the bug.  Play it safe and give a specific, complete example.  That is the\n-easiest thing for you to do, and the most helpful.\n-\n-Keep in mind that the purpose of a bug report is to enable someone to\n-fix the bug if it is not known.  It isn't very important what happens if\n-the bug is already known.  Therefore, always write your bug reports on\n-the assumption that the bug is not known.\n-\n-Sometimes people give a few sketchy facts and ask, ``Does this ring a\n-bell?''  This cannot help us fix a bug, so it is basically useless.  We\n-respond by asking for enough details to enable us to investigate.\n-You might as well expedite matters by sending them to begin with.\n-\n-Try to make your bug report self-contained.  If we have to ask you for\n-more information, it is best if you include all the previous information\n-in your response, as well as the information that was missing.\n-\n-Please report each bug in a separate message.  This makes it easier for\n-us to track which bugs have been fixed and to forward your bugs reports\n-to the appropriate maintainer.\n-\n-To enable someone to investigate the bug, you should include all these\n-things:\n-\n-@itemize @bullet\n-@item\n-The version of GCC@.  You can get this by running it with the\n-@option{-v} option.\n-\n-Without this, we won't know whether there is any point in looking for\n-the bug in the current version of GCC@.\n-\n-@item\n-A complete input file that will reproduce the bug.  If the bug is in the\n-C preprocessor, send a source file and any header files that it\n-requires.  If the bug is in the compiler proper (@file{cc1}), send the\n-preprocessor output generated by adding @option{-save-temps} to the\n-compilation command (@pxref{Debugging Options}).  When you do this, use\n-the same @option{-I}, @option{-D} or @option{-U} options that you used in\n-actual compilation.  Then send the @var{input}.i or @var{input}.ii files\n-generated.\n-\n-A single statement is not enough of an example.  In order to compile it,\n-it must be embedded in a complete file of compiler input; and the bug\n-might depend on the details of how this is done.\n-\n-Without a real example one can compile, all anyone can do about your bug\n-report is wish you luck.  It would be futile to try to guess how to\n-provoke the bug.  For example, bugs in register allocation and reloading\n-frequently depend on every little detail of the function they happen in.\n-\n-Even if the input file that fails comes from a GNU program, you should\n-still send the complete test case.  Don't ask the GCC maintainers to\n-do the extra work of obtaining the program in question---they are all\n-overworked as it is.  Also, the problem may depend on what is in the\n-header files on your system; it is unreliable for the GCC maintainers\n-to try the problem with the header files available to them.  By sending\n-CPP output, you can eliminate this source of uncertainty and save us\n-a certain percentage of wild goose chases.\n-\n-@item\n-The command arguments you gave GCC to compile that example\n-and observe the bug.  For example, did you use @option{-O}?  To guarantee\n-you won't omit something important, list all the options.\n-\n-If we were to try to guess the arguments, we would probably guess wrong\n-and then we would not encounter the bug.\n-\n-@item\n-The type of machine you are using, and the operating system name and\n-version number.\n-\n-@item\n-The operands you gave to the @code{configure} command when you installed\n-the compiler.\n-\n-@item\n-A complete list of any modifications you have made to the compiler\n-source.  (We don't promise to investigate the bug unless it happens in\n-an unmodified compiler.  But if you've made modifications and don't tell\n-us, then you are sending us on a wild goose chase.)\n-\n-Be precise about these changes.  A description in English is not\n-enough---send a context diff for them.\n-\n-Adding files of your own (such as a machine description for a machine we\n-don't support) is a modification of the compiler source.\n-\n-@item\n-Details of any other deviations from the standard procedure for installing\n-GCC@.\n-\n-@item\n-A description of what behavior you observe that you believe is\n-incorrect.  For example, ``The compiler gets a fatal signal,'' or,\n-``The assembler instruction at line 208 in the output is incorrect.''\n-\n-Of course, if the bug is that the compiler gets a fatal signal, then one\n-can't miss it.  But if the bug is incorrect output, the maintainer might\n-not notice unless it is glaringly wrong.  None of us has time to study\n-all the assembler code from a 50-line C program just on the chance that\n-one instruction might be wrong.  We need @emph{you} to do this part!\n-\n-Even if the problem you experience is a fatal signal, you should still\n-say so explicitly.  Suppose something strange is going on, such as, your\n-copy of the compiler is out of synch, or you have encountered a bug in\n-the C library on your system.  (This has happened!)  Your copy might\n-crash and the copy here would not.  If you @i{said} to expect a crash,\n-then when the compiler here fails to crash, we would know that the bug\n-was not happening.  If you don't say to expect a crash, then we would\n-not know whether the bug was happening.  We would not be able to draw\n-any conclusion from our observations.\n-\n-If the problem is a diagnostic when compiling GCC with some other\n-compiler, say whether it is a warning or an error.\n-\n-Often the observed symptom is incorrect output when your program is run.\n-Sad to say, this is not enough information unless the program is short\n-and simple.  None of us has time to study a large program to figure out\n-how it would work if compiled correctly, much less which line of it was\n-compiled wrong.  So you will have to do that.  Tell us which source line\n-it is, and what incorrect result happens when that line is executed.  A\n-person who understands the program can find this as easily as finding a\n-bug in the program itself.\n-\n-@item\n-If you send examples of assembler code output from GCC,\n-please use @option{-g} when you make them.  The debugging information\n-includes source line numbers which are essential for correlating the\n-output with the input.\n-\n-@item\n-If you wish to mention something in the GCC source, refer to it by\n-context, not by line number.\n-\n-The line numbers in the development sources don't match those in your\n-sources.  Your line numbers would convey no useful information to the\n-maintainers.\n-\n-@item\n-Additional information from a debugger might enable someone to find a\n-problem on a machine which he does not have available.  However, you\n-need to think when you collect this information if you want it to have\n-any chance of being useful.\n-\n-@cindex backtrace for bug reports\n-For example, many people send just a backtrace, but that is never\n-useful by itself.  A simple backtrace with arguments conveys little\n-about GCC because the compiler is largely data-driven; the same\n-functions are called over and over for different RTL insns, doing\n-different things depending on the details of the insn.\n-\n-Most of the arguments listed in the backtrace are useless because they\n-are pointers to RTL list structure.  The numeric values of the\n-pointers, which the debugger prints in the backtrace, have no\n-significance whatever; all that matters is the contents of the objects\n-they point to (and most of the contents are other such pointers).\n-\n-In addition, most compiler passes consist of one or more loops that\n-scan the RTL insn sequence.  The most vital piece of information about\n-such a loop---which insn it has reached---is usually in a local variable,\n-not in an argument.\n-\n-@findex debug_rtx\n-What you need to provide in addition to a backtrace are the values of\n-the local variables for several stack frames up.  When a local\n-variable or an argument is an RTX, first print its value and then use\n-the GDB command @code{pr} to print the RTL expression that it points\n-to.  (If GDB doesn't run on your machine, use your debugger to call\n-the function @code{debug_rtx} with the RTX as an argument.)  In\n-general, whenever a variable is a pointer, its value is no use\n-without the data it points to.\n-@end itemize\n-\n-Here are some things that are not necessary:\n-\n-@itemize @bullet\n-@item\n-A description of the envelope of the bug.\n-\n-Often people who encounter a bug spend a lot of time investigating\n-which changes to the input file will make the bug go away and which\n-changes will not affect it.\n-\n-This is often time consuming and not very useful, because the way we\n-will find the bug is by running a single example under the debugger with\n-breakpoints, not by pure deduction from a series of examples.  You might\n-as well save your time for something else.\n-\n-Of course, if you can find a simpler example to report @emph{instead} of\n-the original one, that is a convenience.  Errors in the output will be\n-easier to spot, running under the debugger will take less time, etc.\n-Most GCC bugs involve just one function, so the most straightforward\n-way to simplify an example is to delete all the function definitions\n-except the one where the bug occurs.  Those earlier in the file may be\n-replaced by external declarations if the crucial function depends on\n-them.  (Exception: inline functions may affect compilation of functions\n-defined later in the file.)\n-\n-However, simplification is not vital; if you don't want to do this,\n-report the bug anyway and send the entire test case you used.\n-\n-@item\n-In particular, some people insert conditionals @samp{#ifdef BUG} around\n-a statement which, if removed, makes the bug not happen.  These are just\n-clutter; we won't pay any attention to them anyway.  Besides, you should\n-send us cpp output, and that can't have conditionals.\n-\n-@item\n-A patch for the bug.\n-\n-A patch for the bug is useful if it is a good one.  But don't omit the\n-necessary information, such as the test case, on the assumption that a\n-patch is all we need.  We might see problems with your patch and decide\n-to fix the problem another way, or we might not understand it at all.\n-\n-Sometimes with a program as complicated as GCC it is very hard to\n-construct an example that will make the program follow a certain path\n-through the code.  If you don't send the example, we won't be able to\n-construct one, so we won't be able to verify that the bug is fixed.\n-\n-And if we can't understand what bug you are trying to fix, or why your\n-patch should be an improvement, we won't install it.  A test case will\n-help us to understand.\n-\n-See @uref{http://gcc.gnu.org/contribute.html}\n-for guidelines on how to make it easy for us to\n-understand and install your patches.\n-\n-@item\n-A guess about what the bug is or what it depends on.\n-\n-Such guesses are usually wrong.  Even I can't guess right about such\n-things without first using the debugger to find the facts.\n-\n-@item\n-A core dump file.\n-\n-We have no way of examining a core dump for your type of machine\n-unless we have an identical system---and if we do have one,\n-we should be able to reproduce the crash ourselves.\n-@end itemize\n-\n-@node gccbug,, Bug Reporting, Bugs\n-@section The gccbug script\n-@cindex gccbug script\n-\n-To simplify creation of bug reports, and to allow better tracking of\n-reports, we use the GNATS bug tracking system.  Part of that system is\n-the @code{gccbug} script.  This is a Unix shell script, so you need a\n-shell to run it.  It is normally installed in the same directory where\n-@code{gcc} is installed.\n-\n-The gccbug script is derived from send-pr, @pxref{using\n-send-pr,,Creating new Problem Reports,send-pr,Reporting Problems}.  When\n-invoked, it starts a text editor so you can fill out the various fields\n-of the report.  When the you quit the editor, the report is automatically\n-send to the bug reporting address.\n-\n-A number of fields in this bug report form are specific to GCC, and are\n-explained at @uref{http://gcc.gnu.org/gnats.html}.\n-\n-@node Service\n-@chapter How To Get Help with GCC\n-\n-If you need help installing, using or changing GCC, there are two\n-ways to find it:\n-\n-@itemize @bullet\n-@item\n-Send a message to a suitable network mailing list.  First try\n-@email{gcc-help@@gcc.gnu.org} (for help installing or using GCC), and if\n-that brings no response, try @email{gcc@@gcc.gnu.org}.  For help\n-changing GCC, ask @email{gcc@@gcc.gnu.org}.  If you think you have found\n-a bug in GCC, please report it following the instructions at\n-@pxref{Bug Reporting}.\n-\n-@item\n-Look in the service directory for someone who might help you for a fee.\n-The service directory is found at\n-@uref{http://www.gnu.org/prep/service.html}.\n-@end itemize\n-\n-@c For further information, see\n-@c @uref{http://gcc.gnu.org/cgi-bin/fom.cgi?file=12}.\n-@c FIXME: this URL may be too volatile, this FAQ entry needs to move to\n-@c the regular web pages before we can uncomment the reference.\n-\n-@node Contributing\n-@chapter Contributing to GCC Development\n-\n-If you would like to help pretest GCC releases to assure they work well,\n-our current development sources are available by CVS (see\n-@uref{http://gcc.gnu.org/cvs.html}).  Source and binary snapshots are\n-also available for FTP; see @uref{http://gcc.gnu.org/snapshots.html}.\n-\n-If you would like to work on improvements to GCC, please read the\n-advice at these URLs:\n-\n-@smallexample\n-@uref{http://gcc.gnu.org/contribute.html} \n-@uref{http://gcc.gnu.org/contributewhy.html}\n-@end smallexample\n-\n-@noindent\n-for information on how to make useful contributions and avoid\n-duplication of effort.  Suggested projects are listed at\n-@uref{http://gcc.gnu.org/projects/}.\n-\n-@node VMS\n-@chapter Using GCC on VMS\n-\n-@c prevent bad page break with this line\n-Here is how to use GCC on VMS@.\n-\n-@menu\n-* Include Files and VMS::  Where the preprocessor looks for the include files.\n-* Global Declarations::    How to do globaldef, globalref and globalvalue with\n-                           GCC.\n-* VMS Misc::\t\t   Misc information.\n-@end menu\n-\n-@node Include Files and VMS\n-@section Include Files and VMS\n-\n-@cindex include files and VMS\n-@cindex VMS and include files\n-@cindex header files and VMS\n-Due to the differences between the filesystems of Unix and VMS, GCC\n-attempts to translate file names in @samp{#include} into names that VMS\n-will understand.  The basic strategy is to prepend a prefix to the\n-specification of the include file, convert the whole filename to a VMS\n-filename, and then try to open the file.  GCC tries various prefixes\n-one by one until one of them succeeds:\n-\n-@enumerate\n-@item\n-The first prefix is the @samp{GNU_CC_INCLUDE:} logical name: this is\n-where GNU C header files are traditionally stored.  If you wish to store\n-header files in non-standard locations, then you can assign the logical\n-@samp{GNU_CC_INCLUDE} to be a search list, where each element of the\n-list is suitable for use with a rooted logical.\n-\n-@item\n-The next prefix tried is @samp{SYS$SYSROOT:[SYSLIB.]}.  This is where\n-VAX-C header files are traditionally stored.\n-\n-@item\n-If the include file specification by itself is a valid VMS filename, the\n-preprocessor then uses this name with no prefix in an attempt to open\n-the include file.\n-\n-@item\n-If the file specification is not a valid VMS filename (i.e.@: does not\n-contain a device or a directory specifier, and contains a @samp{/}\n-character), the preprocessor tries to convert it from Unix syntax to\n-VMS syntax.\n-\n-Conversion works like this: the first directory name becomes a device,\n-and the rest of the directories are converted into VMS-format directory\n-names.  For example, the name @file{X11/foobar.h} is\n-translated to @file{X11:[000000]foobar.h} or @file{X11:foobar.h},\n-whichever one can be opened.  This strategy allows you to assign a\n-logical name to point to the actual location of the header files.\n-\n-@item\n-If none of these strategies succeeds, the @samp{#include} fails.\n-@end enumerate\n-\n-Include directives of the form:\n-\n-@example\n-#include foobar\n-@end example\n-\n-@noindent\n-are a common source of incompatibility between VAX-C and GCC@.  VAX-C\n-treats this much like a standard @code{#include <foobar.h>} directive.\n-That is incompatible with the ISO C behavior implemented by GCC: to\n-expand the name @code{foobar} as a macro.  Macro expansion should\n-eventually yield one of the two standard formats for @code{#include}:\n-\n-@example\n-#include \"@var{file}\"\n-#include <@var{file}>\n-@end example\n-\n-If you have this problem, the best solution is to modify the source to\n-convert the @code{#include} directives to one of the two standard forms.\n-That will work with either compiler.  If you want a quick and dirty fix,\n-define the file names as macros with the proper expansion, like this:\n-\n-@example\n-#define stdio <stdio.h>\n-@end example\n-\n-@noindent\n-This will work, as long as the name doesn't conflict with anything else\n-in the program.\n-\n-Another source of incompatibility is that VAX-C assumes that:\n-\n-@example\n-#include \"foobar\"\n-@end example\n-\n-@noindent\n-is actually asking for the file @file{foobar.h}.  GCC does not\n-make this assumption, and instead takes what you ask for literally;\n-it tries to read the file @file{foobar}.  The best way to avoid this\n-problem is to always specify the desired file extension in your include\n-directives.\n-\n-GCC for VMS is distributed with a set of include files that is\n-sufficient to compile most general purpose programs.  Even though the\n-GCC distribution does not contain header files to define constants\n-and structures for some VMS system-specific functions, there is no\n-reason why you cannot use GCC with any of these functions.  You first\n-may have to generate or create header files, either by using the public\n-domain utility @code{UNSDL} (which can be found on a DECUS tape), or by\n-extracting the relevant modules from one of the system macro libraries,\n-and using an editor to construct a C header file.\n-\n-A @code{#include} file name cannot contain a DECNET node name.  The\n-preprocessor reports an I/O error if you attempt to use a node name,\n-whether explicitly, or implicitly via a logical name.\n-\n-@node Global Declarations\n-@section Global Declarations and VMS\n-\n-@findex GLOBALREF\n-@findex GLOBALDEF\n-@findex GLOBALVALUEDEF\n-@findex GLOBALVALUEREF\n-GCC does not provide the @code{globalref}, @code{globaldef} and\n-@code{globalvalue} keywords of VAX-C@.  You can get the same effect with\n-an obscure feature of GAS, the GNU assembler.  (This requires GAS\n-version 1.39 or later.)  The following macros allow you to use this\n-feature in a fairly natural way:\n-\n-@smallexample\n-#ifdef __GNUC__\n-#define GLOBALREF(TYPE,NAME)                      \\\n-  TYPE NAME                                       \\\n-  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME)\n-#define GLOBALDEF(TYPE,NAME,VALUE)                \\\n-  TYPE NAME                                       \\\n-  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME) \\\n-    = VALUE\n-#define GLOBALVALUEREF(TYPE,NAME)                 \\\n-  const TYPE NAME[1]                              \\\n-  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)\n-#define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \\\n-  const TYPE NAME[1]                              \\\n-  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)  \\\n-    = @{VALUE@}\n-#else\n-#define GLOBALREF(TYPE,NAME) \\\n-  globalref TYPE NAME\n-#define GLOBALDEF(TYPE,NAME,VALUE) \\\n-  globaldef TYPE NAME = VALUE\n-#define GLOBALVALUEDEF(TYPE,NAME,VALUE) \\\n-  globalvalue TYPE NAME = VALUE\n-#define GLOBALVALUEREF(TYPE,NAME) \\\n-  globalvalue TYPE NAME\n-#endif\n-@end smallexample\n-\n-@noindent\n-(The @code{_$$PsectAttributes_GLOBALSYMBOL} prefix at the start of the\n-name is removed by the assembler, after it has modified the attributes\n-of the symbol).  These macros are provided in the VMS binaries\n-distribution in a header file @file{GNU_HACKS.H}.  An example of the\n-usage is:\n-\n-@example\n-GLOBALREF (int, ijk);\n-GLOBALDEF (int, jkl, 0);\n-@end example\n-\n-The macros @code{GLOBALREF} and @code{GLOBALDEF} cannot be used\n-straightforwardly for arrays, since there is no way to insert the array\n-dimension into the declaration at the right place.  However, you can\n-declare an array with these macros if you first define a typedef for the\n-array type, like this:\n-\n-@example\n-typedef int intvector[10];\n-GLOBALREF (intvector, foo);\n-@end example\n-\n-Array and structure initializers will also break the macros; you can\n-define the initializer to be a macro of its own, or you can expand the\n-@code{GLOBALDEF} macro by hand.  You may find a case where you wish to\n-use the @code{GLOBALDEF} macro with a large array, but you are not\n-interested in explicitly initializing each element of the array.  In\n-such cases you can use an initializer like: @code{@{0,@}}, which will\n-initialize the entire array to @code{0}.\n-\n-A shortcoming of this implementation is that a variable declared with\n-@code{GLOBALVALUEREF} or @code{GLOBALVALUEDEF} is always an array.  For\n-example, the declaration:\n-\n-@example\n-GLOBALVALUEREF(int, ijk);\n-@end example\n-\n-@noindent\n-declares the variable @code{ijk} as an array of type @code{int [1]}.\n-This is done because a globalvalue is actually a constant; its ``value''\n-is what the linker would normally consider an address.  That is not how\n-an integer value works in C, but it is how an array works.  So treating\n-the symbol as an array name gives consistent results---with the\n-exception that the value seems to have the wrong type.  @strong{Don't\n-try to access an element of the array.}  It doesn't have any elements.\n-The array ``address'' may not be the address of actual storage.\n-\n-The fact that the symbol is an array may lead to warnings where the\n-variable is used.  Insert type casts to avoid the warnings.  Here is an\n-example; it takes advantage of the ISO C feature allowing macros that\n-expand to use the same name as the macro itself.\n-\n-@example\n-GLOBALVALUEREF (int, ss$_normal);\n-GLOBALVALUEDEF (int, xyzzy,123);\n-#ifdef __GNUC__\n-#define ss$_normal ((int) ss$_normal)\n-#define xyzzy ((int) xyzzy)\n-#endif\n-@end example\n-\n-Don't use @code{globaldef} or @code{globalref} with a variable whose\n-type is an enumeration type; this is not implemented.  Instead, make the\n-variable an integer, and use a @code{globalvaluedef} for each of the\n-enumeration values.  An example of this would be:\n-\n-@example\n-#ifdef __GNUC__\n-GLOBALDEF (int, color, 0);\n-GLOBALVALUEDEF (int, RED, 0);\n-GLOBALVALUEDEF (int, BLUE, 1);\n-GLOBALVALUEDEF (int, GREEN, 3);\n-#else\n-enum globaldef color @{RED, BLUE, GREEN = 3@};\n-#endif\n-@end example\n-\n-@node VMS Misc\n-@section Other VMS Issues\n-\n-@cindex exit status and VMS\n-@cindex return value of @code{main}\n-@cindex @code{main} and the exit status\n-GCC automatically arranges for @code{main} to return 1 by default if\n-you fail to specify an explicit return value.  This will be interpreted\n-by VMS as a status code indicating a normal successful completion.\n-Version 1 of GCC did not provide this default.\n-\n-GCC on VMS works only with the GNU assembler, GAS@.  You need version\n-1.37 or later of GAS in order to produce value debugging information for\n-the VMS debugger.  Use the ordinary VMS linker with the object files\n-produced by GAS@.\n-\n-@cindex shared VMS run time system\n-@cindex @file{VAXCRTL}\n-Under previous versions of GCC, the generated code would occasionally\n-give strange results when linked to the sharable @file{VAXCRTL} library.\n-Now this should work.\n-\n-A caveat for use of @code{const} global variables: the @code{const}\n-modifier must be specified in every external declaration of the variable\n-in all of the source files that use that variable.  Otherwise the linker\n-will issue warnings about conflicting attributes for the variable.  Your\n-program will still work despite the warnings, but the variable will be\n-placed in writable storage.\n-\n-@cindex name augmentation\n-@cindex case sensitivity and VMS\n-@cindex VMS and case sensitivity\n-Although the VMS linker does distinguish between upper and lower case\n-letters in global symbols, most VMS compilers convert all such symbols\n-into upper case and most run-time library routines also have upper case\n-names.  To be able to reliably call such routines, GCC (by means of\n-the assembler GAS) converts global symbols into upper case like other\n-VMS compilers.  However, since the usual practice in C is to distinguish\n-case, GCC (via GAS) tries to preserve usual C behavior by augmenting\n-each name that is not all lower case.  This means truncating the name\n-to at most 23 characters and then adding more characters at the end\n-which encode the case pattern of those 23.   Names which contain at\n-least one dollar sign are an exception; they are converted directly into\n-upper case without augmentation.\n-\n-Name augmentation yields bad results for programs that use precompiled\n-libraries (such as Xlib) which were generated by another compiler.  You\n-can use the compiler option @samp{/NOCASE_HACK} to inhibit augmentation;\n-it makes external C functions and variables case-independent as is usual\n-on VMS@.  Alternatively, you could write all references to the functions\n-and variables in such libraries using lower case; this will work on VMS,\n-but is not portable to other systems.  The compiler option @samp{/NAMES}\n-also provides control over global name handling.\n-\n-Function and variable names are handled somewhat differently with G++.\n-The GNU C++ compiler performs @dfn{name mangling} on function\n-names, which means that it adds information to the function name to\n-describe the data types of the arguments that the function takes.  One\n-result of this is that the name of a function can become very long.\n-Since the VMS linker only recognizes the first 31 characters in a name,\n-special action is taken to ensure that each function and variable has a\n-unique name that can be represented in 31 characters.\n-\n-If the name (plus a name augmentation, if required) is less than 32\n-characters in length, then no special action is performed.  If the name\n-is longer than 31 characters, the assembler (GAS) will generate a\n-hash string based upon the function name, truncate the function name to\n-23 characters, and append the hash string to the truncated name.  If the\n-@samp{/VERBOSE} compiler option is used, the assembler will print both\n-the full and truncated names of each symbol that is truncated.\n-\n-The @samp{/NOCASE_HACK} compiler option should not be used when you are\n-compiling programs that use libg++.  libg++ has several instances of\n-objects (i.e.  @code{Filebuf} and @code{filebuf}) which become\n-indistinguishable in a case-insensitive environment.  This leads to\n-cases where you need to inhibit augmentation selectively (if you were\n-using libg++ and Xlib in the same program, for example).  There is no\n-special feature for doing this, but you can get the result by defining a\n-macro for each mixed case symbol for which you wish to inhibit\n-augmentation.  The macro should expand into the lower case equivalent of\n-itself.  For example:\n-\n-@example\n-#define StuDlyCapS studlycaps\n-@end example\n+@include contribute.texi\n \n-These macro definitions can be placed in a header file to minimize the\n-number of changes to your source code.\n+@include vms.texi\n \n @node Makefile\n @chapter Additional Makefile and configure information."}, {"sha": "863774483c8127889022b463e37158179694ec8d", "filename": "gcc/doc/service.texi", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fservice.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fservice.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fservice.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,30 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Service\n+@chapter How To Get Help with GCC\n+\n+If you need help installing, using or changing GCC, there are two\n+ways to find it:\n+\n+@itemize @bullet\n+@item\n+Send a message to a suitable network mailing list.  First try\n+@email{gcc-help@@gcc.gnu.org} (for help installing or using GCC), and if\n+that brings no response, try @email{gcc@@gcc.gnu.org}.  For help\n+changing GCC, ask @email{gcc@@gcc.gnu.org}.  If you think you have found\n+a bug in GCC, please report it following the instructions at\n+@pxref{Bug Reporting}.\n+\n+@item\n+Look in the service directory for someone who might help you for a fee.\n+The service directory is found at\n+@uref{http://www.gnu.org/prep/service.html}.\n+@end itemize\n+\n+@c For further information, see\n+@c @uref{http://gcc.gnu.org/cgi-bin/fom.cgi?file=12}.\n+@c FIXME: this URL may be too volatile, this FAQ entry needs to move to\n+@c the regular web pages before we can uncomment the reference."}, {"sha": "8dae44f8382904340f6511f8b053875efae1edd7", "filename": "gcc/doc/standards.texi", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,174 @@\n+@c Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Standards\n+@chapter Language Standards Supported by GCC\n+@cindex C standard\n+@cindex C standards\n+@cindex ANSI C standard\n+@cindex ANSI C\n+@cindex ANSI C89\n+@cindex C89\n+@cindex ANSI X3.159-1989\n+@cindex X3.159-1989\n+@cindex ISO C standard\n+@cindex ISO C\n+@cindex ISO C89\n+@cindex ISO C90\n+@cindex ISO/IEC 9899\n+@cindex ISO 9899\n+@cindex C90\n+@cindex ISO C94\n+@cindex C94\n+@cindex ISO C95\n+@cindex C95\n+@cindex ISO C99\n+@cindex C99\n+@cindex ISO C9X\n+@cindex C9X\n+@cindex Technical Corrigenda\n+@cindex TC1\n+@cindex Technical Corrigendum 1\n+@cindex TC2\n+@cindex Technical Corrigendum 2\n+@cindex AMD1\n+@cindex freestanding implementation\n+@cindex freestanding environment\n+@cindex hosted implementation\n+@cindex hosted environment\n+@findex __STDC_HOSTED__\n+\n+For each language compiled by GCC for which there is a standard, GCC\n+attempts to follow one or more versions of that standard, possibly\n+with some exceptions, and possibly with some extensions.\n+\n+GCC supports three versions of the C standard, although support for\n+the most recent version is not yet complete.\n+\n+@opindex std\n+@opindex ansi\n+@opindex pedantic\n+@opindex pedantic-errors\n+The original ANSI C standard (X3.159-1989) was ratified in 1989 and\n+published in 1990.  This standard was ratified as an ISO standard\n+(ISO/IEC 9899:1990) later in 1990.  There were no technical\n+differences between these publications, although the sections of the\n+ANSI standard were renumbered and became clauses in the ISO standard.\n+This standard, in both its forms, is commonly known as @dfn{C89}, or\n+occasionally as @dfn{C90}, from the dates of ratification.  The ANSI\n+standard, but not the ISO standard, also came with a Rationale\n+document.  To select this standard in GCC, use one of the options\n+@option{-ansi}, @option{-std=c89} or @option{-std=iso9899:1990}; to obtain\n+all the diagnostics required by the standard, you should also specify\n+@option{-pedantic} (or @option{-pedantic-errors} if you want them to be\n+errors rather than warnings).  @xref{C Dialect Options,,Options\n+Controlling C Dialect}.\n+\n+Errors in the 1990 ISO C standard were corrected in two Technical\n+Corrigenda published in 1994 and 1996.  GCC does not support the\n+uncorrected version.\n+\n+An amendment to the 1990 standard was published in 1995.  This\n+amendment added digraphs and @code{__STDC_VERSION__} to the language,\n+but otherwise concerned the library.  This amendment is commonly known\n+as @dfn{AMD1}; the amended standard is sometimes known as @dfn{C94} or\n+@dfn{C95}.  To select this standard in GCC, use the option\n+@option{-std=iso9899:199409} (with, as for other standard versions,\n+@option{-pedantic} to receive all required diagnostics).\n+\n+A new edition of the ISO C standard was published in 1999 as ISO/IEC\n+9899:1999, and is commonly known as @dfn{C99}.  GCC has incomplete\n+support for this standard version; see\n+@uref{http://gcc.gnu.org/c99status.html} for details.  To select this\n+standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in\n+development, drafts of this standard version were referred to as\n+@dfn{C9X}.)\n+\n+@opindex traditional\n+GCC also has some limited support for traditional (pre-ISO) C with the\n+@option{-traditional} option.  This support may be of use for compiling\n+some very old programs that have not been updated to ISO C, but should\n+not be used for new programs.  It will not work with some modern C\n+libraries such as the GNU C library.\n+\n+By default, GCC provides some extensions to the C language that on\n+rare occasions conflict with the C standard.  @xref{C\n+Extensions,,Extensions to the C Language Family}.  Use of the\n+@option{-std} options listed above will disable these extensions where\n+they conflict with the C standard version selected.  You may also\n+select an extended version of the C language explicitly with\n+@option{-std=gnu89} (for C89 with GNU extensions) or @option{-std=gnu99}\n+(for C99 with GNU extensions).  The default, if no C language dialect\n+options are given, is @option{-std=gnu89}; this will change to\n+@option{-std=gnu99} in some future release when the C99 support is\n+complete.  Some features that are part of the C99 standard are\n+accepted as extensions in C89 mode.\n+\n+The ISO C standard defines (in clause 4) two classes of conforming\n+implementation.  A @dfn{conforming hosted implementation} supports the\n+whole standard including all the library facilities; a @dfn{conforming\n+freestanding implementation} is only required to provide certain\n+library facilities: those in @code{<float.h>}, @code{<limits.h>},\n+@code{<stdarg.h>}, and @code{<stddef.h>}; since AMD1, also those in\n+@code{<iso646.h>}; and in C99, also those in @code{<stdbool.h>} and\n+@code{<stdint.h>}.  In addition, complex types, added in C99, are not\n+required for freestanding implementations.  The standard also defines\n+two environments for programs, a @dfn{freestanding environment},\n+required of all implementations and which may not have library\n+facilities beyond those required of freestanding implementations,\n+where the handling of program startup and termination are\n+implementation-defined, and a @dfn{hosted environment}, which is not\n+required, in which all the library facilities are provided and startup\n+is through a function @code{int main (void)} or @code{int main (int,\n+char *[])}.  An OS kernel would be a freestanding environment; a\n+program using the facilities of an operating system would normally be\n+in a hosted implementation.\n+\n+@opindex ffreestanding\n+GCC aims towards being usable as a conforming freestanding\n+implementation, or as the compiler for a conforming hosted\n+implementation.  By default, it will act as the compiler for a hosted\n+implementation, defining @code{__STDC_HOSTED__} as @code{1} and\n+presuming that when the names of ISO C functions are used, they have\n+the semantics defined in the standard.  To make it act as a conforming\n+freestanding implementation for a freestanding environment, use the\n+option @option{-ffreestanding}; it will then define\n+@code{__STDC_HOSTED__} to @code{0} and not make assumptions about the\n+meanings of function names from the standard library.  To build an OS\n+kernel, you may well still need to make your own arrangements for\n+linking and startup.  @xref{C Dialect Options,,Options Controlling C\n+Dialect}.\n+\n+GCC does not provide the library facilities required only of hosted\n+implementations, nor yet all the facilities required by C99 of\n+freestanding implementations; to use the facilities of a hosted\n+environment, you will need to find them elsewhere (for example, in the\n+GNU C library).  @xref{Standard Libraries,,Standard Libraries}.\n+\n+For references to Technical Corrigenda, Rationale documents and\n+information concerning the history of C that is available online, see\n+@uref{http://gcc.gnu.org/readings.html}\n+\n+@c FIXME: details of C++ standard.\n+\n+There is no formal written standard for Objective-C@.  The most\n+authoritative manual is ``Object-Oriented Programming and the\n+Objective-C Language'', available at a number of web sites;\n+@uref{http://developer.apple.com/techpubs/macosx/Cocoa/ObjectiveC/} has a\n+recent version, while @uref{http://www.toodarkpark.org/computers/objc/}\n+is an older example.  @uref{http://www.gnustep.org} includes useful\n+information as well.\n+\n+@xref{Top, GNAT Reference Manual, About This Guide, gnat_rm, \n+GNAT Reference Manual}, for information on standard\n+conformance and compatibility of the Ada compiler.\n+\n+@xref{References,,Language Definition References, chill, GNU Chill},\n+for details of the CHILL standard.\n+\n+@xref{Language,,The GNU Fortran Language, g77, Using and Porting GNU\n+Fortran}, for details of the Fortran language supported by GCC@.\n+\n+@xref{Compatibility,,Compatibility with the Java Platform, gcj, GNU gcj},\n+for details of compatibility between @code{gcj} and the Java Platform."}, {"sha": "ff67f8f19fa71b26e0ee4b1fb3f19e63ee7478f3", "filename": "gcc/doc/trouble.texi", "status": "added", "additions": 1465, "deletions": 0, "changes": 1465, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,1465 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Trouble\n+@chapter Known Causes of Trouble with GCC\n+@cindex bugs, known\n+@cindex installation trouble\n+@cindex known causes of trouble\n+\n+This section describes known problems that affect users of GCC@.  Most\n+of these are not GCC bugs per se---if they were, we would fix them.\n+But the result for a user may be like the result of a bug.\n+\n+Some of these problems are due to bugs in other software, some are\n+missing features that are too much work to add, and some are places\n+where people's opinions differ as to what is best.\n+\n+@menu\n+* Actual Bugs::\t\t      Bugs we will fix later.\n+* Cross-Compiler Problems::   Common problems of cross compiling with GCC.\n+* Interoperation::      Problems using GCC with other compilers,\n+\t\t\t   and with certain linkers, assemblers and debuggers.\n+* External Bugs::\tProblems compiling certain programs.\n+* Incompatibilities::   GCC is incompatible with traditional C.\n+* Fixed Headers::       GCC uses corrected versions of system header files.\n+                           This is necessary, but doesn't always work smoothly.\n+* Standard Libraries::  GCC uses the system C library, which might not be\n+                           compliant with the ISO C standard.\n+* Disappointments::     Regrettable things we can't change, but not quite bugs.\n+* C++ Misunderstandings::     Common misunderstandings with GNU C++.\n+* Protoize Caveats::    Things to watch out for when using @code{protoize}.\n+* Non-bugs::\t\tThings we think are right, but some others disagree.\n+* Warnings and Errors:: Which problems in your code get warnings,\n+                         and which get errors.\n+@end menu\n+\n+@node Actual Bugs\n+@section Actual Bugs We Haven't Fixed Yet\n+\n+@itemize @bullet\n+@item\n+The @code{fixincludes} script interacts badly with automounters; if the\n+directory of system header files is automounted, it tends to be\n+unmounted while @code{fixincludes} is running.  This would seem to be a\n+bug in the automounter.  We don't know any good way to work around it.\n+\n+@item\n+The @code{fixproto} script will sometimes add prototypes for the\n+@code{sigsetjmp} and @code{siglongjmp} functions that reference the\n+@code{jmp_buf} type before that type is defined.  To work around this,\n+edit the offending file and place the typedef in front of the\n+prototypes.\n+\n+@item\n+@opindex pedantic-errors\n+When @option{-pedantic-errors} is specified, GCC will incorrectly give\n+an error message when a function name is specified in an expression\n+involving the comma operator.\n+@end itemize\n+\n+@node Cross-Compiler Problems\n+@section Cross-Compiler Problems\n+\n+You may run into problems with cross compilation on certain machines,\n+for several reasons.\n+\n+@itemize @bullet\n+@item\n+Cross compilation can run into trouble for certain machines because\n+some target machines' assemblers require floating point numbers to be\n+written as @emph{integer} constants in certain contexts.\n+\n+The compiler writes these integer constants by examining the floating\n+point value as an integer and printing that integer, because this is\n+simple to write and independent of the details of the floating point\n+representation.  But this does not work if the compiler is running on\n+a different machine with an incompatible floating point format, or\n+even a different byte-ordering.\n+\n+In addition, correct constant folding of floating point values\n+requires representing them in the target machine's format.\n+(The C standard does not quite require this, but in practice\n+it is the only way to win.)\n+\n+It is now possible to overcome these problems by defining macros such\n+as @code{REAL_VALUE_TYPE}.  But doing so is a substantial amount of\n+work for each target machine.\n+@ifset INTERNALS\n+@xref{Cross-compilation}.\n+@end ifset\n+@ifclear INTERNALS\n+@xref{Cross-compilation,,Cross Compilation and Floating Point Format,\n+gcc.info, Using and Porting GCC}.\n+@end ifclear\n+\n+@item\n+At present, the program @file{mips-tfile} which adds debug\n+support to object files on MIPS systems does not work in a cross\n+compile environment.\n+@end itemize\n+\n+@node Interoperation\n+@section Interoperation\n+\n+This section lists various difficulties encountered in using GCC\n+together with other compilers or with the assemblers, linkers,\n+libraries and debuggers on certain systems.\n+\n+@itemize @bullet\n+@item\n+Objective-C does not work on the RS/6000.\n+\n+@item\n+G++ does not do name mangling in the same way as other C++\n+compilers.  This means that object files compiled with one compiler\n+cannot be used with another.\n+\n+This effect is intentional, to protect you from more subtle problems.\n+Compilers differ as to many internal details of C++ implementation,\n+including: how class instances are laid out, how multiple inheritance is\n+implemented, and how virtual function calls are handled.  If the name\n+encoding were made the same, your programs would link against libraries\n+provided from other compilers---but the programs would then crash when\n+run.  Incompatible libraries are then detected at link time, rather than\n+at run time.\n+\n+@item\n+Older GDB versions sometimes fail to read the output of GCC version\n+2.  If you have trouble, get GDB version 4.4 or later.\n+\n+@item\n+@cindex DBX\n+DBX rejects some files produced by GCC, though it accepts similar\n+constructs in output from PCC@.  Until someone can supply a coherent\n+description of what is valid DBX input and what is not, there is\n+nothing I can do about these problems.  You are on your own.\n+\n+@item\n+The GNU assembler (GAS) does not support PIC@.  To generate PIC code, you\n+must use some other assembler, such as @file{/bin/as}.\n+\n+@item\n+On some BSD systems, including some versions of Ultrix, use of profiling\n+causes static variable destructors (currently used only in C++) not to\n+be run.\n+\n+@ignore\n+@cindex @code{vfork}, for the Sun-4\n+@item\n+There is a bug in @code{vfork} on the Sun-4 which causes the registers\n+of the child process to clobber those of the parent.  Because of this,\n+programs that call @code{vfork} are likely to lose when compiled\n+optimized with GCC when the child code alters registers which contain\n+C variables in the parent.  This affects variables which are live in the\n+parent across the call to @code{vfork}.\n+\n+If you encounter this, you can work around the problem by declaring\n+variables @code{volatile} in the function that calls @code{vfork}, until\n+the problem goes away, or by not declaring them @code{register} and not\n+using @option{-O} for those source files.\n+@end ignore\n+\n+@item\n+On some SGI systems, when you use @option{-lgl_s} as an option,\n+it gets translated magically to @samp{-lgl_s -lX11_s -lc_s}.\n+Naturally, this does not happen when you use GCC@.\n+You must specify all three options explicitly.\n+\n+@item\n+On a Sparc, GCC aligns all values of type @code{double} on an 8-byte\n+boundary, and it expects every @code{double} to be so aligned.  The Sun\n+compiler usually gives @code{double} values 8-byte alignment, with one\n+exception: function arguments of type @code{double} may not be aligned.\n+\n+As a result, if a function compiled with Sun CC takes the address of an\n+argument of type @code{double} and passes this pointer of type\n+@code{double *} to a function compiled with GCC, dereferencing the\n+pointer may cause a fatal signal.\n+\n+One way to solve this problem is to compile your entire program with GCC@.\n+Another solution is to modify the function that is compiled with\n+Sun CC to copy the argument into a local variable; local variables\n+are always properly aligned.  A third solution is to modify the function\n+that uses the pointer to dereference it via the following function\n+@code{access_double} instead of directly with @samp{*}:\n+\n+@smallexample\n+inline double\n+access_double (double *unaligned_ptr)\n+@{\n+  union d2i @{ double d; int i[2]; @};\n+\n+  union d2i *p = (union d2i *) unaligned_ptr;\n+  union d2i u;\n+\n+  u.i[0] = p->i[0];\n+  u.i[1] = p->i[1];\n+\n+  return u.d;\n+@}\n+@end smallexample\n+\n+@noindent\n+Storing into the pointer can be done likewise with the same union.\n+\n+@item\n+On Solaris, the @code{malloc} function in the @file{libmalloc.a} library\n+may allocate memory that is only 4 byte aligned.  Since GCC on the\n+Sparc assumes that doubles are 8 byte aligned, this may result in a\n+fatal signal if doubles are stored in memory allocated by the\n+@file{libmalloc.a} library.\n+\n+The solution is to not use the @file{libmalloc.a} library.  Use instead\n+@code{malloc} and related functions from @file{libc.a}; they do not have\n+this problem.\n+\n+@item\n+Sun forgot to include a static version of @file{libdl.a} with some\n+versions of SunOS (mainly 4.1).  This results in undefined symbols when\n+linking static binaries (that is, if you use @option{-static}).  If you\n+see undefined symbols @code{_dlclose}, @code{_dlsym} or @code{_dlopen}\n+when linking, compile and link against the file\n+@file{mit/util/misc/dlsym.c} from the MIT version of X windows.\n+\n+@item\n+The 128-bit long double format that the Sparc port supports currently\n+works by using the architecturally defined quad-word floating point\n+instructions.  Since there is no hardware that supports these\n+instructions they must be emulated by the operating system.  Long\n+doubles do not work in Sun OS versions 4.0.3 and earlier, because the\n+kernel emulator uses an obsolete and incompatible format.  Long doubles\n+do not work in Sun OS version 4.1.1 due to a problem in a Sun library.\n+Long doubles do work on Sun OS versions 4.1.2 and higher, but GCC\n+does not enable them by default.  Long doubles appear to work in Sun OS\n+5.x (Solaris 2.x).\n+\n+@item\n+On HP-UX version 9.01 on the HP PA, the HP compiler @code{cc} does not\n+compile GCC correctly.  We do not yet know why.  However, GCC\n+compiled on earlier HP-UX versions works properly on HP-UX 9.01 and can\n+compile itself properly on 9.01.\n+\n+@item\n+On the HP PA machine, ADB sometimes fails to work on functions compiled\n+with GCC@.  Specifically, it fails to work on functions that use\n+@code{alloca} or variable-size arrays.  This is because GCC doesn't\n+generate HP-UX unwind descriptors for such functions.  It may even be\n+impossible to generate them.\n+\n+@item\n+Debugging (@option{-g}) is not supported on the HP PA machine, unless you use\n+the preliminary GNU tools (@pxref{Installation}).\n+\n+@item\n+Taking the address of a label may generate errors from the HP-UX\n+PA assembler.  GAS for the PA does not have this problem.\n+\n+@item\n+Using floating point parameters for indirect calls to static functions\n+will not work when using the HP assembler.  There simply is no way for GCC\n+to specify what registers hold arguments for static functions when using\n+the HP assembler.  GAS for the PA does not have this problem.\n+\n+@item\n+In extremely rare cases involving some very large functions you may\n+receive errors from the HP linker complaining about an out of bounds\n+unconditional branch offset.  This used to occur more often in previous\n+versions of GCC, but is now exceptionally rare.  If you should run\n+into it, you can work around by making your function smaller.\n+\n+@item\n+GCC compiled code sometimes emits warnings from the HP-UX assembler of\n+the form:\n+\n+@smallexample\n+(warning) Use of GR3 when\n+  frame >= 8192 may cause conflict.\n+@end smallexample\n+\n+These warnings are harmless and can be safely ignored.\n+\n+@item\n+The current version of the assembler (@file{/bin/as}) for the RS/6000\n+has certain problems that prevent the @option{-g} option in GCC from\n+working.  Note that @file{Makefile.in} uses @option{-g} by default when\n+compiling @file{libgcc2.c}.\n+\n+IBM has produced a fixed version of the assembler.  The upgraded\n+assembler unfortunately was not included in any of the AIX 3.2 update\n+PTF releases (3.2.2, 3.2.3, or 3.2.3e).  Users of AIX 3.1 should request\n+PTF U403044 from IBM and users of AIX 3.2 should request PTF U416277.\n+See the file @file{README.RS6000} for more details on these updates.\n+\n+You can test for the presence of a fixed assembler by using the\n+command\n+\n+@smallexample\n+as -u < /dev/null\n+@end smallexample\n+\n+@noindent\n+If the command exits normally, the assembler fix already is installed.\n+If the assembler complains that @option{-u} is an unknown flag, you need to\n+order the fix.\n+\n+@item\n+On the IBM RS/6000, compiling code of the form\n+\n+@smallexample\n+extern int foo;\n+\n+@dots{} foo @dots{}\n+\n+static int foo;\n+@end smallexample\n+\n+@noindent\n+will cause the linker to report an undefined symbol @code{foo}.\n+Although this behavior differs from most other systems, it is not a\n+bug because redefining an @code{extern} variable as @code{static}\n+is undefined in ISO C@.\n+\n+@item\n+AIX on the RS/6000 provides support (NLS) for environments outside of\n+the United States.  Compilers and assemblers use NLS to support\n+locale-specific representations of various objects including\n+floating-point numbers (@samp{.} vs @samp{,} for separating decimal fractions).\n+There have been problems reported where the library linked with GCC does\n+not produce the same floating-point formats that the assembler accepts.\n+If you have this problem, set the @env{LANG} environment variable to\n+@samp{C} or @samp{En_US}.\n+\n+@item\n+@opindex fdollars-in-identifiers\n+Even if you specify @option{-fdollars-in-identifiers},\n+you cannot successfully use @samp{$} in identifiers on the RS/6000 due\n+to a restriction in the IBM assembler.  GAS supports these\n+identifiers.\n+\n+@item\n+On the RS/6000, XLC version 1.3.0.0 will miscompile @file{jump.c}.  XLC\n+version 1.3.0.1 or later fixes this problem.  You can obtain XLC-1.3.0.2\n+by requesting PTF 421749 from IBM@.\n+\n+@item\n+@opindex mno-serialize-volatile\n+There is an assembler bug in versions of DG/UX prior to 5.4.2.01 that\n+occurs when the @samp{fldcr} instruction is used.  GCC uses\n+@samp{fldcr} on the 88100 to serialize volatile memory references.  Use\n+the option @option{-mno-serialize-volatile} if your version of the\n+assembler has this bug.\n+\n+@item\n+On VMS, GAS versions 1.38.1 and earlier may cause spurious warning\n+messages from the linker.  These warning messages complain of mismatched\n+psect attributes.  You can ignore them.  @xref{VMS Install}.\n+\n+@item\n+On NewsOS version 3, if you include both of the files @file{stddef.h}\n+and @file{sys/types.h}, you get an error because there are two typedefs\n+of @code{size_t}.  You should change @file{sys/types.h} by adding these\n+lines around the definition of @code{size_t}:\n+\n+@smallexample\n+#ifndef _SIZE_T\n+#define _SIZE_T\n+@var{actual-typedef-here}\n+#endif\n+@end smallexample\n+\n+@cindex Alliant\n+@item\n+On the Alliant, the system's own convention for returning structures\n+and unions is unusual, and is not compatible with GCC no matter\n+what options are used.\n+\n+@cindex RT PC\n+@cindex IBM RT PC\n+@item\n+@opindex mhc-struct-return\n+On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n+convention for structure and union returning.  Use the option\n+@option{-mhc-struct-return} to tell GCC to use a convention compatible\n+with it.\n+\n+@cindex VAX calling convention\n+@cindex Ultrix calling convention\n+@item\n+@opindex fcall-saved\n+On Ultrix, the Fortran compiler expects registers 2 through 5 to be saved\n+by function calls.  However, the C compiler uses conventions compatible\n+with BSD Unix: registers 2 through 5 may be clobbered by function calls.\n+\n+GCC uses the same convention as the Ultrix C compiler.  You can use\n+these options to produce code compatible with the Fortran compiler:\n+\n+@smallexample\n+-fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5\n+@end smallexample\n+\n+@item\n+On the WE32k, you may find that programs compiled with GCC do not\n+work with the standard shared C library.  You may need to link with\n+the ordinary C compiler.  If you do so, you must specify the following\n+options:\n+\n+@smallexample\n+-L/usr/local/lib/gcc-lib/we32k-att-sysv/2.8.1 -lgcc -lc_s\n+@end smallexample\n+\n+The first specifies where to find the library @file{libgcc.a}\n+specified with the @option{-lgcc} option.\n+\n+GCC does linking by invoking @command{ld}, just as @command{cc} does, and\n+there is no reason why it @emph{should} matter which compilation program\n+you use to invoke @command{ld}.  If someone tracks this problem down,\n+it can probably be fixed easily.\n+\n+@item\n+On the Alpha, you may get assembler errors about invalid syntax as a\n+result of floating point constants.  This is due to a bug in the C\n+library functions @code{ecvt}, @code{fcvt} and @code{gcvt}.  Given valid\n+floating point numbers, they sometimes print @samp{NaN}.\n+\n+@item\n+On Irix 4.0.5F (and perhaps in some other versions), an assembler bug\n+sometimes reorders instructions incorrectly when optimization is turned\n+on.  If you think this may be happening to you, try using the GNU\n+assembler; GAS version 2.1 supports ECOFF on Irix.\n+\n+@opindex noasmopt\n+Or use the @option{-noasmopt} option when you compile GCC with itself,\n+and then again when you compile your program.  (This is a temporary\n+kludge to turn off assembler optimization on Irix.)  If this proves to\n+be what you need, edit the assembler spec in the file @file{specs} so\n+that it unconditionally passes @option{-O0} to the assembler, and never\n+passes @option{-O2} or @option{-O3}.\n+@end itemize\n+\n+@node External Bugs\n+@section Problems Compiling Certain Programs\n+\n+@c prevent bad page break with this line\n+Certain programs have problems compiling.\n+\n+@itemize @bullet\n+@item\n+Parse errors may occur compiling X11 on a Decstation running Ultrix 4.2\n+because of problems in DEC's versions of the X11 header files\n+@file{X11/Xlib.h} and @file{X11/Xutil.h}.  People recommend adding\n+@option{-I/usr/include/mit} to use the MIT versions of the header files,\n+using the @option{-traditional} switch to turn off ISO C, or fixing the\n+header files by adding this:\n+\n+@example\n+#ifdef __STDC__\n+#define NeedFunctionPrototypes 0\n+#endif\n+@end example\n+\n+@item\n+On various 386 Unix systems derived from System V, including SCO, ISC,\n+and ESIX, you may get error messages about running out of virtual memory\n+while compiling certain programs.\n+\n+You can prevent this problem by linking GCC with the GNU malloc\n+(which thus replaces the malloc that comes with the system).  GNU malloc\n+is available as a separate package, and also in the file\n+@file{src/gmalloc.c} in the GNU Emacs 19 distribution.\n+\n+If you have installed GNU malloc as a separate library package, use this\n+option when you relink GCC:\n+\n+@example\n+MALLOC=/usr/local/lib/libgmalloc.a\n+@end example\n+\n+Alternatively, if you have compiled @file{gmalloc.c} from Emacs 19, copy\n+the object file to @file{gmalloc.o} and use this option when you relink\n+GCC:\n+\n+@example\n+MALLOC=gmalloc.o\n+@end example\n+@end itemize\n+\n+@node Incompatibilities\n+@section Incompatibilities of GCC\n+@cindex incompatibilities of GCC\n+@opindex traditional\n+\n+There are several noteworthy incompatibilities between GNU C and K&R\n+(non-ISO) versions of C@.  The @option{-traditional} option\n+eliminates many of these incompatibilities, @emph{but not all}, by\n+telling GCC to behave like a K&R C compiler.\n+\n+@itemize @bullet\n+@cindex string constants\n+@cindex read-only strings\n+@cindex shared strings\n+@item\n+GCC normally makes string constants read-only.  If several\n+identical-looking string constants are used, GCC stores only one\n+copy of the string.\n+\n+@cindex @code{mktemp}, and constant strings\n+One consequence is that you cannot call @code{mktemp} with a string\n+constant argument.  The function @code{mktemp} always alters the\n+string its argument points to.\n+\n+@cindex @code{sscanf}, and constant strings\n+@cindex @code{fscanf}, and constant strings\n+@cindex @code{scanf}, and constant strings\n+Another consequence is that @code{sscanf} does not work on some systems\n+when passed a string constant as its format control string or input.\n+This is because @code{sscanf} incorrectly tries to write into the string\n+constant.  Likewise @code{fscanf} and @code{scanf}.\n+\n+@opindex fwritable-strings\n+The best solution to these problems is to change the program to use\n+@code{char}-array variables with initialization strings for these\n+purposes instead of string constants.  But if this is not possible,\n+you can use the @option{-fwritable-strings} flag, which directs GCC\n+to handle string constants the same way most C compilers do.\n+@option{-traditional} also has this effect, among others.\n+\n+@item\n+@code{-2147483648} is positive.\n+\n+This is because 2147483648 cannot fit in the type @code{int}, so\n+(following the ISO C rules) its data type is @code{unsigned long int}.\n+Negating this value yields 2147483648 again.\n+\n+@item\n+GCC does not substitute macro arguments when they appear inside of\n+string constants.  For example, the following macro in GCC\n+\n+@example\n+#define foo(a) \"a\"\n+@end example\n+\n+@noindent\n+will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n+\n+The @option{-traditional} option directs GCC to handle such cases\n+(among others) in the old-fashioned (non-ISO) fashion.\n+\n+@cindex @code{setjmp} incompatibilities\n+@cindex @code{longjmp} incompatibilities\n+@item\n+When you use @code{setjmp} and @code{longjmp}, the only automatic\n+variables guaranteed to remain valid are those declared\n+@code{volatile}.  This is a consequence of automatic register\n+allocation.  Consider this function:\n+\n+@example\n+jmp_buf j;\n+\n+foo ()\n+@{\n+  int a, b;\n+\n+  a = fun1 ();\n+  if (setjmp (j))\n+    return a;\n+\n+  a = fun2 ();\n+  /* @r{@code{longjmp (j)} may occur in @code{fun3}.} */\n+  return a + fun3 ();\n+@}\n+@end example\n+\n+Here @code{a} may or may not be restored to its first value when the\n+@code{longjmp} occurs.  If @code{a} is allocated in a register, then\n+its first value is restored; otherwise, it keeps the last value stored\n+in it.\n+\n+@opindex W\n+If you use the @option{-W} option with the @option{-O} option, you will\n+get a warning when GCC thinks such a problem might be possible.\n+\n+The @option{-traditional} option directs GCC to put variables in\n+the stack by default, rather than in registers, in functions that\n+call @code{setjmp}.  This results in the behavior found in\n+traditional C compilers.\n+\n+@item\n+Programs that use preprocessing directives in the middle of macro\n+arguments do not work with GCC@.  For example, a program like this\n+will not work:\n+\n+@example\n+@group\n+foobar (\n+#define luser\n+        hack)\n+@end group\n+@end example\n+\n+ISO C does not permit such a construct.  It would make sense to support\n+it when @option{-traditional} is used, but it is too much work to\n+implement.\n+\n+@item\n+K&R compilers allow comments to cross over an inclusion boundary\n+(i.e.@: started in an include file and ended in the including file).  I think\n+this would be quite ugly and can't imagine it could be needed.\n+\n+@cindex external declaration scope\n+@cindex scope of external declarations\n+@cindex declaration scope\n+@item\n+Declarations of external variables and functions within a block apply\n+only to the block containing the declaration.  In other words, they\n+have the same scope as any other declaration in the same place.\n+\n+In some other C compilers, a @code{extern} declaration affects all the\n+rest of the file even if it happens within a block.\n+\n+The @option{-traditional} option directs GCC to treat all @code{extern}\n+declarations as global, like traditional compilers.\n+\n+@item\n+In traditional C, you can combine @code{long}, etc., with a typedef name,\n+as shown here:\n+\n+@example\n+typedef int foo;\n+typedef long foo bar;\n+@end example\n+\n+In ISO C, this is not allowed: @code{long} and other type modifiers\n+require an explicit @code{int}.  Because this criterion is expressed\n+by Bison grammar rules rather than C code, the @option{-traditional}\n+flag cannot alter it.\n+\n+@cindex typedef names as function parameters\n+@item\n+PCC allows typedef names to be used as function parameters.  The\n+difficulty described immediately above applies here too.\n+\n+@item\n+When in @option{-traditional} mode, GCC allows the following erroneous\n+pair of declarations to appear together in a given scope:\n+\n+@example\n+typedef int foo;\n+typedef foo foo;\n+@end example\n+\n+@item\n+GCC treats all characters of identifiers as significant, even when in\n+@option{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n+first eight characters are significant, although more may be used.''.\n+Also according to K&R-1 (2.2), ``An identifier is a sequence of letters\n+and digits; the first character must be a letter.  The underscore _\n+counts as a letter.'', but GCC also allows dollar signs in identifiers.\n+\n+@cindex whitespace\n+@item\n+PCC allows whitespace in the middle of compound assignment operators\n+such as @samp{+=}.  GCC, following the ISO standard, does not\n+allow this.  The difficulty described immediately above applies here\n+too.\n+\n+@cindex apostrophes\n+@cindex '\n+@item\n+GCC complains about unterminated character constants inside of\n+preprocessing conditionals that fail.  Some programs have English\n+comments enclosed in conditionals that are guaranteed to fail; if these\n+comments contain apostrophes, GCC will probably report an error.  For\n+example, this code would produce an error:\n+\n+@example\n+#if 0\n+You can't expect this to work.\n+#endif\n+@end example\n+\n+The best solution to such a problem is to put the text into an actual\n+C comment delimited by @samp{/*@dots{}*/}.  However,\n+@option{-traditional} suppresses these error messages.\n+\n+@item\n+Many user programs contain the declaration @samp{long time ();}.  In the\n+past, the system header files on many systems did not actually declare\n+@code{time}, so it did not matter what type your program declared it to\n+return.  But in systems with ISO C headers, @code{time} is declared to\n+return @code{time_t}, and if that is not the same as @code{long}, then\n+@samp{long time ();} is erroneous.\n+\n+The solution is to change your program to use appropriate system headers\n+(@code{<time.h>} on systems with ISO C headers) and not to declare\n+@code{time} if the system header files declare it, or failing that to\n+use @code{time_t} as the return type of @code{time}.\n+\n+@cindex @code{float} as function value type\n+@item\n+When compiling functions that return @code{float}, PCC converts it to\n+a double.  GCC actually returns a @code{float}.  If you are concerned\n+with PCC compatibility, you should declare your functions to return\n+@code{double}; you might as well say what you mean.\n+\n+@cindex structures\n+@cindex unions\n+@item\n+When compiling functions that return structures or unions, GCC\n+output code normally uses a method different from that used on most\n+versions of Unix.  As a result, code compiled with GCC cannot call\n+a structure-returning function compiled with PCC, and vice versa.\n+\n+The method used by GCC is as follows: a structure or union which is\n+1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or union\n+with any other size is stored into an address supplied by the caller\n+(usually in a special, fixed register, but on some machines it is passed\n+on the stack).  The machine-description macros @code{STRUCT_VALUE} and\n+@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n+\n+By contrast, PCC on most target machines returns structures and unions\n+of any size by copying the data into an area of static storage, and then\n+returning the address of that storage as if it were a pointer value.\n+The caller must copy the data from that memory area to the place where\n+the value is wanted.  GCC does not use this method because it is\n+slower and nonreentrant.\n+\n+On some newer machines, PCC uses a reentrant convention for all\n+structure and union returning.  GCC on most of these machines uses a\n+compatible convention when returning structures and unions in memory,\n+but still returns small structures and unions in registers.\n+\n+@opindex fpcc-struct-return\n+You can tell GCC to use a compatible convention for all structure and\n+union returning with the option @option{-fpcc-struct-return}.\n+\n+@cindex preprocessing tokens\n+@cindex preprocessing numbers\n+@item\n+GCC complains about program fragments such as @samp{0x74ae-0x4000}\n+which appear to be two hexadecimal constants separated by the minus\n+operator.  Actually, this string is a single @dfn{preprocessing token}.\n+Each such token must correspond to one token in C@.  Since this does not,\n+GCC prints an error message.  Although it may appear obvious that what\n+is meant is an operator and two values, the ISO C standard specifically\n+requires that this be treated as erroneous.\n+\n+A @dfn{preprocessing token} is a @dfn{preprocessing number} if it\n+begins with a digit and is followed by letters, underscores, digits,\n+periods and @samp{e+}, @samp{e-}, @samp{E+}, @samp{E-}, @samp{p+},\n+@samp{p-}, @samp{P+}, or @samp{P-} character sequences.  (In strict C89\n+mode, the sequences @samp{p+}, @samp{p-}, @samp{P+} and @samp{P-} cannot\n+appear in preprocessing numbers.)\n+\n+To make the above program fragment valid, place whitespace in front of\n+the minus sign.  This whitespace will end the preprocessing number.\n+@end itemize\n+\n+@node Fixed Headers\n+@section Fixed Header Files\n+\n+GCC needs to install corrected versions of some system header files.\n+This is because most target systems have some header files that won't\n+work with GCC unless they are changed.  Some have bugs, some are\n+incompatible with ISO C, and some depend on special features of other\n+compilers.\n+\n+Installing GCC automatically creates and installs the fixed header\n+files, by running a program called @code{fixincludes} (or for certain\n+targets an alternative such as @code{fixinc.svr4}).  Normally, you\n+don't need to pay attention to this.  But there are cases where it\n+doesn't do the right thing automatically.\n+\n+@itemize @bullet\n+@item\n+If you update the system's header files, such as by installing a new\n+system version, the fixed header files of GCC are not automatically\n+updated.  The easiest way to update them is to reinstall GCC@.  (If\n+you want to be clever, look in the makefile and you can find a\n+shortcut.)\n+\n+@item\n+On some systems, in particular SunOS 4, header file directories contain\n+machine-specific symbolic links in certain places.  This makes it\n+possible to share most of the header files among hosts running the\n+same version of SunOS 4 on different machine models.\n+\n+The programs that fix the header files do not understand this special\n+way of using symbolic links; therefore, the directory of fixed header\n+files is good only for the machine model used to build it.\n+\n+In SunOS 4, only programs that look inside the kernel will notice the\n+difference between machine models.  Therefore, for most purposes, you\n+need not be concerned about this.\n+\n+It is possible to make separate sets of fixed header files for the\n+different machine models, and arrange a structure of symbolic links so\n+as to use the proper set, but you'll have to do this by hand.\n+\n+@item\n+On Lynxos, GCC by default does not fix the header files.  This is\n+because bugs in the shell cause the @code{fixincludes} script to fail.\n+\n+This means you will encounter problems due to bugs in the system header\n+files.  It may be no comfort that they aren't GCC's fault, but it\n+does mean that there's nothing for us to do about them.\n+@end itemize\n+\n+@node Standard Libraries\n+@section Standard Libraries\n+\n+@opindex Wall\n+GCC by itself attempts to be a conforming freestanding implementation.\n+@xref{Standards,,Language Standards Supported by GCC}, for details of\n+what this means.  Beyond the library facilities required of such an\n+implementation, the rest of the C library is supplied by the vendor of\n+the operating system.  If that C library doesn't conform to the C\n+standards, then your programs might get warnings (especially when using\n+@option{-Wall}) that you don't expect.\n+\n+For example, the @code{sprintf} function on SunOS 4.1.3 returns\n+@code{char *} while the C standard says that @code{sprintf} returns an\n+@code{int}.  The @code{fixincludes} program could make the prototype for\n+this function match the Standard, but that would be wrong, since the\n+function will still return @code{char *}.\n+\n+If you need a Standard compliant library, then you need to find one, as\n+GCC does not provide one.  The GNU C library (called @code{glibc})\n+provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for\n+GNU/Linux and HURD-based GNU systems; no recent version of it supports\n+other systems, though some very old versions did.  Version 2.2 of the\n+GNU C library includes nearly complete C99 support.  You could also ask\n+your operating system vendor if newer libraries are available.\n+\n+@node Disappointments\n+@section Disappointments and Misunderstandings\n+\n+These problems are perhaps regrettable, but we don't know any practical\n+way around them.\n+\n+@itemize @bullet\n+@item\n+Certain local variables aren't recognized by debuggers when you compile\n+with optimization.\n+\n+This occurs because sometimes GCC optimizes the variable out of\n+existence.  There is no way to tell the debugger how to compute the\n+value such a variable ``would have had'', and it is not clear that would\n+be desirable anyway.  So GCC simply does not mention the eliminated\n+variable when it writes debugging information.\n+\n+You have to expect a certain amount of disagreement between the\n+executable and your source code, when you use optimization.\n+\n+@cindex conflicting types\n+@cindex scope of declaration\n+@item\n+Users often think it is a bug when GCC reports an error for code\n+like this:\n+\n+@example\n+int foo (struct mumble *);\n+\n+struct mumble @{ @dots{} @};\n+\n+int foo (struct mumble *x)\n+@{ @dots{} @}\n+@end example\n+\n+This code really is erroneous, because the scope of @code{struct\n+mumble} in the prototype is limited to the argument list containing it.\n+It does not refer to the @code{struct mumble} defined with file scope\n+immediately below---they are two unrelated types with similar names in\n+different scopes.\n+\n+But in the definition of @code{foo}, the file-scope type is used\n+because that is available to be inherited.  Thus, the definition and\n+the prototype do not match, and you get an error.\n+\n+This behavior may seem silly, but it's what the ISO standard specifies.\n+It is easy enough for you to make your code work by moving the\n+definition of @code{struct mumble} above the prototype.  It's not worth\n+being incompatible with ISO C just to avoid an error for the example\n+shown above.\n+\n+@item\n+Accesses to bit-fields even in volatile objects works by accessing larger\n+objects, such as a byte or a word.  You cannot rely on what size of\n+object is accessed in order to read or write the bit-field; it may even\n+vary for a given bit-field according to the precise usage.\n+\n+If you care about controlling the amount of memory that is accessed, use\n+volatile but do not use bit-fields.\n+\n+@item\n+GCC comes with shell scripts to fix certain known problems in system\n+header files.  They install corrected copies of various header files in\n+a special directory where only GCC will normally look for them.  The\n+scripts adapt to various systems by searching all the system header\n+files for the problem cases that we know about.\n+\n+If new system header files are installed, nothing automatically arranges\n+to update the corrected header files.  You will have to reinstall GCC\n+to fix the new header files.  More specifically, go to the build\n+directory and delete the files @file{stmp-fixinc} and\n+@file{stmp-headers}, and the subdirectory @code{include}; then do\n+@samp{make install} again.\n+\n+@item\n+@cindex floating point precision\n+On 68000 and x86 systems, for instance, you can get paradoxical results\n+if you test the precise values of floating point numbers.  For example,\n+you can find that a floating point value which is not a NaN is not equal\n+to itself.  This results from the fact that the floating point registers\n+hold a few more bits of precision than fit in a @code{double} in memory.\n+Compiled code moves values between memory and floating point registers\n+at its convenience, and moving them into memory truncates them.\n+\n+@opindex ffloat-store\n+You can partially avoid this problem by using the @option{-ffloat-store}\n+option (@pxref{Optimize Options}).\n+\n+@item\n+On the MIPS, variable argument functions using @file{varargs.h}\n+cannot have a floating point value for the first argument.  The\n+reason for this is that in the absence of a prototype in scope,\n+if the first argument is a floating point, it is passed in a\n+floating point register, rather than an integer register.\n+\n+If the code is rewritten to use the ISO standard @file{stdarg.h}\n+method of variable arguments, and the prototype is in scope at\n+the time of the call, everything will work fine.\n+\n+@item\n+On the H8/300 and H8/300H, variable argument functions must be\n+implemented using the ISO standard @file{stdarg.h} method of\n+variable arguments.  Furthermore, calls to functions using @file{stdarg.h}\n+variable arguments must have a prototype for the called function\n+in scope at the time of the call.\n+@end itemize\n+\n+@node C++ Misunderstandings\n+@section Common Misunderstandings with GNU C++\n+\n+@cindex misunderstandings in C++\n+@cindex surprises in C++\n+@cindex C++ misunderstandings\n+C++ is a complex language and an evolving one, and its standard\n+definition (the ISO C++ standard) was only recently completed.  As a\n+result, your C++ compiler may occasionally surprise you, even when its\n+behavior is correct.  This section discusses some areas that frequently\n+give rise to questions of this sort.\n+\n+@menu\n+* Static Definitions::  Static member declarations are not definitions\n+* Temporaries::         Temporaries may vanish before you expect\n+* Copy Assignment::     Copy Assignment operators copy virtual bases twice\n+@end menu\n+\n+@node Static Definitions\n+@subsection Declare @emph{and} Define Static Members\n+\n+@cindex C++ static data, declaring and defining\n+@cindex static data in C++, declaring and defining\n+@cindex declaring static data in C++\n+@cindex defining static data in C++\n+When a class has static data members, it is not enough to @emph{declare}\n+the static member; you must also @emph{define} it.  For example:\n+\n+@example\n+class Foo\n+@{\n+  @dots{}\n+  void method();\n+  static int bar;\n+@};\n+@end example\n+\n+This declaration only establishes that the class @code{Foo} has an\n+@code{int} named @code{Foo::bar}, and a member function named\n+@code{Foo::method}.  But you still need to define @emph{both}\n+@code{method} and @code{bar} elsewhere.  According to the ISO\n+standard, you must supply an initializer in one (and only one) source\n+file, such as:\n+\n+@example\n+int Foo::bar = 0;\n+@end example\n+\n+Other C++ compilers may not correctly implement the standard behavior.\n+As a result, when you switch to @code{g++} from one of these compilers,\n+you may discover that a program that appeared to work correctly in fact\n+does not conform to the standard: @code{g++} reports as undefined\n+symbols any static data members that lack definitions.\n+\n+@node Temporaries\n+@subsection Temporaries May Vanish Before You Expect\n+\n+@cindex temporaries, lifetime of\n+@cindex portions of temporary objects, pointers to\n+It is dangerous to use pointers or references to @emph{portions} of a\n+temporary object.  The compiler may very well delete the object before\n+you expect it to, leaving a pointer to garbage.  The most common place\n+where this problem crops up is in classes like string classes,\n+especially ones that define a conversion function to type @code{char *}\n+or @code{const char *}---which is one reason why the standard\n+@code{string} class requires you to call the @code{c_str} member\n+function.  However, any class that returns a pointer to some internal\n+structure is potentially subject to this problem.\n+\n+For example, a program may use a function @code{strfunc} that returns\n+@code{string} objects, and another function @code{charfunc} that\n+operates on pointers to @code{char}:\n+\n+@example\n+string strfunc ();\n+void charfunc (const char *);\n+\n+void\n+f ()\n+@{\n+  const char *p = strfunc().c_str();\n+  @dots{}\n+  charfunc (p);\n+  @dots{}\n+  charfunc (p);\n+@}\n+@end example\n+\n+@noindent\n+In this situation, it may seem reasonable to save a pointer to the C\n+string returned by the @code{c_str} member function and use that rather\n+than call @code{c_str} repeatedly.  However, the temporary string\n+created by the call to @code{strfunc} is destroyed after @code{p} is\n+initialized, at which point @code{p} is left pointing to freed memory.\n+\n+Code like this may run successfully under some other compilers,\n+particularly obsolete cfront-based compilers that delete temporaries\n+along with normal local variables.  However, the GNU C++ behavior is\n+standard-conforming, so if your program depends on late destruction of\n+temporaries it is not portable.\n+\n+The safe way to write such code is to give the temporary a name, which\n+forces it to remain until the end of the scope of the name.  For\n+example:\n+\n+@example\n+string& tmp = strfunc ();\n+charfunc (tmp.c_str ());\n+@end example\n+\n+@node Copy Assignment\n+@subsection Implicit Copy-Assignment for Virtual Bases\n+\n+When a base class is virtual, only one subobject of the base class\n+belongs to each full object.  Also, the constructors and destructors are\n+invoked only once, and called from the most-derived class.  However, such\n+objects behave unspecified when being assigned.  For example:\n+\n+@example\n+struct Base@{\n+  char *name;\n+  Base(char *n) : name(strdup(n))@{@}\n+  Base& operator= (const Base& other)@{\n+   free (name);\n+   name = strdup (other.name);\n+  @}\n+@};\n+\n+struct A:virtual Base@{\n+  int val;\n+  A():Base(\"A\")@{@}\n+@};\n+\n+struct B:virtual Base@{\n+  int bval;\n+  B():Base(\"B\")@{@}\n+@};\n+\n+struct Derived:public A, public B@{\n+  Derived():Base(\"Derived\")@{@}\n+@};\n+\n+void func(Derived &d1, Derived &d2)\n+@{\n+  d1 = d2;\n+@}\n+@end example\n+\n+The C++ standard specifies that @samp{Base::Base} is only called once\n+when constructing or copy-constructing a Derived object.  It is\n+unspecified whether @samp{Base::operator=} is called more than once when\n+the implicit copy-assignment for Derived objects is invoked (as it is\n+inside @samp{func} in the example).\n+\n+g++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n+direct bases, then assign all members.  In that algorithm, the virtual\n+base subobject can be encountered many times.  In the example, copying\n+proceeds in the following order: @samp{val}, @samp{name} (via\n+@code{strdup}), @samp{bval}, and @samp{name} again.\n+\n+If application code relies on copy-assignment, a user-defined\n+copy-assignment operator removes any uncertainties.  With such an\n+operator, the application can define whether and how the virtual base\n+subobject is assigned.\n+\n+@node Protoize Caveats\n+@section Caveats of using @command{protoize}\n+\n+The conversion programs @command{protoize} and @command{unprotoize} can\n+sometimes change a source file in a way that won't work unless you\n+rearrange it.\n+\n+@itemize @bullet\n+@item\n+@command{protoize} can insert references to a type name or type tag before\n+the definition, or in a file where they are not defined.\n+\n+If this happens, compiler error messages should show you where the new\n+references are, so fixing the file by hand is straightforward.\n+\n+@item\n+There are some C constructs which @command{protoize} cannot figure out.\n+For example, it can't determine argument types for declaring a\n+pointer-to-function variable; this you must do by hand.  @command{protoize}\n+inserts a comment containing @samp{???} each time it finds such a\n+variable; so you can find all such variables by searching for this\n+string.  ISO C does not require declaring the argument types of\n+pointer-to-function types.\n+\n+@item\n+Using @command{unprotoize} can easily introduce bugs.  If the program\n+relied on prototypes to bring about conversion of arguments, these\n+conversions will not take place in the program without prototypes.\n+One case in which you can be sure @command{unprotoize} is safe is when\n+you are removing prototypes that were made with @command{protoize}; if\n+the program worked before without any prototypes, it will work again\n+without them.\n+\n+@opindex Wconversion\n+You can find all the places where this problem might occur by compiling\n+the program with the @option{-Wconversion} option.  It prints a warning\n+whenever an argument is converted.\n+\n+@item\n+Both conversion programs can be confused if there are macro calls in and\n+around the text to be converted.  In other words, the standard syntax\n+for a declaration or definition must not result from expanding a macro.\n+This problem is inherent in the design of C and cannot be fixed.  If\n+only a few functions have confusing macro calls, you can easily convert\n+them manually.\n+\n+@item\n+@command{protoize} cannot get the argument types for a function whose\n+definition was not actually compiled due to preprocessing conditionals.\n+When this happens, @command{protoize} changes nothing in regard to such\n+a function.  @command{protoize} tries to detect such instances and warn\n+about them.\n+\n+You can generally work around this problem by using @command{protoize} step\n+by step, each time specifying a different set of @option{-D} options for\n+compilation, until all of the functions have been converted.  There is\n+no automatic way to verify that you have got them all, however.\n+\n+@item\n+Confusion may result if there is an occasion to convert a function\n+declaration or definition in a region of source code where there is more\n+than one formal parameter list present.  Thus, attempts to convert code\n+containing multiple (conditionally compiled) versions of a single\n+function header (in the same vicinity) may not produce the desired (or\n+expected) results.\n+\n+If you plan on converting source files which contain such code, it is\n+recommended that you first make sure that each conditionally compiled\n+region of source code which contains an alternative function header also\n+contains at least one additional follower token (past the final right\n+parenthesis of the function header).  This should circumvent the\n+problem.\n+\n+@item\n+@command{unprotoize} can become confused when trying to convert a function\n+definition or declaration which contains a declaration for a\n+pointer-to-function formal argument which has the same name as the\n+function being defined or declared.  We recommend you avoid such choices\n+of formal parameter names.\n+\n+@item\n+You might also want to correct some of the indentation by hand and break\n+long lines.  (The conversion programs don't write lines longer than\n+eighty characters in any case.)\n+@end itemize\n+\n+@node Non-bugs\n+@section Certain Changes We Don't Want to Make\n+\n+This section lists changes that people frequently request, but which\n+we do not make because we think GCC is better without them.\n+\n+@itemize @bullet\n+@item\n+Checking the number and type of arguments to a function which has an\n+old-fashioned definition and no prototype.\n+\n+Such a feature would work only occasionally---only for calls that appear\n+in the same file as the called function, following the definition.  The\n+only way to check all calls reliably is to add a prototype for the\n+function.  But adding a prototype eliminates the motivation for this\n+feature.  So the feature is not worthwhile.\n+\n+@item\n+Warning about using an expression whose type is signed as a shift count.\n+\n+Shift count operands are probably signed more often than unsigned.\n+Warning about this would cause far more annoyance than good.\n+\n+@item\n+Warning about assigning a signed value to an unsigned variable.\n+\n+Such assignments must be very common; warning about them would cause\n+more annoyance than good.\n+\n+@item\n+Warning when a non-void function value is ignored.\n+\n+Coming as I do from a Lisp background, I balk at the idea that there is\n+something dangerous about discarding a value.  There are functions that\n+return values which some callers may find useful; it makes no sense to\n+clutter the program with a cast to @code{void} whenever the value isn't\n+useful.\n+\n+@item\n+@opindex fshort-enums\n+Making @option{-fshort-enums} the default.\n+\n+This would cause storage layout to be incompatible with most other C\n+compilers.  And it doesn't seem very important, given that you can get\n+the same result in other ways.  The case where it matters most is when\n+the enumeration-valued object is inside a structure, and in that case\n+you can specify a field width explicitly.\n+\n+@item\n+Making bit-fields unsigned by default on particular machines where ``the\n+ABI standard'' says to do so.\n+\n+The ISO C standard leaves it up to the implementation whether a bit-field\n+declared plain @code{int} is signed or not.  This in effect creates two\n+alternative dialects of C@.\n+\n+@opindex fsigned-bitfields\n+@opindex funsigned-bitfields\n+The GNU C compiler supports both dialects; you can specify the signed\n+dialect with @option{-fsigned-bitfields} and the unsigned dialect with\n+@option{-funsigned-bitfields}.  However, this leaves open the question of\n+which dialect to use by default.\n+\n+Currently, the preferred dialect makes plain bit-fields signed, because\n+this is simplest.  Since @code{int} is the same as @code{signed int} in\n+every other context, it is cleanest for them to be the same in bit-fields\n+as well.\n+\n+Some computer manufacturers have published Application Binary Interface\n+standards which specify that plain bit-fields should be unsigned.  It is\n+a mistake, however, to say anything about this issue in an ABI@.  This is\n+because the handling of plain bit-fields distinguishes two dialects of C@.\n+Both dialects are meaningful on every type of machine.  Whether a\n+particular object file was compiled using signed bit-fields or unsigned\n+is of no concern to other object files, even if they access the same\n+bit-fields in the same data structures.\n+\n+A given program is written in one or the other of these two dialects.\n+The program stands a chance to work on most any machine if it is\n+compiled with the proper dialect.  It is unlikely to work at all if\n+compiled with the wrong dialect.\n+\n+Many users appreciate the GNU C compiler because it provides an\n+environment that is uniform across machines.  These users would be\n+inconvenienced if the compiler treated plain bit-fields differently on\n+certain machines.\n+\n+Occasionally users write programs intended only for a particular machine\n+type.  On these occasions, the users would benefit if the GNU C compiler\n+were to support by default the same dialect as the other compilers on\n+that machine.  But such applications are rare.  And users writing a\n+program to run on more than one type of machine cannot possibly benefit\n+from this kind of compatibility.\n+\n+This is why GCC does and will treat plain bit-fields in the same\n+fashion on all types of machines (by default).\n+\n+There are some arguments for making bit-fields unsigned by default on all\n+machines.  If, for example, this becomes a universal de facto standard,\n+it would make sense for GCC to go along with it.  This is something\n+to be considered in the future.\n+\n+(Of course, users strongly concerned about portability should indicate\n+explicitly in each bit-field whether it is signed or not.  In this way,\n+they write programs which have the same meaning in both C dialects.)\n+\n+@item\n+@opindex ansi\n+@opindex traditional\n+@opindex std\n+Undefining @code{__STDC__} when @option{-ansi} is not used.\n+\n+Currently, GCC defines @code{__STDC__} as long as you don't use\n+@option{-traditional}.  This provides good results in practice.\n+\n+Programmers normally use conditionals on @code{__STDC__} to ask whether\n+it is safe to use certain features of ISO C, such as function\n+prototypes or ISO token concatenation.  Since plain @command{gcc} supports\n+all the features of ISO C, the correct answer to these questions is\n+``yes''.\n+\n+Some users try to use @code{__STDC__} to check for the availability of\n+certain library facilities.  This is actually incorrect usage in an ISO\n+C program, because the ISO C standard says that a conforming\n+freestanding implementation should define @code{__STDC__} even though it\n+does not have the library facilities.  @samp{gcc -ansi -pedantic} is a\n+conforming freestanding implementation, and it is therefore required to\n+define @code{__STDC__}, even though it does not come with an ISO C\n+library.\n+\n+Sometimes people say that defining @code{__STDC__} in a compiler that\n+does not completely conform to the ISO C standard somehow violates the\n+standard.  This is illogical.  The standard is a standard for compilers\n+that claim to support ISO C, such as @samp{gcc -ansi}---not for other\n+compilers such as plain @command{gcc}.  Whatever the ISO C standard says\n+is relevant to the design of plain @command{gcc} without @option{-ansi} only\n+for pragmatic reasons, not as a requirement.\n+\n+GCC normally defines @code{__STDC__} to be 1, and in addition\n+defines @code{__STRICT_ANSI__} if you specify the @option{-ansi} option,\n+or a @option{-std} option for strict conformance to some version of ISO C@.\n+On some hosts, system include files use a different convention, where\n+@code{__STDC__} is normally 0, but is 1 if the user specifies strict\n+conformance to the C Standard.  GCC follows the host convention when\n+processing system include files, but when processing user files it follows\n+the usual GNU C convention.\n+\n+@item\n+Undefining @code{__STDC__} in C++.\n+\n+Programs written to compile with C++-to-C translators get the\n+value of @code{__STDC__} that goes with the C compiler that is\n+subsequently used.  These programs must test @code{__STDC__}\n+to determine what kind of C preprocessor that compiler uses:\n+whether they should concatenate tokens in the ISO C fashion\n+or in the traditional fashion.\n+\n+These programs work properly with GNU C++ if @code{__STDC__} is defined.\n+They would not work otherwise.\n+\n+In addition, many header files are written to provide prototypes in ISO\n+C but not in traditional C@.  Many of these header files can work without\n+change in C++ provided @code{__STDC__} is defined.  If @code{__STDC__}\n+is not defined, they will all fail, and will all need to be changed to\n+test explicitly for C++ as well.\n+\n+@item\n+Deleting ``empty'' loops.\n+\n+Historically, GCC has not deleted ``empty'' loops under the\n+assumption that the most likely reason you would put one in a program is\n+to have a delay, so deleting them will not make real programs run any\n+faster.\n+\n+However, the rationale here is that optimization of a nonempty loop\n+cannot produce an empty one, which holds for C but is not always the\n+case for C++.\n+\n+@opindex funroll-loops\n+Moreover, with @option{-funroll-loops} small ``empty'' loops are already\n+removed, so the current behavior is both sub-optimal and inconsistent\n+and will change in the future.\n+\n+@item\n+Making side effects happen in the same order as in some other compiler.\n+\n+@cindex side effects, order of evaluation\n+@cindex order of evaluation, side effects\n+It is never safe to depend on the order of evaluation of side effects.\n+For example, a function call like this may very well behave differently\n+from one compiler to another:\n+\n+@example\n+void func (int, int);\n+\n+int i = 2;\n+func (i++, i++);\n+@end example\n+\n+There is no guarantee (in either the C or the C++ standard language\n+definitions) that the increments will be evaluated in any particular\n+order.  Either increment might happen first.  @code{func} might get the\n+arguments @samp{2, 3}, or it might get @samp{3, 2}, or even @samp{2, 2}.\n+\n+@item\n+Not allowing structures with volatile fields in registers.\n+\n+Strictly speaking, there is no prohibition in the ISO C standard\n+against allowing structures with volatile fields in registers, but\n+it does not seem to make any sense and is probably not what you wanted\n+to do.  So the compiler will give an error message in this case.\n+\n+@item\n+Making certain warnings into errors by default.\n+\n+Some ISO C testsuites report failure when the compiler does not produce\n+an error message for a certain program.\n+\n+@opindex pedantic-errors\n+ISO C requires a ``diagnostic'' message for certain kinds of invalid\n+programs, but a warning is defined by GCC to count as a diagnostic.  If\n+GCC produces a warning but not an error, that is correct ISO C support.\n+If test suites call this ``failure'', they should be run with the GCC\n+option @option{-pedantic-errors}, which will turn these warnings into\n+errors.\n+\n+@end itemize\n+\n+@node Warnings and Errors\n+@section Warning Messages and Error Messages\n+\n+@cindex error messages\n+@cindex warnings vs errors\n+@cindex messages, warning and error\n+The GNU compiler can produce two kinds of diagnostics: errors and\n+warnings.  Each kind has a different purpose:\n+\n+@itemize @w{}\n+@item\n+@dfn{Errors} report problems that make it impossible to compile your\n+program.  GCC reports errors with the source file name and line\n+number where the problem is apparent.\n+\n+@item\n+@dfn{Warnings} report other unusual conditions in your code that\n+@emph{may} indicate a problem, although compilation can (and does)\n+proceed.  Warning messages also report the source file name and line\n+number, but include the text @samp{warning:} to distinguish them\n+from error messages.\n+@end itemize\n+\n+Warnings may indicate danger points where you should check to make sure\n+that your program really does what you intend; or the use of obsolete\n+features; or the use of nonstandard features of GNU C or C++.  Many\n+warnings are issued only if you ask for them, with one of the @option{-W}\n+options (for instance, @option{-Wall} requests a variety of useful\n+warnings).\n+\n+@opindex pedantic\n+@opindex pedantic-errors\n+GCC always tries to compile your program if possible; it never\n+gratuitously rejects a program whose meaning is clear merely because\n+(for instance) it fails to conform to a standard.  In some cases,\n+however, the C and C++ standards specify that certain extensions are\n+forbidden, and a diagnostic @emph{must} be issued by a conforming\n+compiler.  The @option{-pedantic} option tells GCC to issue warnings in\n+such cases; @option{-pedantic-errors} says to make them errors instead.\n+This does not mean that @emph{all} non-ISO constructs get warnings\n+or errors.\n+\n+@xref{Warning Options,,Options to Request or Suppress Warnings}, for\n+more detail on these and related command-line options."}, {"sha": "5ab266695a8453e72e6a6926227a16484bfb2fca", "filename": "gcc/doc/vms.texi", "status": "added", "additions": 331, "deletions": 0, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fvms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a6a114ed6ffbde48a1f9bf2af25f31b690b23/gcc%2Fdoc%2Fvms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fvms.texi?ref=b64a6a114ed6ffbde48a1f9bf2af25f31b690b23", "patch": "@@ -0,0 +1,331 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node VMS\n+@chapter Using GCC on VMS\n+\n+@c prevent bad page break with this line\n+Here is how to use GCC on VMS@.\n+\n+@menu\n+* Include Files and VMS::  Where the preprocessor looks for the include files.\n+* Global Declarations::    How to do globaldef, globalref and globalvalue with\n+                           GCC.\n+* VMS Misc::\t\t   Misc information.\n+@end menu\n+\n+@node Include Files and VMS\n+@section Include Files and VMS\n+\n+@cindex include files and VMS\n+@cindex VMS and include files\n+@cindex header files and VMS\n+Due to the differences between the filesystems of Unix and VMS, GCC\n+attempts to translate file names in @samp{#include} into names that VMS\n+will understand.  The basic strategy is to prepend a prefix to the\n+specification of the include file, convert the whole filename to a VMS\n+filename, and then try to open the file.  GCC tries various prefixes\n+one by one until one of them succeeds:\n+\n+@enumerate\n+@item\n+The first prefix is the @samp{GNU_CC_INCLUDE:} logical name: this is\n+where GNU C header files are traditionally stored.  If you wish to store\n+header files in non-standard locations, then you can assign the logical\n+@samp{GNU_CC_INCLUDE} to be a search list, where each element of the\n+list is suitable for use with a rooted logical.\n+\n+@item\n+The next prefix tried is @samp{SYS$SYSROOT:[SYSLIB.]}.  This is where\n+VAX-C header files are traditionally stored.\n+\n+@item\n+If the include file specification by itself is a valid VMS filename, the\n+preprocessor then uses this name with no prefix in an attempt to open\n+the include file.\n+\n+@item\n+If the file specification is not a valid VMS filename (i.e.@: does not\n+contain a device or a directory specifier, and contains a @samp{/}\n+character), the preprocessor tries to convert it from Unix syntax to\n+VMS syntax.\n+\n+Conversion works like this: the first directory name becomes a device,\n+and the rest of the directories are converted into VMS-format directory\n+names.  For example, the name @file{X11/foobar.h} is\n+translated to @file{X11:[000000]foobar.h} or @file{X11:foobar.h},\n+whichever one can be opened.  This strategy allows you to assign a\n+logical name to point to the actual location of the header files.\n+\n+@item\n+If none of these strategies succeeds, the @samp{#include} fails.\n+@end enumerate\n+\n+Include directives of the form:\n+\n+@example\n+#include foobar\n+@end example\n+\n+@noindent\n+are a common source of incompatibility between VAX-C and GCC@.  VAX-C\n+treats this much like a standard @code{#include <foobar.h>} directive.\n+That is incompatible with the ISO C behavior implemented by GCC: to\n+expand the name @code{foobar} as a macro.  Macro expansion should\n+eventually yield one of the two standard formats for @code{#include}:\n+\n+@example\n+#include \"@var{file}\"\n+#include <@var{file}>\n+@end example\n+\n+If you have this problem, the best solution is to modify the source to\n+convert the @code{#include} directives to one of the two standard forms.\n+That will work with either compiler.  If you want a quick and dirty fix,\n+define the file names as macros with the proper expansion, like this:\n+\n+@example\n+#define stdio <stdio.h>\n+@end example\n+\n+@noindent\n+This will work, as long as the name doesn't conflict with anything else\n+in the program.\n+\n+Another source of incompatibility is that VAX-C assumes that:\n+\n+@example\n+#include \"foobar\"\n+@end example\n+\n+@noindent\n+is actually asking for the file @file{foobar.h}.  GCC does not\n+make this assumption, and instead takes what you ask for literally;\n+it tries to read the file @file{foobar}.  The best way to avoid this\n+problem is to always specify the desired file extension in your include\n+directives.\n+\n+GCC for VMS is distributed with a set of include files that is\n+sufficient to compile most general purpose programs.  Even though the\n+GCC distribution does not contain header files to define constants\n+and structures for some VMS system-specific functions, there is no\n+reason why you cannot use GCC with any of these functions.  You first\n+may have to generate or create header files, either by using the public\n+domain utility @code{UNSDL} (which can be found on a DECUS tape), or by\n+extracting the relevant modules from one of the system macro libraries,\n+and using an editor to construct a C header file.\n+\n+A @code{#include} file name cannot contain a DECNET node name.  The\n+preprocessor reports an I/O error if you attempt to use a node name,\n+whether explicitly, or implicitly via a logical name.\n+\n+@node Global Declarations\n+@section Global Declarations and VMS\n+\n+@findex GLOBALREF\n+@findex GLOBALDEF\n+@findex GLOBALVALUEDEF\n+@findex GLOBALVALUEREF\n+GCC does not provide the @code{globalref}, @code{globaldef} and\n+@code{globalvalue} keywords of VAX-C@.  You can get the same effect with\n+an obscure feature of GAS, the GNU assembler.  (This requires GAS\n+version 1.39 or later.)  The following macros allow you to use this\n+feature in a fairly natural way:\n+\n+@smallexample\n+#ifdef __GNUC__\n+#define GLOBALREF(TYPE,NAME)                      \\\n+  TYPE NAME                                       \\\n+  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME)\n+#define GLOBALDEF(TYPE,NAME,VALUE)                \\\n+  TYPE NAME                                       \\\n+  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME) \\\n+    = VALUE\n+#define GLOBALVALUEREF(TYPE,NAME)                 \\\n+  const TYPE NAME[1]                              \\\n+  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)\n+#define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \\\n+  const TYPE NAME[1]                              \\\n+  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)  \\\n+    = @{VALUE@}\n+#else\n+#define GLOBALREF(TYPE,NAME) \\\n+  globalref TYPE NAME\n+#define GLOBALDEF(TYPE,NAME,VALUE) \\\n+  globaldef TYPE NAME = VALUE\n+#define GLOBALVALUEDEF(TYPE,NAME,VALUE) \\\n+  globalvalue TYPE NAME = VALUE\n+#define GLOBALVALUEREF(TYPE,NAME) \\\n+  globalvalue TYPE NAME\n+#endif\n+@end smallexample\n+\n+@noindent\n+(The @code{_$$PsectAttributes_GLOBALSYMBOL} prefix at the start of the\n+name is removed by the assembler, after it has modified the attributes\n+of the symbol).  These macros are provided in the VMS binaries\n+distribution in a header file @file{GNU_HACKS.H}.  An example of the\n+usage is:\n+\n+@example\n+GLOBALREF (int, ijk);\n+GLOBALDEF (int, jkl, 0);\n+@end example\n+\n+The macros @code{GLOBALREF} and @code{GLOBALDEF} cannot be used\n+straightforwardly for arrays, since there is no way to insert the array\n+dimension into the declaration at the right place.  However, you can\n+declare an array with these macros if you first define a typedef for the\n+array type, like this:\n+\n+@example\n+typedef int intvector[10];\n+GLOBALREF (intvector, foo);\n+@end example\n+\n+Array and structure initializers will also break the macros; you can\n+define the initializer to be a macro of its own, or you can expand the\n+@code{GLOBALDEF} macro by hand.  You may find a case where you wish to\n+use the @code{GLOBALDEF} macro with a large array, but you are not\n+interested in explicitly initializing each element of the array.  In\n+such cases you can use an initializer like: @code{@{0,@}}, which will\n+initialize the entire array to @code{0}.\n+\n+A shortcoming of this implementation is that a variable declared with\n+@code{GLOBALVALUEREF} or @code{GLOBALVALUEDEF} is always an array.  For\n+example, the declaration:\n+\n+@example\n+GLOBALVALUEREF(int, ijk);\n+@end example\n+\n+@noindent\n+declares the variable @code{ijk} as an array of type @code{int [1]}.\n+This is done because a globalvalue is actually a constant; its ``value''\n+is what the linker would normally consider an address.  That is not how\n+an integer value works in C, but it is how an array works.  So treating\n+the symbol as an array name gives consistent results---with the\n+exception that the value seems to have the wrong type.  @strong{Don't\n+try to access an element of the array.}  It doesn't have any elements.\n+The array ``address'' may not be the address of actual storage.\n+\n+The fact that the symbol is an array may lead to warnings where the\n+variable is used.  Insert type casts to avoid the warnings.  Here is an\n+example; it takes advantage of the ISO C feature allowing macros that\n+expand to use the same name as the macro itself.\n+\n+@example\n+GLOBALVALUEREF (int, ss$_normal);\n+GLOBALVALUEDEF (int, xyzzy,123);\n+#ifdef __GNUC__\n+#define ss$_normal ((int) ss$_normal)\n+#define xyzzy ((int) xyzzy)\n+#endif\n+@end example\n+\n+Don't use @code{globaldef} or @code{globalref} with a variable whose\n+type is an enumeration type; this is not implemented.  Instead, make the\n+variable an integer, and use a @code{globalvaluedef} for each of the\n+enumeration values.  An example of this would be:\n+\n+@example\n+#ifdef __GNUC__\n+GLOBALDEF (int, color, 0);\n+GLOBALVALUEDEF (int, RED, 0);\n+GLOBALVALUEDEF (int, BLUE, 1);\n+GLOBALVALUEDEF (int, GREEN, 3);\n+#else\n+enum globaldef color @{RED, BLUE, GREEN = 3@};\n+#endif\n+@end example\n+\n+@node VMS Misc\n+@section Other VMS Issues\n+\n+@cindex exit status and VMS\n+@cindex return value of @code{main}\n+@cindex @code{main} and the exit status\n+GCC automatically arranges for @code{main} to return 1 by default if\n+you fail to specify an explicit return value.  This will be interpreted\n+by VMS as a status code indicating a normal successful completion.\n+Version 1 of GCC did not provide this default.\n+\n+GCC on VMS works only with the GNU assembler, GAS@.  You need version\n+1.37 or later of GAS in order to produce value debugging information for\n+the VMS debugger.  Use the ordinary VMS linker with the object files\n+produced by GAS@.\n+\n+@cindex shared VMS run time system\n+@cindex @file{VAXCRTL}\n+Under previous versions of GCC, the generated code would occasionally\n+give strange results when linked to the sharable @file{VAXCRTL} library.\n+Now this should work.\n+\n+A caveat for use of @code{const} global variables: the @code{const}\n+modifier must be specified in every external declaration of the variable\n+in all of the source files that use that variable.  Otherwise the linker\n+will issue warnings about conflicting attributes for the variable.  Your\n+program will still work despite the warnings, but the variable will be\n+placed in writable storage.\n+\n+@cindex name augmentation\n+@cindex case sensitivity and VMS\n+@cindex VMS and case sensitivity\n+Although the VMS linker does distinguish between upper and lower case\n+letters in global symbols, most VMS compilers convert all such symbols\n+into upper case and most run-time library routines also have upper case\n+names.  To be able to reliably call such routines, GCC (by means of\n+the assembler GAS) converts global symbols into upper case like other\n+VMS compilers.  However, since the usual practice in C is to distinguish\n+case, GCC (via GAS) tries to preserve usual C behavior by augmenting\n+each name that is not all lower case.  This means truncating the name\n+to at most 23 characters and then adding more characters at the end\n+which encode the case pattern of those 23.   Names which contain at\n+least one dollar sign are an exception; they are converted directly into\n+upper case without augmentation.\n+\n+Name augmentation yields bad results for programs that use precompiled\n+libraries (such as Xlib) which were generated by another compiler.  You\n+can use the compiler option @samp{/NOCASE_HACK} to inhibit augmentation;\n+it makes external C functions and variables case-independent as is usual\n+on VMS@.  Alternatively, you could write all references to the functions\n+and variables in such libraries using lower case; this will work on VMS,\n+but is not portable to other systems.  The compiler option @samp{/NAMES}\n+also provides control over global name handling.\n+\n+Function and variable names are handled somewhat differently with G++.\n+The GNU C++ compiler performs @dfn{name mangling} on function\n+names, which means that it adds information to the function name to\n+describe the data types of the arguments that the function takes.  One\n+result of this is that the name of a function can become very long.\n+Since the VMS linker only recognizes the first 31 characters in a name,\n+special action is taken to ensure that each function and variable has a\n+unique name that can be represented in 31 characters.\n+\n+If the name (plus a name augmentation, if required) is less than 32\n+characters in length, then no special action is performed.  If the name\n+is longer than 31 characters, the assembler (GAS) will generate a\n+hash string based upon the function name, truncate the function name to\n+23 characters, and append the hash string to the truncated name.  If the\n+@samp{/VERBOSE} compiler option is used, the assembler will print both\n+the full and truncated names of each symbol that is truncated.\n+\n+The @samp{/NOCASE_HACK} compiler option should not be used when you are\n+compiling programs that use libg++.  libg++ has several instances of\n+objects (i.e.  @code{Filebuf} and @code{filebuf}) which become\n+indistinguishable in a case-insensitive environment.  This leads to\n+cases where you need to inhibit augmentation selectively (if you were\n+using libg++ and Xlib in the same program, for example).  There is no\n+special feature for doing this, but you can get the result by defining a\n+macro for each mixed case symbol for which you wish to inhibit\n+augmentation.  The macro should expand into the lower case equivalent of\n+itself.  For example:\n+\n+@example\n+#define StuDlyCapS studlycaps\n+@end example\n+\n+These macro definitions can be placed in a header file to minimize the\n+number of changes to your source code."}]}