{"sha": "33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxNDJjZjljZjgyYWExZjFiZTZiOGM3N2Y5MDM4MThjMTAxYjlkZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-01-09T19:16:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-01-09T19:16:02Z"}, "message": "i386-protos.h (ix86_expand_xorsign): New prototype.\n\n\t* config/i386/i386-protos.h (ix86_expand_xorsign): New prototype.\n\t(ix86_split_xorsign): Ditto.\n\t* config/i386/i386.c (ix86_expand_xorsign): New function.\n\t(ix86_split_xorsign): Ditto.\n\t* config/i386/i386.md (UNSPEC_XORSIGN): New unspec.\n\t(xorsign<mode>3): New expander.\n\t(xorsign<mode>3_1): New insn_and_split pattern.\n\t* config/i386/sse.md (xorsign<mode>3): New expander.\n\ntestsuite/ChangeLog:\n\n\t* lib/target-supports.exp\n\t(check_effective_target_xorsign): Add i?86-*-* and x86_64-*-* targets.\n\t* gcc.target/i386/xorsign.c: New test.\n\nFrom-SVN: r267779", "tree": {"sha": "10fd20099e2a8a5a9291613f0afc9c891a75c841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10fd20099e2a8a5a9291613f0afc9c891a75c841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3ed896c5535cdcab09698b7b7f37c84825d9d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ed896c5535cdcab09698b7b7f37c84825d9d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ed896c5535cdcab09698b7b7f37c84825d9d7d"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "c8fdce94c69792e6f9798e348dd699945513e706", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -1,3 +1,14 @@\n+2019-01-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_xorsign): New prototype.\n+\t(ix86_split_xorsign): Ditto.\n+\t* config/i386/i386.c (ix86_expand_xorsign): New function.\n+\t(ix86_split_xorsign): Ditto.\n+\t* config/i386/i386.md (UNSPEC_XORSIGN): New unspec.\n+\t(xorsign<mode>3): New expander.\n+\t(xorsign<mode>3_1): New insn_and_split pattern.\n+\t* config/i386/sse.md (xorsign<mode>3): New expander.\n+\n 2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.md (*tablejump_sp32): Merge into..."}, {"sha": "2d6001739176437c342a0f7980267953a5e54c31", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -124,6 +124,8 @@ extern void ix86_expand_fp_absneg_operator (enum rtx_code, machine_mode,\n extern void ix86_expand_copysign (rtx []);\n extern void ix86_split_copysign_const (rtx []);\n extern void ix86_split_copysign_var (rtx []);\n+extern void ix86_expand_xorsign (rtx []);\n+extern void ix86_split_xorsign (rtx []);\n extern bool ix86_unary_operator_ok (enum rtx_code, machine_mode, rtx[]);\n extern bool ix86_match_ccmode (rtx, machine_mode);\n extern void ix86_expand_branch (enum rtx_code, rtx, rtx, rtx);"}, {"sha": "628ec80123ee3fac5e645850b81149730f12e4d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -21860,6 +21860,63 @@ ix86_split_copysign_var (rtx operands[])\n   emit_insn (gen_rtx_SET (dest, x));\n }\n \n+/* Expand an xorsign operation.  */\n+\n+void\n+ix86_expand_xorsign (rtx operands[])\n+{\n+  rtx (*xorsign_insn)(rtx, rtx, rtx, rtx);\n+  machine_mode mode, vmode;\n+  rtx dest, op0, op1, mask;\n+\n+  dest = operands[0];\n+  op0 = operands[1];\n+  op1 = operands[2];\n+\n+  mode = GET_MODE (dest);\n+\n+  if (mode == SFmode)\n+    {\n+      xorsign_insn = gen_xorsignsf3_1;\n+      vmode = V4SFmode;\n+    }\n+  else if (mode == DFmode)\n+    {\n+      xorsign_insn = gen_xorsigndf3_1;\n+      vmode = V2DFmode;\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  mask = ix86_build_signbit_mask (vmode, 0, 0);\n+\n+  emit_insn (xorsign_insn (dest, op0, op1, mask));\n+}\n+\n+/* Deconstruct an xorsign operation into bit masks.  */\n+\n+void\n+ix86_split_xorsign (rtx operands[])\n+{\n+  machine_mode mode, vmode;\n+  rtx dest, op0, mask, x;\n+\n+  dest = operands[0];\n+  op0 = operands[1];\n+  mask = operands[3];\n+\n+  mode = GET_MODE (dest);\n+  vmode = GET_MODE (mask);\n+\n+  dest = lowpart_subreg (vmode, dest, mode);\n+  x = gen_rtx_AND (vmode, dest, mask);\n+  emit_insn (gen_rtx_SET (dest, x));\n+\n+  op0 = lowpart_subreg (vmode, op0, mode);\n+  x = gen_rtx_XOR (vmode, dest, op0);\n+  emit_insn (gen_rtx_SET (dest, x));\n+}\n+\n /* Return TRUE or FALSE depending on whether the first SET in INSN\n    has source and destination with matching CC modes, and that the\n    CC mode is at least as constrained as REQ_MODE.  */"}, {"sha": "28e336044683585f608ba12249b15583b68586dd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -124,6 +124,7 @@\n \n   ;; Generic math support\n   UNSPEC_COPYSIGN\n+  UNSPEC_XORSIGN\n   UNSPEC_IEEE_MIN\t; not commutative\n   UNSPEC_IEEE_MAX\t; not commutative\n \n@@ -9784,6 +9785,26 @@\n    && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_copysign_var (operands); DONE;\")\n+\n+(define_expand \"xorsign<mode>3\"\n+  [(match_operand:MODEF 0 \"register_operand\")\n+   (match_operand:MODEF 1 \"register_operand\")\n+   (match_operand:MODEF 2 \"register_operand\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"ix86_expand_xorsign (operands); DONE;\")\n+\n+(define_insn_and_split \"xorsign<mode>3_1\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=Yv\")\n+\t(unspec:MODEF\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"Yv\")\n+\t   (match_operand:MODEF 2 \"register_operand\" \"0\")\n+\t   (match_operand:<ssevecmode> 3 \"nonimmediate_operand\" \"Yvm\")]\n+\t  UNSPEC_XORSIGN))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_xorsign (operands); DONE;\")\n \f\n ;; One complement instructions\n "}, {"sha": "b5e3cd82eea1303eb6c107082be4247b0f284d9b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -3423,6 +3423,20 @@\n   operands[5] = gen_reg_rtx (<MODE>mode);\n })\n \n+(define_expand \"xorsign<mode>3\"\n+  [(set (match_dup 4)\n+\t(and:VF (match_dup 3)\n+\t\t(match_operand:VF 2 \"vector_operand\")))\n+   (set (match_operand:VF 0 \"register_operand\")\n+\t(xor:VF (match_dup 4)\n+\t\t(match_operand:VF 1 \"vector_operand\")))]\n+  \"TARGET_SSE\"\n+{\n+  operands[3] = ix86_build_signbit_mask (<MODE>mode, 1, 0);\n+\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+})\n+\n ;; Also define scalar versions.  These are used for abs, neg, and\n ;; conditional move.  Using subregs into vector modes causes register\n ;; allocation lossage.  These patterns do not allow memory operands"}, {"sha": "c4fa25493122631ffb7bd480aa2ed93fcc968cb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -1,3 +1,9 @@\n+2019-01-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_xorsign): Add i?86-*-* and x86_64-*-* targets.\n+\t* gcc.target/i386/xorsign.c: New test.\n+\n 2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/tls-ld-int8.c: New test."}, {"sha": "ebed5edccb6f09b245e58be6838c0701139c4bc4", "filename": "gcc/testsuite/gcc.target/i386/xorsign.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorsign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorsign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorsign.c?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse -ftree-vectorize -fdump-tree-vect-details -save-temps\" } */\n+\n+extern void abort ();\n+\n+#define N 16\n+float a[N] = {-0.1f, -3.2f, -6.3f, -9.4f,\n+\t      -12.5f, -15.6f, -18.7f, -21.8f,\n+\t      24.9f, 27.1f, 30.2f, 33.3f,\n+\t      36.4f, 39.5f, 42.6f, 45.7f};\n+float b[N] = {-1.2f, 3.4f, -5.6f, 7.8f,\n+\t      -9.0f, 1.0f, -2.0f, 3.0f,\n+\t      -4.0f, -5.0f, 6.0f, 7.0f,\n+\t      -8.0f, -9.0f, 10.0f, 11.0f};\n+float r[N];\n+\n+double ad[N] = {-0.1d,  -3.2d,  -6.3d,  -9.4d,\n+\t\t-12.5d, -15.6d, -18.7d, -21.8d,\n+\t\t 24.9d,  27.1d,  30.2d,  33.3d,\n+\t\t 36.4d,  39.5d,  42.6d, 45.7d};\n+double bd[N] = {-1.2d,  3.4d, -5.6d,  7.8d,\n+\t\t-9.0d,  1.0d, -2.0d,  3.0d,\n+\t\t-4.0d, -5.0d,  6.0d,  7.0d,\n+\t\t-8.0d, -9.0d, 10.0d, 11.0d};\n+double rd[N];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = a[i] * __builtin_copysignf (1.0f, b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != a[i] * __builtin_copysignf (1.0f, b[i]))\n+      abort ();\n+\n+  for (i = 0; i < N; i++)\n+    rd[i] = ad[i] * __builtin_copysign (1.0d, bd[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (rd[i] != ad[i] * __builtin_copysign (1.0d, bd[i]))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xor\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]and\" } } */\n+/* { dg-final { scan-assembler-not \"copysign\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]fxam\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]or\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]mul\" } } */"}, {"sha": "a3cf1c975f8e4b408c53bc2a6e084004a6b16198", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33142cf9cf82aa1f1be6b8c77f903818c101b9dd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=33142cf9cf82aa1f1be6b8c77f903818c101b9dd", "patch": "@@ -5730,7 +5730,8 @@ proc check_effective_target_vect_perm3_short { } {\n \n proc check_effective_target_xorsign { } {\n     return [check_cached_effective_target_indexed xorsign {\n-      expr { [istarget aarch64*-*-*] || [istarget arm*-*-*] }}]\n+      expr { [istarget i?86-*-*] || [istarget x86_64-*-*]\n+\t     || [istarget aarch64*-*-*] || [istarget arm*-*-*] }}]\n }\n \n # Return 1 if the target plus current options supports a vector"}]}