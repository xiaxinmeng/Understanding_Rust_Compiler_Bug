{"sha": "59ec925b1199f9777d0d10be46251516f774b214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllYzkyNWIxMTk5Zjk3NzdkMGQxMGJlNDYyNTE1MTZmNzc0YjIxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-25T10:22:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-25T10:22:57Z"}, "message": "re PR tree-optimization/78343 (Loop is not eliminated)\n\n2016-11-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78343\n\t* passes.def: Add CD-DCE pass after loop splitting.\n\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Move\n\tSCEV init/finalize ...\n\t(perform_tree_ssa_dce): ... here.  Deal with being\n\texecuted inside the loop pipeline in aggressive mode.\n\n\t* gcc.dg/tree-ssa/sccp-2.c: New testcase.\n\t* gcc.dg/autopar/uns-outer-6.c: Adjust.\n\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20040305-1.c: Likewise.\n\t* gcc.dg/vect/pr38529.c: Likewise.\n\nFrom-SVN: r242872", "tree": {"sha": "55f77a216d9ec3e9a34f6aafdd73a26855b05273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f77a216d9ec3e9a34f6aafdd73a26855b05273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ec925b1199f9777d0d10be46251516f774b214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ec925b1199f9777d0d10be46251516f774b214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ec925b1199f9777d0d10be46251516f774b214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ec925b1199f9777d0d10be46251516f774b214/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4741b062d65c4af37eba4b1ba5bba11bc95256e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4741b062d65c4af37eba4b1ba5bba11bc95256e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4741b062d65c4af37eba4b1ba5bba11bc95256e1"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "9681566de997edbbfcfe789c134f83d94e27c021", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -1,3 +1,12 @@\n+2016-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78343\n+\t* passes.def: Add CD-DCE pass after loop splitting.\n+\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Move\n+\tSCEV init/finalize ...\n+\t(perform_tree_ssa_dce): ... here.  Deal with being\n+\texecuted inside the loop pipeline in aggressive mode.\n+\n 2016-11-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* tree-ssa-math-opts.c (struct symbolic_number): Improve comment."}, {"sha": "1117b8b112b7461c415f3d4e3bd8792fb66e1d2a", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -272,6 +272,9 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_tree_unswitch);\n \t  NEXT_PASS (pass_scev_cprop);\n \t  NEXT_PASS (pass_loop_split);\n+\t  /* All unswitching, final value replacement and splitting can expose\n+\t     empty loops.  Remove them now.  */\n+\t  NEXT_PASS (pass_cd_dce);\n \t  NEXT_PASS (pass_record_bounds);\n \t  NEXT_PASS (pass_loop_distribution);\n \t  NEXT_PASS (pass_copy_prop);"}, {"sha": "7072950f2366e44f6ff0b3e0f35cb4b02c4e73ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -1,3 +1,12 @@\n+2016-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78343\n+\t* gcc.dg/tree-ssa/sccp-2.c: New testcase.\n+\t* gcc.dg/autopar/uns-outer-6.c: Adjust.\n+\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040305-1.c: Likewise.\n+\t* gcc.dg/vect/pr38529.c: Likewise.\n+\n 2016-11-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/77673"}, {"sha": "12bd3979202b103cb486bfcead3b9ab02f44aaa9", "filename": "gcc/testsuite/gcc.dg/autopar/uns-outer-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -25,7 +25,7 @@ parloop (int N)\n   for (i = 0; i < N; i++)\n     {\n       for (j = 0; j < N; j++)\n-\ty[i]=x[i][j];\n+\ty[i] += x[i][j];\n       sum += y[i];\n     }\n   g_sum = sum;"}, {"sha": "cda86a7bbf1b88eda08c12d4043ef997fdda7639", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030808-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -33,8 +33,8 @@ delete_dead_jumptables ()\n /* There should be no loads of ->code.  If any exist, then we failed to\n    optimize away all the IF statements and the statements feeding\n    their conditions.  */\n-/* { dg-final { scan-tree-dump-times \"->code\" 0 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"->code\" 0 \"cddce3\"} } */\n    \n /* There should be no IF statements.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"cddce3\"} } */\n "}, {"sha": "d1a9af833484d3e823eabc369e9039cbb1f5ac6a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040305-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -27,4 +27,4 @@ void foo(int edx, int eax)\n \n /* After cddce we should have two IF statements remaining as the other\n    two tests can be threaded.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce3\"} } */"}, {"sha": "099b2810a0c47ae4d5f9c93b9543fe7e5c6d60d1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sccp-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsccp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsccp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsccp-2.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int\n+test(unsigned int quant)\n+{\n+  unsigned int sum = 0;\n+  for (unsigned int i = 0; i < quant; ++i)\n+    sum += quant;\n+  return sum;\n+}\n+\n+/* A single basic-block should remain (computing and\n+   returning quant * quant).  */\n+/* { dg-final { scan-tree-dump-times \"bb\" 1 \"optimized\" } } */"}, {"sha": "9b5919d6704d429f2d387bd6050ce46ee6034850", "filename": "gcc/testsuite/gcc.dg/vect/pr38529.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr38529.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr38529.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr38529.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -11,7 +11,3 @@ void foo()\n     for (j = 0; j < 17; ++j)\n       a[i] = 0;\n }\n-\n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\"  } } */\n-\n-"}, {"sha": "50b5eefc1fca277dd33952a014df5c993677f823", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ec925b1199f9777d0d10be46251516f774b214/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=59ec925b1199f9777d0d10be46251516f774b214", "patch": "@@ -400,7 +400,6 @@ find_obviously_necessary_stmts (bool aggressive)\n   if (aggressive)\n     {\n       struct loop *loop;\n-      scev_initialize ();\n       if (mark_irreducible_loops ())\n \tFOR_EACH_BB_FN (bb, cfun)\n \t  {\n@@ -423,7 +422,6 @@ find_obviously_necessary_stmts (bool aggressive)\n \t      fprintf (dump_file, \"can not prove finiteness of loop %i\\n\", loop->num);\n \t    mark_control_dependent_edges_necessary (loop->latch, false);\n \t  }\n-      scev_finalize ();\n     }\n }\n \n@@ -1567,9 +1565,13 @@ perform_tree_ssa_dce (bool aggressive)\n   /* Preheaders are needed for SCEV to work.\n      Simple lateches and recorded exits improve chances that loop will\n      proved to be finite in testcases such as in loop-15.c and loop-24.c  */\n-  if (aggressive)\n-    loop_optimizer_init (LOOPS_NORMAL\n-\t\t\t | LOOPS_HAVE_RECORDED_EXITS);\n+  bool in_loop_pipeline = scev_initialized_p ();\n+  if (aggressive && ! in_loop_pipeline)\n+    {\n+      scev_initialize ();\n+      loop_optimizer_init (LOOPS_NORMAL\n+\t\t\t   | LOOPS_HAVE_RECORDED_EXITS);\n+    }\n \n   tree_dce_init (aggressive);\n \n@@ -1588,8 +1590,11 @@ perform_tree_ssa_dce (bool aggressive)\n \n   find_obviously_necessary_stmts (aggressive);\n \n-  if (aggressive)\n-    loop_optimizer_finalize ();\n+  if (aggressive && ! in_loop_pipeline)\n+    {\n+      loop_optimizer_finalize ();\n+      scev_finalize ();\n+    }\n \n   longest_chain = 0;\n   total_chain = 0;\n@@ -1623,7 +1628,7 @@ perform_tree_ssa_dce (bool aggressive)\n   if (something_changed)\n     {\n       free_numbers_of_iterations_estimates (cfun);\n-      if (scev_initialized_p ())\n+      if (in_loop_pipeline)\n \tscev_reset ();\n       return TODO_update_ssa | TODO_cleanup_cfg;\n     }"}]}