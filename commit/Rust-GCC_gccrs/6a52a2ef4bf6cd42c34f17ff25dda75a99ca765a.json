{"sha": "6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1MmEyZWY0YmY2Y2Q0MmMzNGYxN2ZmMjVkZGE3NWE5OWNhNzY1YQ==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "lauras@softhome.net", "date": "2000-12-09T16:01:24Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2000-12-09T16:01:24Z"}, "message": "install.texi: remove i[345]86-*-winnt3.5 section.\n\n* install.texi: remove i[345]86-*-winnt3.5 section.\n* configur.bat: removed.\n* config/msdos: directory removed.\n\nFrom-SVN: r38153", "tree": {"sha": "19bebff66706ebc703dde4f9321188f6a878d803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19bebff66706ebc703dde4f9321188f6a878d803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/comments", "author": null, "committer": null, "parents": [{"sha": "a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40bb4d3457a605b5fdb63da04aae6bfa02938e5"}], "stats": {"total": 407, "additions": 104, "deletions": 303}, "files": [{"sha": "c600c123ed456746c09638d75362ae9850bf3514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "patch": "@@ -1,3 +1,9 @@\n+2000-12-09  Laurynas Biveinis  <lauras@softhome.net>\n+\n+\t* install.texi: remove i[345]86-*-winnt3.5 section.\n+\t* configur.bat: removed.\n+\t* config/msdos: directory removed.\n+\n 2000-12-09  Neil Booth  <neilb@earthling.net>\n \n         * cppfiles.c (NEVER_REREAD, DO_NOT_REREAD): Move from cpphash.h."}, {"sha": "e07e4f8809ce5f50e564e4d06d5eb4dc31b9c0d7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 98, "deletions": 48, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "patch": "@@ -2264,8 +2264,9 @@ clean: mostlyclean $(INTL_CLEAN) lang.clean\n \tfi ; fi\n \t-rm -fr stage1 stage2 stage3 stage4\n # Delete stamps of bootstrap stages\n-\t-rm -f stage_*\n-\t-rm -f clean_*\n+\t-rm -f stage?_*\n+\t-rm -f clean?_*\n+\t-rm -f stage_last\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -2780,84 +2781,133 @@ STAGE2_FLAGS_TO_PASS = \\\n # Only build the C compiler for stage1, because that is the only one that\n # we can guarantee will build with the native compiler, and also it is the\n # only thing useful for building stage2.\n-stage_a: \n+stage1_build:\n \t+$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\"\n-\ttouch stage_a\n+\ttouch stage1_build\n+\techo stage1_build > stage_last\n \n-stage_b: stage_a\n+stage1_copy: stage1_build\n \t$(MAKE) stage1\n-\ttouch stage_b\n+\ttouch stage1_copy\n+\techo stage2_build > stage_last\n \n # This used to define ALLOCA as empty, but that would lead to bad results\n # for a subsequent `make install' since that would not have ALLOCA empty.\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-stage_c: stage_b\n+stage2_build: stage1_copy\n \t+$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n \t\t STAGE_PREFIX=stage1/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_c\n+\ttouch stage2_build\n+\techo stage2_build > stage_last\n \n-stage_d: stage_c\n+stage2_copy: stage2_build\n \t+$(MAKE) stage2\n-\ttouch stage_d\n+\ttouch stage2_copy\n+\techo stage3_build > stage_last\n \n-stage_e: stage_d\n+stage3_build: stage2_copy\n \t+$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" \\\n \t\t STAGE_PREFIX=stage2/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_e\n+\ttouch stage3_build\n+\techo stage3_build > stage_last\n \n # For bootstrap4:\n-stage_f: stage_e\n+stage3_copy: stage3_build\n+\t+$(MAKE) stage3\n+\ttouch stage3_copy\n+\techo stage4_build > stage_last\n+\n+stage4_build: stage3_copy\n \t+$(MAKE) CC=\"stage3/xgcc$(exeext) -B$(build_tooldir)/bin/ -Bstage3/\" \\\n \t\t STAGE_PREFIX=stage3/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_f\n+\ttouch stage4_build\n+\techo stage4_build > stage_last\n \n # Additional steps for *-lean targets:\n-clean_s1: stage_b\n+clean_s1: stage1_copy\n \t-(cd stage1 && rm -f $(VOL_FILES))\n \ttouch clean_s1\n \n-clean_s2: stage_d\n+clean_s2: stage2_copy\n \t-rm -rf stage1\n \ttouch clean_s2\n \n-# This next little bit is the way it is for parallel builds.  It's simply\n-# a chain of stages which DO have to be done sequentially.\n-\n-bootstrap_a:              stage_a\n-bootstrap_b:  bootstrap_a stage_b\n-bootstrap_c:  bootstrap_b stage_c\n-bootstrap_d:  bootstrap_c stage_d\n-bootstrap_e:  bootstrap_d stage_e\n-bootstrap: force bootstrap_e\n-\n-bootstrap-lean_a:                   stage_a\n-bootstrap-lean_b:  bootstrap-lean_a stage_b\n-bootstrap-lean_c:  bootstrap-lean_b clean_s1 \n-bootstrap-lean_d:  bootstrap-lean_c stage_c\n-bootstrap-lean_e:  bootstrap-lean_d stage_d\n-bootstrap-lean_f:  bootstrap-lean_e clean_s2\n-bootstrap-lean_g:  bootstrap-lean_f stage_e\n-bootstrap-lean: force bootstrap-lean_g\n-\n-bootstrap2_c:               stage_c\n-bootstrap2_d:  bootstrap2_c stage_d\n-bootstrap2_e:  bootstrap2_d stage_e\n-bootstrap2: force bootstrap2_e\n-\n-bootstrap2-lean_c:                    stage_c\n-bootstrap2-lean_d:  bootstrap2-lean_c stage_d\n-bootstrap2-lean_e:  bootstrap2-lean_d clean_s2\n-bootstrap2-lean_f:  bootstrap2-lean_e stage_e\n-bootstrap2-lean: force bootstrap2-lean_f\n-\n-bootstrap3 bootstrap3-lean: force stage_e\n+# The various entry points for bootstrapping.\n+\n+bootstrap: stage3_build\n+\t@echo\n+\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n+\t@echo \\\"restage1\\\" through \\\"restage3\\\" to rebuild specific stages,\n+\t@echo or \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n+\n+bootstrap-lean : clean_s1 clean_s2 stage3_build\n+\t@echo\n+\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n+\t@echo or \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n+\n+bootstrap2: bootstrap\n+\n+bootstrap2-lean : bootstrap_lean\n+\n+bootstrap3 bootstrap3-lean: bootstrap\n  \n-bootstrap4 bootstrap4-lean: force stage_f\n+bootstrap4 bootstrap4-lean: stage4_build\n+\n+unstage1 unstage2 unstage3 unstage4:\n+\t-set -vx; stage=`echo $@ | sed -e 's/un//'`; \\\n+\tif test -d $$stage; then \\\n+\t  mv $$stage/* . 2>/dev/null; \\\n+\t  for i in `cd $$stage; echo *` ; do \\\n+\t    if test -d $$stage/$$i; then \\\n+\t      mv $$stage/$$i/* $$i/. 2>/dev/null; \\\n+\t    else \\\n+\t      mv $$stage/$$i .; \\\n+\t    fi \\\n+\t  done \\\n+\tfi ; \\\n+\trm -f $${stage}_build $${stage}_copy ;\\\n+\techo $${stage}_build > stage_last\n+\n+restage1: unstage1\n+\t$(MAKE) stage1_build\n+\n+restage2: unstage2\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage2_build\n+\n+restage3: unstage3\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage3_build\n+\n+restage4: unstage4\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage4_build\n+\n+bubblestrap:\n+\tif test -f stage3_build; then true; else \\\n+\t  echo; echo You must \\\"make bootstrap\\\" first.; \\\n+\t  exit 1; \\\n+\tfi\n+\tfor i in stage3 \\\n+\t\tunstage1 stage1_build stage1_copy \\\n+\t\tunstage2 stage2_build stage2_copy \\\n+\t\tunstage3 stage3_build ; \\\n+\tdo \\\n+\t  $(MAKE) LANGUAGES=\"$(LANGUAGES)\" $$i || exit 1 ; \\\n+\tdone\n+\n+quickstrap:\n+\tif test -f stage_last ; then \\\n+\t  LAST=`cat stage_last`; rm $$LAST; $(MAKE) LANGUAGES=\"$(LANGUAGES)\" $$LAST; \\\n+\telse \\\n+\t  $(MAKE) stage1_build; \\\n+\tfi\n+\n+cleanstrap:\n+\t-$(MAKE) clean\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" bootstrap\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}, {"sha": "03e4109168661be6c9139955bb60e649d08fe66b", "filename": "gcc/config/msdos/configur.bat", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Fconfigur.bat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Fconfigur.bat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsdos%2Fconfigur.bat?ref=a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "patch": "@@ -1,47 +0,0 @@\n-@echo off\r\n-echo Configuring GCC for go32\r\n-rem This batch file assumes a unix-type \"sed\" program\r\n-\r\n-if not exist config\\msdos\\configure.bat chdir ..\\..\r\n-\r\n-update config\\i386\\xm-dos.h config.h\r\n-update config\\i386\\xm-dos.h hconfig.h\r\n-update config\\i386\\xm-dos.h tconfig.h\r\n-update config\\i386\\go32.h tm.h\r\n-update config\\i386\\i386.md md\r\n-update config\\i386\\i386.c aux-output.c\r\n-\r\n-echo # Makefile generated by \"configure.bat\"> Makefile\r\n-echo all.dos: cccp cc1 cc1obj xgcc libgcc.a s-objlist >> Makefile\r\n-sed -f config/msdos/top.sed Makefile.in >> Makefile\r\n-\r\n-set LANG=\r\n-\r\n-if not exist ada\\make-lang.in goto no_ada\r\n-sed -f config/msdos/top.sed ada\\make-lang.in >> Makefile\r\n-sed -f config/msdos/top.sed ada\\makefile.in > ada\\Makefile\r\n-set LANG=%LANG% ada.&   \r\n-:no_ada\r\n-\r\n-if not exist cp\\make-lang.in goto no_cp\r\n-sed -f config/msdos/top.sed cp\\make-lang.in >> Makefile\r\n-sed -f config/msdos/top.sed cp\\makefile.in > cp\\Makefile\r\n-set LANG=%LANG% c++.&\t\r\n-:no_cp\r\n-\r\n-echo lang.mostlyclean: %LANG% | sed \"s/&/mostlyclean/g\" >> Makefile\r\n-echo lang.clean: %LANG% | sed \"s/&/clean/g\" >> Makefile\r\n-echo lang.distclean: %LANG% | sed \"s/&/distclean/g\" >> Makefile\r\n-echo lang.maintainer-clean: %LANG% | sed \"s/&/maintainer-clean/g\" >> Makefile\r\n-echo /* options.h */ > options.h\r\n-if exist cp\\lang-options.h echo #include \"cp/lang-options.h\" >> options.h\r\n-if exist ada\\lang-options.h echo #include \"ada/lang-options.h\" >> options.h\r\n-if exist f\\lang-options.h echo #include \"f/lang-options.h\" >> options.h\r\n-echo /* specs.h */ > specs.h\r\n-if exist cp\\lang-specs.h echo #include \"cp/lang-specs.h\" >> specs.h\r\n-if exist ada\\lang-specs.h echo #include \"ada/lang-specs.h\" >> specs.h\r\n-if exist f\\lang-specs.h echo #include \"f/lang-specs.h\" >> specs.h\r\n-\r\n-echo #define MULTILIB_SELECT \". ;\" > multilib.h1\r\n-update multilib.h1 multilib.h\r\n-del multilib.h1\r"}, {"sha": "5f480b152d37a705f6229ff4459baee436a45237", "filename": "gcc/config/msdos/libgcc.mak", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Flibgcc.mak", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Flibgcc.mak", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsdos%2Flibgcc.mak?ref=a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "patch": "@@ -1,14 +0,0 @@\n-# Build libgcc.a\r\n-\r\n-libgcc.a : libgcc1.c libgcc2.c mklibgcc\r\n-\t./mklibgcc -c\r\n-\t./mklibgcc '$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)' libgcc1.c $(LIB1FUNCS)\r\n-\t./mklibgcc '$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)' libgcc2.c $(LIB2FUNCS)\r\n-\t-command /c mklibnow.bat\r\n-\t-command /c del libgcc.a\r\n-\tar rvs libgcc.a lgcctmp/*.o\r\n-\r\n-mklibgcc : config/msdos/mklibgcc.c\r\n-\tgcc $(CFLAGS) $^ -o $@\r\n-\r\n-\f\r"}, {"sha": "705b3d5c4046c3e97d7f14631918762fea0662ad", "filename": "gcc/config/msdos/mklibgcc.c", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Fmklibgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Fmklibgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsdos%2Fmklibgcc.c?ref=a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "patch": "@@ -1,98 +0,0 @@\n-#include <stdio.h>\r\n-#include <string.h>\r\n-#include <dirent.h>\r\n-\r\n-char *skips[] = {\r\n-  \"__main\",\r\n-  \"_ctors\",\r\n-  \"_exit\",\r\n-  \"_ctor_list\",\r\n-  \"_dtor_list\",\r\n-  0\r\n-};\r\n-\r\n-int\r\n-do_clean()\r\n-{\r\n-  DIR *dir;\r\n-  struct dirent *de;\r\n-  remove(\"mklibnow.bat\");\r\n-\r\n-  dir = opendir(\"lgcctmp\");\r\n-  if (!dir)\r\n-    return 0;\r\n-  while ((de=readdir(dir)))\r\n-  {\r\n-    char buf[30];\r\n-    if (de->d_name[0] == '.')\r\n-      continue;\r\n-    sprintf(buf, \"lgcctmp/%s\", de->d_name);\r\n-    unlink(buf);\r\n-  }\r\n-  closedir(dir);\r\n-  return 0;\r\n-}\r\n-\r\n-int\r\n-main(int argc, char **argv)\r\n-{\r\n-  char *cc = argv[1];\r\n-  char *csrc=argv[2];\r\n-  int i;\r\n-  FILE *batfile;\r\n-  FILE *cfile;\r\n-\r\n-  if (argc > 1 && strcmp(argv[1], \"-c\")==0)\r\n-    return do_clean();\r\n-\r\n-  mkdir(\"lgcctmp\", 0755);\r\n-\r\n-  batfile = fopen(\"mklibnow.bat\", \"a\");\r\n-  if (!batfile)\r\n-  {\r\n-    perror(\"mklibnow.bat\");\r\n-    return 1;\r\n-  }\r\n-  fprintf(batfile, \"@echo off\\n\");\r\n-\r\n-  for (i=3; i<argc; i++)\r\n-  {\r\n-    char basename[30], *bp;\r\n-    int s;\r\n-    for (s=0; skips[s]; s++)\r\n-      if (strcmp(skips[s], argv[i]) == 0)\r\n-\tbreak;\r\n-    if (skips[s])\r\n-      continue;\r\n-    strcpy(basename, \"lgcctmp/\");\r\n-    if (strncmp(argv[i], \"_fix\", 4)==0)\r\n-    {\r\n-      strcat(basename, \"fx\");\r\n-      strcat(basename, argv[i]+4);\r\n-    }\r\n-    else if (strncmp(argv[i], \"_float\", 4)==0)\r\n-    {\r\n-      strcat(basename, \"flt\");\r\n-      strcat(basename, argv[i]+6);\r\n-    }\r\n-    else\r\n-    {\r\n-      strcat(basename, argv[i]);\r\n-    }\r\n-    bp = basename + strlen(basename);\r\n-    fprintf(batfile, \"%s -c %s.c -o %s.o\\n\", cc, basename, basename);\r\n-    strcpy(bp, \".c\");\r\n-    cfile = fopen(basename, \"w\");\r\n-    if (cfile)\r\n-    {\r\n-      *bp = 0;\r\n-      fprintf(cfile, \"#define L%s\\n#include \\\"%s\\\"\\n\", argv[i], csrc);\r\n-      fclose(cfile);\r\n-    }\r\n-    else\r\n-      perror(basename);\r\n-  }\r\n-\r\n-  fclose(batfile);\r\n-  return 0;\r\n-}\r"}, {"sha": "b1398a92ce5e9e3c5a8ade010188dbc99c5e80f1", "filename": "gcc/config/msdos/top.sed", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Ftop.sed", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfig%2Fmsdos%2Ftop.sed", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsdos%2Ftop.sed?ref=a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "patch": "@@ -1,58 +0,0 @@\n-/\\.o[ \t]*:/ s/config.status//\n-/^multilib.h/ s/multilib/not-multilib/\n-/^target=/ c\\\n-target=go32\n-/^out_file=/ c\\\n-out_file=config/i386/i386.c\n-/^out_object_file=/ c\\\n-out_object_file=i386.o\n-/^md_file=/ c\\\n-md_file=config/i386/i386.md\n-/^tm_file=/ c\\\n-tm_file=config/i386/go32.h\n-/^build_xm_file=/ c\\\n-build_xm_file=config/i386/xm-dos.h\n-/^host_xm_file=/ c\\\n-host_xm_file=config/i386/xm-dos.h\n-/^lang_specs_files=/ d\n-/^lang_options_files=/ d\n-/^xmake_file=/ d\n-/^tmake_file=/ d\n-/^version=/ c\\\n-version=2.8.1\n-/^mainversion=/ c\\\n-mainversion=2.8.1\n-s/CC = cc/CC = gcc/\n-s/:\\$/: \\$/g\n-s/^\t\\ *\\.\\//\t/\n-s/<\\ *\\$(srcdir)\\//< $(srcdir)\\\\/g\n-s/^\t\\$(SHELL) \\$(srcdir)\\/move-if-change/\tupdate/\n-s/^\t\\$(srcdir)\\/move-if-change/\tupdate/\n-s/^USE_/# USE_/\n-s/`echo \\$(srcdir)\\///g\n-s/ | sed 's,\\^\\\\\\.\\/,,'`//g\n-s/^\tcd \\$(srcdir)[ \t]*;/\t/\n-/^# USE_HOST_OBSTACK/ i\\\n-USE_HOST_OBSTACK=obstack.o\n-/^stamp-attrtab/,/update/ {\n-  /\\\\/d\n-  /[ \t]fi[ \t]/d\n-  /[ \t]fi$/d\n-  /update/ i\\\n-\tgenattrtab md > t-attrtab.c\n-}\n-/^enquire[ \t]*:/ s/\\$(GCC_PARTS)//g\n-/^enquire.o[ \t]*:/ s/\\$(GCC_PASSES)//g\n-/^GCC_FOR_TARGET =/ c\\\n-GCC_FOR_TARGET = gcc\n-s/; *@true//\n-s/stamp-/s-/g\n-s/tmp-/t-/g\n-/> *s-objlist/ c\\\n-\techo.exe -o s-objlist $(addprefix ../,$(OBJS))\n-/^OBJS.*s-objlist/ s?`cat ../s-objlist`?@../s-objlist?\n-s/^\\(SUBDIR_OBSTACK *=\\).*$/\\1 ..\\/obstack.o/\n-s/^\\(SUBDIR_USE_ALLOCA *=\\).*$/\\1/\n-s/^\\(SUBDIR_MALLOC *=\\).*$/\\1/\n-/^# Build libgcc.a/ r config/msdos/libgcc.mak\n-/^# Build libgcc.a/,/\f/ d"}, {"sha": "33cbe65df6e138bfaa51d224cbd93cf208a1eec3", "filename": "gcc/configure.bat", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfigure.bat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40bb4d3457a605b5fdb63da04aae6bfa02938e5/gcc%2Fconfigure.bat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.bat?ref=a40bb4d3457a605b5fdb63da04aae6bfa02938e5", "patch": "@@ -1,21 +0,0 @@\n-@echo off\r\n-if %1.==go32. goto call_go32\r\n-if %1.==winnt. goto call_winnt\r\n-echo Usage: configure go32 or configure winnt cpu\r\n-goto END\r\n-\r\n-:call_go32\r\n-call config\\msdos\\configure %1 %2 %3 %4\r\n-goto END\r\n-\r\n-:call_winnt\r\n-if %2.==i386. goto really_call_winnt\r\n-if %2.==alpha. goto really_call_winnt\r\n-echo Usage: configure winnt i386 or configure winnt alpha\r\n-goto END\r\n-:really_call_winnt\r\n-call config\\winnt\\config-nt %1 %2 %3 %4\r\n-goto END\r\n-\r\n-:END\r\n-"}, {"sha": "951db4ca108f3413c3cd620fa9b237965f029f8a", "filename": "gcc/install.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=6a52a2ef4bf6cd42c34f17ff25dda75a99ca765a", "patch": "@@ -1096,23 +1096,6 @@ seems not to have this problem.\n See @ref{Sun Install}, for information on installing GNU CC on Sun\n systems.\n \n-@item i[345]86-*-winnt3.5\n-This version requires a GAS that has not yet been released.  Until it\n-is, you can get a prebuilt binary version via anonymous ftp from\n-@uref{ftp://cs.washington.edu/pub/gnat} or @uref{ftp://cs.nyu.edu/pub/gnat}. You\n-must also use the Microsoft header files from the Windows NT 3.5 SDK.\n-Find these on the CDROM in the @file{/mstools/h} directory dated 9/4/94.  You\n-must use a fixed version of Microsoft linker made especially for NT 3.5,\n-which is also is available on the NT 3.5 SDK CDROM.  If you do not have\n-this linker, can you also use the linker from Visual C/C++ 1.0 or 2.0.\n-\n-Installing GNU CC for NT builds a wrapper linker, called @file{ld.exe},\n-which mimics the behaviour of Unix @file{ld} in the specification of\n-libraries (@samp{-L} and @samp{-l}).  @file{ld.exe} looks for both Unix\n-and Microsoft named libraries.  For example, if you specify\n-@samp{-lfoo}, @file{ld.exe} will look first for @file{libfoo.a}\n-and then for @file{foo.lib}.\n-\n @item i860-intel-osf1\n This is the Paragon.\n @ifset INSTALLONLY"}]}