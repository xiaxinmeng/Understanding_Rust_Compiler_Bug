{"sha": "b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM1YzA4MjI2MzI1Nzc3OWJhMmMzZTJhZThmYmVhYTE5YmZkZjM3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-12T21:13:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-12T21:13:04Z"}, "message": "[multiple changes]\n\n2005-09-12  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/stl_algo.h (search_n): Delegate to specializations.\n\t(search_n(,,,,binary_predicate)): Likewise.\n        (__search_n(forward_iterator_tag)): Original search_n, tweak to\n        remove an unnecessary comparison.\n        (__search_n(,,,,binary_predicate,forward_iterator_tag)): Likewise.\n\n2005-09-12  Jim Xochellis  <jimxoch@yahoo.gr>\n\n        * include/bits/stl_algo.h (__search_n(std::random_access_iterator_tag)):\n\tAdd specialization.\n        (__search_n(,,,,binary_predicate,std::random_access_iterator_tag)):\n        Likewise.\n\nFrom-SVN: r104192", "tree": {"sha": "17e39f1823874105167557a234b7c98f6947dfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e39f1823874105167557a234b7c98f6947dfed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35c082263257779ba2c3e2ae8fbeaa19bfdf374/comments", "author": null, "committer": null, "parents": [{"sha": "dda6e8cd3a8f81a42485f9a78cb3c8c3b0103307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda6e8cd3a8f81a42485f9a78cb3c8c3b0103307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda6e8cd3a8f81a42485f9a78cb3c8c3b0103307"}], "stats": {"total": 248, "additions": 200, "deletions": 48}, "files": [{"sha": "154e32aa0afaa4f6382a3a5da08c0c17d55a53c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c082263257779ba2c3e2ae8fbeaa19bfdf374/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c082263257779ba2c3e2ae8fbeaa19bfdf374/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "patch": "@@ -1,3 +1,18 @@\n+2005-09-12  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/stl_algo.h (search_n): Delegate to specializations.\n+\t(search_n(,,,,binary_predicate)): Likewise.\n+\t(__search_n(forward_iterator_tag)): Original search_n, tweak to\n+\tremove an unnecessary comparison.\n+\t(__search_n(,,,,binary_predicate,forward_iterator_tag)): Likewise.\n+\n+2005-09-12  Jim Xochellis  <jimxoch@yahoo.gr>\n+\n+\t* include/bits/stl_algo.h (__search_n(std::random_access_iterator_tag)):\n+\tAdd specialization.\n+\t(__search_n(,,,,binary_predicate,std::random_access_iterator_tag)):\n+\tLikewise.\n+\n 2005-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/23417"}, {"sha": "1a7fd6eeec3c08181919ce496cb4231fda840bdf", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 185, "deletions": 48, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c082263257779ba2c3e2ae8fbeaa19bfdf374/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c082263257779ba2c3e2ae8fbeaa19bfdf374/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=b35c082263257779ba2c3e2ae8fbeaa19bfdf374", "patch": "@@ -606,6 +606,92 @@ namespace std\n       return __first1;\n     }\n \n+  /**\n+   *  @if maint\n+   *  This is an uglified\n+   *  search_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&)\n+   *  overloaded for forward iterators.\n+   *  @endif\n+  */\n+  template<typename _ForwardIterator, typename _Integer, typename _Tp>\n+    _ForwardIterator\n+    __search_n(_ForwardIterator __first, _ForwardIterator __last,\n+\t       _Integer __count, const _Tp& __val,\n+\t       std::forward_iterator_tag)\n+    {\n+      __first = std::find(__first, __last, __val);\n+      while (__first != __last)\n+\t{\n+\t  typename iterator_traits<_ForwardIterator>::difference_type\n+\t    __n = __count;\n+\t  _ForwardIterator __i = __first;\n+\t  ++__i;\n+\t  while (__i != __last && __n != 1 && *__i == __val)\n+\t    {\n+\t      ++__i;\n+\t      --__n;\n+\t    }\n+\t  if (__n == 1)\n+\t    return __first;\n+\t  if (__i == __last)\n+\t    return __last;\n+\t  __first = std::find(++__i, __last, __val);\n+\t}\n+      return __last;\n+    }\n+\n+  /**\n+   *  @if maint\n+   *  This is an uglified\n+   *  search_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&)\n+   *  overloaded for random access iterators.\n+   *  @endif\n+  */\n+  template<typename _RandomAccessIter, typename _Integer, typename _Tp>\n+    _RandomAccessIter\n+    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,\n+\t       _Integer __count, const _Tp& __val, \n+\t       std::random_access_iterator_tag)\n+    {\n+      \n+      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type\n+\t_DistanceType;\n+\n+      _DistanceType __tailSize = __last - __first;\n+      const _DistanceType __pattSize = __count;\n+\n+      if (__tailSize < __pattSize)\n+        return __last;\n+\n+      const _DistanceType __skipOffset = __pattSize - 1;\n+      _RandomAccessIter __lookAhead = __first + __skipOffset;\n+      __tailSize -= __pattSize;\n+\n+      while (1) // the main loop...\n+\t{\n+\t  // __lookAhead here is always pointing to the last element of next \n+\t  // possible match.\n+\t  while (!(*__lookAhead == __val)) // the skip loop...\n+\t    {\n+\t      if (__tailSize < __pattSize)\n+\t\treturn __last;  // Failure\n+\t      __lookAhead += __pattSize;\n+\t      __tailSize -= __pattSize;\n+\t    }\n+\t  _DistanceType __remainder = __skipOffset;\n+\t  for (_RandomAccessIter __backTrack = __lookAhead - 1; \n+\t       *__backTrack == __val; --__backTrack)\n+\t    {\n+\t      if (--__remainder == 0)\n+\t\treturn (__lookAhead - __skipOffset); // Success\n+\t    }\n+\t  if (__remainder > __tailSize)\n+\t    return __last; // Failure\n+\t  __lookAhead += __remainder;\n+\t  __tailSize -= __remainder;\n+\t}\n+    }\n+\n   /**\n    *  @brief Search a sequence for a number of consecutive values.\n    *  @param  first  A forward iterator.\n@@ -632,26 +718,103 @@ namespace std\n \n       if (__count <= 0)\n \treturn __first;\n-      else\n+      if (__count == 1)\n+\treturn std::find(__first, __last, __val);\n+      return std::__search_n(__first, __last, __count, __val,\n+\t\t\t     std::__iterator_category(__first));\n+    }\n+\n+  /**\n+   *  @if maint\n+   *  This is an uglified\n+   *  search_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&,\n+   *\t       _BinaryPredicate)\n+   *  overloaded for forward iterators.\n+   *  @endif\n+  */\n+  template<typename _ForwardIterator, typename _Integer, typename _Tp,\n+           typename _BinaryPredicate>\n+    _ForwardIterator\n+    __search_n(_ForwardIterator __first, _ForwardIterator __last,\n+\t       _Integer __count, const _Tp& __val,\n+\t       _BinaryPredicate __binary_pred, std::forward_iterator_tag)\n+    {\n+      while (__first != __last && !__binary_pred(*__first, __val))\n+        ++__first;\n+\n+      while (__first != __last)\n \t{\n-\t  __first = std::find(__first, __last, __val);\n-\t  while (__first != __last)\n+\t  typename iterator_traits<_ForwardIterator>::difference_type\n+\t    __n = __count;\n+\t  _ForwardIterator __i = __first;\n+\t  ++__i;\n+\t  while (__i != __last && __n != 1 && *__i == __val)\n \t    {\n-\t      typename iterator_traits<_ForwardIterator>::difference_type\n-\t\t__n = __count;\n-\t      _ForwardIterator __i = __first;\n \t      ++__i;\n-\t      while (__i != __last && __n != 1 && *__i == __val)\n-\t\t{\n-\t\t  ++__i;\n-\t\t  --__n;\n-\t\t}\n-\t      if (__n == 1)\n-\t\treturn __first;\n-\t      else\n-\t\t__first = std::find(__i, __last, __val);\n+\t      --__n;\n \t    }\n-\t  return __last;\n+\t  if (__n == 1)\n+\t    return __first;\n+\t  if (__i == __last)\n+\t    return __last;\n+\t  __first = ++__i;\n+\t  while (__first != __last && !__binary_pred(*__first, __val))\n+\t    ++__first;\n+\t}\n+      return __last;\n+    }\n+\n+  /**\n+   *  @if maint\n+   *  This is an uglified\n+   *  search_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&,\n+   *\t       _BinaryPredicate)\n+   *  overloaded for random access iterators.\n+   *  @endif\n+  */\n+  template<typename _RandomAccessIter, typename _Integer, typename _Tp,\n+\t   typename _BinaryPredicate>\n+    _RandomAccessIter\n+    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,\n+\t       _Integer __count, const _Tp& __val,\n+\t       _BinaryPredicate __binary_pred, std::random_access_iterator_tag)\n+    {\n+      \n+      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type\n+\t_DistanceType;\n+\n+      _DistanceType __tailSize = __last - __first;\n+      const _DistanceType __pattSize = __count;\n+\n+      if (__tailSize < __pattSize)\n+        return __last;\n+\n+      const _DistanceType __skipOffset = __pattSize - 1;\n+      _RandomAccessIter __lookAhead = __first + __skipOffset;\n+      __tailSize -= __pattSize;\n+\n+      while (1) // the main loop...\n+\t{\n+\t  // __lookAhead here is always pointing to the last element of next \n+\t  // possible match.\n+\t  while (!__binary_pred(*__lookAhead, __val)) // the skip loop...\n+\t    {\n+\t      if (__tailSize < __pattSize)\n+\t\treturn __last;  // Failure\n+\t      __lookAhead += __pattSize;\n+\t      __tailSize -= __pattSize;\n+\t    }\n+\t  _DistanceType __remainder = __skipOffset;\n+\t  for (_RandomAccessIter __backTrack = __lookAhead - 1; \n+\t       __binary_pred(*__backTrack, __val); --__backTrack)\n+\t    {\n+\t      if (--__remainder == 0)\n+\t\treturn (__lookAhead - __skipOffset); // Success\n+\t    }\n+\t  if (__remainder > __tailSize)\n+\t    return __last; // Failure\n+\t  __lookAhead += __remainder;\n+\t  __tailSize -= __remainder;\n \t}\n     }\n \n@@ -685,40 +848,14 @@ namespace std\n \n       if (__count <= 0)\n \treturn __first;\n-      else\n+      if (__count == 1)\n \t{\n-\t  while (__first != __last)\n-\t    {\n-\t      if (__binary_pred(*__first, __val))\n-\t\tbreak;\n-\t      ++__first;\n-\t    }\n-\t  while (__first != __last)\n-\t    {\n-\t      typename iterator_traits<_ForwardIterator>::difference_type\n-\t\t__n = __count;\n-\t      _ForwardIterator __i = __first;\n-\t      ++__i;\n-\t      while (__i != __last && __n != 1 && __binary_pred(*__i, __val))\n-\t\t{\n-\t\t  ++__i;\n-\t\t  --__n;\n-\t\t}\n-\t      if (__n == 1)\n-\t\treturn __first;\n-\t      else\n-\t\t{\n-\t\t  while (__i != __last)\n-\t\t    {\n-\t\t      if (__binary_pred(*__i, __val))\n-\t\t\tbreak;\n-\t\t      ++__i;\n-\t\t    }\n-\t\t  __first = __i;\n-\t\t}\n-\t    }\n-\t  return __last;\n+\t  while (__first != __last && !__binary_pred(*__first, __val))\n+\t    ++__first;\n+\t  return __first;\n \t}\n+      return std::__search_n(__first, __last, __count, __val, __binary_pred,\n+\t\t\t     std::__iterator_category(__first));\n     }\n \n   /**"}]}