{"sha": "56e770bfd692d9cb6934d6b2f63b1368015aebfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlNzcwYmZkNjkyZDljYjY5MzRkNmIyZjYzYjEzNjgwMTVhZWJmYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-06T16:30:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-06T16:30:45Z"}, "message": "cp-tree.h (lang_decl_flags): Rename saved_inline to deferred.\n\n\t* cp-tree.h (lang_decl_flags): Rename saved_inline to deferred.\n\t(DECL_SAVED_INLINE): Rename to ...\n\t(DECL_DEFERRED_FN): ... this.\n\t(in_function_p): Remove declaration.\n\t(mark_inline_for_output): Rename to ...\n\t(defer_fn): ... this.\n\t* decl.c (finish_function): Adjust call to mark_inline_for_output.\n\t(in_function_p): Remove definition.\n\t* decl2.c (saved_inlines): Rename to ...\n\t(deferred_fns): ... this.\n\t(saved_inlines_used): Rename to ...\n\t(deferred_fns_used): ... this.\n\t(mark_inline_for_output): Rename to ...\n\t(defer_fn): ... this.\n\t(finish_file): Adjust accordingly.\n\t(init_decl2): Likewise.\n\t* lex.c (cons_up_default_function): Likewise.\n\t* pt.c (mark_decl_instantiated): Likewise.\n\t(instantiate_decl): Don't set DECL_DEFER_OUTPUT under any\n\tcircumstances.\n\t* rtti.c (get_tinfo_decl): Adjust call to mark_inline_for_output.\n\t* semantics.c (expand_body): Defer more functions.\n\nFrom-SVN: r32973", "tree": {"sha": "54067aefa5b18e7f59ae0b293a456fcf23aa9f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54067aefa5b18e7f59ae0b293a456fcf23aa9f82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56e770bfd692d9cb6934d6b2f63b1368015aebfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e770bfd692d9cb6934d6b2f63b1368015aebfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e770bfd692d9cb6934d6b2f63b1368015aebfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e770bfd692d9cb6934d6b2f63b1368015aebfc/comments", "author": null, "committer": null, "parents": [{"sha": "1573b93398d756b9bd523b523c5ddb3110a96e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1573b93398d756b9bd523b523c5ddb3110a96e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1573b93398d756b9bd523b523c5ddb3110a96e3a"}], "stats": {"total": 151, "additions": 71, "deletions": 80}, "files": [{"sha": "1be29a8a48298d3f985b12fd70ba2dfe075db92b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -1,3 +1,28 @@\n+2000-04-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (lang_decl_flags): Rename saved_inline to deferred.\n+\t(DECL_SAVED_INLINE): Rename to ...\n+\t(DECL_DEFERRED_FN): ... this.\n+\t(in_function_p): Remove declaration.\n+\t(mark_inline_for_output): Rename to ... \n+\t(defer_fn): ... this.\n+\t* decl.c (finish_function): Adjust call to mark_inline_for_output.\n+\t(in_function_p): Remove definition.\n+\t* decl2.c (saved_inlines): Rename to ...\n+\t(deferred_fns): ... this.\n+\t(saved_inlines_used): Rename to ...\n+\t(deferred_fns_used): ... this.\n+\t(mark_inline_for_output): Rename to ...\n+\t(defer_fn): ... this.\n+\t(finish_file): Adjust accordingly.\n+\t(init_decl2): Likewise.\n+\t* lex.c (cons_up_default_function): Likewise.\n+\t* pt.c (mark_decl_instantiated): Likewise.\n+\t(instantiate_decl): Don't set DECL_DEFER_OUTPUT under any\n+\tcircumstances.\n+\t* rtti.c (get_tinfo_decl): Adjust call to mark_inline_for_output.\n+\t* semantics.c (expand_body): Defer more functions.\n+\n 2000-04-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* rtti.c (dfs_class_hint_mark): New static function."}, {"sha": "64bc894b74db3ed65e37aa3c7a5e6053f72ef009", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -1830,7 +1830,7 @@ struct lang_decl_flags\n   unsigned constructor_for_vbase_attr : 1;\n \n   unsigned mutable_flag : 1;\n-  unsigned saved_inline : 1;\n+  unsigned deferred : 1;\n   unsigned use_template : 2;\n   unsigned nonconverting : 1;\n   unsigned declared_inline : 1;\n@@ -2104,9 +2104,9 @@ struct lang_decl\n #define DECL_SORTED_FIELDS(NODE) \\\n \t(DECL_LANG_SPECIFIC (TYPE_DECL_CHECK (NODE))->u.sorted_fields)\n \n-/* True if on the saved_inlines (see decl2.c) list.  */\n-#define DECL_SAVED_INLINE(DECL) \\\n-  (DECL_LANG_SPECIFIC(DECL)->decl_flags.saved_inline)\n+/* True if on the deferred_fns (see decl2.c) list.  */\n+#define DECL_DEFERRED_FN(DECL) \\\n+  (DECL_LANG_SPECIFIC(DECL)->decl_flags.deferred)\n \n /* For a VAR_DECL, FUNCTION_DECL, TYPE_DECL or TEMPLATE_DECL:\n    template-specific information.  */\n@@ -3837,7 +3837,6 @@ extern tree maybe_build_cleanup_and_delete\tPARAMS ((tree));\n extern tree maybe_build_cleanup\t\t\tPARAMS ((tree));\n extern void cplus_expand_expr_stmt\t\tPARAMS ((tree));\n extern void finish_stmt\t\t\t\tPARAMS ((void));\n-extern int in_function_p\t\t\tPARAMS ((void));\n extern void replace_defarg\t\t\tPARAMS ((tree, tree));\n extern void print_other_binding_stack\t\tPARAMS ((struct binding_level *));\n extern void revert_static_member_fn             PARAMS ((tree));\n@@ -3898,7 +3897,7 @@ extern void cplus_decl_attributes\t\tPARAMS ((tree, tree, tree));\n extern tree constructor_name_full\t\tPARAMS ((tree));\n extern tree constructor_name\t\t\tPARAMS ((tree));\n extern void setup_vtbl_ptr\t\t\tPARAMS ((void));\n-extern void mark_inline_for_output\t\tPARAMS ((tree));\n+extern void defer_fn             \t\tPARAMS ((tree));\n extern tree get_temp_name\t\t\tPARAMS ((tree, int));\n extern void finish_anon_union\t\t\tPARAMS ((tree));\n extern tree finish_table\t\t\tPARAMS ((tree, tree, tree, int));"}, {"sha": "b2f753e0fe7ad4cd384147d2fc6f938af9568d99", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -14153,7 +14153,7 @@ finish_function (lineno, flags)\n \t  if (! DECL_EXTERNAL (fndecl))\n \t    DECL_NOT_REALLY_EXTERN (fndecl) = 1;\n \t  DECL_EXTERNAL (fndecl) = 1;\n-\t  mark_inline_for_output (fndecl);\n+\t  defer_fn (fndecl);\n \t}\n \n #if 0\n@@ -14670,13 +14670,6 @@ mark_cp_function_context (f)\n   mark_lang_function (f->language);\n }\n \n-int\n-in_function_p ()\n-{\n-  return function_depth != 0;\n-}\n-\n-\n void\n lang_mark_false_label_stack (l)\n      struct label_node *l;"}, {"sha": "49bf040280da7f2c8e803c193badee5fecc934b8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -108,9 +108,9 @@ static varray_type pending_statics;\n \n /* A list of functions which were declared inline, but which we\n    may need to emit outline anyway.  */\n-static varray_type saved_inlines;\n-#define saved_inlines_used \\\n-  (saved_inlines ? saved_inlines->elements_used : 0)\n+static varray_type deferred_fns;\n+#define deferred_fns_used \\\n+  (deferred_fns ? deferred_fns->elements_used : 0)\n \n /* Same, but not reset.  Local temp variables and global temp variables\n    can have the same name.  */\n@@ -1976,20 +1976,20 @@ constructor_name (thing)\n   return t;\n }\n \f\n-/* Record the existence of an addressable inline function.  */\n+/* Defer the compilation of the FN until the end of compilation.  */\n \n void\n-mark_inline_for_output (decl)\n-     tree decl;\n+defer_fn (fn)\n+     tree fn;\n {\n-  decl = DECL_MAIN_VARIANT (decl);\n-  if (DECL_SAVED_INLINE (decl))\n+  fn = DECL_MAIN_VARIANT (fn);\n+  if (DECL_DEFERRED_FN (fn))\n     return;\n-  DECL_SAVED_INLINE (decl) = 1;\n-  if (!saved_inlines)\n-    VARRAY_TREE_INIT (saved_inlines, 32, \"saved_inlines\");\n+  DECL_DEFERRED_FN (fn) = 1;\n+  if (!deferred_fns)\n+    VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n \n-  VARRAY_PUSH_TREE (saved_inlines, decl);\n+  VARRAY_PUSH_TREE (deferred_fns, fn);\n }\n \n /* Hand off a unique name which can be used for variable we don't really\n@@ -3537,9 +3537,9 @@ finish_file ()\n       \n       /* Go through the various inline functions, and see if any need\n \t synthesizing.  */\n-      for (i = 0; i < saved_inlines_used; ++i)\n+      for (i = 0; i < deferred_fns_used; ++i)\n \t{\n-\t  tree decl = VARRAY_TREE (saved_inlines, i);\n+\t  tree decl = VARRAY_TREE (deferred_fns, i);\n \t  import_export_decl (decl);\n \t  if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl)\n \t      && TREE_USED (decl)\n@@ -3569,9 +3569,9 @@ finish_file ()\n \t from being put out unncessarily.  But, we must stop lying\n \t when the functions are referenced, or if they are not comdat\n \t since they need to be put out now.  */\n-      for (i = 0; i < saved_inlines_used; ++i)\n+      for (i = 0; i < deferred_fns_used; ++i)\n \t{\n-\t  tree decl = VARRAY_TREE (saved_inlines, i);\n+\t  tree decl = VARRAY_TREE (deferred_fns, i);\n       \n \t  if (DECL_NOT_REALLY_EXTERN (decl)\n \t      && DECL_INITIAL (decl)\n@@ -3609,9 +3609,9 @@ finish_file ()\n \t    }\n \t}\n \n-      if (saved_inlines_used\n-\t  && wrapup_global_declarations (&VARRAY_TREE (saved_inlines, 0),\n-\t\t\t\t\t saved_inlines_used))\n+      if (deferred_fns_used\n+\t  && wrapup_global_declarations (&VARRAY_TREE (deferred_fns, 0),\n+\t\t\t\t\t deferred_fns_used))\n \treconsider = 1;\n       if (walk_namespaces (wrapup_globals_for_namespace, /*data=*/0))\n \treconsider = 1;\n@@ -5302,7 +5302,7 @@ void\n init_decl2 ()\n {\n   ggc_add_tree_root (&decl_namespace_list, 1);\n-  ggc_add_tree_varray_root (&saved_inlines, 1);\n+  ggc_add_tree_varray_root (&deferred_fns, 1);\n   ggc_add_tree_varray_root (&pending_statics, 1);\n   ggc_add_tree_varray_root (&ssdf_decls, 1);\n   ggc_add_tree_root (&ssdf_decl, 1);"}, {"sha": "41080b431634dfe6c2b4ccb506fef0d0d2c03e4e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -2085,7 +2085,7 @@ cons_up_default_function (type, full_name, kind)\n #endif\n     DECL_NOT_REALLY_EXTERN (fn) = 1;\n \n-  mark_inline_for_output (fn);\n+  defer_fn (fn);\n \n #ifdef DEBUG_DEFAULT_FUNCTIONS\n   { char *fn_type = NULL;"}, {"sha": "1c5238b450b4dfa830e2b0d6083ba18aef9d3d19", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -8688,7 +8688,7 @@ mark_decl_instantiated (result, extern_p)\n \tmaybe_make_one_only (result);\n     }\n   else if (TREE_CODE (result) == FUNCTION_DECL)\n-    mark_inline_for_output (result);\n+    defer_fn (result);\n }\n \n /* Given two function templates PAT1 and PAT2, and explicit template\n@@ -9391,11 +9391,9 @@ instantiate_decl (d, defer_ok)\n   tree code_pattern;\n   tree spec;\n   tree gen_tmpl;\n-  int nested = in_function_p ();\n   int pattern_defined;\n   int line = lineno;\n   char *file = input_filename;\n-  tree old_fn = current_function_decl;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -9547,25 +9545,6 @@ instantiate_decl (d, defer_ok)\n       goto out;\n     }\n \n-  /* If this instantiation is COMDAT, we don't know whether or not we\n-     will really need to write it out.  If we can't be sure, mark it\n-     DECL_DEFER_OUTPUT.  NOTE: This increases memory consumption,\n-     since we keep some instantiations in memory rather than write\n-     them out immediately and forget them.  A better approach would be\n-     to wait until we know we need them to do the instantiation, but\n-     that would break templates with static locals, because we\n-     generate the functions to destroy statics before we determine\n-     which functions are needed.  A better solution would be to\n-     generate the ctor and dtor functions as we go.  */\n-\n-  if (TREE_CODE (d) == FUNCTION_DECL\n-      && DECL_COMDAT (d)\n-      && ! DECL_NEEDED_P (d)\n-      /* If the function that caused us to be instantiated is needed, we\n-\t will be needed, too.  */\n-      && (! nested || (old_fn && ! DECL_NEEDED_P (old_fn))))\n-    DECL_DEFER_OUTPUT (d) = 1;\n-\n   /* We're now committed to instantiating this template.  Mark it as\n      instantiated so that recursive calls to instantiate_decl do not\n      try to instantiate it again.  */"}, {"sha": "3a0a484e8ad183c6d24655e481763f8c97d1bdeb", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -413,7 +413,7 @@ get_tinfo_decl (type)\n       DECL_NOT_REALLY_EXTERN (d) = 1;\n       SET_DECL_TINFO_FN_P (d);\n       TREE_TYPE (name) = type;\n-      mark_inline_for_output (d);\n+      defer_fn (d);\n     }\n   else\n     {"}, {"sha": "b2aef8ad65d5139e9a86eef57d18f005aea4c95d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -2727,17 +2727,12 @@ expand_body (fn)\n   /* If possible, avoid generating RTL for this function.  Instead,\n      just record it as an inline function, and wait until end-of-file\n      to decide whether to write it out or not.  */\n-  if (/* We have to generate RTL if we can't inline trees.  */\n-      flag_inline_trees\n-      /* Or if it's not an inline function.  */\n-      && DECL_INLINE (fn)\n+  if (/* We have to generate RTL if it's not an inline function.  */\n+      (DECL_INLINE (fn) || DECL_COMDAT (fn))\n       /* Or if we have to keep all inline functions anyhow.  */\n       && !flag_keep_inline_functions\n       /* Or if we actually have a reference to the function.  */\n       && !DECL_NEEDED_P (fn)\n-      /* Or if we're at the end-of-file, and this function is not\n-\t DECL_COMDAT.  */\n-      && (!at_eof || DECL_COMDAT (fn))\n       /* Or if this is a nested function.  */\n       && !decl_function_context (fn))\n     {\n@@ -2753,7 +2748,7 @@ expand_body (fn)\n \t}\n       /* Remember this function.  In finish_file we'll decide if\n \t we actually need to write this function out.  */\n-      mark_inline_for_output (fn);\n+      defer_fn (fn);\n       /* Let the back-end know that this funtion exists.  */\n       note_deferral_of_defined_inline_function (fn);\n       return;"}, {"sha": "a6249546d341ad9723ca9a539acde039e7c96687", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900205_03.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -25,10 +25,10 @@ struct00 global_function_1 () {\n struct struct0 {\n \n   int struct0_member_function_0 () {\n-  }\t\t\t\t\t// ERROR - \n+  }\t\t\t\t\t// ERROR - XFAIL\n \n   struct0 struct0_member_function_1 () {\n-  }\t\t\t\t\t// ERROR - \n+  }\t\t\t\t\t// ERROR - XFAIL\n };\n \n struct struct1 {"}, {"sha": "1ce6386446d39897c261900324c846faf4658f18", "filename": "gcc/testsuite/g++.old-deja/g++.jason/offset2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foffset2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foffset2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foffset2.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -3,7 +3,7 @@\n int status = 1;\n \n struct foo {\n-  foo& operator= (const foo&) { status = 0; }\n+  foo& operator= (const foo&) { status = 0; return *this; }\n };\n \n struct xx {"}, {"sha": "c0718506582135fbe2ce8e2fafcd26e0cc0c2097", "filename": "gcc/testsuite/g++.old-deja/g++.jason/opeq.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -8,7 +8,7 @@ class Y\n {\n public:\n     Y(char*) {}\n-    Y& operator = (const Y&) {}\n+    Y& operator = (const Y&) { return *this; }\n };\n     \n "}, {"sha": "e4c176f0912963266fec31d14c07b8a794375df4", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators16.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -11,7 +11,7 @@ int pass = 0;\n struct A {\n         A(void) {}\n         A(const A& a) { ; }\n-        A& operator = (const A& a) { pass = 1; }\n+        A& operator = (const A& a) { pass = 1; return *this; }\n };\n \n struct B {"}, {"sha": "9c1a03b553167883b05dc8d83a7eb3f7037d7adf", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -8,5 +8,5 @@\n // Message-ID: <9304291053.AA00090@mencon>\n \n         struct A {\n-                A& operator = (const A& a) {}// ERROR - \n+                A& operator = (const A& a) {}// ERROR - XFAIL\n         };"}, {"sha": "ed43df8e997066ef9a09226d6329158ff7dd6c92", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net26.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet26.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -4,8 +4,8 @@ extern \"C\" int printf(const char *, ...);\n \n class A {\n public:\n-\tint foo() { printf(\"ok nv\\n\"); }\n-\tvirtual int vfoo() { printf(\"ok v\\n\"); }\n+\tint foo() { printf(\"ok nv\\n\"); return 0; }\n+\tvirtual int vfoo() { printf(\"ok v\\n\"); return 0; }\n };\n \n struct S {"}, {"sha": "3795b89cca692b0f8f9e7010458797511483dac2", "filename": "gcc/testsuite/g++.old-deja/g++.mike/virt3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt3.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -3,7 +3,7 @@\n class B {\n public:\n   int Bi;\n-  virtual int g() { };\n+  virtual int g() { return  0; };\n };\n \n class D : private B {"}, {"sha": "26e26dd4bad1aa45469271001a0e0df1a9026bf5", "filename": "gcc/testsuite/g++.old-deja/g++.mike/virt6.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e770bfd692d9cb6934d6b2f63b1368015aebfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fvirt6.C?ref=56e770bfd692d9cb6934d6b2f63b1368015aebfc", "patch": "@@ -3,7 +3,7 @@\n \n class C_A {\n public:\n-  virtual int foo(void *) { }\n+  virtual int foo(void *) { return  0; }\n } a;\n  \n class C_B : public C_A {\n@@ -17,22 +17,22 @@ class C_D : public C_A {\n  \n class C_E : public C_C, public C_B {\n public:\n-  virtual int foo(void *) { }\n+  virtual int foo(void *) { return 0; }\n } e;\n  \n class C_F : public C_D, public C_B {\n public:\n-  virtual int foo(void *) { }\n+  virtual int foo(void *) { return 0; }\n } f;\n  \n class C_G : public C_A {\n public:\n-  virtual int foo(void *) { }\n+  virtual int foo(void *) { return 0; }\n } g;\n  \n class C_H : public C_G, public C_E, public C_F {\n public:\n-  virtual int foo(void *) { }\n+  virtual int foo(void *) { return 0; }\n } h;\n  \n int main() {"}]}