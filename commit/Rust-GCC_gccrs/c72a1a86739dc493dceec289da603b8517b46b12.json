{"sha": "c72a1a86739dc493dceec289da603b8517b46b12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyYTFhODY3MzlkYzQ5M2RjZWVjMjg5ZGE2MDNiODUxN2I0NmIxMg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-07-21T10:33:31Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-07-21T10:33:31Z"}, "message": "call.c: Fix comment typo(s).\n\n\t* call.c: Fix comment typo(s).\n\t* cxx-pretty-print.h: Likewise.\n\t* name-lookup.c: Likewise.\n\t* parser.c: Likewise.\n\nFrom-SVN: r102231", "tree": {"sha": "eb1b0313b529bab237a12c44df5bd26fcf6405b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb1b0313b529bab237a12c44df5bd26fcf6405b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c72a1a86739dc493dceec289da603b8517b46b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72a1a86739dc493dceec289da603b8517b46b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72a1a86739dc493dceec289da603b8517b46b12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72a1a86739dc493dceec289da603b8517b46b12/comments", "author": null, "committer": null, "parents": [{"sha": "423c1d1c5480f39614f6e39fd938e2ddeab7a5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423c1d1c5480f39614f6e39fd938e2ddeab7a5ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423c1d1c5480f39614f6e39fd938e2ddeab7a5ba"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "efac769b8faa3dd1361919c797214b757b16cc00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c72a1a86739dc493dceec289da603b8517b46b12", "patch": "@@ -1,3 +1,10 @@\n+2005-07-21  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* call.c: Fix comment typo(s).\n+\t* cxx-pretty-print.h: Likewise.\n+\t* name-lookup.c: Likewise.\n+\t* parser.c: Likewise.\n+\n 2005-07-20  Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/2922"}, {"sha": "4e5ccff8fa6ab795e8c2224d60d24b4262e72763", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c72a1a86739dc493dceec289da603b8517b46b12", "patch": "@@ -72,7 +72,7 @@ typedef enum conversion_rank {\n \n /* An implicit conversion sequence, in the sense of [over.best.ics].\n    The first conversion to be performed is at the end of the chain.\n-   That conversion is always an cr_identity conversion.  */\n+   That conversion is always a cr_identity conversion.  */\n \n typedef struct conversion conversion;\n struct conversion {"}, {"sha": "55e9b9c7d030a6489faaee6d7ebcf89b9dc5c659", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=c72a1a86739dc493dceec289da603b8517b46b12", "patch": "@@ -29,7 +29,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n typedef enum\n {\n-  /* Ask for an qualified-id.  */\n+  /* Ask for a qualified-id.  */\n   pp_cxx_flag_default_argument = 1 << pp_c_flag_last_bit\n \n } cxx_pretty_printer_flags;"}, {"sha": "4f64fa03684142bac977f9a6e0c1cef2de6a633d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c72a1a86739dc493dceec289da603b8517b46b12", "patch": "@@ -399,7 +399,7 @@ pop_binding (tree id, tree decl)\n     }\n }\n \n-/* BINDING records an existing declaration for a namein the current scope.\n+/* BINDING records an existing declaration for a name in the current scope.\n    But, DECL is another declaration for that same identifier in the\n    same scope.  This is the `struct stat' hack whereby a non-typedef\n    class name or enum-name can be bound at the same level as some other\n@@ -4592,7 +4592,7 @@ maybe_process_template_type_declaration (tree type, int is_friend,\n \t\t{\n \t\t  maybe_add_class_template_decl_list (current_class_type,\n \t\t\t\t\t\t      type, /*friend_p=*/0);\n-\t\t  /* Put this UDT in the table of UDTs for the class.  */\n+\t\t  /* Put this UTD in the table of UTDs for the class.  */\n \t\t  if (CLASSTYPE_NESTED_UTDS (current_class_type) == NULL)\n \t\t    CLASSTYPE_NESTED_UTDS (current_class_type) =\n \t\t      binding_table_new (SCOPE_DEFAULT_HT_SIZE);"}, {"sha": "324d5f19c778025fa2919a766773523bf6c39cb4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72a1a86739dc493dceec289da603b8517b46b12/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c72a1a86739dc493dceec289da603b8517b46b12", "patch": "@@ -2042,7 +2042,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree scope, tree id)\n   decl = cp_parser_lookup_name_simple (parser, id);\n   parser->scope = old_scope;\n   /* If the lookup found a template-name, it means that the user forgot\n-  to specify an argument list. Emit an useful error message.  */\n+  to specify an argument list. Emit a useful error message.  */\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     error (\"invalid use of template-name %qE without an argument list\",\n       decl);\n@@ -12239,7 +12239,7 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser)\n      = initializer-clause\n      ( expression-list )\n \n-   Returns a expression representing the initializer.  If no\n+   Returns an expression representing the initializer.  If no\n    initializer is present, NULL_TREE is returned.\n \n    *IS_PARENTHESIZED_INIT is set to TRUE if the `( expression-list )'\n@@ -14683,7 +14683,7 @@ cp_parser_maybe_treat_template_as_class (tree decl, bool tag_name_p)\n \n        template <typename T> struct A::B {};\n \n-     Similarly, in a elaborated-type-specifier:\n+     Similarly, in an elaborated-type-specifier:\n \n        namespace N { struct X{}; }\n "}]}