{"sha": "7e4756e8438892aa362d846c83b91329a904e904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0NzU2ZTg0Mzg4OTJhYTM2MmQ4NDZjODNiOTEzMjlhOTA0ZTkwNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-11-05T16:47:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-11-05T16:47:40Z"}, "message": "re PR c++/67846 (ICE on code with lambda expression on x86_64-linux-gnu in check_return_expr, at cp/typeck.c:8609)\n\n/cp\n2015-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67846\n\t* parser.c (cp_parser_lambda_body): Check lambda_return_type\n\treturn value.\n\t* typeck2.c (cxx_incomplete_type_diagnostic): Print member or\n\tmember function used invalidly.\n\n/testsuite\n2015-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67846\n\t* g++.dg/cpp0x/lambda/lambda-ice15.C: New.\n\nFrom-SVN: r229819", "tree": {"sha": "f650af3ebe02259fe837100de2ea8b3a787ea36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f650af3ebe02259fe837100de2ea8b3a787ea36e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e4756e8438892aa362d846c83b91329a904e904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4756e8438892aa362d846c83b91329a904e904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4756e8438892aa362d846c83b91329a904e904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4756e8438892aa362d846c83b91329a904e904/comments", "author": null, "committer": null, "parents": [{"sha": "451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "57de3e6b639608ef8dbd328474442167a2cdb276", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e4756e8438892aa362d846c83b91329a904e904", "patch": "@@ -1,3 +1,11 @@\n+2015-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67846\n+\t* parser.c (cp_parser_lambda_body): Check lambda_return_type\n+\treturn value.\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Print member or\n+\tmember function used invalidly.\n+\n 2015-11-05  Jakub Jelinek  <jakub@redhat.com>\n \t    Ilya Verbin  <ilya.verbin@intel.com>\n \n@@ -27,8 +35,8 @@\n \tcp_parser_require_pragma_eol instead of cp_parser_skip_to_pragma_eol.\n \t(cp_parser_omp_end_declare_target): Call cp_parser_require_pragma_eol\n \tinstead of cp_parser_skip_to_pragma_eol.\n-\t* decl2.c (cplus_decl_attributes): Don't diagnose block scope vars inside\n-\tdeclare target.\n+\t* decl2.c (cplus_decl_attributes): Don't diagnose block scope vars\n+\tinside declare target.\n \t* pt.c (tsubst_omp_clauses): If OMP_CLAUSE_LINEAR_VARIABLE_STRIDE,\n \tuse tsubst_omp_clause_decl instead of tsubst_expr on\n \tOMP_CLAUSE_LINEAR_STEP.  Handle non-static data members in shared"}, {"sha": "d439c064fe3d697cb32cd01ee3edace4d9bb6ad7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7e4756e8438892aa362d846c83b91329a904e904", "patch": "@@ -9887,7 +9887,12 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n \tif (cp_parser_parse_definitely (parser))\n \t  {\n \t    if (!processing_template_decl)\n-\t      apply_deduced_return_type (fco, lambda_return_type (expr));\n+\t      {\n+\t\ttree type = lambda_return_type (expr);\n+\t\tapply_deduced_return_type (fco, type);\n+\t\tif (type == error_mark_node)\n+\t\t  expr = error_mark_node;\n+\t      }\n \n \t    /* Will get error here if type not deduced yet.  */\n \t    finish_return_stmt (expr);"}, {"sha": "e73ea139a039f9f0f6967a08be8e7fb47f9b525c", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7e4756e8438892aa362d846c83b91329a904e904", "patch": "@@ -516,12 +516,12 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \tif (DECL_FUNCTION_MEMBER_P (member)\n \t    && ! flag_ms_extensions)\n \t  emit_diagnostic (diag_kind, input_location, 0,\n-\t\t\t   \"invalid use of member function \"\n-\t\t\t   \"(did you forget the %<()%> ?)\");\n+\t\t\t   \"invalid use of member function %qD \"\n+\t\t\t   \"(did you forget the %<()%> ?)\", member);\n \telse\n \t  emit_diagnostic (diag_kind, input_location, 0,\n-\t\t\t   \"invalid use of member \"\n-\t\t\t   \"(did you forget the %<&%> ?)\");\n+\t\t\t   \"invalid use of member %qD \"\n+\t\t\t   \"(did you forget the %<&%> ?)\", member);\n       }\n       break;\n "}, {"sha": "35bdfb0a5bbf240869ea7ae126f23a33cf55f620", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e4756e8438892aa362d846c83b91329a904e904", "patch": "@@ -1,3 +1,8 @@\n+2015-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67846\n+\t* g++.dg/cpp0x/lambda/lambda-ice15.C: New.\n+\n 2015-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/clauses-2.c (foo): Adjust for diagnostics"}, {"sha": "7c4c18db8733813117e0feb10485026c6cc71150", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice15.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4756e8438892aa362d846c83b91329a904e904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C?ref=7e4756e8438892aa362d846c83b91329a904e904", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/67846\n+// { dg-do compile { target c++11 } }\n+\n+class A\n+{\n+  void foo ()\n+  {\n+    [=] { return foo; };  // { dg-error \"invalid use of member function\" }\n+  }\n+};"}]}