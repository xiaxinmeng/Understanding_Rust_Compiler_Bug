{"sha": "69b4bf984720645e499d2e60508e00618b53c6fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliNGJmOTg0NzIwNjQ1ZTQ5OWQyZTYwNTA4ZTAwNjE4YjUzYzZmYQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-01-20T01:40:09Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-01-20T01:40:09Z"}, "message": "CONSTRUCTOR:  Add comments.\n\nFrom-SVN: r11075", "tree": {"sha": "4aab69d593c44a83d23276fa7fd6e6542447a76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aab69d593c44a83d23276fa7fd6e6542447a76b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b4bf984720645e499d2e60508e00618b53c6fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b4bf984720645e499d2e60508e00618b53c6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b4bf984720645e499d2e60508e00618b53c6fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b4bf984720645e499d2e60508e00618b53c6fa/comments", "author": null, "committer": null, "parents": [{"sha": "b650314b846a5f5cf980eeab90fb9d4b0146eaa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b650314b846a5f5cf980eeab90fb9d4b0146eaa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b650314b846a5f5cf980eeab90fb9d4b0146eaa3"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "9de2ca01d99c493f9e3a84bbadfb0b1431bfbd1d", "filename": "gcc/tree.def", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b4bf984720645e499d2e60508e00618b53c6fa/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b4bf984720645e499d2e60508e00618b53c6fa/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=69b4bf984720645e499d2e60508e00618b53c6fa", "patch": "@@ -365,10 +365,26 @@ DEFTREECODE (ARRAY_REF, \"array_ref\", \"r\", 2)\n \n /* Constructor: return an aggregate value made from specified components.\n    In C, this is used only for structure and array initializers.\n+   Also used for SET_TYPE in Chill (and potentially Pascal).\n    The first \"operand\" is really a pointer to the RTL,\n    for constant constructors only.\n    The second operand is a list of component values\n-   made out of a chain of TREE_LIST nodes.  */\n+   made out of a chain of TREE_LIST nodes.\n+\n+   For ARRAY_TYPE:\n+   The TREE_PURPOSE of each node is the corresponding index.\n+   If the TREE_PURPOSE is a RANGE_EXPR, it is a short-hand for many nodes,\n+   one for each index in the range.  (If the corresponding TREE_VALUE\n+   has side-effects, they are evaluated once for each element.  Wrap the\n+   value in a SAVE_EXPR if you want to evaluate side effects only once.)\n+\n+   For RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE:\n+   The TREE_PURPOSE of each node is a FIELD_DECL.\n+\n+   For SET_TYPE:\n+   The TREE_VALUE specifies a value (index) in the set that is true.\n+   If TREE_PURPOSE is non-NULL, it specifies the lower limit of a\n+   range of true values.  Elements not listed are false (not in the set).  */\n DEFTREECODE (CONSTRUCTOR, \"constructor\", \"e\", 2)\n \n /* The expression types are mostly straightforward, with the fourth argument"}]}