{"sha": "7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkZDRjMTg4NWY0ZWNjMzFiODBmMTU3ZjdhYTk2Y2NkNDBkMTA3NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-02T16:28:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-02T16:28:43Z"}, "message": "re PR go/86331 (the gccgo's \"go\" tool looks like failing to invoke any sub go command)\n\n\tPR go/86331\n    os: check return value as well as error from waitid\n    \n    https://gcc.gnu.org/PR86331 indicates that if a signal handler runs it\n    is possible for syscall.Syscall6 to return a non-zero errno value even\n    if no error occurs. That is a problem in general, but this fix will\n    let us work around the general problem for the specific case of\n    calling waitid.\n    \n    Reviewed-on: https://go-review.googlesource.com/121595\n\nFrom-SVN: r262313", "tree": {"sha": "a4a2df0f6300e9b015628e22a0fe093e880ef8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4a2df0f6300e9b015628e22a0fe093e880ef8d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075/comments", "author": null, "committer": null, "parents": [{"sha": "a08acce83a052a8b800eddaaae36e51e8de57643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08acce83a052a8b800eddaaae36e51e8de57643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08acce83a052a8b800eddaaae36e51e8de57643"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "e65c0bc574b172668969a8c5835b231c5f4083b9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "patch": "@@ -1,4 +1,4 @@\n-e1fcce0aec27b1f50ac0e736f39f4c806c2a5baa\n+94738979a3422e845acf358a766aabf8b9275d43\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a6284aad98a5e7d8fd977913888c2838fa088afb", "filename": "libgo/go/os/wait_waitid.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075/libgo%2Fgo%2Fos%2Fwait_waitid.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd4c1885f4ecc31b80f157f7aa96ccd40d1075/libgo%2Fgo%2Fos%2Fwait_waitid.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fwait_waitid.go?ref=7edd4c1885f4ecc31b80f157f7aa96ccd40d1075", "patch": "@@ -28,9 +28,12 @@ func (p *Process) blockUntilWaitable() (bool, error) {\n \t// We don't care about the values it returns.\n \tvar siginfo [16]uint64\n \tpsig := &siginfo[0]\n-\t_, _, e := syscall.Syscall6(syscall.SYS_WAITID, _P_PID, uintptr(p.Pid), uintptr(unsafe.Pointer(psig)), syscall.WEXITED|syscall.WNOWAIT, 0, 0)\n+\tr, _, e := syscall.Syscall6(syscall.SYS_WAITID, _P_PID, uintptr(p.Pid), uintptr(unsafe.Pointer(psig)), syscall.WEXITED|syscall.WNOWAIT, 0, 0)\n \truntime.KeepAlive(p)\n-\tif e != 0 {\n+\t// Check r as well as e because syscall.Syscall6 currently\n+\t// just returns errno, and the SIGCHLD signal handler may\n+\t// change errno. See https://gcc.gnu.org/PR86331.\n+\tif r != 0 && e != 0 {\n \t\t// waitid has been available since Linux 2.6.9, but\n \t\t// reportedly is not available in Ubuntu on Windows.\n \t\t// See issue 16610."}]}