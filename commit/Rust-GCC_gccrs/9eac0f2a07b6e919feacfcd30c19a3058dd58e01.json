{"sha": "9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhYzBmMmEwN2I2ZTkxOWZlYWNmY2QzMGMxOWEzMDU4ZGQ1OGUwMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-03T21:56:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-03T21:56:58Z"}, "message": "explow.c (emit_stack_save): Remove 'after' parameter.\n\n        * explow.c (emit_stack_save): Remove 'after' parameter.\n        (emit_stack_restore): Likewise.\n        * expr.h: Update to match.\n        * builtins.c, calls.c, stmt.c: Likewise.\n        * config/alpha/alpha.md, config/avr/avr.md: Likewise.\n        * config/mips/mips.md, config/pa/pa.md, config/vax/vax.md: Likewise.\n        * function.c (expand_function_end): Insert the emit_stack_save\n        sequence before parm_birth_insn instead of after.\n\nFrom-SVN: r170663", "tree": {"sha": "1bc97a08baf05002d630ce3689e67be7e0a590fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc97a08baf05002d630ce3689e67be7e0a590fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/comments", "author": null, "committer": null, "parents": [{"sha": "dfee1406b912a5d6fa1d199414121e8c8c8e265d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfee1406b912a5d6fa1d199414121e8c8c8e265d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfee1406b912a5d6fa1d199414121e8c8c8e265d"}], "stats": {"total": 122, "additions": 51, "deletions": 71}, "files": [{"sha": "3086fe01e3988f021b902da2eface71de997e916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -1,3 +1,14 @@\n+2011-03-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* explow.c (emit_stack_save): Remove 'after' parameter.\n+\t(emit_stack_restore): Likewise.\n+\t* expr.h: Update to match.\n+\t* builtins.c, calls.c, stmt.c: Likewise.\n+\t* config/alpha/alpha.md, config/avr/avr.md: Likewise.\n+\t* config/mips/mips.md, config/pa/pa.md, config/vax/vax.md: Likewise.\n+\t* function.c (expand_function_end): Insert the emit_stack_save\n+\tsequence before parm_birth_insn instead of after.\n+\n 2011-03-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (*avx_pmaddubsw128): Fix mode of VEC_SELECT RTX."}, {"sha": "3361264c4c24c0fc4ff5b4b6c628baa6cb426050", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -784,7 +784,7 @@ expand_builtin_setjmp_setup (rtx buf_addr, rtx receiver_label)\n \t\t\t    plus_constant (buf_addr,\n \t\t\t\t\t   2 * GET_MODE_SIZE (Pmode)));\n   set_mem_alias_set (stack_save, setjmp_alias_set);\n-  emit_stack_save (SAVE_NONLOCAL, &stack_save, NULL_RTX);\n+  emit_stack_save (SAVE_NONLOCAL, &stack_save);\n \n   /* If there is further processing to do, do it.  */\n #ifdef HAVE_builtin_setjmp_setup\n@@ -932,7 +932,7 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \t  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n \t  emit_move_insn (hard_frame_pointer_rtx, fp);\n-\t  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+\t  emit_stack_restore (SAVE_NONLOCAL, stack);\n \n \t  emit_use (hard_frame_pointer_rtx);\n \t  emit_use (stack_pointer_rtx);\n@@ -1005,7 +1005,7 @@ expand_builtin_nonlocal_goto (tree exp)\n \t The non-local goto handler will then adjust it to contain the\n \t proper value and reload the argument pointer, if needed.  */\n       emit_move_insn (hard_frame_pointer_rtx, r_fp);\n-      emit_stack_restore (SAVE_NONLOCAL, r_sp, NULL_RTX);\n+      emit_stack_restore (SAVE_NONLOCAL, r_sp);\n \n       /* USE of hard_frame_pointer_rtx added for consistency;\n \t not clear if really needed.  */\n@@ -1075,7 +1075,7 @@ expand_builtin_update_setjmp_buf (rtx buf_addr)\n     emit_insn (gen_setjmp ());\n #endif\n \n-  emit_stack_save (SAVE_NONLOCAL, &stack_save, NULL_RTX);\n+  emit_stack_save (SAVE_NONLOCAL, &stack_save);\n }\n \n /* Expand a call to __builtin_prefetch.  For a target that does not support\n@@ -1558,10 +1558,10 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   /* Save the stack with nonlocal if available.  */\n #ifdef HAVE_save_stack_nonlocal\n   if (HAVE_save_stack_nonlocal)\n-    emit_stack_save (SAVE_NONLOCAL, &old_stack_level, NULL_RTX);\n+    emit_stack_save (SAVE_NONLOCAL, &old_stack_level);\n   else\n #endif\n-    emit_stack_save (SAVE_BLOCK, &old_stack_level, NULL_RTX);\n+    emit_stack_save (SAVE_BLOCK, &old_stack_level);\n \n   /* Allocate a block of memory onto the stack and copy the memory\n      arguments to the outgoing arguments address.  We can pass TRUE\n@@ -1677,10 +1677,10 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   /* Restore the stack.  */\n #ifdef HAVE_save_stack_nonlocal\n   if (HAVE_save_stack_nonlocal)\n-    emit_stack_restore (SAVE_NONLOCAL, old_stack_level, NULL_RTX);\n+    emit_stack_restore (SAVE_NONLOCAL, old_stack_level);\n   else\n #endif\n-    emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);\n+    emit_stack_restore (SAVE_BLOCK, old_stack_level);\n \n   OK_DEFER_POP;\n "}, {"sha": "f539f66580074a76a1716736c194f7d2c794b638", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -1092,7 +1092,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \n \t\t  if (*old_stack_level == 0)\n \t\t    {\n-\t\t      emit_stack_save (SAVE_BLOCK, old_stack_level, NULL_RTX);\n+\t\t      emit_stack_save (SAVE_BLOCK, old_stack_level);\n \t\t      *old_pending_adj = pending_stack_adjust;\n \t\t      pending_stack_adjust = 0;\n \t\t    }\n@@ -2488,7 +2488,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t{\n \t  if (old_stack_level == 0)\n \t    {\n-\t      emit_stack_save (SAVE_BLOCK, &old_stack_level, NULL_RTX);\n+\t      emit_stack_save (SAVE_BLOCK, &old_stack_level);\n \t      old_stack_pointer_delta = stack_pointer_delta;\n \t      old_pending_adj = pending_stack_adjust;\n \t      pending_stack_adjust = 0;\n@@ -2643,8 +2643,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t\t      : reg_parm_stack_space));\n \t      if (old_stack_level == 0)\n \t\t{\n-\t\t  emit_stack_save (SAVE_BLOCK, &old_stack_level,\n-\t\t\t\t   NULL_RTX);\n+\t\t  emit_stack_save (SAVE_BLOCK, &old_stack_level);\n \t\t  old_stack_pointer_delta = stack_pointer_delta;\n \t\t  old_pending_adj = pending_stack_adjust;\n \t\t  pending_stack_adjust = 0;\n@@ -3101,7 +3100,7 @@ expand_call (tree exp, rtx target, int ignore)\n \n       if (old_stack_level)\n \t{\n-\t  emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);\n+\t  emit_stack_restore (SAVE_BLOCK, old_stack_level);\n \t  stack_pointer_delta = old_stack_pointer_delta;\n \t  pending_stack_adjust = old_pending_adj;\n \t  old_stack_allocated = stack_pointer_delta - pending_stack_adjust;"}, {"sha": "d6fba76f75f8791d999c7cfa628b0534b7f796f1", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -6765,7 +6765,7 @@\n   /* This bit is the same as expand_builtin_longjmp.  */\n   emit_move_insn (hard_frame_pointer_rtx, fp);\n   emit_move_insn (pv, lab);\n-  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);\n "}, {"sha": "b9e92f4a253e0513f30a23feeb776a79e4a66ade", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -169,7 +169,7 @@\n   emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n   emit_move_insn (hard_frame_pointer_rtx, r_fp);\n-  emit_stack_restore (SAVE_NONLOCAL, r_sp, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, r_sp);\n \n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);"}, {"sha": "bb871036327de0c59a3486fb02e4a31f9e7944f2", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -5649,7 +5649,7 @@\n      restores $gp as well.  */\n   mips_emit_move (hard_frame_pointer_rtx, fp);\n   mips_emit_move (pv, lab);\n-  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n   mips_emit_move (gp, gpv);\n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);"}, {"sha": "24317a5c4f3b4ff9ef240f3e02d282168b2d73d9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -6865,7 +6865,7 @@\n     fp = force_reg (Pmode, fp);\n   emit_move_insn (hard_frame_pointer_rtx, plus_constant (fp, -8));\n \n-  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n \n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);\n@@ -8310,7 +8310,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   emit_move_insn (hard_frame_pointer_rtx, plus_constant (fp, -8));\n \n   /* This bit is the same as expand_builtin_longjmp.  */\n-  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);\n "}, {"sha": "8c3ef0042ff08c0096b26e2fac78c329a228e22b", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -1624,7 +1624,7 @@\n   emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n   emit_move_insn (hard_frame_pointer_rtx, fp);\n-  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n \n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);"}, {"sha": "34adcb93281ddc22e493e9144559f8da8741b211", "filename": "gcc/explow.c", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -961,13 +961,10 @@ round_push (rtx size)\n /* Save the stack pointer for the purpose in SAVE_LEVEL.  PSAVE is a pointer\n    to a previously-created save area.  If no save area has been allocated,\n    this function will allocate one.  If a save area is specified, it\n-   must be of the proper mode.\n-\n-   The insns are emitted after insn AFTER, if nonzero, otherwise the insns\n-   are emitted at the current position.  */\n+   must be of the proper mode.  */\n \n void\n-emit_stack_save (enum save_level save_level, rtx *psave, rtx after)\n+emit_stack_save (enum save_level save_level, rtx *psave)\n {\n   rtx sa = *psave;\n   /* The default is that we use a move insn and save in a Pmode object.  */\n@@ -1013,38 +1010,17 @@ emit_stack_save (enum save_level save_level, rtx *psave, rtx after)\n \t}\n     }\n \n-  if (after)\n-    {\n-      rtx seq;\n-\n-      start_sequence ();\n-      do_pending_stack_adjust ();\n-      /* We must validize inside the sequence, to ensure that any instructions\n-\t created by the validize call also get moved to the right place.  */\n-      if (sa != 0)\n-\tsa = validize_mem (sa);\n-      emit_insn (fcn (sa, stack_pointer_rtx));\n-      seq = get_insns ();\n-      end_sequence ();\n-      emit_insn_after (seq, after);\n-    }\n-  else\n-    {\n-      do_pending_stack_adjust ();\n-      if (sa != 0)\n-\tsa = validize_mem (sa);\n-      emit_insn (fcn (sa, stack_pointer_rtx));\n-    }\n+  do_pending_stack_adjust ();\n+  if (sa != 0)\n+    sa = validize_mem (sa);\n+  emit_insn (fcn (sa, stack_pointer_rtx));\n }\n \n /* Restore the stack pointer for the purpose in SAVE_LEVEL.  SA is the save\n-   area made by emit_stack_save.  If it is zero, we have nothing to do.\n-\n-   Put any emitted insns after insn AFTER, if nonzero, otherwise at\n-   current position.  */\n+   area made by emit_stack_save.  If it is zero, we have nothing to do.  */\n \n void\n-emit_stack_restore (enum save_level save_level, rtx sa, rtx after)\n+emit_stack_restore (enum save_level save_level, rtx sa)\n {\n   /* The default is that we use a move insn.  */\n   rtx (*fcn) (rtx, rtx) = gen_move_insn;\n@@ -1086,18 +1062,7 @@ emit_stack_restore (enum save_level save_level, rtx sa, rtx after)\n \n   discard_pending_stack_adjust ();\n \n-  if (after)\n-    {\n-      rtx seq;\n-\n-      start_sequence ();\n-      emit_insn (fcn (stack_pointer_rtx, sa));\n-      seq = get_insns ();\n-      end_sequence ();\n-      emit_insn_after (seq, after);\n-    }\n-  else\n-    emit_insn (fcn (stack_pointer_rtx, sa));\n+  emit_insn (fcn (stack_pointer_rtx, sa));\n }\n \n /* Invoke emit_stack_save on the nonlocal_goto_save_area for the current\n@@ -1118,7 +1083,7 @@ update_nonlocal_goto_save_area (void)\n \t\t   integer_one_node, NULL_TREE, NULL_TREE);\n   r_save = expand_expr (t_save, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n-  emit_stack_save (SAVE_NONLOCAL, &r_save, NULL_RTX);\n+  emit_stack_save (SAVE_NONLOCAL, &r_save);\n }\n \f\n /* Return an rtx representing the address of an area of memory dynamically"}, {"sha": "b6e6e6b0cab92fc9f96f701b8da8a1b3d65bfd2f", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -633,10 +633,10 @@ extern void anti_adjust_stack_and_probe (rtx, bool);\n enum save_level {SAVE_BLOCK, SAVE_FUNCTION, SAVE_NONLOCAL};\n \n /* Save the stack pointer at the specified level.  */\n-extern void emit_stack_save (enum save_level, rtx *, rtx);\n+extern void emit_stack_save (enum save_level, rtx *);\n \n /* Restore the stack pointer from a save area of the specified level.  */\n-extern void emit_stack_restore (enum save_level, rtx, rtx);\n+extern void emit_stack_restore (enum save_level, rtx);\n \n /* Invoke emit_stack_save for the nonlocal_goto_save_area.  */\n extern void update_nonlocal_goto_save_area (void);"}, {"sha": "19b480d20ba6d1adce36433509908d1718a74363", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -5121,10 +5121,15 @@ expand_function_end (void)\n   if (! EXIT_IGNORE_STACK\n       && cfun->calls_alloca)\n     {\n-      rtx tem = 0;\n+      rtx tem = 0, seq;\n \n-      emit_stack_save (SAVE_FUNCTION, &tem, parm_birth_insn);\n-      emit_stack_restore (SAVE_FUNCTION, tem, NULL_RTX);\n+      start_sequence ();\n+      emit_stack_save (SAVE_FUNCTION, &tem);\n+      seq = get_insns ();\n+      end_sequence ();\n+      emit_insn_before (seq, parm_birth_insn);\n+\n+      emit_stack_restore (SAVE_FUNCTION, tem);\n     }\n \n   /* ??? This should no longer be necessary since stupid is no longer with"}, {"sha": "b65c6db4642dfb052260ea32db6c0f7359bebf20", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eac0f2a07b6e919feacfcd30c19a3058dd58e01/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9eac0f2a07b6e919feacfcd30c19a3058dd58e01", "patch": "@@ -2006,7 +2006,7 @@ expand_stack_save (void)\n   rtx ret = NULL_RTX;\n \n   do_pending_stack_adjust ();\n-  emit_stack_save (SAVE_BLOCK, &ret, NULL_RTX);\n+  emit_stack_save (SAVE_BLOCK, &ret);\n   return ret;\n }\n \n@@ -2017,7 +2017,7 @@ expand_stack_restore (tree var)\n   rtx sa = expand_normal (var);\n \n   sa = convert_memory_address (Pmode, sa);\n-  emit_stack_restore (SAVE_BLOCK, sa, NULL_RTX);\n+  emit_stack_restore (SAVE_BLOCK, sa);\n }\n \f\n /* Do the insertion of a case label into case_list.  The labels are"}]}