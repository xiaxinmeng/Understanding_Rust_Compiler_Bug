{"sha": "b03d739a609bcd91799638742ad4b62a3264ed1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZDczOWE2MDliY2Q5MTc5OTYzODc0MmFkNGI2MmEzMjY0ZWQxZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-28T02:01:14Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-28T02:01:14Z"}, "message": "(pop_init_level): Add special case for nonincremental scalar initializers.\n\nFrom-SVN: r5503", "tree": {"sha": "8f8e112762d2d8bbce4c218abecdbe5be64e0f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f8e112762d2d8bbce4c218abecdbe5be64e0f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03d739a609bcd91799638742ad4b62a3264ed1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d739a609bcd91799638742ad4b62a3264ed1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03d739a609bcd91799638742ad4b62a3264ed1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d739a609bcd91799638742ad4b62a3264ed1d/comments", "author": null, "committer": null, "parents": [{"sha": "235174ce3024532ed61336cb9e66c0faa0ca9e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235174ce3024532ed61336cb9e66c0faa0ca9e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235174ce3024532ed61336cb9e66c0faa0ca9e37"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "9cd22c8b860ad97ff866ebc6d9aca0d67cfbab4c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d739a609bcd91799638742ad4b62a3264ed1d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d739a609bcd91799638742ad4b62a3264ed1d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b03d739a609bcd91799638742ad4b62a3264ed1d", "patch": "@@ -5712,6 +5712,28 @@ pop_init_level (implicit)\n     }\n   else if (constructor_type == 0)\n     ;\n+  else if (TREE_CODE (constructor_type) != RECORD_TYPE\n+\t   && TREE_CODE (constructor_type) != UNION_TYPE\n+\t   && TREE_CODE (constructor_type) != ARRAY_TYPE\n+\t   && ! constructor_incremental)\n+    {\n+      /* A nonincremental scalar initializer--just return\n+\t the element, after verifying there is just one.  */\n+      if (constructor_elements == 0)\n+\t{\n+\t  error_init (\"empty scalar initializer%s\",\n+\t\t      \" for `%s'\", NULL);\n+\t  constructor = error_mark_node;\n+\t}\n+      else if (TREE_CHAIN (constructor_elements) != 0)\n+\t{\n+\t  error_init (\"extra elements in scalar initializer%s\",\n+\t\t      \" for `%s'\", NULL);\n+\t  constructor = TREE_VALUE (constructor_elements);\n+\t}\n+      else\n+\tconstructor = TREE_VALUE (constructor_elements);\n+    }\n   else if (! constructor_incremental)\n     {\n       if (constructor_erroneous)\n@@ -5726,6 +5748,7 @@ pop_init_level (implicit)\n \t    TREE_CONSTANT (constructor) = 1;\n \t  if (constructor_constant && constructor_simple)\n \t    TREE_STATIC (constructor) = 1;\n+\n \t  resume_momentary (momentary);\n \t}\n     }"}]}