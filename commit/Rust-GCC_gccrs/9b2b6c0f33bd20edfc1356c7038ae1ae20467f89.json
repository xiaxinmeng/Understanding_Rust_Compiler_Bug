{"sha": "9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyYjZjMGYzM2JkMjBlZGZjMTM1NmM3MDM4YWUxYWUyMDQ2N2Y4OQ==", "commit": {"author": {"name": "Jeroen Frijters", "email": "jeroen@frijters.net", "date": "2004-09-25T19:46:21Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-09-25T19:46:21Z"}, "message": "Proxy.java (getPackage, [...]): Fixed handling of default package.\n\n2004-09-25  Jeroen Frijters  <jeroen@frijters.net>\n\n       * java/lang/reflect/Proxy.java (getPackage, ClassFactory): Fixed\n       handling of default package. (generate): Removed confused comments\n       and code about making Method and Field accessible.\n\nFrom-SVN: r88109", "tree": {"sha": "c33989d23c29c649b86696f01472186017048309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33989d23c29c649b86696f01472186017048309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89/comments", "author": {"login": "jfrijters", "id": 2994393, "node_id": "MDQ6VXNlcjI5OTQzOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2994393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrijters", "html_url": "https://github.com/jfrijters", "followers_url": "https://api.github.com/users/jfrijters/followers", "following_url": "https://api.github.com/users/jfrijters/following{/other_user}", "gists_url": "https://api.github.com/users/jfrijters/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrijters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrijters/subscriptions", "organizations_url": "https://api.github.com/users/jfrijters/orgs", "repos_url": "https://api.github.com/users/jfrijters/repos", "events_url": "https://api.github.com/users/jfrijters/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrijters/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1f042f8b2eb63fedf2045bab0a449071993fdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f042f8b2eb63fedf2045bab0a449071993fdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f042f8b2eb63fedf2045bab0a449071993fdbd"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "dd323d30e828a2a00b92f84c8fea6abf89e6f88d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "patch": "@@ -1,3 +1,9 @@\n+2004-09-25  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t* java/lang/reflect/Proxy.java (getPackage, ClassFactory): Fixed\n+\thandling of default package. (generate): Removed confused comments\n+\tand code about making Method and Field accessible.\n+\n 2004-09-25  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/17500:"}, {"sha": "66373c5794fa54aeccb6ca99a6c83fb2a9d95344", "filename": "libjava/java/lang/reflect/Proxy.java", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89/libjava%2Fjava%2Flang%2Freflect%2FProxy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b6c0f33bd20edfc1356c7038ae1ae20467f89/libjava%2Fjava%2Flang%2Freflect%2FProxy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FProxy.java?ref=9b2b6c0f33bd20edfc1356c7038ae1ae20467f89", "patch": "@@ -722,8 +722,8 @@ public boolean equals(Object other)\n   private static final class ProxyData\n   {\n     /**\n-     * The package this class is in.  Possibly null, meaning the unnamed\n-     * package.\n+     * The package this class is in *including the trailing dot* or \"\" for\n+     * the unnamed (aka default) package.\n      */\n     String pack;\n \n@@ -769,18 +769,17 @@ public boolean equals(Object other)\n     }\n \n     /**\n-     * Return the name of a package given the name of a class.\n-     * Returns null if no package.  We use this in preference to\n+     * Return the name of a package (including the trailing dot)\n+     * given the name of a class.\n+     * Returns \"\" if no package.  We use this in preference to\n      * using Class.getPackage() to avoid problems with ClassLoaders\n      * that don't set the package.\n      */\n-    static String getPackage(Class k)\n+    private static String getPackage(Class k)\n     {\n       String name = k.getName();\n       int idx = name.lastIndexOf('.');\n-      if (idx >= 0)\n-\treturn name.substring(0, idx);\n-      return null;\n+      return name.substring(0, idx + 1);\n     }\n \n     /**\n@@ -961,8 +960,7 @@ static ProxyData getProxyData(ProxyType pt)\n       // access_flags\n       putU2(Modifier.SUPER | Modifier.FINAL | Modifier.PUBLIC);\n       // this_class\n-      qualName = ((data.pack == null ? \"\" : data.pack + '.')\n-                  + \"$Proxy\" + data.id);\n+      qualName = (data.pack + \"$Proxy\" + data.id);\n       putU2(classInfo(TypeSignature.getEncodingOfClass(qualName, false)));\n       // super_class\n       putU2(classInfo(\"java/lang/reflect/Proxy\"));\n@@ -1325,34 +1323,26 @@ final Class generate(ClassLoader loader)\n \n       try\n         {\n-          // XXX Do we require more native support here?\n-\n           Class vmClassLoader = Class.forName(\"java.lang.VMClassLoader\");\n           Class[] types = {ClassLoader.class, String.class,\n                            byte[].class, int.class, int.class,\n                            ProtectionDomain.class };\n           Method m = vmClassLoader.getDeclaredMethod(\"defineClass\", types);\n-\n-          // Bypass the security check of setAccessible(true), since this\n-          // is trusted code. But note the comment above about the security\n-          // risk of doing this outside a synchronized block.\n+          // We can bypass the security check of setAccessible(true), since\n+\t  // we're in the same package.\n           m.flag = true;\n+\n           Object[] args = {loader, qualName, bytecode, new Integer(0),\n                            new Integer(bytecode.length),\n                            Object.class.getProtectionDomain() };\n           Class clazz = (Class) m.invoke(null, args);\n-          m.flag = false;\n \n           // Finally, initialize the m field of the proxy class, before\n           // returning it.\n-\n-          // No security risk here, since clazz has not been exposed yet,\n-          // so user code cannot grab the same reflection object.\n           Field f = clazz.getDeclaredField(\"m\");\n           f.flag = true;\n           // we can share the array, because it is not publicized\n           f.set(null, methods);\n-          f.flag = false;\n \n           return clazz;\n         }"}]}