{"sha": "dcc24678550981985ddd17df7871e63c9752315d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjMjQ2Nzg1NTA5ODE5ODVkZGQxN2RmNzg3MWU2M2M5NzUyMzE1ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-22T07:03:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-22T07:03:15Z"}, "message": "cfgcleanup.c: Fix comment typos.\n\n\t* cfgcleanup.c: Fix comment typos.\n\t* emit-rtl.c: Likewise.\n\t* optabs.c: Likewise.\n\t* ra-build.c: Likewise.\n\t* rtlanal.c: Likewise.\n\t* tree.h: Likewise.\n\nFrom-SVN: r70678", "tree": {"sha": "4aba1caf92c33ab7044cd4b26a7ec2edf69eb141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aba1caf92c33ab7044cd4b26a7ec2edf69eb141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc24678550981985ddd17df7871e63c9752315d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc24678550981985ddd17df7871e63c9752315d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc24678550981985ddd17df7871e63c9752315d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc24678550981985ddd17df7871e63c9752315d/comments", "author": null, "committer": null, "parents": [{"sha": "beb235f8964321e02e492c9b6856a1ca56f2e027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb235f8964321e02e492c9b6856a1ca56f2e027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb235f8964321e02e492c9b6856a1ca56f2e027"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "97e711c9753c385ef82165f8f0cc6a20b46b792b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -1,3 +1,12 @@\n+2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfgcleanup.c: Fix comment typos.\n+\t* emit-rtl.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* ra-build.c: Likewise.\n+\t* rtlanal.c: Likewise.\n+\t* tree.h: Likewise.\n+\n 2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-decl.c: Fix comment formatting."}, {"sha": "074812d54ef411a7e956ddfed11c4149b3e8b935", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -227,7 +227,7 @@ mark_effect (rtx exp, regset nonequal)\n     }\n }\n \n-/* Return nonzero if X is an register set in regset DATA.\n+/* Return nonzero if X is a register set in regset DATA.\n    Called via for_each_rtx.  */\n static int\n mentions_nonequal_regs (rtx *x, void *data)"}, {"sha": "4140abc15d0c2832cb44746e7f4631e67a07f375", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -858,7 +858,7 @@ gen_reg_rtx (enum machine_mode mode)\n   return val;\n }\n \n-/* Generate an register with same attributes as REG,\n+/* Generate a register with same attributes as REG,\n    but offsetted by OFFSET.  */\n \n rtx"}, {"sha": "e413d86d18ee41cb0cc2216f6506f6d4cd53058d", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -3175,7 +3175,7 @@ emit_no_conflict_block (rtx insns, rtx target, rtx op0, rtx op1, rtx equiv)\n \n       next = NEXT_INSN (insn);\n \n-      /* Some ports (cris) create an libcall regions at their own.  We must\n+      /* Some ports (cris) create a libcall regions at their own.  We must\n \t avoid any potential nesting of LIBCALLs.  */\n       if ((note = find_reg_note (insn, REG_LIBCALL, NULL)) != NULL)\n \tremove_note (insn, note);\n@@ -3342,7 +3342,7 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n       rtx set = single_set (insn);\n       rtx note;\n \n-      /* Some ports (cris) create an libcall regions at their own.  We must\n+      /* Some ports (cris) create a libcall regions at their own.  We must\n \t avoid any potential nesting of LIBCALLs.  */\n       if ((note = find_reg_note (insn, REG_LIBCALL, NULL)) != NULL)\n \tremove_note (insn, note);"}, {"sha": "dfd8588aa306e7ebefe157f5db44adc4c2a41fb0", "filename": "gcc/ra-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -2429,7 +2429,7 @@ detect_spill_temps ()\n \tcontinue;\n \n       /* A web with only defs and no uses can't be spilled.  Nevertheless\n-\t it must get a color, as it takes away an register from all webs\n+\t it must get a color, as it takes away a register from all webs\n \t live at these defs.  So we make it a short web.  */\n       if (web->num_uses == 0)\n \tweb->spill_temp = 3;"}, {"sha": "18173ebf297ec1d9381f655cd40261f6b32a8f47", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -3311,7 +3311,7 @@ subreg_offset_representable_p (unsigned int xregno, enum machine_mode xmode,\n #endif\n \n   /* The XMODE value can be seen as a vector of NREGS_XMODE\n-     values.  The subreg must represent an lowpart of given field.\n+     values.  The subreg must represent a lowpart of given field.\n      Compute what field it is.  */\n   offset -= subreg_lowpart_offset (ymode,\n \t\t\t\t   mode_for_size (GET_MODE_BITSIZE (xmode)"}, {"sha": "7bc44c7ce846b5d96ac58514ad7818975dabd22a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc24678550981985ddd17df7871e63c9752315d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dcc24678550981985ddd17df7871e63c9752315d", "patch": "@@ -2582,7 +2582,7 @@ extern tree substitute_in_expr (tree, tree, tree);\n \n extern tree variable_size (tree);\n \n-/* stabilize_reference (EXP) returns an reference equivalent to EXP\n+/* stabilize_reference (EXP) returns a reference equivalent to EXP\n    but it can be used multiple times\n    and only evaluate the subexpressions once.  */\n "}]}