{"sha": "70d288130f1296bebb1dcf30d8585916b7c8c850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkMjg4MTMwZjEyOTZiZWJiMWRjZjMwZDg1ODU5MTZiN2M4Yzg1MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-01T18:35:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-01T18:35:06Z"}, "message": "dwarf2out.c (add_name_and_src_coords_attributes): Add NO_LINKAGE_NAME argument, don't call add_linkage_name if it is true.\n\n\t* dwarf2out.c (add_name_and_src_coords_attributes): Add NO_LINKAGE_NAME\n\targument, don't call add_linkage_name if it is true.\n\t(gen_variable_die): For C++ inline static data members, consider the\n\tinitial call when old_die is NULL to be declaration and call\n\tadd_name_and_src_coords_attributes in that case with true as\n\tNO_LINKAGE_NAME.  Add DW_AT_inline attribute if needed.\n\t(gen_member_die): For C++ inline static data members, emit a\n\tdefinition DIE right away in DW_TAG_compile_unit context.\ncp/\n\t* cp-objcp-common.c (cp_decl_dwarf_attribute): Handle DW_AT_inline.\ntestsuite/\n\t* g++.dg/debug/dwarf2/inline-var-1.C: New test.\n\nFrom-SVN: r241753", "tree": {"sha": "2920e41a8d3651ef0bff5eaf8128439394b00442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2920e41a8d3651ef0bff5eaf8128439394b00442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d288130f1296bebb1dcf30d8585916b7c8c850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d288130f1296bebb1dcf30d8585916b7c8c850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d288130f1296bebb1dcf30d8585916b7c8c850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d288130f1296bebb1dcf30d8585916b7c8c850/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e592dd625d5ad569561b081a01ff4a6be24693e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e592dd625d5ad569561b081a01ff4a6be24693e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e592dd625d5ad569561b081a01ff4a6be24693e0"}], "stats": {"total": 106, "additions": 101, "deletions": 5}, "files": [{"sha": "9d162a9c49e2ece8d4bddf3bf5f114f18dae1a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -1,3 +1,14 @@\n+2016-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (add_name_and_src_coords_attributes): Add NO_LINKAGE_NAME\n+\targument, don't call add_linkage_name if it is true.\n+\t(gen_variable_die): For C++ inline static data members, consider the\n+\tinitial call when old_die is NULL to be declaration and call\n+\tadd_name_and_src_coords_attributes in that case with true as\n+\tNO_LINKAGE_NAME.  Add DW_AT_inline attribute if needed.\n+\t(gen_member_die): For C++ inline static data members, emit a\n+\tdefinition DIE right away in DW_TAG_compile_unit context.\n+\n 2016-11-01  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/78166"}, {"sha": "d9ea36b9eb839e528d7a8428a22196e2de8a47b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -1,3 +1,7 @@\n+2016-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-objcp-common.c (cp_decl_dwarf_attribute): Handle DW_AT_inline.\n+\n 2016-11-01  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (declared_access): Split out from handle_using_decl."}, {"sha": "c6f0873b2a6108545708ee030d5fc891e691ee65", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -199,6 +199,16 @@ cp_decl_dwarf_attribute (const_tree decl, int attr)\n \treturn 1;\n       break;\n \n+    case DW_AT_inline:\n+      if (VAR_P (decl) && DECL_INLINE_VAR_P (decl))\n+\t{\n+\t  if (DECL_VAR_DECLARED_INLINE_P (decl))\n+\t    return DW_INL_declared_inlined;\n+\t  else\n+\t    return DW_INL_inlined;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "abadc4723744bea3f3b484dc8fa407e083b18f24", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -3511,7 +3511,7 @@ static void add_prototyped_attribute (dw_die_ref, tree);\n static dw_die_ref add_abstract_origin_attribute (dw_die_ref, tree);\n static void add_pure_or_virtual_attribute (dw_die_ref, tree);\n static void add_src_coords_attributes (dw_die_ref, tree);\n-static void add_name_and_src_coords_attributes (dw_die_ref, tree);\n+static void add_name_and_src_coords_attributes (dw_die_ref, tree, bool = false);\n static void add_discr_value (dw_die_ref, dw_discr_value *);\n static void add_discr_list (dw_die_ref, dw_discr_list_ref);\n static inline dw_discr_list_ref AT_discr_list (dw_attr_node *);\n@@ -20056,7 +20056,8 @@ add_linkage_name (dw_die_ref die, tree decl)\n    given decl, but only if it actually has a name.  */\n \n static void\n-add_name_and_src_coords_attributes (dw_die_ref die, tree decl)\n+add_name_and_src_coords_attributes (dw_die_ref die, tree decl,\n+\t\t\t\t    bool no_linkage_name)\n {\n   tree decl_name;\n \n@@ -20069,7 +20070,8 @@ add_name_and_src_coords_attributes (dw_die_ref die, tree decl)\n       if (! DECL_ARTIFICIAL (decl))\n \tadd_src_coords_attributes (die, decl);\n \n-      add_linkage_name (die, decl);\n+      if (!no_linkage_name)\n+\tadd_linkage_name (die, decl);\n     }\n \n #ifdef VMS_DEBUGGING_INFO\n@@ -22451,6 +22453,22 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   bool declaration = (DECL_EXTERNAL (decl_or_origin)\n \t\t      || class_or_namespace_scope_p (context_die));\n   bool specialization_p = false;\n+  bool no_linkage_name = false;\n+\n+  /* While C++ inline static data members have definitions inside of the\n+     class, force the first DIE to be a declaration, then let gen_member_die\n+     reparent it to the class context and call gen_variable_die again\n+     to create the outside of the class DIE for the definition.  */\n+  if (!declaration\n+      && old_die == NULL\n+      && decl\n+      && DECL_CONTEXT (decl)\n+      && TYPE_P (DECL_CONTEXT (decl))\n+      && lang_hooks.decls.decl_dwarf_attribute (decl, DW_AT_inline) != -1)\n+    {\n+      declaration = true;\n+      no_linkage_name = true;\n+    }\n \n   ultimate_origin = decl_ultimate_origin (decl_or_origin);\n   if (decl || ultimate_origin)\n@@ -22638,7 +22656,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t}\n     }\n   else\n-    add_name_and_src_coords_attributes (var_die, decl);\n+    add_name_and_src_coords_attributes (var_die, decl, no_linkage_name);\n \n   if ((origin == NULL && !specialization_p)\n       || (origin != NULL\n@@ -22698,9 +22716,18 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       && lang_hooks.decls.decl_dwarf_attribute (decl_or_origin,\n \t\t\t\t\t\tDW_AT_const_expr) == 1\n       && !get_AT (var_die, DW_AT_const_expr)\n-      && (origin_die == NULL || get_AT (origin_die, DW_AT_const_expr) == NULL)\n       && !specialization_p)\n     add_AT_flag (var_die, DW_AT_const_expr, 1);\n+\n+  if (!dwarf_strict)\n+    {\n+      int inl = lang_hooks.decls.decl_dwarf_attribute (decl_or_origin,\n+\t\t\t\t\t\t       DW_AT_inline);\n+      if (inl != -1\n+\t  && !get_AT (var_die, DW_AT_inline)\n+\t  && !specialization_p)\n+\tadd_AT_unsigned (var_die, DW_AT_inline, inl);\n+    }\n }\n \n /* Generate a DIE to represent a named constant.  */\n@@ -23859,6 +23886,19 @@ gen_member_die (tree type, dw_die_ref context_die)\n \t  vlr_ctx.variant_part_offset = NULL_TREE;\n \t  gen_decl_die (member, NULL, &vlr_ctx, context_die);\n \t}\n+\n+      /* For C++ inline static data members emit immediately a DW_TAG_variable\n+\t DIE that will refer to that DW_TAG_member through\n+\t DW_AT_specification.  */\n+      if (TREE_STATIC (member)\n+\t  && (lang_hooks.decls.decl_dwarf_attribute (member, DW_AT_inline)\n+\t      != -1))\n+\t{\n+\t  int old_extern = DECL_EXTERNAL (member);\n+\t  DECL_EXTERNAL (member) = 0;\n+\t  gen_decl_die (member, NULL, NULL, comp_unit_die ());\n+\t  DECL_EXTERNAL (member) = old_extern;\n+\t}\n     }\n \n   /* We do not keep type methods in type variants.  */"}, {"sha": "7572f864606ae0c5ddbbc32fbb388c4ff0658b95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -1,3 +1,7 @@\n+2016-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/inline-var-1.C: New test.\n+\n 2016-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/69544"}, {"sha": "da8014c257dfa5a61f14acc7017d7a0d06968c23", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline-var-1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d288130f1296bebb1dcf30d8585916b7c8c850/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C?ref=70d288130f1296bebb1dcf30d8585916b7c8c850", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c++1z -g -dA -gno-strict-dwarf\" }\n+// { dg-require-weak \"\" }\n+// { dg-final { scan-assembler-times \"0x3\\[^\\n\\r]* DW_AT_inline\" 6 } }\n+// { dg-final { scan-assembler-times \"0x1\\[^\\n\\r]* DW_AT_inline\" 2 } }\n+// { dg-final { scan-assembler-times \" DW_AT_declaration\" 6 } }\n+// { dg-final { scan-assembler-times \" DW_AT_specification\" 6 } }\n+// { dg-final { scan-assembler-times \" DW_AT_\\[^\\n\\r]*linkage_name\" 7 } }\n+\n+inline int a;\n+struct S\n+{\n+  static inline double b = 4.0;\n+  static constexpr int c = 2;\n+  static constexpr inline char d = 3;\n+} s;\n+template <int N>\n+inline int e = N;\n+int &f = e<2>;\n+template <int N>\n+struct T\n+{\n+  static inline double g = 4.0;\n+  static constexpr int h = 2;\n+  static inline constexpr char i = 3;\n+};\n+T<5> t;"}]}