{"sha": "0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "node_id": "C_kwDOANBUbNoAKDBkNGI5N2YxZWU1MjEzZGZmY2UxMDdiYzlmMjYwYTIyZmIyM2I0YjE", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2022-03-30T14:22:45Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2022-04-01T14:37:43Z"}, "message": "mips: Emit psabi diagnostic for return values affected by C++ zero-width bit-field ABI change [PR 102024]\n\ngcc/\n\tPR target/102024\n\t* config/mips/mips.cc (mips_fpr_return_fields): Detect C++\n\tzero-width bit-fields and set up an indicator.\n\t(mips_return_in_msb): Adapt for mips_fpr_return_fields change.\n\t(mips_function_value_1): Diagnose when the presense of a C++\n\tzero-width bit-field changes function returning in GCC 12.\n\ngcc/testsuite/\n\tPR target/102024\n\t* g++.target/mips/mips.exp: New test supporting file.\n\t* g++.target/mips/pr102024.C: New test.", "tree": {"sha": "e0ccf6bd93a74828f946a644daea4211e4683ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0ccf6bd93a74828f946a644daea4211e4683ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEunTLnZqV9wGnXaw2V5HFsy7NNwFAmJHDkEACgkQ2V5HFsy7\nNNx+1A/9GV3jmicWKakX/6UHfpTdvgf47TDBYVhAWWr3V/gDE2uyTpp23/8Db6a7\nVyGriCSDHSrId3gZ0Um6MkTQ6qY+rh9BYYiBwd4RGBNDp/YaSiU+ZGqgE52H++La\nFnHDMpNGL9tLzyOhJa0q8IUt3pYoZwujlEYZGwgdh8+ZUx41qXkhXLwJiMGrc6wF\nEpB82jzHbZYgovVmkey9HqHMaynBr2tnXQSqO0D3rMp4Tp08fIH1IFbbjV6g2Fbf\nCUAoUhphs27VxsLKQHSD0Mpmc9Il8/6ucOw2s38PHe7tuN1fR86jq8gbb/7Zr1RE\nCXddeG6t4J1MDwfI8FTOguwbFClshnFlJhqnvjdk/kZ6ZJqAbI2f2QwNjiGxZ9ey\nm2ZRJAxB+y0xq92aK1kCWEdjUXzfj1K/smwd35PXMfbEsDEnVwhMli2gOKzrMfA8\nbukMrMYoou22PJ5tvh49aMbDZ89m0xv+QcHWCuh5MBzG+8bVdpev2Us/eHi2duBT\n5xHyVehsn8Je6JDSSz3XWA3bVp+rkovWIzko05S9caFiy3nVs6iMnzAb8OjDZvsk\n86XsxEdAuI2oCdm5b9NAfMvp21J8fjh9QeE7zMikhm3spJ9XUuidROvxmru+aY7a\nHQJ9dERIlJw0Ury1PJ4mJuXWTAaptbkj4hawNJ7+erwDoEYC8aM=\n=i3zO\n-----END PGP SIGNATURE-----", "payload": "tree e0ccf6bd93a74828f946a644daea4211e4683ffd\nparent 86d8e0c0652ef5236a460b75c25e4f7093cc0651\nauthor Xi Ruoyao <xry111@mengyan1223.wang> 1648650165 +0800\ncommitter Xi Ruoyao <xry111@mengyan1223.wang> 1648823863 +0800\n\nmips: Emit psabi diagnostic for return values affected by C++ zero-width bit-field ABI change [PR 102024]\n\ngcc/\n\tPR target/102024\n\t* config/mips/mips.cc (mips_fpr_return_fields): Detect C++\n\tzero-width bit-fields and set up an indicator.\n\t(mips_return_in_msb): Adapt for mips_fpr_return_fields change.\n\t(mips_function_value_1): Diagnose when the presense of a C++\n\tzero-width bit-field changes function returning in GCC 12.\n\ngcc/testsuite/\n\tPR target/102024\n\t* g++.target/mips/mips.exp: New test supporting file.\n\t* g++.target/mips/pr102024.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d8e0c0652ef5236a460b75c25e4f7093cc0651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d8e0c0652ef5236a460b75c25e4f7093cc0651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d8e0c0652ef5236a460b75c25e4f7093cc0651"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "83860b5d4b7bbc2192f15b8387930d9525999a37", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "patch": "@@ -6274,10 +6274,17 @@ mips_callee_copies (cumulative_args_t, const function_arg_info &arg)\n \n    For n32 & n64, a structure with one or two fields is returned in\n    floating-point registers as long as every field has a floating-point\n-   type.  */\n+   type.\n+\n+   The C++ FE used to remove zero-width bit-fields in GCC 11 and earlier.\n+   To make a proper diagnostic, this function will set\n+   HAS_CXX_ZERO_WIDTH_BF to true once a C++ zero-width bit-field shows up,\n+   and then ignore it. Then the caller can determine if this zero-width\n+   bit-field will make a difference and emit a -Wpsabi inform.  */\n \n static int\n-mips_fpr_return_fields (const_tree valtype, tree *fields)\n+mips_fpr_return_fields (const_tree valtype, tree *fields,\n+\t\t\tbool *has_cxx_zero_width_bf)\n {\n   tree field;\n   int i;\n@@ -6294,6 +6301,12 @@ mips_fpr_return_fields (const_tree valtype, tree *fields)\n       if (TREE_CODE (field) != FIELD_DECL)\n \tcontinue;\n \n+      if (DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD (field))\n+\t{\n+\t  *has_cxx_zero_width_bf = true;\n+\t  continue;\n+\t}\n+\n       if (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (field)))\n \treturn 0;\n \n@@ -6318,12 +6331,14 @@ mips_fpr_return_fields (const_tree valtype, tree *fields)\n static bool\n mips_return_in_msb (const_tree valtype)\n {\n-  tree fields[2];\n+  if (!TARGET_NEWABI || !TARGET_BIG_ENDIAN || !AGGREGATE_TYPE_P (valtype))\n+    return false;\n \n-  return (TARGET_NEWABI\n-\t  && TARGET_BIG_ENDIAN\n-\t  && AGGREGATE_TYPE_P (valtype)\n-\t  && mips_fpr_return_fields (valtype, fields) == 0);\n+  tree fields[2];\n+  bool has_cxx_zero_width_bf = false;\n+  return (mips_fpr_return_fields (valtype, fields,\n+\t\t\t\t  &has_cxx_zero_width_bf) == 0\n+\t  || has_cxx_zero_width_bf);\n }\n \n /* Return true if the function return value MODE will get returned in a\n@@ -6418,8 +6433,35 @@ mips_function_value_1 (const_tree valtype, const_tree fn_decl_or_type,\n \t return values, promote the mode here too.  */\n       mode = promote_function_mode (valtype, mode, &unsigned_p, func, 1);\n \n+      bool has_cxx_zero_width_bf = false;\n+      int use_fpr = mips_fpr_return_fields (valtype, fields,\n+\t\t\t\t\t    &has_cxx_zero_width_bf);\n+      if (TARGET_HARD_FLOAT\n+\t  && warn_psabi\n+\t  && has_cxx_zero_width_bf\n+\t  && use_fpr != 0)\n+\t{\n+\t  static unsigned last_reported_type_uid;\n+\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (valtype));\n+\t  if (uid != last_reported_type_uid)\n+\t    {\n+\t      static const char *url\n+\t\t= CHANGES_ROOT_URL\n+\t\t  \"gcc-12/changes.html#zero_width_bitfields\";\n+\t      inform (input_location,\n+\t\t      \"the ABI for returning a value containing \"\n+\t\t      \"zero-width bit-fields but otherwise an aggregate \"\n+\t\t      \"with only one or two floating-point fields was \"\n+\t\t      \"changed in GCC %{12.1%}\", url);\n+\t      last_reported_type_uid = uid;\n+\t    }\n+\t}\n+\n+      if (has_cxx_zero_width_bf)\n+\tuse_fpr = 0;\n+\n       /* Handle structures whose fields are returned in $f0/$f2.  */\n-      switch (mips_fpr_return_fields (valtype, fields))\n+      switch (use_fpr)\n \t{\n \tcase 1:\n \t  return mips_return_fpr_single (mode,"}, {"sha": "9fa7e771b4dd5a91980a5e6abb292116c970a28b", "filename": "gcc/testsuite/g++.target/mips/mips.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fmips.exp?ref=0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "patch": "@@ -0,0 +1,34 @@\n+# Copyright (C) 2019-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a MIPS target.\n+if ![istarget mips*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "331e6ca70e603462eb932f1a90e66da85b4d2542", "filename": "gcc/testsuite/g++.target/mips/pr102024.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fpr102024.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b97f1ee5213dffce107bc9f260a22fb23b4b1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fpr102024.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fpr102024.C?ref=0d4b97f1ee5213dffce107bc9f260a22fb23b4b1", "patch": "@@ -0,0 +1,20 @@\n+// PR target/102024\n+// { dg-do compile }\n+// { dg-options \"-O2 -mabi=64 -mhard-float\" }\n+// { dg-final { scan-assembler-not \"\\\\\\$f0\" } }\n+\n+struct foo\n+{\n+  double a;\n+  int : 0;\n+  double b;\n+};\n+\n+struct foo\n+make_foo(void) // { dg-message \"the ABI for returning a value containing zero-width bit-fields but otherwise an aggregate with only one or two floating-point fields was changed in GCC 12.1\" }\n+{\n+  struct foo ret;\n+  ret.a = 114;\n+  ret.b = 514;\n+  return ret;\n+}"}]}