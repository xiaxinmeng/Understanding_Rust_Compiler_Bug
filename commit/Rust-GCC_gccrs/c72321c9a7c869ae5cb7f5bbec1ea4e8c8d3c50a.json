{"sha": "c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyMzIxYzlhN2M4NjlhZTVjYjdmNWJiZWMxZWE0ZThjOGQzYzUwYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-20T16:06:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-20T16:06:51Z"}, "message": "cgraph.c (cgraph_add_new_function): Do early local passes.\n\n\t* cgraph.c (cgraph_add_new_function): Do early local passes.\n\t* tree-nrv.c (gate_pass_return_slot): New gate.\n\t(pass_nrv): Add the gate.\n\t* tree-ssa-coalese.c (hash_ssa_name_by_var, eq_ssa_name_by_var): New\n\tfunctions.\n\t(coalesce_ssa_name): Coalesce SSA names.\n\t* tree-ssa-live.c (remove_unused_locals): Be more conservative when\n\tnot optimizing so unused user vars remains visible.\n\t* common.opt (flag_tree_ter): Always enable by default.\n\t* tree-ssa-ter.c: Include flags.h\n\t(is_replaceable_p): Check that locations match; when aliasing is missing\n\tbe conservative about loads.\n\t* tree-optimize.c (gate_init_datastructures): Remove.\n\t(pass_init_datastructures): New.\n\t* passes.c: Reorder passes so we always go into SSA.\n\nFrom-SVN: r138010", "tree": {"sha": "b70810f9d05350b4f20a9fb3104039f83b6b3bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70810f9d05350b4f20a9fb3104039f83b6b3bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/comments", "author": null, "committer": null, "parents": [{"sha": "d6cc6ec9d11523de305be40a6e0e36ea9996de57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cc6ec9d11523de305be40a6e0e36ea9996de57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cc6ec9d11523de305be40a6e0e36ea9996de57"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "63fff767c202658383b7ebd65a43d6dec0868128", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -1,3 +1,21 @@\n+2008-07-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_add_new_function): Do early local passes.\n+\t* tree-nrv.c (gate_pass_return_slot): New gate.\n+\t(pass_nrv): Add the gate.\n+\t* tree-ssa-coalese.c (hash_ssa_name_by_var, eq_ssa_name_by_var): New\n+\tfunctions.\n+\t(coalesce_ssa_name): Coalesce SSA names.\n+\t* tree-ssa-live.c (remove_unused_locals): Be more conservative when\n+\tnot optimizing so unused user vars remains visible.\n+\t* common.opt (flag_tree_ter): Always enable by default.\n+\t* tree-ssa-ter.c: Include flags.h\n+\t(is_replaceable_p): Check that locations match; when aliasing is missing\n+\tbe conservative about loads.\n+\t* tree-optimize.c (gate_init_datastructures): Remove.\n+\t(pass_init_datastructures): New.\n+\t* passes.c: Reorder passes so we always go into SSA.\n+\n 2008-07-19  Jan Hubicka  <jh@suse.cz>\n \n \t* doc/extend.texi (flatten attribute): Remove note about unit-at-a-time"}, {"sha": "3b3be13084e22d767df0512e241df949a17494b1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -1366,7 +1366,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \tif (!lowered)\n           tree_lowering_passes (fndecl);\n \tbitmap_obstack_initialize (NULL);\n-\tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)) && optimize)\n+\tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n \t  execute_pass_list (pass_early_local_passes.pass.sub);\n \tbitmap_obstack_release (NULL);\n \ttree_rest_of_compilation (fndecl);"}, {"sha": "fb76e1ec63084a3541f832ff46c56339ee55c4f6", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -1157,7 +1157,7 @@ Common Report Var(flag_tree_sra) Optimization\n Perform scalar replacement of aggregates\n \n ftree-ter\n-Common Report Var(flag_tree_ter) Optimization\n+Common Report Var(flag_tree_ter) Init(1) Optimization\n Replace temporary expressions in the SSA->normal pass\n \n ftree-lrs"}, {"sha": "bccbe70db7431513e5ae79a35040fd071ffa235b", "filename": "gcc/passes.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -542,12 +542,13 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_cleanup_cfg);\n       NEXT_PASS (pass_init_datastructures);\n       NEXT_PASS (pass_expand_omp);\n+\n+      NEXT_PASS (pass_referenced_vars);\n+      NEXT_PASS (pass_reset_cc_flags);\n+      NEXT_PASS (pass_build_ssa);\n       NEXT_PASS (pass_all_early_optimizations);\n \t{\n \t  struct opt_pass **p = &pass_all_early_optimizations.pass.sub;\n-\t  NEXT_PASS (pass_referenced_vars);\n-\t  NEXT_PASS (pass_reset_cc_flags);\n-\t  NEXT_PASS (pass_build_ssa);\n \t  NEXT_PASS (pass_early_warn_uninitialized);\n \t  NEXT_PASS (pass_rebuild_cgraph_edges);\n \t  NEXT_PASS (pass_early_inline);\n@@ -574,8 +575,8 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_tail_recursion);\n \t  NEXT_PASS (pass_convert_switch);\n           NEXT_PASS (pass_profile);\n-\t  NEXT_PASS (pass_release_ssa_names);\n \t}\n+      NEXT_PASS (pass_release_ssa_names);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n     }\n   NEXT_PASS (pass_ipa_increase_alignment);\n@@ -712,11 +713,12 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_tail_calls);\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_uncprop);\n-      NEXT_PASS (pass_del_ssa);\n-      NEXT_PASS (pass_nrv);\n-      NEXT_PASS (pass_mark_used_blocks);\n-      NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n     }\n+  NEXT_PASS (pass_del_ssa);\n+  NEXT_PASS (pass_nrv);\n+  NEXT_PASS (pass_mark_used_blocks);\n+  NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n+\n   NEXT_PASS (pass_warn_function_noreturn);\n   NEXT_PASS (pass_free_datastructures);\n   NEXT_PASS (pass_mudflap_2);"}, {"sha": "f277be91d0cee6aef10707920e8b60ed13321c33", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -226,12 +226,18 @@ tree_nrv (void)\n   return 0;\n }\n \n+static bool\n+gate_pass_return_slot (void)\n+{\n+  return optimize > 0;\n+}\n+\n struct gimple_opt_pass pass_nrv = \n {\n  {\n   GIMPLE_PASS,\n   \"nrv\",\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n+  gate_pass_return_slot,\t\t/* gate */\n   tree_nrv,\t\t\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */"}, {"sha": "8a0fe0c8ce356f54349826aaa3ad7042fcae7724", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -341,20 +341,12 @@ execute_init_datastructures (void)\n   return 0;\n }\n \n-/* Gate: initialize or not the SSA datastructures.  */\n-\n-static bool\n-gate_init_datastructures (void)\n-{\n-  return (optimize >= 1);\n-}\n-\n struct gimple_opt_pass pass_init_datastructures =\n {\n  {\n   GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n-  gate_init_datastructures,\t\t/* gate */\n+  NULL,\t\t\t\t\t/* gate */\n   execute_init_datastructures,\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */"}, {"sha": "a96029aa7c5170b31bafc115254a629c37d6f031", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -1297,6 +1297,24 @@ coalesce_partitions (var_map map, ssa_conflicts_p graph, coalesce_list_p cl,\n     }\n }\n \n+/* Returns a hash code for P.  */\n+\n+static hashval_t\n+hash_ssa_name_by_var (const void *p)\n+{\n+  const_tree n = (const_tree) p;\n+  return (hashval_t) htab_hash_pointer (SSA_NAME_VAR (n));\n+}\n+\n+/* Returns nonzero if P1 and P2 are equal.  */\n+\n+static int\n+eq_ssa_name_by_var (const void *p1, const void *p2)\n+{\n+  const_tree n1 = (const_tree) p1;\n+  const_tree n2 = (const_tree) p2;\n+  return SSA_NAME_VAR (n1) == SSA_NAME_VAR (n2);\n+}\n \n /* Reduce the number of copies by coalescing variables in the function.  Return\n    a partition map with the resulting coalesces.  */\n@@ -1310,10 +1328,42 @@ coalesce_ssa_name (void)\n   coalesce_list_p cl;\n   bitmap used_in_copies = BITMAP_ALLOC (NULL);\n   var_map map;\n+  unsigned int i;\n+  static htab_t ssa_name_hash;\n \n   cl = create_coalesce_list ();\n   map = create_outofssa_var_map (cl, used_in_copies);\n \n+  /* We need to coalesce all names originating same SSA_NAME_VAR\n+     so debug info remains undisturbed.  */\n+  if (!optimize)\n+    {\n+      ssa_name_hash = htab_create (10, hash_ssa_name_by_var,\n+      \t\t\t\t   eq_ssa_name_by_var, NULL);\n+      for (i = 1; i < num_ssa_names; i++)\n+\t{\n+\t  tree a = ssa_name (i);\n+\n+\t  if (a && SSA_NAME_VAR (a) && !DECL_ARTIFICIAL (SSA_NAME_VAR (a)))\n+\t    {\n+\t      tree *slot = (tree *) htab_find_slot (ssa_name_hash, a, INSERT);\n+\n+\t      if (!*slot)\n+\t\t*slot = a;\n+\t      else\n+\t\t{\n+\t\t  add_coalesce (cl, SSA_NAME_VERSION (a), SSA_NAME_VERSION (*slot),\n+\t\t\t\tMUST_COALESCE_COST - 1);\n+\t\t  bitmap_set_bit (used_in_copies, SSA_NAME_VERSION (a));\n+\t\t  bitmap_set_bit (used_in_copies, SSA_NAME_VERSION (*slot));\n+\t\t}\n+\t    }\n+\t}\n+      htab_delete (ssa_name_hash);\n+    }\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    dump_var_map (dump_file, map);\n+\n   /* Don't calculate live ranges for variables not in the coalesce list.  */\n   partition_view_bitmap (map, used_in_copies, true);\n   BITMAP_FREE (used_in_copies);"}, {"sha": "a5f75963da017093daddabb916ed5b5ab734f702", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -582,7 +582,8 @@ remove_unused_locals (void)\n   var_ann_t ann;\n   bitmap global_unused_vars = NULL;\n \n-  mark_scope_block_unused (DECL_INITIAL (current_function_decl));\n+  if (optimize)\n+    mark_scope_block_unused (DECL_INITIAL (current_function_decl));\n   /* Assume all locals are unused.  */\n   FOR_EACH_REFERENCED_VAR (t, rvi)\n     var_ann (t)->used = false;\n@@ -661,7 +662,8 @@ remove_unused_locals (void)\n \n \t  if (TREE_CODE (var) == VAR_DECL\n \t      && is_global_var (var)\n-\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n+\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var))\n+\t      && (optimize || DECL_ARTIFICIAL (var)))\n \t    *cell = TREE_CHAIN (*cell);\n \t  else\n \t    cell = &TREE_CHAIN (*cell);\n@@ -681,9 +683,11 @@ remove_unused_locals (void)\n \t&& TREE_CODE (t) != RESULT_DECL\n \t&& !(ann = var_ann (t))->used\n \t&& !ann->symbol_mem_tag\n-\t&& !TREE_ADDRESSABLE (t))\n+\t&& !TREE_ADDRESSABLE (t)\n+\t&& (optimize || DECL_ARTIFICIAL (t)))\n       remove_referenced_var (t);\n-  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n+  if (optimize)\n+    remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n }\n \n "}, {"sha": "e02867520c8d42e298af026a42da2a7b71ba89c3", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=c72321c9a7c869ae5cb7f5bbec1ea4e8c8d3c50a", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-flow.h\"\n #include \"tree-dump.h\"\n #include \"tree-ssa-live.h\"\n+#include \"flags.h\"\n \n \n /* Temporary Expression Replacement (TER)\n@@ -364,6 +365,8 @@ is_replaceable_p (tree stmt)\n   tree call_expr;\n   use_operand_p use_p;\n   tree def, use_stmt;\n+  location_t locus1, locus2;\n+  tree block1, block2;\n \n   /* Only consider modify stmts.  */\n   if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n@@ -386,6 +389,36 @@ is_replaceable_p (tree stmt)\n   if (bb_for_stmt (use_stmt) != bb_for_stmt (stmt))\n     return false;\n \n+  if (GIMPLE_STMT_P (stmt))\n+    {\n+      locus1 = GIMPLE_STMT_LOCUS (stmt);\n+      block1 = GIMPLE_STMT_BLOCK (stmt);\n+    }\n+  else\n+    {\n+      locus1 = *EXPR_LOCUS (stmt);\n+      block1 = TREE_BLOCK (stmt);\n+    }\n+  if (GIMPLE_STMT_P (use_stmt))\n+    {\n+      locus2 = GIMPLE_STMT_LOCUS (use_stmt);\n+      block2 = GIMPLE_STMT_BLOCK (use_stmt);\n+    }\n+  if (TREE_CODE (use_stmt) == PHI_NODE)\n+    {\n+      locus2 = 0;\n+      block2 = NULL_TREE;\n+    }\n+  else\n+    {\n+      locus2 = *EXPR_LOCUS (use_stmt);\n+      block2 = TREE_BLOCK (use_stmt);\n+    }\n+\n+  if (!optimize\n+      && ((locus1 && locus1 != locus2) || (block1 && block1 != block2)))\n+    return false;\n+\n   /* Used in this block, but at the TOP of the block, not the end.  */\n   if (TREE_CODE (use_stmt) == PHI_NODE)\n     return false;\n@@ -394,6 +427,10 @@ is_replaceable_p (tree stmt)\n   if (!(ZERO_SSA_OPERANDS (stmt, SSA_OP_VDEF)))\n     return false;\n \n+  /* Without alias info we can't move around loads.  */\n+  if (stmt_ann (stmt)->references_memory && !optimize)\n+    return false;\n+\n   /* Float expressions must go through memory if float-store is on.  */\n   if (flag_float_store \n       && FLOAT_TYPE_P (TREE_TYPE (GENERIC_TREE_OPERAND (stmt, 1))))\n@@ -412,7 +449,6 @@ is_replaceable_p (tree stmt)\n   /* Leave any stmt with volatile operands alone as well.  */\n   if (stmt_ann (stmt)->has_volatile_ops)\n     return false;\n-  \n \n   return true;\n }"}]}