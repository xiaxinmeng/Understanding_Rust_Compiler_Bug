{"sha": "768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4YmYwYWI0ZDdiZDhjNGJiOGE2ZDcwMjkwZWE4OTA1MTdkNGFjOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-10-18T00:22:58Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-10-18T00:22:58Z"}, "message": "README: Describe new compat directory.\n\n2002-10-17  Janis Johnson  <janis187@us.ibm.com>\n\n\t* g++.dg/README: Describe new compat directory.\n\t* g++.dg/dg.exp: Skip tests in compat directory.\n\t* README.compat: New file.\n\t* lib/compat.exp: New expect script.\n\t* g++.dg/compat: New test directory.\n\t* g++.dg/compat/compat.exp: New expect script.\n\t* g++.dg/compat/abi: New test directory.\n\t* g++.dg/compat/abi/bitfield1_x.C, g++.dg/compat/abi/bitfield1_main.C,\n\tg++.dg/compat/abi/bitfield1_y.C, g++.dg/compat/abi/bitfield1.h,\n\tg++.dg/compat/abi/bitfield2_x.C, g++.dg/compat/abi/bitfield2_main.C,\n\tg++.dg/compat/abi/bitfield2_y.C, g++.dg/compat/abi/bitfield2.h,\n\tg++.dg/compat/abi/vbase8-10_x.C, g++.dg/compat/abi/vbase8-10_main.C,\n\tg++.dg/compat/abi/vbase8-10_y.C, g++.dg/compat/abi/vbase8-10.h,\n\tg++.dg/compat/abi/vbase8-21_x.C, g++.dg/compat/abi/vbase8-21_main.C,\n\tg++.dg/compat/abi/vbase8-21_y.C, g++.dg/compat/abi/vbase8-21.h,\n\tg++.dg/compat/abi/vbase8-22_x.C, g++.dg/compat/abi/vbase8-22_main.C,\n\tg++.dg/compat/abi/vbase8-22_y.C, g++.dg/compat/abi/vbase8-22.h,\n\tg++.dg/compat/abi/vbase8-4_x.C, g++.dg/compat/abi/vbase8-4_main.C,\n\tg++.dg/compat/abi/vbase8-4_y.C, g++.dg/compat/abi/vbase8-4.h: New files.\n\t* g++.dg/compat/break: New test directory.\n\t* g++.dg/compat/break/empty6_x.C, g++.dg/compat/break/empty6_main.C,\n\tg++.dg/compat/break/empty6_y.C, g++.dg/compat/break/empty6.h,\n\tg++.dg/compat/break/vbase10_x.C, g++.dg/compat/break/vbase10_main.C,\n\tg++.dg/compat/break/vbase10_y.C, g++.dg/compat/break/vbase10.h,\n\tg++.dg/compat/break/vbase11_x.C, g++.dg/compat/break/vbase11_main.C,\n\tg++.dg/compat/break/vbase11_y.C, g++.dg/compat/break/vbase11.h,\n\tg++.dg/compat/break/bitfield7_x.C, g++.dg/compat/break/bitfield7_main.C,\n\tg++.dg/compat/break/bitfield7_y.C, g++.dg/compat/break/bitfield7.h,\n\tg++.dg/compat/break/bitfield5_x.C, g++.dg/compat/break/bitfield5_main.C,\n\tg++.dg/compat/break/bitfield5_y.C, g++.dg/compat/break/bitfield5.h,\n\tg++.dg/compat/break/README: New files.\n\t* g++.dg/compat/eh: New test directory.\n\t* g++.dg/compat/eh/ctor1_x.C, g++.dg/compat/eh/ctor1_main.C,\n\tg++.dg/compat/eh/ctor1_y.C, g++.dg/compat/eh/ctor1.h,\n\tg++.dg/compat/eh/ctor2_x.C, g++.dg/compat/eh/ctor2_main.C,\n\tg++.dg/compat/eh/ctor2_y.C, g++.dg/compat/eh/ctor2.h,\n\tg++.dg/compat/eh/dtor1_x.C, g++.dg/compat/eh/dtor1_main.C,\n\tg++.dg/compat/eh/dtor1_y.C, g++.dg/compat/eh/dtor1.h,\n\tg++.dg/compat/eh/filter1_x.C, g++.dg/compat/eh/filter1_main.C,\n\tg++.dg/compat/eh/filter1_y.C, g++.dg/compat/eh/filter1.h,\n\tg++.dg/compat/eh/filter2_x.C, g++.dg/compat/eh/filter2_main.C,\n\tg++.dg/compat/eh/filter2_y.C,\n\tg++.dg/compat/eh/new1_x.C, g++.dg/compat/eh/new1_main.C,\n\tg++.dg/compat/eh/new1_y.C,\n\tg++.dg/compat/eh/nrv1_x.C, g++.dg/compat/eh/nrv1_main.C,\n\tg++.dg/compat/eh/nrv1_y.C, g++.dg/compat/eh/nrv1.h,\n\tg++.dg/compat/eh/spec3_x.C, g++.dg/compat/eh/spec3_main.C,\n\tg++.dg/compat/eh/spec3_y.C, g++.dg/compat/eh/spec3.h,\n\tg++.dg/compat/eh/template1_x.C, g++.dg/compat/eh/template1_main.C,\n\tg++.dg/compat/eh/template1_y.C, g++.dg/compat/eh/template1.h,\n\tg++.dg/compat/eh/unexpected1_x.C, g++.dg/compat/eh/unexpected1_main.C,\n\tg++.dg/compat/eh/unexpected1_y.C: New files.\n\t* g++.dg/compat/init: New test directory.\n\t* g++.dg/compat/init/array5_x.C, g++.dg/compat/init/array5_main.C,\n\tg++.dg/compat/init/array5_y.C,\n\tg++.dg/compat/init/byval1_x.C, g++.dg/compat/init/byval1_main.C,\n\tg++.dg/compat/init/byval1_y.C, g++.dg/compat/init/byval1.h,\n\tg++.dg/compat/init/dtor1_x.C, g++.dg/compat/init/dtor1_main.C,\n\tg++.dg/compat/init/dtor1_y.C, g++.dg/compat/init/dtor1.h,\n\tg++.dg/compat/init/elide1_x.C, g++.dg/compat/init/elide1_main.C,\n\tg++.dg/compat/init/elide1_y.C, g++.dg/compat/init/elide1.h,\n\tg++.dg/compat/init/init-ref2_x.C, g++.dg/compat/init/init-ref2_main.C,\n\tg++.dg/compat/init/init-ref2_y.C: New files.\n\nFrom-SVN: r58266", "tree": {"sha": "da6b04741aa409eb1dceee4f2ad3003d6c8d1007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da6b04741aa409eb1dceee4f2ad3003d6c8d1007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/comments", "author": null, "committer": null, "parents": [{"sha": "fa870451062c51b650ab85dc501306e32df3cf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa870451062c51b650ab85dc501306e32df3cf9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa870451062c51b650ab85dc501306e32df3cf9b"}], "stats": {"total": 2450, "additions": 2450, "deletions": 0}, "files": [{"sha": "f718424a935be15a7e5ec8e1f53bc7032e635c33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -1,3 +1,69 @@\n+2002-10-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* g++.dg/README: Describe new compat directory.\n+\t* g++.dg/dg.exp: Skip tests in compat directory.\n+\t* README.compat: New file.\n+\t* lib/compat.exp: New expect script.\n+\t* g++.dg/compat: New test directory.\n+\t* g++.dg/compat/compat.exp: New expect script.\n+\t* g++.dg/compat/abi: New test directory.\n+\t* g++.dg/compat/abi/bitfield1_x.C, g++.dg/compat/abi/bitfield1_main.C,\n+\tg++.dg/compat/abi/bitfield1_y.C, g++.dg/compat/abi/bitfield1.h,\n+\tg++.dg/compat/abi/bitfield2_x.C, g++.dg/compat/abi/bitfield2_main.C,\n+\tg++.dg/compat/abi/bitfield2_y.C, g++.dg/compat/abi/bitfield2.h,\n+\tg++.dg/compat/abi/vbase8-10_x.C, g++.dg/compat/abi/vbase8-10_main.C,\n+\tg++.dg/compat/abi/vbase8-10_y.C, g++.dg/compat/abi/vbase8-10.h,\n+\tg++.dg/compat/abi/vbase8-21_x.C, g++.dg/compat/abi/vbase8-21_main.C,\n+\tg++.dg/compat/abi/vbase8-21_y.C, g++.dg/compat/abi/vbase8-21.h,\n+\tg++.dg/compat/abi/vbase8-22_x.C, g++.dg/compat/abi/vbase8-22_main.C,\n+\tg++.dg/compat/abi/vbase8-22_y.C, g++.dg/compat/abi/vbase8-22.h,\n+\tg++.dg/compat/abi/vbase8-4_x.C, g++.dg/compat/abi/vbase8-4_main.C,\n+\tg++.dg/compat/abi/vbase8-4_y.C, g++.dg/compat/abi/vbase8-4.h: New files.\n+\t* g++.dg/compat/break: New test directory.\n+\t* g++.dg/compat/break/empty6_x.C, g++.dg/compat/break/empty6_main.C,\n+\tg++.dg/compat/break/empty6_y.C, g++.dg/compat/break/empty6.h,\n+\tg++.dg/compat/break/vbase10_x.C, g++.dg/compat/break/vbase10_main.C,\n+\tg++.dg/compat/break/vbase10_y.C, g++.dg/compat/break/vbase10.h,\n+\tg++.dg/compat/break/vbase11_x.C, g++.dg/compat/break/vbase11_main.C,\n+\tg++.dg/compat/break/vbase11_y.C, g++.dg/compat/break/vbase11.h,\n+\tg++.dg/compat/break/bitfield7_x.C, g++.dg/compat/break/bitfield7_main.C,\n+\tg++.dg/compat/break/bitfield7_y.C, g++.dg/compat/break/bitfield7.h,\n+\tg++.dg/compat/break/bitfield5_x.C, g++.dg/compat/break/bitfield5_main.C,\n+\tg++.dg/compat/break/bitfield5_y.C, g++.dg/compat/break/bitfield5.h,\n+\tg++.dg/compat/break/README: New files.\n+\t* g++.dg/compat/eh: New test directory.\n+\t* g++.dg/compat/eh/ctor1_x.C, g++.dg/compat/eh/ctor1_main.C,\n+\tg++.dg/compat/eh/ctor1_y.C, g++.dg/compat/eh/ctor1.h,\n+\tg++.dg/compat/eh/ctor2_x.C, g++.dg/compat/eh/ctor2_main.C,\n+\tg++.dg/compat/eh/ctor2_y.C, g++.dg/compat/eh/ctor2.h,\n+\tg++.dg/compat/eh/dtor1_x.C, g++.dg/compat/eh/dtor1_main.C,\n+\tg++.dg/compat/eh/dtor1_y.C, g++.dg/compat/eh/dtor1.h,\n+\tg++.dg/compat/eh/filter1_x.C, g++.dg/compat/eh/filter1_main.C,\n+\tg++.dg/compat/eh/filter1_y.C, g++.dg/compat/eh/filter1.h,\n+\tg++.dg/compat/eh/filter2_x.C, g++.dg/compat/eh/filter2_main.C,\n+\tg++.dg/compat/eh/filter2_y.C,\n+\tg++.dg/compat/eh/new1_x.C, g++.dg/compat/eh/new1_main.C,\n+\tg++.dg/compat/eh/new1_y.C,\n+\tg++.dg/compat/eh/nrv1_x.C, g++.dg/compat/eh/nrv1_main.C,\n+\tg++.dg/compat/eh/nrv1_y.C, g++.dg/compat/eh/nrv1.h,\n+\tg++.dg/compat/eh/spec3_x.C, g++.dg/compat/eh/spec3_main.C,\n+\tg++.dg/compat/eh/spec3_y.C, g++.dg/compat/eh/spec3.h,\n+\tg++.dg/compat/eh/template1_x.C, g++.dg/compat/eh/template1_main.C,\n+\tg++.dg/compat/eh/template1_y.C, g++.dg/compat/eh/template1.h,\n+\tg++.dg/compat/eh/unexpected1_x.C, g++.dg/compat/eh/unexpected1_main.C,\n+\tg++.dg/compat/eh/unexpected1_y.C: New files.\n+\t* g++.dg/compat/init: New test directory.\n+\t* g++.dg/compat/init/array5_x.C, g++.dg/compat/init/array5_main.C,\n+\tg++.dg/compat/init/array5_y.C,\n+\tg++.dg/compat/init/byval1_x.C, g++.dg/compat/init/byval1_main.C,\n+\tg++.dg/compat/init/byval1_y.C, g++.dg/compat/init/byval1.h,\n+\tg++.dg/compat/init/dtor1_x.C, g++.dg/compat/init/dtor1_main.C,\n+\tg++.dg/compat/init/dtor1_y.C, g++.dg/compat/init/dtor1.h,\n+\tg++.dg/compat/init/elide1_x.C, g++.dg/compat/init/elide1_main.C,\n+\tg++.dg/compat/init/elide1_y.C, g++.dg/compat/init/elide1.h,\n+\tg++.dg/compat/init/init-ref2_x.C, g++.dg/compat/init/init-ref2_main.C,\n+\tg++.dg/compat/init/init-ref2_y.C: New files.\n+\n 2002-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7584"}, {"sha": "da2340a90506464440536b5e830ddf1036f7101d", "filename": "gcc/testsuite/README.compat", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2FREADME.compat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2FREADME.compat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.compat?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,72 @@\n+Compatibility test suites that use lib/compat.exp test interoperability\n+of two compilers that follow the same ABI, or of multiple sets of\n+compiler options that are not intended to affect binary compatibility.\n+They do not test conformance to a formal ABI; they check that things are\n+done consistently, not that they are done correctly.  They are meant to\n+complement ABI test suites, not to replace them.\n+\n+Each test in these suites splits up functionality into two source files\n+that can be compiled with two different versions of GCC and with two\n+sets of compiler options.\n+\n+  Override the default pairs of compiler options (from compat.exp) by\n+  defining the environment variable COMPAT_OPTIONS as:\n+  COMPAT_OPTIONS=\"[list [list {tst1} {alt1}]...[list {tstn} {altn}]]\"\n+  where tsti and alti are lists of options, with \"tsti\" used by the\n+  compiler under test and \"alti\" used by the alternate compiler. The\n+  characters \"[\", \"{\", \"}\", and \"]\" are really in the string, as in\n+  \"[list [list {-g} {-O3}] [list {-O3} {-g}]]\".\n+\n+  To use an alternate compiler, define the environment variable for the\n+  language you're testing; e.g., for C++ define ALT_CXX_UNDER_TEST to be\n+  the full pathname of an installed compiler.  That will be written to\n+  the site.exp file used by DejaGNU.  The default is to build each test\n+  with the compiler under test using the first of each pair of compiler\n+  options from COMPAT_OPTIONS.  When ALT_CXX_UNDER_TEST is \"same\", each\n+  test is built using the compiler under test but with combinations of\n+  the options from COMPAT_OPTIONS.\n+\n+A test that fails when the pieces are compiled with different compilers\n+but passes when the pieces are compiled with the same compiler\n+demonstrates incompatibility of the generated code or runtime support.\n+A test that fails for the alternate compiler but passes for the compiler\n+under test probably tests for a fix that is not present in the alternate\n+compiler.\n+\n+There's a lot more that can be done with these tests.\n+\n+  Increase the robustness of the existing tests:\n+\n+   -  recognize target triples in dg-options strings in test files\n+\n+   -  continue to split up tests that rely on language runtime support\n+      and add them to this set of tests\n+\n+   -  make sure they work for testing with a simulator\n+\n+   -  multilibs support?\n+\n+  Build test pieces into more combinations that will be likely to find\n+  unusual errors:\n+\n+   -  link using the alternate compiler; this requires support for\n+      LD_LIBRARY_PATH for the alternate compiler in the support for each\n+      language\n+\n+   -  build pieces of the test into shared libraries; this requires\n+      support for LD_LIBRARY_PATH for the alternate compiler, and\n+      knowledge about how to build a shared library for each target\n+\n+   -  build pieces of the test into static libraries; this requires\n+      knowledge about how to build a static library for each target\n+\n+  Continue to add tests to g++.dg/compat, based on existing tests for\n+  language runtime support and for test cases in PRs that didn't used to\n+  fit into the test suite.\n+\n+  Set up similar tests in libstdc++-v3/testsuite.\n+\n+  Set up similar tests for additional languages and libraries.\n+\n+Janis Johnson, <janis187@us.ibm.com>\n+October 2002"}, {"sha": "07e7572a71d12f7e9621b21f7a1fc2d2370e04e9", "filename": "gcc/testsuite/g++.dg/README", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FREADME?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -1,6 +1,7 @@\n Subdirectories:\n \n abi\t Tests for ABI compatibility -- mangling, object layout, etc.\n+compat   Tests for binary compatibility (consistency, not ABI conformance)\n cpp\t Tests for the preprocessor.\n eh\t Tests for exception handling.\n expr     Tests for expressions."}, {"sha": "09d64162ff3f423bbd1b94fcc791f7d53d6bd230", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,10 @@\n+typedef int Int;\n+typedef signed int SInt;\n+typedef unsigned int UInt;\n+\n+struct A\n+{\n+  SInt bitS : 1;\t// signed\n+  UInt bitU : 1;\t// unsigned\n+  Int bit : 1;\t\t// signedness by -f{signed,unsigned}-bitfields\n+};"}, {"sha": "cdb7a45a7440ac8ff27b52e4330389fced1a0af6", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void bitfield1_x (void);\n+\n+int\n+main ()\n+{\n+  bitfield1_x ();\n+}"}, {"sha": "1447655a33e7e49a53ab213787a71b4ca10b9ded", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_x.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+#include \"bitfield1.h\"\n+\n+extern void bitfield1_y (A& a);\n+\n+void bitfield1_x ()\n+{\n+  A a;\n+\n+  a.bitS = 1;\n+  a.bitU = 1;\n+  a.bit = 1;\n+\n+  bitfield1_y (a);\n+}"}, {"sha": "7ca5d4b3f5139ca515fa3a66814d14b016606ef6", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_y.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+extern \"C\" void abort (void);\n+\n+#include \"bitfield1.h\"\n+\n+void bitfield1_y (A& a)\n+{\n+  if (a.bitS != -1)\n+    abort ();\n+  if (a.bitU != 1)\n+    abort ();\n+  if (a.bit != 1)\n+    abort ();\n+}"}, {"sha": "09d64162ff3f423bbd1b94fcc791f7d53d6bd230", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,10 @@\n+typedef int Int;\n+typedef signed int SInt;\n+typedef unsigned int UInt;\n+\n+struct A\n+{\n+  SInt bitS : 1;\t// signed\n+  UInt bitU : 1;\t// unsigned\n+  Int bit : 1;\t\t// signedness by -f{signed,unsigned}-bitfields\n+};"}, {"sha": "df74037b66b686275d63e5323f2e8c5b41b7b37f", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void bitfield1_x (void);\n+\n+int\n+main ()\n+{\n+  bitfield1_x ();\n+}"}, {"sha": "1447655a33e7e49a53ab213787a71b4ca10b9ded", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_x.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+#include \"bitfield1.h\"\n+\n+extern void bitfield1_y (A& a);\n+\n+void bitfield1_x ()\n+{\n+  A a;\n+\n+  a.bitS = 1;\n+  a.bitU = 1;\n+  a.bit = 1;\n+\n+  bitfield1_y (a);\n+}"}, {"sha": "6119544db16dc4bf32d5b2ecef0fd9815835a24d", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_y.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+extern \"C\" void abort (void);\n+\n+#include \"bitfield1.h\"\n+\n+void bitfield1_y (A& a)\n+{\n+  if (a.bitS != -1)\n+    abort ();\n+  if (a.bitU != 1)\n+    abort ();\n+  if (a.bit != -1)\n+    abort ();\n+}"}, {"sha": "aee0b6b49a51f985442b49b46fdee20311ef0203", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,54 @@\n+class C0\n+{ public: int i0; };\n+class C1\n+ :  public C0\n+{ public: int i1; };\n+class C2\n+ :  public C1\n+ ,  virtual public C0\n+{ public: int i2; };\n+class C3\n+ :  public C1\n+ ,  public C2\n+ ,  virtual public C0\n+{ public: int i3; };\n+class C4\n+ :  virtual public C1\n+ ,  virtual public C0\n+ ,  virtual public C3\n+ ,  public C2\n+{ public: int i4; };\n+class C5\n+ :  public C3\n+ ,  virtual public C0\n+ ,  virtual public C2\n+{ public: int i5; };\n+class C6\n+ :  public C1\n+ ,  public C2\n+ ,  virtual public C5\n+ ,  virtual public C3\n+ ,  virtual public C0\n+{ public: int i6; };\n+class C7\n+ :  public C1\n+ ,  virtual public C5\n+ ,  virtual public C4\n+ ,  virtual public C2\n+ ,  virtual public C0\n+ ,  virtual public C6\n+{ public: int i7; };\n+class C8\n+ :  virtual public C4\n+ ,  public C3\n+ ,  public C0\n+ ,  virtual public C7\n+ ,  virtual public C6\n+{ public: int i8; };\n+class C9\n+ :  virtual public C0\n+ ,  public C4\n+ ,  public C8\n+ ,  public C1\n+ ,  public C6\n+{ public: int i9; };"}, {"sha": "606c0fe2f93e34003e52f9fb54406addb2bcdbd0", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10_main.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -w }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Jul 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+// Origin stefan@space.twc.de\n+// Bug 3145 case 10. Horribly complicated class hierarchy\n+\n+extern void vbase8_10_x (void);\n+\n+int\n+main ()\n+{\n+  vbase8_10_x ();\n+}"}, {"sha": "18e78fcc59ca3c918479a1dfcbca6ceb5f775887", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10_x.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,49 @@\n+#include \"vbase8-10.h\"\n+\n+extern void check_C0 (C0&, int);\n+extern void check_C1 (C1&, int);\n+extern void check_C2 (C2&, int);\n+extern void check_C3 (C3&, int);\n+extern void check_C4 (C4&, int);\n+extern void check_C5 (C5&, int);\n+extern void check_C6 (C6&, int);\n+extern void check_C7 (C7&, int);\n+extern void check_C8 (C8&, int);\n+extern void check_C9 (C9&, int);\n+\n+void\n+vbase8_10_x (void)\n+{\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  C9 c9;\n+\n+  c0.i0 = 0;\n+  c1.i1 = 101;\n+  c2.i2 = 202;\n+  c3.i3 = 303;\n+  c4.i4 = 404;\n+  c5.i5 = 505;\n+  c6.i6 = 606;\n+  c7.i7 = 707;\n+  c8.i8 = 808;\n+  c9.i9 = 909;\n+\n+  check_C0 (c0, 0);\n+  check_C1 (c1, 101);\n+  check_C2 (c2, 202);\n+  check_C3 (c3, 303);\n+  check_C4 (c4, 404);\n+  check_C5 (c5, 505);\n+  check_C6 (c6, 606);\n+  check_C7 (c7, 707);\n+  check_C8 (c8, 808);\n+  check_C9 (c9, 909);\n+}"}, {"sha": "1d6c8261668fbb84f69e1cbee9e1e7b752918e8a", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10_y.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,63 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase8-10.h\"\n+\n+void check_C0 (C0 &x, int i)\n+{\n+  if (x.i0 != i)\n+    abort ();\n+}\n+\n+void check_C1 (C1 &x, int i)\n+{\n+  if (x.i1 != i)\n+    abort ();\n+}\n+\n+void check_C2 (C2 &x, int i)\n+{\n+  if (x.i2 != i)\n+    abort ();\n+}\n+\n+void check_C3 (C3 &x, int i)\n+{\n+  if (x.i3 != i)\n+    abort ();\n+}\n+\n+void check_C4 (C4 &x, int i)\n+{\n+  if (x.i4 != i)\n+    abort ();\n+}\n+\n+void check_C5 (C5 &x, int i)\n+{\n+  if (x.i5 != i)\n+    abort ();\n+}\n+\n+void check_C6 (C6 &x, int i)\n+{\n+  if (x.i6 != i)\n+    abort ();\n+}\n+\n+void check_C7 (C7 &x, int i)\n+{\n+  if (x.i7 != i)\n+    abort ();\n+}\n+\n+void check_C8 (C8 &x, int i)\n+{\n+  if (x.i8 != i)\n+    abort ();\n+}\n+\n+void check_C9 (C9 &x, int i)\n+{\n+  if (x.i9 != i)\n+    abort ();\n+}"}, {"sha": "cd510e2ce8556bef4de7c66643318421c7ec99b5", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,54 @@\n+class C0\n+{ public: int i0; };\n+class C1\n+ :  virtual public C0\n+{ public: int i1; };\n+class C2\n+ :  virtual public C1\n+ ,  virtual public C0\n+{ public: int i2; };\n+class C3\n+ :  virtual public C2\n+ ,  virtual public C1\n+{ public: int i3; };\n+class C4\n+ :  virtual public C2\n+ ,  public C0\n+ ,  public C1\n+{ public: int i4; };\n+class C5\n+ :  virtual public C0\n+ ,  public C2\n+ ,  virtual public C1\n+ ,  virtual public C3\n+ ,  virtual public C4\n+{ public: int i5; };\n+class C6\n+ :  virtual public C1\n+ ,  virtual public C3\n+ ,  public C0\n+ ,  public C2\n+ ,  virtual public C4\n+{ public: int i6; };\n+class C7\n+ :  virtual public C5\n+ ,  public C2\n+ ,  public C6\n+ ,  virtual public C0\n+ ,  public C3\n+{ public: int i7; };\n+class C8\n+ :  virtual public C5\n+ ,  public C7\n+ ,  virtual public C0\n+ ,  virtual public C2\n+ ,  virtual public C6\n+{ public: int i8; };\n+class C9\n+ :  virtual public C2\n+ ,  virtual public C4\n+ ,  public C1\n+ ,  virtual public C0\n+ ,  public C7\n+ ,  public C5\n+{ public: int i9; };"}, {"sha": "16a0a3cd3c7933c11d1ac322663911241e2ef36c", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21_main.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -w }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Jul 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+// Origin stefan@space.twc.de\n+// Bug 3145 case 10. Horribly complicated class hierarchy\n+\n+extern void vbase8_21_x (void);\n+\n+int\n+main ()\n+{\n+  vbase8_21_x ();\n+}"}, {"sha": "986fcfbe5e4bad9a17a45fbf1060b817c21b0bf8", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21_x.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,49 @@\n+#include \"vbase8-21.h\"\n+\n+extern void check_C0 (C0&, int);\n+extern void check_C1 (C1&, int);\n+extern void check_C2 (C2&, int);\n+extern void check_C3 (C3&, int);\n+extern void check_C4 (C4&, int);\n+extern void check_C5 (C5&, int);\n+extern void check_C6 (C6&, int);\n+extern void check_C7 (C7&, int);\n+extern void check_C8 (C8&, int);\n+extern void check_C9 (C9&, int);\n+\n+void\n+vbase8_21_x (void)\n+{\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  C9 c9;\n+\n+  c0.i0 = 0;\n+  c1.i1 = 101;\n+  c2.i2 = 202;\n+  c3.i3 = 303;\n+  c4.i4 = 404;\n+  c5.i5 = 505;\n+  c6.i6 = 606;\n+  c7.i7 = 707;\n+  c8.i8 = 808;\n+  c9.i9 = 909;\n+\n+  check_C0 (c0, 0);\n+  check_C1 (c1, 101);\n+  check_C2 (c2, 202);\n+  check_C3 (c3, 303);\n+  check_C4 (c4, 404);\n+  check_C5 (c5, 505);\n+  check_C6 (c6, 606);\n+  check_C7 (c7, 707);\n+  check_C8 (c8, 808);\n+  check_C9 (c9, 909);\n+}"}, {"sha": "0bd76246d4d2698f4b5c6d34f03efc7a58087c2f", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21_y.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,63 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase8-21.h\"\n+\n+void check_C0 (C0 &x, int i)\n+{\n+  if (x.i0 != i)\n+    abort ();\n+}\n+\n+void check_C1 (C1 &x, int i)\n+{\n+  if (x.i1 != i)\n+    abort ();\n+}\n+\n+void check_C2 (C2 &x, int i)\n+{\n+  if (x.i2 != i)\n+    abort ();\n+}\n+\n+void check_C3 (C3 &x, int i)\n+{\n+  if (x.i3 != i)\n+    abort ();\n+}\n+\n+void check_C4 (C4 &x, int i)\n+{\n+  if (x.i4 != i)\n+    abort ();\n+}\n+\n+void check_C5 (C5 &x, int i)\n+{\n+  if (x.i5 != i)\n+    abort ();\n+}\n+\n+void check_C6 (C6 &x, int i)\n+{\n+  if (x.i6 != i)\n+    abort ();\n+}\n+\n+void check_C7 (C7 &x, int i)\n+{\n+  if (x.i7 != i)\n+    abort ();\n+}\n+\n+void check_C8 (C8 &x, int i)\n+{\n+  if (x.i8 != i)\n+    abort ();\n+}\n+\n+void check_C9 (C9 &x, int i)\n+{\n+  if (x.i9 != i)\n+    abort ();\n+}"}, {"sha": "e19e93eaeadad2830905e6668f8c2c5ec646da19", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,59 @@\n+class C0\n+{ public: int i0; };\n+class C1\n+ :  public C0\n+{ public: int i1; };\n+class C2\n+ :  public C1\n+ ,  virtual public C0\n+{ public: int i2; };\n+class C3\n+ :  virtual public C0\n+ ,  virtual public C2\n+ ,  virtual public C1\n+{ public: int i3; };\n+class C4\n+ :  virtual public C2\n+ ,  public C1\n+ ,  virtual public C3\n+ ,  public C0\n+{ public: int i4; };\n+class C5\n+ :  virtual public C0\n+ ,  virtual public C4\n+ ,  public C1\n+ ,  virtual public C2\n+ ,  virtual public C3\n+{ public: int i5; };\n+class C6\n+ :  public C0\n+ ,  virtual public C1\n+ ,  public C5\n+ ,  public C2\n+ ,  virtual public C3\n+ ,  virtual public C4\n+{ public: int i6; };\n+class C7\n+ :  virtual public C1\n+ ,  public C5\n+ ,  virtual public C6\n+ ,  virtual public C4\n+ ,  virtual public C3\n+ ,  virtual public C0\n+{ public: int i7; };\n+class C8\n+ :  virtual public C6\n+ ,  virtual public C1\n+ ,  virtual public C2\n+ ,  public C3\n+ ,  virtual public C4\n+{ public: int i8; };\n+class C9\n+ :  public C4\n+ ,  virtual public C2\n+ ,  virtual public C8\n+ ,  public C3\n+ ,  public C1\n+ ,  public C6\n+ ,  public C5\n+{ public: int i9; };"}, {"sha": "6455a2efcb9b8fa886f91800310d3524957ef6d5", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22_main.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -w }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 20 Nov 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+// Origin stefan@space.twc.de\n+// Bug 3145 case 22. Horribly complicated class hierarchy\n+\n+extern void vbase8_22_x (void);\n+\n+int\n+main ()\n+{\n+  vbase8_22_x ();\n+}"}, {"sha": "5d3eacf7c9015924adc5f9da360bffd1cd4a64d2", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22_x.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,49 @@\n+#include \"vbase8-22.h\"\n+\n+extern void check_C0 (C0&, int);\n+extern void check_C1 (C1&, int);\n+extern void check_C2 (C2&, int);\n+extern void check_C3 (C3&, int);\n+extern void check_C4 (C4&, int);\n+extern void check_C5 (C5&, int);\n+extern void check_C6 (C6&, int);\n+extern void check_C7 (C7&, int);\n+extern void check_C8 (C8&, int);\n+extern void check_C9 (C9&, int);\n+\n+void\n+vbase8_22_x (void)\n+{\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  C9 c9;\n+\n+  c0.i0 = 0;\n+  c1.i1 = 101;\n+  c2.i2 = 202;\n+  c3.i3 = 303;\n+  c4.i4 = 404;\n+  c5.i5 = 505;\n+  c6.i6 = 606;\n+  c7.i7 = 707;\n+  c8.i8 = 808;\n+  c9.i9 = 909;\n+\n+  check_C0 (c0, 0);\n+  check_C1 (c1, 101);\n+  check_C2 (c2, 202);\n+  check_C3 (c3, 303);\n+  check_C4 (c4, 404);\n+  check_C5 (c5, 505);\n+  check_C6 (c6, 606);\n+  check_C7 (c7, 707);\n+  check_C8 (c8, 808);\n+  check_C9 (c9, 909);\n+}"}, {"sha": "293ed100be4af5d327170618a9367239e95c1897", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22_y.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,63 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase8-22.h\"\n+\n+void check_C0 (C0 &x, int i)\n+{\n+  if (x.i0 != i)\n+    abort ();\n+}\n+\n+void check_C1 (C1 &x, int i)\n+{\n+  if (x.i1 != i)\n+    abort ();\n+}\n+\n+void check_C2 (C2 &x, int i)\n+{\n+  if (x.i2 != i)\n+    abort ();\n+}\n+\n+void check_C3 (C3 &x, int i)\n+{\n+  if (x.i3 != i)\n+    abort ();\n+}\n+\n+void check_C4 (C4 &x, int i)\n+{\n+  if (x.i4 != i)\n+    abort ();\n+}\n+\n+void check_C5 (C5 &x, int i)\n+{\n+  if (x.i5 != i)\n+    abort ();\n+}\n+\n+void check_C6 (C6 &x, int i)\n+{\n+  if (x.i6 != i)\n+    abort ();\n+}\n+\n+void check_C7 (C7 &x, int i)\n+{\n+  if (x.i7 != i)\n+    abort ();\n+}\n+\n+void check_C8 (C8 &x, int i)\n+{\n+  if (x.i8 != i)\n+    abort ();\n+}\n+\n+void check_C9 (C9 &x, int i)\n+{\n+  if (x.i9 != i)\n+    abort ();\n+}"}, {"sha": "b183fbe4f9bdb31f75c6bac992d51a6853fd2c5b", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,57 @@\n+class C0\n+{ public: int i0; };\n+class C1\n+ :  virtual public C0\n+{ public: int i1; };\n+class C2\n+ :  public C0\n+ ,  public C1\n+{ public: int i2; };\n+class C3\n+ :  virtual public C0\n+ ,  public C1\n+ ,  public C2\n+{ public: int i3; };\n+class C4\n+ :  public C2\n+ ,  public C3\n+ ,  virtual public C1\n+ ,  virtual public C0\n+{ public: int i4; };\n+class C5\n+ :  virtual public C2\n+ ,  public C1\n+ ,  public C0\n+{ public: int i5; };\n+class C6\n+ :  virtual public C0\n+ ,  virtual public C5\n+ ,  public C1\n+ ,  public C3\n+ ,  public C4\n+{ public: int i6; };\n+class C7\n+ :  public C6\n+ ,  virtual public C0\n+ ,  public C1\n+ ,  public C2\n+ ,  virtual public C4\n+{ public: int i7; };\n+class C8\n+ :  public C2\n+ ,  virtual public C6\n+ ,  virtual public C7\n+ ,  public C5\n+ ,  public C3\n+ ,  virtual public C4\n+{ public: int i8; };\n+class C9\n+ :  public C5\n+ ,  virtual public C3\n+ ,  virtual public C8\n+ ,  public C0\n+ ,  public C2\n+ ,  public C7\n+ ,  public C6\n+ ,  public C4\n+{ public: int i9; };"}, {"sha": "f5e5e38247e1aa3ae11de33857b143e45553d0bf", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4_main.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -w }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 20 Nov 2001 <nathan@codesourcery.com>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+// Origin stefan@space.twc.de\n+// Bug 3145 case 4. Horribly complicated class hierarchy\n+\n+extern void vbase8_4_x (void);\n+\n+int\n+main ()\n+{\n+  vbase8_4_x ();\n+}"}, {"sha": "66b514c1b0958a8872250d9c6f1ba5914a3e6dd5", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4_x.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,49 @@\n+#include \"vbase8-4.h\"\n+\n+extern void check_C0 (C0&, int);\n+extern void check_C1 (C1&, int);\n+extern void check_C2 (C2&, int);\n+extern void check_C3 (C3&, int);\n+extern void check_C4 (C4&, int);\n+extern void check_C5 (C5&, int);\n+extern void check_C6 (C6&, int);\n+extern void check_C7 (C7&, int);\n+extern void check_C8 (C8&, int);\n+extern void check_C9 (C9&, int);\n+\n+void\n+vbase8_4_x (void)\n+{\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  C9 c9;\n+\n+  c0.i0 = 0;\n+  c1.i1 = 101;\n+  c2.i2 = 202;\n+  c3.i3 = 303;\n+  c4.i4 = 404;\n+  c5.i5 = 505;\n+  c6.i6 = 606;\n+  c7.i7 = 707;\n+  c8.i8 = 808;\n+  c9.i9 = 909;\n+\n+  check_C0 (c0, 0);\n+  check_C1 (c1, 101);\n+  check_C2 (c2, 202);\n+  check_C3 (c3, 303);\n+  check_C4 (c4, 404);\n+  check_C5 (c5, 505);\n+  check_C6 (c6, 606);\n+  check_C7 (c7, 707);\n+  check_C8 (c8, 808);\n+  check_C9 (c9, 909);\n+}"}, {"sha": "86dd40433d8296860d8104d37e13f7aec88b04c4", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4_y.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,63 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase8-4.h\"\n+\n+void check_C0 (C0 &x, int i)\n+{\n+  if (x.i0 != i)\n+    abort ();\n+}\n+\n+void check_C1 (C1 &x, int i)\n+{\n+  if (x.i1 != i)\n+    abort ();\n+}\n+\n+void check_C2 (C2 &x, int i)\n+{\n+  if (x.i2 != i)\n+    abort ();\n+}\n+\n+void check_C3 (C3 &x, int i)\n+{\n+  if (x.i3 != i)\n+    abort ();\n+}\n+\n+void check_C4 (C4 &x, int i)\n+{\n+  if (x.i4 != i)\n+    abort ();\n+}\n+\n+void check_C5 (C5 &x, int i)\n+{\n+  if (x.i5 != i)\n+    abort ();\n+}\n+\n+void check_C6 (C6 &x, int i)\n+{\n+  if (x.i6 != i)\n+    abort ();\n+}\n+\n+void check_C7 (C7 &x, int i)\n+{\n+  if (x.i7 != i)\n+    abort ();\n+}\n+\n+void check_C8 (C8 &x, int i)\n+{\n+  if (x.i8 != i)\n+    abort ();\n+}\n+\n+void check_C9 (C9 &x, int i)\n+{\n+  if (x.i9 != i)\n+    abort ();\n+}"}, {"sha": "98886310caacb1d3c8c655847029d7091ec3940b", "filename": "gcc/testsuite/g++.dg/compat/break/README", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2FREADME?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+Tests in this directory are for functionality that has changed in GCC\n+from one release to another or that is not ABI-compliant and may change\n+in a future release.\n+\n+Each test header for changed behavior should indicate the version in\n+which the behavior changed, in order to help users of these tests to\n+determine whether a test failure is expected or not.\n+\n+Every test in this directory that covers behavior that is not\n+ABI-compliant should also be covered by a test for -Wabi to ensure that\n+there is a warning for the construct."}, {"sha": "6f7f012cc6be735a0431cebbab53f948e59bd0c7", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield5.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+struct A {\n+  virtual void f();\n+  int f1 : 1;\n+};\n+\n+struct B : public A {\n+  int f2 : 1;\n+  int : 0;\n+  int f3 : 4;\n+  int f4 : 3;\n+};"}, {"sha": "415a8846c2675b89af14fa287a151a03be441427", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield5_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+// The offset of `B::f2' is not ABI-compliant and may change in a future\n+// version of GCC.\n+// g++.dg/abi/bitfield5.C tests this with -Wabi.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+#include \"bitfield5.h\"\n+\n+extern void bitfield5_x (void);\n+\n+int\n+main ()\n+{\n+  bitfield5_x ();\n+}"}, {"sha": "9be9372347a9f18f4810b2c6d1a5b9b70240d9ce", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield5_x.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+#include \"bitfield5.h\"\n+\n+extern void bitfield5_y (B&);\n+\n+void bitfield5_x ()\n+{\n+  B b;\n+\n+  b.f3 = 7;\n+  b.f4 = 3;\n+\n+  bitfield5_y (b);\n+}"}, {"sha": "6ee4dd0089dc5647ec751496eb500f7852ca34bf", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield5_y.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield5_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+extern \"C\" void abort (void);\n+\n+#include \"bitfield5.h\"\n+\n+void A::f () {}\n+\n+void bitfield5_y (B& b)\n+{\n+  if (b.f3 != 7)\n+    abort ();\n+  if (b.f4 != 3)\n+    abort ();\n+}"}, {"sha": "2060bf7473b98a0b2676a069fb28ae8d503bb2de", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,3 @@\n+union U {\n+  int i: 4096;\n+};"}, {"sha": "57bb96101f1a276e5b11e72b2f60844a7a11efc0", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7_main.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-w\" }\n+\n+// The size assigned to `U' may not be ABI-compliant and may change in a\n+// future version of GCC.\n+// g++.dg/abi/bitfield7.C tests this with -Wabi.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+#include \"bitfield7.h\"\n+\n+extern void bitfield7_x (void);\n+\n+int\n+main ()\n+{\n+  bitfield7_x ();\n+}"}, {"sha": "b42ea2e9ae3550c5c2d52fcd3224359bde531166", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7_x.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+#include \"bitfield7.h\"\n+\n+extern void bitfield7_y (U*);\n+\n+void bitfield7_x ()\n+{\n+  U u[2];\n+\n+  u[0].i = 7;\n+  u[1].i = 8;\n+\n+  bitfield7_y (u);\n+}"}, {"sha": "916d150d537e9582d6f1e7a8a61bf7b0ddaa6a9b", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7_y.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+extern \"C\" void abort (void);\n+\n+#include \"bitfield7.h\"\n+\n+void bitfield7_y (U* u)\n+{\n+  if (u[0].i != 7)\n+    abort ();\n+  if (u[1].i != 8)\n+    abort ();\n+}"}, {"sha": "47a0da8b52e3eaf44da8e41f2f96602d970c96c9", "filename": "gcc/testsuite/g++.dg/compat/break/empty6.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,7 @@\n+struct A {};\n+\n+struct B {\n+  A a;\n+  virtual void f () {}\n+  int i;\n+};"}, {"sha": "bf6d982413b757900b003b655188592975b2e570", "filename": "gcc/testsuite/g++.dg/compat/break/empty6_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+// `B::a' contains empty classes which may cause base classes to be\n+// placed at different locations in a future version of GCC.\n+// g++.dg/abi/empty6.C tests this with -Wabi.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+#include \"empty6.h\"\n+\n+extern void empty6_x (void);\n+\n+int\n+main ()\n+{\n+  empty6_x ();\n+}"}, {"sha": "f7e25e9abf9b16f14d19f7c938460b145e3787f9", "filename": "gcc/testsuite/g++.dg/compat/break/empty6_x.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+#include \"empty6.h\"\n+\n+extern void empty6_y (B&);\n+\n+void empty6_x ()\n+{\n+  B b;\n+\n+  b.i = 7;\n+\n+  empty6_y (b);\n+}"}, {"sha": "cb3d45c9e15065a6a674b2cb95bcefafe571c41b", "filename": "gcc/testsuite/g++.dg/compat/break/empty6_y.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fempty6_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" void abort (void);\n+\n+#include \"empty6.h\"\n+\n+void empty6_y (B& b)\n+{\n+  if (b.i != 7)\n+    abort ();\n+}"}, {"sha": "f418d1e56a4fb9d71d55222c781b980ebf183767", "filename": "gcc/testsuite/g++.dg/compat/break/vbase10.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+struct A {\n+  virtual void f();\n+  char c1;\n+};\n+\n+struct B {\n+  B();\n+  char c2;\n+};\n+\n+struct C : public A, public virtual B {\n+}; "}, {"sha": "a082b5dbf3eb073309bccd9e3f96b6aa9d5eb4b5", "filename": "gcc/testsuite/g++.dg/compat/break/vbase10_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+// The offset of virtual base `B' is not ABI-compliant and may change in\n+// a future version of GCC.\n+// g++.dg/abi/vbase10.C tests this with -Wabi.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+#include \"vbase10.h\"\n+\n+extern void vbase10_x (void);\n+\n+int\n+main ()\n+{\n+  vbase10_x ();\n+}"}, {"sha": "6d51d3c72694c64ba95e5861c637b8e89b28b359", "filename": "gcc/testsuite/g++.dg/compat/break/vbase10_x.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+#include \"vbase10.h\"\n+\n+extern void vbase10_y (C&);\n+\n+void vbase10_x ()\n+{\n+  C c;\n+\n+  c.c1 = 1;\n+  c.c2 = 2;\n+\n+  vbase10_y (c);\n+}"}, {"sha": "70ce0075e66664d1dbf8a89f7e757008790f079e", "filename": "gcc/testsuite/g++.dg/compat/break/vbase10_y.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase10_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase10.h\"\n+\n+void A::f () {}\n+B::B() {}\n+\n+void vbase10_y (C& c)\n+{\n+  if (c.c1 != 1)\n+    abort ();\n+  if (c.c2 != 2)\n+    abort ();\n+}"}, {"sha": "a298f764415f703a33b5b0fa29db66839c441e83", "filename": "gcc/testsuite/g++.dg/compat/break/vbase11.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+struct base\n+{\n+  short b;\n+  virtual int foo();\n+};\n+\n+struct derived: virtual base\n+{\n+  int d;\n+  virtual int foo();\n+  virtual int bar();\n+};"}, {"sha": "2ac59944992425dcdda87f8b13ce3ebb65b3d989", "filename": "gcc/testsuite/g++.dg/compat/break/vbase11_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+// Test case from PR 7470, which was fixed in GCC 3.2 and breaks binary\n+// compatibility with earlier releases.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+#include \"vbase11.h\"\n+\n+extern void vbase11_x (void);\n+\n+int\n+main ()\n+{\n+  vbase11_x ();\n+}"}, {"sha": "4b2398ae10dfe17979295b17c6c356ce929b7472", "filename": "gcc/testsuite/g++.dg/compat/break/vbase11_x.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+#include \"vbase11.h\"\n+\n+extern void vbase11_y (derived&);\n+\n+int base::foo() { return 1; }\n+int derived::foo() { return 2; }\n+int derived::bar() { return 3; }\n+\n+void vbase11_x ()\n+{\n+  derived d;\n+\n+  vbase11_y (d);\n+}"}, {"sha": "01ca62b87b81a59b2d32b73516c506a26142c6b7", "filename": "gcc/testsuite/g++.dg/compat/break/vbase11_y.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fvbase11_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+extern \"C\" void abort (void);\n+\n+#include \"vbase11.h\"\n+\n+void vbase11_y (derived& d)\n+{\n+  if (d.foo() != 2)\n+    abort ();\n+  if (d.bar() != 3)\n+    abort ();\n+}"}, {"sha": "1e13c102a50ca7f784681e498292c0e53844236b", "filename": "gcc/testsuite/g++.dg/compat/compat.exp", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,137 @@\n+# Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+#\n+# This file was written by Janis Johnson, <janis187@us.ibm.com>\n+\n+\n+# Test interoperability of two compilers that follow the same ABI.\n+#\n+# Break simple tests into two pieces and see that they work when linked\n+# together.  If an alternate compiler is specified then the two main\n+# pieces of each test are compiled with different compilers.  The\n+# alternate compiler must be installed, and is specified by defining\n+# ALT_CXX_UNDER_TEST in the environment.\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+global GXX_UNDER_TEST\n+global ld_library_path\n+\n+# Load procedures from common libraries. \n+load_lib standard.exp\n+load_lib g++.exp\n+\n+#\n+# compat-fix-library-path -- switch LD_LIBRARY_PATH\n+#\n+proc compat-fix-library-path { } {\n+    global ld_library_path\n+\n+    # See comments in lib/g++.exp for why this is needed.\n+    setenv  LD_LIBRARY_PATH     $ld_library_path\n+    setenv  SHLIB_PATH          $ld_library_path\n+    setenv  LD_LIBRARYN32_PATH  $ld_library_path\n+    setenv  LD_LIBRARY64_PATH   $ld_library_path\n+}\n+\n+#\n+# compat-use-alt-compiler -- make the alternate compiler the default\n+# \n+proc compat-use-alt-compiler { } {\n+    global GXX_UNDER_TEST ALT_CXX_UNDER_TEST\n+    global CXXFLAGS\n+    global ALWAYS_CXXFLAGS\n+    global ld_library_path alt_ld_library_path\n+    global same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+    if { $same_alt == 0 } then {\n+\tset GXX_UNDER_TEST $ALT_CXX_UNDER_TEST\n+\tset CXXFLAGS \"\"\n+\tset ALWAYS_CXXFLAGS \"\"\n+\tset ld_library_path $alt_ld_library_path\n+\tcompat-fix-library-path\n+    }\n+}\n+\n+#\n+# compat-use-tst-compiler -- make compiler under test the default\n+#\n+proc compat-use-tst-compiler { } {\n+    global GXX_UNDER_TEST save_gxx_under_test\n+    global CXXFLAGS save_cxxflags\n+    global ALWAYS_CXXFLAGS save_always_cxxflags\n+    global ld_library_path save_ld_library_path\n+    global same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+\n+    if { $same_alt == 0 } then {\n+\tset GXX_UNDER_TEST $save_gxx_under_test\n+\tset CXXFLAGS $save_cxxflags\n+\tset ALWAYS_CXXFLAGS $save_always_cxxflags\n+\tset ld_library_path $save_ld_library_path\n+\tcompat-fix-library-path\n+    }\n+}\n+\n+# Load the language-independent compabibility support procedures.\n+# This must be done after the compat-use-*-compiler definitions.\n+load_lib compat.exp\n+\n+g++_init\n+\n+# Save variables for the C++ compiler under test, which each test will\n+# change a couple of times.  This must be done after calling g++-init.\n+set save_gxx_under_test $GXX_UNDER_TEST\n+set save_cxxflags $CXXFLAGS\n+set save_always_cxxflags $ALWAYS_CXXFLAGS\n+set save_ld_library_path $ld_library_path\n+\n+# Find out whether there is an alternate compiler to test.  If the\n+# variable is defined but is set to \"same\", that means we use the same\n+# compiler twice, which is meaningful if the two parts of COMPAT_OPTIONS\n+# are different.\n+set use_alt 0\n+set same_alt 0\n+set alt_ld_library_path \".\"\n+if [info exists ALT_CXX_UNDER_TEST] then {\n+    set use_alt 1\n+    if [string match \"same\" $ALT_CXX_UNDER_TEST] then {\n+\tset same_alt 1\n+    } else {\n+\tif [info exists ALT_LD_LIBRARY_PATH] then {\n+\t    append alt_ld_library_path \":${ALT_LD_LIBRARY_PATH}\"\n+\t}\n+    }\n+}\n+\n+# Main loop.\n+foreach src [lsort [find $srcdir/$subdir *_main.C]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    compat-execute $src $use_alt\n+}\n+\n+# Restore the original compiler under test.\n+compat-use-tst-compiler"}, {"sha": "e83476f2d603f1c0efb204424a0b2c4ee60e7a75", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,10 @@\n+struct Foo\n+{\n+  ~Foo ();\n+};\n+\n+struct Bar\n+{\n+  ~Bar ();\n+  Foo f;\n+};"}, {"sha": "a188b46da867fe80719a89d56b229f477067536d", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Dec 2001 <nathan@nathan@codesourcery.com>\n+// PR 411\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void ctor1_x (void);\n+\n+int\n+main ()\n+{\n+  ctor1_x ();\n+}"}, {"sha": "d74a520871fcfdf9dfb83962c4437d0c7d291f07", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1_x.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,22 @@\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+#include \"ctor1.h\"\n+\n+bool was_f_in_Bar_destroyed=false;\n+\n+void ctor1_x ()\n+{\n+  try\n+    {\n+      Bar f; \n+    }\n+  catch(int i)\n+    {\n+      if(was_f_in_Bar_destroyed)\n+\t{\n+\t  exit (0);\n+\t}\n+    }\n+  abort ();\n+}"}, {"sha": "260ab1c34181dd50322ec1fdf52182bb22dcfd1e", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1_y.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+extern bool was_f_in_Bar_destroyed;\n+\n+#include \"ctor1.h\"\n+\n+Foo::~Foo()\n+{\n+  was_f_in_Bar_destroyed=true;\n+}\n+\n+Bar::~Bar()\n+{\n+  throw 1;\n+}"}, {"sha": "c6b9f40f8d9d58b5e4fac51953018f1d29350e08", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor2.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,22 @@\n+struct VBase\n+{\n+  virtual void f () {}\n+  VBase();\n+  ~VBase();\n+};\n+\n+struct  StreamBase \n+{\n+  virtual ~StreamBase() {}\n+};\n+\n+struct  Stream : public virtual VBase, public StreamBase\n+{\n+  Stream();\n+  virtual ~Stream() {} \n+};\n+\n+struct DerivedStream : public Stream\n+{\n+  DerivedStream();\n+};"}, {"sha": "58836e26ebae7ba297c587889d88dfd35c009961", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor2_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/4460\n+// Test that the cleanup for fully-constructed subobjects when a\n+// constructor throws gets the right address for a virtual base.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void ctor2_x (void);\n+\n+int main ()\n+{\n+  ctor2_x ();\n+}"}, {"sha": "3fa1a53ace51b36dfd4ee96b3f88fb09cb42dd1b", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor2_x.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,19 @@\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+\n+#include \"ctor2.h\"\n+\n+int r;\n+\n+void ctor2_x () {\n+\n+  try\n+    { \n+      DerivedStream str;\n+    }\n+  catch (...) { }\n+\n+  if (r != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "00ba92000e4e764366ba832542b7d4e64b854127", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor2_y.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor2_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,20 @@\n+extern int r;\n+void *p;\n+\n+#include \"ctor2.h\"\n+\n+VBase::VBase ()\n+{\n+  p = this;\n+}\n+\n+VBase::~VBase ()\n+{\n+  if (p != this) r = 1;\n+}\n+\n+Stream::Stream () {}\n+DerivedStream::DerivedStream ()\n+{\n+  throw 1;\n+}"}, {"sha": "0dfa793e0e1869f59276902d41f2c2522b1d87fc", "filename": "gcc/testsuite/g++.dg/compat/eh/dtor1.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,7 @@\n+struct A {\n+  ~A();\n+};\n+\n+struct B: public A {\n+  ~B();\n+};"}, {"sha": "962fa64274b45611d9da3d832826b8cf104d78d7", "filename": "gcc/testsuite/g++.dg/compat/eh/dtor1_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/411\n+\n+// Test that a fully-constructed base is destroyed before transferring\n+// control to the handler of a function-try-block.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void dtor1_x (void);\n+\n+int\n+main ()\n+{\n+  dtor1_x ();\n+}"}, {"sha": "f7f4cc8a7f7d4d586799e9183d293edfe7cb5d0a", "filename": "gcc/testsuite/g++.dg/compat/eh/dtor1_x.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+\n+#include \"dtor1.h\"\n+\n+int r;\n+\n+void dtor1_x ()\n+{\n+  { B b; }\n+  if (r != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "a1ec41a2764483e0eb96a8b55bcbb95622bac9e4", "filename": "gcc/testsuite/g++.dg/compat/eh/dtor1_y.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fdtor1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,18 @@\n+extern int r;\n+int ad;\n+\n+#include \"dtor1.h\"\n+\n+A::~A () { ++ad; }\n+\n+B::~B ()\n+try\n+  {\n+    throw 1;\n+  }\n+catch (...)\n+  {\n+    if (!ad)\n+      r = 1;\n+    return;\n+  }"}, {"sha": "1f5f0c93615d80ddf4d85ce6d5bbd464a4e54881", "filename": "gcc/testsuite/g++.dg/compat/eh/filter1.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,5 @@\n+struct a\n+{\n+  a();\n+  ~a();\n+};"}, {"sha": "2a8fca42c31ff497b0ac35d1327f420c43014b64", "filename": "gcc/testsuite/g++.dg/compat/eh/filter1_main.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+// Test that cleanups get run when a catch filter fails to match.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void filter1_x (void);\n+\n+int\n+main ()\n+{\n+  filter1_x ();\n+}"}, {"sha": "b3789aa15b7addfe4a1ff76a0929ace54f5ae92e", "filename": "gcc/testsuite/g++.dg/compat/eh/filter1_x.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,21 @@\n+#include \"filter1.h\"\n+\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+extern void ex_test (void);\n+\n+void\n+filter1_x ()\n+{\n+  try\n+    {\n+      ex_test ();\n+    }\n+  catch (...)\n+    {\n+    }\n+  abort ();\n+}\n+\n+a::a() { }\n+a::~a() { exit (0); }"}, {"sha": "48de0877d548bfdc874b02fc3d04e8873cd8dccc", "filename": "gcc/testsuite/g++.dg/compat/eh/filter1_y.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,17 @@\n+#include \"filter1.h\"\n+\n+struct e1 {};\n+struct e2 {};\n+\n+void\n+ex_test ()\n+{\n+  a aa;\n+  try\n+    {\n+      throw e1 ();\n+    }\n+  catch (e2 &)\n+    {\n+    }\n+}"}, {"sha": "866199c6b30fa8d695e8f7e770554563e2829951", "filename": "gcc/testsuite/g++.dg/compat/eh/filter2_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// Test that terminate gets run when a catch filter fails to match while\n+// running destructors.  Original bug depended on a::~a being inlined.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void filter2_x (void);\n+\n+int\n+main ()\n+{\n+  filter2_x ();\n+}"}, {"sha": "cdbfffffdd1578b3e13ddd708ad6422e5d9b567c", "filename": "gcc/testsuite/g++.dg/compat/eh/filter2_x.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,20 @@\n+#include <exception>\n+#include <cstdlib>\n+\n+extern void my_terminate (void);\n+extern void ex_test (void);\n+\n+void\n+filter2_x ()\n+{\n+  std::set_terminate (my_terminate);\n+\n+  try\n+    {\n+      ex_test ();\n+    }\n+  catch (...)\n+    {\n+    }\n+  abort ();\n+}"}, {"sha": "87c6fea101272584cc4b51b5dc8ec2ff1bbb0a8a", "filename": "gcc/testsuite/g++.dg/compat/eh/filter2_y.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,39 @@\n+#include <exception>\n+#include <cstdlib>\n+\n+struct e1 {};\n+struct e2 {};\n+\n+struct a\n+{\n+  a () { }\n+\n+  ~a ()\n+    {\n+      try\n+\t{\n+\t  throw e1();\n+\t}\n+      catch (e2 &)\n+\t{\n+        }\n+    }\n+};\n+\n+void\n+ex_test ()\n+{\n+  a aa;\n+  try\n+    {\n+      throw e1 ();\n+    }\n+  catch (e2 &)\n+    {\n+    }\n+}\n+\n+void my_terminate ()\n+{\n+  std::exit (0);\n+}"}, {"sha": "ee4cad8e50d4d381ba2904596e63d41371daaf3d", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/5757\n+// Test that when a constructor throws in a new-expression, we pass the\n+// right pointer to operator delete.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void new1_x (void);\n+\n+int\n+main ()\n+{\n+  new1_x ();\n+}"}, {"sha": "4ca3be0af9010af83c2441472f553294a681fefe", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_x.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,28 @@\n+#include <new>\n+\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+\n+extern void * operator new[] (size_t s) throw (std::bad_alloc);\n+extern void operator delete[] (void *p) throw ();\n+\n+struct A\n+{\n+  A() { throw 1; }\n+  ~A() {}\n+};\n+\n+int ret = 1;\n+\n+void\n+new1_x ()\n+{\n+  try\n+    {\n+      A *p = new A[4];\n+    }\n+  catch (...) {}\n+  if (ret != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "c448cbed8d24aa140116edaf3d4751977744474d", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_y.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,18 @@\n+#include <new>\n+\n+extern int ret;\n+\n+void *ptr;\n+void * operator new[] (size_t s) throw (std::bad_alloc)\n+{\n+  ptr = operator new (s);\n+  return ptr;\n+}\n+\n+void operator delete[] (void *p) throw ()\n+{\n+  if (p == ptr)\n+    ret = 0;\n+  operator delete (p);\n+}\n+"}, {"sha": "853ea3914e15e0e56ca358a63926fc053a10a046", "filename": "gcc/testsuite/g++.dg/compat/eh/nrv1.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,5 @@\n+struct A\n+{\n+  A();\n+  ~A();\n+};"}, {"sha": "3b76b5c8824c9b01af909a37291fd0779e02f674", "filename": "gcc/testsuite/g++.dg/compat/eh/nrv1_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/5636\n+// Bug: the named return value optimization interfered with EH cleanups.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void nrv1_x (void);\n+\n+int\n+main ()\n+{\n+  nrv1_x ();\n+}"}, {"sha": "0647de889a56b964b5ba54513b3eb1eab42fc117", "filename": "gcc/testsuite/g++.dg/compat/eh/nrv1_x.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,21 @@\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+\n+#include \"nrv1.h\"\n+\n+extern A f (void);\n+\n+int c, d;\n+\n+void nrv1_x ()\n+{\n+  try\n+    { A a = f(); }\n+  catch (...) { }\n+  if (d < c)\n+    abort ();\n+  exit (0);\n+}\n+\n+A::A() { ++c; }\n+A::~A() { ++d; }"}, {"sha": "5a43af7c205dc015f1c407563f8b3aac9caffa5f", "filename": "gcc/testsuite/g++.dg/compat/eh/nrv1_y.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnrv1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,8 @@\n+#include \"nrv1.h\"\n+\n+A f()\n+{\n+  A nrv;\n+  throw 42;\n+  return nrv;\n+}"}, {"sha": "a042c1004dde37005b66367c1b9983ad84bc762c", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,8 @@\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A();\n+};\n+\n+struct B {};"}, {"sha": "3f0e919b2eab863e6fcc3f6dc73c03a45c60c50d", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/4381\n+// Test that exception-specs work properly for classes with virtual bases.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void spec3_x (void);\n+\n+int\n+main ()\n+{\n+  spec3_x ();\n+}"}, {"sha": "b8e5fbeaa1e5c2a41226eb32354b107c1342a2a1", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3_x.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,9 @@\n+#include \"spec3.h\"\n+\n+extern void func () throw (B,A);\n+\n+void spec3_x (void)\n+{\n+  try {\tfunc(); }\n+  catch (A& a) { }\n+}"}, {"sha": "fef6b368c865af25bc6baecb20078d57871f0ef9", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3_y.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,8 @@\n+#include \"spec3.h\"\n+\n+A::A() {}\n+\n+void func() throw (B,A)\n+{\n+  throw A();\n+}"}, {"sha": "93999a11d49e5a49a265bf2a065ca4e0650ed5f3", "filename": "gcc/testsuite/g++.dg/compat/eh/template1.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,15 @@\n+class A {};\n+\n+template <class T>\n+struct B\n+{\n+  typedef A E;\n+};\n+\n+template <class T>\n+struct C\n+{\n+  typedef B<T> D;\n+  typedef typename D::E E;\n+  void f() throw(E);\n+};"}, {"sha": "2d169808c465c6dc608ef86ca2a2e95606d540ea", "filename": "gcc/testsuite/g++.dg/compat/eh/template1_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// Test whether exception specifier dependent on template parameter\n+// is accepted during template decl processing.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void template1_x (void);\n+\n+int\n+main ()\n+{\n+  template1_x ();\n+}"}, {"sha": "5a18be789891c2c6fa6cc5fcb3ff3c7b75f33f74", "filename": "gcc/testsuite/g++.dg/compat/eh/template1_x.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,21 @@\n+extern \"C\" void exit (int);\n+extern \"C\" void abort (void);\n+\n+#include \"template1.h\"\n+\n+void template1_x ()\n+{\n+  int caught = 0;\n+  try\n+    {\n+      C<int> x;\n+      x.f();\n+    }\n+  catch (A)\n+    {\n+      ++caught;\n+    }\n+  if (caught != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "19425375c92f2cb6115d97eae0338fecda2a0e84", "filename": "gcc/testsuite/g++.dg/compat/eh/template1_y.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,8 @@\n+#include \"template1.h\"\n+\n+template<class T> void C<T>::f (void) throw (E)\n+{\n+  throw E();\n+}\n+\n+template class C<int>;"}, {"sha": "1658db77e322aaa2c0ef260a57fd7bce8da6ff4f", "filename": "gcc/testsuite/g++.dg/compat/eh/unexpected1_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// PR 3719\n+// Test that an unexpected handler can rethrow to categorize.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void unexpected1_x ();\n+\n+int\n+main ()\n+{\n+  unexpected1_x ();\n+}"}, {"sha": "61361a68d9f643034ad562faa47f75f368710c19", "filename": "gcc/testsuite/g++.dg/compat/eh/unexpected1_x.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,26 @@\n+#include <exception>\n+\n+struct One { };\n+struct Two { };\n+\n+extern \"C\" void abort ();\n+extern void doit (void) throw (Two);\n+extern void handle_unexpected (void);\n+\n+void\n+unexpected1_x ()\n+{\n+  std::set_unexpected (handle_unexpected);\n+\n+  try\n+  {\n+    doit ();\n+  }\n+  catch (Two &)\n+  {\n+  }\n+  catch (...)\n+  {\n+    abort ();\n+  }\n+}"}, {"sha": "0c42c4579534a67142c804beb174c4f41d1843fd", "filename": "gcc/testsuite/g++.dg/compat/eh/unexpected1_y.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,21 @@\n+struct One { };\n+struct Two { };\n+\n+void\n+handle_unexpected ()\n+{\n+  try\n+  {\n+    throw;\n+  }\n+  catch (One &)\n+  {\n+    throw Two ();\n+  }\n+}\n+\n+void\n+doit () throw (Two)\n+{\n+  throw One ();\n+}"}, {"sha": "96b2cc4b12bdf46a12d8c5d8d2dbeeaa565bddde", "filename": "gcc/testsuite/g++.dg/compat/init/array5_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright (C) 2002 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// Split into pieces for binary compatibility testing October 2002\n+\n+// Incorrect construction and destruction of multi-dimensional\n+// array of class.\n+\n+extern void array5_x (void);\n+\n+int\n+main ()\n+{\n+  array5_x ();\n+}"}, {"sha": "dc138772cdded8e6ebe036da3c7e18172f5fe7fb", "filename": "gcc/testsuite/g++.dg/compat/init/array5_x.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,33 @@\n+extern \"C\" void abort (void);\n+\n+extern int count;\n+extern int num;\n+\n+struct A\n+{\n+  A();\n+  ~A();\n+};\n+\n+struct Array\n+{\n+  A array[2][2][2];\n+};\n+\n+void\n+array5_x ()\n+{\n+  for (num = 0; num <= 8; ++num)\n+    {\n+      count = 0;\n+      try\n+\t{\n+\t  Array A;\n+\t}\n+      catch (...)\n+        {\n+\t}\n+      if (count != 0)\n+\tabort();\n+    }\n+}"}, {"sha": "64b295ed56d0b315e80225fb319ccf230b0279ad", "filename": "gcc/testsuite/g++.dg/compat/init/array5_y.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Farray5_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,20 @@\n+int count;\n+int num;\n+\n+struct A\n+{\n+  A();\n+  ~A();\n+};\n+\n+A::A()\n+{\n+  if (count == num)\n+    throw \"\";\n+  count++;\n+}\n+\n+A::~A()\n+{\n+  count--;\n+}"}, {"sha": "2876b76ede15d730c134421bcb91b93aa6176a70", "filename": "gcc/testsuite/g++.dg/compat/init/byval1.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,6 @@\n+struct C\n+{\n+  int m;\n+  C();\n+  ~C();\n+};"}, {"sha": "acefaab1440a4e7c592f2cea83df799db2b8770b", "filename": "gcc/testsuite/g++.dg/compat/init/byval1_main.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/3948\n+// Test that the destructor call for a value parameter gets the\n+// right address.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void byval1_x (void);\n+\n+int\n+main ()\n+{\n+  byval1_x ();\n+}"}, {"sha": "248dbe763bc5db41893b62cb5c62a36fc8339a1e", "filename": "gcc/testsuite/g++.dg/compat/init/byval1_x.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,15 @@\n+#include \"byval1.h\"\n+\n+extern \"C\" void abort (void);\n+extern void Foo (C c);\n+extern int r;\n+\n+void\n+byval1_x ()\n+{       \n+  C c;\n+\n+  Foo (c);\n+  if (r != 0)\n+    abort ();\n+}"}, {"sha": "6e217e84ec5b356a35936e07770597d469562ca5", "filename": "gcc/testsuite/g++.dg/compat/init/byval1_y.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fbyval1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,14 @@\n+#include \"byval1.h\"\n+\n+void *p[2];\n+\n+int i;\n+int r;\n+\n+C::C()  { p[i++] = this; }\n+C::~C() { if (p[--i] != this) r = 1; }\n+\n+void Foo (C c)\n+{\n+  p[i++] = &c;\n+}"}, {"sha": "77e21c12ef2c8d9e0b0dea878bd1260f28e9920e", "filename": "gcc/testsuite/g++.dg/compat/init/dtor1.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,30 @@\n+struct B\n+{\n+  int x;\n+  B (int);\n+  ~B ();\n+};\n+\n+struct C1 : public B {\n+  C1 (int);\n+};\n+\n+struct C2 : public B {\n+  C2 (int);\n+};\n+\n+struct D : public B {\n+  D (int);\n+};\n+\n+struct E : public B {\n+  E (int);\n+};\n+\n+struct A\n+  : public C1, C2, virtual public D, virtual public E\n+{\n+  A ();\n+  B x1;\n+  B x2;\n+};"}, {"sha": "78868784038915000dbe6c31b7801865c10cb953", "filename": "gcc/testsuite/g++.dg/compat/init/dtor1_main.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,9 @@\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void dtor1_x (void);\n+\n+int\n+main ()\n+{\n+  dtor1_x ();\n+}"}, {"sha": "8a4727cfb4cc6662b98fa906728d992525d92393", "filename": "gcc/testsuite/g++.dg/compat/init/dtor1_x.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,7 @@\n+#include \"dtor1.h\"\n+\n+void\n+dtor1_x (void)\n+{\n+  A a;\n+}"}, {"sha": "27610fc1e9e9bbbb49c834dab05fa5f787a05c95", "filename": "gcc/testsuite/g++.dg/compat/init/dtor1_y.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Fdtor1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,18 @@\n+#include \"dtor1.h\"\n+\n+extern \"C\" void abort ();\n+\n+int d = 5;\n+\n+B::B (int i) : x (i) { }\n+B::~B () { if (d-- != x) abort (); }\n+\n+C1::C1 (int i) : B (i) {}\n+\n+C2::C2 (int i) : B (i) {}\n+\n+D::D (int i) : B (i) {}\n+\n+E::E (int i) : B (i) {}\n+\n+A::A () : D (0), E (1), C1 (2), C2 (3), x1(4), x2(5) {}"}, {"sha": "481e7308b5f4030c283cae5dd7dbd96fb3cfbaac", "filename": "gcc/testsuite/g++.dg/compat/init/elide1.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1.h?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,5 @@\n+struct A {\n+  A ();\n+  A (const A&);\n+  ~A ();\n+};"}, {"sha": "c08d02fff458b7f4cd47a3a83a101f7fa3471d57", "filename": "gcc/testsuite/g++.dg/compat/init/elide1_main.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,25 @@\n+// Test that the destructor for a temporary passed by value isn't run\n+// until end of full-expression, as per [class.copy]:\n+\n+// Whenever a temporary class object is copied using a copy  constructor,\n+// and  this  object  and  the copy have the same cv-unqualified type, an\n+// implementation is permitted to treat the original and the copy as  two\n+// different  ways of referring to the same object and not perform a copy\n+// at all, even if the class copy constructor  or  destructor  have  side\n+// effects....                                       In these cases,  the\n+// object  is  destroyed  at the later of times when the original and the\n+// copy would have been destroyed without the optimization.\n+\n+// Here, the temporary would be destroyed later than the parm, so either we\n+// must suppress the optimization in this case or destroy value parms in the\n+// caller.\n+\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void elide1_x (void);\n+\n+int\n+main ()\n+{\n+  elide1_x ();\n+}"}, {"sha": "dbc287e4e2cb2a10b115a514c30a4d9eb1907cc7", "filename": "gcc/testsuite/g++.dg/compat/init/elide1_x.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,15 @@\n+#include \"elide1.h\"\n+\n+extern \"C\" void abort (void);\n+extern void f (A);\n+extern int d;\n+\n+void\n+elide1_x (void)\n+{\n+  int r;\n+  f (A ()), r = d;\n+\n+  if (r >= d || !d)\n+    abort ();\n+}"}, {"sha": "e767d08082e3bf2002d3c9fc43c0764241a13bd3", "filename": "gcc/testsuite/g++.dg/compat/init/elide1_y.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Felide1_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,9 @@\n+#include \"elide1.h\"\n+\n+int d;\n+\n+A::A () { }\n+A::A (const A&) { }\n+A::~A() { ++d; }\n+\n+void f (A a) { }"}, {"sha": "73782829ec4a26e0ee40ae36034b76e9968c69b3", "filename": "gcc/testsuite/g++.dg/compat/init/init-ref2_main.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_main.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,11 @@\n+// Submitted by Jason Merrill <jason_merrill@redhat.com>\n+// Test for proper handling of local static references.\n+// Split into pieces for binary compatibility testing October 2002\n+\n+extern void init_ref2_x (void);\n+\n+int\n+main ()\n+{\n+  init_ref2_x ();\n+}"}, {"sha": "7fbec89b645ed0845aa99bc5e0590f3b4bf7e92d", "filename": "gcc/testsuite/g++.dg/compat/init/init-ref2_x.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_x.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,22 @@\n+extern \"C\" void abort (void);\n+extern void g (void);\n+extern void h (void);\n+\n+int r;\n+int c;\n+int f ()\n+{\n+  // Test that we only initialize i once.\n+  if (++c > 1)\n+    ++r;\n+  return 42;\n+}\n+\n+void\n+init_ref2_x (void)\n+{\n+  g ();\n+  h ();\n+  if (r != 0)\n+    abort ();\n+}"}, {"sha": "23e66b2f9a140dfebd7b9d334a77bd190ac1fdf9", "filename": "gcc/testsuite/g++.dg/compat/init/init-ref2_y.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Finit%2Finit-ref2_y.C?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,24 @@\n+extern int f (void);\n+extern int r;\n+\n+const int *p;\n+\n+void g ()\n+{\n+  static const int &i = f();\n+\n+  // Test that i points to the same place in both calls.\n+  if (p && p != &i)\n+    ++r;\n+  // Test that if so, it points to static data.\n+  if (i != 42)\n+    ++r;\n+\n+  p = &i;\n+}\n+\n+void h ()\n+{\n+  int arr[] = { 1, 1, 1, 1, 1, 1, 1 };\n+  g ();\n+}"}, {"sha": "ea96197332f00b6e4e57ee8f4531f875fb780cf3", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -32,6 +32,7 @@ dg-init\n # that are handled specially.\n set tests [lsort [find $srcdir/$subdir *.C]]\n set tests [prune $tests $srcdir/$subdir/bprob/*]\n+set tests [prune $tests $srcdir/$subdir/compat/*]\n set tests [prune $tests $srcdir/$subdir/debug/*]\n set tests [prune $tests $srcdir/$subdir/gcov/*]\n set tests [prune $tests $srcdir/$subdir/special/*]"}, {"sha": "1965f3d6ea9e98d0419a83f8159b25d7d63f2585", "filename": "gcc/testsuite/lib/compat.exp", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=768bf0ab4d7bd8c4bb8a6d70290ea890517d4ac9", "patch": "@@ -0,0 +1,232 @@\n+# Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# This file was written by Janis Johnson, <janis187@us.ibm.com>\n+\n+\n+# Test interoperability of two compilers that follow the same ABI, or\n+# compatibility of two versions of GCC.\n+#\n+# Each test has a main program that does nothing but call a function,\n+# plus two additional source files that contain parts of a program that\n+# rely on the ABI.  those source files are compiled into relocatable\n+# object files with both compilers.  Executables are built using various\n+# combinations of those object files, with the main program compiled\n+# with the compiler under test and using that compiler's runtime support.\n+\n+# The including .exp file must define these callback procedures.\n+if [string match \"\" [info procs \"compat-use-alt-compiler\"]] then {\n+    error \"Proc compat-use-alt-compiler is not defined.\"\n+}\n+if [string match \"\" [info procs \"compat-use-tst-compiler\"]] then {\n+    error \"Proc compat-use-tst-compiler is not defined.\"\n+}\n+\n+# Each test is run with each pair of compiler options from this list.\n+# The first set of options in each pair is used by the compiler under\n+# test, and the second set is used by the alternate compiler.\n+# The default option lists can be overridden by\n+# COMPAT_OPTIONS=\"[list [list {tst_1} {alt_1}]...[list {tst_n} {alt_n}]]\"\n+# where tst_i and alt_i are lists of options.  You can put this in the\n+# environment before site.exp is written or add it to site.exp directly.\n+if ![info exists COMPAT_OPTIONS] {\n+    set COMPAT_OPTIONS [list \\\n+\t[list {} {}]]\n+}\n+\n+set option_list $COMPAT_OPTIONS\n+\n+#\n+# compat-obj -- compile to an object file\n+#\n+# SOURCE is the source file\n+# DEST is the object file\n+# OPTIONS is the list of compiler options\n+# OPTSTR is the options to print with test messages\n+#\n+proc compat-obj { source dest options optstr } {\n+    global testcase\n+    global tool\n+\n+    set comp_output [${tool}_target_compile \"$source\" \"$dest\" object $options]\n+    ${tool}_check_compile \"$testcase $dest compile\" $optstr $dest $comp_output\n+}\n+\n+# compat-run -- link and run an executable\n+#\n+# TESTNAME is the mixture of object files to link\n+# OBJLIST is the list of object files to link\n+# DEST is the name of the executable\n+# OPTIONS is a list of compiler and linker options to use\n+# OPTSTR is the list of options to list in messages\n+#\n+proc compat-run { testname objlist dest options optstr } {\n+    global testcase\n+    global tool\n+\n+    # Check that all of the objects were built successfully.\n+    foreach obj [split $objlist] {\n+\tif ![file exists $obj] then {\n+\t    unresolved \"$testcase $testname link $optstr\"\n+\t    unresolved \"$testcase $testname execute $optstr\"\n+\t    return\n+\t}\n+    }\n+\n+    # Link the objects into an executable.\n+    set comp_output [${tool}_target_compile \"$objlist\" $dest executable \\\n+\t\t     \"$options\"]\n+    if ![${tool}_check_compile \"$testcase $testname link\" \"\" \\\n+\t $dest $comp_output] then {\n+\tunresolved \"$testcase $testname execute $optstr\"\n+\treturn\n+    }\n+\n+    # Run the self-checking executable.\n+    set result [${tool}_load $dest \"\" \"\"]\n+    set status [lindex $result 0]\n+    if { $status == \"pass\" } then {\n+\tremote_file build delete $dest\n+    }\n+    $status \"$testcase $testname execute $optstr\"\n+}\n+\n+#\n+# compat-execute -- compile with compatible compilers\n+#\n+# SRC1 is the full pathname of the main file of the testcase.\n+# USE_ALT is nonzero if we're using an alternate compiler as well as\n+#   the compiler under test.\n+#\n+proc compat-execute { src1 use_alt } {\n+    global srcdir tmpdir\n+    global option_list\n+    global tool\n+    global verbose\n+    global testcase\n+\n+    # Use the dg-options mechanism to specify extra flags for this test.\n+    # FIXME: This does not handle other uses of dg-options, and it only\n+    # processes the first one.\n+    set extra_tool_flags \"\"\n+    set tmp [grep $src1 \"{\\[ \\t\\]\\*dg-options.*\\[ \\t\\]\\+}\"]\n+    if ![string match \"\" $tmp] {\n+\tset tmp0 [lindex $tmp 0]\n+\t# Extract the compiler options.\n+\tregexp \"dg-options\\[ \\t\\]\\+(.*)\\[ \\t\\]\\+\\}\" \\\n+\t       $tmp0 all args\n+\t# Sometime the options are in quotes, sometimes not.\n+\tregsub -all \"\\\"\" $args \"\" args\n+\tset extra_tool_flags $args\n+    }\n+\n+    # Set up the names of the other source files.\n+    regsub \"_main.*\" $src1 \"\" base\n+    regsub \".*/\" $base \"\" base\n+    regsub \"_main\" $src1 \"_x\" src2\n+    regsub \"_main\" $src1 \"_y\" src3\n+\n+    # Define the names of the object files.\n+    set obj1 \"main_tst.o\"\n+    set obj2_tst \"x_tst.o\"\n+    set obj2_alt \"x_alt.o\"\n+    set obj3_tst \"y_tst.o\"\n+    set obj3_alt \"y_alt.o\"\n+\n+    # Get the base name of this test, for use in messages.\n+    regsub \"^$srcdir/?\" $src1 \"\" testcase\n+    regsub \"_main.*\" $testcase \"\" testcase\n+    # Set up the base name of executable files so they'll be unique.\n+    regsub -all \"\\[./\\]\" $testcase \"-\" execbase\n+\n+    # If we couldn't rip $srcdir out of `src1' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] then {\n+        set testcase \"[file tail [file dirname $src1]]/[file tail $src1]\"\n+    }\n+\n+    # Loop through all of the option lists used for this test.\n+\n+    set count 0\n+    foreach option_pair $option_list {\n+\n+\t# Pick out each set of options.\n+\tset tst_option [lindex $option_pair 0]\n+\tset alt_option [lindex $option_pair 1]\n+\tset optstr \"\"\n+\tif { ![string match $tst_option \"\"] \\\n+\t     || ![string match $alt_option \"\"] } then {\n+\t    set optstr \"\\\"$tst_option\\\",\\\"$alt_option\\\"\"\n+\t}\n+\tverbose \"Testing $testcase, $optstr\" 1\n+\n+\tset tst_options \"\"\n+\tset alt_options \"\"\n+\tif ![string match $extra_tool_flags \"\"] then {\n+\t    lappend tst_options \"additional_flags=$extra_tool_flags $tst_option\"\n+\t    lappend alt_options \"additional_flags=$extra_tool_flags $alt_option\"\n+\t}\n+\n+\t# There's a unique name for each executable we generate, based on\n+\t# the set of options and how the pieces of the tests are compiled.\n+\tset execname1 \"${execbase}-${count}1\"\n+\tset execname2 \"${execbase}-${count}2\"\n+\tset execname3 \"${execbase}-${count}3\"\n+\tset execname4 \"${execbase}-${count}4\"\n+\tincr count\n+\n+\tremote_file build delete $execname1\n+\tremote_file build delete $execname2\n+\tremote_file build delete $execname3\n+\tremote_file build delete $execname4\n+\n+\t# Compile pieces with the alternate compiler; we'll catch problems\n+\t# later.  Skip this if we don't have an alternate compiler.\n+\tif { $use_alt != 0 } then {\n+\t    compat-use-alt-compiler\n+\t    compat-obj \"$src2\" \"$obj2_alt\" $alt_options $optstr\n+\t    compat-obj \"$src3\" \"$obj3_alt\" $alt_options $optstr\n+\t}\n+\n+\t# Compile pieces with the compiler under test.\n+\tcompat-use-tst-compiler\n+\tcompat-obj \"$src1\" \"$obj1\" $tst_options $optstr\n+\tcompat-obj \"$src2\" \"$obj2_tst\" $tst_options $optstr\n+\tcompat-obj \"$src3\" \"$obj3_tst\" $tst_options $optstr\n+\n+\t# Link (using the compiler under test), run, and clean up tests.\n+\tcompat-run \"${obj2_tst}-${obj3_tst}\" \\\n+\t    \"$obj1 $obj2_tst $obj3_tst\" $execname1 $tst_options $optstr\n+\n+\t# If we've got an alternate compiler try some combinations.\n+\tif { $use_alt != 0 } then {\n+\t    compat-run \"${obj2_tst}-${obj3_alt}\" \"$obj1 $obj2_tst $obj3_alt\" \\\n+\t\t       $execname2 $tst_options $optstr\n+\t    compat-run \"${obj2_alt}-${obj3_tst}\" \"$obj1 $obj2_alt $obj3_tst\" \\\n+\t\t       $execname3 $tst_options $optstr\n+\t    compat-run \"${obj2_alt}-${obj3_alt}\" \"$obj1 $obj2_alt $obj3_alt\" \\\n+\t\t       $execname4 $tst_options $optstr\n+\t}\n+\n+\t# Clean up object files.\n+\tset files [glob -nocomplain *.o]\n+\tif { $files != \"\" } {\n+\t    eval \"remote_file build delete $files\"\n+\t}\n+    }\n+}"}]}