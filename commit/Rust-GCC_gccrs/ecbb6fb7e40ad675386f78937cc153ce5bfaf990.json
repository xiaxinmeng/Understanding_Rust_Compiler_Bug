{"sha": "ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiYjZmYjdlNDBhZDY3NTM4NmY3ODkzN2NjMTUzY2U1YmZhZjk5MA==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2011-04-08T17:52:25Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2011-04-08T17:52:25Z"}, "message": "gengtype.c (write_typed_alloc_def): New argument f. \n\n\n2011-04-08 \u00a0Basile Starynkevitch \u00a0<basile@starynkevitch.net>\n\n\t* gengtype.c (write_typed_alloc_def): New argument f. Use it instead\n\tof header_file.\n\t(write_typed_struct_alloc_def, write_typed_typedef_alloc_def)\n\t(write_typed_alloc_defns): Likewise.\n\t(main): Calls write_typed_alloc_defns with output_header.\n\nFrom-SVN: r172203", "tree": {"sha": "bd1d97dbaca135ad8a44c8e7a67e124d82a6fa01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1d97dbaca135ad8a44c8e7a67e124d82a6fa01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbb6fb7e40ad675386f78937cc153ce5bfaf990/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89577341ed81c12c9e50280d2519c0d90bc7f03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89577341ed81c12c9e50280d2519c0d90bc7f03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89577341ed81c12c9e50280d2519c0d90bc7f03e"}], "stats": {"total": 115, "additions": 66, "deletions": 49}, "files": [{"sha": "73af3415bd72269f26da62ae57bdf90feee698fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbb6fb7e40ad675386f78937cc153ce5bfaf990/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbb6fb7e40ad675386f78937cc153ce5bfaf990/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "patch": "@@ -1,3 +1,12 @@\n+\n+2011-04-08 \ufffdBasile Starynkevitch \ufffd<basile@starynkevitch.net>\n+\n+\t* gengtype.c (write_typed_alloc_def): New argument f. Use it instead\n+\tof header_file.\n+\t(write_typed_struct_alloc_def, write_typed_typedef_alloc_def)\n+\t(write_typed_alloc_defns): Likewise.\n+\t(main): Calls write_typed_alloc_defns with output_header.\n+\n 2011-04-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR 48435"}, {"sha": "4d9e8c86fc14199e421c284b90b923f690e592fd", "filename": "gcc/gengtype.c", "status": "modified", "additions": 57, "deletions": 49, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbb6fb7e40ad675386f78937cc153ce5bfaf990/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbb6fb7e40ad675386f78937cc153ce5bfaf990/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "patch": "@@ -4189,104 +4189,112 @@ enum alloc_quantity\n enum alloc_zone\n { any_zone, specific_zone };\n \n-/* Writes one typed allocator definition for type identifier TYPE_NAME with\n-   optional type specifier TYPE_SPECIFIER.  The allocator name will contain\n-   ALLOCATOR_TYPE.  If VARIABLE_SIZE is true, the allocator will have an extra\n-   parameter specifying number of bytes to allocate.  If QUANTITY is set to\n-   VECTOR, a vector allocator will be output, if ZONE is set to SPECIFIC_ZONE,\n+/* Writes one typed allocator definition into output F for type\n+   identifier TYPE_NAME with optional type specifier TYPE_SPECIFIER.\n+   The allocator name will contain ALLOCATOR_TYPE.  If VARIABLE_SIZE\n+   is true, the allocator will have an extra parameter specifying\n+   number of bytes to allocate.  If QUANTITY is set to VECTOR, a\n+   vector allocator will be output, if ZONE is set to SPECIFIC_ZONE,\n    the allocator will be zone-specific.  */\n \n static void\n-write_typed_alloc_def (bool variable_size, const char *type_specifier,\n-\t\t       const char *type_name, const char *allocator_type,\n-\t\t       enum alloc_quantity quantity, enum alloc_zone zone)\n+write_typed_alloc_def (outf_p f, \n+                       bool variable_size, const char *type_specifier,\n+                       const char *type_name, const char *allocator_type,\n+                       enum alloc_quantity quantity, enum alloc_zone zone)\n {\n   bool two_args = variable_size && (quantity == vector);\n   bool third_arg = ((zone == specific_zone)\n \t\t    && (variable_size || (quantity == vector)));\n-\n-  oprintf (header_file, \"#define ggc_alloc_%s%s\", allocator_type, type_name);\n-  oprintf (header_file, \"(%s%s%s%s%s) \",\n+  gcc_assert (f != NULL);\n+  oprintf (f, \"#define ggc_alloc_%s%s\", allocator_type, type_name);\n+  oprintf (f, \"(%s%s%s%s%s) \",\n \t   (variable_size ? \"SIZE\" : \"\"),\n \t   (two_args ? \", \" : \"\"),\n \t   (quantity == vector) ? \"n\" : \"\",\n \t   (third_arg ? \", \" : \"\"), (zone == specific_zone) ? \"z\" : \"\");\n-  oprintf (header_file, \"((%s%s *)\", type_specifier, type_name);\n-  oprintf (header_file, \"(ggc_internal_%salloc_stat (\", allocator_type);\n+  oprintf (f, \"((%s%s *)\", type_specifier, type_name);\n+  oprintf (f, \"(ggc_internal_%salloc_stat (\", allocator_type);\n   if (zone == specific_zone)\n-    oprintf (header_file, \"z, \");\n+    oprintf (f, \"z, \");\n   if (variable_size)\n-    oprintf (header_file, \"SIZE\");\n+    oprintf (f, \"SIZE\");\n   else\n-    oprintf (header_file, \"sizeof (%s%s)\", type_specifier, type_name);\n+    oprintf (f, \"sizeof (%s%s)\", type_specifier, type_name);\n   if (quantity == vector)\n-    oprintf (header_file, \", n\");\n-  oprintf (header_file, \" MEM_STAT_INFO)))\\n\");\n+    oprintf (f, \", n\");\n+  oprintf (f, \" MEM_STAT_INFO)))\\n\");\n }\n \n-/* Writes a typed allocator definition for a struct or union S.  */\n+/* Writes a typed allocator definition into output F for a struct or\n+   union S, with a given ALLOCATOR_TYPE and QUANTITY for ZONE.  */\n \n static void\n-write_typed_struct_alloc_def (const type_p s, const char *allocator_type,\n+write_typed_struct_alloc_def (outf_p f,\n+\t\t\t      const type_p s, const char *allocator_type,\n \t\t\t      enum alloc_quantity quantity,\n \t\t\t      enum alloc_zone zone)\n {\n-  write_typed_alloc_def (variable_size_p (s), get_type_specifier (s),\n-\t\t\t s->u.s.tag, allocator_type, quantity, zone);\n+  write_typed_alloc_def (f, variable_size_p (s), get_type_specifier (s),\n+                         s->u.s.tag, allocator_type, quantity, zone);\n }\n \n-/* Writes a typed allocator definition for a typedef P.  */\n+/* Writes a typed allocator definition into output F for a typedef P,\n+   with a given ALLOCATOR_TYPE and QUANTITY for ZONE.  */\n \n static void\n-write_typed_typedef_alloc_def (const pair_p p, const char *allocator_type,\n-\t\t\t       enum alloc_quantity quantity,\n-\t\t\t       enum alloc_zone zone)\n+write_typed_typedef_alloc_def (outf_p f,\n+                               const pair_p p, const char *allocator_type,\n+                               enum alloc_quantity quantity,\n+                               enum alloc_zone zone)\n {\n-  write_typed_alloc_def (variable_size_p (p->type), \"\", p->name,\n-\t\t\t allocator_type, quantity, zone);\n+  write_typed_alloc_def (f, variable_size_p (p->type), \"\", p->name,\n+                         allocator_type, quantity, zone);\n }\n \n-/* Writes typed allocator definitions for the types in STRUCTURES and\n-   TYPEDEFS that are used by GC.  */\n+/* Writes typed allocator definitions into output F for the types in\n+   STRUCTURES and TYPEDEFS that are used by GC.  */\n \n static void\n-write_typed_alloc_defns (const type_p structures, const pair_p typedefs)\n+write_typed_alloc_defns (outf_p f,\n+                         const type_p structures, const pair_p typedefs)\n {\n   type_p s;\n   pair_p p;\n \n-  oprintf (header_file,\n+  gcc_assert (f != NULL);\n+  oprintf (f,\n \t   \"\\n/* Allocators for known structs and unions.  */\\n\\n\");\n   for (s = structures; s; s = s->next)\n     {\n       if (!USED_BY_TYPED_GC_P (s))\n \tcontinue;\n-      write_typed_struct_alloc_def (s, \"\", single, any_zone);\n-      write_typed_struct_alloc_def (s, \"cleared_\", single, any_zone);\n-      write_typed_struct_alloc_def (s, \"vec_\", vector, any_zone);\n-      write_typed_struct_alloc_def (s, \"cleared_vec_\", vector, any_zone);\n-      write_typed_struct_alloc_def (s, \"zone_\", single, specific_zone);\n-      write_typed_struct_alloc_def (s, \"zone_cleared_\", single,\n+      write_typed_struct_alloc_def (f, s, \"\", single, any_zone);\n+      write_typed_struct_alloc_def (f, s, \"cleared_\", single, any_zone);\n+      write_typed_struct_alloc_def (f, s, \"vec_\", vector, any_zone);\n+      write_typed_struct_alloc_def (f, s, \"cleared_vec_\", vector, any_zone);\n+      write_typed_struct_alloc_def (f, s, \"zone_\", single, specific_zone);\n+      write_typed_struct_alloc_def (f, s, \"zone_cleared_\", single,\n \t\t\t\t    specific_zone);\n-      write_typed_struct_alloc_def (s, \"zone_vec_\", vector, specific_zone);\n-      write_typed_struct_alloc_def (s, \"zone_cleared_vec_\", vector,\n+      write_typed_struct_alloc_def (f, s, \"zone_vec_\", vector, specific_zone);\n+      write_typed_struct_alloc_def (f, s, \"zone_cleared_vec_\", vector,\n \t\t\t\t    specific_zone);\n     }\n \n-  oprintf (header_file, \"\\n/* Allocators for known typedefs.  */\\n\");\n+  oprintf (f, \"\\n/* Allocators for known typedefs.  */\\n\");\n   for (p = typedefs; p; p = p->next)\n     {\n       s = p->type;\n       if (!USED_BY_TYPED_GC_P (s) || (strcmp (p->name, s->u.s.tag) == 0))\n \tcontinue;\n-      write_typed_typedef_alloc_def (p, \"\", single, any_zone);\n-      write_typed_typedef_alloc_def (p, \"cleared_\", single, any_zone);\n-      write_typed_typedef_alloc_def (p, \"vec_\", vector, any_zone);\n-      write_typed_typedef_alloc_def (p, \"cleared_vec_\", vector, any_zone);\n-      write_typed_typedef_alloc_def (p, \"zone_\", single, specific_zone);\n-      write_typed_typedef_alloc_def (p, \"zone_cleared_\", single,\n+      write_typed_typedef_alloc_def (f, p, \"\", single, any_zone);\n+      write_typed_typedef_alloc_def (f, p, \"cleared_\", single, any_zone);\n+      write_typed_typedef_alloc_def (f, p, \"vec_\", vector, any_zone);\n+      write_typed_typedef_alloc_def (f, p, \"cleared_vec_\", vector, any_zone);\n+      write_typed_typedef_alloc_def (f, p, \"zone_\", single, specific_zone);\n+      write_typed_typedef_alloc_def (f, p, \"zone_cleared_\", single,\n \t\t\t\t     specific_zone);\n-      write_typed_typedef_alloc_def (p, \"zone_cleared_vec_\", vector,\n+      write_typed_typedef_alloc_def (f, p, \"zone_cleared_vec_\", vector,\n \t\t\t\t     specific_zone);\n     }\n }\n@@ -4990,8 +4998,8 @@ main (int argc, char **argv)\n   open_base_files ();\n \n   write_enum_defn (structures, param_structs);\n-  write_typed_alloc_defns (structures, typedefs);\n   output_header = plugin_output ? plugin_output : header_file;\n+  write_typed_alloc_defns (output_header, structures, typedefs);\n   DBGPRINT_COUNT_TYPE (\"structures before write_types outputheader\",\n \t\t       structures);\n   DBGPRINT_COUNT_TYPE (\"param_structs before write_types outputheader\","}]}