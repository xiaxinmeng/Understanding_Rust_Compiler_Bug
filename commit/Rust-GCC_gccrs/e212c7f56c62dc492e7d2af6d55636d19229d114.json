{"sha": "e212c7f56c62dc492e7d2af6d55636d19229d114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxMmM3ZjU2YzYyZGM0OTJlN2QyYWY2ZDU1NjM2ZDE5MjI5ZDExNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-10-31T20:49:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-10-31T20:49:53Z"}, "message": "runtime/goc2c: Drop gc support, change int to intgo.\n\nFrom-SVN: r193046", "tree": {"sha": "5fd046a7d12a30927c80c22aa885a7c4f9fdee1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd046a7d12a30927c80c22aa885a7c4f9fdee1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e212c7f56c62dc492e7d2af6d55636d19229d114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e212c7f56c62dc492e7d2af6d55636d19229d114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e212c7f56c62dc492e7d2af6d55636d19229d114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e212c7f56c62dc492e7d2af6d55636d19229d114/comments", "author": null, "committer": null, "parents": [{"sha": "2455de38092d824391fe2612cbf9dad890e349a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2455de38092d824391fe2612cbf9dad890e349a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2455de38092d824391fe2612cbf9dad890e349a7"}], "stats": {"total": 225, "additions": 54, "deletions": 171}, "files": [{"sha": "cabe756a1c41bee7f323aac8df119aeead0c0fc5", "filename": "libgo/Makefile.am", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=e212c7f56c62dc492e7d2af6d55636d19229d114", "patch": "@@ -536,35 +536,35 @@ goc2c: goc2c.$(OBJEXT)\n \t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@ $<\n \n malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sema.c: $(srcdir)/runtime/sema.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n-\t./goc2c --gcc --go-pkgpath os_signal $< > $@.tmp\n+\t./goc2c --go-pkgpath os_signal $< > $@.tmp\n \tmv -f $@.tmp $@\n \n time.c: $(srcdir)/runtime/time.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n %.c: $(srcdir)/runtime/%.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n go_bufio_files = \\"}, {"sha": "8d80e08a6def189b313f99764fb19dfa34917ae7", "filename": "libgo/Makefile.in", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=e212c7f56c62dc492e7d2af6d55636d19229d114", "patch": "@@ -4310,35 +4310,35 @@ goc2c: goc2c.$(OBJEXT)\n \t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@ $<\n \n malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sema.c: $(srcdir)/runtime/sema.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n-\t./goc2c --gcc --go-pkgpath os_signal $< > $@.tmp\n+\t./goc2c --go-pkgpath os_signal $< > $@.tmp\n \tmv -f $@.tmp $@\n \n time.c: $(srcdir)/runtime/time.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n %.c: $(srcdir)/runtime/%.goc goc2c\n-\t./goc2c --gcc $< > $@.tmp\n+\t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n version.go: s-version; @true"}, {"sha": "22295360a4b9663cf9a76c56be90fd9a56f7af62", "filename": "libgo/runtime/goc2c.c", "status": "modified", "additions": 38, "deletions": 155, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2Fruntime%2Fgoc2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e212c7f56c62dc492e7d2af6d55636d19229d114/libgo%2Fruntime%2Fgoc2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgoc2c.c?ref=e212c7f56c62dc492e7d2af6d55636d19229d114", "patch": "@@ -30,13 +30,10 @@\n #include <string.h>\n #include <errno.h>\n \n-/* Whether we're emitting for gcc */\n-static int gcc;\n-\n-/* Package path to use; only meaningful for gcc */\n+/* Package path to use.  */\n static const char *pkgpath;\n \n-/* Package prefix to use; only meaningful for gcc */\n+/* Package prefix to use.  */\n static const char *prefix;\n \n /* File and line number */\n@@ -50,53 +47,6 @@ struct params {\n \tchar *type;\n };\n \n-/* index into type_table */\n-enum {\n-\tBool,\n-\tFloat,\n-\tInt,\n-\tUint,\n-\tUintptr,\n-\tString,\n-\tSlice,\n-\tEface,\n-};\n-\n-static struct {\n-\tchar *name;\n-\tint size;\n-} type_table[] = {\n-\t/* variable sized first, for easy replacement */\n-\t/* order matches enum above */\n-\t/* default is 32-bit architecture sizes */\n-\t\"bool\",\t\t1,\n-\t\"float\",\t4,\n-\t\"int\",\t\t4,\n-\t\"uint\",\t\t4,\n-\t\"uintptr\",\t4,\n-\t\"String\",\t8,\n-\t\"Slice\",\t12,\n-\t\"Eface\",\t8,\n-\n-\t/* fixed size */\n-\t\"float32\",\t4,\n-\t\"float64\",\t8,\n-\t\"byte\",\t\t1,\n-\t\"int8\",\t\t1,\n-\t\"uint8\",\t1,\n-\t\"int16\",\t2,\n-\t\"uint16\",\t2,\n-\t\"int32\",\t4,\n-\t\"uint32\",\t4,\n-\t\"int64\",\t8,\n-\t\"uint64\",\t8,\n-\n-\tNULL,\n-};\n-\n-/* Fixed structure alignment (non-gcc only) */\n-int structround = 4;\n-\n char *argv0;\n \n static void\n@@ -147,6 +97,15 @@ xrealloc(void *buf, unsigned int size)\n \treturn ret;\n }\n \n+/* Copy a string into memory without fail.  */\n+static char *\n+xstrdup(const char *p)\n+{\n+\tchar *ret = xmalloc(strlen(p) + 1);\n+\tstrcpy(ret, p);\n+\treturn ret;\n+}\n+\n /* Free a list of parameters.  */\n static void\n free_params(struct params *p)\n@@ -351,14 +310,29 @@ read_type(void)\n \tunsigned int len;\n \n \tp = read_token_no_eof();\n-\tif (*p != '*')\n+\tif (*p != '*') {\n+\t\t/* Convert the Go type \"int\" to the C type \"intgo\",\n+\t\t   and similarly for \"uint\".  */\n+\t\tif (strcmp(p, \"int\") == 0)\n+\t\t\treturn xstrdup(\"intgo\");\n+\t\telse if (strcmp(p, \"uint\") == 0)\n+\t\t\treturn xstrdup(\"uintgo\");\n \t\treturn p;\n+\t}\n \top = p;\n \tpointer_count = 0;\n \twhile (*p == '*') {\n \t\t++pointer_count;\n \t\t++p;\n \t}\n+\n+\t/* Convert the Go type \"int\" to the C type \"intgo\", and\n+\t   similarly for \"uint\".  */\n+\tif (strcmp(p, \"int\") == 0)\n+\t  p = (char *) \"intgo\";\n+\telse if (strcmp(p, \"uint\") == 0)\n+\t  p = (char *) \"uintgo\";\n+\n \tlen = strlen(p);\n \tq = xmalloc(len + pointer_count + 1);\n \tmemcpy(q, p, len);\n@@ -372,39 +346,19 @@ read_type(void)\n \treturn q;\n }\n \n-/* Return the size of the given type. */\n-static int\n-type_size(char *p)\n-{\n-\tint i;\n-\n-\tif(p[strlen(p)-1] == '*')\n-\t\treturn type_table[Uintptr].size;\n-\n-\tfor(i=0; type_table[i].name; i++)\n-\t\tif(strcmp(type_table[i].name, p) == 0)\n-\t\t\treturn type_table[i].size;\n-\tif(!gcc) {\n-\t\tsysfatal(\"%s:%ud: unknown type %s\\n\", file, lineno, p);\n-\t}\n-\treturn 1;\n-}\n-\n /*\n  * Read a list of parameters.  Each parameter is a name and a type.\n  * The list ends with a ')'.  We have already read the '('.\n  */\n static struct params *\n-read_params(int *poffset)\n+read_params()\n {\n \tchar *token;\n \tstruct params *ret, **pp, *p;\n-\tint offset, size, rnd;\n \n \tret = NULL;\n \tpp = &ret;\n \ttoken = read_token_no_eof();\n-\toffset = 0;\n \tif (strcmp(token, \")\") != 0) {\n \t\twhile (1) {\n \t\t\tp = xmalloc(sizeof(struct params));\n@@ -414,14 +368,6 @@ read_params(int *poffset)\n \t\t\t*pp = p;\n \t\t\tpp = &p->next;\n \n-\t\t\tsize = type_size(p->type);\n-\t\t\trnd = size;\n-\t\t\tif(rnd > structround)\n-\t\t\t\trnd = structround;\n-\t\t\tif(offset%rnd)\n-\t\t\t\toffset += rnd - offset%rnd;\n-\t\t\toffset += size;\n-\n \t\t\ttoken = read_token_no_eof();\n \t\t\tif (strcmp(token, \",\") != 0)\n \t\t\t\tbreak;\n@@ -432,8 +378,6 @@ read_params(int *poffset)\n \t\tsysfatal(\"%s:%ud: expected '('\\n\",\n \t\t\tfile, lineno);\n \t}\n-\tif (poffset != NULL)\n-\t\t*poffset = offset;\n \treturn ret;\n }\n \n@@ -442,7 +386,7 @@ read_params(int *poffset)\n  * '{' character.  Returns 1 if it read a header, 0 at EOF.\n  */\n static int\n-read_func_header(char **name, struct params **params, int *paramwid, struct params **rets)\n+read_func_header(char **name, struct params **params, struct params **rets)\n {\n \tint lastline;\n \tchar *token;\n@@ -474,13 +418,13 @@ read_func_header(char **name, struct params **params, int *paramwid, struct para\n \t\tsysfatal(\"%s:%ud: expected \\\"(\\\"\\n\",\n \t\t\tfile, lineno);\n \t}\n-\t*params = read_params(paramwid);\n+\t*params = read_params();\n \n \ttoken = read_token();\n \tif (token == NULL || strcmp(token, \"(\") != 0)\n \t\t*rets = NULL;\n \telse {\n-\t\t*rets = read_params(NULL);\n+\t\t*rets = read_params();\n \t\ttoken = read_token();\n \t}\n \tif (token == NULL || strcmp(token, \"{\") != 0) {\n@@ -505,43 +449,6 @@ write_params(struct params *params, int *first)\n \t}\n }\n \n-/* Write a 6g function header.  */\n-static void\n-write_6g_func_header(char *package, char *name, struct params *params,\n-\t\t     int paramwid, struct params *rets)\n-{\n-\tint first, n;\n-\n-\tprintf(\"void\\n%s\u00b7%s(\", package, name);\n-\tfirst = 1;\n-\twrite_params(params, &first);\n-\n-\t/* insert padding to align output struct */\n-\tif(rets != NULL && paramwid%structround != 0) {\n-\t\tn = structround - paramwid%structround;\n-\t\tif(n & 1)\n-\t\t\tprintf(\", uint8\");\n-\t\tif(n & 2)\n-\t\t\tprintf(\", uint16\");\n-\t\tif(n & 4)\n-\t\t\tprintf(\", uint32\");\n-\t}\n-\n-\twrite_params(rets, &first);\n-\tprintf(\")\\n{\\n\");\n-}\n-\n-/* Write a 6g function trailer.  */\n-static void\n-write_6g_func_trailer(struct params *rets)\n-{\n-\tstruct params *p;\n-\n-\tfor (p = rets; p != NULL; p = p->next)\n-\t\tprintf(\"\\tFLUSH(&%s);\\n\", p->name);\n-\tprintf(\"}\\n\");\n-}\n-\n /* Define the gcc function return type if necessary.  */\n static void\n define_gcc_return_type(char *package, char *name, struct params *rets)\n@@ -619,14 +526,10 @@ write_gcc_func_trailer(char *package, char *name, struct params *rets)\n \n /* Write out a function header.  */\n static void\n-write_func_header(char *package, char *name,\n-\t\t  struct params *params, int paramwid,\n+write_func_header(char *package, char *name, struct params *params, \n \t\t  struct params *rets)\n {\n-\tif (gcc)\n-\t\twrite_gcc_func_header(package, name, params, rets);\n-\telse\n-\t\twrite_6g_func_header(package, name, params, paramwid, rets);\n+\twrite_gcc_func_header(package, name, params, rets);\n \tprintf(\"#line %d \\\"%s\\\"\\n\", lineno, file);\n }\n \n@@ -635,10 +538,7 @@ static void\n write_func_trailer(char *package, char *name,\n \t\t   struct params *rets)\n {\n-\tif (gcc)\n-\t\twrite_gcc_func_trailer(package, name, rets);\n-\telse\n-\t\twrite_6g_func_trailer(rets);\n+\twrite_gcc_func_trailer(package, name, rets);\n }\n \n /*\n@@ -713,12 +613,11 @@ process_file(void)\n {\n \tchar *package, *name;\n \tstruct params *params, *rets;\n-\tint paramwid;\n \n \tpackage = read_package();\n \tread_preprocessor_lines();\n-\twhile (read_func_header(&name, &params, &paramwid, &rets)) {\n-\t\twrite_func_header(package, name, params, paramwid, rets);\n+\twhile (read_func_header(&name, &params, &rets)) {\n+\t\twrite_func_header(package, name, params, rets);\n \t\tcopy_body();\n \t\twrite_func_trailer(package, name, rets);\n \t\tfree(name);\n@@ -731,7 +630,7 @@ process_file(void)\n static void\n usage(void)\n {\n-\tsysfatal(\"Usage: goc2c [--6g | --gc] [--go-pkgpath PKGPATH] [--go-prefix PREFIX] [file]\\n\");\n+\tsysfatal(\"Usage: goc2c [--go-pkgpath PKGPATH] [--go-prefix PREFIX] [file]\\n\");\n }\n \n void\n@@ -743,11 +642,7 @@ main(int argc, char **argv)\n \twhile(argc > 1 && argv[1][0] == '-') {\n \t\tif(strcmp(argv[1], \"-\") == 0)\n \t\t\tbreak;\n-\t\tif(strcmp(argv[1], \"--6g\") == 0)\n-\t\t\tgcc = 0;\n-\t\telse if(strcmp(argv[1], \"--gcc\") == 0)\n-\t\t\tgcc = 1;\n-\t\telse if (strcmp(argv[1], \"--go-pkgpath\") == 0 && argc > 2) {\n+\t\tif (strcmp(argv[1], \"--go-pkgpath\") == 0 && argc > 2) {\n \t\t\tpkgpath = argv[2];\n \t\t\targc--;\n \t\t\targv++;\n@@ -775,18 +670,6 @@ main(int argc, char **argv)\n \t\tsysfatal(\"open %s: %r\\n\", file);\n \t}\n \n-\tif(!gcc) {\n-\t\t// 6g etc; update size table\n-\t\tgoarch = getenv(\"GOARCH\");\n-\t\tif(goarch != NULL && strcmp(goarch, \"amd64\") == 0) {\n-\t\t\ttype_table[Uintptr].size = 8;\n-\t\t\ttype_table[String].size = 16;\n-\t\t\ttype_table[Slice].size = 8+4+4;\n-\t\t\ttype_table[Eface].size = 8+8;\n-\t\t\tstructround = 8;\n-\t\t}\n-\t}\n-\n \tprintf(\"// AUTO-GENERATED by autogen.sh; DO NOT EDIT\\n\\n\");\n \tprocess_file();\n \texit(0);"}]}