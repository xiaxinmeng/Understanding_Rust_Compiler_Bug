{"sha": "336e1b950db8b91027cdf0ab33bd905930d7f363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2ZTFiOTUwZGI4YjkxMDI3Y2RmMGFiMzNiZDkwNTkzMGQ3ZjM2Mw==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-01-17T11:22:28Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-01-17T15:05:12Z"}, "message": "[AArch64] Enable CLI for Armv8.6-A f64mm\n\nThis patch is necessary for sve-ld1ro intrinsic I posted in\nhttps://gcc.gnu.org/ml/gcc-patches/2020-01/msg00466.html .\n\nI had mistakenly thought this option was already enabled upstream.\n\nThis provides the option +f64mm, that turns on the 64 bit floating point\nmatrix multiply extension.  This extension is only available for\nAArch64.  Turning on this extension also turns on the SVE extension.\n\nThis extension is optional and only available at Armv8.2-A and onward.\n\nWe also add the ACLE defined macro for this extension.\n\ngcc/ChangeLog:\n\n2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64-c.c (_ARM_FEATURE_MATMUL_FLOAT64):\n\tIntroduce this ACLE specified predefined macro.\n\t* config/aarch64/aarch64-option-extensions.def (f64mm): New.\n\t(fp): Disabling this disables f64mm.\n\t(simd): Disabling this disables f64mm.\n\t(fp16): Disabling this disables f64mm.\n\t(sve): Disabling this disables f64mm.\n\t* config/aarch64/aarch64.h (AARCH64_FL_F64MM): New.\n\t(AARCH64_ISA_F64MM): New.\n\t(TARGET_F64MM): New.\n\t* doc/invoke.texi (f64mm): Document new option.\n\ngcc/testsuite/ChangeLog:\n\n2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Check for f64mm\n\tpredef.", "tree": {"sha": "b9bf081d1ff07345096db3933dc7fa58dd84bbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9bf081d1ff07345096db3933dc7fa58dd84bbb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336e1b950db8b91027cdf0ab33bd905930d7f363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336e1b950db8b91027cdf0ab33bd905930d7f363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336e1b950db8b91027cdf0ab33bd905930d7f363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336e1b950db8b91027cdf0ab33bd905930d7f363/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed8c923325c9b2fcb30996fa14582ac136d9329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed8c923325c9b2fcb30996fa14582ac136d9329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed8c923325c9b2fcb30996fa14582ac136d9329"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "39914e1083f66f968c83595500fc7e734db8221e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -1,3 +1,17 @@\n+2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (_ARM_FEATURE_MATMUL_FLOAT64):\n+\tIntroduce this ACLE specified predefined macro.\n+\t* config/aarch64/aarch64-option-extensions.def (f64mm): New.\n+\t(fp): Disabling this disables f64mm.\n+\t(simd): Disabling this disables f64mm.\n+\t(fp16): Disabling this disables f64mm.\n+\t(sve): Disabling this disables f64mm.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_F64MM): New.\n+\t(AARCH64_ISA_F64MM): New.\n+\t(TARGET_F64MM): New.\n+\t* doc/invoke.texi (f64mm): Document new option.\n+\n 2020-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (generic_tunings): Add branch fusion."}, {"sha": "00201056f4aa3310a1fa85abed5c2366e33e1a69", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -171,6 +171,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_MEMTAG, \"__ARM_FEATURE_MEMORY_TAGGING\", pfile);\n \n   aarch64_def_or_undef (TARGET_I8MM, \"__ARM_FEATURE_MATMUL_INT8\", pfile);\n+  aarch64_def_or_undef (TARGET_F64MM, \"__ARM_FEATURE_MATMUL_FP64\", pfile);\n   aarch64_def_or_undef (TARGET_BF16_SIMD,\n \t\t\t\"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC\", pfile);\n   aarch64_def_or_undef (TARGET_BF16_FP,"}, {"sha": "548f3e20293b7a650eb6bca840e0df53bd51a053", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -53,26 +53,26 @@\n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n    \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n-   \"sve2-bitperm\", \"i8mm\" and \"bf16\".  */\n+   \"sve2-bitperm\", \"i8mm\", \"f64mm\", and \"bf16\".  */\n AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | \\\n \t\t      AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | \\\n \t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n \t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n \t\t      AARCH64_FL_SVE2_BITPERM | AARCH64_FL_I8MM | \\\n-\t\t      AARCH64_FL_BF16, false, \"fp\")\n+\t\t      AARCH64_FL_F64MM | AARCH64_FL_BF16, false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n    \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n-   \"sve2-bitperm\", and \"i8mm\".  */\n+   \"sve2-bitperm\", \"i8mm\", and \"f64mm\".  */\n AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | \\\n \t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | \\\n \t\t      AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n \t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n \t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM | \\\n-\t\t      AARCH64_FL_I8MM, false, \\\n+\t\t      AARCH64_FL_I8MM | AARCH64_FL_F64MM, false, \\\n \t\t      \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n@@ -92,12 +92,13 @@ AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, false, \"crc32\")\n AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, false, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n-   Disabling \"fp16\" disables \"fp16\", \"fp16fml\", \"sve\", \"sve2\", \"sve2-aes\",\n-   \"sve2-sha3\", \"sve2-sm4\", and \"bitperm\".  */\n+   Disabling \"fp16\" disables \"fp16\", \"fp16fml\", \"sve\", \"sve2\",\n+   \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", \"sve2-bitperm\", and \"f64mm\".  */\n AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, \\\n-\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n-\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n-\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \\\n+\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_F64MM | \\\n+\t\t      AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n+\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n+\t\t      AARCH64_FL_SVE2_BITPERM, false, \\\n \t\t      \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n@@ -140,12 +141,13 @@ AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, \\\n \t\t      AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfhm\")\n \n /* Enabling \"sve\" also enables \"fp16\", \"fp\" and \"simd\".\n-   Disabling \"sve\" disables \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\"\n-   and \"sve2-bitperm\".  */\n+   Disabling \"sve\" disables \"sve\", \"f64mm\", \"sve2\", \"sve2-aes\", \"sve2-sha3\",\n+   \"sve2-sm4\" and \"sve2-bitperm\".  */\n AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | \\\n-\t\t      AARCH64_FL_F16, AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n-\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n-\t\t      AARCH64_FL_SVE2_BITPERM, false, \"sve\")\n+\t\t      AARCH64_FL_F16, AARCH64_FL_F64MM | AARCH64_FL_SVE2 | \\\n+\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, \\\n+\t\t      false, \"sve\")\n \n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, false, \"\")\n@@ -205,6 +207,12 @@ AARCH64_OPT_EXTENSION(\"tme\", AARCH64_FL_TME, 0, 0, false, \"\")\n AARCH64_OPT_EXTENSION(\"i8mm\", AARCH64_FL_I8MM, \\\n \t\t      AARCH64_FL_SIMD | AARCH64_FL_FP, 0, false, \"i8mm\")\n \n+/* Enabling \"f64mm\" also enables \"sve\", \"fp16\", \"fp\", and \"simd\".\n+   Disabling \"f64mm\" only disables \"f64mm\".  */\n+AARCH64_OPT_EXTENSION(\"f64mm\", AARCH64_FL_F64MM, \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_F16 | AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SIMD, 0, false, \"f64mm\")\n+\n /* Enabling \"bf16\" also enables \"simd\" and \"fp\".\n    Disabling \"bf16\" only disables \"bf16\".  */\n AARCH64_OPT_EXTENSION(\"bf16\", AARCH64_FL_BF16, \\"}, {"sha": "eac2d62d63c8cc88fb1fe566cf95a4c56bb5bb4c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -211,6 +211,9 @@ extern unsigned aarch64_architecture_version;\n /* Brain half-precision floating-point (BFloat16) Extension.  */\n #define AARCH64_FL_BF16\t      (1ULL << 36)\n \n+/* 8-bit Integer Matrix Multiply (F64MM) extensions.  */\n+#define AARCH64_FL_F64MM      (1ULL << 37)\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n \n@@ -267,6 +270,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_MEMTAG\t   (aarch64_isa_flags & AARCH64_FL_MEMTAG)\n #define AARCH64_ISA_V8_6\t   (aarch64_isa_flags & AARCH64_FL_V8_6)\n #define AARCH64_ISA_I8MM\t   (aarch64_isa_flags & AARCH64_FL_I8MM)\n+#define AARCH64_ISA_F64MM\t   (aarch64_isa_flags & AARCH64_FL_F64MM)\n #define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n@@ -342,6 +346,9 @@ extern unsigned aarch64_architecture_version;\n /* I8MM instructions are enabled through +i8mm.  */\n #define TARGET_I8MM (AARCH64_ISA_I8MM)\n \n+/* F64MM instructions are enabled through +f64mm.  */\n+#define TARGET_F64MM (AARCH64_ISA_F64MM)\n+\n /* BF16 instructions are enabled through +bf16.  */\n #define TARGET_BF16_FP (AARCH64_ISA_BF16)\n #define TARGET_BF16_SIMD (AARCH64_ISA_BF16 && TARGET_SIMD)"}, {"sha": "355bf1b247ab4fe614ec29ab6fdb6ef0eb16df6f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -16970,6 +16970,10 @@ Enable 8-bit Integer Matrix Multiply instructions.  This also enables\n Advanced SIMD and floating-point instructions.  This option is enabled by\n default for @option{-march=armv8.6-a}.  Use of this option with architectures\n prior to Armv8.2-A is not supported.\n+@item f64mm\n+Enable 64-bit Floating point Matrix Multiply instructions.  This also enables\n+SVE instructions.  Use of this option with architectures prior to Armv8.2-A is\n+not supported.\n @item bf16\n Enable brain half-precision floating-point instructions.  This also enables\n Advanced SIMD and floating-point instructions.  This option is enabled by"}, {"sha": "de3fe13dabf74595f7e7c3a5335c6653974df1f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -1,3 +1,8 @@\n+2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Check for f64mm\n+\tpredef.\n+\n 2020-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93228"}, {"sha": "27d475f3cc0dc9debd4e58f010bb54f44f6ca5b6", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336e1b950db8b91027cdf0ab33bd905930d7f363/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c?ref=336e1b950db8b91027cdf0ab33bd905930d7f363", "patch": "@@ -22,11 +22,18 @@\n #error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n #endif\n \n+#ifdef __ARM_FEATURE_MATMUL_FP64\n+#error \"__ARM_FEATURE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.6-a\")\n #ifndef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n #endif\n+#ifdef __ARM_FEATURE_MATMUL_FP64\n+#error \"__ARM_FEATURE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n #pragma GCC pop_options\n \n #pragma GCC push_options\n@@ -36,6 +43,13 @@\n #endif\n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+f64mm\")\n+#ifndef __ARM_FEATURE_MATMUL_FP64\n+#error \"__ARM_FEATURE_MATMUL_FP64 is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.6-a+nosimd\")\n #ifdef __ARM_FEATURE_MATMUL_INT8"}]}