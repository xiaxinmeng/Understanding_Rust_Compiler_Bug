{"sha": "d89e5e20b6b4c984561d7016479c4d92742c1368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5ZTVlMjBiNmI0Yzk4NDU2MWQ3MDE2NDc5YzRkOTI3NDJjMTM2OA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-07-08T16:38:00Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-07-08T16:38:00Z"}, "message": "Call maybe_fold_or_comparisons to fold OR-ed predicates.\n\n2010-07-08  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/44710\n\t* tree-if-conv.c (parse_predicate): New.\n\t(add_to_predicate_list): Call it, call maybe_fold_or_comparisons.\n\tMake sure that the predicates are either SSA_NAMEs or gimple_condexpr.\n\n\t* gcc.dg/tree-ssa/ifc-6.c: New.\n\t* gcc.dg/tree-ssa/ifc-pr44710.c: New.\n\nFrom-SVN: r161964", "tree": {"sha": "0b12d32c8a04aab1e5a9d3e70eb973cac8553869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b12d32c8a04aab1e5a9d3e70eb973cac8553869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89e5e20b6b4c984561d7016479c4d92742c1368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89e5e20b6b4c984561d7016479c4d92742c1368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89e5e20b6b4c984561d7016479c4d92742c1368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89e5e20b6b4c984561d7016479c4d92742c1368/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384a5197cbf0fc6e87e65c2fb21b9bbf7a8eceb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384a5197cbf0fc6e87e65c2fb21b9bbf7a8eceb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384a5197cbf0fc6e87e65c2fb21b9bbf7a8eceb4"}], "stats": {"total": 162, "additions": 155, "deletions": 7}, "files": [{"sha": "b34a10d30116ac2c57bddbf4907a2770dc88fbc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d89e5e20b6b4c984561d7016479c4d92742c1368", "patch": "@@ -1,3 +1,10 @@\n+2010-07-08  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/44710\n+\t* tree-if-conv.c (parse_predicate): New.\n+\t(add_to_predicate_list): Call it, call maybe_fold_or_comparisons.\n+\tMake sure that the predicates are either SSA_NAMEs or gimple_condexpr.\n+\n 2010-07-08  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* common.opt (ftree-loop-if-convert): New flag."}, {"sha": "776f8bc5657740cb58f96955f9de10ad2342b201", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d89e5e20b6b4c984561d7016479c4d92742c1368", "patch": "@@ -1,3 +1,9 @@\n+2010-07-08  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/44710\n+\t* gcc.dg/tree-ssa/ifc-6.c: New.\n+\t* gcc.dg/tree-ssa/ifc-pr44710.c: New.\n+\n 2010-07-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "a9c5db3873f9ec4dd90b72b6791020d6d9742255", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-6.c?ref=d89e5e20b6b4c984561d7016479c4d92742c1368", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-c -O2 -ftree-vectorize\" { target *-*-* } } */\n+\n+static int x;\n+foo (int n, int *A)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (A[i])\n+\tx = 2;\n+      if (A[i + 1])\n+\tx = 1;\n+    }\n+}"}, {"sha": "d4a1be8f03ee4871bf1cd9987fde1225c7bfd9ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr44710.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr44710.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr44710.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr44710.c?ref=d89e5e20b6b4c984561d7016479c4d92742c1368", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-c -O2 -ftree-vectorize\" { target *-*-* } } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#define N 64\n+float arr[N];\n+\n+__attribute__ ((noinline)) \n+int foo (unsigned int n, float *min)\n+{\n+  unsigned int pos = 1;\n+  unsigned int i;\n+  float limit = N+N;\n+\n+  for (i = 0; i < N; i++)\n+    if (arr[i] < limit)\n+      {\n+        pos = i + 1;\n+        limit = arr[i];\n+      }\n+\n+  *min = limit;\n+  return pos;\n+}\n+\n+int main (void)\n+{\n+  int i, pos;\n+  float min;\n+\n+  for (i = 0; i < N; i++)\n+   arr[i] = (float)(i);\n+\n+  arr[2] = -5.8;\n+\n+  pos = foo (N, &min);\n+  if (pos != 3 || min != arr[2])\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "7058ee4c2749e3f18315a3c0cd8ceca68a7b469c", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 83, "deletions": 7, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89e5e20b6b4c984561d7016479c4d92742c1368/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=d89e5e20b6b4c984561d7016479c4d92742c1368", "patch": "@@ -259,17 +259,93 @@ is_predicated (basic_block bb)\n   return !is_true_predicate (bb_predicate (bb));\n }\n \n-/* Add condition NEW_COND to the predicate list of basic block BB.  */\n+/* Parses the predicate COND and returns its comparison code and\n+   operands OP0 and OP1.  */\n+\n+static enum tree_code\n+parse_predicate (tree cond, tree *op0, tree *op1)\n+{\n+  gimple s;\n+\n+  if (TREE_CODE (cond) == SSA_NAME\n+      && is_gimple_assign (s = SSA_NAME_DEF_STMT (cond)))\n+    {\n+      if (TREE_CODE_CLASS (gimple_assign_rhs_code (s)) == tcc_comparison)\n+\t{\n+\t  *op0 = gimple_assign_rhs1 (s);\n+\t  *op1 = gimple_assign_rhs2 (s);\n+\t  return gimple_assign_rhs_code (s);\n+\t}\n+\n+      else if (gimple_assign_rhs_code (s) == TRUTH_NOT_EXPR)\n+\t{\n+\t  tree op = gimple_assign_rhs1 (s);\n+\t  tree type = TREE_TYPE (op);\n+\t  enum tree_code code = parse_predicate (op, op0, op1);\n+\n+\t  return code == ERROR_MARK ? ERROR_MARK\n+\t    : invert_tree_comparison (code, HONOR_NANS (TYPE_MODE (type)));\n+\t}\n+\n+      return ERROR_MARK;\n+    }\n+\n+  if (TREE_CODE_CLASS (TREE_CODE (cond)) == tcc_comparison)\n+    {\n+      *op0 = TREE_OPERAND (cond, 0);\n+      *op1 = TREE_OPERAND (cond, 1);\n+      return TREE_CODE (cond);\n+    }\n+\n+  return ERROR_MARK;\n+}\n+\n+/* Add condition NC to the predicate list of basic block BB.  */\n \n static inline void\n-add_to_predicate_list (basic_block bb, tree new_cond)\n+add_to_predicate_list (basic_block bb, tree nc)\n {\n-  tree cond = bb_predicate (bb);\n+  tree bc;\n+\n+  if (is_true_predicate (nc))\n+    return;\n+\n+  if (!is_predicated (bb))\n+    bc = nc;\n+  else\n+    {\n+      enum tree_code code1, code2;\n+      tree op1a, op1b, op2a, op2b;\n+\n+      bc = bb_predicate (bb);\n+      code1 = parse_predicate (bc, &op1a, &op1b);\n+      code2 = parse_predicate (nc, &op2a, &op2b);\n+\n+      if (code1 != ERROR_MARK && code2 != ERROR_MARK)\n+\t{\n+\t  tree t = maybe_fold_or_comparisons (code1, op1a, op1b,\n+\t\t\t\t\t      code2, op2a, op2b);\n+\t  if (!t)\n+\t    t = fold_build2_loc (EXPR_LOCATION (bc), TRUTH_OR_EXPR,\n+\t\t\t\t boolean_type_node, bc, nc);\n+\t  bc = t;\n+\t}\n+      else\n+\tbc = fold_build2_loc (EXPR_LOCATION (bc), TRUTH_OR_EXPR,\n+\t\t\t      boolean_type_node, bc, nc);\n+    }\n \n-  set_bb_predicate (bb, is_true_predicate (cond) ? new_cond :\n-\t\t    fold_build2_loc (EXPR_LOCATION (cond),\n-\t\t\t\t     TRUTH_OR_EXPR, boolean_type_node,\n-\t\t\t\t     cond, new_cond));\n+  if (!is_gimple_condexpr (bc))\n+    {\n+      gimple_seq stmts;\n+      bc = force_gimple_operand (bc, &stmts, true, NULL_TREE);\n+      add_bb_predicate_gimplified_stmts (bb, stmts);\n+    }\n+\n+  if (is_true_predicate (bc))\n+    reset_bb_predicate (bb);\n+  else\n+    set_bb_predicate (bb, bc);\n }\n \n /* Add the condition COND to the previous condition PREV_COND, and add"}]}