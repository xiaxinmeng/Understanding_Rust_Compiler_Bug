{"sha": "783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzZTI5ODk5YjViYmVjY2Y2N2E4NDYwYzBlMTBkOTFjYjQ1ZTJmYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-17T06:41:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-17T06:41:06Z"}, "message": "c-opts.c: Default TARGET_EBCDIC to 0 if not defined.\n\n\t* c-opts.c: Default TARGET_EBCDIC to 0 if not defined.\n\t(c_common_init): Set EBCDIC in cpp options.\n\t* cpplex.c (maybe_read_ucs, cpp_parse_escape): Use EBCDIC option,\n\tnot conditional compilation.\n\t* cpplib.h (struct cpp_options): New entry EBCDIC.\n\nFrom-SVN: r64471", "tree": {"sha": "8b2722d0b6eec418537a94d6fbb9ddc51f7ce249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2722d0b6eec418537a94d6fbb9ddc51f7ce249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72ecfc6033acf7c9294f27fe66d2c8886f1dc86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ecfc6033acf7c9294f27fe66d2c8886f1dc86d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ecfc6033acf7c9294f27fe66d2c8886f1dc86d"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "7197370f36cc9c441a28a6258a38b5cf81bc32be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "patch": "@@ -1,3 +1,11 @@\n+2003-03-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c: Default TARGET_EBCDIC to 0 if not defined.\n+\t(c_common_init): Set EBCDIC in cpp options.\n+\t* cpplex.c (maybe_read_ucs, cpp_parse_escape): Use EBCDIC option,\n+\tnot conditional compilation.\n+\t* cpplib.h (struct cpp_options): New entry EBCDIC.\n+\n 2003-03-17  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* fix-header.c (read_scan_file): Need to malloc arguments to add_path."}, {"sha": "8c639cca2937a79e6b321cd170fe4c20e0375b58", "filename": "gcc/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "patch": "@@ -40,6 +40,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n # define TARGET_SYSTEM_ROOT NULL\n #endif\n \n+#ifndef TARGET_EBCDIC\n+# define TARGET_EBCDIC 0\n+#endif\n+\n static int saved_lineno;\n \n /* CPP's options.  */\n@@ -1590,6 +1594,7 @@ c_common_init ()\n   cpp_opts->int_precision = TYPE_PRECISION (integer_type_node);\n   cpp_opts->wchar_precision = TYPE_PRECISION (wchar_type_node);\n   cpp_opts->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n+  cpp_opts->EBCDIC = TARGET_EBCDIC;\n \n   if (flag_preprocess_only)\n     {"}, {"sha": "93e04b8b5293f8b7dba5620887a72b7e22906745", "filename": "gcc/cpplex.c", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "patch": "@@ -1731,14 +1731,15 @@ maybe_read_ucs (pfile, pstr, limit, pc)\n \t}\n     }\n \n-#ifdef TARGET_EBCDIC\n-  cpp_error (pfile, DL_ERROR, \"universal-character-name on EBCDIC target\");\n-  code = 0x3f;  /* EBCDIC invalid character */\n-#else\n- /* True extended characters are OK.  */\n-  if (code >= 0xa0\n-      && !(code & 0x80000000)\n-      && !(code >= 0xD800 && code <= 0xDFFF))\n+  if (CPP_OPTION (pfile, EBCDIC))\n+    {\n+      cpp_error (pfile, DL_ERROR, \"universal-character-name on EBCDIC target\");\n+      code = 0x3f;  /* EBCDIC invalid character */\n+    }\n+  /* True extended characters are OK.  */\n+  else if (code >= 0xa0\n+\t   && !(code & 0x80000000)\n+\t   && !(code >= 0xD800 && code <= 0xDFFF))\n     ;\n   /* The standard permits $, @ and ` to be specified as UCNs.  We use\n      hex escapes so that this also works with EBCDIC hosts.  */\n@@ -1747,7 +1748,6 @@ maybe_read_ucs (pfile, pstr, limit, pc)\n   /* Don't give another error if one occurred above.  */\n   else if (length == 0)\n     cpp_error (pfile, DL_ERROR, \"universal-character-name out of range\");\n-#endif\n \n   *pstr = p;\n   *pc = code;\n@@ -1766,11 +1766,20 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n      const unsigned char *limit;\n      int wide;\n {\n+  /* Values of \\a \\b \\e \\f \\n \\r \\t \\v respectively.  */\n+  static const uchar ascii[]  = {  7,  8, 27, 12, 10, 13,  9, 11 };\n+  static const uchar ebcdic[] = { 47, 22, 39, 12, 21, 13,  5, 11 };\n+\n   int unknown = 0;\n-  const unsigned char *str = *pstr;\n+  const unsigned char *str = *pstr, *charconsts;\n   cppchar_t c, mask;\n   unsigned int width;\n \n+  if (CPP_OPTION (pfile, EBCDIC))\n+    charconsts = ebcdic;\n+  else\n+    charconsts = ascii;\n+\n   if (wide)\n     width = CPP_OPTION (pfile, wchar_precision);\n   else\n@@ -1784,12 +1793,12 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n   switch (c)\n     {\n     case '\\\\': case '\\'': case '\"': case '?': break;\n-    case 'b': c = TARGET_BS;\t  break;\n-    case 'f': c = TARGET_FF;\t  break;\n-    case 'n': c = TARGET_NEWLINE; break;\n-    case 'r': c = TARGET_CR;\t  break;\n-    case 't': c = TARGET_TAB;\t  break;\n-    case 'v': c = TARGET_VT;\t  break;\n+    case 'b': c = charconsts[1];  break;\n+    case 'f': c = charconsts[3];  break;\n+    case 'n': c = charconsts[4];  break;\n+    case 'r': c = charconsts[5];  break;\n+    case 't': c = charconsts[6];  break;\n+    case 'v': c = charconsts[7];  break;\n \n     case '(': case '{': case '[': case '%':\n       /* '\\(', etc, are used at beginning of line to avoid confusing Emacs.\n@@ -1801,14 +1810,14 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n       if (CPP_WTRADITIONAL (pfile))\n \tcpp_error (pfile, DL_WARNING,\n \t\t   \"the meaning of '\\\\a' is different in traditional C\");\n-      c = TARGET_BELL;\n+      c = charconsts[0];\n       break;\n \n     case 'e': case 'E':\n       if (CPP_PEDANTIC (pfile))\n \tcpp_error (pfile, DL_PEDWARN,\n \t\t   \"non-ISO-standard escape sequence, '\\\\%c'\", (int) c);\n-      c = TARGET_ESC;\n+      c = charconsts[2];\n       break;\n \n     case 'u': case 'U':"}, {"sha": "edd521b041ef5d0c0b2b797f2e949b0e21c82f01", "filename": "gcc/cpplib.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783e29899b5bbeccf67a8460c0e10d91cb45e2fa/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=783e29899b5bbeccf67a8460c0e10d91cb45e2fa", "patch": "@@ -329,6 +329,12 @@ struct cpp_options\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n \n+  /* True to warn about precompiled header files we couldn't use.  */\n+  bool warn_invalid_pch;\n+\n+  /* True if dependencies should be restored from a precompiled header.  */\n+  bool restore_pch_deps;\n+\n   /* Dependency generation.  */\n   struct\n   {\n@@ -355,14 +361,11 @@ struct cpp_options\n   /* True means chars (wide chars) are unsigned.  */\n   bool unsigned_char, unsigned_wchar;\n \n+  /* True if target is EBCDIC.  */\n+  bool EBCDIC;\n+\n   /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n   unsigned char stdc_0_in_system_headers;\n-\n-  /* True to warn about precompiled header files we couldn't use.  */\n-  bool warn_invalid_pch;\n-\n-  /* True if dependencies should be restored from a precompiled header.  */\n-  bool restore_pch_deps;\n };\n \n /* Call backs.  */"}]}