{"sha": "491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxY2VmYjdlYTVkYzAzNWIyZWU1YjcwNmFhMjFlZmNkNDlkNzZjMw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-09-13T11:40:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-13T11:40:02Z"}, "message": "Update aarch64/vmov_n_1.c\n\nUpdate vmov_n_1.c now we are generating better code for dup:\n\n        ldr     s0, [x0]\n        dup     v0.2s, v0.s[0]\n        ret\n\n    gcc/testsuite/\n\t* gcc.target/aarch64/vmov_n_1.c: Update dup scan-assembler.\n\nFrom-SVN: r252077", "tree": {"sha": "3adc6b67b31e94825eb5472df5f2e8d19e7d2aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3adc6b67b31e94825eb5472df5f2e8d19e7d2aab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3/comments", "author": null, "committer": null, "parents": [{"sha": "5067f3a0041a89b3200d70053923ffd84346b0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5067f3a0041a89b3200d70053923ffd84346b0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5067f3a0041a89b3200d70053923ffd84346b0f0"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "6c1fc2dbbd3dff6ee5875d07c6eab9e528ab1db2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "patch": "@@ -1,3 +1,7 @@\n+2017-09-13  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/vmov_n_1.c: Update dup scan-assembler.\n+\n 2017-09-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/acle/cdp.c: Skip __ARM_FEATURE_COPROC check for"}, {"sha": "d0c284296a5e256be5cf5f859b113cdd62f929ba", "filename": "gcc/testsuite/gcc.target/aarch64/vmov_n_1.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491cefb7ea5dc035b2ee5b706aa21efcd49d76c3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c?ref=491cefb7ea5dc035b2ee5b706aa21efcd49d76c3", "patch": "@@ -190,8 +190,9 @@ TESTFUNC_NAME (reg_len, data_type, data_len) ()\t\\\n \n OBSCURE_FUNC (64, 32, f)\n TESTFUNC (64, 32, f)\n-/* \"dup  Vd.2s, Rn\" is less preferable then \"dup  Vd.2s, Vn.s[lane]\".  */\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* \"dup  Vd.2s, Rn\" is less preferable than \"dup  Vd.2s, Vn.s[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.2s, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (64, 64, f)\n TESTFUNC (64, 64, f)\n@@ -216,7 +217,9 @@ TESTFUNC (64, 16, s)\n \n OBSCURE_FUNC (64, 32, s)\n TESTFUNC (64, 32, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2s, w\\[0-9\\]+\" 2 } } */\n+/* \"dup  Vd.2s, Rn\" is less preferable than \"dup  Vd.2s, Vn.s[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.2s, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (64, 64, s)\n TESTFUNC (64, 64, s)\n@@ -242,13 +245,15 @@ TESTFUNC (64, 64, u)\n \n OBSCURE_FUNC (128, 32, f)\n TESTFUNC (128, 32, f)\n-/* \"dup  Vd.4s, Rn\" is less preferable then \"dup  Vd.4s, Vn.s[lane]\".  */\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* \"dup  Vd.4s, Rn\" is less preferable than \"dup  Vd.4s, Vn.s[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.4s, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (128, 64, f)\n TESTFUNC (128, 64, f)\n-/* \"dup  Vd.2d, Rn\" is less preferable then \"dup  Vd.2d, Vn.d[lane]\".  */\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* \"dup  Vd.2d, Rn\" is less preferable than \"dup  Vd.2d, Vn.d[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.2d, x\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (128, 8, p)\n TESTFUNC (128, 8, p)\n@@ -268,11 +273,15 @@ TESTFUNC (128, 16, s)\n \n OBSCURE_FUNC (128, 32, s)\n TESTFUNC (128, 32, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4s, w\\[0-9\\]+\" 2 } } */\n+/* \"dup  Vd.4s, Rn\" is less preferable than \"dup  Vd.4s, Vn.s[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.4s, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (128, 64, s)\n TESTFUNC (128, 64, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2d, x\\[0-9\\]+\" 2 } } */\n+/* \"dup  Vd.2d, Rn\" is less preferable than \"dup  Vd.2d, Vn.d[lane]\".  */\n+/* { dg-final { scan-assembler-not \"dup\\\\tv\\[0-9\\]+\\.2d, x\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n OBSCURE_FUNC (128, 8, u)\n TESTFUNC (128, 8, u)"}]}