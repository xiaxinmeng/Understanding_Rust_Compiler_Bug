{"sha": "b4923738ef57a441f6f9248260848bde5af165fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5MjM3MzhlZjU3YTQ0MWY2ZjkyNDgyNjA4NDhiZGU1YWYxNjVmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-13T17:00:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-13T17:00:43Z"}, "message": "re PR c/83801 ([avr] String constant in __flash not put into .progmem)\n\n\tPR c/83801\n\t* c-tree.h (decl_constant_value_1): Add a bool argument.\n\t* c-typeck.c (decl_constant_value_1): Add IN_INIT argument, allow\n\treturning a CONSTRUCTOR if it is true.  Use error_operand_p.\n\t(decl_constant_value): Adjust caller.\n\t* c-fold.c (c_fully_fold_internal): If in_init, pass true to\n\tdecl_constant_value_1 as IN_INIT.  Otherwise, punt if\n\tdecl_constant_value returns initializer that has BLKmode or\n\tarray type.\n\t(c_fully_fold_internal) <case COMPONENT_REF>: Fold if !lval.\n\n\t* gcc.dg/pr83801.c: New test.\n\nFrom-SVN: r256608", "tree": {"sha": "5e1b4802d2cab1d24b857680da9e4057d37fc2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1b4802d2cab1d24b857680da9e4057d37fc2d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4923738ef57a441f6f9248260848bde5af165fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4923738ef57a441f6f9248260848bde5af165fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4923738ef57a441f6f9248260848bde5af165fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4923738ef57a441f6f9248260848bde5af165fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "95404fb5f54d87a17bca87b30ceeae14ba0dae9a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -1,3 +1,16 @@\n+2018-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83801\n+\t* c-tree.h (decl_constant_value_1): Add a bool argument.\n+\t* c-typeck.c (decl_constant_value_1): Add IN_INIT argument, allow\n+\treturning a CONSTRUCTOR if it is true.  Use error_operand_p.\n+\t(decl_constant_value): Adjust caller.\n+\t* c-fold.c (c_fully_fold_internal): If in_init, pass true to\n+\tdecl_constant_value_1 as IN_INIT.  Otherwise, punt if\n+\tdecl_constant_value returns initializer that has BLKmode or\n+\tarray type.\n+\t(c_fully_fold_internal) <case COMPONENT_REF>: Fold if !lval.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "12460bc93d50d7ab49df7cee40e78005bd16b388", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -168,9 +168,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (VAR_P (expr) && !lval && (optimize || in_init))\n \t{\n \t  if (in_init)\n-\t    ret = decl_constant_value_1 (expr);\n+\t    ret = decl_constant_value_1 (expr, true);\n \t  else\n-\t    ret = decl_constant_value (expr);\n+\t    {\n+\t      ret = decl_constant_value (expr);\n+\t      if (ret != expr\n+\t\t  && (TYPE_MODE (TREE_TYPE (ret)) == BLKmode\n+\t\t      || TREE_CODE (TREE_TYPE (ret)) == ARRAY_TYPE))\n+\t\treturn expr;\n+\t    }\n \t  /* Avoid unwanted tree sharing between the initializer and current\n \t     function's body where the tree can be modified e.g. by the\n \t     gimplifier.  */\n@@ -264,6 +270,8 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  TREE_READONLY (ret) = TREE_READONLY (expr);\n \t  TREE_THIS_VOLATILE (ret) = TREE_THIS_VOLATILE (expr);\n \t}\n+      if (!lval)\n+\tret = fold (ret);\n       goto out;\n \n     case ARRAY_REF:"}, {"sha": "ae1a1e60d4bf4626accf2235dff8213b3502cc5f", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -640,7 +640,7 @@ extern struct c_expr default_function_array_read_conversion (location_t,\n \t\t\t\t\t\t\t     struct c_expr);\n extern struct c_expr convert_lvalue_to_rvalue (location_t, struct c_expr,\n \t\t\t\t\t       bool, bool);\n-extern tree decl_constant_value_1 (tree);\n+extern tree decl_constant_value_1 (tree, bool);\n extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (location_t, tree, tree, location_t);"}, {"sha": "e22bc740bca15fba013ce0c5d658fafe979f1f3a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -1832,20 +1832,20 @@ c_size_in_bytes (const_tree type)\n /* Return either DECL or its known constant value (if it has one).  */\n \n tree\n-decl_constant_value_1 (tree decl)\n+decl_constant_value_1 (tree decl, bool in_init)\n {\n   if (/* Note that DECL_INITIAL isn't valid for a PARM_DECL.  */\n       TREE_CODE (decl) != PARM_DECL\n       && !TREE_THIS_VOLATILE (decl)\n       && TREE_READONLY (decl)\n       && DECL_INITIAL (decl) != NULL_TREE\n-      && TREE_CODE (DECL_INITIAL (decl)) != ERROR_MARK\n+      && !error_operand_p (DECL_INITIAL (decl))\n       /* This is invalid if initial value is not constant.\n \t If it has either a function call, a memory reference,\n \t or a variable, then re-evaluating it could give different results.  */\n       && TREE_CONSTANT (DECL_INITIAL (decl))\n       /* Check for cases where this is sub-optimal, even though valid.  */\n-      && TREE_CODE (DECL_INITIAL (decl)) != CONSTRUCTOR)\n+      && (in_init || TREE_CODE (DECL_INITIAL (decl)) != CONSTRUCTOR))\n     return DECL_INITIAL (decl);\n   return decl;\n }\n@@ -1858,7 +1858,7 @@ decl_constant_value (tree decl)\n {\n   /* Don't change a variable array bound or initial value to a constant\n      in a place where a variable is invalid.  */\n-  return current_function_decl ? decl_constant_value_1 (decl) : decl;\n+  return current_function_decl ? decl_constant_value_1 (decl, false) : decl;\n }\n \n /* Convert the array expression EXP to a pointer.  */"}, {"sha": "aee6b434327cbeade0118d32d05f18ff02f4a6b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -1,3 +1,8 @@\n+2018-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83801\n+\t* gcc.dg/pr83801.c: New test.\n+\n 2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/52162"}, {"sha": "d4ad89fc4bec12ace173d7cf290be541ca4e9d96", "filename": "gcc/testsuite/gcc.dg/pr83801.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83801.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4923738ef57a441f6f9248260848bde5af165fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83801.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83801.c?ref=b4923738ef57a441f6f9248260848bde5af165fa", "patch": "@@ -0,0 +1,27 @@\n+/* PR c/83801 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+static const char a[] = \"01234567890123456789012345678901234567890123456789012345678901234567890123456789\";\n+static const char b = a[27];\n+struct S { const char c[30]; const char d[30]; };\n+static const struct S e[] = { { \"01234567890123456789012345678\", \"90123456789012345678901234567\" },\n+                              { \"89012345678901234567890123456\", \"78901234567890123456789012345\" } };\n+static const char f = e[1].c[4];\n+\n+char\n+foo (int i)\n+{\n+  return a[i];\n+}\n+\n+char\n+bar (int i)\n+{\n+  return e[0].d[i];\n+}\n+\n+/* { dg-final { scan-tree-dump {a\\[i]} \"original\" } } */\n+/* { dg-final { scan-tree-dump-not {\"01234567890123456789012345678901234567890123456789012345678901234567890123456789\"\\[i]} \"original\" } } */\n+/* { dg-final { scan-tree-dump {e\\[0]\\.d\\[i]} \"original\" } } */\n+/* { dg-final { scan-tree-dump-not {\"90123456789012345678901234567\"\\[i]} \"original\" } } */"}]}