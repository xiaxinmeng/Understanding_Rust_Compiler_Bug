{"sha": "4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3MGUzN2U3NTQxY2ZjZGZhN2I5NmRmODNlZDFlZjU0Nzg3MTMzYg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-06-27T20:38:20Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-06-27T20:38:20Z"}, "message": "class.c (set_super_info): Call `set_class_decl_access_flags.'\n\n2001-06-27  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* class.c (set_super_info): Call `set_class_decl_access_flags.'\n\t(set_class_decl_access_flags): New function.\n\t* java-tree.h (set_class_decl_access_flags): New prototype.\n\t* jcf-parse.c (handle_innerclass_attribute): Read and set access flags.\n\t(parse_class_file): New local `decl_max_locals.' Take wide types\n\tinto account to compute DECL_MAX_LOCALS.\n\t* parse.y (type_import_on_demand_declaration:): Ignore duplicate\n\timports on demand.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-06/msg01718.html )\n\nFrom-SVN: r43618", "tree": {"sha": "b08bb204fb5c50109b30f6039c008d246dbb6174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08bb204fb5c50109b30f6039c008d246dbb6174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/comments", "author": null, "committer": null, "parents": [{"sha": "af27aff6ae1dbbe73ecf2b24dac6b0b1587413b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af27aff6ae1dbbe73ecf2b24dac6b0b1587413b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af27aff6ae1dbbe73ecf2b24dac6b0b1587413b5"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "676f7be1d7b4dfb74077fdee4c307670ce00e007", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "patch": "@@ -1,3 +1,14 @@\n+2001-06-27  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* class.c (set_super_info): Call `set_class_decl_access_flags.'\n+\t(set_class_decl_access_flags): New function.\n+\t* java-tree.h (set_class_decl_access_flags): New prototype.\n+\t* jcf-parse.c (handle_innerclass_attribute): Read and set access flags.\n+\t(parse_class_file): New local `decl_max_locals.' Take wide types\n+\tinto account to compute DECL_MAX_LOCALS.\n+\t* parse.y (type_import_on_demand_declaration:): Ignore duplicate\n+\timports on demand.\n+\n 2001-06-22  Jan van Male  <jan.vanmale@fenk.wau.nl>\n \n \t* zipfile.h: Use GCC_JCF_H instead of JCF_H."}, {"sha": "45bb6df2cf753217281116a17dbca4de922ddaaa", "filename": "gcc/java/class.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "patch": "@@ -394,6 +394,14 @@ set_super_info (access_flags, this_class, super_class, interfaces_count)\n       CLASS_HAS_SUPER (this_class) = 1;\n     }\n \n+  set_class_decl_access_flags (access_flags, class_decl);\n+}\n+\n+void\n+set_class_decl_access_flags (access_flags, class_decl)\n+     int access_flags;\n+     tree class_decl;\n+{\n   if (access_flags & ACC_PUBLIC)    CLASS_PUBLIC (class_decl) = 1;\n   if (access_flags & ACC_FINAL)     CLASS_FINAL (class_decl) = 1;\n   if (access_flags & ACC_SUPER)     CLASS_SUPER (class_decl) = 1;"}, {"sha": "d0c2d34b29086c1548b2f57493a5388487fadfec", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "patch": "@@ -1040,6 +1040,7 @@ extern void pop_labeled_block PARAMS ((void));\n extern const char *lang_printable_name PARAMS ((tree, int));\n extern tree maybe_add_interface PARAMS ((tree, tree));\n extern void set_super_info PARAMS ((int, tree, tree, int));\n+extern void set_class_decl_access_flags PARAMS ((int, tree));\n extern int get_access_flags_from_decl PARAMS ((tree));\n extern int interface_of_p PARAMS ((tree, tree));\n extern int inherits_from_p PARAMS ((tree, tree));"}, {"sha": "82583e0360aa3601ec49a811924c5b7ef22f81ea", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "patch": "@@ -465,6 +465,8 @@ handle_innerclass_attribute (count, jcf)\n       /* Read inner_name_index. If the class we're dealing with is\n \t an annonymous class, it must be 0. */\n       int ini = JCF_readu2 (jcf);\n+      /* Read the access flag. */\n+      int acc = JCF_readu2 (jcf);\n       /* If icii is 0, don't try to read the class. */\n       if (icii >= 0)\n \t{\n@@ -475,13 +477,13 @@ handle_innerclass_attribute (count, jcf)\n \t    {\n \t      tree outer = TYPE_NAME (get_class_constant (jcf, ocii));\n \t      tree alias = (ini ? get_name_constant (jcf, ini) : NULL_TREE);\n+\t      set_class_decl_access_flags (acc, decl);\n \t      DECL_CONTEXT (decl) = outer;\n \t      DECL_INNER_CLASS_LIST (outer) =\n \t\ttree_cons (decl, alias, DECL_INNER_CLASS_LIST (outer));\n \t      CLASS_COMPLETE_P (decl) = 1;\n             }\n \t}\n-      JCF_SKIP (jcf, 2);\n     }\n }\n \n@@ -788,10 +790,21 @@ parse_class_file ()\n \n       if (METHOD_NATIVE (method))\n \t{\n+\t  tree arg;\n+\t  int  decl_max_locals;\n+\n \t  if (! flag_jni)\n \t    continue;\n-\t  DECL_MAX_LOCALS (method)\n-\t    = list_length (TYPE_ARG_TYPES (TREE_TYPE (method)));\n+\t  /* We need to compute the DECL_MAX_LOCALS. We need to take\n+             the wide types into account too. */\n+\t  for (arg = TYPE_ARG_TYPES (TREE_TYPE (method)), decl_max_locals = 0; \n+\t       arg != end_params_node;\n+\t       arg = TREE_CHAIN (arg), decl_max_locals += 1)\n+\t    {\n+\t      if (TREE_VALUE (arg) && TYPE_IS_WIDE (TREE_VALUE (arg)))\n+\t\tdecl_max_locals += 1;\n+\t    }\n+\t  DECL_MAX_LOCALS (method) = decl_max_locals;\n \t  start_java_method (method);\n \t  give_name_to_locals (jcf);\n \t  expand_expr_stmt (build_jni_stub (method));"}, {"sha": "a56c8fc8b8b15c9d80bfea60b699566577196b93", "filename": "gcc/java/parse.y", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70e37e7541cfcdfa7b96df83ed1ef54787133b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=4a70e37e7541cfcdfa7b96df83ed1ef54787133b", "patch": "@@ -781,8 +781,14 @@ type_import_on_demand_declaration:\n \tIMPORT_TK name DOT_TK MULT_TK SC_TK\n \t\t{\n \t\t  tree name = EXPR_WFL_NODE ($2);\n-\t\t  /* Don't import java.lang.* twice. */\n-\t\t  if (name != java_lang_id)\n+\t\t  tree it;\n+\t\t  /* Search for duplicates. */\n+\t\t  for (it = ctxp->import_demand_list; it; it = TREE_CHAIN (it))\n+\t\t    if (EXPR_WFL_NODE (TREE_PURPOSE (it)) == name)\n+\t\t      break;\n+\t\t  /* Don't import the same thing more than once, just ignore\n+\t\t     duplicates (7.5.2) */\n+\t\t  if (! it)\n \t\t    {\n \t\t      read_import_dir ($2);\n \t\t      ctxp->import_demand_list = "}]}