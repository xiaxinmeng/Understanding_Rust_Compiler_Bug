{"sha": "f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0ZWY3ZmIwMTEyOGRhOGM3YTgzYTkyNmY1NWE5MTNmMmZlM2ZkNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-12-06T21:44:50Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-12-06T21:44:50Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_*_DECL_AND_LINKAGE_*): Pre-test whether the cached result is present.\n\n2000-12-06  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_*_DECL_AND_LINKAGE_*):  Pre-test\n\t  whether the cached result is present.\n\t* aclocal.m4:  Regenerate.\n\t* configure:  Regenerate.\n\t* Makefile.in:  Regenerate.\n\t* libio/Makefile.in:  Regenerate.\n\t* libmath/Makefile.in:  Regenerate.\n\t* libsupc++/Makefile.in:  Regenerate.\n\t* src/Makefile.in:  Regenerate.\n\nFrom-SVN: r38079", "tree": {"sha": "9bb3edfb62d2588ee5b979690300389026693810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb3edfb62d2588ee5b979690300389026693810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/comments", "author": null, "committer": null, "parents": [{"sha": "308d7d2b3b6103973a4a687fb0e766a9953eded2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308d7d2b3b6103973a4a687fb0e766a9953eded2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308d7d2b3b6103973a4a687fb0e766a9953eded2"}], "stats": {"total": 4590, "additions": 2561, "deletions": 2029}, "files": [{"sha": "d6872895737fb187d236f0093ea27eb330f13855", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -1,3 +1,15 @@\n+2000-12-06  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_*_DECL_AND_LINKAGE_*):  Pre-test\n+\t  whether the cached result is present.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure:  Regenerate.\n+\t* Makefile.in:  Regenerate.\n+\t* libio/Makefile.in:  Regenerate.\n+\t* libmath/Makefile.in:  Regenerate.\n+\t* libsupc++/Makefile.in:  Regenerate.\n+\t* src/Makefile.in:  Regenerate.\n+\n 2000-12-06  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* configure.target (*-*-freebsd, *-*-netbsd): Correct paths to "}, {"sha": "0b7efe3df8b8a81d207684873b8f49600a190f62", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -135,7 +135,48 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "b3a7fad1b8ea415f2f56c111b19e7626280d5d18", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 57, "deletions": 45, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -337,14 +337,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -366,14 +368,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -395,14 +399,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0, 0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0, 0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -425,14 +431,16 @@ dnl\n dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <stdlib.h>], \n-                   [ $1(0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <stdlib.h>], \n+                     [ $1(0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -456,22 +464,26 @@ dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n-      AC_TRY_LINK([#include <math.h>], \n-                  [ $1(0);], \n-                  [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n-    ])\n+    if test x${glibcpp_cv_func_$1_link+set} != xset; then\n+      AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n+        AC_TRY_LINK([#include <math.h>], \n+                    [ $1(0);], \n+                    [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+      ])\n+    fi\n     AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n     if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"}, {"sha": "13c54fc7ac0fdd2c35a4fb366ca57bb763685c82", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 57, "deletions": 45, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -349,14 +349,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -378,14 +380,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -407,14 +411,16 @@ dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0, 0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0, 0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -437,14 +443,16 @@ dnl\n dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <stdlib.h>], \n-                   [ $1(0, 0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <stdlib.h>], \n+                     [ $1(0, 0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n@@ -468,22 +476,26 @@ dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([#include <math.h>], \n-                   [ $1(0);], \n-                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-    AC_LANG_RESTORE\n-  ])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n-      AC_TRY_LINK([#include <math.h>], \n-                  [ $1(0);], \n-                  [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n-    ])\n+    if test x${glibcpp_cv_func_$1_link+set} != xset; then\n+      AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n+        AC_TRY_LINK([#include <math.h>], \n+                    [ $1(0);], \n+                    [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+      ])\n+    fi\n     AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n     if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"}, {"sha": "15aba7b7fe7867697bf71cffd35ffdff2f1591cb", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2184, "deletions": 1875, "changes": 4059, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5"}, {"sha": "c2603db6a6d9fa645412e497cafb295a7e8013db", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -122,14 +122,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c     iofopen.c stdio.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@    iofopen.c stdio.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "10d15157768e4a41ceabf05fe8162144ac6d669f", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -113,18 +113,31 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c clog10l.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c hypotl.c \tsignbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\tccosl.c cexpl.c clog10l.c csinhl.c \\\n+\tcsqrtl.c ctanhl.c ctanl.c hypotl.c \\\n+\tsignbitl.c\n \n \n-EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c clog10.c clog10f.c \tcsin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n+\tcexp.c cexpf.c clog10.c clog10f.c \\\n+\tcsin.c csinf.c csinh.c csinhf.c \\\n+\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n+\tctanhf.c hypot.c hypotf.c\\\n+\tatan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -138,7 +151,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "1e0984cdbc7f1fbcc9b0c35d0295496f7326830a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -111,12 +111,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -132,11 +132,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -148,20 +150,38 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES = \\\n+\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n+\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n-headers =  \tcxxabi.h exception new typeinfo\n+headers = \\\n+\tcxxabi.h exception new typeinfo\n \n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\texception_support.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n-@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n \n glibcppinstall_HEADERS = $(headers)\n \n@@ -174,7 +194,12 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -195,14 +220,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "f2e35fc87e5f411fa115b9f6da3d1cedd132df48", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 134, "deletions": 37, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ef7fb01128da8c7a83a926f55a913f2fe3fd5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=f84ef7fb01128da8c7a83a926f55a913f2fe3fd5", "patch": "@@ -111,12 +111,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -128,11 +128,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -144,35 +146,120 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n+\t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/exception_support.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h bits/stl_iterator_base.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h \\\n+\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n+\tbits/concept_checks.h bits/container_concepts.h \\\n+\tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n+\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n+\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n+\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n+\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers = \\\n+\text/ropeimpl.h ext/stl_rope.h \\\n+\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n+\text/hash_map ext/hash_set ext/rope ext/slist \\\n+\text/tree ext/bvector \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources = \\\n+\tlimitsMEMBERS.cc \\\n+\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n+\tstdexcept.cc bitset.cc \\\n+\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n+\tlocale.cc localename.cc codecvt.cc \\\n+\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources =  \twstring-inst.cc\n+wstring_sources = \\\n+\twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -183,17 +270,20 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la \\\n+\t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n@@ -207,7 +297,12 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -228,14 +323,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}