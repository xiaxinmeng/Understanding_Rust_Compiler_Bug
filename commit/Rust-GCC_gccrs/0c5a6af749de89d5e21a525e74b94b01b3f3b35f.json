{"sha": "0c5a6af749de89d5e21a525e74b94b01b3f3b35f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1YTZhZjc0OWRlODlkNWUyMWE1MjVlNzRiOTRiMDFiM2YzYjM1Zg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-10T14:16:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-12T21:39:45Z"}, "message": "Unify ADTRules needs to check identifier\n\nWhen unifying algebraic data types we must check the identifiers match\nas well as everything else. We also should not be relying on nullptr\nchecks for resolution failures but use TyTy::Error nodes.", "tree": {"sha": "fa232627ca02cac63cfe1a3c6446a5636a029d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa232627ca02cac63cfe1a3c6446a5636a029d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5a6af749de89d5e21a525e74b94b01b3f3b35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5a6af749de89d5e21a525e74b94b01b3f3b35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5a6af749de89d5e21a525e74b94b01b3f3b35f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5a6af749de89d5e21a525e74b94b01b3f3b35f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3499198a97d2421990599c884a75ccfc775e122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3499198a97d2421990599c884a75ccfc775e122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3499198a97d2421990599c884a75ccfc775e122"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "c23cbc1a749d4214101a3dc859e3069fa76969b8", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5a6af749de89d5e21a525e74b94b01b3f3b35f/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5a6af749de89d5e21a525e74b94b01b3f3b35f/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=0c5a6af749de89d5e21a525e74b94b01b3f3b35f", "patch": "@@ -67,8 +67,8 @@ class BaseRules : public TyVisitor\n       }\n \n     other->accept_vis (*this);\n-    if (resolved == nullptr)\n-      return nullptr;\n+    if (resolved->get_kind () == TyTy::TypeKind::ERROR)\n+      return resolved;\n \n     resolved->append_reference (get_base ()->get_ref ());\n     resolved->append_reference (other->get_ref ());\n@@ -81,7 +81,7 @@ class BaseRules : public TyVisitor\n     bool result_is_infer_var = resolved->get_kind () == TyTy::TypeKind::INFER;\n     bool results_is_non_general_infer_var\n       = (result_is_infer_var\n-\t && ((InferType *) resolved)->get_infer_kind ()\n+\t && (static_cast<InferType *> (resolved))->get_infer_kind ()\n \t      != TyTy::InferType::GENERAL);\n     if (result_resolved || results_is_non_general_infer_var)\n       {\n@@ -229,7 +229,7 @@ class BaseRules : public TyVisitor\n   virtual void visit (ParamType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [ParamTy <%s>]\",\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -829,6 +829,12 @@ class ADTRules : public BaseRules\n \n   void visit (ADTType &type) override\n   {\n+    if (base->get_identifier ().compare (type.get_identifier ()) != 0)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n     if (base->num_fields () != type.num_fields ())\n       {\n \tBaseRules::visit (type);\n@@ -844,11 +850,8 @@ class ADTRules : public BaseRules\n \tTyTy::BaseType *other_field_ty = other_field->get_field_type ();\n \n \tBaseType *unified_ty = this_field_ty->unify (other_field_ty);\n-\tif (unified_ty == nullptr)\n-\t  {\n-\t    BaseRules::visit (type);\n-\t    return;\n-\t  }\n+\tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n+\t  return;\n       }\n \n     resolved = type.clone ();\n@@ -882,11 +885,8 @@ class TupleRules : public BaseRules\n \tBaseType *fo = type.get_field (i);\n \n \tBaseType *unified_ty = bo->unify (fo);\n-\tif (unified_ty == nullptr)\n-\t  {\n-\t    BaseRules::visit (type);\n-\t    return;\n-\t  }\n+\tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n+\t  return;\n \n \tfields.push_back (TyVar (unified_ty->get_ref ()));\n       }\n@@ -1034,6 +1034,7 @@ class ParamRules : public BaseRules\n   {\n     if (base->get_ref () == base->get_ty_ref ())\n       return BaseRules::unify (other);\n+\n     auto context = Resolver::TypeCheckContext::get ();\n     BaseType *lookup = nullptr;\n     bool ok = context->lookup_type (base->get_ty_ref (), &lookup);\n@@ -1053,6 +1054,17 @@ class ParamRules : public BaseRules\n     resolved = type.clone ();\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}]}