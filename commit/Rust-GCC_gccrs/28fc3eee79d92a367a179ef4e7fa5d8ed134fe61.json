{"sha": "28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmYzNlZWU3OWQ5MmEzNjdhMTc5ZWY0ZTdmYTVkOGVkMTM0ZmU2MQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2011-02-03T00:41:16Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-02-03T00:41:16Z"}, "message": "Fix PR target/47580\n\nFrom-SVN: r169776", "tree": {"sha": "0156ac6b1c884f4d2ea42bdddbf6074b0719130e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0156ac6b1c884f4d2ea42bdddbf6074b0719130e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61/comments", "author": null, "committer": null, "parents": [{"sha": "1fb4a78837a7c1e5b81a319784180914462684d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb4a78837a7c1e5b81a319784180914462684d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb4a78837a7c1e5b81a319784180914462684d2"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "1bcd269ac3390648cbb20aebe5465a8f3f0e8afc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "patch": "@@ -1,3 +1,13 @@\n+2011-02-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/47580\n+\t* config/rs6000/vsx.md (vsx_float<VSi><mode>2): Use\n+\tgpc_reg_operand instead of vsx_register_operand to match rs6000.md\n+\tgenerator functions.\n+\t(vsx_floatuns<VSi><mode>2): Ditto.\n+\t(vsx_fix_trunc<mode><VSi>2): Ditto.\n+\t(vsx_fixuns_trunc<mode><VSi>2): Ditto.\n+\n 2011-02-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/djgpp.opt (posix): New Driver option."}, {"sha": "5b3040cc2f63a314c70ac3c54821002f49918173", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "patch": "@@ -1,5 +1,5 @@\n ;; VSX patterns.\n-;; Copyright (C) 2009, 2010\n+;; Copyright (C) 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;; Contributed by Michael Meissner <meissner@linux.vnet.ibm.com>\n \n@@ -695,33 +695,34 @@\n ;; the fprs because we don't want to add the altivec registers to movdi/movsi.\n ;; For the unsigned tests, there isn't a generic double -> unsigned conversion\n ;; in rs6000.md so don't test VECTOR_UNIT_VSX_P, just test against VSX.\n+;; Don't use vsx_register_operand here, use gpc_reg_operand to match rs6000.md.\n (define_insn \"vsx_float<VSi><mode>2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n-\t(float:VSX_B (match_operand:<VSI> 1 \"vsx_register_operand\" \"<VSr2>,<VSr3>\")))]\n+  [(set (match_operand:VSX_B 0 \"gpc_reg_operand\" \"=<VSr>,?wa\")\n+\t(float:VSX_B (match_operand:<VSI> 1 \"gpc_reg_operand\" \"<VSr2>,<VSr3>\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cvsx<VSc><VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n \n (define_insn \"vsx_floatuns<VSi><mode>2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n-\t(unsigned_float:VSX_B (match_operand:<VSI> 1 \"vsx_register_operand\" \"<VSr2>,<VSr3>\")))]\n+  [(set (match_operand:VSX_B 0 \"gpc_reg_operand\" \"=<VSr>,?wa\")\n+\t(unsigned_float:VSX_B (match_operand:<VSI> 1 \"gpc_reg_operand\" \"<VSr2>,<VSr3>\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cvux<VSc><VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n \n (define_insn \"vsx_fix_trunc<mode><VSi>2\"\n-  [(set (match_operand:<VSI> 0 \"vsx_register_operand\" \"=<VSr2>,?<VSr3>\")\n-\t(fix:<VSI> (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,wa\")))]\n+  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=<VSr2>,?<VSr3>\")\n+\t(fix:<VSI> (match_operand:VSX_B 1 \"gpc_reg_operand\" \"<VSr>,wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cv<VSs>sx<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n \n (define_insn \"vsx_fixuns_trunc<mode><VSi>2\"\n-  [(set (match_operand:<VSI> 0 \"vsx_register_operand\" \"=<VSr2>,?<VSr3>\")\n-\t(unsigned_fix:<VSI> (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,wa\")))]\n+  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=<VSr2>,?<VSr3>\")\n+\t(unsigned_fix:<VSI> (match_operand:VSX_B 1 \"gpc_reg_operand\" \"<VSr>,wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cv<VSs>ux<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")"}]}