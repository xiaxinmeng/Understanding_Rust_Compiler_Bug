{"sha": "af3bef0ea257f53e79319bc25086b8293bb27323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzYmVmMGVhMjU3ZjUzZTc5MzE5YmMyNTA4NmI4MjkzYmIyNzMyMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:12:26Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:12:37Z"}, "message": "libcc1: Enable Intel CET on Intel CET enabled host\n\nSince on Intel CET enabled host, dlopen in Intel CET enabled applications\nfails on shared libraries which aren't Intel CET enabled, enable Intel\nCET in libcc1 on Intel CET enabled host.\n\n\t* Makefile.am (AM_CXXFLAGS): Add $(CET_HOST_FLAGS).\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).\n\t* Makefile.in: Regenerated.\n\t* aclocal.m4: Likewise.\n\t* configure: Likewise.", "tree": {"sha": "8e973c1c3e0908a1c110f82de6c1e657a2d9f998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e973c1c3e0908a1c110f82de6c1e657a2d9f998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3bef0ea257f53e79319bc25086b8293bb27323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3bef0ea257f53e79319bc25086b8293bb27323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3bef0ea257f53e79319bc25086b8293bb27323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3bef0ea257f53e79319bc25086b8293bb27323/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2dea6b63ae600eb1d084c06d8a3ba42c66dd6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2dea6b63ae600eb1d084c06d8a3ba42c66dd6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2dea6b63ae600eb1d084c06d8a3ba42c66dd6b"}], "stats": {"total": 168, "additions": 164, "deletions": 4}, "files": [{"sha": "e31ca9c51eae74e8801b22451b2166ffb2789a35", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -1,3 +1,12 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.am (AM_CXXFLAGS): Add $(CET_HOST_FLAGS).\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\n 2020-02-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/69448"}, {"sha": "ab6f839ecae692ba16586c845597f3dfd64d2d6b", "filename": "libcc1/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.am?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -24,7 +24,7 @@ CPPFLAGS_FOR_C_FAMILY = -I $(srcdir)/../gcc/c-family \\\n \t-I $(srcdir)/../libcpp/include\n CPPFLAGS_FOR_C = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/c\n CPPFLAGS_FOR_CXX = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/cp\n-AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility)\n+AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility) $(CET_HOST_FLAGS)\n override CXXFLAGS := $(filter-out -fsanitize=address,$(CXXFLAGS))\n override LDFLAGS := $(filter-out -fsanitize=address,$(LDFLAGS))\n # Can be simplified when libiberty becomes a normal convenience library."}, {"sha": "7d1cada1c09336771d555b7f6f2b04085fdff1b6", "filename": "libcc1/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.in?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -248,6 +248,7 @@ AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n CCDEPMODE = @CCDEPMODE@\n+CET_HOST_FLAGS = @CET_HOST_FLAGS@\n CFLAGS = @CFLAGS@\n CONFIG_STATUS_DEPENDENCIES = @CONFIG_STATUS_DEPENDENCIES@\n CPP = @CPP@\n@@ -382,7 +383,7 @@ CPPFLAGS_FOR_C_FAMILY = -I $(srcdir)/../gcc/c-family \\\n \n CPPFLAGS_FOR_C = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/c\n CPPFLAGS_FOR_CXX = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/cp\n-AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility)\n+AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility) $(CET_HOST_FLAGS)\n # Can be simplified when libiberty becomes a normal convenience library.\n libiberty_normal = ../libiberty/libiberty.a\n libiberty_noasan = ../libiberty/noasan/libiberty.a"}, {"sha": "2348721062e442a3fefe5f62b68cf4e736dc73b4", "filename": "libcc1/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Faclocal.m4?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -1168,7 +1168,9 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/acx.m4])\n+m4_include([../config/cet.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/gcc-plugin.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/override.m4])"}, {"sha": "76377a2b3ebaf24df0faaf29841c0a535da30157", "filename": "libcc1/configure", "status": "modified", "additions": 147, "deletions": 2, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -642,6 +642,7 @@ WARN_FLAGS\n CONFIG_STATUS_DEPENDENCIES\n gcc_version\n get_gcc_base_ver\n+CET_HOST_FLAGS\n visibility\n CXXCPP\n am__fastdepCXX_FALSE\n@@ -784,6 +785,7 @@ with_pic\n enable_fast_install\n with_gnu_ld\n enable_libtool_lock\n+enable_cet\n with_gcc_major_version_only\n enable_werror_always\n enable_plugin\n@@ -1435,6 +1437,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n   --enable-werror-always  enable -Werror despite compiler version\n   --enable-plugin         enable plugin support\n \n@@ -10780,7 +10783,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10783 \"configure\"\n+#line 10786 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10886,7 +10889,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10889 \"configure\"\n+#line 10892 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14538,6 +14541,148 @@ if test \"$GXX\" = yes; then\n fi\n \n \n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+if test x$may_have_cet = xyes; then\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  LDFLAGS=\"$save_LDFLAGS\"\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+\n ac_fn_c_check_decl \"$LINENO\" \"basename\" \"ac_cv_have_decl_basename\" \"$ac_includes_default\"\n if test \"x$ac_cv_have_decl_basename\" = xyes; then :\n   ac_have_decl=1"}, {"sha": "8d3b8d14748e0e641018308e843e76210f3afb9b", "filename": "libcc1/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3bef0ea257f53e79319bc25086b8293bb27323/libcc1%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure.ac?ref=af3bef0ea257f53e79319bc25086b8293bb27323", "patch": "@@ -45,6 +45,9 @@ if test \"$GXX\" = yes; then\n fi\n AC_SUBST(visibility)\n \n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+AC_SUBST(CET_HOST_FLAGS)\n+\n AC_CHECK_DECLS([basename])\n \n GCC_BASE_VER"}]}