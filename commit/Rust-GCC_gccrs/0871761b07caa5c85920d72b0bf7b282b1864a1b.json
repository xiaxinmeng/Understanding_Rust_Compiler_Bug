{"sha": "0871761b07caa5c85920d72b0bf7b282b1864a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3MTc2MWIwN2NhYTVjODU5MjBkNzJiMGJmN2IyODJiMTg2NGExYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-28T08:50:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-28T08:50:27Z"}, "message": "cp-tree.h (struct tree_pair_s): New.\n\n\t* cp-tree.h (struct tree_pair_s): New.\n\t(typedef tree_pair_p): New.\n\t(DEF_VEC_O(tree_pair_s)): New.\n\t(struct lang_type_class): Make vcall_indices a VEC(tree_pair_s).\n\t(CLASSTYPE_VCALL_INDICES): Update documentation.\n\t* class.c (get_vcall_index): Adjust.\n\t(add_vcall_offset): Adjust.\n\nFrom-SVN: r85256", "tree": {"sha": "8c3a9ed311c490b90e6c1b88f398eecd97c0e615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3a9ed311c490b90e6c1b88f398eecd97c0e615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0871761b07caa5c85920d72b0bf7b282b1864a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0871761b07caa5c85920d72b0bf7b282b1864a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0871761b07caa5c85920d72b0bf7b282b1864a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0871761b07caa5c85920d72b0bf7b282b1864a1b/comments", "author": null, "committer": null, "parents": [{"sha": "c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "f71e01d7652d7e40e2faac36378cb514b0896a85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0871761b07caa5c85920d72b0bf7b282b1864a1b", "patch": "@@ -1,3 +1,13 @@\n+2004-07-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (struct tree_pair_s): New.\n+\t(typedef tree_pair_p): New.\n+\t(DEF_VEC_O(tree_pair_s)): New.\n+\t(struct lang_type_class): Make vcall_indices a VEC(tree_pair_s).\n+\t(CLASSTYPE_VCALL_INDICES): Update documentation.\n+\t* class.c (get_vcall_index): Adjust.\n+\t(add_vcall_offset): Adjust.\n+\n 2004-07-27  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* pt.c, typeck.c: Remove spurious carriage returns."}, {"sha": "8da2e5865486dfa24fff00051b69b72ca78f175f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0871761b07caa5c85920d72b0bf7b282b1864a1b", "patch": "@@ -1955,17 +1955,19 @@ find_final_overrider (tree derived, tree binfo, tree fn)\n static tree\n get_vcall_index (tree fn, tree type)\n {\n-  tree v;\n+  VEC (tree_pair_s) *indices = CLASSTYPE_VCALL_INDICES (type);\n+  tree_pair_p p;\n+  unsigned ix;\n \n-  for (v = CLASSTYPE_VCALL_INDICES (type); v; v = TREE_CHAIN (v))\n-    if ((DECL_DESTRUCTOR_P (fn) && DECL_DESTRUCTOR_P (TREE_PURPOSE (v)))\n-\t|| same_signature_p (fn, TREE_PURPOSE (v)))\n-      break;\n+  for (ix = 0; VEC_iterate (tree_pair_s, indices, ix, p); ix++)\n+    if ((DECL_DESTRUCTOR_P (fn) && DECL_DESTRUCTOR_P (p->purpose))\n+\t|| same_signature_p (fn, p->purpose))\n+      return p->value;\n \n   /* There should always be an appropriate index.  */\n-  my_friendly_assert (v, 20021103);\n+  abort ();\n \n-  return TREE_VALUE (v);\n+  return NULL_TREE;\n }\n \n /* Update an entry in the vtable for BINFO, which is in the hierarchy\n@@ -7682,10 +7684,14 @@ add_vcall_offset (tree orig_fn, tree binfo, vtbl_init_data *vid)\n      the vtable for the most derived class, remember the vcall\n      offset.  */\n   if (vid->binfo == TYPE_BINFO (vid->derived))\n-    CLASSTYPE_VCALL_INDICES (vid->derived) \n-      = tree_cons (orig_fn, vid->index, \n-\t\t   CLASSTYPE_VCALL_INDICES (vid->derived));\n-\n+    {\n+      tree_pair_p elt = VEC_safe_push (tree_pair_s,\n+\t\t\t\t       CLASSTYPE_VCALL_INDICES (vid->derived),\n+\t\t\t\t       NULL);\n+      elt->purpose = orig_fn;\n+      elt->value = vid->index;\n+    }\n+  \n   /* The next vcall offset will be found at a more negative\n      offset.  */\n   vid->index = size_binop (MINUS_EXPR, vid->index,"}, {"sha": "c69320fadbc07febc107d178e8eaba2af05c73a8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0871761b07caa5c85920d72b0bf7b282b1864a1b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0871761b07caa5c85920d72b0bf7b282b1864a1b", "patch": "@@ -933,9 +933,18 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n    != NULL_TREE)\n \n /* Gives the visibility specification for a class type.  */\n-#define CLASSTYPE_VISIBILITY(TYPE)\t\tDECL_VISIBILITY (TYPE_NAME (TYPE))\n-#define CLASSTYPE_VISIBILITY_SPECIFIED(TYPE)\tDECL_VISIBILITY_SPECIFIED (TYPE_NAME (TYPE))\n+#define CLASSTYPE_VISIBILITY(TYPE)\t\t\\\n+\tDECL_VISIBILITY (TYPE_NAME (TYPE))\n+#define CLASSTYPE_VISIBILITY_SPECIFIED(TYPE)\t\\\n+\tDECL_VISIBILITY_SPECIFIED (TYPE_NAME (TYPE))\n \n+typedef struct tree_pair_s GTY (())\n+{\n+  tree purpose;\n+  tree value;\n+} tree_pair_s;\n+typedef tree_pair_s *tree_pair_p;\n+DEF_VEC_O (tree_pair_s);\n \n /* This is a few header flags for 'struct lang_type'.  Actually,\n    all but the first are used only for lang_type_class; they\n@@ -1020,7 +1029,7 @@ struct lang_type_class GTY(())\n   unsigned dummy : 8;\n \n   tree primary_base;\n-  tree vcall_indices;\n+  VEC (tree_pair_s) *vcall_indices;\n   tree vtables;\n   tree typeinfo_var;\n   VEC (tree) *vbases;\n@@ -1432,11 +1441,11 @@ struct lang_type GTY(())\n /* Used by various search routines.  */\n #define IDENTIFIER_MARKED(NODE) TREE_LANG_FLAG_0 (NODE)\n \f\n-/* A TREE_LIST of the vcall indices associated with the class NODE.\n-   The TREE_PURPOSE of each node is a FUNCTION_DECL for a virtual\n-   function.  The TREE_VALUE is the index into the virtual table where\n-   the vcall offset for that function is stored, when NODE is a\n-   virtual base.  */\n+/* A VEC(tree_pair_s) of the vcall indices associated with the class\n+   NODE.  The PURPOSE of each element is a FUNCTION_DECL for a virtual\n+   function.  The VALUE is the index into the virtual table where the\n+   vcall offset for that function is stored, when NODE is a virtual\n+   base.  */\n #define CLASSTYPE_VCALL_INDICES(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->vcall_indices)\n "}]}