{"sha": "76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkMzFjNjM3MzZhMGE1YTA1NjBmY2NmNWQ0MDBjNWE1YjhhMjBiOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-28T23:25:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-28T23:25:15Z"}, "message": "rtl.c (read_rtx): Use atol/atoq based upon disposition of HOST_WIDE_INT.\n\n        * rtl.c (read_rtx): Use atol/atoq based upon disposition of\n        HOST_WIDE_INT.\n        * genattrtab.c (write_test_expr): Use HOST_WIDE_INT_PRINT_DEC\n        as needed.\n        * genemit.c (gen_exp): Likewise.\n        * genpeep.c (match_rtx): Likewise.\n        * genrecog.c (write_tree_1): Likewise.\n        * c-lex.c (yyprint): Use proper format string based upon\n        disposition of HOST_BITS_PER_WIDE_INT.\n        (yylex): Put casts in right place for args to build_int_2.\n        * combine.c: Fix typos in Jan27 changes.\n\nFrom-SVN: r17544", "tree": {"sha": "46a460f21ef64b7e21c3feb74a130dff1751d28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a460f21ef64b7e21c3feb74a130dff1751d28f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/comments", "author": null, "committer": null, "parents": [{"sha": "1b7555bd4c57528074dd943eb93cad594ef914b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7555bd4c57528074dd943eb93cad594ef914b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7555bd4c57528074dd943eb93cad594ef914b2"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "a315c9a67c741cbf0edaf7fd18ae1765c0344ce6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -1,3 +1,23 @@\n+Thu Jan 29 00:25:35 1998  David S. Miller  <davem@tanya.rutgers.edu>\n+\t\t\t  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* rtl.c (read_rtx): Use atol/atoq based upon disposition of\n+\tHOST_WIDE_INT.\n+\n+\t* genattrtab.c (write_test_expr): Use HOST_WIDE_INT_PRINT_DEC\n+\tas needed.\n+\t* genemit.c (gen_exp): Likewise.\n+\t* genpeep.c (match_rtx): Likewise.\n+\t* genrecog.c (write_tree_1): Likewise.\n+\n+\t* c-lex.c (yyprint): Use proper format string based upon\n+\tdisposition of HOST_BITS_PER_WIDE_INT.\n+\t(yylex): Put casts in right place for args to build_int_2.\n+\n+Thu Jan 29 00:24:29 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* combine.c: Fix typos in Jan27 changes.\n+\n Thu Jan 29 00:07:49 1998  Ollivier Robert <roberto@keltia.freenix.fr>\n \n \t* i386/freebsd.h (LIB_SPEC): Correctly handle -shared, -p and friends."}, {"sha": "22e7e5f5c5c678be6f95817c10954ded55ae5d47", "filename": "gcc/c-lex.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -330,10 +330,14 @@ yyprint (file, yychar, yylval)\n       if (TREE_CODE (t) == INTEGER_CST)\n \tfprintf (file,\n #if HOST_BITS_PER_WIDE_INT == 64\n-#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n+\t\t \" 0x%x%016x\",\n+#else\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n \t\t \" 0x%lx%016lx\",\n #else\n-\t\t \" 0x%x%016x\",\n+\t\t \" 0x%llx%016llx\",\n+#endif\n #endif\n #else\n #if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n@@ -1965,12 +1969,12 @@ yylex ()\n \t    else if (TREE_UNSIGNED (char_type_node)\n \t\t     || ((result >> (num_bits - 1)) & 1) == 0)\n \t      yylval.ttype\n-\t\t= build_int_2 (result & ((unsigned HOST_WIDE_INT) ~0\n+\t\t= build_int_2 (result & (~(unsigned HOST_WIDE_INT) 0\n \t\t\t\t\t >> (HOST_BITS_PER_WIDE_INT - num_bits)),\n \t\t\t       0);\n \t    else\n \t      yylval.ttype\n-\t\t= build_int_2 (result | ~((unsigned HOST_WIDE_INT) ~0\n+\t\t= build_int_2 (result | ~(~(unsigned HOST_WIDE_INT) 0\n \t\t\t\t\t  >> (HOST_BITS_PER_WIDE_INT - num_bits)),\n \t\t\t       -1);\n \t    TREE_TYPE (yylval.ttype) = integer_type_node;"}, {"sha": "3bcea7deb3ccc432797325520e6f5966b1cfc500", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -828,7 +828,7 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n   rtx set = 0, src, dest;\n   rtx p;\n #ifdef AUTO_INC_DEC\n-  rtx, link;\n+  rtx link;\n #endif\n   int all_adjacent = (succ ? (next_active_insn (insn) == succ\n \t\t\t      && next_active_insn (succ) == i3)\n@@ -10166,7 +10166,7 @@ simplify_comparison (code, pop0, pop1)\n     }\n \n   /* Now make any compound operations involved in this comparison.  Then,\n-     check for an outmost SUBREG on OP0 that isn't doing anything or is\n+     check for an outmost SUBREG on OP0 that is not doing anything or is\n      paradoxical.  The latter case can only occur when it is known that the\n      \"extra\" bits will be zero.  Therefore, it is safe to remove the SUBREG.\n      We can never remove a SUBREG for a non-equality comparison because the"}, {"sha": "3354aa7ad3f16bb9d4a324c93071d0e0a66918e1", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -4617,11 +4617,7 @@ write_test_expr (exp, flags)\n \n     /* Constant integer.  */\n     case CONST_INT:\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-      printf (\"%d\", XWINT (exp, 0));\n-#else\n-      printf (\"%ld\", XWINT (exp, 0));\n-#endif\n+      printf (HOST_WIDE_INT_PRINT_DEC, XWINT (exp, 0));\n       break;\n \n     /* A random C expression.  */"}, {"sha": "96bc532a25b8bde5daf0121d8a146c6e13b0d3fc", "filename": "gcc/genemit.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -212,13 +212,11 @@ gen_exp (x)\n       else if (INTVAL (x) == STORE_FLAG_VALUE)\n \tprintf (\"const_true_rtx\");\n       else\n-\tprintf (\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\t     \n-\t\t\"GEN_INT (%d)\",\n-#else\n-\t\t\"GEN_INT (%ld)\",\n-#endif\n-\t\tINTVAL (x));\n+\t{\n+\t  printf (\"GEN_INT (\");\n+\t  printf (HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n+\t  printf (\")\");\n+\t}\n       return;\n \n     case CONST_DOUBLE:"}, {"sha": "f8159c82cfe801b4bb40fa07fd4272895575bcf4", "filename": "gcc/genpeep.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -325,13 +325,9 @@ match_rtx (x, path, fail_label)\n \t      printf (\";\\n\");\n \t    }\n \n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t  printf (\"  if (XWINT (x, %d) != %d) goto L%d;\\n\",\n-\t\t  i, XWINT (x, i), fail_label);\n-#else\n-\t  printf (\"  if (XWINT (x, %d) != %ld) goto L%d;\\n\",\n-\t\t  i, XWINT (x, i), fail_label);\n-#endif\n+\t  printf (\"  if (XWINT (x, %d) != \", i);\n+\t  printf (HOST_WIDE_INT_PRINT_DEC, XWINT (x, i));\n+\t  printf (\") goto L%d;\\n\", fail_label);\n \t}\n       else if (fmt[i] == 's')\n \t{"}, {"sha": "c61ae097389e71de7ff1cfaef6e4817942576c5e", "filename": "gcc/genrecog.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to recognize rtl as insns.\n-   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 93, 94, 95, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -508,6 +508,9 @@ add_to_sequence (pattern, last, position)\n       newpos[depth] = '1';\n       new = add_to_sequence (XEXP (pattern, 1), &new->success, newpos);\n       return new;\n+      \n+    default:\n+      break;\n     }\n \n   fmt = GET_RTX_FORMAT (code);\n@@ -1286,6 +1289,8 @@ write_tree_1 (tree, prevpos, afterward, type)\n \t  printf (\"%sswitch (GET_MODE (x%d))\\n\", indents[indent], depth);\n \t  printf (\"%s{\\n\", indents[indent + 2]);\n \t  indent += 4;\n+\t  printf (\"%sdefault:\\n%sbreak;\\n\", indents[indent - 2],\n+\t\t  indents[indent]);\n \t  printf (\"%scase %smode:\\n\", indents[indent - 2],\n \t\t  GET_MODE_NAME (mode));\n \t  modemap[(int) mode] = 1;\n@@ -1301,6 +1306,8 @@ write_tree_1 (tree, prevpos, afterward, type)\n \t  printf (\"%sswitch (GET_CODE (x%d))\\n\", indents[indent], depth);\n \t  printf (\"%s{\\n\", indents[indent + 2]);\n \t  indent += 4;\n+\t  printf (\"%sdefault:\\n%sbreak;\\n\", indents[indent - 2],\n+\t\t  indents[indent]);\n \t  printf (\"%scase \", indents[indent - 2]);\n \t  print_code (p->code);\n \t  printf (\":\\n\");\n@@ -1351,13 +1358,9 @@ write_tree_1 (tree, prevpos, afterward, type)\n \t         must fit in 32 bit, thus it suffices to check only\n \t         for 1 << 31 .  */\n \t      HOST_WIDE_INT offset = p->elt_zero_wide == -2147483647 - 1;\n-\t      printf (\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t\t       \"XWINT (x%d, 0) == %d%s && \",\n-#else\n-\t\t       \"XWINT (x%d, 0) == %ld%s && \",\n-#endif\n-\t\t       depth, p->elt_zero_wide + offset, offset ? \"-1\" : \"\");\n+\t      printf (\"XWINT (x%d, 0) == \", depth);\n+\t      printf (HOST_WIDE_INT_PRINT_DEC, p->elt_zero_wide + offset);\n+\t      printf (\"%s && \", offset ? \"-1\" : \"\");\n \t    }\n \t  if (p->veclen)\n \t    printf (\"XVECLEN (x%d, 0) == %d && \", depth, p->veclen);\n@@ -1736,6 +1739,7 @@ main (argc, argv)\n from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n+  printf (\"#include <stdio.h>\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n   printf (\"#include \\\"insn-config.h\\\"\\n\");\n   printf (\"#include \\\"recog.h\\\"\\n\");"}, {"sha": "a6f53d4b719e3da7d37482c082c79d1ee1d209ba", "filename": "gcc/rtl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d31c63736a0a5a0560fccf5d400c5a5b8a20b9/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=76d31c63736a0a5a0560fccf5d400c5a5b8a20b9", "patch": "@@ -765,7 +765,11 @@ read_rtx (infile)\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n \ttmp_wide = atoi (tmp_char);\n #else\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n \ttmp_wide = atol (tmp_char);\n+#else\n+\ttmp_wide = atoq (tmp_char);\n+#endif\n #endif\n \tXWINT (return_rtx, i) = tmp_wide;\n \tbreak;"}]}