{"sha": "79678d044b8830a93b9323e14b54eca48a6f457e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2NzhkMDQ0Yjg4MzBhOTNiOTMyM2UxNGI1NGVjYTQ4YTZmNDU3ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-06-07T13:35:54Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-06-07T13:35:54Z"}, "message": "re PR target/56315 (ARM: Improve use of 64-bit constants in logical operations)\n\ngcc/\n2013-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR target/56315\n\t* config/arm/arm.md (*xordi3_insn): Change to insn_and_split.\n\t(xordi3): Change operand 2 constraint to arm_xordi_operand.\n\t* config/arm/arm.c (const_ok_for_dimode_op): Handle XOR.\n\t* config/arm/constraints.md (Dg): New constraint.\n\t* config/arm/neon.md (xordi3_neon): Remove.\n\t(neon_veor<mode>): Generate xordi3 instead of xordi3_neon.\n\t* config/arm/predicates.md (arm_xordi_operand): New predicate.\n\ngcc/testsuite\n2013-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR target/56315\n\t* gcc.target/arm/xordi3-opt.c: New test.\n\nFrom-SVN: r199814", "tree": {"sha": "011f8c6e98d98baf6e4d2487e289d39bb5600254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011f8c6e98d98baf6e4d2487e289d39bb5600254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79678d044b8830a93b9323e14b54eca48a6f457e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79678d044b8830a93b9323e14b54eca48a6f457e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79678d044b8830a93b9323e14b54eca48a6f457e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79678d044b8830a93b9323e14b54eca48a6f457e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45db6b0d141910c6e8673c6f3a1eca781f1e5fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45db6b0d141910c6e8673c6f3a1eca781f1e5fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45db6b0d141910c6e8673c6f3a1eca781f1e5fe0"}], "stats": {"total": 102, "additions": 77, "deletions": 25}, "files": [{"sha": "39775f966f6a9f277356fd778a5aa58b3893e756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -1,3 +1,14 @@\n+2013-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/56315\n+\t* config/arm/arm.md (*xordi3_insn): Change to insn_and_split.\n+\t(xordi3): Change operand 2 constraint to arm_xordi_operand.\n+\t* config/arm/arm.c (const_ok_for_dimode_op): Handle XOR.\n+\t* config/arm/constraints.md (Dg): New constraint.\n+\t* config/arm/neon.md (xordi3_neon): Remove.\n+\t(neon_veor<mode>): Generate xordi3 instead of xordi3_neon.\n+\t* config/arm/predicates.md (arm_xordi_operand): New predicate.\n+\n 2013-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (anddi3_insn): Remove duplicate alternatives."}, {"sha": "6fc307e7709be0b637708d8e5799f33659e6dfb0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -2687,6 +2687,7 @@ const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n     {\n     case AND:\n     case IOR:\n+    case XOR:\n       return (const_ok_for_op (hi_val, code) || hi_val == 0xFFFFFFFF)\n               && (const_ok_for_op (lo_val, code) || lo_val == 0xFFFFFFFF);\n     case PLUS:"}, {"sha": "3f0e021f3ed0513c7e1c7a26e2be1c670547e07d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -3181,19 +3181,49 @@\n (define_expand \"xordi3\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"s_register_operand\" \"\")))]\n+\t\t(match_operand:DI 2 \"arm_xordi_operand\" \"\")))]\n   \"TARGET_32BIT\"\n   \"\"\n )\n \n-(define_insn \"*xordi3_insn\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n-\t(xor:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n-\t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n-  \"#\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")]\n+(define_insn_and_split \"*xordi3_insn\"\n+  [(set (match_operand:DI         0 \"s_register_operand\" \"=w,&r,&r,&r,&r,?w\")\n+\t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"w ,%0,r ,0 ,r ,w\")\n+\t\t(match_operand:DI 2 \"arm_xordi_operand\"  \"w ,r ,r ,Dg,Dg,w\")))]\n+  \"TARGET_32BIT && !TARGET_IWMMXT\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 1:\n+    case 2:\n+    case 3:\n+    case 4:  /* fall through */\n+      return \"#\";\n+    case 0: /* fall through */\n+    case 5: return \"veor\\t%P0, %P1, %P2\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+  \"TARGET_32BIT && !TARGET_IWMMXT && reload_completed\n+   && !(IS_VFP_REGNUM (REGNO (operands[0])))\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 6))]\n+  \"\n+  {\n+    operands[3] = gen_lowpart (SImode, operands[0]);\n+    operands[5] = gen_highpart (SImode, operands[0]);\n+\n+    operands[4] = simplify_gen_binary (XOR, SImode,\n+                                           gen_lowpart (SImode, operands[1]),\n+                                           gen_lowpart (SImode, operands[2]));\n+    operands[6] = simplify_gen_binary (XOR, SImode,\n+                                           gen_highpart (SImode, operands[1]),\n+                                           gen_highpart_mode (SImode, DImode, operands[2]));\n+\n+  }\"\n+  [(set_attr \"length\" \"*,8,8,8,8,*\")\n+   (set_attr \"neon_type\" \"neon_int_1,*,*,*,*,neon_int_1\")\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,*,*,avoid_neon_for_64bits\")]\n )\n \n (define_insn \"*xordi_zesidi_di\""}, {"sha": "7cd8e31c97f4f09d08ae7a6d6417dff0806147ba", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -266,6 +266,12 @@\n  (and (match_code \"const_int\")\n       (match_test \"TARGET_32BIT && const_ok_for_dimode_op (ival, IOR)\")))\n \n+(define_constraint \"Dg\"\n+ \"@internal\n+  In ARM/Thumb-2 state a const_int that can be used by insn xordi.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_32BIT && const_ok_for_dimode_op (ival, XOR)\")))\n+\n (define_constraint \"Di\"\n  \"@internal\n   In ARM/Thumb-2 state a const_int or const_double where both the high"}, {"sha": "e814df0d264bafac6e9aadc5a9eaf67d717817b0", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -782,21 +782,6 @@\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n-(define_insn \"xordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?w\")\n-        (xor:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,r,w\")\n-\t        (match_operand:DI 2 \"s_register_operand\" \"w,r,r,w\")))]\n-  \"TARGET_NEON\"\n-  \"@\n-   veor\\t%P0, %P1, %P2\n-   #\n-   #\n-   veor\\t%P0, %P1, %P2\"\n-  [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n-   (set_attr \"length\" \"*,8,8,*\")\n-   (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits\")]\n-)\n-\n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (not:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")))]\n@@ -5605,7 +5590,7 @@\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  emit_insn (gen_xor<mode>3<V_suf64> (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_xor<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "d169cb2703564c8d3867294c42f15d0fdc91773f", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -179,6 +179,11 @@\n \t    (match_test \"const_ok_for_dimode_op (INTVAL (op), IOR)\"))\n        (match_operand 0 \"neon_logic_op2\")))\n \n+(define_predicate \"arm_xordi_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), XOR)\"))))\n+\n (define_predicate \"arm_adddi_operand\"\n   (ior (match_operand 0 \"s_register_operand\")\n        (and (match_code \"const_int\")"}, {"sha": "9c2ff38c11158e06b0342d2234f7c9c86d6f161b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -1,3 +1,8 @@\n+2013-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/56315\n+\t* gcc.target/arm/xordi3-opt.c: New test.\n+\n 2013-06-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/debug/dwarf2/discriminator.c: Fix wording."}, {"sha": "7e031c3af2cd2b40bc83b8dcfe607a57b98fd177", "filename": "gcc/testsuite/gcc.target/arm/xordi3-opt.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fxordi3-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79678d044b8830a93b9323e14b54eca48a6f457e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fxordi3-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fxordi3-opt.c?ref=79678d044b8830a93b9323e14b54eca48a6f457e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned long long xor64 (unsigned long long input)\n+{\n+    return input ^ 0x200000004ULL;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov\\[\\\\t \\]+.+,\\[\\\\t \\]*.+\" } } */"}]}