{"sha": "ad68e9fce08b8746e4ec669fa4355478eaa23079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2OGU5ZmNlMDhiODc0NmU0ZWM2NjlmYTQzNTU0NzhlYWEyMzA3OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-07-16T07:01:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-07-16T07:01:23Z"}, "message": "user.cfg.in: Add complex, ratio, intializer_list.\n\n2008-07-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/user.cfg.in: Add complex, ratio,\n\tintializer_list.\n\t(PREDEFINED): Add _GLIBCXX_USE_C99_STDINT_TR1.\n\t* doc/doxygen/doxygroups.cc: Add std::chrono.\n\t* include/bits/unique_ptr.h (default_delete, unique_ptr): Add markup.\n\t* libsupc++/initializer_list (initializer_list): Same.\n\t* include/std/ratio: Same.\n\t* include/std/chrono: Same.\n\t* include/std/complex: Disambiguate file markup.\n\nFrom-SVN: r137868", "tree": {"sha": "06fbbcf59a200de01f7665d30f803b83e83c00df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06fbbcf59a200de01f7665d30f803b83e83c00df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad68e9fce08b8746e4ec669fa4355478eaa23079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad68e9fce08b8746e4ec669fa4355478eaa23079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad68e9fce08b8746e4ec669fa4355478eaa23079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad68e9fce08b8746e4ec669fa4355478eaa23079/comments", "author": null, "committer": null, "parents": [{"sha": "28dde9651227af1ecea355d324b1aed366aed853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dde9651227af1ecea355d324b1aed366aed853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dde9651227af1ecea355d324b1aed366aed853"}], "stats": {"total": 169, "additions": 104, "deletions": 65}, "files": [{"sha": "a5d26a2a31a45ebdbc16f0faae529a3b7fc8fbab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -1,3 +1,15 @@\n+2008-07-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Add complex, ratio,\n+\tintializer_list.\n+\t(PREDEFINED): Add _GLIBCXX_USE_C99_STDINT_TR1.\n+\t* doc/doxygen/doxygroups.cc: Add std::chrono.\n+\t* include/bits/unique_ptr.h (default_delete, unique_ptr): Add markup.\n+\t* libsupc++/initializer_list (initializer_list): Same.\n+\t* include/std/ratio: Same.\n+\t* include/std/chrono: Same.\n+\t* include/std/complex: Disambiguate file markup.\n+\n 2008-07-15  Chris Fairles  <chris.fairles@gmail.com>\n \n         * include/std/chrono: New, as per N2661.\n@@ -81,7 +93,7 @@\n \tPR libstdc++/36451\n \t* doc/xml/manual/allocator.xml: Fix links.\n \t* doc/html/*: Regenerate.\n-\t\n+\n 2008-07-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* libsupc++/unwind-cxx.h (__is_gxx_forced_unwind_class,\n@@ -97,7 +109,7 @@\n \tPR libstdc++/36552\n \t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n \tnull_metadata.hpp: Remove self-include.\n-\t\n+\n 2008-07-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* testsuite/20_util/make_signed/requirements/typedefs-2.cc,"}, {"sha": "d94c9e50b3ed2b1ff238a8b82526ce0b61c64cc9", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -28,12 +28,15 @@\n /** @namespace std::tr1::__detail\n  *  @brief Implementation details not part of the namespace std::tr1 interface.\n */\n-/** @namespace std::regex_constants\n- *  @brief ISO C++ 0x entities sub namespace for regex.\n+/** @namespace std::chrono\n+ *  @brief ISO C++ 0x entities sub namespace for time and date.\n */\n /** @namespace std::placeholders\n  *  @brief ISO C++ 0x entities sub namespace for functional.\n */\n+/** @namespace std::regex_constants\n+ *  @brief ISO C++ 0x entities sub namespace for regex.\n+*/\n /** @namespace std::this_thread\n  *  @brief ISO C++ 0x entities sub namespace for thread.\n */"}, {"sha": "23204850e11ecb1fbcd8b6aa84f50b8c5d030e53", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -463,12 +463,14 @@ WARN_LOGFILE           =\n INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          @srcdir@/libsupc++/cxxabi-forced.h \\\n                          @srcdir@/libsupc++/exception \\\n+                         @srcdir@/libsupc++/initializer_list \\\n                          @srcdir@/libsupc++/new \\\n                          @srcdir@/libsupc++/typeinfo \\\n                          include/algorithm \\\n                          include/array \\\n                          include/bitset \\\n                          include/chrono \\\n+                         include/complex \\\n                          include/condition_variable \\\n                          include/deque \\\n                          include/fstream \\\n@@ -1168,6 +1170,7 @@ INCLUDE_FILE_PATTERNS  =\n \n PREDEFINED             = __cplusplus \\\n \t\t         __GTHREADS \\\n+\t\t\t __GXX_EXPERIMENTAL_CXX0X__ \\\n                          \"_GLIBCXX_STD_P= \" \\\n                          \"_GLIBCXX_STD_D= \" \\\n                          _GLIBCXX_STD=std \\\n@@ -1183,16 +1186,18 @@ PREDEFINED             = __cplusplus \\\n                          _GLIBCXX_DEPRECATED \\\n                          _GLIBCXX_USE_WCHAR_T \\\n                          _GLIBCXX_USE_LONG_LONG \\\n+\t\t\t _GLIBCXX_USE_C99_STDINT_TR1 \\\n                          __glibcxx_function_requires=// \\\n                          __glibcxx_class_requires=// \\\n                          __glibcxx_class_requires2=// \\\n                          __glibcxx_class_requires3=// \\\n                          __glibcxx_class_requires4=//\n \n-# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then \n-# this tag can be used to specify a list of macro names that should be expanded. \n-# The macro definition that is found in the sources will be used. \n-# Use the PREDEFINED tag if you want to use a different macro definition.\n+# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES\n+# then this tag can be used to specify a list of macro names that\n+# should be expanded.  The macro definition that is found in the\n+# sources will be used.  Use the PREDEFINED tag if you want to use a\n+# different macro definition.\n \n EXPAND_AS_DEFINED      = \n "}, {"sha": "bf13884b148a48770cd1ddefc7fdcc1509d91637", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -40,13 +40,14 @@\n #endif\n \n #include <bits/c++config.h>\n-#include <debug/debug.h>\n+#include <debug/debug.h>1\n #include <type_traits>\n #include <utility>\n #include <tuple>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /// Primary template, default_delete.\n   template<typename _Tp> \n     struct default_delete\n       {\n@@ -66,6 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n+  /// Specialization, default_delete.\n   template<typename _Tp> \n     struct default_delete<_Tp[]>\n     {\n@@ -78,6 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n     };\n \n+  /// 20.6.11.2 unique_ptr for single objects.\n   template <typename _Tp, typename _Tp_Deleter = default_delete<_Tp> > \n     class unique_ptr\n     {\n@@ -224,7 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __tuple_type _M_t;\n   };\n  \n-  // 20.6.11.3 unique_ptr for array objects with a runtime length\n+  /// 20.6.11.3 unique_ptr for array objects with a runtime length\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length"}, {"sha": "911bf240b484064b51fbce45539c16e5308a8f10", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -166,6 +166,7 @@ namespace std\n         { return numeric_limits<_Rep>::min(); }\n       };\n \n+    /// duration\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n@@ -430,61 +431,61 @@ namespace std\n     typedef duration<int,     ratio<  60>> minutes;\n     typedef duration<int,     ratio<3600>> hours;\n \n+    /// time_point\n     template<typename _Clock, typename _Duration>\n-    struct time_point\n-    {\n-      typedef _Clock                    clock;\n-      typedef _Duration                 duration;\n-      typedef typename duration::rep    rep;\n-      typedef typename duration::period period;\n-\n-      time_point()\n-      : __d(duration::zero())\n-      { }\n-\n-      explicit time_point(const duration& __dur)\n-      : __d(duration::zero() + __dur)\n-      { }\n-\n-      // conversions\n-      template<typename _Duration2>\n-        time_point(const time_point<clock, _Duration2>& __t)\n-        : __d(__t.time_since_epoch())\n-        { }\n-\n-      // observer\n-      duration\n-      time_since_epoch() const\n-      { return __d; }\n-\n-      // arithmetic\n-      time_point&\n-      operator+=(const duration& __dur)\n-      {\n-        __d += __dur;\n-        return *this;\n-      }\n-\n-      time_point&\n-      operator-=(const duration& __dur)\n+      struct time_point\n       {\n-        __d -= __dur;\n-        return *this;\n-      }\n-\n-      // special values\n-      // TODO: These should be constexprs.\n-      static const time_point\n-      min()\n-      { return time_point(duration::min()); }\n-\n-      static const time_point\n-      max()\n-      { return time_point(duration::max()); }\n-\n-    private:\n-      duration __d;\n-    };\n+\ttypedef _Clock                    clock;\n+\ttypedef _Duration                 duration;\n+\ttypedef typename duration::rep    rep;\n+\ttypedef typename duration::period period;\n+\n+\ttime_point() : __d(duration::zero())\n+\t{ }\n+\n+\texplicit time_point(const duration& __dur) \n+\t: __d(duration::zero() + __dur)\n+\t{ }\n+\n+\t// conversions\n+\ttemplate<typename _Duration2>\n+\t  time_point(const time_point<clock, _Duration2>& __t)\n+\t  : __d(__t.time_since_epoch())\n+\t  { }\n+\n+\t// observer\n+\tduration\n+\ttime_since_epoch() const\n+\t{ return __d; }\n+\t\n+\t// arithmetic\n+\ttime_point&\n+\toperator+=(const duration& __dur)\n+\t{\n+\t  __d += __dur;\n+\t  return *this;\n+\t}\n+\t\n+\ttime_point&\n+\toperator-=(const duration& __dur)\n+\t{\n+\t  __d -= __dur;\n+\t  return *this;\n+\t}\n+\t\n+\t// special values\n+\t// TODO: These should be constexprs.\n+\tstatic const time_point\n+\tmin()\n+\t{ return time_point(duration::min()); }\n+\t\n+\tstatic const time_point\n+\tmax()\n+\t{ return time_point(duration::max()); }\n+\t\n+      private:\n+\tduration __d;\n+      };\n   \n     template<typename _ToDuration, typename _Clock, typename _Duration>\n       inline time_point<_Clock, _ToDuration> \n@@ -565,6 +566,7 @@ namespace std\n                  const time_point<_Clock, _Duration2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n+    /// system_clock\n     struct system_clock\n     {\n #if defined(_GLIBCXX_USE_CLOCK_MONOTONIC) || \\"}, {"sha": "1c48251e350b51a43e6ddc16022de3c345b260ca", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -29,7 +29,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file complex\n+/** @file include/complex\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "e4ba94def11898ae6aec2ba1df7d144ed648fee5", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -120,7 +120,6 @@ namespace std\n #endif\n     }\n \n-\n     void\n     lock()\n     {"}, {"sha": "124e9af397a587fae712d300933162b75af630cc", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -165,6 +165,7 @@ namespace std\n   template<intmax_t _Num, intmax_t _Den>\n     const intmax_t ratio<_Num, _Den>::den;\n \n+  /// ratio_add\n   template<typename _R1, typename _R2>\n     struct ratio_add\n     {\n@@ -180,6 +181,7 @@ namespace std\n         __safe_multiply<_R1::den, (_R2::den / __gcd)>::value> type;\n     };\n \n+  /// ratio_subtract\n   template<typename _R1, typename _R2>\n     struct ratio_subtract\n     {\n@@ -188,6 +190,7 @@ namespace std\n         ratio<-_R2::num, _R2::den>>::type type;\n     };\n \n+  /// ratio_multiply\n   template<typename _R1, typename _R2>\n     struct ratio_multiply\n     {\n@@ -205,6 +208,7 @@ namespace std\n                         (_R2::den / __gcd1)>::value> type;\n     };\n \n+  /// ratio_divide\n   template<typename _R1, typename _R2>\n     struct ratio_divide\n     {\n@@ -215,11 +219,13 @@ namespace std\n         ratio<_R2::den, _R2::num>>::type type;\n     };\n \n+  /// ratio_equal\n   template<typename _R1, typename _R2>\n     struct ratio_equal\n     : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>\n     { };\n   \n+  /// ratio_not_equal\n   template<typename _R1, typename _R2>\n     struct ratio_not_equal\n     : integral_constant<bool, !ratio_equal<_R1, _R2>::value>\n@@ -243,21 +249,25 @@ namespace std\n       __ratio_less_simple_impl<_R1, _R2>>::type\n     { };\n \n+  /// ratio_less\n   template<typename _R1, typename _R2>\n     struct ratio_less\n     : __ratio_less_impl<_R1, _R2>::type\n     { };\n     \n+  /// ratio_less_equal\n   template<typename _R1, typename _R2>\n     struct ratio_less_equal\n     : integral_constant<bool, !ratio_less<_R2, _R1>::value>\n     { };\n   \n+  /// ratio_greater\n   template<typename _R1, typename _R2>\n     struct ratio_greater\n     : integral_constant<bool, ratio_less<_R2, _R1>::value>\n     { };\n \n+  /// ratio_greater_equal\n   template<typename _R1, typename _R2>\n     struct ratio_greater_equal\n     : integral_constant<bool, !ratio_less<_R1, _R2>::value>"}, {"sha": "e98cd71a1acdffcb2132aff220f03142004fabae", "filename": "libstdc++-v3/libsupc++/initializer_list", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad68e9fce08b8746e4ec669fa4355478eaa23079/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list?ref=ad68e9fce08b8746e4ec669fa4355478eaa23079", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file initializer_list\n+ *  This is a Standard C++ Library header.\n+ */\n+\n #ifndef __CXX_INITIALIZER_LIST\n #define __CXX_INITIALIZER_LIST\n \n@@ -39,6 +43,7 @@\n \n namespace std\n {\n+  /// initializer_list\n   template<class _E>\n     class initializer_list\n     {"}]}