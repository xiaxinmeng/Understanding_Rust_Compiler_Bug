{"sha": "6904889880ad58684c6eeaf366ab4af6167cd5b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwNDg4OTg4MGFkNTg2ODRjNmVlYWYzNjZhYjRhZjYxNjdjZDViMA==", "commit": {"author": {"name": "Sergio Durigan Junior", "email": "sergiodj@redhat.com", "date": "2011-12-20T20:54:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2011-12-20T20:54:25Z"}, "message": "unwind-arm-common.inc: Include `tconfig.h', `tsystem.h' and `sys/sdt.h'.\n\n2011-12-20  Sergio Durigan Junior  <sergiodj@redhat.com>\n\n\t* unwind-arm-common.inc: Include `tconfig.h', `tsystem.h' and\n\t`sys/sdt.h'.\n\t(_Unwind_DebugHook): New function.\n\t(uw_restore_core_regs): New define.\n\t(unwind_phase2): Use uw_restore_core_regs instead of\n\trestore_core_regs.\n\t(unwind_phase2_forced): Likewise.\n\t(__gnu_Unwind_Resume): Likewise.\n\nFrom-SVN: r182552", "tree": {"sha": "508dcec251f6f6475b1d1cd44021a0220b695b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508dcec251f6f6475b1d1cd44021a0220b695b7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6904889880ad58684c6eeaf366ab4af6167cd5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6904889880ad58684c6eeaf366ab4af6167cd5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6904889880ad58684c6eeaf366ab4af6167cd5b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6904889880ad58684c6eeaf366ab4af6167cd5b0/comments", "author": null, "committer": null, "parents": [{"sha": "48b0b19630a19eaab06efd305387b930f94fc5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0b19630a19eaab06efd305387b930f94fc5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b0b19630a19eaab06efd305387b930f94fc5d3"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "3f95767368046e9ebf8ed19df6ce70a1111701ff", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904889880ad58684c6eeaf366ab4af6167cd5b0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904889880ad58684c6eeaf366ab4af6167cd5b0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6904889880ad58684c6eeaf366ab4af6167cd5b0", "patch": "@@ -1,3 +1,14 @@\n+2011-12-20  Sergio Durigan Junior  <sergiodj@redhat.com>\n+\n+\t* unwind-arm-common.inc: Include `tconfig.h', `tsystem.h' and\n+\t`sys/sdt.h'.\n+\t(_Unwind_DebugHook): New function.\n+\t(uw_restore_core_regs): New define.\n+\t(unwind_phase2): Use uw_restore_core_regs instead of\n+\trestore_core_regs.\n+\t(unwind_phase2_forced): Likewise.\n+\t(__gnu_Unwind_Resume): Likewise.\n+\n 2011-12-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/linux-unwind.h: Update copyright years."}, {"sha": "bf1690200b8d26d42bd364b5a9c36ad4ea80b374", "filename": "libgcc/unwind-arm-common.inc", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904889880ad58684c6eeaf366ab4af6167cd5b0/libgcc%2Funwind-arm-common.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904889880ad58684c6eeaf366ab4af6167cd5b0/libgcc%2Funwind-arm-common.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-arm-common.inc?ref=6904889880ad58684c6eeaf366ab4af6167cd5b0", "patch": "@@ -21,8 +21,15 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n #include \"unwind.h\"\n \n+/* Used for SystemTap unwinder probe.  */\n+#ifdef HAVE_SYS_SDT_H\n+#include <sys/sdt.h>\n+#endif\n+\n /* We add a prototype for abort here to avoid creating a dependency on\n    target headers.  */\n extern void abort (void);\n@@ -105,6 +112,44 @@ static inline _uw selfrel_offset31 (const _uw *p);\n \n static _uw __gnu_unwind_get_pr_addr (int idx);\n \n+static void _Unwind_DebugHook (void *, void *)\n+  __attribute__ ((__noinline__, __used__, __noclone__));\n+\n+/* This function is called during unwinding.  It is intended as a hook\n+   for a debugger to intercept exceptions.  CFA is the CFA of the\n+   target frame.  HANDLER is the PC to which control will be\n+   transferred.  */\n+\n+static void\n+_Unwind_DebugHook (void *cfa __attribute__ ((__unused__)),\n+\t\t   void *handler __attribute__ ((__unused__)))\n+{\n+  /* We only want to use stap probes starting with v3.  Earlier\n+     versions added too much startup cost.  */\n+#if defined (HAVE_SYS_SDT_H) && defined (STAP_PROBE2) && _SDT_NOTE_TYPE >= 3\n+  STAP_PROBE2 (libgcc, unwind, cfa, handler);\n+#else\n+  asm (\"\");\n+#endif\n+}\n+\n+/* This is a wrapper to be called when we need to restore core registers.\n+   It will call `_Unwind_DebugHook' before restoring the registers, thus\n+   making it possible to intercept and debug exceptions.\n+\n+   When calling `_Unwind_DebugHook', the first argument (the CFA) is zero\n+   because we are not interested in it.  However, it must be there (even\n+   being zero) because GDB expects to find it when using the probe.  */\n+\n+#define uw_restore_core_regs(TARGET, CORE)\t\t\t\t      \\\n+  do\t\t\t\t\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      void *handler = __builtin_frob_return_addr ((void *) VRS_PC (TARGET));  \\\n+      _Unwind_DebugHook (0, handler);\t\t\t\t\t      \\\n+      restore_core_regs (CORE);\t\t\t\t\t\t      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n+  while (0)\n+\n /* Perform a binary search for RETURN_ADDRESS in TABLE.  The table contains\n    NREC entries.  */\n \n@@ -253,8 +298,8 @@ unwind_phase2 (_Unwind_Control_Block * ucbp, phase2_vrs * vrs)\n   \n   if (pr_result != _URC_INSTALL_CONTEXT)\n     abort();\n-  \n-  restore_core_regs (&vrs->core);\n+\n+  uw_restore_core_regs (vrs, &vrs->core);\n }\n \n /* Perform phase2 forced unwinding.  */\n@@ -339,7 +384,7 @@ unwind_phase2_forced (_Unwind_Control_Block *ucbp, phase2_vrs *entry_vrs,\n       return _URC_FAILURE;\n     }\n \n-  restore_core_regs (&saved_vrs.core);\n+  uw_restore_core_regs (&saved_vrs, &saved_vrs.core);\n }\n \n /* This is a very limited implementation of _Unwind_GetCFA.  It returns\n@@ -450,7 +495,7 @@ __gnu_Unwind_Resume (_Unwind_Control_Block * ucbp, phase2_vrs * entry_vrs)\n     {\n     case _URC_INSTALL_CONTEXT:\n       /* Upload the registers to enter the landing pad.  */\n-      restore_core_regs (&entry_vrs->core);\n+      uw_restore_core_regs (entry_vrs, &entry_vrs->core);\n \n     case _URC_CONTINUE_UNWIND:\n       /* Continue unwinding the next frame.  */"}]}