{"sha": "4fd1e8b0018d82b6830bd57d413e8429b379e580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkMWU4YjAwMThkODJiNjgzMGJkNTdkNDEzZTg0MjliMzc5ZTU4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T10:23:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T10:23:29Z"}, "message": "[multiple changes]\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c: Add support for generating a dummy version of\n\ts-oscons.ads providing all possible constants.\n\n\t* g-socthi-mingw.ads: Fix calling convention for __gnat_inet_pton.\n\n\t* socket.c (__gnat_inet_pton): On Windows make sure we always use the\n\tANSI version (not the UNICODE version) of WSAStringToAddress.\n\n2009-04-20  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_set_OWNER_ACL): properly free memory\n\tallocated for the security descriptor and make sure all\n\thandles are closed before leaving this procedure.\n\nFrom-SVN: r146392", "tree": {"sha": "574ce9131a64849db6a95cbc24418300aacf56dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574ce9131a64849db6a95cbc24418300aacf56dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd1e8b0018d82b6830bd57d413e8429b379e580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd1e8b0018d82b6830bd57d413e8429b379e580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd1e8b0018d82b6830bd57d413e8429b379e580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd1e8b0018d82b6830bd57d413e8429b379e580/comments", "author": null, "committer": null, "parents": [{"sha": "9013065bc05ad988ff59dda83b1847880757f20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9013065bc05ad988ff59dda83b1847880757f20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9013065bc05ad988ff59dda83b1847880757f20d"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "dbbd2eedcc95078d9c116b91e38448b14a14b01d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4fd1e8b0018d82b6830bd57d413e8429b379e580", "patch": "@@ -1,3 +1,19 @@\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Add support for generating a dummy version of\n+\ts-oscons.ads providing all possible constants.\n+\n+\t* g-socthi-mingw.ads: Fix calling convention for __gnat_inet_pton.\n+\n+\t* socket.c (__gnat_inet_pton): On Windows make sure we always use the\n+\tANSI version (not the UNICODE version) of WSAStringToAddress.\n+\n+2009-04-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_set_OWNER_ACL): properly free memory\n+\tallocated for the security descriptor and make sure all\n+\thandles are closed before leaving this procedure.\n+\n 2009-04-20  Javier Miranda  <miranda@adacore.com>\n \n \t* einfo.ads, einfo.adb (Is_Underlying_Record_View): New subprogram"}, {"sha": "24719cf2fc4f75325a4e1f6f5fad23442e3eedae", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=4fd1e8b0018d82b6830bd57d413e8429b379e580", "patch": "@@ -1820,8 +1820,8 @@ __gnat_check_OWNER_ACL\n   PRIVILEGE_SET PrivilegeSet;\n   DWORD dwPrivSetSize = sizeof (PRIVILEGE_SET);\n   BOOL fAccessGranted = FALSE;\n-  HANDLE hToken;\n-  DWORD nLength;\n+  HANDLE hToken = NULL;\n+  DWORD nLength = 0;\n   SECURITY_DESCRIPTOR* pSD = NULL;\n \n   GetFileSecurity\n@@ -1839,14 +1839,14 @@ __gnat_check_OWNER_ACL\n       (wname, OWNER_SECURITY_INFORMATION |\n        GROUP_SECURITY_INFORMATION | DACL_SECURITY_INFORMATION,\n        pSD, nLength, &nLength))\n-    return 0;\n+    goto error;\n \n   if (!ImpersonateSelf (SecurityImpersonation))\n-    return 0;\n+    goto error;\n \n   if (!OpenThreadToken\n       (GetCurrentThread(), TOKEN_DUPLICATE | TOKEN_QUERY, FALSE, &hToken))\n-    return 0;\n+    goto error;\n \n   /*  Undoes the effect of ImpersonateSelf. */\n \n@@ -1867,9 +1867,17 @@ __gnat_check_OWNER_ACL\n        &dwPrivSetSize,       /* size of PrivilegeSet buffer */\n        &dwAccessAllowed,     /* receives mask of allowed access rights */\n        &fAccessGranted))\n-    return 0;\n+    goto error;\n \n+  CloseHandle (hToken);\n+  HeapFree (GetProcessHeap (), 0, pSD);\n   return fAccessGranted;\n+\n+ error:\n+  if (hToken)\n+    CloseHandle (hToken);\n+  HeapFree (GetProcessHeap (), 0, pSD);\n+  return 0;\n }\n \n static void"}, {"sha": "49dd11c062974e3d9c717ae5bd07eca6c7a3bf10", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=4fd1e8b0018d82b6830bd57d413e8429b379e580", "patch": "@@ -234,7 +234,7 @@ private\n    pragma Import (Stdcall, C_Getpeername, \"getpeername\");\n    pragma Import (Stdcall, C_Getsockname, \"getsockname\");\n    pragma Import (Stdcall, C_Getsockopt, \"getsockopt\");\n-   pragma Import (Stdcall, Inet_Pton, \"__gnat_inet_pton\");\n+   pragma Import (C, Inet_Pton, \"__gnat_inet_pton\");\n    pragma Import (Stdcall, C_Ioctl, \"ioctlsocket\");\n    pragma Import (Stdcall, C_Listen, \"listen\");\n    pragma Import (Stdcall, C_Recv, \"recv\");"}, {"sha": "2bcb80a6f0cde3e17d99381961e9a04eecaaf4b2", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=4fd1e8b0018d82b6830bd57d413e8429b379e580", "patch": "@@ -79,10 +79,6 @@ pragma Style_Checks (\"M32766\");\n  **\n  **/\n \n-#ifndef TARGET\n-# error Please define TARGET\n-#endif\n-\n #include <stdlib.h>\n #include <string.h>\n #include <limits.h>\n@@ -95,6 +91,26 @@ pragma Style_Checks (\"M32766\");\n \n #include \"gsocket.h\"\n \n+#ifdef DUMMY\n+\n+# if defined (TARGET)\n+#   error TARGET may not be defined when generating the dummy version\n+# else\n+#   define TARGET \"batch runtime compilation (dummy values)\"\n+# endif\n+\n+# if !(defined (HAVE_SOCKETS) && defined (HAVE_TERMIOS))\n+#   error Features missing on platform\n+# endif\n+\n+# define NATIVE\n+\n+#endif\n+\n+#ifndef TARGET\n+# error Please define TARGET\n+#endif\n+\n #ifndef HAVE_SOCKETS\n # include <errno.h>\n #endif\n@@ -109,8 +125,16 @@ pragma Style_Checks (\"M32766\");\n \n #ifdef NATIVE\n #include <stdio.h>\n+\n+#ifdef DUMMY\n+int counter = 0;\n+# define _VAL(x) counter++\n+#else\n+# define _VAL(x) x\n+#endif\n+\n #define CND(name,comment) \\\n-  printf (\"\\n->CND:$%d:\" #name \":$%d:\" comment, __LINE__, ((int) name));\n+  printf (\"\\n->CND:$%d:\" #name \":$%d:\" comment, __LINE__, ((int) _VAL (name)));\n \n #define CNS(name,comment) \\\n   printf (\"\\n->CNS:$%d:\" #name \":\" name \":\" comment, __LINE__);\n@@ -1179,9 +1203,11 @@ TXT(\"   Thread_Blocking_IO  : constant Boolean := True;\")\n \n /**\n  **  System-specific constants follow\n+ **  Each section should be activated if compiling for the corresponding\n+ **  platform *or* generating the dummy version for runtime test compilation.\n  **/\n \n-#ifdef __vxworks\n+#if defined (__vxworks) || defined (DUMMY)\n \n /*\n \n@@ -1198,7 +1224,7 @@ CND(ERROR, \"VxWorks generic error\")\n \n #endif\n \n-#ifdef __MINGW32__\n+#if defined (__MINGW32__) || defined (DUMMY)\n /*\n \n    ------------------------------\n@@ -1220,7 +1246,7 @@ CND(WSAEDISCON,         \"Disconnected\")\n    putchar ('\\n');\n #endif\n \n-#ifdef __APPLE__\n+#if defined (__APPLE__) || defined (DUMMY)\n /*\n \n    -------------------------------"}, {"sha": "1c7de255c5c48dd6b3fcc978a19c4965d4bb2470", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd1e8b0018d82b6830bd57d413e8429b379e580/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=4fd1e8b0018d82b6830bd57d413e8429b379e580", "patch": "@@ -422,7 +422,7 @@ __gnat_inet_pton (int af, const char *src, void *dst) {\n   int rc;\n \n   ss.ss_family = af;\n-  rc = WSAStringToAddress (src, af, NULL, (struct sockaddr *)&ss, &sslen);\n+  rc = WSAStringToAddressA (src, af, NULL, (struct sockaddr *)&ss, &sslen);\n   if (rc > 0) {\n     switch (af) {\n       case AF_INET:"}]}