{"sha": "99d53bba4d61a8bd5d23772111f1356aec94c6cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkNTNiYmE0ZDYxYThiZDVkMjM3NzIxMTFmMTM1NmFlYzk0YzZjYw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-09-19T21:09:52Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-09-19T21:09:52Z"}, "message": "mixed-struct-check.h: New.\n\n2003-09-19  Janis Johnson  <janis187@us.ibm.com>\n\n\t* gcc.dg/compat/mixed-struct-check.h: New.\n\t* gcc.dg/compat/mixed-struct-defs.h: New.\n\t* gcc.dg/compat/mixed-struct-init.h: New.\n\t* gcc.dg/compat/struct-by-value-19_main.c: New.\n\t* gcc.dg/compat/struct-by-value-19_x.c: New.\n\t* gcc.dg/compat/struct-by-value-19_y.c: New.\n\t* gcc.dg/compat/struct-by-value-20_main.c: New.\n\t* gcc.dg/compat/struct-by-value-20_x.c: New.\n\t* gcc.dg/compat/struct-by-value-20_y.c: New.\n\t* gcc.dg/compat/struct-return-19_main.c: New.\n\t* gcc.dg/compat/struct-return-19_x.c: New.\n\t* gcc.dg/compat/struct-return-19_y.c: New.\n\t* gcc.dg/compat/struct-return-20_main.c: New.\n\t* gcc.dg/compat/struct-return-20_x.c: New.\n\t* gcc.dg/compat/struct-return-20_y.c: New.\n\nFrom-SVN: r71591", "tree": {"sha": "fd2ec64e6db2ab0e6d09629e2c76b213046226f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2ec64e6db2ab0e6d09629e2c76b213046226f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99d53bba4d61a8bd5d23772111f1356aec94c6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d53bba4d61a8bd5d23772111f1356aec94c6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d53bba4d61a8bd5d23772111f1356aec94c6cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d53bba4d61a8bd5d23772111f1356aec94c6cc/comments", "author": null, "committer": null, "parents": [{"sha": "ffd9060b5b10cc70fa8b93a3b2c2931628b9b12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd9060b5b10cc70fa8b93a3b2c2931628b9b12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd9060b5b10cc70fa8b93a3b2c2931628b9b12f"}], "stats": {"total": 1065, "additions": 1065, "deletions": 0}, "files": [{"sha": "fbf56c003e1d021cb983d571b9425a7a0bf34658", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -1,3 +1,21 @@\n+2003-09-19  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/compat/mixed-struct-check.h: New.\n+\t* gcc.dg/compat/mixed-struct-defs.h: New.\n+\t* gcc.dg/compat/mixed-struct-init.h: New.\n+\t* gcc.dg/compat/struct-by-value-19_main.c: New.\n+\t* gcc.dg/compat/struct-by-value-19_x.c: New.\n+\t* gcc.dg/compat/struct-by-value-19_y.c: New.\n+\t* gcc.dg/compat/struct-by-value-20_main.c: New.\n+\t* gcc.dg/compat/struct-by-value-20_x.c: New.\n+\t* gcc.dg/compat/struct-by-value-20_y.c: New.\n+\t* gcc.dg/compat/struct-return-19_main.c: New.\n+\t* gcc.dg/compat/struct-return-19_x.c: New.\n+\t* gcc.dg/compat/struct-return-19_y.c: New.\n+\t* gcc.dg/compat/struct-return-20_main.c: New.\n+\t* gcc.dg/compat/struct-return-20_x.c: New.\n+\t* gcc.dg/compat/struct-return-20_y.c: New.\n+\n 2003-09-19  Andrew Pinski  <pinskia@physics.uc.edu>\n \t* g++.dg/init/array11.C: Change unsigned to __SIZE_TYPE__\n \tso that it will not complain on LP64 targets."}, {"sha": "dae20507c2f9ed5601e4100b830907cca11764e4", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-check.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,28 @@\n+/* Function definitions that are used by multiple tests.  */\n+\n+void checkScd (Scd x, int i)\n+{ if (x.c != (char)i || x.d != (double)i+1) DEBUG_CHECK }\n+void checkScdc (Scdc x, int i)\n+{ if (x.c != (char)i || x.d != (double)i+1 || x.b != (char)i+2) DEBUG_CHECK }\n+void checkSd (Sd x, int i)\n+{ if (x.d != (double)i) DEBUG_CHECK }\n+void checkSdi (Sdi x, int i)\n+{ if (x.d != (double)i || x.i != i+1) DEBUG_CHECK }\n+void checkScsds (Scsds x, int i)\n+{ if (x.c != (char)i || x.sd.d != (double)i+1) DEBUG_CHECK }\n+void checkScsdsc (Scsdsc x, int i)\n+{ if (x.c != (char)i || x.sd.d != (double)i+1 || x.b != (char)i+2) DEBUG_CHECK }\n+void checkScsdis (Scsdis x, int i)\n+{ if (x.c != (char)i || x.sdi.d != (double)i+1 || x.sdi.i != i+2) DEBUG_CHECK }\n+void checkScsdisc (Scsdisc x, int i)\n+{ if (x.c != (char)i || x.sdi.d != (double)i+1 || x.sdi.i != i+2\n+    || x.b != (char)i+3) DEBUG_CHECK }\n+void checkSsds (Ssds x, int i)\n+{ if (x.sd.d != (double)i) DEBUG_CHECK }\n+void checkSsdsc (Ssdsc x, int i)\n+{ if (x.sd.d != (double)i || x.c != (char)i+1) DEBUG_CHECK }\n+void checkScssdss (Scssdss x, int i)\n+{ if (x.c != (char)i || x.ssds.sd.d != (double)i+1) DEBUG_CHECK }\n+void checkScssdssc (Scssdssc x, int i)\n+{ if (x.c != (char)i || x.ssds.sd.d != (double)i+1\n+    || x.b != (char)i+2) DEBUG_CHECK }"}, {"sha": "6b8f4e721e3818dd3bbc55d8f0a8acb5a03be93d", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-defs.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,14 @@\n+/* Type definitions that are used by multiple tests.  */\n+\n+typedef struct { char c; double d; } Scd;\n+typedef struct { char c; double d; char b; } Scdc;\n+typedef struct { double d; } Sd;\n+typedef struct { double d; int i; } Sdi;\n+typedef struct { char c; Sd sd; } Scsds;\n+typedef struct { char c; Sd sd; char b; } Scsdsc;\n+typedef struct { char c; Sdi sdi; } Scsdis;\n+typedef struct { char c; Sdi sdi; char b; } Scsdisc;\n+typedef struct { Sd sd; } Ssds;\n+typedef struct { Sd sd; char c; } Ssdsc;\n+typedef struct { char c; Ssds ssds; } Scssdss;\n+typedef struct { char c; Ssds ssds; char b; } Scssdssc;"}, {"sha": "7a118cce1a141e03899bbd191d2df7f857b2f238", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-init.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,26 @@\n+/* Function definitions that are used by multiple tests.  */\n+\n+void initScd (Scd *p, int i)\n+{ p->c = (char)i; p->d = (double)i+1; }\n+void initScdc (Scdc *p, int i)\n+{ p->c = (char)i; p->d = (double)i+1; p->b = (char)i+2; }\n+void initSd (Sd *p, int i)\n+{ p->d = (double)i; }\n+void initSdi (Sdi *p, int i)\n+{ p->d = (double)i; p->i = i+1; }\n+void initScsds (Scsds *p, int i)\n+{ p->c = (char)i; p->sd.d = (double)i+1; }\n+void initScsdsc (Scsdsc *p, int i)\n+{ p->c = (char)i; p->sd.d = (double)i+1; p->b = (char)i+2; }\n+void initScsdis (Scsdis *p, int i)\n+{ p->c = (char)i; p->sdi.d = (double)i+1; p->sdi.i = i+2; }\n+void initScsdisc (Scsdisc *p, int i)\n+{ p->c = (char)i; p->sdi.d = (double)i+1; p->sdi.i = i+2; p->b = (char)i+3; }\n+void initSsds (Ssds *p, int i)\n+{ p->sd.d = (double)i; }\n+void initSsdsc (Ssdsc *p, int i)\n+{ p->sd.d = (double)i; p->c = (char)i+1; }\n+void initScssdss (Scssdss *p, int i)\n+{ p->c = (char)i; p->ssds.sd.d = (double)i+1; }\n+void initScssdssc (Scssdssc *p, int i)\n+{ p->c = (char)i; p->ssds.sd.d = (double)i+1; p->b = (char)i+2; }"}, {"sha": "b0eed4c3a2ffcba2d7d1fa228f7617ae079d4ca5", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-19_main.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_main.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,17 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument list.  Struct members are char, int, double,\n+   and other structs containing these types.  This test was written in\n+   response to a layout change for such structs for powerpc64-linux,\n+   but this test only checks similar structs that are not affected by\n+   that break in compatibility. */\n+\n+extern void struct_by_value_19_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_19_x ();\n+  exit (0);\n+}"}, {"sha": "4ccedfde30f0b8130bdcc5cb20485d63373de227", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-19_x.c", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_x.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,178 @@\n+#include \"compat-common.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\t\\\n+TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16);\t\t\\\n+extern void testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\\\n+\t      TYPE s5, TYPE s6, TYPE s7, TYPE s8)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##TYPE (s1, g2s##TYPE, s2, g4s##TYPE,\t\t\t\\\n+\t      s3, g6s##TYPE, s4, g8s##TYPE,\t\t\t\\\n+\t      s5, g10s##TYPE, s6, g12s##TYPE,\t\t\t\\\n+\t      s7, g14s##TYPE, s8, g16s##TYPE);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  ( &g1s##TYPE,  1);\t\t\t\t\\\n+  init##TYPE  ( &g2s##TYPE,  2);\t\t\t\t\\\n+  init##TYPE  ( &g3s##TYPE,  3);\t\t\t\t\\\n+  init##TYPE  ( &g4s##TYPE,  4);\t\t\t\t\\\n+  init##TYPE  ( &g5s##TYPE,  5);\t\t\t\t\\\n+  init##TYPE  ( &g6s##TYPE,  6);\t\t\t\t\\\n+  init##TYPE  ( &g7s##TYPE,  7);\t\t\t\t\\\n+  init##TYPE  ( &g8s##TYPE,  8);\t\t\t\t\\\n+  init##TYPE  ( &g9s##TYPE,  9);\t\t\t\t\\\n+  init##TYPE  (&g10s##TYPE, 10);\t\t\t\t\\\n+  init##TYPE  (&g11s##TYPE, 11);\t\t\t\t\\\n+  init##TYPE  (&g12s##TYPE, 12);\t\t\t\t\\\n+  init##TYPE  (&g13s##TYPE, 13);\t\t\t\t\\\n+  init##TYPE  (&g14s##TYPE, 14);\t\t\t\t\\\n+  init##TYPE  (&g15s##TYPE, 15);\t\t\t\t\\\n+  init##TYPE  (&g16s##TYPE, 16);\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \");\t\t\t\t\t\\\n+  test##TYPE (g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t      g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t      g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t      g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (1,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (2,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (3,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (4,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (5,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (6,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (7,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (8,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (9,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (10,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (11,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (12,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (13,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (14,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE);\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (15,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (16,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE); \\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2:\");\t\t\t\t\t\\\n+  test2_##TYPE (g1s##TYPE, g3s##TYPE, g5s##TYPE, g7s##TYPE,\t\\\n+\t\tg9s##TYPE, g11s##TYPE, g13s##TYPE, g15s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)\n+\n+#undef T\n+\n+void\n+struct_by_value_19_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "8b0f1e8f70f93150a5656f36c8279152953a66a8", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-19_y.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-19_y.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,105 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"mixed-struct-defs.h\"\n+\n+extern void checkScd (Scd x, int i);\n+extern void checkScdc (Scdc x, int i);\n+extern void checkSd (Sd x, int i);\n+extern void checkSdi (Sdi x, int i);\n+extern void checkScsds (Scsds x, int i);\n+extern void checkScsdsc (Scsdsc x, int i);\n+extern void checkScsdis (Scsdis x, int i);\n+extern void checkScsdisc (Scsdisc x, int i);\n+extern void checkSsds (Ssds x, int i);\n+extern void checkSsdsc (Ssdsc x, int i);\n+extern void checkScssdss (Scssdss x, int i);\n+extern void checkScssdssc (Scssdssc x, int i);\n+\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+extern TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+extern TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\\\n+extern TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (  g1s##TYPE,  1);\t\t\t\t\\\n+  check##TYPE (  g2s##TYPE,  2);\t\t\t\t\\\n+  check##TYPE (  g3s##TYPE,  3);\t\t\t\t\\\n+  check##TYPE (  g4s##TYPE,  4);\t\t\t\t\\\n+  check##TYPE (  g5s##TYPE,  5);\t\t\t\t\\\n+  check##TYPE (  g6s##TYPE,  6);\t\t\t\t\\\n+  check##TYPE (  g7s##TYPE,  7);\t\t\t\t\\\n+  check##TYPE (  g8s##TYPE,  8);\t\t\t\t\\\n+  check##TYPE (  g9s##TYPE,  9);\t\t\t\t\\\n+  check##TYPE ( g10s##TYPE, 10);\t\t\t\t\\\n+  check##TYPE ( g11s##TYPE, 11);\t\t\t\t\\\n+  check##TYPE ( g12s##TYPE, 12);\t\t\t\t\\\n+  check##TYPE ( g13s##TYPE, 13);\t\t\t\t\\\n+  check##TYPE ( g14s##TYPE, 14);\t\t\t\t\\\n+  check##TYPE ( g15s##TYPE, 15);\t\t\t\t\\\n+  check##TYPE ( g16s##TYPE, 16);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (s1, 1);\t\t\t\t\t\t\\\n+  check##TYPE (s2, 2);\t\t\t\t\t\t\\\n+  check##TYPE (s3, 3);\t\t\t\t\t\t\\\n+  check##TYPE (s4, 4);\t\t\t\t\t\t\\\n+  check##TYPE (s5, 5);\t\t\t\t\t\t\\\n+  check##TYPE (s6, 6);\t\t\t\t\t\t\\\n+  check##TYPE (s7, 7);\t\t\t\t\t\t\\\n+  check##TYPE (s8, 8);\t\t\t\t\t\t\\\n+  check##TYPE (s9, 9);\t\t\t\t\t\t\\\n+  check##TYPE (s10, 10);\t\t\t\t\t\\\n+  check##TYPE (s11, 11);\t\t\t\t\t\\\n+  check##TYPE (s12, 12);\t\t\t\t\t\\\n+  check##TYPE (s13, 13);\t\t\t\t\t\\\n+  check##TYPE (s14, 14);\t\t\t\t\t\\\n+  check##TYPE (s15, 15);\t\t\t\t\t\\\n+  check##TYPE (s16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##TYPE (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)"}, {"sha": "64c8f27aebb123ab89e1ff29f551a4b6aba37a86", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-20_main.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_main.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,16 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument list.  Tested structs end with double.\n+   This test was written in response to a layout change for such\n+   structs for powerpc64-linux that breaks compatibility between\n+   3.3 and 3.4. */\n+\n+extern void struct_by_value_20_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_20_x ();\n+  exit (0);\n+}"}, {"sha": "183e32dc47673816eb9e990f90bd4b96752b98c2", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-20_x.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_x.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,166 @@\n+#include \"compat-common.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\t\\\n+TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16);\t\t\\\n+extern void testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\\\n+\t      TYPE s5, TYPE s6, TYPE s7, TYPE s8)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##TYPE (s1, g2s##TYPE, s2, g4s##TYPE,\t\t\t\\\n+\t      s3, g6s##TYPE, s4, g8s##TYPE,\t\t\t\\\n+\t      s5, g10s##TYPE, s6, g12s##TYPE,\t\t\t\\\n+\t      s7, g14s##TYPE, s8, g16s##TYPE);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  ( &g1s##TYPE,  1);\t\t\t\t\\\n+  init##TYPE  ( &g2s##TYPE,  2);\t\t\t\t\\\n+  init##TYPE  ( &g3s##TYPE,  3);\t\t\t\t\\\n+  init##TYPE  ( &g4s##TYPE,  4);\t\t\t\t\\\n+  init##TYPE  ( &g5s##TYPE,  5);\t\t\t\t\\\n+  init##TYPE  ( &g6s##TYPE,  6);\t\t\t\t\\\n+  init##TYPE  ( &g7s##TYPE,  7);\t\t\t\t\\\n+  init##TYPE  ( &g8s##TYPE,  8);\t\t\t\t\\\n+  init##TYPE  ( &g9s##TYPE,  9);\t\t\t\t\\\n+  init##TYPE  (&g10s##TYPE, 10);\t\t\t\t\\\n+  init##TYPE  (&g11s##TYPE, 11);\t\t\t\t\\\n+  init##TYPE  (&g12s##TYPE, 12);\t\t\t\t\\\n+  init##TYPE  (&g13s##TYPE, 13);\t\t\t\t\\\n+  init##TYPE  (&g14s##TYPE, 14);\t\t\t\t\\\n+  init##TYPE  (&g15s##TYPE, 15);\t\t\t\t\\\n+  init##TYPE  (&g16s##TYPE, 16);\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \");\t\t\t\t\t\\\n+  test##TYPE (g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t      g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t      g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t      g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (1,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (2,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (3,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (4,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (5,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (6,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (7,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (8,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (9,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (10,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (11,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (12,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (13,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (14,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE);\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (15,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (16,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE); \\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2:\");\t\t\t\t\t\\\n+  test2_##TYPE (g1s##TYPE, g3s##TYPE, g5s##TYPE, g7s##TYPE,\t\\\n+\t\tg9s##TYPE, g11s##TYPE, g13s##TYPE, g15s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)\n+\n+#undef T\n+\n+void\n+struct_by_value_20_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "6e02e7d0a009e38f28f85ecb63a8dfee73dda327", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-20_y.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-20_y.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,99 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"mixed-struct-defs.h\"\n+\n+extern void checkScd (Scd x, int i);\n+extern void checkScdc (Scdc x, int i);\n+extern void checkSd (Sd x, int i);\n+extern void checkSdi (Sdi x, int i);\n+extern void checkScsds (Scsds x, int i);\n+extern void checkScsdsc (Scsdsc x, int i);\n+extern void checkScsdis (Scsdis x, int i);\n+extern void checkScsdisc (Scsdisc x, int i);\n+extern void checkSsds (Ssds x, int i);\n+extern void checkSsdsc (Ssdsc x, int i);\n+extern void checkScssdss (Scssdss x, int i);\n+extern void checkScssdssc (Scssdssc x, int i);\n+\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+extern TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+extern TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\\\n+extern TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (  g1s##TYPE,  1);\t\t\t\t\\\n+  check##TYPE (  g2s##TYPE,  2);\t\t\t\t\\\n+  check##TYPE (  g3s##TYPE,  3);\t\t\t\t\\\n+  check##TYPE (  g4s##TYPE,  4);\t\t\t\t\\\n+  check##TYPE (  g5s##TYPE,  5);\t\t\t\t\\\n+  check##TYPE (  g6s##TYPE,  6);\t\t\t\t\\\n+  check##TYPE (  g7s##TYPE,  7);\t\t\t\t\\\n+  check##TYPE (  g8s##TYPE,  8);\t\t\t\t\\\n+  check##TYPE (  g9s##TYPE,  9);\t\t\t\t\\\n+  check##TYPE ( g10s##TYPE, 10);\t\t\t\t\\\n+  check##TYPE ( g11s##TYPE, 11);\t\t\t\t\\\n+  check##TYPE ( g12s##TYPE, 12);\t\t\t\t\\\n+  check##TYPE ( g13s##TYPE, 13);\t\t\t\t\\\n+  check##TYPE ( g14s##TYPE, 14);\t\t\t\t\\\n+  check##TYPE ( g15s##TYPE, 15);\t\t\t\t\\\n+  check##TYPE ( g16s##TYPE, 16);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (s1, 1);\t\t\t\t\t\t\\\n+  check##TYPE (s2, 2);\t\t\t\t\t\t\\\n+  check##TYPE (s3, 3);\t\t\t\t\t\t\\\n+  check##TYPE (s4, 4);\t\t\t\t\t\t\\\n+  check##TYPE (s5, 5);\t\t\t\t\t\t\\\n+  check##TYPE (s6, 6);\t\t\t\t\t\t\\\n+  check##TYPE (s7, 7);\t\t\t\t\t\t\\\n+  check##TYPE (s8, 8);\t\t\t\t\t\t\\\n+  check##TYPE (s9, 9);\t\t\t\t\t\t\\\n+  check##TYPE (s10, 10);\t\t\t\t\t\\\n+  check##TYPE (s11, 11);\t\t\t\t\t\\\n+  check##TYPE (s12, 12);\t\t\t\t\t\\\n+  check##TYPE (s13, 13);\t\t\t\t\t\\\n+  check##TYPE (s14, 14);\t\t\t\t\t\\\n+  check##TYPE (s15, 15);\t\t\t\t\t\\\n+  check##TYPE (s16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##TYPE (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)"}, {"sha": "65d8365ee135ffba215c702ac1949783c56abfa7", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-19_main.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_main.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,16 @@\n+/* Test function return values.  Struct members are char, int, double,\n+   and other structs containing these types.  This test was written in\n+   response to a layout change for such structs for powerpc64-linux,\n+   but this test only checks similar structs that are not affected by\n+   that break in compatibility. */\n+\n+extern void struct_return_19_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_return_19_x ();\n+  exit (0);\n+}"}, {"sha": "cb3e8a905c43272c25b3929b20b8010440d3adcf", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-19_x.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_x.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,123 @@\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern TYPE test0##TYPE (void);\t\t\t\t\t\\\n+extern TYPE test1##TYPE (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  (&g01##TYPE,  1);\t\t\t\t\t\\\n+  init##TYPE  (&g02##TYPE,  2);\t\t\t\t\t\\\n+  init##TYPE  (&g03##TYPE,  3);\t\t\t\t\t\\\n+  init##TYPE  (&g04##TYPE,  4);\t\t\t\t\t\\\n+  init##TYPE  (&g05##TYPE,  5);\t\t\t\t\t\\\n+  init##TYPE  (&g06##TYPE,  6);\t\t\t\t\t\\\n+  init##TYPE  (&g07##TYPE,  7);\t\t\t\t\t\\\n+  init##TYPE  (&g08##TYPE,  8);\t\t\t\t\t\\\n+  init##TYPE  (&g09##TYPE,  9);\t\t\t\t\t\\\n+  init##TYPE  (&g10##TYPE, 10);\t\t\t\t\t\\\n+  init##TYPE  (&g11##TYPE, 11);\t\t\t\t\t\\\n+  init##TYPE  (&g12##TYPE, 12);\t\t\t\t\t\\\n+  init##TYPE  (&g13##TYPE, 13);\t\t\t\t\t\\\n+  init##TYPE  (&g14##TYPE, 14);\t\t\t\t\t\\\n+  init##TYPE  (&g15##TYPE, 15);\t\t\t\t\t\\\n+  init##TYPE  (&g16##TYPE, 16);\t\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \");\t\t\t\t\t\\\n+  rslt = test0##TYPE ();\t\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \");\t\t\t\t\t\\\n+  rslt = test1##TYPE (g01##TYPE);\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#TYPE);\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva: \");\t\t\t\t\\\n+      rslt = testva##TYPE (1, g01##TYPE);\t\t\t\\\n+      check##TYPE (rslt, 1);\t\t\t\t\t\\\n+      rslt = testva##TYPE (5, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 5);\t\t\t\t\t\\\n+      rslt = testva##TYPE (9, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 9);\t\t\t\t\t\\\n+      rslt = testva##TYPE (16, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE, g10##TYPE,\t\t\\\n+\t\t\t   g11##TYPE, g12##TYPE,\t\t\\\n+\t\t\t   g13##TYPE, g14##TYPE,\t\t\\\n+\t\t\t   g15##TYPE, g16##TYPE);\t\t\\\n+      check##TYPE (rslt, 16);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)\n+\n+#undef T\n+\n+void\n+struct_return_19_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "6bbbb62cf9aab77d38c665b1885adca543d7cd8c", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-19_y.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-19_y.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,70 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+extern TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+extern TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+extern TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (g01##TYPE,  1);\t\t\t\t\t\\\n+  check##TYPE (g02##TYPE,  2);\t\t\t\t\t\\\n+  check##TYPE (g03##TYPE,  3);\t\t\t\t\t\\\n+  check##TYPE (g04##TYPE,  4);\t\t\t\t\t\\\n+  check##TYPE (g05##TYPE,  5);\t\t\t\t\t\\\n+  check##TYPE (g06##TYPE,  6);\t\t\t\t\t\\\n+  check##TYPE (g07##TYPE,  7);\t\t\t\t\t\\\n+  check##TYPE (g08##TYPE,  8);\t\t\t\t\t\\\n+  check##TYPE (g09##TYPE,  9);\t\t\t\t\t\\\n+  check##TYPE (g10##TYPE, 10);\t\t\t\t\t\\\n+  check##TYPE (g11##TYPE, 11);\t\t\t\t\t\\\n+  check##TYPE (g12##TYPE, 12);\t\t\t\t\t\\\n+  check##TYPE (g13##TYPE, 13);\t\t\t\t\t\\\n+  check##TYPE (g14##TYPE, 14);\t\t\t\t\t\\\n+  check##TYPE (g15##TYPE, 15);\t\t\t\t\t\\\n+  check##TYPE (g16##TYPE, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test0##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##TYPE;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test1##TYPE (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+      rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(Scdc)\n+T(Sd)\n+T(Sdi)\n+T(Scsdsc)\n+T(Scsdis)\n+T(Scsdisc)\n+T(Ssds)\n+T(Ssdsc)\n+T(Scssdssc)"}, {"sha": "7f928ba82af8a2d50bffc5908060e61b1d0d075f", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-20_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_main.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,14 @@\n+/* Test function return values.  Tested structs end with double.  This\n+   was written in response to a layout change for such structs for\n+   powerpc64-linux that breaks compatibility between 3.3 and 3.4.  */\n+\n+extern void struct_return_20_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_return_20_x ();\n+  exit (0);\n+}"}, {"sha": "685ef6f8b0332d8390796d821ce02fc00fedd4b2", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-20_x.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_x.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,111 @@\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern TYPE test0##TYPE (void);\t\t\t\t\t\\\n+extern TYPE test1##TYPE (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  (&g01##TYPE,  1);\t\t\t\t\t\\\n+  init##TYPE  (&g02##TYPE,  2);\t\t\t\t\t\\\n+  init##TYPE  (&g03##TYPE,  3);\t\t\t\t\t\\\n+  init##TYPE  (&g04##TYPE,  4);\t\t\t\t\t\\\n+  init##TYPE  (&g05##TYPE,  5);\t\t\t\t\t\\\n+  init##TYPE  (&g06##TYPE,  6);\t\t\t\t\t\\\n+  init##TYPE  (&g07##TYPE,  7);\t\t\t\t\t\\\n+  init##TYPE  (&g08##TYPE,  8);\t\t\t\t\t\\\n+  init##TYPE  (&g09##TYPE,  9);\t\t\t\t\t\\\n+  init##TYPE  (&g10##TYPE, 10);\t\t\t\t\t\\\n+  init##TYPE  (&g11##TYPE, 11);\t\t\t\t\t\\\n+  init##TYPE  (&g12##TYPE, 12);\t\t\t\t\t\\\n+  init##TYPE  (&g13##TYPE, 13);\t\t\t\t\t\\\n+  init##TYPE  (&g14##TYPE, 14);\t\t\t\t\t\\\n+  init##TYPE  (&g15##TYPE, 15);\t\t\t\t\t\\\n+  init##TYPE  (&g16##TYPE, 16);\t\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \");\t\t\t\t\t\\\n+  rslt = test0##TYPE ();\t\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \");\t\t\t\t\t\\\n+  rslt = test1##TYPE (g01##TYPE);\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#TYPE);\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva: \");\t\t\t\t\\\n+      rslt = testva##TYPE (1, g01##TYPE);\t\t\t\\\n+      check##TYPE (rslt, 1);\t\t\t\t\t\\\n+      rslt = testva##TYPE (5, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 5);\t\t\t\t\t\\\n+      rslt = testva##TYPE (9, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 9);\t\t\t\t\t\\\n+      rslt = testva##TYPE (16, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE, g10##TYPE,\t\t\\\n+\t\t\t   g11##TYPE, g12##TYPE,\t\t\\\n+\t\t\t   g13##TYPE, g14##TYPE,\t\t\\\n+\t\t\t   g15##TYPE, g16##TYPE);\t\t\\\n+      check##TYPE (rslt, 16);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)\n+\n+#undef T\n+\n+void\n+struct_return_20_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "2c1c334263f3e4e010ffddfd0a9e02da33b90ca3", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-20_y.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d53bba4d61a8bd5d23772111f1356aec94c6cc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-20_y.c?ref=99d53bba4d61a8bd5d23772111f1356aec94c6cc", "patch": "@@ -0,0 +1,64 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+extern TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+extern TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+extern TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (g01##TYPE,  1);\t\t\t\t\t\\\n+  check##TYPE (g02##TYPE,  2);\t\t\t\t\t\\\n+  check##TYPE (g03##TYPE,  3);\t\t\t\t\t\\\n+  check##TYPE (g04##TYPE,  4);\t\t\t\t\t\\\n+  check##TYPE (g05##TYPE,  5);\t\t\t\t\t\\\n+  check##TYPE (g06##TYPE,  6);\t\t\t\t\t\\\n+  check##TYPE (g07##TYPE,  7);\t\t\t\t\t\\\n+  check##TYPE (g08##TYPE,  8);\t\t\t\t\t\\\n+  check##TYPE (g09##TYPE,  9);\t\t\t\t\t\\\n+  check##TYPE (g10##TYPE, 10);\t\t\t\t\t\\\n+  check##TYPE (g11##TYPE, 11);\t\t\t\t\t\\\n+  check##TYPE (g12##TYPE, 12);\t\t\t\t\t\\\n+  check##TYPE (g13##TYPE, 13);\t\t\t\t\t\\\n+  check##TYPE (g14##TYPE, 14);\t\t\t\t\t\\\n+  check##TYPE (g15##TYPE, 15);\t\t\t\t\t\\\n+  check##TYPE (g16##TYPE, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test0##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##TYPE;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test1##TYPE (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+      rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(Scd)\n+T(Scsds)\n+T(Scssdss)"}]}