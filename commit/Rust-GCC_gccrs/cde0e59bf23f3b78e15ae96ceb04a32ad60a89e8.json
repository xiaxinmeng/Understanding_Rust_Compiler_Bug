{"sha": "cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlMGU1OWJmMjNmM2I3OGUxNWFlOTZjZWIwNGEzMmFkNjBhODllOA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-07-01T02:24:56Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-07-01T02:24:56Z"}, "message": "pa-protos.h (prefetch_operand): Add prototype.\n\n\t* pa-protos.h (prefetch_operand): Add prototype.\n\t* pa.c (prefetch_operand): New function.\n\t* pa.h (prefetch_operand): Add to PREDICATE_CODES.\n\t* pa.md (prefetch, prefetch_32, prefetch_64): New prefetch patterns.\n\nFrom-SVN: r83950", "tree": {"sha": "da9f4662d19d582804c9c2d251173b8b82f8c71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9f4662d19d582804c9c2d251173b8b82f8c71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/comments", "author": null, "committer": null, "parents": [{"sha": "1190bcd85d54c0cc19abbf1f6a7636c1e975814b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1190bcd85d54c0cc19abbf1f6a7636c1e975814b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1190bcd85d54c0cc19abbf1f6a7636c1e975814b"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "c1a19dda5b4d061e8287ae0fb6f258c34c56617f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "patch": "@@ -1,3 +1,10 @@\n+2004-06-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa-protos.h (prefetch_operand): Add prototype.\n+\t* pa.c (prefetch_operand): New function.\n+\t* pa.h (prefetch_operand): Add to PREDICATE_CODES.\n+\t* pa.md (prefetch, prefetch_32, prefetch_64): New prefetch patterns.\n+\n 2004-06-30  Richard Henderson  <rth@redhat.com>\n \n \t* function.h (struct function): Remove x_whole_function_mode_p."}, {"sha": "cfe07c7b248764f34b79bdbc5923057040aaffea", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "patch": "@@ -80,6 +80,7 @@ extern int arith_operand (rtx, enum machine_mode);\n extern int read_only_operand (rtx, enum machine_mode);\n extern int move_dest_operand (rtx, enum machine_mode);\n extern int move_src_operand (rtx, enum machine_mode);\n+extern int prefetch_operand (rtx, enum machine_mode);\n extern int and_operand (rtx, enum machine_mode);\n extern int ior_operand (rtx, enum machine_mode);\n extern int arith32_operand (rtx, enum machine_mode);"}, {"sha": "9ece6dd9532354632c4cf22928e4a3c81fe89b96", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "patch": "@@ -617,6 +617,27 @@ move_src_operand (rtx op, enum machine_mode mode)\n   return memory_address_p (mode, XEXP (op, 0));\n }\n \n+/* Accept anything that can be used as the source operand for a prefetch\n+   instruction.  */\n+int\n+prefetch_operand (rtx op, enum machine_mode mode)\n+{\n+  if (GET_CODE (op) != MEM)\n+    return 0;\n+\n+  /* Until problems with management of the REG_POINTER flag are resolved,\n+     we need to delay creating prefetch insns with unscaled indexed addresses\n+     until CSE is not expected.  */\n+  if (!TARGET_NO_SPACE_REGS\n+      && !cse_not_expected\n+      && GET_CODE (XEXP (op, 0)) == PLUS\n+      && REG_P (XEXP (XEXP (op, 0), 0))\n+      && REG_P (XEXP (XEXP (op, 0), 1)))\n+    return 0;\n+\n+  return memory_address_p (mode, XEXP (op, 0));\n+}\n+\n /* Accept REG and any CONST_INT that can be moved in one instruction into a\n    general register.  */\n int"}, {"sha": "1b6a2c8f2f0e2365f83ed7be64edff1340a6a44f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "patch": "@@ -2023,6 +2023,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n \t\t\t\t       CONST_DOUBLE}},\t\t\t\\\n   {\"move_dest_operand\", {SUBREG, REG, MEM}},\t\t\t\t\\\n   {\"move_src_operand\", {SUBREG, REG, CONST_INT, MEM}},\t\t\t\\\n+  {\"prefetch_operand\", {MEM}},\t\t\t\t\t\t\\\n   {\"reg_or_cint_move_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n   {\"pic_label_operand\", {LABEL_REF, CONST}},\t\t\t\t\\\n   {\"fp_reg_operand\", {REG}},\t\t\t\t\t\t\\"}, {"sha": "25389966c8e5c5d29263ae071b222776c47ef184", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=cde0e59bf23f3b78e15ae96ceb04a32ad60a89e8", "patch": "@@ -9352,3 +9352,121 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n     }\n   DONE;\n }\")\n+\n+(define_expand \"prefetch\"\n+  [(match_operand 0 \"address_operand\" \"\")\n+   (match_operand 1 \"const_int_operand\" \"\")\n+   (match_operand 2 \"const_int_operand\" \"\")]\n+  \"TARGET_PA_20\"\n+{\n+  /* We change operand0 to a MEM as we don't have the infrastructure to\n+     output all the supported address modes for ldw/ldd but we do have\n+     it for MEMs.  */\n+  operands[0] = gen_rtx_MEM (Pmode, operands[0]);\n+\n+  if (!TARGET_NO_SPACE_REGS\n+      && !cse_not_expected\n+      && GET_CODE (XEXP (operands[0], 0)) == PLUS\n+      && REG_P (XEXP (XEXP (operands[0], 0), 0))\n+      && REG_P (XEXP (XEXP (operands[0], 0), 1)))\n+    operands[0]\n+      = replace_equiv_address (operands[0],\n+\t\t\t       copy_to_mode_reg (Pmode,\n+\t\t\t\t\t \t XEXP (operands[0], 0)));\n+\n+  if (TARGET_64BIT)\n+    emit_insn (gen_prefetch_64 (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_prefetch_32 (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"prefetch_64\"\n+  [(prefetch (match_operand:DI 0 \"prefetch_operand\" \"A,RQ\")\n+\t     (match_operand:DI 1 \"const_int_operand\" \"n,n\")\n+\t     (match_operand:DI 2 \"const_int_operand\" \"n,n\"))]\n+  \"TARGET_64BIT\"\n+{\n+  /* The SL completor indicates good spatial locality but poor temporal\n+     locality.  The ldw instruction with a target of general register 0\n+     prefetches a cache line for a read.  The ldd instruction prefetches\n+     a cache line for a write.  */\n+  static const char * const instr[2][2][2] = {\n+    {\n+      {\n+\t\"ldw,sl RT'%A0,%%r0\",\n+\t\"ldw RT'%A0,%%r0\",\n+      },\n+      {\n+\t\"ldd,sl RT'%A0,%%r0\",\n+\t\"ldd RT'%A0,%%r0\",\n+      },\n+    },\n+    {\n+      {\n+\t\"ldw%M0,sl %0,%%r0\",\n+\t\"ldw%M0 %0,%%r0\",\n+      },\n+      {\n+\t\"ldd%M0,sl %0,%%r0\",\n+\t\"ldd%M0 %0,%%r0\",\n+      }\n+    }\n+  };\n+  int read_or_write = INTVAL (operands[1]);\n+  int locality = INTVAL (operands[2]);\n+\n+  if ((which_alternative != 0 && which_alternative != 1)\n+      || (read_or_write != 0 && read_or_write != 1)\n+      || (locality < 0 || locality > 3))\n+    abort ();\n+\n+  return instr [which_alternative][read_or_write][locality == 0 ? 0 : 1];\n+}\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"prefetch_32\"\n+  [(prefetch (match_operand:SI 0 \"prefetch_operand\" \"A,RQ\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n,n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n,n\"))]\n+  \"TARGET_PA_20\"\n+{\n+  /* The SL completor indicates good spatial locality but poor temporal\n+     locality.  The ldw instruction with a target of general register 0\n+     prefetches a cache line for a read.  The ldd instruction prefetches\n+     a cache line for a write.  */\n+  static const char * const instr[2][2][2] = {\n+    {\n+      {\n+\t\"ldw,sl RT'%A0,%%r0\",\n+\t\"ldw RT'%A0,%%r0\",\n+      },\n+      {\n+\t\"ldd,sl RT'%A0,%%r0\",\n+\t\"ldd RT'%A0,%%r0\",\n+      },\n+    },\n+    {\n+      {\n+\t\"ldw%M0,sl %0,%%r0\",\n+\t\"ldw%M0 %0,%%r0\",\n+      },\n+      {\n+\t\"ldd%M0,sl %0,%%r0\",\n+\t\"ldd%M0 %0,%%r0\",\n+      }\n+    }\n+  };\n+  int read_or_write = INTVAL (operands[1]);\n+  int locality = INTVAL (operands[2]);\n+\n+  if ((which_alternative != 0 && which_alternative != 1)\n+      || (read_or_write != 0 && read_or_write != 1)\n+      || (locality < 0 || locality > 3))\n+    abort ();\n+\n+  return instr [which_alternative][read_or_write][locality == 0 ? 0 : 1];\n+}\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])"}]}