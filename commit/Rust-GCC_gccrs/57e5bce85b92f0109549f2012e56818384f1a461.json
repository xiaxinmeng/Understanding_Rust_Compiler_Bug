{"sha": "57e5bce85b92f0109549f2012e56818384f1a461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlNWJjZTg1YjkyZjAxMDk1NDlmMjAxMmU1NjgxODM4NGYxYTQ2MQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-10-16T00:09:36Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-10-16T00:09:36Z"}, "message": "* config/c4x/c4x.md (*absqi2_noclobber, *negqi2_noclobber,\n\n\t*one_cmplqi2_noclobber, *subqi3_noclobber, *andqi3_255_noclobber,\n\t*andqi3_65535_noclobber, *andnqi3_noclobber, *xorqi3_noclobber):\n\tAdd new patterns and associated post-reload splitters.\n\nFrom-SVN: r30029", "tree": {"sha": "938df7426bd6e2cf92a24f09f9abc2e451199b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/938df7426bd6e2cf92a24f09f9abc2e451199b0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e5bce85b92f0109549f2012e56818384f1a461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e5bce85b92f0109549f2012e56818384f1a461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e5bce85b92f0109549f2012e56818384f1a461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e5bce85b92f0109549f2012e56818384f1a461/comments", "author": null, "committer": null, "parents": [{"sha": "3411b713f4bc1ac2db223a2b8138ae5af59462ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3411b713f4bc1ac2db223a2b8138ae5af59462ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3411b713f4bc1ac2db223a2b8138ae5af59462ac"}], "stats": {"total": 208, "additions": 205, "deletions": 3}, "files": [{"sha": "2df5f692c523d4454f3d94545b77d990672ea18f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e5bce85b92f0109549f2012e56818384f1a461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e5bce85b92f0109549f2012e56818384f1a461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57e5bce85b92f0109549f2012e56818384f1a461", "patch": "@@ -1,3 +1,10 @@\n+Sat Oct 16 13:03:16 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (*absqi2_noclobber, *negqi2_noclobber,\n+\t*one_cmplqi2_noclobber, *subqi3_noclobber, *andqi3_255_noclobber,\n+\t*andqi3_65535_noclobber, *andnqi3_noclobber, *xorqi3_noclobber):\n+\tAdd new patterns and associated post-reload splitters.\n+\n Sat Oct 16 12:42:12 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_emit_libcall): Use ggc_alloc_string."}, {"sha": "e95fe384437459daf0b398ba1cf436eaf09ab6d0", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 198, "deletions": 3, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e5bce85b92f0109549f2012e56818384f1a461/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e5bce85b92f0109549f2012e56818384f1a461/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=57e5bce85b92f0109549f2012e56818384f1a461", "patch": "@@ -1466,6 +1466,23 @@\n   [(set_attr \"type\" \"unarycc,unary\")\n    (set_attr \"data\" \"int16,int16\")])\n \n+(define_insn \"*absqi2_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n+        (abs:QI (match_operand:QI 1 \"src_operand\" \"rIm\")))]\n+  \"\"\n+  \"absi\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"data\" \"int16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (abs:QI (match_operand:QI 1 \"src_operand\" \"\")))\n+   (clobber (reg:CC_NOOV 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (abs:QI (match_dup 1)))]\n+  \"\")\n+\n (define_insn \"*absqi2_test\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (abs:QI (match_operand:QI 1 \"src_operand\" \"rIm\"))\n@@ -1506,6 +1523,23 @@\n   [(set_attr \"type\" \"unarycc,unary\")\n    (set_attr \"data\" \"int16,int16\")])\n \n+(define_insn \"*negqi2_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n+        (neg:QI (match_operand:QI 1 \"src_operand\" \"rIm\")))]\n+  \"\"\n+  \"negi\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"data\" \"int16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (neg:QI (match_operand:QI 1 \"src_operand\" \"\")))\n+   (clobber (reg:CC_NOOV 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (neg:QI (match_dup 1)))]\n+  \"\")\n+\n (define_insn \"*negqi2_test\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (neg:QI (match_operand:QI 1 \"src_operand\" \"rIm\"))\n@@ -1556,6 +1590,23 @@\n   [(set_attr \"type\" \"unarycc,unary\")\n    (set_attr \"data\" \"uint16,uint16\")])\n \n+(define_insn \"*one_cmplqi2_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n+        (not:QI (match_operand:QI 1 \"lsrc_operand\" \"rLm\")))]\n+  \"\"\n+  \"not\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"data\" \"uint16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (not:QI (match_operand:QI 1 \"lsrc_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (not:QI (match_dup 1)))]\n+  \"\")\n+\n (define_insn \"*one_cmplqi2_test\"\n   [(set (reg:CC 21)\n         (compare:CC (not:QI (match_operand:QI 1 \"lsrc_operand\" \"rLm\"))\n@@ -1734,6 +1785,17 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                 (match_operand:QI 2 \"src_operand\" \"\")))\n+   (clobber (reg:CC_NOOV 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (plus:QI (match_dup 1)\n+                 (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*addqi3_test\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n@@ -1882,6 +1944,17 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc,binary,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (minus:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                  (match_operand:QI 2 \"src_operand\" \"\")))\n+   (clobber (reg:CC_NOOV 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (minus:QI (match_dup 1)\n+                 (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*subqi3_test\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n@@ -1929,6 +2002,19 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n+(define_insn \"*subqi3_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c,?c\")\n+        (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n+                  (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>\")))]\n+  \"valid_operands (MINUS, operands, QImode)\"\n+  \"@\n+   subi\\\\t%2,%0\n+   subri\\\\t%1,%0\n+   subi3\\\\t%2,%1,%0\n+   subi3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary,binary\")])\n+; Default to int16 data attr.\n+\n (define_insn \"*subqi3_carry_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,d,?d,c,c,c,?c\")\n         (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>,0,rIm,rR,rS<>\")\n@@ -2295,7 +2381,15 @@\n    (clobber (reg:CC 21))]\n  \"! TARGET_C3X\"\n  \"lbu0\\\\t%1,%0\"\n-  [(set_attr \"type\" \"unarycc\")])\n+  [(set_attr \"type\" \"unarycc,unary\")])\n+\n+(define_insn \"*andqi3_255_noclobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"mr\")\n+                (const_int 255)))]\n+ \"! TARGET_C3X\"\n+ \"lbu0\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unary\")])\n \n \n (define_insn \"*andqi3_65535_clobber\"\n@@ -2305,8 +2399,15 @@\n    (clobber (reg:CC 21))]\n  \"! TARGET_C3X\"\n  \"lhu0\\\\t%1,%0\"\n-  [(set_attr \"type\" \"unarycc\")])\n+  [(set_attr \"type\" \"unarycc,unary\")])\n \n+(define_insn \"*andqi3_65535_noclobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"mr\")\n+                (const_int 65535)))]\n+ \"! TARGET_C3X\"\n+ \"lhu0\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unary\")])\n \n (define_insn \"*andqi3_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,d,?d,c,c,c,?c\")\n@@ -2326,6 +2427,30 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc,binary,binary,binary,binary\")\n    (set_attr \"data\" \"not_uint16,uint16,int16,uint16,not_uint16,uint16,int16,uint16\")])\n \n+(define_insn \"*andqi3_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c,?c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"%0,0,rR,rS<>\")\n+                (match_operand:QI 2 \"tsrc_operand\" \"N,rLm,JR,rS<>\")))]\n+  \"valid_operands (AND, operands, QImode)\"\n+  \"@\n+   andn\\\\t%N2,%0\n+   and\\\\t%2,%0\n+   and3\\\\t%2,%1,%0\n+   and3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary,binary\")\n+   (set_attr \"data\" \"not_uint16,uint16,int16,uint16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                (match_operand:QI 2 \"tsrc_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (and:QI (match_dup 1)\n+                (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*andqi3_test\"\n   [(set (reg:CC 21)\n         (compare:CC (and:QI (match_operand:QI 1 \"src_operand\" \"%0,r,rR,rS<>\")\n@@ -2396,6 +2521,29 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n    (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n+(define_insn \"*andnqi3_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n+                (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\")))]\n+  \"valid_operands (AND, operands, QImode)\"\n+  \"@\n+   andn\\\\t%2,%0\n+   andn3\\\\t%2,%1,%0\n+   andn3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"\"))\n+                (match_operand:QI 1 \"src_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (and:QI (not:QI (match_dup 2))\n+                (match_dup 1)))]\n+  \"\")\n+\n (define_insn \"*andnqi3_test\"\n   [(set (reg:CC 21)\n         (compare:CC (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n@@ -2453,6 +2601,17 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n    (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (ior:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (ior:QI (match_dup 1)\n+                (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*iorqi3_test\"\n   [(set (reg:CC 21)\n         (compare:CC (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n@@ -2538,6 +2697,29 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n    (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n+(define_insn \"*xorqi3_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (xor:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\")))]\n+  \"valid_operands (XOR, operands, QImode)\"\n+  \"@\n+   xor\\\\t%2,%0\n+   xor3\\\\t%2,%1,%0\n+   xor3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n+\n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (xor:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (xor:QI (match_dup 1)\n+                (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*xorqi3_test\"\n   [(set (reg:CC 21)\n         (compare:CC (xor:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n@@ -2633,6 +2815,16 @@\n   [(set_attr \"type\" \"binary,binary,binary\")])\n ; Default to int16 data attr.\n \n+(define_split\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n+        (ashift:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                   (match_operand:QI 2 \"src_operand\" \"\")))\n+   (clobber (reg:CC 21))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (ashift:QI (match_dup 1)\n+                   (match_dup 2)))]\n+  \"\")\n \n ; This is only used by lshrhi3_reg where we need a LSH insn that will\n ; shift both ways.\n@@ -3222,7 +3414,6 @@\n  \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n-\n ; This can generate invalid stack slot displacements\n (define_split\n  [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n@@ -3887,6 +4078,10 @@\n ; CONDITIONAL MOVES\n ;\n \n+; ???  We should make these pattern fail if the src operand combination\n+; is not valid.  Although reload will fix things up, it will introduce\n+; extra load instructions that won't be hoisted out of a loop.\n+\n (define_insn \"*ldi_conditional\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=r,r\")\n         (if_then_else:QI (match_operator 1 \"comparison_operator\""}]}