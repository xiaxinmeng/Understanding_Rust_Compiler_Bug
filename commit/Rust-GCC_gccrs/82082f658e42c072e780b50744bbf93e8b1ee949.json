{"sha": "82082f658e42c072e780b50744bbf93e8b1ee949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwODJmNjU4ZTQyYzA3MmU3ODBiNTA3NDRiYmY5M2U4YjFlZTk0OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-09-22T13:16:11Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-09-22T13:16:11Z"}, "message": "use rtx_insn * more\n\ngcc/ChangeLog:\n\n2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/arc/arc-protos.h (arc_label_align): Change type of\n\tvariables from rtx to rtx_insn *.\n\t* config/arc/arc.c (arc_label_align): Likewise.\n\t* config/arm/arm.c (any_sibcall_could_use_r3): Likewise.\n\t* config/bfin/bfin.c (workaround_speculation): Likewise.\n\t* config/c6x/c6x.c (find_next_cycle_insn): Likewise.\n\t(find_last_same_clock): Likewise.\n\t(reorg_split_calls): Likewise.\n\t* config/cris/cris-protos.h (cris_cc0_user_requires_cmp): Likewise.\n\t* config/cris/cris.c (cris_cc0_user_requires_cmp): Likewise.\n\t* config/h8300/h8300-protos.h (same_cmp_preceding_p): Likewise.\n\t(same_cmp_following_p): Likewise.\n\t* config/h8300/h8300.c (same_cmp_preceding_p): Likewise.\n\t(same_cmp_following_p): Likwise.\n\t* config/m32r/m32r.c (m32r_expand_epilogue): Likewise.\n\t* config/nds32/nds32-protos.h (nds32_target_alignment): Likewise.\n\t* config/nds32/nds32.c (nds32_target_alignment): Likewise.\n\t* config/rl78/rl78.c (rl78_alloc_physical_registers_op2):\n\t* Likewise.\n\t(rl78_alloc_physical_registers_cmp): Likewise.\n\t(rl78_alloc_physical_registers_umul): Likewise.\n\t(rl78_calculate_death_notes): Likewise.\n\t* config/s390/s390-protos.h (s390_label_align): Likewise.\n\t* config/s390/s390.c (s390_label_align): Likewise.\n\t* config/sh/sh.c (barrier_align): Likewise.\n\t* config/sparc/sparc-protos.h (emit_cbcond_nop): Likewise.\n\t* config/sparc/sparc.c (sparc_asm_function_epilogue): Likewise.\n\t(emit_cbcond_nop): Likewise.\n\nFrom-SVN: r240356", "tree": {"sha": "b8ae943384e3822fe153517923d18a6b0a8acc9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ae943384e3822fe153517923d18a6b0a8acc9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82082f658e42c072e780b50744bbf93e8b1ee949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82082f658e42c072e780b50744bbf93e8b1ee949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82082f658e42c072e780b50744bbf93e8b1ee949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82082f658e42c072e780b50744bbf93e8b1ee949/comments", "author": null, "committer": null, "parents": [{"sha": "d94a7ab41897e110ad1e02379f2a6aaedb88a66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94a7ab41897e110ad1e02379f2a6aaedb88a66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94a7ab41897e110ad1e02379f2a6aaedb88a66f"}], "stats": {"total": 103, "additions": 66, "deletions": 37}, "files": [{"sha": "80db88e935de37be2b54d23c6a7e47a944bd7873", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -1,3 +1,34 @@\n+2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/arc/arc-protos.h (arc_label_align): Change type of\n+\tvariables from rtx to rtx_insn *.\n+\t* config/arc/arc.c (arc_label_align): Likewise.\n+\t* config/arm/arm.c (any_sibcall_could_use_r3): Likewise.\n+\t* config/bfin/bfin.c (workaround_speculation): Likewise.\n+\t* config/c6x/c6x.c (find_next_cycle_insn): Likewise.\n+\t(find_last_same_clock): Likewise.\n+\t(reorg_split_calls): Likewise.\n+\t* config/cris/cris-protos.h (cris_cc0_user_requires_cmp): Likewise.\n+\t* config/cris/cris.c (cris_cc0_user_requires_cmp): Likewise.\n+\t* config/h8300/h8300-protos.h (same_cmp_preceding_p): Likewise.\n+\t(same_cmp_following_p): Likewise.\n+\t* config/h8300/h8300.c (same_cmp_preceding_p): Likewise.\n+\t(same_cmp_following_p): Likwise.\n+\t* config/m32r/m32r.c (m32r_expand_epilogue): Likewise.\n+\t* config/nds32/nds32-protos.h (nds32_target_alignment): Likewise.\n+\t* config/nds32/nds32.c (nds32_target_alignment): Likewise.\n+\t* config/rl78/rl78.c (rl78_alloc_physical_registers_op2):\n+\t* Likewise.\n+\t(rl78_alloc_physical_registers_cmp): Likewise.\n+\t(rl78_alloc_physical_registers_umul): Likewise.\n+\t(rl78_calculate_death_notes): Likewise.\n+\t* config/s390/s390-protos.h (s390_label_align): Likewise.\n+\t* config/s390/s390.c (s390_label_align): Likewise.\n+\t* config/sh/sh.c (barrier_align): Likewise.\n+\t* config/sparc/sparc-protos.h (emit_cbcond_nop): Likewise.\n+\t* config/sparc/sparc.c (sparc_asm_function_epilogue): Likewise.\n+\t(emit_cbcond_nop): Likewise.\n+\n 2016-09-22  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/77653"}, {"sha": "73aacbc72bd9e6a13da7d36fe23159a4f4ce728b", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -109,7 +109,7 @@ extern rtx arc_regno_use_in (unsigned int, rtx);\n extern int arc_attr_type (rtx_insn *);\n extern bool arc_scheduling_not_expected (void);\n extern bool arc_sets_cc_p (rtx_insn *insn);\n-extern int arc_label_align (rtx label);\n+extern int arc_label_align (rtx_insn *label);\n extern bool arc_need_delay (rtx_insn *insn);\n extern bool arc_text_label (rtx_insn *insn);\n "}, {"sha": "2b25b0b737a0e5c0f7e194ae95069993125aeaac", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -9243,7 +9243,7 @@ arc_scheduling_not_expected (void)\n    long.)  */\n \n int\n-arc_label_align (rtx label)\n+arc_label_align (rtx_insn *label)\n {\n   int loop_align = LOOP_ALIGN (LABEL);\n "}, {"sha": "594dc1756e03d7376981cadcedae050852d64690", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -20858,7 +20858,7 @@ any_sibcall_could_use_r3 (void)\n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     if (e->flags & EDGE_SIBCALL)\n       {\n-\trtx call = BB_END (e->src);\n+\trtx_insn *call = BB_END (e->src);\n \tif (!CALL_P (call))\n \t  call = prev_nonnote_nondebug_insn (call);\n \tgcc_assert (CALL_P (call) && SIBLING_CALL_P (call));"}, {"sha": "a91e47ed163c696cb78c32bc2e66e53c3fe0958f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -4452,7 +4452,7 @@ workaround_speculation (void)\n \t      || cbranch_predicted_taken_p (insn)))\n \t{\n \t  rtx_insn *target = JUMP_LABEL_AS_INSN (insn);\n-\t  rtx label = target;\n+\t  rtx_insn *label = target;\n \t  rtx_insn *next_tgt;\n \n \t  cycles_since_jump = 0;"}, {"sha": "df6cb78ce62bc965f3ffad4b8b1bfc28789ed6ae", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -4807,18 +4807,18 @@ convert_to_callp (rtx_insn *insn)\n /* Scan forwards from INSN until we find the next insn that has mode TImode\n    (indicating it starts a new cycle), and occurs in cycle CLOCK.\n    Return it if we find such an insn, NULL_RTX otherwise.  */\n-static rtx\n-find_next_cycle_insn (rtx insn, int clock)\n+static rtx_insn *\n+find_next_cycle_insn (rtx_insn *insn, int clock)\n {\n-  rtx t = insn;\n+  rtx_insn *t = insn;\n   if (GET_MODE (t) == TImode)\n     t = next_real_insn (t);\n   while (t && GET_MODE (t) != TImode)\n     t = next_real_insn (t);\n \n   if (t && insn_get_clock (t) == clock)\n     return t;\n-  return NULL_RTX;\n+  return NULL;\n }\n \n /* If COND_INSN has a COND_EXEC condition, wrap the same condition\n@@ -4836,10 +4836,10 @@ duplicate_cond (rtx pat, rtx cond_insn)\n \n /* Walk forward from INSN to find the last insn that issues in the same clock\n    cycle.  */\n-static rtx\n-find_last_same_clock (rtx insn)\n+static rtx_insn *\n+find_last_same_clock (rtx_insn *insn)\n {\n-  rtx retval = insn;\n+  rtx_insn *retval = insn;\n   rtx_insn *t = next_real_insn (insn);\n \n   while (t && GET_MODE (t) != TImode)\n@@ -4935,12 +4935,11 @@ reorg_split_calls (rtx *call_labels)\n \t\t no insn setting/using B3 is scheduled in the delay slots of\n \t\t a call.  */\n \t      int this_clock = insn_get_clock (insn);\n-\t      rtx last_same_clock;\n-\t      rtx after1;\n+\t      rtx_insn *after1;\n \n \t      call_labels[INSN_UID (insn)] = label;\n \n-\t      last_same_clock = find_last_same_clock (insn);\n+\t      rtx_insn *last_same_clock = find_last_same_clock (insn);\n \n \t      if (can_use_callp (insn))\n \t\t{"}, {"sha": "5e0ae61d23151b0f559efeee71f2024c0ba1959f", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -27,7 +27,7 @@ extern void cris_notice_update_cc (rtx, rtx_insn *);\n extern bool cris_reload_address_legitimized (rtx, machine_mode, int, int, int);\n extern int cris_side_effect_mode_ok (enum rtx_code, rtx *, int, int,\n                                      int, int, int);\n-extern bool cris_cc0_user_requires_cmp (rtx);\n+extern bool cris_cc0_user_requires_cmp (rtx_insn *);\n extern rtx cris_return_addr_rtx (int, rtx);\n extern rtx cris_split_movdx (rtx *);\n extern int cris_legitimate_pic_operand (rtx);"}, {"sha": "1026aad328db2063a4e3ea970f9ba0673910166c", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -2409,7 +2409,7 @@ cris_side_effect_mode_ok (enum rtx_code code, rtx *ops,\n    insn for other reasons.  */\n \n bool\n-cris_cc0_user_requires_cmp (rtx insn)\n+cris_cc0_user_requires_cmp (rtx_insn *insn)\n {\n   rtx_insn *cc0_user = NULL;\n   rtx body;"}, {"sha": "a4895ff2ca25d4743d626420f67a08dfef4c1b9d", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -56,8 +56,8 @@ extern void split_adds_subs (machine_mode, rtx[]);\n extern int h8300_eightbit_constant_address_p (rtx);\n extern int h8300_tiny_constant_address_p (rtx);\n extern int byte_accesses_mergeable_p (rtx, rtx);\n-extern int same_cmp_preceding_p (rtx);\n-extern int same_cmp_following_p (rtx);\n+extern int same_cmp_preceding_p (rtx_insn *);\n+extern int same_cmp_following_p (rtx_insn *);\n \n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx (int, rtx);"}, {"sha": "943356781e7fbf22c6cbf1495f8c10dc5a53fcae", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -5730,7 +5730,7 @@ byte_accesses_mergeable_p (rtx addr1, rtx addr2)\n    before I3.  I3 is assumed to be a comparison insn.  */\n \n int\n-same_cmp_preceding_p (rtx i3)\n+same_cmp_preceding_p (rtx_insn *i3)\n {\n   rtx_insn *i1, *i2;\n \n@@ -5750,7 +5750,7 @@ same_cmp_preceding_p (rtx i3)\n    after I1.  I1 is assumed to be a comparison insn.  */\n \n int\n-same_cmp_following_p (rtx i1)\n+same_cmp_following_p (rtx_insn *i1)\n {\n   rtx_insn *i2, *i3;\n "}, {"sha": "dda3961bf303de4e2db7d055e89676afdcbb273a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -1789,7 +1789,7 @@ m32r_expand_epilogue (void)\n \n   if (total_size == 0)\n     {\n-      rtx insn = get_last_insn ();\n+      rtx_insn *insn = get_last_insn ();\n \n       /* If the last insn was a BARRIER, we don't have to write any code\n \t because a jump (aka return) was put there.  */"}, {"sha": "aef022bfa14738c8b91c1afe98a0285aed5c4ddd", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -126,7 +126,7 @@ extern int nds32_can_use_return_insn (void);\n \n /* Auxiliary functions to decide output alignment or not.  */\n \n-extern int nds32_target_alignment (rtx);\n+extern int nds32_target_alignment (rtx_insn *);\n \n /* Auxiliary functions to expand builtin functions.  */\n "}, {"sha": "7b0d74745171e682bef601ac40336c9e7c64f8e7", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -3489,7 +3489,7 @@ nds32_adjust_insn_length (rtx_insn *insn, int length)\n \n /* Return align 2 (log base 2) if the next instruction of LABEL is 4 byte.  */\n int\n-nds32_target_alignment (rtx label)\n+nds32_target_alignment (rtx_insn *label)\n {\n   rtx_insn *insn;\n "}, {"sha": "a4e4be27a6a0f7e717361b34b278ff08e3c08c1f", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -3153,8 +3153,8 @@ has_constraint (unsigned int opnum, enum constraint_num constraint)\n static void\n rl78_alloc_physical_registers_op2 (rtx_insn * insn)\n {\n-  rtx prev;\n-  rtx first;\n+  rtx_insn *prev;\n+  rtx_insn *first;\n   bool hl_used;\n   int tmp_id;\n   rtx saved_op1;\n@@ -3332,7 +3332,7 @@ rl78_alloc_physical_registers_cmp (rtx_insn * insn)\n   int tmp_id;\n   rtx saved_op1;\n   rtx_insn *prev = prev_nonnote_nondebug_insn (insn);\n-  rtx first;\n+  rtx_insn *first;\n \n   OP (1) = transcode_memory_rtx (OP (1), DE, insn);\n   OP (2) = transcode_memory_rtx (OP (2), HL, insn);\n@@ -3423,7 +3423,7 @@ static void\n rl78_alloc_physical_registers_umul (rtx_insn * insn)\n {\n   rtx_insn *prev = prev_nonnote_nondebug_insn (insn);\n-  rtx first;\n+  rtx_insn *first;\n   int tmp_id;\n   rtx saved_op1;\n \n@@ -3793,7 +3793,8 @@ static void\n rl78_calculate_death_notes (void)\n {\n   char dead[FIRST_PSEUDO_REGISTER];\n-  rtx insn, p, s, d;\n+  rtx p, s, d;\n+rtx_insn *insn;\n   int i;\n \n   memset (dead, 0, sizeof (dead));"}, {"sha": "91dc0fffea690a8056206c7ceb1dcf1ce9fc5091", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -133,7 +133,7 @@ extern void s390_split_access_reg (rtx, rtx *, rtx *);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern void s390_output_pool_entry (rtx, machine_mode, unsigned int);\n-extern int s390_label_align (rtx);\n+extern int s390_label_align (rtx_insn *);\n extern int s390_agen_dep_p (rtx_insn *, rtx_insn *);\n extern rtx_insn *s390_load_got (void);\n extern rtx s390_get_thread_pointer (void);"}, {"sha": "60e2070d15d04d800a704eb3020060847e72eb97", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -1134,7 +1134,7 @@ static const struct attribute_spec s390_attribute_table[] = {\n /* Return the alignment for LABEL.  We default to the -falign-labels\n    value except for the literal pool base label.  */\n int\n-s390_label_align (rtx label)\n+s390_label_align (rtx_insn *label)\n {\n   rtx_insn *prev_insn = prev_active_insn (label);\n   rtx set, src;"}, {"sha": "b3e949e04679eb638a8fe447b32b528c013d3b4c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -5694,7 +5694,7 @@ barrier_align (rtx_insn *barrier_or_label)\n \t      ? 1 : align_jumps_log);\n     }\n \n-  rtx next = next_active_insn (barrier_or_label);\n+  rtx_insn *next = next_active_insn (barrier_or_label);\n \n   if (! next)\n     return 0;"}, {"sha": "2308b91b42e267b59681837f7bad427fce4a929c", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -84,7 +84,7 @@ extern int registers_ok_for_ldd_peep (rtx, rtx);\n extern int mems_ok_for_ldd_peep (rtx, rtx, rtx);\n extern rtx widen_mem_for_ldd_peep (rtx, rtx, machine_mode);\n extern int empty_delay_slot (rtx_insn *);\n-extern int emit_cbcond_nop (rtx);\n+extern int emit_cbcond_nop (rtx_insn *);\n extern int eligible_for_call_delay (rtx_insn *);\n extern int eligible_for_return_delay (rtx_insn *);\n extern int eligible_for_sibcall_delay (rtx_insn *);"}, {"sha": "5efed3dc52f75e8dd3c4900e85aeabf22c7a135b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82082f658e42c072e780b50744bbf93e8b1ee949/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=82082f658e42c072e780b50744bbf93e8b1ee949", "patch": "@@ -3488,7 +3488,7 @@ empty_delay_slot (rtx_insn *insn)\n    situation.  */\n \n int\n-emit_cbcond_nop (rtx insn)\n+emit_cbcond_nop (rtx_insn *insn)\n {\n   rtx next = next_active_insn (insn);\n \n@@ -5873,11 +5873,9 @@ sparc_asm_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      backtraces in such cases.  This is pointless for sibling calls since\n      the return address is explicitly adjusted.  */\n \n-  rtx insn, last_real_insn;\n+  rtx_insn *insn = get_last_insn ();\n \n-  insn = get_last_insn ();\n-\n-  last_real_insn = prev_real_insn (insn);\n+  rtx last_real_insn = prev_real_insn (insn);\n   if (last_real_insn\n       && NONJUMP_INSN_P (last_real_insn)\n       && GET_CODE (PATTERN (last_real_insn)) == SEQUENCE)"}]}