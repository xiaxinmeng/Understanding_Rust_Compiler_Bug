{"sha": "87aa52463bfcff18f2fd26590112107b0f9656dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhYTUyNDYzYmZjZmYxOGYyZmQyNjU5MDExMjEwN2IwZjk2NTZkYw==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-04-02T11:18:47Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-04-02T11:18:47Z"}, "message": "i386.md: Delete floating point compare...\n\n\t* i386.md: Delete floating point compare, add, subtract,\n\tmultiply, and divide patterns which allowed integer\n\toperands.\n\t* i386.c (output_386_binary_op): Delete unused code.\n\t(output_float_compare): Likewise.\n\nFrom-SVN: r26123", "tree": {"sha": "46e0eb617d74d3a99878cc4ac4d9047eb9147663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e0eb617d74d3a99878cc4ac4d9047eb9147663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87aa52463bfcff18f2fd26590112107b0f9656dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aa52463bfcff18f2fd26590112107b0f9656dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87aa52463bfcff18f2fd26590112107b0f9656dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aa52463bfcff18f2fd26590112107b0f9656dc/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea5c0a506fbc9df26f3cd8a181198294d43cb6b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5c0a506fbc9df26f3cd8a181198294d43cb6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5c0a506fbc9df26f3cd8a181198294d43cb6b9"}], "stats": {"total": 240, "additions": 18, "deletions": 222}, "files": [{"sha": "fe327faac92ee9664c733ec1657d0b3bd2b9fd1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87aa52463bfcff18f2fd26590112107b0f9656dc", "patch": "@@ -1,3 +1,11 @@\n+Fri Apr  2 14:12:06 EST 1999  John Wehle  (john@feith.com)\n+\n+\t* i386.md: Delete floating point compare, add, subtract,\n+\tmultiply, and divide patterns which allowed integer\n+\toperands.\n+\t* i386.c (output_386_binary_op): Delete unused code.\n+\t(output_float_compare): Likewise.\n+\n Fri Apr  2 11:53:37 1999  John Wehle  (john@feith.com)\n \n \t* i386.md (movsf+1, movdf+1, movxf+1): Update constraints"}, {"sha": "f7738818656dc39eed53e1cf0ba81fdaf9dd76e9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 51, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=87aa52463bfcff18f2fd26590112107b0f9656dc", "patch": "@@ -4187,35 +4187,19 @@ output_387_binary_op (insn, operands)\n   switch (GET_CODE (operands[3]))\n     {\n     case PLUS:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-\t  || GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT)\n-\tbase_op = \"fiadd\";\n-      else\n-\tbase_op = \"fadd\";\n+      base_op = \"fadd\";\n       break;\n \n     case MINUS:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-\t  || GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT)\n-\tbase_op = \"fisub\";\n-      else\n-\tbase_op = \"fsub\";\n+      base_op = \"fsub\";\n       break;\n \n     case MULT:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-\t  || GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT)\n-\tbase_op = \"fimul\";\n-      else\n-\tbase_op = \"fmul\";\n+      base_op = \"fmul\";\n       break;\n \n     case DIV:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-\t  || GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT)\n-\tbase_op = \"fidiv\";\n-      else\n-\tbase_op = \"fdiv\";\n+      base_op = \"fdiv\";\n       break;\n \n     default:\n@@ -4238,17 +4222,8 @@ output_387_binary_op (insn, operands)\n       if (GET_CODE (operands[2]) == MEM)\n \treturn strcat (buf, AS1 (%z2,%2));\n \n-      if (NON_STACK_REG_P (operands[1]))\n-\t{\n-\t  output_op_from_reg (operands[1], strcat (buf, AS1 (%z0,%1)));\n-\t  return \"\";\n-\t}\n-\n-      else if (NON_STACK_REG_P (operands[2]))\n-\t{\n-\t  output_op_from_reg (operands[2], strcat (buf, AS1 (%z0,%1)));\n-\t  return \"\";\n-\t}\n+      if (! STACK_REG_P (operands[1]) || ! STACK_REG_P (operands[2]))\n+\tabort ();\n \n       if (find_regno_note (insn, REG_DEAD, REGNO (operands[2])))\n \t{\n@@ -4271,18 +4246,6 @@ output_387_binary_op (insn, operands)\n       if (GET_CODE (operands[2]) == MEM)\n \treturn strcat (buf, AS1 (%z2,%2));\n \n-      if (NON_STACK_REG_P (operands[1]))\n-\t{\n-\t  output_op_from_reg (operands[1], strcat (buf, AS1 (r%z0,%1)));\n-\t  return \"\";\n-\t}\n-\n-      else if (NON_STACK_REG_P (operands[2]))\n-\t{\n-\t  output_op_from_reg (operands[2], strcat (buf, AS1 (%z0,%1)));\n-\t  return \"\";\n-\t}\n-\n       if (! STACK_REG_P (operands[1]) || ! STACK_REG_P (operands[2]))\n \tabort ();\n \n@@ -4442,24 +4405,19 @@ output_float_compare (insn, operands)\n     {\n       static char buf[100];\n \n-      /* Decide if this is the integer or float compare opcode, or the\n-\t unordered float compare. */\n+      /* Decide if this is a float compare or an unordered float compare. */\n \n       if (unordered_compare)\n \tstrcpy (buf, (cc_status.flags & CC_FCOMI) ? \"fucomi\" : \"fucom\");\n-      else if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_FLOAT)\n-\tstrcpy (buf, (cc_status.flags & CC_FCOMI) ? \"fcomi\" : \"fcom\");\n       else\n-\tstrcpy (buf, \"ficom\");\n+\tstrcpy (buf, (cc_status.flags & CC_FCOMI) ? \"fcomi\" : \"fcom\");\n \n       /* Modify the opcode if the 387 stack is to be popped. */\n \n       if (stack_top_dies)\n \tstrcat (buf, \"p\");\n \n-      if (NON_STACK_REG_P (operands[1]))\n-\toutput_op_from_reg (operands[1], strcat (buf, AS1 (%z0,%1)));\n-      else if (cc_status.flags & CC_FCOMI)\n+      if (cc_status.flags & CC_FCOMI)\n \t{\n \t  output_asm_insn (strcat (buf, AS2 (%z1,%y1,%0)), operands);\n \t  return \"\";"}, {"sha": "e5faf1d140eb537bffd28f07fdc860976789e6e3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 171, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aa52463bfcff18f2fd26590112107b0f9656dc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=87aa52463bfcff18f2fd26590112107b0f9656dc", "patch": "@@ -509,28 +509,6 @@\n   \"* return output_float_compare (insn, operands);\"\n   [(set_attr \"type\" \"fcompare\")])\n \n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(match_operand:XF 0 \"register_operand\" \"f\")\n-\t\t\t (float:XF\n-\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(float:XF\n-\t\t\t  (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n-\t\t\t (match_operand:XF 1 \"register_operand\" \"f\")]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n (define_insn \"\"\n   [(set (cc0)\n \t(match_operator 2 \"VOIDmode_compare_op\"\n@@ -595,28 +573,6 @@\n   \"* return output_float_compare (insn, operands);\"\n   [(set_attr \"type\" \"fcompare\")])\n \n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(match_operand:DF 0 \"register_operand\" \"f\")\n-\t\t\t (float:DF\n-\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(float:DF\n-\t\t\t  (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n-\t\t\t (match_operand:DF 1 \"register_operand\" \"f\")]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n (define_insn \"\"\n   [(set (cc0)\n \t(match_operator 2 \"VOIDmode_compare_op\"\n@@ -690,28 +646,6 @@\n   \"* return output_float_compare (insn, operands);\"\n   [(set_attr \"type\" \"fcompare\")])\n \n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(match_operand:SF 0 \"register_operand\" \"f\")\n-\t\t\t (float:SF\n-\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(float:SF\n-\t\t\t  (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n-\t\t\t (match_operand:SF 1 \"register_operand\" \"f\")]))\n-   (clobber (match_scratch:HI 3 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return output_float_compare (insn, operands);\"\n-  [(set_attr \"type\" \"fcompare\")])\n-\n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:SF 0 \"register_operand\" \"f\")\n@@ -6986,9 +6920,7 @@ byte_xor_operation:\n ;; mulM3 and divM3.  There are three patterns for each of DFmode and\n ;; SFmode.  The first is the normal insn, the second the same insn but\n ;; with one operand a conversion, and the third the same insn but with\n-;; the other operand a conversion.  The conversion may be SFmode or\n-;; SImode if the target mode DFmode, but only SImode if the target mode\n-;; is SFmode.\n+;; the other operand a conversion.\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n@@ -7007,23 +6939,6 @@ byte_xor_operation:\n         )\n   )])\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(match_operator:DF 3 \"binary_387_op\"\n-\t   [(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n-\t    (match_operand:DF 2 \"register_operand\" \"0\")]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n-\n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n@@ -7041,23 +6956,6 @@ byte_xor_operation:\n         )\n   )])\n \n-(define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_387_op\"\n-\t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n-\t    (match_operand:XF 2 \"register_operand\" \"0\")]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n-\n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n@@ -7075,23 +6973,6 @@ byte_xor_operation:\n         )\n   )])\n \n-(define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_387_op\"\n-\t  [(match_operand:XF 1 \"register_operand\" \"0\")\n-\t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n-\n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n@@ -7127,23 +7008,6 @@ byte_xor_operation:\n         )\n   )])\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(match_operator:DF 3 \"binary_387_op\"\n-\t  [(match_operand:DF 1 \"register_operand\" \"0\")\n-\t   (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n-\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n@@ -7178,40 +7042,6 @@ byte_xor_operation:\n                (const_string \"fpop\")\n         )\n   )])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(match_operator:SF 3 \"binary_387_op\"\n-\t  [(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n-\t   (match_operand:SF 2 \"register_operand\" \"0\")]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(match_operator:SF 3 \"binary_387_op\"\n-\t  [(match_operand:SF 1 \"register_operand\" \"0\")\n-\t   (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n-                 (const_string \"fpmul\")\n-               (match_operand:DF 3 \"is_div\" \"\") \n-                 (const_string \"fpdiv\")\n-              ]\n-               (const_string \"fpop\")\n-        )\n-  )])\n \f\n (define_expand \"strlensi\"\n   [(parallel [(set (match_dup 4)"}]}