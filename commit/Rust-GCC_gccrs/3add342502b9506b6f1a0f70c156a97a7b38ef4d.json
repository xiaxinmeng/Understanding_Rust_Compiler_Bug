{"sha": "3add342502b9506b6f1a0f70c156a97a7b38ef4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkZDM0MjUwMmI5NTA2YjZmMWEwZjcwYzE1NmE5N2E3YjM4ZWY0ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-05T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-05T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "18377b8fed7240881d183aca8d205bce7e790b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18377b8fed7240881d183aca8d205bce7e790b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3add342502b9506b6f1a0f70c156a97a7b38ef4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3add342502b9506b6f1a0f70c156a97a7b38ef4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3add342502b9506b6f1a0f70c156a97a7b38ef4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3add342502b9506b6f1a0f70c156a97a7b38ef4d/comments", "author": null, "committer": null, "parents": [{"sha": "f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222"}], "stats": {"total": 907, "additions": 906, "deletions": 1}, "files": [{"sha": "9d5fce30b400ed788e38330a2322bb6b21999393", "filename": "gcc/ChangeLog", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,195 @@\n+2020-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/10138\n+\tPR middle-end/95136\n+\t* attribs.c (init_attr_rdwr_indices): Move function here.\n+\t* attribs.h (rdwr_access_hash, rdwr_map): Define.\n+\t(attr_access): Add 'none'.\n+\t(init_attr_rdwr_indices): Declared function.\n+\t* builtins.c (warn_for_access)): New function.\n+\t(check_access): Call it.\n+\t* builtins.h (checK-access): Add an optional argument.\n+\t* calls.c (rdwr_access_hash, rdwr_map): Move to attribs.h.\n+\t(init_attr_rdwr_indices): Declare extern.\n+\t(append_attrname): Handle attr_access::none.\n+\t(maybe_warn_rdwr_sizes): Same.\n+\t(initialize_argument_information): Update comments.\n+\t* doc/extend.texi (attribute access): Document 'none'.\n+\t* tree-ssa-uninit.c (struct wlimits): New.\n+\t(maybe_warn_operand): New function.\n+\t(maybe_warn_pass_by_reference): Same.\n+\t(warn_uninitialized_vars): Refactor code into maybe_warn_operand.\n+\tAlso call for function calls.\n+\t(pass_late_warn_uninitialized::execute): Adjust comments.\n+\t(execute_early_warn_uninitialized): Same.\n+\n+2020-06-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/95464\n+\t* lra.c (lra_emit_move): Add processing STRICT_LOW_PART.\n+\t* lra-constraints.c (match_reload): Use STRICT_LOW_PART in output\n+\treload if the original insn has it too.\n+\n+2020-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/aarch64/aarch64.c (aarch64_gimplify_va_arg_expr):\n+\tEnsure that tmp_ha is marked TREE_ADDRESSABLE.\n+\n+2020-06-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/95113\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Move non-call\n+\texceptions check to...\n+\t* tree-eh.c (stmt_unremovable_because_of_non_call_eh_p): ...this\n+\tnew function.\n+\t* tree-eh.h (stmt_unremovable_because_of_non_call_eh_p): Declare it.\n+\t* ipa-sra.c (isra_track_scalar_value_uses): Use it.  New parameter\n+\tfun.\n+\n+2020-06-04  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/94735\n+\t* config/arm/predicates.md (mve_scatter_memory): Define to\n+\tmatch (mem (reg)) for scatter store memory.\n+\t* config/arm/mve.md (mve_vstrbq_scatter_offset_<supf><mode>): Modify\n+\tdefine_insn to define_expand.\n+\t(mve_vstrbq_scatter_offset_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_offset_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_<supf><mode>): Likewise.\n+\t(mve_vstrdq_scatter_offset_p_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_offset_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_p_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_<supf>v2di): Likewise.\n+\t(mve_vstrhq_scatter_offset_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_offset_p_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_fv8hf): Likewise.\n+\t(mve_vstrwq_scatter_offset_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_offset_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_<supf>v4si): Likewise.\n+\t(mve_vstrbq_scatter_offset_<supf><mode>_insn): Define insn for scatter\n+\tstores.\n+\t(mve_vstrbq_scatter_offset_p_<supf><mode>_insn): Likewise.\n+\t(mve_vstrhq_scatter_offset_<supf><mode>_insn): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_<supf><mode>_insn): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_<supf><mode>_insn): Likewise.\n+\t(mve_vstrdq_scatter_offset_p_<supf>v2di_insn): Likewise.\n+\t(mve_vstrdq_scatter_offset_<supf>v2di_insn): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_p_<supf>v2di_insn): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_<supf>v2di_insn): Likewise.\n+\t(mve_vstrhq_scatter_offset_fv8hf_insn): Likewise.\n+\t(mve_vstrhq_scatter_offset_p_fv8hf_insn): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_fv8hf_insn): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_fv8hf_insn): Likewise.\n+\t(mve_vstrwq_scatter_offset_fv4sf_insn): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_fv4sf_insn): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_<supf>v4si_insn): Likewise.\n+\t(mve_vstrwq_scatter_offset_<supf>v4si_insn): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_fv4sf_insn): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_fv4sf_insn): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_<supf>v4si_insn): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_<supf>v4si_insn): Likewise.\n+\n+2020-06-04  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vbicq_n_u16): Correct the intrinsic\n+\targuments.\n+\t(__arm_vbicq_n_s16): Likewise.\n+\t(__arm_vbicq_n_u32): Likewise.\n+\t(__arm_vbicq_n_s32): Likewise.\n+\t(__arm_vbicq): Modify polymorphic variant.\n+\n+2020-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_get_slp_vect_def): Declare.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use it.\n+\t* tree-vect-stmts.c (vect_transform_stmt): Likewise.\n+\t(vect_is_simple_use): Use SLP_TREE_REPRESENTATIVE.\n+\t* tree-vect-slp.c (vect_get_slp_vect_defs): Fold into single\n+\tuse ...\n+\t(vect_get_slp_defs): ... here.\n+\t(vect_get_slp_vect_def): New function.\n+\n+2020-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_slp_tree::lanes): New.\n+\t(SLP_TREE_LANES): Likewise.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use it.\n+\t(vectorizable_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\t(vectorizable_induction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\t* tree-vect-slp.c (_slp_tree::_slp_tree): Initialize lanes.\n+\t(vect_create_new_slp_node): Likewise.\n+\t(slp_copy_subtree): Copy it.\n+\t(vect_optimize_slp): Use it.\n+\t(vect_slp_analyze_node_operations_1): Likewise.\n+\t(vect_slp_convert_to_external): Likewise.\n+\t(vect_bb_vectorization_profitable_p): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n+\t(get_vectype_for_scalar_type): Likewise.\n+\n+2020-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_update_all_shared_vectypes): Remove.\n+\t(vect_build_slp_tree_2): Simplify building all external op\n+\tnodes from scalars.\n+\t(vect_slp_analyze_node_operations): Remove push/pop of\n+\tSTMT_VINFO_DEF_TYPE.\n+\t(vect_schedule_slp_instance): Likewise.\n+\t* tree-vect-stmts.c (ect_check_store_rhs): Pass in the\n+\tstmt_info, use the vect_is_simple_use overload combining\n+\tSLP and stmt_info analysis.\n+\t(vect_is_simple_cond): Likewise.\n+\t(vectorizable_store): Adjust.\n+\t(vectorizable_condition): Likewise.\n+\t(vect_is_simple_use): Fully handle invariant SLP nodes\n+\there.  Amend stmt_info operand extraction with COND_EXPR\n+\tand masked stores.\n+\t* tree-vect-loop.c (vectorizable_reduction): Deal with\n+\tCOND_EXPR representation ugliness.\n+\n+2020-06-04  Hongtao Liu  <hongtao.liu@inte.com>\n+\n+\tPR target/95254\n+\t* config/i386/sse.md (*vcvtps2ph_store<merge_mask_name>):\n+\tRefine from *vcvtps2ph_store<mask_name>.\n+\t(vcvtps2ph256<mask_name>): Refine constraint from vm to v.\n+\t(<mask_codefor>avx512f_vcvtps2ph512<mask_name>): Ditto.\n+\t(*vcvtps2ph256<merge_mask_name>): New define_insn.\n+\t(*avx512f_vcvtps2ph512<merge_mask_name>): Ditto.\n+\t* config/i386/subst.md (merge_mask): New define_subst.\n+\t(merge_mask_name): New define_subst_attr.\n+\t(merge_mask_operand3): Ditto.\n+\n+2020-06-04  Hao Liu  <hliu@os.amperecomputing.com>\n+\n+\tPR tree-optimization/89430\n+\t* tree-ssa-phiopt.c\n+\t(struct name_to_bb): Rename to ref_to_bb; add a new field exp;\n+\tremove ssa_name_ver, store, offset fields.\n+\t(struct ssa_names_hasher): Rename to refs_hasher; update functions.\n+\t(class nontrapping_dom_walker): Rename m_seen_ssa_names to m_seen_refs.\n+\t(nontrapping_dom_walker::add_or_mark_expr): Extend to support ARRAY_REFs\n+\tand COMPONENT_REFs.\n+\n+2020-06-04  Andreas Schwab  <schwab@suse.de>\n+\n+\tPR target/95154\n+\t* config/ia64/ia64.h (ASM_OUTPUT_FDESC): Call assemble_external.\n+\n+2020-06-04  Hongtao.liu  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (pmov_dst_3_lower): New mode attribute.\n+\t(trunc<mode><pmov_dst_3_lower>2): Refine from\n+\ttrunc<mode><pmov_dst_3>2.\n+\n 2020-06-03  Vitor Guidi  <vitor.guidi@usp.br>\n \n \t* match.pd (tanh/sinh -> 1/cosh): New simplification."}, {"sha": "de253bc14b713d03293eed0904659e6f6f666aec", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1 +1 @@\n-20200604\n+20200605"}, {"sha": "fed3fe2fbaf7d39f736451b0efa468f1dce445ab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,306 @@\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/i-c.ads (long_long, unsigned_long_long): New\n+\tdefinitions.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: add a-tasini object\n+\t* impunit.adb (Non_Imp_File_Names_95): Add s-tasini.\n+\t* libgnarl/a-tasini.ads, libgnarl/a-tasini.adb: New files.\n+\t* libgnarl/s-taskin.ads (Global_Initialization_Handler): New.\n+\t* libgnarl/s-tassta.adb (Task_Wrapper): Call\n+\tGlobal_Initialization_Handler if non null.\n+\n+2020-06-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Build_Suprogram_Body_Wrapper,\n+\tBuild_Subprogram_Decl_Wrapper): New suprograms, to create the\n+\twrappers needed to implement contracts on formsl subprograms at\n+\tthe point of instantiation.\n+\t(Build_Subprogram_Wrappers): New subprogram within\n+\tAnalyze_Associations, calls the above when the formal subprogram\n+\thas contracts, and expansion is enabled.\n+\t(Instantiate_Formal_Subprogram): If the actual is not an entity,\n+\tsuch as a function attribute, or a synchronized operation,\n+\tcreate a function with an internal name and call it within the\n+\twrapper.\n+\t(Analyze_Generic_Formal_Part): Analyze contracts at the end of\n+\tthe list of formal declarations.\n+\t* sem_prag.adb (Analyze_Pre_Post_Condtion): In Ada_2020 the\n+\taspect and corresponding pragma can appear on a formal\n+\tsubprogram declaration.\n+\t(Find_Related_Declaration_Or_Body): Ditto.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Final_Call): Set the type of the object, if\n+\tit is unanalyzed, before calling Convert_View on it.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adabkend.adb, back_end.ads, opt.ads, sem_ch6.adb: Get rid of\n+\tDisable_FE_Inline_Always.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Final_Call): Add missing guard.\n+\t* sem_ch3.adb (Copy_And_Build): Adjust recursive call for\n+\tprivate types.\n+\t(Build_Derived_Private_Type): Deal with underlying full views.\n+\n+2020-06-04  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-stobbu.adb, libgnat/a-stobbu.ads,\n+\tlibgnat/a-stobfi.adb, libgnat/a-stobfi.ads,\n+\tlibgnat/a-stoubu.adb, libgnat/a-stoubu.ads,\n+\tlibgnat/a-stoufi.adb, libgnat/a-stoufi.ads,\n+\tlibgnat/a-stoufo.adb, libgnat/a-stoufo.ads,\n+\tlibgnat/a-stouut.adb, libgnat/a-stouut.ads,\n+\tlibgnat/a-stteou.ads, libgnat/s-putaim.adb,\n+\tlibgnat/s-putaim.ads, libgnat/s-putima.adb, libgnat/s-putima.ads\n+\t(Ada.Strings.Text_Output and children, System.Put_Images): New\n+\truntime support for Put_Image.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add\n+\texp_put_image.o.\n+\t* exp_put_image.adb, exp_put_image.ads: New compiler package\n+\tthat generates calls to runtime routines that implement\n+\tPut_Image.\n+\t* Makefile.rtl: Add object files for Ada.Strings.Text_Output and\n+\tchildren and System.Put_Images.\n+\t* aspects.adb: Simplify initialization of Canonical_Aspect.\n+\t* aspects.ads: Improve documentation. Add Aspect_Put_Image.\n+\t* exp_attr.adb: Add support for Put_Image, by calling routines\n+\tin Exp_Put_Image.\n+\t* sem_util.adb (Is_Predefined_Dispatching_Operation): Return\n+\tTrue for new TSS_Put_Image operation.\n+\t* exp_ch3.adb: For tagged types, build a dispatching\n+\tTSS_Put_Image operation by calling routines in Exp_Put_Image.\n+\t* exp_disp.adb, exp_disp.ads: Make TSS_Put_Image be number 10,\n+\tadjusting other operations' numbers after 10. We choose 10\n+\tbecause that's the last number shared by all runtimes.\n+\t* exp_strm.adb: Use named notation as appropriate.\n+\t* exp_cg.adb, exp_tss.ads: Add TSS_Put_Image.\n+\t* libgnat/a-tags.ads: Modify Max_Predef_Prims for the new\n+\tTSS_Put_Image.\n+\t* impunit.adb: Add new runtime packages.\n+\t* rtsfind.adb, rtsfind.ads: Add support for\n+\tAda.Strings.Text_Output, Ada.Strings.Text_Output.Utils, and\n+\tSystem.Put_Images.\n+\t* sem_attr.adb: Error checking for Put_Image calls.\n+\t* sem_ch12.adb (Valid_Default_Attribute): Support for passing\n+\tPut_Image as a generic formal parameter.\n+\t* sem_ch13.adb: Analysis of Put_Image aspect. Turn it into a\n+\tPut_Image attribute definition clause.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Support for\n+\trenaming of the Put_Image attribute.\n+\t* snames.adb-tmpl: Fix comments.\n+\t* snames.ads-tmpl (Name_Put_Image): New Name_Id.\n+\t(Attribute_Put_Image): New Attribute_Id.\n+\t* tbuild.adb, tbuild.ads (Make_Increment): New utility.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (xpand_N_Attribute_Reference) <Input>: Call\n+\tFind_Inherited_TSS to look up the Stream_Read TSS.\n+\t<Output>: Likewise for the Stream_Write TSS.\n+\t* exp_ch7.adb (Make_Final_Call): Call Underlying_Type on\n+\tprivate types to account for underlying full views.\n+\t* exp_strm.ads  (Build_Record_Or_Elementary_Input_Function):\n+\tRemove Use_Underlying parameter.\n+\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function):\n+\tLikewise and adjust accordingly.\n+\t* exp_tss.adb (Find_Inherited_TSS): Deal with full views.\n+\tCall Find_Inherited_TSS recursively on the parent type if\n+\tthe base type is a derived type.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Take\n+\tinto account underlying full views for derived types.\n+\t* sem_ch3.adb (Copy_And_Build): Look up the underlying full\n+\tview only for a completion.  Be prepared for private types.\n+\t(Build_Derived_Private_Type): Build an underlying full view\n+\tfor a completion in the general case too.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* back_end.adb, opt.ads, par-prag.adb, sem_ch5.adb,\n+\tsem_prag.adb, sinfo.adb, sinfo.ads, snames.ads-tmpl,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst: Remove\n+\texperimental support for OpenACC.\n+\t* gcc-interface/misc.c, gcc-interface/trans.c,\n+\tgcc-interface/lang.opt: Ditto.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Generate_Discriminant_Check): Remove obsolete\n+\tcomment.\n+\n+2020-06-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* par-ch3.adb (P_Identifier_Declarations): Add parsing of object\n+\trenamings that have neither a subtype_mark nor an\n+\taccess_definition. Issue an error if the version is earlier than\n+\tAda_2020, and suggest using -gnatX.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Handle\n+\tobject_renaming_declarations that don't have an explicit\n+\tsubtype. Errors are issued when the name is inappropriate or\n+\tambiguous, and otherwise the Etype of the renaming entity is set\n+\tfrom the Etype of the renamed object.\n+\t* sem_util.adb (Has_Null_Exclusion): Allow for the case of no\n+\tsubtype given in an N_Object_Renaming_Declaration.\n+\t* sprint.adb (Sprint_Node_Actual): Handle printing of\n+\tN_Object_Renaming_Declarations that are specified without an\n+\texplicit subtype.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads (N_Delta_Aggregate): Document Etype field.\n+\t(N_Case_Expression): Likewise.\n+\t(Is_Syntactic_Field) <N_Quantified_Expression>: Adjust.\n+\t<N_Case_Expression>: Likewise.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adaint.c: Avoid redefining IS_DIR_SEPARATOR macro.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): Defer processing of main spec\n+\tafter all other specs and before processing bodies.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindgen.adb (Gen_Adafinal): Adafinal is convention Ada, not C.\n+\n+2020-06-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinput.adb (Sloc_Range): Ignore node in the tree if it appears\n+\tin a unit different from that of the node whose Sloc range we\n+\tare computing. This is necessary when computing the source range\n+\tof a subprogram body whose declaration includes a pre- or\n+\tpostcondition, because declaration and body may appear in\n+\tdifferent units, and the expanded code for the body includes\n+\tcopies of the contract code.\n+\n+2020-06-04  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* switch.adb (Is_Internal_GCC_Switch): Recognize dumpdir and\n+\tdumpbase-ext.  Mark auxbase and auxbase-strip for removal.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute) <Access>: Do not generate\n+\tthe secondary message about a missing pragma if the convention\n+\tof the prefix is Intrinsic.\n+\t* sem_ch12.adb (Instantiate_Formal_Subprogram): Only set the\n+\tConvention and the Is_Inlined flag on a null procedure.\n+\n+2020-06-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Change to\n+\tCheck_Return_Construct_Accessibility to better reflect its\n+\tpurpose.  Add loop to properly obtain the object declaration\n+\tfrom an expanded extended return statement and add calls to get\n+\tthe original node for associated values. Also, avoid checks when\n+\tthe return statement being examined comes from an internally\n+\tgenerated function.\n+\n+2020-06-04  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.c (__gnat_is_absolute_path): Check for directory\n+\tseparator after drive and colon.\n+\t(IS_DIR_SEPARATOR): Define new inline substitution.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads: Update documentation about range checks and fix\n+\tminor other things.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Apply special handling\n+\tof private index types to generic packages and restrict it to\n+\tindex types defined in the current scope.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-exextr.adb (Global_Unhandled_Action): New global\n+\tvariable.\n+\t(Notify_Exception): Take into account Global_Unhandled_Action\n+\tand fix latent race condition.\n+\t(Exception_Action): Mark Favor_Top_Level so that variables can\n+\tbe atomic.\n+\t(Global_Action): Mark atomic to remove the need for a lock.\n+\t* libgnat/g-excact.ads, libgnat/g-excact.adb\n+\t(Register_Global_Unhandled_Action): New procedure.\n+\t(Register_Global_Action): Remove lock.\n+\t* libgnat/s-stalib.ads (Raise_Action): Mark Favor_Top_Level to\n+\tbe compatible with Exception_Action.\n+\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix logic wrt\n+\tVolatile entities and entities with an address clause: the code\n+\tdid not match the comment/intent.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* comperr.adb (Compiler_Abort): Update URL and bug report\n+\tinstructions.\n+\n+2020-06-04  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/s-imgrea.ads: Declare a named number\n+\tMax_Real_Image_Length with value 5200.  Provide a comment\n+\texplaining why this value was chosen.\n+\t* libgnat/s-imgrea.adb (Set_Image_Real): Increase the upper\n+\tbound of the local String variable Digs to\n+\tMax_Real_Image_Length.\n+\t* libgnat/a-tiflau.adb (Put): Increase the upper bound of the\n+\tlocal String variable Buf to Max_Real_Image_Length.\n+\t(Puts): Increase the upper bound of the local String variable\n+\tBuf to Max_Real_Image_Length.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/a-dynpri.adb, libgnarl/a-taside.adb,\n+\tlibgnarl/a-taster.adb, libgnarl/s-interr.adb,\n+\tlibgnarl/s-interr__sigaction.adb, libgnarl/s-taasde.adb,\n+\tlibgnarl/s-taenca.adb, libgnarl/s-taenca.ads,\n+\tlibgnarl/s-taprop.ads, libgnarl/s-taprop__hpux-dce.adb,\n+\tlibgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n+\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,\n+\tlibgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,\n+\tlibgnarl/s-tarest.adb, libgnarl/s-tasini.adb,\n+\tlibgnarl/s-tasque.adb, libgnarl/s-tasque.ads,\n+\tlibgnarl/s-tasren.adb, libgnarl/s-tasren.ads,\n+\tlibgnarl/s-tassta.adb, libgnarl/s-tasuti.adb,\n+\tlibgnarl/s-tasuti.ads, libgnarl/s-tpoben.adb,\n+\tlibgnarl/s-tpobop.adb, libgnarl/s-tpopmo.adb,\n+\tlibgnarl/s-tposen.adb, libgnat/s-parame.ads,\n+\tlibgnat/s-parame__ae653.ads, libgnat/s-parame__hpux.ads,\n+\tlibgnat/s-parame__vxworks.ads: Remove references to Single_Lock\n+\tand Global_Lock.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-atopar.adb, libgnat/s-atopex.adb: Use Object_Size\n+\tinstead of Size, otherwise many derived types will be rejected\n+\t(e.g. a type with a 14 bits 'Size and a 16 bits 'Object_Size).\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Copy_Generic_Node): Add special handling for a\n+\tconversion between access types.\n+\n+2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Actuals): Also restore the proper\n+\tviews of the actuals of the parent instances if the formals are\n+\tused as actuals of the children.\n+\t(Instantiate_Type): Add comment.\n+\n+2020-06-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch12.adb: Minor editorial fixes.\n+\n 2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch12.adb (Denotes_Previous_Actual): Delete."}, {"sha": "4344fb8ab4f8197adff21774523db9b6aa0149ad", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,10 @@\n+2020-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/10138\n+\tPR middle-end/95136\n+\t* c-attribs.c (append_access_attrs): Handle attr_access::none.\n+\t(handle_access_attribute): Same.\n+\n 2020-06-03  Mark Wielaard  <mark@klomp.org>\n \n \t* known-headers.cc (get_cp_stdlib_header_for_string_macro_name):"}, {"sha": "5c8eaff1a9749a901526b7a95a9d788a56aeb98a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,33 @@\n+2020-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93310\n+\t* constexpr.c (cxx_eval_constant_expression) [OBJ_TYPE_REF]:\n+\tEvaluate OBJ_TYPE_REF_EXPR.\n+\n+2020-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95158\n+\t* class.c (lookup_vfn_in_binfo): New.\n+\t* call.c (build_over_call): Use it.\n+\t* cp-tree.h (resolves_to_fixed_type_p): Add default argument.\n+\t(lookup_vfn_in_binfo): Declare.\n+\n+2020-06-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95346\n+\t* coroutines.cc (morph_fn_to_coro): Ensure that the get-\n+\treturn-object is constructed correctly; When it is not the\n+\tfinal return value, pass it to the CTOR of the return type\n+\tas an rvalue, per the standard comment.\n+\n+2020-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82304\n+\tPR c++/95307\n+\t* constexpr.c (cxx_eval_constant_expression): Diagnose CONVERT_EXPR\n+\tconversions from pointer types to arithmetic types here...\n+\t(cxx_eval_outermost_constant_expr): ... instead of here.\n+\n 2020-06-03  Mark Wielaard  <mark@klomp.org>\n \n \t* parser.c (cp_lexer_safe_previous_token): New function."}, {"sha": "1ef6814468b13e367befb394baa4c8dadbeee683", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,70 @@\n+2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 48d704f08.\n+\t* d-attribs.cc (build_attributes): Use new field name.\n+\t* d-builtins.cc (build_frontend_type): Likewise.\n+\t(maybe_set_builtin_1): Likewise.\n+\t(d_maybe_set_builtin): Likewise.\n+\t* d-codegen.cc (build_interface_binfo): Likewise.\n+\t(identity_compare_p): Likewise.\n+\t(lower_struct_comparison): Likewise.\n+\t(build_struct_comparison): Likewise.\n+\t(d_build_call): Likewise.\n+\t(build_frame_type): Likewise.\n+\t(build_closure): Likewise.\n+\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n+\t(Compiler::loadModule): Likewise.\n+\t* d-incpath.cc (add_globalpaths): Likewise.\n+\t(add_filepaths): Likewise.\n+\t(add_import_paths): Likewise.\n+\t* d-lang.cc (deps_write): Likewise.\n+\t(d_parse_file): Likewise.\n+\t* decl.cc (gcc_attribute_p): Likewise.\n+\t(base_vtable_offset): Likewise.\n+\t(get_vtable_decl): Likewise.\n+\t(build_class_instance): Likewise.\n+\t* expr.cc (class ExprVisitor): Likewise.\n+\t* modules.cc (layout_moduleinfo_fields): Likewise.\n+\t(layout_moduleinfo): Likewise.\n+\t(build_module_tree): Likewise.\n+\t* toir.cc (class IRVisitor): Likewise.\n+\t* typeinfo.cc (class TypeInfoVisitor): Likewise.\n+\t(layout_classinfo_interfaces): Likewise.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\t(layout_aggregate_type): Likewise.\n+\n+2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 47ed0330f.\n+\n+2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_OBJS): Add d-compiler.o, d-ctfloat.o, d-port.o.\n+\t* d-frontend.cc (Port::memicmp): Move to d-port.cc.\n+\t(Port::strupr): Likewise.\n+\t(Port::isFloat32LiteralOutOfRange): Likewise.\n+\t(Port::isFloat64LiteralOutOfRange): Likewise.\n+\t(Port::readwordLE): Likewise.\n+\t(Port::readwordBE): Likewise.\n+\t(Port::readlongLE): Likewise.\n+\t(Port::readlongBE): Likewise.\n+\t(Port::valcpy): Likewise.\n+\t(CTFloat::fabs): Move to d-ctfloat.cc.\n+\t(CTFloat::ldexp): Likewise.\n+\t(CTFloat::isIdentical): Likewise.\n+\t(CTFloat::isNaN): Likewise.\n+\t(CTFloat::isSNaN): Likewise.\n+\t(CTFloat::isInfinity): Likewise.\n+\t(CTFloat::parse): Likewise.\n+\t(CTFloat::sprint): Likewise.\n+\t(CTFloat::hash): Likewise.\n+\t(Compiler::genCmain): Move to d-compiler.cc.\n+\t(Compiler::paintAsType): Likewise.\n+\t(Compiler::loadModule): Likewise.\n+\t* d-compiler.cc: New file.\n+\t* d-ctfloat.cc: New file.\n+\t* d-port.cc: New file.\n+\n 2020-06-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* decl.cc (DeclVisitor::build_dsymbol): New function."}, {"sha": "13534c18fe2cba48b8f214135d06a6312c44b4f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,10 @@\n+2020-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95500\n+\t* trans-expr.c (gfc_conv_expr_reference): Do not dereference NULL\n+\tpointer.\n+\n 2020-06-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/95214"}, {"sha": "45a256253a2893ea08f333d060b71a01c8da79b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,144 @@\n+2020-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/10138\n+\tPR middle-end/95136\n+\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Prune out valid\n+\tWuninitialized.\n+\t* c-c++-common/uninit-pr51010.c: Adjust expected warning format.\n+\t* c-c++-common/goacc/uninit-dim-clause.c: Same.\n+\t* c-c++-common/goacc/uninit-firstprivate-clause.c: Same.\n+\t* c-c++-common/goacc/uninit-if-clause.c: Same.\n+\t* c-c++-common/gomp/pr70550-1.c: Same.\n+\t* c-c++-common/gomp/pr70550-2.c: Adjust.\n+\t* g++.dg/20090107-1.C: Same.\n+\t* g++.dg/20090121-1.C: Same.\n+\t* g++.dg/ext/attr-access.C: Avoid -Wuninitialized.\n+\t* gcc.dg/tree-ssa/forwprop-6.c: Prune out -Wuninitialized.\n+\t* gcc.dg/Warray-bounds-52.c: Prune out valid -Wuninitialized.\n+\t* gcc.dg/Warray-bounds-53.c: Same.\n+\t* gcc.dg/Warray-bounds-54.c: Same.\n+\t* gcc.dg/Wstringop-overflow-33.c: New test.\n+\t* gcc.dg/attr-access-none.c: New test.\n+\t* gcc.dg/attr-access-read-only.c: Adjust.\n+\t* gcc.dg/attr-access-read-write.c: Same.\n+\t* gcc.dg/attr-access-write-only.c: Same.\n+\t* gcc.dg/pr71581.c: Adjust text of expected warning.\n+\t* gcc.dg/uninit-15.c: Same.\n+\t* gcc.dg/uninit-32.c: New test.\n+\t* gcc.dg/uninit-33.c: New test.\n+\t* gcc.dg/uninit-34.c: New test.\n+\t* gcc.dg/uninit-36.c: New test.\n+\t* gcc.dg/uninit-B-O0.c: Adjust text of expected warning.\n+\t* gcc.dg/uninit-I-O0.c: Same.\n+\t* gcc.dg/uninit-pr19430-O0.c: Same.\n+\t* gcc.dg/uninit-pr19430.c: Same.\n+\t* gcc.dg/uninit-pr95136.c: New test.\n+\t* gfortran.dg/assignment_4.f90: Expect -Wuninitialized.\n+\t* gfortran.dg/goacc/uninit-dim-clause.f95: Adjust text of expected\n+\twarning.\n+\t* gfortran.dg/goacc/uninit-firstprivate-clause.f95\n+\t* gfortran.dg/goacc/uninit-if-clause.f95\n+\t* gfortran.dg/pr66545_2.f90\n+\n+2020-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93310\n+\t* g++.dg/cpp2a/constexpr-virtual16.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual17.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new12.C: Adjust diagnostic.\n+\n+2020-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95158\n+\t* g++.dg/template/virtual5.C: New test.\n+\n+2020-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95500\n+\t* gfortran.dg/pr95500.f90: New test.\n+\n+2020-06-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95346\n+\t* g++.dg/coroutines/pr95346.C: New test.\n+\n+2020-06-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/95464\n+\t* gcc.target/i386/pr95464.c: New.\n+\n+2020-06-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/95113\n+\t* gcc.dg/ipa/pr95113.c: New test.\n+\n+2020-06-04  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/94735\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_base.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_base_p.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_offset.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_offset_p.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_shifted_offset.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_shifted_offset_p.c:\n+\tLikewise.\n+\n+2020-06-04  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vbicq_f16.c: Modify.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u8.c: Likewise.\n+\n+2020-06-04  Hongtao Liu  <hongtao.liu@inte.com>\n+\n+\t* gcc.target/i386/avx512f-vcvtps2ph-pr95254.c: New test.\n+\t* gcc.target/i386/avx512vl-vcvtps2ph-pr95254.c: Ditto.\n+\n+2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat.dg/openacc1.adb: Remove testcase.\n+\n+2020-06-04  Hao Liu  <hliu@os.amperecomputing.com>\n+\n+\tPR tree-optimization/89430\n+\t* gcc.dg/tree-ssa/pr89430-1.c: Remove xfail.\n+\t* gcc.dg/tree-ssa/pr89430-2.c: Remove xfail.\n+\t* gcc.dg/tree-ssa/pr89430-5.c: Remove xfail.\n+\t* gcc.dg/tree-ssa/pr89430-6.c: Remove xfail.\n+\t* gcc.dg/tree-ssa/pr89430-7-comp-ref.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-8-mem-ref-size.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-pre-17.c: Add -fno-tree-cselim.\n+\n+2020-06-04  Andreas Schwab  <schwab@suse.de>\n+\n+\tPR libfortran/59227\n+\t* gfortran.dg/erf_3.F90: Remove XFAIL on ia64-*-linux*.\n+\n+2020-06-04  Hongtao.liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92658-avx512bw-trunc.c: Adjust testcase.\n+\n+2020-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82304\n+\tPR c++/95307\n+\t* g++.dg/template/pr79650.C: Expect different diagnostics and expect\n+\tit on all lines that do pointer to integer casts.\n+\t* g++.dg/cpp1y/constexpr-shift1.C: Expect different diagnostics.\n+\t* g++.dg/cpp1y/constexpr-82304.C: New test.\n+\t* g++.dg/cpp0x/constexpr-95307.C: New test.\n+\n 2020-06-03  Mark Wielaard  <mark@klomp.org>\n \n \t* g++.dg/spellcheck-inttypes.C: Add string-literal testcases."}, {"sha": "b4e39d188f479103527991536ad24e288c0b7f05", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,12 @@\n+2020-06-04  Andreas Schwab  <schwab@suse.de>\n+\n+\tPR target/59230\n+\tPR libfortran/59227\n+\t* config/ia64/t-softfp-compat (softfp_file_list): Filter out\n+\tsoft-fp/divtf3.c.\n+\t(LIB2ADD): Add config/ia64/divtf3.c.\n+\t* config/ia64/divtf3.c: New file.\n+\n 2020-06-03  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/95480"}, {"sha": "75917f30afe16cc7acf56b783defb70b810acf8e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,97 @@\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n+\tEvaluate 'copyfrom' individually for each entry.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-1.c: Update.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n+\tEvaluate 'finalize' individually for each entry.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-1.c: New file.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-refcount-1.c: Remove\n+\tfile.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-7.c: Fix 'sizeof'\n+\tusage.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-8.c: Likewise.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_datum): Repair 'is_tgt_unmapped'\n+\tchecking.\n+\t(acc_unmap_data, goacc_exit_data_internal): Restore\n+\t'is_tgt_unmapped' checking.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-refcount-1.c: New\n+\tfile.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: Adjust.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-1.f90: Likewise.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (acc_unmap_data): Don't open-code 'gomp_remove_var'.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/92854\n+\t* oacc-mem.c (acc_unmap_data): Remove 'tgt' reference counting.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/92854\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92854-1.c: Extend some\n+\tmore.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_enter_datum): Use 'tgt' returned from\n+\t'gomp_map_vars'.\n+\t (acc_map_data): Clean up accordingly.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: XFAIL behavior\n+\tof over-eager 'finalize' clause.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6-no_finalize.F90: New\n+\tfile.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-2.F90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-2.f90: Likewise.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_data_internal): Unlock on error path.\n+\n+2020-06-04  Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (acc_attach_async): Add missing gomp_mutex_unlock on\n+\terror path.\n+\t(goacc_detach_internal): Likewise.\n+\n+2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/error_stop-1.f: Initialize before\n+\tthe checkpoint.\n+\t* testsuite/libgomp.oacc-fortran/error_stop-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/error_stop-3.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-1.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-3.f: Likewise.\n+\n 2020-06-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* allocator.c (omp_free): Fix up build if HAVE_SYNC_BUILTINS is not"}, {"sha": "ee252236a9f734728cc9cdae1651013671d0c851", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3add342502b9506b6f1a0f70c156a97a7b38ef4d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3add342502b9506b6f1a0f70c156a97a7b38ef4d", "patch": "@@ -1,3 +1,58 @@\n+2020-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (__detail::__ptr, __detail::__ref)\n+\t(__detail::__cat, __detail::__diff): Move to class scope in the\n+\trelevant __iterator_traits specializations.\n+\t(__iterator_traits<>): Use nested class templates instead of ones from\n+\tnamespace __detail.\n+\t* include/bits/stl_iterator.h (__detail::__common_iter_ptr): Move to\n+\tclass scope in iterator_traits<common_iterator<I, S>>.\n+\t(iterator_traits<common_iterator<I, S>>): Use nested class template\n+\tinstead of __detail::__common_iter_ptr.\n+\n+2020-06-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h (__copy_n_a): Move to ...\n+\t* include/bits/stl_algobase.h (__copy_n_a): ...here. Add __strict\n+\tparameter.\n+\t(__copy_n_a(istreambuf_iterator<>, _Size, _Deque_iterator<>, bool)):\n+\tDeclare.\n+\t(__niter_base(const _Safe_iterator<_Ite, _Seq,\n+\trandom_access_iterator_tag>&)): Declare.\n+\t(__copy_move_a2(istreambuf_iterator<>, istreambuf_iterator<>,\n+\t_Deque_iterator<>)): Declare.\n+\t* include/bits/deque.tcc\n+\t(__copy_move_a2(istreambuf_iterator<>, istreambuf_iterator<>,\n+\t_Deque_iterator<>)): New.\n+\t(__copy_n_a(istreambuf_iterator<>, _Size, _Deque_iterator<>, bool)):\n+\tNew.\n+\t* include/bits/streambuf_iterator.h\n+\t(__copy_n_a(istreambuf_iterator<>, _Size, _CharT*, bool)): Adapt.\n+\t* include/debug/safe_iterator.tcc (__niter_base): New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc\n+\t(test03): New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/debug/deque_neg.cc:\n+\tNew test.\n+\t* testsuite/25_algorithms/copy_n/debug/istreambuf_ite_deque_neg.cc:\n+\tNew test.\n+\t* testsuite/25_algorithms/copy_n/istreambuf_iterator/2.cc: New test.\n+\t* testsuite/25_algorithms/copy_n/istreambuf_iterator/deque.cc:\n+\tNew test.\n+\n+2020-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_algobase.h (__copy_n_fn): Only call\n+\tranges::copy for positive values.\n+\t* include/bits/stl_algo.h (copy_n): Convert Size argument to an\n+\tintegral type and only call __copy_n for positive values.\n+\t* testsuite/util/testsuite_iterators.h\n+\t(random_access_iterator_wrapper::operator+=): Fix range check for\n+\tnegative values.\n+\t(output_container, input_container, forward_container)\n+\t(bidirectional_container, random_access_container): New alias\n+\ttemplates.\n+\t* testsuite/25_algorithms/copy_n/5.cc: New test.\n+\n 2020-06-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90102"}]}