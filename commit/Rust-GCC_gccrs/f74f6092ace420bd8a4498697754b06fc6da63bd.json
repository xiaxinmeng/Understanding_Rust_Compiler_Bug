{"sha": "f74f6092ace420bd8a4498697754b06fc6da63bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0ZjYwOTJhY2U0MjBiZDhhNDQ5ODY5Nzc1NGIwNmZjNmRhNjNiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-07T07:13:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2020-01-07T07:13:50Z"}, "message": "re PR c++/91369 (Implement P0784R7: constexpr new)\n\n\tPR c++/91369\n\t* constexpr.c (struct constexpr_global_ctx): Add heap_alloc_count\n\tmember, initialize it to zero in ctor.\n\t(cxx_eval_call_expression): Bump heap_dealloc_count when deleting\n\ta heap object.  Don't cache calls to functions which allocate some\n\theap objects and don't deallocate them or deallocate some heap\n\tobjects they didn't allocate.\n\n\t* g++.dg/cpp1y/constexpr-new.C: Expect an error explaining why\n\tstatic_assert failed for C++2a.\n\t* g++.dg/cpp2a/constexpr-new9.C: New test.\n\nFrom-SVN: r279943", "tree": {"sha": "cca42358fa3b5c25e78f163588388996a048c043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cca42358fa3b5c25e78f163588388996a048c043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f74f6092ace420bd8a4498697754b06fc6da63bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74f6092ace420bd8a4498697754b06fc6da63bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74f6092ace420bd8a4498697754b06fc6da63bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74f6092ace420bd8a4498697754b06fc6da63bd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ac22177a085e0ba36c95e71cee8235cc8b12947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac22177a085e0ba36c95e71cee8235cc8b12947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac22177a085e0ba36c95e71cee8235cc8b12947"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "77c7b107c88c77ff4812c44e2eed19993520dd60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f74f6092ace420bd8a4498697754b06fc6da63bd", "patch": "@@ -1,3 +1,13 @@\n+2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91369\n+\t* constexpr.c (struct constexpr_global_ctx): Add heap_alloc_count\n+\tmember, initialize it to zero in ctor.\n+\t(cxx_eval_call_expression): Bump heap_dealloc_count when deleting\n+\ta heap object.  Don't cache calls to functions which allocate some\n+\theap objects and don't deallocate them or deallocate some heap\n+\tobjects they didn't allocate.\n+\n 2020-01-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92552 - ICE with inherited constrained default ctor."}, {"sha": "417af182a2a6dc68d50afe39bce50839f371645a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f74f6092ace420bd8a4498697754b06fc6da63bd", "patch": "@@ -1041,8 +1041,11 @@ struct constexpr_global_ctx {\n   auto_vec<tree, 16> heap_vars;\n   /* Cleanups that need to be evaluated at the end of CLEANUP_POINT_EXPR.  */\n   vec<tree> *cleanups;\n+  /* Number of heap VAR_DECL deallocations.  */\n+  unsigned heap_dealloc_count;\n   /* Constructor.  */\n-  constexpr_global_ctx () : constexpr_ops_count (0), cleanups (NULL) {}\n+  constexpr_global_ctx ()\n+    : constexpr_ops_count (0), cleanups (NULL), heap_dealloc_count (0) {}\n };\n \n /* The constexpr expansion context.  CALL is the current function\n@@ -2056,6 +2059,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t    {\n \t\t      DECL_NAME (var) = heap_deleted_identifier;\n \t\t      ctx->global->values.remove (var);\n+\t\t      ctx->global->heap_dealloc_count++;\n \t\t      return void_node;\n \t\t    }\n \t\t  else if (DECL_NAME (var) == heap_deleted_identifier)\n@@ -2281,6 +2285,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     }\n   else\n     {\n+      bool cacheable = true;\n       if (result && result != error_mark_node)\n \t/* OK */;\n       else if (!DECL_SAVED_TREE (fun))\n@@ -2346,6 +2351,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  auto_vec<tree, 10> save_exprs;\n \t  ctx_with_save_exprs.save_exprs = &save_exprs;\n \t  ctx_with_save_exprs.call = &new_call;\n+\t  unsigned save_heap_alloc_count = ctx->global->heap_vars.length ();\n+\t  unsigned save_heap_dealloc_count = ctx->global->heap_dealloc_count;\n \n \t  tree jump_target = NULL_TREE;\n \t  cxx_eval_constant_expression (&ctx_with_save_exprs, body,\n@@ -2417,6 +2424,33 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n \t  /* Make the unshared function copy we used available for re-use.  */\n \t  save_fundef_copy (fun, copy);\n+\n+\t  /* If the call allocated some heap object that hasn't been\n+\t     deallocated during the call, or if it deallocated some heap\n+\t     object it has not allocated, the call isn't really stateless\n+\t     for the constexpr evaluation and should not be cached.\n+\t     It is fine if the call allocates something and deallocates it\n+\t     too.  */\n+\t  if (entry\n+\t      && (save_heap_alloc_count != ctx->global->heap_vars.length ()\n+\t\t  || (save_heap_dealloc_count\n+\t\t      != ctx->global->heap_dealloc_count)))\n+\t    {\n+\t      tree heap_var;\n+\t      unsigned int i;\n+\t      if ((ctx->global->heap_vars.length ()\n+\t\t   - ctx->global->heap_dealloc_count)\n+\t\t  != save_heap_alloc_count - save_heap_dealloc_count)\n+\t\tcacheable = false;\n+\t      else\n+\t\tFOR_EACH_VEC_ELT_FROM (ctx->global->heap_vars, i, heap_var,\n+\t\t\t\t       save_heap_alloc_count)\n+\t\t  if (DECL_NAME (heap_var) != heap_deleted_identifier)\n+\t\t    {\n+\t\t      cacheable = false;\n+\t\t      break;\n+\t\t    }\n+\t    }\n \t}\n \n       if (result == error_mark_node)\n@@ -2426,7 +2460,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       else if (!result)\n \tresult = void_node;\n       if (entry)\n-\tentry->result = result;\n+\tentry->result = cacheable ? result : error_mark_node;\n     }\n \n   /* The result of a constexpr function must be completely initialized."}, {"sha": "517c851869a8f5c1c7ee67ea6f2033beb3e9de07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f74f6092ace420bd8a4498697754b06fc6da63bd", "patch": "@@ -1,3 +1,10 @@\n+2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91369\n+\t* g++.dg/cpp1y/constexpr-new.C: Expect an error explaining why\n+\tstatic_assert failed for C++2a.\n+\t* g++.dg/cpp2a/constexpr-new9.C: New test.\n+\n 2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/asrdiv_1.c: Remove trailing %s."}, {"sha": "6316ff24bbc2059187b397fa5b6dbee1788353b4", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-new.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C?ref=f74f6092ace420bd8a4498697754b06fc6da63bd", "patch": "@@ -5,7 +5,7 @@ constexpr int *f4(bool b) {\n     return nullptr;\n   } else {\n     return new int{42}; // { dg-error \"call to non-.constexpr.\" \"\" { target c++17_down } }\n-  }\n+  }\t\t\t// { dg-error \"is not a constant expression because allocated storage has not been deallocated\" \"\" { target c++2a } .-1 }\n }\n static_assert(f4(true) == nullptr, \"\");\n static_assert(f4(false) == nullptr, \"\"); // { dg-error \"non-.constant. condition|\" }"}, {"sha": "552d3c1b1cf4f5f71c06eb6d5e55e22ea941b213", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new9.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f6092ace420bd8a4498697754b06fc6da63bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C?ref=f74f6092ace420bd8a4498697754b06fc6da63bd", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91369\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  constexpr S (int *i) : i{i} {}\n+  constexpr ~S () { delete[] i; }\n+  int *i;\n+};\n+\n+constexpr S foo (int x) { return { new int[x] () }; }\n+constexpr bool bar () { foo (1); return true; }\n+constexpr bool baz () { foo (1); return false; }\n+\n+static_assert (bar ());\n+static_assert (!baz ());"}]}