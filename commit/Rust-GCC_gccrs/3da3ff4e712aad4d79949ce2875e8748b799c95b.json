{"sha": "3da3ff4e712aad4d79949ce2875e8748b799c95b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhM2ZmNGU3MTJhYWQ0ZDc5OTQ5Y2UyODc1ZTg3NDhiNzk5Yzk1Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-20T12:39:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-20T12:39:32Z"}, "message": "re PR tree-optimization/64715 (__builtin_object_size (..., 1) fails to locate subobject)\n\n2015-03-20  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/64715\n\t* tree-chrec.c (chrec_fold_poly_cst): Use useless_type_conversion_p\n\tfor type comparison and gcc_checking_assert.\n\t(chrec_fold_plus_poly_poly): Likewise.\n\t(chrec_fold_multiply_poly_poly): Likewise.\n\t(chrec_convert_1): Likewise.\n\t* gimplify.c (gimplify_expr): Remove premature folding of\n\t&X + CST to &MEM[&X, CST].\n\n\t* gcc.dg/pr15347.c: Use -O.\n\t* c-c++-common/pr19807-1.c: Likewise.\n\nFrom-SVN: r221532", "tree": {"sha": "149b988f26d1e4b2d318e3c64d83f270f9e11aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149b988f26d1e4b2d318e3c64d83f270f9e11aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3da3ff4e712aad4d79949ce2875e8748b799c95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da3ff4e712aad4d79949ce2875e8748b799c95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da3ff4e712aad4d79949ce2875e8748b799c95b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da3ff4e712aad4d79949ce2875e8748b799c95b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e039275b5781ba03565686eb723cb834919819a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e039275b5781ba03565686eb723cb834919819a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e039275b5781ba03565686eb723cb834919819a"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "37f56066ce8f52625f472618fa1596584da11492", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -1,3 +1,14 @@\n+2015-03-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64715\n+\t* tree-chrec.c (chrec_fold_poly_cst): Use useless_type_conversion_p\n+\tfor type comparison and gcc_checking_assert.\n+\t(chrec_fold_plus_poly_poly): Likewise.\n+\t(chrec_fold_multiply_poly_poly): Likewise.\n+\t(chrec_convert_1): Likewise.\n+\t* gimplify.c (gimplify_expr): Remove premature folding of\n+\t&X + CST to &MEM[&X, CST].\n+\n 2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (can_inline_edge_p): Short circuit if inline_failed"}, {"sha": "ff0a225c92c5fc3ff67317503ffaa0dd17312ff4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -8524,23 +8524,6 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t\tpost_p, is_gimple_val, fb_rvalue);\n \t    recalculate_side_effects (*expr_p);\n \t    ret = MIN (r0, r1);\n-\t    /* Convert &X + CST to invariant &MEM[&X, CST].  Do this\n-\t       after gimplifying operands - this is similar to how\n-\t       it would be folding all gimplified stmts on creation\n-\t       to have them canonicalized, which is what we eventually\n-\t       should do anyway.  */\n-\t    if (TREE_CODE (TREE_OPERAND (*expr_p, 1)) == INTEGER_CST\n-\t\t&& is_gimple_min_invariant (TREE_OPERAND (*expr_p, 0)))\n-\t      {\n-\t\t*expr_p = build_fold_addr_expr_with_type_loc\n-\t\t   (input_location,\n-\t\t    fold_build2 (MEM_REF, TREE_TYPE (TREE_TYPE (*expr_p)),\n-\t\t\t\t TREE_OPERAND (*expr_p, 0),\n-\t\t\t\t fold_convert (ptr_type_node,\n-\t\t\t\t\t       TREE_OPERAND (*expr_p, 1))),\n-\t\t    TREE_TYPE (*expr_p));\n-\t\tret = MIN (ret, GS_OK);\n-\t      }\n \t    break;\n \t  }\n "}, {"sha": "884fb62745911c5b51370e422adde1aad8431ea4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -1,3 +1,9 @@\n+2015-03-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64715\n+\t* gcc.dg/pr15347.c: Use -O.\n+\t* c-c++-common/pr19807-1.c: Likewise.\n+\n 2015-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/volatile13.ad[sb]: New test."}, {"sha": "9dc685d6fbfe23180fe173784c02eef6aaa0ccad", "filename": "gcc/testsuite/c-c++-common/pr19807-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr19807-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr19807-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr19807-1.c?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do link } */\n+/* { dg-options \"-O\" } */\n \n extern void link_error(void);\n int main()"}, {"sha": "a75267f7e4b69ae3935540a81c6bbcb964995a86", "filename": "gcc/testsuite/gcc.dg/pr15347.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15347.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15347.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15347.c?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do link } */\n+/* { dg-options \"-O\" } */\n \n extern void link_error (void);\n int"}, {"sha": "b599c2c3e5e40f75ab0d1e790abe129aa7aa52a2", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da3ff4e712aad4d79949ce2875e8748b799c95b/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=3da3ff4e712aad4d79949ce2875e8748b799c95b", "patch": "@@ -78,8 +78,8 @@ chrec_fold_poly_cst (enum tree_code code,\n   gcc_assert (poly);\n   gcc_assert (cst);\n   gcc_assert (TREE_CODE (poly) == POLYNOMIAL_CHREC);\n-  gcc_assert (!is_not_constant_evolution (cst));\n-  gcc_assert (type == chrec_type (poly));\n+  gcc_checking_assert (!is_not_constant_evolution (cst));\n+  gcc_checking_assert (useless_type_conversion_p (type, chrec_type (poly)));\n \n   switch (code)\n     {\n@@ -124,10 +124,11 @@ chrec_fold_plus_poly_poly (enum tree_code code,\n   gcc_assert (TREE_CODE (poly0) == POLYNOMIAL_CHREC);\n   gcc_assert (TREE_CODE (poly1) == POLYNOMIAL_CHREC);\n   if (POINTER_TYPE_P (chrec_type (poly0)))\n-    gcc_assert (ptrofftype_p (chrec_type (poly1)));\n+    gcc_checking_assert (ptrofftype_p (chrec_type (poly1))\n+\t\t\t && useless_type_conversion_p (type, chrec_type (poly0)));\n   else\n-    gcc_assert (chrec_type (poly0) == chrec_type (poly1));\n-  gcc_assert (type == chrec_type (poly0));\n+    gcc_checking_assert (useless_type_conversion_p (type, chrec_type (poly0))\n+\t\t\t && useless_type_conversion_p (type, chrec_type (poly1)));\n \n   /*\n     {a, +, b}_1 + {c, +, d}_2  ->  {{a, +, b}_1 + c, +, d}_2,\n@@ -208,8 +209,8 @@ chrec_fold_multiply_poly_poly (tree type,\n   gcc_assert (poly1);\n   gcc_assert (TREE_CODE (poly0) == POLYNOMIAL_CHREC);\n   gcc_assert (TREE_CODE (poly1) == POLYNOMIAL_CHREC);\n-  gcc_assert (chrec_type (poly0) == chrec_type (poly1));\n-  gcc_assert (type == chrec_type (poly0));\n+  gcc_checking_assert (useless_type_conversion_p (type, chrec_type (poly0))\n+\t\t       && useless_type_conversion_p (type, chrec_type (poly1)));\n \n   /* {a, +, b}_1 * {c, +, d}_2  ->  {c*{a, +, b}_1, +, d}_2,\n      {a, +, b}_2 * {c, +, d}_1  ->  {a*{c, +, d}_1, +, b}_2,\n@@ -1352,7 +1353,7 @@ chrec_convert_1 (tree type, tree chrec, gimple at_stmt,\n     return chrec;\n \n   ct = chrec_type (chrec);\n-  if (ct == type)\n+  if (useless_type_conversion_p (type, ct))\n     return chrec;\n \n   if (!evolution_function_is_affine_p (chrec))"}]}