{"sha": "50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiNTg3NzkyNWVmNWFlOGU5ZjkxM2Q2ZDJiNWNlMDIwNGViYzU4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-10T10:38:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-10T10:38:00Z"}, "message": "i386: Allow some V32HImode and V64QImode permutations even without AVX512BW [PR80355]\n\nWhen working on the PR, I've noticed we generate terrible code for\nV32HImode or V64QImode permutations for -mavx512f -mno-avx512bw.\nGenerally we can't do much with such permutations, but since PR68655\nwe can handle at least some, those expressible using V16SImode or V8DImode\npermutations, but that wasn't reachable, because ix86_vectorize_vec_perm_const\ndidn't even try, it said without TARGET_AVX512BW it can't do anything, and\nwith it can do everything, no d.testing_p attempts.\n\nThis patch makes it try it for TARGET_AVX512F && !TARGET_AVX512BW.\n\nThe first hunk is to avoid ICE, expand_vec_perm_even_odd_1 asserts d->vmode\nisn't V32HImode because expand_vec_perm_1 for AVX512BW handles already\nall permutations, but when we let it through without !TARGET_AVX512BW,\nexpand_vec_perm_1 doesn't handle it.\n\nIf we want, that hunk can be dropped if we implement in\nexpand_vec_perm_even_odd_1 and its helper the even permutation as\nvpmovdw + vpmovdw + vinserti64x4 and odd permutation as\nvpsrld $16 + vpsrld $16 + vpmovdw + vpmovdw + vinserti64x4.\n\n2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/80355\n\t* config/i386/i386-expand.c (expand_vec_perm_even_odd): Return false\n\tfor V32HImode if !TARGET_AVX512BW.\n\t(ix86_vectorize_vec_perm_const) <case E_V32HImode, case E_V64QImode>:\n\tIf !TARGET_AVX512BW and TARGET_AVX512F and d.testing_p, don't fail\n\tearly, but actually check the permutation.\n\n\t* gcc.target/i386/avx512f-pr80355-2.c: New test.", "tree": {"sha": "585409f12939f0216c515a7274967044f6e48e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585409f12939f0216c515a7274967044f6e48e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08aa0e3d4f781fd6a6e293bb06d280365a0bdc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08aa0e3d4f781fd6a6e293bb06d280365a0bdc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08aa0e3d4f781fd6a6e293bb06d280365a0bdc1d"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "c708b33b78674b18362b6e1c723cee30f09a83b7", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "patch": "@@ -20337,6 +20337,11 @@ expand_vec_perm_even_odd (struct expand_vec_perm_d *d)\n     if (d->perm[i] != 2 * i + odd)\n       return false;\n \n+  if (d->vmode == E_V32HImode\n+      && d->testing_p\n+      && !TARGET_AVX512BW)\n+    return false;\n+\n   return expand_vec_perm_even_odd_1 (d, odd);\n }\n \n@@ -20877,16 +20882,16 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n \treturn true;\n       break;\n     case E_V32HImode:\n-      if (!TARGET_AVX512BW)\n+      if (!TARGET_AVX512F)\n \treturn false;\n-      if (d.testing_p)\n+      if (d.testing_p && TARGET_AVX512BW)\n \t/* All implementable with a single vperm[it]2 insn.  */\n \treturn true;\n       break;\n     case E_V64QImode:\n-      if (!TARGET_AVX512BW)\n+      if (!TARGET_AVX512F)\n \treturn false;\n-      if (d.testing_p)\n+      if (d.testing_p && TARGET_AVX512BW)\n \t/* Implementable with 2 vperm[it]2, 2 vpshufb and 1 or insn.  */\n \treturn true;\n       break;"}, {"sha": "c510b2f17697b52c413f502b4e37030f92ab4127", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr80355-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b5877925ef5ae8e9f913d6d2b5ce0204ebc588/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-2.c?ref=50b5877925ef5ae8e9f913d6d2b5ce0204ebc588", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/80355 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512vl -mno-avx512dq -mno-avx512bw\" } */\n+/* { dg-final { scan-assembler-times \"\\tvshufi(?:32x4|64x2)\\t\" 2 } } */\n+\n+typedef short V __attribute__((vector_size (64)));\n+typedef char W __attribute__((vector_size (64)));\n+\n+W\n+f0 (W x)\n+{\n+  return __builtin_shuffle (x, (W) { 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n+\t\t\t\t     48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n+\t\t\t\t     0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+\t\t\t\t     17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 });\n+}\n+\n+V\n+f1 (V x)\n+{\n+  return __builtin_shuffle (x, (V) { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n+\t\t\t\t     0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 });\n+}"}]}