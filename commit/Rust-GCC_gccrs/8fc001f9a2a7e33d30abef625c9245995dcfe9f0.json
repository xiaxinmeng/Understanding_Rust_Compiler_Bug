{"sha": "8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjMDAxZjlhMmE3ZTMzZDMwYWJlZjYyNWM5MjQ1OTk1ZGNmZTlmMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-08-20T18:45:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-20T18:45:48Z"}, "message": "jump.c (rtx_renumbered_equal_p): Do not consider PLUS commutative.\n\n        * jump.c (rtx_renumbered_equal_p): Do not consider PLUS commutative.\nBecause it isn't inside a MEM on the PA.  Fixes 930628-1.c on the mainline\nbranch.\n\nFrom-SVN: r21886", "tree": {"sha": "8cae2b477317a966b90608c23007462fc9862e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cae2b477317a966b90608c23007462fc9862e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc001f9a2a7e33d30abef625c9245995dcfe9f0/comments", "author": null, "committer": null, "parents": [{"sha": "5e3848f5e307afb2fe6b5cc6392e582eae64b364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3848f5e307afb2fe6b5cc6392e582eae64b364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3848f5e307afb2fe6b5cc6392e582eae64b364"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "5b659e31b7fb8f123cc127cbdf3cbfb762d7696a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc001f9a2a7e33d30abef625c9245995dcfe9f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc001f9a2a7e33d30abef625c9245995dcfe9f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "patch": "@@ -1,3 +1,7 @@\n+Thu Aug 20 19:43:44 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* jump.c (rtx_renumbered_equal_p): Do not consider PLUS commutative.\n+\n Thu Aug 20 17:35:20 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* config/sparc/sparc.md (movtf_insn_sp32): All memory operands"}, {"sha": "befd707107752e76c79a63a137065258f878eda6", "filename": "gcc/jump.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc001f9a2a7e33d30abef625c9245995dcfe9f0/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc001f9a2a7e33d30abef625c9245995dcfe9f0/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8fc001f9a2a7e33d30abef625c9245995dcfe9f0", "patch": "@@ -4234,7 +4234,15 @@ delete_labelref_insn (insn, label, delete_this)\n /* Like rtx_equal_p except that it considers two REGs as equal\n    if they renumber to the same value and considers two commutative\n    operations to be the same if the order of the operands has been\n-   reversed.  */\n+   reversed.\n+\n+   ??? Addition is not commutative on the PA due to the weird implicit\n+   space register selection rules for memory addresses.  Therefore, we\n+   don't consider a + b == b + a.\n+\n+   We could/should make this test a little tighter.  Possibly only\n+   disabling it on the PA via some backend macro or only disabling this\n+   case when the PLUS is inside a MEM.  */\n \n int\n rtx_renumbered_equal_p (x, y)\n@@ -4342,8 +4350,11 @@ rtx_renumbered_equal_p (x, y)\n     return 0;\n \n   /* For commutative operations, the RTX match if the operand match in any\n-     order.  Also handle the simple binary and unary cases without a loop.  */\n-  if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+     order.  Also handle the simple binary and unary cases without a loop.\n+\n+     ??? Don't consider PLUS a commutative operator; see comments above.  */\n+  if ((code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+      && code != PLUS)\n     return ((rtx_renumbered_equal_p (XEXP (x, 0), XEXP (y, 0))\n \t     && rtx_renumbered_equal_p (XEXP (x, 1), XEXP (y, 1)))\n \t    || (rtx_renumbered_equal_p (XEXP (x, 0), XEXP (y, 1))"}]}