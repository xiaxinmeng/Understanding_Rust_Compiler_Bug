{"sha": "fd84ba84a7a765e06352a4637f9adba55a343b2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4NGJhODRhN2E3NjVlMDYzNTJhNDYzN2Y5YWRiYTU1YTM0M2IyZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-02T17:54:24Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-02T17:54:24Z"}, "message": "re PR bootstrap/6525 (libjava won't build on Red Hat Linux 6.2/sparc)\n\n2002-05-02  David S. Miller  <davem@redhat.com>\n\n\tPR bootstrap/6525\n\t* include/dwarf2-signal.h (INIT_SEGV, INIT_FPE): Don't use\n\t__libc_sigaction on Sparc.\n\nFrom-SVN: r53055", "tree": {"sha": "6683db6eb0c740b683fcbfbbd4357eaf26089098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6683db6eb0c740b683fcbfbbd4357eaf26089098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd84ba84a7a765e06352a4637f9adba55a343b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd84ba84a7a765e06352a4637f9adba55a343b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd84ba84a7a765e06352a4637f9adba55a343b2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd84ba84a7a765e06352a4637f9adba55a343b2e/comments", "author": null, "committer": null, "parents": [{"sha": "1b6763cfb592988efc9ee945479d35ca657bbf4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6763cfb592988efc9ee945479d35ca657bbf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6763cfb592988efc9ee945479d35ca657bbf4e"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "4cda57b78f500367e41cab34e6e51bb861145bb9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd84ba84a7a765e06352a4637f9adba55a343b2e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd84ba84a7a765e06352a4637f9adba55a343b2e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fd84ba84a7a765e06352a4637f9adba55a343b2e", "patch": "@@ -1,3 +1,9 @@\n+2002-05-02  David S. Miller  <davem@redhat.com>\n+\n+\tPR bootstrap/6525\n+\t* include/dwarf2-signal.h (INIT_SEGV, INIT_FPE): Don't use\n+\t__libc_sigaction on Sparc.\n+\n 2002-05-02  Jerome Marc  <marcjero@yahoo.com>\n \n \t* java/net/natPlainSocketImpl.cc: Include sys/ioctl.h and"}, {"sha": "21decd5c6682eafdd31946434edcee6f7ab237e3", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd84ba84a7a765e06352a4637f9adba55a343b2e/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd84ba84a7a765e06352a4637f9adba55a343b2e/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=fd84ba84a7a765e06352a4637f9adba55a343b2e", "patch": "@@ -122,7 +122,93 @@ do\t\t\t\t\t\t\\\n while (0)\n #endif\n \n-#if !(defined(__ia64__) || defined(__sparc__))\n+#if defined(__sparc__)\n+#if defined(__arch64__)\n+extern \"C\" {\n+    static void __rt_sigreturn_stub(void)\n+    {\n+      __asm__(\"mov %0, %%g1\\n\\t\"\n+\t      \"ta  0x6d\\n\\t\"\n+\t      : /* no outputs */\n+\t      : \"i\" (__NR_rt_sigreturn));\n+    }\n+    struct kernel_sigaction\n+    {\n+      void (*k_sa_sigaction)(int,siginfo_t *,void *);\n+      unsigned long k_sa_flags;\n+      void (*k_sa_restorer)(void);\n+      sigset_t k_sa_mask;\n+    };\n+}\n+#define INIT_SEGV\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    nullp = new java::lang::NullPointerException ();    \t\\\n+    struct kernel_sigaction act;\t\t\t\t\\\n+    unsigned long stub = ((unsigned long)&__rt_sigreturn_stub); \\\n+    act.k_sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n+    sigemptyset (&act.k_sa_mask);\t\t\t\t\\\n+    act.k_sa_flags = SA_SIGINFO;\t       \t\t\t\\\n+    act.k_sa_restorer = NULL;\t\t\t\t\t\\\n+    syscall (SYS_rt_sigaction, SIGSEGV, &act, NULL,\t\t\\\n+             stub - 8, _NSIG / 8);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#define INIT_FPE\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n+    struct kernel_sigaction act;\t\t\t\t\\\n+    unsigned long stub = ((unsigned long)&__rt_sigreturn_stub); \\\n+    act.k_sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n+    sigemptyset (&act.k_sa_mask);\t\t\t\t\\\n+    act.k_sa_flags = SA_SIGINFO;\t\t       \t\t\\\n+    act.k_sa_restorer = NULL;\t\t\t\t\t\\\n+    syscall (SYS_rt_sigaction, SIGFPE, &act, NULL,\t\t\\\n+             stub - 8, _NSIG / 8);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+#else /* __arch64__ */\n+\n+extern \"C\" {\n+    struct kernel_sigaction\n+    {\n+      void (*k_sa_sigaction)(int,siginfo_t *,void *);\n+      unsigned long k_sa_mask, k_sa_flags;\n+      void (*k_sa_restorer)(void);\n+    };\n+}\n+\n+#define INIT_SEGV\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    struct kernel_sigaction act;\t\t\t\t\\\n+    nullp = new java::lang::NullPointerException ();    \t\\\n+    act.k_sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n+    act.k_sa_mask = 0;\t\t\t\t\t\t\\\n+    act.k_sa_flags = SA_SIGINFO;\t       \t\t\t\\\n+    act.k_sa_restorer = NULL;\t\t\t\t\t\\\n+    syscall (SYS_sigaction, -SIGSEGV, &act, NULL);\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#define INIT_FPE\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n+    struct kernel_sigaction act;\t\t\t\t\\\n+    act.k_sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n+    act.k_sa_mask = 0;\t\t\t\t\t\t\\\n+    act.k_sa_flags = SA_SIGINFO;\t\t       \t\t\\\n+    act.k_sa_restorer = NULL;\t\t\t\t\t\\\n+    syscall (SYS_sigaction, -SIGFPE, &act, NULL);\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+#endif\n+#elif !defined(__ia64__)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n@@ -155,7 +241,7 @@ while (0)\n  * go away once all systems have pthreads libraries that are\n  * compiled with full unwind info.  */\n \n-#else  /* __ia64__ || __sparc__ */\n+#else  /* __ia64__ */\n \n // FIXME: We shouldn't be using libc_sigaction here, since it should\n // be glibc private.  But using syscall here would mean translating to"}]}