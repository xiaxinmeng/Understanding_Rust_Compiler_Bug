{"sha": "d26e1ec86f1dbee829619c235bafcd7143b65c07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2ZTFlYzg2ZjFkYmVlODI5NjE5YzIzNWJhZmNkNzE0M2I2NWMwNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-03T17:35:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-03T17:35:55Z"}, "message": "hashtable (node_iterator::node_iterator(const node_iterator<,true,>&)): Fix to take a \"false\" (i.e., is_const == false) node_iterator.\n\n2005-10-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/hashtable\n\t(node_iterator::node_iterator(const node_iterator<,true,>&)): Fix to\n\ttake a \"false\" (i.e., is_const == false) node_iterator.\n\t(hashtable_iterator::hashtable_iterator(const hashtable_iterator<,\n\ttrue,>&)): Likewise for hashtable_iterator.\n\t(hashtable::const_local_iterator): Fix typedef (is_const == true).\n\t(hashtable::const_iterator): Likewise.\n\t* testsuite/tr1/6_containers/unordered/types/map_iterator.cc: New.\n\t* testsuite/tr1/6_containers/unordered/types/multimap_iterator.cc: New.\n\t* testsuite/tr1/6_containers/unordered/types/set_iterator.cc: New.\n\t* testsuite/tr1/6_containers/unordered/types/multiset_iterator.cc: New.\n\nFrom-SVN: r104900", "tree": {"sha": "9f3a1151182d612584b09d30629842b73aab7d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3a1151182d612584b09d30629842b73aab7d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26e1ec86f1dbee829619c235bafcd7143b65c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26e1ec86f1dbee829619c235bafcd7143b65c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26e1ec86f1dbee829619c235bafcd7143b65c07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26e1ec86f1dbee829619c235bafcd7143b65c07/comments", "author": null, "committer": null, "parents": [{"sha": "9f1dfd16185a63d0586963d8d014385c05c087fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1dfd16185a63d0586963d8d014385c05c087fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1dfd16185a63d0586963d8d014385c05c087fc"}], "stats": {"total": 210, "additions": 206, "deletions": 4}, "files": [{"sha": "1d0fc12d4b4e5f2fe4fc358a3d9fdd1f6d141e0f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -1,3 +1,17 @@\n+2005-10-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/hashtable\n+\t(node_iterator::node_iterator(const node_iterator<,true,>&)): Fix to\n+\ttake a \"false\" (i.e., is_const == false) node_iterator.\n+\t(hashtable_iterator::hashtable_iterator(const hashtable_iterator<,\n+\ttrue,>&)): Likewise for hashtable_iterator.\n+\t(hashtable::const_local_iterator): Fix typedef (is_const == true).\n+\t(hashtable::const_iterator): Likewise.\n+\t* testsuite/tr1/6_containers/unordered/types/map_iterator.cc: New.\n+\t* testsuite/tr1/6_containers/unordered/types/multimap_iterator.cc: New.\n+\t* testsuite/tr1/6_containers/unordered/types/set_iterator.cc: New.\n+\t* testsuite/tr1/6_containers/unordered/types/multiset_iterator.cc: New.\n+ \n 2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24054"}, {"sha": "240c471b520832dbee2842f68c973f46a6aca915", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -171,7 +171,7 @@ namespace Internal\n       node_iterator(hash_node<Value, cache>* p = 0)\n       : node_iterator_base<Value, cache>(p) { }\n \n-      node_iterator(const node_iterator<Value, true, cache>& x)\n+      node_iterator(const node_iterator<Value, false, cache>& x)\n       : node_iterator_base<Value, cache>(x.m_cur) { }\n \n       reference\n@@ -266,7 +266,7 @@ namespace Internal\n       hashtable_iterator(hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(*b, b) { }\n   \n-      hashtable_iterator(const hashtable_iterator<Value, true, cache>& x)\n+      hashtable_iterator(const hashtable_iterator<Value, false, cache>& x)\n       : hashtable_iterator_base<Value, cache>(x.m_cur_node, x.m_cur_bucket) { }\n \n       reference\n@@ -890,13 +890,13 @@ namespace tr1\n       typedef Internal::node_iterator<value_type, !mutable_iterators,\n \t\t\t\t      cache_hash_code>\n         local_iterator;\n-      typedef Internal::node_iterator<value_type, false, cache_hash_code>\n+      typedef Internal::node_iterator<value_type, true, cache_hash_code>\n         const_local_iterator;\n \n       typedef Internal::hashtable_iterator<value_type, !mutable_iterators,\n \t\t\t\t\t   cache_hash_code>\n         iterator;\n-      typedef Internal::hashtable_iterator<value_type, false, cache_hash_code>\n+      typedef Internal::hashtable_iterator<value_type, true, cache_hash_code>\n         const_iterator;\n \n     private:"}, {"sha": "da644048f1ba641a134632751ab64a1d811c620e", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/types/map_iterator.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmap_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmap_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmap_iterator.cc?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -0,0 +1,49 @@\n+// 2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <tr1/unordered_map>\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_map<int, int> Map;\n+\n+  Map m;\n+\n+  Map::const_iterator cit = m.begin();\n+  (*cit).second = 0; // { dg-error \"read-only\" }\n+\n+  Map::const_local_iterator clit = m.begin(0);\n+  (*clit).second = 0; // { dg-error \"read-only\" }\n+\n+  Map::iterator it = cit; // { dg-error \"conversion\" }\n+\n+  Map::local_iterator lit = clit; // { dg-error \"conversion\" }\n+}"}, {"sha": "a3d705ae81ba17ea6e18cd2384fd6d732ee76460", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/types/multimap_iterator.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultimap_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultimap_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultimap_iterator.cc?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -0,0 +1,49 @@\n+// 2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <tr1/unordered_map>\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multimap<int, int> Mmap;\n+\n+  Mmap mm;\n+\n+  Mmap::const_iterator cit = mm.begin();\n+  (*cit).second = 0; // { dg-error \"read-only\" }\n+\n+  Mmap::const_local_iterator clit = mm.begin(0);\n+  (*clit).second = 0; // { dg-error \"read-only\" }\n+\n+  Mmap::iterator it = cit; // { dg-error \"conversion\" }\n+\n+  Mmap::local_iterator lit = clit; // { dg-error \"conversion\" }  \n+}"}, {"sha": "3b3161a000173864da7caa2cdf5fc19a6b3e318e", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/types/multiset_iterator.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultiset_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultiset_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fmultiset_iterator.cc?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -0,0 +1,45 @@\n+// 2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <tr1/unordered_set>\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multiset<int> Mset;\n+\n+  Mset ms;\n+\n+  Mset::const_iterator cit = ms.begin();\n+  *cit = 0; // { dg-error \"read-only\" }\n+\n+  Mset::const_local_iterator clit = ms.begin(0);\n+  *clit = 0; // { dg-error \"read-only\" }\n+}"}, {"sha": "40dc9c8ce3119ff6fd0cebd9e46a28bc81dd1600", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/types/set_iterator.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fset_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e1ec86f1dbee829619c235bafcd7143b65c07/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fset_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ftypes%2Fset_iterator.cc?ref=d26e1ec86f1dbee829619c235bafcd7143b65c07", "patch": "@@ -0,0 +1,45 @@\n+// 2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <tr1/unordered_set>\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_set<int> Set;\n+\n+  Set s;\n+\n+  Set::const_iterator cit = s.begin();\n+  *cit = 0; // { dg-error \"read-only\" }\n+\n+  Set::const_local_iterator clit = s.begin(0);\n+  *clit = 0; // { dg-error \"read-only\" }\n+}"}]}