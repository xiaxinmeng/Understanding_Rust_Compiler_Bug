{"sha": "b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3NmZlY2JjMjQwMzgwYjI1YmIyNWM2NWFhZTg1YzRiNWVhOWNlNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-29T14:23:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-29T14:23:21Z"}, "message": "re PR target/88234 (UBsan and runtime error: signed integer overflow using unsigned vector)\n\n\tPR target/88234\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): For\n\tvec_add and vec_sub builtins, perform PLUS_EXPR or MINUS_EXPR\n\tin unsigned_type_for instead of vector integral type where overflow\n\tdoesn't wrap.\n\n\t* gcc.dg/ubsan/pr88234.c: New test.\n\nFrom-SVN: r266619", "tree": {"sha": "9c95b0ce844161a5d2b42f74d6c575c8b751b76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c95b0ce844161a5d2b42f74d6c575c8b751b76a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55da34ebc20f2515c06e46612545f940eb2d0fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55da34ebc20f2515c06e46612545f940eb2d0fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55da34ebc20f2515c06e46612545f940eb2d0fb0"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "5fe36e07b9cd6707091c749c17de9ea01e6ff115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "patch": "@@ -1,3 +1,11 @@\n+2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88234\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): For\n+\tvec_add and vec_sub builtins, perform PLUS_EXPR or MINUS_EXPR\n+\tin unsigned_type_for instead of vector integral type where overflow\n+\tdoesn't wrap.\n+\n 2018-11-29  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n \n \tThere can be at most one .resolver clone per function"}, {"sha": "b2fb5c898b387b3b7ba8ad5feff1fc2e59f0fa82", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "patch": "@@ -15371,6 +15371,7 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   enum rs6000_builtins fn_code\n     = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, lhs, temp;\n+  enum tree_code bcode;\n   gimple *g;\n \n   size_t uns_fncode = (size_t) fn_code;\n@@ -15409,10 +15410,32 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case P8V_BUILTIN_VADDUDM:\n     case ALTIVEC_BUILTIN_VADDFP:\n     case VSX_BUILTIN_XVADDDP:\n+      bcode = PLUS_EXPR;\n+    do_binary:\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n       lhs = gimple_call_lhs (stmt);\n-      g = gimple_build_assign (lhs, PLUS_EXPR, arg0, arg1);\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (lhs)))\n+\t  && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (TREE_TYPE (lhs))))\n+\t{\n+\t  /* Ensure the binary operation is performed in a type\n+\t     that wraps if it is integral type.  */\n+\t  gimple_seq stmts = NULL;\n+\t  tree type = unsigned_type_for (TREE_TYPE (lhs));\n+\t  tree uarg0 = gimple_build (&stmts, VIEW_CONVERT_EXPR,\n+\t\t\t\t     type, arg0);\n+\t  tree uarg1 = gimple_build (&stmts, VIEW_CONVERT_EXPR,\n+\t\t\t\t     type, arg1);\n+\t  tree res = gimple_build (&stmts, gimple_location (stmt), bcode,\n+\t\t\t\t   type, uarg0, uarg1);\n+\t  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t  g = gimple_build_assign (lhs, VIEW_CONVERT_EXPR,\n+\t\t\t\t   build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t   TREE_TYPE (lhs), res));\n+\t  gsi_replace (gsi, g, true);\n+\t  return true;\n+\t}\n+      g = gimple_build_assign (lhs, bcode, arg0, arg1);\n       gimple_set_location (g, gimple_location (stmt));\n       gsi_replace (gsi, g, true);\n       return true;\n@@ -15424,13 +15447,8 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case P8V_BUILTIN_VSUBUDM:\n     case ALTIVEC_BUILTIN_VSUBFP:\n     case VSX_BUILTIN_XVSUBDP:\n-      arg0 = gimple_call_arg (stmt, 0);\n-      arg1 = gimple_call_arg (stmt, 1);\n-      lhs = gimple_call_lhs (stmt);\n-      g = gimple_build_assign (lhs, MINUS_EXPR, arg0, arg1);\n-      gimple_set_location (g, gimple_location (stmt));\n-      gsi_replace (gsi, g, true);\n-      return true;\n+      bcode = MINUS_EXPR;\n+      goto do_binary;\n     case VSX_BUILTIN_XVMULSP:\n     case VSX_BUILTIN_XVMULDP:\n       arg0 = gimple_call_arg (stmt, 0);"}, {"sha": "0e908be06d14cd8edd301d01fd9139c11e71995f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "patch": "@@ -1,3 +1,8 @@\n+2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88234\n+\t* gcc.dg/ubsan/pr88234.c: New test.\n+\n 2018-11-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88243"}, {"sha": "2983cd88aa07df4cfed8377ca1a33d27a89eac33", "filename": "gcc/testsuite/gcc.dg/ubsan/pr88234.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr88234.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b076fecbc240380b25bb25c65aae85c4b5ea9ce5/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr88234.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr88234.c?ref=b076fecbc240380b25bb25c65aae85c4b5ea9ce5", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/88234 */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover=signed-integer-overflow -O2 -maltivec\" } */\n+\n+#include <altivec.h>\n+\n+__attribute__((noipa)) vector unsigned int\n+f1 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+__attribute__((noipa)) vector unsigned int\n+f2 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  vector unsigned int x = { __INT_MAX__, -__INT_MAX__, __INT_MAX__ - 3, -__INT_MAX__ + 4 };\n+  vector unsigned int y = { 1, -1, 4, -5 };\n+  vector unsigned int z = f1 (x, y);\n+  f2 (z, x);\n+  f2 (z, y);\n+  return 0;\n+}"}]}