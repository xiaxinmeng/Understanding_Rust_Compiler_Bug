{"sha": "6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "node_id": "C_kwDOANBUbNoAKDY5MTBjYWQ1NWZmYzMzMGRjOTc2N2QyYzhlMGI2NmNjZmE0MTM0YWY", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-08-18T07:28:10Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-08-18T11:38:05Z"}, "message": "x86: Support vector __bf16 type\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.cc (ix86_expand_sse_movcc): Handle vector\n\tBFmode.\n\t(ix86_expand_vector_init_duplicate): Support vector BFmode.\n\t(ix86_expand_vector_init_one_nonzero): Ditto.\n\t(ix86_expand_vector_init_one_var): Ditto.\n\t(ix86_expand_vector_init_concat): Ditto.\n\t(ix86_expand_vector_init_interleave): Ditto.\n\t(ix86_expand_vector_init_general): Ditto.\n\t(ix86_expand_vector_init): Ditto.\n\t(ix86_expand_vector_set_var): Ditto.\n\t(ix86_expand_vector_set): Ditto.\n\t(ix86_expand_vector_extract): Ditto.\n\t* config/i386/i386.cc (classify_argument): Add BF vector modes.\n\t(function_arg_64): Ditto.\n\t(ix86_gimplify_va_arg): Ditto.\n\t(ix86_get_ssemov): Ditto.\n\t* config/i386/i386.h (VALID_AVX256_REG_MODE): Add BF vector modes.\n\t(VALID_AVX512F_REG_MODE): Ditto.\n\t(host_detect_local_cpu): Ditto.\n\t(VALID_SSE2_REG_MODE): Ditto.\n\t* config/i386/i386.md: Add BF vector modes.\n\t(MODE_SIZE): Ditto.\n\t(ssemodesuffix): Add bf suffix for BF vector modes.\n\t(ssevecmode): Ditto.\n\t* config/i386/sse.md (VMOVE): Adjust for BF vector modes.\n\t(VI12HFBF_AVX512VL): Ditto.\n\t(V_256_512): Ditto.\n\t(VF_AVX512HFBF16): Ditto.\n\t(VF_AVX512BWHFBF16): Ditto.\n\t(VIHFBF): Ditto.\n\t(avx512): Ditto.\n\t(VIHFBF_256): Ditto.\n\t(VIHFBF_AVX512BW): Ditto.\n\t(VI2F_256_512):Ditto.\n\t(V8_128):Ditto.\n\t(V16_256): Ditto.\n\t(V32_512): Ditto.\n\t(sseinsnmode): Ditto.\n\t(sseconstm1): Ditto.\n\t(sseintmodesuffix): New mode_attr.\n\t(avx512fmaskmode): Ditto.\n\t(avx512fmaskmodelower): Ditto.\n\t(ssedoublevecmode): Ditto.\n\t(ssehalfvecmode): Ditto.\n\t(ssehalfvecmodelower): Ditto.\n\t(ssescalarmode): Add vector BFmode mapping.\n\t(ssescalarmodelower): Ditto.\n\t(ssexmmmode): Ditto.\n\t(ternlogsuffix): Ditto.\n\t(ssescalarsize): Ditto.\n\t(sseintprefix): Ditto.\n\t(i128): Ditto.\n\t(xtg_mode): Ditto.\n\t(bcstscalarsuff): Ditto.\n\t(<avx512>_blendm<mode>): New define_insn for BFmode.\n\t(<avx512>_store<mode>_mask): Ditto.\n\t(vcond_mask_<mode><avx512fmaskmodelower>): Ditto.\n\t(vec_set<mode>_0): New define_insn for BF vector set.\n\t(V8BFH_128): New mode_iterator for BFmode.\n\t(avx512fp16_mov<mode>): Ditto.\n\t(vec_set<mode>): New define_insn for BF vector set.\n\t(@vec_extract_hi_<mode>): Ditto.\n\t(@vec_extract_lo_<mode>): Ditto.\n\t(vec_set_hi_<mode>): Ditto.\n\t(vec_set_lo_<mode>): Ditto.\n\t(*vec_extract<mode>_0): New define_insn_and_split for BF\n\tvector extract.\n\t(*vec_extract<mode>): New define_insn.\n\t(VEC_EXTRACT_MODE): Add BF vector modes.\n\t(PINSR_MODE): Add V8BF.\n\t(sse2p4_1): Ditto.\n\t(pinsr_evex_isa): Ditto.\n\t(<sse2p4_1>_pinsr<ssemodesuffix>): Adjust to support\n\tinsert for V8BFmode.\n\t(pbroadcast_evex_isa): Add BF vector modes.\n\t(AVX2_VEC_DUP_MODE): Ditto.\n\t(VEC_INIT_MODE): Ditto.\n\t(VEC_INIT_HALF_MODE): Ditto.\n\t(avx2_pbroadcast<mode>): Adjust to support BF vector mode\n\tbroadcast.\n\t(avx2_pbroadcast<mode>_1): Ditto.\n\t(<avx512>_vec_dup<mode>_1): Ditto.\n\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>):\n\tDitto.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/vect-bfloat16-1.C: New test.\n\t* gcc.target/i386/vect-bfloat16-1.c: New test.\n\t* gcc.target/i386/vect-bfloat16-2a.c: New test.\n\t* gcc.target/i386/vect-bfloat16-2b.c: New test.\n\t* gcc.target/i386/vect-bfloat16-typecheck_1.c: New test.\n\t* gcc.target/i386/vect-bfloat16-typecheck_2.c: New test.", "tree": {"sha": "2c3e28b14367ddf7d7af0964105a1835a4d84b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3e28b14367ddf7d7af0964105a1835a4d84b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8038898376b841205a146ef34dcd72d9eec07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8038898376b841205a146ef34dcd72d9eec07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8038898376b841205a146ef34dcd72d9eec07b"}], "stats": {"total": 1069, "additions": 950, "deletions": 119}, "files": [{"sha": "4b216308a18b414dd99f201315ca6f9d0a019671", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 108, "deletions": 21, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -4064,6 +4064,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     case E_V16QImode:\n     case E_V8HImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V4SImode:\n     case E_V2DImode:\n     case E_V1TImode:\n@@ -4084,6 +4085,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V8SImode:\n     case E_V4DImode:\n       if (TARGET_AVX2)\n@@ -4102,6 +4104,9 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     case E_V32HFmode:\n       gen = gen_avx512bw_blendmv32hf;\n       break;\n+    case E_V32BFmode:\n+      gen = gen_avx512bw_blendmv32bf;\n+      break;\n     case E_V16SImode:\n       gen = gen_avx512f_blendmv16si;\n       break;\n@@ -15008,6 +15013,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \n     case E_V8HImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n       if (TARGET_AVX2)\n \treturn ix86_vector_duplicate_value (mode, target, val);\n \n@@ -15092,6 +15098,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \n     case E_V16HImode:\n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V32QImode:\n       if (TARGET_AVX2)\n \treturn ix86_vector_duplicate_value (mode, target, val);\n@@ -15112,13 +15119,15 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \n     case E_V32HImode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V64QImode:\n       if (TARGET_AVX512BW)\n \treturn ix86_vector_duplicate_value (mode, target, val);\n       else\n \t{\n \t  machine_mode hvmode = (mode == V32HImode ? V16HImode\n \t\t\t\t : mode == V32HFmode ? V16HFmode\n+\t\t\t\t : mode == V32BFmode ? V16BFmode\n \t\t\t\t : V32QImode);\n \t  rtx x = gen_reg_rtx (hvmode);\n \n@@ -15232,6 +15241,18 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n       gen_vec_set_0 = gen_vec_setv32hf_0;\n       break;\n+    case E_V8BFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv8bf_0;\n+      break;\n+    case E_V16BFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv16bf_0;\n+      break;\n+    case E_V32BFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv32bf_0;\n+      break;\n     case E_V32HImode:\n       use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n       gen_vec_set_0 = gen_vec_setv32hi_0;\n@@ -15386,6 +15407,8 @@ ix86_expand_vector_init_one_var (bool mmx_ok, machine_mode mode,\n       /* FALLTHRU */\n     case E_V8HFmode:\n     case E_V16HFmode:\n+    case E_V8BFmode:\n+    case E_V16BFmode:\n     case E_V4DFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n@@ -15469,6 +15492,9 @@ ix86_expand_vector_init_concat (machine_mode mode,\n \tcase E_V32HFmode:\n \t  half_mode = V16HFmode;\n \t  break;\n+\tcase E_V32BFmode:\n+\t  half_mode = V16BFmode;\n+\t  break;\n \tcase E_V16SImode:\n \t  half_mode = V8SImode;\n \t  break;\n@@ -15484,6 +15510,9 @@ ix86_expand_vector_init_concat (machine_mode mode,\n \tcase E_V16HFmode:\n \t  half_mode = V8HFmode;\n \t  break;\n+\tcase E_V16BFmode:\n+\t  half_mode = V8BFmode;\n+\t  break;\n \tcase E_V8SImode:\n \t  half_mode = V4SImode;\n \t  break;\n@@ -15642,6 +15671,15 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n       second_imode = V2DImode;\n       third_imode = VOIDmode;\n       break;\n+    case E_V8BFmode:\n+      gen_load_even = gen_vec_interleave_lowv8bf;\n+      gen_interleave_first_low = gen_vec_interleave_lowv4si;\n+      gen_interleave_second_low = gen_vec_interleave_lowv2di;\n+      inner_mode = BFmode;\n+      first_imode = V4SImode;\n+      second_imode = V2DImode;\n+      third_imode = VOIDmode;\n+      break;\n     case E_V8HImode:\n       gen_load_even = gen_vec_setv8hi;\n       gen_interleave_first_low = gen_vec_interleave_lowv4si;\n@@ -15667,15 +15705,18 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n   for (i = 0; i < n; i++)\n     {\n       op = ops [i + i];\n-      if (inner_mode == HFmode)\n+      if (inner_mode == HFmode || inner_mode == BFmode)\n \t{\n \t  rtx even, odd;\n-\t  /* Use vpuncklwd to pack 2 HFmode.  */\n-\t  op0 = gen_reg_rtx (V8HFmode);\n-\t  even = lowpart_subreg (V8HFmode, force_reg (HFmode, op), HFmode);\n-\t  odd = lowpart_subreg (V8HFmode,\n-\t\t\t\tforce_reg (HFmode, ops[i + i + 1]),\n-\t\t\t\tHFmode);\n+\t  /* Use vpuncklwd to pack 2 HFmode or BFmode.  */\n+\t  machine_mode vec_mode =\n+\t    (inner_mode == HFmode) ? V8HFmode : V8BFmode;\n+\t  op0 = gen_reg_rtx (vec_mode);\n+\t  even = lowpart_subreg (vec_mode,\n+\t\t\t\t force_reg (inner_mode, op), inner_mode);\n+\t  odd = lowpart_subreg (vec_mode,\n+\t\t\t\tforce_reg (inner_mode, ops[i + i + 1]),\n+\t\t\t\tinner_mode);\n \t  emit_insn (gen_load_even (op0, even, odd));\n \t}\n       else\n@@ -15824,6 +15865,10 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       half_mode = V8HFmode;\n       goto half;\n \n+    case E_V16BFmode:\n+      half_mode = V8BFmode;\n+      goto half;\n+\n half:\n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -15852,6 +15897,11 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       half_mode = V16HFmode;\n       goto quarter;\n \n+    case E_V32BFmode:\n+      quarter_mode = V8BFmode;\n+      half_mode = V16BFmode;\n+      goto quarter;\n+\n quarter:\n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -15891,6 +15941,7 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       /* FALLTHRU */\n \n     case E_V8HFmode:\n+    case E_V8BFmode:\n \n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -15994,7 +16045,8 @@ ix86_expand_vector_init (bool mmx_ok, rtx target, rtx vals)\n \t  if (inner_mode == QImode\n \t      || inner_mode == HImode\n \t      || inner_mode == TImode\n-\t      || inner_mode == HFmode)\n+\t      || inner_mode == HFmode\n+\t      || inner_mode == BFmode)\n \t    {\n \t      unsigned int n_bits = n_elts * GET_MODE_SIZE (inner_mode);\n \t      scalar_mode elt_mode = inner_mode == TImode ? DImode : SImode;\n@@ -16078,7 +16130,8 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n   /* 512-bits vector byte/word broadcast and comparison only available\n      under TARGET_AVX512BW, break 512-bits vector into two 256-bits vector\n      when without TARGET_AVX512BW.  */\n-  if ((mode == V32HImode || mode == V32HFmode || mode == V64QImode)\n+  if ((mode == V32HImode || mode == V32HFmode || mode == V32BFmode\n+       || mode == V64QImode)\n       && !TARGET_AVX512BW)\n     {\n       gcc_assert (TARGET_AVX512F);\n@@ -16099,6 +16152,12 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n \t  extract_hi = gen_vec_extract_hi_v32hf;\n \t  extract_lo = gen_vec_extract_lo_v32hf;\n \t}\n+      else if (mode == V32BFmode)\n+\t{\n+\t  half_mode = V16BFmode;\n+\t  extract_hi = gen_vec_extract_hi_v32bf;\n+\t  extract_lo = gen_vec_extract_lo_v32bf;\n+\t}\n       else\n \t{\n \t  half_mode = V32QImode;\n@@ -16155,6 +16214,15 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n \tcase E_V32HFmode:\n \t  cmp_mode = V32HImode;\n \t  break;\n+\tcase E_V8BFmode:\n+\t  cmp_mode = V8HImode;\n+\t  break;\n+\tcase E_V16BFmode:\n+\t  cmp_mode = V16HImode;\n+\t  break;\n+\tcase E_V32BFmode:\n+\t  cmp_mode = V32HImode;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -16192,17 +16260,18 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n   bool use_vec_merge = false;\n   bool blendm_const = false;\n   rtx tmp;\n-  static rtx (*gen_extract[7][2]) (rtx, rtx)\n+  static rtx (*gen_extract[8][2]) (rtx, rtx)\n     = {\n \t{ gen_vec_extract_lo_v32qi, gen_vec_extract_hi_v32qi },\n \t{ gen_vec_extract_lo_v16hi, gen_vec_extract_hi_v16hi },\n \t{ gen_vec_extract_lo_v8si, gen_vec_extract_hi_v8si },\n \t{ gen_vec_extract_lo_v4di, gen_vec_extract_hi_v4di },\n \t{ gen_vec_extract_lo_v8sf, gen_vec_extract_hi_v8sf },\n \t{ gen_vec_extract_lo_v4df, gen_vec_extract_hi_v4df },\n-\t{ gen_vec_extract_lo_v16hf, gen_vec_extract_hi_v16hf }\n+\t{ gen_vec_extract_lo_v16hf, gen_vec_extract_hi_v16hf },\n+\t{ gen_vec_extract_lo_v16bf, gen_vec_extract_hi_v16bf }\n       };\n-  static rtx (*gen_insert[7][2]) (rtx, rtx, rtx)\n+  static rtx (*gen_insert[8][2]) (rtx, rtx, rtx)\n     = {\n \t{ gen_vec_set_lo_v32qi, gen_vec_set_hi_v32qi },\n \t{ gen_vec_set_lo_v16hi, gen_vec_set_hi_v16hi },\n@@ -16211,6 +16280,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t{ gen_vec_set_lo_v8sf, gen_vec_set_hi_v8sf },\n \t{ gen_vec_set_lo_v4df, gen_vec_set_hi_v4df },\n \t{ gen_vec_set_lo_v16hf, gen_vec_set_hi_v16hf },\n+\t{ gen_vec_set_lo_v16bf, gen_vec_set_hi_v16bf },\n       };\n   int i, j, n;\n   machine_mode mmode = VOIDmode;\n@@ -16379,6 +16449,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \n     case E_V8HImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V2HImode:\n       use_vec_merge = TARGET_SSE2;\n       break;\n@@ -16402,18 +16473,20 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       goto half;\n \n     case E_V16HFmode:\n+    case E_V16BFmode:\n       /* For ELT == 0, vec_setv8hf_0 can save 1 vpbroadcastw.  */\n       if (TARGET_AVX2 && elt != 0)\n \t{\n \t  mmode = SImode;\n-\t  gen_blendm = gen_avx2_pblendph_1;\n+\t  gen_blendm = ((mode == E_V16HFmode) ? gen_avx2_pblendph_1\n+\t\t\t\t\t\t: gen_avx2_pblendbf_1);\n \t  blendm_const = true;\n \t  break;\n \t}\n       else\n \t{\n-\t  half_mode = V8HFmode;\n-\t  j = 6;\n+\t  half_mode = ((mode == E_V16HFmode) ? V8HFmode : V8BFmode);\n+\t  j = ((mode == E_V16HFmode) ? 6 : 7);\n \t  n = 8;\n \t  goto half;\n \t}\n@@ -16505,6 +16578,13 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  gen_blendm = gen_avx512bw_blendmv32hf;\n \t}\n       break;\n+    case E_V32BFmode:\n+      if (TARGET_AVX512BW)\n+\t{\n+\t  mmode = SImode;\n+\t  gen_blendm = gen_avx512bw_blendmv32bf;\n+\t}\n+      break;\n     case E_V32HImode:\n       if (TARGET_AVX512BW)\n \t{\n@@ -16712,6 +16792,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \n     case E_V8HImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V2HImode:\n       use_vec_extr = TARGET_SSE2;\n       break;\n@@ -16878,26 +16959,32 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n       return;\n \n     case E_V32HFmode:\n+    case E_V32BFmode:\n       if (TARGET_AVX512BW)\n \t{\n-\t  tmp = gen_reg_rtx (V16HFmode);\n+\t  tmp = (mode == E_V32HFmode\n+\t\t ? gen_reg_rtx (V16HFmode)\n+\t\t : gen_reg_rtx (V16BFmode));\n \t  if (elt < 16)\n-\t    emit_insn (gen_vec_extract_lo_v32hf (tmp, vec));\n+\t    emit_insn (maybe_gen_vec_extract_lo (mode, tmp, vec));\n \t  else\n-\t    emit_insn (gen_vec_extract_hi_v32hf (tmp, vec));\n+\t    emit_insn (maybe_gen_vec_extract_hi (mode, tmp, vec));\n \t  ix86_expand_vector_extract (false, target, tmp, elt & 15);\n \t  return;\n \t}\n       break;\n \n     case E_V16HFmode:\n+    case E_V16BFmode:\n       if (TARGET_AVX)\n \t{\n-\t  tmp = gen_reg_rtx (V8HFmode);\n+\t  tmp = (mode == E_V16HFmode\n+\t\t ? gen_reg_rtx (V8HFmode)\n+\t\t : gen_reg_rtx (V8BFmode));\n \t  if (elt < 8)\n-\t    emit_insn (gen_vec_extract_lo_v16hf (tmp, vec));\n+\t    emit_insn (maybe_gen_vec_extract_lo (mode, tmp, vec));\n \t  else\n-\t    emit_insn (gen_vec_extract_hi_v16hf (tmp, vec));\n+\t    emit_insn (maybe_gen_vec_extract_hi (mode, tmp, vec));\n \t  ix86_expand_vector_extract (false, target, tmp, elt & 7);\n \t  return;\n \t}"}, {"sha": "e27c87f8c83fe195dcc67c505ff192f0c836159e", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -2463,6 +2463,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V8SImode:\n     case E_V32QImode:\n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n@@ -2474,6 +2475,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V8DFmode:\n     case E_V16SFmode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V8DImode:\n     case E_V16SImode:\n     case E_V32HImode:\n@@ -2492,6 +2494,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V16QImode:\n     case E_V8HImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V2DFmode:\n     case E_V2DImode:\n       classes[0] = X86_64_SSE_CLASS;\n@@ -2947,13 +2950,15 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n       /* FALLTHRU */\n \n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V64QImode:\n     case E_V32HImode:\n     case E_V16SImode:\n     case E_V8DImode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V16SFmode:\n     case E_V8DFmode:\n     case E_V32QImode:\n@@ -2966,6 +2971,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V4SImode:\n     case E_V2DImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V4SFmode:\n     case E_V2DFmode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n@@ -3190,6 +3196,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V4SImode:\n     case E_V2DImode:\n     case E_V8HFmode:\n+    case E_V8BFmode:\n     case E_V4SFmode:\n     case E_V2DFmode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n@@ -3210,9 +3217,11 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V16SImode:\n     case E_V8DImode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V16SFmode:\n     case E_V8DFmode:\n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n@@ -3273,13 +3282,15 @@ function_arg_64 (const CUMULATIVE_ARGS *cum, machine_mode mode,\n       break;\n \n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V16SFmode:\n     case E_V16SImode:\n     case E_V64QImode:\n@@ -4748,13 +4759,15 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   switch (nat_mode)\n     {\n     case E_V16HFmode:\n+    case E_V16BFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n     case E_V32HFmode:\n+    case E_V32BFmode:\n     case E_V16SFmode:\n     case E_V16SImode:\n     case E_V64QImode:\n@@ -5430,7 +5443,7 @@ ix86_get_ssemov (rtx *operands, unsigned size,\n       switch (type)\n \t{\n \tcase opcode_int:\n-\t  if (scalar_mode == E_HFmode)\n+\t  if (scalar_mode == E_HFmode || scalar_mode == E_BFmode)\n \t    opcode = (misaligned_p\n \t\t      ? (TARGET_AVX512BW ? \"vmovdqu16\" : \"vmovdqu64\")\n \t\t      : \"vmovdqa64\");\n@@ -5450,6 +5463,7 @@ ix86_get_ssemov (rtx *operands, unsigned size,\n       switch (scalar_mode)\n \t{\n \tcase E_HFmode:\n+\tcase E_BFmode:\n \t  if (evex_reg_p)\n \t    opcode = (misaligned_p\n \t\t      ? (TARGET_AVX512BW"}, {"sha": "0de5c77bc7d73730d8e8afb5765e5e89ffea6b69", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -1011,7 +1011,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_AVX256_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n    || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n-   || (MODE) == V4DFmode || (MODE) == V16HFmode)\n+   || (MODE) == V4DFmode || (MODE) == V16HFmode || (MODE) == V16BFmode)\n \n #define VALID_AVX256_REG_OR_OI_MODE(MODE)\t\t\\\n   (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode)\n@@ -1026,7 +1026,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_AVX512F_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V8DImode || (MODE) == V8DFmode || (MODE) == V64QImode\t\\\n    || (MODE) == V16SImode || (MODE) == V16SFmode || (MODE) == V32HImode \\\n-   || (MODE) == V4TImode || (MODE) == V32HFmode)\n+   || (MODE) == V4TImode || (MODE) == V32HFmode || (MODE) == V32BFmode)\n \n #define VALID_AVX512F_REG_OR_XI_MODE(MODE)\t\t\t\t\\\n   (VALID_AVX512F_REG_MODE (MODE) || (MODE) == XImode)\n@@ -1035,7 +1035,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   ((MODE) == V2DImode || (MODE) == V2DFmode || (MODE) == V16QImode\t\\\n    || (MODE) == V4SImode || (MODE) == V4SFmode || (MODE) == V8HImode\t\\\n    || (MODE) == TFmode || (MODE) == V1TImode || (MODE) == V8HFmode\t\\\n-   || (MODE) == TImode)\n+   || (MODE) == V8BFmode || (MODE) == TImode)\n \n #define VALID_AVX512FP16_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode\t\\\n@@ -1044,6 +1044,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n+   || (MODE) == V8BFmode \\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == V2QImode || (MODE) == DFmode\t\\\n    || (MODE) == HFmode || (MODE) == BFmode)\n@@ -1095,8 +1096,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode\t\\\n    || (MODE) == V2TImode || (MODE) == V8DImode || (MODE) == V64QImode\t\\\n    || (MODE) == V16SImode || (MODE) == V32HImode || (MODE) == V8DFmode\t\\\n-   || (MODE) == V16SFmode || (MODE) == V32HFmode || (MODE) == V16HFmode \\\n-   || (MODE) == V8HFmode)\n+   || (MODE) == V16SFmode \\\n+   || (MODE) == V32HFmode || (MODE) == V16HFmode || (MODE) == V8HFmode  \\\n+   || (MODE) == V32BFmode || (MODE) == V16BFmode || (MODE) == V8BFmode)\n \n #define X87_FLOAT_MODE_P(MODE)\t\\\n   (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))"}, {"sha": "58fcc382fa25d6d759b3431d4f90ea7f0a5f3d95", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -1114,7 +1114,8 @@\n \t\t\t     (V2DF \"16\") (V4DF \"32\") (V8DF \"64\")\n \t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")\n \t\t\t     (V8HF \"16\") (V16HF \"32\") (V32HF \"64\")\n-\t\t\t     (V4HF \"8\") (V2HF \"4\")])\n+\t\t\t     (V4HF \"8\") (V2HF \"4\")\n+\t\t\t     (V8BF \"16\") (V16BF \"32\") (V32BF \"64\")])\n \n ;; Double word integer modes as mode attribute.\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"OI\")])\n@@ -1258,8 +1259,8 @@\n (define_mode_attr ssemodesuffix\n   [(HF \"sh\") (SF \"ss\") (DF \"sd\")\n    (V32HF \"ph\") (V16SF \"ps\") (V8DF \"pd\")\n-   (V16HF \"ph\") (V8SF \"ps\") (V4DF \"pd\")\n-   (V8HF \"ph\") (V4SF \"ps\") (V2DF \"pd\")\n+   (V16HF \"ph\") (V16BF \"bf\") (V8SF \"ps\") (V4DF \"pd\")\n+   (V8HF \"ph\")  (V8BF \"bf\") (V4SF \"ps\") (V2DF \"pd\")\n    (V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"d\") (V4DI \"q\")\n    (V64QI \"b\") (V32HI \"w\") (V16SI \"d\") (V8DI \"q\")])\n@@ -1269,7 +1270,7 @@\n \n ;; SSE vector mode corresponding to a scalar mode\n (define_mode_attr ssevecmode\n-  [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (HF \"V8HF\") (SF \"V4SF\") (DF \"V2DF\")])\n+  [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (HF \"V8HF\") (BF \"V8BF\") (SF \"V4SF\") (DF \"V2DF\")])\n (define_mode_attr ssevecmodelower\n   [(QI \"v16qi\") (HI \"v8hi\") (SI \"v4si\") (DI \"v2di\") (SF \"v4sf\") (DF \"v2df\")])\n "}, {"sha": "9351548b056dc7f4b896a7beb30f73b4b81a3d0a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 123, "deletions": 88, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -232,6 +232,7 @@\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\") V1TI\n    (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n+   (V32BF \"TARGET_AVX512F\") (V16BF \"TARGET_AVX\") V8BF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n@@ -263,10 +264,11 @@\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n \n-(define_mode_iterator VI12HF_AVX512VL\n+(define_mode_iterator VI12HFBF_AVX512VL\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")\n-   V32HF (V16HF \"TARGET_AVX512VL\") (V8HF \"TARGET_AVX512VL\")])\n+   V32HF (V16HF \"TARGET_AVX512VL\") (V8HF \"TARGET_AVX512VL\")\n+   V32BF (V16BF \"TARGET_AVX512VL\") (V8BF \"TARGET_AVX512VL\")])\n \n ;; Same iterator, but without supposed TARGET_AVX512BW\n (define_mode_iterator VI12_AVX512VLBW\n@@ -309,10 +311,10 @@\n \n ;; All 256bit and 512bit vector modes\n (define_mode_iterator V_256_512\n-  [V32QI V16HI V16HF V8SI V4DI V8SF V4DF\n+  [V32QI V16HI V16HF V16BF V8SI V4DI V8SF V4DF\n    (V64QI \"TARGET_AVX512F\") (V32HI \"TARGET_AVX512F\") (V32HF \"TARGET_AVX512F\")\n-   (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n-   (V8DF \"TARGET_AVX512F\")])\n+   (V32BF \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n+   (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")])\n \n ;; All vector float modes\n (define_mode_iterator VF\n@@ -435,6 +437,13 @@\n (define_mode_iterator VF_AVX512FP16\n   [V32HF V16HF V8HF])\n \n+(define_mode_iterator VF_AVX512HFBF16\n+  [(V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\") V32BF V16BF V8BF])\n+\n+(define_mode_iterator VF_AVX512BWHFBF16\n+  [V32HF V16HF V8HF V32BF V16BF V8BF])\n+\n (define_mode_iterator VF_AVX512FP16VL\n   [V32HF (V16HF \"TARGET_AVX512VL\") (V8HF \"TARGET_AVX512VL\")])\n \n@@ -447,13 +456,14 @@\n    (V4DI \"TARGET_AVX\") V2DI])\n \n ;; All vector integer and HF modes\n-(define_mode_iterator VIHF\n+(define_mode_iterator VIHFBF\n   [(V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n    (V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX\") V16QI\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX\") V8HI\n    (V8SI \"TARGET_AVX\") V4SI\n    (V4DI \"TARGET_AVX\") V2DI\n-   (V32HF \"TARGET_AVX512BW\") (V16HF \"TARGET_AVX\") V8HF])\n+   (V32HF \"TARGET_AVX512BW\") (V16HF \"TARGET_AVX\") V8HF\n+   (V32BF \"TARGET_AVX512BW\") (V16BF \"TARGET_AVX\") V8BF])\n \n (define_mode_iterator VI_AVX2\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n@@ -676,6 +686,7 @@\n    (V4SI  \"avx512vl\") (V8SI  \"avx512vl\") (V16SI \"avx512f\")\n    (V2DI  \"avx512vl\") (V4DI  \"avx512vl\") (V8DI \"avx512f\")\n    (V8HF \"avx512fp16\") (V16HF \"avx512vl\") (V32HF \"avx512bw\")\n+   (V8BF \"avx512vl\") (V16BF \"avx512vl\") (V32BF \"avx512bw\")\n    (V4SF \"avx512vl\") (V8SF \"avx512vl\") (V16SF \"avx512f\")\n    (V2DF \"avx512vl\") (V4DF \"avx512vl\") (V8DF \"avx512f\")])\n \n@@ -786,7 +797,7 @@\n ;; All 128 and 256bit vector integer modes\n (define_mode_iterator VI_128_256 [V16QI V8HI V4SI V2DI V32QI V16HI V8SI V4DI])\n ;; All 256bit vector integer and HF modes\n-(define_mode_iterator VIHF_256 [V32QI V16HI V8SI V4DI V16HF])\n+(define_mode_iterator VIHFBF_256 [V32QI V16HI V8SI V4DI V16HF V16BF])\n \n ;; Various 128bit vector integer mode combinations\n (define_mode_iterator VI12_128 [V16QI V8HI])\n@@ -813,12 +824,12 @@\n (define_mode_iterator VI4_256_8_512 [V8SI V8DI])\n (define_mode_iterator VI_AVX512BW\n   [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")])\n-(define_mode_iterator VIHF_AVX512BW\n+(define_mode_iterator VIHFBF_AVX512BW\n   [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")\n-  (V32HF \"TARGET_AVX512BW\")])\n+  (V32HF \"TARGET_AVX512BW\") (V32BF \"TARGET_AVX512BW\")])\n \n ;; Int-float size matches\n-(define_mode_iterator VI2F_256_512 [V16HI V32HI V16HF V32HF])\n+(define_mode_iterator VI2F_256_512 [V16HI V32HI V16HF V32HF V16BF V32BF])\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n (define_mode_iterator VI8F_128 [V2DI V2DF])\n (define_mode_iterator VI4F_256 [V8SI V8SF])\n@@ -863,9 +874,9 @@\n    (V8SF \"TARGET_AVX512VL\") (V4DF \"TARGET_AVX512VL\")\n    V16SF V8DF])\n \n-(define_mode_iterator V8_128 [V8HI V8HF])\n-(define_mode_iterator V16_256 [V16HI V16HF])\n-(define_mode_iterator V32_512 [V32HI V32HF])\n+(define_mode_iterator V8_128 [V8HI V8HF V8BF])\n+(define_mode_iterator V16_256 [V16HI V16HF V16BF])\n+(define_mode_iterator V32_512 [V32HI V32HF V32BF])\n \n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse\n@@ -910,6 +921,7 @@\n    (V8SF \"V8SF\") (V4DF \"V4DF\")\n    (V4SF \"V4SF\") (V2DF \"V2DF\")\n    (V8HF \"TI\") (V16HF \"OI\") (V32HF \"XI\")\n+   (V8BF \"TI\") (V16BF \"OI\") (V32BF \"XI\")\n    (TI \"TI\")])\n \n (define_mode_attr sseintvecinsnmode\n@@ -926,16 +938,17 @@\n   [(V64QI \"BC\") (V32HI \"BC\") (V16SI \"BC\") (V8DI \"BC\") (V4TI \"BC\")\n    (V32QI \"BC\") (V16HI \"BC\") (V8SI \"BC\") (V4DI \"BC\") (V2TI \"BC\")\n    (V16QI \"BC\") (V8HI \"BC\") (V4SI \"BC\") (V2DI \"BC\") (V1TI \"BC\")\n-   (V32HF \"BF\") (V16SF \"BF\") (V8DF \"BF\")\n-   (V16HF \"BF\") (V8SF \"BF\") (V4DF \"BF\")\n-   (V8HF \"BF\") (V4SF \"BF\") (V2DF \"BF\")])\n+   (V32HF \"BF\") (V32BF \"BF\") (V16SF \"BF\") (V8DF \"BF\")\n+   (V16HF \"BF\") (V16BF \"BF\") (V8SF \"BF\") (V4DF \"BF\")\n+   (V8HF \"BF\") (V8BF \"BF\") (V4SF \"BF\") (V2DF \"BF\")])\n \n ;; SSE integer instruction suffix for various modes\n (define_mode_attr sseintmodesuffix\n   [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"d\") (V4DI \"q\")\n    (V64QI \"b\") (V32HI \"w\") (V16SI \"d\") (V8DI \"q\")\n-   (V8HF \"w\") (V16HF \"w\") (V32HF \"w\")])\n+   (V8HF \"w\") (V16HF \"w\") (V32HF \"w\")\n+   (V8BF \"w\") (V16BF \"w\") (V32BF \"w\")])\n \n ;; Mapping of vector modes to corresponding mask size\n (define_mode_attr avx512fmaskmode\n@@ -944,6 +957,7 @@\n    (V16SI \"HI\") (V8SI  \"QI\") (V4SI  \"QI\")\n    (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n    (V32HF \"SI\") (V16HF \"HI\") (V8HF  \"QI\")\n+   (V32BF \"SI\") (V16BF \"HI\") (V8BF  \"QI\")\n    (V16SF \"HI\") (V8SF  \"QI\") (V4SF  \"QI\")\n    (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n \n@@ -958,6 +972,7 @@\n    (V16SI \"hi\") (V8SI  \"qi\") (V4SI  \"qi\")\n    (V8DI  \"qi\") (V4DI  \"qi\") (V2DI  \"qi\")\n    (V32HF \"si\") (V16HF \"hi\") (V8HF  \"qi\")\n+   (V32BF \"si\") (V16BF \"hi\") (V8BF  \"qi\")\n    (V16SF \"hi\") (V8SF  \"qi\") (V4SF  \"qi\")\n    (V8DF  \"qi\") (V4DF  \"qi\") (V2DF  \"qi\")])\n \n@@ -973,9 +988,9 @@\n \n ;; Mapping of vector float modes to an integer mode of the same size\n (define_mode_attr sseintvecmode\n-  [(V32HF \"V32HI\") (V16SF \"V16SI\") (V8DF  \"V8DI\")\n-   (V16HF \"V16HI\") (V8SF  \"V8SI\")  (V4DF  \"V4DI\")\n-   (V8HF \"V8HI\") (V4SF  \"V4SI\")  (V2DF  \"V2DI\")\n+  [(V32HF \"V32HI\") (V32BF \"V32HI\") (V16SF \"V16SI\") (V8DF  \"V8DI\")\n+   (V16HF \"V16HI\") (V16BF \"V16HI\") (V8SF  \"V8SI\")  (V4DF  \"V4DI\")\n+   (V8HF \"V8HI\") (V8BF \"V8HI\") (V4SF \"V4SI\")  (V2DF  \"V2DI\")\n    (V16SI \"V16SI\") (V8DI  \"V8DI\")\n    (V8SI  \"V8SI\")  (V4DI  \"V4DI\")\n    (V4SI  \"V4SI\")  (V2DI  \"V2DI\")\n@@ -998,9 +1013,9 @@\n    (V16HF \"OI\") (V8HF \"TI\")])\n \n (define_mode_attr sseintvecmodelower\n-  [(V32HF \"v32hi\") (V16SF \"v16si\") (V8DF \"v8di\")\n-   (V16HF \"v16hi\") (V8SF \"v8si\") (V4DF \"v4di\")\n-   (V8HF \"v8hi\") (V4SF \"v4si\") (V2DF \"v2di\")\n+  [(V32HF \"v32hi\") (V32BF \"v32hi\") (V16SF \"v16si\") (V8DF \"v8di\")\n+   (V16HF \"v16hi\") (V16BF \"v16hi\") (V8SF \"v8si\") (V4DF \"v4di\")\n+   (V8HF \"v8hi\") (V8BF \"v8hi\") (V4SF \"v4si\") (V2DF \"v2di\")\n    (V8SI \"v8si\") (V4DI \"v4di\")\n    (V4SI \"v4si\") (V2DI \"v2di\")\n    (V16HI \"v16hi\") (V8HI \"v8hi\")\n@@ -1014,7 +1029,8 @@\n    (V16SF \"V32SF\") (V8DF \"V16DF\")\n    (V8SF \"V16SF\") (V4DF \"V8DF\")\n    (V4SF \"V8SF\") (V2DF \"V4DF\")\n-   (V32HF \"V64HF\") (V16HF \"V32HF\") (V8HF \"V16HF\")])\n+   (V32HF \"V64HF\") (V16HF \"V32HF\") (V8HF \"V16HF\")\n+   (V32BF \"V64BF\") (V16BF \"V32BF\") (V8BF \"V16BF\")])\n \n ;; Mapping of vector modes to a vector mode of half size\n ;; instead of V1DI/V1DF, DI/DF are used for V2DI/V2DF although they are scalar.\n@@ -1025,7 +1041,8 @@\n    (V16SF \"V8SF\") (V8DF \"V4DF\")\n    (V8SF  \"V4SF\") (V4DF \"V2DF\")\n    (V4SF  \"V2SF\") (V2DF \"DF\")\n-   (V32HF \"V16HF\") (V16HF \"V8HF\") (V8HF \"V4HF\")])\n+   (V32HF \"V16HF\") (V16HF \"V8HF\") (V8HF \"V4HF\")\n+   (V32BF \"V16BF\") (V16BF \"V8BF\") (V8BF \"V4BF\")])\n \n (define_mode_attr ssehalfvecmodelower\n   [(V64QI \"v32qi\") (V32HI \"v16hi\") (V16SI \"v8si\") (V8DI \"v4di\") (V4TI \"v2ti\")\n@@ -1034,7 +1051,8 @@\n    (V16SF \"v8sf\") (V8DF \"v4df\")\n    (V8SF  \"v4sf\") (V4DF \"v2df\")\n    (V4SF  \"v2sf\")\n-   (V32HF \"v16hf\") (V16HF \"v8hf\") (V8HF \"v4hf\")])\n+   (V32HF \"v16hf\") (V16HF \"v8hf\") (V8HF \"v4hf\")\n+   (V32BF \"v16bf\") (V16BF \"v8bf\") (V8BF \"v4bf\")])\n \n ;; Mapping of vector modes to vector hf modes of conversion.\n (define_mode_attr ssePHmode\n@@ -1085,6 +1103,7 @@\n    (V16SI \"SI\") (V8SI \"SI\")  (V4SI \"SI\")\n    (V8DI \"DI\")  (V4DI \"DI\")  (V2DI \"DI\")\n    (V32HF \"HF\") (V16HF \"HF\") (V8HF \"HF\")\n+   (V32BF \"BF\") (V16BF \"BF\") (V8BF \"BF\")\n    (V16SF \"SF\") (V8SF \"SF\")  (V4SF \"SF\")\n    (V8DF \"DF\")  (V4DF \"DF\")  (V2DF \"DF\")\n    (V4TI \"TI\")  (V2TI \"TI\")])\n@@ -1096,6 +1115,7 @@\n    (V16SI \"si\") (V8SI \"si\")  (V4SI \"si\")\n    (V8DI \"di\")  (V4DI \"di\")  (V2DI \"di\")\n    (V32HF \"hf\") (V16HF \"hf\")  (V8HF \"hf\")\n+   (V32BF \"bf\") (V16BF \"bf\")  (V8BF \"bf\")\n    (V16SF \"sf\") (V8SF \"sf\")  (V4SF \"sf\")\n    (V8DF \"df\")  (V4DF \"df\")  (V2DF \"df\")\n    (V4TI \"ti\")  (V2TI \"ti\")])\n@@ -1107,6 +1127,7 @@\n    (V16SI \"V4SI\")  (V8SI \"V4SI\")  (V4SI \"V4SI\")\n    (V8DI \"V2DI\")   (V4DI \"V2DI\")  (V2DI \"V2DI\")\n    (V32HF \"V8HF\")  (V16HF \"V8HF\") (V8HF \"V8HF\")\n+   (V32BF \"V8BF\")  (V16BF \"V8BF\") (V8BF \"V8BF\")\n    (V16SF \"V4SF\")  (V8SF \"V4SF\")  (V4SF \"V4SF\")\n    (V8DF \"V2DF\")   (V4DF \"V2DF\")  (V2DF \"V2DF\")])\n \n@@ -1128,6 +1149,7 @@\n    (V16SF \"d\") (V8SF \"d\") (V4SF \"d\")\n    (V32HI \"d\") (V16HI \"d\") (V8HI \"d\")\n    (V32HF \"d\") (V16HF \"d\") (V8HF \"d\")\n+   (V32BF \"d\") (V16BF \"d\") (V8BF \"d\")\n    (V64QI \"d\") (V32QI \"d\") (V16QI \"d\")])\n \n ;; Number of scalar elements in each vector type\n@@ -1153,6 +1175,7 @@\n    (V32HI \"16\") (V16HI \"16\") (V8HI \"16\")\n    (V16SI \"32\") (V8SI \"32\") (V4SI \"32\")\n    (V32HF \"16\") (V16HF \"16\") (V8HF \"16\")\n+   (V32BF \"16\") (V16BF \"16\") (V8BF \"16\")\n    (V16SF \"32\") (V8SF \"32\") (V4SF \"32\")\n    (V8DF \"64\") (V4DF \"64\") (V2DF \"64\")])\n \n@@ -1164,9 +1187,9 @@\n    (V4SI  \"p\") (V4SF  \"\")\n    (V8SI  \"p\") (V8SF  \"\")\n    (V16SI \"p\") (V16SF \"\")\n-   (V16QI \"p\") (V8HI \"p\") (V8HF \"p\")\n-   (V32QI \"p\") (V16HI \"p\") (V16HF \"p\")\n-   (V64QI \"p\") (V32HI \"p\") (V32HF \"p\")])\n+   (V16QI \"p\") (V8HI \"p\") (V8HF \"p\") (V8BF \"p\")\n+   (V32QI \"p\") (V16HI \"p\") (V16HF \"p\") (V16BF \"p\")\n+   (V64QI \"p\") (V32HI \"p\") (V32HF \"p\") (V32BF \"p\")])\n \n ;; SSE prefix for integer and HF vector comparison.\n (define_mode_attr ssecmpintprefix\n@@ -1219,7 +1242,8 @@\n ;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n ;; i64x4 or f64x4 for 512bit modes.\n (define_mode_attr i128\n-  [(V16HF \"%~128\") (V32HF \"i64x4\") (V16SF \"f64x4\") (V8SF \"f128\")\n+  [(V16HF \"%~128\") (V32HF \"i64x4\") (V16BF \"%~128\") (V32BF \"i64x4\")\n+   (V16SF \"f64x4\") (V8SF \"f128\")\n    (V8DF \"f64x4\") (V4DF \"f128\")\n    (V64QI \"i64x4\") (V32QI \"%~128\") (V32HI \"i64x4\") (V16HI \"%~128\")\n    (V16SI \"i64x4\") (V8SI \"%~128\") (V8DI \"i64x4\") (V4DI \"%~128\")])\n@@ -1245,17 +1269,18 @@\n    (V16SI \"d\")  (V8SI \"d\")  (V4SI \"d\")\n    (V8DI \"q\")   (V4DI \"q\")  (V2DI \"q\")\n    (V32HF \"w\")  (V16HF \"w\") (V8HF \"w\")\n+   (V32BF \"w\")  (V16BF \"w\") (V8BF \"w\")\n    (V16SF \"ss\") (V8SF \"ss\") (V4SF \"ss\")\n    (V8DF \"sd\")  (V4DF \"sd\") (V2DF \"sd\")])\n \n ;; Tie mode of assembler operand to mode iterator\n (define_mode_attr xtg_mode\n   [(V16QI \"x\") (V8HI \"x\") (V4SI \"x\") (V2DI \"x\")\n-   (V8HF \"x\") (V4SF \"x\") (V2DF \"x\")\n+   (V8HF \"x\")  (V8BF \"x\") (V4SF \"x\") (V2DF \"x\")\n    (V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\")\n-   (V16HF \"t\") (V8SF \"t\") (V4DF \"t\")\n+   (V16HF \"t\") (V16BF \"t\") (V8SF \"t\") (V4DF \"t\")\n    (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\")\n-   (V32HF \"g\") (V16SF \"g\") (V8DF \"g\")])\n+   (V32HF \"g\") (V32BF \"g\") (V16SF \"g\") (V8DF \"g\")])\n \n ;; Half mask mode for unpacks\n (define_mode_attr HALFMASKMODE\n@@ -1553,10 +1578,10 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_blendm<mode>\"\n-  [(set (match_operand:VF_AVX512FP16 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_AVX512FP16\n-\t  (match_operand:VF_AVX512FP16 2 \"nonimmediate_operand\" \"vm,vm\")\n-\t  (match_operand:VF_AVX512FP16 1 \"nonimm_or_0_operand\" \"0C,v\")\n+  [(set (match_operand:VF_AVX512BWHFBF16 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512BWHFBF16\n+\t  (match_operand:VF_AVX512BWHFBF16 2 \"nonimmediate_operand\" \"vm,vm\")\n+\t  (match_operand:VF_AVX512BWHFBF16 1 \"nonimm_or_0_operand\" \"0C,v\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512BW\"\n   \"@\n@@ -1595,9 +1620,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_store<mode>_mask\"\n-  [(set (match_operand:VI12HF_AVX512VL 0 \"memory_operand\" \"=m\")\n-\t(vec_merge:VI12HF_AVX512VL\n-\t  (match_operand:VI12HF_AVX512VL 1 \"register_operand\" \"v\")\n+  [(set (match_operand:VI12HFBF_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:VI12HFBF_AVX512VL\n+\t  (match_operand:VI12HFBF_AVX512VL 1 \"register_operand\" \"v\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BW\"\n@@ -4513,14 +4538,18 @@\n   DONE;\n })\n \n+(define_mode_iterator VF_AVX512HFBFVL\n+  [V32HF (V16HF \"TARGET_AVX512VL\") (V8HF \"TARGET_AVX512VL\")\n+   V32BF (V16BF \"TARGET_AVX512VL\") (V8BF \"TARGET_AVX512VL\")])\n+\n (define_expand \"vcond<mode><sseintvecmodelower>\"\n-  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n-\t(if_then_else:VF_AVX512FP16VL\n+  [(set (match_operand:VF_AVX512HFBFVL 0 \"register_operand\")\n+\t(if_then_else:VF_AVX512HFBFVL\n \t  (match_operator 3 \"\"\n \t    [(match_operand:<sseintvecmode> 4 \"vector_operand\")\n \t     (match_operand:<sseintvecmode> 5 \"vector_operand\")])\n-\t  (match_operand:VF_AVX512FP16VL 1 \"general_operand\")\n-\t  (match_operand:VF_AVX512FP16VL 2 \"general_operand\")))]\n+\t  (match_operand:VF_AVX512HFBFVL 1 \"general_operand\")\n+\t  (match_operand:VF_AVX512HFBFVL 2 \"general_operand\")))]\n   \"TARGET_AVX512FP16\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n@@ -4552,10 +4581,10 @@\n   \"TARGET_AVX512F\")\n \n (define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n-  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VI12HF_AVX512VL\n-\t  (match_operand:VI12HF_AVX512VL 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI12HF_AVX512VL 2 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VI12HFBF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI12HFBF_AVX512VL\n+\t  (match_operand:VI12HFBF_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI12HFBF_AVX512VL 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n   \"TARGET_AVX512BW\")\n \n@@ -10747,7 +10776,7 @@\n \t\t   (const_string \"HF\")\n \t\t   (const_string \"TI\")))\n    (set (attr \"enabled\")\n-     (cond [(and (not (match_test \"<MODE>mode == V8HFmode\"))\n+     (cond [(and (not (match_test \"<MODE>mode == V8HFmode || <MODE>mode == V8BFmode\"))\n \t\t (eq_attr \"alternative\" \"2\"))\n \t      (symbol_ref \"false\")\n \t   ]\n@@ -10809,11 +10838,13 @@\n   DONE;\n })\n \n-(define_insn \"avx512fp16_movsh\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n-\t(vec_merge:V8HF\n-          (match_operand:V8HF 2 \"register_operand\" \"v\")\n-\t  (match_operand:V8HF 1 \"register_operand\" \"v\")\n+(define_mode_iterator V8BFH_128 [V8HF V8BF])\n+\n+(define_insn \"avx512fp16_mov<mode>\"\n+  [(set (match_operand:V8BFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8BFH_128\n+          (match_operand:V8BFH_128 2 \"register_operand\" \"v\")\n+\t  (match_operand:V8BFH_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512FP16\"\n   \"vmovsh\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -10996,9 +11027,9 @@\n   DONE;\n })\n \n-(define_expand \"vec_setv8hf\"\n-  [(match_operand:V8HF 0 \"register_operand\")\n-   (match_operand:HF 1 \"register_operand\")\n+(define_expand \"vec_set<mode>\"\n+  [(match_operand:V8BFH_128 0 \"register_operand\")\n+   (match_operand:<ssescalarmode> 1 \"register_operand\")\n    (match_operand 2 \"vec_setm_sse41_operand\")]\n   \"TARGET_SSE\"\n {\n@@ -11726,7 +11757,7 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn_and_split \"vec_extract_lo_<mode>\"\n+(define_insn_and_split \"@vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,v,m\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V32_512 1 \"nonimmediate_operand\" \"v,m,v\")\n@@ -11768,7 +11799,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"vec_extract_hi_<mode>\"\n+(define_insn \"@vec_extract_hi_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=vm\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V32_512 1 \"register_operand\" \"v\")\n@@ -11788,7 +11819,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn_and_split \"vec_extract_lo_<mode>\"\n+(define_insn_and_split \"@vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V16_256 1 \"nonimmediate_operand\" \"vm,v\")\n@@ -11802,7 +11833,7 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\")\n \n-(define_insn \"vec_extract_hi_<mode>\"\n+(define_insn \"@vec_extract_hi_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=xm,vm,vm\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V16_256 1 \"register_operand\" \"x,v,v\")\n@@ -11944,20 +11975,20 @@\n ;; NB: *vec_extract<mode>_0 must be placed before *vec_extracthf.\n ;; Otherwise, it will be ignored.\n (define_insn_and_split \"*vec_extract<mode>_0\"\n-  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=v,m,r\")\n-\t(vec_select:HF\n-\t  (match_operand:VF_AVX512FP16 1 \"nonimmediate_operand\" \"vm,v,m\")\n+  [(set (match_operand:<ssescalarmode> 0 \"nonimmediate_operand\" \"=v,m,r\")\n+\t(vec_select:<ssescalarmode>\n+\t  (match_operand:VF_AVX512HFBF16 1 \"nonimmediate_operand\" \"vm,v,m\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_AVX512FP16 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (HFmode, operands[1]);\")\n+  \"operands[1] = gen_lowpart (<ssescalarmode>mode, operands[1]);\")\n \n-(define_insn \"*vec_extracthf\"\n-  [(set (match_operand:HF 0 \"register_sse4nonimm_operand\" \"=?r,m,x,v\")\n-\t(vec_select:HF\n-\t  (match_operand:V8HF 1 \"register_operand\" \"v,v,0,v\")\n+(define_insn \"*vec_extract<mode>\"\n+  [(set (match_operand:HFBF 0 \"register_sse4nonimm_operand\" \"=?r,m,x,v\")\n+\t(vec_select:HFBF\n+\t  (match_operand:<ssevecmode> 1 \"register_operand\" \"v,v,0,v\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_7_operand\")])))]\n   \"TARGET_SSE2\"\n@@ -11992,6 +12023,7 @@\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n    (V32HF \"TARGET_AVX512BW\") (V16HF \"TARGET_AVX\") V8HF\n+   (V32BF \"TARGET_AVX512BW\") (V16BF \"TARGET_AVX\") V8BF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -18097,17 +18129,17 @@\n \n ;; Modes handled by pinsr patterns.\n (define_mode_iterator PINSR_MODE\n-  [(V16QI \"TARGET_SSE4_1\") V8HI V8HF\n+  [(V16QI \"TARGET_SSE4_1\") V8HI V8HF V8BF\n    (V4SI \"TARGET_SSE4_1\")\n    (V2DI \"TARGET_SSE4_1 && TARGET_64BIT\")])\n \n (define_mode_attr sse2p4_1\n   [(V16QI \"sse4_1\") (V8HI \"sse2\") (V8HF \"sse2\")\n-   (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n+   (V8BF \"sse2\") (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n \n (define_mode_attr pinsr_evex_isa\n   [(V16QI \"avx512bw\") (V8HI \"avx512bw\") (V8HF \"avx512bw\")\n-   (V4SI \"avx512dq\") (V2DI \"avx512dq\")])\n+   (V8BF \"avx512bw\") (V4SI \"avx512dq\") (V2DI \"avx512dq\")])\n \n ;; sse4_1_pinsrd must come before sse2_loadld since it is preferred.\n (define_insn \"<sse2p4_1>_pinsr<ssemodesuffix>\"\n@@ -25193,11 +25225,12 @@\n    (V32HI \"avx512bw\") (V16HI \"avx512bw\") (V8HI \"avx512bw\")\n    (V16SI \"avx512f\") (V8SI \"avx512f\") (V4SI \"avx512f\")\n    (V8DI \"avx512f\") (V4DI \"avx512f\") (V2DI \"avx512f\")\n-   (V32HF \"avx512bw\") (V16HF \"avx512bw\") (V8HF \"avx512bw\")])\n+   (V32HF \"avx512bw\") (V16HF \"avx512bw\") (V8HF \"avx512bw\")\n+   (V32BF \"avx512bw\") (V16BF \"avx512bw\") (V8BF \"avx512bw\")])\n \n (define_insn \"avx2_pbroadcast<mode>\"\n-  [(set (match_operand:VIHF 0 \"register_operand\" \"=x,v\")\n-\t(vec_duplicate:VIHF\n+  [(set (match_operand:VIHFBF 0 \"register_operand\" \"=x,v\")\n+\t(vec_duplicate:VIHFBF\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"xm,vm\")\n \t    (parallel [(const_int 0)]))))]\n@@ -25210,10 +25243,10 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx2_pbroadcast<mode>_1\"\n-  [(set (match_operand:VIHF_256 0 \"register_operand\" \"=x,x,v,v\")\n-\t(vec_duplicate:VIHF_256\n+  [(set (match_operand:VIHFBF_256 0 \"register_operand\" \"=x,x,v,v\")\n+\t(vec_duplicate:VIHFBF_256\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:VIHF_256 1 \"nonimmediate_operand\" \"m,x,m,v\")\n+\t    (match_operand:VIHFBF_256 1 \"nonimmediate_operand\" \"m,x,m,v\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n   \"@\n@@ -25589,10 +25622,10 @@\n    (set_attr \"mode\" \"V4DF\")])\n \n (define_insn \"<avx512>_vec_dup<mode>_1\"\n-  [(set (match_operand:VIHF_AVX512BW 0 \"register_operand\" \"=v,v\")\n-\t(vec_duplicate:VIHF_AVX512BW\n+  [(set (match_operand:VIHFBF_AVX512BW 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:VIHFBF_AVX512BW\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:VIHF_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (match_operand:VIHFBF_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"@\n@@ -25622,8 +25655,8 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n-  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI12HF_AVX512VL\n+  [(set (match_operand:VI12HFBF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI12HFBF_AVX512VL\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0)]))))]\n@@ -25658,8 +25691,8 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n-  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\" \"=v,v\")\n-\t(vec_duplicate:VI12HF_AVX512VL\n+  [(set (match_operand:VI12HFBF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:VI12HFBF_AVX512VL\n \t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm,r\")))]\n   \"TARGET_AVX512BW\"\n   \"@\n@@ -25759,7 +25792,7 @@\n   [(V8SF \"ss\") (V4DF \"sd\") (V8SI \"ss\") (V4DI \"sd\")])\n ;; Modes handled by AVX2 vec_dup patterns.\n (define_mode_iterator AVX2_VEC_DUP_MODE\n-  [V32QI V16QI V16HI V8HI V8SI V4SI V16HF V8HF])\n+  [V32QI V16QI V16HI V8HI V8SI V4SI V16HF V8HF V16BF V8BF])\n \n (define_insn \"*vec_dup<mode>\"\n   [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,v\")\n@@ -26522,6 +26555,7 @@\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n    (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n+   (V32BF \"TARGET_AVX512F\") (V16BF \"TARGET_AVX\") V8BF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -26534,6 +26568,7 @@\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\")\n    (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n+   (V32BF \"TARGET_AVX512F\") (V16BF \"TARGET_AVX\") V8BF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\")\n    (V4TI \"TARGET_AVX512F\")])"}, {"sha": "71b4d86d36e11737f1d8291db6066cfa66245c44", "filename": "gcc/testsuite/g++.target/i386/vect-bfloat16-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fvect-bfloat16-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fvect-bfloat16-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fvect-bfloat16-1.C?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpblendmw\" 1 } }  */\n+\n+typedef short v8hi __attribute__((vector_size(16)));\n+typedef __bf16 v8bf __attribute__((vector_size(16)));\n+\n+v8bf\n+foo (v8hi a, v8hi b, v8bf c, v8bf d)\n+{\n+      return a > b ? c : d;\n+}\n+"}, {"sha": "dd33f1add9c743f35260070d668f8bc2baa48c37", "filename": "gcc/testsuite/gcc.target/i386/vect-bfloat16-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-1.c?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 1 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\" 1 { target { ! ia32 } } } }  */\n+\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 2 { target ia32 } } }  */\n+#include <immintrin.h>\n+\n+typedef __bf16 __v8bf __attribute__ ((__vector_size__ (16)));\n+typedef __bf16 __m128bf16 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__m128bf16\n+__attribute__ ((noinline, noclone))\n+foo1 (__m128bf16 a, __bf16 f)\n+{\n+  __v8bf x = (__v8bf) a;\n+  x[2] = f;\n+  return (__m128bf16) x;\n+}\n+\n+__m128bf16\n+__attribute__ ((noinline, noclone))\n+foo2 (__m128bf16 a, __bf16 f)\n+{\n+  __v8bf x = (__v8bf) a;\n+  x[0] = f;\n+  return (__m128bf16) x;\n+}"}, {"sha": "70152d03f92c942a366ebb08f0adeac98f3b3a54", "filename": "gcc/testsuite/gcc.target/i386/vect-bfloat16-2a.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2a.c?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+\n+typedef __bf16 v8bf __attribute__ ((__vector_size__ (16)));\n+typedef __bf16 v16bf __attribute__ ((__vector_size__ (32)));\n+typedef __bf16 v32bf __attribute__ ((__vector_size__ (64)));\n+\n+#define VEC_EXTRACT(V,S,IDX)\t\t\t\\\n+  S\t\t\t\t\t\t\\\n+  __attribute__((noipa))\t\t\t\\\n+  vec_extract_##V##_##IDX (V v)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return v[IDX];\t\t\t\t\\\n+  }\n+\n+#define VEC_SET(V,S,IDX)\t\t\t\\\n+  V\t\t\t\t\t\t\\\n+  __attribute__((noipa))\t\t\t\\\n+  vec_set_##V##_##IDX (V v, S s)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    v[IDX] = s;\t\t\t\t\\\n+    return v;\t\t\t\t\t\\\n+  }\n+\n+v8bf\n+vec_init_v8bf (__bf16 a1, __bf16 a2, __bf16 a3, __bf16 a4,\n+\t       __bf16 a5,  __bf16 a6, __bf16 a7, __bf16 a8)\n+{\n+    return __extension__ (v8bf) {a1, a2, a3, a4, a5, a6, a7, a8};\n+}\n+\n+v16bf\n+vec_init_v16bf (__bf16 a1, __bf16 a2, __bf16 a3, __bf16 a4,\n+\t       __bf16 a5,  __bf16 a6, __bf16 a7, __bf16 a8,\n+\t       __bf16 a9,  __bf16 a10, __bf16 a11, __bf16 a12,\n+\t       __bf16 a13,  __bf16 a14, __bf16 a15, __bf16 a16)\n+{\n+    return __extension__ (v16bf) {a1, a2, a3, a4, a5, a6, a7, a8,\n+\t\t\t\t  a9, a10, a11, a12, a13, a14, a15, a16};\n+}\n+\n+v32bf\n+vec_init_v32bf (__bf16 a1, __bf16 a2, __bf16 a3, __bf16 a4,\n+\t\t__bf16 a5, __bf16 a6, __bf16 a7, __bf16 a8,\n+\t\t__bf16 a9, __bf16 a10, __bf16 a11, __bf16 a12,\n+\t\t__bf16 a13, __bf16 a14, __bf16 a15, __bf16 a16,\n+\t\t__bf16 a17, __bf16 a18, __bf16 a19, __bf16 a20,\n+\t\t__bf16 a21, __bf16 a22, __bf16 a23, __bf16 a24,\n+\t\t__bf16 a25, __bf16 a26, __bf16 a27, __bf16 a28,\n+\t\t__bf16 a29, __bf16 a30, __bf16 a31, __bf16 a32)\n+{\n+    return __extension__ (v32bf) {a1, a2, a3, a4, a5, a6, a7, a8,\n+\t\t\t\t  a9, a10, a11, a12, a13, a14, a15, a16,\n+\t\t\t\t  a17, a18, a19, a20, a21, a22, a23, a24,\n+\t\t\t\t  a25, a26, a27, a28, a29, a30, a31, a32};\n+}\n+\n+v8bf\n+vec_init_dup_v8bf (__bf16 a1)\n+{\n+    return __extension__ (v8bf) {a1, a1, a1, a1, a1, a1, a1, a1};\n+}\n+\n+v16bf\n+vec_init_dup_v16bf (__bf16 a1)\n+{\n+    return __extension__ (v16bf) {a1, a1, a1, a1, a1, a1, a1, a1,\n+\t\t\t\t  a1, a1, a1, a1, a1, a1, a1, a1};\n+}\n+\n+v32bf\n+vec_init_dup_v32bf (__bf16 a1)\n+{\n+    return __extension__ (v32bf) {a1, a1, a1, a1, a1, a1, a1, a1,\n+\t\t\t\t  a1, a1, a1, a1, a1, a1, a1, a1,\n+\t\t\t\t  a1, a1, a1, a1, a1, a1, a1, a1,\n+\t\t\t\t  a1, a1, a1, a1, a1, a1, a1, a1};\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckldq\" 14 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklqdq\" 7 } } */\n+\n+VEC_EXTRACT (v8bf, __bf16, 0);\n+VEC_EXTRACT (v8bf, __bf16, 4);\n+VEC_EXTRACT (v16bf, __bf16, 0);\n+VEC_EXTRACT (v16bf, __bf16, 3);\n+VEC_EXTRACT (v16bf, __bf16, 8);\n+VEC_EXTRACT (v16bf, __bf16, 15);\n+VEC_EXTRACT (v32bf, __bf16, 0);\n+VEC_EXTRACT (v32bf, __bf16, 5);\n+VEC_EXTRACT (v32bf, __bf16, 8);\n+VEC_EXTRACT (v32bf, __bf16, 14);\n+VEC_EXTRACT (v32bf, __bf16, 16);\n+VEC_EXTRACT (v32bf, __bf16, 24);\n+VEC_EXTRACT (v32bf, __bf16, 28);\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$8\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$14\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$10\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$12\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextract\" 9 } } */\n+\n+VEC_SET (v8bf, __bf16, 4);\n+VEC_SET (v16bf, __bf16, 3);\n+VEC_SET (v16bf, __bf16, 8);\n+VEC_SET (v16bf, __bf16, 15);\n+VEC_SET (v32bf, __bf16, 5);\n+VEC_SET (v32bf, __bf16, 8);\n+VEC_SET (v32bf, __bf16, 14);\n+VEC_SET (v32bf, __bf16, 16);\n+VEC_SET (v32bf, __bf16, 24);\n+VEC_SET (v32bf, __bf16, 28);\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 13 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 4 { target { ! ia32 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 12 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 3 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 1 { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler-times \"vpblendd\" 3 } } */"}, {"sha": "29bf601d5370122590e2b53c88112ac51afbe44f", "filename": "gcc/testsuite/gcc.target/i386/vect-bfloat16-2b.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-2b.c?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mno-avx512bw -O2\" } */\n+\n+#include \"vect-bfloat16-2a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckldq\" 14 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklqdq\" 7 } } */\n+\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[\\t ]*\\\\\\$14\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextract\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 7 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 4 { target { ! ia32 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 6 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 3 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 63 { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler-times \"vpblendd\" 3 } } */"}, {"sha": "3804bac72200a405cd4a71e24dc3c43a9e31035e", "filename": "gcc/testsuite/gcc.target/i386/vect-bfloat16-typecheck_1.c", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_1.c?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,258 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+\n+#include <immintrin.h>\n+\n+typedef __bf16 __v8bf __attribute__ ((__vector_size__ (16)));\n+typedef __bf16 __m128bf16 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__bf16 glob_bfloat;\n+__m128bf16 glob_bfloat_vec;\n+\n+__m256 is_a_float_vec;\n+__m128 is_a_float_pair;\n+\n+__m128h *float_ptr;\n+__m128h is_a_float16_vec;\n+\n+__v8si is_an_int_vec;\n+__v4si is_an_int_pair;\n+__v8hi is_a_short_vec;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+__m128bf16 footest (__m128bf16 vector0)\n+{\n+  /* Initialisation  */\n+\n+  __m128bf16 vector1_1;\n+  __m128bf16 vector1_2 = glob_bfloat_vec;\n+  __m128bf16 vector1_3 = is_a_float_vec; /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__m256'} }*/\n+  __m128bf16 vector1_4 = is_an_int_vec;  /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__v8si'} } */\n+  __m128bf16 vector1_5 = is_a_float16_vec; /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__m128h'} } */\n+  __m128bf16 vector1_6 = is_a_float_pair; /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__m128'} } */\n+  __m128bf16 vector1_7 = is_an_int_pair; /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__v4si'} } */\n+  __m128bf16 vector1_8 = is_a_short_vec; /* { dg-error {incompatible types when initializing type '__m128bf16' {aka '__vector\\(8\\) __bf16'} using type '__v8hi'} } */\n+\n+  __v8si initi_1_1 = glob_bfloat_vec;   /* { dg-error {incompatible types when initializing type '__v8si' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  __m256 initi_1_2 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type '__m256' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  __m128h initi_1_3 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type '__m128h' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  __m128 initi_1_4 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type '__m128' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  __v4si initi_1_5 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type '__v4si' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  __v4hi initi_1_6 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type '__v4hi' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+\n+  __m128bf16 vector2_1 = {};\n+  __m128bf16 vector2_2 = { glob_bfloat };\n+  __m128bf16 vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n+  __m128bf16 vector2_4 = { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m128bf16 vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  __v8si initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m256 initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m128h initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m128 initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __v4si initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __v4hi initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Assignments to/from vectors.  */\n+\n+  glob_bfloat_vec = glob_bfloat_vec;\n+  glob_bfloat_vec = 0;   /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type 'int'} } */\n+  glob_bfloat_vec = 0.1; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type 'double'} } */\n+  glob_bfloat_vec = is_a_float_vec; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__m256'} } */\n+  glob_bfloat_vec = is_an_int_vec; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__v8si'} } */\n+  glob_bfloat_vec = is_a_float16_vec; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__m128h'} } */\n+  glob_bfloat_vec = is_a_float_pair; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__m128'} } */\n+  glob_bfloat_vec = is_an_int_pair; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__v4si'} } */\n+  glob_bfloat_vec = is_a_short_vec; /* { dg-error {incompatible types when assigning to type '__m128bf16' {aka '__vector\\(8\\) __bf16'} from type '__v8hi'} } */\n+\n+  is_an_int_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__v8si' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  is_a_float_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m256' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  is_a_float16_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m128h' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  is_a_float_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m128' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  is_an_int_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__v4si' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  is_a_short_vec = glob_bfloat_vec;/* { dg-error {incompatible types when assigning to type '__v8hi' from type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+\n+  /* Assignments to/from elements.  */\n+\n+  vector2_3[0] = glob_bfloat;\n+  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = 0; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  glob_bfloat = vector2_3[0];\n+  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Compound literals.  */\n+\n+  (__m128bf16) {};\n+\n+  (__m128bf16) { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__m128bf16) { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__m128bf16) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m256'} } */\n+  (__m128bf16) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__v8si'} } */\n+  (__m128bf16) { is_a_float_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m128'} } */\n+  (__m128bf16) { is_an_int_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__v4si'} } */\n+  (__m128bf16) { is_a_float16_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m128h'} } */\n+  (__m128bf16) { is_a_short_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__v8hi'} } */\n+\n+  (__m128bf16) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  (__v8si) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  (__m256) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'float' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  (__v4si) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  (__m256h) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '_Float16' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+  (__v8hi) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'short int' using type '__m128bf16' {aka '__vector\\(8\\) __bf16'}} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat_vec;\n+  (__m128bf16) glob_bfloat_vec;\n+\n+  (__bf16) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (short) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type '__m128bf16' {aka '__vector\\(8\\) __bf16'} to type 'short int' which has different size} } */\n+  (int) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type '__m128bf16' {aka '__vector\\(8\\) __bf16'} to type 'int' which has different size} } */\n+  (_Float16) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (float) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (double) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+\n+  (__v8si) glob_bfloat_vec; /* { dg-error {cannot convert a value of type '__m128bf16' {aka '__vector\\(8\\) __bf16'} to vector type '__vector\\(8\\) int' which has different size} } */\n+  (__m256) glob_bfloat_vec; /* { dg-error {cannot convert a value of type '__m128bf16' {aka '__vector\\(8\\) __bf16'} to vector type '__vector\\(8\\) float' which has different size} } */\n+  (__m128h) glob_bfloat_vec;\n+  (__v4si) glob_bfloat_vec;\n+  (__m128) glob_bfloat_vec;\n+  (__v8hi) glob_bfloat_vec;\n+\n+  (__m128bf16) is_an_int_vec; /* { dg-error {cannot convert a value of type '__v8si' to vector type '__vector\\(8\\) __bf16' which has different size} } */\n+  (__m128bf16) is_a_float_vec; /* { dg-error {cannot convert a value of type '__m256' to vector type '__vector\\(8\\) __bf16' which has different size} } */\n+  (__m128bf16) is_a_float16_vec;\n+  (__m128bf16) is_an_int_pair;\n+  (__m128bf16) is_a_float_pair;\n+  (__m128bf16) is_a_short_vec;\n+  (__m128bf16) is_a_double; /* { dg-error {cannot convert value to a vector} } */\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef __m128bf16 array_type[2];\n+  extern __m128bf16 extern_array[];\n+\n+  __m128bf16 array[2];\n+  __m128bf16 zero_length_array[0];\n+  __m128bf16 empty_init_array[] = {};\n+  typedef __m128bf16 some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    __m128bf16 a;\n+  };\n+\n+  union union1 {\n+    __m128bf16 a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  __m128bf16 *bfloat_ptr = &vector0;\n+  vector0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  __m128bf16 *bfloat_ptr2 = bfloat_ptr;\n+  __m128bf16 *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0 == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0.1 == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &vector0;\n+  bfloat_ptr != &vector0;\n+  bfloat_ptr < &vector0;\n+  bfloat_ptr <= &vector0;\n+  bfloat_ptr > &vector0;\n+  bfloat_ptr >= &vector0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? vector0 : vector0;\n+  0 ? vector0 : is_a_float_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : is_a_float16_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float16_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0.1 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0.1; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+\n+  vector0 ? vector0 : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? vector0 : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+\n+  /* Unary operators.  */\n+\n+  +vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  -vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ~vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  !vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  __imag vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ++vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  --vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0++; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0--; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  return vector0;\n+}\n+"}, {"sha": "f63b41d832b4dc6f9b4292fe4e6d74ac493aa678", "filename": "gcc/testsuite/gcc.target/i386/vect-bfloat16-typecheck_2.c", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910cad55ffc330dc9767d2c8e0b66ccfa4134af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-bfloat16-typecheck_2.c?ref=6910cad55ffc330dc9767d2c8e0b66ccfa4134af", "patch": "@@ -0,0 +1,248 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+\n+#include <immintrin.h>\n+\n+typedef __bf16 __v16bf __attribute__ ((__vector_size__ (32)));\n+typedef __bf16 __m256bf16 __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+__bf16 glob_bfloat;\n+__m256bf16 glob_bfloat_vec;\n+\n+__m256 is_a_float_vec;\n+\n+__m256h *float_ptr;\n+__m256h is_a_float16_vec;\n+\n+__v8si is_an_int_vec;\n+__m256i is_a_long_int_pair;\n+__v16hi is_a_short_vec;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+__m256bf16 footest (__m256bf16 vector0)\n+{\n+  /* Initialisation  */\n+\n+  __m256bf16 vector1_1;\n+  __m256bf16 vector1_2 = glob_bfloat_vec;\n+  __m256bf16 vector1_3 = is_a_float_vec; /* { dg-error {incompatible types when initializing type '__m256bf16' {aka '__vector\\(16\\) __bf16'} using type '__m256'} } */\n+  __m256bf16 vector1_4 = is_an_int_vec;  /* { dg-error {incompatible types when initializing type '__m256bf16' {aka '__vector\\(16\\) __bf16'} using type '__v8si'} } */\n+  __m256bf16 vector1_5 = is_a_float16_vec; /* { dg-error {incompatible types when initializing type '__m256bf16' {aka '__vector\\(16\\) __bf16'} using type '__m256h'} } */\n+  __m256bf16 vector1_7 = is_a_long_int_pair; /* { dg-error {incompatible types when initializing type '__m256bf16' {aka '__vector\\(16\\) __bf16'} using type '__m256i'} } */\n+  __m256bf16 vector1_8 = is_a_short_vec; /* { dg-error {incompatible types when initializing type '__m256bf16' {aka '__vector\\(16\\) __bf16'} using type '__v16hi'} } */\n+\n+  __v8si initi_1_1 = glob_bfloat_vec;   /* { dg-error {incompatible types when initializing type '__v8si' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  __m256 initi_1_2 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type '__m256' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  __m256h initi_1_3 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type '__m256h' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  __m256i initi_1_5 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type '__m256i' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  __v16hi initi_1_6 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type '__v16hi' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+\n+  __m256bf16 vector2_1 = {};\n+  __m256bf16 vector2_2 = { glob_bfloat };\n+  __m256bf16 vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n+  __m256bf16 vector2_4 = { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __m256bf16 vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error \"invalid conversion to type '__bf16'\" } */\n+\n+  __v8si initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m256 initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m256h initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __m256i initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+  __v16hi initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Assignments to/from vectors.  */\n+\n+  glob_bfloat_vec = glob_bfloat_vec;\n+  glob_bfloat_vec = 0;   /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type 'int'} } */\n+  glob_bfloat_vec = 0.1; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type 'double'} } */\n+  glob_bfloat_vec = is_a_float_vec; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type '__m256'} } */\n+  glob_bfloat_vec = is_an_int_vec; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type '__v8si'} } */\n+  glob_bfloat_vec = is_a_float16_vec; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type '__m256h'} } */\n+  glob_bfloat_vec = is_a_long_int_pair; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type '__m256i'} } */\n+  glob_bfloat_vec = is_a_short_vec; /* { dg-error {incompatible types when assigning to type '__m256bf16' {aka '__vector\\(16\\) __bf16'} from type '__v16hi'} } */\n+\n+  is_an_int_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__v8si' from type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  is_a_float_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m256' from type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  is_a_float16_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m256h' from type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  is_a_long_int_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type '__m256i' from type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  is_a_short_vec = glob_bfloat_vec;/* { dg-error {incompatible types when assigning to type '__v16hi' from type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+\n+  /* Assignments to/from elements.  */\n+\n+  vector2_3[0] = glob_bfloat;\n+  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = 0; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  glob_bfloat = vector2_3[0];\n+  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Compound literals.  */\n+\n+  (__m256bf16) {};\n+\n+  (__m256bf16) { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__m256bf16) { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__m256bf16) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m256'} } */\n+  (__m256bf16) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__v8si'} } */\n+  (__m256bf16) { is_a_long_int_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m256i'} } */\n+  (__m256bf16) { is_a_float16_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m256h'} } */\n+  (__m256bf16) { is_a_short_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__v16hi'} } */\n+\n+  (__m256bf16) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  (__v8si) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  (__m256) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'float' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  (__m256i) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'long long int' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  (__m256h) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '_Float16' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+  (__v16hi) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'short int' using type '__m256bf16' {aka '__vector\\(16\\) __bf16'}} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat_vec;\n+  (__m256bf16) glob_bfloat_vec;\n+\n+  (__bf16) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (short) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type '__m256bf16' {aka '__vector\\(16\\) __bf16'} to type 'short int' which has different size} } */\n+  (int) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type '__m256bf16' {aka '__vector\\(16\\) __bf16'} to type 'int' which has different size} } */\n+  (_Float16) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (float) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (double) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+\n+  (__v8si) glob_bfloat_vec;\n+  (__m256) glob_bfloat_vec;\n+  (__m256h) glob_bfloat_vec;\n+  (__m256i) glob_bfloat_vec;\n+  (__v16hi) glob_bfloat_vec;\n+\n+  (__m256bf16) is_an_int_vec;\n+  (__m256bf16) is_a_float_vec;\n+  (__m256bf16) is_a_float16_vec;\n+  (__m256bf16) is_a_long_int_pair;\n+  (__m256bf16) is_a_short_vec;\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef __m256bf16 array_type[2];\n+  extern __m256bf16 extern_array[];\n+\n+  __m256bf16 array[2];\n+  __m256bf16 zero_length_array[0];\n+  __m256bf16 empty_init_array[] = {};\n+  typedef __m256bf16 some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    __m256bf16 a;\n+  };\n+\n+  union union1 {\n+    __m256bf16 a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  __m256bf16 *bfloat_ptr = &vector0;\n+  vector0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  __m256bf16 *bfloat_ptr2 = bfloat_ptr;\n+  __m256bf16 *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0 == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0.1 == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &vector0;\n+  bfloat_ptr != &vector0;\n+  bfloat_ptr < &vector0;\n+  bfloat_ptr <= &vector0;\n+  bfloat_ptr > &vector0;\n+  bfloat_ptr >= &vector0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? vector0 : vector0;\n+  0 ? vector0 : is_a_float_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : is_a_float16_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float16_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0.1 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0.1; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+\n+  vector0 ? vector0 : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? vector0 : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+\n+  /* Unary operators.  */\n+\n+  +vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  -vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ~vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  !vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  __imag vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ++vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  --vector0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0++; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0--; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  return vector0;\n+}\n+"}]}