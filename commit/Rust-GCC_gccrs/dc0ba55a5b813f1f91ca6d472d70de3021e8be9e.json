{"sha": "dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwYmE1NWE1YjgxM2YxZjkxY2E2ZDQ3MmQ3MGRlMzAyMWU4YmU5ZQ==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-09-05T17:11:47Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-09-05T17:11:47Z"}, "message": "arm.c (arm_return_in_memory): Implement ATPCS return-in-memory rules.\n\n* config/arm/arm.c (arm_return_in_memory): Implement ATPCS\nreturn-in-memory rules.\n* config/arm/arm.h (ARM_FLAG_ATPCS, TARGET_ATPCS): Define.\n\nFrom-SVN: r56858", "tree": {"sha": "0c7617f2763292e8f72c2f38843a0ca80d8b2964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7617f2763292e8f72c2f38843a0ca80d8b2964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/comments", "author": null, "committer": null, "parents": [{"sha": "b5b620a4e85314de0ee24d004f2192193d28fe46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b620a4e85314de0ee24d004f2192193d28fe46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b620a4e85314de0ee24d004f2192193d28fe46"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "708503640b9feb5932f127b11b590bfd62cc1562", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "patch": "@@ -1,3 +1,9 @@\n+2002-09-05  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/arm/arm.c (arm_return_in_memory): Implement ATPCS\n+\treturn-in-memory rules. \n+\t* config/arm/arm.h (ARM_FLAG_ATPCS, TARGET_ATPCS): Define.\n+\n 2002-09-05  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/xcoff.h (HOT_TEXT_SECTION_NAME): Delete."}, {"sha": "93c571dd534595a4da1977f2d2cd6d8c54bf0c66", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "patch": "@@ -1756,9 +1756,20 @@ int\n arm_return_in_memory (type)\n      tree type;\n {\n+  HOST_WIDE_INT size;\n+\n   if (!AGGREGATE_TYPE_P (type))\n     /* All simple types are returned in registers.  */\n     return 0;\n+\n+  size = int_size_in_bytes (type);\n+\n+  if (TARGET_ATPCS)\n+    {\n+      /* ATPCS returns aggregate types in memory only if they are\n+\t larger than a word (or are variable size).  */\n+      return (size < 0 || size > UNITS_PER_WORD);\n+    }\n   \n   /* For the arm-wince targets we choose to be compitable with Microsoft's\n      ARM and Thumb compilers, which always return aggregates in memory.  */\n@@ -1767,7 +1778,7 @@ arm_return_in_memory (type)\n      Also catch the case where int_size_in_bytes returns -1.  In this case\n      the aggregate is either huge or of varaible size, and in either case\n      we will want to return it via memory and not in a register.  */\n-  if (((unsigned int) int_size_in_bytes (type)) > UNITS_PER_WORD)\n+  if (size < 0 || size > UNITS_PER_WORD)\n     return 1;\n   \n   if (TREE_CODE (type) == RECORD_TYPE)"}, {"sha": "ce1961ddf057db4a3f7db51ab11b629df54aa8f8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "patch": "@@ -373,13 +373,17 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Nonzero means target uses VFP FP.  */\n #define ARM_FLAG_VFP\t\t(1 << 21)\n \n+/* Nonzero means to use ARM/Thumb Procedure Call Standard conventions.  */\n+#define ARM_FLAG_ATPCS\t\t(1 << 22)\n+\n #define TARGET_APCS_FRAME\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n #define TARGET_APCS_32\t\t\t(target_flags & ARM_FLAG_APCS_32)\n #define TARGET_APCS_STACK\t\t(target_flags & ARM_FLAG_APCS_STACK)\n #define TARGET_APCS_FLOAT\t\t(target_flags & ARM_FLAG_APCS_FLOAT)\n #define TARGET_APCS_REENT\t\t(target_flags & ARM_FLAG_APCS_REENT)\n+#define TARGET_ATPCS\t\t\t(target_flags & ARM_FLAG_ATPCS)\n #define TARGET_MMU_TRAPS\t\t(target_flags & ARM_FLAG_MMU_TRAPS)\n #define TARGET_SOFT_FLOAT\t\t(target_flags & ARM_FLAG_SOFT_FLOAT)\n #define TARGET_HARD_FLOAT\t\t(! TARGET_SOFT_FLOAT)"}]}