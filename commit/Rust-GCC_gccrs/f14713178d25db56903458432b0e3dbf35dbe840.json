{"sha": "f14713178d25db56903458432b0e3dbf35dbe840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0NzEzMTc4ZDI1ZGI1NjkwMzQ1ODQzMmIwZTNkYmYzNWRiZTg0MA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-14T07:55:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-14T07:55:04Z"}, "message": "Remove higher precision range tests because they are unused.\n\nThis removes the dependency on m_max_pairs from the selftests, which has\nthe ultimate effect of allowing us to put the tests in the selftest\nnamespace as was the original plan.\n\nFrom-SVN: r278200", "tree": {"sha": "45a935648074ac0fcf3f8aae23f062263a94390b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45a935648074ac0fcf3f8aae23f062263a94390b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f14713178d25db56903458432b0e3dbf35dbe840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14713178d25db56903458432b0e3dbf35dbe840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14713178d25db56903458432b0e3dbf35dbe840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14713178d25db56903458432b0e3dbf35dbe840/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "456ccd3284b789c27daa8b93b68a27560a8b1117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456ccd3284b789c27daa8b93b68a27560a8b1117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456ccd3284b789c27daa8b93b68a27560a8b1117"}], "stats": {"total": 167, "additions": 14, "deletions": 153}, "files": [{"sha": "cfb88e67c8c2c1c511e15f99d2fb2959e7cc8546", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f14713178d25db56903458432b0e3dbf35dbe840", "patch": "@@ -1,3 +1,11 @@\n+2019-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (RANGE3): Remove.\n+\t(range_tests): Remove all selftest that check for multi-ranges.\n+\tPut tests in namespace selftest.\n+\t* selftest.h: Move range_tests into namespace selftest.\n+\t* value-range.h (class value_range): Unfriend range_tests.\n+\n 2019-11-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (range_fold_binary_symbolics_p): Adapt for"}, {"sha": "ae3025c6eeac6a5c5a0445c83edfa69338d975f4", "filename": "gcc/range-op.cc", "status": "modified", "additions": 5, "deletions": 148, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=f14713178d25db56903458432b0e3dbf35dbe840", "patch": "@@ -2803,10 +2803,8 @@ range_cast (value_range &r, tree type)\n #include \"selftest.h\"\n #include \"stor-layout.h\"\n \n-// Ideally this should go in namespace selftest, but range_tests\n-// needs to be a friend of class value_range so it can access\n-// value_range::m_max_pairs.\n-\n+namespace selftest\n+{\n #define INT(N) build_int_cst (integer_type_node, (N))\n #define UINT(N) build_int_cstu (unsigned_type_node, (N))\n #define INT16(N) build_int_cst (short_integer_type_node, (N))\n@@ -2817,14 +2815,6 @@ range_cast (value_range &r, tree type)\n #define UCHAR(N) build_int_cstu (unsigned_char_type_node, (N))\n #define SCHAR(N) build_int_cst (signed_char_type_node, (N))\n \n-#define RANGE3(A,B,C,D,E,F)\t\t\\\n-( i1 = value_range (INT (A), INT (B)),\t\\\n-  i2 = value_range (INT (C), INT (D)),\t\\\n-  i3 = value_range (INT (E), INT (F)),\t\\\n-  i1.union_ (i2),\t\t\t\\\n-  i1.union_ (i3),\t\t\t\\\n-  i1 )\n-\n // Run all of the selftests within this file.\n \n void\n@@ -2893,16 +2883,13 @@ range_tests ()\n   ASSERT_TRUE (r0 == r1);\n \n   r1 = value_range (INT (5), INT (5));\n-  r1.check ();\n   value_range r2 (r1);\n   ASSERT_TRUE (r1 == r2);\n \n   r1 = value_range (INT (5), INT (10));\n-  r1.check ();\n \n   r1 = value_range (integer_type_node,\n \t       wi::to_wide (INT (5)), wi::to_wide (INT (10)));\n-  r1.check ();\n   ASSERT_TRUE (r1.contains_p (INT (7)));\n \n   r1 = value_range (SCHAR (0), SCHAR (20));\n@@ -3046,42 +3033,12 @@ range_tests ()\n   r1.union_ (r2);\n   ASSERT_TRUE (r0 == r1);\n \n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // ([10,20] U [5,8]) U [1,3] ==> [1,3][5,8][10,20].\n-      r0 = value_range (INT (10), INT (20));\n-      r1 = value_range (INT (5), INT (8));\n-      r0.union_ (r1);\n-      r1 = value_range (INT (1), INT (3));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == RANGE3 (1, 3, 5, 8, 10, 20));\n-\n-      // [1,3][5,8][10,20] U [-5,0] => [-5,3][5,8][10,20].\n-      r1 = value_range (INT (-5), INT (0));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == RANGE3 (-5, 3, 5, 8, 10, 20));\n-    }\n-\n   // [10,20] U [30,40] ==> [10,20][30,40].\n   r0 = value_range (INT (10), INT (20));\n   r1 = value_range (INT (30), INT (40));\n   r0.union_ (r1);\n   ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n \t\t\t\t  value_range (INT (30), INT (40))));\n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // [10,20][30,40] U [50,60] ==> [10,20][30,40][50,60].\n-      r1 = value_range (INT (50), INT (60));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == RANGE3 (10, 20, 30, 40, 50, 60));\n-      // [10,20][30,40][50,60] U [70, 80] ==> [10,20][30,40][50,60][70,80].\n-      r1 = value_range (INT (70), INT (80));\n-      r0.union_ (r1);\n-\n-      r2 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r2.union_ (value_range (INT (70), INT (80)));\n-      ASSERT_TRUE (r0 == r2);\n-    }\n \n   // Make sure NULL and non-NULL of pointer types work, and that\n   // inverses of them are consistent.\n@@ -3092,35 +3049,6 @@ range_tests ()\n   r0.invert ();\n   ASSERT_TRUE (r0 == r1);\n \n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // [10,20][30,40][50,60] U [6,35] => [6,40][50,60].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (6), INT (35));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == range_union (value_range (INT (6), INT (40)),\n-\t\t\t\t      value_range (INT (50), INT (60))));\n-\n-      // [10,20][30,40][50,60] U [6,60] => [6,60].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (6), INT (60));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == value_range (INT (6), INT (60)));\n-\n-      // [10,20][30,40][50,60] U [6,70] => [6,70].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (6), INT (70));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == value_range (INT (6), INT (70)));\n-\n-      // [10,20][30,40][50,60] U [35,70] => [10,20][30,70].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (35), INT (70));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n-\t\t\t\t      value_range (INT (30), INT (70))));\n-    }\n-\n   // [10,20][30,40] U [25,70] => [10,70].\n   r0 = range_union (value_range (INT (10), INT (20)),\n \t\t     value_range (INT (30), INT (40)));\n@@ -3129,16 +3057,6 @@ range_tests ()\n   ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n \t\t\t\t  value_range (INT (25), INT (70))));\n \n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // [10,20][30,40][50,60] U [15,35] => [10,40][50,60].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (15), INT (35));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (40)),\n-\t\t\t\t      value_range (INT (50), INT (60))));\n-    }\n-\n   // [10,20] U [15, 30] => [10, 30].\n   r0 = value_range (INT (10), INT (20));\n   r1 = value_range (INT (15), INT (30));\n@@ -3152,15 +3070,6 @@ range_tests ()\n   ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n \t\t\t\t  value_range (INT (25), INT (25))));\n \n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // [10,20][30,40][50,60] U [35,35] => [10,20][30,40][50,60].\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = value_range (INT (35), INT (35));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == RANGE3 (10, 20, 30, 40, 50, 60));\n-    }\n-\n   // [15,40] U [] => [15,40].\n   r0 = value_range (INT (15), INT (40));\n   r1.set_undefined ();\n@@ -3179,61 +3088,6 @@ range_tests ()\n   r0.union_ (r1);\n   ASSERT_TRUE (r0 == value_range (INT (9), INT (20)));\n \n-  if (value_range::m_max_pairs > 2)\n-    {\n-      // [10,10][12,12][20,100] ^ [15,200].\n-      r0 = RANGE3 (10, 10, 12, 12, 20, 100);\n-      r1 = value_range (INT (15), INT (200));\n-      r0.intersect (r1);\n-      ASSERT_TRUE (r0 == value_range (INT (20), INT (100)));\n-\n-      // [10,20][30,40][50,60] ^ [15,25][38,51][55,70]\n-      // => [15,20][38,40][50,51][55,60]\n-      r0 = RANGE3 (10, 20, 30, 40, 50, 60);\n-      r1 = RANGE3 (15, 25, 38, 51, 55, 70);\n-      r0.intersect (r1);\n-      if (value_range::m_max_pairs == 3)\n-\t{\n-\t  // When pairs==3, we don't have enough space, so\n-\t  //  conservatively handle things.  Thus, the ...[50,60].\n-\t  ASSERT_TRUE (r0 == RANGE3 (15, 20, 38, 40, 50, 60));\n-\t}\n-      else\n-\t{\n-\t  r2 = RANGE3 (15, 20, 38, 40, 50, 51);\n-\t  r2.union_ (value_range (INT (55), INT (60)));\n-\t  ASSERT_TRUE (r0 == r2);\n-\t}\n-\n-      // [15,20][30,40][50,60] ^ [15,35][40,90][100,200]\n-      // => [15,20][30,35][40,60]\n-      r0 = RANGE3 (15, 20, 30, 40, 50, 60);\n-      r1 = RANGE3 (15, 35, 40, 90, 100, 200);\n-      r0.intersect (r1);\n-      if (value_range::m_max_pairs == 3)\n-\t{\n-\t  // When pairs==3, we don't have enough space, so\n-\t  // conservatively handle things.\n-\t  ASSERT_TRUE (r0 == RANGE3 (15, 20, 30, 35, 40, 60));\n-\t}\n-      else\n-\t{\n-\t  r2 = RANGE3 (15, 20, 30, 35, 40, 40);\n-\t  r2.union_ (value_range (INT (50), INT (60)));\n-\t  ASSERT_TRUE (r0 == r2);\n-\t}\n-\n-      // Test cases where a union inserts a sub-range inside a larger\n-      // range.\n-      //\n-      // [8,10][135,255] U [14,14] => [8,10][14,14][135,255]\n-      r0 = range_union (value_range (INT (8), INT (10)),\n-\t\t\t value_range (INT (135), INT (255)));\n-      r1 = value_range (INT (14), INT (14));\n-      r0.union_ (r1);\n-      ASSERT_TRUE (r0 == RANGE3 (8, 10, 14, 14, 135, 255));\n-    }\n-\n   // [10,20] ^ [15,30] => [15,20].\n   r0 = value_range (INT (10), INT (20));\n   r1 = value_range (INT (15), INT (30));\n@@ -3267,4 +3121,7 @@ range_tests ()\n   r0.invert ();\n   ASSERT_TRUE (r0.nonzero_p ());\n }\n+\n+} // namespace selftest\n+\n #endif // CHECKING_P"}, {"sha": "48d848067cfb848894ba434ec1eba57361d16149", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=f14713178d25db56903458432b0e3dbf35dbe840", "patch": "@@ -237,6 +237,7 @@ extern void opt_problem_cc_tests ();\n extern void optinfo_emit_json_cc_tests ();\n extern void predict_c_tests ();\n extern void pretty_print_c_tests ();\n+extern void range_tests ();\n extern void read_rtl_function_c_tests ();\n extern void rtl_tests_c_tests ();\n extern void sbitmap_c_tests ();\n@@ -260,10 +261,6 @@ extern int num_passes;\n \n } /* end of namespace selftest.  */\n \n-/* This is outside of the selftest namespace because it's a friend of\n-   value_range.  */\n-extern void range_tests ();\n-\n /* Macros for writing tests.  */\n \n /* Evaluate EXPR and coerce to bool, calling"}, {"sha": "5a6cb5236e1df8bcfa13d564736cd7fd019fd390", "filename": "gcc/value-range.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14713178d25db56903458432b0e3dbf35dbe840/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=f14713178d25db56903458432b0e3dbf35dbe840", "patch": "@@ -39,7 +39,6 @@ enum value_range_kind\n \n class GTY((for_user)) value_range\n {\n-  friend void range_tests ();\n public:\n   value_range ();\n   value_range (tree, tree, value_range_kind = VR_RANGE);"}]}