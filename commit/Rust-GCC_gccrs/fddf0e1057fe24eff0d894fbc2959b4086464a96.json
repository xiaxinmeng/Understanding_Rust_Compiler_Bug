{"sha": "fddf0e1057fe24eff0d894fbc2959b4086464a96", "node_id": "C_kwDOANBUbNoAKGZkZGYwZTEwNTdmZTI0ZWZmMGQ4OTRmYmMyOTU5YjQwODY0NjRhOTY", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-10T04:18:24Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-11T20:15:29Z"}, "message": "xtensa: Consider the Loop Option when setmemsi is expanded to small loop\n\nNow apply to almost any size of aligned block under such circumstances.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.cc (xtensa_expand_block_set_small_loop):\n\tPass through the block length / loop count conditions if\n\tzero-overhead looping is configured and active,", "tree": {"sha": "2b24a3ddc3c844f891379a06aa0fca1caf9f0182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b24a3ddc3c844f891379a06aa0fca1caf9f0182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fddf0e1057fe24eff0d894fbc2959b4086464a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddf0e1057fe24eff0d894fbc2959b4086464a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddf0e1057fe24eff0d894fbc2959b4086464a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddf0e1057fe24eff0d894fbc2959b4086464a96/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9489a1ab05ad1bda7126da5513f08282da3e531d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9489a1ab05ad1bda7126da5513f08282da3e531d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9489a1ab05ad1bda7126da5513f08282da3e531d"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "bc3330f836f32a7a7a4dafcca63c0febce91c48b", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddf0e1057fe24eff0d894fbc2959b4086464a96/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddf0e1057fe24eff0d894fbc2959b4086464a96/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=fddf0e1057fe24eff0d894fbc2959b4086464a96", "patch": "@@ -1483,7 +1483,7 @@ xtensa_expand_block_set_unrolled_loop (rtx *operands)\n int\n xtensa_expand_block_set_small_loop (rtx *operands)\n {\n-  HOST_WIDE_INT bytes, value, align;\n+  HOST_WIDE_INT bytes, value, align, count;\n   int expand_len, funccall_len;\n   rtx x, dst, end, reg;\n   machine_mode unit_mode;\n@@ -1503,17 +1503,25 @@ xtensa_expand_block_set_small_loop (rtx *operands)\n   /* Totally-aligned block only.  */\n   if (bytes % align != 0)\n     return 0;\n+  count = bytes / align;\n \n-  /* If 4-byte aligned, small loop substitution is almost optimal, thus\n-     limited to only offset to the end address for ADDI/ADDMI instruction.  */\n-  if (align == 4\n-      && ! (bytes <= 127 || (bytes <= 32512 && bytes % 256 == 0)))\n-    return 0;\n+  /* If the Loop Option (zero-overhead looping) is configured and active,\n+     almost no restrictions about the length of the block.  */\n+  if (! (TARGET_LOOPS && optimize))\n+    {\n+      /* If 4-byte aligned, small loop substitution is almost optimal,\n+\t thus limited to only offset to the end address for ADDI/ADDMI\n+\t instruction.  */\n+      if (align == 4\n+\t  && ! (bytes <= 127 || (bytes <= 32512 && bytes % 256 == 0)))\n+\treturn 0;\n \n-  /* If no 4-byte aligned, loop count should be treated as the constraint.  */\n-  if (align != 4\n-      && bytes / align > ((optimize > 1 && !optimize_size) ? 8 : 15))\n-    return 0;\n+      /* If no 4-byte aligned, loop count should be treated as the\n+\t constraint.  */\n+      if (align != 4\n+\t  && count > ((optimize > 1 && !optimize_size) ? 8 : 15))\n+\treturn 0;\n+    }\n \n   /* Insn expansion: holding the init value.\n      Either MOV(.N) or L32R w/litpool.  */\n@@ -1523,16 +1531,33 @@ xtensa_expand_block_set_small_loop (rtx *operands)\n     expand_len = TARGET_DENSITY ? 2 : 3;\n   else\n     expand_len = 3 + 4;\n-  /* Insn expansion: Either ADDI(.N) or ADDMI for the end address.  */\n-  expand_len += bytes > 127 ? 3\n-\t\t\t    : (TARGET_DENSITY && bytes <= 15) ? 2 : 3;\n-\n-  /* Insn expansion: the loop body and branch instruction.\n-     For store, one of S8I, S16I or S32I(.N).\n-     For advance, ADDI(.N).\n-     For branch, BNE.  */\n-  expand_len += (TARGET_DENSITY && align == 4 ? 2 : 3)\n-\t\t+ (TARGET_DENSITY ? 2 : 3) + 3;\n+  if (TARGET_LOOPS && optimize) /* zero-overhead looping */\n+    {\n+      /* Insn translation: Either MOV(.N) or L32R w/litpool for the\n+\t loop count.  */\n+      expand_len += xtensa_simm12b (count) ? xtensa_sizeof_MOVI (count)\n+\t\t\t\t\t   : 3 + 4;\n+      /* Insn translation: LOOP, the zero-overhead looping setup\n+\t instruction.  */\n+      expand_len += 3;\n+      /* Insn expansion: the loop body instructions.\n+\tFor store, one of S8I, S16I or S32I(.N).\n+\tFor advance, ADDI(.N).  */\n+      expand_len += (TARGET_DENSITY && align == 4 ? 2 : 3)\n+\t\t    + (TARGET_DENSITY ? 2 : 3);\n+    }\n+  else /* NO zero-overhead looping */\n+    {\n+      /* Insn expansion: Either ADDI(.N) or ADDMI for the end address.  */\n+      expand_len += bytes > 127 ? 3\n+\t\t\t\t: (TARGET_DENSITY && bytes <= 15) ? 2 : 3;\n+      /* Insn expansion: the loop body and branch instruction.\n+\tFor store, one of S8I, S16I or S32I(.N).\n+\tFor advance, ADDI(.N).\n+\tFor branch, BNE.  */\n+      expand_len += (TARGET_DENSITY && align == 4 ? 2 : 3)\n+\t\t    + (TARGET_DENSITY ? 2 : 3) + 3;\n+    }\n \n   /* Function call: preparing two arguments.  */\n   funccall_len = xtensa_sizeof_MOVI (value);\n@@ -1555,7 +1580,11 @@ xtensa_expand_block_set_small_loop (rtx *operands)\n   dst = gen_reg_rtx (SImode);\n   emit_move_insn (dst, x);\n   end = gen_reg_rtx (SImode);\n-  emit_insn (gen_addsi3 (end, dst, operands[1] /* the length */));\n+  if (TARGET_LOOPS && optimize)\n+    x = force_reg (SImode, operands[1] /* the length */);\n+  else\n+    x = operands[1];\n+  emit_insn (gen_addsi3 (end, dst, x));\n   switch (align)\n     {\n     case 1:"}]}