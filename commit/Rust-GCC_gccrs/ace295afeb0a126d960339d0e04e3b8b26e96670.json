{"sha": "ace295afeb0a126d960339d0e04e3b8b26e96670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlMjk1YWZlYjBhMTI2ZDk2MDMzOWQwZTA0ZTNiOGIyNmU5NjY3MA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-08T20:57:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-08T20:57:57Z"}, "message": "stl_vector.h (std::vector<>::_M_move_assign): Pass *this allocator instance when building temporary vector instance so that...\n\n2014-01-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_vector.h (std::vector<>::_M_move_assign): Pass\n\t*this allocator instance when building temporary vector instance\n\tso that *this allocator does not get moved.\n\t* include/debug/safe_base.h\n\t(_Safe_sequence_base(_Safe_sequence_base&&)): New.\n\t* include/debug/vector (__gnu_debug::vector<>(vector&&)): Use new\n\tmove constructor from _Safe_sequence_base.\n\t(__gnu_debug::vector<>(vector&&, const allocator_type&)): Swap\n\tsafe iterators if the instance is moved.\n\t(__gnu_debug::vector<>::operator=(vector&&)): Likewise.\n\t* testsuite/23_containers/vector/allocator/move.cc (test01): Add\n\tcheck on a vector iterator.\n\t* testsuite/23_containers/vector/allocator/move_assign.cc\n\t(test02): Likewise.\n\t(test03): New, test with a non-propagating allocator.\n\t* testsuite/23_containers/vector/debug/move_assign_neg.cc: New.\n\nFrom-SVN: r206444", "tree": {"sha": "f55b55ed07f3d73ecc9083e0584eae03f77c1141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55b55ed07f3d73ecc9083e0584eae03f77c1141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace295afeb0a126d960339d0e04e3b8b26e96670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace295afeb0a126d960339d0e04e3b8b26e96670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace295afeb0a126d960339d0e04e3b8b26e96670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace295afeb0a126d960339d0e04e3b8b26e96670/comments", "author": null, "committer": null, "parents": [{"sha": "6170ceff5a6e3ff8022647d43935e99205ef7e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6170ceff5a6e3ff8022647d43935e99205ef7e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6170ceff5a6e3ff8022647d43935e99205ef7e5a"}], "stats": {"total": 127, "additions": 115, "deletions": 12}, "files": [{"sha": "3bfb68dc7042d670115ca727c862cd839650eb0d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -1,3 +1,22 @@\n+2014-01-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_vector.h (std::vector<>::_M_move_assign): Pass\n+\t*this allocator instance when building temporary vector instance\n+\tso that *this allocator does not get moved.\n+\t* include/debug/safe_base.h\n+\t(_Safe_sequence_base(_Safe_sequence_base&&)): New.\n+\t* include/debug/vector (__gnu_debug::vector<>(vector&&)): Use new\n+\tmove constructor from _Safe_sequence_base.\n+\t(__gnu_debug::vector<>(vector&&, const allocator_type&)): Swap\n+\tsafe iterators if the instance is moved.\n+\t(__gnu_debug::vector<>::operator=(vector&&)): Likewise.\n+\t* testsuite/23_containers/vector/allocator/move.cc (test01): Add\n+\tcheck on a vector iterator.\n+\t* testsuite/23_containers/vector/allocator/move_assign.cc\n+\t(test02): Likewise.\n+\t(test03): New, test with a non-propagating allocator.\n+\t* testsuite/23_containers/vector/debug/move_assign_neg.cc: New.\n+\n 2014-01-07  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_compiler.h (_AnyMatcher<>::_AnyMatcher(),"}, {"sha": "3638a8c07efb9f0542f1e0bcce07b1fc4c6b9e7b", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -1433,7 +1433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_move_assign(vector&& __x, std::true_type) noexcept\n       {\n-\tconst vector __tmp(std::move(*this));\n+\tconst vector __tmp(std::move(*this), get_allocator());\n \tthis->_M_impl._M_swap_data(__x._M_impl);\n \tif (_Alloc_traits::_S_propagate_on_move_assign())\n \t  std::__alloc_on_move(_M_get_Tp_allocator(),"}, {"sha": "4b1d082d264e21cefe379b30f9640bd26f4ee1c8", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -192,6 +192,12 @@ namespace __gnu_debug\n     : _M_iterators(0), _M_const_iterators(0), _M_version(1)\n     { }\n \n+#if __cplusplus >= 201103L\n+    _Safe_sequence_base(_Safe_sequence_base&& __x) noexcept\n+      : _Safe_sequence_base()\n+    { _M_swap(__x); }\n+#endif\n+\n     /** Notify all iterators that reference this sequence that the\n \tsequence is being destroyed. */\n     ~_Safe_sequence_base()"}, {"sha": "2b750d792a3af03f5c1c6a1fb0e3d68fec824c93", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -52,6 +52,7 @@ namespace __debug\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n #if __cplusplus >= 201103L\n+      typedef __gnu_debug::_Safe_sequence<vector<_Tp, _Allocator> > _Safe_base;\n       typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n #endif\n \n@@ -111,18 +112,16 @@ namespace __debug\n       vector(const vector& __x)\n       : _Base(__x), _M_guaranteed_capacity(__x.size()) { }\n \n-      /// Construction from a release-mode vector\n+      /// Construction from a normal-mode vector\n       vector(const _Base& __x)\n       : _Base(__x), _M_guaranteed_capacity(__x.size()) { }\n \n #if __cplusplus >= 201103L\n       vector(vector&& __x) noexcept\n       : _Base(std::move(__x)),\n+\t_Safe_base(std::move(__x)),\n \t_M_guaranteed_capacity(this->size())\n-      {\n-\tthis->_M_swap(__x);\n-\t__x._M_guaranteed_capacity = 0;\n-      }\n+      { __x._M_guaranteed_capacity = 0; }\n \n       vector(const vector& __x, const allocator_type& __a)\n       : _Base(__x, __a), _M_guaranteed_capacity(__x.size()) { }\n@@ -131,7 +130,10 @@ namespace __debug\n       : _Base(std::move(__x), __a),\n         _M_guaranteed_capacity(this->size())\n       {\n-\t__x._M_invalidate_all();\n+\tif (__x.get_allocator() == __a)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  __x._M_invalidate_all();\n \t__x._M_guaranteed_capacity = 0;\n       }\n \n@@ -146,7 +148,7 @@ namespace __debug\n       vector&\n       operator=(const vector& __x)\n       {\n-\tstatic_cast<_Base&>(*this) = __x;\n+\t_M_base() = __x;\n \tthis->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n \treturn *this;\n@@ -157,8 +159,13 @@ namespace __debug\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n \t__glibcxx_check_self_move_assign(__x);\n-\t_Base::operator=(std::move(__x));\n-\tthis->_M_invalidate_all();\n+\tbool xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n+\t    || __x.get_allocator() == this->get_allocator();\n+\t_M_base() = std::move(__x._M_base());\n+\tif (xfer_memory)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  this->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n \t__x._M_invalidate_all();\n \t__x._M_guaranteed_capacity = 0;\n@@ -168,7 +175,7 @@ namespace __debug\n       vector&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tstatic_cast<_Base&>(*this) = __l;\n+\t_M_base() = __l;\n \tthis->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n \treturn *this;"}, {"sha": "c6f90d86e1d14690894dbcbec5f7fff85fa07faa", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/move.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove.cc?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -32,9 +32,11 @@ void test01()\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1 = { T() };\n+  auto it = v1.begin();\n   test_type v2(std::move(v1));\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());\n+  VERIFY( it == v2.begin() );\n }\n \n void test02()"}, {"sha": "88c5ad0f30ad1443573c6d5fee6d09dce315f621", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/move_assign.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -46,16 +46,35 @@ void test02()\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.push_back(T());\n+  auto it = v1.begin();\n   test_type v2(alloc_type(2));\n-  v2 = std::move(v1);\n   v2.push_back(T());\n+  v2 = std::move(v1);\n+  VERIFY( it == v2.begin() );\n   VERIFY(0 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());\n }\n \n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::vector<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.push_back(T());\n+  auto it = v1.begin();\n+  test_type v2(alloc_type(1));\n+  v2.push_back(T());\n+  v2 = std::move(v1);\n+  VERIFY( it == v2.begin() );\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "eb2233b35fe1e80687690b89772186368e430306", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/move_assign_neg.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace295afeb0a126d960339d0e04e3b8b26e96670/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc?ref=ace295afeb0a126d960339d0e04e3b8b26e96670", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <debug/vector>\n+\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n+  typedef __gnu_debug::vector<int, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1 = { 0, 1, 2, 3 };\n+\n+  test_type v2(alloc_type(2));\n+  v2 = { 4, 5, 6, 7 };\n+\n+  auto it = v2.begin();\n+\n+  v1 = std::move(v2);\n+\n+  VERIFY( it == v1.begin() ); // Error, it is singular\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}