{"sha": "4d2d5565a0953eaa829d10006baf007cf33bab89", "node_id": "C_kwDOANBUbNoAKDRkMmQ1NTY1YTA5NTNlYWE4MjlkMTAwMDZiYWYwMDdjZjMzYmFiODk", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-12T22:55:50Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-12T22:55:50Z"}, "message": "Fix wrong code with pure functions\n\nI introduced bug into find_func_aliases_for_call in handling pure functions.\nInstead of reading global memory pure functions are believed to write global\nmemory.  This results in misoptimization of the testcase at -O1.\n\nThe change to pta-callused.c updates the template for new behaviour of the\nconstraint generation. We copy nonlocal memory to calluse which is correct but\nalso not strictly necessary because later we take care to add nonlocal_p flag\nmanually.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103209\n\t* tree-ssa-structalias.c (find_func_aliases_for_call): Fix\n\tuse of handle_rhs_call\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103209\n\t* gcc.dg/tree-ssa/pta-callused.c: Update template.\n\t* gcc.c-torture/execute/pr103209.c: New test.", "tree": {"sha": "a6c78a8840e4805de98cab1ecd70952ac692252d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c78a8840e4805de98cab1ecd70952ac692252d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2d5565a0953eaa829d10006baf007cf33bab89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2d5565a0953eaa829d10006baf007cf33bab89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2d5565a0953eaa829d10006baf007cf33bab89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2d5565a0953eaa829d10006baf007cf33bab89/comments", "author": null, "committer": null, "parents": [{"sha": "264f061997c0a5349cdce6d73f0dc167ac7fc8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264f061997c0a5349cdce6d73f0dc167ac7fc8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264f061997c0a5349cdce6d73f0dc167ac7fc8f4"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "481689396f44e0b3fb3fa4b56d4d7675e282b50b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr103209.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103209.c?ref=4d2d5565a0953eaa829d10006baf007cf33bab89", "patch": "@@ -0,0 +1,36 @@\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+int32_t a[6];\n+int64_t b;\n+int32_t *c;\n+int32_t **d = &c;\n+int64_t *e = &b;\n+int32_t **const *f = &d;\n+int32_t **const **g = &f;\n+int32_t *h();\n+static int16_t j();\n+static uint32_t k(int8_t, const int32_t *, int64_t);\n+static uint32_t l() {\n+  int32_t *m = &a[3];\n+  int32_t n = 0;\n+  int8_t o = 0;\n+  int32_t *p[] = {&n, &n, &n, &n};\n+  uint32_t q[6][1][2] = {};\n+  for (o = 0; o <= 1; o = 6)\n+    if (h(j(k(3, 0, q[2][0][0]), &n), n) == p[3])\n+      *m = *e;\n+  return 0;\n+}\n+int32_t *h(uint32_t, int32_t) { return ***g; }\n+int16_t j(uint32_t, int32_t *r) { **f = r; return 0;}\n+uint32_t k(int8_t, const int32_t *, int64_t) { *e = 3; return 0;}\n+int main() {\n+  int i = 0;\n+  l();\n+  for (i = 0; i < 6; i++){\n+    if (i == 3 && a[i] != 3)\n+\t__builtin_abort ();\n+  }\n+  return 0;\n+}"}, {"sha": "b9a57d8d13513c17abfd5c28a4a872589d53d814", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-callused.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c?ref=4d2d5565a0953eaa829d10006baf007cf33bab89", "patch": "@@ -22,5 +22,5 @@ int bar (int b)\n   return *foo (&q);\n }\n \n-/* { dg-final { scan-tree-dump \"CALLUSED\\\\(\\[0-9\\]+\\\\) = { NONLOCAL f.* i q }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"CALLUSED\\\\(\\[0-9\\]+\\\\) = { ESCAPED NONLOCAL f.* i q }\" \"alias\" } } */\n "}, {"sha": "34fd47fdf47b25652afc583ed68ad708bdfe0034", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2d5565a0953eaa829d10006baf007cf33bab89/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=4d2d5565a0953eaa829d10006baf007cf33bab89", "patch": "@@ -4996,7 +4996,7 @@ find_func_aliases_for_call (struct function *fn, gcall *t)\n \t reachable from their arguments, but they are not an escape\n \t point for reachable memory of their arguments.  */\n       else if (flags & (ECF_PURE|ECF_LOOPING_CONST_OR_PURE))\n-\thandle_rhs_call (t, &rhsc, implicit_pure_eaf_flags, true, false);\n+\thandle_rhs_call (t, &rhsc, implicit_pure_eaf_flags, false, true);\n       /* If the call is to a replaceable operator delete and results\n \t from a delete expression as opposed to a direct call to\n \t such operator, then the effects for PTA (in particular"}]}