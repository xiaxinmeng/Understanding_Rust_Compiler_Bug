{"sha": "a3698dfc4a6ef95db7db76ca81266ed2630071a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2OThkZmM0YTZlZjk1ZGI3ZGI3NmNhODEyNjZlZDI2MzAwNzFhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-06T20:38:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-06T20:38:15Z"}, "message": "tree-data-ref.c (struct data_ref_loc_d): Replace pos field with ref.\n\n\t* tree-data-ref.c (struct data_ref_loc_d): Replace pos field with ref.\n\t(get_references_in_stmt): Don't record operand addresses, but\n\toperands themselves.\n\t(find_data_references_in_stmt, graphite_find_data_references_in_stmt):\n\tAdjust for the pos -> ref change.\n\nFrom-SVN: r205760", "tree": {"sha": "30fd56e7da681556820d7d75a2e8774db9369c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30fd56e7da681556820d7d75a2e8774db9369c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3698dfc4a6ef95db7db76ca81266ed2630071a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3698dfc4a6ef95db7db76ca81266ed2630071a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3698dfc4a6ef95db7db76ca81266ed2630071a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3698dfc4a6ef95db7db76ca81266ed2630071a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbafacb6116c8009a114b2f5cfc703347453732c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbafacb6116c8009a114b2f5cfc703347453732c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbafacb6116c8009a114b2f5cfc703347453732c"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "e965f96f5cd20c9f66f9dc2a60a6c36d1f6520fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3698dfc4a6ef95db7db76ca81266ed2630071a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3698dfc4a6ef95db7db76ca81266ed2630071a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3698dfc4a6ef95db7db76ca81266ed2630071a1", "patch": "@@ -1,3 +1,11 @@\n+2013-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-data-ref.c (struct data_ref_loc_d): Replace pos field with ref.\n+\t(get_references_in_stmt): Don't record operand addresses, but\n+\toperands themselves.\n+\t(find_data_references_in_stmt, graphite_find_data_references_in_stmt):\n+\tAdjust for the pos -> ref change.\n+\n 2013-12-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.gcc: Change --with-cpu=ia to --with-cpu=intel."}, {"sha": "09b50d80f4a9d4bfb722bf33a4466932c69dc0f3", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3698dfc4a6ef95db7db76ca81266ed2630071a1/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3698dfc4a6ef95db7db76ca81266ed2630071a1/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=a3698dfc4a6ef95db7db76ca81266ed2630071a1", "patch": "@@ -4320,8 +4320,8 @@ compute_all_dependences (vec<data_reference_p> datarefs,\n \n typedef struct data_ref_loc_d\n {\n-  /* Position of the memory reference.  */\n-  tree *pos;\n+  /* The memory reference.  */\n+  tree ref;\n \n   /* True if the memory reference is read.  */\n   bool is_read;\n@@ -4336,7 +4336,7 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n {\n   bool clobbers_memory = false;\n   data_ref_loc ref;\n-  tree *op0, *op1;\n+  tree op0, op1;\n   enum gimple_code stmt_code = gimple_code (stmt);\n \n   /* ASM_EXPR and CALL_EXPR may embed arbitrary side effects.\n@@ -4369,15 +4369,15 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n   if (stmt_code == GIMPLE_ASSIGN)\n     {\n       tree base;\n-      op0 = gimple_assign_lhs_ptr (stmt);\n-      op1 = gimple_assign_rhs1_ptr (stmt);\n+      op0 = gimple_assign_lhs (stmt);\n+      op1 = gimple_assign_rhs1 (stmt);\n \n-      if (DECL_P (*op1)\n-\t  || (REFERENCE_CLASS_P (*op1)\n-\t      && (base = get_base_address (*op1))\n+      if (DECL_P (op1)\n+\t  || (REFERENCE_CLASS_P (op1)\n+\t      && (base = get_base_address (op1))\n \t      && TREE_CODE (base) != SSA_NAME))\n \t{\n-\t  ref.pos = op1;\n+\t  ref.ref = op1;\n \t  ref.is_read = true;\n \t  references->safe_push (ref);\n \t}\n@@ -4386,16 +4386,16 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n     {\n       unsigned i, n;\n \n-      op0 = gimple_call_lhs_ptr (stmt);\n+      op0 = gimple_call_lhs (stmt);\n       n = gimple_call_num_args (stmt);\n       for (i = 0; i < n; i++)\n \t{\n-\t  op1 = gimple_call_arg_ptr (stmt, i);\n+\t  op1 = gimple_call_arg (stmt, i);\n \n-\t  if (DECL_P (*op1)\n-\t      || (REFERENCE_CLASS_P (*op1) && get_base_address (*op1)))\n+\t  if (DECL_P (op1)\n+\t      || (REFERENCE_CLASS_P (op1) && get_base_address (op1)))\n \t    {\n-\t      ref.pos = op1;\n+\t      ref.ref = op1;\n \t      ref.is_read = true;\n \t      references->safe_push (ref);\n \t    }\n@@ -4404,11 +4404,11 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n   else\n     return clobbers_memory;\n \n-  if (*op0\n-      && (DECL_P (*op0)\n-\t  || (REFERENCE_CLASS_P (*op0) && get_base_address (*op0))))\n+  if (op0\n+      && (DECL_P (op0)\n+\t  || (REFERENCE_CLASS_P (op0) && get_base_address (op0))))\n     {\n-      ref.pos = op0;\n+      ref.ref = op0;\n       ref.is_read = false;\n       references->safe_push (ref);\n     }\n@@ -4435,7 +4435,7 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n   FOR_EACH_VEC_ELT (references, i, ref)\n     {\n       dr = create_data_ref (nest, loop_containing_stmt (stmt),\n-\t\t\t    *ref->pos, stmt, ref->is_read);\n+\t\t\t    ref->ref, stmt, ref->is_read);\n       gcc_assert (dr != NULL);\n       datarefs->safe_push (dr);\n     }\n@@ -4464,7 +4464,7 @@ graphite_find_data_references_in_stmt (loop_p nest, loop_p loop, gimple stmt,\n \n   FOR_EACH_VEC_ELT (references, i, ref)\n     {\n-      dr = create_data_ref (nest, loop, *ref->pos, stmt, ref->is_read);\n+      dr = create_data_ref (nest, loop, ref->ref, stmt, ref->is_read);\n       gcc_assert (dr != NULL);\n       datarefs->safe_push (dr);\n     }"}]}