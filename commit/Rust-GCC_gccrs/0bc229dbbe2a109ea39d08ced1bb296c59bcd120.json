{"sha": "0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjMjI5ZGJiZTJhMTA5ZWEzOWQwOGNlZDFiYjI5NmM1OWJjZDEyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-16T10:04:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-16T10:04:50Z"}, "message": "Remove unnecessary non-const accessors in hash table bases\n\nThe const accessors are OK (and arguably more correct) for most callers\nto use. The _M_swap functions that use the non-const overloads can just\ndirectly use the _S_get members of the EBO helpers.\n\n\t* include/bits/hashtable_policy.h (_Hash_code_base::_M_swap): Use\n\t_S_get accessors for members in EBO helpers.\n\t(_Hash_code_base::_M_extract(), _Hash_code_base::_M_ranged_hash())\n\t(_Hash_code_base::_M_h1(), _Hash_code_base::_M_h2()): Remove non-const\n\toverloads.\n\t(_Hashtable_base::_M_swap): Use _S_get accessors for members in EBO\n\thelpers.\n\t(_Hashtable_base::_M_eq()): Remove non-const overload.\n\nFrom-SVN: r271286", "tree": {"sha": "a33625dd7b815900c4872972d8f8a1a082241b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a33625dd7b815900c4872972d8f8a1a082241b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc229dbbe2a109ea39d08ced1bb296c59bcd120/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8e35f1b1df60633aeb0bf37ea9f6311f2132b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8e35f1b1df60633aeb0bf37ea9f6311f2132b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8e35f1b1df60633aeb0bf37ea9f6311f2132b9"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "acb6b1766950a956aa216bfb15f8794517895c72", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc229dbbe2a109ea39d08ced1bb296c59bcd120/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc229dbbe2a109ea39d08ced1bb296c59bcd120/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "patch": "@@ -1,3 +1,14 @@\n+2019-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable_policy.h (_Hash_code_base::_M_swap): Use\n+\t_S_get accessors for members in EBO helpers.\n+\t(_Hash_code_base::_M_extract(), _Hash_code_base::_M_ranged_hash())\n+\t(_Hash_code_base::_M_h1(), _Hash_code_base::_M_h2()): Remove non-const\n+\toverloads.\n+\t(_Hashtable_base::_M_swap): Use _S_get accessors for members in EBO\n+\thelpers.\n+\t(_Hashtable_base::_M_eq()): Remove non-const overload.\n+\n 2019-05-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (visit, visit<R>): Qualify calls to __do_visit."}, {"sha": "b417a7d442c39be1e4b7ac780169d750491bb293", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc229dbbe2a109ea39d08ced1bb296c59bcd120/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc229dbbe2a109ea39d08ced1bb296c59bcd120/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "patch": "@@ -1229,21 +1229,16 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(_M_extract(), __x._M_extract());\n-\tstd::swap(_M_ranged_hash(), __x._M_ranged_hash());\n+\tstd::swap(__ebo_extract_key::_S_get(*this),\n+\t\t  __ebo_extract_key::_S_get(__x));\n+\tstd::swap(__ebo_hash::_S_get(*this), __ebo_hash::_S_get(__x));\n       }\n \n       const _ExtractKey&\n       _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n \n-      _ExtractKey&\n-      _M_extract() { return __ebo_extract_key::_S_get(*this); }\n-\n       const _Hash&\n       _M_ranged_hash() const { return __ebo_hash::_S_cget(*this); }\n-\n-      _Hash&\n-      _M_ranged_hash() { return __ebo_hash::_S_get(*this); }\n     };\n \n   // No specialization for ranged hash function while caching hash codes.\n@@ -1322,28 +1317,20 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(_M_extract(), __x._M_extract());\n-\tstd::swap(_M_h1(), __x._M_h1());\n-\tstd::swap(_M_h2(), __x._M_h2());\n+\tstd::swap(__ebo_extract_key::_S_get(*this),\n+\t\t  __ebo_extract_key::_S_get(__x));\n+\tstd::swap(__ebo_h1::_S_get(*this), __ebo_h1::_S_get(__x));\n+\tstd::swap(__ebo_h2::_S_get(*this), __ebo_h2::_S_get(__x));\n       }\n \n       const _ExtractKey&\n       _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n \n-      _ExtractKey&\n-      _M_extract() { return __ebo_extract_key::_S_get(*this); }\n-\n       const _H1&\n       _M_h1() const { return __ebo_h1::_S_cget(*this); }\n \n-      _H1&\n-      _M_h1() { return __ebo_h1::_S_get(*this); }\n-\n       const _H2&\n       _M_h2() const { return __ebo_h2::_S_cget(*this); }\n-\n-      _H2&\n-      _M_h2() { return __ebo_h2::_S_get(*this); }\n     };\n \n   /// Specialization: hash function and range-hashing function,\n@@ -1410,28 +1397,20 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(_M_extract(), __x._M_extract());\n-\tstd::swap(_M_h1(), __x._M_h1());\n-\tstd::swap(_M_h2(), __x._M_h2());\n+\tstd::swap(__ebo_extract_key::_S_get(*this),\n+\t\t  __ebo_extract_key::_S_get(__x));\n+\tstd::swap(__ebo_h1::_S_get(*this), __ebo_h1::_S_get(__x));\n+\tstd::swap(__ebo_h2::_S_get(*this), __ebo_h2::_S_get(__x));\n       }\n \n       const _ExtractKey&\n       _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n \n-      _ExtractKey&\n-      _M_extract() { return __ebo_extract_key::_S_get(*this); }\n-\n       const _H1&\n       _M_h1() const { return __ebo_h1::_S_cget(*this); }\n \n-      _H1&\n-      _M_h1() { return __ebo_h1::_S_get(*this); }\n-\n       const _H2&\n       _M_h2() const { return __ebo_h2::_S_cget(*this); }\n-\n-      _H2&\n-      _M_h2() { return __ebo_h2::_S_get(*this); }\n     };\n \n   /**\n@@ -1840,14 +1819,11 @@ namespace __detail\n     _M_swap(_Hashtable_base& __x)\n     {\n       __hash_code_base::_M_swap(__x);\n-      std::swap(_M_eq(), __x._M_eq());\n+      std::swap(_EqualEBO::_S_get(*this), _EqualEBO::_S_get(__x));\n     }\n \n     const _Equal&\n     _M_eq() const { return _EqualEBO::_S_cget(*this); }\n-\n-    _Equal&\n-    _M_eq() { return _EqualEBO::_S_get(*this); }\n   };\n \n   /**"}]}