{"sha": "f411364823c12f94105779db7f8e812b6acbe1a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxMTM2NDgyM2MxMmY5NDEwNTc3OWRiN2Y4ZTgxMmI2YWNiZTFhOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2007-12-20T03:42:17Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-12-20T03:42:17Z"}, "message": "re PR tree-optimization/34413 (gfortran.dg/ltrans-7.f90 doesn't work)\n\n2007-12-19  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/34413\n\t* tree-data-ref.c (affine_fn_op, analyze_ziv_subscript,\n\tanalyze_siv_subscript_cst_affine, analyze_miv_subscript,\n\tomega_setup_subscript): Use long_integer_type_node instead of\n\tinteger_type_node.\n\nFrom-SVN: r131097", "tree": {"sha": "4a018591dbae80b8c9476064dd2c0bcea40bba04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a018591dbae80b8c9476064dd2c0bcea40bba04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f411364823c12f94105779db7f8e812b6acbe1a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f411364823c12f94105779db7f8e812b6acbe1a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f411364823c12f94105779db7f8e812b6acbe1a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f411364823c12f94105779db7f8e812b6acbe1a8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f946206c0eb307caa93dea8d55a7a2416e64049f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f946206c0eb307caa93dea8d55a7a2416e64049f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f946206c0eb307caa93dea8d55a7a2416e64049f"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "070123da93c04b097c63eb9f4e428048965bc714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f411364823c12f94105779db7f8e812b6acbe1a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f411364823c12f94105779db7f8e812b6acbe1a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f411364823c12f94105779db7f8e812b6acbe1a8", "patch": "@@ -1,3 +1,11 @@\n+2007-12-19  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/34413\n+\t* tree-data-ref.c (affine_fn_op, analyze_ziv_subscript,\n+\tanalyze_siv_subscript_cst_affine, analyze_miv_subscript,\n+\tomega_setup_subscript): Use long_integer_type_node instead of\n+\tinteger_type_node.\n+\n 2007-12-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/34525"}, {"sha": "32a3197f82048375763df7c786174032bb644621", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f411364823c12f94105779db7f8e812b6acbe1a8/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f411364823c12f94105779db7f8e812b6acbe1a8/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=f411364823c12f94105779db7f8e812b6acbe1a8", "patch": "@@ -959,17 +959,17 @@ affine_fn_op (enum tree_code op, affine_fn fna, affine_fn fnb)\n   ret = VEC_alloc (tree, heap, m);\n   for (i = 0; i < n; i++)\n     VEC_quick_push (tree, ret,\n-\t\t    fold_build2 (op, integer_type_node,\n+\t\t    fold_build2 (op, long_integer_type_node,\n \t\t\t\t VEC_index (tree, fna, i), \n \t\t\t\t VEC_index (tree, fnb, i)));\n \n   for (; VEC_iterate (tree, fna, i, coef); i++)\n     VEC_quick_push (tree, ret,\n-\t\t    fold_build2 (op, integer_type_node,\n+\t\t    fold_build2 (op, long_integer_type_node,\n \t\t\t\t coef, integer_zero_node));\n   for (; VEC_iterate (tree, fnb, i, coef); i++)\n     VEC_quick_push (tree, ret,\n-\t\t    fold_build2 (op, integer_type_node,\n+\t\t    fold_build2 (op, long_integer_type_node,\n \t\t\t\t integer_zero_node, coef));\n \n   return ret;\n@@ -1490,9 +1490,9 @@ analyze_ziv_subscript (tree chrec_a,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"(analyze_ziv_subscript \\n\");\n   \n-  chrec_a = chrec_convert (integer_type_node, chrec_a, NULL_TREE);\n-  chrec_b = chrec_convert (integer_type_node, chrec_b, NULL_TREE);\n-  difference = chrec_fold_minus (integer_type_node, chrec_a, chrec_b);\n+  chrec_a = chrec_convert (long_integer_type_node, chrec_a, NULL_TREE);\n+  chrec_b = chrec_convert (long_integer_type_node, chrec_b, NULL_TREE);\n+  difference = chrec_fold_minus (long_integer_type_node, chrec_a, chrec_b);\n   \n   switch (TREE_CODE (difference))\n     {\n@@ -1620,10 +1620,10 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n   bool value0, value1, value2;\n   tree difference, tmp;\n \n-  chrec_a = chrec_convert (integer_type_node, chrec_a, NULL_TREE);\n-  chrec_b = chrec_convert (integer_type_node, chrec_b, NULL_TREE);\n+  chrec_a = chrec_convert (long_integer_type_node, chrec_a, NULL_TREE);\n+  chrec_b = chrec_convert (long_integer_type_node, chrec_b, NULL_TREE);\n   difference = chrec_fold_minus \n-    (integer_type_node, initial_condition (chrec_b), chrec_a);\n+    (long_integer_type_node, initial_condition (chrec_b), chrec_a);\n   \n   if (!chrec_is_positive (initial_condition (difference), &value0))\n     {\n@@ -1666,9 +1666,9 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n \t\t      struct loop *loop = get_chrec_loop (chrec_b);\n \n \t\t      *overlaps_a = conflict_fn (1, affine_fn_cst (integer_zero_node));\n-\t\t      tmp = fold_build2 (EXACT_DIV_EXPR, integer_type_node,\n+\t\t      tmp = fold_build2 (EXACT_DIV_EXPR, long_integer_type_node,\n \t\t\t\t\t fold_build1 (ABS_EXPR,\n-\t\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t\t      long_integer_type_node,\n \t\t\t\t\t\t      difference),\n \t\t\t\t\t CHREC_RIGHT (chrec_b));\n \t\t      *overlaps_b = conflict_fn (1, affine_fn_cst (tmp));\n@@ -1749,7 +1749,7 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n \n \t\t      *overlaps_a = conflict_fn (1, affine_fn_cst (integer_zero_node));\n \t\t      tmp = fold_build2 (EXACT_DIV_EXPR,\n-\t\t\t\t\t integer_type_node, difference, \n+\t\t\t\t\t long_integer_type_node, difference, \n \t\t\t\t\t CHREC_RIGHT (chrec_b));\n \t\t      *overlaps_b = conflict_fn (1, affine_fn_cst (tmp));\n \t\t      *last_conflicts = integer_one_node;\n@@ -2450,9 +2450,9 @@ analyze_miv_subscript (tree chrec_a,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"(analyze_miv_subscript \\n\");\n \n-  chrec_a = chrec_convert (integer_type_node, chrec_a, NULL_TREE);\n-  chrec_b = chrec_convert (integer_type_node, chrec_b, NULL_TREE);\n-  difference = chrec_fold_minus (integer_type_node, chrec_a, chrec_b);\n+  chrec_a = chrec_convert (long_integer_type_node, chrec_a, NULL_TREE);\n+  chrec_b = chrec_convert (long_integer_type_node, chrec_b, NULL_TREE);\n+  difference = chrec_fold_minus (long_integer_type_node, chrec_a, chrec_b);\n   \n   if (eq_evolutions_p (chrec_a, chrec_b))\n     {\n@@ -3400,9 +3400,9 @@ omega_setup_subscript (tree access_fun_a, tree access_fun_b,\n \t\t       omega_pb pb, bool *maybe_dependent)\n {\n   int eq;\n-  tree fun_a = chrec_convert (integer_type_node, access_fun_a, NULL_TREE);\n-  tree fun_b = chrec_convert (integer_type_node, access_fun_b, NULL_TREE);\n-  tree difference = chrec_fold_minus (integer_type_node, fun_a, fun_b);\n+  tree fun_a = chrec_convert (long_integer_type_node, access_fun_a, NULL_TREE);\n+  tree fun_b = chrec_convert (long_integer_type_node, access_fun_b, NULL_TREE);\n+  tree difference = chrec_fold_minus (long_integer_type_node, fun_a, fun_b);\n \n   /* When the fun_a - fun_b is not constant, the dependence is not\n      captured by the classic distance vector representation.  */\n@@ -3417,7 +3417,7 @@ omega_setup_subscript (tree access_fun_a, tree access_fun_b,\n       return true;\n     }\n \n-  fun_b = chrec_fold_multiply (integer_type_node, fun_b, \n+  fun_b = chrec_fold_multiply (long_integer_type_node, fun_b, \n \t\t\t       integer_minus_one_node);\n \n   eq = omega_add_zero_eq (pb, omega_black);"}]}