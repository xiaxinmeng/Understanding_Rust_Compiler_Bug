{"sha": "bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkZmU1YzgxN2ViNDI3ZjhiZGM5MDFiZWJjMTViNTViYzg1ZTMxOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-11-14T13:44:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-11-14T13:44:48Z"}, "message": "arm: Add testsuite checks for asm-flag\n\nInspired by the tests in gcc.target/i386.  Testing code generation,\ndiagnostics, and execution.\n\n\t* gcc.target/arm/asm-flag-1.c: New test.\n\t* gcc.target/arm/asm-flag-3.c: New test.\n\t* gcc.target/arm/asm-flag-5.c: New test.\n\t* gcc.target/arm/asm-flag-6.c: New test.\n\nFrom-SVN: r278227", "tree": {"sha": "7cf9643c65ca3494bedd99016823badb0c80714f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf9643c65ca3494bedd99016823badb0c80714f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a7a35c70b5375e5067194d7430e49007f04e243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7a35c70b5375e5067194d7430e49007f04e243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7a35c70b5375e5067194d7430e49007f04e243"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "494c9eed8bd688bd6b8c98989811ae70ac440448", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "patch": "@@ -1,3 +1,10 @@\n+2019-11-14  Richard Henderson  <richard.henderson@linaro.org>\n+\n+\t* gcc.target/arm/asm-flag-1.c: New test.\n+\t* gcc.target/arm/asm-flag-3.c: New test.\n+\t* gcc.target/arm/asm-flag-5.c: New test.\n+\t* gcc.target/arm/asm-flag-6.c: New test.\n+\n 2019-11-14  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/inline-9.c: New testcase."}, {"sha": "9707ebfcebb61ca1ee80cfe4765c869a407b711c", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c?ref=bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "patch": "@@ -0,0 +1,36 @@\n+/* Test the valid @cc<cc> asm flag outputs.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef __GCC_ASM_FLAG_OUTPUTS__\n+#error \"missing preprocessor define\"\n+#endif\n+\n+void f(char *out)\n+{\n+  asm(\"\"\n+      : \"=@ccne\"(out[0]), \"=@cceq\"(out[1]),\n+\t\"=@cccs\"(out[2]), \"=@cccc\"(out[3]),\n+\t\"=@ccmi\"(out[4]), \"=@ccpl\"(out[5]),\n+\t\"=@ccvs\"(out[6]), \"=@ccvc\"(out[7]),\n+\t\"=@cchi\"(out[8]), \"=@ccls\"(out[9]),\n+\t\"=@ccge\"(out[10]), \"=@cclt\"(out[11]),\n+\t\"=@ccgt\"(out[12]), \"=@ccle\"(out[13]),\n+\t\"=@cchs\"(out[14]), \"=@cclo\"(out[15]));\n+}\n+\n+/* There will be at least one of each.  */\n+/* { dg-final { scan-assembler \"movne\" } } */\n+/* { dg-final { scan-assembler \"moveq\" } } */\n+/* { dg-final { scan-assembler \"movcs\" } } */\n+/* { dg-final { scan-assembler \"movcc\" } } */\n+/* { dg-final { scan-assembler \"movmi\" } } */\n+/* { dg-final { scan-assembler \"movpl\" } } */\n+/* { dg-final { scan-assembler \"movvs\" } } */\n+/* { dg-final { scan-assembler \"movvc\" } } */\n+/* { dg-final { scan-assembler \"movhi\" } } */\n+/* { dg-final { scan-assembler \"movls\" } } */\n+/* { dg-final { scan-assembler \"movge\" } } */\n+/* { dg-final { scan-assembler \"movls\" } } */\n+/* { dg-final { scan-assembler \"movgt\" } } */\n+/* { dg-final { scan-assembler \"movle\" } } */"}, {"sha": "e84e3431277d3d0f2ca22471dd3c58a7c12c601b", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c?ref=bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "patch": "@@ -0,0 +1,38 @@\n+/* Test some of the valid @cc<cc> asm flag outputs.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#define DO(C) \\\n+void f##C(void) { char x; asm(\"\" : \"=@cc\"#C(x)); if (!x) asm(\"\"); asm(\"\"); }\n+\n+DO(ne)\n+DO(eq)\n+DO(cs)\n+DO(cc)\n+DO(hs)\n+DO(lo)\n+DO(mi)\n+DO(pl)\n+DO(vs)\n+DO(vc)\n+DO(hi)\n+DO(ls)\n+DO(ge)\n+DO(lt)\n+DO(gt)\n+DO(le)\n+\n+/* { dg-final { scan-assembler \"bne\" } } */\n+/* { dg-final { scan-assembler \"beq\" } } */\n+/* { dg-final { scan-assembler \"bcs\" } } */\n+/* { dg-final { scan-assembler \"bcc\" } } */\n+/* { dg-final { scan-assembler \"bmi\" } } */\n+/* { dg-final { scan-assembler \"bpl\" } } */\n+/* { dg-final { scan-assembler \"bvs\" } } */\n+/* { dg-final { scan-assembler \"bvc\" } } */\n+/* { dg-final { scan-assembler \"bhi\" } } */\n+/* { dg-final { scan-assembler \"bls\" } } */\n+/* { dg-final { scan-assembler \"bge\" } } */\n+/* { dg-final { scan-assembler \"blt\" } } */\n+/* { dg-final { scan-assembler \"bgt\" } } */\n+/* { dg-final { scan-assembler \"ble\" } } */"}, {"sha": "4d4394e1478273c5af77283916f5367ea4134fe7", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-5.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c?ref=bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "patch": "@@ -0,0 +1,30 @@\n+/* Test error conditions of asm flag outputs.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void f_B(void) { _Bool x; asm(\"\" : \"=@cccc\"(x)); }\n+void f_c(void) { char x; asm(\"\" : \"=@cccc\"(x)); }\n+void f_s(void) { short x; asm(\"\" : \"=@cccc\"(x)); }\n+void f_i(void) { int x; asm(\"\" : \"=@cccc\"(x)); }\n+void f_l(void) { long x; asm(\"\" : \"=@cccc\"(x)); }\n+void f_ll(void) { long long x; asm(\"\" : \"=@cccc\"(x)); }\n+\n+void f_f(void)\n+{\n+  float x;\n+  asm(\"\" : \"=@cccc\"(x)); /* { dg-error invalid type } */\n+}\n+\n+void f_d(void)\n+{\n+  double x;\n+  asm(\"\" : \"=@cccc\"(x)); /* { dg-error invalid type } */\n+}\n+\n+struct S { int x[3]; };\n+\n+void f_S(void)\n+{\n+  struct S x;\n+  asm(\"\" : \"=@cccc\"(x)); /* { dg-error invalid type } */\n+}"}, {"sha": "09174e04ae6cc41ee265aec64c0445e8611d29c0", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-6.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdfe5c817eb427f8bdc901bebc15b55bc85e319/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c?ref=bcdfe5c817eb427f8bdc901bebc15b55bc85e319", "patch": "@@ -0,0 +1,62 @@\n+/* Executable testcase for 'output flags.'  */\n+/* { dg-do run } */\n+\n+int test_bits (long nzcv)\n+{\n+  long n, z, c, v;\n+\n+  __asm__ (\"msr APSR_nzcvq, %[in]\"\n+\t   : \"=@ccmi\"(n), \"=@cceq\"(z), \"=@cccs\"(c), \"=@ccvs\"(v)\n+\t   : [in] \"r\"(nzcv << 28));\n+\n+  return n * 8 + z * 4 + c * 2 + v == nzcv;\n+}\n+\t\n+int test_cmps (long x, long y)\n+{\n+  long gt, lt, ge, le;\n+\n+  __asm__ (\"cmp %[x], %[y]\"\n+\t   : \"=@ccgt\"(gt), \"=@cclt\"(lt), \"=@ccge\"(ge), \"=@ccle\"(le)\n+\t   : [x] \"r\"(x), [y] \"r\"(y));\n+\n+  return (gt == (x > y)\n+\t  && lt == (x < y)\n+\t  && ge == (x >= y)\n+\t  && le == (x <= y));\n+}\n+\n+int test_cmpu (unsigned long x, unsigned long y)\n+{\n+  long gt, lt, ge, le;\n+\n+  __asm__ (\"cmp %[x], %[y]\"\n+\t   : \"=@cchi\"(gt), \"=@cclo\"(lt), \"=@cchs\"(ge), \"=@ccls\"(le)\n+\t   : [x] \"r\"(x), [y] \"r\"(y));\n+\n+  return (gt == (x > y)\n+\t  && lt == (x < y)\n+\t  && ge == (x >= y)\n+\t  && le == (x <= y));\n+}\n+\n+int main ()\n+{\n+  long i, j;\n+\n+  for (i = 0; i < 16; ++i)\n+    if (!test_bits (i))\n+      __builtin_abort ();\n+\n+  for (i = -1; i <= 1; ++i)\n+    for (j = -1; j <= 1; ++j)\n+      if (!test_cmps (i, j))\n+        __builtin_abort ();\n+\n+  for (i = 0; i <= 2; ++i)\n+    for (j = 0; j <= 2; ++j)\n+      if (!test_cmpu (i, j))\n+        __builtin_abort ();\n+\n+  return 0;\n+}"}]}