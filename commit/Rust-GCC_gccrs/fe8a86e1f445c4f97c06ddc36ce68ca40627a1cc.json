{"sha": "fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4YTg2ZTFmNDQ1YzRmOTdjMDZkZGMzNmNlNjhjYTQwNjI3YTFjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-09T11:43:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-09T11:43:46Z"}, "message": "re PR middle-end/63155 (memory hog)\n\n2018-10-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/63155\n\t* tree-ssa-structalias.c: Include tree-ssa.h.\n\t(get_constraint_for_ssa_var): For undefs return nothing_id.\n\t(find_func_aliases): Cleanup PHI handling.\n\nFrom-SVN: r264956", "tree": {"sha": "341348eca31d64f1441d8b0b5f56996fff544090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341348eca31d64f1441d8b0b5f56996fff544090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c885142a15687c39f6f46c23d7c40afc817ff7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c885142a15687c39f6f46c23d7c40afc817ff7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c885142a15687c39f6f46c23d7c40afc817ff7a9"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "13e046147cc42f543c5ddd0178926ac32528c66e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "patch": "@@ -1,3 +1,10 @@\n+2018-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63155\n+\t* tree-ssa-structalias.c: Include tree-ssa.h.\n+\t(get_constraint_for_ssa_var): For undefs return nothing_id.\n+\t(find_func_aliases): Cleanup PHI handling.\n+\n 2018-10-09  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.c (dump_stmt_cost): Fix cut&paste missing"}, {"sha": "06ac0016e03451934d8cebad2156a6cd335dec8b", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=fe8a86e1f445c4f97c06ddc36ce68ca40627a1cc", "patch": "@@ -42,6 +42,7 @@\n #include \"varasm.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"tree-ssa.h\"\n \n /* The idea behind this analyzer is to generate set constraints from the\n    program, then solve the resulting constraints in order to generate the\n@@ -2928,15 +2929,26 @@ get_constraint_for_ssa_var (tree t, vec<ce_s> *results, bool address_p)\n   /* We allow FUNCTION_DECLs here even though it doesn't make much sense.  */\n   gcc_assert (TREE_CODE (t) == SSA_NAME || DECL_P (t));\n \n-  /* For parameters, get at the points-to set for the actual parm\n-     decl.  */\n   if (TREE_CODE (t) == SSA_NAME\n-      && SSA_NAME_IS_DEFAULT_DEF (t)\n-      && (TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL\n-\t  || TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL))\n+      && SSA_NAME_IS_DEFAULT_DEF (t))\n     {\n-      get_constraint_for_ssa_var (SSA_NAME_VAR (t), results, address_p);\n-      return;\n+      /* For parameters, get at the points-to set for the actual parm\n+\t decl.  */\n+      if (TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL\n+\t  || TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL)\n+\t{\n+\t  get_constraint_for_ssa_var (SSA_NAME_VAR (t), results, address_p);\n+\t  return;\n+\t}\n+      /* For undefined SSA names return nothing.  */\n+      else if (!ssa_defined_default_def_p (t))\n+\t{\n+\t  cexpr.var = nothing_id;\n+\t  cexpr.type = SCALAR;\n+\t  cexpr.offset = 0;\n+\t  results->safe_push (cexpr);\n+\t  return;\n+\t}\n     }\n \n   /* For global variables resort to the alias target.  */\n@@ -4833,35 +4845,19 @@ find_func_aliases (struct function *fn, gimple *origt)\n   gimple *t = origt;\n   auto_vec<ce_s, 16> lhsc;\n   auto_vec<ce_s, 16> rhsc;\n-  struct constraint_expr *c;\n   varinfo_t fi;\n \n   /* Now build constraints expressions.  */\n   if (gimple_code (t) == GIMPLE_PHI)\n     {\n-      size_t i;\n-      unsigned int j;\n-\n       /* For a phi node, assign all the arguments to\n \t the result.  */\n       get_constraint_for (gimple_phi_result (t), &lhsc);\n-      for (i = 0; i < gimple_phi_num_args (t); i++)\n+      for (unsigned i = 0; i < gimple_phi_num_args (t); i++)\n \t{\n-\t  tree strippedrhs = PHI_ARG_DEF (t, i);\n-\n-\t  STRIP_NOPS (strippedrhs);\n \t  get_constraint_for_rhs (gimple_phi_arg_def (t, i), &rhsc);\n-\n-\t  FOR_EACH_VEC_ELT (lhsc, j, c)\n-\t    {\n-\t      struct constraint_expr *c2;\n-\t      while (rhsc.length () > 0)\n-\t\t{\n-\t\t  c2 = &rhsc.last ();\n-\t\t  process_constraint (new_constraint (*c, *c2));\n-\t\t  rhsc.pop ();\n-\t\t}\n-\t    }\n+\t  process_all_all_constraints (lhsc, rhsc);\n+\t  rhsc.truncate (0);\n \t}\n     }\n   /* In IPA mode, we need to generate constraints to pass call"}]}