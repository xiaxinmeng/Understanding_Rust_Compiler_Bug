{"sha": "826cacfe24c4643799d85f07b25d15a0d3b76bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2Y2FjZmUyNGM0NjQzNzk5ZDg1ZjA3YjI1ZDE1YTBkM2I3NmJjMA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-10-09T13:03:13Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-10-09T13:03:13Z"}, "message": "re PR c/20318 (RFE: add attribute to specify that a function never returns NULL)\n\n2013-10-09  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/20318\ngcc/c-family/\n\t* c-common.c (handle_returns_nonnull_attribute): New function.\n\t(c_common_attribute_table): Add returns_nonnull.\n\ngcc/\n\t* doc/extend.texi (returns_nonnull): New function attribute.\n\t* fold-const.c (tree_expr_nonzero_warnv_p): Look for returns_nonnull\n\tattribute.\n\t* tree-vrp.c (gimple_stmt_nonzero_warnv_p): Likewise.\n\t(stmt_interesting_for_vrp): Accept all GIMPLE_CALL.\n\ngcc/testsuite/\n\t* c-c++-common/pr20318.c: New file.\n\t* gcc.dg/tree-ssa/pr20318.c: New file.\n\nFrom-SVN: r203316", "tree": {"sha": "ca712605143da33b695da4c91076aa641b7f23d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca712605143da33b695da4c91076aa641b7f23d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826cacfe24c4643799d85f07b25d15a0d3b76bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826cacfe24c4643799d85f07b25d15a0d3b76bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826cacfe24c4643799d85f07b25d15a0d3b76bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826cacfe24c4643799d85f07b25d15a0d3b76bc0/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "378f8976f26a17a53c5c306f7277971e8e7a6aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378f8976f26a17a53c5c306f7277971e8e7a6aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378f8976f26a17a53c5c306f7277971e8e7a6aa7"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "95c490bcd360299bc4fb3c3505765950b34a2f28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -1,3 +1,12 @@\n+2013-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/20318\n+\t* doc/extend.texi (returns_nonnull): New function attribute.\n+\t* fold-const.c (tree_expr_nonzero_warnv_p): Look for returns_nonnull\n+\tattribute.\n+\t* tree-vrp.c (gimple_stmt_nonzero_warnv_p): Likewise.\n+\t(stmt_interesting_for_vrp): Accept all GIMPLE_CALL.\n+\n 2013-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/58570"}, {"sha": "d94921b456db58e999f3cb6b83852d957e60619b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -1,3 +1,9 @@\n+2013-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/20318\n+\t* c-common.c (handle_returns_nonnull_attribute): New function.\n+\t(c_common_attribute_table): Add returns_nonnull.\n+\n 2013-10-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/19476"}, {"sha": "5fe7cab0f8bf0fc9bf02c3c196bf4d0a3eaf0453", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -371,6 +371,7 @@ static tree ignore_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_split_stack_attribute (tree *, tree, tree, int, bool *);\n static tree handle_fnspec_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_returns_nonnull_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -747,6 +748,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_fnspec_attribute, false },\n   { \"warn_unused\",            0, 0, false, false, false,\n \t\t\t      handle_warn_unused_attribute, false },\n+  { \"returns_nonnull\",        0, 0, false, true, true,\n+\t\t\t      handle_returns_nonnull_attribute, false },\n   { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n@@ -9048,6 +9051,23 @@ handle_no_split_stack_attribute (tree *node, tree name,\n \n   return NULL_TREE;\n }\n+\n+/* Handle a \"returns_nonnull\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_returns_nonnull_attribute (tree *node, tree, tree, int,\n+\t\t\t\t  bool *no_add_attrs)\n+{\n+  // Even without a prototype we still have a return type we can check.\n+  if (TREE_CODE (TREE_TYPE (*node)) != POINTER_TYPE)\n+    {\n+      error (\"returns_nonnull attribute on a function not returning a pointer\");\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n \f\n /* Check for valid arguments being passed to a function with FNTYPE.\n    There are NARGS arguments in the array ARGARRAY.  */"}, {"sha": "9b641b2d0afb134ec0106880fd40fa4f915a7673", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -2133,7 +2133,8 @@ attributes are currently defined for functions on all targets:\n @code{section}, @code{constructor},\n @code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n @code{weak}, @code{malloc}, @code{alias}, @code{ifunc},\n-@code{warn_unused_result}, @code{nonnull}, @code{gnu_inline},\n+@code{warn_unused_result}, @code{nonnull},\n+@code{returns_nonnull}, @code{gnu_inline},\n @code{externally_visible}, @code{hot}, @code{cold}, @code{artificial},\n @code{no_sanitize_address}, @code{no_address_safety_analysis},\n @code{no_sanitize_undefined},\n@@ -3309,6 +3310,20 @@ my_memcpy (void *dest, const void *src, size_t len)\n         __attribute__((nonnull));\n @end smallexample\n \n+@item returns_nonnull (@var{arg-index}, @dots{})\n+@cindex @code{returns_nonnull} function attribute\n+The @code{returns_nonnull} attribute specifies that the function\n+return value should be a non-null pointer.  For instance, the declaration:\n+\n+@smallexample\n+extern void *\n+mymalloc (size_t len) __attribute__((returns_nonnull));\n+@end smallexample\n+\n+@noindent\n+lets the compiler optimize callers based on the knowledge\n+that the return value will never be null.\n+\n @item noreturn\n @cindex @code{noreturn} function attribute\n A few standard library functions, such as @code{abort} and @code{exit},"}, {"sha": "c4c09b65eb1be1c5273a63d9376da8ce94360640", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -16229,6 +16229,10 @@ tree_expr_nonzero_warnv_p (tree t, bool *strict_overflow_p)\n \t    && DECL_IS_OPERATOR_NEW (fndecl)\n \t    && !TREE_NOTHROW (fndecl))\n \t  return true;\n+\tif (flag_delete_null_pointer_checks\n+\t    && lookup_attribute (\"returns_nonnull\",\n+\t\t TYPE_ATTRIBUTES (TREE_TYPE (fndecl))))\n+\t  return true;\n \treturn alloca_call_p (t);\n       }\n "}, {"sha": "9143a956364d0abb57e4ffe514415f89d5a6e2fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -1,3 +1,9 @@\n+2013-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/20318\n+\t* c-c++-common/pr20318.c: New file.\n+\t* gcc.dg/tree-ssa/pr20318.c: New file.\n+\n 2013-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/pr58570.c: New test."}, {"sha": "c6e9639fc4ea30029b4d7af9a0b1ac219bbd3c20", "filename": "gcc/testsuite/c-c++-common/pr20318.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20318.c?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+\n+extern int f() __attribute__((returns_nonnull)); /* { dg-error \"not returning a pointer\" } */"}, {"sha": "1b302aedefaa3587ebf872c8bca13ab589181535", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20318.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n+/* { dg-options \"-O2 -fdump-tree-original -fdump-tree-vrp1\" } */\n+\n+extern int* f(int) __attribute__((returns_nonnull));\n+extern void eliminate ();\n+void g () {\n+  if (f (2) == 0)\n+    eliminate ();\n+}\n+void h () {\n+  int *p = f (2);\n+  if (p == 0)\n+    eliminate ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"== 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate\\[^\\\\n\\]*to 0\" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "4cd2f2a5123e8b0ca07c1f284132fbb534201206", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826cacfe24c4643799d85f07b25d15a0d3b76bc0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=826cacfe24c4643799d85f07b25d15a0d3b76bc0", "patch": "@@ -1038,7 +1038,7 @@ gimple_assign_nonzero_warnv_p (gimple stmt, bool *strict_overflow_p)\n     }\n }\n \n-/* Return true if STMT is know to to compute a non-zero value.\n+/* Return true if STMT is known to compute a non-zero value.\n    If the return value is based on the assumption that signed overflow is\n    undefined, set *STRICT_OVERFLOW_P to true; otherwise, don't change\n    *STRICT_OVERFLOW_P.*/\n@@ -1058,6 +1058,10 @@ gimple_stmt_nonzero_warnv_p (gimple stmt, bool *strict_overflow_p)\n \t    && DECL_IS_OPERATOR_NEW (fndecl)\n \t    && !TREE_NOTHROW (fndecl))\n \t  return true;\n+\tif (flag_delete_null_pointer_checks && \n+\t    lookup_attribute (\"returns_nonnull\",\n+\t\t\t      TYPE_ATTRIBUTES (gimple_call_fntype (stmt))))\n+\t  return true;\n \treturn gimple_alloca_call_p (stmt);\n       }\n     default:\n@@ -6536,10 +6540,7 @@ stmt_interesting_for_vrp (gimple stmt)\n       if (lhs && TREE_CODE (lhs) == SSA_NAME\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t      || POINTER_TYPE_P (TREE_TYPE (lhs)))\n-\t  && ((is_gimple_call (stmt)\n-\t       && gimple_call_fndecl (stmt) != NULL_TREE\n-\t       && (DECL_BUILT_IN (gimple_call_fndecl (stmt))\n-\t\t   || DECL_IS_OPERATOR_NEW (gimple_call_fndecl (stmt))))\n+\t  && (is_gimple_call (stmt)\n \t      || !gimple_vuse (stmt)))\n \treturn true;\n     }"}]}