{"sha": "a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzNzBjZjBlNjI3NGVkN2E0Yzc1MzI3NzYxY2ViODhiOWVlYjJhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-23T03:49:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-23T03:49:04Z"}, "message": "i386.c (override_options): Respect user disable of fancy 387 math, sse, mmx.\n\n        * config/i386/i386.c (override_options): Respect user disable of\n        fancy 387 math, sse, mmx.\n        (construct_container): Generate error if we need an sse regster\n        and sse has been disabled.\n        * config/i386/i386.h (TARGET_SWITCHES): Disabling sse also disables\n        later sse generations.  Disabling mmx also disables 3dnow.\n\nFrom-SVN: r92530", "tree": {"sha": "0b2a326a82f885d10fce71130fd2699f040ffa21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b2a326a82f885d10fce71130fd2699f040ffa21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/comments", "author": null, "committer": null, "parents": [{"sha": "b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "d911b36410ffed221d7fa1666eb05d665571783d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -1,3 +1,12 @@\n+2004-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (override_options): Respect user disable of\n+\tfancy 387 math, sse, mmx.\n+\t(construct_container): Generate error if we need an sse regster\n+\tand sse has been disabled.\n+\t* config/i386/i386.h (TARGET_SWITCHES): Disabling sse also disables\n+\tlater sse generations.  Disabling mmx also disables 3dnow.\n+\n 2004-12-22  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \t* tree-inline.c (struct inline_data): Remove inlined_fns."}, {"sha": "ef5f37e13b1187e37422cdff8364931e74911e6e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -1473,7 +1473,8 @@ override_options (void)\n \n   /* If the architecture always has an FPU, turn off NO_FANCY_MATH_387,\n      since the insns won't need emulation.  */\n-  if (x86_arch_always_fancy_math_387 & (1 << ix86_arch))\n+  if (!(target_flags_explicit & MASK_NO_FANCY_MATH_387)\n+      && (x86_arch_always_fancy_math_387 & (1 << ix86_arch)))\n     target_flags &= ~MASK_NO_FANCY_MATH_387;\n \n   /* Likewise, if the target doesn't have a 387, or we've specified\n@@ -1489,15 +1490,33 @@ override_options (void)\n   if (TARGET_SSE2)\n     target_flags |= MASK_SSE;\n \n+  /* Turn on MMX builtins for -msse.  */\n+  if (TARGET_SSE)\n+    {\n+      target_flags |= MASK_MMX & ~target_flags_explicit;\n+      x86_prefetch_sse = true;\n+    }\n+\n+  /* Turn on MMX builtins for 3Dnow.  */\n+  if (TARGET_3DNOW)\n+    target_flags |= MASK_MMX;\n+\n   if (TARGET_64BIT)\n     {\n       if (TARGET_ALIGN_DOUBLE)\n \terror (\"-malign-double makes no sense in the 64bit mode\");\n       if (TARGET_RTD)\n \terror (\"-mrtd calling convention not supported in the 64bit mode\");\n-      /* Enable by default the SSE and MMX builtins.  */\n-      target_flags |= (MASK_SSE2 | MASK_SSE | MASK_MMX | MASK_128BIT_LONG_DOUBLE);\n-      ix86_fpmath = FPMATH_SSE;\n+\n+      /* Enable by default the SSE and MMX builtins.  Do allow the user to\n+\t explicitly disable any of these.  In particular, disabling SSE and\n+\t MMX for kernel code is extremely useful.  */\n+      target_flags\n+\t|= ((MASK_SSE2 | MASK_SSE | MASK_MMX | MASK_128BIT_LONG_DOUBLE)\n+\t    & ~target_flags_explicit);\n+\n+      if (TARGET_SSE)\n+\tix86_fpmath = FPMATH_SSE;\n      }\n   else\n     {\n@@ -1546,23 +1565,6 @@ override_options (void)\n   if (! (ix86_fpmath & FPMATH_387))\n     target_flags |= MASK_NO_FANCY_MATH_387;\n \n-  /* It makes no sense to ask for just SSE builtins, so MMX is also turned\n-     on by -msse.  */\n-  if (TARGET_SSE)\n-    {\n-      target_flags |= MASK_MMX;\n-      x86_prefetch_sse = true;\n-    }\n-\n-  /* If it has 3DNow! it also has MMX so MMX is also turned on by -m3dnow */\n-  if (TARGET_3DNOW)\n-    {\n-      target_flags |= MASK_MMX;\n-      /* If we are targeting the Athlon architecture, enable the 3Dnow/MMX\n-\t extensions it adds.  */\n-      if (x86_3dnow_a & (1 << ix86_arch))\n-\ttarget_flags |= MASK_3DNOW_A;\n-    }\n   if ((x86_accumulate_outgoing_args & TUNEMASK)\n       && !(target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n@@ -1576,8 +1578,9 @@ override_options (void)\n     internal_label_prefix_len = p - internal_label_prefix;\n     *p = '\\0';\n   }\n-  /* When scheduling description is not available, disable scheduler pass so it\n-     won't slow down the compilation and make x87 code slower.  */\n+\n+  /* When scheduling description is not available, disable scheduler pass\n+     so it won't slow down the compilation and make x87 code slower.  */\n   if (!TARGET_SCHEDULE)\n     flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n }\n@@ -2543,6 +2546,22 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n   if (needed_intregs > nintregs || needed_sseregs > nsseregs)\n     return NULL;\n \n+  /* We allowed the user to turn off SSE for kernel mode.  Don't crash if\n+     some less clueful developer tries to use floating-point anyway.  */\n+  if (needed_sseregs && !TARGET_SSE)\n+    {\n+      static bool issued_error;\n+      if (!issued_error)\n+\t{\n+\t  issued_error = true;\n+\t  if (in_return)\n+\t    error (\"SSE register return with SSE disabled\");\n+\t  else\n+\t    error (\"SSE register argument with SSE disabled\");\n+\t}\n+      return NULL;\n+    }\n+\n   /* First construct simple cases.  Avoid SCmode, since we want to use\n      single register to pass this type.  */\n   if (n == 1 && mode != SCmode)"}, {"sha": "d4d7f1ca420d5cd158f3497aed6b9a4dae412cb4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -393,19 +393,19 @@ extern int x86_prefetch_sse;\n     N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n   { \"mmx\",\t\t\t MASK_MMX,\t\t\t\t      \\\n     N_(\"Support MMX built-in functions\") },\t\t\t\t      \\\n-  { \"no-mmx\",\t\t\t -MASK_MMX,\t\t\t\t      \\\n+  { \"no-mmx\",\t\t\t -(MASK_MMX|MASK_3DNOW|MASK_3DNOW_A),\t      \\\n     N_(\"Do not support MMX built-in functions\") },\t\t\t      \\\n   { \"3dnow\",                     MASK_3DNOW,\t\t\t\t      \\\n     N_(\"Support 3DNow! built-in functions\") },\t\t\t\t      \\\n-  { \"no-3dnow\",                  -MASK_3DNOW,\t\t\t\t      \\\n+  { \"no-3dnow\",                  -(MASK_3DNOW|MASK_3DNOW_A),\t\t      \\\n     N_(\"Do not support 3DNow! built-in functions\") },\t\t\t      \\\n   { \"sse\",\t\t\t MASK_SSE,\t\t\t\t      \\\n     N_(\"Support MMX and SSE built-in functions and code generation\") },\t      \\\n-  { \"no-sse\",\t\t\t -MASK_SSE,\t\t\t\t      \\\n+  { \"no-sse\",\t\t\t -(MASK_SSE|MASK_SSE2|MASK_SSE3),\t      \\\n     N_(\"Do not support MMX and SSE built-in functions and code generation\") },\\\n   { \"sse2\",\t\t\t MASK_SSE2,\t\t\t\t      \\\n     N_(\"Support MMX, SSE and SSE2 built-in functions and code generation\") }, \\\n-  { \"no-sse2\",\t\t\t -MASK_SSE2,\t\t\t\t      \\\n+  { \"no-sse2\",\t\t\t -(MASK_SSE2|MASK_SSE3),\t\t      \\\n     N_(\"Do not support MMX, SSE and SSE2 built-in functions and code generation\") },    \\\n   { \"sse3\",\t\t\t MASK_SSE3,\t\t\t\t      \\\n     N_(\"Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\") },\\"}, {"sha": "a83f0745e23ea519f235ca851342d01e959ba160", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-mno-sse\" } */\n+\n+double foo(void) { return 0; }\t/* { dg-error \"SSE disabled\" } */\n+void bar(double x) { }"}, {"sha": "acc39f3f69f5219beba854db482ec731716296e5", "filename": "gcc/testsuite/gcc.target/i386/defines-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-1.c?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=nocona -mno-sse\" } */\n+\n+#if defined(__SSE__) || defined(__SSE2__) || defined(__SSE3__)\n+#error\n+#endif"}, {"sha": "4383a059be20f4ac62a5f5c800df4a9f0b5be207", "filename": "gcc/testsuite/gcc.target/i386/defines-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdefines-2.c?ref=a5370cf0e6274ed7a4c75327761ceb88b9eeb2ab", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=athlon64 -mno-mmx\" } */\n+\n+#if defined(__MMX__) || defined(__3dNOW__) || defined(__3dNOW_A__)\n+#error\n+#endif"}]}