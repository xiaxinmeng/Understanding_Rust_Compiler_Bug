{"sha": "ebc047a210e17c5facf31ff11eddaac9db4d4a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjMDQ3YTIxMGUxN2M1ZmFjZjMxZmYxMWVkZGFhYzlkYjRkNGE5NQ==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2014-04-05T01:27:21Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2014-04-05T01:27:21Z"}, "message": "re PR tree-optimization/60656 (x86 vectorization produces wrong code)\n\n2014-04-04  Cong Hou  <congh@google.com>\n\n    PR tree-optimization/60656\n    * tree-vect-stmts.c (supportable_widening_operation):\n      Fix a bug that elements in a vector with vect_used_by_reduction\n      property are incorrectly reordered when the operation on it is not\n      consistant with the one in reduction operation.\n\n2014-04-04  Cong Hou  <congh@google.com>\n\n    PR tree-optimization/60656\n    * gcc.dg/vect/pr60656.c: New test.\n\nFrom-SVN: r209138", "tree": {"sha": "d1e18f32f3b8c5ae7bca649f5c026af77d3cd5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1e18f32f3b8c5ae7bca649f5c026af77d3cd5ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebc047a210e17c5facf31ff11eddaac9db4d4a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc047a210e17c5facf31ff11eddaac9db4d4a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc047a210e17c5facf31ff11eddaac9db4d4a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc047a210e17c5facf31ff11eddaac9db4d4a95/comments", "author": null, "committer": null, "parents": [{"sha": "604fb578094200cc3771cc84c267cffa2fc47a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604fb578094200cc3771cc84c267cffa2fc47a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604fb578094200cc3771cc84c267cffa2fc47a6d"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "b561dce0c929a6c653b8b133f6f178d2fe75e9a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebc047a210e17c5facf31ff11eddaac9db4d4a95", "patch": "@@ -1,3 +1,11 @@\n+2014-04-04  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60656\n+\t* tree-vect-stmts.c (supportable_widening_operation):\n+\tFix a bug that elements in a vector with vect_used_by_reduction\n+\tproperty are incorrectly reordered when the operation on it is not\n+\tconsistant with the one in reduction operation.\n+\n 2014-04-04  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR rtl-optimization/60155"}, {"sha": "a0af48c0502ef94b5ecbddf86f86a99d83ae0122", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebc047a210e17c5facf31ff11eddaac9db4d4a95", "patch": "@@ -1,3 +1,8 @@\n+2014-04-04  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60656\n+\t* gcc.dg/vect/pr60656.c: New test.\n+\n 2014-04-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.dg/builtin-bswap-6.c: Adjust return value to disable GCC"}, {"sha": "ebaab62b97c3968b02167ddac3e2617f7f421954", "filename": "gcc/testsuite/gcc.dg/vect/pr60656.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c?ref=ebc047a210e17c5facf31ff11eddaac9db4d4a95", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+__attribute__ ((noinline)) long\n+foo ()\n+{\n+  int v[] = {5000, 5001, 5002, 5003};\n+  long s = 0;\n+  int i;\n+\n+  for(i = 0; i < 4; ++i)\n+    {\n+      long P = v[i];\n+      s += P*P*P;\n+    }\n+  return s;\n+}\n+\n+long\n+bar ()\n+{\n+  int v[] = {5000, 5001, 5002, 5003};\n+  long s = 0;\n+  int i;\n+\n+  for(i = 0; i < 4; ++i)\n+    {\n+      long P = v[i];\n+      s += P*P*P;\n+      __asm__ volatile (\"\");\n+    }\n+  return s;\n+}\n+\n+int main()\n+{\n+  if (foo () != bar ())\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "1a51d6d7b57a0d6d5214c5a67674414aa977417d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc047a210e17c5facf31ff11eddaac9db4d4a95/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ebc047a210e17c5facf31ff11eddaac9db4d4a95", "patch": "@@ -7848,7 +7848,21 @@ supportable_widening_operation (enum tree_code code, gimple stmt,\n \t\t\t\t\t     stmt, vectype_out, vectype_in,\n \t\t\t\t\t     code1, code2, multi_step_cvt,\n \t\t\t\t\t     interm_types))\n-\treturn true;\n+        {\n+          /* Elements in a vector with vect_used_by_reduction property cannot\n+             be reordered if the use chain with this property does not have the\n+             same operation.  One such an example is s += a * b, where elements\n+             in a and b cannot be reordered.  Here we check if the vector defined\n+             by STMT is only directly used in the reduction statement.  */\n+          tree lhs = gimple_assign_lhs (stmt);\n+          use_operand_p dummy;\n+          gimple use_stmt;\n+          stmt_vec_info use_stmt_info = NULL;\n+          if (single_imm_use (lhs, &dummy, &use_stmt)\n+              && (use_stmt_info = vinfo_for_stmt (use_stmt))\n+              && STMT_VINFO_DEF_TYPE (use_stmt_info) == vect_reduction_def)\n+            return true;\n+        }\n       c1 = VEC_WIDEN_MULT_LO_EXPR;\n       c2 = VEC_WIDEN_MULT_HI_EXPR;\n       break;"}]}