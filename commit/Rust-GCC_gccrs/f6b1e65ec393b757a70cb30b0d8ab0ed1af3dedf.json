{"sha": "f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiMWU2NWVjMzkzYjc1N2E3MGNiMzBiMGQ4YWIwZWQxYWYzZGVkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-01-24T19:44:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-01-24T19:44:23Z"}, "message": "re PR go/46986 (Go is not supported on Darwin)\n\n\tPR go/46986\nall: prepend #__USER_LABEL_PREFIX__ to mangled Go symbols\nFor old-fashioned Darwin.\n\nFrom-SVN: r195438", "tree": {"sha": "df60a3ed3befa98bc7bd75b2c51377fb20837ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df60a3ed3befa98bc7bd75b2c51377fb20837ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/comments", "author": null, "committer": null, "parents": [{"sha": "f5ba49ac2e76583f732bc2cdb76ed54e59bffd09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ba49ac2e76583f732bc2cdb76ed54e59bffd09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ba49ac2e76583f732bc2cdb76ed54e59bffd09"}], "stats": {"total": 247, "additions": 131, "deletions": 116}, "files": [{"sha": "cbc7847efe87a3c8835d02ac2aa6b5300678dc4b", "filename": "libgo/go/bytes/indexbyte.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fbytes%2Findexbyte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fbytes%2Findexbyte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Findexbyte.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -14,7 +14,7 @@\n    library function, which shouldn't need much stack space.  */\n \n intgo IndexByte (struct __go_open_array, char)\n-  asm (\"bytes.IndexByte\")\n+  __asm__ (GOSYM_PREFIX \"bytes.IndexByte\")\n   __attribute__ ((no_split_stack));\n \n intgo\n@@ -31,7 +31,7 @@ IndexByte (struct __go_open_array s, char b)\n /* Comparison.  */\n \n _Bool Equal (struct __go_open_array a, struct __go_open_array b)\n-  asm (\"bytes.Equal\")\n+  __asm__ (GOSYM_PREFIX \"bytes.Equal\")\n   __attribute__ ((no_split_stack));\n \n _Bool"}, {"sha": "5b33d78288b95ee4d34c8beef1541d8987906b2f", "filename": "libgo/go/log/syslog/syslog_c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -12,7 +12,7 @@\n    can't represent a C varargs function in Go.  */\n \n void syslog_c(intgo, const char*)\n-  asm (\"log_syslog.syslog_c\");\n+  __asm__ (GOSYM_PREFIX \"log_syslog.syslog_c\");\n \n void\n syslog_c (intgo priority, const char *msg)"}, {"sha": "32430df2ba29d6fd79cbbe691d609a368349f233", "filename": "libgo/go/sync/atomic/atomic.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -6,8 +6,10 @@\n \n #include <stdint.h>\n \n+#include \"runtime.h\"\n+\n _Bool CompareAndSwapInt32 (int32_t *, int32_t, int32_t)\n-  asm (\"sync_atomic.CompareAndSwapInt32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapInt32\");\n \n _Bool\n CompareAndSwapInt32 (int32_t *val, int32_t old, int32_t new)\n@@ -16,7 +18,7 @@ CompareAndSwapInt32 (int32_t *val, int32_t old, int32_t new)\n }\n \n _Bool CompareAndSwapInt64 (int64_t *, int64_t, int64_t)\n-  asm (\"sync_atomic.CompareAndSwapInt64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapInt64\");\n \n _Bool\n CompareAndSwapInt64 (int64_t *val, int64_t old, int64_t new)\n@@ -25,7 +27,7 @@ CompareAndSwapInt64 (int64_t *val, int64_t old, int64_t new)\n }\n \n _Bool CompareAndSwapUint32 (uint32_t *, uint32_t, uint32_t)\n-  asm (\"sync_atomic.CompareAndSwapUint32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapUint32\");\n \n _Bool\n CompareAndSwapUint32 (uint32_t *val, uint32_t old, uint32_t new)\n@@ -34,7 +36,7 @@ CompareAndSwapUint32 (uint32_t *val, uint32_t old, uint32_t new)\n }\n \n _Bool CompareAndSwapUint64 (uint64_t *, uint64_t, uint64_t)\n-  asm (\"sync_atomic.CompareAndSwapUint64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapUint64\");\n \n _Bool\n CompareAndSwapUint64 (uint64_t *val, uint64_t old, uint64_t new)\n@@ -43,7 +45,7 @@ CompareAndSwapUint64 (uint64_t *val, uint64_t old, uint64_t new)\n }\n \n _Bool CompareAndSwapUintptr (uintptr_t *, uintptr_t, uintptr_t)\n-  asm (\"sync_atomic.CompareAndSwapUintptr\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapUintptr\");\n \n _Bool\n CompareAndSwapUintptr (uintptr_t *val, uintptr_t old, uintptr_t new)\n@@ -52,7 +54,7 @@ CompareAndSwapUintptr (uintptr_t *val, uintptr_t old, uintptr_t new)\n }\n \n _Bool CompareAndSwapPointer (void **, void *, void *)\n-  asm (\"sync_atomic.CompareAndSwapPointer\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.CompareAndSwapPointer\");\n \n _Bool\n CompareAndSwapPointer (void **val, void *old, void *new)\n@@ -61,7 +63,7 @@ CompareAndSwapPointer (void **val, void *old, void *new)\n }\n \n int32_t AddInt32 (int32_t *, int32_t)\n-  asm (\"sync_atomic.AddInt32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.AddInt32\");\n \n int32_t\n AddInt32 (int32_t *val, int32_t delta)\n@@ -70,7 +72,7 @@ AddInt32 (int32_t *val, int32_t delta)\n }\n \n uint32_t AddUint32 (uint32_t *, uint32_t)\n-  asm (\"sync_atomic.AddUint32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.AddUint32\");\n \n uint32_t\n AddUint32 (uint32_t *val, uint32_t delta)\n@@ -79,7 +81,7 @@ AddUint32 (uint32_t *val, uint32_t delta)\n }\n \n int64_t AddInt64 (int64_t *, int64_t)\n-  asm (\"sync_atomic.AddInt64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.AddInt64\");\n \n int64_t\n AddInt64 (int64_t *val, int64_t delta)\n@@ -88,7 +90,7 @@ AddInt64 (int64_t *val, int64_t delta)\n }\n \n uint64_t AddUint64 (uint64_t *, uint64_t)\n-  asm (\"sync_atomic.AddUint64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.AddUint64\");\n \n uint64_t\n AddUint64 (uint64_t *val, uint64_t delta)\n@@ -97,7 +99,7 @@ AddUint64 (uint64_t *val, uint64_t delta)\n }\n \n uintptr_t AddUintptr (uintptr_t *, uintptr_t)\n-  asm (\"sync_atomic.AddUintptr\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.AddUintptr\");\n \n uintptr_t\n AddUintptr (uintptr_t *val, uintptr_t delta)\n@@ -106,7 +108,7 @@ AddUintptr (uintptr_t *val, uintptr_t delta)\n }\n \n int32_t LoadInt32 (int32_t *addr)\n-  asm (\"sync_atomic.LoadInt32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadInt32\");\n \n int32_t\n LoadInt32 (int32_t *addr)\n@@ -120,7 +122,7 @@ LoadInt32 (int32_t *addr)\n }\n \n int64_t LoadInt64 (int64_t *addr)\n-  asm (\"sync_atomic.LoadInt64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadInt64\");\n \n int64_t\n LoadInt64 (int64_t *addr)\n@@ -134,7 +136,7 @@ LoadInt64 (int64_t *addr)\n }\n \n uint32_t LoadUint32 (uint32_t *addr)\n-  asm (\"sync_atomic.LoadUint32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadUint32\");\n \n uint32_t\n LoadUint32 (uint32_t *addr)\n@@ -148,7 +150,7 @@ LoadUint32 (uint32_t *addr)\n }\n \n uint64_t LoadUint64 (uint64_t *addr)\n-  asm (\"sync_atomic.LoadUint64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadUint64\");\n \n uint64_t\n LoadUint64 (uint64_t *addr)\n@@ -162,7 +164,7 @@ LoadUint64 (uint64_t *addr)\n }\n \n uintptr_t LoadUintptr (uintptr_t *addr)\n-  asm (\"sync_atomic.LoadUintptr\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadUintptr\");\n \n uintptr_t\n LoadUintptr (uintptr_t *addr)\n@@ -176,7 +178,7 @@ LoadUintptr (uintptr_t *addr)\n }\n \n void *LoadPointer (void **addr)\n-  asm (\"sync_atomic.LoadPointer\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.LoadPointer\");\n \n void *\n LoadPointer (void **addr)\n@@ -190,7 +192,7 @@ LoadPointer (void **addr)\n }\n \n void StoreInt32 (int32_t *addr, int32_t val)\n-  asm (\"sync_atomic.StoreInt32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StoreInt32\");\n \n void\n StoreInt32 (int32_t *addr, int32_t val)\n@@ -203,7 +205,7 @@ StoreInt32 (int32_t *addr, int32_t val)\n }\n \n void StoreInt64 (int64_t *addr, int64_t val)\n-  asm (\"sync_atomic.StoreInt64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StoreInt64\");\n \n void\n StoreInt64 (int64_t *addr, int64_t val)\n@@ -216,7 +218,7 @@ StoreInt64 (int64_t *addr, int64_t val)\n }\n \n void StoreUint32 (uint32_t *addr, uint32_t val)\n-  asm (\"sync_atomic.StoreUint32\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StoreUint32\");\n \n void\n StoreUint32 (uint32_t *addr, uint32_t val)\n@@ -229,7 +231,7 @@ StoreUint32 (uint32_t *addr, uint32_t val)\n }\n \n void StoreUint64 (uint64_t *addr, uint64_t val)\n-  asm (\"sync_atomic.StoreUint64\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StoreUint64\");\n \n void\n StoreUint64 (uint64_t *addr, uint64_t val)\n@@ -242,7 +244,7 @@ StoreUint64 (uint64_t *addr, uint64_t val)\n }\n \n void StoreUintptr (uintptr_t *addr, uintptr_t val)\n-  asm (\"sync_atomic.StoreUintptr\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StoreUintptr\");\n \n void\n StoreUintptr (uintptr_t *addr, uintptr_t val)\n@@ -255,7 +257,7 @@ StoreUintptr (uintptr_t *addr, uintptr_t val)\n }\n \n void StorePointer (void **addr, void *val)\n-  asm (\"sync_atomic.StorePointer\");\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.StorePointer\");\n \n void\n StorePointer (void **addr, void *val)"}, {"sha": "7571c64ddc4c4730a6a863495f62dc83174a3bef", "filename": "libgo/go/sync/cas.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsync%2Fcas.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsync%2Fcas.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fcas.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -6,7 +6,9 @@\n \n #include <stdint.h>\n \n-_Bool cas (int32_t *, int32_t, int32_t) asm (\"libgo_sync.sync.cas\");\n+#include \"runtime.h\"\n+\n+_Bool cas (int32_t *, int32_t, int32_t) __asm__ (GOSYM_PREFIX \"libgo_sync.sync.cas\");\n \n _Bool\n cas (int32_t *ptr, int32_t old, int32_t new)"}, {"sha": "5cdc7730445e9ab933dc4b32c4e45cbdfe2f0ede", "filename": "libgo/go/syscall/errno.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Ferrno.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Ferrno.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrno.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -3,15 +3,16 @@\n    Copyright 2010 The Go Authors. All rights reserved.\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n-\n #include <errno.h>\n #include <stdint.h>\n \n+#include \"runtime.h\"\n+\n /* errno is typically a macro. These functions set \n    and get errno specific to the libc being used.  */\n \n-uintptr_t GetErrno() asm (\"syscall.GetErrno\");\n-void SetErrno(uintptr_t) asm (\"syscall.SetErrno\");\n+uintptr_t GetErrno() __asm__ (GOSYM_PREFIX \"syscall.GetErrno\");\n+void SetErrno(uintptr_t) __asm__ (GOSYM_PREFIX \"syscall.SetErrno\");\n \n uintptr_t\n GetErrno()"}, {"sha": "6f5c2972bab93fa926766c41772095b20d119106", "filename": "libgo/go/syscall/signame.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Fsigname.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Fsigname.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsigname.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -10,7 +10,7 @@\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-String Signame (intgo sig) asm (\"syscall.Signame\");\n+String Signame (intgo sig) __asm__ (GOSYM_PREFIX \"syscall.Signame\");\n \n String\n Signame (intgo sig)"}, {"sha": "8c3b53fa4567750d9d8a8b672ed49e0995b5390b", "filename": "libgo/go/syscall/wait.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Fwait.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fgo%2Fsyscall%2Fwait.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fwait.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -10,8 +10,10 @@\n #include <stdint.h>\n #include <sys/wait.h>\n \n+#include \"runtime.h\"\n+\n extern _Bool Exited (uint32_t *w)\n-  __asm__ (\"syscall.Exited.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.Exited.N18_syscall.WaitStatus\");\n \n _Bool\n Exited (uint32_t *w)\n@@ -20,7 +22,7 @@ Exited (uint32_t *w)\n }\n \n extern _Bool Signaled (uint32_t *w)\n-  __asm__ (\"syscall.Signaled.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.Signaled.N18_syscall.WaitStatus\");\n \n _Bool\n Signaled (uint32_t *w)\n@@ -29,7 +31,7 @@ Signaled (uint32_t *w)\n }\n \n extern _Bool Stopped (uint32_t *w)\n-  __asm__ (\"syscall.Stopped.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.Stopped.N18_syscall.WaitStatus\");\n \n _Bool\n Stopped (uint32_t *w)\n@@ -38,7 +40,7 @@ Stopped (uint32_t *w)\n }\n \n extern _Bool Continued (uint32_t *w)\n-  __asm__ (\"syscall.Continued.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.Continued.N18_syscall.WaitStatus\");\n \n _Bool\n Continued (uint32_t *w)\n@@ -47,7 +49,7 @@ Continued (uint32_t *w)\n }\n \n extern _Bool CoreDump (uint32_t *w)\n-  __asm__ (\"syscall.CoreDump.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.CoreDump.N18_syscall.WaitStatus\");\n \n _Bool\n CoreDump (uint32_t *w)\n@@ -56,7 +58,7 @@ CoreDump (uint32_t *w)\n }\n \n extern int ExitStatus (uint32_t *w)\n-  __asm__ (\"syscall.ExitStatus.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.ExitStatus.N18_syscall.WaitStatus\");\n \n int\n ExitStatus (uint32_t *w)\n@@ -67,7 +69,7 @@ ExitStatus (uint32_t *w)\n }\n \n extern int Signal (uint32_t *w)\n-  __asm__ (\"syscall.Signal.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.Signal.N18_syscall.WaitStatus\");\n \n int\n Signal (uint32_t *w)\n@@ -78,7 +80,7 @@ Signal (uint32_t *w)\n }\n \n extern int StopSignal (uint32_t *w)\n-  __asm__ (\"syscall.StopSignal.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.StopSignal.N18_syscall.WaitStatus\");\n \n int\n StopSignal (uint32_t *w)\n@@ -89,7 +91,7 @@ StopSignal (uint32_t *w)\n }\n \n extern int TrapCause (uint32_t *w)\n-  __asm__ (\"syscall.TrapCause.N18_syscall.WaitStatus\");\n+  __asm__ (GOSYM_PREFIX \"syscall.TrapCause.N18_syscall.WaitStatus\");\n \n int\n TrapCause (uint32_t *w __attribute__ ((unused)))"}, {"sha": "a79ee9e18b3da26c7cff57e793af120cf51aeae1", "filename": "libgo/runtime/chan.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fchan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fchan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -118,7 +118,7 @@ runtime_makechan_c(ChanType *t, int64 hint)\n // For reflect\n //\tfunc makechan(typ *ChanType, size uint64) (chan)\n uintptr reflect_makechan(ChanType *, uint64)\n-  asm (\"reflect.makechan\");\n+  __asm__ (GOSYM_PREFIX \"reflect.makechan\");\n \n uintptr\n reflect_makechan(ChanType *t, uint64 size)\n@@ -508,7 +508,7 @@ __go_receive_big(ChanType *t, Hchan* c, byte* p)\n }\n \n _Bool runtime_chanrecv2(ChanType *t, Hchan* c, byte* p)\n-  __asm__(\"runtime.chanrecv2\");\n+  __asm__ (GOSYM_PREFIX \"runtime.chanrecv2\");\n \n _Bool\n runtime_chanrecv2(ChanType *t, Hchan* c, byte* p)\n@@ -613,7 +613,7 @@ runtime_selectnbrecv2(ChanType *t, byte *v, _Bool *received, Hchan *c)\n // the actual data if it fits, or else a pointer to the data.\n \n _Bool reflect_chansend(ChanType *, Hchan *, uintptr, _Bool)\n-  __asm__(\"reflect.chansend\");\n+  __asm__ (GOSYM_PREFIX \"reflect.chansend\");\n \n _Bool\n reflect_chansend(ChanType *t, Hchan *c, uintptr val, _Bool nb)\n@@ -650,7 +650,7 @@ struct chanrecv_ret\n };\n \n struct chanrecv_ret reflect_chanrecv(ChanType *, Hchan *, _Bool)\n-  __asm__(\"reflect.chanrecv\");\n+  __asm__ (GOSYM_PREFIX \"reflect.chanrecv\");\n \n struct chanrecv_ret\n reflect_chanrecv(ChanType *t, Hchan *c, _Bool nb)\n@@ -686,7 +686,7 @@ static void newselect(int32, Select**);\n \n // newselect(size uint32) (sel *byte);\n \n-void* runtime_newselect(int32) __asm__(\"runtime.newselect\");\n+void* runtime_newselect(int32) __asm__ (GOSYM_PREFIX \"runtime.newselect\");\n \n void*\n runtime_newselect(int32 size)\n@@ -732,7 +732,7 @@ static void selectsend(Select *sel, Hchan *c, int index, void *elem);\n // selectsend(sel *byte, hchan *chan any, elem *any) (selected bool);\n \n void runtime_selectsend(Select *, Hchan *, void *, int32)\n-  __asm__(\"runtime.selectsend\");\n+  __asm__ (GOSYM_PREFIX \"runtime.selectsend\");\n \n void\n runtime_selectsend(Select *sel, Hchan *c, void *elem, int32 index)\n@@ -772,7 +772,7 @@ static void selectrecv(Select *sel, Hchan *c, int index, void *elem, bool*);\n // selectrecv(sel *byte, hchan *chan any, elem *any) (selected bool);\n \n void runtime_selectrecv(Select *, Hchan *, void *, int32)\n-  __asm__(\"runtime.selectrecv\");\n+  __asm__ (GOSYM_PREFIX \"runtime.selectrecv\");\n \n void\n runtime_selectrecv(Select *sel, Hchan *c, void *elem, int32 index)\n@@ -787,7 +787,7 @@ runtime_selectrecv(Select *sel, Hchan *c, void *elem, int32 index)\n // selectrecv2(sel *byte, hchan *chan any, elem *any, received *bool) (selected bool);\n \n void runtime_selectrecv2(Select *, Hchan *, void *, bool *, int32)\n-  __asm__(\"runtime.selectrecv2\");\n+  __asm__ (GOSYM_PREFIX \"runtime.selectrecv2\");\n \n void\n runtime_selectrecv2(Select *sel, Hchan *c, void *elem, bool *received, int32 index)\n@@ -827,7 +827,7 @@ static void selectdefault(Select*, int);\n \n // selectdefault(sel *byte) (selected bool);\n \n-void runtime_selectdefault(Select *, int32) __asm__(\"runtime.selectdefault\");\n+void runtime_selectdefault(Select *, int32) __asm__ (GOSYM_PREFIX \"runtime.selectdefault\");\n \n void\n runtime_selectdefault(Select *sel, int32 index)\n@@ -898,7 +898,7 @@ static int selectgo(Select**);\n \n // selectgo(sel *byte);\n \n-int runtime_selectgo(Select *) __asm__(\"runtime.selectgo\");\n+int runtime_selectgo(Select *) __asm__ (GOSYM_PREFIX \"runtime.selectgo\");\n \n int\n runtime_selectgo(Select *sel)\n@@ -1181,7 +1181,7 @@ struct rselect_ret {\n // func rselect(cases []runtimeSelect) (chosen int, word uintptr, recvOK bool)\n \n struct rselect_ret reflect_rselect(Slice)\n-     asm(\"reflect.rselect\");\n+     __asm__ (GOSYM_PREFIX \"reflect.rselect\");\n \n struct rselect_ret\n reflect_rselect(Slice cases)\n@@ -1309,7 +1309,7 @@ __go_builtin_close(Hchan *c)\n // For reflect\n //\tfunc chanclose(c chan)\n \n-void reflect_chanclose(uintptr) __asm__(\"reflect.chanclose\");\n+void reflect_chanclose(uintptr) __asm__ (GOSYM_PREFIX \"reflect.chanclose\");\n \n void\n reflect_chanclose(uintptr c)\n@@ -1320,7 +1320,7 @@ reflect_chanclose(uintptr c)\n // For reflect\n //\tfunc chanlen(c chan) (len int)\n \n-intgo reflect_chanlen(uintptr) __asm__(\"reflect.chanlen\");\n+intgo reflect_chanlen(uintptr) __asm__ (GOSYM_PREFIX \"reflect.chanlen\");\n \n intgo\n reflect_chanlen(uintptr ca)\n@@ -1345,7 +1345,7 @@ __go_chan_len(Hchan *c)\n // For reflect\n //\tfunc chancap(c chan) (cap intgo)\n \n-intgo reflect_chancap(uintptr) __asm__(\"reflect.chancap\");\n+intgo reflect_chancap(uintptr) __asm__ (GOSYM_PREFIX \"reflect.chancap\");\n \n intgo\n reflect_chancap(uintptr ca)"}, {"sha": "3ef08ef51461195010da739423f79dfd6998ba2c", "filename": "libgo/runtime/cpuprof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fcpuprof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fcpuprof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fcpuprof.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -125,7 +125,7 @@ static void LostProfileData(void) {\n }\n \n extern void runtime_SetCPUProfileRate(intgo)\n-     __asm__(\"runtime.SetCPUProfileRate\");\n+     __asm__ (GOSYM_PREFIX \"runtime.SetCPUProfileRate\");\n \n // SetCPUProfileRate sets the CPU profiling rate.\n // The user documentation is in debug.go.\n@@ -436,7 +436,7 @@ getprofile(Profile *p)\n }\n \n extern Slice runtime_CPUProfile(void)\n-     __asm__(\"runtime.CPUProfile\");\n+     __asm__ (GOSYM_PREFIX \"runtime.CPUProfile\");\n \n // CPUProfile returns the next cpu profile block as a []byte.\n // The user documentation is in debug.go."}, {"sha": "7f3fa0d8e0f2265b73914d001c95ca0ee0a2bdb7", "filename": "libgo/runtime/env_posix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fenv_posix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fenv_posix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fenv_posix.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -7,7 +7,7 @@\n #include \"runtime.h\"\n #include \"array.h\"\n \n-extern Slice syscall_Envs asm (\"syscall.Envs\");\n+extern Slice syscall_Envs __asm__ (GOSYM_PREFIX \"syscall.Envs\");\n \n const byte*\n runtime_getenv(const char *s)"}, {"sha": "e403a2a967a2702206595589f889c4fee34ca852", "filename": "libgo/runtime/go-breakpoint.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-breakpoint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-breakpoint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-breakpoint.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -6,7 +6,9 @@\n \n #include <sched.h>\n \n-void Breakpoint (void) asm (\"runtime.Breakpoint\");\n+#include \"runtime.h\"\n+\n+void Breakpoint (void) __asm__ (GOSYM_PREFIX \"runtime.Breakpoint\");\n \n void\n Breakpoint (void)"}, {"sha": "63b45f368c29bc69710332786d8cc21933ea889e", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -156,9 +156,9 @@ struct caller_ret\n   _Bool ok;\n };\n \n-struct caller_ret Caller (int n) asm (\"runtime.Caller\");\n+struct caller_ret Caller (int n) __asm__ (GOSYM_PREFIX \"runtime.Caller\");\n \n-Func *FuncForPC (uintptr_t) asm (\"runtime.FuncForPC\");\n+Func *FuncForPC (uintptr_t) __asm__ (GOSYM_PREFIX \"runtime.FuncForPC\");\n \n /* Implement runtime.Caller.  */\n \n@@ -216,7 +216,7 @@ struct funcline_go_return\n \n struct funcline_go_return\n runtime_funcline_go (Func *f, uintptr targetpc)\n-  __asm__ (\"runtime.funcline_go\");\n+  __asm__ (GOSYM_PREFIX \"runtime.funcline_go\");\n \n struct funcline_go_return\n runtime_funcline_go (Func *f __attribute__((unused)), uintptr targetpc)"}, {"sha": "a19e79f053b6a47ad8f7ec8bd49e9f9dfd090720", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -60,7 +60,7 @@ runtime_callers (int32 skip, uintptr *pcbuf, int32 m)\n }\n \n int Callers (int, struct __go_open_array)\n-  __asm__ (\"runtime.Callers\");\n+  __asm__ (GOSYM_PREFIX \"runtime.Callers\");\n \n int\n Callers (int skip, struct __go_open_array pc)"}, {"sha": "46eb1827a93e7a5a53c461c5ef8cb03974cd1774", "filename": "libgo/runtime/go-cgo.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-cgo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-cgo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-cgo.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -24,10 +24,10 @@\n    */\n \n /* We let Go code call these via the syscall package.  */\n-void syscall_cgocall(void) __asm__ (\"syscall.Cgocall\");\n-void syscall_cgocalldone(void) __asm__ (\"syscall.CgocallDone\");\n-void syscall_cgocallback(void) __asm__ (\"syscall.CgocallBack\");\n-void syscall_cgocallbackdone(void) __asm__ (\"syscall.CgocallBackDone\");\n+void syscall_cgocall(void) __asm__ (GOSYM_PREFIX \"syscall.Cgocall\");\n+void syscall_cgocalldone(void) __asm__ (GOSYM_PREFIX \"syscall.CgocallDone\");\n+void syscall_cgocallback(void) __asm__ (GOSYM_PREFIX \"syscall.CgocallBack\");\n+void syscall_cgocallbackdone(void) __asm__ (GOSYM_PREFIX \"syscall.CgocallBackDone\");\n \n void\n syscall_cgocall ()\n@@ -119,7 +119,7 @@ _cgo_allocate (size_t n)\n }\n \n extern const struct __go_type_descriptor string_type_descriptor\n-  asm (\"__go_tdn_string\");\n+  __asm__ (GOSYM_PREFIX \"__go_tdn_string\");\n \n void\n _cgo_panic (const char *p)\n@@ -152,7 +152,7 @@ _cgo_panic (const char *p)\n \n /* Return the number of CGO calls.  */\n \n-int64 runtime_NumCgoCall (void) __asm__ (\"runtime.NumCgoCall\");\n+int64 runtime_NumCgoCall (void) __asm__ (GOSYM_PREFIX \"runtime.NumCgoCall\");\n \n int64\n runtime_NumCgoCall (void)"}, {"sha": "a7e2c133440e17685ad4144802c93f4a8e35628d", "filename": "libgo/runtime/go-fieldtrack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-fieldtrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-fieldtrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-fieldtrack.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -34,7 +34,7 @@ extern const char _edata[] __attribute__ ((weak));\n extern const char __edata[] __attribute__ ((weak));\n extern const char __bss_start[] __attribute__ ((weak));\n \n-void runtime_Fieldtrack (struct __go_map *) __asm__ (\"runtime.Fieldtrack\");\n+void runtime_Fieldtrack (struct __go_map *) __asm__ (GOSYM_PREFIX \"runtime.Fieldtrack\");\n \n void\n runtime_Fieldtrack (struct __go_map *m)"}, {"sha": "1b52d44043837bf0218d95676c3a8dd0702b4ac5", "filename": "libgo/runtime/go-getgoroot.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-getgoroot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-getgoroot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-getgoroot.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -8,7 +8,7 @@\n \n #include \"runtime.h\"\n \n-String getgoroot (void) asm (\"runtime.getgoroot\");\n+String getgoroot (void) __asm__ (GOSYM_PREFIX \"runtime.getgoroot\");\n \n String\n getgoroot ()"}, {"sha": "73cc1602df78ba333a405e152c3d68a1fc4324be", "filename": "libgo/runtime/go-now.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-now.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-now.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-now.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -6,6 +6,8 @@\n #include <stdint.h>\n #include <sys/time.h>\n \n+#include \"runtime.h\"\n+\n // Return current time.  This is the implementation of time.now().\n \n struct time_now_ret\n@@ -15,7 +17,7 @@ struct time_now_ret\n };\n \n struct time_now_ret now()\n-  __asm__ (\"time.now\")\n+  __asm__ (GOSYM_PREFIX \"time.now\")\n   __attribute__ ((no_split_stack));\n \n struct time_now_ret"}, {"sha": "369753749162e0985987f26d303e7fe5443372c8", "filename": "libgo/runtime/go-reflect-map.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-reflect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-reflect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-map.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -24,7 +24,7 @@ struct mapaccess_ret\n \n extern struct mapaccess_ret mapaccess (struct __go_map_type *, uintptr_t,\n \t\t\t\t       uintptr_t)\n-  asm (\"reflect.mapaccess\");\n+  __asm__ (GOSYM_PREFIX \"reflect.mapaccess\");\n \n struct mapaccess_ret\n mapaccess (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i)\n@@ -77,7 +77,7 @@ mapaccess (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i)\n \n extern void mapassign (struct __go_map_type *, uintptr_t, uintptr_t,\n \t\t       uintptr_t, _Bool)\n-  asm (\"reflect.mapassign\");\n+  __asm__ (GOSYM_PREFIX \"reflect.mapassign\");\n \n void\n mapassign (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i,\n@@ -118,7 +118,7 @@ mapassign (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i,\n }\n \n extern int32_t maplen (uintptr_t)\n-  asm (\"reflect.maplen\");\n+  __asm__ (GOSYM_PREFIX \"reflect.maplen\");\n \n int32_t\n maplen (uintptr_t m)\n@@ -131,7 +131,7 @@ maplen (uintptr_t m)\n }\n \n extern unsigned char *mapiterinit (struct __go_map_type *, uintptr_t)\n-  asm (\"reflect.mapiterinit\");\n+  __asm__ (GOSYM_PREFIX \"reflect.mapiterinit\");\n \n unsigned char *\n mapiterinit (struct __go_map_type *mt, uintptr_t m)\n@@ -145,7 +145,7 @@ mapiterinit (struct __go_map_type *mt, uintptr_t m)\n }\n \n extern void mapiternext (unsigned char *)\n-  asm (\"reflect.mapiternext\");\n+  __asm__ (GOSYM_PREFIX \"reflect.mapiternext\");\n \n void\n mapiternext (unsigned char *it)\n@@ -160,7 +160,7 @@ struct mapiterkey_ret\n };\n \n extern struct mapiterkey_ret mapiterkey (unsigned char *)\n-  asm (\"reflect.mapiterkey\");\n+  __asm__ (GOSYM_PREFIX \"reflect.mapiterkey\");\n \n struct mapiterkey_ret\n mapiterkey (unsigned char *ita)\n@@ -203,7 +203,7 @@ mapiterkey (unsigned char *ita)\n /* Make a new map.  We have to build our own map descriptor.  */\n \n extern uintptr_t makemap (const struct __go_map_type *)\n-  asm (\"reflect.makemap\");\n+  __asm__ (GOSYM_PREFIX \"reflect.makemap\");\n \n uintptr_t\n makemap (const struct __go_map_type *t)"}, {"sha": "53ef2d396d46ac434dcd34c7ad634a1ea67ded14", "filename": "libgo/runtime/go-setenv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-setenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-setenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-setenv.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -14,7 +14,7 @@\n \n /* Set the C environment from Go.  This is called by syscall.Setenv.  */\n \n-void setenv_c (String, String) __asm__ (\"syscall.setenv_c\");\n+void setenv_c (String, String) __asm__ (GOSYM_PREFIX \"syscall.setenv_c\");\n \n void\n setenv_c (String k, String v)"}, {"sha": "1965e058816cd6611bae06f84cbacd17ae358002", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -457,7 +457,7 @@ runtime_setsig (int32 i, bool def __attribute__ ((unused)), bool restart)\n \n /* Used by the os package to raise SIGPIPE.  */\n \n-void os_sigpipe (void) __asm__ (\"os.sigpipe\");\n+void os_sigpipe (void) __asm__ (GOSYM_PREFIX \"os.sigpipe\");\n \n void\n os_sigpipe (void)"}, {"sha": "0a90e84bc1ee72b8bb93cc13eb8ec452a7d920ec", "filename": "libgo/runtime/go-typestring.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-typestring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-typestring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typestring.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -8,7 +8,7 @@\n #include \"interface.h\"\n #include \"go-type.h\"\n \n-String typestring(struct __go_empty_interface) asm (\"runtime.typestring\");\n+String typestring(struct __go_empty_interface) __asm__ (GOSYM_PREFIX \"runtime.typestring\");\n \n String\n typestring (struct __go_empty_interface e)"}, {"sha": "54788f19688bb2f0c09d68371aa5352c657a9c83", "filename": "libgo/runtime/go-unsafe-new.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-new.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-new.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-new.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -13,7 +13,7 @@\n /* Implement unsafe_New, called from the reflect package.  */\n \n void *unsafe_New (const struct __go_type_descriptor *)\n-  asm (\"reflect.unsafe_New\");\n+  __asm__ (GOSYM_PREFIX \"reflect.unsafe_New\");\n \n /* The dynamic type of the argument will be a pointer to a type\n    descriptor.  */"}, {"sha": "e4fb3366bd72de7ba814ce27f5bebe9353a8fbda", "filename": "libgo/runtime/go-unsafe-newarray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-newarray.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -13,7 +13,7 @@\n /* Implement unsafe_NewArray, called from the reflect package.  */\n \n void *unsafe_NewArray (const struct __go_type_descriptor *, intgo)\n-  asm (\"reflect.unsafe_NewArray\");\n+  __asm__ (GOSYM_PREFIX \"reflect.unsafe_NewArray\");\n \n /* The dynamic type of the argument will be a pointer to a type\n    descriptor.  */"}, {"sha": "ca1d2536412d0c65ddc268c6d652e95ebc4c0d5c", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -15,7 +15,7 @@\n    descriptor.  */\n \n extern const struct __go_type_descriptor unsafe_Pointer\n-  asm (\"__go_tdn_unsafe.Pointer\");\n+  __asm__ (GOSYM_PREFIX \"__go_tdn_unsafe.Pointer\");\n \n /* Used to determine the field alignment.  */\n struct field_align\n@@ -61,7 +61,7 @@ const struct __go_type_descriptor unsafe_Pointer =\n    it to be defined elsewhere.  */\n \n extern const struct __go_ptr_type pointer_unsafe_Pointer\n-  asm (\"__go_td_pN14_unsafe.Pointer\");\n+  __asm__ (GOSYM_PREFIX \"__go_td_pN14_unsafe.Pointer\");\n \n /* The reflection string.  */\n #define PREFLECTION \"*unsafe.Pointer\""}, {"sha": "f3e8f3809286ecd24b93e92a83989e132e3b727e", "filename": "libgo/runtime/goc2c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgoc2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fgoc2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgoc2c.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -488,7 +488,7 @@ write_gcc_func_header(char *package, char *name, struct params *params,\n \tprintf(\" %s_%s(\", package, name);\n \tfirst = 1;\n \twrite_params(params, &first);\n-\tprintf(\") asm (\\\"\");\n+\tprintf(\") __asm__ (GOSYM_PREFIX \\\"\");\n \tif (pkgpath != NULL)\n \t  printf(\"%s\", pkgpath);\n \telse if (prefix != NULL)"}, {"sha": "0f8ea6ea6bc331bfba6b3c0e59f7f08df113b830", "filename": "libgo/runtime/lfstack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Flfstack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Flfstack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Flfstack.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -57,7 +57,7 @@ runtime_lfstackpop(uint64 *head)\n }\n \n LFNode* runtime_lfstackpop2(uint64*)\n-  asm(\"runtime.lfstackpop2\");\n+  __asm__ (GOSYM_PREFIX \"runtime.lfstackpop2\");\n \n LFNode*\n runtime_lfstackpop2(uint64 *head)"}, {"sha": "48460b17959786c6c7e797b78ab5f3a9f5879b3c", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -23,7 +23,7 @@ MHeap runtime_mheap;\n extern MStats mstats;\t// defined in zruntime_def_$GOOS_$GOARCH.go\n \n extern volatile intgo runtime_MemProfileRate\n-  __asm__ (\"runtime.MemProfileRate\");\n+  __asm__ (GOSYM_PREFIX \"runtime.MemProfileRate\");\n \n // Allocate an object of at least size bytes.\n // Small objects are allocated from the per-thread cache's free lists.\n@@ -308,7 +308,7 @@ runtime_purgecachedstats(MCache *c)\n }\n \n extern uintptr runtime_sizeof_C_MStats\n-  __asm__ (\"runtime.Sizeof_C_MStats\");\n+  __asm__ (GOSYM_PREFIX \"runtime.Sizeof_C_MStats\");\n \n #define MaxArena32 (2U<<30)\n "}, {"sha": "172d81d5c3132880c7d9b792ba270fc7bc0cdd93", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -247,7 +247,7 @@ struct MStats\n };\n \n extern MStats mstats\n-  __asm__ (\"runtime.VmemStats\");\n+  __asm__ (GOSYM_PREFIX \"runtime.VmemStats\");\n \n \n // Size classes.  Computed and initialized by InitSizes."}, {"sha": "99063653013dd730f8216a7d4f725f9a3eac6eda", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -1449,7 +1449,7 @@ gc(struct gc_args *args)\n }\n \n void runtime_ReadMemStats(MStats *)\n-  __asm__(\"runtime.ReadMemStats\");\n+  __asm__ (GOSYM_PREFIX \"runtime.ReadMemStats\");\n \n void\n runtime_ReadMemStats(MStats *stats)"}, {"sha": "2cf2afba4336f4f4f8357713c588793198ad216c", "filename": "libgo/runtime/mprof.goc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmprof.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fmprof.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmprof.goc?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -285,7 +285,7 @@ runtime_MProf_Free(void *p, uintptr size)\n \n int64 runtime_blockprofilerate;  // in CPU ticks\n \n-void runtime_SetBlockProfileRate(intgo) asm(\"runtime.SetBlockProfileRate\");\n+void runtime_SetBlockProfileRate(intgo) __asm__ (GOSYM_PREFIX \"runtime.SetBlockProfileRate\");\n \n void\n runtime_SetBlockProfileRate(intgo rate)"}, {"sha": "85a56087c0832dbd299b6e25c1208d5f1a89ff20", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -106,7 +106,7 @@ runtime_panicstring(const char *s)\n \truntime_panic(err);\n }\n \n-void runtime_Goexit (void) asm (\"runtime.Goexit\");\n+void runtime_Goexit (void) __asm__ (GOSYM_PREFIX \"runtime.Goexit\");\n \n void\n runtime_Goexit(void)"}, {"sha": "591b968c0396c67dcab417e95ee62ca7e5019456", "filename": "libgo/runtime/parfor.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fparfor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fparfor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fparfor.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -37,7 +37,7 @@ runtime_parforalloc(uint32 nthrmax)\n // func parforalloc2(nthrmax uint32) *ParFor\n \n ParFor *runtime_parforalloc2(uint32)\n-   asm(\"runtime.parforalloc2\");\n+   __asm__ (GOSYM_PREFIX \"runtime.parforalloc2\");\n \n ParFor *\n runtime_parforalloc2(uint32 nthrmax)\n@@ -78,7 +78,7 @@ runtime_parforsetup(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, v\n // func parforsetup2(desc *ParFor, nthr, n uint32, ctx *byte, wait bool, body func(*ParFor, uint32))\n \n void runtime_parforsetup2(ParFor *, uint32, uint32, void *, bool, void *)\n-  asm(\"runtime.parforsetup2\");\n+  __asm__ (GOSYM_PREFIX \"runtime.parforsetup2\");\n \n void\n runtime_parforsetup2(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void *body)\n@@ -219,7 +219,7 @@ struct parforiters_ret {\n };\n \n struct parforiters_ret runtime_parforiters(ParFor *, uintptr)\n-  asm(\"runtime.parforiters\");\n+  __asm__ (GOSYM_PREFIX \"runtime.parforiters\");\n \n struct parforiters_ret\n runtime_parforiters(ParFor *desc, uintptr tid)"}, {"sha": "754c68e0bcd5f0875b86f653afbc155070b07770", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -503,8 +503,8 @@ runtime_schedinit(void)\n \t\truntime_raceinit();\n }\n \n-extern void main_init(void) __asm__ (\"__go_init_main\");\n-extern void main_main(void) __asm__ (\"main.main\");\n+extern void main_init(void) __asm__ (GOSYM_PREFIX \"__go_init_main\");\n+extern void main_main(void) __asm__ (GOSYM_PREFIX \"main.main\");\n \n // The main goroutine.\n void\n@@ -1500,7 +1500,7 @@ runtime_malg(int32 stacksize, byte** ret_stack, size_t* ret_stacksize)\n /* For runtime package testing.  */\n \n void runtime_testing_entersyscall(void)\n-  __asm__(\"runtime.entersyscall\");\n+  __asm__ (GOSYM_PREFIX \"runtime.entersyscall\");\n \n void\n runtime_testing_entersyscall()\n@@ -1509,7 +1509,7 @@ runtime_testing_entersyscall()\n }\n \n void runtime_testing_exitsyscall(void)\n-  __asm__(\"runtime.exitsyscall\");\n+  __asm__ (GOSYM_PREFIX \"runtime.exitsyscall\");\n \n void\n runtime_testing_exitsyscall()\n@@ -1609,7 +1609,7 @@ gfget(void)\n \treturn gp;\n }\n \n-void runtime_Gosched (void) asm (\"runtime.Gosched\");\n+void runtime_Gosched (void) __asm__ (GOSYM_PREFIX \"runtime.Gosched\");\n \n void\n runtime_Gosched(void)\n@@ -1688,7 +1688,7 @@ runtime_lockedOSThread(void)\n // for testing of callbacks\n \n _Bool runtime_golockedOSThread(void)\n-  asm(\"runtime.golockedOSThread\");\n+  __asm__ (GOSYM_PREFIX \"runtime.golockedOSThread\");\n \n _Bool\n runtime_golockedOSThread(void)\n@@ -1704,7 +1704,7 @@ runtime_mid()\n }\n \n intgo runtime_NumGoroutine (void)\n-  __asm__ (\"runtime.NumGoroutine\");\n+  __asm__ (GOSYM_PREFIX \"runtime.NumGoroutine\");\n \n intgo\n runtime_NumGoroutine()"}, {"sha": "b090169bbb7805c27cb99a0d7c3c49752df5a1a1", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -24,8 +24,8 @@ runtime_gotraceback(void)\n static int32\targc;\n static byte**\targv;\n \n-extern Slice os_Args asm (\"os.Args\");\n-extern Slice syscall_Envs asm (\"syscall.Envs\");\n+extern Slice os_Args __asm__ (GOSYM_PREFIX \"os.Args\");\n+extern Slice syscall_Envs __asm__ (GOSYM_PREFIX \"syscall.Envs\");\n \n void (*runtime_sysargs)(int32, uint8**);\n \n@@ -172,7 +172,7 @@ runtime_tickspersecond(void)\n }\n \n int64 runtime_pprof_runtime_cyclesPerSecond(void)\n-     asm(\"runtime_pprof.runtime_cyclesPerSecond\");\n+     __asm__ (GOSYM_PREFIX \"runtime_pprof.runtime_cyclesPerSecond\");\n \n int64\n runtime_pprof_runtime_cyclesPerSecond(void)"}, {"sha": "4a0ebf2bd040105c910610655b9d362ffa7574d1", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=f6b1e65ec393b757a70cb30b0d8ab0ed1af3dedf", "patch": "@@ -24,6 +24,10 @@\n #include \"interface.h\"\n #include \"go-alloc.h\"\n \n+#define _STRINGIFY2_(x) #x\n+#define _STRINGIFY_(x) _STRINGIFY2_(x)\n+#define GOSYM_PREFIX _STRINGIFY_(__USER_LABEL_PREFIX__)\n+\n /* This file supports C files copied from the 6g runtime library.\n    This is a version of the 6g runtime.h rewritten for gccgo's version\n    of the code.  */\n@@ -387,8 +391,8 @@ void\truntime_park(void(*)(Lock*), Lock*, const char*);\n void\truntime_tsleep(int64, const char*);\n M*\truntime_newm(void);\n void\truntime_goexit(void);\n-void\truntime_entersyscall(void) __asm__(\"syscall.Entersyscall\");\n-void\truntime_exitsyscall(void) __asm__(\"syscall.Exitsyscall\");\n+void\truntime_entersyscall(void) __asm__ (GOSYM_PREFIX \"syscall.Entersyscall\");\n+void\truntime_exitsyscall(void) __asm__ (GOSYM_PREFIX \"syscall.Exitsyscall\");\n void\tsiginit(void);\n bool\t__go_sigsend(int32 sig);\n int32\truntime_callers(int32, uintptr*, int32);\n@@ -453,7 +457,7 @@ void\truntime_futexwakeup(uint32*, uint32);\n  * so they can be garbage collected if there are no other pointers to nodes.\n  */\n void\truntime_lfstackpush(uint64 *head, LFNode *node)\n-  asm(\"runtime.lfstackpush\");\n+  __asm__ (GOSYM_PREFIX \"runtime.lfstackpush\");\n LFNode*\truntime_lfstackpop(uint64 *head);\n \n /*\n@@ -466,7 +470,7 @@ LFNode*\truntime_lfstackpop(uint64 *head);\n  */\n ParFor*\truntime_parforalloc(uint32 nthrmax);\n void\truntime_parforsetup(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void (*body)(ParFor*, uint32));\n-void\truntime_parfordo(ParFor *desc) asm(\"runtime.parfordo\");\n+void\truntime_parfordo(ParFor *desc) __asm__ (GOSYM_PREFIX \"runtime.parfordo\");\n \n /*\n  * low level C-called\n@@ -514,7 +518,7 @@ void\truntime_printcomplex(__complex double);\n struct __go_func_type;\n void reflect_call(const struct __go_func_type *, const void *, _Bool, _Bool,\n \t\t  void **, void **)\n-  asm (\"reflect.call\");\n+  __asm__ (GOSYM_PREFIX \"reflect.call\");\n \n /* Functions.  */\n #define runtime_panic __go_panic\n@@ -562,11 +566,11 @@ void\truntime_usleep(uint32);\n  * runtime c-called (but written in Go)\n  */\n void\truntime_printany(Eface)\n-     __asm__(\"runtime.Printany\");\n+     __asm__ (GOSYM_PREFIX \"runtime.Printany\");\n void\truntime_newTypeAssertionError(const String*, const String*, const String*, const String*, Eface*)\n-     __asm__(\"runtime.NewTypeAssertionError\");\n+     __asm__ (GOSYM_PREFIX \"runtime.NewTypeAssertionError\");\n void\truntime_newErrorString(String, Eface*)\n-     __asm__(\"runtime.NewErrorString\");\n+     __asm__ (GOSYM_PREFIX \"runtime.NewErrorString\");\n \n /*\n  * wrapped for go users\n@@ -577,8 +581,8 @@ void\truntime_semrelease(uint32 volatile *);\n int32\truntime_gomaxprocsfunc(int32 n);\n void\truntime_procyield(uint32);\n void\truntime_osyield(void);\n-void\truntime_LockOSThread(void) __asm__(\"runtime.LockOSThread\");\n-void\truntime_UnlockOSThread(void) __asm__(\"runtime.UnlockOSThread\");\n+void\truntime_LockOSThread(void) __asm__ (GOSYM_PREFIX \"runtime.LockOSThread\");\n+void\truntime_UnlockOSThread(void) __asm__ (GOSYM_PREFIX \"runtime.UnlockOSThread\");\n \n bool\truntime_showframe(String);\n "}]}