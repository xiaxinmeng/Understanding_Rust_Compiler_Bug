{"sha": "7f37b31d731262f65b5274e660ac123117e3b775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzN2IzMWQ3MzEyNjJmNjViNTI3NGU2NjBhYzEyMzExN2UzYjc3NQ==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2018-11-16T09:23:22Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2018-11-16T09:23:22Z"}, "message": "Allow target overrides of ctors/dtors support advertisement on VxWorks\n\n2018-11-16  Jerome Lambourg  <lambourg@adacore.com>\n\n        * config/vxworks.h (TARGET_VXWORKS_HAVE_CTORS_DTORS): New macro.\n        Default to TARGET_VXWORKS_RTP.\n        (SUPPORTS_INIT_PRIORITY): Use TARGET_VXWORKS_HAVE_CTORS_DTORS instead\n        of TARGET_VXWORKS_RTP.\n        * config/vxworksae.h: Also define TARGET_VXWORKS_HAVE_CTORS_DTORS.\n        * config/vxworks.c: Use TARGET_VXWORKS_HAVE_CTORS_DTORS instead\n        of TARGET_VXWORKS_RTP to set targetm.have_ctors_dtors.\n\nFrom-SVN: r266201", "tree": {"sha": "18933e0ad81eb68ca32bd2ea167f81f32037abaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18933e0ad81eb68ca32bd2ea167f81f32037abaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f37b31d731262f65b5274e660ac123117e3b775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f37b31d731262f65b5274e660ac123117e3b775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f37b31d731262f65b5274e660ac123117e3b775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f37b31d731262f65b5274e660ac123117e3b775/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff641ae11288626fb367dd7e56ddcc363c34d02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff641ae11288626fb367dd7e56ddcc363c34d02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff641ae11288626fb367dd7e56ddcc363c34d02a"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "f17c93a5e91952d8aa63dc6c532cfb9ef908b925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f37b31d731262f65b5274e660ac123117e3b775", "patch": "@@ -1,3 +1,13 @@\n+2018-11-16  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* config/vxworks.h (TARGET_VXWORKS_HAVE_CTORS_DTORS): New macro.\n+\tDefault to TARGET_VXWORKS_RTP.\n+\t(SUPPORTS_INIT_PRIORITY): Use TARGET_VXWORKS_HAVE_CTORS_DTORS instead\n+\tof TARGET_VXWORKS_RTP.\n+\t* config/vxworksae.h: Also define TARGET_VXWORKS_HAVE_CTORS_DTORS.\n+\t* config/vxworks.c: Use TARGET_VXWORKS_HAVE_CTORS_DTORS instead\n+\tof TARGET_VXWORKS_RTP to set targetm.have_ctors_dtors.\n+\n 2018-11-15  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR c++/25759"}, {"sha": "f0d197451996f9759e981e11a78aea148b11abae", "filename": "gcc/config/vxworks.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2Fconfig%2Fvxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2Fconfig%2Fvxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.c?ref=7f37b31d731262f65b5274e660ac123117e3b775", "patch": "@@ -145,11 +145,14 @@ vxworks_override_options (void)\n       targetm.emutls.debug_form_tls_address = true;\n     }\n \n-  /* We can use .ctors/.dtors sections only in RTP mode.  But, if the\n-     compiler was built with --enable-initfini-array, assume the\n-     toolchain implements the proper glue to make .init_array and\n-     .fini_array work.  */\n-  targetm.have_ctors_dtors = TARGET_VXWORKS_RTP || HAVE_INITFINI_ARRAY_SUPPORT;\n+  /* Arrange to use .ctors/.dtors sections if the target VxWorks configuration\n+     and mode supports it, or the init/fini_array sections if we were\n+     configured with --enable-initfini-array explicitly.  In the latter case,\n+     the toolchain user is expected to provide whatever linker level glue is\n+     required to get things to operate properly.  */\n+\n+  targetm.have_ctors_dtors = \n+    TARGET_VXWORKS_HAVE_CTORS_DTORS || HAVE_INITFINI_ARRAY_SUPPORT;\n \n   /* PIC is only supported for RTPs.  */\n   if (flag_pic && !TARGET_VXWORKS_RTP)"}, {"sha": "156fcc060aa90fa543f8a8110bd1a76f172725c0", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f37b31d731262f65b5274e660ac123117e3b775/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=7f37b31d731262f65b5274e660ac123117e3b775", "patch": "@@ -142,13 +142,18 @@ along with GCC; see the file COPYING3.  If not see\n #define VXWORKS_OVERRIDE_OPTIONS vxworks_override_options ()\n extern void vxworks_override_options (void);\n \n-/* RTPs support prioritized constructors and destructors: the\n-   implementation relies on numbered .ctors* sections. If the compiler\n-   was built with --enable-initfini-array, we assume the user uses a\n-   linker script that sorts and merges the .init_array.* sections\n-   appropriately.  */\n+/* Whether the VxWorks variant and mode supports constructors/destructors\n+   placed in .ctors/.dtors section or if we should generate proxy functions\n+   for them, with special names which munch knows how to collect.  On most\n+   versions of VxWorks, only the RTP loader supports .ctors/.dtors sections,\n+   not the kernel module loader.  */\n+#define TARGET_VXWORKS_HAVE_CTORS_DTORS TARGET_VXWORKS_RTP\n+\n+/* Support for prioritized ctors/dtors is in sync with the support for sections\n+   on the VxWorks front, and is assumed to be provided by whatever linker level\n+   glue is required if we were configured with --enable-initfini-array.  */\n #define SUPPORTS_INIT_PRIORITY \\\n-  (TARGET_VXWORKS_RTP || HAVE_INITFINI_ARRAY_SUPPORT)\n+  (TARGET_VXWORKS_HAVE_CTORS_DTORS || HAVE_INITFINI_ARRAY_SUPPORT)\n \n #if !HAVE_INITFINI_ARRAY_SUPPORT\n /* VxWorks requires special handling of constructors and destructors."}]}