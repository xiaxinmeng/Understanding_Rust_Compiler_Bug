{"sha": "db77171de4ffad95cbdf68a50a8d113c73cb3353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3NzE3MWRlNGZmYWQ5NWNiZGY2OGE1MGE4ZDExM2M3M2NiMzM1Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-08T17:20:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-08T17:20:15Z"}, "message": "genattrtab.c (attr_desc): Remove negative_ok and unsigned_p.\n\n\t* genattrtab.c (attr_desc): Remove negative_ok and unsigned_p.\n\t(check_attr_value, write_attr_get, write_expr_attr_cache,\n\tfind_attr, make_internal_attr): Don't reference negative_ok or\n\tunsigned_p.\n\t* genattrtab.h (ATTR_NEGATIVE_OK, ATTR_UNSIGNED,\n\tATTR_FUNC_UNITS, ATTR_BLOCKAGE): Remove.\n\t(ATTR_STATIC): Adjust the value.\n\nFrom-SVN: r97841", "tree": {"sha": "0491ccbac07061bd023b048df559376fb0ee3c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0491ccbac07061bd023b048df559376fb0ee3c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db77171de4ffad95cbdf68a50a8d113c73cb3353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db77171de4ffad95cbdf68a50a8d113c73cb3353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db77171de4ffad95cbdf68a50a8d113c73cb3353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db77171de4ffad95cbdf68a50a8d113c73cb3353/comments", "author": null, "committer": null, "parents": [{"sha": "54c1f9206d287ce17ab6f9f2ddbf3ae25407bfc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c1f9206d287ce17ab6f9f2ddbf3ae25407bfc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c1f9206d287ce17ab6f9f2ddbf3ae25407bfc8"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "9b13173ddd90c43833e9391afe78abb702db4bfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db77171de4ffad95cbdf68a50a8d113c73cb3353", "patch": "@@ -14,6 +14,14 @@\n \n \t* tree.h (STRIP_MAIN_TYPE_NOPS): Remove.\n \n+\t* genattrtab.c (attr_desc): Remove negative_ok and unsigned_p.\n+\t(check_attr_value, write_attr_get, write_expr_attr_cache,\n+\tfind_attr, make_internal_attr): Don't reference negative_ok or\n+\tunsigned_p.\n+\t* genattrtab.h (ATTR_NEGATIVE_OK, ATTR_UNSIGNED,\n+\tATTR_FUNC_UNITS, ATTR_BLOCKAGE): Remove.\n+\t(ATTR_STATIC): Adjust the value.\n+\n 2005-04-08  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/tpf.h (ASM_SPEC): Define."}, {"sha": "e45466715f8759b0f6f27fad397515ebd79aa7f0", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=db77171de4ffad95cbdf68a50a8d113c73cb3353", "patch": "@@ -184,8 +184,6 @@ struct attr_desc\n   struct attr_value *default_val; /* Default value for this attribute.  */\n   int lineno : 24;\t\t/* Line number.  */\n   unsigned is_numeric\t: 1;\t/* Values of this attribute are numeric.  */\n-  unsigned negative_ok\t: 1;\t/* Allow negative numeric values.  */\n-  unsigned unsigned_p\t: 1;\t/* Make the output function unsigned int.  */\n   unsigned is_const\t: 1;\t/* Attribute value constant for each run.  */\n   unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n   unsigned static_p\t: 1;\t/* Make the output function static.  */\n@@ -967,7 +965,7 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n \t  break;\n \t}\n \n-      if (INTVAL (exp) < 0 && ! attr->negative_ok)\n+      if (INTVAL (exp) < 0)\n \t{\n \t  message_with_line (attr->lineno,\n \t\t\t     \"negative numeric value specified for attribute %s\",\n@@ -984,8 +982,6 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n       if (attr == 0 || attr->is_numeric)\n \t{\n \t  p = XSTR (exp, 0);\n-\t  if (attr && attr->negative_ok && *p == '-')\n-\t    p++;\n \t  for (; *p; p++)\n \t    if (! ISDIGIT (*p))\n \t      {\n@@ -1088,8 +1084,7 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n \t    have_error = 1;\n \t  }\n \telse if (attr\n-\t\t && (attr->is_numeric != attr2->is_numeric\n-\t\t     || (! attr->negative_ok && attr2->negative_ok)))\n+\t\t && attr->is_numeric != attr2->is_numeric)\n \t  {\n \t    message_with_line (attr->lineno,\n \t\t\"numeric attribute mismatch calling `%s' from `%s'\",\n@@ -3716,8 +3711,6 @@ write_attr_get (struct attr_desc *attr)\n     printf (\"static \");\n   if (!attr->is_numeric)\n     printf (\"enum attr_%s\\n\", attr->name);\n-  else if (attr->unsigned_p)\n-    printf (\"unsigned int\\n\");\n   else\n     printf (\"int\\n\");\n \n@@ -3965,8 +3958,6 @@ write_expr_attr_cache (rtx p, struct attr_desc *attr)\n \n       if (!attr->is_numeric)\n \tprintf (\"  enum attr_%s \", attr->name);\n-      else if (attr->unsigned_p)\n-\tprintf (\"  unsigned int \");\n       else\n \tprintf (\"  int \");\n \n@@ -4278,8 +4269,8 @@ find_attr (const char **name_p, int create)\n   attr = oballoc (sizeof (struct attr_desc));\n   attr->name = DEF_ATTR_STRING (name);\n   attr->first_value = attr->default_val = NULL;\n-  attr->is_numeric = attr->negative_ok = attr->is_const = attr->is_special = 0;\n-  attr->unsigned_p = attr->static_p = 0;\n+  attr->is_numeric = attr->is_const = attr->is_special = 0;\n+  attr->static_p = 0;\n   attr->next = attrs[index];\n   attrs[index] = attr;\n \n@@ -4301,8 +4292,6 @@ make_internal_attr (const char *name, rtx value, int special)\n   attr->is_numeric = 1;\n   attr->is_const = 0;\n   attr->is_special = (special & ATTR_SPECIAL) != 0;\n-  attr->negative_ok = (special & ATTR_NEGATIVE_OK) != 0;\n-  attr->unsigned_p = (special & ATTR_UNSIGNED) != 0;\n   attr->static_p = (special & ATTR_STATIC) != 0;\n   attr->default_val = get_attr_value (value, attr, -2);\n }"}, {"sha": "647c3b7b631a528cf143f1f868a89311d49ab871", "filename": "gcc/genattrtab.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2Fgenattrtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db77171de4ffad95cbdf68a50a8d113c73cb3353/gcc%2Fgenattrtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.h?ref=db77171de4ffad95cbdf68a50a8d113c73cb3353", "patch": "@@ -51,8 +51,4 @@ extern void write_automata (void);\n /* Flags for make_internal_attr's `special' parameter.  */\n #define ATTR_NONE\t\t0\n #define ATTR_SPECIAL\t\t(1 << 0)\n-#define ATTR_NEGATIVE_OK\t(1 << 1)\n-#define ATTR_UNSIGNED\t\t(1 << 2)\n-#define ATTR_FUNC_UNITS\t\t(1 << 3)\n-#define ATTR_BLOCKAGE\t\t(1 << 4)\n-#define ATTR_STATIC\t\t(1 << 5)\n+#define ATTR_STATIC\t\t(1 << 1)"}]}