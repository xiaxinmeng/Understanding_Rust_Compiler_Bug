{"sha": "3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1ZDg2ZWM3N2I2YmY5Y2YxYzMwYmZmYzA0MzQzY2NlZDNmOTQ5Nw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2015-06-01T09:03:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-01T09:03:34Z"}, "message": "utils.c (scale_by_factor_of): When handling a function call expression, process the corresponding function body.\n\n\t* gcc-interface/utils.c (scale_by_factor_of): When handling a function\n\tcall expression, process the corresponding function body.  Also handle\n\tpotential addends.\n\nFrom-SVN: r223921", "tree": {"sha": "1c81186880e56bb61a4daaa098454c3a378e0a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c81186880e56bb61a4daaa098454c3a378e0a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66dc4b95404311ba09996e37f7a8c0f1472feac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dc4b95404311ba09996e37f7a8c0f1472feac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66dc4b95404311ba09996e37f7a8c0f1472feac7"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "61fb680ddb0feb87dd0bc5875fe1acbc09ae3bcf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/utils.c (scale_by_factor_of): When handling a function\n+\tcall expression, process the corresponding function body.  Also handle\n+\tpotential addends.\n+\n 2015-06-01  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Replace pointer types with"}, {"sha": "77d00b325f39b03ea996dc227abf1d72b0d7faf6", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5d86ec77b6bf9cf1c30bffc04343cced3f9497/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=3b5d86ec77b6bf9cf1c30bffc04343cced3f9497", "patch": "@@ -2908,7 +2908,24 @@ process_deferred_decl_context (bool force)\n static unsigned int\n scale_by_factor_of (tree expr, unsigned int value)\n {\n+  unsigned HOST_WIDE_INT addend = 0;\n+  unsigned HOST_WIDE_INT factor = 1;\n+\n+  /* Peel conversions around EXPR and try to extract bodies from function\n+     calls: it is possible to get the scale factor from size functions.  */\n   expr = remove_conversions (expr, true);\n+  if (TREE_CODE (expr) == CALL_EXPR)\n+    expr = maybe_inline_call_in_expr (expr);\n+\n+  /* Sometimes we get PLUS_EXPR (BIT_AND_EXPR (..., X), Y), where Y is a\n+     multiple of the scale factor we are looking for.  */\n+  if (TREE_CODE (expr) == PLUS_EXPR\n+      && TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST\n+      && tree_fits_uhwi_p (TREE_OPERAND (expr, 1)))\n+    {\n+      addend = TREE_INT_CST_LOW (TREE_OPERAND (expr, 1));\n+      expr = TREE_OPERAND (expr, 0);\n+    }\n \n   /* An expression which is a bitwise AND with a mask has a power-of-2 factor\n      corresponding to the number of trailing zeros of the mask.  */\n@@ -2921,12 +2938,21 @@ scale_by_factor_of (tree expr, unsigned int value)\n       while ((mask & 1) == 0 && i < HOST_BITS_PER_WIDE_INT)\n \t{\n \t  mask >>= 1;\n-\t  value *= 2;\n+\t  factor *= 2;\n \t  i++;\n \t}\n     }\n \n-  return value;\n+  /* If the addend is not a multiple of the factor we found, give up.  In\n+     theory we could find a smaller common factor but it's useless for our\n+     needs.  This situation arises when dealing with a field F1 with no\n+     alignment requirement but that is following a field F2 with such\n+     requirements.  As long as we have F2's offset, we don't need alignment\n+     information to compute F1's.  */\n+  if (addend % factor != 0)\n+    factor = 1;\n+\n+  return factor * value;\n }\n \n /* Given two consecutive field decls PREV_FIELD and CURR_FIELD, return true"}]}