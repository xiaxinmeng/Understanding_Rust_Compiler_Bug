{"sha": "e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJmY2JhYTNlNGRiZDRlYjUxODRiYjAzZTU3MGM0NGE1ZDBjNTJhYg==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-07-11T14:25:09Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-07-11T14:25:09Z"}, "message": "basic_ios.h (copyfmt): Document.\n\n2003-07-11  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* include/bits/basic_ios.h (copyfmt): Document.\n\t* include/bits/ios_base.h (event, event_callback, register_callback,\n\txalloc, iword, pword):  Document.\n\t(imbue, ~ios_base): Update docs on callbacks.\n\nFrom-SVN: r69235", "tree": {"sha": "b5db99e96736b15fbf1eeddb24fbe99aea8c8a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5db99e96736b15fbf1eeddb24fbe99aea8c8a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee226d25fc4af5f577cb05386e44e2dd0aa8fc6"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "dc28eafa12acff200393c1b6a61f6fb92747cb81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "patch": "@@ -1,3 +1,10 @@\n+2003-07-11  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* include/bits/basic_ios.h (copyfmt): Document.\n+\t* include/bits/ios_base.h (event, event_callback, register_callback,\n+\txalloc, iword, pword):  Document.\n+\t(imbue, ~ios_base): Update docs on callbacks.\n+\n 2003-07-11  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4 (GLIBCC_ENABLE_SYMVERS):  Tweak comments.  Add"}, {"sha": "e017ddc08c2adbc40669d2f15d7da1f024904656", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "patch": "@@ -319,7 +319,15 @@ namespace std\n       rdbuf(basic_streambuf<_CharT, _Traits>* __sb);\n \n       /**\n-       *  @doctodo\n+       *  @brief  Copies fields of __rhs into this.\n+       *  @param  __rhs  The source values for the copies.\n+       *  @return  Reference to this object.\n+       *\n+       *  All fields of __rhs are copied into this object except that rdbuf()\n+       *  and rdstate() remain unchanged.  All values in the pword and iword\n+       *  arrays are copied.  Before copying, each callback is invoked with\n+       *  erase_event.  After copying, each (new) callback is invoked with\n+       *  copyfmt_event.  The final step is to copy exceptions().\n       */\n       basic_ios&\n       copyfmt(const basic_ios& __rhs);"}, {"sha": "db8f9c9252538208be5cfba527ada3035193c22e", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "patch": "@@ -371,7 +371,10 @@ namespace std\n \n     // Callbacks;\n     /**\n-     *  @doctodo\n+     *  @brief  The set of events that may be passed to an event callback.\n+     *\n+     *  erase_event is used during ~ios() and copyfmt().  imbue_event is used\n+     *  during imbue().  copyfmt_event is used during copyfmt().\n     */\n     enum event\n     {\n@@ -381,12 +384,26 @@ namespace std\n     };\n \n     /**\n-     *  @doctodo\n+     *  @brief  The type of an event callback function.\n+     *  @param  event  One of the members of the event enum.\n+     *  @param  ios_base  Reference to the ios_base object.\n+     *  @param  int  The integer provided when the callback was registered.\n+     *\n+     *  Event callbacks are user defined functions that get called during\n+     *  several ios_base and basic_ios functions, specifically imbue(),\n+     *  copyfmt(), and ~ios().\n     */\n     typedef void (*event_callback) (event, ios_base&, int);\n \n     /**\n-     *  @doctodo\n+     *  @brief  Add the callback __fn with parameter __index.\n+     *  @param  __fn  The function to add.\n+     *  @param  __index  The integer to pass to the function when invoked.\n+     *\n+     *  Registers a function as an event callback with an integer parameter to\n+     *  be passed to the function when invoked.  Multiple copies of the\n+     *  function are allowed.  If there are multiple callbacks, they are\n+     *  invoked in the order they were registered.\n     */\n     void \n     register_callback(event_callback __fn, int __index);\n@@ -621,8 +638,8 @@ namespace std\n      *  @param  loc  The new locale.\n      *  @return  The previous locale.\n      *\n-     *  Sets the new locale for this stream, and\n-     *  [XXX does something with callbacks].\n+     *  Sets the new locale for this stream, and then invokes each callback\n+     *  with imbue_event.\n     */\n     locale \n     imbue(const locale& __loc);\n@@ -650,13 +667,34 @@ namespace std\n \n     // [27.4.2.5] ios_base storage functions\n     /**\n-     *  @doctodo\n+     *  @brief  Access to unique indices.\n+     *  @return  An integer different from all previous calls.\n+     *\n+     *  This function returns a unique integer every time it is called.  It\n+     *  can be used for any purpose, but is primarily intended to be a unique\n+     *  index for the iword and pword functions.  The expectation is that an\n+     *  application calls xalloc in order to obtain an index in the iword and\n+     *  pword arrays that can be used without fear of conflict.\n+     *\n+     *  The implementation maintains a static variable that is incremented and\n+     *  returned on each invocation.  xalloc is guaranteed to return an index\n+     *  that is safe to use in the iword and pword arrays.\n     */\n     static int \n     xalloc() throw();\n \n     /**\n-     *  @doctodo\n+     *  @brief  Access to integer array.\n+     *  @param  __ix  Index into the array.\n+     *  @return  A reference to an integer associated with the index.\n+     *\n+     *  The iword function provides access to an array of integers that can be\n+     *  used for any purpose.  The array grows as required to hold the\n+     *  supplied index.  All integers in the array are initialized to 0.\n+     *\n+     *  The implementation reserves several indices.  You should use xalloc to\n+     *  obtain an index that is safe to use.  Also note that since the array\n+     *  can grow dynamically, it is not safe to hold onto the reference.\n     */\n     inline long& \n     iword(int __ix)\n@@ -667,7 +705,17 @@ namespace std\n     }\n \n     /**\n-     *  @doctodo\n+     *  @brief  Access to void pointer array.\n+     *  @param  __ix  Index into the array.\n+     *  @return  A reference to a void* associated with the index.\n+     *\n+     *  The pword function provides access to an array of pointers that can be\n+     *  used for any purpose.  The array grows as required to hold the\n+     *  supplied index.  All pointers in the array are initialized to 0.\n+     *\n+     *  The implementation reserves several indices.  You should use xalloc to\n+     *  obtain an index that is safe to use.  Also note that since the array\n+     *  can grow dynamically, it is not safe to hold onto the reference.\n     */\n     inline void*& \n     pword(int __ix)\n@@ -679,8 +727,12 @@ namespace std\n \n     // Destructor\n     /**\n-     *  Destroys local storage and\n-     *  [XXX does something with callbacks].\n+     *  Invokes each callback with erase_event.  Destroys local storage.\n+     *\n+     *  Note that the ios_base object for the standard streams never gets\n+     *  destroyed.  As a result, any callbacks registered with the standard\n+     *  streams will not get invoked with erase_event (unless copyfmt is\n+     *  used).\n     */\n     virtual ~ios_base();\n "}]}