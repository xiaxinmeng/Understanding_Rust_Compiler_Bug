{"sha": "54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRiYTM5ZjU5OWZjMmYzZDU5ZmQzY2Q4MjhhMzAxY2U5YjczMWEyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-11-07T13:20:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-07T13:20:33Z"}, "message": "array (_GLIBCXX_THROW_OR_ABORT): Move...\n\n2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/debug/array (_GLIBCXX_THROW_OR_ABORT): Move...\n\t* include/bits/c++config: ... here.\n\t* include/bits/shared_ptr_base.h (__throw_bad_weak_ptr): Use it.\n\t* include/ext/pb_ds/exception.hpp: Likewise.\n\t* include/ext/throw_allocator.h (__throw_forced_error): Likewise.\n\t* include/ext/concurrence.h (__throw_concurrence_lock_error,\n\t__throw_concurrence_unlock_error, __throw_concurrence_broadcast_error,\n\t__throw_concurrence_wait_error): Likewise.\n\t* include/tr1/shared_ptr.h (__throw_bad_weak_ptr): Likewise.\n\t* include/tr1/functional (function<_Res(_ArgTypes...)>::operator()\n\t(_ArgTypes...)): Likewise.\n\t* libsupc++/eh_aux_runtime.cc (__cxxabiv1::__cxa_bad_cast,\n\t__cxxabiv1::__cxa_bad_typeid): Likewise.\n\t* libsupc++/vec.cc (compute_size): Likewise.\n\t* libsupc++/new_op.cc (operator new (std::size_t)): Likewise.\n\t* src/c++11/functexcept.cc: Likewise.\n\t* testsuite/util/io/illegal_input_error.hpp\n\t(__throw_illegal_input_error): Likewise.\n\t* libsupc++/eh_personality.cc: Avoid warning with -fno-exceptions.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error line\n\tnumbers.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/\n\ttuple_element_debug_neg.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Likewise.\n\nFrom-SVN: r193295", "tree": {"sha": "5e8df8f8120799af6eda74296cbb619955ece69b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e8df8f8120799af6eda74296cbb619955ece69b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/comments", "author": null, "committer": null, "parents": [{"sha": "c501a38e3ac91a43e3fcd70b7b5dff116805389e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c501a38e3ac91a43e3fcd70b7b5dff116805389e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c501a38e3ac91a43e3fcd70b7b5dff116805389e"}], "stats": {"total": 389, "additions": 119, "deletions": 270}, "files": [{"sha": "eee5bc9a7b24aa35def6016d7c69f6956ad72e5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,3 +1,34 @@\n+2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/debug/array (_GLIBCXX_THROW_OR_ABORT): Move...\n+\t* include/bits/c++config: ... here.\n+\t* include/bits/shared_ptr_base.h (__throw_bad_weak_ptr): Use it.\n+\t* include/ext/pb_ds/exception.hpp: Likewise.\n+\t* include/ext/throw_allocator.h (__throw_forced_error): Likewise.\n+\t* include/ext/concurrence.h (__throw_concurrence_lock_error,\n+\t__throw_concurrence_unlock_error, __throw_concurrence_broadcast_error,\n+\t__throw_concurrence_wait_error): Likewise.\n+\t* include/tr1/shared_ptr.h (__throw_bad_weak_ptr): Likewise.\n+\t* include/tr1/functional (function<_Res(_ArgTypes...)>::operator()\n+\t(_ArgTypes...)): Likewise.\n+\t* libsupc++/eh_aux_runtime.cc (__cxxabiv1::__cxa_bad_cast,\n+\t__cxxabiv1::__cxa_bad_typeid): Likewise.\n+\t* libsupc++/vec.cc (compute_size): Likewise.\n+\t* libsupc++/new_op.cc (operator new (std::size_t)): Likewise.\n+\t* src/c++11/functexcept.cc: Likewise.\n+\t* testsuite/util/io/illegal_input_error.hpp\n+\t(__throw_illegal_input_error): Likewise.\n+\t* libsupc++/eh_personality.cc: Avoid warning with -fno-exceptions.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error line\n+\tnumbers.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/\n+\ttuple_element_debug_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Likewise.\n+\n 2012-11-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/stl_vector.h (vector(size_type)): Add missing allocator"}, {"sha": "aba931b08cc8918b9abfdfee972a13cbcc425a21", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,7 +1,6 @@\n // Predefined symbols and macros -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 1997-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -115,6 +114,14 @@\n # define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT\n #endif\n \n+#ifndef _GLIBCXX_THROW_OR_ABORT\n+# if __EXCEPTIONS\n+#  define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))\n+# else\n+#  define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())\n+# endif\n+#endif\n+\n // Macro for extern template, ie controling template linkage via use\n // of extern keyword on template declaration. As documented in the g++\n // manual, it inhibits all implicit instantiations and is used"}, {"sha": "ead37284aa1c6dd31784b15cf014651f428f8119", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -73,13 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Substitute for bad_weak_ptr object in the case of -fno-exceptions.\n   inline void\n   __throw_bad_weak_ptr()\n-  {\n-#if __EXCEPTIONS\n-    throw bad_weak_ptr();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }\n \n   using __gnu_cxx::_Lock_policy;\n   using __gnu_cxx::__default_lock_policy;"}, {"sha": "21b596b8f19f1f640ae293447571010497a182ec", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -33,14 +33,6 @@\n \n #include <debug/safe_sequence.h>\n \n-#ifndef _GLIBCXX_THROW_OR_ABORT\n-# if __EXCEPTIONS\n-#  define _GLIBCXX_THROW_OR_ABORT(_Exc) (throw (_Exc))\n-# else\n-#  define _GLIBCXX_THROW_OR_ABORT(_Exc) (__builtin_abort())\n-# endif\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n@@ -165,7 +157,7 @@ namespace __debug\n       operator[](size_type __n) const noexcept\n       {\n \treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t : (_GLIBCXX_THROW_OR_ABORT (_Array_check_subscript<_Nm>(__n)),\n+\t : (_GLIBCXX_THROW_OR_ABORT(_Array_check_subscript<_Nm>(__n)),\n \t    _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n@@ -198,7 +190,7 @@ namespace __debug\n       front() const\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, 0)\n-\t  : (_GLIBCXX_THROW_OR_ABORT (_Array_check_nonempty<_Nm>()),\n+\t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n@@ -213,7 +205,7 @@ namespace __debug\n       back() const\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n-\t  : (_GLIBCXX_THROW_OR_ABORT (_Array_check_nonempty<_Nm>()),\n+\t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n@@ -316,6 +308,4 @@ namespace __debug\n     };\n } // namespace std\n \n-#undef _GLIBCXX_THROW_OR_ABORT\n-\n #endif // _GLIBCXX_DEBUG_ARRAY"}, {"sha": "50b7329094960549049e42a646e23b46dc479b3c", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -99,44 +99,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Substitute for concurrence_error object in the case of -fno-exceptions.\n   inline void\n   __throw_concurrence_lock_error()\n-  {\n-#if __EXCEPTIONS\n-    throw __concurrence_lock_error();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(__concurrence_lock_error()); }\n \n   inline void\n   __throw_concurrence_unlock_error()\n-  {\n-#if __EXCEPTIONS\n-    throw __concurrence_unlock_error();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(__concurrence_unlock_error()); }\n \n #ifdef __GTHREAD_HAS_COND\n   inline void\n   __throw_concurrence_broadcast_error()\n-  {\n-#if __EXCEPTIONS\n-    throw __concurrence_broadcast_error();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(__concurrence_broadcast_error()); }\n \n   inline void\n   __throw_concurrence_wait_error()\n-  {\n-#if __EXCEPTIONS\n-    throw __concurrence_wait_error();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(__concurrence_wait_error()); }\n #endif\n  \n   class __mutex "}, {"sha": "9768ab343db90689e2bab02c7cd9a5f96a007564", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,7 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2005-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -73,39 +72,21 @@ namespace __gnu_pbds\n   /// A container cannot be resized.\n   struct resize_error : public container_error { };\n \n-#if __EXCEPTIONS\n   inline void\n-  __throw_container_error(void)\n-  { throw container_error(); }\n+  __throw_container_error()\n+  { _GLIBCXX_THROW_OR_ABORT(container_error()); }\n \n   inline void\n-  __throw_insert_error(void)\n-  { throw insert_error(); }\n+  __throw_insert_error()\n+  { _GLIBCXX_THROW_OR_ABORT(insert_error()); }\n \n   inline void\n-  __throw_join_error(void)\n-  { throw join_error(); }\n+  __throw_join_error()\n+  { _GLIBCXX_THROW_OR_ABORT(join_error()); }\n \n   inline void\n-  __throw_resize_error(void)\n-  { throw resize_error(); }\n-#else\n-  inline void\n-  __throw_container_error(void)\n-  { std::abort(); }\n-\n-  inline void\n-  __throw_insert_error(void)\n-  { std::abort(); }\n-\n-  inline void\n-  __throw_join_error(void)\n-  { std::abort(); }\n-\n-  inline void\n-  __throw_resize_error(void)\n-  { std::abort(); }\n-#endif\n+  __throw_resize_error()\n+  { _GLIBCXX_THROW_OR_ABORT(resize_error()); }\n   //@}\n } // namespace __gnu_pbds\n "}, {"sha": "0dbd3512b35d6f5dde526cbed97e5c73771f2d27", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -77,14 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Substitute for forced_error object when -fno-exceptions.\n   inline void\n   __throw_forced_error()\n-  {\n-#if __EXCEPTIONS\n-    throw forced_error();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n-\n+  { _GLIBCXX_THROW_OR_ABORT(forced_error()); }\n \n   /**\n    *  @brief Base class for checking address and label information"}, {"sha": "d9b7a842bcdaaeffcaa8ad724564ef17a7c75898", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,7 +1,6 @@\n // TR1 functional header -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2004-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -2144,13 +2143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator()(_ArgTypes... __args) const\n     {\n       if (_M_empty())\n-        {\n-#if __EXCEPTIONS\n-          throw bad_function_call();\n-#else\n-          __builtin_abort();\n-#endif\n-        }\n+\t_GLIBCXX_THROW_OR_ABORT(bad_function_call());\n       return _M_invoker(_M_functor, __args...);\n     }\n "}, {"sha": "8f9870deb59b1ae3476d7d7f389303b3984577d4", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,7 +1,6 @@\n // <tr1/shared_ptr.h> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2007-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,13 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Substitute for bad_weak_ptr object in the case of -fno-exceptions.\n   inline void\n   __throw_bad_weak_ptr()\n-  {\n-#if __EXCEPTIONS\n-    throw bad_weak_ptr();\n-#else\n-    __builtin_abort();\n-#endif\n-  }\n+  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }\n \n   using __gnu_cxx::_Lock_policy;\n   using __gnu_cxx::__default_lock_policy;"}, {"sha": "0cbce24d3169fdfb6ad1979e7e00eb21e4383125", "filename": "libstdc++-v3/libsupc++/eh_aux_runtime.cc", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,6 +1,5 @@\n // -*- C++ -*- Common throw conditions.\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2009, 2011\n-// Free Software Foundation\n+// Copyright (C) 1994-2012 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -31,21 +30,9 @@\n \n extern \"C\" void\n __cxxabiv1::__cxa_bad_cast ()\n-{\n-#ifdef __EXCEPTIONS  \n-  throw std::bad_cast();\n-#else\n-  std::abort();\n-#endif\n-}\n+{ _GLIBCXX_THROW_OR_ABORT(std::bad_cast()); }\n \n extern \"C\" void\n __cxxabiv1::__cxa_bad_typeid ()\n-{\n-#ifdef __EXCEPTIONS  \n-  throw std::bad_typeid();\n-#else\n-  std::abort();\n-#endif\n-}\n+{ _GLIBCXX_THROW_OR_ABORT(std::bad_typeid()); }\n "}, {"sha": "2963c0c584a3f72fb9d9421adef6fcd5e0cbe94d", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -768,7 +768,7 @@ __cxa_call_unexpected (void *exc_obj_in)\n       if (check_exception_spec (&info, __get_exception_header_from_obj\n                                   (new_ptr)->exceptionType,\n \t\t\t\tnew_ptr, xh_switch_value))\n-\t__throw_exception_again;\n+\t{ __throw_exception_again; }\n \n       // If the exception spec allows std::bad_exception, throw that.\n       // We don't have a thrown object to compare against, but since"}, {"sha": "7366d556fd8da3fb1e8ce37b3f39b1732dfa9c07", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,7 +1,6 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2009, 2011\n-// Free Software Foundation\n+// Copyright (C) 1997-2012 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -54,11 +53,7 @@ operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n     {\n       new_handler handler = __new_handler;\n       if (! handler)\n-#ifdef __EXCEPTIONS\n-\tthrow bad_alloc();\n-#else\n-        std::abort();\n-#endif\n+\t_GLIBCXX_THROW_OR_ABORT(bad_alloc());\n       handler ();\n       p = (void *) malloc (sz);\n     }"}, {"sha": "04cb3fa6436fe63227541f2950543ac1db2678e1", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -28,7 +28,6 @@\n #include <cxxabi.h>\n #include <new>\n #include <exception>\n-#include <cstdlib>\n #include <bits/exception_defines.h>\n #include \"unwind-cxx.h\"\n \n@@ -66,18 +65,10 @@ namespace __cxxabiv1\n \t\t\t     std::size_t padding_size)\n     {\n       if (element_size && element_count > std::size_t(-1) / element_size)\n-#ifdef __EXCEPTIONS\n-\tthrow std::bad_alloc();\n-#else\n-        std::abort();\n-#endif\n+\t_GLIBCXX_THROW_OR_ABORT(std::bad_alloc());\n       std::size_t size = element_count * element_size;\n       if (size + padding_size < size)\n-#ifdef __EXCEPTIONS\n-\tthrow std::bad_alloc();\n-#else\n-        std::abort();\n-#endif\n+\t_GLIBCXX_THROW_OR_ABORT(std::bad_alloc());\n       return size + padding_size;\n     }\n   }"}, {"sha": "687882b7fdd2cb20e7b83074d1fc499fd0f448ff", "filename": "libstdc++-v3/src/c++11/functexcept.cc", "status": "modified", "additions": 38, "deletions": 111, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,5 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2005, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,151 +43,79 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if __EXCEPTIONS\n   void\n-  __throw_bad_exception(void)\n-  { throw bad_exception(); }\n+  __throw_bad_exception()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_exception()); }\n \n   void\n-  __throw_bad_alloc(void)\n-  { throw bad_alloc(); }\n+  __throw_bad_alloc()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_alloc()); }\n \n   void\n-  __throw_bad_cast(void)\n-  { throw bad_cast(); }\n+  __throw_bad_cast()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_cast()); }\n \n   void\n-  __throw_bad_typeid(void)\n-  { throw bad_typeid(); }\n+  __throw_bad_typeid()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_typeid()); }\n \n   void\n-  __throw_logic_error(const char* __s)\n-  { throw logic_error(_(__s)); }\n+  __throw_logic_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(logic_error(_(__s))); }\n \n   void\n-  __throw_domain_error(const char* __s)\n-  { throw domain_error(_(__s)); }\n+  __throw_domain_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(domain_error(_(__s))); }\n \n   void\n-  __throw_invalid_argument(const char* __s)\n-  { throw invalid_argument(_(__s)); }\n+  __throw_invalid_argument(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(invalid_argument(_(__s))); }\n \n   void\n-  __throw_length_error(const char* __s)\n-  { throw length_error(_(__s)); }\n+  __throw_length_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(length_error(_(__s))); }\n \n   void\n-  __throw_out_of_range(const char* __s)\n-  { throw out_of_range(_(__s)); }\n+  __throw_out_of_range(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(out_of_range(_(__s))); }\n \n   void\n-  __throw_runtime_error(const char* __s)\n-  { throw runtime_error(_(__s)); }\n+  __throw_runtime_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(runtime_error(_(__s))); }\n \n   void\n-  __throw_range_error(const char* __s)\n-  { throw range_error(_(__s)); }\n+  __throw_range_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(range_error(_(__s))); }\n \n   void\n-  __throw_overflow_error(const char* __s)\n-  { throw overflow_error(_(__s)); }\n+  __throw_overflow_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(overflow_error(_(__s))); }\n \n   void\n-  __throw_underflow_error(const char* __s)\n-  { throw underflow_error(_(__s)); }\n+  __throw_underflow_error(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(underflow_error(_(__s))); }\n \n   void\n-  __throw_ios_failure(const char* __s)\n-  { throw ios_base::failure(_(__s)); }\n+  __throw_ios_failure(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(ios_base::failure(_(__s))); }\n \n   void\n-  __throw_system_error(int __i)\n-  { throw system_error(error_code(__i, generic_category())); }\n+  __throw_system_error(int __i __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(system_error(error_code(__i,\n+\t\t\t\t\t\t    generic_category()))); }\n \n   void\n-  __throw_future_error(int __i)\n-  { throw future_error(make_error_code(future_errc(__i))); }\n+  __throw_future_error(int __i __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(future_error(make_error_code(future_errc(__i)))); }\n \n   void\n   __throw_bad_function_call()\n-  { throw bad_function_call(); }\n+  { _GLIBCXX_THROW_OR_ABORT(bad_function_call()); }\n \n   void\n-  __throw_regex_error(regex_constants::error_type __ecode)\n-  { throw regex_error(__ecode); }\n-#else\n-  void\n-  __throw_bad_exception(void)\n-  { std::abort(); }\n-\n-  void\n-  __throw_bad_alloc(void)\n-  { std::abort(); }\n-\n-  void\n-  __throw_bad_cast(void)\n-  { std::abort(); }\n-\n-  void\n-  __throw_bad_typeid(void)\n-  { std::abort(); }\n-\n-  void\n-  __throw_logic_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_domain_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_invalid_argument(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_length_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_out_of_range(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_runtime_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_range_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_overflow_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_underflow_error(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_ios_failure(const char*)\n-  { std::abort(); }\n-\n-  void\n-  __throw_system_error(int)\n-  { std::abort(); }\n-\n-  void\n-  __throw_future_error(int)\n-  { std::abort(); }\n-\n-  void\n-  __throw_bad_function_call()\n-  { std::abort(); }\n-\n-  void\n-  __throw_regex_error(regex_constants::error_type __ecode)\n-  { std::abort(); }\n-#endif //__EXCEPTIONS\n+  __throw_regex_error(regex_constants::error_type __ecode\n+\t\t      __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode)); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "179932f6e32b68822704ba2c2a7d58bd9823f952", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -32,9 +32,8 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 775 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 769 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }\n-\n }"}, {"sha": "d93663d37d7494aa17ca2f2b460c4fc750db3e73", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 274 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 266 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 275 }\n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }"}, {"sha": "a61b21329657aa46e9c6ff7a39b7e68e11c07de2", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 314 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 306 }"}, {"sha": "8e90359adbb49e54ae69bed38d4d045e8fa334fb", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -6,7 +6,7 @@\n // Otherwise we may get *multiple* errors.\n #undef _GLIBCXX_PARALLEL\n \n-// Copyright (C) 2006, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2006-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 262 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 269 }"}, {"sha": "d064c37559c58a5236395ac51f778fa4b723b557", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2010, 2012 Free Software Foundation\n+// Copyright (C) 2010-2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,9 +30,8 @@ void test01()\n {\n   X* px = 0;\n   std::tr1::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 563 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 556 }\n \n   std::tr1::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 602 }\n-\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 595 }\n }"}, {"sha": "f506c0a69170337f4ba89f4009898ff54c021067", "filename": "libstdc++-v3/testsuite/util/io/illegal_input_error.hpp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ba39f599fc2f3d59fd3cd828a301ce9b731a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp?ref=54ba39f599fc2f3d59fd3cd828a301ce9b731a20", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -17,7 +17,6 @@\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n \n // Permission to use, copy, modify, sell, and distribute this software\n@@ -49,13 +48,7 @@ namespace __gnu_pbds\n     // Substitute for concurrence_error object in the case of -fno-exceptions.\n     inline void\n     __throw_illegal_input_error()\n-    {\n-#if __EXCEPTIONS\n-      throw illegal_input_error();\n-#else\n-      __builtin_abort();\n-#endif\n-    }\n+    { _GLIBCXX_THROW_OR_ABORT(illegal_input_error()); }\n   } // namespace test\n } // namespace __gnu_pbds\n "}]}