{"sha": "767d412ca17c542307b2edc8c7e268d924d1e92b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3ZDQxMmNhMTdjNTQyMzA3YjJlZGM4YzdlMjY4ZDkyNGQxZTkyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-05-04T21:32:22Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-05-04T21:32:22Z"}, "message": "(special_symbol): Don't copy simple strings, use wchar_type.\n\n        (main): Setup wchar_type for C++ if needed.\n        (initialize_builtins): Use wchar_type.\n\nFrom-SVN: r7212", "tree": {"sha": "0b1f5398493a99460d954463b2ec5ff03af6ccb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1f5398493a99460d954463b2ec5ff03af6ccb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767d412ca17c542307b2edc8c7e268d924d1e92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767d412ca17c542307b2edc8c7e268d924d1e92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767d412ca17c542307b2edc8c7e268d924d1e92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767d412ca17c542307b2edc8c7e268d924d1e92b/comments", "author": null, "committer": null, "parents": [{"sha": "d94d2abc865dfc8e5e90bd5f9b8b035296df3353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94d2abc865dfc8e5e90bd5f9b8b035296df3353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94d2abc865dfc8e5e90bd5f9b8b035296df3353"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "dfee51fb4667035a5f420bbd424c3d34db7f811e", "filename": "gcc/cccp.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d412ca17c542307b2edc8c7e268d924d1e92b/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d412ca17c542307b2edc8c7e268d924d1e92b/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=767d412ca17c542307b2edc8c7e268d924d1e92b", "patch": "@@ -826,23 +826,25 @@ static char *predefs = \"\";\n    it would be best to do something here to figure out automatically\n    from other information what type to use.  */\n \n-/* The string value for __size_type__.  */\n+/* The string value for __SIZE_TYPE__.  */\n \n #ifndef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\"\n #endif\n \n-/* The string value for __ptrdiff_type__.  */\n+/* The string value for __PTRDIFF_TYPE__.  */\n \n #ifndef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n #endif\n \n-/* The string value for __wchar_type__.  */\n+/* The string value for __WCHAR_TYPE__.  */\n \n #ifndef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n #endif\n+char * wchar_type = WCHAR_TYPE;\n+#undef WCHAR_TYPE\n \n /* The string value for __USER_LABEL_PREFIX__ */\n \n@@ -1604,6 +1606,11 @@ main (argc, argv)\n   fp->nominal_fname = fp->fname = in_fname;\n   fp->lineno = 0;\n \n+  /* In C++, wchar_t is a distinct basic type, and we can expect\n+     __wchar_t to be defined by cc1plus.  */\n+  if (cplusplus)\n+    wchar_type = \"__wchar_t\";\n+\n   /* Install __LINE__, etc.  Must follow initialize_char_syntax\n      and option processing.  */\n   initialize_builtins (fp, &outbuf);\n@@ -3825,38 +3832,26 @@ special_symbol (hp, op)\n \n #ifndef NO_BUILTIN_SIZE_TYPE\n   case T_SIZE_TYPE:\n-    buf = (char *) alloca (3 + strlen (SIZE_TYPE));\n-    sprintf (buf, \"%s\", SIZE_TYPE);\n+    buf = SIZE_TYPE;\n     break;\n #endif\n \n #ifndef NO_BUILTIN_PTRDIFF_TYPE\n   case T_PTRDIFF_TYPE:\n-    buf = (char *) alloca (3 + strlen (PTRDIFF_TYPE));\n-    sprintf (buf, \"%s\", PTRDIFF_TYPE);\n+    buf = PTRDIFF_TYPE;\n     break;\n #endif\n \n   case T_WCHAR_TYPE:\n-    /* In C++, wchar_t is a distinct basic type, and we can expect\n-       __wchar_t to be defined by cc1plus.  */\n-    if (cplusplus)\n-      buf = \"__wchar_t\";\n-    else\n-      {\n-\tbuf = (char *) alloca (3 + strlen (WCHAR_TYPE));\n-\tsprintf (buf, \"%s\", WCHAR_TYPE);\n-      }\n+    buf = wchar_type;\n     break;\n \n   case T_USER_LABEL_PREFIX_TYPE:\n-    buf = (char *) alloca (3 + strlen (USER_LABEL_PREFIX));\n-    sprintf (buf, \"%s\", USER_LABEL_PREFIX);\n+    buf = USER_LABEL_PREFIX;\n     break;\n \n   case T_REGISTER_PREFIX_TYPE:\n-    buf = (char *) alloca (3 + strlen (REGISTER_PREFIX));\n-    sprintf (buf, \"%s\", REGISTER_PREFIX);\n+    buf = REGISTER_PREFIX;\n     break;\n \n   case T_CONST:\n@@ -8986,7 +8981,7 @@ initialize_builtins (inp, outp)\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n #endif\n \n-      sprintf (directive, \" __WCHAR_TYPE__ %s\\n\", WCHAR_TYPE);\n+      sprintf (directive, \" __WCHAR_TYPE__ %s\\n\", wchar_type);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n "}]}