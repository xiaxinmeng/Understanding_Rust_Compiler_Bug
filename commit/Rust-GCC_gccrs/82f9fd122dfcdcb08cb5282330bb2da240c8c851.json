{"sha": "82f9fd122dfcdcb08cb5282330bb2da240c8c851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmOWZkMTIyZGZjZGNiMDhjYjUyODIzMzBiYjJkYTI0MGM4Yzg1MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T21:29:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T21:29:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r637", "tree": {"sha": "067f95229278b0e68c5d4059899d9ee23d723528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/067f95229278b0e68c5d4059899d9ee23d723528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f9fd122dfcdcb08cb5282330bb2da240c8c851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f9fd122dfcdcb08cb5282330bb2da240c8c851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f9fd122dfcdcb08cb5282330bb2da240c8c851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f9fd122dfcdcb08cb5282330bb2da240c8c851/comments", "author": null, "committer": null, "parents": [{"sha": "c6e0e0d378cdad4aecd513f8f317723adfee6bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e0e0d378cdad4aecd513f8f317723adfee6bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e0e0d378cdad4aecd513f8f317723adfee6bbd"}], "stats": {"total": 98, "additions": 39, "deletions": 59}, "files": [{"sha": "bf8cd6990f2d4a4a8657b04920c8160228dc505b", "filename": "gcc/make-gcc.com", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f9fd122dfcdcb08cb5282330bb2da240c8c851/gcc%2Fmake-gcc.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f9fd122dfcdcb08cb5282330bb2da240c8c851/gcc%2Fmake-gcc.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-gcc.com?ref=82f9fd122dfcdcb08cb5282330bb2da240c8c851", "patch": "@@ -5,6 +5,8 @@ $! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n+$set symbol/scope=(nolocal,noglobal)\n+$!\n $! First, build the preprocesor.\n $!\n $ @make-cccp\n@@ -25,61 +27,7 @@ $! add them to gnu_cc:[000000]gcclib.olb.  You may have to delete the eprintf\n $! and new modules from the gnu_cc:[000000]gcclib.olb, since libgcc2 supplies\n $! these same routines with different module names.\n $!\n-$! Set up the logical names to use the compiler that we just built.\n-$!\n-$ Procedure:='f$environment(\"PROCEDURE\")'\n-$ Device:='f$parse(Procedure,,,\"DEVICE\",\"NO_CONCEAL\")'\n-$ Directory:='f$parse(Procedure,,,\"DIRECTORY\",\"NO_CONCEAL\")'\n-$ Path:=\"''Device'''Directory'\"\n-$!\n-$! Check for \"rooted\" directory specs\n-$!\n-$ l = 'f$length(Path)'\n-$ tmp = 'f$locate(\".][\",Path)'\n-$ if 'tmp' .ne. 'l' then goto 10$\n-$ tmp = 'f$locate(\".><\",Path)'\n-$ if 'tmp' .ne. 'l' then goto 10$\n-$ goto 100$\n-$!\n-$! Eliminate rooted directory specs\n-$!\n-$ 10$:\n-$ if \"''f$extract(tmp,255,Path)'\" .eqs. \".][000000]\" then goto 20$\n-$ if \"''f$extract(tmp,255,Path)'\" .eqs. \".><000000>\" then goto 20$\n-$ l = tmp + 3\n-$ Path:=\"''f$extract(0,tmp,Path)'.''f$extract(l,255,Path)'\"\n-$ goto 100$\n-$ 20$:\n-$ l = tmp + 1\n-$ Path:=\"''f$extract(0,tmp,Path)'''f$extract(l,1,Path)'\"\n-$ 100$:\n-$!\n-$! Calculate the prefix and suffix (used in generating desired paths)\n-$!\n-$ l = 'f$length(Path)' - 1\n-$ Prefix:='f$Extract(0,l,Path)'\n-$ Suffix:='f$extract(l,1,Path)'\n-$!\n-$ gnu_cc_path:=\"''Prefix'.''Suffix'\"\n-$!\n-$oldgcc=f$trnlnm(\"GNU_CC\")\n-$ assign  'gnu_cc_path'/translation=concealed, -\n-\t'f$trnlnm(\"GNU_CC\")/translation=concealed GNU_CC\n-$!\n-$! Set the version number from version.opt.\n-$!\n-$open ifile$ version.opt\n-$read ifile$ line\n-$close ifile$\n-$ijk = f$locate(\"=\",line) + 1\n-$line='f$extract(ijk,255,line)\n-$assign 'line' gnu_cc_version\n-$!\n $! Now build gcclib2.olb\n $!\n-$@make-l2\n-$!\n-$! Deassign logical names.\n+$ @make-l2\n $!\n-$deassign gnu_cc_version\n-$deassign gnu_cc"}, {"sha": "1853b0880e14d3544d98ea69748f2ebbae930100", "filename": "gcc/make-l2.com", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f9fd122dfcdcb08cb5282330bb2da240c8c851/gcc%2Fmake-l2.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f9fd122dfcdcb08cb5282330bb2da240c8c851/gcc%2Fmake-l2.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-l2.com?ref=82f9fd122dfcdcb08cb5282330bb2da240c8c851", "patch": "@@ -2,15 +2,37 @@ $! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n+$set symbol/scope=(nolocal,noglobal)\n+$!\n $! Command file to build libgcc2.olb.  You should only run this once you \n $! have the current compiler installed, otherwise some of the builtins will\n $! not be recognized.  Once you have built libgcc2.olb, you can merge this\n $! with gnu_cc:[000000]gcclib.olb\n $!\n-$if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).nes.\"1\" then goto compile\n+$if f$search(\"gcc-cc1.exe\").eqs.\"\"\n+$  then\n+$    gcc_cc1:=$gnu_cc:[000000]gcc-cc1\n+$    if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).eqs.\"1\" then goto nocompile\n+$  else\n+$    gcc_cc1:=$sys$disk:[]gcc-cc1\n+$  endif\n $!\n-$write sys$output \"This must be compiled by gcc 2.0\"\n-$exit\n+$if f$search(\"gcc-cpp.exe\").eqs.\"\"\n+$  then\n+$    gcc_cpp:=$gnu_cc:[000000]gcc-cpp\n+$    if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).eqs.\"1\" then goto nocompile\n+$  else\n+$    gcc_cpp:=$sys$disk:[]gcc-cpp\n+$  endif\n+$!\n+$gcc_as:=$gnu_cc:[000000]gcc-as\n+$cpp_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.cpp\n+$s_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.s\n+$goto compile\n+$!\n+$nocompile:\n+$write sys$error \"You must have gcc version 2 in order to build libgcc2.\"\n+$exit 0\n $!\n $compile:\n $lib/create libgcc2.olb\n@@ -52,7 +74,17 @@ $compile_libgcc2:\n $subroutine\n $objname = p1\n $if p2.nes.\"\" then objname = p2\n-$gcc/include=([],[.config])/debug/define=\"''p1'\" libgcc2.c/obj='objname'.obj\n+$!\n+$! We do this by hand, since the VMS compiler driver does not have a way\n+$! of specifying an alternate location for the compiler executables.\n+$!\n+$ gcc_cpp \"-I[]\" \"-I[.CONFIG]\" \"-D''p1'\"  LIBGCC2.C 'cpp_file'\n+$ gcc_cc1 'cpp_file' -dumpbase LIBGCC2 -\n+        -quiet -mgnu -g \"-O1\" -mvaxc-alignment   -o 's_file'\n+$ delete/nolog 'cpp_file';\n+$ gcc_as 's_file'  -o 'p1'.OBJ\n+$ delete/nolog 's_file';\n+$!\n $lib libgcc2.olb 'objname'.obj\n $del 'objname'.obj;/nolog\n $endsubroutine"}]}