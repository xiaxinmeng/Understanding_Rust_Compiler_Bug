{"sha": "744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0ZmQ0NDZjMzIxZjc4ZjlhMWNlNGVmNWY4M2RmOGRjZmE0NGE5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-01T07:54:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-01T07:54:38Z"}, "message": "tree-ssa-sccvn.c (class pass_fre): Add may_iterate pass parameter.\n\n2019-07-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (class pass_fre): Add may_iterate\n\tpass parameter.\n\t(pass_fre::execute): Honor it.\n\t* passes.def: Adjust pass_fre invocations to allow iterating,\n\tadd non-iterating pass_fre before late threading/dom.\n\n\t* gcc.dg/tree-ssa/pr77445-2.c: Adjust.\n\nFrom-SVN: r272843", "tree": {"sha": "42d910f95aa269455766e504e3c5b4167271e228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d910f95aa269455766e504e3c5b4167271e228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f215d2176608467aeee73b245beedfc60836b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f215d2176608467aeee73b245beedfc60836b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f215d2176608467aeee73b245beedfc60836b71"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "f74d2dc384b6e29dacf9e60710ad22ea6f440217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "patch": "@@ -1,3 +1,11 @@\n+2019-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (class pass_fre): Add may_iterate\n+\tpass parameter.\n+\t(pass_fre::execute): Honor it.\n+\t* passes.def: Adjust pass_fre invocations to allow iterating,\n+\tadd non-iterating pass_fre before late threading/dom.\n+\n 2019-07-01  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Adjust"}, {"sha": "9a5b0cd554a1a4ef175c396eca62341735a2a52f", "filename": "gcc/passes.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "patch": "@@ -83,7 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* pass_build_ealias is a dummy pass that ensures that we\n \t     execute TODO_rebuild_alias at this point.  */\n \t  NEXT_PASS (pass_build_ealias);\n-\t  NEXT_PASS (pass_fre);\n+\t  NEXT_PASS (pass_fre, true /* may_iterate */);\n \t  NEXT_PASS (pass_early_vrp);\n \t  NEXT_PASS (pass_merge_phi);\n           NEXT_PASS (pass_dse);\n@@ -117,7 +117,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_oacc_kernels);\n \t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels)\n \t      NEXT_PASS (pass_ch);\n-\t      NEXT_PASS (pass_fre);\n+\t      NEXT_PASS (pass_fre, true /* may_iterate */);\n \t      /* We use pass_lim to rewrite in-memory iteration and reduction\n \t\t variable accesses in loops into local variables accesses.  */\n \t      NEXT_PASS (pass_lim);\n@@ -199,7 +199,7 @@ along with GCC; see the file COPYING3.  If not see\n \t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);\n       NEXT_PASS (pass_return_slot);\n-      NEXT_PASS (pass_fre);\n+      NEXT_PASS (pass_fre, true /* may_iterate */);\n       NEXT_PASS (pass_merge_phi);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n@@ -312,6 +312,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_split_paths);\n       NEXT_PASS (pass_tracer);\n+      NEXT_PASS (pass_fre, false /* may_iterate */);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n       NEXT_PASS (pass_strlen);"}, {"sha": "d6fa9db242629c4d15725c798de2dcb8b0fa9f81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "patch": "@@ -1,3 +1,7 @@\n+2019-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Adjust.\n+\n 2019-07-01  Hongtao Liu  <hongtao.liu@intel.com>\n \n \t* lib/target-supports.exp"}, {"sha": "9c22c538da8c052af3f3521c77b63d1a0766c2b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "patch": "@@ -125,7 +125,7 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 1\\[1-9\\]\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-times \"Invalid sum\" 3 \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-not \"not considered\" \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-not \"not considered\" \"thread2\" } } */\n-/* { dg-final { scan-tree-dump-not \"not considered\" \"thread3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-not \"not considered\" \"thread4\" { target { ! aarch64*-*-* } } } } */ \n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread3\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread4\" { target { ! aarch64*-*-* } } } } */ "}, {"sha": "6b39d63eb653d85628b7055ad55045295aa24de5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=744fd446c321f78f9a1ce4ef5f83df8dcfa44a9e", "patch": "@@ -6853,14 +6853,24 @@ class pass_fre : public gimple_opt_pass\n {\n public:\n   pass_fre (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_fre, ctxt)\n+    : gimple_opt_pass (pass_data_fre, ctxt), may_iterate (true)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_fre (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_fre != 0; }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      may_iterate = param;\n+    }\n+  virtual bool gate (function *)\n+    {\n+      return flag_tree_fre != 0 && (may_iterate || optimize > 1);\n+    }\n   virtual unsigned int execute (function *);\n \n+private:\n+  bool may_iterate;\n }; // class pass_fre\n \n unsigned int\n@@ -6869,15 +6879,16 @@ pass_fre::execute (function *fun)\n   unsigned todo = 0;\n \n   /* At -O[1g] use the cheap non-iterating mode.  */\n+  bool iterate_p = may_iterate && (optimize > 1);\n   calculate_dominance_info (CDI_DOMINATORS);\n-  if (optimize > 1)\n+  if (iterate_p)\n     loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n   default_vn_walk_kind = VN_WALKREWRITE;\n-  todo = do_rpo_vn (fun, NULL, NULL, optimize > 1, true);\n+  todo = do_rpo_vn (fun, NULL, NULL, iterate_p, true);\n   free_rpo_vn ();\n \n-  if (optimize > 1)\n+  if (iterate_p)\n     loop_optimizer_finalize ();\n \n   return todo;"}]}