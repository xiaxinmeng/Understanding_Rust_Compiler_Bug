{"sha": "ddf9322dcd42914423639c221ba8d10dd267cc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmOTMyMmRjZDQyOTE0NDIzNjM5YzIyMWJhOGQxMGRkMjY3Y2M0Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-10T19:49:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-10T19:49:17Z"}, "message": "re PR target/55929 (lra-constraints-ICE while xg++ compile libitm with -Os)\n\n\tPR target/55929\n\t* config/i386/i386.md (xbegin): Use %eax as a temporary register.\n\nFrom-SVN: r195094", "tree": {"sha": "9a47d49d02dc90320186ca2c7a7c8044df8efbde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a47d49d02dc90320186ca2c7a7c8044df8efbde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf9322dcd42914423639c221ba8d10dd267cc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf9322dcd42914423639c221ba8d10dd267cc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf9322dcd42914423639c221ba8d10dd267cc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf9322dcd42914423639c221ba8d10dd267cc4b/comments", "author": null, "committer": null, "parents": [{"sha": "7f5f8bbfddb14b8b255e7427746ba87dca7a6210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5f8bbfddb14b8b255e7427746ba87dca7a6210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5f8bbfddb14b8b255e7427746ba87dca7a6210"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "17554bde8da5da6f1491168f12b0b8ca46a8eb20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf9322dcd42914423639c221ba8d10dd267cc4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf9322dcd42914423639c221ba8d10dd267cc4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddf9322dcd42914423639c221ba8d10dd267cc4b", "patch": "@@ -5,8 +5,7 @@\n \n 2013-01-10  Richard Biener  <rguenther@suse.de>\n \n-\t* builtins.c (expand_builtin_init_trampoline): Use\n-\tset_mem_attributes.\n+\t* builtins.c (expand_builtin_init_trampoline): Use set_mem_attributes.\n \n 2013-01-10  Richard Biener  <rguenther@suse.de>\n \n@@ -51,7 +50,8 @@\n 2013-01-09  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/45375\n-\t* ipa-inline.c (ipa_inline): Remove extern inlines and virtual functions.\n+\t* ipa-inline.c (ipa_inline): Remove extern inlines and virtual\n+\tfunctions.\n \t* cgraphclones.c (cgraph_clone_node): Cpoy also LTO file data.\n \n 2013-01-09  Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "8fd1f915d90c6415ec6805934d3f3df224b593fa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf9322dcd42914423639c221ba8d10dd267cc4b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf9322dcd42914423639c221ba8d10dd267cc4b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ddf9322dcd42914423639c221ba8d10dd267cc4b", "patch": "@@ -18013,19 +18013,22 @@\n \n (define_expand \"xbegin\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-\t(unspec_volatile:SI [(match_dup 1)] UNSPECV_XBEGIN))]\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_XBEGIN))]\n   \"TARGET_RTM\"\n {\n   rtx label = gen_label_rtx ();\n \n-  operands[1] = force_reg (SImode, constm1_rtx);\n+  /* xbegin is emitted as jump_insn, so reload won't be able\n+     to reload its operand.  Force the value into AX hard register.  */\n+  rtx ax_reg = gen_rtx_REG (SImode, AX_REG);\n+  emit_move_insn (ax_reg, constm1_rtx);\n \n-  emit_jump_insn (gen_xbegin_1 (operands[1], label));\n+  emit_jump_insn (gen_xbegin_1 (ax_reg, label));\n \n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n \n-  emit_move_insn (operands[0], operands[1]);\n+  emit_move_insn (operands[0], ax_reg);\n \n   DONE;\n })"}]}