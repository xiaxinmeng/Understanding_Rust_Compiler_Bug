{"sha": "20e50c627742a85f445c2f6ad3534175f67ef046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlNTBjNjI3NzQyYTg1ZjQ0NWMyZjZhZDM1MzQxNzVmNjdlZjA0Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-12T18:23:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-12T18:23:09Z"}, "message": "c-common.h (truthvalue_conversion, [...]): Delete redundant declarations.\n\n\t* c-common.h (truthvalue_conversion, type_for_mode,\n\ttype_for_size): Delete redundant declarations.\n\n\t* c-lex.h (is_class_name): Likewise.\n\n\t* c-tree.h (pedantic, convert, getdecls, gettags,\n\tglobal_bindings_p, init_decl_processing, insert_block,\n\tmaybe_build_cleanup, poplevel, print_lang_decl,\n\tprint_lang_identifier, print_lang_type, pushdecl, pushlevel,\n\tset_block, incomplete_type_error, build_function_call,\n\tlvalue_or_else, mark_addressable): Likewise.\n\n\t* expr.h (expand_tree_builtin): Likewise.\n\nFrom-SVN: r41309", "tree": {"sha": "1aa10ff5dd99ba49bfecd670dd6df7e154e557b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa10ff5dd99ba49bfecd670dd6df7e154e557b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e50c627742a85f445c2f6ad3534175f67ef046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e50c627742a85f445c2f6ad3534175f67ef046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e50c627742a85f445c2f6ad3534175f67ef046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e50c627742a85f445c2f6ad3534175f67ef046/comments", "author": null, "committer": null, "parents": [{"sha": "33d3b05bdcdd35b4b11cd54c1a4a62b2b6c68aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d3b05bdcdd35b4b11cd54c1a4a62b2b6c68aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d3b05bdcdd35b4b11cd54c1a4a62b2b6c68aa5"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "3873a00ebe405a866f714d44c96ca1b09d9d9406", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20e50c627742a85f445c2f6ad3534175f67ef046", "patch": "@@ -1,3 +1,19 @@\n+2001-04-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.h (truthvalue_conversion, type_for_mode,\n+\ttype_for_size): Delete redundant declarations.\n+\n+\t* c-lex.h (is_class_name): Likewise.\n+\n+\t* c-tree.h (pedantic, convert, getdecls, gettags,\n+\tglobal_bindings_p, init_decl_processing, insert_block,\n+\tmaybe_build_cleanup, poplevel, print_lang_decl,\n+\tprint_lang_identifier, print_lang_type, pushdecl, pushlevel,\n+\tset_block, incomplete_type_error, build_function_call,\n+\tlvalue_or_else, mark_addressable): Likewise.\n+\n+\t* expr.h (expand_tree_builtin): Likewise.\n+\n 2001-04-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* invoke.texi: Document --param max-gcse-memory."}, {"sha": "fbdf1570d7185e5819f75376ffa797dfbc71311e", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=20e50c627742a85f445c2f6ad3534175f67ef046", "patch": "@@ -514,11 +514,6 @@ extern char *get_directive_line\t\t\tPARAMS ((void));\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.  */\n extern tree shorten_compare\t\t\tPARAMS ((tree *, tree *, tree *, enum tree_code *));\n-/* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n-   or validate its data type for an `if' or `while' statement or ?..: exp. */\n-extern tree truthvalue_conversion\t\tPARAMS ((tree));\n-extern tree type_for_mode\t\t\tPARAMS ((enum machine_mode, int));\n-extern tree type_for_size\t\t\tPARAMS ((unsigned, int));\n \n extern unsigned int min_precision\t\tPARAMS ((tree, int));\n "}, {"sha": "4856d076b476e638f7a51782da6baddc423b26e5", "filename": "gcc/c-lex.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=20e50c627742a85f445c2f6ad3534175f67ef046", "patch": "@@ -30,7 +30,6 @@ extern const char *init_c_lex PARAMS ((const char *));\n extern void save_and_forget_protocol_qualifiers PARAMS ((void));\n extern void forget_protocol_qualifiers PARAMS ((void));\n extern void remember_protocol_qualifiers PARAMS ((void));\n-extern tree is_class_name PARAMS ((tree));\n \n extern int indent_level;\n "}, {"sha": "16ab7adafce34670b11ae6f9727bf6fd85ee5fe3", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=20e50c627742a85f445c2f6ad3534175f67ef046", "patch": "@@ -83,9 +83,6 @@ struct lang_decl\n    TREE_USED          to record that such a decl was used.\n    TREE_ADDRESSABLE   to record that the address of such a decl was used.  */\n \n-/* Nonzero means reject anything that ANSI standard C forbids.  */\n-extern int pedantic;\n-\n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */\n #define C_TYPE_FIELDS_READONLY(type) TREE_LANG_FLAG_1 (type)\n \n@@ -158,9 +155,6 @@ extern int yyparse_1\t\t\t\tPARAMS ((void));\n /* in c-aux-info.c */\n extern void gen_aux_info_record                 PARAMS ((tree, int, int, int));\n \n-/* in c-convert.c */\n-extern tree convert                             PARAMS ((tree, tree));\n-\n /* in c-decl.c */\n extern tree build_enumerator                    PARAMS ((tree, tree));\n \n@@ -185,41 +179,28 @@ extern tree finish_enum                         PARAMS ((tree, tree, tree));\n extern void finish_function                     PARAMS ((int));\n extern tree finish_struct                       PARAMS ((tree, tree, tree));\n extern tree get_parm_info                       PARAMS ((int));\n-extern tree getdecls                            PARAMS ((void));\n-extern tree gettags                             PARAMS ((void));\n-extern int  global_bindings_p                   PARAMS ((void));\n extern tree grokfield                           PARAMS ((const char *, int, tree, tree, tree));\n extern tree groktypename                        PARAMS ((tree));\n extern tree groktypename_in_parm_context        PARAMS ((tree));\n extern tree implicitly_declare                  PARAMS ((tree));\n extern void implicit_decl_warning               PARAMS ((tree));\n extern int  in_parm_level_p                     PARAMS ((void));\n-extern void init_decl_processing                PARAMS ((void));\n-extern void insert_block                        PARAMS ((tree));\n extern void keep_next_level                     PARAMS ((void));\n extern int  kept_level_p                        PARAMS ((void));\n extern tree lookup_label                        PARAMS ((tree));\n extern tree lookup_name                         PARAMS ((tree));\n extern tree lookup_name_current_level\t\tPARAMS ((tree));\n extern tree lookup_name_current_level_global\tPARAMS ((tree));\n-extern tree maybe_build_cleanup                 PARAMS ((tree));\n extern void parmlist_tags_warning               PARAMS ((void));\n extern void pending_xref_error                  PARAMS ((void));\n extern void mark_c_function_context             PARAMS ((struct function *));\n extern void push_c_function_context             PARAMS ((struct function *));\n extern void pop_c_function_context              PARAMS ((struct function *));\n extern void pop_label_level                     PARAMS ((void));\n-extern tree poplevel                            PARAMS ((int, int, int));\n-extern void print_lang_decl                     PARAMS ((FILE *, tree, int));\n-extern void print_lang_identifier               PARAMS ((FILE *, tree, int));\n-extern void print_lang_type                     PARAMS ((FILE *, tree, int));\n extern void push_label_level                    PARAMS ((void));\n extern void push_parm_decl                      PARAMS ((tree));\n-extern tree pushdecl                            PARAMS ((tree));\n extern tree pushdecl_top_level                  PARAMS ((tree));\n-extern void pushlevel                           PARAMS ((int));\n extern void pushtag                             PARAMS ((tree, tree));\n-extern void set_block                           PARAMS ((tree));\n extern tree shadow_label                        PARAMS ((tree));\n extern void shadow_record_fields                PARAMS ((tree));\n extern void shadow_tag                          PARAMS ((tree));\n@@ -237,7 +218,6 @@ extern void c_expand_decl_stmt                  PARAMS ((tree));\n \n /* in c-typeck.c */\n extern tree require_complete_type\t\tPARAMS ((tree));\n-extern void incomplete_type_error\t\tPARAMS ((tree, tree));\n extern int comptypes\t\t\t\tPARAMS ((tree, tree));\n extern tree c_sizeof                            PARAMS ((tree));\n extern tree c_sizeof_nowarn                     PARAMS ((tree));\n@@ -248,12 +228,9 @@ extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));\n extern tree build_external_ref\t\t\tPARAMS ((tree, int));\n-extern tree build_function_call                 PARAMS ((tree, tree));\n extern tree parser_build_binary_op              PARAMS ((enum tree_code,\n \t\t\t\t\t\t\t tree, tree));\n-extern int lvalue_or_else\t\t\tPARAMS ((tree, const char *));\n extern void readonly_warning\t\t\tPARAMS ((tree, const char *));\n-extern int mark_addressable\t\t\tPARAMS ((tree));\n extern tree build_conditional_expr              PARAMS ((tree, tree, tree));\n extern tree build_compound_expr                 PARAMS ((tree));\n extern tree build_c_cast                        PARAMS ((tree, tree));"}, {"sha": "a68682ecc56434bbaf81dc3039540ee78e52877e", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e50c627742a85f445c2f6ad3534175f67ef046/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=20e50c627742a85f445c2f6ad3534175f67ef046", "patch": "@@ -902,7 +902,6 @@ extern rtx gen_cond_trap PARAMS ((enum rtx_code, rtx, rtx, rtx));\n /* Functions from builtins.c:  */\n #ifdef TREE_CODE\n extern rtx expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n-extern tree expand_tree_builtin PARAMS ((tree, tree, tree));\n extern void std_expand_builtin_va_start PARAMS ((int, tree, rtx));\n extern rtx std_expand_builtin_va_arg PARAMS ((tree, tree));\n extern rtx expand_builtin_va_arg PARAMS ((tree, tree));"}]}