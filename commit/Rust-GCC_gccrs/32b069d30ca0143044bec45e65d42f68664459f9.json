{"sha": "32b069d30ca0143044bec45e65d42f68664459f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiMDY5ZDMwY2EwMTQzMDQ0YmVjNDVlNjVkNDJmNjg2NjQ0NTlmOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-01T08:13:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-01T08:13:04Z"}, "message": "expmed.c (store_bit_field): Prevent generation of CONCATs...\n\n        * expmed.c (store_bit_field): Prevent generation of CONCATs;\n        pun complex values as integers; use gen_lowpart instead of\n        gen_rtx_SUBREG.\n        (extract_bit_field): Likewise.\n\nFrom-SVN: r50185", "tree": {"sha": "d6e2a96ae3e3138d8b7b8d3949ecce65c7c9ed6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6e2a96ae3e3138d8b7b8d3949ecce65c7c9ed6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b069d30ca0143044bec45e65d42f68664459f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b069d30ca0143044bec45e65d42f68664459f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b069d30ca0143044bec45e65d42f68664459f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b069d30ca0143044bec45e65d42f68664459f9/comments", "author": null, "committer": null, "parents": [{"sha": "fdc9bf29461a61a92db99cc4b0459d23433cdcee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc9bf29461a61a92db99cc4b0459d23433cdcee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc9bf29461a61a92db99cc4b0459d23433cdcee"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "df3eded181b1f582eeeaed551b23907bcd04d12b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b069d30ca0143044bec45e65d42f68664459f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b069d30ca0143044bec45e65d42f68664459f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32b069d30ca0143044bec45e65d42f68664459f9", "patch": "@@ -1,3 +1,10 @@\n+2002-02-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* expmed.c (store_bit_field): Prevent generation of CONCATs;\n+\tpun complex values as integers; use gen_lowpart instead of\n+\tgen_rtx_SUBREG.\n+\t(extract_bit_field): Likewise.\n+\n 2002-03-01  Alan Modra  <amodra@bigpond.net.au>\n \t    David Edelsohn  <edelsohn@gnu.org>\n "}, {"sha": "6f9a939ed0118d40022f7315d68ca127e745a364", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b069d30ca0143044bec45e65d42f68664459f9/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b069d30ca0143044bec45e65d42f68664459f9/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=32b069d30ca0143044bec45e65d42f68664459f9", "patch": "@@ -325,7 +325,12 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n   value = protect_from_queue (value, 0);\n \n   if (flag_force_mem)\n-    value = force_not_mem (value);\n+    {\n+      int old_generating_concat_p = generating_concat_p;\n+      generating_concat_p = 0;\n+      value = force_not_mem (value);\n+      generating_concat_p = old_generating_concat_p;\n+    }\n \n   /* If the target is a register, overwriting the entire object, or storing\n      a full-word or multi-word field can be done with just a SUBREG.\n@@ -519,12 +524,9 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n      corresponding size.  This can occur on a machine with 64 bit registers\n      that uses SFmode for float.  This can also occur for unaligned float\n      structure fields.  */\n-  if (GET_MODE_CLASS (GET_MODE (value)) == MODE_FLOAT)\n-    {\n-      if (GET_CODE (value) != REG)\n-\tvalue = copy_to_reg (value);\n-      value = gen_rtx_SUBREG (word_mode, value, 0);\n-    }\n+  if (GET_MODE_CLASS (GET_MODE (value)) != MODE_INT\n+      && GET_MODE_CLASS (GET_MODE (value)) != MODE_PARTIAL_INT)\n+    value = gen_lowpart (word_mode, value);\n \n   /* Now OFFSET is nonzero only if OP0 is memory\n      and is therefore always measured in bytes.  */\n@@ -1516,14 +1518,13 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n       /* If the target mode is floating-point, first convert to the\n \t integer mode of that size and then access it as a floating-point\n \t value via a SUBREG.  */\n-      if (GET_MODE_CLASS (tmode) == MODE_FLOAT)\n+      if (GET_MODE_CLASS (tmode) != MODE_INT\n+\t  && GET_MODE_CLASS (tmode) != MODE_PARTIAL_INT)\n \t{\n \t  target = convert_to_mode (mode_for_size (GET_MODE_BITSIZE (tmode),\n \t\t\t\t\t\t   MODE_INT, 0),\n \t\t\t\t    target, unsignedp);\n-\t  if (GET_CODE (target) != REG)\n-\t    target = copy_to_reg (target);\n-\t  return gen_rtx_SUBREG (tmode, target, 0);\n+\t  return gen_lowpart (tmode, target);\n \t}\n       else\n \treturn convert_to_mode (tmode, target, unsignedp);"}]}