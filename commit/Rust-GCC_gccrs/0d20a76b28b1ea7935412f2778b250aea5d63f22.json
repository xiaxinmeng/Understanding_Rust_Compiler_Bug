{"sha": "0d20a76b28b1ea7935412f2778b250aea5d63f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyMGE3NmIyOGIxZWE3OTM1NDEyZjI3NzhiMjUwYWVhNWQ2M2YyMg==", "commit": {"author": {"name": "Robert Suchanek", "email": "robert.suchanek@imgtec.com", "date": "2015-11-10T09:12:52Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2015-11-10T09:12:52Z"}, "message": "Tie chains for move instructions.\n\ngcc/\n\t* regrename.c (create_new_chain): Initialize renamed and tied_chain.\n\t(build_def_use): Initialize terminated_this_insn.\n\t(find_best_rename_reg): Pick and check register from the tied chain.\n\t(regrename_do_replace): Mark head as renamed.\n\t(struct du_head *terminated_this_insn). New static variable.\n\t(scan_rtx_reg): Tie chains in move insns.  Set terminated_this_insn.\n\t* regrename.h (struct du_head): Add tied_chain, renamed members.\n\nFrom-SVN: r230087", "tree": {"sha": "6d7c7be18694fc0b82bcf54def8e11de69eb30a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d7c7be18694fc0b82bcf54def8e11de69eb30a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d20a76b28b1ea7935412f2778b250aea5d63f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d20a76b28b1ea7935412f2778b250aea5d63f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d20a76b28b1ea7935412f2778b250aea5d63f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d20a76b28b1ea7935412f2778b250aea5d63f22/comments", "author": null, "committer": null, "parents": [{"sha": "66d662de1cc20000cb56a1c19685ad9b6b62d353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d662de1cc20000cb56a1c19685ad9b6b62d353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d662de1cc20000cb56a1c19685ad9b6b62d353"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "5abb84bc793c17a1d0182702e9a38669fede205b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d20a76b28b1ea7935412f2778b250aea5d63f22", "patch": "@@ -1,3 +1,13 @@\n+2015-11-10  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* regrename.c (create_new_chain): Initialize renamed and tied_chain.\n+\t(build_def_use): Initialize terminated_this_insn.\n+\t(find_best_rename_reg): Pick and check register from the tied chain.\n+\t(regrename_do_replace): Mark head as renamed.\n+\t(struct du_head *terminated_this_insn). New static variable.\n+\t(scan_rtx_reg): Tie chains in move insns.  Set terminated_this_insn.\n+\t* regrename.h (struct du_head): Add tied_chain, renamed members.\n+\n 2015-11-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR bootstrap/68256"}, {"sha": "d727dd9095b963dfc5611f2ba9206927a0f0cd4d", "filename": "gcc/regrename.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=0d20a76b28b1ea7935412f2778b250aea5d63f22", "patch": "@@ -130,6 +130,9 @@ static HARD_REG_SET live_hard_regs;\n    record_operand_use.  */\n static operand_rr_info *cur_operand;\n \n+/* Set while scanning RTL if a register dies.  Used to tie chains.  */\n+static struct du_head *terminated_this_insn;\n+\n /* Return the chain corresponding to id number ID.  Take into account that\n    chains may have been merged.  */\n du_head_p\n@@ -224,6 +227,8 @@ create_new_chain (unsigned this_regno, unsigned this_nregs, rtx *loc,\n   head->nregs = this_nregs;\n   head->need_caller_save_reg = 0;\n   head->cannot_rename = 0;\n+  head->renamed = 0;\n+  head->tied_chain = NULL;\n \n   id_to_chain.safe_push (head);\n   head->id = current_id++;\n@@ -366,6 +371,13 @@ find_rename_reg (du_head_p this_head, enum reg_class super_class,\n   preferred_class\n     = (enum reg_class) targetm.preferred_rename_class (super_class);\n \n+  /* Pick and check the register from the tied chain iff the tied chain\n+     is not renamed.  */\n+  if (this_head->tied_chain && !this_head->tied_chain->renamed\n+      && check_new_reg_p (old_reg, this_head->tied_chain->regno,\n+\t\t\t  this_head, *unavailable))\n+    return this_head->tied_chain->regno;\n+\n   /* If PREFERRED_CLASS is not NO_REGS, we iterate in the first pass\n      over registers that belong to PREFERRED_CLASS and try to find the\n      best register within the class.  If that failed, we iterate in\n@@ -960,6 +972,7 @@ regrename_do_replace (struct du_head *head, int reg)\n     return false;\n \n   mode = GET_MODE (*head->first->loc);\n+  head->renamed = 1;\n   head->regno = reg;\n   head->nregs = hard_regno_nregs[reg][mode];\n   return true;\n@@ -1043,7 +1056,34 @@ scan_rtx_reg (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions act\n   if (action == mark_write)\n     {\n       if (type == OP_OUT)\n-\tcreate_new_chain (this_regno, this_nregs, loc, insn, cl);\n+\t{\n+\t  du_head_p c;\n+\t  rtx pat = PATTERN (insn);\n+\n+\t  c = create_new_chain (this_regno, this_nregs, loc, insn, cl);\n+\n+\t  /* We try to tie chains in a move instruction for\n+\t     a single output.  */\n+\t  if (recog_data.n_operands == 2\n+\t      && GET_CODE (pat) == SET\n+\t      && GET_CODE (SET_DEST (pat)) == REG\n+\t      && GET_CODE (SET_SRC (pat)) == REG\n+\t      && terminated_this_insn)\n+\t    {\n+\t      gcc_assert (terminated_this_insn->regno\n+\t\t\t  == REGNO (recog_data.operand[1]));\n+\n+\t      c->tied_chain = terminated_this_insn;\n+\t      terminated_this_insn->tied_chain = c;\n+\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"Tying chain %s (%d) with %s (%d)\\n\",\n+\t\t\t reg_names[c->regno], c->id,\n+\t\t\t reg_names[terminated_this_insn->regno],\n+\t\t\t terminated_this_insn->id);\n+\t    }\n+\t}\n+\n       return;\n     }\n \n@@ -1151,6 +1191,8 @@ scan_rtx_reg (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions act\n \t\tSET_HARD_REG_BIT (live_hard_regs, head->regno + nregs);\n \t    }\n \n+\t  if (action == terminate_dead)\n+\t    terminated_this_insn = *p;\n \t  *p = next;\n \t  if (dump_file)\n \t    fprintf (dump_file,\n@@ -1707,6 +1749,8 @@ build_def_use (basic_block bb)\n \t      scan_rtx (insn, &XEXP (note, 0), ALL_REGS, mark_read,\n \t\t\tOP_INOUT);\n \n+\t  terminated_this_insn = NULL;\n+\n \t  /* Step 4: Close chains for registers that die here, unless\n \t     the register is mentioned in a REG_UNUSED note.  In that\n \t     case we keep the chain open until step #7 below to ensure"}, {"sha": "77cc2fe29c421dbb3449a71122dc9a3db6427744", "filename": "gcc/regrename.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2Fregrename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d20a76b28b1ea7935412f2778b250aea5d63f22/gcc%2Fregrename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.h?ref=0d20a76b28b1ea7935412f2778b250aea5d63f22", "patch": "@@ -28,6 +28,8 @@ struct du_head\n   struct du_head *next_chain;\n   /* The first and last elements of this chain.  */\n   struct du_chain *first, *last;\n+  /* The chain that this chain is tied to.  */\n+  struct du_head *tied_chain;\n   /* Describes the register being tracked.  */\n   unsigned regno;\n   int nregs;\n@@ -45,6 +47,8 @@ struct du_head\n      such as the SET_DEST of a CALL_INSN or an asm operand that used\n      to be a hard register.  */\n   unsigned int cannot_rename:1;\n+  /* Nonzero if the chain has already been renamed.  */\n+  unsigned int renamed:1;\n };\n \n typedef struct du_head *du_head_p;"}]}