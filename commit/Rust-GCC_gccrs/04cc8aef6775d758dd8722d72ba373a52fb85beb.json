{"sha": "04cc8aef6775d758dd8722d72ba373a52fb85beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRjYzhhZWY2Nzc1ZDc1OGRkODcyMmQ3MmJhMzczYTUyZmI4NWJlYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-24T16:52:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-24T16:52:04Z"}, "message": "basic_string.tcc (rfind(_CharT, size_type)): Revert last change to use std::min: machine language is worse.\n\n2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (rfind(_CharT, size_type)):\n\tRevert last change to use std::min: machine language is worse.\n\t(find_last_of(const _CharT*, size_type, size_type)): Ditto.\n\t(find_last_not_of(const _CharT*, size_type, size_type)): Ditto.\n\t(find_last_not_of(_CharT, size_type)): Ditto.\n\n\t* include/bits/basic_string.tcc (insert(size_type, const _CharT*,\n\tsize_type)): Discard the value returned by _M_check.\n\t(replace(size_type, size_type, const _CharT*, size_type)): Ditto.\n\t(append(const basic_string&, size_type, size_type)): Ditto.\n\t(copy(_CharT*, size_type, size_type)): Ditto.\n\t(compare(size_type, size_type, const basic_string&)): Ditto.\n\t(compare(size_type, size_type, const basic_string&,\n\tsize_type, size_type)): Ditto.\n\t(compare(size_type, size_type, const _CharT*)): Ditto.\n\t(compare(size_type, size_type, const _CharT*, size_type)): Ditto.\n\nFrom-SVN: r76514", "tree": {"sha": "e389a3805b4e04d9bcf8b0ee9c11d0cb22937cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e389a3805b4e04d9bcf8b0ee9c11d0cb22937cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04cc8aef6775d758dd8722d72ba373a52fb85beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc8aef6775d758dd8722d72ba373a52fb85beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cc8aef6775d758dd8722d72ba373a52fb85beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc8aef6775d758dd8722d72ba373a52fb85beb/comments", "author": null, "committer": null, "parents": [{"sha": "7fcc1d9bafe7d8ee31f454879ac5c4b801ef7254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcc1d9bafe7d8ee31f454879ac5c4b801ef7254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcc1d9bafe7d8ee31f454879ac5c4b801ef7254"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "1dafb097e8614dca579786bb76075e6e4f55528a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc8aef6775d758dd8722d72ba373a52fb85beb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc8aef6775d758dd8722d72ba373a52fb85beb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=04cc8aef6775d758dd8722d72ba373a52fb85beb", "patch": "@@ -1,3 +1,22 @@\n+2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (rfind(_CharT, size_type)):\n+\tRevert last change to use std::min: machine language is worse.\n+\t(find_last_of(const _CharT*, size_type, size_type)): Ditto.\n+\t(find_last_not_of(const _CharT*, size_type, size_type)): Ditto.\n+\t(find_last_not_of(_CharT, size_type)): Ditto.\n+\n+\t* include/bits/basic_string.tcc (insert(size_type, const _CharT*,\n+\tsize_type)): Discard the value returned by _M_check.\n+\t(replace(size_type, size_type, const _CharT*, size_type)): Ditto.\n+\t(append(const basic_string&, size_type, size_type)): Ditto.\n+\t(copy(_CharT*, size_type, size_type)): Ditto.\n+\t(compare(size_type, size_type, const basic_string&)): Ditto.\n+\t(compare(size_type, size_type, const basic_string&,\n+\tsize_type, size_type)): Ditto.\n+\t(compare(size_type, size_type, const _CharT*)): Ditto.\n+\t(compare(size_type, size_type, const _CharT*, size_type)): Ditto.\n+\n 2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (insert(size_type,"}, {"sha": "860604405259faf5f9f0e484c90edc2bd05bb400", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc8aef6775d758dd8722d72ba373a52fb85beb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc8aef6775d758dd8722d72ba373a52fb85beb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=04cc8aef6775d758dd8722d72ba373a52fb85beb", "patch": "@@ -298,7 +298,7 @@ namespace std\n      insert(size_type __pos, const _CharT* __s, size_type __n)\n      {\n        __glibcxx_requires_string_len(__s, __n);\n-       __pos = _M_check(__pos, \"basic_string::insert\");\n+       _M_check(__pos, \"basic_string::insert\");\n        if (this->max_size() - this->size() < __n)\n \t __throw_length_error(\"basic_string::insert\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n@@ -333,7 +333,7 @@ namespace std\n \t     size_type __n2)\n      {\n        __glibcxx_requires_string_len(__s, __n2);\n-       __pos = _M_check(__pos, \"basic_string::replace\");\n+       _M_check(__pos, \"basic_string::replace\");\n        __n1 = _M_limit(__pos, __n1);\n        if (this->max_size() - (this->size() - __n1) < __n2)\n          __throw_length_error(\"basic_string::replace\");\n@@ -651,7 +651,7 @@ namespace std\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n       // pointer __str._M_data() formed here.\n-      __pos = __str._M_check(__pos, \"basic_string::append\");\n+      __str._M_check(__pos, \"basic_string::append\");\n       __n = __str._M_limit(__pos, __n);\n       const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n@@ -707,7 +707,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     copy(_CharT* __s, size_type __n, size_type __pos) const\n     {\n-      __pos = _M_check(__pos, \"basic_string::copy\");\n+      _M_check(__pos, \"basic_string::copy\");\n       __n = _M_limit(__pos, __n);\n       __glibcxx_requires_string_len(__s, __n);\n       if (__n)\n@@ -774,13 +774,14 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(_CharT __c, size_type __pos) const\n     {\n-      const size_type __size = this->size();\n+      size_type __size = this->size();\n       if (__size)\n \t{\n-\t  __pos = std::min(size_type(__size - 1), __pos);\n-\t  for (++__pos; __pos-- > 0; )\n-\t    if (traits_type::eq(_M_data()[__pos], __c))\n-\t      return __pos;\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  for (++__size; __size-- > 0; )\n+\t    if (traits_type::eq(_M_data()[__size], __c))\n+\t      return __size;\n \t}\n       return npos;\n     }\n@@ -850,16 +851,17 @@ namespace std\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-      const size_type __size = this->size();\n+      size_type __size = this->size();\n       if (__size)\n-\t{ \n-\t  __pos = std::min(size_type(__size - 1), __pos);\n-\t  do\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+ \t  do\n \t    {\n-\t      if (!traits_type::find(__s, __n, _M_data()[__pos]))\n-\t\treturn __pos;\n+\t      if (!traits_type::find(__s, __n, _M_data()[__size]))\n+\t\treturn __size;\n \t    } \n-\t  while (__pos--);\n+\t  while (__size--);\n \t}\n       return npos;\n     }\n@@ -869,16 +871,17 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(_CharT __c, size_type __pos) const\n     {\n-      const size_type __size = this->size();\n+      size_type __size = this->size();\n       if (__size)\n \t{\n-\t  __pos = std::min(size_type(__size - 1), __pos);\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\t  \n \t  do\n \t    {\n-\t      if (!traits_type::eq(_M_data()[__pos], __c))\n-\t\treturn __pos;\n+\t      if (!traits_type::eq(_M_data()[__size], __c))\n+\t\treturn __size;\n \t    } \n-\t  while (__pos--);\n+\t  while (__size--);\n \t}\n       return npos;\n     }\n@@ -888,7 +891,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n, const basic_string& __str) const\n     {\n-      __pos = _M_check(__pos, \"basic_string::compare\");\n+      _M_check(__pos, \"basic_string::compare\");\n       __n = _M_limit(__pos, __n);\n       const size_type __osize = __str.size();\n       const size_type __len = std::min(__n, __osize);\n@@ -904,8 +907,8 @@ namespace std\n     compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2) const\n     {\n-      __pos1 = _M_check(__pos1, \"basic_string::compare\");\n-      __pos2 = __str._M_check(__pos2, \"basic_string::compare\");\n+      _M_check(__pos1, \"basic_string::compare\");\n+      __str._M_check(__pos2, \"basic_string::compare\");\n       __n1 = _M_limit(__pos1, __n1);\n       __n2 = __str._M_limit(__pos2, __n2);\n       const size_type __len = std::min(__n1, __n2);\n@@ -937,7 +940,7 @@ namespace std\n     compare(size_type __pos, size_type __n1, const _CharT* __s) const\n     {\n       __glibcxx_requires_string(__s);\n-      __pos = _M_check(__pos, \"basic_string::compare\");\n+      _M_check(__pos, \"basic_string::compare\");\n       __n1 = _M_limit(__pos, __n1);\n       const size_type __osize = traits_type::length(__s);\n       const size_type __len = std::min(__n1, __osize);\n@@ -954,7 +957,7 @@ namespace std\n \t    size_type __n2) const\n     {\n       __glibcxx_requires_string_len(__s, __n2);\n-      __pos = _M_check(__pos, \"basic_string::compare\");\n+      _M_check(__pos, \"basic_string::compare\");\n       __n1 = _M_limit(__pos, __n1);\n       const size_type __len = std::min(__n1, __n2);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);"}]}