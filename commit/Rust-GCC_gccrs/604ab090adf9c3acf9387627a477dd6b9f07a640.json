{"sha": "604ab090adf9c3acf9387627a477dd6b9f07a640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0YWIwOTBhZGY5YzNhY2Y5Mzg3NjI3YTQ3N2RkNmI5ZjA3YTY0MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-04-25T17:00:28Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-04-25T17:00:28Z"}, "message": "x86: Update message for target_clones and unsupported ISAs\n\nBefore AVX512F, processors with the newer ISAs also support the older\nISAs, i.e., AVX2 processors also support AVX and SSE4, SSE4 processors\nalso support SSSE3, ...   After AVX512F, an AVX512XX processor may not\nsupport AVX512YY.  It means AVX512XX features, except for AVX512F, can't\nbe used to decide priority in target_clones.\n\nThis patch updates error message for ISAs with P_ZERO priority.  It also\nmerges _feature_list into _isa_names_table and marks ISAs, which have\nunknown priority, with P_ZERO so that we only need to update one place\nto add a new ISA feature.\n\ngcc/\n\n2019-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/89929\n\t* config/i386/i386.c (feature_priority): Moved to file scope.\n\t(processor_features): Likewise.\n\t(processor_model): Likewise.\n\t(_arch_names_table): Likewise.\n\t(arch_names_table): Likewise.\n\t(_feature_list): Removed.\n\t(feature_list): Likewise.\n\t(_isa_names_table): Moved to file scope.  Add priority.\n\t(isa_names_table): Likewise.\n\t(get_builtin_code_for_version): Replace feature_list with\n\tisa_names_table.  Update error message for P_ZERO priority.\n\ngcc/testsuite/\n\n2019-04-25  Martin Liska  <mliska@suse.cz>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/89929\n\t* g++.target/i386/mv28.C: New test.\n\t* gcc.target/i386/mvc14.c: Likewise.\n\t* g++.target/i386/pr57362.C: Updated.\n\nFrom-SVN: r270578", "tree": {"sha": "1de62fee6ad151e9c703ddb070213397e0f6f53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de62fee6ad151e9c703ddb070213397e0f6f53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604ab090adf9c3acf9387627a477dd6b9f07a640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604ab090adf9c3acf9387627a477dd6b9f07a640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604ab090adf9c3acf9387627a477dd6b9f07a640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604ab090adf9c3acf9387627a477dd6b9f07a640/comments", "author": null, "committer": null, "parents": [{"sha": "9125dc3292822c748b1d866ea2d78e00708d5df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9125dc3292822c748b1d866ea2d78e00708d5df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9125dc3292822c748b1d866ea2d78e00708d5df6"}], "stats": {"total": 557, "additions": 298, "deletions": 259}, "files": [{"sha": "80f974897e7b9ef3a45592fb95f7b4adfc8c29ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -1,3 +1,18 @@\n+2019-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89929\n+\t* config/i386/i386.c (feature_priority): Moved to file scope.\n+\t(processor_features): Likewise.\n+\t(processor_model): Likewise.\n+\t(_arch_names_table): Likewise.\n+\t(arch_names_table): Likewise.\n+\t(_feature_list): Removed.\n+\t(feature_list): Likewise.\n+\t(_isa_names_table): Moved to file scope.  Add priority.\n+\t(isa_names_table): Likewise.\n+\t(get_builtin_code_for_version): Replace feature_list with\n+\tisa_names_table.  Update error message for P_ZERO priority.\n+\n 2019-04-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-pass.h (make_pass_phi_only_cprop): Remove."}, {"sha": "8a1ffd3769f57dd042c711cbef1ca18d68a26100", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 232, "deletions": 258, "changes": 490, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -31834,6 +31834,229 @@ add_condition_to_bb (tree function_decl, tree version_decl,\n   return bb3;\n }\n \n+/* Priority of i386 features, greater value is higher priority.   This is\n+   used to decide the order in which function dispatch must happen.  For\n+   instance, a version specialized for SSE4.2 should be checked for dispatch\n+   before a version for SSE3, as SSE4.2 implies SSE3.  */\n+enum feature_priority\n+{\n+  P_ZERO = 0,\n+  P_MMX,\n+  P_SSE,\n+  P_SSE2,\n+  P_SSE3,\n+  P_SSSE3,\n+  P_PROC_SSSE3,\n+  P_SSE4_A,\n+  P_PROC_SSE4_A,\n+  P_SSE4_1,\n+  P_SSE4_2,\n+  P_PROC_SSE4_2,\n+  P_POPCNT,\n+  P_AES,\n+  P_PCLMUL,\n+  P_AVX,\n+  P_PROC_AVX,\n+  P_BMI,\n+  P_PROC_BMI,\n+  P_FMA4,\n+  P_XOP,\n+  P_PROC_XOP,\n+  P_FMA,\n+  P_PROC_FMA,\n+  P_BMI2,\n+  P_AVX2,\n+  P_PROC_AVX2,\n+  P_AVX512F,\n+  P_PROC_AVX512F\n+};\n+\n+/* This is the order of bit-fields in __processor_features in cpuinfo.c */\n+enum processor_features\n+{\n+  F_CMOV = 0,\n+  F_MMX,\n+  F_POPCNT,\n+  F_SSE,\n+  F_SSE2,\n+  F_SSE3,\n+  F_SSSE3,\n+  F_SSE4_1,\n+  F_SSE4_2,\n+  F_AVX,\n+  F_AVX2,\n+  F_SSE4_A,\n+  F_FMA4,\n+  F_XOP,\n+  F_FMA,\n+  F_AVX512F,\n+  F_BMI,\n+  F_BMI2,\n+  F_AES,\n+  F_PCLMUL,\n+  F_AVX512VL,\n+  F_AVX512BW,\n+  F_AVX512DQ,\n+  F_AVX512CD,\n+  F_AVX512ER,\n+  F_AVX512PF,\n+  F_AVX512VBMI,\n+  F_AVX512IFMA,\n+  F_AVX5124VNNIW,\n+  F_AVX5124FMAPS,\n+  F_AVX512VPOPCNTDQ,\n+  F_AVX512VBMI2,\n+  F_GFNI,\n+  F_VPCLMULQDQ,\n+  F_AVX512VNNI,\n+  F_AVX512BITALG,\n+  F_MAX\n+};\n+\n+/* These are the values for vendor types and cpu types  and subtypes\n+   in cpuinfo.c.  Cpu types and subtypes should be subtracted by\n+   the corresponding start value.  */\n+enum processor_model\n+{\n+  M_INTEL = 1,\n+  M_AMD,\n+  M_CPU_TYPE_START,\n+  M_INTEL_BONNELL,\n+  M_INTEL_CORE2,\n+  M_INTEL_COREI7,\n+  M_AMDFAM10H,\n+  M_AMDFAM15H,\n+  M_INTEL_SILVERMONT,\n+  M_INTEL_KNL,\n+  M_AMD_BTVER1,\n+  M_AMD_BTVER2,\n+  M_AMDFAM17H,\n+  M_INTEL_KNM,\n+  M_INTEL_GOLDMONT,\n+  M_INTEL_GOLDMONT_PLUS,\n+  M_INTEL_TREMONT,\n+  M_CPU_SUBTYPE_START,\n+  M_INTEL_COREI7_NEHALEM,\n+  M_INTEL_COREI7_WESTMERE,\n+  M_INTEL_COREI7_SANDYBRIDGE,\n+  M_AMDFAM10H_BARCELONA,\n+  M_AMDFAM10H_SHANGHAI,\n+  M_AMDFAM10H_ISTANBUL,\n+  M_AMDFAM15H_BDVER1,\n+  M_AMDFAM15H_BDVER2,\n+  M_AMDFAM15H_BDVER3,\n+  M_AMDFAM15H_BDVER4,\n+  M_AMDFAM17H_ZNVER1,\n+  M_INTEL_COREI7_IVYBRIDGE,\n+  M_INTEL_COREI7_HASWELL,\n+  M_INTEL_COREI7_BROADWELL,\n+  M_INTEL_COREI7_SKYLAKE,\n+  M_INTEL_COREI7_SKYLAKE_AVX512,\n+  M_INTEL_COREI7_CANNONLAKE,\n+  M_INTEL_COREI7_ICELAKE_CLIENT,\n+  M_INTEL_COREI7_ICELAKE_SERVER,\n+  M_AMDFAM17H_ZNVER2,\n+  M_INTEL_COREI7_CASCADELAKE\n+};\n+\n+struct _arch_names_table\n+{\n+  const char *const name;\n+  const enum processor_model model;\n+};\n+\n+static const _arch_names_table arch_names_table[] =\n+{\n+  {\"amd\", M_AMD},\n+  {\"intel\", M_INTEL},\n+  {\"atom\", M_INTEL_BONNELL},\n+  {\"slm\", M_INTEL_SILVERMONT},\n+  {\"core2\", M_INTEL_CORE2},\n+  {\"corei7\", M_INTEL_COREI7},\n+  {\"nehalem\", M_INTEL_COREI7_NEHALEM},\n+  {\"westmere\", M_INTEL_COREI7_WESTMERE},\n+  {\"sandybridge\", M_INTEL_COREI7_SANDYBRIDGE},\n+  {\"ivybridge\", M_INTEL_COREI7_IVYBRIDGE},\n+  {\"haswell\", M_INTEL_COREI7_HASWELL},\n+  {\"broadwell\", M_INTEL_COREI7_BROADWELL},\n+  {\"skylake\", M_INTEL_COREI7_SKYLAKE},\n+  {\"skylake-avx512\", M_INTEL_COREI7_SKYLAKE_AVX512},\n+  {\"cannonlake\", M_INTEL_COREI7_CANNONLAKE},\n+  {\"icelake-client\", M_INTEL_COREI7_ICELAKE_CLIENT},\n+  {\"icelake-server\", M_INTEL_COREI7_ICELAKE_SERVER},\n+  {\"cascadelake\", M_INTEL_COREI7_CASCADELAKE},\n+  {\"bonnell\", M_INTEL_BONNELL},\n+  {\"silvermont\", M_INTEL_SILVERMONT},\n+  {\"goldmont\", M_INTEL_GOLDMONT},\n+  {\"goldmont-plus\", M_INTEL_GOLDMONT_PLUS},\n+  {\"tremont\", M_INTEL_TREMONT},\n+  {\"knl\", M_INTEL_KNL},\n+  {\"knm\", M_INTEL_KNM},\n+  {\"amdfam10h\", M_AMDFAM10H},\n+  {\"barcelona\", M_AMDFAM10H_BARCELONA},\n+  {\"shanghai\", M_AMDFAM10H_SHANGHAI},\n+  {\"istanbul\", M_AMDFAM10H_ISTANBUL},\n+  {\"btver1\", M_AMD_BTVER1},\n+  {\"amdfam15h\", M_AMDFAM15H},\n+  {\"bdver1\", M_AMDFAM15H_BDVER1},\n+  {\"bdver2\", M_AMDFAM15H_BDVER2},\n+  {\"bdver3\", M_AMDFAM15H_BDVER3},\n+  {\"bdver4\", M_AMDFAM15H_BDVER4},\n+  {\"btver2\", M_AMD_BTVER2},\n+  {\"amdfam17h\", M_AMDFAM17H},\n+  {\"znver1\", M_AMDFAM17H_ZNVER1},\n+  {\"znver2\", M_AMDFAM17H_ZNVER2},\n+};\n+\n+/* These are the target attribute strings for which a dispatcher is\n+   available, from fold_builtin_cpu.  */\n+struct _isa_names_table\n+{\n+  const char *const name;\n+  const enum processor_features feature;\n+  const enum feature_priority priority;\n+};\n+\n+static const _isa_names_table isa_names_table[] =\n+{\n+  {\"cmov\",    F_CMOV,\tP_ZERO},\n+  {\"mmx\",     F_MMX,\tP_MMX},\n+  {\"popcnt\",  F_POPCNT,\tP_POPCNT},\n+  {\"sse\",     F_SSE,\tP_SSE},\n+  {\"sse2\",    F_SSE2,\tP_SSE2},\n+  {\"sse3\",    F_SSE3,\tP_SSE3},\n+  {\"ssse3\",   F_SSSE3,\tP_SSSE3},\n+  {\"sse4a\",   F_SSE4_A,\tP_SSE4_A},\n+  {\"sse4.1\",  F_SSE4_1,\tP_SSE4_1},\n+  {\"sse4.2\",  F_SSE4_2,\tP_SSE4_2},\n+  {\"avx\",     F_AVX,\tP_AVX},\n+  {\"fma4\",    F_FMA4,\tP_FMA4},\n+  {\"xop\",     F_XOP,\tP_XOP},\n+  {\"fma\",     F_FMA,\tP_FMA},\n+  {\"avx2\",    F_AVX2,\tP_AVX2},\n+  {\"avx512f\", F_AVX512F, P_AVX512F},\n+  {\"bmi\",     F_BMI,\tP_BMI},\n+  {\"bmi2\",    F_BMI2,\tP_BMI2},\n+  {\"aes\",     F_AES,\tP_AES},\n+  {\"pclmul\",  F_PCLMUL,\tP_PCLMUL},\n+  {\"avx512vl\",F_AVX512VL, P_ZERO},\n+  {\"avx512bw\",F_AVX512BW, P_ZERO},\n+  {\"avx512dq\",F_AVX512DQ, P_ZERO},\n+  {\"avx512cd\",F_AVX512CD, P_ZERO},\n+  {\"avx512er\",F_AVX512ER, P_ZERO},\n+  {\"avx512pf\",F_AVX512PF, P_ZERO},\n+  {\"avx512vbmi\",F_AVX512VBMI, P_ZERO},\n+  {\"avx512ifma\",F_AVX512IFMA, P_ZERO},\n+  {\"avx5124vnniw\",F_AVX5124VNNIW, P_ZERO},\n+  {\"avx5124fmaps\",F_AVX5124FMAPS, P_ZERO},\n+  {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ,\tP_ZERO},\n+  {\"avx512vbmi2\", F_AVX512VBMI2, P_ZERO},\n+  {\"gfni\",\tF_GFNI,\tP_ZERO},\n+  {\"vpclmulqdq\", F_VPCLMULQDQ, P_ZERO},\n+  {\"avx512vnni\", F_AVX512VNNI, P_ZERO},\n+  {\"avx512bitalg\", F_AVX512BITALG, P_ZERO}\n+};\n+\n /* This parses the attribute arguments to target in DECL and determines\n    the right builtin to use to match the platform specification.\n    It returns the priority value for this version decl.  If PREDICATE_LIST\n@@ -31852,79 +32075,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   char *tok_str = NULL;\n   char *token;\n \n-  /* Priority of i386 features, greater value is higher priority.   This is\n-     used to decide the order in which function dispatch must happen.  For\n-     instance, a version specialized for SSE4.2 should be checked for dispatch\n-     before a version for SSE3, as SSE4.2 implies SSE3.  */\n-  enum feature_priority\n-  {\n-    P_ZERO = 0,\n-    P_MMX,\n-    P_SSE,\n-    P_SSE2,\n-    P_SSE3,\n-    P_SSSE3,\n-    P_PROC_SSSE3,\n-    P_SSE4_A,\n-    P_PROC_SSE4_A,\n-    P_SSE4_1,\n-    P_SSE4_2,\n-    P_PROC_SSE4_2,\n-    P_POPCNT,\n-    P_AES,\n-    P_PCLMUL,\n-    P_AVX,\n-    P_PROC_AVX,\n-    P_BMI,\n-    P_PROC_BMI,\n-    P_FMA4,\n-    P_XOP,\n-    P_PROC_XOP,\n-    P_FMA,    \n-    P_PROC_FMA,\n-    P_BMI2,\n-    P_AVX2,\n-    P_PROC_AVX2,\n-    P_AVX512F,\n-    P_PROC_AVX512F\n-  };\n-\n   enum feature_priority priority = P_ZERO;\n \n-  /* These are the target attribute strings for which a dispatcher is\n-     available, from fold_builtin_cpu.  */\n-\n-  static struct _feature_list\n-    {\n-      const char *const name;\n-      const enum feature_priority priority;\n-    }\n-  const feature_list[] =\n-    {\n-      {\"mmx\", P_MMX},\n-      {\"sse\", P_SSE},\n-      {\"sse2\", P_SSE2},\n-      {\"sse3\", P_SSE3},\n-      {\"sse4a\", P_SSE4_A},\n-      {\"ssse3\", P_SSSE3},\n-      {\"sse4.1\", P_SSE4_1},\n-      {\"sse4.2\", P_SSE4_2},\n-      {\"popcnt\", P_POPCNT},\n-      {\"aes\", P_AES},\n-      {\"pclmul\", P_PCLMUL},\n-      {\"avx\", P_AVX},\n-      {\"bmi\", P_BMI},\n-      {\"fma4\", P_FMA4},\n-      {\"xop\", P_XOP},\n-      {\"fma\", P_FMA},\n-      {\"bmi2\", P_BMI2},\n-      {\"avx2\", P_AVX2},\n-      {\"avx512f\", P_AVX512F}\n-    };\n-\n-\n   static unsigned int NUM_FEATURES\n-    = sizeof (feature_list) / sizeof (struct _feature_list);\n+    = sizeof (isa_names_table) / sizeof (_isa_names_table);\n \n   unsigned int i;\n \n@@ -32123,27 +32277,28 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t}\n       for (i = 0; i < NUM_FEATURES; ++i)\n \t{\n-\t  if (strcmp (token, feature_list[i].name) == 0)\n+\t  if (strcmp (token, isa_names_table[i].name) == 0)\n \t    {\n \t      if (predicate_list)\n \t\t{\n \t\t  predicate_arg = build_string_literal (\n-\t\t\t\t  strlen (feature_list[i].name) + 1,\n-\t\t\t\t  feature_list[i].name);\n+\t\t\t\t  strlen (isa_names_table[i].name) + 1,\n+\t\t\t\t  isa_names_table[i].name);\n \t\t  predicate_chain = tree_cons (predicate_decl, predicate_arg,\n \t\t\t\t\t       predicate_chain);\n \t\t}\n \t      /* Find the maximum priority feature.  */\n-\t      if (feature_list[i].priority > priority)\n-\t\tpriority = feature_list[i].priority;\n+\t      if (isa_names_table[i].priority > priority)\n+\t\tpriority = isa_names_table[i].priority;\n \n \t      break;\n \t    }\n \t}\n-      if (predicate_list && i == NUM_FEATURES)\n+      if (predicate_list && priority == P_ZERO)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t    \"no dispatcher found for %s\", token);\n+\t\t    \"ISA %qs is not supported in %<target%> attribute, \"\n+\t\t    \"use %<arch=%> syntax\", token);\n \t  return 0;\n \t}\n       token = strtok (NULL, \",\");\n@@ -32678,187 +32833,6 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t\t\t\tDECL_FUNCTION_CODE (fndecl);\n   tree param_string_cst = NULL;\n \n-  /* This is the order of bit-fields in __processor_features in cpuinfo.c */\n-  enum processor_features\n-  {\n-    F_CMOV = 0,\n-    F_MMX,\n-    F_POPCNT,\n-    F_SSE,\n-    F_SSE2,\n-    F_SSE3,\n-    F_SSSE3,\n-    F_SSE4_1,\n-    F_SSE4_2,\n-    F_AVX,\n-    F_AVX2,\n-    F_SSE4_A,\n-    F_FMA4,\n-    F_XOP,\n-    F_FMA,\n-    F_AVX512F,\n-    F_BMI,\n-    F_BMI2,\n-    F_AES,\n-    F_PCLMUL,\n-    F_AVX512VL,\n-    F_AVX512BW,\n-    F_AVX512DQ,\n-    F_AVX512CD,\n-    F_AVX512ER,\n-    F_AVX512PF,\n-    F_AVX512VBMI,\n-    F_AVX512IFMA,\n-    F_AVX5124VNNIW,\n-    F_AVX5124FMAPS,\n-    F_AVX512VPOPCNTDQ,\n-    F_AVX512VBMI2,\n-    F_GFNI,\n-    F_VPCLMULQDQ,\n-    F_AVX512VNNI,\n-    F_AVX512BITALG,\n-    F_MAX\n-  };\n-\n-  /* These are the values for vendor types and cpu types  and subtypes\n-     in cpuinfo.c.  Cpu types and subtypes should be subtracted by\n-     the corresponding start value.  */\n-  enum processor_model\n-  {\n-    M_INTEL = 1,\n-    M_AMD,\n-    M_CPU_TYPE_START,\n-    M_INTEL_BONNELL,\n-    M_INTEL_CORE2,\n-    M_INTEL_COREI7,\n-    M_AMDFAM10H,\n-    M_AMDFAM15H,\n-    M_INTEL_SILVERMONT,\n-    M_INTEL_KNL,\n-    M_AMD_BTVER1,\n-    M_AMD_BTVER2,    \n-    M_AMDFAM17H,\n-    M_INTEL_KNM,\n-    M_INTEL_GOLDMONT,\n-    M_INTEL_GOLDMONT_PLUS,\n-    M_INTEL_TREMONT,\n-    M_CPU_SUBTYPE_START,\n-    M_INTEL_COREI7_NEHALEM,\n-    M_INTEL_COREI7_WESTMERE,\n-    M_INTEL_COREI7_SANDYBRIDGE,\n-    M_AMDFAM10H_BARCELONA,\n-    M_AMDFAM10H_SHANGHAI,\n-    M_AMDFAM10H_ISTANBUL,\n-    M_AMDFAM15H_BDVER1,\n-    M_AMDFAM15H_BDVER2,\n-    M_AMDFAM15H_BDVER3,\n-    M_AMDFAM15H_BDVER4,\n-    M_AMDFAM17H_ZNVER1,\n-    M_INTEL_COREI7_IVYBRIDGE,\n-    M_INTEL_COREI7_HASWELL,\n-    M_INTEL_COREI7_BROADWELL,\n-    M_INTEL_COREI7_SKYLAKE,\n-    M_INTEL_COREI7_SKYLAKE_AVX512,\n-    M_INTEL_COREI7_CANNONLAKE,\n-    M_INTEL_COREI7_ICELAKE_CLIENT,\n-    M_INTEL_COREI7_ICELAKE_SERVER,\n-    M_AMDFAM17H_ZNVER2,\n-    M_INTEL_COREI7_CASCADELAKE\n-  };\n-\n-  static struct _arch_names_table\n-    {\n-      const char *const name;\n-      const enum processor_model model;\n-    }\n-  const arch_names_table[] =\n-    {\n-      {\"amd\", M_AMD},\n-      {\"intel\", M_INTEL},\n-      {\"atom\", M_INTEL_BONNELL},\n-      {\"slm\", M_INTEL_SILVERMONT},\n-      {\"core2\", M_INTEL_CORE2},\n-      {\"corei7\", M_INTEL_COREI7},\n-      {\"nehalem\", M_INTEL_COREI7_NEHALEM},\n-      {\"westmere\", M_INTEL_COREI7_WESTMERE},\n-      {\"sandybridge\", M_INTEL_COREI7_SANDYBRIDGE},\n-      {\"ivybridge\", M_INTEL_COREI7_IVYBRIDGE},\n-      {\"haswell\", M_INTEL_COREI7_HASWELL},\n-      {\"broadwell\", M_INTEL_COREI7_BROADWELL},\n-      {\"skylake\", M_INTEL_COREI7_SKYLAKE},\n-      {\"skylake-avx512\", M_INTEL_COREI7_SKYLAKE_AVX512},\n-      {\"cannonlake\", M_INTEL_COREI7_CANNONLAKE},\n-      {\"icelake-client\", M_INTEL_COREI7_ICELAKE_CLIENT},\n-      {\"icelake-server\", M_INTEL_COREI7_ICELAKE_SERVER},\n-      {\"cascadelake\", M_INTEL_COREI7_CASCADELAKE},\n-      {\"bonnell\", M_INTEL_BONNELL},\n-      {\"silvermont\", M_INTEL_SILVERMONT},\n-      {\"goldmont\", M_INTEL_GOLDMONT},\n-      {\"goldmont-plus\", M_INTEL_GOLDMONT_PLUS},\n-      {\"tremont\", M_INTEL_TREMONT},\n-      {\"knl\", M_INTEL_KNL},\n-      {\"knm\", M_INTEL_KNM},\n-      {\"amdfam10h\", M_AMDFAM10H},\n-      {\"barcelona\", M_AMDFAM10H_BARCELONA},\n-      {\"shanghai\", M_AMDFAM10H_SHANGHAI},\n-      {\"istanbul\", M_AMDFAM10H_ISTANBUL},\n-      {\"btver1\", M_AMD_BTVER1},      \n-      {\"amdfam15h\", M_AMDFAM15H},\n-      {\"bdver1\", M_AMDFAM15H_BDVER1},\n-      {\"bdver2\", M_AMDFAM15H_BDVER2},\n-      {\"bdver3\", M_AMDFAM15H_BDVER3},\n-      {\"bdver4\", M_AMDFAM15H_BDVER4},\n-      {\"btver2\", M_AMD_BTVER2},\n-      {\"amdfam17h\", M_AMDFAM17H},\n-      {\"znver1\", M_AMDFAM17H_ZNVER1},\n-      {\"znver2\", M_AMDFAM17H_ZNVER2},\n-    };\n-\n-  static struct _isa_names_table\n-    {\n-      const char *const name;\n-      const enum processor_features feature;\n-    }\n-  const isa_names_table[] =\n-    {\n-      {\"cmov\",    F_CMOV},\n-      {\"mmx\",     F_MMX},\n-      {\"popcnt\",  F_POPCNT},\n-      {\"sse\",     F_SSE},\n-      {\"sse2\",    F_SSE2},\n-      {\"sse3\",    F_SSE3},\n-      {\"ssse3\",   F_SSSE3},\n-      {\"sse4a\",   F_SSE4_A},\n-      {\"sse4.1\",  F_SSE4_1},\n-      {\"sse4.2\",  F_SSE4_2},\n-      {\"avx\",     F_AVX},\n-      {\"fma4\",    F_FMA4},\n-      {\"xop\",     F_XOP},\n-      {\"fma\",     F_FMA},\n-      {\"avx2\",    F_AVX2},\n-      {\"avx512f\", F_AVX512F},\n-      {\"bmi\",     F_BMI},\n-      {\"bmi2\",    F_BMI2},\n-      {\"aes\",     F_AES},\n-      {\"pclmul\",  F_PCLMUL},\n-      {\"avx512vl\",F_AVX512VL},\n-      {\"avx512bw\",F_AVX512BW},\n-      {\"avx512dq\",F_AVX512DQ},\n-      {\"avx512cd\",F_AVX512CD},\n-      {\"avx512er\",F_AVX512ER},\n-      {\"avx512pf\",F_AVX512PF},\n-      {\"avx512vbmi\",F_AVX512VBMI},\n-      {\"avx512ifma\",F_AVX512IFMA},\n-      {\"avx5124vnniw\",F_AVX5124VNNIW},\n-      {\"avx5124fmaps\",F_AVX5124FMAPS},\n-      {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ},\n-      {\"avx512vbmi2\", F_AVX512VBMI2},\n-      {\"gfni\", F_GFNI},\n-      {\"vpclmulqdq\", F_VPCLMULQDQ},\n-      {\"avx512vnni\", F_AVX512VNNI},\n-      {\"avx512bitalg\", F_AVX512BITALG}\n-    };\n-\n   tree __processor_model_type = build_processor_model_struct ();\n   tree __cpu_model_var = make_var_decl (__processor_model_type,\n \t\t\t\t\t\"__cpu_model\");"}, {"sha": "5ea04dc99dc2f7b828fc1abfcec7b3ad5f808fe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -1,3 +1,11 @@\n+2019-04-25  Martin Liska  <mliska@suse.cz>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89929\n+\t* g++.target/i386/mv28.C: New test.\n+\t* gcc.target/i386/mvc14.c: Likewise.\n+\t* g++.target/i386/pr57362.C: Updated.\n+\n 2019-04-24  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/90037"}, {"sha": "adc53962ee515fa4d6b5e370eb454e5ce4069074", "filename": "gcc/testsuite/g++.target/i386/mv28.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv28.C?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile} */\n+/* { dg-require-ifunc \"\" }  */\n+\n+void __attribute__ ((target(\"avx512vl\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512bw\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512dq\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512cd\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512er\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512pf\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512vbmi\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512ifma\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx5124vnniw\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx5124fmaps\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512vpopcntdq\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512vbmi2\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"gfni\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"vpclmulqdq\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512vnni\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"avx512bitalg\"))) foo () {} /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+void __attribute__ ((target(\"default\"))) foo () {}\n+\n+int main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "ced5e518cfec956470d8d978341d70a3c9059587", "filename": "gcc/testsuite/g++.target/i386/pr57362.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -199,4 +199,4 @@ int foo(void) { return 1; }\n /* { dg-prune-output \"attribute.* is unknown\" } */\n /* { dg-prune-output \"missing 'target' attribute*\" } */\n /* { dg-prune-output \"redefinition of 'int foo\" } */\n-/* { dg-prune-output \"no dispatcher found for\" } */\n+/* { dg-prune-output \"ISA '.*' is not supported in 'target' attribute\" } */"}, {"sha": "a3aec6a00559faacc79c3bc737c15e3e74776b18", "filename": "gcc/testsuite/gcc.target/i386/mvc14.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604ab090adf9c3acf9387627a477dd6b9f07a640/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc14.c?ref=604ab090adf9c3acf9387627a477dd6b9f07a640", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+\n+__attribute__((target_clones(\"avx512vl\", \"avx512bw\", \"avx512dq\",\n+\t\t\t     \"avx512cd\", \"avx512er\", \"avx512pf\", \"avx512vbmi\",\n+\t\t\t     \"avx512ifma\", \"avx5124vnniw\", \"avx5124fmaps\",\n+\t\t\t     \"avx512vpopcntdq\", \"avx512vbmi2\", \"gfni\",\n+\t\t\t     \"vpclmulqdq\", \"avx512vnni\", \"avx512bitalg\",\n+\t\t\t     \"default\")))\n+int foo (); /* { dg-error \"ISA '\\[^\\n\\r\\]*' is not supported in 'target' attribute, use 'arch=' syntax\" } */\n+\n+int\n+bar ()\n+{\n+  return foo();\n+}"}]}