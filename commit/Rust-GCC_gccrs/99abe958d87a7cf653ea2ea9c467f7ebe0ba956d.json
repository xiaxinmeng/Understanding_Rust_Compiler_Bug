{"sha": "99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlhYmU5NThkODdhN2NmNjUzZWEyZWE5YzQ2N2Y3ZWJlMGJhOTU2ZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-04T23:59:35Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-04T23:59:35Z"}, "message": "error.c (gfc_diagnostic_build_locus_prefix): Use diagnostic_expand_location.\n\ngcc/fortran/ChangeLog:\n\n2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* error.c (gfc_diagnostic_build_locus_prefix): Use\n\tdiagnostic_expand_location.\n\ngcc/ChangeLog:\n\n2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* diagnostic.h (diagnostic_expand_location): New inline function.\n\t* diagnostic.c (diagnostic_build_prefix): Use it.\n\t(diagnostic_show_locus): Likewise.\n\nFrom-SVN: r218409", "tree": {"sha": "5367afa1553141e677c4411189df8b007d01bd1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5367afa1553141e677c4411189df8b007d01bd1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/comments", "author": null, "committer": null, "parents": [{"sha": "1be71446897bf65257d37183f28355a3b5f9fe8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be71446897bf65257d37183f28355a3b5f9fe8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be71446897bf65257d37183f28355a3b5f9fe8e"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "7858d200a0ff65013eb3db9ec13727bcc125f1e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "patch": "@@ -1,3 +1,9 @@\n+2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* diagnostic.h (diagnostic_expand_location): New inline function.\n+\t* diagnostic.c (diagnostic_build_prefix): Use it.\n+\t(diagnostic_show_locus): Likewise.\n+\n 2014-12-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/64189"}, {"sha": "28ef81c5dad4071cf3dfd20e163f2f83530116b2", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "patch": "@@ -260,6 +260,8 @@ diagnostic_build_prefix (diagnostic_context *context,\n #undef DEFINE_DIAGNOSTIC_KIND\n     NULL\n   };\n+  gcc_assert (diagnostic->kind < DK_LAST_DIAGNOSTIC_KIND);\n+\n   const char *text = _(diagnostic_kind_text[diagnostic->kind]);\n   const char *text_cs = \"\", *text_ce = \"\";\n   const char *locus_cs, *locus_ce;\n@@ -274,11 +276,7 @@ diagnostic_build_prefix (diagnostic_context *context,\n   locus_cs = colorize_start (pp_show_color (pp), \"locus\");\n   locus_ce = colorize_stop (pp_show_color (pp));\n \n-  expanded_location s = expand_location_to_spelling_point (diagnostic->location);\n-  if (diagnostic->override_column)\n-    s.column = diagnostic->override_column;\n-  gcc_assert (diagnostic->kind < DK_LAST_DIAGNOSTIC_KIND);\n-\n+  expanded_location s = diagnostic_expand_location (diagnostic);\n   return\n     (s.file == NULL\n      ? build_message_string (\"%s%s:%s %s%s%s\", locus_cs, progname, locus_ce,\n@@ -289,8 +287,8 @@ diagnostic_build_prefix (diagnostic_context *context,\n      : context->show_column\n      ? build_message_string (\"%s%s:%d:%d:%s %s%s%s\", locus_cs, s.file, s.line,\n \t\t\t     s.column, locus_ce, text_cs, text, text_ce)\n-     : build_message_string (\"%s%s:%d:%s %s%s%s\", locus_cs, s.file, s.line, locus_ce,\n-\t\t\t     text_cs, text, text_ce));\n+     : build_message_string (\"%s%s:%d:%s %s%s%s\", locus_cs, s.file, s.line,\n+\t\t\t     locus_ce, text_cs, text, text_ce));\n }\n \n /* If LINE is longer than MAX_WIDTH, and COLUMN is not smaller than\n@@ -337,9 +335,7 @@ diagnostic_show_locus (diagnostic_context * context,\n     return;\n \n   context->last_location = diagnostic->location;\n-  s = expand_location_to_spelling_point (diagnostic->location);\n-  if (diagnostic->override_column)\n-    s.column = diagnostic->override_column;\n+  s = diagnostic_expand_location (diagnostic);\n   line = location_get_source_line (s, &line_width);\n   if (line == NULL || s.column > line_width)\n     return;"}, {"sha": "3c4906a31f515886a3fa00df1ebc41aef8c4e379", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "patch": "@@ -297,6 +297,18 @@ void diagnostic_set_caret_max_width (diagnostic_context *context, int value);\n \n void diagnostic_file_cache_fini (void);\n \n+/* Expand the location of this diagnostic. Use this function for consistency. */\n+\n+static inline expanded_location\n+diagnostic_expand_location (const diagnostic_info * diagnostic)\n+{\n+  expanded_location s\n+    = expand_location_to_spelling_point (diagnostic->location);\n+  if (diagnostic->override_column)\n+    s.column = diagnostic->override_column;\n+  return s;\n+}\n+\n /* Pure text formatting support functions.  */\n extern char *file_name_as_prefix (diagnostic_context *, const char *);\n "}, {"sha": "b34084db4c4b8eed440095730695c69cbd66aae7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "patch": "@@ -1,3 +1,8 @@\n+2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (gfc_diagnostic_build_locus_prefix): Use\n+\tdiagnostic_expand_location.\n+\n 2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* scanner.c (gfc_next_char_literal): Use gfc_warning_now."}, {"sha": "333ad006a15ba929f9ac23c6df9303223cde665d", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99abe958d87a7cf653ea2ea9c467f7ebe0ba956d/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=99abe958d87a7cf653ea2ea9c467f7ebe0ba956d", "patch": "@@ -1143,10 +1143,7 @@ gfc_diagnostic_build_locus_prefix (diagnostic_context *context,\n   pretty_printer *pp = context->printer;\n   const char *locus_cs = colorize_start (pp_show_color (pp), \"locus\");\n   const char *locus_ce = colorize_stop (pp_show_color (pp));\n-  expanded_location s = expand_location_to_spelling_point (diagnostic->location);\n-  if (diagnostic->override_column)\n-    s.column = diagnostic->override_column;\n-\n+  expanded_location s = diagnostic_expand_location (diagnostic);\n   return (s.file == NULL\n \t  ? build_message_string (\"%s%s:%s\", locus_cs, progname, locus_ce )\n \t  : !strcmp (s.file, N_(\"<built-in>\"))"}]}