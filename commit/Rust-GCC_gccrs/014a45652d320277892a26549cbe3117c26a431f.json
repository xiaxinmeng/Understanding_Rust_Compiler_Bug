{"sha": "014a45652d320277892a26549cbe3117c26a431f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0YTQ1NjUyZDMyMDI3Nzg5MmEyNjU0OWNiZTMxMTdjMjZhNDMxZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-03-06T07:29:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-03-06T07:29:33Z"}, "message": "* pa.md (movsicc): New expander.\n\nFrom-SVN: r9124", "tree": {"sha": "15de10aaec103d3ea51334f56aebed9744ef2b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15de10aaec103d3ea51334f56aebed9744ef2b13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014a45652d320277892a26549cbe3117c26a431f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014a45652d320277892a26549cbe3117c26a431f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014a45652d320277892a26549cbe3117c26a431f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014a45652d320277892a26549cbe3117c26a431f/comments", "author": null, "committer": null, "parents": [{"sha": "cd681d1f89dcfdf9e32f21ea8d0800d8eed1a260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd681d1f89dcfdf9e32f21ea8d0800d8eed1a260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd681d1f89dcfdf9e32f21ea8d0800d8eed1a260"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "b01a504e3c64c2cbf247892f2f1f46f706b132c9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014a45652d320277892a26549cbe3117c26a431f/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014a45652d320277892a26549cbe3117c26a431f/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=014a45652d320277892a26549cbe3117c26a431f", "patch": "@@ -762,6 +762,29 @@\n  (set_attr \"length\" \"8,8\")])\n ;;; Experimental conditional move patterns\n \n+(define_expand \"movsicc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(if_then_else:SI\n+\t (match_operator 1 \"comparison_operator\"\n+\t    [(match_operand:SI 4 \"register_operand\" \"\")\n+\t     (match_operand:SI 5 \"arith11_operand\" \"\")])\n+\t (match_operand:SI 2 \"reg_or_cint_move_operand\" \"\")\n+\t (match_operand:SI 3 \"reg_or_cint_move_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+\n+  if (hppa_branch_type != CMP_SI)\n+    FAIL;\n+\n+  /* operands[1] is currently the result of compare_from_rtx.  We want to\n+     emit a compare of the original operands.  */\n+  operands[1] = gen_rtx (code, SImode, hppa_compare_op0, hppa_compare_op1);\n+  operands[4] = hppa_compare_op0;\n+  operands[5] = hppa_compare_op1;\n+}\")\n+\n ; We need the first constraint alternative in order to avoid\n ; earlyclobbers on all other alternatives.\n (define_insn \"\""}]}