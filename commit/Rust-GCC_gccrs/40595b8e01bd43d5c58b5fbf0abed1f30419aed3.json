{"sha": "40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1OTViOGUwMWJkNDNkNWM1OGI1ZmJmMGFiZWQxZjMwNDE5YWVkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-12T15:38:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-12T15:38:33Z"}, "message": "re PR sanitizer/64984 (ICE in check_noexcept_t with ubsan)\n\n\tPR sanitizer/64984\n\t* except.c (check_noexcept_r): Return NULL for internal\n\tcalls.\n\n\t* g++.dg/ubsan/pr64984.C: New test.\n\nFrom-SVN: r220649", "tree": {"sha": "4a62a67e3a8e21cef0635a81ac2fdea84504ea8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a62a67e3a8e21cef0635a81ac2fdea84504ea8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72900b8306c2e0c821009269a5d203bb0658aba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72900b8306c2e0c821009269a5d203bb0658aba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72900b8306c2e0c821009269a5d203bb0658aba6"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "b66231d2febdf122e5b93808e40357d52e36f331", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "patch": "@@ -1,3 +1,9 @@\n+2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/64984\n+\t* except.c (check_noexcept_r): Return NULL for internal\n+\tcalls.\n+\n 2015-02-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/64994"}, {"sha": "3ff1ce607ee6bc62efa63669525a8feeeda3d2d6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "patch": "@@ -1148,7 +1148,7 @@ check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n {\n   tree t = *tp;\n   enum tree_code code = TREE_CODE (t);\n-  if (code == CALL_EXPR\n+  if ((code == CALL_EXPR && CALL_EXPR_FN (t))\n       || code == AGGR_INIT_EXPR)\n     {\n       /* We can only use the exception specification of the called function"}, {"sha": "276d6e17d4eabe507afca5d4d96ab07c5eefb0e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "patch": "@@ -1,3 +1,8 @@\n+2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/64984\n+\t* g++.dg/ubsan/pr64984.C: New test.\n+\n 2015-02-12  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gfortran.dg/pr45636.f90: XFAIL for aarch64* targets."}, {"sha": "34f8926cc5d0083ae1e6c171ffbdddd5e8b0c8d6", "filename": "gcc/testsuite/g++.dg/ubsan/pr64984.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr64984.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40595b8e01bd43d5c58b5fbf0abed1f30419aed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr64984.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr64984.C?ref=40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "patch": "@@ -0,0 +1,76 @@\n+// PR sanitizer/64984\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=vptr -std=gnu++11\" }\n+\n+template <typename X, X> struct K\n+{\n+  static constexpr X v = 0;\n+  typedef K t;\n+};\n+template <typename...> struct A;\n+template <typename X, typename Y>\n+struct A<X, Y> : Y\n+{\n+};\n+template <typename X> X M ();\n+template <typename...> struct B;\n+template <typename X, typename Y>\n+struct B<X, Y> : K<int, noexcept (static_cast<X>(M<Y>()))>\n+{\n+};\n+template <typename X, typename... Y>\n+struct G : A<int, B<X, Y...>>::t\n+{\n+};\n+template <typename X> struct J : G<X, X&&>\n+{\n+};\n+template <typename X> X&& foo (X&);\n+template <typename X> X&& bar (X&&);\n+template <typename X> struct P\n+{\n+  P (X& x) : q (x) {}\n+  X q;\n+};\n+template <typename...> struct Q;\n+template <typename X>\n+struct Q<X> : P<X>\n+{\n+  typedef P<X> r;\n+  X& s (Q&);\n+  Q (X& x) : r (x) {}\n+  Q (Q&& x) noexcept (J<X>::v) : r (foo<X>(s (x)))\n+  {\n+  }\n+};\n+template <typename... X> struct I : Q<X...>\n+{\n+  I ();\n+  I (X&... x) : Q<X...>(x...)\n+  {\n+  }\n+};\n+template <typename... X>\n+I<X&&...> baz (X&&... x)\n+{\n+  return I <X&&...> (foo<X>(x)...);\n+}\n+template <typename X> struct F\n+{\n+  int p;\n+  void operator[] (X&& x)\n+  {\n+    baz (bar (x));\n+  }\n+};\n+struct U\n+{\n+  virtual ~U ();\n+};\n+\n+int\n+main ()\n+{\n+  F<U> m;\n+  m[U ()];\n+}"}]}