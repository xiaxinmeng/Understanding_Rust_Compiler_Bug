{"sha": "509793471ab9e93d8627a6d74064ec43c36ff4ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5NzkzNDcxYWI5ZTkzZDg2MjdhNmQ3NDA2NGVjNDNjMzZmZjRjYQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-11-20T15:10:56Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-11-20T15:10:56Z"}, "message": "convert trans-mem to hash_table\n\ngcc/\n\n\t* cfgexpand.c, gimple-ssa.h, trans-mem.c: Replace htab with\n\thash_table.\n\nFrom-SVN: r217872", "tree": {"sha": "32d0ea1b5e051e3d370ca84a45ea541a8f404a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d0ea1b5e051e3d370ca84a45ea541a8f404a5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/509793471ab9e93d8627a6d74064ec43c36ff4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509793471ab9e93d8627a6d74064ec43c36ff4ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509793471ab9e93d8627a6d74064ec43c36ff4ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509793471ab9e93d8627a6d74064ec43c36ff4ca/comments", "author": null, "committer": null, "parents": [{"sha": "907dadbd2ade80fd356071954711375ce9b0c85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907dadbd2ade80fd356071954711375ce9b0c85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907dadbd2ade80fd356071954711375ce9b0c85a"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "327a5c5f2ce14e6610a15891cb35a517f9e9186a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=509793471ab9e93d8627a6d74064ec43c36ff4ca", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* cfgexpand.c, gimple-ssa.h, trans-mem.c: Replace htab with\n+\thash_table.\n+\n 2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* ipa-utils.c, lto-section-in.c, lto-streamer.h,"}, {"sha": "8cdf5853a7066822145fdc14759357659b562b2f", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=509793471ab9e93d8627a6d74064ec43c36ff4ca", "patch": "@@ -2234,16 +2234,16 @@ static void\n mark_transaction_restart_calls (gimple stmt)\n {\n   struct tm_restart_node dummy;\n-  void **slot;\n+  tm_restart_node **slot;\n \n   if (!cfun->gimple_df->tm_restart)\n     return;\n \n   dummy.stmt = stmt;\n-  slot = htab_find_slot (cfun->gimple_df->tm_restart, &dummy, NO_INSERT);\n+  slot = cfun->gimple_df->tm_restart->find_slot (&dummy, NO_INSERT);\n   if (slot)\n     {\n-      struct tm_restart_node *n = (struct tm_restart_node *) *slot;\n+      struct tm_restart_node *n = *slot;\n       tree list = n->label_or_list;\n       rtx_insn *insn;\n \n@@ -6062,10 +6062,7 @@ pass_expand::execute (function *fun)\n \n   /* After expanding, the tm_restart map is no longer needed.  */\n   if (fun->gimple_df->tm_restart)\n-    {\n-      htab_delete (fun->gimple_df->tm_restart);\n-      fun->gimple_df->tm_restart = NULL;\n-    }\n+    fun->gimple_df->tm_restart = NULL;\n \n   /* Tag the blocks with a depth number so that change_scope can find\n      the common parent easily.  */"}, {"sha": "9bdb23315d051233bcd72fa7d0c266c40fafe2df", "filename": "gcc/gimple-ssa.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Fgimple-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Fgimple-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa.h?ref=509793471ab9e93d8627a6d74064ec43c36ff4ca", "patch": "@@ -28,11 +28,24 @@ along with GCC; see the file COPYING3.  If not see\n /* This structure is used to map a gimple statement to a label,\n    or list of labels to represent transaction restart.  */\n \n-struct GTY(()) tm_restart_node {\n+struct GTY((for_user)) tm_restart_node {\n   gimple stmt;\n   tree label_or_list;\n };\n \n+/* Hasher for tm_restart_node.  */\n+\n+struct tm_restart_hasher : ggc_hasher<tm_restart_node *>\n+{\n+  static hashval_t hash (tm_restart_node *n) { return htab_hash_pointer (n); }\n+\n+  static bool\n+  equal (tm_restart_node *a, tm_restart_node *b)\n+  {\n+    return a == b;\n+  }\n+};\n+\n struct ssa_name_hasher : ggc_hasher<tree>\n {\n   /* Hash a tree in a uid_decl_map.  */\n@@ -101,7 +114,7 @@ struct GTY(()) gimple_df {\n \n   /* Map gimple stmt to tree label (or list of labels) for transaction\n      restart and abort.  */\n-  htab_t GTY ((param_is (struct tm_restart_node))) tm_restart;\n+  hash_table<tm_restart_hasher> *tm_restart;\n };\n \n "}, {"sha": "51f79a204df18d81ce83e698dff4f81a310004f9", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509793471ab9e93d8627a6d74064ec43c36ff4ca/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=509793471ab9e93d8627a6d74064ec43c36ff4ca", "patch": "@@ -3109,15 +3109,16 @@ split_bb_make_tm_edge (gimple stmt, basic_block dest_bb,\n \n   // Record the need for the edge for the benefit of the rtl passes.\n   if (cfun->gimple_df->tm_restart == NULL)\n-    cfun->gimple_df->tm_restart = htab_create_ggc (31, struct_ptr_hash,\n-\t\t\t\t\t\t   struct_ptr_eq, ggc_free);\n+    cfun->gimple_df->tm_restart\n+      = hash_table<tm_restart_hasher>::create_ggc (31);\n \n   struct tm_restart_node dummy;\n   dummy.stmt = stmt;\n   dummy.label_or_list = gimple_block_label (dest_bb);\n \n-  void **slot = htab_find_slot (cfun->gimple_df->tm_restart, &dummy, INSERT);\n-  struct tm_restart_node *n = (struct tm_restart_node *) *slot;\n+  tm_restart_node **slot = cfun->gimple_df->tm_restart->find_slot (&dummy,\n+\t\t\t\t\t\t\t\t   INSERT);\n+  struct tm_restart_node *n = *slot;\n   if (n == NULL)\n     {\n       n = ggc_alloc<tm_restart_node> ();\n@@ -3196,7 +3197,7 @@ expand_block_edges (struct tm_region *const region, basic_block bb)\n \n       if (cfun->gimple_df->tm_restart == NULL)\n \tcfun->gimple_df->tm_restart\n-\t  = htab_create_ggc (31, struct_ptr_hash, struct_ptr_eq, ggc_free);\n+\t  = hash_table<tm_restart_hasher>::create_ggc (31);\n \n       // All TM builtins have an abnormal edge to the outer-most transaction.\n       // We never restart inner transactions."}]}