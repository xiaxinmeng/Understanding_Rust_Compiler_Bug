{"sha": "d33df7e10db802a9c63eab5816b90882d3eda689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzZGY3ZTEwZGI4MDJhOWM2M2VhYjU4MTZiOTA4ODJkM2VkYTY4OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-12-12T22:28:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-12-12T22:28:02Z"}, "message": "re PR testsuite/20772 (x86 tests should run on both i?86 and x86_64)\n\n\tPR testsuite/20772\n\t* g++.old-deja/g++.eh/tmpl2.C: Remove xfail.\n\t* gcc.dg/asm-b.c: Fix typo.\n\t* gcc.dg/torture/pr20314-2.c: Test on i?86 lp64.\n\t* gcc.dg/tree-ssa/stdarg-2.c, gcc.dg/tree-ssa/stdarg-3.c,\n\tgcc.dg/tree-ssa/stdarg-4.c, gcc.dg/tree-ssa/stdarg-5.c: Test on\n\ti?86 lp64 and x86_64 ilp32.\n\t* gcc.target/i386/amd64-abi-1.c, gcc.target/i386/pr23943.c: Test\n\ton i?86 lp64.\n\t* gfortran.dg/g77/20010216-1.f: Test on x86_64 ilp32.\n\nFrom-SVN: r108427", "tree": {"sha": "be0f9582a19ae7a07680be5aa85c8478aae14c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be0f9582a19ae7a07680be5aa85c8478aae14c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33df7e10db802a9c63eab5816b90882d3eda689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33df7e10db802a9c63eab5816b90882d3eda689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33df7e10db802a9c63eab5816b90882d3eda689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33df7e10db802a9c63eab5816b90882d3eda689/comments", "author": null, "committer": null, "parents": [{"sha": "d0497a6573fa4523ffbe52f20793b39f756af221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0497a6573fa4523ffbe52f20793b39f756af221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0497a6573fa4523ffbe52f20793b39f756af221"}], "stats": {"total": 190, "additions": 116, "deletions": 74}, "files": [{"sha": "208450acf88a55d6205787cae9140a7a0aa29e3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,3 +1,16 @@\n+2005-12-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR testsuite/20772\n+\t* g++.old-deja/g++.eh/tmpl2.C: Remove xfail.\n+\t* gcc.dg/asm-b.c: Fix typo.\n+\t* gcc.dg/torture/pr20314-2.c: Test on i?86 lp64.\n+\t* gcc.dg/tree-ssa/stdarg-2.c, gcc.dg/tree-ssa/stdarg-3.c,\n+\tgcc.dg/tree-ssa/stdarg-4.c, gcc.dg/tree-ssa/stdarg-5.c: Test on\n+\ti?86 lp64 and x86_64 ilp32.\n+\t* gcc.target/i386/amd64-abi-1.c, gcc.target/i386/pr23943.c: Test\n+\ton i?86 lp64.\n+\t* gfortran.dg/g77/20010216-1.f: Test on x86_64 ilp32.\n+\n 2005-12-12  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/25078"}, {"sha": "dd2801d26b3ca57dea8bff78c7daca0ba924c239", "filename": "gcc/testsuite/g++.old-deja/g++.eh/tmpl2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl2.C?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble { xfail i*86-*-linux* } }\n+// { dg-do assemble }\n // { dg-options \"-O\" }\n \n // Posted by H. J. Lu <hjl@lucon.org>"}, {"sha": "8067500e57ff01b0681356305f9b8f9794699e26", "filename": "gcc/testsuite/gcc.dg/asm-b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run  { target powerpc-*-* i?386-*-* x86_64-*-* } } */\n+/* { dg-do run  { target powerpc-*-* i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O1\" } */\n /* Test to make sure that inline-asm causes the tree optimizers to get the\n    V_MAY_DEFs and clobber memory.  */"}, {"sha": "8185218c139d1954470bd61c8421d4cf7d951040", "filename": "gcc/testsuite/gcc.dg/torture/pr20314-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,5 +1,5 @@\n /* PR inline-asm/20314 */\n-/* { dg-do compile { target { x86_64-*-* && lp64 } } } */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n /* { dg-do compile { target ia64-*-* powerpc*-*-* } } */\n \n int a, b, c, d, e, f, g, h, i, j, k, l;"}, {"sha": "dad4d773707ca229a3fccfd48cb554bbc5299757", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-2.c", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -21,11 +21,12 @@ f1 (int i, ...)\n   va_start (ap, i);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -40,11 +41,12 @@ f2 (int i, ...)\n }\n /* Assume the counters can be number of registers or bytes on 32-bit\n    architecture or bytes on 64-bit architecture.  */\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -55,11 +57,12 @@ f3 (int i, ...)\n   d = va_arg (ap, double);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -71,11 +74,12 @@ f4 (int i, ...)\n   foo (i, ap);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -88,11 +92,12 @@ f5 (int i, ...)\n   va_end (ap);\n   va_end (gap);\n }\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -107,11 +112,12 @@ f6 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -123,11 +129,12 @@ f7 (int i, ...)\n   bar (6);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -141,11 +148,12 @@ f8 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -157,11 +165,12 @@ f9 (int i, ...)\n   bar (6);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -175,11 +184,12 @@ f10 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -194,11 +204,12 @@ f11 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -213,11 +224,12 @@ f12 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -232,11 +244,12 @@ f13 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -251,11 +264,12 @@ f14 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 24 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n inline void __attribute__((always_inline))\n@@ -274,10 +288,11 @@ f15 (int i, ...)\n   f15_1 (ap);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "9ffbe3fae4e5e1182bbc2edac56338423bb92d4d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-3.c", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -20,11 +20,12 @@ f1 (int i, ...)\n   x = va_arg (gap, long);\n   va_end (gap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -34,11 +35,12 @@ f2 (int i, ...)\n   bar (i);\n   va_end (gap);\n }\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n /* tree-stdarg.c only handles va_list variables, not arrays of them or\n@@ -51,11 +53,12 @@ f3 (int i, ...)\n   x = va_arg (aps[4], long);\n   va_end (aps[4]);\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -66,11 +69,12 @@ f4 (int i, ...)\n   bar (i);\n   va_end (aps[4]);\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -81,11 +85,12 @@ f5 (int i, ...)\n   foo (i, aps[4]);\n   va_end (aps[4]);\n }\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n struct A { int i; va_list g; va_list h[2]; };\n@@ -98,11 +103,12 @@ f6 (int i, ...)\n   x = va_arg (a.g, long);\n   va_end (a.g);\n }\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -113,11 +119,12 @@ f7 (int i, ...)\n   bar (i);\n   va_end (a.g);\n }\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -128,11 +135,12 @@ f8 (int i, ...)\n   foo (i, a.g);\n   va_end (a.g);\n }\n-/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -143,11 +151,12 @@ f10 (int i, ...)\n   x = va_arg (a.h[1], long);\n   va_end (a.h[1]);\n }\n-/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -158,11 +167,12 @@ f11 (int i, ...)\n   bar (i);\n   va_end (a.h[1]);\n }\n-/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -173,10 +183,11 @@ f12 (int i, ...)\n   foo (i, a.h[1]);\n   va_end (a.h[1]);\n }\n-/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "1a6c559a570e18039100a573f1fb433a3678dd60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-4.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -23,11 +23,12 @@ f1 (int i, ...)\n     x = va_arg (ap, long);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -39,11 +40,12 @@ f2 (int i, ...)\n     d = va_arg (ap, double);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n /* Here va_arg can be executed at most as many times as va_start.\n@@ -61,11 +63,12 @@ f3 (int i, ...)\n       bar (x);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n void\n@@ -81,10 +84,11 @@ f4 (int i, ...)\n       bar (d + 2.5);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "08f278725eb2fd245e32f647e414dbc47ec5045e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -22,7 +22,7 @@ f1 (int i, ...)\n     s1 = va_arg (ap, struct S1);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -35,7 +35,7 @@ f2 (int i, ...)\n     s2 = va_arg (ap, struct S2);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -53,7 +53,7 @@ f3 (int i, ...)\n       bar (s1.i);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -71,7 +71,7 @@ f4 (int i, ...)\n       bar (s2.i);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 16 GPR units and 16 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 16 GPR units and 16 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -85,7 +85,7 @@ f5 (int i, ...)\n   va_end (ap);\n   bar (__real__ ci + __imag__ ci);\n }\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 16 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 16 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save (4|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -99,7 +99,7 @@ f6 (int i, ...)\n   va_end (ap);\n   bar (__real__ ci + __imag__ cd);\n }\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 8 GPR units and 32 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 8 GPR units and 32 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 32 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -113,7 +113,7 @@ f7 (int i, ...)\n   va_end (ap);\n   bar (__real__ cd + __imag__ cd);\n }\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 0 GPR units and 64 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 0 GPR units and 64 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 32 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "5ce4fe151f0a59e5b5a82714be52852c449f7871", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-1.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n /* { dg-options \"-mno-sse\" } */\n-/* { dg-require-effective-target lp64 } */\n \n double foo(void) { return 0; }\t/* { dg-error \"SSE disabled\" } */\n void bar(double x) { }"}, {"sha": "5e4ad9b21128f6c27458b22703f07b28d451b1ec", "filename": "gcc/testsuite/gcc.target/i386/pr23943.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23943.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23943.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23943.c?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,6 +1,6 @@\n /* This used to ICE in side_effects_p, due to a problem in cse.c.\n    Origin: marcus at jet dot franken dot de.  */\n-/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -fPIC\" } */\n \n typedef long unsigned int size_t;"}, {"sha": "004d1d38309036df8973fe72d4106a7217226fe5", "filename": "gcc/testsuite/gfortran.dg/g77/20010216-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010216-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33df7e10db802a9c63eab5816b90882d3eda689/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010216-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010216-1.f?ref=d33df7e10db802a9c63eab5816b90882d3eda689", "patch": "@@ -1,7 +1,7 @@\n C Test for bug in reg-stack handling conditional moves.\n C Reported by Tim Prince <tprince@computer.org>\n C\n-C { dg-do run { target \"i[6789]86-*-*\" } }\n+C { dg-do run { target { { i[6789]86-*-* x86_64-*-* } && ilp32 } } }\n C { dg-options \"-ffast-math -march=pentiumpro\" }\n \n       double precision function foo(x, y)"}]}