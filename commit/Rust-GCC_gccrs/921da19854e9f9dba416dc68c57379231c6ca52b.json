{"sha": "921da19854e9f9dba416dc68c57379231c6ca52b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxZGExOTg1NGU5ZjlkYmE0MTZkYzY4YzU3Mzc5MjMxYzZjYTUyYg==", "commit": {"author": {"name": "Pedro Alves", "email": "palves@redhat.com", "date": "2015-11-27T14:48:21Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2015-11-27T14:48:21Z"}, "message": "PR other/61321 - demangler crash on casts in template parameters\n\nThe fix for bug 59195:\n\n [C++ demangler handles conversion operator incorrectly]\n https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59195\n\nunfortunately makes the demangler crash due to infinite recursion, in\ncase of casts in template parameters.\n\nFor example, with:\n\n template<int> struct A {};\n template <typename Y> void function_temp(A<sizeof ((Y)(999))>) {}\n template void function_temp<int>(A<sizeof (int)>);\n\nThe 'function_temp<int>' instantiation above mangles to:\n\n  _Z13function_tempIiEv1AIXszcvT_Li999EEE\n\nThe demangler parses this as:\n\ntyped name\n  template\n    name 'function_temp'\n    template argument list\n      builtin type int\n  function type\n    builtin type void\n    argument list\n      template                          (*)\n        name 'A'\n        template argument list\n          unary operator\n            operator sizeof\n            unary operator\n              cast\n                template parameter 0    (**)\n              literal\n                builtin type int\n                name '999'\n\nAnd after the fix for 59195, due to:\n\n static void\n d_print_cast (struct d_print_info *dpi, int options,\n\t       const struct demangle_component *dc)\n {\n ...\n   /* For a cast operator, we need the template parameters from\n      the enclosing template in scope for processing the type.  */\n   if (dpi->current_template != NULL)\n     {\n       dpt.next = dpi->templates;\n       dpi->templates = &dpt;\n       dpt.template_decl = dpi->current_template;\n     }\n\nwhen printing the template argument list of A (what should be \"<sizeof\n(int)>\"), the template parameter 0 (that is, \"T_\", the '**' above) now\nrefers to the first parameter of the the template argument list of the\n'A' template (the '*' above), exactly what we were already trying to\nprint.  This leads to infinite recursion, and stack exaustion.  The\ntemplate parameter 0 should actually refer to the first parameter of\nthe 'function_temp' template.\n\nWhere it reads \"for the cast operator\" in the comment in d_print_cast\n(above), it's really talking about a conversion operator, like:\n\n  struct A { template <typename U> explicit operator U(); };\n\nWe don't want to inject the template parameters from the enclosing\ntemplate in scope when processing a cast _expression_, only when\nhandling a conversion operator.\n\nThe problem is that DEMANGLE_COMPONENT_CAST is currently ambiguous,\nand means _both_ 'conversion operator' and 'cast expression'.\n\nFix this by adding a new DEMANGLE_COMPONENT_CONVERSION component type,\nwhich does what DEMANGLE_COMPONENT_CAST does today, and making\nDEMANGLE_COMPONENT_CAST just simply print its component subtree.\n\nI think we could instead reuse DEMANGLE_COMPONENT_CAST and in\nd_print_comp_inner still do:\n\n @@ -5001,9 +5013,9 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n        d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n        return;\n\n     case DEMANGLE_COMPONENT_CAST:\n       d_append_string (dpi, \"operator \");\n -     d_print_cast (dpi, options, dc);\n +     d_print_conversion (dpi, options, dc);\n       return;\n\nleaving the unary cast case below calling d_print_cast, but seems to\nme that spliting the component types makes it easier to reason about\nthe code.\n\ng++'s testsuite actually generates three symbols that crash the\ndemangler in the same way.  I've added those as tests in the demangler\ntestsuite as well.\n\nAnd then this fixes PR other/61233 too, which happens to be a\ndemangler crash originally reported to GDB, at:\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=16957\n\nBootstrapped and regtested on x86_64 Fedora 20.\n\nAlso ran this through GDB's testsuite.  GDB will require a small\nupdate to use DEMANGLE_COMPONENT_CONVERSION in one place it's using\nDEMANGLE_COMPONENT_CAST in its sources.\n\nlibiberty/\n2015-11-27  Pedro Alves  <palves@redhat.com>\n\n        PR other/61321\n        PR other/61233\n        * demangle.h (enum demangle_component_type)\n        <DEMANGLE_COMPONENT_CONVERSION>: New value.\n        * cp-demangle.c (d_demangle_callback, d_make_comp): Handle\n        DEMANGLE_COMPONENT_CONVERSION.\n        (is_ctor_dtor_or_conversion): Handle DEMANGLE_COMPONENT_CONVERSION\n        instead of DEMANGLE_COMPONENT_CAST.\n        (d_operator_name): Return a DEMANGLE_COMPONENT_CONVERSION\n        component if handling a conversion.\n        (d_count_templates_scopes, d_print_comp_inner): Handle\n        DEMANGLE_COMPONENT_CONVERSION.\n        (d_print_comp_inner): Handle DEMANGLE_COMPONENT_CONVERSION instead\n        of DEMANGLE_COMPONENT_CAST.\n        (d_print_cast): Rename as ...\n        (d_print_conversion): ... this.  Adjust comments.\n        (d_print_cast): Rewrite - simply print the left subcomponent.\n        * cp-demint.c (cplus_demangle_fill_component): Handle\n        DEMANGLE_COMPONENT_CONVERSION.\n\n        * testsuite/demangle-expected: Add tests.\n\nFrom-SVN: r231020", "tree": {"sha": "f5c75626e4d911aed8ad48089ec3ca213f802972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5c75626e4d911aed8ad48089ec3ca213f802972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/921da19854e9f9dba416dc68c57379231c6ca52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921da19854e9f9dba416dc68c57379231c6ca52b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921da19854e9f9dba416dc68c57379231c6ca52b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921da19854e9f9dba416dc68c57379231c6ca52b/comments", "author": {"login": "palves", "id": 1202913, "node_id": "MDQ6VXNlcjEyMDI5MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palves", "html_url": "https://github.com/palves", "followers_url": "https://api.github.com/users/palves/followers", "following_url": "https://api.github.com/users/palves/following{/other_user}", "gists_url": "https://api.github.com/users/palves/gists{/gist_id}", "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palves/subscriptions", "organizations_url": "https://api.github.com/users/palves/orgs", "repos_url": "https://api.github.com/users/palves/repos", "events_url": "https://api.github.com/users/palves/events{/privacy}", "received_events_url": "https://api.github.com/users/palves/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23e4d0b369627a6131babcff43226b7de740b312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e4d0b369627a6131babcff43226b7de740b312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e4d0b369627a6131babcff43226b7de740b312"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "1d7cadf4b71fcff175921e9577212d631cab980a", "filename": "include/demangle.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921da19854e9f9dba416dc68c57379231c6ca52b/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921da19854e9f9dba416dc68c57379231c6ca52b/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=921da19854e9f9dba416dc68c57379231c6ca52b", "patch": "@@ -379,6 +379,10 @@ enum demangle_component_type\n   /* A typecast, represented as a unary operator.  The one subtree is\n      the type to which the argument should be cast.  */\n   DEMANGLE_COMPONENT_CAST,\n+  /* A conversion operator, represented as a unary operator.  The one\n+     subtree is the type to which the argument should be converted\n+     to.  */\n+  DEMANGLE_COMPONENT_CONVERSION,\n   /* A nullary expression.  The left subtree is the operator.  */\n   DEMANGLE_COMPONENT_NULLARY,\n   /* A unary expression.  The left subtree is the operator, and the"}, {"sha": "673123c8e05589e706f89e60af6947f974fe6158", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=921da19854e9f9dba416dc68c57379231c6ca52b", "patch": "@@ -1,3 +1,27 @@\n+2015-11-27  Pedro Alves  <palves@redhat.com>\n+\n+\tPR other/61321\n+\tPR other/61233\n+\t* demangle.h (enum demangle_component_type)\n+\t<DEMANGLE_COMPONENT_CONVERSION>: New value.\n+\t* cp-demangle.c (d_demangle_callback, d_make_comp): Handle\n+\tDEMANGLE_COMPONENT_CONVERSION.\n+\t(is_ctor_dtor_or_conversion): Handle DEMANGLE_COMPONENT_CONVERSION\n+\tinstead of DEMANGLE_COMPONENT_CAST.\n+\t(d_operator_name): Return a DEMANGLE_COMPONENT_CONVERSION\n+\tcomponent if handling a conversion.\n+\t(d_count_templates_scopes, d_print_comp_inner): Handle\n+\tDEMANGLE_COMPONENT_CONVERSION.\n+\t(d_print_comp_inner): Handle DEMANGLE_COMPONENT_CONVERSION instead\n+\tof DEMANGLE_COMPONENT_CAST.\n+\t(d_print_cast): Rename as ...\n+\t(d_print_conversion): ... this.  Adjust comments.\n+\t(d_print_cast): Rewrite - simply print the left subcomponent.\n+\t* cp-demint.c (cplus_demangle_fill_component): Handle\n+\tDEMANGLE_COMPONENT_CONVERSION.\n+\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2015-11-12  Mike Stump  <mikestump@comcast.net>\n \n \t* Makefile.in (etags tags TAGS): Use && instead of ;."}, {"sha": "bd64bef8cf7ac95bede52d4690dcf3d791638f49", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=921da19854e9f9dba416dc68c57379231c6ca52b", "patch": "@@ -542,8 +542,10 @@ d_print_array_type (struct d_print_info *, int,\n static void\n d_print_expr_op (struct d_print_info *, int, const struct demangle_component *);\n \n-static void\n-d_print_cast (struct d_print_info *, int, const struct demangle_component *);\n+static void d_print_cast (struct d_print_info *, int,\n+\t\t\t  const struct demangle_component *);\n+static void d_print_conversion (struct d_print_info *, int,\n+\t\t\t\tconst struct demangle_component *);\n \n static int d_demangle_callback (const char *, int,\n                                 demangle_callbackref, void *);\n@@ -736,6 +738,9 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_CAST:\n       printf (\"cast\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_CONVERSION:\n+      printf (\"conversion operator\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_NULLARY:\n       printf (\"nullary operator\\n\");\n       break;\n@@ -945,6 +950,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_IMAGINARY:\n     case DEMANGLE_COMPONENT_VENDOR_TYPE:\n     case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_CONVERSION:\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n     case DEMANGLE_COMPONENT_DECLTYPE:\n     case DEMANGLE_COMPONENT_PACK_EXPANSION:\n@@ -1238,7 +1244,7 @@ is_ctor_dtor_or_conversion (struct demangle_component *dc)\n       return is_ctor_dtor_or_conversion (d_right (dc));\n     case DEMANGLE_COMPONENT_CTOR:\n     case DEMANGLE_COMPONENT_DTOR:\n-    case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_CONVERSION:\n       return 1;\n     }\n }\n@@ -1804,11 +1810,16 @@ d_operator_name (struct d_info *di)\n     {\n       struct demangle_component *type;\n       int was_conversion = di->is_conversion;\n+      struct demangle_component *res;\n \n       di->is_conversion = ! di->is_expression;\n       type = cplus_demangle_type (di);\n+      if (di->is_conversion)\n+\tres = d_make_comp (di, DEMANGLE_COMPONENT_CONVERSION, type, NULL);\n+      else\n+\tres = d_make_comp (di, DEMANGLE_COMPONENT_CAST, type, NULL);\n       di->is_conversion = was_conversion;\n-      return d_make_comp (di, DEMANGLE_COMPONENT_CAST, type, NULL);\n+      return res;\n     }\n   else\n     {\n@@ -3928,6 +3939,7 @@ d_count_templates_scopes (int *num_templates, int *num_scopes,\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n     case DEMANGLE_COMPONENT_INITIALIZER_LIST:\n     case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_CONVERSION:\n     case DEMANGLE_COMPONENT_NULLARY:\n     case DEMANGLE_COMPONENT_UNARY:\n     case DEMANGLE_COMPONENT_BINARY:\n@@ -5064,9 +5076,9 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n       return;\n \n-    case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_CONVERSION:\n       d_append_string (dpi, \"operator \");\n-      d_print_cast (dpi, options, dc);\n+      d_print_conversion (dpi, options, dc);\n       return;\n \n     case DEMANGLE_COMPONENT_NULLARY:\n@@ -5805,11 +5817,20 @@ d_print_expr_op (struct d_print_info *dpi, int options,\n \n static void\n d_print_cast (struct d_print_info *dpi, int options,\n-              const struct demangle_component *dc)\n+\t\t    const struct demangle_component *dc)\n+{\n+  d_print_comp (dpi, options, d_left (dc));\n+}\n+\n+/* Print a conversion operator.  */\n+\n+static void\n+d_print_conversion (struct d_print_info *dpi, int options,\n+\t\t    const struct demangle_component *dc)\n {\n   struct d_print_template dpt;\n \n-  /* For a cast operator, we need the template parameters from\n+  /* For a conversion operator, we need the template parameters from\n      the enclosing template in scope for processing the type.  */\n   if (dpi->current_template != NULL)\n     {"}, {"sha": "efcc5b7f5c02a3ae1cda503a80fe1f85609e85bd", "filename": "libiberty/cp-demint.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Fcp-demint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Fcp-demint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demint.c?ref=921da19854e9f9dba416dc68c57379231c6ca52b", "patch": "@@ -110,6 +110,7 @@ cplus_demangle_fill_component (struct demangle_component *p,\n     case DEMANGLE_COMPONENT_IMAGINARY:\n     case DEMANGLE_COMPONENT_VENDOR_TYPE:\n     case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_CONVERSION:\n       if (right != NULL)\n \treturn 0;\n       break;"}, {"sha": "aebf01b3add7c858c6673ff3ae3f73e784521e51", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921da19854e9f9dba416dc68c57379231c6ca52b/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=921da19854e9f9dba416dc68c57379231c6ca52b", "patch": "@@ -4398,3 +4398,26 @@ std::ios_base::failure[abi:cxx11]::failure\n --format=gnu-v3\n _Z1fPDxFvvES0_\n f(void (*)() transaction_safe, void (*)() transaction_safe)\n+#\n+# These two are from gcc PR61321, and gcc PR61233 / gdb PR16957\n+#\n+--format=gnu-v3\n+_Z13function_tempIiEv1AIXszcvT_Li999EEE\n+void function_temp<int>(A<sizeof ((int)(999))>)\n+#\n+--format=gnu-v3\n+_Z7ZipWithI7QStringS0_5QListZN4oral6detail16AdaptCreateTableI7AccountEES0_RKNS3_16CachedFieldsDataEEUlRKS0_SA_E_ET1_IDTclfp1_cvT__EcvT0__EEEERKT1_ISC_ERKT1_ISD_ET2_\n+QList<decltype ({parm#3}((QString)(), (QString)()))> ZipWith<QString, QString, QList, QString oral::detail::AdaptCreateTable<Account>(oral::detail::CachedFieldsData const&)::{lambda(QString const&, QString const&)#1}>(QList<QString oral::detail::AdaptCreateTable<Account>(oral::detail::CachedFieldsData const&)::{lambda(QString const&, QString const&)#1}> const&, QList<QList> const&, QString oral::detail::AdaptCreateTable<Account>(oral::detail::CachedFieldsData const&)::{lambda(QString const&, QString const&)#1})\n+#\n+# These three are symbols generated by g++'s testsuite, which triggered the same bug as above.\n+--format=gnu-v3\n+_Z14int_if_addableI1YERiP1AIXszpldecvPT_Li0EdecvS4_Li0EEE\n+int& int_if_addable<Y>(A<sizeof ((*((Y*)(0)))+(*((Y*)(0))))>*)\n+#\n+--format=gnu-v3\n+_Z3bazIiEvP1AIXszcl3foocvT__ELCf00000000_00000000EEEE\n+void baz<int>(A<sizeof (foo((int)(), (floatcomplex )00000000_00000000))>*)\n+#\n+--format=gnu-v3\n+_Z3fooI1FEN1XIXszdtcl1PclcvT__EEE5arrayEE4TypeEv\n+X<sizeof ((P(((F)())())).array)>::Type foo<F>()"}]}