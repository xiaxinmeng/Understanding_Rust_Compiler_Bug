{"sha": "3f4d9b988110a36b70844ad894e80d0fdb37ea39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0ZDliOTg4MTEwYTM2YjcwODQ0YWQ4OTRlODBkMGZkYjM3ZWEzOQ==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-08-26T15:41:54Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-08-26T15:41:54Z"}, "message": "vfp.md: Move pipeline description for VFP11 to...\n\n2008-08-26  Paul Brook   <paul@codesourcery.com>\n\n\t* config/arm/vfp.md: Move pipeline description for VFP11 to...\n\t* config/arm/vfp11.md: ...here.  New.\n\t* config/arm/arm.md: Include vfp11.md.\n\nFrom-SVN: r139599", "tree": {"sha": "5b89b3dfc3b20563582dcdabf490fd31e82cd498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b89b3dfc3b20563582dcdabf490fd31e82cd498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f4d9b988110a36b70844ad894e80d0fdb37ea39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f4d9b988110a36b70844ad894e80d0fdb37ea39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f4d9b988110a36b70844ad894e80d0fdb37ea39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f4d9b988110a36b70844ad894e80d0fdb37ea39/comments", "author": null, "committer": null, "parents": [{"sha": "4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9b57fad9889f89c76e0cba1b47d7387a42ea49"}], "stats": {"total": 180, "additions": 97, "deletions": 83}, "files": [{"sha": "f24338f5aa7bf2c38e267107cb0a748cc9bd2e29", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3f4d9b988110a36b70844ad894e80d0fdb37ea39", "patch": "@@ -351,6 +351,7 @@\n (include \"arm1136jfs.md\")\n (include \"cortex-a8.md\")\n (include \"cortex-r4.md\")\n+(include \"vfp11.md\")\n \n \f\n ;;---------------------------------------------------------------------------"}, {"sha": "65c081d448efeff8eb4324ce4c1af361c8aa6a21", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 3, "deletions": 83, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=3f4d9b988110a36b70844ad894e80d0fdb37ea39", "patch": "@@ -1,6 +1,6 @@\n-;; ARM VFP coprocessor Machine Description\n-;; Copyright (C) 2003, 2005, 2006, 2007 Free Software Foundation, Inc.\n-;; Written by CodeSourcery, LLC.\n+;; ARM VFP instruction patterns\n+;; Copyright (C) 2003, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+;; Written by CodeSourcery.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -23,41 +23,6 @@\n   [(VFPCC_REGNUM 127)]\n )\n \n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;; Pipeline description\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-\n-(define_automaton \"vfp11\")\n-\n-;; There are 3 pipelines in the VFP11 unit.\n-;;\n-;; - A 8-stage FMAC pipeline (7 execute + writeback) with forward from\n-;;   fourth stage for simple operations.\n-;;\n-;; - A 5-stage DS pipeline (4 execute + writeback) for divide/sqrt insns.\n-;;   These insns also uses first execute stage of FMAC pipeline.\n-;;\n-;; - A 4-stage LS pipeline (execute + 2 memory + writeback) with forward from\n-;;   second memory stage for loads.\n-\n-;; We do not model Write-After-Read hazards.\n-;; We do not do write scheduling with the arm core, so it is only necessary\n-;; to model the first stage of each pipeline\n-;; ??? Need to model LS pipeline properly for load/store multiple?\n-;; We do not model fmstat properly.  This could be done by modeling pipelines\n-;; properly and defining an absence set between a dummy fmstat unit and all\n-;; other vfp units.\n-\n-(define_cpu_unit \"fmac\" \"vfp11\")\n-\n-(define_cpu_unit \"ds\" \"vfp11\")\n-\n-(define_cpu_unit \"vfp_ls\" \"vfp11\")\n-\n-(define_cpu_unit \"fmstat\" \"vfp11\")\n-\n-(exclusion_set \"fmac,ds\" \"fmstat\")\n-\n ;; The VFP \"type\" attributes differ from those used in the FPA model.\n ;; ffarith\tFast floating point insns, e.g. abs, neg, cpy, cmp.\n ;; farith\tMost arithmetic insns.\n@@ -71,51 +36,6 @@\n ;; r_2_f\tTransfer arm to vfp reg.\n ;; f_cvt\tConvert floating<->integral\n \n-(define_insn_reservation \"vfp_ffarith\" 4\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"ffarith\"))\n- \"fmac\")\n-\n-(define_insn_reservation \"vfp_farith\" 8\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"farith,f_cvt\"))\n- \"fmac\")\n-\n-(define_insn_reservation \"vfp_fmul\" 9\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"fmul\"))\n- \"fmac*2\")\n-\n-(define_insn_reservation \"vfp_fdivs\" 19\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"fdivs\"))\n- \"ds*15\")\n-\n-(define_insn_reservation \"vfp_fdivd\" 33\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"fdivd\"))\n- \"fmac+ds*29\")\n-\n-;; Moves to/from arm regs also use the load/store pipeline.\n-(define_insn_reservation \"vfp_fload\" 4\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"f_loads,f_loadd,r_2_f\"))\n- \"vfp_ls\")\n-\n-(define_insn_reservation \"vfp_fstore\" 4\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"f_stores,f_stored,f_2_r\"))\n- \"vfp_ls\")\n-\n-(define_insn_reservation \"vfp_to_cpsr\" 4\n- (and (eq_attr \"generic_vfp\" \"yes\")\n-      (eq_attr \"type\" \"f_flag\"))\n- \"fmstat,vfp_ls*3\")\n-\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;; Insn pattern\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-\n ;; SImode moves\n ;; ??? For now do not allow loading constants into vfp regs.  This causes\n ;; problems because small constants get converted into adds."}, {"sha": "fa953d7c4b2827889ad682edf7beda7d5695db1c", "filename": "gcc/config/arm/vfp11.md", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Fvfp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f4d9b988110a36b70844ad894e80d0fdb37ea39/gcc%2Fconfig%2Farm%2Fvfp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp11.md?ref=3f4d9b988110a36b70844ad894e80d0fdb37ea39", "patch": "@@ -0,0 +1,93 @@\n+;; ARM VFP11 pipeline description\n+;; Copyright (C) 2003, 2005, 2007, 2008 Free Software Foundation, Inc.\n+;; Written by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the Free\n+;; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+;; 02110-1301, USA.  */\n+\n+(define_automaton \"vfp11\")\n+\n+;; There are 3 pipelines in the VFP11 unit.\n+;;\n+;; - A 8-stage FMAC pipeline (7 execute + writeback) with forward from\n+;;   fourth stage for simple operations.\n+;;\n+;; - A 5-stage DS pipeline (4 execute + writeback) for divide/sqrt insns.\n+;;   These insns also uses first execute stage of FMAC pipeline.\n+;;\n+;; - A 4-stage LS pipeline (execute + 2 memory + writeback) with forward from\n+;;   second memory stage for loads.\n+\n+;; We do not model Write-After-Read hazards.\n+;; We do not do write scheduling with the arm core, so it is only necessary\n+;; to model the first stage of each pipeline\n+;; ??? Need to model LS pipeline properly for load/store multiple?\n+;; We do not model fmstat properly.  This could be done by modeling pipelines\n+;; properly and defining an absence set between a dummy fmstat unit and all\n+;; other vfp units.\n+\n+(define_cpu_unit \"fmac\" \"vfp11\")\n+\n+(define_cpu_unit \"ds\" \"vfp11\")\n+\n+(define_cpu_unit \"vfp_ls\" \"vfp11\")\n+\n+(define_cpu_unit \"fmstat\" \"vfp11\")\n+\n+(exclusion_set \"fmac,ds\" \"fmstat\")\n+\n+(define_insn_reservation \"vfp_ffarith\" 4\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"ffarith\"))\n+ \"fmac\")\n+\n+(define_insn_reservation \"vfp_farith\" 8\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"farith,f_cvt\"))\n+ \"fmac\")\n+\n+(define_insn_reservation \"vfp_fmul\" 9\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"fmul\"))\n+ \"fmac*2\")\n+\n+(define_insn_reservation \"vfp_fdivs\" 19\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"fdivs\"))\n+ \"ds*15\")\n+\n+(define_insn_reservation \"vfp_fdivd\" 33\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"fdivd\"))\n+ \"fmac+ds*29\")\n+\n+;; Moves to/from arm regs also use the load/store pipeline.\n+(define_insn_reservation \"vfp_fload\" 4\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"f_loads,f_loadd,r_2_f\"))\n+ \"vfp_ls\")\n+\n+(define_insn_reservation \"vfp_fstore\" 4\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"f_stores,f_stored,f_2_r\"))\n+ \"vfp_ls\")\n+\n+(define_insn_reservation \"vfp_to_cpsr\" 4\n+ (and (eq_attr \"generic_vfp\" \"yes\")\n+      (eq_attr \"type\" \"f_flag\"))\n+ \"fmstat,vfp_ls*3\")\n+"}]}