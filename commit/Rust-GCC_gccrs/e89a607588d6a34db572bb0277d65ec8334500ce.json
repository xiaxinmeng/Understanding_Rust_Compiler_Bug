{"sha": "e89a607588d6a34db572bb0277d65ec8334500ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5YTYwNzU4OGQ2YTM0ZGI1NzJiYjAyNzdkNjVlYzgzMzQ1MDBjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-02-04T16:28:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-04T16:28:40Z"}, "message": "decl.c (start_function): Call cplus_decl_attributes immediately after grokdeclarator.\n\n        * decl.c (start_function): Call cplus_decl_attributes immediately\n        after grokdeclarator.\n\n        * decl.c (start_function): Combine DECL_RESULT handling code.\n\nFrom-SVN: r49480", "tree": {"sha": "ab16aa8a8162f23b1c774a65b1b2091e6a4919c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab16aa8a8162f23b1c774a65b1b2091e6a4919c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89a607588d6a34db572bb0277d65ec8334500ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89a607588d6a34db572bb0277d65ec8334500ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89a607588d6a34db572bb0277d65ec8334500ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89a607588d6a34db572bb0277d65ec8334500ce/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3335fcacb0f0e1dc4541ee56b206132fe4f3a21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335fcacb0f0e1dc4541ee56b206132fe4f3a21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3335fcacb0f0e1dc4541ee56b206132fe4f3a21b"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "6179739ddb819aab4d57a2552806505ad9a7923f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89a607588d6a34db572bb0277d65ec8334500ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89a607588d6a34db572bb0277d65ec8334500ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e89a607588d6a34db572bb0277d65ec8334500ce", "patch": "@@ -1,3 +1,10 @@\n+2002-02-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (start_function): Call cplus_decl_attributes immediately\n+\tafter grokdeclarator.\n+\n+\t* decl.c (start_function): Combine DECL_RESULT handling code.\n+\n 2002-02-03  Jason Merrill  <jason@redhat.com>\n \n \t* xref.c: Remove."}, {"sha": "c1c254df90e69cacd3e18c2a80fe6646e38ba130", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89a607588d6a34db572bb0277d65ec8334500ce/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89a607588d6a34db572bb0277d65ec8334500ce/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e89a607588d6a34db572bb0277d65ec8334500ce", "patch": "@@ -13481,7 +13481,10 @@ start_function (declspecs, declarator, attrs, flags)\n       decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, NULL);\n       /* If the declarator is not suitable for a function definition,\n \t cause a syntax error.  */\n-      if (decl1 == NULL_TREE || TREE_CODE (decl1) != FUNCTION_DECL) return 0;\n+      if (decl1 == NULL_TREE || TREE_CODE (decl1) != FUNCTION_DECL)\n+\treturn 0;\n+\n+      cplus_decl_attributes (&decl1, attrs, 0);\n \n       fntype = TREE_TYPE (decl1);\n \n@@ -13595,19 +13598,16 @@ start_function (declspecs, declarator, attrs, flags)\n \n   /* Build the return declaration for the function.  */\n   restype = TREE_TYPE (fntype);\n-  if (!processing_template_decl)\n+  /* Promote the value to int before returning it.  */\n+  if (c_promoting_integer_type_p (restype))\n+    restype = type_promotes_to (restype);\n+  if (DECL_RESULT (decl1) == NULL_TREE)\n     {\n-      if (!DECL_RESULT (decl1))\n-\t{\n-\t  DECL_RESULT (decl1)\n-\t    = build_decl (RESULT_DECL, 0, TYPE_MAIN_VARIANT (restype));\n-\t  c_apply_type_quals_to_decl (cp_type_quals (restype),\n-\t\t\t\t      DECL_RESULT (decl1));\n-\t}\n+      DECL_RESULT (decl1)\n+\t= build_decl (RESULT_DECL, 0, TYPE_MAIN_VARIANT (restype));\n+      c_apply_type_quals_to_decl (cp_type_quals (restype),\n+\t\t\t\t  DECL_RESULT (decl1));\n     }\n-  else\n-    /* Just use `void'.  Nobody will ever look at this anyhow.  */\n-    DECL_RESULT (decl1) = build_decl (RESULT_DECL, 0, void_type_node);\n \n   /* Initialize RTL machinery.  We cannot do this until\n      CURRENT_FUNCTION_DECL and DECL_RESULT are set up.  We do this\n@@ -13768,20 +13768,6 @@ start_function (declspecs, declarator, attrs, flags)\n   pushlevel (0);\n   current_binding_level->parm_flag = 1;\n \n-  cplus_decl_attributes (&decl1, attrs, 0);\n-\n-  /* Promote the value to int before returning it.  */\n-  if (c_promoting_integer_type_p (restype))\n-    restype = type_promotes_to (restype);\n-\n-  if (DECL_RESULT (decl1) == NULL_TREE)\n-    {\n-      DECL_RESULT (decl1)\n-\t= build_decl (RESULT_DECL, 0, TYPE_MAIN_VARIANT (restype));\n-      TREE_READONLY (DECL_RESULT (decl1)) = CP_TYPE_CONST_P (restype);\n-      TREE_THIS_VOLATILE (DECL_RESULT (decl1)) = CP_TYPE_VOLATILE_P (restype);\n-    }\n-\n   ++function_depth;\n \n   if (DECL_DESTRUCTOR_P (decl1))"}]}