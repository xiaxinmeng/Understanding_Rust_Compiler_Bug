{"sha": "a93e1d5c70abe9fba3522318131a352fad0a4f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzZTFkNWM3MGFiZTlmYmEzNTIyMzE4MTMxYTM1MmZhZDBhNGY0OA==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2019-12-13T10:22:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-13T10:22:39Z"}, "message": "[AArch64] Enable CLI for Armv8.6-a: armv8.6-a, i8mm and bf16\n\n2019-12-13  Dennis Zhang  <dennis.zhang@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-arches.def (armv8.6-a): New.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_MATMUL_INT8, __ARM_FEATURE_BF16_VECTOR_ARITHMETIC and\n\t__ARM_FEATURE_BF16_SCALAR_ARITHMETIC when enabled.\n\t* config/aarch64/aarch64-option-extensions.def (i8mm, bf16): New.\n\t(fp): Disabling fp also disables i8mm and bf16.\n\t(simd): Disabling simd also disables i8mm.\n\t* config/aarch64/aarch64.h (AARCH64_FL_V8_6): New macro.\n\t(AARCH64_FL_I8MM, AARCH64_FL_BF16, AARCH64_FL_FOR_ARCH8_6): Likewise.\n\t(AARCH64_ISA_V8_6, AARCH64_ISA_I8MM, AARCH64_ISA_BF16): Likewise.\n\t(TARGET_I8MM, TARGET_BF16_FP, TARGET_BF16_SIMD): Likewise.\n\t* doc/invoke.texi (armv8.6-a, i8mm, bf16): Document new options\n\tand add a new table to list permissible values for ARCH.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Add tests for i8mm\n\tand bf16 features.\n\nFrom-SVN: r279370", "tree": {"sha": "6ee68ea1866198572dd441aed5848e5fef0e1db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee68ea1866198572dd441aed5848e5fef0e1db9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a93e1d5c70abe9fba3522318131a352fad0a4f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93e1d5c70abe9fba3522318131a352fad0a4f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93e1d5c70abe9fba3522318131a352fad0a4f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93e1d5c70abe9fba3522318131a352fad0a4f48/comments", "author": null, "committer": null, "parents": [{"sha": "1a4c0446c0b38d86e7385a114cd99af591eece05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4c0446c0b38d86e7385a114cd99af591eece05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4c0446c0b38d86e7385a114cd99af591eece05"}], "stats": {"total": 204, "additions": 178, "deletions": 26}, "files": [{"sha": "e34938929ed29529fa4b23cdacf591ac74c3c0dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -1,3 +1,19 @@\n+2019-12-13  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def (armv8.6-a): New.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_MATMUL_INT8, __ARM_FEATURE_BF16_VECTOR_ARITHMETIC and\n+\t__ARM_FEATURE_BF16_SCALAR_ARITHMETIC when enabled.\n+\t* config/aarch64/aarch64-option-extensions.def (i8mm, bf16): New.\n+\t(fp): Disabling fp also disables i8mm and bf16.\n+\t(simd): Disabling simd also disables i8mm.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V8_6): New macro.\n+\t(AARCH64_FL_I8MM, AARCH64_FL_BF16, AARCH64_FL_FOR_ARCH8_6): Likewise.\n+\t(AARCH64_ISA_V8_6, AARCH64_ISA_I8MM, AARCH64_ISA_BF16): Likewise.\n+\t(TARGET_I8MM, TARGET_BF16_FP, TARGET_BF16_SIMD): Likewise.\n+\t* doc/invoke.texi (armv8.6-a, i8mm, bf16): Document new options\n+\tand add a new table to list permissible values for ARCH.\n+\n 2019-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92908"}, {"sha": "e464d329c1a85ff6f47a4c9d889e343902da32ff", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -36,5 +36,6 @@ AARCH64_ARCH(\"armv8.2-a\",     generic,\t     8_2A,\t8,  AARCH64_FL_FOR_ARCH8_2)\n AARCH64_ARCH(\"armv8.3-a\",     generic,\t     8_3A,\t8,  AARCH64_FL_FOR_ARCH8_3)\n AARCH64_ARCH(\"armv8.4-a\",     generic,\t     8_4A,\t8,  AARCH64_FL_FOR_ARCH8_4)\n AARCH64_ARCH(\"armv8.5-a\",     generic,\t     8_5A,\t8,  AARCH64_FL_FOR_ARCH8_5)\n+AARCH64_ARCH(\"armv8.6-a\",     generic,\t     8_6A,\t8,  AARCH64_FL_FOR_ARCH8_6)\n \n #undef AARCH64_ARCH"}, {"sha": "20d1e00552b7139667f3ab9c4350863093b4dda9", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -165,6 +165,12 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_RNG, \"__ARM_FEATURE_RNG\", pfile);\n   aarch64_def_or_undef (TARGET_MEMTAG, \"__ARM_FEATURE_MEMORY_TAGGING\", pfile);\n \n+  aarch64_def_or_undef (TARGET_I8MM, \"__ARM_FEATURE_MATMUL_INT8\", pfile);\n+  aarch64_def_or_undef (TARGET_BF16_SIMD,\n+\t\t\t\"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC\", pfile);\n+  aarch64_def_or_undef (TARGET_BF16_FP,\n+\t\t\t\"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC\", pfile);\n+\n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A\n      16-bit floating-point extensions.  */"}, {"sha": "52c0fb79f8237f8dd1c887e74b0ce3b41a9ae087", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -52,25 +52,27 @@\n \n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n-   \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n-   \"sve2-bitperm\".  */\n+   \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n+   \"sve2-bitperm\", \"i8mm\" and \"bf16\".  */\n AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | \\\n \t\t      AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | \\\n \t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n \t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n-\t\t      AARCH64_FL_SVE2_BITPERM, false, \"fp\")\n+\t\t      AARCH64_FL_SVE2_BITPERM | AARCH64_FL_I8MM | \\\n+\t\t      AARCH64_FL_BF16, false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n-   \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n-   \"sve2-bitperm\".  */\n+   \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n+   \"sve2-bitperm\", and \"i8mm\".  */\n AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | \\\n \t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | \\\n \t\t      AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n \t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n-\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM | \\\n+\t\t      AARCH64_FL_I8MM, false, \\\n \t\t      \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n@@ -198,4 +200,14 @@ AARCH64_OPT_EXTENSION(\"sve2-bitperm\", AARCH64_FL_SVE2_BITPERM, AARCH64_FL_SIMD |\n /* Enabling or disabling \"tme\" only changes \"tme\".  */\n AARCH64_OPT_EXTENSION(\"tme\", AARCH64_FL_TME, 0, 0, false, \"\")\n \n+/* Enabling \"i8mm\" also enables \"simd\" and \"fp\".\n+   Disabling \"i8mm\" only disables \"i8mm\".  */\n+AARCH64_OPT_EXTENSION(\"i8mm\", AARCH64_FL_I8MM, \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_FP, 0, false, \"i8mm\")\n+\n+/* Enabling \"bf16\" also enables \"simd\" and \"fp\".\n+   Disabling \"bf16\" only disables \"bf16\".  */\n+AARCH64_OPT_EXTENSION(\"bf16\", AARCH64_FL_BF16, \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_FP, 0, false, \"bf16\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "2bb5a2087205e6a79ad8e2d2ac218fbba7aac2a4", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -202,6 +202,15 @@ extern unsigned aarch64_architecture_version;\n /* Transactional Memory Extension.  */\n #define AARCH64_FL_TME\t      (1ULL << 33)  /* Has TME instructions.  */\n \n+/* Armv8.6-A architecture extensions.  */\n+#define AARCH64_FL_V8_6\t      (1ULL << 34)\n+\n+/* 8-bit Integer Matrix Multiply (I8MM) extensions.  */\n+#define AARCH64_FL_I8MM\t      (1ULL << 35)\n+\n+/* Brain half-precision floating-point (BFloat16) Extension.  */\n+#define AARCH64_FL_BF16\t      (1ULL << 36)\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n \n@@ -223,6 +232,9 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FOR_ARCH8_5\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_V8_5\t\\\n    | AARCH64_FL_SB | AARCH64_FL_SSBS | AARCH64_FL_PREDRES)\n+#define AARCH64_FL_FOR_ARCH8_6\t\t\t\\\n+  (AARCH64_FL_FOR_ARCH8_5 | AARCH64_FL_V8_6 | AARCH64_FL_FPSIMD \\\n+   | AARCH64_FL_I8MM | AARCH64_FL_BF16)\n \n /* Macros to test ISA flags.  */\n \n@@ -249,6 +261,9 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_V8_5\t   (aarch64_isa_flags & AARCH64_FL_V8_5)\n #define AARCH64_ISA_TME\t\t   (aarch64_isa_flags & AARCH64_FL_TME)\n #define AARCH64_ISA_MEMTAG\t   (aarch64_isa_flags & AARCH64_FL_MEMTAG)\n+#define AARCH64_ISA_V8_6\t   (aarch64_isa_flags & AARCH64_FL_V8_6)\n+#define AARCH64_ISA_I8MM\t   (aarch64_isa_flags & AARCH64_FL_I8MM)\n+#define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n@@ -308,6 +323,13 @@ extern unsigned aarch64_architecture_version;\n /* Memory Tagging instructions optional to Armv8.5 enabled through +memtag.  */\n #define TARGET_MEMTAG (AARCH64_ISA_V8_5 && AARCH64_ISA_MEMTAG)\n \n+/* I8MM instructions are enabled through +i8mm.  */\n+#define TARGET_I8MM (AARCH64_ISA_I8MM)\n+\n+/* BF16 instructions are enabled through +bf16.  */\n+#define TARGET_BF16_FP (AARCH64_ISA_BF16)\n+#define TARGET_BF16_SIMD (AARCH64_ISA_BF16 && TARGET_SIMD)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "519bd7a297f34ed5afa3c0f9cf30f9c7094e1dcb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -16068,25 +16068,19 @@ Specify the name of the target architecture and, optionally, one or\n more feature modifiers.  This option has the form\n @option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}.\n \n-The permissible values for @var{arch} are @samp{armv8-a},\n-@samp{armv8.1-a}, @samp{armv8.2-a}, @samp{armv8.3-a}, @samp{armv8.4-a},\n-@samp{armv8.5-a} or @var{native}.\n-\n-The value @samp{armv8.5-a} implies @samp{armv8.4-a} and enables compiler\n-support for the ARMv8.5-A architecture extensions.\n-\n-The value @samp{armv8.4-a} implies @samp{armv8.3-a} and enables compiler\n-support for the ARMv8.4-A architecture extensions.\n-\n-The value @samp{armv8.3-a} implies @samp{armv8.2-a} and enables compiler\n-support for the ARMv8.3-A architecture extensions.\n-\n-The value @samp{armv8.2-a} implies @samp{armv8.1-a} and enables compiler\n-support for the ARMv8.2-A architecture extensions.\n-\n-The value @samp{armv8.1-a} implies @samp{armv8-a} and enables compiler\n-support for the ARMv8.1-A architecture extension.  In particular, it\n-enables the @samp{+crc}, @samp{+lse}, and @samp{+rdma} features.\n+The table below summarizes the permissible values for @var{arch}\n+and the features that they enable by default:\n+\n+@multitable @columnfractions 0.20 0.20 0.60\n+@headitem @var{arch} value @tab Architecture @tab Includes by default\n+@item @samp{armv8-a} @tab Armv8-A @tab @samp{+fp}, @samp{+simd}\n+@item @samp{armv8.1-a} @tab Armv8.1-A @tab @samp{armv8-a}, @samp{+crc}, @samp{+lse}, @samp{+rdma}\n+@item @samp{armv8.2-a} @tab Armv8.2-A @tab @samp{armv8.1-a}\n+@item @samp{armv8.3-a} @tab Armv8.3-A @tab @samp{armv8.2-a}\n+@item @samp{armv8.4-a} @tab Armv8.4-A @tab @samp{armv8.3-a}, @samp{+fp16fml}, @samp{+dotprod}\n+@item @samp{armv8.5-a} @tab Armv8.5-A @tab @samp{armv8.4-a}, @samp{+sb}, @samp{+ssbs}, @samp{+predres}\n+@item @samp{armv8.6-a} @tab Armv8.6-A @tab @samp{armv8.5-a}, @samp{+bf16}, @samp{+i8mm}\n+@end multitable\n \n The value @samp{native} is available on native AArch64 GNU/Linux and\n causes the compiler to pick the architecture of the host system.  This\n@@ -16301,6 +16295,7 @@ generation.  This option is enabled by default for @option{-march=armv8.5-a}.\n Enable the Armv8-a Execution and Data Prediction Restriction instructions.\n This option is only to enable the extension at the assembler level and does\n not affect code generation.  This option is enabled by default for\n+@option{-march=armv8.5-a}.\n @item sve2\n Enable the Armv8-a Scalable Vector Extension 2.  This also enables SVE\n instructions.\n@@ -16312,9 +16307,18 @@ Enable SVE2 sm4 instructions.  This also enables SVE2 instructions.\n Enable SVE2 aes instructions.  This also enables SVE2 instructions.\n @item sve2-sha3\n Enable SVE2 sha3 instructions.  This also enables SVE2 instructions.\n-@option{-march=armv8.5-a}.\n @item tme\n Enable the Transactional Memory Extension.\n+@item i8mm\n+Enable 8-bit Integer Matrix Multiply instructions.  This also enables\n+Advanced SIMD and floating-point instructions.  This option is enabled by\n+default for @option{-march=armv8.6-a}.  Use of this option with architectures\n+prior to Armv8.2-A is not supported.\n+@item bf16\n+Enable brain half-precision floating-point instructions.  This also enables\n+Advanced SIMD and floating-point instructions.  This option is enabled by\n+default for @option{-march=armv8.6-a}.  Use of this option with architectures\n+prior to Armv8.2-A is not supported.\n \n @end table\n "}, {"sha": "7ea9f58c920b61fc1ae67d2bccd4ef16536ea7d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -1,3 +1,8 @@\n+2019-12-13  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Add tests for i8mm\n+\tand bf16 features.\n+\n 2019-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92908"}, {"sha": "f61d635bd2abc9fd8ddfb6dc77933de45ca833ee", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_2.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93e1d5c70abe9fba3522318131a352fad0a4f48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c?ref=a93e1d5c70abe9fba3522318131a352fad0a4f48", "patch": "@@ -1,6 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a\")\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8-a+tme\")\n #ifndef __ARM_FEATURE_TME\n@@ -13,6 +16,89 @@\n #error \"__ARM_FEATURE_TME is defined but should not be!\"\n #endif\n \n+/* Test Armv8.6-A features.  */\n+\n+#ifdef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a\")\n+#ifndef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+i8mm\")\n+#ifndef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a+nosimd\")\n+#ifdef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a+nofp\")\n+#ifdef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a\")\n+#ifndef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+bf16\")\n+#ifndef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+bf16+nosimd\")\n+#ifndef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC is defined but should not be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a+nofp\")\n+#ifdef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC\n+#error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC is defined but should not be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC pop_options\n+\n int\n foo (int a)\n {"}]}