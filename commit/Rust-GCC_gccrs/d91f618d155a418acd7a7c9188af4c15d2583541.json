{"sha": "d91f618d155a418acd7a7c9188af4c15d2583541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxZjYxOGQxNTVhNDE4YWNkN2E3YzkxODhhZjRjMTVkMjU4MzU0MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-08-15T16:07:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-15T16:07:27Z"}, "message": "PR libstdc++/91456 make INVOKE<R> work with uncopyable prvalues\n\nIn C++17 a function can return a prvalue of a type that cannot be moved\nor copied. The current implementation of std::is_invocable_r uses\nstd::is_convertible to test the conversion to R required by INVOKE<R>.\nThat fails for non-copyable prvalues, because std::is_convertible is\ndefined in terms of std::declval which uses std::add_rvalue_reference.\nIn C++17 conversion from R to R involves no copies and so is not the\nsame as conversion from R&& to R.\n\nThis commit changes std::is_invocable_r to check the conversion without\nusing std::is_convertible.\n\nstd::function also contains a similar check using std::is_convertible,\nwhich can be fixed by simply reusing std::is_invocable_r (but because\nstd::is_invocable_r is not defined for C++11 it uses the underlying\nstd::__is_invocable_impl trait directly).\n\n\tPR libstdc++/91456\n\t* include/bits/std_function.h (__check_func_return_type): Remove.\n\t(function::_Callable): Use std::__is_invocable_impl instead of\n\t__check_func_return_type.\n\t* include/std/type_traits (__is_invocable_impl): Add another defaulted\n\ttemplate parameter. Define a separate partial specialization for\n\tINVOKE and INVOKE<void>. For INVOKE<R> replace is_convertible check\n\twith a check that models delayed temporary materialization.\n\t* testsuite/20_util/function/91456.cc: New test.\n\t* testsuite/20_util/is_invocable/91456.cc: New test.\n\nFrom-SVN: r274542", "tree": {"sha": "a3ac6876d78bb1d763c7c097b3f26a93f64d7a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ac6876d78bb1d763c7c097b3f26a93f64d7a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91f618d155a418acd7a7c9188af4c15d2583541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91f618d155a418acd7a7c9188af4c15d2583541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91f618d155a418acd7a7c9188af4c15d2583541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91f618d155a418acd7a7c9188af4c15d2583541/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3595983e39ba69fb8393d5bea26289b86a27483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3595983e39ba69fb8393d5bea26289b86a27483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3595983e39ba69fb8393d5bea26289b86a27483"}], "stats": {"total": 135, "additions": 126, "deletions": 9}, "files": [{"sha": "144f8e63fa5ec406faa417293d458dd8e66b67b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d91f618d155a418acd7a7c9188af4c15d2583541", "patch": "@@ -1,3 +1,16 @@\n+2019-08-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91456\n+\t* include/bits/std_function.h (__check_func_return_type): Remove.\n+\t(function::_Callable): Use std::__is_invocable_impl instead of\n+\t__check_func_return_type.\n+\t* include/std/type_traits (__is_invocable_impl): Add another defaulted\n+\ttemplate parameter. Define a separate partial specialization for\n+\tINVOKE and INVOKE<void>. For INVOKE<R> replace is_convertible check\n+\twith a check that models delayed temporary materialization.\n+\t* testsuite/20_util/function/91456.cc: New test.\n+\t* testsuite/20_util/is_invocable/91456.cc: New test.\n+\n 2019-08-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/type_traits (__is_nullptr_t): Add deprecated attribute."}, {"sha": "42f87873d55a166ec5a5990fad530c822e19b937", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=d91f618d155a418acd7a7c9188af4c15d2583541", "patch": "@@ -293,10 +293,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  template<typename _From, typename _To>\n-    using __check_func_return_type\n-      = __or_<is_void<_To>, is_same<_From, _To>, is_convertible<_From, _To>>;\n-\n   /**\n    *  @brief Primary class template for std::function.\n    *  @ingroup functors\n@@ -309,8 +305,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       private _Function_base\n     {\n       template<typename _Func,\n-\t       typename _Res2 = typename result_of<_Func&(_ArgTypes...)>::type>\n-\tstruct _Callable : __check_func_return_type<_Res2, _Res> { };\n+\t       typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>\n+\tstruct _Callable\n+\t: __is_invocable_impl<_Res2, _Res>::type\n+\t{ };\n \n       // Used so the return type convertibility checks aren't done when\n       // performing overload resolution for copy construction/assignment."}, {"sha": "44db2cade5dbbf1b3ce07dc987766d97e1202b58", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=d91f618d155a418acd7a7c9188af4c15d2583541", "patch": "@@ -2883,14 +2883,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // __is_invocable (std::is_invocable for C++11)\n \n-  template<typename _Result, typename _Ret, typename = void>\n+  // The primary template is used for invalid INVOKE expressions.\n+  template<typename _Result, typename _Ret,\n+\t   bool = is_void<_Ret>::value, typename = void>\n     struct __is_invocable_impl : false_type { };\n \n+  // Used for valid INVOKE and INVOKE<void> expressions.\n   template<typename _Result, typename _Ret>\n-    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>\n-    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type\n+    struct __is_invocable_impl<_Result, _Ret,\n+\t\t\t       /* is_void<_Ret> = */ true,\n+\t\t\t       __void_t<typename _Result::type>>\n+    : true_type\n     { };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wctor-dtor-privacy\"\n+  // Used for INVOKE<R> expressions to check the implicit conversion to R.\n+  template<typename _Result, typename _Ret>\n+    struct __is_invocable_impl<_Result, _Ret,\n+\t\t\t       /* is_void<_Ret> = */ false,\n+\t\t\t       __void_t<typename _Result::type>>\n+    {\n+    private:\n+      // The type of the INVOKE expression.\n+      // Unlike declval, this doesn't add_rvalue_reference.\n+      static typename _Result::type _S_get();\n+\n+      template<typename _Tp>\n+\tstatic void _S_conv(_Tp);\n+\n+      // This overload is viable if INVOKE(f, args...) can convert to _Tp.\n+      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>\n+\tstatic true_type\n+\t_S_test(int);\n+\n+      template<typename _Tp>\n+\tstatic false_type\n+\t_S_test(...);\n+\n+    public:\n+      using type = decltype(_S_test<_Ret>(1));\n+    };\n+#pragma GCC diagnostic pop\n+\n   template<typename _Fn, typename... _ArgTypes>\n     struct __is_invocable\n     : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type"}, {"sha": "a2d412d7bec47fe08d84173fb9434fc2ad8c8c52", "filename": "libstdc++-v3/testsuite/20_util/function/91456.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F91456.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F91456.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F91456.cc?ref=d91f618d155a418acd7a7c9188af4c15d2583541", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <functional>\n+\n+struct Immovable {\n+  Immovable() = default;\n+  Immovable(const Immovable&) = delete;\n+  Immovable& operator=(const Immovable&) = delete;\n+};\n+\n+Immovable get() { return {}; }\n+const Immovable i = get();                      // OK\n+std::function<const Immovable()> f{&get};       // fails\n+const Immovable i2 = f();\n+\n+const Immovable cget() { return {}; }\n+Immovable ci = cget();                          // OK\n+std::function<Immovable()> cf{&cget};           // fails\n+Immovable ci2 = cf();"}, {"sha": "d510d221a7d9bce0de56b90e1bfc2db23647ee57", "filename": "libstdc++-v3/testsuite/20_util/is_invocable/91456.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2F91456.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f618d155a418acd7a7c9188af4c15d2583541/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2F91456.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2F91456.cc?ref=d91f618d155a418acd7a7c9188af4c15d2583541", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <type_traits>\n+\n+#include <functional>\n+\n+struct Immovable {\n+  Immovable() = default;\n+  Immovable(const Immovable&) = delete;\n+  Immovable& operator=(const Immovable&) = delete;\n+};\n+\n+Immovable get() { return {}; }\n+const Immovable i = get();                      // OK\n+std::function<const Immovable()> f{&get};       // fails\n+const Immovable i2 = f();"}]}