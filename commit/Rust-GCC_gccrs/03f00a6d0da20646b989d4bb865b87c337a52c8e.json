{"sha": "03f00a6d0da20646b989d4bb865b87c337a52c8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmMDBhNmQwZGEyMDY0NmI5ODlkNGJiODY1Yjg3YzMzN2E1MmM4ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-15T17:13:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-15T17:13:21Z"}, "message": "ipa-inline.c (edge_badness, [...]): Revert accidental commit.\n\n\n\t* ipa-inline.c (edge_badness, inline_small_functions): Revert\n\taccidental commit.\n\nFrom-SVN: r278307", "tree": {"sha": "906f2a4132fd4618fb9d0c3244297a87ec2f8510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906f2a4132fd4618fb9d0c3244297a87ec2f8510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f00a6d0da20646b989d4bb865b87c337a52c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f00a6d0da20646b989d4bb865b87c337a52c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f00a6d0da20646b989d4bb865b87c337a52c8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f00a6d0da20646b989d4bb865b87c337a52c8e/comments", "author": null, "committer": null, "parents": [{"sha": "969089ff80620690645aa2f23dea32212ca038bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969089ff80620690645aa2f23dea32212ca038bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969089ff80620690645aa2f23dea32212ca038bf"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "3eb468cbd353bcbeb819bb2e45a5e7a32b08b368", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f00a6d0da20646b989d4bb865b87c337a52c8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f00a6d0da20646b989d4bb865b87c337a52c8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03f00a6d0da20646b989d4bb865b87c337a52c8e", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline.c (edge_badness, inline_small_functions): Revert\n+\taccidental commit.\n+\n 2019-11-15  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* config/gcn/gcn.h (FIXED_REGISTERS): Unfix frame pointer."}, {"sha": "7fcb20081727b9e7d39738f6f0cc44788e3e9220", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f00a6d0da20646b989d4bb865b87c337a52c8e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f00a6d0da20646b989d4bb865b87c337a52c8e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=03f00a6d0da20646b989d4bb865b87c337a52c8e", "patch": "@@ -1163,7 +1163,6 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \n       overall_growth = callee_info->growth;\n \n-#if 1\n       /* Look for inliner wrappers of the form:\n \n \t inline_caller ()\n@@ -1215,7 +1214,6 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t      overall_growth = caller_growth;\n \t    }\n \t}\n-#endif\n       if (overall_growth > 0)\n         {\n \t  /* Strongly preffer functions with few callers that can be inlined\n@@ -2137,23 +2135,12 @@ inline_small_functions (void)\n \t    fprintf (dump_file, \" Peeling recursion with depth %i\\n\", depth);\n \n \t  gcc_checking_assert (!callee->inlined_to);\n-\n-\t  int old_size = ipa_size_summaries->get (where)->size;\n-\t  sreal old_time = ipa_fn_summaries->get (where)->time;\n-\n \t  inline_call (edge, true, &new_indirect_edges, &overall_size, true);\n \t  add_new_edges_to_heap (&edge_heap, new_indirect_edges);\n \n \t  reset_edge_caches (edge->callee);\n \n-\t  /* If caller's size and time increased we do not need to update\n-\t     all edges becuase badness is not going to decrease.  */\n-\t  if (old_size <= ipa_size_summaries->get (where)->size\n-\t      && old_time <= ipa_fn_summaries->get (where)->time\n-\t      && 0)\n-\t    update_callee_keys (&edge_heap, edge->callee, updated_nodes);\n-\t  else\n-\t    update_callee_keys (&edge_heap, where, updated_nodes);\n+\t  update_callee_keys (&edge_heap, where, updated_nodes);\n \t}\n       where = edge->caller;\n       if (where->inlined_to)"}]}