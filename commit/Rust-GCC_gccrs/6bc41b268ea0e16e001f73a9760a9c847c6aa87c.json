{"sha": "6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjNDFiMjY4ZWEwZTE2ZTAwMWY3M2E5NzYwYTljODQ3YzZhYTg3Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-08-26T21:27:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-08-26T21:27:00Z"}, "message": "Only set std::enable_shared_from_this member once.\n\n\t* include/bits/shared_ptr.h (__enable_shared_from_this_helper): Use\n\tnullptr.\n\t* include/bits/shared_ptr_base.h (weak_ptr::_M_assign): Don't assign\n\tif ownership is already shared with a shared_ptr object.\n\t(__enable_shared_from_this_helper): Use nullptr.\n\t* testsuite/20_util/enable_shared_from_this/members/const.cc: New.\n\t* testsuite/20_util/enable_shared_from_this/members/reinit.cc: New.\n\t* testsuite/20_util/enable_shared_from_this/requirements/\n\texplicit_instantiation.cc: Instantiate with const and incomplete types.\n\nFrom-SVN: r227232", "tree": {"sha": "e4feb4c92083ee17de6031c8d6d5b2b72e0a6265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4feb4c92083ee17de6031c8d6d5b2b72e0a6265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1a0c68abef1179cc7b471ec566c0b41025ab57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1a0c68abef1179cc7b471ec566c0b41025ab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1a0c68abef1179cc7b471ec566c0b41025ab57"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "0e99af68374c5034c639aa36ac9e839d57bd8a79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -1,5 +1,15 @@\n 2015-08-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/shared_ptr.h (__enable_shared_from_this_helper): Use\n+\tnullptr.\n+\t* include/bits/shared_ptr_base.h (weak_ptr::_M_assign): Don't assign\n+\tif ownership is already shared with a shared_ptr object.\n+\t(__enable_shared_from_this_helper): Use nullptr.\n+\t* testsuite/20_util/enable_shared_from_this/members/const.cc: New.\n+\t* testsuite/20_util/enable_shared_from_this/members/reinit.cc: New.\n+\t* testsuite/20_util/enable_shared_from_this/requirements/\n+\texplicit_instantiation.cc: Instantiate with const and incomplete types.\n+\n \t* include/debug/map.h (map::try_emplace, map::insert_or_assign):\n \tDefine.\n \t* include/debug/unordered_map (unordered_map::try_emplace,"}, {"sha": "2413b1b8e101ee2e46b66113644f245fcf129767", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -588,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t const enable_shared_from_this* __pe,\n \t\t\t\t\t const _Tp1* __px) noexcept\n \t{\n-\t  if (__pe != 0)\n+\t  if (__pe != nullptr)\n \t    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);\n \t}\n "}, {"sha": "820edcb5d4b09a00cd9a685a9b4f63ac7eee8445", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -1468,8 +1468,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept\n       {\n-\t_M_ptr = __ptr;\n-\t_M_refcount = __refcount;\n+\tif (use_count() == 0)\n+\t  {\n+\t    _M_ptr = __ptr;\n+\t    _M_refcount = __refcount;\n+\t  }\n       }\n \n       template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;\n@@ -1549,7 +1552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t const __enable_shared_from_this* __pe,\n \t\t\t\t\t const _Tp1* __px) noexcept\n \t{\n-\t  if (__pe != 0)\n+\t  if (__pe != nullptr)\n \t    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);\n \t}\n "}, {"sha": "fdf39c7916eed73c6608a417ce90b1c058c3679c", "filename": "libstdc++-v3/testsuite/20_util/enable_shared_from_this/members/const.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Fconst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Fconst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Fconst.cc?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+template<typename T, typename U>\n+  bool\n+  share_ownership(const std::shared_ptr<T>& p1, const std::shared_ptr<U>& p2)\n+  {\n+    return !p1.owner_before(p2) && !p2.owner_before(p1);\n+  }\n+\n+void\n+test01()\n+{\n+  struct X : public std::enable_shared_from_this<X> { };\n+  using CX = const X;\n+  std::shared_ptr<CX> p(new X);\n+  VERIFY( share_ownership(p->shared_from_this(), p) );\n+  p.reset(new CX);\n+  VERIFY( share_ownership(p->shared_from_this(), p) );\n+  auto p2 = std::const_pointer_cast<X>(p)->shared_from_this();\n+  VERIFY( share_ownership(p2, p) );\n+}\n+\n+void\n+test02()\n+{\n+  struct X;\n+  using CX = const X;\n+  struct X : public std::enable_shared_from_this<CX> { };\n+  std::shared_ptr<CX> p(new X);\n+  VERIFY( share_ownership(p->shared_from_this(), p) );\n+  p.reset(new CX);\n+  VERIFY( share_ownership(p->shared_from_this(), p) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "3740db8ac36644b40f410c3d85bf18bea8799511", "filename": "libstdc++-v3/testsuite/20_util/enable_shared_from_this/members/reinit.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Freinit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Freinit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fmembers%2Freinit.cc?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct X : public std::enable_shared_from_this<X> { };\n+\n+bool\n+share_ownership(const std::shared_ptr<X>& p1, const std::shared_ptr<X>& p2)\n+{\n+  return !p1.owner_before(p2) && !p2.owner_before(p1);\n+}\n+\n+void\n+test01()\n+{\n+  std::shared_ptr<X> p1(new X);\n+  VERIFY( share_ownership( p1->shared_from_this(), p1 ) );\n+  {\n+    std::shared_ptr<X> p2(p1.get(), [](X*){});\n+    // The weak_ptr member of the enable_shared_from_this base should not\n+    // be reset by creating a second control block that owns the pointer.\n+    VERIFY( share_ownership( p2->shared_from_this(), p1 ) );\n+  }\n+  VERIFY( share_ownership( p1->shared_from_this(), p1 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "94638e192426eee5b87eb6fb661aab52063008f0", "filename": "libstdc++-v3/testsuite/20_util/enable_shared_from_this/requirements/explicit_instantiation.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc41b268ea0e16e001f73a9760a9c847c6aa87c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc?ref=6bc41b268ea0e16e001f73a9760a9c847c6aa87c", "patch": "@@ -21,3 +21,8 @@\n #include <memory>\n \n template class std::enable_shared_from_this<int>;\n+template class std::enable_shared_from_this<const int>;\n+\n+class Incomplete;\n+template class std::enable_shared_from_this<Incomplete>;\n+template class std::enable_shared_from_this<const Incomplete>;"}]}