{"sha": "fc9962ee12357d77d9fd46c1795c679ea556f7ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5OTYyZWUxMjM1N2Q3N2Q5ZmQ0NmMxNzk1YzY3OWVhNTU2ZjdhZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-11-17T10:29:07Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-17T10:29:07Z"}, "message": "re PR tree-optimization/29801 (ICE in set_lattice_value (tree-ssa-ccp.c))\n\n\tPR tree-optimization/29801\n\t* tree-ssa-ccp.c (get_symbol_constant_value): New function.\n\t(get_default_value): Use get_symbol_constant_value.\n\t(set_lattice_value): ICE when the value of the constant is\n\tchanged.\n\t(visit_assignment): Ignore VDEFs of read-only variables.\n\n\t* gcc.dg/pr29801.c: New test.\n\nFrom-SVN: r118926", "tree": {"sha": "3a3aed520ce408a4c3f4b5f10dd39368a9b74f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a3aed520ce408a4c3f4b5f10dd39368a9b74f2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9962ee12357d77d9fd46c1795c679ea556f7ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9962ee12357d77d9fd46c1795c679ea556f7ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9962ee12357d77d9fd46c1795c679ea556f7ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9962ee12357d77d9fd46c1795c679ea556f7ae/comments", "author": null, "committer": null, "parents": [{"sha": "80b4a8d94f7664f35f17d4a6281872f7a10565b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b4a8d94f7664f35f17d4a6281872f7a10565b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b4a8d94f7664f35f17d4a6281872f7a10565b7"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "ab9b5526eec0d6b4241dcc2f04cc556b7a7cd536", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc9962ee12357d77d9fd46c1795c679ea556f7ae", "patch": "@@ -1,3 +1,12 @@\n+2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29801\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): New function.\n+\t(get_default_value): Use get_symbol_constant_value.\n+\t(set_lattice_value): ICE when the value of the constant is\n+\tchanged.\n+\t(visit_assignment): Ignore VDEFs of read-only variables.\n+\n 2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-vect-transform.c (vect_create_epilog_for_reduction): Fix"}, {"sha": "84bce0c911e3f76627aa98e81c85c1adf6cf4ca7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc9962ee12357d77d9fd46c1795c679ea556f7ae", "patch": "@@ -1,3 +1,8 @@\n+2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29801\n+\t* gcc.dg/pr29801.c: New test.\n+\n 2006-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/29584"}, {"sha": "b61ae51425dca95e4f3242df9f9cd7031b17e46f", "filename": "gcc/testsuite/gcc.dg/pr29801.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29801.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29801.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29801.c?ref=fc9962ee12357d77d9fd46c1795c679ea556f7ae", "patch": "@@ -0,0 +1,24 @@\n+/* We used to crash in ccp here, because the initial constant value of 2\n+   was changed to 5.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static const int a = 2;\n+\n+int test (int param)\n+{\n+  int *p = (int *) &a;\n+\n+  if (param)\n+    *p = 5;\n+\n+  return a;\n+}\n+\n+/* Check that we return the correct (unchanged) value.  */\n+\n+/* { dg-final { scan-tree-dump-times \"return 2\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 5\" 0 \"optimized\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2acd62e36915848843dcbdc33d3d2f0f8fa45999", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9962ee12357d77d9fd46c1795c679ea556f7ae/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fc9962ee12357d77d9fd46c1795c679ea556f7ae", "patch": "@@ -293,6 +293,24 @@ ccp_decl_initial_min_invariant (tree t)\n   return true;\n }\n \n+/* If SYM is a constant variable with known value, return the value.\n+   NULL_TREE is returned otherwise.  */\n+\n+static tree\n+get_symbol_constant_value (tree sym)\n+{\n+  if (TREE_STATIC (sym)\n+      && TREE_READONLY (sym)\n+      && !MTAG_P (sym))\n+    {\n+      tree val = DECL_INITIAL (sym);\n+      if (val\n+\t  && ccp_decl_initial_min_invariant (val))\n+\treturn val;\n+    }\n+\n+  return NULL_TREE;\n+}\n \n /* Compute a default value for variable VAR and store it in the\n    CONST_VAL array.  The following rules are used to get default\n@@ -320,6 +338,7 @@ get_default_value (tree var)\n {\n   tree sym = SSA_NAME_VAR (var);\n   prop_value_t val = { UNINITIALIZED, NULL_TREE, NULL_TREE };\n+  tree cst_val;\n   \n   if (!do_store_ccp && !is_gimple_reg (var))\n     {\n@@ -333,16 +352,12 @@ get_default_value (tree var)\n       val.lattice_val = CONSTANT;\n       val.value = SSA_NAME_VALUE (var);\n     }\n-  else if (TREE_STATIC (sym)\n-\t   && TREE_READONLY (sym)\n-\t   && !MTAG_P (sym)\n-\t   && DECL_INITIAL (sym)\n-\t   && ccp_decl_initial_min_invariant (DECL_INITIAL (sym)))\n+  else if ((cst_val = get_symbol_constant_value (sym)) != NULL_TREE)\n     {\n       /* Globals and static variables declared 'const' take their\n \t initial value.  */\n       val.lattice_val = CONSTANT;\n-      val.value = DECL_INITIAL (sym);\n+      val.value = cst_val;\n       val.mem_ref = sym;\n     }\n   else\n@@ -415,9 +430,10 @@ set_lattice_value (tree var, prop_value_t new_val)\n      value.  If *OLD_VAL and NEW_VAL are the same, return false to\n      inform the caller that this was a non-transition.  */\n \n-  gcc_assert (old_val->lattice_val <= new_val.lattice_val\n+  gcc_assert (old_val->lattice_val < new_val.lattice_val\n               || (old_val->lattice_val == new_val.lattice_val\n-\t\t  && old_val->value == new_val.value\n+\t\t  && ((!old_val->value && !new_val.value)\n+\t\t      || operand_equal_p (old_val->value, new_val.value, 0))\n \t\t  && old_val->mem_ref == new_val.mem_ref));\n \n   if (old_val->lattice_val != new_val.lattice_val)\n@@ -1222,7 +1238,15 @@ visit_assignment (tree stmt, tree *output_p)\n       /* Set the value of every VDEF to VAL.  */\n       changed = false;\n       FOR_EACH_SSA_TREE_OPERAND (vdef, stmt, i, SSA_OP_VIRTUAL_DEFS)\n-\tchanged |= set_lattice_value (vdef, val);\n+\t{\n+\t  /* See PR 29801.  We may have VDEFs for read-only variables\n+\t     (see the handling of unmodifiable variables in\n+\t     add_virtual_operand); do not attempt to change their value.  */\n+\t  if (get_symbol_constant_value (SSA_NAME_VAR (vdef)) != NULL_TREE)\n+\t    continue;\n+\n+\t  changed |= set_lattice_value (vdef, val);\n+\t}\n       \n       /* Note that for propagation purposes, we are only interested in\n \t visiting statements that load the exact same memory reference"}]}