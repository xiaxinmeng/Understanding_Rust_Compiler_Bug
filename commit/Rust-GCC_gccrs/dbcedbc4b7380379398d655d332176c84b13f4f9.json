{"sha": "dbcedbc4b7380379398d655d332176c84b13f4f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjZWRiYzRiNzM4MDM3OTM5OGQ2NTVkMzMyMTc2Yzg0YjEzZjRmOQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-24T22:26:05Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-24T22:26:05Z"}, "message": "t-m68hc11-gas (LIB1ASMFUNCS): Add _call_far and _return_far\n\n\t* config/m68hc11/t-m68hc11-gas (LIB1ASMFUNCS): Add _call_far and\n\t_return_far\n\t(MULTILIB_OPTIONS): Don't multilib on -mlong-calls.\n\t(MULTILIB_EXCEPTIONS): Likewise.\n\t* config/m68hc11/m68hc11.md (\"call\"): Support far calls for 68HC11\n\tby calling some board support routine.\n\t(\"call_value\"): Likewise.\n\t(\"*return_void\"): Likewise for return.\n\t(\"*return_16bit\"): Likewise.\n\t(\"*return_32bit\"): Likewise.\n\t* config/m68hc11/m68hc11.h (ASM_DECLARE_FUNCTION_NAME): Generate .far\n\tfor 68HC11 too.\n\t(DWARF2_ADDR_SIZE): Use 4 so that addresses can\n\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Accept\n\t-mlong-calls for 68HC11.\n\t* config/m68hc11/larith.asm (declare_near): New macro.\n\t(__premain, ___negsi2, ___one_cmplsi2, ___ashlsi3): Use it.\n\t(___ashrsi3, ___lshrsi3, ___lshrhi3, ___lshlhi3): Likewise.\n\t(___rotrhi3, ___rotlhi3, ___ashrhi3, ___ashrqi3): Likewise.\n\t(___lshlqi3, __divmodhi4, ___mulqi3, ___mulhi3): Likewise.\n\t(__mulhi32): Likewise.\n\t(ret): Update macro for 68HC11.\n\t(__far_trampoline): Implement for 68HC11.\n\t(__call_a16, __call_a32, __return_void, __return_16): New support\n\troutines for 68HC11 memory bank switching calling support.\n\t(__return_32): Likewise.\n\nFrom-SVN: r64825", "tree": {"sha": "0fb3f4bd3ccb2feadfa864ab69fa1909f3ae2c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb3f4bd3ccb2feadfa864ab69fa1909f3ae2c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbcedbc4b7380379398d655d332176c84b13f4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcedbc4b7380379398d655d332176c84b13f4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcedbc4b7380379398d655d332176c84b13f4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcedbc4b7380379398d655d332176c84b13f4f9/comments", "author": null, "committer": null, "parents": [{"sha": "eea5120f8227183584f4041629cd7a69055ba467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea5120f8227183584f4041629cd7a69055ba467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea5120f8227183584f4041629cd7a69055ba467"}], "stats": {"total": 329, "additions": 245, "deletions": 84}, "files": [{"sha": "2dca24bca0d95ca12a0e185061d8f55f7663c241", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -1,3 +1,32 @@\n+2003-03-24  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/t-m68hc11-gas (LIB1ASMFUNCS): Add _call_far and\n+\t_return_far\n+\t(MULTILIB_OPTIONS): Don't multilib on -mlong-calls.\n+\t(MULTILIB_EXCEPTIONS): Likewise.\n+\t* config/m68hc11/m68hc11.md (\"call\"): Support far calls for 68HC11\n+\tby calling some board support routine.\n+\t(\"call_value\"): Likewise.\n+\t(\"*return_void\"): Likewise for return.\n+\t(\"*return_16bit\"): Likewise.\n+\t(\"*return_32bit\"): Likewise.\n+\t* config/m68hc11/m68hc11.h (ASM_DECLARE_FUNCTION_NAME): Generate .far\n+\tfor 68HC11 too.\n+\t(DWARF2_ADDR_SIZE): Use 4 so that addresses can \n+\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Accept\n+\t-mlong-calls for 68HC11.\n+\t* config/m68hc11/larith.asm (declare_near): New macro.\n+\t(__premain, ___negsi2, ___one_cmplsi2, ___ashlsi3): Use it.\n+\t(___ashrsi3, ___lshrsi3, ___lshrhi3, ___lshlhi3): Likewise.\n+\t(___rotrhi3, ___rotlhi3, ___ashrhi3, ___ashrqi3): Likewise.\n+\t(___lshlqi3, __divmodhi4, ___mulqi3, ___mulhi3): Likewise.\n+\t(__mulhi32): Likewise.\n+\t(ret): Update macro for 68HC11.\n+\t(__far_trampoline): Implement for 68HC11.\n+\t(__call_a16, __call_a32, __return_void, __return_16): New support\n+\troutines for 68HC11 memory bank switching calling support.\n+\t(__return_32): Likewise.\n+\n 2003-03-24  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* toplev.c (independent_decode_option): Don't skip a 'Y' prefix."}, {"sha": "4d99fac2d259af8409cdd41bbdd72ab78976a75e", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 152, "deletions": 71, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -41,11 +41,22 @@ Boston, MA 02111-1307, USA.  */\n \t.mode mlong\n #endif\n \n-#if defined(__USE_RTC__) && defined(mc68hc12)\n+\t.macro declare_near name\n+\t.globl \\name\n+\t.type  \\name,@function\n+\t.size  \\name,.Lend-\\name\n+\\name:\n+\t.endm\n+\n+#if defined(__USE_RTC__)\n # define ARG(N) N+1\n \n \t.macro ret\n+#if defined(mc68hc12)\n \trtc\n+#else\n+\tjmp __return_32\n+#endif\n \t.endm\n \n \t.macro declare name\n@@ -181,10 +192,10 @@ REG(_.d32)\n ;; Specific initialization for 68hc11 before the main.\n ;; Nothing special for a generic routine; Just enable interrupts.\n ;;\n-\tdeclare\t__premain\n+\tdeclare_near\t__premain\n \tclra\n \ttap\t; Clear both I and X.\n-\tret\n+\trts\n #endif\n \n #ifdef L__exit\n@@ -299,7 +310,7 @@ L1:\n \tpuly\t\t\t; Restore Y to return the DST\n End:\n \txgdy\n-\trts\n+\tret\n #endif\n #endif\n \n@@ -349,7 +360,7 @@ L0:\n \tpulx\t\t\t; Restore X to return the DST\n End:\n \txgdx\n-\trts\n+\tret\n #endif\n #endif\n \n@@ -438,10 +449,8 @@ End:\n #endif\n \t\n #ifdef L_negsi2\n-\t.sect .text\n-\t.globl ___negsi2\n+\tdeclare_near ___negsi2\n \n-___negsi2:\n \tcomb\n \tcoma\n \txgdx\n@@ -456,10 +465,8 @@ done:\n #endif\n \n #ifdef L_one_cmplsi2\n-\t.sect .text\n-\t.globl ___one_cmplsi2\n+\tdeclare_near ___one_cmplsi2\n \n-___one_cmplsi2:\n \tcomb\n \tcoma\n \txgdx\n@@ -470,10 +477,8 @@ ___one_cmplsi2:\n #endif\n \t\n #ifdef L_ashlsi3\n-\t.sect .text\n-\t.globl ___ashlsi3\n+\tdeclare_near ___ashlsi3\n \n-___ashlsi3:\n \txgdy\n \tclra\n \tandb\t#0x1f\n@@ -492,10 +497,8 @@ Return:\n #endif\n \n #ifdef L_ashrsi3\n-\t.sect .text\n-\t.globl ___ashrsi3\n+\tdeclare_near ___ashrsi3\n \n-___ashrsi3:\n \txgdy\n \tclra\n \tandb\t#0x1f\n@@ -515,10 +518,8 @@ Return:\n #endif\n \n #ifdef L_lshrsi3\n-\t.sect .text\n-\t.globl ___lshrsi3\n+\tdeclare_near ___lshrsi3\n \n-___lshrsi3:\n \txgdy\n \tclra\n \tandb\t#0x1f\n@@ -537,10 +538,8 @@ Return:\n #endif\n \n #ifdef L_lshrhi3\n-\t.sect .text\n-\t.globl ___lshrhi3\n+\tdeclare_near ___lshrhi3\n \n-___lshrhi3:\n \tcpx\t#16\n \tbge\tReturn_zero\n \tcpx\t#0\n@@ -558,10 +557,8 @@ Return_zero:\n #endif\n \t\n #ifdef L_lshlhi3\n-\t.sect .text\n-\t.globl ___lshlhi3\n+\tdeclare_near ___lshlhi3\n \n-___lshlhi3:\n \tcpx\t#16\n \tbge\tReturn_zero\n \tcpx\t#0\n@@ -579,8 +576,7 @@ Return_zero:\n #endif\n \n #ifdef L_rotrhi3\n-\t.sect .text\n-\t.globl ___rotrhi3\n+\tdeclare_near ___rotrhi3\n \n ___rotrhi3:\n \txgdx\n@@ -599,8 +595,7 @@ Return:\n #endif\n \n #ifdef L_rotlhi3\n-\t.sect .text\n-\t.globl ___rotlhi3\n+\tdeclare_near ___rotlhi3\n \n ___rotlhi3:\n \txgdx\n@@ -620,10 +615,8 @@ Return:\n #endif\n \n #ifdef L_ashrhi3\n-\t.sect .text\n-\t.globl ___ashrhi3\n+\tdeclare_near ___ashrhi3\n \n-___ashrhi3:\n \tcpx\t#16\n \tbge\tReturn_minus_1_or_zero\n \tcpx\t#0\n@@ -646,10 +639,8 @@ Return_zero:\n #endif\n \t\n #ifdef L_ashrqi3\n-\t.sect .text\n-\t.globl ___ashrqi3\n+\tdeclare_near ___ashrqi3\n \n-___ashrqi3:\n \tcmpa\t#8\n \tbge\tReturn_minus_1_or_zero\n \ttsta\n@@ -671,10 +662,8 @@ Return_zero:\n #endif\n \n #ifdef L_lshlqi3\n-\t.sect .text\n-\t.globl ___lshlqi3\n+\tdeclare_near ___lshlqi3\n \n-___lshlqi3:\n \tcmpa\t#8\n \tbge\tReturn_zero\n \ttsta\n@@ -694,8 +683,7 @@ Return_zero:\n #ifndef mc68hc12\n /* 68HC12 signed divisions are generated inline (idivs).  */\n \n-\t.sect .text\n-\t.globl __divmodhi4\n+\tdeclare_near __divmodhi4\n \n ;\n ;; D = numerator\n@@ -704,7 +692,6 @@ Return_zero:\n ;; Result:\tD = D / X\n ;;\t\tX = D % X\n ;; \n-__divmodhi4:\n \ttsta\n \tbpl\tNumerator_pos\n \tcomb\t\t\t; D = -D <=> D = (~D) + 1\n@@ -762,8 +749,7 @@ Numerator_neg_denominator_pos:\n #endif\n \n #ifdef L_mulqi3\n-       .sect .text\n-       .globl __mulqi3\n+\tdeclare_near ___mulqi3\n \n ;\n ; short __mulqi3(signed char a, signed char b);\n@@ -773,7 +759,6 @@ Numerator_neg_denominator_pos:\n ;\n ; returns the signed result of A * B in register D.\n ;\n-__mulqi3:\n \ttsta\n \tbmi\tA_neg\n \ttstb\n@@ -800,8 +785,7 @@ AB_neg:\n #endif\n \t\n #ifdef L_mulhi3\n-\t.sect .text\n-\t.globl ___mulhi3\n+\tdeclare_near ___mulhi3\n \n ;\n ;\n@@ -810,7 +794,6 @@ AB_neg:\n ;\ta = register D\n ;\tb = register X\n ;\n-___mulhi3:\n #ifdef mc68hc12\n \tpshx\t\t\t; Preserve X\n \texg\tx,y\n@@ -846,24 +829,6 @@ ___mulhi3:\n \t\t\t\t; ---\n \t\t\t\t; 91 cycles\n #else\n-\tstx\t_.tmp\t\t; (4/5)\n-\tpshb\t\t\t; (3)\n-\tldab\t_.tmp+1\t\t; (3/4)\n-\tmul\t\t\t; (10) B.high * A.low\n-\txgdx\t\t\t; (3)\n-\tpulb\t\t\t; (4)\n-\tstab\t_.tmp\t\t; (3/4)\n-\tmul\t\t\t; (10) B.low * A.high\n-\tabx\t\t\t; (3)\n-\tldd\t_.tmp\t\t; (4/5)\n-\tmul\t\t\t; (10) B.low * A.low\n-\tstx\t_.tmp\t\t; (4) \n-\tadda\t_.tmp+1\t\t; (4/5)\n-\trts\t\t\t; (5) 20/26 bytes\n-\t\t\t\t; ---\n-\t\t\t\t; 70/76 cycles\n-\n-#ifdef OLD_MUL\n \tstx\t*_.tmp\t\t; (4)\n \tpshb\t\t\t; (3)\n \tldab\t*_.tmp+1\t; (3)\n@@ -884,7 +849,6 @@ ___mulhi3:\n #endif\n #endif\n #endif\n-#endif\n \n #ifdef L_mulhi32\n \n@@ -920,13 +884,13 @@ ___mulhi3:\n ;      <A-low>    1,x\n ;      <A-high>   0,x\n ;\n-\tdeclare\t__mulhi32\n+\tdeclare_near\t__mulhi32\n \n #ifdef mc68hc12\n-\tldy\tARG(2),sp\n+\tldy\t2,sp\n \temul\n \texg\tx,y\n-\tret\n+\trts\n #else\n \tpshx\t\t\t; Room for temp value\n \tpshb\n@@ -1228,7 +1192,7 @@ dtors_done:\n \n #ifdef L_far_tramp\n #ifdef mc68hc12\n-\t.sect\t.text\n+\t.sect\t.tramp,\"ax\",@progbits\n \t.globl\t__far_trampoline\n \n ;; This is a trampoline used by the linker to invoke a function\n@@ -1257,6 +1221,123 @@ __far_trampoline:\n \t\t\t\t; (whose memory bank is mapped due to the\n \t\t\t\t; call to the trampoline).\n #endif\n+\n+#ifdef mc68hc11\n+\t.sect\t.tramp,\"ax\",@progbits\n+\t.globl __far_trampoline\n+\n+;; Trampoline generated by gcc for 68HC11:\n+;;\n+;;\tpshb\n+;;\tldab\t#%page(func)\n+;;\tldy\t#%addr(func)\n+;;\tjmp\t__far_trampoline\n+;;\n+__far_trampoline:\n+\tpsha\t\t\t\t; (2) Save function parameter (high)\n+\t;; <Read current page in A>\n+\tpsha\t\t\t\t; (2)\n+\t;; <Set currenge page from B>\n+\tpshx\t\t\t\t; (4)\n+\ttsx\t\t\t\t; (3)\n+\tldab\t4,x\t\t\t; (4) Restore function parameter (low)\n+\tldaa\t2,x\t\t\t; (4) Get saved page number\n+\tstaa\t4,x\t\t\t; (4) Save it below return PC\n+\tpulx\t\t\t\t; (5)\n+\tpula\t\t\t\t; (3)\n+\tpula\t\t\t\t; (3) Restore function parameter (high)\n+\tjmp\t0,y\t\t\t; (4)\n+#endif\n+#endif\n+\n+#ifdef L_call_far\n+#ifdef mc68hc11\n+\t.sect\t.tramp,\"ax\",@progbits\n+\t.globl __call_a16\n+\t.globl __call_a32\n+;;\n+;; The call methods are used for 68HC11 to support memory bank switching.\n+;; Every far call is redirected to these call methods.  Its purpose is to:\n+;;\n+;;  1/ Save the current page on the stack (1 byte to follow 68HC12 call frame)\n+;;  2/ Install the new page\n+;;  3/ Jump to the real function\n+;;\n+;; The page switching (get/save) is board dependent.  The default provided\n+;; here does nothing (just create the appropriate call frame).\n+;;\n+;; Call sequence (10 bytes, 13 cycles):\n+;;\n+;;\tldx #page\t\t\t; (3)\n+;;\tldy #func\t\t\t; (4)\n+;;\tjsr __call_a16\t\t\t; (6)\n+;;\n+;; Call trampoline (11 bytes, 19 cycles):\n+;;\n+__call_a16:\n+\t;; xgdx\t\t\t\t; (3)\n+\t;; <Read current page in A>\t; (3) ldaa _current_page\n+\tpsha\t\t\t\t; (2)\n+\t;; <Set current page from B>\t; (4) staa _current_page\n+\t;; xgdx\t\t\t\t; (3)\n+\tjmp 0,y\t\t\t\t; (4)\n+\n+;;\n+;; Call sequence (10 bytes, 14 cycles):\n+;;\n+;;\tpshb\t\t\t\t; (2)\n+;;\tldab #page\t\t\t; (2)\n+;;\tldy  #func\t\t\t; (4)\n+;;\tjsr __call_a32\t\t\t; (6)\n+;;\n+;; Call trampoline (87 bytes, 57 cycles):\n+;;\n+__call_a32:\n+\tpshx\t\t\t\t; (4)\n+\tpsha\t\t\t\t; (2)\n+\t;; <Read current page in A>\t; (3) ldaa _current_page\n+\tpsha\t\t\t\t; (2)\n+\t;; <Set current page from B>\t; (4) staa _current_page\n+\ttsx\t\t\t\t; (3)\n+\tldab\t6,x\t\t\t; (4) Restore function parameter\n+\tldaa\t5,x\t\t\t; (4) Move PC return at good place\n+\tstaa\t6,x\t\t\t; (4)\n+\tldaa\t4,x\t\t\t; (4)\n+\tstaa\t5,x\t\t\t; (4)\n+\tpula\t\t\t\t; (3)\n+\tstaa\t4,x\t\t\t; (4)\n+\tpula\t\t\t\t; (3)\n+\tpulx\t\t\t\t; (5)\n+\tjmp\t0,y\t\t\t; (4)\n+#endif\n+#endif\n+\n+#ifdef L_return_far\n+#ifdef mc68hc11\n+\t.sect\t.tramp,\"ax\",@progbits\n+       .globl __return_void\n+       .globl __return_16\n+       .globl __return_32\n+\n+__return_void:\n+\t;; pulb\n+\t;; <Set current page from B> (Board specific)\n+\t;; rts\n+__return_16:\n+\t;; xgdx\n+\t;; pulb\n+\t;; <Set current page from B> (Board specific)\n+\t;; xgdx\n+\t;; rts\n+__return_32:\n+\t;; xgdy\n+\t;; pulb\n+\t;; <Set current page from B> (Board specific)\n+\t;; xgdy\n+\t;; rts\n+\tins\n+\trts\n+#endif\n #endif\n .Lend:\n ;-----------------------------------------"}, {"sha": "97d43d304b677ac80bf9f0448b61fa42ec45b2bc", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -276,7 +276,6 @@ m68hc11_override_options ()\n       m68hc11_tmp_regs_class = D_REGS;\n       if (m68hc11_soft_reg_count == 0 && !TARGET_M6812)\n \tm68hc11_soft_reg_count = \"4\";\n-      target_flags &= ~MASK_LONG_CALLS;\n     }\n \n   /* Configure for a 68hc12 processor.  */"}, {"sha": "9f36afe5f0e87b5272b3ebc7b4272edc878d67b1", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -1549,7 +1549,7 @@ do {                                                                    \\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n       putc ('\\n', FILE);\t\t\t\t\\\n       \t\t\t\t\t\t\t\\\n-      if (TARGET_M6812 && current_function_far)\t\t\\\n+      if (current_function_far)                         \\\n         {\t\t\t\t\t\t\\\n           fprintf (FILE, \"\\t.far\\t\");\t\t\t\\\n \t  assemble_name (FILE, NAME);\t\t\t\\\n@@ -1629,6 +1629,10 @@ do {                                                                    \\\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n+/* For the support of memory banks we need addresses that indicate\n+   the page number.  */\n+#define DWARF2_ADDR_SIZE 4\n+\n /* The prefix for local labels.  You should be able to define this as\n    an empty string, or any arbitrary string (such as \".\", \".L%\", etc)\n    without having to make any other changes to account for the specific"}, {"sha": "5acbc2ea030bbd1c61218912243605ee96caf6e0", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description file for Motorola 68HC11 and 68HC12.\n-;;- Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+;;- Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n ;;- Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n ;; This file is part of GNU CC.\n@@ -6394,8 +6394,18 @@\n     {\n       if (m68hc11_is_far_symbol (operands[0]))\n         {\n-\t  output_asm_insn (\\\"call\\\\t%0\\\", operands);\n-\t  return \\\"\\\";\n+          if (TARGET_M6812)\n+            {\n+\t      output_asm_insn (\\\"call\\\\t%0\\\", operands);\n+\t      return \\\"\\\";\n+\t    }\n+          else\n+\t    {\n+\t      output_asm_insn (\\\"pshb\\\", operands);\n+\t      output_asm_insn (\\\"ldab\\\\t#%%page(%0)\\\", operands);\n+\t      output_asm_insn (\\\"ldy\\\\t#%%addr(%0)\\\", operands);\n+\t      return \\\"jsr\\\\t__call_a32\\\";\n+\t    }\n \t}\n       if (m68hc11_is_trap_symbol (operands[0]))\n         return \\\"swi\\\";\n@@ -6419,8 +6429,18 @@\n     {\n       if (m68hc11_is_far_symbol (operands[1]))\n         {\n-\t  output_asm_insn (\\\"call\\\\t%1\\\", operands);\n-\t  return \\\"\\\";\n+          if (TARGET_M6812)\n+            {\n+\t      output_asm_insn (\\\"call\\\\t%1\\\", operands);\n+\t      return \\\"\\\";\n+\t    }\n+          else\n+\t    {\n+\t      output_asm_insn (\\\"pshb\\\", operands);\n+\t      output_asm_insn (\\\"ldab\\\\t#%%page(%1)\\\", operands);\n+\t      output_asm_insn (\\\"ldy\\\\t#%%addr(%1)\\\", operands);\n+\t      return \\\"jsr\\\\t__call_a32\\\";\n+\t    }\n \t}\n       if (m68hc11_is_trap_symbol (operands[1]))\n         return \\\"swi\\\";\n@@ -6539,7 +6559,25 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n+  else if (!current_function_far)\n+    return \\\"rts\\\";\n+  else if (TARGET_M6812)\n+    return \\\"rtc\\\";\n+  else\n+    {\n+      int ret_size = 0;\n+\n+      if (current_function_return_rtx)\n+        ret_size = GET_MODE_SIZE (GET_MODE (current_function_return_rtx));\n+\n+      if (ret_size == 0)\n+        return \\\"jmp\\\\t__return_void\\\";\n+      if (ret_size <= 2)\n+        return \\\"jmp\\\\t__return_16\\\";\n+      if (ret_size <= 4)\n+        return \\\"jmp\\\\t__return_32\\\";\n+      return \\\"jmp\\\\t__return_16\\\";\n+    }\n }\")\n \n (define_insn \"*return_16bit\"\n@@ -6556,7 +6594,12 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n+  else if (!current_function_far)\n+    return \\\"rts\\\";\n+  else if (TARGET_M6812)\n+    return \\\"rtc\\\";\n+  else\n+    return \\\"jmp\\\\t__return_16\\\";\n }\")\n \n (define_insn \"*return_32bit\"\n@@ -6573,7 +6616,12 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n+  else if (!current_function_far)\n+    return \\\"rts\\\";\n+  else if (TARGET_M6812)\n+    return \\\"rtc\\\";\n+  else\n+    return \\\"jmp\\\\t__return_32\\\";\n }\")\n \n (define_insn \"indirect_jump\""}, {"sha": "3415348944168bef7c6b57a4d86f78510ac339b0", "filename": "gcc/config/m68hc11/t-m68hc11-gas", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcedbc4b7380379398d655d332176c84b13f4f9/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas?ref=dbcedbc4b7380379398d655d332176c84b13f4f9", "patch": "@@ -25,7 +25,7 @@ LIB1ASMFUNCS = _mulsi3 \\\n \t_premain __exit _abort _cleanup \\\n \t_adddi3 _subdi3 _notdi2 _rotlhi3 _rotrhi3 \\\n \t_ashrhi3 _lshrhi3 _lshlhi3 _ashrqi3 _lshlqi3 _map_data _init_bss \\\n-\t_ctor _dtor __far_trampoline\n+\t_ctor _dtor _far_tramp _call_far _return_far\n \n TARGET_LIBGCC2_CFLAGS = -DUSE_GAS -DIN_GCC\n \n@@ -37,10 +37,10 @@ LIB2FUNCS_EXTRA = $(srcdir)/config/udivmodsi4.c \\\n LIBGCC2_DEBUG_CFLAGS =-g\n LIBGCC2_CFLAGS = -Os -mrelax $(LIBGCC2_INCLUDES) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) -DIN_LIBGCC2\n \n-MULTILIB_OPTIONS  = m68hc11/m68hc12 mshort fshort-double mlong-calls\n+MULTILIB_OPTIONS  = m68hc11/m68hc12 mshort fshort-double\n MULTILIB_DIRNAMES =\n MULTILIB_MATCHES  = m68hc11=m6811 m68hc12=m6812\n-MULTILIB_EXCEPTIONS = -mnoshort -mno68hc11 -mnolong-calls\n+MULTILIB_EXCEPTIONS = -mnoshort -mno68hc11\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}]}