{"sha": "99f8432359851649b749d4c16b91b758820d30c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmODQzMjM1OTg1MTY0OWI3NDlkNGMxNmI5MWI3NTg4MjBkMzBjMQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2019-05-23T20:33:02Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2019-05-23T20:33:02Z"}, "message": "rs6000.c (rs6000_global_entry_point_needed_p): Rename to rs6000_global_entry_point_prologue_needed_p.\n\n[gcc]\n\n2019-05-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_global_entry_point_needed_p):\n\tRename to rs6000_global_entry_point_prologue_needed_p.  Return\n\tfalse for PC-relative functions.\n\t(rs6000_output_function_prologue): Change called function name to\n\trs6000_global_entry_point_prologue_needed_p.  Emit \".localentry\n\tname,1\" for PC-relative functions.\n\t(rs6000_elf_declare_function_name): Change called function name to\n\trs6000_global_entry_point_prologue_needed_p.\n\n[gcc/testsuite]\n\n2019-05-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* gcc.target/powerpc/localentry-1.c: New file.\n\nFrom-SVN: r271577", "tree": {"sha": "a1ca9a652f39d1c9d7c4f6c1c164a80c0a0a3c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ca9a652f39d1c9d7c4f6c1c164a80c0a0a3c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f8432359851649b749d4c16b91b758820d30c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8432359851649b749d4c16b91b758820d30c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f8432359851649b749d4c16b91b758820d30c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8432359851649b749d4c16b91b758820d30c1/comments", "author": null, "committer": null, "parents": [{"sha": "103d91c7cb36eaba7728a3550f77dd1f50fdfc29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103d91c7cb36eaba7728a3550f77dd1f50fdfc29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103d91c7cb36eaba7728a3550f77dd1f50fdfc29"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "c9a6e4a31ad4eb648a83329f0e993064ddb3a55a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8432359851649b749d4c16b91b758820d30c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8432359851649b749d4c16b91b758820d30c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99f8432359851649b749d4c16b91b758820d30c1", "patch": "@@ -1,3 +1,14 @@\n+2019-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_global_entry_point_needed_p):\n+\tRename to rs6000_global_entry_point_prologue_needed_p.  Return\n+\tfalse for PC-relative functions.\n+\t(rs6000_output_function_prologue): Change called function name to\n+\trs6000_global_entry_point_prologue_needed_p.  Emit \".localentry\n+\tname,1\" for PC-relative functions.\n+\t(rs6000_elf_declare_function_name): Change called function name to\n+\trs6000_global_entry_point_prologue_needed_p.\n+\n 2019-05-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/90552"}, {"sha": "3d5cf9e4ece4a1c40370c1557e2f3c4e453329b4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=99f8432359851649b749d4c16b91b758820d30c1", "patch": "@@ -26180,7 +26180,7 @@ split_stack_arg_pointer_used_p (void)\n /* Return whether we need to emit an ELFv2 global entry point prologue.  */\n \n static bool\n-rs6000_global_entry_point_needed_p (void)\n+rs6000_global_entry_point_prologue_needed_p (void)\n {\n   /* Only needed for the ELFv2 ABI.  */\n   if (DEFAULT_ABI != ABI_ELFv2)\n@@ -26191,6 +26191,10 @@ rs6000_global_entry_point_needed_p (void)\n   if (TARGET_SINGLE_PIC_BASE)\n     return false;\n \n+  /* PC-relative functions never generate a global entry point prologue.  */\n+  if (rs6000_pcrel_p (cfun))\n+    return false;\n+\n   /* Ensure we have a global entry point for thunks.   ??? We could\n      avoid that if the target routine doesn't need a global entry point,\n      but we do not know whether this is the case at this point.  */\n@@ -27547,10 +27551,9 @@ rs6000_output_function_prologue (FILE *file)\n \n   /* ELFv2 ABI r2 setup code and local entry point.  This must follow\n      immediately after the global entry point label.  */\n-  if (rs6000_global_entry_point_needed_p ())\n+  if (rs6000_global_entry_point_prologue_needed_p ())\n     {\n       const char *name = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n-\n       (*targetm.asm_out.internal_label) (file, \"LCF\", rs6000_pic_labelno);\n \n       if (TARGET_CMODEL != CMODEL_LARGE)\n@@ -27601,6 +27604,19 @@ rs6000_output_function_prologue (FILE *file)\n       fputs (\"\\n\", file);\n     }\n \n+  else if (rs6000_pcrel_p (cfun))\n+    {\n+      const char *name = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+      /* All functions compiled to use PC-relative addressing will\n+\t have a .localentry value of 0 or 1.  For now we set it to\n+\t 1 all the time, indicating that the function may clobber\n+\t the TOC register r2.  Later we may optimize this by setting\n+\t it to 0 if the function is a leaf and does not clobber r2.  */\n+      fputs (\"\\t.localentry\\t\", file);\n+      assemble_name (file, name);\n+      fputs (\",1\\n\", file);\n+    }\n+\n   /* Output -mprofile-kernel code.  This needs to be done here instead of\n      in output_function_profile since it must go after the ELFv2 ABI\n      local entry point.  */\n@@ -33335,7 +33351,8 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n   ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n   ASM_DECLARE_RESULT (file, DECL_RESULT (decl));\n \n-  if (TARGET_CMODEL == CMODEL_LARGE && rs6000_global_entry_point_needed_p ())\n+  if (TARGET_CMODEL == CMODEL_LARGE\n+      && rs6000_global_entry_point_prologue_needed_p ())\n     {\n       char buf[256];\n "}, {"sha": "f8ab7b767e66ca92d0a0fe3e0fa254fe6ad0362b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99f8432359851649b749d4c16b91b758820d30c1", "patch": "@@ -1,3 +1,7 @@\n+2019-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/localentry-1.c: New file.\n+\n 2019-05-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/90552"}, {"sha": "ce687a7f6ec68a5f06d2d0e26daec902d8ab93e9", "filename": "gcc/testsuite/gcc.target/powerpc/localentry-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8432359851649b749d4c16b91b758820d30c1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c?ref=99f8432359851649b749d4c16b91b758820d30c1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future -O2\" } */\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+\n+/* Ensure we generate \".localentry fn,1\" for both leaf and non-leaf\n+   functions.  */\n+\n+extern int y (int);\n+\n+int x (void)\n+{\n+  return y (5);\n+}\n+\n+void z (void) { };\n+\n+/* { dg-final { scan-assembler {\\.localentry\\t\\mx,1\\M} } } */\n+/* { dg-final { scan-assembler {\\.localentry\\t\\mz,1\\M} } } */"}]}