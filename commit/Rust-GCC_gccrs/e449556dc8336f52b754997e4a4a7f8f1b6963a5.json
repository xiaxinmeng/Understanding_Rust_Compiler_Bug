{"sha": "e449556dc8336f52b754997e4a4a7f8f1b6963a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0OTU1NmRjODMzNmY1MmI3NTQ5OTdlNGE0YTdmOGYxYjY5NjNhNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-06-12T19:38:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-12T19:38:42Z"}, "message": "i386.c (ix86_init_builtins): Calculate FLOAT128_FTYPE_CONST_STRING function type only once.\n\n\t* config/i386/i386.c (ix86_init_builtins): Calculate\n\tFLOAT128_FTYPE_CONST_STRING function type only once.\n\t* doc/extend.texi (x86 Built-in Functions): Update text, __float128\n\tbuilt-in functions are available for x86-32 and x86-64 targets.\n\nFrom-SVN: r237342", "tree": {"sha": "a5bf617a2a774834e389a7da2fd4c4cd5c3e1cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5bf617a2a774834e389a7da2fd4c4cd5c3e1cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e449556dc8336f52b754997e4a4a7f8f1b6963a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e449556dc8336f52b754997e4a4a7f8f1b6963a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e449556dc8336f52b754997e4a4a7f8f1b6963a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e449556dc8336f52b754997e4a4a7f8f1b6963a5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee38bd2e970dfc0913ad92ee90ae96ba5c19e6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee38bd2e970dfc0913ad92ee90ae96ba5c19e6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee38bd2e970dfc0913ad92ee90ae96ba5c19e6e9"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "c2f2a0b88ea8c0087bca850dd4ae714788679dcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e449556dc8336f52b754997e4a4a7f8f1b6963a5", "patch": "@@ -1,3 +1,10 @@\n+2016-06-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_init_builtins): Calculate\n+\tFLOAT128_FTYPE_CONST_STRING function type only once.\n+\t* doc/extend.texi (x86 Built-in Functions): Update text, __float128\n+\tbuilt-in functions are available for x86-32 and x86-64 targets.\n+\n 2016-06-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/71241"}, {"sha": "c5e5e1238a53674d9184d3c5c816ab418af34dda", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e449556dc8336f52b754997e4a4a7f8f1b6963a5", "patch": "@@ -38260,7 +38260,7 @@ ix86_init_builtin_types (void)\n static void\n ix86_init_builtins (void)\n {\n-  tree t;\n+  tree ftype, decl;\n \n   ix86_init_builtin_types ();\n \n@@ -38273,31 +38273,31 @@ ix86_init_builtins (void)\n   def_builtin_const (0, \"__builtin_huge_valq\",\n \t\t     FLOAT128_FTYPE_VOID, IX86_BUILTIN_HUGE_VALQ);\n \n-  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_CONST_STRING);\n-  t = add_builtin_function (\"__builtin_nanq\", t, IX86_BUILTIN_NANQ,\n-\t\t\t    BUILT_IN_MD, \"nanq\", NULL_TREE);\n-  TREE_READONLY (t) = 1;\n-  ix86_builtins[(int) IX86_BUILTIN_NANQ] = t;\n+  ftype = ix86_get_builtin_func_type (FLOAT128_FTYPE_CONST_STRING);\n+  decl = add_builtin_function (\"__builtin_nanq\", ftype, IX86_BUILTIN_NANQ,\n+\t\t\t       BUILT_IN_MD, \"nanq\", NULL_TREE);\n+  TREE_READONLY (decl) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_NANQ] = decl;\n \n-  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_CONST_STRING);\n-  t = add_builtin_function (\"__builtin_nansq\", t, IX86_BUILTIN_NANSQ,\n-\t\t\t    BUILT_IN_MD, \"nansq\", NULL_TREE);\n-  TREE_READONLY (t) = 1;\n-  ix86_builtins[(int) IX86_BUILTIN_NANSQ] = t;  \n+  decl = add_builtin_function (\"__builtin_nansq\", ftype, IX86_BUILTIN_NANSQ,\n+\t\t\t       BUILT_IN_MD, \"nansq\", NULL_TREE);\n+  TREE_READONLY (decl) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_NANSQ] = decl;\n \n   /* We will expand them to normal call if SSE isn't available since\n      they are used by libgcc. */\n-  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128);\n-  t = add_builtin_function (\"__builtin_fabsq\", t, IX86_BUILTIN_FABSQ,\n-\t\t\t    BUILT_IN_MD, \"__fabstf2\", NULL_TREE);\n-  TREE_READONLY (t) = 1;\n-  ix86_builtins[(int) IX86_BUILTIN_FABSQ] = t;\n-\n-  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128_FLOAT128);\n-  t = add_builtin_function (\"__builtin_copysignq\", t, IX86_BUILTIN_COPYSIGNQ,\n-\t\t\t    BUILT_IN_MD, \"__copysigntf3\", NULL_TREE);\n-  TREE_READONLY (t) = 1;\n-  ix86_builtins[(int) IX86_BUILTIN_COPYSIGNQ] = t;\n+  ftype = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128);\n+  decl = add_builtin_function (\"__builtin_fabsq\", ftype, IX86_BUILTIN_FABSQ,\n+\t\t\t       BUILT_IN_MD, \"__fabstf2\", NULL_TREE);\n+  TREE_READONLY (decl) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_FABSQ] = decl;\n+\n+  ftype = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128_FLOAT128);\n+  decl = add_builtin_function (\"__builtin_copysignq\", ftype,\n+\t\t\t       IX86_BUILTIN_COPYSIGNQ, BUILT_IN_MD,\n+\t\t\t       \"__copysigntf3\", NULL_TREE);\n+  TREE_READONLY (decl) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_COPYSIGNQ] = decl;\n \n   ix86_init_tm_builtins ();\n   ix86_init_mmx_sse_builtins ();"}, {"sha": "a0633543602148a313b6f33e9202358966397cef", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449556dc8336f52b754997e4a4a7f8f1b6963a5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e449556dc8336f52b754997e4a4a7f8f1b6963a5", "patch": "@@ -18445,28 +18445,19 @@ integers, these use @code{V4SI}.  Finally, some instructions operate on an\n entire vector register, interpreting it as a 128-bit integer, these use mode\n @code{TI}.\n \n-In 64-bit mode, the x86-64 family of processors uses additional built-in\n+The x86-32 and x86-64 family of processors use additional built-in\n functions for efficient use of @code{TF} (@code{__float128}) 128-bit\n floating point and @code{TC} 128-bit complex floating-point values.\n \n-The following floating-point built-in functions are available in 64-bit\n-mode.  All of them implement the function that is part of the name.\n+The following floating-point built-in functions are always available.  All\n+of them implement the function that is part of the name.\n \n @smallexample\n __float128 __builtin_fabsq (__float128)\n __float128 __builtin_copysignq (__float128, __float128)\n @end smallexample\n \n-The following built-in function is always available.\n-\n-@table @code\n-@item void __builtin_ia32_pause (void)\n-Generates the @code{pause} machine instruction with a compiler memory\n-barrier.\n-@end table\n-\n-The following floating-point built-in functions are made available in the\n-64-bit mode.\n+The following built-in functions are always available.\n \n @table @code\n @item __float128 __builtin_infq (void)\n@@ -18486,6 +18477,14 @@ Similar to @code{__builtin_nans}, except the return type is @code{__float128}.\n @findex __builtin_nansq\n @end table\n \n+The following built-in function is always available.\n+\n+@table @code\n+@item void __builtin_ia32_pause (void)\n+Generates the @code{pause} machine instruction with a compiler memory\n+barrier.\n+@end table\n+\n The following built-in functions are always available and can be used to\n check the target platform type.\n "}]}