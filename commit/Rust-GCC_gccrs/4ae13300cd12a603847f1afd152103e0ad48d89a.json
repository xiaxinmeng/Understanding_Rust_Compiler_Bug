{"sha": "4ae13300cd12a603847f1afd152103e0ad48d89a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlMTMzMDBjZDEyYTYwMzg0N2YxYWZkMTUyMTAzZTBhZDQ4ZDg5YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2016-03-07T13:22:07Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-03-07T13:22:07Z"}, "message": "re PR middle-end/69916 ([openacc] ICE in single_succ_edge called from oacc_loop_xform_loop)\n\n\tgcc/\n\tPR middle-end/69916\n\t* omp-low.c (struct oacc_loop): Add ifns.\n\t(new_oacc_loop_raw): Initialize it.\n\t(finish_oacc_loop): Clear mask & flags if no ifns.\n\t(oacc_loop_discover_walk): Count IFN_GOACC_LOOP calls.\n\t(oacc_loop_xform_loop): Add ifns arg & adjust.\n\t(oacc_loop_process): Adjust oacc_loop_xform_loop call.\n\n\tgcc/testsuite/\n\tPR middle-end/69916\n\t* c-c-++-common/goacc/pr69916.c: New.\n\nFrom-SVN: r234026", "tree": {"sha": "21235e3760cd5107e9691a937aa0aa60e5756a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21235e3760cd5107e9691a937aa0aa60e5756a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae13300cd12a603847f1afd152103e0ad48d89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae13300cd12a603847f1afd152103e0ad48d89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae13300cd12a603847f1afd152103e0ad48d89a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae13300cd12a603847f1afd152103e0ad48d89a/comments", "author": null, "committer": null, "parents": [{"sha": "5edb985350a075f467323e37cdb41c84b6127fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edb985350a075f467323e37cdb41c84b6127fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edb985350a075f467323e37cdb41c84b6127fcf"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "5b14b176aea622236482a858e09e437ddf2d1edb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ae13300cd12a603847f1afd152103e0ad48d89a", "patch": "@@ -1,3 +1,13 @@\n+2016-03-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR middle-end/69916\n+\t* omp-low.c (struct oacc_loop): Add ifns.\n+\t(new_oacc_loop_raw): Initialize it.\n+\t(finish_oacc_loop): Clear mask & flags if no ifns.\n+\t(oacc_loop_discover_walk): Count IFN_GOACC_LOOP calls.\n+\t(oacc_loop_xform_loop): Add ifns arg & adjust.\n+\t(oacc_loop_process): Adjust oacc_loop_xform_loop call.\n+\n 2016-03-07  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/70061"}, {"sha": "82dec9d09b4d00737968552eadfaa5fa7d172dce", "filename": "gcc/omp-low.c", "status": "modified", "additions": 62, "deletions": 40, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=4ae13300cd12a603847f1afd152103e0ad48d89a", "patch": "@@ -241,8 +241,9 @@ struct oacc_loop\n   tree routine;  /* Pseudo-loop enclosing a routine.  */\n \n   unsigned mask;   /* Partitioning mask.  */\n-  unsigned flags;   /* Partitioning flags.  */\n-  tree chunk_size;   /* Chunk size.  */\n+  unsigned flags;  /* Partitioning flags.  */\n+  unsigned ifns;   /* Contained loop abstraction functions.  */\n+  tree chunk_size; /* Chunk size.  */\n   gcall *head_end; /* Final marker of head sequence.  */\n };\n \n@@ -20442,6 +20443,7 @@ new_oacc_loop_raw (oacc_loop *parent, location_t loc)\n   loop->routine = NULL_TREE;\n \n   loop->mask = loop->flags = 0;\n+  loop->ifns = 0;\n   loop->chunk_size = 0;\n   loop->head_end = NULL;\n \n@@ -20503,6 +20505,9 @@ new_oacc_loop_routine (oacc_loop *parent, gcall *call, tree decl, tree attrs)\n static oacc_loop *\n finish_oacc_loop (oacc_loop *loop)\n {\n+  /* If the loop has been collapsed, don't partition it.  */\n+  if (!loop->ifns)\n+    loop->mask = loop->flags = 0;\n   return loop->parent;\n }\n \n@@ -20633,43 +20638,54 @@ oacc_loop_discover_walk (oacc_loop *loop, basic_block bb)\n       if (!gimple_call_internal_p (call))\n \tcontinue;\n \n-      if (gimple_call_internal_fn (call) != IFN_UNIQUE)\n-\tcontinue;\n-\n-      enum ifn_unique_kind kind\n-\t= (enum ifn_unique_kind) TREE_INT_CST_LOW (gimple_call_arg (call, 0));\n-      if (kind == IFN_UNIQUE_OACC_HEAD_MARK\n-\t  || kind == IFN_UNIQUE_OACC_TAIL_MARK)\n+      switch (gimple_call_internal_fn (call))\n \t{\n-\t  if (gimple_call_num_args (call) == 2)\n-\t    {\n-\t      gcc_assert (marker && !remaining);\n-\t      marker = 0;\n-\t      if (kind == IFN_UNIQUE_OACC_TAIL_MARK)\n-\t\tloop = finish_oacc_loop (loop);\n-\t      else\n-\t\tloop->head_end = call;\n-\t    }\n-\t  else\n-\t    {\n-\t      int count = TREE_INT_CST_LOW (gimple_call_arg (call, 2));\n+\tdefault:\n+\t  break;\n+\n+\tcase IFN_GOACC_LOOP:\n+\t  /* Count the goacc loop abstraction fns, to determine if the\n+\t     loop was collapsed already.  */\n+\t  loop->ifns++;\n+\t  break;\n \n-\t      if (!marker)\n+\tcase IFN_UNIQUE:\n+\t  enum ifn_unique_kind kind\n+\t    = (enum ifn_unique_kind) (TREE_INT_CST_LOW\n+\t\t\t\t      (gimple_call_arg (call, 0)));\n+\t  if (kind == IFN_UNIQUE_OACC_HEAD_MARK\n+\t      || kind == IFN_UNIQUE_OACC_TAIL_MARK)\n+\t    {\n+\t      if (gimple_call_num_args (call) == 2)\n \t\t{\n-\t\t  if (kind == IFN_UNIQUE_OACC_HEAD_MARK)\n-\t\t    loop = new_oacc_loop (loop, call);\n-\t\t  remaining = count;\n+\t\t  gcc_assert (marker && !remaining);\n+\t\t  marker = 0;\n+\t\t  if (kind == IFN_UNIQUE_OACC_TAIL_MARK)\n+\t\t    loop = finish_oacc_loop (loop);\n+\t\t  else\n+\t\t    loop->head_end = call;\n \t\t}\n-\t      gcc_assert (count == remaining);\n-\t      if (remaining)\n+\t      else\n \t\t{\n-\t\t  remaining--;\n-\t\t  if (kind == IFN_UNIQUE_OACC_HEAD_MARK)\n-\t\t    loop->heads[marker] = call;\n-\t\t  else\n-\t\t    loop->tails[remaining] = call;\n+\t\t  int count = TREE_INT_CST_LOW (gimple_call_arg (call, 2));\n+\n+\t\t  if (!marker)\n+\t\t    {\n+\t\t      if (kind == IFN_UNIQUE_OACC_HEAD_MARK)\n+\t\t\tloop = new_oacc_loop (loop, call);\n+\t\t      remaining = count;\n+\t\t    }\n+\t\t  gcc_assert (count == remaining);\n+\t\t  if (remaining)\n+\t\t    {\n+\t\t      remaining--;\n+\t\t      if (kind == IFN_UNIQUE_OACC_HEAD_MARK)\n+\t\t\tloop->heads[marker] = call;\n+\t\t      else\n+\t\t\tloop->tails[remaining] = call;\n+\t\t    }\n+\t\t  marker++;\n \t\t}\n-\t      marker++;\n \t    }\n \t}\n     }\n@@ -20772,13 +20788,19 @@ oacc_loop_xform_head_tail (gcall *from, int level)\n }\n \n /* Transform the IFN_GOACC_LOOP internal functions by providing the\n-   determined partitioning mask and chunking argument.  */\n+   determined partitioning mask and chunking argument.  END_MARKER\n+   points at the end IFN_HEAD_TAIL call intgroducing the loop.  IFNS\n+   is the number of IFN_GOACC_LOOP calls for the loop.  MASK_ARG is\n+   the replacement partitioning mask and CHUNK_ARG is the replacement\n+   chunking arg.  */\n \n static void\n-oacc_loop_xform_loop (gcall *end_marker, tree mask_arg, tree chunk_arg)\n+oacc_loop_xform_loop (gcall *end_marker, unsigned ifns,\n+\t\t      tree mask_arg, tree chunk_arg)\n {\n   gimple_stmt_iterator gsi = gsi_for_stmt (end_marker);\n   \n+  gcc_checking_assert (ifns);\n   for (;;)\n     {\n       for (; !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -20798,13 +20820,13 @@ oacc_loop_xform_loop (gcall *end_marker, tree mask_arg, tree chunk_arg)\n \n \t  *gimple_call_arg_ptr (call, 5) = mask_arg;\n \t  *gimple_call_arg_ptr (call, 4) = chunk_arg;\n-\t  if (TREE_INT_CST_LOW (gimple_call_arg (call, 0))\n-\t      == IFN_GOACC_LOOP_BOUND)\n+\t  ifns--;\n+\t  if (!ifns)\n \t    return;\n \t}\n \n-      /* If we didn't see LOOP_BOUND, it should be in the single\n-\t successor block.  */\n+      /* The LOOP_BOUND ifn could be in the single successor\n+\t block.  */\n       basic_block bb = single_succ (gsi_bb (gsi));\n       gsi = gsi_start_bb (bb);\n     }\n@@ -20827,7 +20849,7 @@ oacc_loop_process (oacc_loop *loop)\n       tree mask_arg = build_int_cst (unsigned_type_node, mask);\n       tree chunk_arg = loop->chunk_size;\n \n-      oacc_loop_xform_loop (loop->head_end, mask_arg, chunk_arg);\n+      oacc_loop_xform_loop (loop->head_end, loop->ifns, mask_arg, chunk_arg);\n \n       for (ix = 0; ix != GOMP_DIM_MAX && loop->heads[ix]; ix++)\n \t{"}, {"sha": "7d4d34249903d6918bd6e9ab361ddc0911438f57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ae13300cd12a603847f1afd152103e0ad48d89a", "patch": "@@ -1,3 +1,8 @@\n+2016-03-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR middle-end/69916\n+\t* c-c-++-common/goacc/pr69916.c: New.\n+\n 2016-03-07  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/compile/pr70061.c: New test.\n@@ -711,7 +716,6 @@\n \tPR c/69900\n \t* gcc.dg/pr69900.c: New test.\n \n->>>>>>> .r233653\n 2016-02-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/69666"}, {"sha": "e037af34a632193113950ac57f9dae7fedfeb2d1", "filename": "gcc/testsuite/c-c++-common/goacc/pr69916.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr69916.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae13300cd12a603847f1afd152103e0ad48d89a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr69916.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr69916.c?ref=4ae13300cd12a603847f1afd152103e0ad48d89a", "patch": "@@ -0,0 +1,20 @@\n+/* {  dg-additional-options \"-O2\" } */\n+\n+/* PR 69916, an loop determined to be empty sometime after omp-lower\n+   and before oacc-device-lower can evaporate leading to no GOACC_LOOP\n+   internal functions existing.  */\n+\n+int\n+main (void)\n+{\n+\n+#pragma acc parallel\n+  {\n+    int j = 0;\n+#pragma acc loop private (j)\n+    for (int i = 0; i < 10; i++)\n+      j++;\n+  }\n+\n+  return 0;\n+}"}]}