{"sha": "2fe2920e2dcfed7940e33b7b426a5035189ac04e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlMjkyMGUyZGNmZWQ3OTQwZTMzYjdiNDI2YTUwMzUxODlhYzA0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T09:49:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T09:49:23Z"}, "message": "[multiple changes]\n\n2012-11-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb, impunit.adb, exp_ch9.adb, par-ch4.adb,\n\ts-tarest.adb: Minor reformatting.\n\n2012-11-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-tposen.ads: Minor comment update.\n\n2012-11-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sysdep.c: Rename sig* wrappers to use unique names.\n\n2012-11-06  Yannick Moy  <moy@adacore.com>\n\n\t* exp_dbug.adb (Qualify_Entity_Name): Mark entity as having a qualified\n\tname after being treated, in formal verification mode.\n\n2012-11-06  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Updating gnattest section to reflect changes\n\tin default behaviour of the tool.\n\nFrom-SVN: r193215", "tree": {"sha": "cb0c936e428ab60f540d6d67d357203a7821d210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0c936e428ab60f540d6d67d357203a7821d210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe2920e2dcfed7940e33b7b426a5035189ac04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe2920e2dcfed7940e33b7b426a5035189ac04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe2920e2dcfed7940e33b7b426a5035189ac04e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe2920e2dcfed7940e33b7b426a5035189ac04e/comments", "author": null, "committer": null, "parents": [{"sha": "6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc057a79e2cef15d7dfd1170c1043cb0f271b04"}], "stats": {"total": 163, "additions": 101, "deletions": 62}, "files": [{"sha": "e2b1c7e6d1b4012c61dfe7828cdf891e5b095d87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -1,3 +1,26 @@\n+2012-11-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb, impunit.adb, exp_ch9.adb, par-ch4.adb,\n+\ts-tarest.adb: Minor reformatting.\n+\n+2012-11-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-tposen.ads: Minor comment update.\n+\n+2012-11-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sysdep.c: Rename sig* wrappers to use unique names.\n+\n+2012-11-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_dbug.adb (Qualify_Entity_Name): Mark entity as having a qualified\n+\tname after being treated, in formal verification mode.\n+\n+2012-11-06  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Updating gnattest section to reflect changes\n+\tin default behaviour of the tool.\n+\n 2012-11-06  Thomas Quinot  <quinot@adacore.com>\n \n \t* s-oscons-tmplt.c: Interfaces.C now needs to be WITH'd even"}, {"sha": "781de8695dc1341616efd16bcd87aba4762a2a7e", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -14021,6 +14021,7 @@ package body Exp_Ch9 is\n \n       declare\n          Create_RE : RE_Id;\n+\n       begin\n          if Restricted_Profile then\n             if Partition_Elaboration_Policy = 'S' then\n@@ -14031,6 +14032,7 @@ package body Exp_Ch9 is\n          else\n             Create_RE := RE_Create_Task;\n          end if;\n+\n          Name := New_Reference_To (RTE (Create_RE), Loc);\n       end;\n "}, {"sha": "c034fe5cf6b2b95d6373fe47fda6d079577b7bbf", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -1307,12 +1307,13 @@ package body Exp_Dbug is\n       if Has_Qualified_Name (Ent) then\n          return;\n \n-      --  In formal verification mode, simply append a suffix for homonyms, but\n-      --  do not mark the name as being qualified. We used to qualify entity\n-      --  names as full expansion does, but this was removed as this prevents\n-      --  the verification back-end from using a short name for debugging and\n-      --  user interaction. The verification back-end already takes care of\n-      --  qualifying names when needed.\n+      --  In formal verification mode, simply append a suffix for homonyms.\n+      --  We used to qualify entity names as full expansion does, but this was\n+      --  removed as this prevents the verification back-end from using a short\n+      --  name for debugging and user interaction. The verification back-end\n+      --  already takes care of qualifying names when needed. Still mark the\n+      --  name as being qualified, as Qualify_Entity_Name may be called more\n+      --  than once on the same entity.\n \n       elsif Alfa_Mode then\n          if Has_Homonym (Ent) then\n@@ -1322,6 +1323,7 @@ package body Exp_Dbug is\n             Set_Chars (Ent, Name_Enter);\n          end if;\n \n+         Set_Has_Qualified_Name (Ent);\n          return;\n \n       --  If the entity is a variable encoding the debug name for an object"}, {"sha": "5ce2aa1b9855c9ef0eb48f64cc032e05694d8834", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -819,20 +819,20 @@ package body Exp_Prag is\n    --     Old_1  : <type of Incr_Expr>;\n    --     Old_2  : <type of Decr_Expr>;\n    --     Flag   : Boolean := False;\n-   --\n+\n    --     for | while ... loop\n    --        <preceding source statements>\n-   --\n+\n    --        pragma Assert (<Invar_Expr>);\n-   --\n+\n    --        if Flag then\n    --           Old_1 := Curr_1;\n    --           Old_2 := Curr_2;\n    --        end if;\n-   --\n+\n    --        Curr_1 := <Incr_Expr>;\n    --        Curr_2 := <Decr_Expr>;\n-   --\n+\n    --        if Flag then\n    --           if Curr_1 /= Old_1 then\n    --              pragma Assert (Curr_1 > Old_1);\n@@ -842,7 +842,7 @@ package body Exp_Prag is\n    --        else\n    --           Flag := True;\n    --        end if;\n-   --\n+\n    --        <succeeding source statements>\n    --     end loop;\n \n@@ -886,7 +886,8 @@ package body Exp_Prag is\n                  Make_Op_Gt (Loc,\n                    Left_Opnd  => Curr_Val,\n                    Right_Opnd => Old_Val);\n-            else\n+\n+            else pragma Assert (Chars (Arg) = Name_Decreases);\n                return\n                  Make_Op_Lt (Loc,\n                    Left_Opnd  => Curr_Val,\n@@ -956,13 +957,11 @@ package body Exp_Prag is\n              Object_Definition   =>\n                New_Reference_To (Etype (Expr), Loop_Loc)));\n \n-         --  Restore the original scope after all temporaries have been\n-         --  analyzed.\n+         --  Restore original scope after all temporaries have been analyzed\n \n          Pop_Scope;\n \n-         --  Step 3: Store the value of the expression from the previous\n-         --  iteration.\n+         --  Step 3: Store value of the expression from the previous iteration\n \n          if No (Old_Assign) then\n             Old_Assign := New_List;\n@@ -990,8 +989,7 @@ package body Exp_Prag is\n              Name       => New_Reference_To (Curr_Id, Loc),\n              Expression => Relocate_Node (Expr)));\n \n-         --  Step 5: Create the corresponding assertion to verify the change of\n-         --  value.\n+         --  Step 5: Create corresponding assertion to verify change of value\n \n          --  Generate:\n          --    pragma Assert (Curr <|> Old);\n@@ -1137,6 +1135,8 @@ package body Exp_Prag is\n                  Expression => New_Reference_To (Standard_True, Loc)))));\n       end if;\n \n+      --  Need a comment on this final rewrite ???\n+\n       Rewrite (N, Make_Null_Statement (Loc));\n       Analyze (N);\n    end Expand_Pragma_Loop_Assertion;"}, {"sha": "330b818a6f4352750c23f087c6c659f129e50f85", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -18348,6 +18348,22 @@ specifies the directory that will hold the harness packages and project file\n for the test driver. If the @var{dirname} is a relative path, it is considered\n relative to the object directory of the project file.\n \n+@item --separates\n+@cindex @option{--separates} (@command{gnattest})\n+Bodies of all test routines are generated as separates. This option is\n+temporarily provided for compatibility to support the old way of generating test\n+skeletons. Its usage is not recommended because at some point the option will be\n+abandoned together with this way of generating test packages.\n+\n+\n+@item --transition\n+@cindex @option{--transition} (@command{gnattest})\n+This allows transition from separate test routines to monolith test packages.\n+All matching test routines are overwritten with contents of corresponding\n+separates. Note that if separate test routines had any manually added with\n+clauses they will be moved to the test package body as is and have to be moved\n+by hand.\n+\n @end table\n \n @option{--tests_root}, @option{--subdir} and @option{--tests-dir} switches are\n@@ -18432,8 +18448,11 @@ is located in:\n For each package containing visible subprograms, a child test package is\n generated. It contains one test routine per tested subprogram. Each\n declaration of a test subprogram has a comment specifying which tested\n-subprogram it corresponds to. All of the test routines have separate bodies.\n-The test routine located at simple-test_data-tests-test_inc_5eaee3.adb contains\n+subprogram it corresponds to. Bodies of test routines are placed in test package\n+bodies and are surrounded by special comment sections. Those comment sections\n+should not be removed or modified in order for gnattest to be able to regenerate\n+test packages and keep already written tests in place.\n+The test routine Test_Inc_5eaee3 located at simple-test_data-tests.adb contains\n a single statement: a call to procedure Assert. It has two arguments:\n the Boolean expression we want to check and the diagnosis message to display if\n the condition is false.\n@@ -18469,8 +18488,9 @@ values can be set by Set_Up routine and used in test routines afterwards.\n \n Bodies of test routines and test_data packages are never overridden after they\n have been created once. As long as the name of the subprogram, full expanded Ada\n-names, and the order of its parameters is the same, the old test routine will\n-fit in its place and no test skeleton will be generated for the subprogram.\n+names, and the order of its parameters is the same, and comment sections are\n+intact the old test routine will fit in its place and no test skeleton will be\n+generated for the subprogram.\n \n This can be demonstrated with the previous example. By uncommenting declaration\n and body of function Dec in simple.ads and simple.adb, running\n@@ -18487,7 +18507,7 @@ the old test is not replaced with a stub, nor is it lost, but a new test\n skeleton is created for function Dec.\n \n The only way of regenerating tests skeletons is to remove the previously created\n-tests.\n+tests together with corresponding comment sections.\n \n @node Default Test Behavior\n @section Default Test Behavior\n@@ -18615,7 +18635,7 @@ Gnattest has a special option to run overridden parent tests against objects\n of the type which have overriding primitives:\n \n @smallexample\n-gnattest --harness-dir=driver --liskov -Ptagged_rec.gpr\n+gnattest --harness-dir=driver --validate-type-extensions -Ptagged_rec.gpr\n cd driver\n gprbuild -Ptest_driver\n test_runner"}, {"sha": "efeb8960a4e334406e37ddc72748e00e4649ce28", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -663,11 +663,14 @@ package body Impunit is\n          return Not_Predefined_Unit;\n       end if;\n \n-      --  Not predefined if file name does not end in .ads or .adb. This can\n-      --  happen when non-standard file names are being used. Calling this\n-      --  function on a .adb file is used in GNATprove to detect when a\n-      --  construct comes from an instance of a generic defined in a predefined\n-      --  unit.\n+      --  To be considered predefined, the file name must end in .ads or .adb.\n+      --  File names with other extensions (coming from the use of non-standard\n+      --  file naming schemes) can never be predefined.\n+\n+      --  Note that in the context of a compiler, the .adb case will never\n+      --  arise. However it can arise for other tools, e.g. gnatprove uses\n+      --  this routine to detect when a construct comes from an instance of\n+      --  a generic defined in a predefined unit.\n \n       if Name_Buffer (Name_Len - 3 .. Name_Len) /= \".ads\"\n            and then"}, {"sha": "3cb65791a22eaf87b12b9e428196656b8a213fc9", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -2359,11 +2359,14 @@ package body Ch4 is\n    --  Error recovery: can raise Error_Resync\n \n    function P_Primary return Node_Id is\n-      Lparen     : constant Boolean := Prev_Token = Tok_Left_Paren;\n-\n       Scan_State : Saved_Scan_State;\n       Node1      : Node_Id;\n \n+      Lparen : constant Boolean := Prev_Token = Tok_Left_Paren;\n+      --  Remember if previous token is a left parenthesis. This is used to\n+      --  deal with checking whether IF/CASE/FOR expressions appearing as\n+      --  primaries require extra parenthesization.\n+\n    begin\n       --  The loop runs more than once only if misplaced pragmas are found\n       --  or if a misplaced unary minus is skipped.\n@@ -2537,7 +2540,6 @@ package body Ch4 is\n             --  For [all | some]  indicates a quantified expression\n \n             when Tok_For =>\n-\n                if Token_Is_At_Start_Of_Line then\n                   Error_Msg_AP (\"misplaced loop\");\n                   return Error;\n@@ -2553,10 +2555,9 @@ package body Ch4 is\n \n                   return Node1;\n \n-               else\n-\n                --  Otherwise treat as misused identifier\n \n+               else\n                   return P_Identifier;\n                end if;\n "}, {"sha": "e2a75e0c04c6581dc35f49438a907e2e15ca2198", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -618,11 +618,12 @@ package body System.Tasking.Restricted.Stages is\n       Elaborated    : Access_Boolean;\n       Chain         : in out Activation_Chain;\n       Task_Image    : String;\n-      Created_Task  : Task_Id) is\n+      Created_Task  : Task_Id)\n+   is\n    begin\n-      Create_Restricted_Task (Priority, Stack_Address, Size, Task_Info,\n-                              CPU, State, Discriminants, Elaborated,\n-                              Task_Image, Created_Task);\n+      Create_Restricted_Task\n+        (Priority, Stack_Address, Size, Task_Info, CPU, State,\n+         Discriminants, Elaborated, Task_Image, Created_Task);\n \n       --  Append this task to the activation chain\n "}, {"sha": "58c6d6d62a5b3b60f3d3c82a3b8a0b2491acb949", "filename": "gcc/ada/s-tposen.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fs-tposen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fs-tposen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.ads?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -163,7 +163,6 @@ package System.Tasking.Protected_Objects.Single_Entry is\n    --     procedure _clean is\n    --     begin\n    --        service_entry (_object._object'unchecked_access);\n-   --        unlock_entry (_object._object'unchecked_access);\n    --        return;\n    --     end _clean;\n    --  begin"}, {"sha": "a2c4d8607bc083c39134d01b1a7076c4e553bd99", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2920e2dcfed7940e33b7b426a5035189ac04e/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=2fe2920e2dcfed7940e33b7b426a5035189ac04e", "patch": "@@ -933,47 +933,35 @@ __gnat_is_file_not_found_error (int errno_val) {\n /* Provide extern symbols for sig* as needed by the tasking run-time, instead\n    of static inline functions.  */\n \n-#define sigismember android_sigismember\n-#define sigaddset android_sigaddset\n-#define sigdelset android_sigdelset\n-#define sigemptyset android_sigemptyset\n-#define sigfillset android_sigfillset\n-\n #include <signal.h>\n \n-#undef sigismember\n-#undef sigaddset\n-#undef sigdelset\n-#undef sigemptyset\n-#undef sigfillset\n-\n int\n-sigismember (sigset_t *set, int signum)\n+_sigismember (sigset_t *set, int signum)\n {\n-    return android_sigismember (set, signum);\n+    return sigismember (set, signum);\n }\n \n int\n-sigaddset (sigset_t *set, int signum)\n+_sigaddset (sigset_t *set, int signum)\n {\n-   return android_sigaddset (set, signum);\n+   return sigaddset (set, signum);\n }\n \n int\n-sigdelset (sigset_t *set, int signum)\n+_sigdelset (sigset_t *set, int signum)\n {\n-   return android_sigdelset (set, signum);\n+   return sigdelset (set, signum);\n }\n \n int\n-sigemptyset (sigset_t *set)\n+_sigemptyset (sigset_t *set)\n {\n-    return android_sigemptyset (set);\n+    return sigemptyset (set);\n }\n \n int\n-sigfillset(sigset_t *set)\n+_sigfillset(sigset_t *set)\n {\n-    return android_sigfillset (set);\n+    return sigfillset (set);\n }\n #endif"}]}