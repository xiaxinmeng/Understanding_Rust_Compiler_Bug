{"sha": "0a8f32b8fc399b3fc2da1449d92de22da83d3853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE4ZjMyYjhmYzM5OWIzZmMyZGExNDQ5ZDkyZGUyMmRhODNkMzg1Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-21T02:22:04Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-10-21T02:22:04Z"}, "message": "fold-const.c (fold_binary_loc): Move (-A) * (-B) -> A * B to match.pd.\n\n2015-10-20  Richard Biener  <rguenther@suse.de>\n\t    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* fold-const.c (fold_binary_loc) : Move (-A) * (-B) -> A * B\n\tto match.pd.\n\tMove (a * (1 << b)) is (a << b) to match.pd.\n\tMove convert (C1/X)*C2 into (C1*C2)/X to match.pd.\n\tMove ~X & X, (X == 0) & X, and !X & X are zero to match.pd.\n\tMove X & ~X , X & (X == 0), and X & !X are zero to match.pd.\n\n\t* match.pd (mult:c @0 (convert? (lshift integer_onep@1 @2))):\n\tNew simplifier.\n\t(mult (rdiv:s REAL_CST@0 @1) REAL_CST@2): New simplifier.\n\t(bit_and:c (convert? @0) (convert? (bit_not @0))): New simplifier.\n\t(bit_ior (bit_and:s @0 (bit_not:s @1)) (bit_and:s (bit_not:s @0) @1))\n\t: New simplifier.\n\t(mult:c (convert1? (negate @0)) (convert2? negate_expr_p@1)):\n\tNew simplifier.\n\t(match (logical_inverted_value @0) (truth_not @0)) : New Predicate.\n\n\nCo-Authored-By: Naveen H.S <Naveen.Hurugalawadi@caviumnetworks.com>\n\nFrom-SVN: r229107", "tree": {"sha": "4c84786016633751aa90ea8c3ed33c0e5e030c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c84786016633751aa90ea8c3ed33c0e5e030c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a8f32b8fc399b3fc2da1449d92de22da83d3853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8f32b8fc399b3fc2da1449d92de22da83d3853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8f32b8fc399b3fc2da1449d92de22da83d3853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8f32b8fc399b3fc2da1449d92de22da83d3853/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0761942a58614ec034441a96bb821048b84b0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0761942a58614ec034441a96bb821048b84b0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0761942a58614ec034441a96bb821048b84b0d3"}], "stats": {"total": 105, "additions": 50, "deletions": 55}, "files": [{"sha": "1c80d9478fd5fed32c44555a76b06eacd91447e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a8f32b8fc399b3fc2da1449d92de22da83d3853", "patch": "@@ -1,3 +1,23 @@\n+2015-10-21  Richard Biener  <rguenther@suse.de>\n+\t    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (fold_binary_loc) : Move (-A) * (-B) -> A * B\n+\tto match.pd.\n+\tMove (a * (1 << b)) is (a << b) to match.pd.\n+\tMove convert (C1/X)*C2 into (C1*C2)/X to match.pd.\n+\tMove ~X & X, (X == 0) & X, and !X & X are zero to match.pd.\n+\tMove X & ~X , X & (X == 0), and X & !X are zero to match.pd.\n+\n+\t* match.pd (mult:c @0 (convert? (lshift integer_onep@1 @2))):\n+\tNew simplifier.\n+\t(mult (rdiv:s REAL_CST@0 @1) REAL_CST@2): New simplifier.\n+\t(bit_and:c (convert? @0) (convert? (bit_not @0))): New simplifier.\n+\t(bit_ior (bit_and:s @0 (bit_not:s @1)) (bit_and:s (bit_not:s @0) @1))\n+\t: New simplifier.\n+\t(mult:c (convert1? (negate @0)) (convert2? negate_expr_p@1)):\n+\tNew simplifier.\n+\t(match (logical_inverted_value @0) (truth_not @0)) : New Predicate.\n+\n 2015-10-21  Gregor Richards  <gregor.richards@uwaterloo.ca>\n \t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \t    Alan Modra  <amodra@gmail.com>"}, {"sha": "1e7fbb4aaf5b15a83a6d99eca7c5f1549eee1457", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0a8f32b8fc399b3fc2da1449d92de22da83d3853", "patch": "@@ -9803,20 +9803,6 @@ fold_binary_loc (location_t loc,\n       goto associate;\n \n     case MULT_EXPR:\n-      /* (-A) * (-B) -> A * B  */\n-      if (TREE_CODE (arg0) == NEGATE_EXPR && negate_expr_p (arg1))\n-\treturn fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      negate_expr (arg1)));\n-      if (TREE_CODE (arg1) == NEGATE_EXPR && negate_expr_p (arg0))\n-\treturn fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      negate_expr (arg0)),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg1, 0)));\n-\n       if (! FLOAT_TYPE_P (type))\n \t{\n \t  /* Transform x * -C into -x * C if x is easily negatable.  */\n@@ -9830,16 +9816,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t\t  negate_expr (arg0)),\n \t\t\t\ttem);\n \n-\t  /* (a * (1 << b)) is (a << b)  */\n-\t  if (TREE_CODE (arg1) == LSHIFT_EXPR\n-\t      && integer_onep (TREE_OPERAND (arg1, 0)))\n-\t    return fold_build2_loc (loc, LSHIFT_EXPR, type, op0,\n-\t\t\t\tTREE_OPERAND (arg1, 1));\n-\t  if (TREE_CODE (arg0) == LSHIFT_EXPR\n-\t      && integer_onep (TREE_OPERAND (arg0, 0)))\n-\t    return fold_build2_loc (loc, LSHIFT_EXPR, type, op1,\n-\t\t\t\tTREE_OPERAND (arg0, 1));\n-\n \t  /* (A + A) * C -> A * 2 * C  */\n \t  if (TREE_CODE (arg0) == PLUS_EXPR\n \t      && TREE_CODE (arg1) == INTEGER_CST\n@@ -9882,21 +9858,6 @@ fold_binary_loc (location_t loc,\n \t}\n       else\n \t{\n-\t  /* Convert (C1/X)*C2 into (C1*C2)/X.  This transformation may change\n-             the result for floating point types due to rounding so it is applied\n-             only if -fassociative-math was specify.  */\n-\t  if (flag_associative_math\n-\t      && TREE_CODE (arg0) == RDIV_EXPR\n-\t      && TREE_CODE (arg1) == REAL_CST\n-\t      && TREE_CODE (TREE_OPERAND (arg0, 0)) == REAL_CST)\n-\t    {\n-\t      tree tem = const_binop (MULT_EXPR, TREE_OPERAND (arg0, 0),\n-\t\t\t\t      arg1);\n-\t      if (tem)\n-\t\treturn fold_build2_loc (loc, RDIV_EXPR, type, tem,\n-\t\t\t\t    TREE_OPERAND (arg0, 1));\n-\t    }\n-\n           /* Strip sign operations from X in X*X, i.e. -Y*-Y -> Y*Y.  */\n \t  if (operand_equal_p (arg0, arg1, 0))\n \t    {\n@@ -10053,22 +10014,6 @@ fold_binary_loc (location_t loc,\n       goto bit_rotate;\n \n     case BIT_AND_EXPR:\n-      /* ~X & X, (X == 0) & X, and !X & X are always zero.  */\n-      if ((TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t   || TREE_CODE (arg0) == TRUTH_NOT_EXPR\n-\t   || (TREE_CODE (arg0) == EQ_EXPR\n-\t       && integer_zerop (TREE_OPERAND (arg0, 1))))\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n-\treturn omit_one_operand_loc (loc, type, integer_zero_node, arg1);\n-\n-      /* X & ~X , X & (X == 0), and X & !X are always zero.  */\n-      if ((TREE_CODE (arg1) == BIT_NOT_EXPR\n-\t   || TREE_CODE (arg1) == TRUTH_NOT_EXPR\n-\t   || (TREE_CODE (arg1) == EQ_EXPR\n-\t       && integer_zerop (TREE_OPERAND (arg1, 1))))\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n-\treturn omit_one_operand_loc (loc, type, integer_zero_node, arg0);\n-\n       /* Fold (X ^ 1) & 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && INTEGRAL_TYPE_P (type)"}, {"sha": "83dc7ad53d14a930cac29e1c782398a74f6caa7b", "filename": "gcc/match.pd", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8f32b8fc399b3fc2da1449d92de22da83d3853/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=0a8f32b8fc399b3fc2da1449d92de22da83d3853", "patch": "@@ -325,6 +325,27 @@ along with GCC; see the file COPYING3.  If not see\n     (if (real_isinteger (&TREE_REAL_CST (@1), &n) && (n & 1) == 0)\n      (pows @0 @1))))))\n \n+/* Fold (a * (1 << b)) into (a << b)  */\n+(simplify\n+ (mult:c @0 (convert? (lshift integer_onep@1 @2)))\n+  (if (! FLOAT_TYPE_P (type)\n+       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+   (lshift @0 @2)))\n+\n+/* Fold (C1/X)*C2 into (C1*C2)/X.  */\n+(simplify\n+ (mult (rdiv:s REAL_CST@0 @1) REAL_CST@2)\n+  (if (flag_associative_math)\n+   (with\n+    { tree tem = const_binop (MULT_EXPR, type, @0, @2); }\n+    (if (tem)\n+     (rdiv { tem; } @1)))))\n+\n+/* Simplify ~X & X as zero.  */\n+(simplify\n+ (bit_and:c (convert? @0) (convert? (bit_not @0)))\n+  { build_zero_cst (type); })\n+\n /* X % Y is smaller than Y.  */\n (for cmp (lt ge)\n  (simplify\n@@ -544,6 +565,13 @@ along with GCC; see the file COPYING3.  If not see\n (match negate_expr_p\n  VECTOR_CST\n  (if (FLOAT_TYPE_P (TREE_TYPE (type)) || TYPE_OVERFLOW_WRAPS (type))))\n+\n+/* (-A) * (-B) -> A * B  */\n+(simplify\n+ (mult:c (convert1? (negate @0)) (convert2? negate_expr_p@1))\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+   (mult (convert @0) (convert (negate @1)))))\n  \n /* -(A + B) -> (-B) - A.  */\n (simplify\n@@ -629,6 +657,8 @@ along with GCC; see the file COPYING3.  If not see\n (match truth_valued_p\n   (truth_not @0))\n \n+(match (logical_inverted_value @0)\n+ (truth_not @0))\n (match (logical_inverted_value @0)\n  (bit_not truth_valued_p@0))\n (match (logical_inverted_value @0)"}]}