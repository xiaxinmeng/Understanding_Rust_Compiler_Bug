{"sha": "05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhNDM3YzFmMzI1YTk4MmYxYjhlZTNhYzk4ZTVhYmU2NGFiOGUwYQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-07-07T08:54:40Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-07-07T08:54:40Z"}, "message": "arm-arches.def (armv8-m.base): Define new architecture.\n\n2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm-arches.def (armv8-m.base): Define new architecture.\n    (armv8-m.main): Likewise.\n    (armv8-m.main+dsp): Likewise.\n    * config/arm/arm-protos.h (FL_FOR_ARCH8M_BASE): Define.\n    (FL_FOR_ARCH8M_MAIN): Likewise.\n    * config/arm/arm-tables.opt: Regenerate.\n    * config/arm/bpabi.h: Add armv8-m.base, armv8-m.main and\n    armv8-m.main+dsp to BE8_LINK_SPEC.\n    * config/arm/arm.h (TARGET_HAVE_LDACQ): Exclude ARMv8-M.\n    (enum base_architecture): Add BASE_ARCH_8M_BASE and BASE_ARCH_8M_MAIN.\n    * config/arm/arm.c (arm_arch_name): Increase size to work with ARMv8-M\n    Baseline and Mainline.\n    (arm_option_override_internal): Also disable arm_restrict_it when\n    !arm_arch_notm.  Update comment for -munaligned-access to also cover\n    ARMv8-M Baseline.\n    (arm_file_start): Increase buffer size for printing architecture name.\n    * doc/invoke.texi: Document architectures armv8-m.base, armv8-m.main\n    and armv8-m.main+dsp.\n    (mno-unaligned-access): Clarify that this is disabled by default for\n    ARMv8-M Baseline architectures as well.\n\n    gcc/testsuite/\n    * lib/target-supports.exp: Generate add_options_for_arm_arch_FUNC and\n    check_effective_target_arm_arch_FUNC_multilib for ARMv8-M Baseline and\n    ARMv8-M Mainline architectures.\n\n    libgcc/\n    * config/arm/lib1funcs.S (__ARM_ARCH__): Define to 8 for ARMv8-M.\n\nFrom-SVN: r238081", "tree": {"sha": "76f030ee66c7e434bf0d177b16c85be139412db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f030ee66c7e434bf0d177b16c85be139412db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d16d9ec3c6023b53ef30b0072541ab136309a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d16d9ec3c6023b53ef30b0072541ab136309a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d16d9ec3c6023b53ef30b0072541ab136309a27"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "6e9f523855f5bc0554c2260ae1ee42e341530ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -1,3 +1,26 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm-arches.def (armv8-m.base): Define new architecture.\n+\t(armv8-m.main): Likewise.\n+\t(armv8-m.main+dsp): Likewise.\n+\t* config/arm/arm-protos.h (FL_FOR_ARCH8M_BASE): Define.\n+\t(FL_FOR_ARCH8M_MAIN): Likewise.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/bpabi.h: Add armv8-m.base, armv8-m.main and\n+\tarmv8-m.main+dsp to BE8_LINK_SPEC.\n+\t* config/arm/arm.h (TARGET_HAVE_LDACQ): Exclude ARMv8-M.\n+\t(enum base_architecture): Add BASE_ARCH_8M_BASE and BASE_ARCH_8M_MAIN.\n+\t* config/arm/arm.c (arm_arch_name): Increase size to work with ARMv8-M\n+\tBaseline and Mainline.\n+\t(arm_option_override_internal): Also disable arm_restrict_it when\n+\t!arm_arch_notm.  Update comment for -munaligned-access to also cover\n+\tARMv8-M Baseline.\n+\t(arm_file_start): Increase buffer size for printing architecture name.\n+\t* doc/invoke.texi: Document architectures armv8-m.base, armv8-m.main\n+\tand armv8-m.main+dsp.\n+\t(mno-unaligned-access): Clarify that this is disabled by default for\n+\tARMv8-M Baseline architectures as well.\n+\n 2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/elf.h: Use __ARM_ARCH_ISA_THUMB and __ARM_ARCH_ISA_ARM to"}, {"sha": "be46521c9eaea54f9ad78a92874567589289dbdf", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -62,6 +62,12 @@ ARM_ARCH(\"armv8.1-a\", cortexa53,  8A,\n ARM_ARCH(\"armv8.1-a+crc\",cortexa53, 8A,\n \t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n \t\t\t FL2_FOR_ARCH8_1A))\n+ARM_ARCH(\"armv8-m.base\", cortexm0, 8M_BASE,\n+\t ARM_FSET_MAKE_CPU1 (\t\t\t      FL_FOR_ARCH8M_BASE))\n+ARM_ARCH(\"armv8-m.main\", cortexm7, 8M_MAIN,\n+\t ARM_FSET_MAKE_CPU1(FL_CO_PROC |\t      FL_FOR_ARCH8M_MAIN))\n+ARM_ARCH(\"armv8-m.main+dsp\", cortexm7, 8M_MAIN,\n+\t ARM_FSET_MAKE_CPU1(FL_CO_PROC | FL_ARCH7EM | FL_FOR_ARCH8M_MAIN))\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))\n "}, {"sha": "2419ca0c5a3e31c4fa3d925fc7139fb4b8cd837b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -421,6 +421,8 @@ extern bool arm_is_constant_pool_ref (rtx);\n #define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n #define FL_FOR_ARCH8A\t(FL_FOR_ARCH7VE | FL_ARCH8)\n #define FL2_FOR_ARCH8_1A\tFL2_ARCH8_1\n+#define FL_FOR_ARCH8M_BASE\t(FL_FOR_ARCH6M | FL_ARCH8 | FL_THUMB_DIV)\n+#define FL_FOR_ARCH8M_MAIN\t(FL_FOR_ARCH7M | FL_ARCH8)\n \n /* There are too many feature bits to fit in a single word so the set of cpu and\n    fpu capabilities is a structure.  A feature set is created and manipulated"}, {"sha": "b92cb17f012d7ec5492e66e1e98ed3f1f4bae6eb", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -437,10 +437,19 @@ EnumValue\n Enum(arm_arch) String(armv8.1-a+crc) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(29)\n+Enum(arm_arch) String(armv8-m.base) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(30)\n+Enum(arm_arch) String(armv8-m.main) Value(30)\n+\n+EnumValue\n+Enum(arm_arch) String(armv8-m.main+dsp) Value(31)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt) Value(32)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(33)\n \n Enum\n Name(arm_fpu) Type(int)"}, {"sha": "3a9b9cb7bb8b42ba73ee2822b353e300d967c7c3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -2307,9 +2307,11 @@ static const struct processors *arm_selected_arch;\n static const struct processors *arm_selected_cpu;\n static const struct processors *arm_selected_tune;\n \n-/* The name of the preprocessor macro to define for this architecture.  */\n+/* The name of the preprocessor macro to define for this architecture.  PROFILE\n+   is replaced by the architecture name (eg. 8A) in arm_option_override () and\n+   is thus chosen to be big enough to hold the longest architecture name.  */\n \n-char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n+char arm_arch_name[] = \"__ARM_ARCH_PROFILE__\";\n \n /* Available values for -mfpu=.  */\n \n@@ -2950,7 +2952,8 @@ arm_option_override_internal (struct gcc_options *opts,\n   if (! opts_set->x_arm_restrict_it)\n     opts->x_arm_restrict_it = arm_arch8;\n \n-  if (!TARGET_THUMB2_P (opts->x_target_flags))\n+  /* ARM execution state and M profile don't have [restrict] IT.  */\n+  if (!TARGET_THUMB2_P (opts->x_target_flags) || !arm_arch_notm)\n     opts->x_arm_restrict_it = 0;\n \n   /* Enable -munaligned-access by default for\n@@ -2961,7 +2964,8 @@ arm_option_override_internal (struct gcc_options *opts,\n \n      Disable -munaligned-access by default for\n      - all pre-ARMv6 architecture-based processors\n-     - ARMv6-M architecture-based processors.  */\n+     - ARMv6-M architecture-based processors\n+     - ARMv8-M Baseline processors.  */\n \n   if (! opts_set->x_unaligned_access)\n     {\n@@ -26005,7 +26009,7 @@ arm_file_start (void)\n \t      const char* pos = strchr (arm_selected_arch->name, '+');\n \t      if (pos)\n \t\t{\n-\t\t  char buf[15];\n+\t\t  char buf[32];\n \t\t  gcc_assert (strlen (arm_selected_arch->name)\n \t\t\t      <= sizeof (buf) / sizeof (*pos));\n \t\t  strncpy (buf, arm_selected_arch->name,"}, {"sha": "07353629c6b04166e65505652130e3a6d93789d3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -261,7 +261,7 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n \t\t\t     || arm_arch7) && arm_arch_notm)\n \n /* Nonzero if this chip supports load-acquire and store-release.  */\n-#define TARGET_HAVE_LDACQ\t(TARGET_ARM_ARCH >= 8)\n+#define TARGET_HAVE_LDACQ\t(TARGET_ARM_ARCH >= 8 && arm_arch_notm)\n \n /* Nonzero if integer division instructions supported.  */\n #define TARGET_IDIV\t((TARGET_ARM && arm_arch_arm_hwdiv)\t\\\n@@ -398,7 +398,9 @@ enum base_architecture\n   BASE_ARCH_7R = 7,\n   BASE_ARCH_7M = 7,\n   BASE_ARCH_7EM = 7,\n-  BASE_ARCH_8A = 8\n+  BASE_ARCH_8A = 8,\n+  BASE_ARCH_8M_BASE = 8,\n+  BASE_ARCH_8M_MAIN = 8\n };\n \n /* The major revision number of the ARM Architecture implemented by the target.  */"}, {"sha": "ff216607524120cde9b6f01bf89d63a907f8c113", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -93,6 +93,9 @@\n    |march=armv8-a+crc\t\t\t\t\t\\\n    |march=armv8.1-a\t\t\t\t\t\\\n    |march=armv8.1-a+crc\t\t\t\t\t\\\n+   |march=armv8-m.base\t\t\t\t\t\\\n+   |march=armv8-m.main\t\t\t\t\t\\\n+   |march=armv8-m.main+dsp\t\t\t\t\\\n    :%{!r:--be8}}}\"\n #else\n #define BE8_LINK_SPEC \\\n@@ -127,6 +130,9 @@\n    |march=armv8-a+crc\t\t\t\t\t\\\n    |march=armv8.1-a\t\t\t\t\t\\\n    |march=armv8.1-a+crc\t\t\t\t\t\\\n+   |march=armv8-m.base\t\t\t\t\t\\\n+   |march=armv8-m.main\t\t\t\t\t\\\n+   |march=armv8-m.main+dsp\t\t\t\t\\\n    :%{!r:--be8}}}\"\n #endif\n "}, {"sha": "b6398ff3512a2e998c8ff7c718ee3d670114fa68", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -14148,7 +14148,8 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv6t2}, @samp{armv6z}, @samp{armv6zk},\n @samp{armv7}, @samp{armv7-a}, @samp{armv7-m}, @samp{armv7-r}, @samp{armv7e-m},\n @samp{armv7ve}, @samp{armv8-a}, @samp{armv8-a+crc}, @samp{armv8.1-a},\n-@samp{armv8.1-a+crc}, @samp{iwmmxt}, @samp{iwmmxt2}.\n+@samp{armv8.1-a+crc}, @samp{armv8-m.base}, @samp{armv8-m.main},\n+@samp{armv8-m.main+dsp}, @samp{iwmmxt}, @samp{iwmmxt2}.\n \n Architecture revisions older than @samp{armv4t} are deprecated.\n \n@@ -14460,10 +14461,10 @@ generating these instructions.  This option is enabled by default when\n @opindex mno-unaligned-access\n Enables (or disables) reading and writing of 16- and 32- bit values\n from addresses that are not 16- or 32- bit aligned.  By default\n-unaligned access is disabled for all pre-ARMv6 and all ARMv6-M\n-architectures, and enabled for all other architectures.  If unaligned\n-access is not enabled then words in packed data structures are\n-accessed a byte at a time.\n+unaligned access is disabled for all pre-ARMv6, all ARMv6-M and for\n+ARMv8-M Baseline architectures, and enabled for all other\n+architectures.  If unaligned access is not enabled then words in packed\n+data structures are accessed a byte at a time.\n \n The ARM attribute @code{Tag_CPU_unaligned_access} is set in the\n generated object file to either true or false, depending upon the"}, {"sha": "16eebb6bcb78bf2d65b70cb816bbe156493e0815", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -1,3 +1,9 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp: Generate add_options_for_arm_arch_FUNC and\n+\tcheck_effective_target_arm_arch_FUNC_multilib for ARMv8-M Baseline and\n+\tARMv8-M Mainline architectures.\n+\n 2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* lib/target-supports.exp (check_effective_target_arm_cortex_m): Use"}, {"sha": "b26f8a29c8dc472c563fc2eb3a7d8768f1647bbe", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -3348,7 +3348,9 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n \t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n \t\t\t\t     v8a \"-march=armv8-a\" __ARM_ARCH_8A__\n-\t\t\t\t     v8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__ } {\n+\t\t\t\t     v8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__\n+\t\t\t\t     v8m_base \"-march=armv8-m.base -mthumb\" __ARM_ARCH_8M_BASE__\n+\t\t\t\t     v8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&"}, {"sha": "b6f830fee82372bb13e1b5f5437927ad1441d2b1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -1,3 +1,7 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/lib1funcs.S (__ARM_ARCH__): Define to 8 for ARMv8-M.\n+\n 2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/lib1funcs.S (HAVE_ARM_CLZ): Define for ARMv6* or later"}, {"sha": "96e206ee542126c5d68091087446afe9f01aa51f", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=05a437c1f325a982f1b8ee3ac98e5abe64ab8e0a", "patch": "@@ -108,7 +108,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define __ARM_ARCH__ 7\n #endif\n \n-#if defined(__ARM_ARCH_8A__)\n+#if defined(__ARM_ARCH_8A__) || defined(__ARM_ARCH_8M_BASE__) \\\n+\t|| defined(__ARM_ARCH_8M_MAIN__)\n # define __ARM_ARCH__ 8\n #endif\n "}]}