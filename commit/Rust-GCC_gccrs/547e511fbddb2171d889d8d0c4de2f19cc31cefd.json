{"sha": "547e511fbddb2171d889d8d0c4de2f19cc31cefd", "node_id": "C_kwDOANBUbNoAKDU0N2U1MTFmYmRkYjIxNzFkODg5ZDhkMGM0ZGUyZjE5Y2MzMWNlZmQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-16T17:54:41Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:20Z"}, "message": "gccrs: Refactor PathProbeType code into CC file\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-path-probe.cc (PathProbeCandidate::Candidate::Candidate): refactor\n\t(PathProbeCandidate::PathProbeCandidate): likewise\n\t(PathProbeCandidate::as_string): likewise\n\t(PathProbeCandidate::is_enum_candidate): likewise\n\t(PathProbeCandidate::is_impl_candidate): likewise\n\t(PathProbeCandidate::is_trait_candidate): likewise\n\t(PathProbeCandidate::is_full_trait_item_candidate): likewise\n\t(PathProbeCandidate::get_error): likewise\n\t(PathProbeCandidate::is_error): likewise\n\t(PathProbeCandidate::get_defid): likewise\n\t(PathProbeCandidate::operator<): likewise\n\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): likewise", "tree": {"sha": "2f7c76e190ed159ec3ce12014bf08fe366c46059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7c76e190ed159ec3ce12014bf08fe366c46059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/547e511fbddb2171d889d8d0c4de2f19cc31cefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547e511fbddb2171d889d8d0c4de2f19cc31cefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547e511fbddb2171d889d8d0c4de2f19cc31cefd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547e511fbddb2171d889d8d0c4de2f19cc31cefd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26af4b0604d3a1da2b31405b0a132d1dc145a370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26af4b0604d3a1da2b31405b0a132d1dc145a370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26af4b0604d3a1da2b31405b0a132d1dc145a370"}], "stats": {"total": 191, "additions": 124, "deletions": 67}, "files": [{"sha": "be89ceb864574e24f3fc4ef1aa3082e90a4e7c0a", "filename": "gcc/rust/typecheck/rust-hir-path-probe.cc", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547e511fbddb2171d889d8d0c4de2f19cc31cefd/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547e511fbddb2171d889d8d0c4de2f19cc31cefd/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc?ref=547e511fbddb2171d889d8d0c4de2f19cc31cefd", "patch": "@@ -23,6 +23,115 @@\n namespace Rust {\n namespace Resolver {\n \n+// PathProbeCandidate\n+\n+PathProbeCandidate::Candidate::Candidate (EnumItemCandidate enum_field)\n+  : enum_field (enum_field)\n+{}\n+\n+PathProbeCandidate::Candidate::Candidate (ImplItemCandidate impl) : impl (impl)\n+{}\n+\n+PathProbeCandidate::Candidate::Candidate (TraitItemCandidate trait)\n+  : trait (trait)\n+{}\n+\n+PathProbeCandidate::PathProbeCandidate (CandidateType type, TyTy::BaseType *ty,\n+\t\t\t\t\tLocation locus,\n+\t\t\t\t\tEnumItemCandidate enum_field)\n+  : type (type), ty (ty), locus (locus), item (enum_field)\n+{}\n+\n+PathProbeCandidate::PathProbeCandidate (CandidateType type, TyTy::BaseType *ty,\n+\t\t\t\t\tLocation locus, ImplItemCandidate impl)\n+  : type (type), ty (ty), locus (locus), item (impl)\n+{}\n+\n+PathProbeCandidate::PathProbeCandidate (CandidateType type, TyTy::BaseType *ty,\n+\t\t\t\t\tLocation locus,\n+\t\t\t\t\tTraitItemCandidate trait)\n+  : type (type), ty (ty), locus (locus), item (trait)\n+{}\n+\n+std::string\n+PathProbeCandidate::as_string () const\n+{\n+  return \"PathProbe candidate TODO - as_string\";\n+}\n+\n+bool\n+PathProbeCandidate::is_enum_candidate () const\n+{\n+  return type == ENUM_VARIANT;\n+}\n+\n+bool\n+PathProbeCandidate::is_impl_candidate () const\n+{\n+  return type == IMPL_CONST || type == IMPL_TYPE_ALIAS || type == IMPL_FUNC;\n+}\n+\n+bool\n+PathProbeCandidate::is_trait_candidate () const\n+{\n+  return type == TRAIT_ITEM_CONST || type == TRAIT_TYPE_ALIAS\n+\t || type == TRAIT_FUNC;\n+}\n+\n+bool\n+PathProbeCandidate::is_full_trait_item_candidate () const\n+{\n+  return is_trait_candidate () && item.trait.impl == nullptr;\n+}\n+\n+PathProbeCandidate\n+PathProbeCandidate::get_error ()\n+{\n+  return PathProbeCandidate (ERROR, nullptr, Location (),\n+\t\t\t     ImplItemCandidate{nullptr, nullptr});\n+}\n+\n+bool\n+PathProbeCandidate::is_error () const\n+{\n+  return type == ERROR;\n+}\n+\n+DefId\n+PathProbeCandidate::get_defid () const\n+{\n+  switch (type)\n+    {\n+    case ENUM_VARIANT:\n+      return item.enum_field.variant->get_defid ();\n+      break;\n+\n+    case IMPL_CONST:\n+    case IMPL_TYPE_ALIAS:\n+    case IMPL_FUNC:\n+      return item.impl.impl_item->get_impl_mappings ().get_defid ();\n+      break;\n+\n+    case TRAIT_ITEM_CONST:\n+    case TRAIT_TYPE_ALIAS:\n+    case TRAIT_FUNC:\n+      return item.trait.item_ref->get_mappings ().get_defid ();\n+      break;\n+\n+    case ERROR:\n+    default:\n+      return UNKNOWN_DEFID;\n+    }\n+\n+  return UNKNOWN_DEFID;\n+}\n+\n+bool\n+PathProbeCandidate::operator< (const PathProbeCandidate &c) const\n+{\n+  return get_defid () < c.get_defid ();\n+}\n+\n // PathProbeType\n \n PathProbeType::PathProbeType (const TyTy::BaseType *receiver,"}, {"sha": "dd511ac41849450ac80189de08c2dfcfff4e93c9", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 15, "deletions": 67, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547e511fbddb2171d889d8d0c4de2f19cc31cefd/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547e511fbddb2171d889d8d0c4de2f19cc31cefd/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=547e511fbddb2171d889d8d0c4de2f19cc31cefd", "patch": "@@ -73,89 +73,37 @@ struct PathProbeCandidate\n     ImplItemCandidate impl;\n     TraitItemCandidate trait;\n \n-    Candidate (EnumItemCandidate enum_field) : enum_field (enum_field) {}\n-    Candidate (ImplItemCandidate impl) : impl (impl) {}\n-    Candidate (TraitItemCandidate trait) : trait (trait) {}\n+    Candidate (EnumItemCandidate enum_field);\n+    Candidate (ImplItemCandidate impl);\n+    Candidate (TraitItemCandidate trait);\n   } item;\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n-\t\t      EnumItemCandidate enum_field)\n-    : type (type), ty (ty), locus (locus), item (enum_field)\n-  {}\n+\t\t      EnumItemCandidate enum_field);\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n-\t\t      ImplItemCandidate impl)\n-    : type (type), ty (ty), locus (locus), item (impl)\n-  {}\n+\t\t      ImplItemCandidate impl);\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n-\t\t      TraitItemCandidate trait)\n-    : type (type), ty (ty), locus (locus), item (trait)\n-  {}\n+\t\t      TraitItemCandidate trait);\n \n-  std::string as_string () const\n-  {\n-    return \"PathProbe candidate TODO - as_string\";\n-  }\n+  std::string as_string () const;\n \n-  bool is_enum_candidate () const { return type == ENUM_VARIANT; }\n+  bool is_enum_candidate () const;\n \n-  bool is_impl_candidate () const\n-  {\n-    return type == IMPL_CONST || type == IMPL_TYPE_ALIAS || type == IMPL_FUNC;\n-  }\n+  bool is_impl_candidate () const;\n \n-  bool is_trait_candidate () const\n-  {\n-    return type == TRAIT_ITEM_CONST || type == TRAIT_TYPE_ALIAS\n-\t   || type == TRAIT_FUNC;\n-  }\n+  bool is_trait_candidate () const;\n \n-  bool is_full_trait_item_candidate () const\n-  {\n-    return is_trait_candidate () && item.trait.impl == nullptr;\n-  }\n+  bool is_full_trait_item_candidate () const;\n \n-  static PathProbeCandidate get_error ()\n-  {\n-    return PathProbeCandidate (ERROR, nullptr, Location (),\n-\t\t\t       ImplItemCandidate{nullptr, nullptr});\n-  }\n+  static PathProbeCandidate get_error ();\n \n-  bool is_error () const { return type == ERROR; }\n+  bool is_error () const;\n \n-  DefId get_defid () const\n-  {\n-    switch (type)\n-      {\n-      case ENUM_VARIANT:\n-\treturn item.enum_field.variant->get_defid ();\n-\tbreak;\n-\n-      case IMPL_CONST:\n-      case IMPL_TYPE_ALIAS:\n-      case IMPL_FUNC:\n-\treturn item.impl.impl_item->get_impl_mappings ().get_defid ();\n-\tbreak;\n-\n-      case TRAIT_ITEM_CONST:\n-      case TRAIT_TYPE_ALIAS:\n-      case TRAIT_FUNC:\n-\treturn item.trait.item_ref->get_mappings ().get_defid ();\n-\tbreak;\n-\n-      case ERROR:\n-      default:\n-\treturn UNKNOWN_DEFID;\n-      }\n-\n-    return UNKNOWN_DEFID;\n-  }\n+  DefId get_defid () const;\n \n-  bool operator<(const PathProbeCandidate &c) const\n-  {\n-    return get_defid () < c.get_defid ();\n-  }\n+  bool operator< (const PathProbeCandidate &c) const;\n };\n \n class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor"}]}