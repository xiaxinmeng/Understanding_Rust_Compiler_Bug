{"sha": "382522cb0336edecbfa2ee6445cd43407ebc6776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNTIyY2IwMzM2ZWRlY2JmYTJlZTY0NDVjZDQzNDA3ZWJjNjc3Ng==", "commit": {"author": {"name": "Maxim Kuznetsov", "email": "maks.kuznetsov@gmail.com", "date": "2013-05-06T19:35:44Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-05-06T19:35:44Z"}, "message": "Support {, } and | in assembly output\n\ngcc/\n\n2013-05-06  Maxim Kuznetsov  <maks.kuznetsov@gmail.com>\n\n\t* final.c (do_assembler_dialects): Don't handle curly braces and\n\tvertical bar escaped by % as dialect delimiters.\n\t(output_asm_insn): Print curly braces and vertical bar if escaped\n\tby % and ASSEMBLER_DIALECT defined.\n\t* doc/tm.texi.in (ASSEMBLER_DIALECT): Document new standard escapes.\n\t* doc/tm.texi: Regenerated.\n\ngcc/testsuite/\n\n2013-05-06  Maxim Kuznetsov  <maks.kuznetsov@gmail.com>\n\n\t* gcc.target/i386/asm-dialect-2.c: New testcase.\n\nFrom-SVN: r198641", "tree": {"sha": "91d98365dcceef73b7eaefd2d77bfc60e3759698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d98365dcceef73b7eaefd2d77bfc60e3759698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/382522cb0336edecbfa2ee6445cd43407ebc6776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382522cb0336edecbfa2ee6445cd43407ebc6776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/382522cb0336edecbfa2ee6445cd43407ebc6776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382522cb0336edecbfa2ee6445cd43407ebc6776/comments", "author": {"login": "mkuznets", "id": 1672743, "node_id": "MDQ6VXNlcjE2NzI3NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1672743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkuznets", "html_url": "https://github.com/mkuznets", "followers_url": "https://api.github.com/users/mkuznets/followers", "following_url": "https://api.github.com/users/mkuznets/following{/other_user}", "gists_url": "https://api.github.com/users/mkuznets/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkuznets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkuznets/subscriptions", "organizations_url": "https://api.github.com/users/mkuznets/orgs", "repos_url": "https://api.github.com/users/mkuznets/repos", "events_url": "https://api.github.com/users/mkuznets/events{/privacy}", "received_events_url": "https://api.github.com/users/mkuznets/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "48f69ac967d19b77921ca6109a97f0e2a7635456", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -1,3 +1,12 @@\n+2013-05-06  Maxim Kuznetsov  <maks.kuznetsov@gmail.com>\n+\n+\t* final.c (do_assembler_dialects): Don't handle curly braces and\n+\tvertical bar escaped by % as dialect delimiters.\n+\t(output_asm_insn): Print curly braces and vertical bar if escaped\n+\tby % and ASSEMBLER_DIALECT defined.\n+\t* doc/tm.texi.in (ASSEMBLER_DIALECT): Document new standard escapes.\n+\t* doc/tm.texi: Regenerated.\n+\n 2013-05-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n "}, {"sha": "2482eb484b06b4302cf89f5e9407443c9548c2ae", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -8729,7 +8729,9 @@ first argument of @code{asm_fprintf}.  This construct outputs\n @code{ASSEMBLER_DIALECT} is zero, one, two, etc.  Any special characters\n within these strings retain their usual meaning.  If there are fewer\n alternatives within the braces than the value of\n-@code{ASSEMBLER_DIALECT}, the construct outputs nothing.\n+@code{ASSEMBLER_DIALECT}, the construct outputs nothing. If it's needed\n+to print curly braces or @samp{|} character in assembler output directly,\n+@samp{%@{}, @samp{%@}} and @samp{%|} can be used.\n \n If you do not define this macro, the characters @samp{@{}, @samp{|} and\n @samp{@}} do not have any special meaning when used in templates or"}, {"sha": "611d6813a56eb2369f1a12d44797dd6f4a0cee12", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -8602,7 +8602,9 @@ first argument of @code{asm_fprintf}.  This construct outputs\n @code{ASSEMBLER_DIALECT} is zero, one, two, etc.  Any special characters\n within these strings retain their usual meaning.  If there are fewer\n alternatives within the braces than the value of\n-@code{ASSEMBLER_DIALECT}, the construct outputs nothing.\n+@code{ASSEMBLER_DIALECT}, the construct outputs nothing. If it's needed\n+to print curly braces or @samp{|} character in assembler output directly,\n+@samp{%@{}, @samp{%@}} and @samp{%|} can be used.\n \n If you do not define this macro, the characters @samp{@{}, @samp{|} and\n @samp{@}} do not have any special meaning when used in templates or"}, {"sha": "c836e5dc8428112cd4263b466f0c38a31f19f628", "filename": "gcc/final.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -3430,8 +3430,21 @@ do_assembler_dialects (const char *p, int *dialect)\n            DIALECT_NUMBER of strings ending with '|'.  */\n         for (i = 0; i < dialect_number; i++)\n           {\n-            while (*p && *p != '}' && *p++ != '|')\n-\t      ;\n+            while (*p && *p != '}')\n+\t      {\n+\t\tif (*p == '|')\n+\t\t  {\n+\t\t    p++;\n+\t\t    break;\n+\t\t  }\n+\n+\t\t/* Skip over any character after a percent sign.  */\n+\t\tif (*p == '%')\n+\t\t  p++;\n+\t\tif (*p)\n+\t\t  p++;\n+\t      }\n+\n             if (*p == '}')\n \t      break;\n           }\n@@ -3452,8 +3465,19 @@ do_assembler_dialects (const char *p, int *dialect)\n \t\t  output_operand_lossage (\"unterminated assembly dialect alternative\");\n \t\t  break;\n \t\t}\n+\n+\t      /* Skip over any character after a percent sign.  */\n+\t      if (*p == '%' && p[1])\n+\t\t{\n+\t\t  p += 2;\n+\t\t  continue;\n+\t\t}\n+\n+\t      if (*p++ == '}')\n+\t\tbreak;\n             }\n-          while (*p++ != '}');\n+          while (1);\n+\n           *dialect = 0;\n         }\n       else\n@@ -3546,11 +3570,17 @@ output_asm_insn (const char *templ, rtx *operands)\n #endif\n \n       case '%':\n-\t/* %% outputs a single %.  */\n-\tif (*p == '%')\n+\t/* %% outputs a single %.  %{, %} and %| print {, } and | respectively\n+\t   if ASSEMBLER_DIALECT defined and these characters have a special\n+\t   meaning as dialect delimiters.*/\n+\tif (*p == '%'\n+#ifdef ASSEMBLER_DIALECT\n+\t    || *p == '{' || *p == '}' || *p == '|'\n+#endif\n+\t    )\n \t  {\n+\t    putc (*p, asm_out_file);\n \t    p++;\n-\t    putc (c, asm_out_file);\n \t  }\n \t/* %= outputs a number which is unique to each insn in the entire\n \t   compilation.  This is useful for making local labels that are"}, {"sha": "73d27cf629692fcaab59ebb576a44476702e4933", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -1,3 +1,7 @@\n+2013-05-06  Maxim Kuznetsov  <maks.kuznetsov@gmail.com>\n+\n+\t* gcc.target/i386/asm-dialect-2.c: New testcase.\n+\n 2013-05-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57183"}, {"sha": "8386d64e52ca6a8185531145c2354e101068cbd7", "filename": "gcc/testsuite/gcc.target/i386/asm-dialect-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-dialect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382522cb0336edecbfa2ee6445cd43407ebc6776/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-dialect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-dialect-2.c?ref=382522cb0336edecbfa2ee6445cd43407ebc6776", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-masm=att\" } */\n+/* { dg-final { scan-assembler \"%{a}|\" } } */\n+\n+int a, b;\n+\n+void f()\n+{\n+  /* Check for escaped curly braces support.  */\n+  asm volatile (\"{%%%{a%}%||%%%}b}\" : :);\n+}"}]}