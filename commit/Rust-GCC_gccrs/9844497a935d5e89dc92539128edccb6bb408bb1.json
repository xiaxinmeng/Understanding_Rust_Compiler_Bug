{"sha": "9844497a935d5e89dc92539128edccb6bb408bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NDQ5N2E5MzVkNWU4OWRjOTI1MzkxMjhlZGNjYjZiYjQwOGJiMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T15:00:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T15:05:08Z"}, "message": "preprocessor: main file searching\n\nThis adds the capability to locate the main file on the user or system\ninclude paths.  That's extremely useful to users building header\nunits.  Searching has to be requiested (plain header-unit compilation\nwill not search).  Also, to make include_next work as expected when\nbuilding a header unit, we add a mechanism to retrofit a non-searched\nsource file as one on the include path.\n\n\tlibcpp/\n\t* include/cpplib.h (enum cpp_main_search): New.\n\t(struct cpp_options): Add main_search field.\n\t(cpp_main_loc): Declare.\n\t(cpp_retrofit_as_include): Declare.\n\t* internal.h (struct cpp_reader): Add main_loc field.\n\t(_cpp_in_main_source_file): Not main if main is a header.\n\t* init.c (cpp_read_main_file): Use main_search option to locate\n\tmain file.  Set main_loc\n\t* files.c (cpp_retrofit_as_include): New.", "tree": {"sha": "8556fefb85e32778246020206586c70ff3ffc56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8556fefb85e32778246020206586c70ff3ffc56c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9844497a935d5e89dc92539128edccb6bb408bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9844497a935d5e89dc92539128edccb6bb408bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9844497a935d5e89dc92539128edccb6bb408bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9844497a935d5e89dc92539128edccb6bb408bb1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b204d7722d30f44281dea3341070223475f1cff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b204d7722d30f44281dea3341070223475f1cff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b204d7722d30f44281dea3341070223475f1cff9"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "301b2379a23966a2ef348375fd6fe750551cc66b", "filename": "libcpp/files.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=9844497a935d5e89dc92539128edccb6bb408bb1", "patch": "@@ -1131,6 +1131,37 @@ cpp_find_header_unit (cpp_reader *pfile, const char *name, bool angle,\n   return file->path;\n }\n \n+/* Retrofit the just-entered main file asif it was an include.  This\n+   will permit correct include_next use, and mark it as a system\n+   header if that's where it resides.  We use filesystem-appropriate\n+   prefix matching of the include path to locate the main file.  */\n+void\n+cpp_retrofit_as_include (cpp_reader *pfile)\n+{\n+  /* We should be the outermost.  */\n+  gcc_assert (!pfile->buffer->prev);\n+\n+  if (const char *name = pfile->main_file->name)\n+    {\n+      /* Locate name on the include dir path, using a prefix match.  */\n+      size_t name_len = strlen (name);\n+      for (cpp_dir *dir = pfile->quote_include; dir; dir = dir->next)\n+\tif (dir->len < name_len\n+\t    && IS_DIR_SEPARATOR (name[dir->len])\n+\t    && !filename_ncmp (name, dir->name, dir->len))\n+\t  {\n+\t    pfile->main_file->dir = dir;\n+\t    if (dir->sysp)\n+\t      cpp_make_system_header (pfile, 1, 0);\n+\t    break;\n+\t  }\n+    }\n+\n+  /* Initialize controlling macro state.  */\n+  pfile->mi_valid = true;\n+  pfile->mi_cmacro = 0;\n+}\n+\n /* Could not open FILE.  The complication is dependency output.  */\n static void\n open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets,"}, {"sha": "91226cfc248d71b3fe77f97c96e754bd3aec6311", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=9844497a935d5e89dc92539128edccb6bb408bb1", "patch": "@@ -308,6 +308,15 @@ enum cpp_normalize_level {\n   normalized_none\n };\n \n+enum cpp_main_search \n+{\n+  CMS_none,    /* A regular source file.  */\n+  CMS_header,  /* Is a directly-specified header file (eg PCH or\n+\t\t  header-unit).  */\n+  CMS_user,    /* Search the user INCLUDE path.  */\n+  CMS_system,  /* Search the system INCLUDE path.  */\n+};\n+\n /* This structure is nested inside struct cpp_reader, and\n    carries all the options visible to the command line.  */\n struct cpp_options\n@@ -566,6 +575,8 @@ struct cpp_options\n \n   /* The maximum depth of the nested #include.  */\n   unsigned int max_include_depth;\n+\n+  cpp_main_search main_search : 8;\n };\n \n /* Diagnostic levels.  To get a diagnostic without associating a\n@@ -997,6 +1008,10 @@ extern const char *cpp_find_header_unit (cpp_reader *, const char *file,\n    too.  If there was an error opening the file, it returns NULL.  */\n extern const char *cpp_read_main_file (cpp_reader *, const char *,\n \t\t\t\t       bool injecting = false);\n+extern location_t cpp_main_loc (const cpp_reader *);\n+\n+/* Adjust for the main file to be an include.  */\n+extern void cpp_retrofit_as_include (cpp_reader *);\n \n /* Set up built-ins with special behavior.  Use cpp_init_builtins()\n    instead unless your know what you are doing.  */"}, {"sha": "f77dc26a003dc784c2b1585353681ee992ce7a0b", "filename": "libcpp/init.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=9844497a935d5e89dc92539128edccb6bb408bb1", "patch": "@@ -675,8 +675,14 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname, bool injecting)\n     deps_add_default_target (deps, fname);\n \n   pfile->main_file\n-    = _cpp_find_file (pfile, fname, &pfile->no_search_path, /*angle=*/0,\n-\t\t      _cpp_FFK_NORMAL, 0);\n+    = _cpp_find_file (pfile, fname,\n+\t\t      CPP_OPTION (pfile, preprocessed) ? &pfile->no_search_path\n+\t\t      : CPP_OPTION (pfile, main_search) == CMS_user\n+\t\t      ? pfile->quote_include\n+\t\t      : CPP_OPTION (pfile, main_search) == CMS_system\n+\t\t      ? pfile->bracket_include : &pfile->no_search_path,\n+\t\t      /*angle=*/0, _cpp_FFK_NORMAL, 0);\n+\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n \n@@ -698,7 +704,16 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname, bool injecting)\n \t\t\t     LINEMAP_LINE (last), LINEMAP_SYSP (last));\n       }\n \n-  return ORDINARY_MAP_FILE_NAME (LINEMAPS_LAST_ORDINARY_MAP (pfile->line_table));\n+  auto *map = LINEMAPS_LAST_ORDINARY_MAP (pfile->line_table);\n+  pfile->main_loc = MAP_START_LOCATION (map);\n+\n+  return ORDINARY_MAP_FILE_NAME (map);\n+}\n+\n+location_t\n+cpp_main_loc (const cpp_reader *pfile)\n+{\n+  return pfile->main_loc;\n }\n \n /* For preprocessed files, if the very first characters are"}, {"sha": "697fef053ba5d126d4953768239cd34cca2a6498", "filename": "libcpp/internal.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9844497a935d5e89dc92539128edccb6bb408bb1/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=9844497a935d5e89dc92539128edccb6bb408bb1", "patch": "@@ -591,6 +591,10 @@ struct cpp_reader\n   /* If non-zero, the lexer will use this location for the next token\n      instead of getting a location from the linemap.  */\n   location_t forced_token_location;\n+\n+  /* Location identifying the main source file -- intended to be line\n+     zero of said file.  */\n+  location_t main_loc;\n };\n \n /* Character classes.  Based on the more primitive macros in safe-ctype.h.\n@@ -643,7 +647,8 @@ _cpp_in_system_header (cpp_reader *pfile)\n inline int\n _cpp_in_main_source_file (cpp_reader *pfile)\n {\n-  return pfile->buffer->file == pfile->main_file;\n+  return (!CPP_OPTION (pfile, main_search)\n+\t  && pfile->buffer->file == pfile->main_file);\n }\n \n /* True if NODE is a macro for the purposes of ifdef, defined etc.  */"}]}