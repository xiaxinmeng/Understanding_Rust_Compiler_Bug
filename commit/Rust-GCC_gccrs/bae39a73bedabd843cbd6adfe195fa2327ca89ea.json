{"sha": "bae39a73bedabd843cbd6adfe195fa2327ca89ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlMzlhNzNiZWRhYmQ4NDNjYmQ2YWRmZTE5NWZhMjMyN2NhODllYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-10T15:17:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-10T15:17:35Z"}, "message": "c-typeck.c (digest_init): Add conversion for VECTOR_TYPEs.\n\n\t* c-typeck.c (digest_init): Add conversion for VECTOR_TYPEs.\ntestsuite:\n\t* gcc.dg/spe1.c: New test.\n\nFrom-SVN: r70296", "tree": {"sha": "67b720a7e8175bfc9f4532ab4ae4379f6b57648f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67b720a7e8175bfc9f4532ab4ae4379f6b57648f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae39a73bedabd843cbd6adfe195fa2327ca89ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae39a73bedabd843cbd6adfe195fa2327ca89ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae39a73bedabd843cbd6adfe195fa2327ca89ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae39a73bedabd843cbd6adfe195fa2327ca89ea/comments", "author": null, "committer": null, "parents": [{"sha": "bf12d54dac71bbf2194ebdab932fed9b180c3ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf12d54dac71bbf2194ebdab932fed9b180c3ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf12d54dac71bbf2194ebdab932fed9b180c3ce3"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "e94265ec929c4fffc9977fd2dd8bac16223d411d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae39a73bedabd843cbd6adfe195fa2327ca89ea", "patch": "@@ -1,3 +1,7 @@\n+2003-08-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-typeck.c (digest_init): Add conversion for VECTOR_TYPEs.\n+\n 2003-08-10  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_no_mips16_string): Remove."}, {"sha": "7d29b196e957d3f200c6984271391646786f873f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bae39a73bedabd843cbd6adfe195fa2327ca89ea", "patch": "@@ -4018,6 +4018,11 @@ digest_init (tree type, tree init, int require_constant)\n     {\n       if (code == POINTER_TYPE)\n \tinside_init = default_function_array_conversion (inside_init);\n+      \n+      if (code == VECTOR_TYPE)\n+\t/* Although the types are compatible, we may require a\n+\t   conversion.  */\n+\tinside_init = convert (type, inside_init);\n \n       if (require_constant && !flag_isoc99\n \t  && TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)"}, {"sha": "0c82d526ba5c8df2a1c9edf58e158f569d1f2024", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bae39a73bedabd843cbd6adfe195fa2327ca89ea", "patch": "@@ -1,5 +1,7 @@\n 2003-08-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* gcc.dg/spe1.c: New test.\n+\n \tPR c++/11670\n \t* g++.dg/expr/cast2.C: New test.\n \t"}, {"sha": "9ce56e08d547635186dc9bf659c30dd35b833bd8", "filename": "gcc/testsuite/gcc.dg/spe1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Ftestsuite%2Fgcc.dg%2Fspe1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae39a73bedabd843cbd6adfe195fa2327ca89ea/gcc%2Ftestsuite%2Fgcc.dg%2Fspe1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspe1.c?ref=bae39a73bedabd843cbd6adfe195fa2327ca89ea", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target powerpc-*-eabi* } } */\n+/* { dg-options \"-mcpu=8540 -mabi=spe -O0\" } */\n+\n+/* (Test with -O0 so we don't optimize any of them away).  */\n+\n+\n+typedef float __attribute__((vector_size(8))) __ev64_fs__;\n+\n+static __ev64_opaque__ Foo (void);\n+\n+void Bar ()\n+{\n+  __ev64_fs__ fs = Foo ();\n+}"}]}