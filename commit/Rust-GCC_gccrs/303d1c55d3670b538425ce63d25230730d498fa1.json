{"sha": "303d1c55d3670b538425ce63d25230730d498fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZDFjNTVkMzY3MGI1Mzg0MjVjZTYzZDI1MjMwNzMwZDQ5OGZhMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-01-02T12:44:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-01-02T12:44:44Z"}, "message": "re PR c++/5213 (ICE on (possibly) illegal code)\n\ncp:\n\tPR c++/5213\n\t* pt.c (convert_template_argument): Be more careful determining\n\twhen RECORD_TYPE templates are or are not templates.\ntestsuite:\n\t* g++.dg/template/ttp3.C: New test.\n\nFrom-SVN: r48468", "tree": {"sha": "149f61f435fc9cc5d0f31e60efc3ed3ac4bd20d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149f61f435fc9cc5d0f31e60efc3ed3ac4bd20d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303d1c55d3670b538425ce63d25230730d498fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303d1c55d3670b538425ce63d25230730d498fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303d1c55d3670b538425ce63d25230730d498fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303d1c55d3670b538425ce63d25230730d498fa1/comments", "author": null, "committer": null, "parents": [{"sha": "f53d0ff1433077903c2a3e805e5f0cd79163d509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53d0ff1433077903c2a3e805e5f0cd79163d509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f53d0ff1433077903c2a3e805e5f0cd79163d509"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "145f5bea273288adc2510a4fa019adda59eee864", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=303d1c55d3670b538425ce63d25230730d498fa1", "patch": "@@ -1,3 +1,9 @@\n+2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5213\n+\t* pt.c (convert_template_argument): Be more careful determining\n+\twhen RECORD_TYPE templates are or are not templates.\n+\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/775"}, {"sha": "3a0921fefa0f9a63163179fa99addd5898a5917e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=303d1c55d3670b538425ce63d25230730d498fa1", "patch": "@@ -1,6 +1,6 @@\n /* Handle parameterized types (templates) for GNU C++.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001  Free Software Foundation, Inc.\n+   2001, 2002  Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com) while at Watchmaker Computing.\n    Rewritten by Jason Merrill (jason@cygnus.com).\n \n@@ -3291,23 +3291,27 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n   requires_type = (TREE_CODE (parm) == TYPE_DECL\n \t\t   || requires_tmpl_type);\n \n-  /* Check if it is a class template.  If REQUIRES_TMPL_TYPE is true,\n-     we also accept implicitly created TYPE_DECL as a valid argument.\n-     This is necessary to handle the case where we pass a template name\n-     to a template template parameter in a scope where we've derived from\n-     in instantiation of that template, so the template name refers to that\n-     instantiation.  We really ought to handle this better.  */\n-  is_tmpl_type \n-    = ((TREE_CODE (arg) == TEMPLATE_DECL\n-\t&& TREE_CODE (DECL_TEMPLATE_RESULT (arg)) == TYPE_DECL)\n-       || TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n-       || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE\n-       || (TREE_CODE (arg) == RECORD_TYPE\n-\t   && CLASSTYPE_TEMPLATE_INFO (arg)\n-\t   && TREE_CODE (TYPE_NAME (arg)) == TYPE_DECL\n-\t   && DECL_ARTIFICIAL (TYPE_NAME (arg))\n-\t   && requires_tmpl_type\n-\t   && is_base_of_enclosing_class (arg, current_class_type)));\n+  if (TREE_CODE (arg) != RECORD_TYPE)\n+    is_tmpl_type = ((TREE_CODE (arg) == TEMPLATE_DECL\n+\t\t     && TREE_CODE (DECL_TEMPLATE_RESULT (arg)) == TYPE_DECL)\n+\t\t    || TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n+\t\t    || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE);\n+  else if (CLASSTYPE_TEMPLATE_INFO (arg) && !CLASSTYPE_USE_TEMPLATE (arg)\n+\t   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (arg)))\n+    {\n+      if (is_base_of_enclosing_class (arg, current_class_type))\n+\t/* This is a template name used within the scope of the\n+\t   template. It could be the template, or it could be the\n+\t   instantiation. Choose whichever makes sense.  */\n+\tis_tmpl_type = requires_tmpl_type;\n+      else\n+\tis_tmpl_type = 1;\n+    }\n+  else\n+    /* It is a non-template class, or a specialization of a template\n+       class, or a non-template member of a template class.  */\n+    is_tmpl_type = 0;\n+  \n   if (is_tmpl_type\n       && (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n \t  || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE))"}, {"sha": "fc18102da11ae501021d519ae9030f8211ca2f83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=303d1c55d3670b538425ce63d25230730d498fa1", "patch": "@@ -1,5 +1,7 @@\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/template/ttp3.C: New test.\n+\n \t* g++.dg/template/friend2.C: New test.\n \t* g++.old-deja/g++/brendan/crash8.C: Adjust location of error.\n "}, {"sha": "05bd44a172eaf8f4e942787c587d707b36b62e77", "filename": "gcc/testsuite/g++.dg/template/ttp3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303d1c55d3670b538425ce63d25230730d498fa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C?ref=303d1c55d3670b538425ce63d25230730d498fa1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 29 Dec 2001 <nathan@codesourcery.com>\n+\n+// PR 5213. We failed to spot that class List was a template, rather\n+// than a non-template or specialization\n+\n+\n+template <class T> class vector { };\n+\n+class OUTER {\n+  public:\n+  template <class T>\n+  class List { };\n+  \n+  vector<class List> data; // { dg-error \"type/value mismatch|expected a type|ISO C\" \"\" }\n+};\n+\n+template <class T>\n+class List { };\t\t\t// { dg-bogus \"previous declaration\" \"\" { xfail *-*-* } }\n+\n+// This next line should just do a lookup of 'class List', and then\n+// get a type/value mismatch. Instead we try and push 'class List'\n+// into the global namespace and get a redeclaration error.\n+vector<class List > data;\t// { dg-bogus \"`struct List' redeclared|type/value mismatch\" \"\" { xfail *-*-* } }"}]}