{"sha": "c74a03d23e9b1159e871f41552c1d2f73eb9812c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0YTAzZDIzZTliMTE1OWU4NzFmNDE1NTJjMWQyZjczZWI5ODEyYw==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2007-05-16T16:26:21Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2007-05-16T16:26:21Z"}, "message": "c-common.c (c_common_signed_or_unsigned_type): Emulate c_common_unsigned_type behavior.\n\n2007-05-16  Rafael Avila de Espindola  <espindola@google.com>\n\n       * c-common.c (c_common_signed_or_unsigned_type): Emulate\n       c_common_unsigned_type behavior.\n\nFrom-SVN: r124771", "tree": {"sha": "9256899583d49f3bd7680b74084471ceefc734be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9256899583d49f3bd7680b74084471ceefc734be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74a03d23e9b1159e871f41552c1d2f73eb9812c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74a03d23e9b1159e871f41552c1d2f73eb9812c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74a03d23e9b1159e871f41552c1d2f73eb9812c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74a03d23e9b1159e871f41552c1d2f73eb9812c/comments", "author": null, "committer": null, "parents": [{"sha": "0d8c60585e19e9d3eb1373528be19c33629d0c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8c60585e19e9d3eb1373528be19c33629d0c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8c60585e19e9d3eb1373528be19c33629d0c41"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "6285583bba2569c697f1ebffe6276de6eb590038", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a03d23e9b1159e871f41552c1d2f73eb9812c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a03d23e9b1159e871f41552c1d2f73eb9812c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c74a03d23e9b1159e871f41552c1d2f73eb9812c", "patch": "@@ -1,3 +1,8 @@\n+2007-05-16  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* c-common.c (c_common_signed_or_unsigned_type): Emulate \n+\tc_common_unsigned_type behavior.\n+\n 2007-05-16  Paolo Bonzini  <bonzini@gnu.org>\n \n         * config/i386/i386.c (legitimize_tls_address): Mark __tls_get_addr"}, {"sha": "6aa5e642c9b0bb399750ff27ae6dfdc1ffc42103", "filename": "gcc/c-common.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a03d23e9b1159e871f41552c1d2f73eb9812c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a03d23e9b1159e871f41552c1d2f73eb9812c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c74a03d23e9b1159e871f41552c1d2f73eb9812c", "patch": "@@ -2065,10 +2065,43 @@ c_common_signed_type (tree type)\n tree\n c_common_signed_or_unsigned_type (int unsignedp, tree type)\n {\n+  tree type1;\n   if (!INTEGRAL_TYPE_P (type)\n       || TYPE_UNSIGNED (type) == unsignedp)\n     return type;\n \n+  /* This block of code emulates the behavior of the old\n+     c_common_unsigned_type. In particular, it returns\n+     long_unsigned_type_node if passed a long, even when a int would\n+     have the same size. This is necessary for warnings to work\n+     correctly in archs where sizeof(int) == sizeof(long) */\n+\n+  type1 = TYPE_MAIN_VARIANT (type);\n+  if (type1 == signed_char_type_node || type1 == char_type_node || type1 == unsigned_char_type_node)\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+  if (type1 == integer_type_node || type1 == unsigned_type_node)\n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+  if (type1 == short_integer_type_node || type1 == short_unsigned_type_node)\n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+  if (type1 == long_integer_type_node || type1 == long_unsigned_type_node)\n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+  if (type1 == long_long_integer_type_node || type1 == long_long_unsigned_type_node)\n+    return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n+  if (type1 == widest_integer_literal_type_node || type1 == widest_unsigned_literal_type_node)\n+    return unsignedp ? widest_unsigned_literal_type_node : widest_integer_literal_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  if (type1 == intTI_type_node || type1 == unsigned_intTI_type_node)\n+    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+#endif\n+  if (type1 == intDI_type_node || type1 == unsigned_intDI_type_node)\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+  if (type1 == intSI_type_node || type1 == unsigned_intSI_type_node)\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+  if (type1 == intHI_type_node || type1 == unsigned_intHI_type_node)\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+  if (type1 == intQI_type_node || type1 == unsigned_intQI_type_node)\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+\n   /* For ENUMERAL_TYPEs in C++, must check the mode of the types, not\n      the precision; they have precision set to match their range, but\n      may use a wider mode to match an ABI.  If we change modes, we may"}]}