{"sha": "9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlN2FkN2YzYTdmNjFmZDYyYWM4MTU0NGFmMDRmOTUzNjhmNTk3Zg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-20T20:02:17Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-20T20:02:17Z"}, "message": "Use .init_arrary/.fini_array sections if possible.\n\n2011-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR other/46770\n\t* config.gcc (tm_file): Add initfini-array.h if\n\t.init_arrary/.fini_array are supported.\n\n\t* crtstuff.c: Don't generate .ctors nor .dtors sections if\n\tUSE_INITFINI_ARRAY is defined.\n\n\t* output.h (default_elf_init_array_asm_out_constructor): New.\n\t(default_elf_fini_array_asm_out_destructor): Likewise.\n\t* varasm.c (elf_init_array_section): Likewise.\n\t(elf_fini_array_section): Likewise.\n\t(get_elf_initfini_array_priority_section): Likewise.\n\t(default_elf_init_array_asm_out_constructor): Likewise.\n\t(default_elf_fini_array_asm_out_destructor): Likewise.\n\n\t* config/initfini-array.h: New.\n\nFrom-SVN: r177933", "tree": {"sha": "3906273c1671420742bbbcd2e6b652c9b3f19c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3906273c1671420742bbbcd2e6b652c9b3f19c95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13001f33ca62776df6dddf738d6f3f8633c3f3a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13001f33ca62776df6dddf738d6f3f8633c3f3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13001f33ca62776df6dddf738d6f3f8633c3f3a9"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "be56639748bf036920f53ee510e1eb0f4d1e3024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -1,3 +1,22 @@\n+2011-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR other/46770\n+\t* config.gcc (tm_file): Add initfini-array.h if\n+\t.init_arrary/.fini_array are supported.\n+\n+\t* crtstuff.c: Don't generate .ctors nor .dtors sections if\n+\tUSE_INITFINI_ARRAY is defined.\n+\n+\t* output.h (default_elf_init_array_asm_out_constructor): New.\n+\t(default_elf_fini_array_asm_out_destructor): Likewise.\n+\t* varasm.c (elf_init_array_section): Likewise.\n+\t(elf_fini_array_section): Likewise.\n+\t(get_elf_initfini_array_priority_section): Likewise.\n+\t(default_elf_init_array_asm_out_constructor): Likewise.\n+\t(default_elf_fini_array_asm_out_destructor): Likewise.\n+\n+\t* config/initfini-array.h: New.\n+\n 2011-08-20  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_class_max_nregs): Check that the mode is"}, {"sha": "7f29213b74d3d127bfba0c6abd72bb882a961a3b", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -3058,6 +3058,11 @@ if test x$with_schedule = x; then\n \tesac\n fi\n \n+# Support --enable-initfini-array.\n+if test x$enable_initfini_array = xyes; then\n+  tm_file=\"${tm_file} initfini-array.h\"\n+fi\n+\n # Validate and mark as valid any --with options supported\n # by this target.  In order to use a particular --with option\n # you must list it in supported_defaults; validating the value"}, {"sha": "8aaadf686afa866f7c7a8e8cc0ab66f32b2a81db", "filename": "gcc/config/initfini-array.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fconfig%2Finitfini-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fconfig%2Finitfini-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finitfini-array.h?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -0,0 +1,37 @@\n+/* Definitions for ELF systems with .init_array/.fini_array section\n+   support.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define USE_INITFINI_ARRAY\n+\n+#undef INIT_SECTION_ASM_OP\n+#undef FINI_SECTION_ASM_OP\n+\n+#undef INIT_ARRAY_SECTION_ASM_OP\n+#define INIT_ARRAY_SECTION_ASM_OP\n+\n+#undef FINI_ARRAY_SECTION_ASM_OP\n+#define FINI_ARRAY_SECTION_ASM_OP\n+\n+/* Use .init_array/.fini_array section for constructors and destructors. */\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR default_elf_init_array_asm_out_constructor\n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR default_elf_fini_array_asm_out_destructor"}, {"sha": "010d472765dfb1f9a5ba6d32aa55c84f1349cbb1", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -1,7 +1,8 @@\n /* Specialized bits of code needed to support construction and\n    destruction of file-scope objects in C++ code.\n    Copyright (C) 1991, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GCC.\n@@ -189,6 +190,9 @@ typedef void (*func_ptr) (void);\n    refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__\n    symbol in crtbegin.o, where they are defined.  */\n \n+/* No need for .ctors/.dtors section if linker can place them in\n+   .init_array/.fini_array section.  */\n+#ifndef USE_INITFINI_ARRAY\n /* The -1 is a flag to __do_global_[cd]tors indicating that this table\n    does not start with a count of elements.  */\n #ifdef CTOR_LIST_BEGIN\n@@ -219,6 +223,7 @@ STATIC func_ptr __DTOR_LIST__[1]\n   __attribute__((section(\".dtors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n #endif /* __DTOR_LIST__ alternatives */\n+#endif /* USE_INITFINI_ARRAY */\n \n #ifdef USE_EH_FRAME_REGISTRY\n /* Stick a label at the beginning of the frame unwind info so we can register\n@@ -489,6 +494,9 @@ __do_global_ctors_1(void)\n \n #elif defined(CRT_END) /* ! CRT_BEGIN */\n \n+/* No need for .ctors/.dtors section if linker can place them in\n+   .init_array/.fini_array section.  */\n+#ifndef USE_INITFINI_ARRAY\n /* Put a word containing zero at the end of each of our two lists of function\n    addresses.  Note that the words defined here go into the .ctors and .dtors\n    sections of the crtend.o file, and since that file is always linked in\n@@ -534,6 +542,7 @@ STATIC func_ptr __DTOR_END__[1]\n   __attribute__((used, section(\".dtors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n #endif\n+#endif /* USE_INITFINI_ARRAY */\n \n #ifdef EH_FRAME_SECTION_NAME\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;"}, {"sha": "6b7c4b8781c76b20079e138ebefa4b51a8d8801a", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -654,6 +654,8 @@ extern void file_end_indicate_split_stack (void);\n \n extern void default_elf_asm_output_external (FILE *file, tree,\n \t\t\t\t\t     const char *);\n+extern void default_elf_init_array_asm_out_constructor (rtx, int);\n+extern void default_elf_fini_array_asm_out_destructor (rtx, int);\n extern int maybe_assemble_visibility (tree);\n \n extern int default_address_cost (rtx, bool);"}, {"sha": "218baf3bcf298510112fca0ed163d819e8ee626f", "filename": "gcc/varasm.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce7ad7f3a7f61fd62ac81544af04f95368f597f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9ce7ad7f3a7f61fd62ac81544af04f95368f597f", "patch": "@@ -7352,4 +7352,62 @@ make_debug_expr_from_rtl (const_rtx exp)\n   return dval;\n }\n \n+static GTY(()) section *elf_init_array_section;\n+static GTY(()) section *elf_fini_array_section;\n+\n+static section *\n+get_elf_initfini_array_priority_section (int priority,\n+\t\t\t\t\t bool constructor_p)\n+{\n+  section *sec;\n+  if (priority != DEFAULT_INIT_PRIORITY)\n+    {\n+      char buf[18];\n+      sprintf (buf, \"%s.%.5u\", \n+\t       constructor_p ? \".init_array\" : \".fini_array\",\n+\t       priority);\n+      sec = get_section (buf, SECTION_WRITE, NULL_TREE);\n+    }\n+  else\n+    {\n+      if (constructor_p)\n+\t{\n+\t  if (elf_init_array_section == NULL)\n+\t    elf_init_array_section\n+\t      = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t     \"\\t.section\\t.init_array\");\n+\t  sec = elf_init_array_section;\n+\t}\n+      else\n+\t{\n+\t  if (elf_fini_array_section == NULL)\n+\t    elf_fini_array_section\n+\t      = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t     \"\\t.section\\t.fini_array\");\n+\t  sec = elf_fini_array_section;\n+\t}\n+    }\n+  return sec;\n+}\n+\n+/* Use .init_array section for constructors. */\n+\n+void\n+default_elf_init_array_asm_out_constructor (rtx symbol, int priority)\n+{\n+  section *sec = get_elf_initfini_array_priority_section (priority,\n+\t\t\t\t\t\t\t  true);\n+  assemble_addr_to_section (symbol, sec);\n+}\n+\n+/* Use .fini_array section for destructors. */\n+\n+void\n+default_elf_fini_array_asm_out_destructor (rtx symbol, int priority)\n+{\n+  section *sec = get_elf_initfini_array_priority_section (priority,\n+\t\t\t\t\t\t\t  false);\n+  assemble_addr_to_section (symbol, sec);\n+}\n+\n #include \"gt-varasm.h\""}]}