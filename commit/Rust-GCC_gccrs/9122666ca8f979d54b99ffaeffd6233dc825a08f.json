{"sha": "9122666ca8f979d54b99ffaeffd6233dc825a08f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEyMjY2NmNhOGY5NzlkNTRiOTlmZmFlZmZkNjIzM2RjODI1YTA4Zg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2009-07-13T19:09:27Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-07-13T19:09:27Z"}, "message": "t-gthr-win32 (LIB2FUNCS_EXTRA): Remove file config/i386/mingw-tls.c.\n\n2009-07-13  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Remove file\n\tconfig/i386/mingw-tls.c.\n\t* config/i386/mingw-tls.c: Removed.\n\nFrom-SVN: r149593", "tree": {"sha": "226490dcd821de2f2856cdcd7c73fbd75d3e17fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226490dcd821de2f2856cdcd7c73fbd75d3e17fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9122666ca8f979d54b99ffaeffd6233dc825a08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9122666ca8f979d54b99ffaeffd6233dc825a08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9122666ca8f979d54b99ffaeffd6233dc825a08f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9122666ca8f979d54b99ffaeffd6233dc825a08f/comments", "author": null, "committer": null, "parents": [{"sha": "2b78f78f5481ad4459065f61c2caeac6e47278a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b78f78f5481ad4459065f61c2caeac6e47278a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b78f78f5481ad4459065f61c2caeac6e47278a8"}], "stats": {"total": 215, "additions": 7, "deletions": 208}, "files": [{"sha": "f24600fb804dc6e3d3f9248f2e799e486e5b09c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9122666ca8f979d54b99ffaeffd6233dc825a08f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9122666ca8f979d54b99ffaeffd6233dc825a08f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9122666ca8f979d54b99ffaeffd6233dc825a08f", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Remove file\n+\tconfig/i386/mingw-tls.c.\n+\t* config/i386/mingw-tls.c: Removed.\n+\n 2009-07-13  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-loop.c (get_initial_def_for_reduction): Ensure that the "}, {"sha": "8495a96e3b959e3854d2d055b373bc977254ef88", "filename": "gcc/config/i386/mingw-tls.c", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b78f78f5481ad4459065f61c2caeac6e47278a8/gcc%2Fconfig%2Fi386%2Fmingw-tls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b78f78f5481ad4459065f61c2caeac6e47278a8/gcc%2Fconfig%2Fi386%2Fmingw-tls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-tls.c?ref=2b78f78f5481ad4459065f61c2caeac6e47278a8", "patch": "@@ -1,206 +0,0 @@\n-/* Catch and clean up data allocated in TLS.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2009 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* This part is based on the implementation of Mumit Khan  <khan@nanotech.wisc.edu>\n- * provided to mingw under public domain and ported for libgcc by Kai Tietz.\n- */\n-\n-#define WIN32_LEAN_AND_MEAN\n-#include <windows.h>\n-#undef WIN32_LEAN_AND_MEAN\n-#include <stdlib.h>\n-\n-/* The list of threads active with key/dtor pairs. */\n-typedef struct __mingwthr_key {\n-  DWORD key;\n-  void (*dtor) (void *);\n-  struct __mingwthr_key *next;\n-} __mingwthr_key_t;\n-\n-#if defined(_WIN32) && !defined(__CYGWIN__)\n-\n-/* Static functions for libgcc.  */\n-#ifdef SHARED\n-__declspec(dllexport)\n-int _CRT_MT = 1;\n-\n-/* Shared functions for libgcc.  */\n-\n-/* Prototypes.  */\n-__declspec(dllexport) int __mingwthr_key_dtor (DWORD key, void (*) (void *));\n-__declspec(dllexport) int __mingwthr_remove_key_dtor (DWORD);\n-BOOL APIENTRY DllMain (HANDLE, DWORD, LPVOID);\n-\n-\n-/* To protect the thread/key association data structure modifications. */\n-static CRITICAL_SECTION __mingwthr_cs;\n-static __mingwthr_key_t *key_dtor_list;\n-\n-/*\n- * __mingwthr_key_add:\n- *\n- * Add key/dtor association for this thread. If the thread entry does not\n- * exist, create a new one and add to the head of the threads list; add\n- * the new assoc at the head of the keys list. \n- *\n- */\n-\n-static int\n-___mingwthr_add_key_dtor (DWORD key, void (*dtor) (void *))\n-{\n-  __mingwthr_key_t *new_key;\n-\n-  new_key = (__mingwthr_key_t *) calloc (1, sizeof (__mingwthr_key_t));\n-  if (new_key == NULL)\n-    return -1;\n-  \n-  new_key->key = key;\n-  new_key->dtor = dtor;\n-\n-  EnterCriticalSection (&__mingwthr_cs);\n-\n-  new_key->next = key_dtor_list;\n-  key_dtor_list = new_key;\n-\n-  LeaveCriticalSection (&__mingwthr_cs);\n-\n-  return 0;\n-}\n-\n-static int\n-___mingwthr_remove_key_dtor (DWORD key)\n-{\n-  __mingwthr_key_t *prev_key;\n-  __mingwthr_key_t *cur_key;\n-\n-  EnterCriticalSection (&__mingwthr_cs);\n-\n-  prev_key = NULL;\n-  cur_key = key_dtor_list;\n-\n-  while (cur_key != NULL)\n-    {\n-       if( cur_key->key == key )\n-\t {\n-\t    /* take key/dtor out of list */\n-\t    if (prev_key == NULL)\n-\t      key_dtor_list = cur_key->next;\n-\t    else\n-\t      prev_key->next = cur_key->next;\n-\n-\t    free (cur_key);\n-\t    break;\n-\t }\n-\n-       prev_key = cur_key;\n-       cur_key = cur_key->next;\n-    }\n-\n-  LeaveCriticalSection (&__mingwthr_cs);\n-\n-  return 0;\n-}\n-\n-/*\n- * __mingwthr_run_key_dtors (void):\n- *\n- * Callback from DllMain when thread detaches to clean up the key\n- * storage. \n- *\n- * Note that this does not delete the key itself, but just runs\n- * the dtor if the current value are both non-NULL. Note that the\n- * keys with NULL dtors are not added by __mingwthr_key_dtor, the\n- * only public interface, so we don't need to check. \n- *\n- */\n-\n-static void\n-__mingwthr_run_key_dtors (void)\n-{\n-  __mingwthr_key_t *keyp;\n-\n-  EnterCriticalSection (&__mingwthr_cs);\n-\n-  for (keyp = key_dtor_list; keyp; )\n-    {\n-       LPVOID value = TlsGetValue (keyp->key);\n-       if (GetLastError () == ERROR_SUCCESS)\n-\t {\n-\t    if (value)\n-\t       (*keyp->dtor) (value);\n-\t }\n-       keyp = keyp->next;\n-    }\n-  \n-  LeaveCriticalSection (&__mingwthr_cs);\n-}\n-\n-/*\n- * __mingwthr_register_key_dtor (DWORD key, void (*dtor) (void *))\n- *\n- * Public interface called by C++ exception handling mechanism in\n- * libgcc (cf: __gthread_key_create).\n- *\n- */\n-\n-__declspec(dllexport)\n-int\n-__mingwthr_key_dtor (DWORD key, void (*dtor) (void *))\n-{\n-  if (dtor)\n-    return ___mingwthr_add_key_dtor (key, dtor);\n-\n-  return 0;\n-}\n-\n-__declspec(dllexport)\n-int\n-__mingwthr_remove_key_dtor (DWORD key)\n-{\n-   return ___mingwthr_remove_key_dtor (key);\n-}\n-\n-BOOL APIENTRY\n-DllMain (HANDLE hDllHandle __attribute__ ((__unused__)),\n-\t DWORD reason /* Reason this function is being called. */,\n-\t LPVOID reserved __attribute__ ((__unused__)))\n-{\n-  switch (reason)\n-    {\n-    case DLL_PROCESS_ATTACH:\n-       InitializeCriticalSection (&__mingwthr_cs);\n-       break;\n-\n-    case DLL_PROCESS_DETACH:\n-      __mingwthr_run_key_dtors ();\n-       DeleteCriticalSection (&__mingwthr_cs);\n-      break;\n-\n-    case DLL_THREAD_ATTACH:\n-      break;\n-\n-    case DLL_THREAD_DETACH:\n-      __mingwthr_run_key_dtors ();\n-      break;\n-    }\n-  return TRUE;\n-}\n-#endif\n-#endif"}, {"sha": "f67fa1e25a8ce550c0c0f46c334482c6cf5f3793", "filename": "gcc/config/i386/t-gthr-win32", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9122666ca8f979d54b99ffaeffd6233dc825a08f/gcc%2Fconfig%2Fi386%2Ft-gthr-win32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9122666ca8f979d54b99ffaeffd6233dc825a08f/gcc%2Fconfig%2Fi386%2Ft-gthr-win32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gthr-win32?ref=9122666ca8f979d54b99ffaeffd6233dc825a08f", "patch": "@@ -1,3 +1,2 @@\n # We hide calls to w32api needed for w32 thread support here:\n-LIB2FUNCS_EXTRA = $(srcdir)/config/i386/gthr-win32.c \\\n-\t$(srcdir)/config/i386/mingw-tls.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/i386/gthr-win32.c"}]}