{"sha": "2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "node_id": "C_kwDOANBUbNoAKDJlZjBlNzVkMGJiYzgwYmMwNmEwYTM5MTM1ZTM1NjRmOTA3ZTM5Yzg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-22T12:32:22Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-22T12:32:22Z"}, "message": "Implement constant-folding simplifications of reductions.\n\nThis patch addresses a code quality regression in GCC 12 by implementing\nsome constant folding/simplification transformations for REDUC_PLUS_EXPR\nin match.pd.  The motivating example is gcc.dg/vect/pr89440.c which with\n-O2 -ffast-math (with vectorization now enabled) gets optimized to:\n\nfloat f (float x)\n{\n  vector(4) float vect_x_14.11;\n  vector(4) float _2;\n  float _32;\n\n  _2 = {x_9(D), 0.0, 0.0, 0.0};\n  vect_x_14.11_29 = _2 + { 1.0e+1, 2.6e+1, 4.2e+1, 5.8e+1 };\n  _32 = .REDUC_PLUS (vect_x_14.11_29); [tail call]\n  return _32;\n}\n\nWith these proposed new transformations, we can simplify the\nabove code even further.\n\nfloat f (float x)\n{\n  float _32;\n  _32 = x_9(D) + 1.36e+2;\n  return _32;\n}\n\n[which happens to match what we'd produce with -fno-tree-vectorize,\nand with GCC 11].\n\n2022-02-22  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* fold-const.cc (ctor_single_nonzero_element): New function to\n\treturn the single non-zero element of a (vector) constructor.\n\t* fold-const.h (ctor_single_nonzero_element): Prototype here.\n\t* match.pd (reduc (constructor@0)): Simplify reductions of a\n\tconstructor containing a single non-zero element.\n\t(reduc (@0 op VECTOR_CST) ->  (reduc @0) op CONST): Simplify\n\treductions of vector operations of the same operator with\n\tconstant vector operands.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-reduc-1.c: New test case.", "tree": {"sha": "1ceacdf57c7c09f000456ec8aa17f0669a7a71b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ceacdf57c7c09f000456ec8aa17f0669a7a71b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f59f067610f22c3f2ec9b1516e24b85836676ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f59f067610f22c3f2ec9b1516e24b85836676ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f59f067610f22c3f2ec9b1516e24b85836676ed"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "39a5a52958d87497f301826e706886b290771a2d", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "patch": "@@ -16792,6 +16792,26 @@ address_compare (tree_code code, tree type, tree op0, tree op1,\n   return equal;\n }\n \n+/* Return the single non-zero element of a CONSTRUCTOR or NULL_TREE.  */\n+tree\n+ctor_single_nonzero_element (const_tree t)\n+{\n+  unsigned HOST_WIDE_INT idx;\n+  constructor_elt *ce;\n+  tree elt = NULL_TREE;\n+\n+  if (TREE_CODE (t) != CONSTRUCTOR)\n+    return NULL_TREE;\n+  for (idx = 0; vec_safe_iterate (CONSTRUCTOR_ELTS (t), idx, &ce); idx++)\n+    if (!integer_zerop (ce->value) && !real_zerop (ce->value))\n+      {\n+\tif (elt)\n+\t  return NULL_TREE;\n+\telt = ce->value;\n+      }\n+  return elt;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "a4ff55418a5db55ac28c6816b1728bce1de32d7a", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "patch": "@@ -225,6 +225,7 @@ extern const char *c_getstr (tree);\n extern wide_int tree_nonzero_bits (const_tree);\n extern int address_compare (tree_code, tree, tree, tree, tree &, tree &,\n \t\t\t    poly_int64 &, poly_int64 &, bool);\n+extern tree ctor_single_nonzero_element (const_tree);\n \n /* Return OFF converted to a pointer offset type suitable as offset for\n    POINTER_PLUS_EXPR.  Use location LOC for this conversion.  */"}, {"sha": "cad61848daada9cc3ceb600084285dc4c9b18f4f", "filename": "gcc/match.pd", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "patch": "@@ -7532,6 +7532,24 @@ and,\n        (BIT_FIELD_REF:elt_type @0 { size; } { pos; })\n        { elt; })))))))\n \n+/* Fold reduction of a single nonzero element constructor.  */\n+(for reduc (IFN_REDUC_PLUS IFN_REDUC_IOR IFN_REDUC_XOR)\n+  (simplify (reduc (CONSTRUCTOR@0))\n+    (with { tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t\t ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n+\t    tree elt = ctor_single_nonzero_element (ctor); }\n+      (if (elt\n+\t   && !HONOR_SNANS (type)\n+\t   && !HONOR_SIGNED_ZEROS (type))\n+\t{ elt; }))))\n+\n+/* Fold REDUC (@0 op VECTOR_CST) as REDUC (@0) op REDUC (VECTOR_CST).  */\n+(for reduc (IFN_REDUC_PLUS IFN_REDUC_MAX IFN_REDUC_MIN IFN_REDUC_FMAX\n+\t    IFN_REDUC_FMIN IFN_REDUC_AND IFN_REDUC_IOR IFN_REDUC_XOR)\n+     op (plus max min IFN_FMAX IFN_FMIN bit_and bit_ior bit_xor)\n+  (simplify (reduc (op @0 VECTOR_CST@1))\n+    (op (reduc:type @0) (reduc:type @1))))\n+\n (simplify\n  (vec_perm @0 @1 VECTOR_CST@2)\n  (with"}, {"sha": "c8360b0fc7d1977a98ac404b69a3d1b0050af2be", "filename": "gcc/testsuite/gcc.dg/fold-reduc-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reduc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef0e75d0bbc80bc06a0a39135e3564f907e39c8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reduc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reduc-1.c?ref=2ef0e75d0bbc80bc06a0a39135e3564f907e39c8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -fdump-tree-optimized\" } */\n+float foo (float x)\n+{\n+ int i;\n+ float j;\n+ float a = 0;\n+ for (i = 0; i < 4; ++i)\n+   {\n+     for (j = 0; j < 4; ++j)\n+       {\n+         a += 1;\n+         x += a;\n+       }\n+   }\n+ return x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"REDUC_PLUS\" \"optimized\"} } */"}]}