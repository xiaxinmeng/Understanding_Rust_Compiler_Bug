{"sha": "bd5bd7ac814586764703bfafe74b3b123f03a202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ1YmQ3YWM4MTQ1ODY3NjQ3MDNiZmFmZTc0YjNiMTIzZjAzYTIwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-30T23:16:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-30T23:16:23Z"}, "message": "alpha.c: Remove mentions of deprecates macros in comments...\n\n\t* config/alpha/alpha.c: Remove mentions of deprecates macros\n\tin comments, remove some target-independent comments about target\n\tmacros, and/or add minimal function comments for target hook\n\timplementations.\n\t* config/avr/avr.c: Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ip2k/ip2k.c: Likewise.\n\t* config/iq2000/iq2000.c: Likewise.\n\t* config/m32r/m32r.h: Likewise.\n\t* config/m68hc11/m68hc11.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/mmix/mmix.c: Likewise.\n\t* config/mn10300/mn10300.c: Likewise.\n\t* config/pa/pa.c: Likewise.\n\t* config/pdp11/pdp11.c: Likewise.\n\t* config/rs6000/rs6000.h: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sh/sh.h: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/xtensa/xtensa.c: Likewise.\n\nFrom-SVN: r77005", "tree": {"sha": "f190f5aa757ea9e5e18f1e0342621c5711cb26c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f190f5aa757ea9e5e18f1e0342621c5711cb26c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd5bd7ac814586764703bfafe74b3b123f03a202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5bd7ac814586764703bfafe74b3b123f03a202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5bd7ac814586764703bfafe74b3b123f03a202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5bd7ac814586764703bfafe74b3b123f03a202/comments", "author": null, "committer": null, "parents": [{"sha": "808ededc6f474450d3df665f24e8561f37af8d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808ededc6f474450d3df665f24e8561f37af8d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808ededc6f474450d3df665f24e8561f37af8d1b"}], "stats": {"total": 120, "additions": 76, "deletions": 44}, "files": [{"sha": "96c6efea1cc6f9e8f83c12213b13b2921e59e9b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1,3 +1,28 @@\n+2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.c: Remove mentions of deprecates macros\n+\tin comments, remove some target-independent comments about target\n+\tmacros, and/or add minimal function comments for target hook\n+\timplementations.\n+\t* config/avr/avr.c: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ip2k/ip2k.c: Likewise.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/m32r/m32r.h: Likewise.\n+\t* config/m68hc11/m68hc11.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/mmix/mmix.c: Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pdp11/pdp11.c: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\n 2004-01-30  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR optimization/12147\n@@ -8,7 +33,7 @@\n \n 2004-01-30  Jan Hubicka  <jh@suse.cz>\n \n-\t* reload.c (get_secondary_mem):  Fix updating of\n+\t* reload.c (get_secondary_mem): Fix updating of\n \tsecondary_memlocs_elim_used.\n \n 2004-01-30  Richard Henderson  <rth@redhat.com>"}, {"sha": "276359c13526e897c6f3a041e9a01c691b019fe7", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -6240,7 +6240,7 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   if (TARGET_ABI_UNICOSMK)\n     std_expand_builtin_va_start (valist, nextarg);\n \n-  /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base\n+  /* For Unix, TARGET_SETUP_INCOMING_VARARGS moves the starting address base\n      up by 48, storing fp arg registers in the first 48 bytes, and the\n      integer arg registers in the next 48 bytes.  This is only done,\n      however, if any integer registers need to be stored."}, {"sha": "80e6fa9ed38c4410978ed61307c0ef21d4acf7b6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -5361,20 +5361,26 @@ avr_out_sbxx_branch (rtx insn, rtx operands[])\n   return \"\";\n }\n \n+/* Worker function for TARGET_ASM_CONSTRUCTOR.  */\n+\n static void\n avr_asm_out_ctor (rtx symbol, int priority)\n {\n   fputs (\"\\t.global __do_global_ctors\\n\", asm_out_file);\n   default_ctor_section_asm_out_constructor (symbol, priority);\n }\n \n+/* Worker function for TARGET_ASM_DESTRUCTOR.  */\n+\n static void\n avr_asm_out_dtor (rtx symbol, int priority)\n {\n   fputs (\"\\t.global __do_global_dtors\\n\", asm_out_file);\n   default_dtor_section_asm_out_destructor (symbol, priority);\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n avr_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}, {"sha": "74c5465b355c596f04051c35d206b0edc6442913", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1422,9 +1422,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* How Large Values are Returned */\n \n-/* If you define this macro to be 0, then the conventions used for structure\n-   and union return values are decided by the `RETURN_IN_MEMORY' macro.  */\n-\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n \f"}, {"sha": "07537f678be1a0aef74446e07935321fcb5b2439", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -6196,12 +6196,16 @@ ip2k_unsigned_comparison_operator (rtx op, enum machine_mode mode)\n           && unsigned_condition (GET_CODE (op)) == GET_CODE (op));\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n ip2k_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n   return (TYPE_MODE (type) == BLKmode) ? int_size_in_bytes (type) > 8 : 0;\n }\n \n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.  */\n+\n static void\n ip2k_setup_incoming_varargs (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,"}, {"sha": "b4281d4d2d3ef4cac83f000419c3e01a36907dce", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -3284,13 +3284,17 @@ iq2000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   return NULL_RTX;\n }\n \f\n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n iq2000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n   return ((int_size_in_bytes (type) > (2 * UNITS_PER_WORD))\n \t  || (int_size_in_bytes (type) == -1));\n }\n \n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.  */\n+\n static void\n iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n \t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,"}, {"sha": "0370c458db34b8db578c3d5a8c103f9abe7657b8", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1158,7 +1158,7 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* ??? What about r1 in DI/DF values.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n-/* Tell GCC to use RETURN_IN_MEMORY.  */\n+/* Tell GCC to use TARGET_RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \f\n /* Function entry and exit.  */"}, {"sha": "564079803a65dbbbfa665870dcb5c87411199b11", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -5504,6 +5504,8 @@ m68hc11_rtx_costs (rtx x, int code, int outer_code, int *total)\n }\n \f\n \n+/* Worker function for TARGET_ASM_FILE_START.  */\n+\n static void\n m68hc11_file_start (void)\n {\n@@ -5513,20 +5515,26 @@ m68hc11_file_start (void)\n }\n \n \n+/* Worker function for TARGET_ASM_CONSTRUCTOR.  */\n+\n static void\n m68hc11_asm_out_constructor (rtx symbol, int priority)\n {\n   default_ctor_section_asm_out_constructor (symbol, priority);\n   fprintf (asm_out_file, \"\\t.globl\\t__do_global_ctors\\n\");\n }\n \n+/* Worker function for TARGET_ASM_DESTRUCTOR.  */\n+\n static void\n m68hc11_asm_out_destructor (rtx symbol, int priority)\n {\n   default_dtor_section_asm_out_destructor (symbol, priority);\n   fprintf (asm_out_file, \"\\t.globl\\t__do_global_dtors\\n\");\n }\n \n+/* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n+\n static rtx\n m68hc11_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \t\t\t  int incoming ATTRIBUTE_UNUSED)"}, {"sha": "0a503f0f3fbe3da06edfcf5720e95c4b9050ecf6", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1949,7 +1949,7 @@ mcore_expand_block_move (rtx dst_mem, rtx src_mem, rtx * operands)\n /* Code to generate prologue and epilogue sequences.  */\n static int number_of_regs_before_varargs;\n \n-/* Set by SETUP_INCOMING_VARARGS to indicate to prolog that this is\n+/* Set by TARGET_SETUP_INCOMING_VARARGS to indicate to prolog that this is\n    for a varargs function.  */\n static int current_function_anonymous_args;\n "}, {"sha": "46bfcea210c3ce1a5fb107a5eb47bcc71aafedb2", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -792,9 +792,9 @@ mmix_asm_output_mi_thunk (FILE *stream,\n \t\t\t  HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\t  tree func)\n {\n-  /* If you define STRUCT_VALUE to 0, rather than use STRUCT_VALUE_REGNUM,\n-     (i.e. pass location of structure to return as invisible first\n-     argument) you need to tweak this code too.  */\n+  /* If you define TARGET_STRUCT_VALUE_RTX that returns 0 (i.e. pass\n+     location of structure to return as invisible first argument), you\n+     need to tweak this code too.  */\n   const char *regname = reg_names[MMIX_FIRST_INCOMING_ARG_REGNUM];\n \n   if (delta >= 0 && delta < 65536)"}, {"sha": "03b54b9603d8bf466ec6342fb1bc69f5369afa05", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1418,6 +1418,8 @@ initial_offset (int from, int to)\n   abort ();\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n mn10300_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}, {"sha": "0cce6a9e376e46df16b5211e5bb1376b87570726", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -9096,13 +9096,17 @@ pa_globalize_label (FILE *stream, const char *name)\n   }\n }\n \n+/* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n+\n static rtx\n pa_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \t\t     int incoming ATTRIBUTE_UNUSED)\n {\n   return gen_rtx_REG (Pmode, PA_STRUCT_VALUE_REGNUM);\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n bool\n pa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}, {"sha": "2ef56c0b1428db36bfffbbe672baee26eed0379d", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1700,6 +1700,8 @@ output_addr_const_pdp11 (FILE *file, rtx x)\n     }\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n pdp11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}, {"sha": "23dd0829b6212d6fda117f4c4735a9726643ed3e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1645,7 +1645,7 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n /* DRAFT_V4_STRUCT_RET defaults off.  */\n #define DRAFT_V4_STRUCT_RET 0\n \n-/* Let RETURN_IN_MEMORY control what happens.  */\n+/* Let TARGET_RETURN_IN_MEMORY control what happens.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n /* Mode of stack savearea."}, {"sha": "15a9fdebdf846ec5f1241319c0fd77d6c63e4d1e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -92,7 +92,7 @@ static int pragma_trapa;\n    interrupted.  */\n int pragma_nosave_low_regs;\n \n-/* This is used for communication between SETUP_INCOMING_VARARGS and\n+/* This is used for communication between TARGET_SETUP_INCOMING_VARARGS and\n    sh_expand_prologue.  */\n int current_function_anonymous_args;\n \n@@ -6520,10 +6520,6 @@ sh_function_arg_advance (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n \t  : ROUND_ADVANCE (GET_MODE_SIZE (mode)))));\n }\n \n-/* If the structure value address is not passed in a register, define\n-   `STRUCT_VALUE' as an expression returning an RTX for the place\n-   where the address is passed.  If it returns 0, the address is\n-   passed as an \"invisible\" first argument.  */\n /* The Renesas calling convention doesn't quite fit into this scheme since\n    the address is passed like an invisible argument, but one that is always\n    passed in memory.  */\n@@ -6535,6 +6531,8 @@ sh_struct_value_rtx (tree fndecl, int incoming ATTRIBUTE_UNUSED)\n   return gen_rtx_REG (Pmode, 2);\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n sh_return_in_memory (tree type, tree fndecl)\n {"}, {"sha": "caece67bdacc73fcaa9c9327d2a88f990b202102", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1126,7 +1126,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n #define STATIC_CHAIN_REGNUM\t(TARGET_SH5 ? 1 : 3)\n \n /* Don't default to pcc-struct-return, because we have already specified\n-   exactly how to return structures in the RETURN_IN_MEMORY macro.  */\n+   exactly how to return structures in the TARGET_RETURN_IN_MEMORY\n+   target hook.  */\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "6f9be4f8432954fb58f6c691ca82e3abb1f43e68", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -4852,7 +4852,7 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n   cum->libcall_p = fntype == 0;\n }\n \n-/* Handle the PROMOTE_PROTOTYPES macro.\n+/* Handle the TARGET_PROMOTE_PROTOTYPES target hook.\n    When a prototype says `char' or `short', really pass an `int'.  */\n \n static bool\n@@ -4861,7 +4861,7 @@ sparc_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n   return TARGET_ARCH32 ? true : false;\n }\n \n-/* Handle the STRICT_ARGUMENT_NAMING macro.  */\n+/* Handle the TARGET_STRICT_ARGUMENT_NAMING target hook.  */\n \n static bool\n sparc_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n@@ -4870,7 +4870,7 @@ sparc_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n   return TARGET_V9 ? true : false;\n }\n \n-/* Handle the RETURN_IN_MEMORY macro.\n+/* Handle the TARGET_RETURN_IN_MEMORY target hook.\n    Specify whether to return the return value in memory.  */\n \n static bool\n@@ -4887,7 +4887,7 @@ sparc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \t     && (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 32));\n }\n \n-/* Handle the STRUCT_VALUE macro.\n+/* Handle the TARGET_STRUCT_VALUE target hook.\n    Return where to find the structure return value address.  */\n \n static rtx"}, {"sha": "0ba2eb542df1751c2509d8e30f3f09da9af84e32", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -748,10 +748,6 @@ if (TARGET_ARCH64\t\t\t\t\\\n     && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n   (MODE) = word_mode;\n \n-/* Define this macro if the promotion described by PROMOTE_MODE\n-   should _only_ be performed for outgoing function arguments or\n-   function return values, as specified by PROMOTE_FUNCTION_ARGS\n-   and PROMOTE_FUNCTION_RETURN, respectively.  */\n /* This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n    for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n    for this value.  For TARGET_ARCH64 we need it, as we don't have instructions"}, {"sha": "cdb8c971cebd9de17ad3a5e0c4d8f5337946dbae", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -1420,25 +1420,8 @@ xstormy16_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n   emit_move_insn (reg_addr_mem, reg_fnaddr);\n }\n \n-/* Create an RTX representing the place where a function returns a\n-   value of data type VALTYPE.  VALTYPE is a tree node representing a\n-   data type.  Write `TYPE_MODE (VALTYPE)' to get the machine mode\n-   used to represent that type.  On many machines, only the mode is\n-   relevant.  (Actually, on most machines, scalar values are returned\n-   in the same place regardless of mode).\n-\n-   If `TARGET_PROMOTE_FUNCTION_RETURN' is defined to return true, you\n-   must apply the same promotion rules specified in `PROMOTE_MODE' if\n-   VALTYPE is a scalar type.\n-\n-   If the precise function being called is known, FUNC is a tree node\n-   (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This makes it\n-   possible to use a different value-returning convention for specific\n-   functions when all their calls are known.\n-\n-   `FUNCTION_VALUE' is not used for return vales with aggregate data types,\n-   because these are returned in another way.  See `STRUCT_VALUE_REGNUM' and\n-   related macros.  */\n+/* Worker function for FUNCTION_VALUE.  */\n+\n rtx\n xstormy16_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n {"}, {"sha": "6e6a0b4ad252a84b0ae5476bd02b9a8e2bf0dcc3", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5bd7ac814586764703bfafe74b3b123f03a202/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=bd5bd7ac814586764703bfafe74b3b123f03a202", "patch": "@@ -3052,6 +3052,8 @@ xtensa_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n xtensa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}]}