{"sha": "c3b0bfe175273179cf5dc786c571ea88867898b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiMGJmZTE3NTI3MzE3OWNmNWRjNzg2YzU3MWVhODg4Njc4OThiNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-11-03T22:23:35Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-11-03T22:23:35Z"}, "message": "doxygroups.cc: Add markup for namespace tr2.\n\n2011-11-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/doxygroups.cc: Add markup for namespace tr2.\n\t* include/tr2/bool_set: Adjust doxygen markup.\n\t* include/tr2/dynamic_bitset: Same.\n\t* include/tr2/type_traits: Same.\n\nFrom-SVN: r180874", "tree": {"sha": "f20253c4edbcf090ba60382cd76dbe646842cee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20253c4edbcf090ba60382cd76dbe646842cee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3b0bfe175273179cf5dc786c571ea88867898b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b0bfe175273179cf5dc786c571ea88867898b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b0bfe175273179cf5dc786c571ea88867898b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b0bfe175273179cf5dc786c571ea88867898b7/comments", "author": null, "committer": null, "parents": [{"sha": "1838afec3ecd649c333b89b9b30db1d275e337d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1838afec3ecd649c333b89b9b30db1d275e337d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1838afec3ecd649c333b89b9b30db1d275e337d2"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "c282177c76b17b439fc5b9b852cdf01429046d29", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3b0bfe175273179cf5dc786c571ea88867898b7", "patch": "@@ -1,3 +1,10 @@\n+2011-11-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/doxygroups.cc: Add markup for namespace tr2.\n+\t* include/tr2/bool_set: Adjust doxygen markup.\n+\t* include/tr2/dynamic_bitset: Same.\n+\t* include/tr2/type_traits: Same.\n+\n 2011-11-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/html/*: Regenerate."}, {"sha": "1212b6ff5f06bd25813f088f2fcce58bef30ab9e", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=c3b0bfe175273179cf5dc786c571ea88867898b7", "patch": "@@ -1,5 +1,5 @@\n /*\n-   Copyright (C) 2001, 2002, 2005, 2008, 2009, 2010\n+   Copyright (C) 2001, 2002, 2005, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    See license.html for license.\n \n@@ -29,6 +29,12 @@\n /** @namespace std::tr1::__detail\n  *  @brief Implementation details not part of the namespace std::tr1 interface.\n */\n+/** @namespace std::tr2\n+ *  @brief ISO C++ TR2 entities toplevel namespace is std::tr2.\n+*/\n+/** @namespace std::tr2::__detail\n+ *  @brief Implementation details not part of the namespace std::tr2 interface.\n+*/\n /** @namespace __gnu_cxx\n  *  @brief GNU extensions for public use.\n */"}, {"sha": "f577ed0c76c637a638c38a77a0748a97d3076d08", "filename": "libstdc++-v3/include/tr2/bool_set", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set?ref=c3b0bfe175273179cf5dc786c571ea88867898b7", "patch": "@@ -26,16 +26,6 @@\n  *  This is a TR2 C++ Library header.\n  */\n \n-//\n-//  Sort of an implementation of bool_set in n2136 Herv\ufffd Br\ufffdnnimann,\n-//  Guillaume Melquiond, Sylvain Pion.\n-//\n-//  The implicit conversion to bool is slippery!  I may use the new\n-//  explicit conversion.  This has been specialized in the language so\n-//  that in contexts requiring a bool the conversion happens\n-//  implicitly.  Thus most objections should be eliminated.\n-//\n-\n #ifndef _GLIBCXX_TR2_BOOL_SET\n #define _GLIBCXX_TR2_BOOL_SET 1\n \n@@ -50,6 +40,17 @@ namespace tr2\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   *  bool_set\n+   *\n+   *  See N2136, Bool_set: multi-valued logic\n+   *  by Herv\ufffd Br\ufffdnnimann, Guillaume Melquiond, Sylvain Pion.\n+   *\n+   *  The implicit conversion to bool is slippery!  I may use the new\n+   *  explicit conversion.  This has been specialized in the language\n+   *  so that in contexts requiring a bool the conversion happens\n+   *  implicitly.  Thus most objections should be eliminated.\n+   */\n   class bool_set\n   {\n   public:\n@@ -60,7 +61,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ///  Constructor from bool.\n     bool_set(bool __t) : _M_b(_Bool_set_val(__t)) { }\n \n-    ///\n     // I'm not sure about this.\n     bool contains(bool_set __b) const\n     { return this->is_singleton() && this->equals(__b); }"}, {"sha": "b5c3bf3fcc8b283cf181cbd84ff36cd3f562105f", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=c3b0bfe175273179cf5dc786c571ea88867898b7", "patch": "@@ -120,11 +120,11 @@ public:\n       }\n \n       void\n-      _M_assign(const __dynamic_bitset_base<block_type, allocator_type>& __b)\n+      _M_assign(const __dynamic_bitset_base& __b)\n       { this->_M_w = __b._M_w; }\n \n       void\n-      _M_swap(__dynamic_bitset_base<block_type, allocator_type>& __b)\n+      _M_swap(__dynamic_bitset_base& __b)\n       { this->_M_w.swap(__b._M_w); }\n \n       void\n@@ -178,7 +178,7 @@ public:\n       { return this->_M_w[_M_w.size() - 1]; }\n \n       void\n-      _M_do_and(const __dynamic_bitset_base<block_type, allocator_type>& __x)\n+      _M_do_and(const __dynamic_bitset_base& __x)\n       {\n \tif (__x._M_w.size() == this->_M_w.size())\n \t  for (size_t __i = 0; __i < this->_M_w.size(); ++__i)\n@@ -188,7 +188,7 @@ public:\n       }\n \n       void\n-      _M_do_or(const __dynamic_bitset_base<block_type, allocator_type>& __x)\n+      _M_do_or(const __dynamic_bitset_base& __x)\n       {\n \tif (__x._M_w.size() == this->_M_w.size())\n \t  for (size_t __i = 0; __i < this->_M_w.size(); ++__i)\n@@ -198,7 +198,7 @@ public:\n       }\n \n       void\n-      _M_do_xor(const __dynamic_bitset_base<block_type, allocator_type>& __x)\n+      _M_do_xor(const __dynamic_bitset_base& __x)\n       {\n \tif (__x._M_w.size() == this->_M_w.size())\n \t  for (size_t __i = 0; __i < this->_M_w.size(); ++__i)\n@@ -208,7 +208,7 @@ public:\n       }\n \n       void\n-      _M_do_dif(const __dynamic_bitset_base<block_type, allocator_type>& __x)\n+      _M_do_dif(const __dynamic_bitset_base& __x)\n       {\n \tif (__x._M_w.size() == this->_M_w.size())\n \t  for (size_t __i = 0; __i < this->_M_w.size(); ++__i)\n@@ -245,7 +245,7 @@ public:\n       }\n \n       bool\n-      _M_is_equal(const __dynamic_bitset_base<block_type, allocator_type>& __x) const\n+      _M_is_equal(const __dynamic_bitset_base& __x) const\n       {\n \tif (__x.size() == this->size())\n \t  {\n@@ -259,7 +259,7 @@ public:\n       }\n \n       bool\n-      _M_is_less(const __dynamic_bitset_base<block_type, allocator_type>& __x) const\n+      _M_is_less(const __dynamic_bitset_base& __x) const\n       {\n \tif (__x.size() == this->size())\n \t  {\n@@ -296,7 +296,7 @@ public:\n       }\n \n       bool\n-      _M_is_subset_of(const __dynamic_bitset_base<block_type, allocator_type>& __b)\n+      _M_is_subset_of(const __dynamic_bitset_base& __b)\n       {\n \tif (__b.size() == this->size())\n \t  {\n@@ -310,7 +310,7 @@ public:\n       }\n \n       bool\n-      _M_is_proper_subset_of(const __dynamic_bitset_base<block_type, allocator_type>& __b) const\n+      _M_is_proper_subset_of(const __dynamic_bitset_base& __b) const\n       {\n \tif (this->is_subset_of(__b))\n \t  {\n@@ -387,7 +387,7 @@ public:\n \t      this->_M_w[__wshift] = this->_M_w[0] << __offset;\n \t    }\n \n-\t  ////std::fill(this->_M_w.begin(), this->_M_w.begin() + __wshift,\n+\t  //// std::fill(this->_M_w.begin(), this->_M_w.begin() + __wshift,\n \t  ////          static_cast<_WordT>(0));\n \t}\n     }"}, {"sha": "4ec411810473bcde50b2fe7aa2ea701becb06daa", "filename": "libstdc++-v3/include/tr2/type_traits", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b0bfe175273179cf5dc786c571ea88867898b7/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits?ref=c3b0bfe175273179cf5dc786c571ea88867898b7", "patch": "@@ -43,19 +43,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @defgroup metaprogramming Type Traits\n    * @ingroup utilities\n    *\n-   * Compile time type transformation and information.\n    * @{\n    */\n \n+  /**\n+   *  See N2965: Type traits and base classes\n+   *  by Michael Spertus\n+   */\n+\n+  /**\n+   *  Simple typelist. Compile-time list of types.\n+   */\n   template<typename... _Elements>\n     struct typelist;\n \n+  /// Specialization for an empty typelist.\n   template<>\n     struct typelist<>\n     {\n       typedef std::true_type \t\t\tempty;\n     };\n \n+  /// Partial specialization.\n   template<typename _First, typename... _Rest>\n     struct typelist<_First, _Rest...>\n     {\n@@ -72,23 +81,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n     };\n \n-  // Sequence abstraction metafunctions default to looking in the type\n+  /// Sequence abstraction metafunctions for manipulating a typelist.\n+\n+\n+  /// Return the first type in a typelist.\n   template<typename _Tp>\n     struct first : public _Tp::first { };\n \n+  /// Return the typelist minus the first type.\n   template<typename _Tp>\n     struct rest : public _Tp::rest { };\n \n+  /// Query to see if a typelist is empty.\n   template<typename _Tp>\n     struct empty : public _Tp::empty { };\n \n \n+  /// Enumerate all the base classes of a class. Form of a typelist.\n   template<typename _Tp>\n     struct bases\n     {\n       typedef typelist<__bases(_Tp)...> \ttype;\n     };\n \n+  /// Enumerate all the direct base classes of a class. Form of a typelist.\n   template<typename _Tp>\n     struct direct_bases\n     {"}]}