{"sha": "1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwMjc5NTZkMGJhYWUyZmJkZWZmNWY0YjY5MjNhNGU2YzNkYjliYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-02-12T07:31:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-02-12T07:31:56Z"}, "message": "re PR c++/84281 (Heap grows indefinitely)\n\n2018-02-12  Richard Biener  <rguenther@suse.de>\n\n\tPR c++/84281\n\t* constexpr.c (cxx_eval_vec_init_1): Use a RANGE_EXPR to compact\n\tuniform constructors and delay allocating them fully.\n\nFrom-SVN: r257580", "tree": {"sha": "1dfb7387dd815e035113b489926ceeefa0a43928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfb7387dd815e035113b489926ceeefa0a43928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c337f3612f66f7bcf716dc84a7be89e0344109cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c337f3612f66f7bcf716dc84a7be89e0344109cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c337f3612f66f7bcf716dc84a7be89e0344109cc"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "bb7e9173072456bbdec018fee94e05aebdb9241c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "patch": "@@ -1,3 +1,9 @@\n+2018-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/84281\n+\t* constexpr.c (cxx_eval_vec_init_1): Use a RANGE_EXPR to compact\n+\tuniform constructors and delay allocating them fully.\n+\n 2018-02-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84036 - ICE with variadic capture."}, {"sha": "d89bdd5a6a43bd903be728b0082314ab4a87deb7", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "patch": "@@ -2885,7 +2885,6 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n   unsigned HOST_WIDE_INT max = tree_to_uhwi (array_type_nelts_top (atype));\n   verify_ctor_sanity (ctx, atype);\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n-  vec_alloc (*p, max + 1);\n   bool pre_init = false;\n   unsigned HOST_WIDE_INT i;\n \n@@ -2978,13 +2977,14 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t{\n \t  if (new_ctx.ctor != ctx->ctor)\n \t    eltinit = new_ctx.ctor;\n-\t  for (i = 1; i < max; ++i)\n-\t    {\n-\t      idx = build_int_cst (size_type_node, i);\n-\t      CONSTRUCTOR_APPEND_ELT (*p, idx, unshare_constructor (eltinit));\n-\t    }\n+\t  tree range = build2 (RANGE_EXPR, size_type_node,\n+\t\t\t       build_int_cst (size_type_node, 1),\n+\t\t\t       build_int_cst (size_type_node, max - 1));\n+\t  CONSTRUCTOR_APPEND_ELT (*p, range, unshare_constructor (eltinit));\n \t  break;\n \t}\n+      else if (i == 0)\n+\tvec_safe_reserve (*p, max);\n     }\n \n   if (!*non_constant_p)"}]}