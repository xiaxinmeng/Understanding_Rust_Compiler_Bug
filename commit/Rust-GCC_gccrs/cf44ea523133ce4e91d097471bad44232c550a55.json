{"sha": "cf44ea523133ce4e91d097471bad44232c550a55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0NGVhNTIzMTMzY2U0ZTkxZDA5NzQ3MWJhZDQ0MjMyYzU1MGE1NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-28T21:13:35Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-28T21:13:35Z"}, "message": "c-lex.h (parse_in): Change parse_in to a cpp_reader *.\n\n\t* c-lex.h (parse_in): Change parse_in to a cpp_reader *.\n\t* c-decl.c (c_decode_option): Update to match.\n\t* c-lex.c (init_c_lex, yyparse): Update to match.\n\t* c-lang.c (lang_init_options): Use cpp_create_reader.\n\t* cppinit.c (cpp_init): Rename initialize.\n\t(cpp_reader_init): Rename cpp_create_reader.  Create the\n\treader.  Initialize cpplib if appropriate.\n\t* cpplib.h (cpp_create_reader) New prototype.\n\t(cpp_init, cpp_reader_init): Delete prototypes.\n\t* cppmain.c (general_init, setup_callbacks): New functions.\n\t(main): Use them.\n\t* fix-header.c (scan_in): Change type to cpp_reader *.\n\t(read_scan_file): Update for new cpplib interface and scan_in type.\n\n\t* cp/decl.c (parse_in): Change to cpp_reader *.\n\t(lang_decode_option): Update.\n\t* cp/lex.c (lang_init_options): Use new cpplib interface.\n\t(init_cp_pragma, finish_parse, handle_pragma_implementation): Update.\n\t* cp/spew.c (read_token): Update.\n\t* objc/objc-act.c (lang_init_options): Update new cpplib interface.\n\nFrom-SVN: r37826", "tree": {"sha": "e48c58ce615d53fe8e02183447bad8c0843a2462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48c58ce615d53fe8e02183447bad8c0843a2462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf44ea523133ce4e91d097471bad44232c550a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf44ea523133ce4e91d097471bad44232c550a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf44ea523133ce4e91d097471bad44232c550a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf44ea523133ce4e91d097471bad44232c550a55/comments", "author": null, "committer": null, "parents": [{"sha": "74d2f859d248c7181a01a6d54bd45a27ce22ae21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d2f859d248c7181a01a6d54bd45a27ce22ae21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d2f859d248c7181a01a6d54bd45a27ce22ae21"}], "stats": {"total": 290, "additions": 156, "deletions": 134}, "files": [{"sha": "abd16929a52f34c990d87051949a32a43c2ad193", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -1,3 +1,26 @@\n+2000-11-28  Neil Booth  <neilb@earthling.net>\n+\n+\t* c-lex.h (parse_in): Change parse_in to a cpp_reader *.\n+\t* c-decl.c (c_decode_option): Update to match.\n+\t* c-lex.c (init_c_lex, yyparse): Update to match.\n+\t* c-lang.c (lang_init_options): Use cpp_create_reader.\n+\t* cppinit.c (cpp_init): Rename initialize.\n+\t(cpp_reader_init): Rename cpp_create_reader.  Create the\n+\treader.  Initialize cpplib if appropriate.\n+\t* cpplib.h (cpp_create_reader) New prototype.\n+\t(cpp_init, cpp_reader_init): Delete prototypes.\n+\t* cppmain.c (general_init, setup_callbacks): New functions.\n+\t(main): Use them.\n+\t* fix-header.c (scan_in): Change type to cpp_reader *.\n+\t(read_scan_file): Update for new cpplib interface and scan_in type.\n+\n+\t* cp/decl.c (parse_in): Change to cpp_reader *.\n+\t(lang_decode_option): Update.\n+\t* cp/lex.c (lang_init_options): Use new cpplib interface.\n+\t(init_cp_pragma, finish_parse, handle_pragma_implementation): Update.\n+\t* cp/spew.c (read_token): Update.\n+\t* objc/objc-act.c (lang_init_options): Update new cpplib interface.\n+\n 2000-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* loop.c (load_mems): Avoid using next_label to find end_label. If"}, {"sha": "50e557a8322725721b8a9e33b42a5a2ff33991c2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -509,7 +509,7 @@ c_decode_option (argc, argv)\n   const char *option_value = NULL;\n   char *p = argv[0];\n \n-  strings_processed = cpp_handle_option (&parse_in, argc, argv);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv);\n \n   if (!strcmp (p, \"-lang-objc\"))\n     c_language = clk_objective_c;"}, {"sha": "fb4dbee611639f6b0e0eeb949fc3a0070788d17a", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -52,8 +52,7 @@ lang_decode_option (argc, argv)\n void\n lang_init_options ()\n {\n-  cpp_init ();\n-  cpp_reader_init (&parse_in, CLK_GNUC89);\n+  parse_in = cpp_create_reader (CLK_GNUC89);\n \n   /* Mark as \"unspecified\".  */\n   flag_bounds_check = -1;"}, {"sha": "c76d86c3d462d819bf2feb8ee08f0aadd3ed9703", "filename": "gcc/c-lex.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -122,12 +122,12 @@ init_c_lex (filename)\n   GET_ENVIRONMENT (literal_codeset, \"LANG\");\n #endif\n \n-  parse_in.cb.ident = cb_ident;\n-  parse_in.cb.change_file = cb_change_file;\n-  parse_in.cb.def_pragma = cb_def_pragma;\n+  parse_in->cb.ident = cb_ident;\n+  parse_in->cb.change_file = cb_change_file;\n+  parse_in->cb.def_pragma = cb_def_pragma;\n \n-  /* Make sure parse_in.digraphs matches flag_digraphs.  */\n-  CPP_OPTION (&parse_in, digraphs) = flag_digraphs;\n+  /* Make sure parse_in->digraphs matches flag_digraphs.  */\n+  CPP_OPTION (parse_in, digraphs) = flag_digraphs;\n \n   if (filename == 0 || !strcmp (filename, \"-\"))\n     filename = \"stdin\";\n@@ -145,7 +145,7 @@ init_c_lex (filename)\n int\n yyparse()\n {\n-  if (! cpp_start_read (&parse_in, orig_filename))\n+  if (! cpp_start_read (parse_in, orig_filename))\n     return 1;\t\t\t/* cpplib has emitted an error.  */\n \n   return yyparse_1();\n@@ -951,13 +951,13 @@ c_lex (value)\n \n   retry:\n   timevar_push (TV_CPP);\n-  cpp_get_token (&parse_in, &tok);\n+  cpp_get_token (parse_in, &tok);\n   timevar_pop (TV_CPP);\n \n   /* The C++ front end does horrible things with the current line\n      number.  To ensure an accurate line number, we must reset it\n      every time we return a token.  */\n-  lex_lineno = cpp_get_line (&parse_in)->line;\n+  lex_lineno = cpp_get_line (parse_in)->line;\n \n   *value = NULL_TREE;\n   lineno = lex_lineno;"}, {"sha": "17fdc0735d205154a8f79f8b302b676c61c77560", "filename": "gcc/c-lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -35,6 +35,6 @@ extern tree is_class_name PARAMS ((tree));\n extern int indent_level;\n \n struct cpp_reader;\n-extern struct cpp_reader parse_in;\n+extern struct cpp_reader* parse_in;\n \n #endif"}, {"sha": "00017aa5d6fcaff92b702075b6a763a1c404404f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"cpplib.h\"\n-extern cpp_reader  parse_in;\n+extern cpp_reader *parse_in;\n \n /* This structure contains information about the initializations\n    and/or destructions required for a particular priority level.  */\n@@ -569,7 +569,7 @@ lang_decode_option (argc, argv)\n   int strings_processed;\n   const char *p = argv[0];\n \n-  strings_processed = cpp_handle_option (&parse_in, argc, argv);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv);\n \n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     /* ignore */;"}, {"sha": "0565704e32fdfdfc28315bfe69e456aa8758e667", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -79,7 +79,6 @@ static void init_operators PARAMS ((void));\n #endif\n \n #include \"cpplib.h\"\n-extern cpp_reader  parse_in;\n \n /* Pending language change.\n    Positive is push count, negative is pop count.  */\n@@ -246,8 +245,7 @@ static const char *cplus_tree_code_name[] = {\n void\n lang_init_options ()\n {\n-  cpp_init ();\n-  cpp_reader_init (&parse_in, CLK_GNUCXX);\n+  parse_in = cpp_create_reader (CLK_GNUCXX);\n \n   /* Default exceptions on.  */\n   flag_exceptions = 1;\n@@ -661,16 +659,16 @@ init_reswords ()\n static void\n init_cp_pragma ()\n {\n-  cpp_register_pragma (&parse_in, 0, \"vtable\", handle_pragma_vtable);\n-  cpp_register_pragma (&parse_in, 0, \"unit\", handle_pragma_unit);\n+  cpp_register_pragma (parse_in, 0, \"vtable\", handle_pragma_vtable);\n+  cpp_register_pragma (parse_in, 0, \"unit\", handle_pragma_unit);\n \n-  cpp_register_pragma (&parse_in, 0, \"interface\", handle_pragma_interface);\n-  cpp_register_pragma (&parse_in, 0, \"implementation\",\n+  cpp_register_pragma (parse_in, 0, \"interface\", handle_pragma_interface);\n+  cpp_register_pragma (parse_in, 0, \"implementation\",\n \t\t       handle_pragma_implementation);\n \n-  cpp_register_pragma_space (&parse_in, \"GCC\");\n-  cpp_register_pragma (&parse_in, \"GCC\", \"interface\", handle_pragma_interface);\n-  cpp_register_pragma (&parse_in, \"GCC\", \"implementation\",\n+  cpp_register_pragma_space (parse_in, \"GCC\");\n+  cpp_register_pragma (parse_in, \"GCC\", \"interface\", handle_pragma_interface);\n+  cpp_register_pragma (parse_in, \"GCC\", \"implementation\",\n \t\t       handle_pragma_implementation);\n }\n \n@@ -742,8 +740,8 @@ init_parse (filename)\n void\n finish_parse ()\n {\n-  cpp_finish (&parse_in);\n-  errorcount += parse_in.errors;\n+  cpp_finish (parse_in);\n+  errorcount += parse_in->errors;\n }\n \f\n inline void\n@@ -1150,7 +1148,7 @@ handle_pragma_implementation (dfile)\n   else\n     {\n       main_filename = TREE_STRING_POINTER (fname);\n-      if (cpp_included (&parse_in, main_filename))\n+      if (cpp_included (parse_in, main_filename))\n \twarning (\"#pragma implementation for %s appears after file is included\",\n \t\t main_filename);\n     }"}, {"sha": "3fc146968f61a034a19ce9cd453a32c6c8a5726e", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -323,8 +323,8 @@ read_token (t)\n #undef YYCODE\n \n     case CPP_EOF:\n-      cpp_pop_buffer (&parse_in);\n-      if (CPP_BUFFER (&parse_in))\n+      cpp_pop_buffer (parse_in);\n+      if (CPP_BUFFER (parse_in))\n \tgoto retry;\n       t->yychar = 0;\n       break;"}, {"sha": "39e1562c93671a4515ddb991e554ef12d5dece62", "filename": "gcc/cppinit.c", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -398,30 +398,6 @@ merge_include_chains (pfile)\n   CPP_OPTION (pfile, bracket_include) = brack;\n }\n \n-/* cpp_init initializes library global state.  It might not need to do\n-   anything depending on the platform and compiler, so we have a static\n-   flag to make sure it gets called before cpp_reader_init.  */\n-\n-static int cpp_init_completed = 0;\n-\n-void\n-cpp_init ()\n-{\n-#ifdef HOST_EBCDIC\n-  /* For non-ASCII hosts, the cl_options array needs to be sorted at\n-     runtime.  */\n-  qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n-#endif\n-\n-  /* Set up the trigraph map and the IStable.  These don't need to do\n-     anything if we were compiled with a compiler that supports C99\n-     designated initializers.  */\n-  init_trigraph_map ();\n-  init_IStable ();\n-\n-  cpp_init_completed = 1;\n-}\n-\n /* Sets internal flags correctly for a given language, and defines\n    macros if necessary.  */\n static void\n@@ -516,24 +492,40 @@ set_lang (pfile, lang)\n     }\n }\n \n+/* initialize initializes library global state.  It might not need to\n+   do anything depending on the platform and compiler.  */\n+\n+static int initialized = 0;\n+\n+static void\n+initialize ()\n+{\n+#ifdef HOST_EBCDIC\n+  /* For non-ASCII hosts, the cl_options array needs to be sorted at\n+     runtime.  */\n+  qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+#endif\n+\n+  /* Set up the trigraph map and the IStable.  These don't need to do\n+     anything if we were compiled with a compiler that supports C99\n+     designated initializers.  */\n+  init_trigraph_map ();\n+  init_IStable ();\n+\n+  initialized = 1;\n+}\n+\n /* Initialize a cpp_reader structure. */\n-void\n-cpp_reader_init (pfile, lang)\n-     cpp_reader *pfile;\n+cpp_reader *\n+cpp_create_reader (lang)\n      enum c_lang lang;\n {\n   struct spec_nodes *s;\n+  cpp_reader *pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n \n-  memset ((char *) pfile, 0, sizeof (cpp_reader));\n-\n-  /* If cpp_init hasn't been called, generate a fatal error (by hand)\n-     and call it here.  */\n-  if (!cpp_init_completed)\n-    {\n-      fputs (\"cpp_reader_init: internal error: cpp_init not called.\\n\", stderr);\n-      pfile->errors = CPP_FATAL_LIMIT;\n-      cpp_init ();\n-    }\n+  /* Initialise this instance of the library if it hasn't been already.  */\n+  if (! initialized)\n+    initialize ();\n \n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n@@ -586,6 +578,8 @@ cpp_reader_init (pfile, lang)\n   s->n__CHAR_UNSIGNED__ = cpp_lookup (pfile, DSC(\"__CHAR_UNSIGNED__\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n+\n+  return pfile;\n }\n \n /* Free resources used by PFILE."}, {"sha": "3732556e3f3f12101152d79eeb2001d6ef7bb0a8", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -696,16 +696,14 @@ struct cpp_hashnode\n   union tree_node *fe_value;\t\t/* Front end value.  */\n };\n \n+extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n extern unsigned int cpp_token_len PARAMS ((const cpp_token *));\n extern unsigned char *cpp_token_as_text PARAMS ((cpp_reader *,\n \t\t\t\t\t\t const cpp_token *));\n extern unsigned char *cpp_spell_token PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t\t       unsigned char *));\n-extern void cpp_init PARAMS ((void));\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n-extern void cpp_reader_init PARAMS ((cpp_reader *, enum c_lang));\n-\n extern void cpp_register_pragma PARAMS ((cpp_reader *,\n \t\t\t\t\t const char *, const char *,\n \t\t\t\t\t void (*) PARAMS ((cpp_reader *))));"}, {"sha": "8b15f65d0b390a500d1993c5d1ebf0119e1733ae", "filename": "gcc/cppmain.c", "status": "modified", "additions": 56, "deletions": 43, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -38,6 +38,8 @@ struct printer\n };\n \n int main\t\tPARAMS ((int, char **));\n+static void general_init PARAMS ((const char *));\n+static void setup_callbacks PARAMS ((void));\n \n /* General output routines.  */\n static void scan_buffer\tPARAMS ((cpp_reader *));\n@@ -58,34 +60,20 @@ static void cb_change_file PARAMS ((cpp_reader *, const cpp_file_change *));\n static void cb_def_pragma PARAMS ((cpp_reader *));\n static void do_pragma_implementation PARAMS ((cpp_reader *));\n \n-const char *progname;\n-static cpp_reader parse_in;\n+const char *progname;\t\t/* Needs to be global.  */\n+static cpp_reader *pfile;\n static struct printer print;\n \n int\n main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  char *p;\n-  cpp_reader *pfile = &parse_in;\n   int argi = 1;  /* Next argument to handle.  */\n \n-  p = argv[0] + strlen (argv[0]);\n-  while (p != argv[0] && ! IS_DIR_SEPARATOR (p[-1])) --p;\n-  progname = p;\n-\n-  xmalloc_set_program_name (progname);\n-\n-#ifdef HAVE_LC_MESSAGES\n-  setlocale (LC_MESSAGES, \"\");\n-#endif\n-  (void) bindtextdomain (PACKAGE, localedir);\n-  (void) textdomain (PACKAGE);\n-\n-  cpp_init ();\n+  general_init (argv[0]);\n   /* Default language is GNU C89.  */\n-  cpp_reader_init (pfile, CLK_GNUC89);\n+  pfile = cpp_create_reader (CLK_GNUC89);\n   \n   argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n   if (argi < argc && ! CPP_FATAL_ERRORS (pfile))\n@@ -99,30 +87,7 @@ main (argc, argv)\n   if (printer_init (pfile))\n     return (FATAL_EXIT_CODE);\n \n-  /* Set callbacks.  */\n-  if (! CPP_OPTION (pfile, no_output))\n-    {\n-      pfile->cb.ident      = cb_ident;\n-      pfile->cb.def_pragma = cb_def_pragma;\n-      if (! CPP_OPTION (pfile, no_line_commands))\n-\tpfile->cb.change_file = cb_change_file;\n-    }\n-\n-  if (CPP_OPTION (pfile, dump_includes))\n-    pfile->cb.include  = cb_include;\n-\n-  if (CPP_OPTION (pfile, debug_output)\n-      || CPP_OPTION (pfile, dump_macros) == dump_names\n-      || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n-    {\n-      pfile->cb.define = cb_define;\n-      pfile->cb.undef  = cb_undef;\n-      pfile->cb.poison = cb_def_pragma;\n-    }\n-\n-  /* Register one #pragma which needs special handling.  */\n-  cpp_register_pragma(pfile, 0, \"implementation\", do_pragma_implementation);\n-  cpp_register_pragma(pfile, \"GCC\", \"implementation\", do_pragma_implementation);\n+  setup_callbacks ();\n \n   if (! cpp_start_read (pfile, CPP_OPTION (pfile, in_fname)))\n     return (FATAL_EXIT_CODE);\n@@ -148,11 +113,59 @@ main (argc, argv)\n   if (ferror (print.outf) || fclose (print.outf))\n     cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n \n-  if (parse_in.errors)\n+  if (pfile->errors)\n     return (FATAL_EXIT_CODE);\n   return (SUCCESS_EXIT_CODE);\n }\n \n+/* Store the program name, and set the locale.  */\n+static void\n+general_init (const char *argv0)\n+{\n+  progname = argv0 + strlen (argv0);\n+\n+  while (progname != argv0 && ! IS_DIR_SEPARATOR (progname[-1]))\n+    --progname;\n+\n+  xmalloc_set_program_name (progname);\n+\n+#ifdef HAVE_LC_MESSAGES\n+  setlocale (LC_MESSAGES, \"\");\n+#endif\n+  (void) bindtextdomain (PACKAGE, localedir);\n+  (void) textdomain (PACKAGE);\n+}\n+\n+/* Set up the callbacks and register the pragmas we handle.  */\n+static void\n+setup_callbacks ()\n+{\n+  /* Set callbacks.  */\n+  if (! CPP_OPTION (pfile, no_output))\n+    {\n+      pfile->cb.ident      = cb_ident;\n+      pfile->cb.def_pragma = cb_def_pragma;\n+      if (! CPP_OPTION (pfile, no_line_commands))\n+\tpfile->cb.change_file = cb_change_file;\n+    }\n+\n+  if (CPP_OPTION (pfile, dump_includes))\n+    pfile->cb.include  = cb_include;\n+\n+  if (CPP_OPTION (pfile, debug_output)\n+      || CPP_OPTION (pfile, dump_macros) == dump_names\n+      || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n+    {\n+      pfile->cb.define = cb_define;\n+      pfile->cb.undef  = cb_undef;\n+      pfile->cb.poison = cb_def_pragma;\n+    }\n+\n+  /* Register one #pragma which needs special handling.  */\n+  cpp_register_pragma(pfile, 0, \"implementation\", do_pragma_implementation);\n+  cpp_register_pragma(pfile, \"GCC\", \"implementation\", do_pragma_implementation);\n+}\n+\n /* Writes out the preprocessed file.  Alternates between two tokens,\n    so that we can avoid accidental token pasting.  */\n static void"}, {"sha": "7e030d81f27acd27426d7a38b032ba58c86df180", "filename": "gcc/fix-header.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -612,36 +612,35 @@ read_scan_file (in_fname, argc, argv)\n      int argc;\n      char **argv;\n {\n-  cpp_reader scan_in;\n+  cpp_reader* scan_in;\n   struct fn_decl *fn;\n   int i;\n   register struct symbol_list *cur_symbols;\n \n   obstack_init (&scan_file_obstack); \n \n-  cpp_init ();\t\t\t/* Initialize cpplib.   */\n-  cpp_reader_init (&scan_in, CLK_GNUC89);\n-  scan_in.cb.change_file = cb_change_file;\n+  scan_in = cpp_create_reader (CLK_GNUC89);\n+  scan_in->cb.change_file = cb_change_file;\n \n   /* We are going to be scanning a header file out of its proper context,\n      so ignore warnings and errors.  */\n-  CPP_OPTION (&scan_in, inhibit_warnings) = 1;\n-  CPP_OPTION (&scan_in, inhibit_errors) = 1;\n-  i = cpp_handle_options (&scan_in, argc, argv);\n-  if (i < argc && ! CPP_FATAL_ERRORS (&scan_in))\n-    cpp_fatal (&scan_in, \"Invalid option `%s'\", argv[i]);\n-  if (CPP_FATAL_ERRORS (&scan_in))\n+  CPP_OPTION (scan_in, inhibit_warnings) = 1;\n+  CPP_OPTION (scan_in, inhibit_errors) = 1;\n+  i = cpp_handle_options (scan_in, argc, argv);\n+  if (i < argc && ! CPP_FATAL_ERRORS (scan_in))\n+    cpp_fatal (scan_in, \"Invalid option `%s'\", argv[i]);\n+  if (CPP_FATAL_ERRORS (scan_in))\n     exit (FATAL_EXIT_CODE);\n \n-  if (! cpp_start_read (&scan_in, in_fname))\n+  if (! cpp_start_read (scan_in, in_fname))\n     exit (FATAL_EXIT_CODE);\n \n   /* We are scanning a system header, so mark it as such.  */\n-  cpp_make_system_header (&scan_in, CPP_BUFFER (&scan_in), 1);\n+  cpp_make_system_header (scan_in, CPP_BUFFER (scan_in), 1);\n \n-  scan_decls (&scan_in, argc, argv);\n+  scan_decls (scan_in, argc, argv);\n   for (cur_symbols = &symbol_table[0]; cur_symbols->names; cur_symbols++)\n-    check_macro_names (&scan_in, cur_symbols->names);\n+    check_macro_names (scan_in, cur_symbols->names);\n \n   /* Traditionally, getc and putc are defined in terms of _filbuf and _flsbuf.\n      If so, those functions are also required.  */\n@@ -650,8 +649,8 @@ read_scan_file (in_fname, argc, argv)\n     {\n       static const unsigned char getchar_call[] = \"getchar();\";\n       int seen_filbuf = 0;\n-      cpp_buffer *buf = CPP_BUFFER (&scan_in);\n-      if (cpp_push_buffer (&scan_in, getchar_call,\n+      cpp_buffer *buf = CPP_BUFFER (scan_in);\n+      if (cpp_push_buffer (scan_in, getchar_call,\n \t\t\t   sizeof(getchar_call) - 1) == NULL)\n \treturn;\n \n@@ -660,11 +659,11 @@ read_scan_file (in_fname, argc, argv)\n \t{\n \t  cpp_token t;\n \n-\t  cpp_get_token (&scan_in, &t);\n+\t  cpp_get_token (scan_in, &t);\n \t  if (t.type == CPP_EOF)\n \t    {\n-\t      cpp_pop_buffer (&scan_in);\n-\t      if (CPP_BUFFER (&scan_in) == buf)\n+\t      cpp_pop_buffer (scan_in);\n+\t      if (CPP_BUFFER (scan_in) == buf)\n \t\tbreak;\n \t    }\n \t  else if (cpp_ideq (&t, \"_filbuf\"))"}, {"sha": "e15ddd02ccfabfce19b2cd8aa9c35dc7293ece6b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf44ea523133ce4e91d097471bad44232c550a55/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=cf44ea523133ce4e91d097471bad44232c550a55", "patch": "@@ -56,7 +56,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"cpplib.h\"\n-extern cpp_reader  parse_in;\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n@@ -695,8 +694,7 @@ generate_struct_by_value_array ()\n void\n lang_init_options ()\n {\n-  cpp_init ();\n-  cpp_reader_init (&parse_in, CLK_GNUC89);\n+  parse_in = cpp_create_reader (CLK_GNUC89);\n }\n \n void"}]}