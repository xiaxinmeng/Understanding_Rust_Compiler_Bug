{"sha": "184f4c5647deb9430279f508fe507084cf06193a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0ZjRjNTY0N2RlYjk0MzAyNzlmNTA4ZmU1MDcwODRjZjA2MTkzYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2006-06-14T14:19:54Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2006-06-14T14:19:54Z"}, "message": "re PR middle-end/27959 (s390x miscompilation due to clobbering literal pool base reg)\n\n2006-06-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR middle-end/27959\n\t* reload1.c (reload): Remove registers returned by update_eliminables\n\tfrom used_spill_regs.\n\n2006-06-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR middle-end/27959\n\t* gcc.dg/pr27959.c: New testcase.\n\nFrom-SVN: r114640", "tree": {"sha": "2aa11c80de271df35782753be562f3b5dbf042a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa11c80de271df35782753be562f3b5dbf042a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/184f4c5647deb9430279f508fe507084cf06193a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184f4c5647deb9430279f508fe507084cf06193a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184f4c5647deb9430279f508fe507084cf06193a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184f4c5647deb9430279f508fe507084cf06193a/comments", "author": null, "committer": null, "parents": [{"sha": "34e598d832055c787462d2f5c5b3983e9c16bff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e598d832055c787462d2f5c5b3983e9c16bff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e598d832055c787462d2f5c5b3983e9c16bff7"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "defc39d6922140dbf644e00ab7615f653b8a7990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184f4c5647deb9430279f508fe507084cf06193a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184f4c5647deb9430279f508fe507084cf06193a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=184f4c5647deb9430279f508fe507084cf06193a", "patch": "@@ -1,3 +1,9 @@\n+2006-06-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR middle-end/27959\n+\t* reload1.c (reload): Remove registers returned by update_eliminables\n+\tfrom used_spill_regs.\n+\n 2006-06-13  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/muldiv.md (mulpsi3): Expect arbitrary constants."}, {"sha": "f426e1dbe1ddbfbb2710b5be959c57e45fd7b659", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=184f4c5647deb9430279f508fe507084cf06193a", "patch": "@@ -989,6 +989,8 @@ reload (rtx first, int global)\n \tHARD_REG_SET to_spill;\n \tCLEAR_HARD_REG_SET (to_spill);\n \tupdate_eliminables (&to_spill);\n+\tAND_COMPL_HARD_REG_SET(used_spill_regs, to_spill);\n+\n \tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t  if (TEST_HARD_REG_BIT (to_spill, i))\n \t    {"}, {"sha": "8b799550604812019341742499e1124ad96591ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=184f4c5647deb9430279f508fe507084cf06193a", "patch": "@@ -1,3 +1,8 @@\n+2006-06-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR middle-end/27959\n+\t* gcc.dg/pr27959.c: New testcase.\n+\n 2006-06-13  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR target/28014:"}, {"sha": "7118aec73c6bba071c29af87fef03e671ee5593e", "filename": "gcc/testsuite/gcc.dg/pr27959.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184f4c5647deb9430279f508fe507084cf06193a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959.c?ref=184f4c5647deb9430279f508fe507084cf06193a", "patch": "@@ -0,0 +1,93 @@\n+/* PR middle-end/27959 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mtune=z990\" { target s390*-*-* } } */\n+\n+extern void abort (void);\n+\n+struct B\n+{\n+  unsigned int b1, b2, b3;\n+  char b4;\n+};\n+\n+struct C\n+{\n+  char c1;\n+};\n+\n+struct D\n+{\n+  char *d1;\n+  struct C **d2;\n+  unsigned int d3;\n+};\n+\n+void\n+__attribute__((noinline))\n+foo (void *x, struct B *y, unsigned int *z)\n+{\n+  if (x)\n+    abort ();\n+  if (y->b1 != 7 || y->b2 != 5 || y->b3 != 3 || y->b4)\n+    abort ();\n+  if (*z != 2)\n+    abort ();\n+}\n+\n+int\n+__attribute__((noinline))\n+baz (unsigned int *x, unsigned int y)\n+{\n+  asm volatile (\"\" : : \"r\" (&x), \"r\" (&y) : \"memory\");\n+  return *x + y;\n+}\n+\n+inline int bar (unsigned int *x, unsigned int y)\n+{\n+  if (y < *x)\n+    return 0;\n+  return baz (x, y);\n+}\n+\n+unsigned int *\n+__attribute__((noinline))\n+test (struct D *x, unsigned int *y)\n+{\n+  struct B b;\n+  unsigned int c;\n+\n+  bar (y, x->d3);\n+  if ((*(x->d2))->c1)\n+    c = ((unsigned char) x->d1[0]\n+\t + ((unsigned char) x->d1[1] << 8)\n+\t + ((unsigned char) x->d1[2] << 16)\n+\t + ((short) x->d1[3] << 24));\n+  else\n+    {\n+      int d;\n+      ((char *) &d)[0] = x->d1[0];\n+      ((char *) &d)[1] = x->d1[1];\n+      ((char *) &d)[2] = x->d1[2];\n+      ((char *) &d)[3] = x->d1[3];\n+      c = d;\n+    }\n+  b.b4 = 0;\n+  b.b1 = c / 10000L % 10000;\n+  b.b2 = c / 100 % 100;\n+  b.b3 = c % 100;\n+  foo (0, &b, y);\n+  return y;\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned int x = 900070503;\n+  unsigned int y = 2;\n+  struct C c = { 0 }, *cptr = &c;\n+  struct D d = { (char *) &x, &cptr, 0 };\n+  if (test (&d, &y) != &y)\n+    abort ();\n+  return 0;\n+}"}]}