{"sha": "3abd3239f3333c81e890f5aeefb7e4d06b526920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiZDMyMzlmMzMzM2M4MWU4OTBmNWFlZWZiN2U0ZDA2YjUyNjkyMA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-02-12T21:15:15Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-02-12T21:15:15Z"}, "message": "flow.c (flow_loop_tree_node_add): Use better algorithm by passing previously inserted node instead of root node.\n\n\t* flow.c (flow_loop_tree_node_add): Use better algorithm by passing\n \tpreviously inserted node instead of root node.\tCaller changed.\n\nFrom-SVN: r31948", "tree": {"sha": "1b7cbf9c800a43242297b150566f7fa69f3d670d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7cbf9c800a43242297b150566f7fa69f3d670d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3abd3239f3333c81e890f5aeefb7e4d06b526920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abd3239f3333c81e890f5aeefb7e4d06b526920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abd3239f3333c81e890f5aeefb7e4d06b526920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abd3239f3333c81e890f5aeefb7e4d06b526920/comments", "author": null, "committer": null, "parents": [{"sha": "f5b647ab0f42fca1c078818cac72cb0003b762ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b647ab0f42fca1c078818cac72cb0003b762ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b647ab0f42fca1c078818cac72cb0003b762ac"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "4e3bf23ff5092b292a3bc65b8641cc0250954a16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abd3239f3333c81e890f5aeefb7e4d06b526920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abd3239f3333c81e890f5aeefb7e4d06b526920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3abd3239f3333c81e890f5aeefb7e4d06b526920", "patch": "@@ -1,4 +1,9 @@\n-2000-02-12  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+2000-02-13  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* flow.c (flow_loop_tree_node_add): Use better algorithm by passing\n+ \tpreviously inserted node instead of root node.\tCaller changed.\n+\n+2000-02-13  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* basic-block.h (FLOW_LOOP_FIRST_BLOCK, FLOW_LOOP_LAST_BLOCK): Delete.\n "}, {"sha": "6508075ebaa5348e566e29bc58ffbd4347092d0d", "filename": "gcc/flow.c", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abd3239f3333c81e890f5aeefb7e4d06b526920/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abd3239f3333c81e890f5aeefb7e4d06b526920/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=3abd3239f3333c81e890f5aeefb7e4d06b526920", "patch": "@@ -6716,41 +6716,35 @@ flow_loop_pre_header_find (header, dom)\n }\n \n \n-/* Add LOOP to the loop hierarchy tree so that it is a sibling or a\n-   descendant of ROOT.  */\n+/* Add LOOP to the loop hierarchy tree where PREVLOOP was the loop\n+   previously added.  The insertion algorithm assumes that the loops\n+   are added in the order found by a depth first search of the CFG.  */\n static void\n-flow_loop_tree_node_add (root, loop)\n-     struct loop *root;\n+flow_loop_tree_node_add (prevloop, loop)\n+     struct loop *prevloop;\n      struct loop *loop;\n {\n-  struct loop *outer;\n \n-  if (! loop)\n-    return;\n+  if (flow_loop_nested_p (prevloop, loop))\n+    {\n+      prevloop->inner = loop;\n+      loop->outer = prevloop;\n+      return;\n+    }\n \n-  for (outer = root; outer; outer = outer->next)\n+  while (prevloop->outer)\n     {\n-      if (flow_loop_nested_p (outer, loop))\n+      if (flow_loop_nested_p (prevloop->outer, loop))\n \t{\n-\t  if (outer->inner)\n-\t    {\n-\t      /* Add LOOP as a sibling or descendent of OUTER->INNER.  */\n-\t      flow_loop_tree_node_add (outer->inner, loop);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Add LOOP as child of OUTER.  */\n-\t      outer->inner = loop;\n-\t      loop->outer = outer;\n-\t      loop->next = NULL;\n-\t    }\n+\t  prevloop->next = loop;\n+\t  loop->outer = prevloop->outer;\n \t  return;\n \t}\n+      prevloop = prevloop->outer;\n     }\n-  /* Add LOOP as a sibling of ROOT.  */\n-  loop->next = root->next;\n-  root->next = loop;\n-  loop->outer = root->outer;\n+  \n+  prevloop->next = loop;\n+  loop->outer = NULL;\n }\n \n \n@@ -6774,7 +6768,7 @@ flow_loops_tree_build (loops)\n \n   /* Add the remaining loops to the tree.  */\n   for (i = 1; i < num_loops; i++)\n-    flow_loop_tree_node_add (loops->tree, &loops->array[i]);\n+    flow_loop_tree_node_add (&loops->array[i - 1], &loops->array[i]);\n }\n \n "}]}