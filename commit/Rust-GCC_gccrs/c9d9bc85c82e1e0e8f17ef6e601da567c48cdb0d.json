{"sha": "c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkOWJjODVjODJlMWUwZThmMTdlZjZlNjAxZGE1NjdjNDhjZGIwZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-05-04T16:13:28Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-05-04T16:13:28Z"}, "message": "aout.h (ASM_OUTPUT_MI_THUNK): Delete.\n\n* aout.h (ASM_OUTPUT_MI_THUNK): Delete.\n(ASM_OUTPUT_OPTIONS): Define.\n(ASM_FILE_START): Call ASM_OUTPUT_OPTIONS.\n(BSS_SECTION_OP): Define.\n(ASM_OUTPUT_ALIGN): Don't output anything if byte alignment is wanted.\n(ASM_OUTPUT_ALIGNED_BSS): Define.\n\nFrom-SVN: r11923", "tree": {"sha": "f5332881c3d741c1562025bc1f4c81389fd72e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5332881c3d741c1562025bc1f4c81389fd72e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d/comments", "author": null, "committer": null, "parents": [{"sha": "4e574e82bba25741e67db5d1f2e1b00f8cff356a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e574e82bba25741e67db5d1f2e1b00f8cff356a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e574e82bba25741e67db5d1f2e1b00f8cff356a"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "b47fada92b3515478880b76a2e6f4cf5f0d3678d", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=c9d9bc85c82e1e0e8f17ef6e601da567c48cdb0d", "patch": "@@ -23,12 +23,18 @@ Boston, MA 02111-1307, USA.  */\n #define ARM_OS_NAME \"(generic)\"\n #endif\n \n+#define ASM_OUTPUT_OPTIONS(FILE)\t\t\t\t\t\\\n+  output_options(FILE,\t\t\t\t\t\t\t\\\n+\t\t f_options, sizeof (f_options) / sizeof (f_options[0]),\t\\\n+\t\t W_options, sizeof (W_options) / sizeof (W_options[0]))\n+\n /* The text to go at the start of the assembler file */\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\t  \\\n-{\t\t\t\t\t\t\t\t\t  \\\n-  extern char *version_string;\t\t\t\t\t\t  \\\n-  fprintf (STREAM,\"%s Generated by gcc %s for ARM/%s\\n\",\t\t  \\\n-\t   ASM_COMMENT_START, version_string, ARM_OS_NAME);\t\t  \\\n+#define ASM_FILE_START(STREAM)\t\t\t\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  extern char *version_string;\t\t\t\t\t\t    \\\n+  fprintf (STREAM,\"%s Generated by gcc %s for ARM/%s\\n\",\t\t    \\\n+\t   ASM_COMMENT_START, version_string, ARM_OS_NAME);\t\t    \\\n+  ASM_OUTPUT_OPTIONS(STREAM);\t\t\t\t\t\t    \\\n   fprintf (STREAM,\"%srfp\\t.req\\t%sr9\\n\", REGISTER_PREFIX, REGISTER_PREFIX); \\\n   fprintf (STREAM,\"%ssl\\t.req\\t%sr10\\n\", REGISTER_PREFIX, REGISTER_PREFIX); \\\n   fprintf (STREAM,\"%sfp\\t.req\\t%sr11\\n\", REGISTER_PREFIX, REGISTER_PREFIX); \\\n@@ -44,6 +50,7 @@ Boston, MA 02111-1307, USA.  */\n /* Switch to the text or data segment.  */\n #define TEXT_SECTION_ASM_OP  \".text\"\n #define DATA_SECTION_ASM_OP  \".data\"\n+#define BSS_SECTION_ASM_OP   \".bss\"\n \n #define REGISTER_PREFIX \"\"\n #define USER_LABEL_PREFIX \"_\"\n@@ -227,7 +234,7 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n                                                                \\\n       if (amount == 2)                                         \\\n \tfprintf (STREAM, \"\\t.even\\n\");                         \\\n-      else                                                     \\\n+      else if (amount != 1)                                    \\\n \tfprintf (STREAM, \"\\t.align\\t%d\\n\", amount - 4);        \\\n                                                                \\\n       if (in_text_section ())                                  \\\n@@ -243,8 +250,12 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n \n /* Output a local common block.  /bin/as can't do this, so hack a `.space' into\n    the bss segment.  Note that this is *bad* practice.  */\n-#define ASM_OUTPUT_LOCAL(STREAM,NAME,SIZE,ROUNDED)  \\\n-  output_lcomm_directive (STREAM, NAME, SIZE, ROUNDED)\n+#define ASM_OUTPUT_ALIGNED_LOCAL(STREAM,NAME,SIZE,ALIGN)  \\\n+  output_lcomm_directive (STREAM, NAME, SIZE, ALIGN)\n+\n+/* Output a zero-initialized block.  */\n+#define ASM_OUTPUT_ALIGNED_BSS(STREAM,NAME,SIZE,ALIGN) \\\n+  asm_output_aligned_bss(STREAM, NAME, SIZE, ALIGN)\n \n /* Output a source line for the debugger.  */\n /* #define ASM_OUTPUT_SOURCE_LINE(STREAM,LINE) */\n@@ -261,25 +272,4 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n #define ASM_COMMENT_START \"@\"\n #endif\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  int mi_delta = (DELTA);\t\t\t\t\t\\\n-  char *mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\\\n-  unsigned int mi_mask = 0xff000000;\t\t\t\t\\\n-  if (mi_delta < 0) mi_delta = -mi_delta;\t\t\t\\\n-  while (mi_mask)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (mi_delta & mi_mask)\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s %s, %s, #%d\\n\",\t\t\t\\\n-\t\t mi_op, reg_names[0], reg_names[0], mi_delta & mi_mask); \\\n-      arm_increase_location (4);\t\t\t\t\\\n-      mi_mask >>= 8;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tldr pc, 1f\\n1:\");\t\t\t\t\\\n-  arm_increase_location (4);\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, XEXP (DECL_RTL (FUNCTION), 0));\t\t\\\n-} while (0)\n-\n #include \"arm/arm.h\""}]}