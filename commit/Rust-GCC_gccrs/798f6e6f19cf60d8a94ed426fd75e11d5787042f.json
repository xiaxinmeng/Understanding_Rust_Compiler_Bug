{"sha": "798f6e6f19cf60d8a94ed426fd75e11d5787042f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4ZjZlNmYxOWNmNjBkOGE5NGVkNDI2ZmQ3NWUxMWQ1Nzg3MDQyZg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-11-09T22:56:56Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-11-09T22:56:56Z"}, "message": "c4x-protos.h: New file.\n\n\t* config/c4x/c4x-protos.h: New file.  Prototypes for functions defined\n\tin c4x.c.\n\t* config/c4x/c4x.h: Moved prototypes to c4x.h.\n\t* config/c4x/c4x.c (c4x_preferred_reload_class, c4x_limit_reload_class,\n\tc4x_secondary_memory_needed) Delete.\n\t(fp_zero_operand): Add mode argument.\n\nFrom-SVN: r30463", "tree": {"sha": "0e2f048ee32556b41fcfa4b5de7bd1134460df50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2f048ee32556b41fcfa4b5de7bd1134460df50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798f6e6f19cf60d8a94ed426fd75e11d5787042f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798f6e6f19cf60d8a94ed426fd75e11d5787042f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798f6e6f19cf60d8a94ed426fd75e11d5787042f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798f6e6f19cf60d8a94ed426fd75e11d5787042f/comments", "author": null, "committer": null, "parents": [{"sha": "8226320b92d595423ab9b5dce04952886f5edffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8226320b92d595423ab9b5dce04952886f5edffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8226320b92d595423ab9b5dce04952886f5edffa"}], "stats": {"total": 539, "additions": 289, "deletions": 250}, "files": [{"sha": "0303d6d7c43d704aad408b3f26fd62c04a5ef979", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=798f6e6f19cf60d8a94ed426fd75e11d5787042f", "patch": "@@ -1,3 +1,12 @@\n+Wed Nov 10 11:47:54 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x-protos.h: New file.  Prototypes for functions defined\n+\tin c4x.c.\n+\t* config/c4x/c4x.h: Moved prototypes to c4x.h.\n+\t* config/c4x/c4x.c (c4x_preferred_reload_class, c4x_limit_reload_class,\n+\tc4x_secondary_memory_needed) Delete.\n+\t(fp_zero_operand): Add mode argument.\n+\n Thu Nov  4 15:52:35 1999  Andrew Haley  <aph@cygnus.com>\n \n \t* reload1.c (reload_reg_free_for_value_p): Don't use a register"}, {"sha": "dd15fe42d348d43a54b127c18fbbf98cc8cbf3de", "filename": "gcc/config/c4x/c4x-protos.h", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=798f6e6f19cf60d8a94ed426fd75e11d5787042f", "patch": "@@ -0,0 +1,253 @@\n+/* Definitions of target machine for GNU compiler.  TMS320C[34]x\n+   Copyright (C) 1994-98, 1999 Free Software Foundation, Inc.\n+\n+   Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n+              and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl).\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+extern void c4x_override_options PARAMS ((void));\n+\n+extern void c4x_optimization_options PARAMS ((int, int));\n+\n+extern void c4x_output_ascii PARAMS ((FILE *, const char *, int));\n+\n+extern void c4x_function_prologue PARAMS ((FILE *, int));\n+\n+extern void c4x_function_epilogue PARAMS ((FILE *, int));\n+\n+extern int c4x_null_epilogue_p PARAMS ((void));\n+\n+extern int c4x_handle_pragma PARAMS ((int (* p_getc) (void),\n+\t\t\t\t      void (* p_ungetc) (int),\n+\t\t\t\t      char *));\n+\n+#ifdef TREE_CODE\n+extern void c4x_set_default_attributes PARAMS ((tree, tree *));\n+\n+extern void c4x_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, \n+\t\t\t\t\t      enum machine_mode, tree, int));\n+\n+extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t enum machine_mode, tree,\n+\t\t\t\t\t\t int));\n+\n+extern void c4x_encode_section_info PARAMS ((tree));\n+#endif /* TREE_CODE */\n+\n+\n+#if defined(RTX_CODE) && defined(TREE_CODE)\n+extern void c4x_init_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n+\n+extern void c4x_va_start PARAMS ((int, tree, rtx));\n+\n+extern struct rtx_def *c4x_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE and RTX_CODE*/\n+\n+\n+#ifdef RTX_CODE\n+extern struct rtx_def *c4x_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+\n+extern int c4x_check_legit_addr PARAMS ((enum machine_mode, rtx, int));\n+\n+extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n+\t\t\t\t\t\t       enum machine_mode));\n+\n+extern struct rtx_def *c4x_legitimize_reload_address PARAMS ((rtx, enum machine_mode, rtx));\n+\n+extern int c4x_address_cost PARAMS ((rtx));\n+\n+extern void c4x_print_operand PARAMS ((FILE *, rtx, int));\n+\n+extern void c4x_print_operand_address PARAMS ((FILE *, rtx));\n+\n+extern enum reg_class c4x_preferred_reload_class PARAMS ((rtx,\n+\t\t\t\t\t\t\t  enum reg_class));\n+\n+extern struct rtx_def *c4x_operand_subword PARAMS ((rtx, int, int,\n+\t\t\t\t\t\t   enum machine_mode));\n+\n+extern char *c4x_output_cbranch PARAMS ((char *, rtx));\n+\n+extern int c4x_label_conflict PARAMS ((rtx, rtx, rtx));\n+\n+extern int c4x_address_conflict PARAMS ((rtx, rtx, int, int));\n+\n+extern int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+\n+extern void c4x_process_after_reload PARAMS ((rtx));\n+\n+extern int c4x_rptb_nop_p PARAMS ((rtx));\n+\n+extern int c4x_rptb_rpts_p PARAMS ((rtx, rtx));\n+\n+extern int c4x_autoinc_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int const_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int stik_const_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int not_const_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int parallel_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int reg_or_const_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int mixed_subreg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int reg_imm_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int r0r1_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int r2r3_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ext_low_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ext_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int std_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int dst_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int src_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int src_hi_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int lsrc_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int tsrc_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int addr_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int index_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int dp_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int sp_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int rc_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int st_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int symbolic_address_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar0_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar0_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar1_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar1_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar2_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar2_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar3_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar3_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar4_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar4_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar5_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar5_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar6_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar6_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar7_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ar7_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ir0_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ir0_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ir1_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int ir1_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int group1_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int group1_mem_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int arx_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int par_ind_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int not_rc_reg PARAMS ((rtx, enum machine_mode));\n+\n+extern int not_modify_reg PARAMS ((rtx, enum machine_mode));\n+\n+extern int c4x_shiftable_constant PARAMS ((rtx));\n+\n+extern int c4x_H_constant PARAMS ((rtx));\n+\n+extern int c4x_I_constant PARAMS ((rtx));\n+\n+extern int c4x_J_constant PARAMS ((rtx));\n+\n+extern int c4x_L_constant PARAMS ((rtx));\n+\n+extern int c4x_Q_constraint PARAMS ((rtx));\n+\n+extern int c4x_R_constraint PARAMS ((rtx));\n+\n+extern int c4x_S_constraint PARAMS ((rtx));\n+\n+extern int c4x_T_constraint PARAMS ((rtx));\n+\n+extern int c4x_U_constraint PARAMS ((rtx));\n+\n+extern void c4x_emit_libcall PARAMS ((const char *, enum rtx_code,\n+\t\t\t\t      enum machine_mode,\n+\t\t\t\t      enum machine_mode, int, rtx *));\n+\n+extern void c4x_emit_libcall3 PARAMS ((const char *, enum rtx_code, \n+\t\t\t\t       enum machine_mode, rtx *));\n+\n+extern void c4x_emit_libcall_mulhi PARAMS ((char *, enum rtx_code,\n+\t\t\t\t\t    enum machine_mode, rtx *));\n+\n+extern int c4x_emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n+\n+extern int legitimize_operands PARAMS ((enum rtx_code, rtx *, \n+\t\t\t\t\tenum machine_mode));\n+\n+extern int valid_operands PARAMS ((enum rtx_code, rtx *, enum machine_mode));\n+\n+extern int valid_parallel_load_store PARAMS ((rtx *, enum machine_mode));\n+\n+extern int valid_parallel_operands_4 PARAMS ((rtx *, enum machine_mode));\n+\n+extern int valid_parallel_operands_5 PARAMS ((rtx *, enum machine_mode));\n+\n+extern int valid_parallel_operands_6 PARAMS ((rtx *, enum machine_mode));\n+\n+#endif /* RTX_CODE */\n+"}, {"sha": "1475494d7380f017c174b7fcf94d53a034016288", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=798f6e6f19cf60d8a94ed426fd75e11d5787042f", "patch": "@@ -44,6 +44,7 @@\n #include \"recog.h\"\n #include \"c-tree.h\"\n #include \"ggc.h\"\n+#include \"c4x-protos.h\"\n \n static int c4x_leaf_function;\n \n@@ -192,7 +193,14 @@ c4x_override_options ()\n \n   /* -mcpu=xx overrides -m40 etc.  */\n   if (c4x_cpu_version_string)\n-    c4x_cpu_version = atoi (c4x_cpu_version_string);\n+    {\n+      const char *p = c4x_cpu_version_string;\n+      \n+      /* Also allow -mcpu=c30 etc.  */\n+      if (*p == 'c' || *p == 'C')\n+\tp++;\n+      c4x_cpu_version = atoi (p);\n+    }\n \n   target_flags &= ~(C30_FLAG | C31_FLAG | C32_FLAG | C40_FLAG | C44_FLAG);\n \n@@ -251,7 +259,7 @@ c4x_optimization_options (level, size)\n void\n c4x_output_ascii (stream, ptr, len)\n      FILE *stream;\n-     unsigned char *ptr;\n+     const char *ptr;\n      int len;\n {\n   char sbuf[C4X_ASCII_LIMIT + 1];\n@@ -1197,7 +1205,7 @@ c4x_emit_move_sequence (operands, mode)\n \n void\n c4x_emit_libcall (name, code, dmode, smode, noperands, operands)\n-     char *name;\n+     const char *name;\n      enum rtx_code code;\n      enum machine_mode dmode;\n      enum machine_mode smode;\n@@ -1276,34 +1284,6 @@ c4x_emit_libcall_mulhi (name, code, mode, operands)\n }\n \n \n-enum reg_class\n-c4x_preferred_reload_class (x, class)\n-     rtx x ATTRIBUTE_UNUSED;\n-     enum reg_class class;\n-{\n-  return class;\n-}\n-\n-\n-enum reg_class\n-c4x_limit_reload_class (mode, class)\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     enum reg_class class;\n-{\n-  return class;\n-}\n-\n-\n-enum reg_class\n-c4x_secondary_memory_needed (class1, class2, mode)\n-     enum reg_class class1 ATTRIBUTE_UNUSED;\n-     enum reg_class class2 ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n-\n /* Set the SYMBOL_REF_FLAG for a function decl.  However, wo do not\n    yet use this info.  */\n void\n@@ -1590,7 +1570,7 @@ c4x_legitimize_reload_address (orig, mode, insn)\n \n int \n c4x_address_cost (addr)\n-rtx addr;\n+     rtx addr;\n {\n   switch (GET_CODE (addr))\n     {\n@@ -1657,6 +1637,11 @@ rtx addr;\n \t    return 2;\n \n \t  case CONST_INT:\n+\t    /* The following tries to improve GIV combination\n+\t       in strength reduce but appears not to help.  */\n+\t    if (TARGET_DEVEL && IS_UINT5_CONST (INTVAL (op1)))\n+\t      return 1;\n+\n \t    if (IS_DISP1_CONST (INTVAL (op1)))\n \t      return 1;\n \n@@ -2722,8 +2707,9 @@ any_operand (op, mode)\n /* Nonzero if OP is a floating point value with value 0.0.  */\n \n int\n-fp_zero_operand (op)\n+fp_zero_operand (op, mode)\n      rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   REAL_VALUE_TYPE r;\n \n@@ -4211,7 +4197,7 @@ c4x_operand_subword (op, i, validate_address, mode)\n \n int\n c4x_handle_pragma (p_getc, p_ungetc, pname)\n-     int (*  p_getc) PROTO ((void));\n+     int (* p_getc) PROTO ((void));\n      void (* p_ungetc) PROTO ((int)) ATTRIBUTE_UNUSED;\n      char *pname;\n {"}, {"sha": "09e40bc039deb86a2c4a9f321e0b8d7b07a9b6a8", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 7, "deletions": 216, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798f6e6f19cf60d8a94ed426fd75e11d5787042f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=798f6e6f19cf60d8a94ed426fd75e11d5787042f", "patch": "@@ -21,10 +21,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-/* Set the following so that some of the macros expand to function\n-   calls to simplify debugging.  */\n-#define C4X_DEBUG 1\n-\n /* RUN-TIME TARGET SPECIFICATION */\n \n #define C4x   1\n@@ -236,8 +232,8 @@\n \n extern int target_flags;\n \n-#define TARGET_INLINE\t\t1 /* Inline MPYI */\n-#define TARGET_PARALLEL\t        1 /* Enable parallel insns in MD */\n+#define TARGET_INLINE\t\t1 /* Inline MPYI.  */\n+#define TARGET_PARALLEL\t        1 /* Enable parallel insns in MD.  */\n #define TARGET_SMALL_REG_CLASS\t0\n \n #define TARGET_SMALL\t\t(target_flags & SMALL_MEMORY_FLAG)\n@@ -316,11 +312,10 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n    defined, is executed once just after all the command options have\n    been parsed.  */\n \n-extern void c4x_override_options ();\n #define OVERRIDE_OPTIONS c4x_override_options ()\n \n /* Define this to change the optimizations performed by default.  */\n-extern void c4x_optimization_options ();\n+\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) c4x_optimization_options(LEVEL,SIZE)\n \n /* Run Time Target Specification  */\n@@ -814,15 +809,11 @@ enum reg_class\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n      (IS_INDEX_REG(REGNO) || IS_INDEX_REG((unsigned)reg_renumber[REGNO]))\n \n-extern enum reg_class c4x_preferred_reload_class ();\n-#define PREFERRED_RELOAD_CLASS(X, CLASS) c4x_preferred_reload_class(X, CLASS)\n+#define PREFERRED_RELOAD_CLASS(X, CLASS) (CLASS)\n \n-extern enum reg_class c4x_limit_reload_class ();\n-#define LIMIT_RELOAD_CLASS(X, CLASS) c4x_limit_reload_class(X, CLASS)\n+#define LIMIT_RELOAD_CLASS(X, CLASS) (CLASS)\n \n-extern enum reg_class c4x_secondary_memory_needed ();\n-#define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \t\\\n-c4x_secondary_memory_needed(CLASS1, CLASS2, MODE)\n+#define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) 0\n \n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\\\n (((MODE) == CCmode || (MODE) == CC_NOOVmode) ? 1 : ((MODE) == HFmode) ? 1 : \\\n@@ -866,7 +857,7 @@ c4x_secondary_memory_needed(CLASS1, CLASS2, MODE)\n         : 0 )\t\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(OP, C) \t\t\t\t\\\n-        ( ((C) == 'G') ? (fp_zero_operand (OP))\t\t\t\t\\\n+        ( ((C) == 'G') ? (fp_zero_operand (OP, QFmode))\t\t\t\\\n \t: ((C) == 'H') ? (c4x_H_constant (OP)) \t\t\t\t\\\n \t: 0 )\n \n@@ -1070,18 +1061,12 @@ typedef struct c4x_args\n }\n CUMULATIVE_ARGS;\n \n-extern void c4x_init_cumulative_args();\n-\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   (c4x_init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n-extern void c4x_function_arg_advance();\n-\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n   (c4x_function_arg_advance (&CUM, MODE, TYPE, NAMED))\n \n-extern struct rtx_def *c4x_function_arg();\n-\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   (c4x_function_arg(&CUM, MODE, TYPE, NAMED))\n \n@@ -1127,11 +1112,9 @@ extern struct rtx_def *c4x_function_arg();\n \n /* Varargs handling.  */\n \n-extern void c4x_va_start ();\n #define\tEXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n   c4x_va_start (stdarg, valist, nextarg)\n \n-extern struct rtx_def *c4x_va_arg ();\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   c4x_va_arg (valist, type)\n \n@@ -1553,8 +1536,6 @@ extern struct rtx_def *c4x_va_arg ();\n     || GET_MODE (Y) == ABS)\t\t\t\t\t\\\n     ? CC_NOOVmode : CCmode)\n \n-extern struct rtx_def *c4x_gen_compare_reg ();\n-\n /* Addressing Modes  */\n \n #define HAVE_POST_INCREMENT 1\n@@ -1593,8 +1574,6 @@ extern struct rtx_def *c4x_gen_compare_reg ();\n    After reload, it makes no difference, since pseudo regs have\n    been eliminated by then.  */\n \n-extern int c4x_check_legit_addr ();\n-\n #ifndef REG_OK_STRICT\n \n /* Nonzero if X is a hard or pseudo reg that can be used as an base.  */\n@@ -1629,7 +1608,6 @@ extern int c4x_check_legit_addr ();\n \n #endif\n \n-extern struct rtx_def *c4x_legitimize_address ();\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN) \\\n {\t\t\t\t\t\t\t\t\t\\\n   rtx new;\t\t\t\t\t\t\t\t\\\n@@ -1641,7 +1619,6 @@ extern struct rtx_def *c4x_legitimize_address ();\n   }\t\t\t\t\t\t\t\t\t\\\n }\n \n-extern struct rtx_def *c4x_legitimize_reload_address ();\n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_LEVELS,WIN)     \\\n {\t\t\t\t\t\t\t\t\t\\\n   rtx new;\t\t\t\t\t\t\t\t\\\n@@ -1708,7 +1685,6 @@ extern struct rtx_def *c4x_legitimize_reload_address ();\n    On the C4x we use this to indicate if a symbol is in text or\n    data space.  */\n \n-extern void c4x_encode_section_info ();\n #define ENCODE_SECTION_INFO(DECL) c4x_encode_section_info (DECL);\n \n /* Descripting Relative Cost of Operations  */\n@@ -1811,8 +1787,6 @@ extern void c4x_encode_section_info ();\n    for valid addresses.  We handle the most common address without \n    a call to c4x_address_cost.  */\n \n-extern int c4x_address_cost ();\n-\n #define ADDRESS_COST(ADDR) (REG_P (ADDR) ? 1 : c4x_address_cost (ADDR))\n \n #define\tCANONICALIZE_COMPARISON(CODE, OP0, OP1)\t\t\\\n@@ -2130,7 +2104,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.word\\t0%xh\\n\", (VALUE))\n \n-extern void c4x_output_ascii ();\n #define ASM_OUTPUT_ASCII(FILE, PTR, LEN) c4x_output_ascii (FILE, PTR, LEN)\n \n #define ASM_OPEN_PAREN \"(\"\n@@ -2286,16 +2259,13 @@ asm_fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n  \"iif\",\t \"rs\",  \"re\",  \"rc\",  \"f8\",  \"f9\", \"f10\", \"f11\"\t\t\\\n }\n \n-\n-extern void c4x_print_operand ();\n #define PRINT_OPERAND(FILE, X, CODE) c4x_print_operand(FILE, X, CODE)\n \n /* Determine which codes are valid without a following integer.  These must\n    not be alphabetic.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '#')\n \n-extern void c4x_print_operand_address ();\n #define PRINT_OPERAND_ADDRESS(FILE, X) c4x_print_operand_address(FILE, X)\n \n /* Define this macro if you want to implement any pragmas.  If defined, it\n@@ -2304,15 +2274,12 @@ extern void c4x_print_operand_address ();\n    text can be read.  CH is the first character after the #pragma.  The\n    result of the expression is the terminating character found\n    (newline or EOF).  */\n-extern int c4x_handle_pragma ();\n #define HANDLE_PRAGMA(GETC, UNGETC, NAME) \\\n   c4x_handle_pragma (GETC, UNGETC, NAME)\n \n-extern void c4x_set_default_attributes ();\n #define SET_DEFAULT_DECL_ATTRIBUTES(DECL, ATTRIBUTES) \\\n   c4x_set_default_attributes (DECL, &ATTRIBUTES)\n \n-extern int c4x_valid_type_attribute_p ();\n #define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n   (c4x_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n \n@@ -2619,179 +2586,3 @@ extern struct rtx_def *c4x_compare_op1;\t/* operand 1 for comparisons */\n \n extern int c4x_rpts_cycles;\t        /* max cycles for RPTS */\n extern int c4x_cpu_version;\t\t/* cpu version C30/31/32/40/44 */\n-\n-/* Functions in c4x.c */\n-\n-extern void c4x_function_prologue ();\n-\n-extern void c4x_function_epilogue ();\n-\n-extern struct rtx_def *c4x_operand_subword ();\n-\n-extern struct rtx_def *c4x_adj_offsettable_operand ();\n-\n-extern char *c4x_output_cbranch ();\n-\n-extern int c4x_null_epilogue_p ();\n-\n-extern int c4x_autoinc_operand ();\n-\n-extern int c4x_label_conflict ();\n-\n-extern int c4x_address_conflict ();\n-\n-extern int c4x_adjust_cost ();\n-\n-extern void c4x_process_after_reload ();\n-\n-extern void c4x_combine_parallel ();\n-\n-extern int c4x_rptb_nop_p ();\n-\n-extern int c4x_rptb_rpts_p ();\n-\n-extern int fp_zero_operand ();\n-\n-extern int const_operand ();\n-\n-extern int stik_const_operand ();\n-\n-extern int not_const_operand ();\n-\n-extern int parallel_operand ();\n-\n-extern int reg_or_const_operand ();\n-\n-extern int reg_operand ();\n-\n-extern int mixed_subreg_operand ();\n-\n-extern int reg_imm_operand ();\n-\n-extern int r0r1_reg_operand ();\n-\n-extern int r2r3_reg_operand ();\n-\n-extern int ext_low_reg_operand ();\n-\n-extern int ext_reg_operand ();\n-\n-extern int std_reg_operand ();\n-\n-extern int dst_operand ();\n-\n-extern int src_operand ();\n-\n-extern int src_hi_operand ();\n-\n-extern int lsrc_operand ();\n-\n-extern int tsrc_operand ();\n-\n-extern int addr_reg_operand ();\n-\n-extern int index_reg_operand ();\n-\n-extern int dp_reg_operand ();\n-\n-extern int sp_reg_operand ();\n-\n-extern int rc_reg_operand ();\n-\n-extern int st_reg_operand ();\n-\n-extern int symbolic_address_operand ();\n-\n-extern int ar0_reg_operand ();\n-\n-extern int ar0_mem_operand ();\n-\n-extern int ar1_reg_operand ();\n-\n-extern int ar1_mem_operand ();\n-\n-extern int ar2_reg_operand ();\n-\n-extern int ar2_mem_operand ();\n-\n-extern int ar3_reg_operand ();\n-\n-extern int ar3_mem_operand ();\n-\n-extern int ar4_reg_operand ();\n-\n-extern int ar4_mem_operand ();\n-\n-extern int ar5_reg_operand ();\n-\n-extern int ar5_mem_operand ();\n-\n-extern int ar6_reg_operand ();\n-\n-extern int ar6_mem_operand ();\n-\n-extern int ar7_reg_operand ();\n-\n-extern int ar7_mem_operand ();\n-\n-extern int ir0_reg_operand ();\n-\n-extern int ir0_mem_operand ();\n-\n-extern int ir1_reg_operand ();\n-\n-extern int ir1_mem_operand ();\n-\n-extern int group1_reg_operand ();\n-\n-extern int group1_mem_operand ();\n-\n-extern int arx_reg_operand ();\n-\n-extern int call_address_operand ();\n-\n-extern int par_ind_operand ();\n-\n-extern int not_rc_reg ();\n-\n-extern int not_modify_reg ();\n-\n-extern int c4x_shiftable_constant ();\n-\n-extern int c4x_H_constant ();\n-\n-extern int c4x_I_constant ();\n-\n-extern int c4x_J_constant ();\n-\n-extern int c4x_L_constant ();\n-\n-extern int c4x_Q_constraint ();\n-\n-extern int c4x_R_constraint ();\n-\n-extern int c4x_S_constraint ();\n-\n-extern int c4x_T_constraint ();\n-\n-extern int c4x_U_constraint ();\n-\n-extern void c4x_emit_libcall ();\n-\n-extern void c4x_emit_libcall3 ();\n-\n-extern void c4x_emit_libcall_mulhi ();\n-\n-extern int c4x_emit_move_sequence ();\n-\n-extern int legitimize_operands ();\n-\n-extern int valid_operands ();\n-\n-extern int valid_parallel_load_store ();\n-\n-extern int valid_parallel_operands_4 ();\n-\n-extern int valid_parallel_operands_5 ();\n-\n-extern int valid_parallel_operands_6 ();"}]}