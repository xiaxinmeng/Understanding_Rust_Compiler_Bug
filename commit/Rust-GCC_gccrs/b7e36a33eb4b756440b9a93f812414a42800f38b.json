{"sha": "b7e36a33eb4b756440b9a93f812414a42800f38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlMzZhMzNlYjRiNzU2NDQwYjlhOTNmODEyNDE0YTQyODAwZjM4Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-08-27T17:07:35Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-08-27T17:07:35Z"}, "message": "re PR middle-end/67005 (ICE: in verify_loop_structure, at cfgloop.c:1647 (loop with header n not in loop tree))\n\n\tPR middle-end/67005\n\t* tree-ssa-dce.c (remove_dead_stmt): Also schedule fixup if removing\n\tan entry into an irreducible region.\n\n\t* gcc.dg/torture/pr67005.c: New test.\n\nFrom-SVN: r227268", "tree": {"sha": "cae0692e9b91e7fb38962e506c13e43fc46937bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae0692e9b91e7fb38962e506c13e43fc46937bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e36a33eb4b756440b9a93f812414a42800f38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e36a33eb4b756440b9a93f812414a42800f38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e36a33eb4b756440b9a93f812414a42800f38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e36a33eb4b756440b9a93f812414a42800f38b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "078c4a8c534aa3a22735cd0af4b168ed844b671a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078c4a8c534aa3a22735cd0af4b168ed844b671a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078c4a8c534aa3a22735cd0af4b168ed844b671a"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "c9b3c3a51e2c5aaeb22708b24f432dbdaa7abbf7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7e36a33eb4b756440b9a93f812414a42800f38b", "patch": "@@ -1,3 +1,9 @@\n+2015-08-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/67005\n+\t* tree-ssa-dce.c (remove_dead_stmt): Also schedule fixup if removing\n+\tan entry into an irreducible region.\n+\n 2015-08-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "ef3ada08e0a8b627b1bbd4931a9d4e62882f6ebd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7e36a33eb4b756440b9a93f812414a42800f38b", "patch": "@@ -1,3 +1,8 @@\n+2015-08-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/67005\n+\t* gcc.dg/torture/pr67005.c: New test.\n+\n 2015-08-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.dg/tree-ssa/sra-15.c: New."}, {"sha": "922c5c475e805b7baf6c6b3df94683376e7d94d1", "filename": "gcc/testsuite/gcc.dg/torture/pr67005.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67005.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67005.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67005.c?ref=b7e36a33eb4b756440b9a93f812414a42800f38b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+int a;\n+void\n+f (void)\n+{\n+  if (!a);\n+  else\n+  lbl:\n+    a = a;\n+\n+  if (a)\n+    a = 8;\n+  goto lbl;\n+}"}, {"sha": "50dfdedff85637e3222c3a22a8adefdbe111b29b", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e36a33eb4b756440b9a93f812414a42800f38b/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=b7e36a33eb4b756440b9a93f812414a42800f38b", "patch": "@@ -1125,10 +1125,11 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb)\n \tif (e != e2)\n \t  {\n \t    cfg_altered = true;\n-\t    /* If we made a BB unconditionally exit a loop then this\n-\t       transform alters the set of BBs in the loop.  Schedule\n-\t       a fixup.  */\n-\t    if (loop_exit_edge_p (bb->loop_father, e))\n+\t    /* If we made a BB unconditionally exit a loop or removed\n+\t       an entry into an irreducible region, then this transform\n+\t       alters the set of BBs in the loop.  Schedule a fixup.  */\n+\t    if (loop_exit_edge_p (bb->loop_father, e)\n+\t\t|| (e2->dest->flags & BB_IRREDUCIBLE_LOOP))\n \t      loops_state_set (LOOPS_NEED_FIXUP);\n \t    remove_edge (e2);\n \t  }"}]}