{"sha": "11642de8a8c04a4e9c0eeea663e53e27eae7537a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2NDJkZThhOGMwNGE0ZTljMGVlZWE2NjNlNTNlMjdlYWU3NTM3YQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-05-01T13:32:42Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-05-01T13:32:42Z"}, "message": "Allow bound simplification of array subreferences.\n\ngcc/fortran/\n\t* simplify.c (simplify_bound_dim): Tighten the check for array fullness\n\tby also checking for absence of subreference.\n\t(simplify_bound): Don't skip simplification if the array\n\thas subreferences.\n\t(simplify_cobound): Same.\ngcc/testsuite/\n\t* gfortran.dg/bound_simplification_4.f90: New.\n\nFrom-SVN: r222681", "tree": {"sha": "290809dd2859bb40c21b878fcd3db098a2f2b075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290809dd2859bb40c21b878fcd3db098a2f2b075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11642de8a8c04a4e9c0eeea663e53e27eae7537a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11642de8a8c04a4e9c0eeea663e53e27eae7537a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11642de8a8c04a4e9c0eeea663e53e27eae7537a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11642de8a8c04a4e9c0eeea663e53e27eae7537a/comments", "author": null, "committer": null, "parents": [{"sha": "50093a330f9e4d1b816f77c4ff8bb0dcfea96549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50093a330f9e4d1b816f77c4ff8bb0dcfea96549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50093a330f9e4d1b816f77c4ff8bb0dcfea96549"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "fbf8f7b4005894bb57572db2aaae12a579b6dcea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=11642de8a8c04a4e9c0eeea663e53e27eae7537a", "patch": "@@ -1,3 +1,11 @@\n+2015-05-01  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* simplify.c (simplify_bound_dim): Tighten the check for array fullness\n+\tby also checking for absence of subreference.\n+\t(simplify_bound): Don't skip simplification if the array\n+\thas subreferences.\n+\t(simplify_cobound): Same.\n+\n 2015-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/37131"}, {"sha": "4ef9025901acf4db3851db5a796cde221980cd4d", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=11642de8a8c04a4e9c0eeea663e53e27eae7537a", "patch": "@@ -3338,7 +3338,7 @@ simplify_bound_dim (gfc_expr *array, gfc_expr *kind, int d, int upper,\n   result = gfc_get_constant_expr (BT_INTEGER, k, &array->where);\n \n   /* Then, we need to know the extent of the given dimension.  */\n-  if (coarray || ref->u.ar.type == AR_FULL)\n+  if (coarray || (ref->u.ar.type == AR_FULL && !ref->next))\n     {\n       l = as->lower[d-1];\n       u = as->upper[d-1];\n@@ -3417,10 +3417,7 @@ simplify_bound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind, int upper)\n \t    case AR_FULL:\n \t      /* We're done because 'as' has already been set in the\n \t\t previous iteration.  */\n-\t      if (!ref->next)\n-\t\tgoto done;\n-\n-\t    /* Fall through.  */\n+\t      goto done;\n \n \t    case AR_UNKNOWN:\n \t      return NULL;\n@@ -3589,10 +3586,7 @@ simplify_cobound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind, int upper)\n \t    case AR_FULL:\n \t      /* We're done because 'as' has already been set in the\n \t\t previous iteration.  */\n-\t      if (!ref->next)\n-\t        goto done;\n-\n-\t    /* Fall through.  */\n+\t      goto done;\n \n \t    case AR_UNKNOWN:\n \t      return NULL;"}, {"sha": "fb9c52135cb7330731676d911e0399c5ad116770", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11642de8a8c04a4e9c0eeea663e53e27eae7537a", "patch": "@@ -1,3 +1,7 @@\n+2015-05-01  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.dg/bound_simplification_4.f90: New.\n+\n 2015-04-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/crypto-builtin-2.c: Replace powerpc_vsx_ok"}, {"sha": "28a8d67137df8a1c30ddb93656ea3a28c282cdff", "filename": "gcc/testsuite/gfortran.dg/bound_simplification_4.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11642de8a8c04a4e9c0eeea663e53e27eae7537a/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_4.f90?ref=11642de8a8c04a4e9c0eeea663e53e27eae7537a", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcoarray=single -fdump-tree-original\" }\n+!\n+! Check that {L,U}{,CO}BOUND intrinsics are properly simplified.\n+!\n+  type :: t\n+    integer :: c\n+  end type t\n+\n+  type(t) :: d(3:8) = t(7)\n+  type(t) :: e[5:9,-1:*]\n+\n+  if (lbound(d,      1) /= 3) call abort\n+  if (lbound(d(3:5), 1) /= 1) call abort\n+  if (lbound(d%c,    1) /= 1) call abort  \n+  if (ubound(d,      1) /= 8) call abort  \n+  if (ubound(d(3:5), 1) /= 3) call abort\n+  if (ubound(d%c,    1) /= 6) call abort  \n+\n+  if (lcobound(e,   1) /=  5) call abort\n+  if (lcobound(e%c, 1) /=  5) call abort\n+  if (lcobound(e,   2) /= -1) call abort\n+  if (lcobound(e%c, 2) /= -1) call abort\n+  if (ucobound(e,   1) /=  9) call abort\n+  if (ucobound(e%c, 1) /=  9) call abort\n+  ! no simplification for ucobound(e{,%c}, dim=2)\n+end\n+! { dg-final { scan-tree-dump-not \"bound\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"abort\" \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}