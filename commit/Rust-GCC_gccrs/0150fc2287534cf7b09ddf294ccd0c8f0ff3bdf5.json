{"sha": "0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1MGZjMjI4NzUzNGNmN2IwOWRkZjI5NGNjZDBjOGYwZmYzYmRmNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T10:43:48Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T10:43:48Z"}, "message": "2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileLockImpl.java\n\t(static): Removed, not needed anymore.\n\t* gnu/java/nio/channels/FileChannelImpl.java\n\t(FileChannelImpl): Made final.\n\t(mode): Made private.\n\t(READ, WRITE, APPEND): Made public.\n\t(EXCL, SYNC, DSYNC): Likewise.\n\t(static): Load native JNI library, when needed.\n\t(length): Unused, removed.\n\t(available): Made public.\n\t(implPosition): Throws IOException.\n\t(seek): Likewise.\n\t(implTruncate): Likewise.\n\t(unlock): Likewise.\n\t(lock): Likewise.\n\nFrom-SVN: r80891", "tree": {"sha": "79bfc460bd7b5ba705a5b2a6766109d9f3f5497b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79bfc460bd7b5ba705a5b2a6766109d9f3f5497b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/comments", "author": null, "committer": null, "parents": [{"sha": "7431acbe5a56fb7a34777b040845a23d8135bfb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431acbe5a56fb7a34777b040845a23d8135bfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7431acbe5a56fb7a34777b040845a23d8135bfb7"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "9bc39aa5e4be24e32448ea848f6880735fa61b37", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "patch": "@@ -1,3 +1,21 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileLockImpl.java\n+\t(static): Removed, not needed anymore.\n+\t* gnu/java/nio/channels/FileChannelImpl.java\n+\t(FileChannelImpl): Made final.\n+\t(mode): Made private.\n+\t(READ, WRITE, APPEND): Made public.\n+\t(EXCL, SYNC, DSYNC): Likewise.\n+\t(static): Load native JNI library, when needed.\n+\t(length): Unused, removed.\n+\t(available): Made public.\n+\t(implPosition): Throws IOException.\n+\t(seek): Likewise.\n+\t(implTruncate): Likewise.\n+\t(unlock): Likewise.\n+\t(lock): Likewise.\n+\n 2004-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/AWTPermission.java,"}, {"sha": "c61b9caf10bceb61fac4bb8499965917dd7f98ec", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "patch": "@@ -38,9 +38,8 @@\n \n package gnu.java.nio;\n \n-import java.io.FileDescriptor;\n import java.io.IOException;\n-import java.nio.channels.*;\n+import java.nio.channels.FileLock;\n import gnu.classpath.Configuration;\n import gnu.java.nio.channels.FileChannelImpl;\n \n@@ -50,15 +49,6 @@\n  */\n public class FileLockImpl extends FileLock\n {\n-  static\n-  {\n-    // load the shared library needed for native methods.\n-    if (Configuration.INIT_LOAD_LIBRARY)\n-      {\n-        System.loadLibrary (\"javanio\");\n-      }\n-  }\n-  \n   private FileChannelImpl ch;\n   \n   public FileLockImpl (FileChannelImpl channel, long position,"}, {"sha": "4bddf268daf31439add8cc1cee2a18d3e5f47f2a", "filename": "libjava/gnu/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "patch": "@@ -39,12 +39,19 @@\n package gnu.java.nio.channels;\n \n import gnu.classpath.Configuration;\n-import gnu.gcj.RawData;\n import gnu.java.nio.FileLockImpl;\n-import java.io.*;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.MappedByteBuffer;\n-import java.nio.channels.*;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.NonReadableChannelException;\n+import java.nio.channels.NonWritableChannelException;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n \n /**\n  * This file is not user visible !\n@@ -54,22 +61,33 @@\n  * Upon a Input/Output/RandomAccessFile object.\n  */\n \n-public class FileChannelImpl extends FileChannel\n+public final class FileChannelImpl extends FileChannel\n {\n-  int mode;\n   // These are WHENCE values for seek.\n   static final int SET = 0;\n   static final int CUR = 1;\n \n   // These are mode values for open().\n-  static final int READ   = 1;\n-  static final int WRITE  = 2;\n-  static final int APPEND = 4;\n+  public static final int READ   = 1;\n+  public static final int WRITE  = 2;\n+  public static final int APPEND = 4;\n \n   // EXCL is used only when making a temp file.\n-  static final int EXCL   = 8;\n-  static final int SYNC   = 16;\n-  static final int DSYNC  = 32;\n+  public static final int EXCL   = 8;\n+  public static final int SYNC   = 16;\n+  public static final int DSYNC  = 32;\n+\n+  private static native void init();\n+\n+  static\n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary(\"javanio\");\n+      }\n+    \n+    init();\n+  }\n \n   /**\n    * This is the actual native file descriptor value\n@@ -81,8 +99,8 @@ public class FileChannelImpl extends FileChannel\n   // efficient way to accomplish that.\n   private int fd = -1;\n \n-  int length;\n   private long pos;\n+  private int mode;\n \n   public FileChannelImpl ()\n   {\n@@ -95,28 +113,25 @@ public FileChannelImpl (String path, int mode) throws FileNotFoundException\n     this.mode = mode;\n   }\n \n-  private static native void init();\n-  static { init (); }\n+  /* Used by init() (native code) */\n+  FileChannelImpl (int fd, int mode)\n+  {\n+    this.fd = fd;\n+    this.mode = mode;\n+  }\n \n   public static FileChannelImpl in;\n   public static FileChannelImpl out;\n   public static FileChannelImpl err;\n \n   private native int open (String path, int mode) throws FileNotFoundException;\n \n-  /** Attach to an already-opened file.  */\n-  public FileChannelImpl (int desc, int mode)\n-  {\n-    fd = desc;\n-    this.mode = mode;\n-  }\n-\n-  native int available () throws IOException;\n-  private native long implPosition ();\n-  private native void seek (long newPosition);\n-  private native void implTruncate (long size);\n+  public native int available () throws IOException;\n+  private native long implPosition () throws IOException;\n+  private native void seek (long newPosition) throws IOException;\n+  private native void implTruncate (long size) throws IOException;\n   \n-  public native void unlock (long pos, long len);\n+  public native void unlock (long pos, long len) throws IOException;\n \n   public native long size () throws IOException;\n     \n@@ -350,7 +365,7 @@ public FileLock tryLock (long position, long size, boolean shared)\n    * Otherwise return false.\n    */\n   private native boolean lock(long position, long size,\n-\t\t\t      boolean shared, boolean wait);\n+\t\t\t      boolean shared, boolean wait) throws IOException;\n   \n   public FileLock lock (long position, long size, boolean shared)\n     throws IOException"}]}