{"sha": "5809be05a2813f2a95d9787f388185fa31fbf3a2", "node_id": "C_kwDOANBUbNoAKDU4MDliZTA1YTI4MTNmMmE5NWQ5Nzg3ZjM4ODE4NWZhMzFmYmYzYTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T10:06:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T10:06:51Z"}, "message": "openmp: Add support for OMP_PLACES=ll_caches\n\nThis patch implements support for ll_caches abstract name in OMP_PLACES,\nwhich stands for places where logical cpus in each place share the last\nlevel cache.\n\nThis seems to work fine for me on x86 and kernel sources show that it is\nin common code, but on some machines on CompileFarm the files I'm using,\ni.e.\n/sys/devices/system/cpu/cpuN/cache/indexN/level\n/sys/devices/system/cpu/cpuN/cache/indexN/shared_cpu_list\ndon't exist, is that because they have too old kernel and newer kernels\nare fine or should I implement some fallback methods (which)?\nE.g. on gcc112.fsffrance.org I see just shared_cpu_map and not shared_cpu_list\n(with shared_cpu_map being harder to parse) and on another box I didn't even\nsee the cache subdirectories.\n\nWay to test this is\nOMP_PLACES=ll_caches OMP_DISPLAY_ENV=true LD_PRELOAD=.libs/libgomp.so.1 /bin/true\nand see what it prints on OMP_PLACES line.\n\n2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n\n\t* env.c (parse_places_var): Handle ll_caches as level 4.\n\t* config/linux/affinity.c (gomp_affinity_find_last_cache_level): New\n\tfunction.\n\t(gomp_affinity_init_level_1): Handle level 4 as logical cpus sharing\n\tlast level cache.\n\t(gomp_affinity_init_level): Likewise.\n\t* testsuite/libgomp.c/places-1.c: New test.\n\t* testsuite/libgomp.c/places-2.c: New test.\n\t* testsuite/libgomp.c/places-3.c: New test.\n\t* testsuite/libgomp.c/places-4.c: New test.", "tree": {"sha": "fc1a7e308495b15f9401e037d5d2aebcf21ab9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc1a7e308495b15f9401e037d5d2aebcf21ab9c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5809be05a2813f2a95d9787f388185fa31fbf3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5809be05a2813f2a95d9787f388185fa31fbf3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5809be05a2813f2a95d9787f388185fa31fbf3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5809be05a2813f2a95d9787f388185fa31fbf3a2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "32415537853c2b12e8430745bf8387586fdcf79d", "filename": "libgomp/config/linux/affinity.c", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Fconfig%2Flinux%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Fconfig%2Flinux%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Faffinity.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -223,6 +223,46 @@ gomp_affinity_finalize_place_list (bool quiet)\n   return true;\n }\n \n+/* Find the index of the last level cache.  We assume the index\n+   of the last level cache is the same for all logical CPUs.\n+   Also, if there are multiple caches with the same highest level,\n+   assume they have the same shared_cpu_list and pick the last one\n+   from them (highest index number).  */\n+\n+static int\n+gomp_affinity_find_last_cache_level (char *name, size_t prefix_len,\n+\t\t\t\t     unsigned long cpu)\n+{\n+  int ret = -1;\n+  unsigned long maxval = 0;\n+  char *line = NULL;\n+  size_t linelen = 0;\n+  FILE *f;\n+\n+  for (int l = 0; l < 128; l++)\n+    {\n+      sprintf (name + prefix_len, \"%lu/cache/index%u/level\", cpu, l);\n+      f = fopen (name, \"r\");\n+      if (f == NULL)\n+\tbreak;\n+      if (getline (&line, &linelen, f) > 0)\n+\t{\n+\t  unsigned long val;\n+\t  char *p;\n+\t  errno = 0;\n+\t  val = strtoul (line, &p, 10);\n+\t  if (!errno && val >= maxval)\n+\t    {\n+\t      ret = l;\n+\t      maxval = val;\n+\t    }\n+\t}\n+      fclose (f);\n+    }\n+  free (line);\n+  return ret;\n+}\n+\n static void\n gomp_affinity_init_level_1 (int level, int this_level, unsigned long count,\n \t\t\t    cpu_set_t *copy, char *name, bool quiet)\n@@ -232,12 +272,29 @@ gomp_affinity_init_level_1 (int level, int this_level, unsigned long count,\n   char *line = NULL;\n   size_t linelen = 0;\n   unsigned long i, max = 8 * gomp_cpuset_size;\n+  int init = -1;\n \n   for (i = 0; i < max && gomp_places_list_len < count; i++)\n     if (CPU_ISSET_S (i, gomp_cpuset_size, copy))\n       {\n-\tsprintf (name + prefix_len, \"%lu/topology/%s_siblings_list\",\n-\t\t i, this_level == 3 ? \"core\" : \"thread\");\n+\tif (level == 4)\n+\t  {\n+\t    if (init == -1)\n+\t      {\n+\t\tinit = gomp_affinity_find_last_cache_level (name, prefix_len,\n+\t\t\t\t\t\t\t    i);\n+\t\tif (init == -1)\n+\t\t  {\n+\t\t    CPU_CLR_S (i, gomp_cpuset_size, copy);\n+\t\t    continue;\n+\t\t  }\n+\t\tsprintf (name + prefix_len,\n+\t\t\t \"%lu/cache/index%u/shared_cpu_list\", i, init);\n+\t      }\n+\t  }\n+\telse\n+\t  sprintf (name + prefix_len, \"%lu/topology/%s_siblings_list\",\n+\t\t   i, this_level == 3 ? \"core\" : \"thread\");\n \tf = fopen (name, \"r\");\n \tif (f == NULL)\n \t  {\n@@ -302,7 +359,7 @@ bool\n gomp_affinity_init_level (int level, unsigned long count, bool quiet)\n {\n   char name[sizeof (\"/sys/devices/system/cpu/cpu/topology/\"\n-\t\t    \"thread_siblings_list\") + 3 * sizeof (unsigned long)];\n+\t\t    \"thread_siblings_list\") + 6 * sizeof (unsigned long)];\n   cpu_set_t *copy;\n \n   if (gomp_cpusetp)\n@@ -320,7 +377,8 @@ gomp_affinity_init_level (int level, unsigned long count, bool quiet)\n   copy = gomp_alloca (gomp_cpuset_size);\n   strcpy (name, \"/sys/devices/system/cpu/cpu\");\n   memcpy (copy, gomp_cpusetp, gomp_cpuset_size);\n-  gomp_affinity_init_level_1 (level, 3, count, copy, name, quiet);\n+  gomp_affinity_init_level_1 (level, level > 3 ? level : 3, count, copy, name,\n+\t\t\t      quiet);\n   if (gomp_places_list_len == 0)\n     {\n       if (!quiet)"}, {"sha": "38903c76b344fdcb774986af9d450cfd62ca03a0", "filename": "libgomp/env.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -696,6 +696,11 @@ parse_places_var (const char *name, bool ignore)\n       env += 7;\n       level = 3;\n     }\n+  else if (strncasecmp (env, \"ll_caches\", 9) == 0)\n+    {\n+      env += 9;\n+      level = 4;\n+    }\n   if (level)\n     {\n       count = ULONG_MAX;"}, {"sha": "1d7c4676fdc78676de80e3d835f6389f950b570f", "filename": "libgomp/testsuite/libgomp.c/places-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-1.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-set-target-env-var OMP_PLACES \"threads\" } */\n+\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  omp_display_env (0);\n+  return 0;\n+}"}, {"sha": "4513eb6f33313c710c3cdf73eeb1ad684e2717a6", "filename": "libgomp/testsuite/libgomp.c/places-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-2.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-set-target-env-var OMP_PLACES \"cores\" } */\n+\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  omp_display_env (0);\n+  return 0;\n+}"}, {"sha": "ddd994a6d7c228c3ad86d63a650719952d1fb073", "filename": "libgomp/testsuite/libgomp.c/places-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-3.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-set-target-env-var OMP_PLACES \"sockets\" } */\n+\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  omp_display_env (0);\n+  return 0;\n+}"}, {"sha": "9e3d3e1b7d685c86618b822820f02693d5b60777", "filename": "libgomp/testsuite/libgomp.c/places-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5809be05a2813f2a95d9787f388185fa31fbf3a2/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-4.c?ref=5809be05a2813f2a95d9787f388185fa31fbf3a2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-set-target-env-var OMP_PLACES \"ll_caches\" } */\n+\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  omp_display_env (0);\n+  return 0;\n+}"}]}