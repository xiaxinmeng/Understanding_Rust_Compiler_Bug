{"sha": "083586b88030b716c436119d18547063ed802cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzNTg2Yjg4MDMwYjcxNmM0MzYxMTlkMTg1NDcwNjNlZDgwMmNjNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-12-09T21:47:12Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-12-09T21:47:12Z"}, "message": "typeck.c (composite_pointer_error): New function.\n\n\t* typeck.c (composite_pointer_error): New function.\n\t(composite_pointer_type_r, composite_pointer_type): Call it.\n\nFrom-SVN: r167665", "tree": {"sha": "1fc9126d61bf7e336d3a06ffdd0ebeb7df40ea6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc9126d61bf7e336d3a06ffdd0ebeb7df40ea6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083586b88030b716c436119d18547063ed802cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083586b88030b716c436119d18547063ed802cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083586b88030b716c436119d18547063ed802cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083586b88030b716c436119d18547063ed802cc5/comments", "author": null, "committer": null, "parents": [{"sha": "197ef306047f8d5c3cb25540f4207a13bc559e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197ef306047f8d5c3cb25540f4207a13bc559e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197ef306047f8d5c3cb25540f4207a13bc559e28"}], "stats": {"total": 99, "additions": 38, "deletions": 61}, "files": [{"sha": "3c14d737d2bc3ab342a43dfd987423a289c0ba04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083586b88030b716c436119d18547063ed802cc5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083586b88030b716c436119d18547063ed802cc5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=083586b88030b716c436119d18547063ed802cc5", "patch": "@@ -1,3 +1,8 @@\n+2010-12-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* typeck.c (composite_pointer_error): New function.\n+\t(composite_pointer_type_r, composite_pointer_type): Call it.\n+\n 2010-12-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46348"}, {"sha": "a4bbd4eb1373391d546997f4afc874038f1dde52", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 33, "deletions": 61, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083586b88030b716c436119d18547063ed802cc5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083586b88030b716c436119d18547063ed802cc5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=083586b88030b716c436119d18547063ed802cc5", "patch": "@@ -443,6 +443,35 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n   return cp_common_type (t1, t2);\n }\n \n+static void\n+composite_pointer_error (diagnostic_t kind, tree t1, tree t2,\n+\t\t\t composite_pointer_operation operation)\n+{\n+  switch (operation)\n+    {\n+    case CPO_COMPARISON:\n+      emit_diagnostic (kind, input_location, 0,\n+\t\t       \"comparison between \"\n+\t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n+\t\t       t1, t2);\n+      break;\n+    case CPO_CONVERSION:\n+      emit_diagnostic (kind, input_location, 0,\n+\t\t       \"conversion between \"\n+\t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n+\t\t       t1, t2);\n+      break;\n+    case CPO_CONDITIONAL_EXPR:\n+      emit_diagnostic (kind, input_location, 0,\n+\t\t       \"conditional expression between \"\n+\t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n+\t\t       t1, t2);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Subroutine of composite_pointer_type to implement the recursive\n    case.  See that function for documentation of the parameters.  */\n \n@@ -486,28 +515,8 @@ composite_pointer_type_r (tree t1, tree t2,\n   else\n     {\n       if (complain & tf_error)\n-        {\n-          switch (operation)\n-            {\n-            case CPO_COMPARISON:\n-              permerror (input_location, \"comparison between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\",\n-                         t1, t2);\n-              break;\n-            case CPO_CONVERSION:\n-              permerror (input_location, \"conversion between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\",\n-                         t1, t2);\n-              break;\n-            case CPO_CONDITIONAL_EXPR:\n-              permerror (input_location, \"conditional expression between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\",\n-                         t1, t2);\n-              break;\n-            default:\n-              gcc_unreachable ();\n-            }\n-        }\n+\tcomposite_pointer_error (DK_PERMERROR, t1, t2, operation);\n+\n       result_type = void_type_node;\n     }\n   result_type = cp_build_qualified_type (result_type,\n@@ -520,28 +529,7 @@ composite_pointer_type_r (tree t1, tree t2,\n       if (!same_type_p (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\tTYPE_PTRMEM_CLASS_TYPE (t2))\n \t  && (complain & tf_error))\n-        {\n-          switch (operation)\n-            {\n-            case CPO_COMPARISON:\n-              permerror (input_location, \"comparison between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\", \n-                         t1, t2);\n-              break;\n-            case CPO_CONVERSION:\n-              permerror (input_location, \"conversion between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\",\n-                         t1, t2);\n-              break;\n-            case CPO_CONDITIONAL_EXPR:\n-              permerror (input_location, \"conditional expression between \"\n-                         \"distinct pointer types %qT and %qT lacks a cast\",\n-                         t1, t2);\n-              break;\n-            default:\n-              gcc_unreachable ();\n-            }\n-        }\n+\tcomposite_pointer_error (DK_PERMERROR, t1, t2, operation);\n       result_type = build_ptrmem_type (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\t\t       result_type);\n     }\n@@ -662,23 +650,7 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       else\n         {\n           if (complain & tf_error)\n-            switch (operation)\n-              {\n-              case CPO_COMPARISON:\n-                error (\"comparison between distinct \"\n-                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n-                break;\n-              case CPO_CONVERSION:\n-                error (\"conversion between distinct \"\n-                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n-                break;\n-              case CPO_CONDITIONAL_EXPR:\n-                error (\"conditional expression between distinct \"\n-                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n-                break;\n-              default:\n-                gcc_unreachable ();\n-              }\n+\t    composite_pointer_error (DK_ERROR, t1, t2, operation);\n           return error_mark_node;\n         }\n     }"}]}