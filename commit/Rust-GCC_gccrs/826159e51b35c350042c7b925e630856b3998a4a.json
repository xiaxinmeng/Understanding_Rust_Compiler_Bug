{"sha": "826159e51b35c350042c7b925e630856b3998a4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2MTU5ZTUxYjM1YzM1MDA0MmM3YjkyNWU2MzA4NTZiMzk5OGE0YQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-02-28T23:23:50Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-02-28T23:23:50Z"}, "message": "sh.c (unspec_bbr_uid): New.\n\n\t* config/sh/sh.c (unspec_bbr_uid): New.\n\t(gen_block_redirect): Use it instead of INSN_UID.\n\t(gen_far_branch): Likewise.\n\nFrom-SVN: r157128", "tree": {"sha": "2a666e28ff6ec07a5ca4360a04cdaeb250724b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a666e28ff6ec07a5ca4360a04cdaeb250724b98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826159e51b35c350042c7b925e630856b3998a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826159e51b35c350042c7b925e630856b3998a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826159e51b35c350042c7b925e630856b3998a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826159e51b35c350042c7b925e630856b3998a4a/comments", "author": null, "committer": null, "parents": [{"sha": "746ecbcda2f373c62317ce86e4e23f9df50b2254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746ecbcda2f373c62317ce86e4e23f9df50b2254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746ecbcda2f373c62317ce86e4e23f9df50b2254"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "0e34ccc0e1c14d380cad40069b8cf9b52a7fcf46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826159e51b35c350042c7b925e630856b3998a4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826159e51b35c350042c7b925e630856b3998a4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826159e51b35c350042c7b925e630856b3998a4a", "patch": "@@ -1,3 +1,9 @@\n+2010-02-28  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (unspec_bbr_uid): New.\n+\t(gen_block_redirect): Use it instead of INSN_UID.\n+\t(gen_far_branch): Likewise.\n+\n 2010-02-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/darwin.h (TARGET_SUBTARGET32_ISA_DEFAULT): Make"}, {"sha": "d1105e37feddb35ab278e3507c793d295db1c20a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826159e51b35c350042c7b925e630856b3998a4a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826159e51b35c350042c7b925e630856b3998a4a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=826159e51b35c350042c7b925e630856b3998a4a", "patch": "@@ -107,6 +107,9 @@ static int skip_cycles = 0;\n    and returned from sh_reorder2.  */\n static short cached_can_issue_more;\n \n+/* Unique number for UNSPEC_BBR pattern.  */\n+static unsigned int unspec_bbr_uid = 1;\n+\n /* Provides the class number of the smallest class containing\n    reg number.  */\n \n@@ -5012,8 +5015,8 @@ gen_block_redirect (rtx jump, int addr, int need_block)\n \t branch; simplejump_p fails for indirect jumps even if they have\n \t a JUMP_LABEL.  */\n       rtx insn = emit_insn_before (gen_indirect_jump_scratch\n-\t\t\t\t   (reg, GEN_INT (INSN_UID (JUMP_LABEL (jump))))\n-\t\t\t\t   , jump);\n+\t\t\t\t   (reg, GEN_INT (unspec_bbr_uid++)),\n+\t\t\t\t   jump);\n       /* ??? We would like this to have the scope of the jump, but that\n \t scope will change when a delay slot insn of an inner scope is added.\n \t Hence, after delay slot scheduling, we'll have to expect\n@@ -5028,8 +5031,8 @@ gen_block_redirect (rtx jump, int addr, int need_block)\n     /* We can't use JUMP_LABEL here because it might be undefined\n        when not optimizing.  */\n     return emit_insn_before (gen_block_branch_redirect\n-\t\t      (GEN_INT (INSN_UID (XEXP (SET_SRC (PATTERN (jump)), 0))))\n-\t\t      , jump);\n+\t\t\t     (GEN_INT (unspec_bbr_uid++)),\n+\t\t\t     jump);\n   return prev;\n }\n \n@@ -5088,7 +5091,7 @@ gen_far_branch (struct far_branch *bp)\n   if (bp->far_label)\n     (emit_insn_after\n      (gen_stuff_delay_slot\n-      (GEN_INT (INSN_UID (XEXP (SET_SRC (PATTERN (jump)), 0))),\n+      (GEN_INT (unspec_bbr_uid++),\n        GEN_INT (recog_memoized (insn) == CODE_FOR_branch_false)),\n       insn));\n   /* Prevent reorg from undoing our splits.  */"}]}