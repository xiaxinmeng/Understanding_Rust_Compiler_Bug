{"sha": "e5bb5009e45d12c013d6080fa76f9e09647de117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViYjUwMDllNDVkMTJjMDEzZDYwODBmYTc2ZjllMDk2NDdkZTExNw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-10-28T12:37:30Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-10-28T12:37:30Z"}, "message": "re PR rtl-optimization/41812 (test 20071030-1.c fails execution on powerpc64)\n\n2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR rtl-optimization/41812\n\n\tRevert:\n\t2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* df-problems.c (df_md_scratch): New.\n\t(df_md_alloc, df_md_free): Allocate/free it.\n\t(df_md_local_compute): Only include live registers in init.\n\t(df_md_transfer_function): Prune the in-set computed by\n\tthe confluence function, and the gen-set too.\n\nFrom-SVN: r153652", "tree": {"sha": "2d474fa2ac6022314b94c2109f3b9f7bfedd29e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d474fa2ac6022314b94c2109f3b9f7bfedd29e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5bb5009e45d12c013d6080fa76f9e09647de117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bb5009e45d12c013d6080fa76f9e09647de117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bb5009e45d12c013d6080fa76f9e09647de117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bb5009e45d12c013d6080fa76f9e09647de117/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "57a0bd7d5331c28d85396dac9cd40d995afbf55e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bb5009e45d12c013d6080fa76f9e09647de117/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bb5009e45d12c013d6080fa76f9e09647de117/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5bb5009e45d12c013d6080fa76f9e09647de117", "patch": "@@ -1,3 +1,16 @@\n+2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR rtl-optimization/41812\n+\n+\tRevert:\n+\t2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* df-problems.c (df_md_scratch): New.\n+\t(df_md_alloc, df_md_free): Allocate/free it.\n+\t(df_md_local_compute): Only include live registers in init.\n+\t(df_md_transfer_function): Prune the in-set computed by\n+\tthe confluence function, and the gen-set too.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/39715"}, {"sha": "e9896e311d11e2b94c3fc1c30537b921ab1ed586", "filename": "gcc/df-problems.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bb5009e45d12c013d6080fa76f9e09647de117/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bb5009e45d12c013d6080fa76f9e09647de117/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=e5bb5009e45d12c013d6080fa76f9e09647de117", "patch": "@@ -4026,10 +4026,6 @@ df_simulate_finalize_forwards (basic_block bb, bitmap live)\n     propagating the information to BB3's successors. \n    ---------------------------------------------------------------------------*/\n \n-/* Scratch var used by transfer functions.  This is used to do md analysis\n-   only for live registers.  */\n-static bitmap df_md_scratch;\n-\n /* Set basic block info.  */\n \n static void\n@@ -4073,7 +4069,6 @@ df_md_alloc (bitmap all_blocks)\n                                            sizeof (struct df_md_bb_info), 50);\n \n   df_grow_bb_info (df_md);\n-  df_md_scratch = BITMAP_ALLOC (NULL);\n \n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi)\n     {\n@@ -4249,10 +4244,8 @@ df_md_local_compute (bitmap all_blocks)\n       bitmap kill = df_md_get_bb_info (bb_index)->kill;\n       EXECUTE_IF_SET_IN_BITMAP (frontiers[bb_index], 0, df_bb_index, bi2)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (df_bb_index);\n \t  if (bitmap_bit_p (all_blocks, df_bb_index))\n-\t    bitmap_ior_and_into (df_md_get_bb_info (df_bb_index)->init, kill,\n-\t\t\t\t df_get_live_in (bb));\n+\t    bitmap_ior_into (df_md_get_bb_info (df_bb_index)->init, kill);\n \t}\n     }\n \n@@ -4282,24 +4275,13 @@ df_md_reset (bitmap all_blocks)\n static bool\n df_md_transfer_function (int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n   struct df_md_bb_info *bb_info = df_md_get_bb_info (bb_index);\n   bitmap in = bb_info->in;\n   bitmap out = bb_info->out;\n   bitmap gen = bb_info->gen;\n   bitmap kill = bb_info->kill;\n \n-  /* We need to use a scratch set here so that the value returned from\n-     this function invocation properly reflects if the sets changed in\n-     a significant way; i.e. not just because the live set was anded\n-     in.  */\n-  bitmap_and (df_md_scratch, gen, df_get_live_out (bb));\n-\n-  /* Multiple definitions of a register are not relevant if it is not\n-     used.  Thus we trim the result to the places where it is live.  */\n-  bitmap_and_into (in, df_get_live_in (bb));\n-\n-  return bitmap_ior_and_compl (out, df_md_scratch, in, kill);\n+  return bitmap_ior_and_compl (out, gen, in, kill);\n }\n \n /* Initialize the solution bit vectors for problem.  */\n@@ -4362,7 +4344,6 @@ df_md_free (void)\n \t}\n     }\n \n-  BITMAP_FREE (df_md_scratch);\n   free_alloc_pool (df_md->block_pool);\n \n   df_md->block_info_size = 0;"}]}