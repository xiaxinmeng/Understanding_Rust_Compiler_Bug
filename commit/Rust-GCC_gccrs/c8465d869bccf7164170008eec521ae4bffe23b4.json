{"sha": "c8465d869bccf7164170008eec521ae4bffe23b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0NjVkODY5YmNjZjcxNjQxNzAwMDhlZWM1MjFhZTRiZmZlMjNiNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-05T21:36:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-05T21:36:40Z"}, "message": "(do_jump): Fix error in last change.\n\nFrom-SVN: r9583", "tree": {"sha": "bd60a5b1c696e226f4cb2dbe1658f55cefc4e725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd60a5b1c696e226f4cb2dbe1658f55cefc4e725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8465d869bccf7164170008eec521ae4bffe23b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8465d869bccf7164170008eec521ae4bffe23b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8465d869bccf7164170008eec521ae4bffe23b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8465d869bccf7164170008eec521ae4bffe23b4/comments", "author": null, "committer": null, "parents": [{"sha": "3ce88d8f5cb23e02dd61ad88f8d1c92b4538c916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce88d8f5cb23e02dd61ad88f8d1c92b4538c916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce88d8f5cb23e02dd61ad88f8d1c92b4538c916"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "dacdbcb56d0f1d3ead106528c6b7cdf4288732e9", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8465d869bccf7164170008eec521ae4bffe23b4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8465d869bccf7164170008eec521ae4bffe23b4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c8465d869bccf7164170008eec521ae4bffe23b4", "patch": "@@ -9106,14 +9106,18 @@ do_jump (exp, if_false_label, if_true_label)\n \t    (fold\n \t     (build (TRUTH_ANDIF_EXPR, TREE_TYPE (exp),\n \t\t     fold (build (EQ_EXPR, TREE_TYPE (exp),\n-\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (REALPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n-\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (REALPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 1))))),\n \t\t     fold (build (EQ_EXPR, TREE_TYPE (exp),\n-\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n-\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 1))))))),\n \t     if_false_label, if_true_label);\n \telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_INT\n@@ -9136,14 +9140,18 @@ do_jump (exp, if_false_label, if_true_label)\n \t    (fold\n \t     (build (TRUTH_ORIF_EXPR, TREE_TYPE (exp),\n \t\t     fold (build (NE_EXPR, TREE_TYPE (exp),\n-\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (REALPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n-\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (REALPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 1))))),\n \t\t     fold (build (NE_EXPR, TREE_TYPE (exp),\n-\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n-\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (inner_type),\n \t\t\t\t\t\tTREE_OPERAND (exp, 1))))))),\n \t     if_false_label, if_true_label);\n \telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_INT"}]}