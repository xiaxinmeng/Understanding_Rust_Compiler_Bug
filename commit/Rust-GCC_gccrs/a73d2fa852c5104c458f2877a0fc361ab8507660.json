{"sha": "a73d2fa852c5104c458f2877a0fc361ab8507660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczZDJmYTg1MmM1MTA0YzQ1OGYyODc3YTBmYzM2MWFiODUwNzY2MA==", "commit": {"author": {"name": "Nina Dinka Ranns", "email": "dinka.ranns@gmail.com", "date": "2019-05-14T15:48:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T15:48:27Z"}, "message": "nonesuch is insufficiently useless (lwg2996)\n\n2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n\n\tnonesuch is insufficiently useless (lwg2996)\n\t* include/std/type_traits (struct __nonesuch): Added private base\n\tclass to make __nonesuch not an aggregate and removed deleted default\n\tconstructor.\n\t* include/bits/stl_pair.h (struct __nonesuch_no_braces): Removed.\n\t(operator=(const pair&)): Use __nonesuch instead of\n\t__nonesuch_no_braces.\n\t(operator=(pair&&)): Likewise\n\t* include/std/tuple (operator=(const tuple&)): Use __nonesuch instead\n\tof __nonesuch_no_braces.\n\t(operator=(tuple&&)): Likewise\n\t* include/experimental/type_traits (struct nonesuch): Added private\n\tbase class to make nonesuch not an aggregate and removed deleted\n\tdefault constructor.\n\t* testsuite/20_util/nonesuch/nonesuch.cc: New.\n\t* testsuite/experimental/type_traits/nonesuch.cc: New.\n\nFrom-SVN: r271175", "tree": {"sha": "3c15fd80d60e9927584b4d66b66cb9d67f9275f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c15fd80d60e9927584b4d66b66cb9d67f9275f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73d2fa852c5104c458f2877a0fc361ab8507660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73d2fa852c5104c458f2877a0fc361ab8507660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73d2fa852c5104c458f2877a0fc361ab8507660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73d2fa852c5104c458f2877a0fc361ab8507660/comments", "author": {"login": "NinaRanns", "id": 57705710, "node_id": "MDQ6VXNlcjU3NzA1NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/57705710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NinaRanns", "html_url": "https://github.com/NinaRanns", "followers_url": "https://api.github.com/users/NinaRanns/followers", "following_url": "https://api.github.com/users/NinaRanns/following{/other_user}", "gists_url": "https://api.github.com/users/NinaRanns/gists{/gist_id}", "starred_url": "https://api.github.com/users/NinaRanns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NinaRanns/subscriptions", "organizations_url": "https://api.github.com/users/NinaRanns/orgs", "repos_url": "https://api.github.com/users/NinaRanns/repos", "events_url": "https://api.github.com/users/NinaRanns/events{/privacy}", "received_events_url": "https://api.github.com/users/NinaRanns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "330b17474c618af0574c0b8e83a06287e53afe87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b17474c618af0574c0b8e83a06287e53afe87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330b17474c618af0574c0b8e83a06287e53afe87"}], "stats": {"total": 125, "additions": 108, "deletions": 17}, "files": [{"sha": "5a21ebcb0228155244b9539b5c43c2fccd71a782", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -1,3 +1,22 @@\n+2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+\n+\tnonesuch is insufficiently useless (lwg2996)\n+\t* include/std/type_traits (struct __nonesuch): Added private base\n+\tclass to make __nonesuch not an aggregate and removed deleted default\n+\tconstructor.\n+\t* include/bits/stl_pair.h (struct __nonesuch_no_braces): Removed.\n+\t(operator=(const pair&)): Use __nonesuch instead of\n+\t__nonesuch_no_braces.\n+\t(operator=(pair&&)): Likewise\n+\t* include/std/tuple (operator=(const tuple&)): Use __nonesuch instead\n+\tof __nonesuch_no_braces.\n+\t(operator=(tuple&&)): Likewise\n+\t* include/experimental/type_traits (struct nonesuch): Added private\n+\tbase class to make nonesuch not an aggregate and removed deleted\n+\tdefault constructor.\n+\t* testsuite/20_util/nonesuch/nonesuch.cc: New.\n+\t* testsuite/experimental/type_traits/nonesuch.cc: New.\n+\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/std_function.h (_Simple_type_wrapper): Remove."}, {"sha": "c04f169bb6c70d8af05ca828c54beb5b09f249e1", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -180,13 +180,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n       }\n   };\n-\n-  // PR libstdc++/79141, a utility type for preventing\n-  // initialization of an argument of a disabled assignment\n-  // operator from a pair of empty braces.\n-  struct __nonesuch_no_braces : std::__nonesuch {\n-    explicit __nonesuch_no_braces(const __nonesuch&) = delete;\n-  };\n #endif // C++11\n \n   template<typename _U1, typename _U2> class __pair_base\n@@ -393,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(typename conditional<\n \t\t__and_<is_copy_assignable<_T1>,\n \t\t       is_copy_assignable<_T2>>::value,\n-\t\tconst pair&, const __nonesuch_no_braces&>::type __p)\n+\t\tconst pair&, const __nonesuch&>::type __p)\n       {\n \tfirst = __p.first;\n \tsecond = __p.second;\n@@ -404,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(typename conditional<\n \t\t__and_<is_move_assignable<_T1>,\n \t\t       is_move_assignable<_T2>>::value,\n-\t\tpair&&, __nonesuch_no_braces&&>::type __p)\n+\t\tpair&&, __nonesuch&&>::type __p)\n       noexcept(__and_<is_nothrow_move_assignable<_T1>,\n \t\t      is_nothrow_move_assignable<_T2>>::value)\n       {"}, {"sha": "c2b2dcc2739bd58976c55dbf64ba8dbe7dfb9467", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -227,9 +227,9 @@ inline namespace fundamentals_v2\n \n template<typename...> using void_t = void;\n \n-struct nonesuch\n+struct __nonesuchbase {};\n+struct nonesuch : private __nonesuchbase\n {\n-  nonesuch() = delete;\n   ~nonesuch() = delete;\n   nonesuch(nonesuch const&) = delete;\n   void operator=(nonesuch const&) = delete;"}, {"sha": "a28111749f0b39a0390012ced0257e25d05b11b4", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -832,7 +832,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple&\n       operator=(typename conditional<__assignable<const _Elements&...>(),\n \t\t\t\t     const tuple&,\n-\t\t\t\t     const __nonesuch_no_braces&>::type __in)\n+\t\t\t\t     const __nonesuch&>::type __in)\n       noexcept(__nothrow_assignable<const _Elements&...>())\n       {\n \tthis->_M_assign(__in);\n@@ -842,7 +842,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple&\n       operator=(typename conditional<__assignable<_Elements...>(),\n \t\t\t\t     tuple&&,\n-\t\t\t\t     __nonesuch_no_braces&&>::type __in)\n+\t\t\t\t     __nonesuch&&>::type __in)\n       noexcept(__nothrow_assignable<_Elements...>())\n       {\n \tthis->_M_assign(std::move(__in));\n@@ -1243,7 +1243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple&\n       operator=(typename conditional<__assignable<const _T1&, const _T2&>(),\n \t\t\t\t     const tuple&,\n-\t\t\t\t     const __nonesuch_no_braces&>::type __in)\n+\t\t\t\t     const __nonesuch&>::type __in)\n       noexcept(__nothrow_assignable<const _T1&, const _T2&>())\n       {\n \tthis->_M_assign(__in);\n@@ -1253,7 +1253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple&\n       operator=(typename conditional<__assignable<_T1, _T2>(),\n \t\t\t\t     tuple&&,\n-\t\t\t\t     __nonesuch_no_braces&&>::type __in)\n+\t\t\t\t     __nonesuch&&>::type __in)\n       noexcept(__nothrow_assignable<_T1, _T2>())\n       {\n \tthis->_M_assign(std::move(__in));"}, {"sha": "b1c3e943e791cc914b5c598b0590102c0e67424e", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -2792,8 +2792,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n              __call_is_nothrow_<_Fn, _Args...>>::type\n     { };\n \n-  struct __nonesuch {\n-    __nonesuch() = delete;\n+  struct __nonesuchbase {};\n+  struct __nonesuch : private __nonesuchbase {\n     ~__nonesuch() = delete;\n     __nonesuch(__nonesuch const&) = delete;\n     void operator=(__nonesuch const&) = delete;"}, {"sha": "100d7e3b752ff1af0810338462645b90ebca7200", "filename": "libstdc++-v3/testsuite/20_util/nonesuch/nonesuch.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnonesuch%2Fnonesuch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnonesuch%2Fnonesuch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnonesuch%2Fnonesuch.cc?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -0,0 +1,39 @@\n+// 2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <type_traits>\n+// Example taken from LWG2960\n+\n+using std::__nonesuch;\n+struct such {};\n+void f(const such&){};\n+void f(const std::__nonesuch&);\n+\n+int main(){\n+ static_assert(!std::is_default_constructible<__nonesuch>::value,\n+\t\t \"__nonesuch is default constructible\");\n+ static_assert(!std::is_copy_constructible<__nonesuch>::value,\n+\t\t \"__nonesuch is copy constructible\");\n+ static_assert(!std::is_assignable<__nonesuch, __nonesuch>::value,\n+\t\t \"__nonesuch is assignable\");\n+ static_assert(!std::is_destructible<__nonesuch>::value,\n+\t\t \"__nonesuch is destructible\");\n+ f({});\n+}"}, {"sha": "2e624026b1530fc2aeafad1c9dc38a03b232709a", "filename": "libstdc++-v3/testsuite/experimental/type_traits/nonesuch.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fnonesuch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d2fa852c5104c458f2877a0fc361ab8507660/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fnonesuch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fnonesuch.cc?ref=a73d2fa852c5104c458f2877a0fc361ab8507660", "patch": "@@ -0,0 +1,40 @@\n+// 2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/type_traits>\n+// Example taken from LWG2960\n+\n+using std::experimental::nonesuch;\n+\n+struct such {};\n+void f(const such&){};\n+void f(const nonesuch&);\n+\n+int main(){\n+ static_assert(!std::is_default_constructible<nonesuch>::value,\n+\t\t \"nonesuch is default constructible\");\n+ static_assert(!std::is_copy_constructible<nonesuch>::value,\n+\t\t \"nonesuch is copy constructible\");\n+ static_assert(!std::is_assignable<nonesuch,nonesuch>::value,\n+\t\t \"nonesuch is assignable\");\n+ static_assert(!std::is_destructible<nonesuch>::value,\n+\t\t \"nonesuch is destructible\");\n+ f({});\n+}"}]}