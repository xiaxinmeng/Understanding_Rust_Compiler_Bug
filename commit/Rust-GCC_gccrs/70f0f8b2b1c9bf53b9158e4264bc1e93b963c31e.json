{"sha": "70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmMGY4YjJiMWM5YmY1M2I5MTU4ZTQyNjRiYzFlOTNiOTYzYzMxZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-09-02T19:31:47Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-09-02T19:31:47Z"}, "message": "rs6000-builtin.def (XVCVSXDDP_SCALE): New built-in definition.\n\n[gcc]\n\n2014-09-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (XVCVSXDDP_SCALE):  New\n\tbuilt-in definition.\n\t(XVCVUXDDP_SCALE): Likewise.\n\t(XVCVDPSXDS_SCALE): Likewise.\n\t(XVCVDPUXDS_SCALE): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):  Add\n\tentries for VSX_BUILTIN_XVCVSXDDP_SCALE,\n\tVSX_BUILTIN_XVCVUXDDP_SCALE, VSX_BUILTIN_XVCVDPSXDS_SCALE, and\n\tVSX_BUILTIN_XVCVDPUXDS_SCALE.\n\t* config/rs6000/rs6000-protos.h (rs6000_scale_v2df): New\n\tprototype.\n\t* config/rs6000/rs6000.c (real.h): New include.\n\t(rs6000_scale_v2df): New function.\n\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSXDDP): New unspec.\n\t(UNSPEC_VSX_XVCVUXDDP): Likewise.\n\t(UNSPEC_VSX_XVCVDPSXDS): Likewise.\n\t(UNSPEC_VSX_XVCVDPUXDS): Likewise.\n\t(vsx_xvcvsxddp_scale): New define_expand.\n\t(vsx_xvcvsxddp): New define_insn.\n\t(vsx_xvcvuxddp_scale): New define_expand.\n\t(vsx_xvcvuxddp): New define_insn.\n\t(vsx_xvcvdpsxds_scale): New define_expand.\n\t(vsx_xvcvdpsxds): New define_insn.\n\t(vsx_xvcvdpuxds_scale): New define_expand.\n\t(vsx_xvcvdpuxds): New define_insn.\n\t* doc/extend.texi (vec_ctf): Add new prototypes.\n\t(vec_cts): Likewise.\n\t(vec_ctu): Likewise.\n\t(vec_splat): Likewise.\n\t(vec_div): Likewise.\n\t(vec_mul): Likewise.\n\n[gcc/testsuite]\n\n2014-09-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/builtins-1.c: Add tests for vec_ctf,\n\tvec_cts, and vec_ctu.\n\t* gcc.target/powerpc/builtins-2.c: Likewise.\n\nFrom-SVN: r214831", "tree": {"sha": "87d4cbb1d8d6767a5af7c52d897c5a7f5bc64527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87d4cbb1d8d6767a5af7c52d897c5a7f5bc64527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb42f96863d48ea9a091e993c10c10f902035c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb42f96863d48ea9a091e993c10c10f902035c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb42f96863d48ea9a091e993c10c10f902035c9d"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "b60054b18f63a8b9b320f3a3efdf6a6e9dfb6f39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -1,3 +1,37 @@\n+2014-09-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (XVCVSXDDP_SCALE):  New\n+\tbuilt-in definition.\n+\t(XVCVUXDDP_SCALE): Likewise.\n+\t(XVCVDPSXDS_SCALE): Likewise.\n+\t(XVCVDPUXDS_SCALE): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):  Add\n+\tentries for VSX_BUILTIN_XVCVSXDDP_SCALE,\n+\tVSX_BUILTIN_XVCVUXDDP_SCALE, VSX_BUILTIN_XVCVDPSXDS_SCALE, and\n+\tVSX_BUILTIN_XVCVDPUXDS_SCALE.\n+\t* config/rs6000/rs6000-protos.h (rs6000_scale_v2df): New\n+\tprototype.\n+\t* config/rs6000/rs6000.c (real.h): New include.\n+\t(rs6000_scale_v2df): New function.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSXDDP): New unspec.\n+\t(UNSPEC_VSX_XVCVUXDDP): Likewise.\n+\t(UNSPEC_VSX_XVCVDPSXDS): Likewise.\n+\t(UNSPEC_VSX_XVCVDPUXDS): Likewise.\n+\t(vsx_xvcvsxddp_scale): New define_expand.\n+\t(vsx_xvcvsxddp): New define_insn.\n+\t(vsx_xvcvuxddp_scale): New define_expand.\n+\t(vsx_xvcvuxddp): New define_insn.\n+\t(vsx_xvcvdpsxds_scale): New define_expand.\n+\t(vsx_xvcvdpsxds): New define_insn.\n+\t(vsx_xvcvdpuxds_scale): New define_expand.\n+\t(vsx_xvcvdpuxds): New define_insn.\n+\t* doc/extend.texi (vec_ctf): Add new prototypes.\n+\t(vec_cts): Likewise.\n+\t(vec_ctu): Likewise.\n+\t(vec_splat): Likewise.\n+\t(vec_div): Likewise.\n+\t(vec_mul): Likewise.\n+\n 2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/62275"}, {"sha": "9bb8703949ca25a89380681cb669250ae5c82e91", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -1264,6 +1264,11 @@ BU_VSX_2 (DIV_V2DI,           \"div_2di\",        CONST,  vsx_div_v2di)\n BU_VSX_2 (UDIV_V2DI,          \"udiv_2di\",       CONST,  vsx_udiv_v2di)\n BU_VSX_2 (MUL_V2DI,           \"mul_2di\",        CONST,  vsx_mul_v2di)\n \n+BU_VSX_2 (XVCVSXDDP_SCALE,    \"xvcvsxddp_scale\", CONST, vsx_xvcvsxddp_scale)\n+BU_VSX_2 (XVCVUXDDP_SCALE,    \"xvcvuxddp_scale\", CONST, vsx_xvcvuxddp_scale)\n+BU_VSX_2 (XVCVDPSXDS_SCALE,   \"xvcvdpsxds_scale\", CONST, vsx_xvcvdpsxds_scale)\n+BU_VSX_2 (XVCVDPUXDS_SCALE,   \"xvcvdpuxds_scale\", CONST, vsx_xvcvdpuxds_scale)\n+\n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)\n BU_VSX_A (XVNABSDP,\t      \"xvnabsdp\",\tCONST,\tvsx_nabsv2df2)"}, {"sha": "470efc5a140d3b42c84779285c5928d10b2ccbb4", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -1151,14 +1151,22 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CTF, ALTIVEC_BUILTIN_VCFSX,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SI, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CTF, VSX_BUILTIN_XVCVSXDDP_SCALE,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DI, RS6000_BTI_INTSI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CTF, VSX_BUILTIN_XVCVUXDDP_SCALE,\n+    RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, 0},\n   { ALTIVEC_BUILTIN_VEC_VCFSX, ALTIVEC_BUILTIN_VCFSX,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SI, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCFUX, ALTIVEC_BUILTIN_VCFUX,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CTS, ALTIVEC_BUILTIN_VCTSXS,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CTS, VSX_BUILTIN_XVCVDPSXDS_SCALE,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CTU, ALTIVEC_BUILTIN_VCTUXS,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CTU, VSX_BUILTIN_XVCVDPUXDS_SCALE,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVSP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVDP,"}, {"sha": "b3a1a0a2b091ce7f083cf7822b1aff272e4e80f1", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -65,6 +65,7 @@ extern void altivec_expand_stvx_be (rtx, rtx, enum machine_mode, unsigned);\n extern void altivec_expand_stvex_be (rtx, rtx, enum machine_mode, unsigned);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n+extern void rs6000_scale_v2df (rtx, rtx, int);\n extern void build_mask64_2_operands (rtx, rtx *);\n extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);"}, {"sha": "19b2be2733555f29bcbdc4cb91747d4251b2d9f5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -81,6 +81,7 @@\n #include \"builtins.h\"\n #include \"context.h\"\n #include \"tree-pass.h\"\n+#include \"real.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -31250,6 +31251,23 @@ rs6000_expand_interleave (rtx target, rtx op0, rtx op1, bool highp)\n   rs6000_do_expand_vec_perm (target, op0, op1, vmode, nelt, perm);\n }\n \n+/* Scale a V2DF vector SRC by two to the SCALE and place in TGT.  */\n+void\n+rs6000_scale_v2df (rtx tgt, rtx src, int scale)\n+{\n+  HOST_WIDE_INT hwi_scale (scale);\n+  REAL_VALUE_TYPE r_pow;\n+  rtvec v = rtvec_alloc (2);\n+  rtx elt;\n+  rtx scale_vec = gen_reg_rtx (V2DFmode);\n+  (void)real_powi (&r_pow, DFmode, &dconst2, hwi_scale);\n+  elt = CONST_DOUBLE_FROM_REAL_VALUE (r_pow, DFmode);\n+  RTVEC_ELT (v, 0) = elt;\n+  RTVEC_ELT (v, 1) = elt;\n+  rs6000_expand_vector_init (scale_vec, gen_rtx_PARALLEL (V2DFmode, v));\n+  emit_insn (gen_mulv2df3 (tgt, src, scale_vec));\n+}\n+\n /* Return an RTX representing where to find the function value of a\n    function returning MODE.  */\n static rtx"}, {"sha": "922471fe292be9540917db80653b0eb6fa909afb", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -264,6 +264,10 @@\n    UNSPEC_VSX_DIVSD\n    UNSPEC_VSX_DIVUD\n    UNSPEC_VSX_MULSD\n+   UNSPEC_VSX_XVCVSXDDP\n+   UNSPEC_VSX_XVCVUXDDP\n+   UNSPEC_VSX_XVCVDPSXDS\n+   UNSPEC_VSX_XVCVDPUXDS\n   ])\n \n ;; VSX moves\n@@ -1356,6 +1360,102 @@\n   \"xscvspdpn %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n+;; Convert and scale (used by vec_ctf, vec_cts, vec_ctu for double/long long)\n+\n+(define_expand \"vsx_xvcvsxddp_scale\"\n+  [(match_operand:V2DF 0 \"vsx_register_operand\" \"\")\n+   (match_operand:V2DI 1 \"vsx_register_operand\" \"\")\n+   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  int scale = INTVAL(operands[2]);\n+  emit_insn (gen_vsx_xvcvsxddp (op0, op1));\n+  if (scale != 0)\n+    rs6000_scale_v2df (op0, op0, -scale);\n+  DONE;\n+})\n+\n+(define_insn \"vsx_xvcvsxddp\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_XVCVSXDDP))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvsxddp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_expand \"vsx_xvcvuxddp_scale\"\n+  [(match_operand:V2DF 0 \"vsx_register_operand\" \"\")\n+   (match_operand:V2DI 1 \"vsx_register_operand\" \"\")\n+   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  int scale = INTVAL(operands[2]);\n+  emit_insn (gen_vsx_xvcvuxddp (op0, op1));\n+  if (scale != 0)\n+    rs6000_scale_v2df (op0, op0, -scale);\n+  DONE;\n+})\n+\n+(define_insn \"vsx_xvcvuxddp\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_XVCVUXDDP))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvuxddp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_expand \"vsx_xvcvdpsxds_scale\"\n+  [(match_operand:V2DI 0 \"vsx_register_operand\" \"\")\n+   (match_operand:V2DF 1 \"vsx_register_operand\" \"\")\n+   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx tmp = gen_reg_rtx (V2DFmode);\n+  int scale = INTVAL(operands[2]);\n+  if (scale != 0)\n+    rs6000_scale_v2df (tmp, op1, scale);\n+  emit_insn (gen_vsx_xvcvdpsxds (op0, tmp));\n+  DONE;\n+})\n+\n+(define_insn \"vsx_xvcvdpsxds\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_XVCVDPSXDS))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvdpsxds %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_expand \"vsx_xvcvdpuxds_scale\"\n+  [(match_operand:V2DI 0 \"vsx_register_operand\" \"\")\n+   (match_operand:V2DF 1 \"vsx_register_operand\" \"\")\n+   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx tmp = gen_reg_rtx (V2DFmode);\n+  int scale = INTVAL(operands[2]);\n+  if (scale != 0)\n+    rs6000_scale_v2df (tmp, op1, scale);\n+  emit_insn (gen_vsx_xvcvdpuxds (op0, tmp));\n+  DONE;\n+})\n+\n+(define_insn \"vsx_xvcvdpuxds\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_XVCVDPUXDS))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvdpuxds %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n ;; Convert from 64-bit to 32-bit types\n ;; Note, favor the Altivec registers since the usual use of these instructions\n ;; is in vector converts and we need to use the Altivec vperm instruction."}, {"sha": "4eef90018206d9fbfeabb860e9326beb001c255c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -13882,14 +13882,18 @@ vector float vec_cpsgn (vector float, vector float);\n \n vector float vec_ctf (vector unsigned int, const int);\n vector float vec_ctf (vector signed int, const int);\n+vector double vec_ctf (vector unsigned long, const int);\n+vector double vec_ctf (vector signed long, const int);\n \n vector float vec_vcfsx (vector signed int, const int);\n \n vector float vec_vcfux (vector unsigned int, const int);\n \n vector signed int vec_cts (vector float, const int);\n+vector signed long vec_cts (vector double, const int);\n \n vector unsigned int vec_ctu (vector float, const int);\n+vector unsigned long vec_ctu (vector double, const int);\n \n void vec_dss (const int);\n \n@@ -14725,6 +14729,8 @@ vector float vec_splat (vector float, const int);\n vector signed int vec_splat (vector signed int, const int);\n vector unsigned int vec_splat (vector unsigned int, const int);\n vector bool int vec_splat (vector bool int, const int);\n+vector signed long vec_splat (vector signed long, const int);\n+vector unsigned long vec_splat (vector unsigned long, const int);\n \n vector signed char vec_splats (signed char);\n vector unsigned char vec_splats (unsigned char);\n@@ -15461,6 +15467,8 @@ vector bool long vec_cmplt (vector double, vector double);\n vector double vec_cpsgn (vector double, vector double);\n vector float vec_div (vector float, vector float);\n vector double vec_div (vector double, vector double);\n+vector long vec_div (vector long, vector long);\n+vector unsigned long vec_div (vector unsigned long, vector unsigned long);\n vector double vec_floor (vector double);\n vector double vec_ld (int, const vector double *);\n vector double vec_ld (int, const double *);\n@@ -15487,6 +15495,8 @@ vector float vec_msub (vector float, vector float, vector float);\n vector double vec_msub (vector double, vector double, vector double);\n vector float vec_mul (vector float, vector float);\n vector double vec_mul (vector double, vector double);\n+vector long vec_mul (vector long, vector long);\n+vector unsigned long vec_mul (vector unsigned long, vector unsigned long);\n vector float vec_nearbyint (vector float);\n vector double vec_nearbyint (vector double);\n vector float vec_nmadd (vector float, vector float, vector float);"}, {"sha": "c36316ccbf7d8b47ca907585aeff8e9625a081b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -1,3 +1,9 @@\n+2014-09-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c: Add tests for vec_ctf,\n+\tvec_cts, and vec_ctu.\n+\t* gcc.target/powerpc/builtins-2.c: Likewise.\n+\n 2014-09-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* g++.old-deja/g++.eh/badalloc1.C [!STACK_SIZE && !__FreeBSD__]"}, {"sha": "3da714698d66da60ca7c8c2c098f8a30b1251246", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -157,5 +157,10 @@ int main ()\n   vector long long l8 = vec_mul (l3, l4);\n   vector unsigned long long u6 = vec_mul (u3, u4);\n \n+  vector double dh = vec_ctf (la, -2);\n+  vector double di = vec_ctf (ua, 2);\n+  vector long long l9 = vec_cts (dh, -2);\n+  vector unsigned long long u7 = vec_ctu (di, 2);\n+\n   return 0;\n }"}, {"sha": "7f4a3924efdd8133c73f7379044fd47d3904dff3", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c?ref=70f0f8b2b1c9bf53b9158e4264bc1e93b963c31e", "patch": "@@ -34,5 +34,14 @@ int main ()\n       || ue[0] != 27L || ue[1] != 27L || uf[0] != 14L || uf[1] != 14L)\n     abort ();\n \n+  vector double da = vec_ctf (sa, -2);\n+  vector double db = vec_ctf (ua, 2);\n+  vector long long sg = vec_cts (da, -2);\n+  vector unsigned long long ug = vec_ctu (db, 2);\n+\n+  if (da[0] != 108.0 || da[1] != -56.0 || db[0] != 6.75 || db[1] != 3.5\n+      || sg[0] != 27L || sg[1] != -14L || ug[0] != 27L || ug[1] != 14L)\n+    abort ();\n+\n   return 0;\n }"}]}