{"sha": "1b449375c5fc5e21c13104fcacda78af1054571e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0NDkzNzVjNWZjNWUyMWMxMzEwNGZjYWNkYTc4YWYxMDU0NTcxZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-12-15T13:31:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-12-15T13:31:28Z"}, "message": "re PR preprocessor/15167 (Internal compiler error with \"#pragma once\")\n\n\tPR preprocessor/15167\n\t* files.c (destroy_cpp_file): New function.\n\t(should_stack_file): Make a new file if the\n\tcompared file is still stacked.\n\nFrom-SVN: r92194", "tree": {"sha": "ee4f13a206730085a5823040cd5d0b9a0e3f2b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4f13a206730085a5823040cd5d0b9a0e3f2b44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b449375c5fc5e21c13104fcacda78af1054571e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b449375c5fc5e21c13104fcacda78af1054571e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b449375c5fc5e21c13104fcacda78af1054571e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b449375c5fc5e21c13104fcacda78af1054571e/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8c83c1828de1ed0e3a3a2974a4b273be92fa79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c83c1828de1ed0e3a3a2974a4b273be92fa79a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c83c1828de1ed0e3a3a2974a4b273be92fa79a"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "80fb3ccb2027d7fdd57bbc60ff48b6fa9b27a41c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -1,3 +1,11 @@\n+2004-12-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* cpp/pragma-once-1.c: New test.\n+\t* cpp/pragma-once-1b.h: Likewise.\n+\t* cpp/pragma-once-1c.h: Likewise.\n+\t* cpp/pragma-once-1d.h: Likewise.\n+\t* cpp/inc/pragma-once-1a.h: Likewise.\n+\n 2004-12-15  Bud Davis  <bdavis9659@comcast.net>\n             Steven G. Kargle  <kargls@comcast.net>\n "}, {"sha": "7de64121662cccffccfae49e3d5d2f7a207d7d0e", "filename": "gcc/testsuite/gcc.dg/cpp/inc/pragma-once-1a.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpragma-once-1a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpragma-once-1a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpragma-once-1a.h?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -0,0 +1,6 @@\n+#ifndef _A_H_\n+#define _A_H_\n+\n+#include \"../pragma-once-1b.h\"\n+\n+#endif"}, {"sha": "23e24b8c3ea3a3060bb1ca973c22e6a0c3a3db6a", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-once-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1.c?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -0,0 +1,8 @@\n+/* PR preprocessor/15167 */\n+/* Origin: Roland Meub <Roland.Meub@Tenovis.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-I.\" } */\n+\n+#include \"inc/pragma-once-1a.h\"\n+#include \"pragma-once-1d.h\""}, {"sha": "9c17db4dd517b33384c77ca9a3ef73bd7163ba28", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-once-1b.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1b.h?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -0,0 +1,8 @@\n+#ifndef _B_H_\n+#define _B_H_\n+\n+#pragma once\n+\n+#include \"pragma-once-1c.h\"\n+\n+#endif"}, {"sha": "cd50024f611d4dde284fdc5e38b0e054ed5b7d05", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-once-1c.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1c.h?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -0,0 +1,6 @@\n+#ifndef _C_H_\n+#define _C_H_\n+\n+#include \"pragma-once-1b.h\"\n+\n+#endif"}, {"sha": "0c5db2dc7418ae2ecfd7bd38619900edeeabca5b", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-once-1d.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-once-1d.h?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -0,0 +1,6 @@\n+#ifndef _D_H_\n+#define _D_H_\n+\n+#include \"pragma-once-1b.h\"\n+\n+#endif"}, {"sha": "41e8aaec7d235dfb3d22ca637abff82bac9d19f7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -1,3 +1,10 @@\n+2004-12-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR preprocessor/15167\n+\t* files.c (destroy_cpp_file): New function.\n+\t(should_stack_file): Make a new file if the\n+\tcompared file is still stacked.\n+\n 2004-11-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \tPR preprocessor/17610 "}, {"sha": "bd5f8dd5114b48336cf52a26cfe8fd8d593298ab", "filename": "libcpp/files.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b449375c5fc5e21c13104fcacda78af1054571e/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b449375c5fc5e21c13104fcacda78af1054571e/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=1b449375c5fc5e21c13104fcacda78af1054571e", "patch": "@@ -161,6 +161,7 @@ static void open_file_failed (cpp_reader *pfile, _cpp_file *file);\n static struct file_hash_entry *search_cache (struct file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n+static void destroy_cpp_file (_cpp_file *);\n static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n static void allocate_file_hash_entries (cpp_reader *pfile);\n static struct file_hash_entry *new_file_hash_entry (cpp_reader *pfile);\n@@ -667,12 +668,38 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n       if ((import || f->once_only)\n \t  && f->err_no == 0\n \t  && f->st.st_mtime == file->st.st_mtime\n-\t  && f->st.st_size == file->st.st_size\n-\t  && read_file (pfile, f)\n-\t  /* Size might have changed in read_file().  */\n-\t  && f->st.st_size == file->st.st_size\n-\t  && !memcmp (f->buffer, file->buffer, f->st.st_size))\n-\tbreak;\n+\t  && f->st.st_size == file->st.st_size)\n+\t{\n+\t  _cpp_file *ref_file;\n+\t  bool same_file_p = false;\n+\n+\t  if (f->buffer && !f->buffer_valid)\n+\t    {\n+\t      /* We already have a buffer but it is not valid, because\n+\t\t the file is still stacked.  Make a new one.  */\n+\t      ref_file = make_cpp_file (pfile, f->dir, f->name);\n+\t      ref_file->path = f->path;\n+\t    }\n+\t  else\n+\t    /* The file is not stacked anymore.  We can reuse it.  */\n+\t    ref_file = f;\n+\n+\t  same_file_p = read_file (pfile, ref_file)\n+\t\t\t/* Size might have changed in read_file().  */\n+\t\t\t&& ref_file->st.st_size == file->st.st_size\n+\t\t\t&& !memcmp (ref_file->buffer,\n+\t\t\t\t    file->buffer,\n+\t\t\t\t    file->st.st_size);\n+\n+\t  if (f->buffer && !f->buffer_valid)\n+\t    {\n+\t      ref_file->path = 0;\n+\t      destroy_cpp_file (ref_file);\n+\t    }\n+\n+\t  if (same_file_p)\n+\t    break;\n+\t}\n     }\n \n   return f == NULL;\n@@ -870,6 +897,16 @@ make_cpp_file (cpp_reader *pfile, cpp_dir *dir, const char *fname)\n   return file;\n }\n \n+/* Release a _cpp_file structure.  */\n+static void\n+destroy_cpp_file (_cpp_file *file)\n+{\n+  if (file->buffer)\n+    free ((void *) file->buffer);\n+  free ((void *) file->name);\n+  free (file);\n+}\n+\n /* A hash of directory names.  The directory names are the path names\n    of files which contain a #include \"\", the included file name is\n    appended to this directories."}]}