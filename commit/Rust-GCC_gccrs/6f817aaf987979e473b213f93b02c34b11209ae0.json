{"sha": "6f817aaf987979e473b213f93b02c34b11209ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4MTdhYWY5ODc5NzllNDczYjIxM2Y5M2IwMmMzNGIxMTIwOWFlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-24T15:08:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-24T15:08:37Z"}, "message": "move to subdirs\n\nFrom-SVN: r44301", "tree": {"sha": "109804103fbaaca84d3e7ce9e9457e26d43ec80c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/109804103fbaaca84d3e7ce9e9457e26d43ec80c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f817aaf987979e473b213f93b02c34b11209ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f817aaf987979e473b213f93b02c34b11209ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f817aaf987979e473b213f93b02c34b11209ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f817aaf987979e473b213f93b02c34b11209ae0/comments", "author": null, "committer": null, "parents": [{"sha": "f8b529aa0a7a54c178fdc13b2033ee14a4b69c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b529aa0a7a54c178fdc13b2033ee14a4b69c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b529aa0a7a54c178fdc13b2033ee14a4b69c73"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "e8b5f409d7c7937d70a5a0f4b9a97eb686d2904a", "filename": "gcc/testsuite/g++.dg/abi/mangle2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle2.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,19 @@\n+// Test that we handle mangling of statics in inlines properly.\n+// { dg-options -fno-weak }\n+// { dg-do run }\n+\n+inline int f ()\n+{\n+  static int nested;\n+  nested = 24;\n+  {\n+    static int nested;\n+    nested = 42;\n+  }\n+  return (nested != 24);\n+}\n+\n+int main()\n+{\n+  return f ();\n+}"}, {"sha": "90a4af0ec67e035275d027a9ea29918be21c06ba", "filename": "gcc/testsuite/g++.dg/ext/instantiate1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finstantiate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finstantiate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finstantiate1.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,32 @@\n+// Test that 'extern template' suppresses instantiations.\n+// { dg-do link }\n+// { dg-options \"\" }\n+\n+template <class T> void f (T) { }\n+extern template void f (int);\n+\n+template <class T> struct A {\n+  void f ();\n+};\n+template <class T> void A<T>::f () { }\n+extern template struct A<int>;\n+\n+// { dg-error \"void f<int>\\\\(int\\\\)\" \"suppressing f<int>\" { target *-*-* } \"0\" }\n+void test_f_int () { f(42); } \n+\n+// { dg-error \"A<int>::f\\\\(\\\\)\" \"suppressing A<int>\" { target *-*-* } \"0\" }\n+void test_A_int_f () { A<int> a; a.f (); }\n+\n+// { dg-bogus \"void f<double>\\\\(double\\\\)\" \"f<double>\" { target *-*-* } \"0\" }\n+void test_f_double () { f (2.0); }\n+\n+// { dg-bogus \"A<double>::f\\\\(\\\\)\" \"A<double>\" { target *-*-* } \"0\" }\n+void test_A_double_f () { A<double> b; b.f (); }\n+\n+int main ()\n+{\n+  test_f_int ();\n+  test_A_int_f ();\n+  test_f_double ();\n+  test_A_double_f ();\n+}"}, {"sha": "bf883eae21f863254a42eb055e076fd92414b5ae", "filename": "gcc/testsuite/g++.dg/ext/lvalue1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,10 @@\n+// Test that we complain about the gcc cast-as-lvalue extension.\n+\n+int main ()\n+{\n+  char c;\n+\n+  static_cast<int>(c) = 2; // { dg-error \"lvalue\" \"not an lvalue\" }\n+\n+  return c != 2;\n+}"}, {"sha": "cba16252288a240a4992520a63271a7cb6f5bc2a", "filename": "gcc/testsuite/g++.dg/opt/nrv1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv1.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,28 @@\n+// Test for the named return value optimization.\n+// { dg-do run }\n+// { dg-options -fno-inline }\n+\n+int c;\n+int d;\n+\n+struct A\n+{\n+  A() { ++c; }\n+  A(const A&) { ++c; };\n+  ~A() { ++d; }\n+};\n+\n+inline A f ()\n+{\n+  A a;\n+  return a;\n+}\n+\n+int main ()\n+{\n+  {\n+    A a = f ();\n+  }\n+\n+  return !(c == 1 && c == d);\n+}"}, {"sha": "d0170cd18f6765431422533b1edbb17d962b90f7", "filename": "gcc/testsuite/g++.dg/other/init-ref1.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref1.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,45 @@\n+// Submitted by Erik Rozendaal <dlr@acm.org>\n+// Test case for GNATS bug 787.\n+// { dg-do run }\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static int calls;\n+\n+int &foo (int &arg)\n+{\n+  calls++;\n+  arg=0;\n+  return arg;\n+}\n+\n+int &identity (int &x)\n+{\n+  return x;\n+}\n+\n+int main()\n+{\n+  int a;\n+\n+  calls = 0;\n+  int &b = ++foo (a);\n+  if (calls > 1)\n+    abort ();\n+  if (&a != &b)\n+    abort ();\n+  if (a != 1)\n+    abort ();\n+\n+  calls = 0;\n+  int &c = ++identity (++foo (a));\n+  if (calls > 1)\n+    abort ();\n+  if (&a != &c)\n+    abort ();\n+  if (a != 2)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "6d9448a8e9c8628aa5d26526688b7474f7d31abc", "filename": "gcc/testsuite/g++.dg/other/init-ref2.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit-ref2.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -0,0 +1,42 @@\n+// Submitted by Jason Merrill <jason_merrill@redhat.com>\n+// Test for proper handling of local static references.\n+// { dg-do run }\n+\n+int r;\n+\n+int c;\n+int f ()\n+{\n+  // Test that we only initialize i once.\n+  if (++c > 1)\n+    ++r;\n+  return 42;\n+}\n+\n+const int *p;\n+void g ()\n+{\n+  static const int &i = f();\n+\n+  // Test that i points to the same place in both calls.\n+  if (p && p != &i)\n+    ++r;\n+  // Test that if so, it points to static data.\n+  if (i != 42)\n+    ++r;\n+\n+  p = &i;\n+}\n+\n+void h ()\n+{\n+  int arr[] = { 1, 1, 1, 1, 1, 1, 1 };\n+  g ();\n+}\n+\n+int main ()\n+{\n+  g ();\n+  h ();\n+  return r;\n+}"}, {"sha": "e9800bf160d495734dd565bd109f84cf9604fc03", "filename": "gcc/testsuite/g++.dg/other/stdbool-if.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdbool-if.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdbool-if.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdbool-if.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "previous_filename": "gcc/testsuite/g++.dg/stdbool-if.C"}, {"sha": "e7982896a927614941a6d410c5eb67225dce5144", "filename": "gcc/testsuite/g++.dg/warn/friend.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ffriend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ffriend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ffriend.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "previous_filename": "gcc/testsuite/g++.dg/friend-warn.C"}]}