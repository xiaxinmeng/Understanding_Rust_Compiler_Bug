{"sha": "3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwNWRhNjg0OWY1NTQ4ZGI1MWZmYTE1MDMwYjFmYzhhYWNiOGQ5Yw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-12-03T17:40:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-17T10:49:23Z"}, "message": "[Ada] Ada2020: AI12-0400 Ambiguities associated with Vector\n\ngcc/ada/\n\n\t* libgnat/a-cbdlli.adb, libgnat/a-cbdlli.ads,\n\tlibgnat/a-cdlili.adb, libgnat/a-cdlili.ads,\n\tlibgnat/a-cidlli.adb, libgnat/a-cidlli.ads,\n\tlibgnat/a-cobove.adb, libgnat/a-cobove.ads,\n\tlibgnat/a-coinve.adb, libgnat/a-coinve.ads,\n\tlibgnat/a-convec.adb, libgnat/a-convec.ads: Add *_Vector\n\toperations, remove default for Count, rename Append_One to be\n\tAppend.", "tree": {"sha": "b3aeb7ef83784fe171a9a22f159d42525d4adf9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3aeb7ef83784fe171a9a22f159d42525d4adf9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e68e7de0fb6dfc9099a333f800dc904eb3c9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e68e7de0fb6dfc9099a333f800dc904eb3c9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e68e7de0fb6dfc9099a333f800dc904eb3c9e7"}], "stats": {"total": 430, "additions": 261, "deletions": 169}, "files": [{"sha": "948b70689f97bb2de4e79a2a676e48b64ef121a7", "filename": "gcc/ada/libgnat/a-cbdlli.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -199,23 +199,19 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n+      Count     : Count_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n-   ---------------\n-   -- Append_One --\n-   ---------------\n-\n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    ------------\n    -- Assign --"}, {"sha": "4574aa65afd461a100b0fb68703d8cb7c3efa9fb", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -57,7 +57,7 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty        => Empty,\n-                            Add_Unnamed  => Append_One);\n+                            Add_Unnamed  => Append);\n    pragma Preelaborable_Initialization (List);\n \n    type Cursor is private;\n@@ -151,9 +151,9 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n \n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type);\n "}, {"sha": "08c29f2bcb666cac41220061c4f7d6764ccae12c", "filename": "gcc/ada/libgnat/a-cdlili.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -158,23 +158,19 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n+      Count     : Count_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n-   ---------------\n-   -- Append_One --\n-   ---------------\n-\n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    ------------\n    -- Assign --"}, {"sha": "53de78b4e5129f6bd7a0eb15731edfe8e6450eb3", "filename": "gcc/ada/libgnat/a-cdlili.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -58,7 +58,7 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty       => Empty,\n-                            Add_Unnamed => Append_One);\n+                            Add_Unnamed => Append);\n \n    pragma Preelaborable_Initialization (List);\n \n@@ -154,9 +154,9 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n \n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type);\n "}, {"sha": "79df5a940b244c7a57623bd218628706a07276a0", "filename": "gcc/ada/libgnat/a-cidlli.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -179,23 +179,19 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n+      Count     : Count_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n-   ---------------\n-   -- Append_One --\n-   ---------------\n-\n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type)\n    is\n    begin\n       Insert (Container, No_Element, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    ------------\n    -- Assign --"}, {"sha": "c75e5af7858be9148a4ca025e834d5fe11139d26", "filename": "gcc/ada/libgnat/a-cidlli.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -57,7 +57,7 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty       => Empty,\n-                            Add_Unnamed => Append_One);\n+                            Add_Unnamed => Append);\n \n    pragma Preelaborable_Initialization (List);\n \n@@ -147,9 +147,9 @@ is\n    procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n \n-   procedure Append_One\n+   procedure Append\n      (Container : in out List;\n       New_Item  : Element_Type);\n "}, {"sha": "8a8b279a9c0f2a6259f373ded952823404c9c6ab", "filename": "gcc/ada/libgnat/a-cobove.adb", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -321,46 +321,50 @@ package body Ada.Containers.Bounded_Vectors is\n    -- Append --\n    ------------\n \n-   procedure Append (Container : in out Vector; New_Item : Vector) is\n+   procedure Append\n+     (Container : in out Vector;\n+      New_Item  : Element_Type;\n+      Count     : Count_Type)\n+   is\n    begin\n-      if New_Item.Is_Empty then\n+      if Count = 0 then\n          return;\n       end if;\n \n       if Checks and then Container.Last >= Index_Type'Last then\n          raise Constraint_Error with \"vector is already at its maximum length\";\n       end if;\n \n-      Container.Insert (Container.Last + 1, New_Item);\n+      Container.Insert (Container.Last + 1, New_Item, Count);\n    end Append;\n \n-   procedure Append\n-     (Container : in out Vector;\n-      New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n-   is\n+   -------------------\n+   -- Append_Vector --\n+   -------------------\n+\n+   procedure Append_Vector (Container : in out Vector; New_Item : Vector) is\n    begin\n-      if Count = 0 then\n+      if New_Item.Is_Empty then\n          return;\n       end if;\n \n       if Checks and then Container.Last >= Index_Type'Last then\n          raise Constraint_Error with \"vector is already at its maximum length\";\n       end if;\n \n-      Container.Insert (Container.Last + 1, New_Item, Count);\n-   end Append;\n+      Container.Insert_Vector (Container.Last + 1, New_Item);\n+   end Append_Vector;\n \n-   ----------------\n-   -- Append_One --\n-   ----------------\n+   ------------\n+   -- Append --\n+   ------------\n \n-   procedure Append_One (Container : in out Vector;\n-                         New_Item  :        Element_Type)\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type)\n    is\n    begin\n       Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    --------------\n    -- Capacity --\n@@ -1243,7 +1247,7 @@ package body Ada.Containers.Bounded_Vectors is\n       end if;\n    end Insert;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector)\n@@ -1309,9 +1313,9 @@ package body Ada.Containers.Bounded_Vectors is\n \n          Container.Elements (B + N - Src'Length .. B + N - 1) := Src;\n       end;\n-   end Insert;\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector)\n@@ -1343,10 +1347,10 @@ package body Ada.Containers.Bounded_Vectors is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n-   end Insert;\n+      Insert_Vector (Container, Index, New_Item);\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n@@ -1387,10 +1391,10 @@ package body Ada.Containers.Bounded_Vectors is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n+      Insert_Vector (Container, Index, New_Item);\n \n       Position := Cursor'(Container'Unchecked_Access, Index);\n-   end Insert;\n+   end Insert_Vector;\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -2028,23 +2032,24 @@ package body Ada.Containers.Bounded_Vectors is\n    -- Prepend --\n    -------------\n \n-   procedure Prepend (Container : in out Vector; New_Item : Vector) is\n-   begin\n-      Insert (Container, Index_Type'First, New_Item);\n-   end Prepend;\n-\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1)\n    is\n    begin\n-      Insert (Container,\n-              Index_Type'First,\n-              New_Item,\n-              Count);\n+      Insert (Container, Index_Type'First, New_Item, Count);\n    end Prepend;\n \n+   --------------------\n+   -- Prepend_Vector --\n+   --------------------\n+\n+   procedure Prepend_Vector (Container : in out Vector; New_Item : Vector) is\n+   begin\n+      Insert_Vector (Container, Index_Type'First, New_Item);\n+   end Prepend_Vector;\n+\n    --------------\n    -- Previous --\n    --------------"}, {"sha": "324ca840378b88f9c92508c65dc3b5ce13a71951", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -61,7 +61,7 @@ package Ada.Containers.Bounded_Vectors is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty          => Empty,\n-                            Add_Unnamed    => Append_One,\n+                            Add_Unnamed    => Append,\n                             New_Indexed    => New_Vector,\n                             Assign_Indexed => Replace_Element);\n \n@@ -190,22 +190,41 @@ package Ada.Containers.Bounded_Vectors is\n \n    procedure Move (Target : in out Vector; Source : in out Vector);\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector);\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Extended_Index;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector);\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n       Position  : out Cursor);\n \n+   procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector;\n+      Position  : out Cursor) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Insert\n      (Container : in out Vector;\n       Before    : Extended_Index;\n@@ -236,27 +255,36 @@ package Ada.Containers.Bounded_Vectors is\n       Position  : out Cursor;\n       Count     : Count_Type := 1);\n \n-   procedure Prepend\n+   procedure Prepend_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n \n+   procedure Prepend\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Prepend_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1);\n \n-   procedure Append\n+   procedure Append_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n \n+   procedure Append\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Append_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n \n-   procedure Append_One (Container : in out Vector;\n-                         New_Item  :        Element_Type);\n-   --  Ada_2020 aggregate operation.\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type);\n \n    procedure Insert_Space\n      (Container : in out Vector;"}, {"sha": "051aa711d6a41bd940b1955d7df9efd045c67d80", "filename": "gcc/ada/libgnat/a-coinve.adb", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -67,16 +67,16 @@ is\n    begin\n       return Result : Vector do\n          Reserve_Capacity (Result, Length (Left) + Length (Right));\n-         Append (Result, Left);\n-         Append (Result, Right);\n+         Append_Vector (Result, Left);\n+         Append_Vector (Result, Right);\n       end return;\n    end \"&\";\n \n    function \"&\" (Left  : Vector; Right : Element_Type) return Vector is\n    begin\n       return Result : Vector do\n          Reserve_Capacity (Result, Length (Left) + 1);\n-         Append (Result, Left);\n+         Append_Vector (Result, Left);\n          Append (Result, Right);\n       end return;\n    end \"&\";\n@@ -86,7 +86,7 @@ is\n       return Result : Vector do\n          Reserve_Capacity (Result, 1 + Length (Right));\n          Append (Result, Left);\n-         Append (Result, Right);\n+         Append_Vector (Result, Right);\n       end return;\n    end \"&\";\n \n@@ -176,25 +176,25 @@ is\n       end;\n    end Adjust;\n \n-   ------------\n-   -- Append --\n-   ------------\n+   -------------------\n+   -- Append_Vector --\n+   -------------------\n \n-   procedure Append (Container : in out Vector; New_Item : Vector) is\n+   procedure Append_Vector (Container : in out Vector; New_Item : Vector) is\n    begin\n       if Is_Empty (New_Item) then\n          return;\n       elsif Checks and then Container.Last = Index_Type'Last then\n          raise Constraint_Error with \"vector is already at its maximum length\";\n       else\n-         Insert (Container, Container.Last + 1, New_Item);\n+         Insert_Vector (Container, Container.Last + 1, New_Item);\n       end if;\n-   end Append;\n+   end Append_Vector;\n \n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n+      Count     : Count_Type)\n    is\n    begin\n       --  In the general case, we pass the buck to Insert, but for efficiency,\n@@ -229,16 +229,16 @@ is\n       end if;\n    end Append;\n \n-   ----------------\n-   -- Append_One --\n-   ----------------\n+   ------------\n+   -- Append --\n+   ------------\n \n-   procedure Append_One (Container : in out Vector;\n+   procedure Append (Container : in out Vector;\n                         New_Item   :        Element_Type)\n    is\n    begin\n       Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    ----------------------\n    -- Append_Slow_Path --\n@@ -269,7 +269,7 @@ is\n          return;\n       else\n          Target.Clear;\n-         Target.Append (Source);\n+         Target.Append_Vector (Source);\n       end if;\n    end Assign;\n \n@@ -1619,7 +1619,7 @@ is\n       end;\n    end Insert;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector)\n@@ -1766,9 +1766,9 @@ is\n             Dst_Index := Dst_Index + 1;\n          end loop;\n       end;\n-   end Insert;\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector)\n@@ -1798,10 +1798,10 @@ is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n-   end Insert;\n+      Insert_Vector (Container, Index, New_Item);\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n@@ -1838,10 +1838,10 @@ is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n+      Insert_Vector (Container, Index, New_Item);\n \n       Position := (Container'Unrestricted_Access, Index);\n-   end Insert;\n+   end Insert_Vector;\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -2559,11 +2559,6 @@ is\n    -- Prepend --\n    -------------\n \n-   procedure Prepend (Container : in out Vector; New_Item : Vector) is\n-   begin\n-      Insert (Container, Index_Type'First, New_Item);\n-   end Prepend;\n-\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n@@ -2573,6 +2568,15 @@ is\n       Insert (Container, Index_Type'First, New_Item, Count);\n    end Prepend;\n \n+   -------------\n+   -- Prepend_Vector --\n+   -------------\n+\n+   procedure Prepend_Vector (Container : in out Vector; New_Item : Vector) is\n+   begin\n+      Insert_Vector (Container, Index_Type'First, New_Item);\n+   end Prepend_Vector;\n+\n    --------------\n    -- Previous --\n    --------------"}, {"sha": "c9364c7a3e334ee910a4514026fe09f3c551473c", "filename": "gcc/ada/libgnat/a-coinve.ads", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -64,7 +64,7 @@ is\n      Default_Iterator  => Iterate,\n      Iterator_Element  => Element_Type,\n      Aggregate         => (Empty          => Empty_Vector,\n-                           Add_Unnamed    => Append_One,\n+                           Add_Unnamed    => Append,\n                            New_Indexed    => New_Vector,\n                            Assign_Indexed => Replace_Element);\n \n@@ -195,22 +195,41 @@ is\n \n    procedure Move (Target : in out Vector; Source : in out Vector);\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector);\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Extended_Index;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector);\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n       Position  : out Cursor);\n \n+   procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector;\n+      Position  : out Cursor) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Insert\n      (Container : in out Vector;\n       Before    : Extended_Index;\n@@ -230,26 +249,36 @@ is\n       Position  : out Cursor;\n       Count     : Count_Type := 1);\n \n-   procedure Prepend\n+   procedure Prepend_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n \n+   procedure Prepend\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Prepend_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1);\n \n-   procedure Append\n+   procedure Append_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n \n+   procedure Append\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Append_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n \n-   procedure Append_One (Container : in out Vector;\n-                        New_Item  :        Element_Type);\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type);\n \n    procedure Insert_Space\n      (Container : in out Vector;"}, {"sha": "fec72cc21b3773b569114897b4c32fe7cb837d7b", "filename": "gcc/ada/libgnat/a-convec.adb", "status": "modified", "additions": 44, "deletions": 36, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.adb?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -64,16 +64,16 @@ is\n    begin\n       return Result : Vector do\n          Reserve_Capacity (Result, Length (Left) + Length (Right));\n-         Append (Result, Left);\n-         Append (Result, Right);\n+         Append_Vector (Result, Left);\n+         Append_Vector (Result, Right);\n       end return;\n    end \"&\";\n \n    function \"&\" (Left  : Vector; Right : Element_Type) return Vector is\n    begin\n       return Result : Vector do\n          Reserve_Capacity (Result, Length (Left) + 1);\n-         Append (Result, Left);\n+         Append_Vector (Result, Left);\n          Append (Result, Right);\n       end return;\n    end \"&\";\n@@ -83,7 +83,7 @@ is\n       return Result : Vector do\n          Reserve_Capacity (Result, 1 + Length (Right));\n          Append (Result, Left);\n-         Append (Result, Right);\n+         Append_Vector (Result, Right);\n       end return;\n    end \"&\";\n \n@@ -167,21 +167,10 @@ is\n    -- Append --\n    ------------\n \n-   procedure Append (Container : in out Vector; New_Item : Vector) is\n-   begin\n-      if Is_Empty (New_Item) then\n-         return;\n-      elsif Checks and then Container.Last = Index_Type'Last then\n-         raise Constraint_Error with \"vector is already at its maximum length\";\n-      else\n-         Insert (Container, Container.Last + 1, New_Item);\n-      end if;\n-   end Append;\n-\n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1)\n+      Count     : Count_Type)\n    is\n    begin\n       --  In the general case, we pass the buck to Insert, but for efficiency,\n@@ -210,16 +199,31 @@ is\n       end if;\n    end Append;\n \n-   ----------------\n-   -- Append_One --\n-   ----------------\n+   -------------------\n+   -- Append_Vector --\n+   -------------------\n+\n+   procedure Append_Vector (Container : in out Vector; New_Item : Vector) is\n+   begin\n+      if Is_Empty (New_Item) then\n+         return;\n+      elsif Checks and then Container.Last = Index_Type'Last then\n+         raise Constraint_Error with \"vector is already at its maximum length\";\n+      else\n+         Insert_Vector (Container, Container.Last + 1, New_Item);\n+      end if;\n+   end Append_Vector;\n+\n+   ------------\n+   -- Append --\n+   ------------\n \n-   procedure Append_One (Container : in out Vector;\n-                         New_Item  :        Element_Type)\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type)\n    is\n    begin\n       Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n-   end Append_One;\n+   end Append;\n \n    ----------------------\n    -- Append_Slow_Path --\n@@ -250,7 +254,7 @@ is\n          return;\n       else\n          Target.Clear;\n-         Target.Append (Source);\n+         Target.Append_Vector (Source);\n       end if;\n    end Assign;\n \n@@ -1310,7 +1314,7 @@ is\n       end;\n    end Insert;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector)\n@@ -1429,9 +1433,9 @@ is\n \n          Container.Elements.EA (K .. J) := Src;\n       end;\n-   end Insert;\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector)\n@@ -1461,10 +1465,10 @@ is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n-   end Insert;\n+      Insert_Vector (Container, Index, New_Item);\n+   end Insert_Vector;\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n@@ -1501,10 +1505,10 @@ is\n          Index := Before.Index;\n       end if;\n \n-      Insert (Container, Index, New_Item);\n+      Insert_Vector (Container, Index, New_Item);\n \n       Position := (Container'Unrestricted_Access, Index);\n-   end Insert;\n+   end Insert_Vector;\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -2266,11 +2270,6 @@ is\n    -- Prepend --\n    -------------\n \n-   procedure Prepend (Container : in out Vector; New_Item : Vector) is\n-   begin\n-      Insert (Container, Index_Type'First, New_Item);\n-   end Prepend;\n-\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n@@ -2280,6 +2279,15 @@ is\n       Insert (Container, Index_Type'First, New_Item, Count);\n    end Prepend;\n \n+   --------------------\n+   -- Prepend_Vector --\n+   --------------------\n+\n+   procedure Prepend_Vector (Container : in out Vector; New_Item : Vector) is\n+   begin\n+      Insert_Vector (Container, Index_Type'First, New_Item);\n+   end Prepend_Vector;\n+\n    --------------\n    -- Previous --\n    --------------"}, {"sha": "1d257a05bed6e402b8d2c243e0b48219eafbb802", "filename": "gcc/ada/libgnat/a-convec.ads", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e05da6849f5548db51ffa15030b1fc8aacb8d9c/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.ads?ref=3e05da6849f5548db51ffa15030b1fc8aacb8d9c", "patch": "@@ -95,7 +95,7 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty          => Empty,\n-                            Add_Unnamed    => Append_One,\n+                            Add_Unnamed    => Append,\n                             New_Indexed    => New_Vector,\n                             Assign_Indexed => Replace_Element);\n \n@@ -334,59 +334,80 @@ is\n      with Pre => First = Index_Type'First;\n    --  Ada_2020 aggregate operation.\n \n-   procedure Insert\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector);\n    --  If Before is not in the range First_Index (Container) .. Last_Index\n    --  (Container) + 1, then Constraint_Error is propagated. If\n-   --  Length(New_Item) is 0, then Insert does nothing. Otherwise, it computes\n-   --  the new length NL as the sum of the current length and Length\n+   --  Length(New_Item) is 0, then Insert_Vector does nothing. Otherwise, it\n+   --  computes the new length NL as the sum of the current length and Length\n    --  (New_Item); if the value of Last appropriate for length NL would be\n    --  greater than Index_Type'Last then Constraint_Error is propagated.\n    --\n    --  If the current vector capacity is less than NL, Reserve_Capacity\n-   --  (Container, NL) is called to increase the vector capacity. Then Insert\n-   --  slides the elements in the range Before .. Last_Index (Container) up by\n-   --  Length(New_Item) positions, and then copies the elements of New_Item to\n-   --  the positions starting at Before. Any exception raised during the\n-   --  copying is propagated.\n+   --  (Container, NL) is called to increase the vector capacity. Then\n+   --  Insert_Vector slides the elements in the range Before .. Last_Index\n+   --  (Container) up by Length(New_Item) positions, and then copies the\n+   --  elements of New_Item to the positions starting at Before. Any exception\n+   --  raised during the copying is propagated.\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Extended_Index;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector);\n    --  If Before is not No_Element, and does not designate an element in\n    --  Container, then Program_Error is propagated. Otherwise, if\n-   --  Length(New_Item) is 0, then Insert does nothing. If Before is\n-   --  No_Element, then the call is equivalent to Insert (Container, Last_Index\n-   --  (Container) + 1, New_Item); otherwise the call is equivalent to Insert\n-   --  (Container, To_Index (Before), New_Item);\n+   --  Length(New_Item) is 0, then Insert_Vector does nothing. If Before is\n+   --  No_Element, then the call is equivalent to Insert_Vector (Container,\n+   --  Last_Index (Container) + 1, New_Item); otherwise the call is equivalent\n+   --  to Insert_Vector (Container, To_Index (Before), New_Item);\n \n    procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n+   procedure Insert_Vector\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector;\n       Position  : out Cursor);\n    --  If Before is not No_Element, and does not designate an element in\n    --  Container, then Program_Error is propagated. If Before equals\n    --  No_Element, then let T be Last_Index (Container) + 1; otherwise, let T\n-   --  be To_Index (Before). Insert (Container, T, New_Item) is called, and\n-   --  then Position is set to To_Cursor (Container, T).\n+   --  be To_Index (Before). Insert_Vector (Container, T, New_Item) is called,\n+   --  and then Position is set to To_Cursor (Container, T).\n+\n+   procedure Insert\n+     (Container : in out Vector;\n+      Before    : Cursor;\n+      New_Item  : Vector;\n+      Position  : out Cursor) renames Insert_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n \n    procedure Insert\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1);\n-   --  Equivalent to Insert (Container, Before, To_Vector (New_Item, Count));\n+   --  Equivalent to:\n+   --  Insert_Vector (Container, Before, To_Vector (New_Item, Count));\n \n    procedure Insert\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1);\n-   --  Equivalent to Insert (Container, Before, To_Vector (New_Item, Count));\n+   --  Equivalent to:\n+   --  Insert_Vector (Container, Before, To_Vector (New_Item, Count));\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -395,7 +416,7 @@ is\n       Position  : out Cursor;\n       Count     : Count_Type := 1);\n    --  Equivalent to\n-   --  Insert (Container, Before, To_Vector (New_Item, Count), Position);\n+   --  Insert_Vector (Container, Before, To_Vector (New_Item, Count), Position)\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -425,33 +446,42 @@ is\n    --  be To_Index (Before). Insert (Container, T, Count) is called, and then\n    --  Position is set to To_Cursor (Container, T).\n \n-   procedure Prepend\n+   procedure Prepend_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n    --  Equivalent to Insert (Container, First_Index (Container), New_Item).\n \n+   procedure Prepend\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Prepend_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Prepend\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1);\n    --  Equivalent to Insert (Container, First_Index (Container), New_Item,\n    --  Count).\n \n-   procedure Append\n+   procedure Append_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n    --  Equivalent to Insert (Container, Last_Index (Container) + 1, New_Item).\n \n+   procedure Append\n+     (Container : in out Vector;\n+      New_Item  : Vector) renames Append_Vector;\n+   --  Retained for now for compatibility; AI12-0400 will remove this.\n+\n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type;\n-      Count     : Count_Type := 1);\n+      Count     : Count_Type);\n    --  Equivalent to Insert (Container, Last_Index (Container) + 1, New_Item,\n    --  Count).\n \n-   procedure Append_One (Container : in out Vector;\n-                         New_Item  :        Element_Type);\n-   --  Ada_2020 aggregate operation.\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type);\n \n    procedure Insert_Space\n      (Container : in out Vector;"}]}