{"sha": "2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3MDcwOGUwYmY4Mzg5ZTdmNzU2NmYzOWVmMmUzODkxZWNjODM5ZA==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2015-12-01T14:27:11Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2015-12-01T14:27:11Z"}, "message": "dump-parse-tree.c (show_omp_clauses): Handle optional num and static arguments for the gang clause.\n\n\tgcc/fortran/\n\t* dump-parse-tree.c (show_omp_clauses): Handle optional num and static\n\targuments for the gang clause.\n\t* gfortran.h (gfc_omp_clauses): Rename gang_expr as gang_num_expr.\n\tAdd gang_static_expr.\n\t* openmp.c (gfc_free_omp_clauses): Update to free gang_num_expr and\n\tgang_static_expr.\n\t(match_oacc_clause_gang): Update to support both num and static in\n\tthe same clause.\n\t(resolve_omp_clauses): Formatting.  Also handle gang_num_expr and\n\tgang_static_expr.\n\t(resolve_oacc_params_in_parallel): New const char arg argument.\n\tUse it to report more accurate gang, worker and vector clause errors.\n\t(resolve_oacc_loop_blocks): Update calls to\n\tresolve_oacc_params_in_parallel.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Update the gimplification of\n\tthe gang clause.\n\t(gfc_trans_oacc_combined_directive): Make use of gang_num_expr and\n\tgang_static_expr.  Remove OMP_LIST_REDUCTION from construct_clauses.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/gang-static.f95: Add tests for gang num arguments.\n\t* gfortran.dg/goacc/loop-2.f95: Update expected diagnostics.\n\t* gfortran.dg/goacc/loop-6.f95: Likewise.\n\t* gfortran.dg/goacc/loop-7.f95: New test.\n\t* gfortran.dg/goacc/reduction-2.f95: New test.\n\nFrom-SVN: r231112", "tree": {"sha": "9c6035c5b4ecd42e5ff36d1590932fb6e64bd6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6035c5b4ecd42e5ff36d1590932fb6e64bd6e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a0218d6df34ec612a61aef50b95d79cd8d17f"}], "stats": {"total": 354, "additions": 290, "deletions": 64}, "files": [{"sha": "67a2a06850ceba269b262d443cc5c9052335a737", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -1,3 +1,24 @@\n+2015-12-01  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle optional num and static\n+\targuments for the gang clause.\n+\t* gfortran.h (gfc_omp_clauses): Rename gang_expr as gang_num_expr.\n+\tAdd gang_static_expr.\n+\t* openmp.c (gfc_free_omp_clauses): Update to free gang_num_expr and\n+\tgang_static_expr.\n+\t(match_oacc_clause_gang): Update to support both num and static in\n+\tthe same clause.\n+\t(resolve_omp_clauses): Formatting.  Also handle gang_num_expr and\n+\tgang_static_expr.\n+\t(resolve_oacc_params_in_parallel): New const char arg argument.\n+\tUse it to report more accurate gang, worker and vector clause errors.\n+\t(resolve_oacc_loop_blocks): Update calls to\n+\tresolve_oacc_params_in_parallel.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Update the gimplification of\n+\tthe gang clause.\n+\t(gfc_trans_oacc_combined_directive): Make use of gang_num_expr and\n+\tgang_static_expr.  Remove OMP_LIST_REDUCTION from construct_clauses.\n+\n 2015-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "f9abf406fea3f31052a8089fabc12903b711dcbb", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -1146,10 +1146,24 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n   if (omp_clauses->gang)\n     {\n       fputs (\" GANG\", dumpfile);\n-      if (omp_clauses->gang_expr)\n+      if (omp_clauses->gang_num_expr || omp_clauses->gang_static_expr)\n \t{\n \t  fputc ('(', dumpfile);\n-\t  show_expr (omp_clauses->gang_expr);\n+\t  if (omp_clauses->gang_num_expr)\n+\t    {\n+\t      fprintf (dumpfile, \"num:\");\n+\t      show_expr (omp_clauses->gang_num_expr);\n+\t    }\n+\t  if (omp_clauses->gang_num_expr && omp_clauses->gang_static)\n+\t    fputc (',', dumpfile);\n+\t  if (omp_clauses->gang_static)\n+\t    {\n+\t      fprintf (dumpfile, \"static:\");\n+\t      if (omp_clauses->gang_static_expr)\n+\t\tshow_expr (omp_clauses->gang_static_expr);\n+\t      else\n+\t\tfputc ('*', dumpfile);\n+\t    }\n \t  fputc (')', dumpfile);\n \t}\n     }"}, {"sha": "92bf633f29c85f9e1d1496a0848b21762ac9db86", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -1229,7 +1229,8 @@ typedef struct gfc_omp_clauses\n \n   /* OpenACC. */\n   struct gfc_expr *async_expr;\n-  struct gfc_expr *gang_expr;\n+  struct gfc_expr *gang_static_expr;\n+  struct gfc_expr *gang_num_expr;\n   struct gfc_expr *worker_expr;\n   struct gfc_expr *vector_expr;\n   struct gfc_expr *num_gangs_expr;"}, {"sha": "618246447701360f617252268e91a9b23fe4adeb", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 53, "deletions": 24, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -77,7 +77,8 @@ gfc_free_omp_clauses (gfc_omp_clauses *c)\n   gfc_free_expr (c->thread_limit);\n   gfc_free_expr (c->dist_chunk_size);\n   gfc_free_expr (c->async_expr);\n-  gfc_free_expr (c->gang_expr);\n+  gfc_free_expr (c->gang_num_expr);\n+  gfc_free_expr (c->gang_static_expr);\n   gfc_free_expr (c->worker_expr);\n   gfc_free_expr (c->vector_expr);\n   gfc_free_expr (c->num_gangs_expr);\n@@ -395,21 +396,41 @@ match_oacc_expr_list (const char *str, gfc_expr_list **list,\n static match\n match_oacc_clause_gang (gfc_omp_clauses *cp)\n {\n-  if (gfc_match_char ('(') != MATCH_YES)\n+  match ret = MATCH_YES;\n+\n+  if (gfc_match (\" ( \") != MATCH_YES)\n     return MATCH_NO;\n-  if (gfc_match (\" num :\") == MATCH_YES)\n-    {\n-      cp->gang_static = false;\n-      return gfc_match (\" %e )\", &cp->gang_expr);\n-    }\n-  if (gfc_match (\" static :\") == MATCH_YES)\n+\n+  /* The gang clause accepts two optional arguments, num and static.\n+     The num argument may either be explicit (num: <val>) or\n+     implicit without (<val> without num:).  */\n+\n+  while (ret == MATCH_YES)\n     {\n-      cp->gang_static = true;\n-      if (gfc_match (\" * )\") != MATCH_YES)\n-\treturn gfc_match (\" %e )\", &cp->gang_expr);\n-      return MATCH_YES;\n+      if (gfc_match (\" static :\") == MATCH_YES)\n+\t{\n+\t  if (cp->gang_static)\n+\t    return MATCH_ERROR;\n+\t  else\n+\t    cp->gang_static = true;\n+\t  if (gfc_match_char ('*') == MATCH_YES)\n+\t    cp->gang_static_expr = NULL;\n+\t  else if (gfc_match (\" %e \", &cp->gang_static_expr) != MATCH_YES)\n+\t    return MATCH_ERROR;\n+\t}\n+      else\n+\t{\n+\t  /* This is optional.  */\n+\t  if (cp->gang_num_expr || gfc_match (\" num :\") == MATCH_ERROR)\n+\t    return MATCH_ERROR;\n+\t  else if (gfc_match (\" %e \", &cp->gang_num_expr) != MATCH_YES)\n+\t    return MATCH_ERROR;\n+\t}\n+\n+      ret = gfc_match (\" , \");\n     }\n-  return gfc_match (\" %e )\", &cp->gang_expr);\n+\n+  return gfc_match (\" ) \");\n }\n \n static match\n@@ -3726,11 +3747,15 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   if (omp_clauses->num_gangs_expr)\n     resolve_oacc_positive_int_expr (omp_clauses->num_gangs_expr, \"NUM_GANGS\");\n   if (omp_clauses->num_workers_expr)\n-    resolve_oacc_positive_int_expr (omp_clauses->num_workers_expr, \"NUM_WORKERS\");\n+    resolve_oacc_positive_int_expr (omp_clauses->num_workers_expr,\n+\t\t\t\t    \"NUM_WORKERS\");\n   if (omp_clauses->vector_length_expr)\n-    resolve_oacc_positive_int_expr (omp_clauses->vector_length_expr, \"VECTOR_LENGTH\");\n-  if (omp_clauses->gang_expr)\n-    resolve_oacc_positive_int_expr (omp_clauses->gang_expr, \"GANG\");\n+    resolve_oacc_positive_int_expr (omp_clauses->vector_length_expr,\n+\t\t\t\t    \"VECTOR_LENGTH\");\n+  if (omp_clauses->gang_num_expr)\n+    resolve_oacc_positive_int_expr (omp_clauses->gang_num_expr, \"GANG\");\n+  if (omp_clauses->gang_static_expr)\n+    resolve_oacc_positive_int_expr (omp_clauses->gang_static_expr, \"GANG\");\n   if (omp_clauses->worker_expr)\n     resolve_oacc_positive_int_expr (omp_clauses->worker_expr, \"WORKER\");\n   if (omp_clauses->vector_expr)\n@@ -4705,20 +4730,21 @@ resolve_oacc_nested_loops (gfc_code *code, gfc_code* do_code, int collapse,\n \n \n static void\n-resolve_oacc_params_in_parallel (gfc_code *code, const char *clause)\n+resolve_oacc_params_in_parallel (gfc_code *code, const char *clause,\n+\t\t\t\t const char *arg)\n {\n   fortran_omp_context *c;\n \n   if (oacc_is_parallel (code))\n     gfc_error (\"!$ACC LOOP %s in PARALLEL region doesn't allow \"\n-\t       \"non-static arguments at %L\", clause, &code->loc);\n+\t       \"%s arguments at %L\", clause, arg, &code->loc);\n   for (c = omp_current_ctx; c; c = c->previous)\n     {\n       if (oacc_is_loop (c->code))\n \tbreak;\n       if (oacc_is_parallel (c->code))\n \tgfc_error (\"!$ACC LOOP %s in PARALLEL region doesn't allow \"\n-\t\t   \"non-static arguments at %L\", clause, &code->loc);\n+\t\t   \"%s arguments at %L\", clause, arg, &code->loc);\n     }\n }\n \n@@ -4801,13 +4827,16 @@ resolve_oacc_loop_blocks (gfc_code *code)\n \t       \"vectors at the same time at %L\", &code->loc);\n \n   if (code->ext.omp_clauses->gang\n-      && code->ext.omp_clauses->gang_expr\n-      && !code->ext.omp_clauses->gang_static)\n-    resolve_oacc_params_in_parallel (code, \"GANG\");\n+      && code->ext.omp_clauses->gang_num_expr)\n+    resolve_oacc_params_in_parallel (code, \"GANG\", \"num\");\n \n   if (code->ext.omp_clauses->worker\n       && code->ext.omp_clauses->worker_expr)\n-    resolve_oacc_params_in_parallel (code, \"WORKER\");\n+    resolve_oacc_params_in_parallel (code, \"WORKER\", \"num\");\n+\n+  if (code->ext.omp_clauses->vector\n+      && code->ext.omp_clauses->vector_expr)\n+    resolve_oacc_params_in_parallel (code, \"VECTOR\", \"length\");\n \n   if (code->ext.omp_clauses->tile_list)\n     {"}, {"sha": "227964cb2f6804d188238910bb41b9d6fa5164d8", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -2630,28 +2630,20 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     }\n   if (clauses->gang)\n     {\n-      if (clauses->gang_expr)\n-\t{\n-\t  tree gang_var\n-\t    = gfc_convert_expr_to_tree (block, clauses->gang_expr);\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n-\t  if (clauses->gang_static)\n-\t    OMP_CLAUSE_GANG_STATIC_EXPR (c) = gang_var;\n-\t  else\n-\t    OMP_CLAUSE_GANG_EXPR (c) = gang_var;\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n-\t}\n-      else if (clauses->gang_static)\n+      tree arg;\n+      c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+      if (clauses->gang_num_expr)\n \t{\n-\t  /* This corresponds to gang (static: *).  */\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n-\t  OMP_CLAUSE_GANG_STATIC_EXPR (c) = integer_minus_one_node;\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\t  arg = gfc_convert_expr_to_tree (block, clauses->gang_num_expr);\n+\t  OMP_CLAUSE_GANG_EXPR (c) = arg;\n \t}\n-      else\n+      if (clauses->gang_static)\n \t{\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\t  arg = clauses->gang_static_expr\n+\t    ? gfc_convert_expr_to_tree (block, clauses->gang_static_expr)\n+\t    : integer_minus_one_node;\n+\t  OMP_CLAUSE_GANG_STATIC_EXPR (c) = arg;\n \t}\n     }\n \n@@ -3476,8 +3468,9 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n \t      sizeof (construct_clauses));\n       loop_clauses.collapse = construct_clauses.collapse;\n       loop_clauses.gang = construct_clauses.gang;\n-      loop_clauses.gang_expr = construct_clauses.gang_expr;\n       loop_clauses.gang_static = construct_clauses.gang_static;\n+      loop_clauses.gang_num_expr = construct_clauses.gang_num_expr;\n+      loop_clauses.gang_static_expr = construct_clauses.gang_static_expr;\n       loop_clauses.vector = construct_clauses.vector;\n       loop_clauses.vector_expr = construct_clauses.vector_expr;\n       loop_clauses.worker = construct_clauses.worker;\n@@ -3491,8 +3484,9 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n       loop_clauses.lists[OMP_LIST_REDUCTION]\n \t= construct_clauses.lists[OMP_LIST_REDUCTION];\n       construct_clauses.gang = false;\n-      construct_clauses.gang_expr = NULL;\n       construct_clauses.gang_static = false;\n+      construct_clauses.gang_num_expr = NULL;\n+      construct_clauses.gang_static_expr = NULL;\n       construct_clauses.vector = false;\n       construct_clauses.vector_expr = NULL;\n       construct_clauses.worker = false;\n@@ -3503,6 +3497,7 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n       construct_clauses.independent = false;\n       construct_clauses.tile_list = NULL;\n       construct_clauses.lists[OMP_LIST_PRIVATE] = NULL;\n+      construct_clauses.lists[OMP_LIST_REDUCTION] = NULL;\n       oacc_clauses = gfc_trans_omp_clauses (&block, &construct_clauses,\n \t\t\t\t\t    code->loc);\n     }"}, {"sha": "dac81219664b1b462d721feeb0475761ac9dc887", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -1,3 +1,11 @@\n+2015-12-01  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/gang-static.f95: Add tests for gang num arguments.\n+\t* gfortran.dg/goacc/loop-2.f95: Update expected diagnostics.\n+\t* gfortran.dg/goacc/loop-6.f95: Likewise.\n+\t* gfortran.dg/goacc/loop-7.f95: New test.\n+\t* gfortran.dg/goacc/reduction-2.f95: New test.\n+\n 2015-12-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68379"}, {"sha": "34810852d19ecb43bcdbeac77d2337c57f601d3d", "filename": "gcc/testsuite/gfortran.dg/goacc/gang-static.f95", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -47,6 +47,18 @@ program main\n   end do\n   !$acc end parallel loop\n \n+  !$acc kernels loop gang (num:5, static:*)\n+  do i = 1, n\n+     a(i) = b(i) + 20\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop gang (static:20, num:30)\n+  do i = 1, n\n+     a(i) = b(i) + 20\n+  end do\n+  !$acc end kernels loop\n+\n   call test (a, b, 20, n)\n \n end program main\n@@ -66,3 +78,5 @@ end subroutine test\n ! { dg-final { scan-tree-dump-times \"gang\\\\(static:2\\\\)\" 1 \"omplower\" } }\n ! { dg-final { scan-tree-dump-times \"gang\\\\(static:5\\\\)\" 1 \"omplower\" } }\n ! { dg-final { scan-tree-dump-times \"gang\\\\(static:20\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(num: 5 static:\\\\\\*\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(num: 30 static:20\\\\)\" 1 \"omplower\" } }"}, {"sha": "0c902b2241075c6a3a54cae48569eb8da440b2a3", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-2.f95", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -187,10 +187,10 @@ program test\n     !$acc loop gang\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang(5) ! { dg-error \"non-static\" }\n+    !$acc loop gang(5) ! { dg-error \"num arguments\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang(num:5) ! { dg-error \"non-static\" }\n+    !$acc loop gang(num:5) ! { dg-error \"num arguments\" }\n     DO i = 1,10\n     ENDDO\n     !$acc loop gang(static:5)\n@@ -218,10 +218,10 @@ program test\n     !$acc loop worker\n     DO i = 1,10\n     ENDDO\n-    !$acc loop worker(5) ! { dg-error \"non-static\" }\n+    !$acc loop worker(5) ! { dg-error \"num arguments\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop worker(num:5) ! { dg-error \"non-static\" }\n+    !$acc loop worker(num:5) ! { dg-error \"num arguments\" }\n     DO i = 1,10\n     ENDDO\n     !$acc loop worker\n@@ -246,10 +246,10 @@ program test\n     !$acc loop vector\n     DO i = 1,10\n     ENDDO\n-    !$acc loop vector(5)\n+    !$acc loop vector(5) ! { dg-error \"length arguments\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop vector(length:5)\n+    !$acc loop vector(length:5) ! { dg-error \"length arguments\" }\n     DO i = 1,10\n     ENDDO\n     !$acc loop vector\n@@ -501,10 +501,10 @@ program test\n   !$acc parallel loop gang\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop gang(5) ! { dg-error \"non-static\" }\n+  !$acc parallel loop gang(5) ! { dg-error \"num arguments\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop gang(num:5) ! { dg-error \"non-static\" }\n+  !$acc parallel loop gang(num:5) ! { dg-error \"num arguments\" }\n   DO i = 1,10\n   ENDDO\n   !$acc parallel loop gang(static:5)\n@@ -526,10 +526,10 @@ program test\n   !$acc parallel loop worker\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop worker(5) ! { dg-error \"non-static\" }\n+  !$acc parallel loop worker(5) ! { dg-error \"num arguments\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop worker(num:5) ! { dg-error \"non-static\" }\n+  !$acc parallel loop worker(num:5) ! { dg-error \"num arguments\" }\n   DO i = 1,10\n   ENDDO\n   !$acc parallel loop worker\n@@ -551,10 +551,10 @@ program test\n   !$acc parallel loop vector\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop vector(5)\n+  !$acc parallel loop vector(5) ! { dg-error \"length arguments\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop vector(length:5)\n+  !$acc parallel loop vector(length:5) ! { dg-error \"length arguments\" }\n   DO i = 1,10\n   ENDDO\n   !$acc parallel loop vector"}, {"sha": "e8444686cb0a4848b8eff01243a6031a6c1dfc6e", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-6.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -49,10 +49,10 @@ program test\n     !$acc loop vector\n     DO i = 1,10\n     ENDDO\n-    !$acc loop vector(5) ! { dg-error \"argument not permitted\" }\n+    !$acc loop vector(5) ! { dg-error \"length arguments\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop vector(length:5) ! { dg-error \"argument not permitted\" }\n+    !$acc loop vector(length:5) ! { dg-error \"length arguments\" }\n     DO i = 1,10\n     ENDDO\n     !$acc loop vector\n@@ -73,10 +73,10 @@ program test\n   !$acc parallel loop vector\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop vector(5) ! { dg-error \"argument not permitted\" }\n+  !$acc parallel loop vector(5) ! { dg-error \"length arguments\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop vector(length:5) ! { dg-error \"argument not permitted\" }\n+  !$acc parallel loop vector(length:5) ! { dg-error \"length arguments\" }\n   DO i = 1,10\n   ENDDO\n end"}, {"sha": "9ca8297d81a776c5825bb551bc5e6fce9373b81a", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-7.f95", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-7.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-7.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-7.f95?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -0,0 +1,122 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fmax-errors=100\" }\n+\n+program test\n+  implicit none\n+  integer :: i, j, static, num, length\n+\n+  !$acc kernels\n+    !$acc loop gang(static:static)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:1)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(,static:1) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:1,) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:*, num:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:1, 5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(num:num, static:1)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:*, num:5, static:5) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(1, num:2, static:3) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(num:num static:1) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(num)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(num:num+1, static:1+num)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(length:num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop worker\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (static:num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num:,) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num:num:num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num:num*num)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (length:num*num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num:*) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker (num:5)\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (32)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vrctor (static:num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:,) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:num:num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:static*num)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:length)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:32)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (num:num*num) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector (length:*) ! { dg-error \"Invalid character\" }\n+    DO i = 1,10\n+    ENDDO\n+\n+\n+    !$acc loop auto\n+    DO i = 1,10\n+    ENDDO\n+  !$acc end kernels\n+end"}, {"sha": "89e63ae9b5465e61ae4ffa8a56b18434622c4853", "filename": "gcc/testsuite/gfortran.dg/goacc/reduction-2.f95", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a70708e0bf8389e7f7566f39ef2e3891ecc839d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95?ref=2a70708e0bf8389e7f7566f39ef2e3891ecc839d", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile } \n+! { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+subroutine foo ()\n+  implicit none\n+  integer :: p,k\n+  integer  :: a\n+  !$acc parallel loop reduction(+:a)\n+  do p = 1,5\n+  enddo\n+  !$acc end parallel loop\n+  !$acc kernels loop reduction(+:a)\n+  do k = 2,6\n+  enddo\n+  !$acc end kernels loop\n+end subroutine\n+\n+! { dg-final { scan-tree-dump-times \"target oacc_parallel firstprivate.a.\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.p. reduction..:a.\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"target oacc_kernels map.tofrom:a .len: 4..\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.k. reduction..:a.\" 1 \"gimple\" } }\n+"}]}