{"sha": "87a8affe1e1318886b5b16cf277cf10d650afcfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhOGFmZmUxZTEzMTg4ODZiNWIxNmNmMjc3Y2YxMGQ2NTBhZmNmZQ==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@sco.com", "date": "2000-02-11T17:50:31Z"}, "committer": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "2000-02-11T17:50:31Z"}, "message": "Makefile.in (bootstrap-lean): Remove additional files.\n\n        * Makefile.in (bootstrap-lean): Remove additional files.\n        (bootstrap2-lean): Likewise.                                                    (VOL_FILES): List of files for above.\n\nFrom-SVN: r31923", "tree": {"sha": "a2f559f1cac65acd0bef122654cc57979fd90a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f559f1cac65acd0bef122654cc57979fd90a91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a8affe1e1318886b5b16cf277cf10d650afcfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a8affe1e1318886b5b16cf277cf10d650afcfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a8affe1e1318886b5b16cf277cf10d650afcfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a8affe1e1318886b5b16cf277cf10d650afcfe/comments", "author": null, "committer": null, "parents": [{"sha": "304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "f991024e3b199ab1a5a34ef9f9316cc0153e2550", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a8affe1e1318886b5b16cf277cf10d650afcfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a8affe1e1318886b5b16cf277cf10d650afcfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87a8affe1e1318886b5b16cf277cf10d650afcfe", "patch": "@@ -1,3 +1,8 @@\n+2000-02-11  Robert Lipe  <robertl@sco.com>\n+\n+\t* Makefile.in (bootstrap-lean): Remove additional files.\n+\t(bootstrap2-lean): Likewise.                                                    (VOL_FILES): List of files for above.                                   \n+\n 2000-02-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* cpphash.c (special_symbol): Remove spurious argument to"}, {"sha": "2447401d34f33a1282385f4b14435dac4bc07206", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a8affe1e1318886b5b16cf277cf10d650afcfe/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a8affe1e1318886b5b16cf277cf10d650afcfe/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=87a8affe1e1318886b5b16cf277cf10d650afcfe", "patch": "@@ -2969,26 +2969,30 @@ diff:\n \t  $(LANG_DIFF_EXCLUDES) \\\n \t  gcc-$(oldversion) gcc-$(version) > gcc-$(oldversion)-$(version).diff\n \n+# A list of files to be destroyed during \"lean\" builds.\n+VOL_FILES=`echo $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`\n+\n bootstrap bootstrap-lean: force\n # Only build the C compiler for stage1, because that is the only one that\n # we can guarantee will build with the native compiler, and also it is the\n # only thing useful for building stage2.\n \t$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\"\n \t$(MAKE) stage1\n+\t-if test $@ = bootstrap-lean; then cd stage1 ; rm -f $(VOL_FILES); else true; fi\n # This used to define ALLOCA as empty, but that would lead to bad results\n # for a subsequent `make install' since that would not have ALLOCA empty.\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n \t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t-if test $@ = bootstrap-lean; then rm -rf stage1; else true; fi\n+\t-if test $@ = bootstrap-lean; then rm -rf stage1; cd stage2 ; rm -f $(VOL_FILES); else true; fi\n \t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap2 bootstrap2-lean: force\n \t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t-if test $@ = bootstrap2-lean; then rm -rf stage1; else true; fi\n+\t-if test $@ = bootstrap2-lean; then rm -rf stage1; cd stage2 ; rm -f $(VOL_FILES); else true; fi\n \t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap3 bootstrap3-lean: force"}]}