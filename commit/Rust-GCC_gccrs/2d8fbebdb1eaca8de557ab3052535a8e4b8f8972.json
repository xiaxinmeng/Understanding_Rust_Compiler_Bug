{"sha": "2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4ZmJlYmRiMWVhY2E4ZGU1NTdhYjMwNTI1MzVhOGU0YjhmODk3Mg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-30T11:01:23Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-30T11:02:21Z"}, "message": "PR target/97150 AArch64: 2nd parameter of unsigned Neon scalar shift intrinsics should be signed\n\nIn this PR the second argument to the intrinsics should be signed but we\nuse an unsigned one erroneously.\nThe corresponding builtins are already using the correct types so it's\njust a matter of correcting the signatures in arm_neon.h\n\ngcc/\n\tPR target/97150\n\t* config/aarch64/arm_neon.h (vqrshlb_u8): Make second argument\n\tsigned.\n\t(vqrshlh_u16): Likewise.\n\t(vqrshls_u32): Likewise.\n\t(vqrshld_u64): Likewise.\n\t(vqshlb_u8): Likewise.\n\t(vqshlh_u16): Likewise.\n\t(vqshls_u32): Likewise.\n\t(vqshld_u64): Likewise.\n\t(vshld_u64): Likewise.\n\ngcc/testsuite/\n\tPR target/97150\n\t* gcc.target/aarch64/pr97150.c: New test.", "tree": {"sha": "3186cd86840534cd5e1ec5fbbc4fe390b5a6197f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3186cd86840534cd5e1ec5fbbc4fe390b5a6197f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135b043196b5575c690ef1e07bcbb49bf037c3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135b043196b5575c690ef1e07bcbb49bf037c3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135b043196b5575c690ef1e07bcbb49bf037c3a2"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "d943f63a274fb23c1dbafe53be2fe0e331ee8bd0", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "patch": "@@ -24337,28 +24337,28 @@ vqrshld_s64 (int64_t __a, int64_t __b)\n \n __extension__ extern __inline uint8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqrshlb_u8 (uint8_t __a, uint8_t __b)\n+vqrshlb_u8 (uint8_t __a, int8_t __b)\n {\n   return __builtin_aarch64_uqrshlqi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqrshlh_u16 (uint16_t __a, uint16_t __b)\n+vqrshlh_u16 (uint16_t __a, int16_t __b)\n {\n   return __builtin_aarch64_uqrshlhi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqrshls_u32 (uint32_t __a, uint32_t __b)\n+vqrshls_u32 (uint32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_uqrshlsi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqrshld_u64 (uint64_t __a, uint64_t __b)\n+vqrshld_u64 (uint64_t __a, int64_t __b)\n {\n   return __builtin_aarch64_uqrshldi_uus (__a, __b);\n }\n@@ -24637,28 +24637,28 @@ vqshld_s64 (int64_t __a, int64_t __b)\n \n __extension__ extern __inline uint8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqshlb_u8 (uint8_t __a, uint8_t __b)\n+vqshlb_u8 (uint8_t __a, int8_t __b)\n {\n   return __builtin_aarch64_uqshlqi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqshlh_u16 (uint16_t __a, uint16_t __b)\n+vqshlh_u16 (uint16_t __a, int16_t __b)\n {\n   return __builtin_aarch64_uqshlhi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqshls_u32 (uint32_t __a, uint32_t __b)\n+vqshls_u32 (uint32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_uqshlsi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqshld_u64 (uint64_t __a, uint64_t __b)\n+vqshld_u64 (uint64_t __a, int64_t __b)\n {\n   return __builtin_aarch64_uqshldi_uus (__a, __b);\n }\n@@ -26999,7 +26999,7 @@ vshld_s64 (int64_t __a, int64_t __b)\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vshld_u64 (uint64_t __a, uint64_t __b)\n+vshld_u64 (uint64_t __a, int64_t __b)\n {\n   return __builtin_aarch64_ushldi_uus (__a, __b);\n }"}, {"sha": "7abdd8cf347ecc2928a4a6fdb1e6061c12731bbf", "filename": "gcc/testsuite/gcc.target/aarch64/pr97150.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97150.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fbebdb1eaca8de557ab3052535a8e4b8f8972/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97150.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97150.c?ref=2d8fbebdb1eaca8de557ab3052535a8e4b8f8972", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <arm_neon.h>\n+\n+uint8_t  (*fp0)(uint8_t, int8_t)   = vqshlb_u8;\n+uint16_t (*fp1)(uint16_t, int16_t) = vqshlh_u16;\n+uint32_t (*fp2)(uint32_t, int32_t) = vqshls_u32;\n+uint64_t (*fp3)(uint64_t, int64_t) = vqshld_u64;\n+uint8_t  (*fp4)(uint8_t, int8_t)   = vqrshlb_u8;\n+uint16_t (*fp5)(uint16_t, int16_t) = vqrshlh_u16;\n+uint32_t (*fp6)(uint32_t, int32_t) = vqrshls_u32;\n+uint64_t (*fp7)(uint64_t, int64_t) = vqrshld_u64;\n+uint64_t (*fp8)(uint64_t, int64_t) = vshld_u64;\n+"}]}