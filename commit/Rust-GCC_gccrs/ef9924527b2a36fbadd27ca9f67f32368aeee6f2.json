{"sha": "ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5OTI0NTI3YjJhMzZmYmFkZDI3Y2E5ZjY3ZjMyMzY4YWVlZTZmMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T13:51:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T13:51:23Z"}, "message": "[multiple changes]\n\n2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_All_Ent): An incomplete type is not\n\tfrozen by a subprogram body that does not come from source.\n\n2011-11-23  Pascal Obry  <obry@adacore.com>\n\n\t* s-oscons-tmplt.c: Add PTY_Library constant. It contains\n\tthe library for pseudo terminal support.\n\t* g-exptty.ads: Add pseudo-terminal library into a Linker_Options\n\tpragma.\n\n2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch9.adb: No check on entry family index if generic.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch9.adb, s-taprop.ads, s-taprop-hpux-dce.adb, s-taprop-irix.adb,\n\ts-taprop-posix.adb, s-taprop-rtx.adb, s-taprop-solaris.adb,\n\ts-taprop-tru64.adb, s-taprop-vxworks.adb: Move dependency on\n\tSystem.OS_Constants from shared spec of\n\tSystem.Tasking.Primitive_Operations to the specific body variants\n\tthat really require this dependency.\n\n2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming_Declaration):\n\tIf the declaration has aspects, analyze them so they can be\n\tproperly rejected.\n\n2011-11-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-comutr.adb, a-coorma.adb, a-coorse.adb, a-convec.adb, a-cihase.adb,\n\ta-cimutr.adb, a-coinve.adb, a-ciorma.adb, a-ciorse.adb, a-cobove.adb,\n\ta-cohama.adb, a-cihama.adb, a-cidlli.adb, a-cdlili.adb, a-cbhama.adb,\n\ta-cbhase.adb, a-cbmutr.adb, a-cborma.adb, a-cborse.adb, a-cbdlli.adb:\n\tAdd with and use clause for Ada.Finalization. Type\n\tIterator and Child_Iterator are now derived from Limited_Controlled.\n\t(Finalize): New routine.\n\t(Iterate): Add a renaming of counter Busy and\n\tincrement it. Update the return aggregate.\n\t(Iterate_Children): Add a renaming of\n\tcounter Busy and increment it. Update the return aggregate.\n\t(Iterate_Subtree): Add a renaming of counter Busy and increment\n\tit. Update the return aggregate.\n\t* a-cdlili.ads, a-cidlli.ads: Type List_Access is now a general access\n\ttype.\n\t* a-cihama.ads: Type Map_Access is now a general access type.\n\t* a-comutr.ads, a-cimutr.ads: Use type Natural for the two locks\n\tassociated with the tree.\n\t* a-cohama.ads: Type Map_Access is now a general access type.\n\t* a-coinve.ads, a-convec.ads: Type Vector_Access is now a general\n\taccess type.\n\t* exp_ch5.adb (Expand_Iterator_Loop): Do not create a block\n\tto wrap the loop as this is done at an earlier step, during\n\tanalysis. The declarations of the iterator and the cursor use\n\tthe usual Insert_Action mechanism when added into the tree.\n\t* sem_ch5.adb (Analyze_Loop_Statement): Remove local constant\n\tLoop_Statement and replace all respective uses by N. Add local\n\tconstant Loc. Preanalyze the loop iterator to discover whether\n\tit is a container iterator and if it is, wrap the loop in a\n\tblock. This ensures that any controlled temporaries produced\n\tby the iteration scheme share the same lifetime of the loop.\n\t(Is_Container_Iterator): New routine.\n\t(Is_Wrapped_In_Block): New routine.\n\t(Pre_Analyze_Range): Move spec and body to the library level.\n\n2011-11-23  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* gnat_ugn.texi, vms_data.ads: Add documentation for new gnatpp option\n\tthat controls casing of type and subtype names.\n\n2011-11-23  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb: Minor addition of comments.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* prj-part.adb (Extension_Withs): New global variable,\n\tcontains the head of the list of WITH clauses from the EXTENDS\n\tALL projects for which virtual packages are being created.\n\t(Look_For_Virtual_Projects_For): When recursing through\n\tan EXTENDS ALL, add the WITH clauses of the extending\n\tproject to Extension_Withs.  When adding a project to the\n\tVirtual_Hash, record the associated Extension_Withs list.\n\t(Create_Virtual_Extending_Project): Add a copy of the appropriate\n\tExtension_Withs to the virtual project.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* mlib-tgt-specific-vxworks.adb: Minor reformatting.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* Make-generated.in (Sdefault.Target_Name): Set to\n\t$(target_noncanonical) instead of $(target) for consistency.\n\nFrom-SVN: r181668", "tree": {"sha": "267a728ee3a7d34623bc37b747312a45db885308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267a728ee3a7d34623bc37b747312a45db885308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/comments", "author": null, "committer": null, "parents": [{"sha": "595a055f982c5b9c00b37cf289090e2627267d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595a055f982c5b9c00b37cf289090e2627267d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595a055f982c5b9c00b37cf289090e2627267d0b"}], "stats": {"total": 1963, "additions": 1501, "deletions": 462}, "files": [{"sha": "56b2a1ee78be0e17ea9486c1d949a56f07eed1c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -1,3 +1,101 @@\n+2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_All_Ent): An incomplete type is not\n+\tfrozen by a subprogram body that does not come from source.\n+\n+2011-11-23  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Add PTY_Library constant. It contains\n+\tthe library for pseudo terminal support.\n+\t* g-exptty.ads: Add pseudo-terminal library into a Linker_Options\n+\tpragma.\n+\n+2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb: No check on entry family index if generic.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch9.adb, s-taprop.ads, s-taprop-hpux-dce.adb, s-taprop-irix.adb,\n+\ts-taprop-posix.adb, s-taprop-rtx.adb, s-taprop-solaris.adb,\n+\ts-taprop-tru64.adb, s-taprop-vxworks.adb: Move dependency on\n+\tSystem.OS_Constants from shared spec of\n+\tSystem.Tasking.Primitive_Operations to the specific body variants\n+\tthat really require this dependency.\n+\n+2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming_Declaration):\n+\tIf the declaration has aspects, analyze them so they can be\n+\tproperly rejected.\n+\n+2011-11-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-comutr.adb, a-coorma.adb, a-coorse.adb, a-convec.adb, a-cihase.adb,\n+\ta-cimutr.adb, a-coinve.adb, a-ciorma.adb, a-ciorse.adb, a-cobove.adb,\n+\ta-cohama.adb, a-cihama.adb, a-cidlli.adb, a-cdlili.adb, a-cbhama.adb,\n+\ta-cbhase.adb, a-cbmutr.adb, a-cborma.adb, a-cborse.adb, a-cbdlli.adb:\n+\tAdd with and use clause for Ada.Finalization. Type\n+\tIterator and Child_Iterator are now derived from Limited_Controlled.\n+\t(Finalize): New routine.\n+\t(Iterate): Add a renaming of counter Busy and\n+\tincrement it. Update the return aggregate.\n+\t(Iterate_Children): Add a renaming of\n+\tcounter Busy and increment it. Update the return aggregate.\n+\t(Iterate_Subtree): Add a renaming of counter Busy and increment\n+\tit. Update the return aggregate.\n+\t* a-cdlili.ads, a-cidlli.ads: Type List_Access is now a general access\n+\ttype.\n+\t* a-cihama.ads: Type Map_Access is now a general access type.\n+\t* a-comutr.ads, a-cimutr.ads: Use type Natural for the two locks\n+\tassociated with the tree.\n+\t* a-cohama.ads: Type Map_Access is now a general access type.\n+\t* a-coinve.ads, a-convec.ads: Type Vector_Access is now a general\n+\taccess type.\n+\t* exp_ch5.adb (Expand_Iterator_Loop): Do not create a block\n+\tto wrap the loop as this is done at an earlier step, during\n+\tanalysis. The declarations of the iterator and the cursor use\n+\tthe usual Insert_Action mechanism when added into the tree.\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Remove local constant\n+\tLoop_Statement and replace all respective uses by N. Add local\n+\tconstant Loc. Preanalyze the loop iterator to discover whether\n+\tit is a container iterator and if it is, wrap the loop in a\n+\tblock. This ensures that any controlled temporaries produced\n+\tby the iteration scheme share the same lifetime of the loop.\n+\t(Is_Container_Iterator): New routine.\n+\t(Is_Wrapped_In_Block): New routine.\n+\t(Pre_Analyze_Range): Move spec and body to the library level.\n+\n+2011-11-23  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* gnat_ugn.texi, vms_data.ads: Add documentation for new gnatpp option\n+\tthat controls casing of type and subtype names.\n+\n+2011-11-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb: Minor addition of comments.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* prj-part.adb (Extension_Withs): New global variable,\n+\tcontains the head of the list of WITH clauses from the EXTENDS\n+\tALL projects for which virtual packages are being created.\n+\t(Look_For_Virtual_Projects_For): When recursing through\n+\tan EXTENDS ALL, add the WITH clauses of the extending\n+\tproject to Extension_Withs.  When adding a project to the\n+\tVirtual_Hash, record the associated Extension_Withs list.\n+\t(Create_Virtual_Extending_Project): Add a copy of the appropriate\n+\tExtension_Withs to the virtual project.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* mlib-tgt-specific-vxworks.adb: Minor reformatting.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Make-generated.in (Sdefault.Target_Name): Set to\n+\t$(target_noncanonical) instead of $(target) for consistency.\n+\n 2011-11-23  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb (Iterator): Declared"}, {"sha": "22000b3c7e4c85c015da5739175468a09c1cd06c", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -27,16 +27,20 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with System;  use type System.Address;\n+with Ada.Finalization; use Ada.Finalization;\n+with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n-   type Iterator is limited new\n-     List_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : List_Access;\n-        Node      : Count_Type;\n+   type Iterator is new Limited_Controlled and\n+     List_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : List_Access;\n+      Node      : Count_Type;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Last  (Object : Iterator) return Cursor;\n \n@@ -494,6 +498,22 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       return Position.Container.Nodes (Position.Node).Element;\n    end Element;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1064,9 +1084,7 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n      (Container : List;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      C : List renames Container'Unrestricted_Access.all;\n-      B : Natural renames C.Busy;\n-\n+      B    : Natural renames Container'Unrestricted_Access.all.Busy;\n       Node : Count_Type := Container.First;\n \n    begin\n@@ -1091,6 +1109,8 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n      (Container : List)\n       return List_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -1102,14 +1122,22 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => 0);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => 0)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : List;\n       Start     : Cursor)\n       return List_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -1143,7 +1171,13 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------"}, {"sha": "471193079b54009a1f316cde709893e5e78b4061", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -34,14 +34,18 @@ with Ada.Containers.Hash_Tables.Generic_Bounded_Keys;\n pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Bounded_Keys);\n \n with Ada.Containers.Prime_Numbers;  use Ada.Containers.Prime_Numbers;\n+with Ada.Finalization;              use Ada.Finalization;\n with System;  use type System.Address;\n \n package body Ada.Containers.Bounded_Hashed_Maps is\n \n-   type Iterator is new\n-     Map_Iterator_Interfaces.Forward_Iterator with record\n-        Container : Map_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Forward_Iterator with\n+   record\n+      Container : Map_Access;\n+   end record;\n+\n+   overriding procedure Finalize (Object : in out Iterator);\n \n    overriding function First (Object : Iterator) return Cursor;\n \n@@ -392,6 +396,22 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       HT_Ops.Free (Container, X);\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -649,7 +669,7 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container'Unrestricted_Access.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    --  Start of processing for Iterate\n \n@@ -670,8 +690,15 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Container => Container'Unrestricted_Access);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "cfefc73b6c108992d5f9b1740979cba03a099612", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -34,15 +34,20 @@ with Ada.Containers.Hash_Tables.Generic_Bounded_Keys;\n pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Bounded_Keys);\n \n with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n+with Ada.Finalization;             use Ada.Finalization;\n \n with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Hashed_Sets is\n \n-   type Iterator is new Set_Iterator_Interfaces.Forward_Iterator with record\n+   type Iterator is new Limited_Controlled and\n+     Set_Iterator_Interfaces.Forward_Iterator with\n+   record\n       Container : Set_Access;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n \n    overriding function Next\n@@ -569,6 +574,22 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       HT_Ops.Free (Container, X);\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -887,7 +908,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container'Unrestricted_Access.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    --  Start of processing for Iterate\n \n@@ -906,9 +927,16 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n    end Iterate;\n \n    function Iterate (Container : Set)\n-     return Set_Iterator_Interfaces.Forward_Iterator'Class is\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class\n+   is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Container => Container'Unrestricted_Access);\n+      B := B + 1;\n+\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access);\n    end Iterate;\n \n    ------------\n@@ -1600,7 +1628,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n \n       begin\n          if Node = 0 then\n-            raise Constraint_Error with \"key not in map\";  -- ??? \"set\"\n+            raise Constraint_Error with \"key not in map\";  --  ??? \"set\"\n          end if;\n \n          return Container.Nodes (Node).Element;"}, {"sha": "acda30f63c6952afc37037110b2c0b6da1625739", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 79, "deletions": 22, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -27,30 +27,38 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with System;  use type System.Address;\n+with Ada.Finalization; use Ada.Finalization;\n+with System; use type System.Address;\n+\n package body Ada.Containers.Bounded_Multiway_Trees is\n \n    No_Node : constant Count_Type'Base := -1;\n \n-   type Iterator is new Tree_Iterator_Interfaces.Forward_Iterator with\n+   type Iterator is new Limited_Controlled and\n+     Tree_Iterator_Interfaces.Forward_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n       From_Root : Boolean;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object : Iterator;\n       Position : Cursor) return Cursor;\n \n-   type Child_Iterator is new Tree_Iterator_Interfaces.Reversible_Iterator with\n+   type Child_Iterator is new Limited_Controlled and\n+      Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Child_Iterator);\n+\n    overriding function First (Object : Child_Iterator) return Cursor;\n \n    overriding function Next\n@@ -1229,6 +1237,34 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n                 Right_Subtree => Right_Subtree);\n    end Equal_Subtree;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n+   procedure Finalize (Object : in out Child_Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1732,8 +1768,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n      (Container : Tree;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      T : Tree renames Container'Unrestricted_Access.all;\n-      B : Integer renames T.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       if Container.Count = 0 then\n@@ -1758,13 +1793,19 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n    function Iterate (Container : Tree)\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Root_Cursor : constant Cursor :=\n-                      (Container'Unrestricted_Access, Root_Node (Container));\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+      RC : constant Cursor :=\n+             (Container'Unrestricted_Access, Root_Node (Container));\n+\n    begin\n-      return\n-        Iterator'(Container'Unrestricted_Access,\n-                  First_Child (Root_Cursor),\n-                  From_Root => True);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Position  => First_Child (RC),\n+                                From_Root => True)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------------------\n@@ -1786,9 +1827,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       end if;\n \n       declare\n-         NN : Tree_Node_Array renames Parent.Container.Nodes;\n-         B  : Integer renames Parent.Container.Busy;\n+         B  : Natural renames Parent.Container.Busy;\n          C  : Count_Type;\n+         NN : Tree_Node_Array renames Parent.Container.Nodes;\n \n       begin\n          B := B + 1;\n@@ -1836,9 +1877,16 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Parent    : Cursor)\n       return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      pragma Unreferenced (Container);\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Child_Iterator'(Parent.Container, Parent);\n+      return It : constant Child_Iterator :=\n+                    Child_Iterator'(Limited_Controlled with\n+                                      Container => Parent.Container,\n+                                      Position  => Parent)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Children;\n \n    ---------------------\n@@ -1849,8 +1897,17 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n      (Position : Cursor)\n       return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B : Natural renames Position.Container.all.Busy;\n+\n    begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Position.Container,\n+                                Position  => Position,\n+                                From_Root => False)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Subtree;\n \n    procedure Iterate_Subtree\n@@ -1869,7 +1926,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all;\n-         B : Integer renames T.Busy;\n+         B : Natural renames T.Busy;\n \n       begin\n          B := B + 1;\n@@ -2259,8 +2316,8 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;\n@@ -2529,7 +2586,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n       declare\n          NN : Tree_Node_Array renames Parent.Container.Nodes;\n-         B  : Integer renames Parent.Container.Busy;\n+         B  : Natural renames Parent.Container.Busy;\n          C  : Count_Type;\n \n       begin\n@@ -3209,8 +3266,8 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;"}, {"sha": "141350956c1d274bad3407b8fdab2f3d9c07256c", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -35,19 +35,22 @@ with Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys;\n pragma Elaborate_All\n   (Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys);\n \n-with System;  use type System.Address;\n+with Ada.Finalization; use Ada.Finalization;\n+with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Ordered_Maps is\n \n-   type Iterator is limited new\n-     Map_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Map_Access;\n-        Node      : Count_Type;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Map_Access;\n+      Node      : Count_Type;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -551,6 +554,22 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -900,6 +919,8 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -911,17 +932,24 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => 0);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => Container.First)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Map;\n       Start     : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-   begin\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n \n-      --  iterator was defined to behave the same as for a complete iterator,\n+   begin\n+      --  Iterator was defined to behave the same as for a complete iterator,\n       --  and iterate over the entire sequence of items. However, those\n       --  semantics were unintuitive and arguably error-prone (it is too easy\n       --  to accidentally create an endless loop), and so they were changed,\n@@ -953,7 +981,13 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.)\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "17fa7950237400eb54008d016c2f8df8992237ee", "filename": "gcc/ada/a-cborse.adb", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -38,19 +38,22 @@ with Ada.Containers.Red_Black_Trees.Generic_Bounded_Set_Operations;\n pragma Elaborate_All\n   (Ada.Containers.Red_Black_Trees.Generic_Bounded_Set_Operations);\n \n+with Ada.Finalization; use Ada.Finalization;\n with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Ordered_Sets is\n \n-   type Iterator is limited new\n-     Set_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Set_Access;\n-        Node      : Count_Type;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Set_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Set_Access;\n+      Node      : Count_Type;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -568,6 +571,22 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1221,8 +1240,10 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n    end Iterate;\n \n    function Iterate (Container : Set)\n-     return Set_Iterator_Interfaces.Reversible_Iterator'Class\n+     return Set_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -1234,12 +1255,20 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => 0);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => 0)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate (Container : Set; Start : Cursor)\n-     return Set_Iterator_Interfaces.Reversible_Iterator'Class\n+     return Set_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -1274,7 +1303,13 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.)\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------"}, {"sha": "12242583ebe1a4d99a369b146e76a443622deeb0", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -27,18 +27,20 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with System;  use type System.Address;\n-\n with Ada.Unchecked_Deallocation;\n+with System; use type System.Address;\n \n package body Ada.Containers.Doubly_Linked_Lists is\n \n-   type Iterator is limited new\n-     List_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : List_Access;\n-        Node      : Node_Access;\n+   type Iterator is new Limited_Controlled and\n+     List_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : List_Access;\n+      Node      : Node_Access;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Last  (Object : Iterator) return Cursor;\n \n@@ -396,6 +398,22 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       return Position.Node.Element;\n    end Element;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -422,7 +440,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       while Node /= null loop\n          if Node.Element = Item then\n-            return Cursor'(Container'Unchecked_Access, Node);\n+            return Cursor'(Container'Unrestricted_Access, Node);\n          end if;\n \n          Node := Node.Next;\n@@ -441,7 +459,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Container.First);\n+      return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -857,17 +875,15 @@ package body Ada.Containers.Doubly_Linked_Lists is\n      (Container : List;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      C : List renames Container'Unrestricted_Access.all;\n-      B : Natural renames C.Busy;\n-\n+      B    : Natural renames Container'Unrestricted_Access.all.Busy;\n       Node : Node_Access := Container.First;\n \n    begin\n       B := B + 1;\n \n       begin\n          while Node /= null loop\n-            Process (Cursor'(Container'Unchecked_Access, Node));\n+            Process (Cursor'(Container'Unrestricted_Access, Node));\n             Node := Node.Next;\n          end loop;\n       exception\n@@ -882,6 +898,8 @@ package body Ada.Containers.Doubly_Linked_Lists is\n    function Iterate (Container : List)\n      return List_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -893,12 +911,20 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => null)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate (Container : List; Start : Cursor)\n      return List_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -932,7 +958,13 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------\n@@ -945,7 +977,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Container.Last);\n+      return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n@@ -1412,7 +1444,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       while Node /= null loop\n          if Node.Element = Item then\n-            return Cursor'(Container'Unchecked_Access, Node);\n+            return Cursor'(Container'Unrestricted_Access, Node);\n          end if;\n \n          Node := Node.Prev;\n@@ -1439,7 +1471,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       begin\n          while Node /= null loop\n-            Process (Cursor'(Container'Unchecked_Access, Node));\n+            Process (Cursor'(Container'Unrestricted_Access, Node));\n             Node := Node.Prev;\n          end loop;\n "}, {"sha": "0e6437602f5a7c334d1f5eac3f78032f7626076c", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -306,7 +306,7 @@ private\n \n    for List'Write use Write;\n \n-   type List_Access is access constant List;\n+   type List_Access is access all List;\n    for List_Access'Storage_Size use 0;\n \n    type Cursor is"}, {"sha": "b74e8e115e44aabf078c2e5a1b2b6acb2317cd7c", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -27,23 +27,25 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with System;  use type System.Address;\n with Ada.Unchecked_Deallocation;\n+with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n    procedure Free is\n      new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n-   type Iterator is limited new\n-     List_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : List_Access;\n-        Node      : Node_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     List_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : List_Access;\n+      Node      : Node_Access;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -429,6 +431,22 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       return Position.Node.Element.all;\n    end Element;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -459,7 +477,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       while Node /= null loop\n          if Node.Element.all = Item then\n-            return Cursor'(Container'Unchecked_Access, Node);\n+            return Cursor'(Container'Unrestricted_Access, Node);\n          end if;\n \n          Node := Node.Next;\n@@ -478,7 +496,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Container.First);\n+      return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -884,17 +902,15 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n      (Container : List;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      C : List renames Container'Unrestricted_Access.all;\n-      B : Natural renames C.Busy;\n-\n+      B    : Natural renames Container'Unrestricted_Access.all.Busy;\n       Node : Node_Access := Container.First;\n \n    begin\n       B := B + 1;\n \n       begin\n          while Node /= null loop\n-            Process (Cursor'(Container'Unchecked_Access, Node));\n+            Process (Cursor'(Container'Unrestricted_Access, Node));\n             Node := Node.Next;\n          end loop;\n       exception\n@@ -908,8 +924,10 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n    function Iterate\n      (Container : List)\n-      return List_Iterator_Interfaces.Reversible_Iterator'Class\n+      return List_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -921,14 +939,22 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => null)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : List;\n       Start     : Cursor)\n       return List_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -962,7 +988,13 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------\n@@ -975,7 +1007,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Container.Last);\n+      return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n@@ -1452,7 +1484,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       while Node /= null loop\n          if Node.Element.all = Item then\n-            return Cursor'(Container'Unchecked_Access, Node);\n+            return Cursor'(Container'Unrestricted_Access, Node);\n          end if;\n \n          Node := Node.Prev;\n@@ -1479,7 +1511,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       begin\n          while Node /= null loop\n-            Process (Cursor'(Container'Unchecked_Access, Node));\n+            Process (Cursor'(Container'Unrestricted_Access, Node));\n             Node := Node.Prev;\n          end loop;\n       exception"}, {"sha": "be1b4344a8a6a3937bf71c855487fbc6c88dc1bb", "filename": "gcc/ada/a-cidlli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -309,7 +309,7 @@ private\n \n    for List'Write use Write;\n \n-   type List_Access is access constant List;\n+   type List_Access is access all List;\n    for List_Access'Storage_Size use 0;\n \n    type Cursor is"}, {"sha": "e9b9cc05d9133f160f5ee19a58130e61514a7e90", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -34,7 +34,6 @@ with Ada.Containers.Hash_Tables.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n \n with Ada.Unchecked_Deallocation;\n-\n with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Hashed_Maps is\n@@ -45,10 +44,13 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    procedure Free_Element is\n       new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n-   type Iterator is limited new\n-     Map_Iterator_Interfaces.Forward_Iterator with record\n-        Container : Map_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Forward_Iterator with\n+   record\n+      Container : Map_Access;\n+   end record;\n+\n+   overriding procedure Finalize (Object : in out Iterator);\n \n    overriding function First (Object : Iterator) return Cursor;\n \n@@ -421,6 +423,18 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       HT_Ops.Finalize (Container.HT);\n    end Finalize;\n \n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.HT.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -433,7 +447,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node);\n    end Find;\n \n    --------------------\n@@ -471,7 +485,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -687,10 +701,10 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n       procedure Process_Node (Node : Node_Access) is\n       begin\n-         Process (Cursor'(Container'Unchecked_Access, Node));\n+         Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container'Unrestricted_Access.HT.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n \n    --  Start of processing Iterate\n \n@@ -711,8 +725,15 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n+\n    begin\n-      return Iterator'(Container => Container'Unrestricted_Access);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "3b639f4cff708ec69a03440798800631cb760773", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -341,11 +341,10 @@ private\n    use HT_Types;\n    use Ada.Finalization;\n \n-   overriding procedure Adjust (Container : in out Map);\n-\n+   overriding procedure Adjust   (Container : in out Map);\n    overriding procedure Finalize (Container : in out Map);\n \n-   type Map_Access is access constant Map;\n+   type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n \n    type Cursor is record"}, {"sha": "3a93f91f5c227da3c59432a610578171613508b6", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -36,15 +36,17 @@ with Ada.Containers.Hash_Tables.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n \n with Ada.Containers.Prime_Numbers;\n-\n-with System;  use type System.Address;\n+with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Hashed_Sets is\n \n-   type Iterator is limited new\n-     Set_Iterator_Interfaces.Forward_Iterator with record\n-        Container : Set_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Set_Iterator_Interfaces.Forward_Iterator with\n+   record\n+      Container : Set_Access;\n+   end record;\n+\n+   overriding procedure Finalize (Object : in out Iterator);\n \n    overriding function First (Object : Iterator) return Cursor;\n \n@@ -569,6 +571,18 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       HT_Ops.Finalize (Container.HT);\n    end Finalize;\n \n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.HT.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -988,7 +1002,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container'Unrestricted_Access.HT.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n \n    --  Start of processing for Iterate\n \n@@ -1007,9 +1021,17 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n    end Iterate;\n \n    function Iterate (Container : Set)\n-     return Set_Iterator_Interfaces.Forward_Iterator'Class is\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class\n+   is\n+      B : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n+\n    begin\n-      return Iterator'(Container => Container'Unrestricted_Access);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ------------\n@@ -1897,7 +1919,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          Key_Keys.Delete_Key_Sans_Free (Container.HT, Key, X);\n \n          if X = null then\n-            raise Constraint_Error with \"key not in map\";  -- ??? \"set\"\n+            raise Constraint_Error with \"key not in map\";  --  ??? \"set\"\n          end if;\n \n          Free (X);\n@@ -1915,7 +1937,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       begin\n          if Node = null then\n-            raise Constraint_Error with \"key not in map\";  -- ??? \"set\"\n+            raise Constraint_Error with \"key not in map\";  --  ??? \"set\"\n          end if;\n \n          return Node.Element.all;"}, {"sha": "9e211ad156a9ea58b4bb547fd9233bfe9da7ef78", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 79, "deletions": 24, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -28,35 +28,41 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Deallocation;\n-with System;  use type System.Address;\n+with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Multiway_Trees is\n \n-   type Iterator is new Tree_Iterator_Interfaces.Forward_Iterator with\n+   type Iterator is new Limited_Controlled and\n+     Tree_Iterator_Interfaces.Forward_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n       From_Root : Boolean;\n    end record;\n \n-   type Child_Iterator is new Tree_Iterator_Interfaces.Reversible_Iterator with\n+   type Child_Iterator is new Limited_Controlled and\n+     Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Next\n-     (Object : Iterator;\n+     (Object   : Iterator;\n       Position : Cursor) return Cursor;\n \n+   overriding procedure Finalize (Object : in out Child_Iterator);\n+\n    overriding function First (Object : Child_Iterator) return Cursor;\n    overriding function Next\n-     (Object : Child_Iterator;\n+     (Object   : Child_Iterator;\n       Position : Cursor) return Cursor;\n \n    overriding function Previous\n-     (Object : Child_Iterator;\n+     (Object   : Child_Iterator;\n       Position : Cursor) return Cursor;\n \n    overriding function Last (Object : Child_Iterator) return Cursor;\n@@ -925,6 +931,34 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       return Equal_Children (Left_Subtree, Right_Subtree);\n    end Equal_Subtree;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n+   procedure Finalize (Object : in out Child_Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1304,8 +1338,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n      (Container : Tree;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      T : Tree renames Container'Unrestricted_Access.all;\n-      B : Integer renames T.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       B := B + 1;\n@@ -1326,13 +1359,19 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    function Iterate (Container : Tree)\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Root_Cursor : constant Cursor :=\n-                      (Container'Unrestricted_Access, Root_Node (Container));\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+      RC : constant Cursor :=\n+             (Container'Unrestricted_Access, Root_Node (Container));\n+\n    begin\n-      return\n-        Iterator'(Container'Unrestricted_Access,\n-                  First_Child (Root_Cursor),\n-                  From_Root => True);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Position  => First_Child (RC),\n+                                From_Root => True)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------------------\n@@ -1349,7 +1388,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Parent.Container.Busy;\n+         B : Natural renames Parent.Container.Busy;\n          C : Tree_Node_Access;\n \n       begin\n@@ -1396,9 +1435,16 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       Parent    : Cursor)\n      return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      pragma Unreferenced (Container);\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Child_Iterator'(Parent.Container, Parent);\n+      return It : constant Child_Iterator :=\n+                    Child_Iterator'(Limited_Controlled with\n+                                      Container => Parent.Container,\n+                                      Position  => Parent)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Children;\n \n    ---------------------\n@@ -1409,8 +1455,17 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n      (Position : Cursor)\n       return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B : Natural renames Position.Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Position.Container,\n+                                Position  => Position,\n+                                From_Root => False)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Subtree;\n \n    procedure Iterate_Subtree\n@@ -1423,7 +1478,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Position.Container.Busy;\n+         B : Natural renames Position.Container.Busy;\n \n       begin\n          B := B + 1;\n@@ -1789,8 +1844,8 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;\n@@ -2052,7 +2107,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Parent.Container.Busy;\n+         B : Natural renames Parent.Container.Busy;\n          C : Tree_Node_Access;\n \n       begin\n@@ -2555,8 +2610,8 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;"}, {"sha": "6d5684d1b351337687dc1f7a5372e57f5a03ba8e", "filename": "gcc/ada/a-cimutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -327,8 +327,8 @@ private\n \n    type Tree is new Controlled with record\n       Root  : aliased Tree_Node_Type;\n-      Busy  : Integer := 0;\n-      Lock  : Integer := 0;\n+      Busy  : Natural := 0;\n+      Lock  : Natural := 0;\n       Count : Count_Type := 0;\n    end record;\n "}, {"sha": "3aa3c17e1c13b0a5e24b33cbbb20476a47e5c46f", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -40,15 +40,17 @@ with System; use type System.Address;\n package body Ada.Containers.Indefinite_Ordered_Maps is\n    pragma Suppress (All_Checks);\n \n-   type Iterator is limited new\n-     Map_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Map_Access;\n-        Node      : Node_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Map_Access;\n+      Node      : Node_Access;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -535,6 +537,22 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Tree.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -857,7 +875,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container.Tree'Unrestricted_Access.all.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n \n    --  Start of processing for Iterate\n \n@@ -878,6 +896,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -889,14 +909,22 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => null)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Map;\n       Start     : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -931,7 +959,13 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "4d0f3dcbd6aca3ea0f363d8e8d05c194d1da0899", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -37,20 +37,21 @@ with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n with Ada.Unchecked_Deallocation;\n-\n with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Ordered_Sets is\n \n-   type Iterator is limited new\n-     Set_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Set_Access;\n-        Node      : Node_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Set_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Set_Access;\n+      Node      : Node_Access;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -571,6 +572,22 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Tree.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1254,7 +1271,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      T : Tree_Type renames Container.Tree'Unrestricted_Access.all;\n+      T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n       B : Natural renames T.Busy;\n \n    --  Start of processing for Iterate\n@@ -1275,8 +1292,10 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    function Iterate\n      (Container : Set)\n-      return Set_Iterator_Interfaces.Reversible_Iterator'Class\n+      return Set_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -1288,14 +1307,22 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => null)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Set;\n       Start     : Cursor)\n-      return Set_Iterator_Interfaces.Reversible_Iterator'Class\n+      return Set_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -1330,7 +1357,13 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       --  the start position has the same value irrespective of whether this is\n       --  a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------"}, {"sha": "e570f828bb133989124804fd51fa31e2e3b567c2", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -28,16 +28,19 @@\n ------------------------------------------------------------------------------\n \n with Ada.Containers.Generic_Array_Sort;\n-\n+with Ada.Finalization; use Ada.Finalization;\n with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Vectors is\n \n-   type Iterator is new\n-     Vector_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Vector_Access;\n-        Index     : Index_Type;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Vector_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Vector_Access;\n+      Index     : Index_Type;\n+   end record;\n+\n+   overriding procedure Finalize (Object : in out Iterator);\n \n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Last  (Object : Iterator) return Cursor;\n@@ -658,6 +661,22 @@ package body Ada.Containers.Bounded_Vectors is\n       end if;\n    end Element;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1607,8 +1626,7 @@ package body Ada.Containers.Bounded_Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      V : Vector renames Container'Unrestricted_Access.all;\n-      B : Natural renames V.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       B := B + 1;\n@@ -1630,17 +1648,33 @@ package body Ada.Containers.Bounded_Vectors is\n      (Container : Vector)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Container'Unrestricted_Access, Index_Type'First);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Index     => Index_Type'First)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Vector;\n       Start     : Cursor)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Container'Unrestricted_Access, Start.Index);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Index     => Start.Index)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------"}, {"sha": "8c92a3030768970d4591044554a3f39f5daa6c37", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -39,10 +39,13 @@ with System; use type System.Address;\n \n package body Ada.Containers.Hashed_Maps is\n \n-   type Iterator is limited new\n-     Map_Iterator_Interfaces.Forward_Iterator with record\n-        Container : Map_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Forward_Iterator with\n+   record\n+      Container : Map_Access;\n+   end record;\n+\n+   overriding procedure Finalize (Object : in out Iterator);\n \n    overriding function First (Object : Iterator) return Cursor;\n \n@@ -385,6 +388,18 @@ package body Ada.Containers.Hashed_Maps is\n       HT_Ops.Finalize (Container.HT);\n    end Finalize;\n \n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.HT.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -397,7 +412,7 @@ package body Ada.Containers.Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node);\n    end Find;\n \n    --------------------\n@@ -435,7 +450,7 @@ package body Ada.Containers.Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -546,7 +561,7 @@ package body Ada.Containers.Hashed_Maps is\n          HT_Ops.Reserve_Capacity (HT, HT.Length);\n       end if;\n \n-      Position.Container := Container'Unchecked_Access;\n+      Position.Container := Container'Unrestricted_Access;\n    end Insert;\n \n    procedure Insert\n@@ -588,7 +603,7 @@ package body Ada.Containers.Hashed_Maps is\n          HT_Ops.Reserve_Capacity (HT, HT.Length);\n       end if;\n \n-      Position.Container := Container'Unchecked_Access;\n+      Position.Container := Container'Unrestricted_Access;\n    end Insert;\n \n    procedure Insert\n@@ -638,10 +653,10 @@ package body Ada.Containers.Hashed_Maps is\n \n       procedure Process_Node (Node : Node_Access) is\n       begin\n-         Process (Cursor'(Container'Unchecked_Access, Node));\n+         Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      B : Natural renames Container'Unrestricted_Access.HT.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n \n    --  Start of processing for Iterate\n \n@@ -662,8 +677,15 @@ package body Ada.Containers.Hashed_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n+\n    begin\n-      return Iterator'(Container => Container'Unrestricted_Access);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "93c3504e8d570929d2e5756b26202b4cdc714619", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -384,7 +384,7 @@ private\n \n    for Map'Read use Read;\n \n-   type Map_Access is access constant Map;\n+   type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n \n    type Cursor is record"}, {"sha": "02a3c53e3f2402afedef94df3234424bb1050385", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 58, "deletions": 31, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -29,7 +29,7 @@\n \n with Ada.Containers.Generic_Array_Sort;\n with Ada.Unchecked_Deallocation;\n-with System;  use type System.Address;\n+with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Vectors is\n \n@@ -39,15 +39,17 @@ package body Ada.Containers.Indefinite_Vectors is\n    procedure Free is\n      new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n-   type Iterator is new\n-     Vector_Iterator_Interfaces.Reversible_Iterator with record\n+   type Iterator is new Limited_Controlled and\n+     Vector_Iterator_Interfaces.Reversible_Iterator with\n+   record\n       Container : Vector_Access;\n       Index     : Index_Type;\n    end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -1105,6 +1107,18 @@ package body Ada.Containers.Indefinite_Vectors is\n       end;\n    end Finalize;\n \n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1129,7 +1143,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          if Container.Elements.EA (J) /= null\n            and then Container.Elements.EA (J).all = Item\n          then\n-            return (Container'Unchecked_Access, J);\n+            return (Container'Unrestricted_Access, J);\n          end if;\n       end loop;\n \n@@ -1167,7 +1181,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          return No_Element;\n       end if;\n \n-      return (Container'Unchecked_Access, Index_Type'First);\n+      return (Container'Unrestricted_Access, Index_Type'First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -1982,7 +1996,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2018,7 +2032,8 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Vector_Access'(Container'Unchecked_Access)\n+        and then Before.Container /=\n+                   Vector_Access'(Container'Unrestricted_Access)\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2029,7 +2044,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -2051,7 +2066,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       Insert (Container, Index, New_Item);\n \n-      Position := Cursor'(Container'Unchecked_Access, Index);\n+      Position := Cursor'(Container'Unrestricted_Access, Index);\n    end Insert;\n \n    procedure Insert\n@@ -2064,7 +2079,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2101,7 +2116,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2112,7 +2127,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -2134,7 +2149,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       Insert (Container, Index, New_Item, Count);\n \n-      Position := (Container'Unchecked_Access, Index);\n+      Position := (Container'Unrestricted_Access, Index);\n    end Insert;\n \n    ------------------\n@@ -2465,7 +2480,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2476,7 +2491,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -2498,7 +2513,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       Insert_Space (Container, Index, Count);\n \n-      Position := Cursor'(Container'Unchecked_Access, Index);\n+      Position := Cursor'(Container'Unrestricted_Access, Index);\n    end Insert_Space;\n \n    --------------\n@@ -2518,15 +2533,14 @@ package body Ada.Containers.Indefinite_Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      V : Vector renames Container'Unrestricted_Access.all;\n-      B : Natural renames V.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       B := B + 1;\n \n       begin\n          for Indx in Index_Type'First .. Container.Last loop\n-            Process (Cursor'(Container'Unchecked_Access, Indx));\n+            Process (Cursor'(Container'Unrestricted_Access, Indx));\n          end loop;\n       exception\n          when others =>\n@@ -2540,20 +2554,33 @@ package body Ada.Containers.Indefinite_Vectors is\n    function Iterate (Container : Vector)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class\n    is\n-      It : constant Iterator := (Container'Unchecked_Access, Index_Type'First);\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return It;\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Index     => Index_Type'First)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Vector;\n       Start     : Cursor)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class\n    is\n-      It : constant Iterator :=\n-             (Container'Unchecked_Access, Start.Index);\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return It;\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Index     => Start.Index)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------\n@@ -2566,7 +2593,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          return No_Element;\n       end if;\n \n-      return (Container'Unchecked_Access, Container.Last);\n+      return (Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n@@ -3313,7 +3340,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n    begin\n       if Position.Container /= null\n-        and then Position.Container /= Container'Unchecked_Access\n+        and then Position.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Position cursor denotes wrong container\";\n       end if;\n@@ -3330,7 +3357,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          if Container.Elements.EA (Indx) /= null\n            and then Container.Elements.EA (Indx).all = Item\n          then\n-            return (Container'Unchecked_Access, Indx);\n+            return (Container'Unrestricted_Access, Indx);\n          end if;\n       end loop;\n \n@@ -3376,7 +3403,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       begin\n          for Indx in reverse Index_Type'First .. Container.Last loop\n-            Process (Cursor'(Container'Unchecked_Access, Indx));\n+            Process (Cursor'(Container'Unrestricted_Access, Indx));\n          end loop;\n       exception\n          when others =>\n@@ -3491,7 +3518,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unchecked_Access, Index);\n+      return Cursor'(Container'Unrestricted_Access, Index);\n    end To_Cursor;\n \n    --------------"}, {"sha": "85d68ebf7ee585b4d0353fd62913986eee1ab5de", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -426,7 +426,7 @@ private\n \n    for Vector'Read use Read;\n \n-   type Vector_Access is access constant Vector;\n+   type Vector_Access is access all Vector;\n    for Vector_Access'Storage_Size use 0;\n \n    type Cursor is record"}, {"sha": "e78aaccf957bc36313431259bce1d1bcd1eff815", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -29,28 +29,34 @@\n \n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n-with System;  use type System.Address;\n+with System; use type System.Address;\n \n package body Ada.Containers.Multiway_Trees is\n \n-   type Iterator is new Tree_Iterator_Interfaces.Forward_Iterator with\n+   type Iterator is new Limited_Controlled and\n+     Tree_Iterator_Interfaces.Forward_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n       From_Root : Boolean;\n    end record;\n \n-   type Child_Iterator is new Tree_Iterator_Interfaces.Reversible_Iterator with\n+   type Child_Iterator is new Limited_Controlled and\n+     Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n       Position  : Cursor;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Next\n      (Object   : Iterator;\n       Position : Cursor) return Cursor;\n \n+   overriding procedure Finalize (Object : in out Child_Iterator);\n+\n    overriding function First (Object : Child_Iterator) return Cursor;\n    overriding function Next\n      (Object   : Child_Iterator;\n@@ -898,6 +904,34 @@ package body Ada.Containers.Multiway_Trees is\n       return Equal_Children (Left_Subtree, Right_Subtree);\n    end Equal_Subtree;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n+   procedure Finalize (Object : in out Child_Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1342,8 +1376,7 @@ package body Ada.Containers.Multiway_Trees is\n      (Container : Tree;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      T : Tree renames Container'Unrestricted_Access.all;\n-      B : Integer renames T.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       B := B + 1;\n@@ -1364,13 +1397,19 @@ package body Ada.Containers.Multiway_Trees is\n    function Iterate (Container : Tree)\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Root_Cursor : constant Cursor :=\n-                      (Container'Unrestricted_Access, Root_Node (Container));\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+      RC : constant Cursor :=\n+            (Container'Unrestricted_Access, Root_Node (Container));\n+\n    begin\n-      return\n-        Iterator'(Container'Unrestricted_Access,\n-                  First_Child (Root_Cursor),\n-                  From_Root => True);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Position  => First_Child (RC),\n+                                From_Root => True)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------------------\n@@ -1387,7 +1426,7 @@ package body Ada.Containers.Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Parent.Container.Busy;\n+         B : Natural renames Parent.Container.Busy;\n          C : Tree_Node_Access;\n \n       begin\n@@ -1434,9 +1473,16 @@ package body Ada.Containers.Multiway_Trees is\n       Parent    : Cursor)\n       return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      pragma Unreferenced (Container);\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Child_Iterator'(Parent.Container, Parent);\n+      return It : constant Child_Iterator :=\n+                    Child_Iterator'(Limited_Controlled with\n+                                      Container => Parent.Container,\n+                                      Position  => Parent)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Children;\n \n    ---------------------\n@@ -1447,8 +1493,17 @@ package body Ada.Containers.Multiway_Trees is\n      (Position : Cursor)\n       return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n+      B : Natural renames Position.Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Position.Container,\n+                                Position  => Position,\n+                                From_Root => False)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate_Subtree;\n \n    procedure Iterate_Subtree\n@@ -1461,7 +1516,7 @@ package body Ada.Containers.Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Position.Container.Busy;\n+         B : Natural renames Position.Container.Busy;\n \n       begin\n          B := B + 1;\n@@ -1807,8 +1862,8 @@ package body Ada.Containers.Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;\n@@ -2060,7 +2115,7 @@ package body Ada.Containers.Multiway_Trees is\n       end if;\n \n       declare\n-         B : Integer renames Parent.Container.Busy;\n+         B : Natural renames Parent.Container.Busy;\n          C : Tree_Node_Access;\n \n       begin\n@@ -2578,8 +2633,8 @@ package body Ada.Containers.Multiway_Trees is\n \n       declare\n          T : Tree renames Position.Container.all'Unrestricted_Access.all;\n-         B : Integer renames T.Busy;\n-         L : Integer renames T.Lock;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n \n       begin\n          B := B + 1;"}, {"sha": "37e2eda0c2c71d9b061aee02acf43eef893ceb0b", "filename": "gcc/ada/a-comutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -372,8 +372,8 @@ private\n \n    type Tree is new Controlled with record\n       Root  : aliased Root_Node_Type;\n-      Busy  : Integer := 0;\n-      Lock  : Integer := 0;\n+      Busy  : Natural := 0;\n+      Lock  : Natural := 0;\n       Count : Count_Type := 0;\n    end record;\n "}, {"sha": "a94f11c9f9364dc0d9e5eca3e2c4ba0533f94550", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -29,20 +29,22 @@\n \n with Ada.Containers.Generic_Array_Sort;\n with Ada.Unchecked_Deallocation;\n-\n with System; use type System.Address;\n \n package body Ada.Containers.Vectors is\n \n    procedure Free is\n      new Ada.Unchecked_Deallocation (Elements_Type, Elements_Access);\n \n-   type Iterator is new Vector_Iterator_Interfaces.Reversible_Iterator with\n+   type Iterator is new Limited_Controlled and\n+     Vector_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Vector_Access;\n       Index     : Index_Type;\n    end record;\n \n+   overriding procedure Finalize (Object : in out Iterator);\n+\n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Last  (Object : Iterator) return Cursor;\n    overriding function Next\n@@ -778,6 +780,18 @@ package body Ada.Containers.Vectors is\n       Free (X);\n    end Finalize;\n \n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -800,7 +814,7 @@ package body Ada.Containers.Vectors is\n \n       for J in Position.Index .. Container.Last loop\n          if Container.Elements.EA (J) = Item then\n-            return (Container'Unchecked_Access, J);\n+            return (Container'Unrestricted_Access, J);\n          end if;\n       end loop;\n \n@@ -835,7 +849,7 @@ package body Ada.Containers.Vectors is\n       if Is_Empty (Container) then\n          return No_Element;\n       else\n-         return (Container'Unchecked_Access, Index_Type'First);\n+         return (Container'Unrestricted_Access, Index_Type'First);\n       end if;\n    end First;\n \n@@ -1500,7 +1514,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -1536,7 +1550,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -1547,7 +1561,7 @@ package body Ada.Containers.Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -1569,7 +1583,7 @@ package body Ada.Containers.Vectors is\n \n       Insert (Container, Index, New_Item);\n \n-      Position := (Container'Unchecked_Access, Index);\n+      Position := (Container'Unrestricted_Access, Index);\n    end Insert;\n \n    procedure Insert\n@@ -1582,7 +1596,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -1619,7 +1633,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -1630,7 +1644,7 @@ package body Ada.Containers.Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -1652,7 +1666,7 @@ package body Ada.Containers.Vectors is\n \n       Insert (Container, Index, New_Item, Count);\n \n-      Position := (Container'Unchecked_Access, Index);\n+      Position := (Container'Unrestricted_Access, Index);\n    end Insert;\n \n    procedure Insert\n@@ -2036,7 +2050,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Before.Container /= null\n-        and then Before.Container /= Container'Unchecked_Access\n+        and then Before.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Before cursor denotes wrong container\";\n       end if;\n@@ -2047,7 +2061,7 @@ package body Ada.Containers.Vectors is\n          then\n             Position := No_Element;\n          else\n-            Position := (Container'Unchecked_Access, Before.Index);\n+            Position := (Container'Unrestricted_Access, Before.Index);\n          end if;\n \n          return;\n@@ -2069,7 +2083,7 @@ package body Ada.Containers.Vectors is\n \n       Insert_Space (Container, Index, Count => Count);\n \n-      Position := (Container'Unchecked_Access, Index);\n+      Position := (Container'Unrestricted_Access, Index);\n    end Insert_Space;\n \n    --------------\n@@ -2089,15 +2103,14 @@ package body Ada.Containers.Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      V : Vector renames Container'Unrestricted_Access.all;\n-      B : Natural renames V.Busy;\n+      B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n    begin\n       B := B + 1;\n \n       begin\n          for Indx in Index_Type'First .. Container.Last loop\n-            Process (Cursor'(Container'Unchecked_Access, Indx));\n+            Process (Cursor'(Container'Unrestricted_Access, Indx));\n          end loop;\n       exception\n          when others =>\n@@ -2112,19 +2125,33 @@ package body Ada.Containers.Vectors is\n      (Container : Vector)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      It : constant Iterator := (Container'Unchecked_Access, Index_Type'First);\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return It;\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Index     => Index_Type'First)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate\n      (Container : Vector;\n       Start     : Cursor)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class\n    is\n-      It : constant Iterator := (Container'Unchecked_Access, Start.Index);\n+      B  : Natural renames Container'Unrestricted_Access.all.Busy;\n+\n    begin\n-      return It;\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Index     => Start.Index)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ----------\n@@ -2136,7 +2163,7 @@ package body Ada.Containers.Vectors is\n       if Is_Empty (Container) then\n          return No_Element;\n       else\n-         return (Container'Unchecked_Access, Container.Last);\n+         return (Container'Unrestricted_Access, Container.Last);\n       end if;\n    end Last;\n \n@@ -2903,7 +2930,7 @@ package body Ada.Containers.Vectors is\n \n    begin\n       if Position.Container /= null\n-        and then Position.Container /= Container'Unchecked_Access\n+        and then Position.Container /= Container'Unrestricted_Access\n       then\n          raise Program_Error with \"Position cursor denotes wrong container\";\n       end if;\n@@ -2915,7 +2942,7 @@ package body Ada.Containers.Vectors is\n \n       for Indx in reverse Index_Type'First .. Last loop\n          if Container.Elements.EA (Indx) = Item then\n-            return (Container'Unchecked_Access, Indx);\n+            return (Container'Unrestricted_Access, Indx);\n          end if;\n       end loop;\n \n@@ -2960,7 +2987,7 @@ package body Ada.Containers.Vectors is\n \n       begin\n          for Indx in reverse Index_Type'First .. Container.Last loop\n-            Process (Cursor'(Container'Unchecked_Access, Indx));\n+            Process (Cursor'(Container'Unrestricted_Access, Indx));\n          end loop;\n       exception\n          when others =>\n@@ -3061,7 +3088,7 @@ package body Ada.Containers.Vectors is\n       if Index not in Index_Type'First .. Container.Last then\n          return No_Element;\n       else\n-         return (Container'Unchecked_Access, Index);\n+         return (Container'Unrestricted_Access, Index);\n       end if;\n    end To_Cursor;\n "}, {"sha": "00f9b2abbaccb080d40e409129241f788032a457", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -410,7 +410,7 @@ private\n       Lock     : Natural := 0;\n    end record;\n \n-   type Vector_Access is access constant Vector;\n+   type Vector_Access is access all Vector;\n    for Vector_Access'Storage_Size use 0;\n \n    type Cursor is record"}, {"sha": "778d223e29170f54e53c13c162ee0775a28d8e61", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -39,15 +39,17 @@ with System; use type System.Address;\n \n package body Ada.Containers.Ordered_Maps is\n \n-   type Iterator is limited new\n-     Map_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Map_Access;\n-        Node      : Node_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Map_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Map_Access;\n+      Node      : Node_Access;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -488,6 +490,22 @@ package body Ada.Containers.Ordered_Maps is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Tree.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -839,6 +857,8 @@ package body Ada.Containers.Ordered_Maps is\n    function Iterate\n      (Container : Map) return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container.Tree'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -850,12 +870,20 @@ package body Ada.Containers.Ordered_Maps is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => null)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    function Iterate (Container : Map; Start : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container.Tree'Unrestricted_Access.all.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -890,7 +918,13 @@ package body Ada.Containers.Ordered_Maps is\n       --  the start position has the same value irrespective of whether this\n       --  is a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      return It : constant Iterator :=\n+                    (Limited_Controlled with\n+                       Container => Container'Unrestricted_Access,\n+                       Node      => Start.Node)\n+      do\n+         B := B + 1;\n+      end return;\n    end Iterate;\n \n    ---------"}, {"sha": "b4518f40b7533032af325c5e095d93bd3067edd0", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -42,15 +42,17 @@ with System; use type System.Address;\n \n package body Ada.Containers.Ordered_Sets is\n \n-   type Iterator is limited new\n-     Set_Iterator_Interfaces.Reversible_Iterator with record\n-        Container : Set_Access;\n-        Node      : Node_Access;\n-     end record;\n+   type Iterator is new Limited_Controlled and\n+     Set_Iterator_Interfaces.Reversible_Iterator with\n+   record\n+      Container : Set_Access;\n+      Node      : Node_Access;\n+   end record;\n \n-   overriding function First (Object : Iterator) return Cursor;\n+   overriding procedure Finalize (Object : in out Iterator);\n \n-   overriding function Last (Object : Iterator) return Cursor;\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -512,6 +514,22 @@ package body Ada.Containers.Ordered_Sets is\n       end if;\n    end Exclude;\n \n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Iterator) is\n+   begin\n+      if Object.Container /= null then\n+         declare\n+            B : Natural renames Object.Container.all.Tree.Busy;\n+\n+         begin\n+            B := B - 1;\n+         end;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1160,7 +1178,7 @@ package body Ada.Containers.Ordered_Sets is\n          Process (Cursor'(Container'Unrestricted_Access, Node));\n       end Process_Node;\n \n-      T : Tree_Type renames Container.Tree'Unrestricted_Access.all;\n+      T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n       B : Natural renames T.Busy;\n \n    --  Start of processing for Iterate\n@@ -1182,6 +1200,8 @@ package body Ada.Containers.Ordered_Sets is\n    function Iterate (Container : Set)\n      return Set_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  The value of the Node component influences the behavior of the First\n       --  and Last selector functions of the iterator object. When the Node\n@@ -1193,12 +1213,19 @@ package body Ada.Containers.Ordered_Sets is\n       --  Note: For a forward iterator, Container.First is the beginning, and\n       --  for a reverse iterator, Container.Last is the beginning.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => null);\n+      B := B + 1;\n+\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => null);\n    end Iterate;\n \n    function Iterate (Container : Set; Start : Cursor)\n      return Set_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n+      B  : Natural renames Container'Unrestricted_Access.all.Tree.Busy;\n+\n    begin\n       --  It was formerly the case that when Start = No_Element, the partial\n       --  iterator was defined to behave the same as for a complete iterator,\n@@ -1233,7 +1260,12 @@ package body Ada.Containers.Ordered_Sets is\n       --  the start position has the same value irrespective of whether this is\n       --  a forward or reverse iteration.\n \n-      return Iterator'(Container'Unrestricted_Access, Node => Start.Node);\n+      B := B + 1;\n+\n+      return It : constant Iterator :=\n+                    Iterator'(Limited_Controlled with\n+                                Container => Container'Unrestricted_Access,\n+                                Node      => Start.Node);\n    end Iterate;\n \n    ----------"}, {"sha": "d7f30991fca2007fde77f39fa4ec096b0272ce6c", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -3233,7 +3233,7 @@ package body Exp_Ch5 is\n                           Make_Selected_Component (Loc,\n                            Prefix => New_Occurrence_Of (Pack, Loc),\n                            Selector_Name =>\n-                             Make_Identifier (Loc,  Name_Has_Element)),\n+                             Make_Identifier (Loc, Name_Has_Element)),\n \n                         Parameter_Associations =>\n                           New_List (\n@@ -3250,21 +3250,19 @@ package body Exp_Ch5 is\n             --    I : Iterator_Type renames Container;\n             --    C : Pack.Cursor_Type := Container.[First | Last];\n \n-            declare\n-               Decl1 : Node_Id;\n-               Decl2 : Node_Id;\n-               Decl3 : Node_Id;\n+            Insert_Action (N,\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Iterator,\n+                Subtype_Mark  => New_Occurrence_Of (Iter_Type, Loc),\n+                Name          => Relocate_Node (Name (I_Spec))));\n \n-            begin\n-               Decl1 :=\n-                 Make_Object_Renaming_Declaration (Loc,\n-                   Defining_Identifier => Iterator,\n-                   Subtype_Mark  => New_Occurrence_Of (Iter_Type, Loc),\n-                   Name          => Relocate_Node (Name (I_Spec)));\n+            --  Create declaration for cursor\n \n-               --  Create declaration for cursor\n+            declare\n+               Decl : Node_Id;\n \n-               Decl2 :=\n+            begin\n+               Decl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Cursor,\n                    Object_Definition   =>\n@@ -3275,31 +3273,14 @@ package body Exp_Ch5 is\n                        Selector_Name =>\n                          Make_Identifier (Loc, Name_Init)));\n \n-               Set_Assignment_OK (Decl2);\n-\n                --  The cursor is only modified in expanded code, so it appears\n                --  as unassigned to the warning machinery. We must suppress\n                --  this spurious warning explicitly.\n \n-               Decl3 :=\n-                 Make_Pragma (Loc,\n-                   Chars => Name_Warnings,\n-                   Pragma_Argument_Associations => New_List (\n-                     Make_Pragma_Argument_Association (Loc,\n-                       Expression => Make_Identifier (Loc, Name_Off)),\n-                     Make_Pragma_Argument_Association (Loc,\n-                       Expression =>\n-                         New_Occurrence_Of (Cursor, Loc))));\n+               Set_Warnings_Off (Cursor);\n+               Set_Assignment_OK (Decl);\n \n-               --  The expanded loop is wrapped in a block, to make the loop\n-               --  variable local.\n-\n-               New_Loop :=\n-                 Make_Block_Statement (Loc,\n-                   Declarations => New_List (Decl1, Decl2, Decl3),\n-                   Handled_Statement_Sequence =>\n-                     Make_Handled_Sequence_Of_Statements (Loc,\n-                       Statements => New_List (New_Loop)));\n+               Insert_Action (N, Decl);\n             end;\n \n             --  If the range of iteration is given by a function call that"}, {"sha": "16521f9f6d78697565789130006043685acb6d26", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -1342,7 +1342,9 @@ package body Freeze is\n \n             --  If an incomplete type is still not frozen, this may be a\n             --  premature freezing because of a body declaration that follows.\n-            --  Indicate where the freezing took place.\n+            --  Indicate where the freezing took place. Freezing will happen\n+            --  if the body comes from source, but not if it is internally\n+            --  generated, for example as the body of a type invariant.\n \n             --  If the freezing is caused by the end of the current declarative\n             --  part, it is a Taft Amendment type, and there is no error.\n@@ -1360,8 +1362,9 @@ package body Freeze is\n                                      N_Protected_Body,\n                                      N_Task_Body)\n                         or else Nkind (Bod) in N_Body_Stub)\n-                     and then\n-                       List_Containing (After) = List_Containing (Parent (E))\n+                    and then\n+                     List_Containing (After) = List_Containing (Parent (E))\n+                    and then Comes_From_Source (Bod)\n                   then\n                      Error_Msg_Sloc := Sloc (Next (After));\n                      Error_Msg_NE"}, {"sha": "e218e0b5d54b360033e4ba8adcf81d1a55b24587", "filename": "gcc/ada/g-exptty.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fg-exptty.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fg-exptty.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-exptty.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -32,9 +32,12 @@\n with GNAT.TTY;\n \n with System;\n+with System.OS_Constants;\n \n package GNAT.Expect.TTY is\n \n+   pragma Linker_Options (System.OS_Constants.PTY_Library);\n+\n    ------------------\n    --  TTY_Process --\n    ------------------"}, {"sha": "ba5737a487ef330db8dce85f551a5538fe6579d5", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -13188,6 +13188,23 @@ setting.\n Enumeration literals are in mixed case. Overrides ^-n^/NAME_CASING^ casing\n setting.\n \n+@cindex @option{^-nt@var{x}^/TYPE_CASING^} (@command{gnatpp})\n+@item ^-neD^/TYPE_CASING=AS_DECLARED^\n+Type and subtype name casing for defining occurrences are as they appear in\n+the source file. Overrides ^-n^/NAME_CASING^ casing setting.\n+\n+@item ^-ntU^/TYPE_CASING=UPPER_CASE^\n+Type and subtype names are in upper case. Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n+@item ^-ntL^/TYPE_CASING=LOWER_CASE^\n+Type and subtype names are in lower case. Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n+@item ^-ntM^/TYPE_CASING=MIXED_CASE^\n+Type and subtype names are in mixed case. Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n @cindex @option{^-p@var{x}^/PRAGMA_CASING^} (@command{gnatpp})\n @item ^-pL^/PRAGMA_CASING=LOWER_CASE^\n Pragma names are lower case"}, {"sha": "23ad841a3c5cbbe23a80c9e39dc7f804b476093a", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 97, "deletions": 18, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -99,12 +99,15 @@ package body Prj.Part is\n    package Virtual_Hash is new GNAT.HTable.Simple_HTable\n      (Header_Num => Header_Num,\n       Element    => Project_Node_Id,\n-      No_Element => Empty_Node,\n+      No_Element => Project_Node_High_Bound,\n       Key        => Project_Node_Id,\n       Hash       => Prj.Tree.Hash,\n       Equal      => \"=\");\n-   --  Hash table to store the node id of the project for which a virtual\n-   --  extending project need to be created.\n+   --  Hash table to store the node ids of projects for which a virtual\n+   --  extending project need to be created. The corresponding value is the\n+   --  head of a list of WITH clauses corresponding to the context of the\n+   --  enclosing EXTEND ALL projects. Note: Default_Element is Project_Node_\n+   --  High_Bound because we want Empty_Node to be a possible value.\n \n    package Processed_Hash is new GNAT.HTable.Simple_HTable\n      (Header_Num => Header_Num,\n@@ -148,11 +151,13 @@ package body Prj.Part is\n    --  Check that an aggregate project only imports abstract projects\n \n    procedure Create_Virtual_Extending_Project\n-     (For_Project  : Project_Node_Id;\n-      Main_Project : Project_Node_Id;\n-      In_Tree      : Project_Node_Tree_Ref);\n+     (For_Project     : Project_Node_Id;\n+      Main_Project    : Project_Node_Id;\n+      Extension_Withs : Project_Node_Id;\n+      In_Tree         : Project_Node_Tree_Ref);\n    --  Create a virtual extending project of For_Project. Main_Project is\n-   --  the extending all project.\n+   --  the extending all project. Extension_Withs is the head of a WITH clause\n+   --  list to be added to the created virtual project.\n    --\n    --  The String_Value_Of is not set for the automatically added with\n    --  clause and keeps the default value of No_Name. This enables Prj.PP\n@@ -236,14 +241,45 @@ package body Prj.Part is\n    --  Returns No_Name if the path name is invalid, because the corresponding\n    --  project name does not have the syntax of an ada identifier.\n \n+   function Copy_With_Clause\n+     (With_Clause : Project_Node_Id;\n+      In_Tree     : Project_Node_Tree_Ref;\n+      Next_Clause : Project_Node_Id) return Project_Node_Id;\n+   --  Return a copy of With_Clause in In_Tree, whose Next_With_Clause is the\n+   --  indicated one.\n+\n+   ----------------------\n+   -- Copy_With_Clause --\n+   ----------------------\n+\n+   function Copy_With_Clause\n+     (With_Clause : Project_Node_Id;\n+      In_Tree     : Project_Node_Tree_Ref;\n+      Next_Clause : Project_Node_Id) return Project_Node_Id\n+   is\n+      New_With_Clause : constant Project_Node_Id :=\n+                          Default_Project_Node (In_Tree, N_With_Clause);\n+   begin\n+      Set_Name_Of (New_With_Clause, In_Tree,\n+        Name_Of (With_Clause, In_Tree));\n+      Set_Path_Name_Of (New_With_Clause, In_Tree,\n+        Path_Name_Of (With_Clause, In_Tree));\n+      Set_Project_Node_Of (New_With_Clause, In_Tree,\n+        Project_Node_Of (With_Clause, In_Tree));\n+      Set_Next_With_Clause_Of (New_With_Clause, In_Tree, Next_Clause);\n+\n+      return New_With_Clause;\n+   end Copy_With_Clause;\n+\n    --------------------------------------\n    -- Create_Virtual_Extending_Project --\n    --------------------------------------\n \n    procedure Create_Virtual_Extending_Project\n-     (For_Project  : Project_Node_Id;\n-      Main_Project : Project_Node_Id;\n-      In_Tree      : Project_Node_Tree_Ref)\n+     (For_Project     : Project_Node_Id;\n+      Main_Project    : Project_Node_Id;\n+      Extension_Withs : Project_Node_Id;\n+      In_Tree         : Project_Node_Tree_Ref)\n    is\n \n       Virtual_Name : constant String :=\n@@ -323,7 +359,8 @@ package body Prj.Part is\n \n       Project_Declaration := Project_Declaration_Of (Virtual_Project, In_Tree);\n \n-      --  With clause\n+      --  Add a WITH clause to the main project to import the newly created\n+      --  virtual extending project.\n \n       Set_Name_Of (With_Clause, In_Tree, Virtual_Name_Id);\n       Set_Path_Name_Of (With_Clause, In_Tree, Virtual_Path_Id);\n@@ -332,6 +369,21 @@ package body Prj.Part is\n         (With_Clause, In_Tree, First_With_Clause_Of (Main_Project, In_Tree));\n       Set_First_With_Clause_Of (Main_Project, In_Tree, With_Clause);\n \n+      --  Copy with clauses for projects imported by the extending-all project\n+\n+      declare\n+         Org_With_Clause : Project_Node_Id := Extension_Withs;\n+         New_With_Clause : Project_Node_Id := Empty_Node;\n+      begin\n+         while Present (Org_With_Clause) loop\n+            New_With_Clause :=\n+              Copy_With_Clause (Org_With_Clause, In_Tree, New_With_Clause);\n+\n+            Org_With_Clause := Next_With_Clause_Of (Org_With_Clause, In_Tree);\n+         end loop;\n+         Set_First_With_Clause_Of (Virtual_Project, In_Tree, New_With_Clause);\n+      end;\n+\n       --  Virtual project node\n \n       Set_Location_Of\n@@ -371,6 +423,14 @@ package body Prj.Part is\n    -- Look_For_Virtual_Projects_For --\n    -----------------------------------\n \n+   Extension_Withs : Project_Node_Id;\n+   --  Head of the current EXTENDS ALL imports list. When creating virtual\n+   --  projects for an EXTENDS ALL, we import in each virtual project all\n+   --  of the projects that appear in WITH clauses of the extending projects.\n+   --  This ensures that virtual projects share a consistent environment (in\n+   --  particular if a project imported by one of the extending projects\n+   --  replaces some runtime units).\n+\n    procedure Look_For_Virtual_Projects_For\n      (Proj                : Project_Node_Id;\n       In_Tree             : Project_Node_Tree_Ref;\n@@ -388,9 +448,13 @@ package body Prj.Part is\n       Extended    : Project_Node_Id := Empty_Node;\n       --  Node for the eventual project extended by Proj\n \n+      Extends_All : Boolean := False;\n+      --  Set True if Proj is an EXTENDS ALL project\n+\n+      Saved_Extension_Withs : constant Project_Node_Id := Extension_Withs;\n+\n    begin\n-      --  Nothing to do if Proj is not defined or if it has already been\n-      --  processed.\n+      --  Nothing to do if Proj is undefined or has already been processed\n \n       if Present (Proj) and then not Processed_Hash.Get (Proj) then\n          --  Make sure the project will not be processed again\n@@ -401,13 +465,14 @@ package body Prj.Part is\n \n          if Present (Declaration) then\n             Extended := Extended_Project_Of (Declaration, In_Tree);\n+            Extends_All := Is_Extending_All (Proj, In_Tree);\n          end if;\n \n          --  If this is a project that may need a virtual extending project\n          --  and it is not itself an extending project, put it in the list.\n \n          if Potentially_Virtual and then No (Extended) then\n-            Virtual_Hash.Set (Proj, Proj);\n+            Virtual_Hash.Set (Proj, Extension_Withs);\n          end if;\n \n          --  Now check the projects it imports\n@@ -422,6 +487,14 @@ package body Prj.Part is\n                  (Imported, In_Tree, Potentially_Virtual => True);\n             end if;\n \n+            if Extends_All then\n+               --  This is an EXTENDS ALL project: prepend each of its WITH\n+               --  clauses to the currently active list of extension deps.\n+\n+               Extension_Withs :=\n+                 Copy_With_Clause (With_Clause, In_Tree, Extension_Withs);\n+            end if;\n+\n             With_Clause := Next_With_Clause_Of (With_Clause, In_Tree);\n          end loop;\n \n@@ -431,6 +504,8 @@ package body Prj.Part is\n \n          Look_For_Virtual_Projects_For\n            (Extended, In_Tree, Potentially_Virtual => False);\n+\n+         Extension_Withs := Saved_Extension_Withs;\n       end if;\n    end Look_For_Virtual_Projects_For;\n \n@@ -550,6 +625,7 @@ package body Prj.Part is\n             Declaration : constant Project_Node_Id :=\n                             Project_Declaration_Of (Project, In_Tree);\n          begin\n+            Extension_Withs := First_With_Clause_Of (Project, In_Tree);\n             Look_For_Virtual_Projects_For\n               (Extended_Project_Of (Declaration, In_Tree), In_Tree,\n                Potentially_Virtual => False);\n@@ -595,11 +671,14 @@ package body Prj.Part is\n          --  Now create all the virtual extending projects\n \n          declare\n-            Proj : Project_Node_Id := Virtual_Hash.Get_First;\n+            Proj  : Project_Node_Id := Empty_Node;\n+            Withs : Project_Node_Id;\n          begin\n-            while Present (Proj) loop\n-               Create_Virtual_Extending_Project (Proj, Project, In_Tree);\n-               Proj := Virtual_Hash.Get_Next;\n+            Virtual_Hash.Get_First (Proj, Withs);\n+            while Withs /= Project_Node_High_Bound loop\n+               Create_Virtual_Extending_Project\n+                 (Proj, Project, Withs, In_Tree);\n+               Virtual_Hash.Get_Next (Proj, Withs);\n             end loop;\n          end;\n       end if;"}, {"sha": "7b247937639cf4976c106bc181f8611aa8c8f5e5", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -926,6 +926,21 @@ CND(VEOL2, \"Alternative EOL\")\n \n #endif /* HAVE_TERMIOS */\n \n+/*\n+\n+   -----------------------------\n+   -- Pseudo terminal library --\n+   -----------------------------\n+\n+*/\n+\n+#if defined (__FreeBSD__) || defined (linux)\n+# define PTY_Library \"-lutil\"\n+#else\n+# define PTY_Library \"\"\n+#endif\n+CST(PTY_Library, \"for g-exptty\")\n+\n /**\n  **  Sockets constants\n  **/"}, {"sha": "1c5dcc1a024e879b50a25baa1cebd60c96103a03", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -44,6 +44,7 @@ with Interfaces.C;\n \n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.OS_Constants;\n with System.OS_Primitives;\n with System.Task_Primitives.Interrupt_Operations;\n \n@@ -60,6 +61,7 @@ with System.Soft_Links;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking.Debug;"}, {"sha": "8893c010571fefcb74059037a09df039fe54d340", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -45,6 +45,7 @@ with Interfaces.C;\n with System.Task_Info;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.OS_Constants;\n with System.OS_Primitives;\n with System.IO;\n \n@@ -56,6 +57,7 @@ with System.Soft_Links;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking;"}, {"sha": "667603b73b7124b2f76b213b7de026dc18df4d2f", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -50,6 +50,7 @@ with Interfaces.C;\n \n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.OS_Constants;\n with System.OS_Primitives;\n with System.Task_Info;\n \n@@ -61,6 +62,7 @@ with System.Soft_Links;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking.Debug;"}, {"sha": "92088e10cb4b02a41ef394973cb2e67c872269dd", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -43,6 +43,7 @@ with Interfaces.C;\n with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.OS_Constants;\n with System.OS_Primitives;\n with System.Task_Info;\n \n@@ -58,6 +59,7 @@ with System.Soft_Links;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking.Debug;"}, {"sha": "cb534adf5b62a00eeb7ab3c5c473b087d8fee777", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -43,6 +43,7 @@ with Interfaces.C;\n \n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.OS_Constants;\n with System.OS_Primitives;\n with System.Task_Info;\n \n@@ -54,6 +55,7 @@ with System.Soft_Links;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking.Debug;"}, {"sha": "eec3a9da10d9adc17270426d617dcb40e757e968", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -46,6 +46,7 @@ with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n with System.Float_Control;\n+with System.OS_Constants;\n \n with System.Soft_Links;\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n@@ -58,6 +59,7 @@ with System.VxWorks.Ext;\n \n package body System.Task_Primitives.Operations is\n \n+   package OSC renames System.OS_Constants;\n    package SSL renames System.Soft_Links;\n \n    use System.Tasking.Debug;"}, {"sha": "12fbd71386e73a5d735c3fd1988e53cc266ffb99", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -34,14 +34,12 @@\n \n with System.Parameters;\n with System.Tasking;\n-with System.OS_Constants;\n with System.OS_Interface;\n \n package System.Task_Primitives.Operations is\n    pragma Preelaborate;\n \n    package ST renames System.Tasking;\n-   package OSC renames System.OS_Constants;\n    package OSI renames System.OS_Interface;\n \n    procedure Initialize (Environment_Task : ST.Task_Id);"}, {"sha": "5cc06e7d8996b265f2d8b9eb64fb37b3b85748e6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -11799,6 +11799,11 @@ package body Sem_Ch3 is\n          --  needed, since checks may cause duplication of the expressions\n          --  which must not be reevaluated.\n \n+         --  The forced evaluation removes side effects from expressions,\n+         --  which should occur also in Alfa mode. Otherwise, we end up with\n+         --  unexpected insertions of actions at places where this is not\n+         --  supposed to occur, e.g. on default parameters of a call.\n+\n          if Expander_Active then\n             Force_Evaluation (Low_Bound (R));\n             Force_Evaluation (High_Bound (R));\n@@ -18339,6 +18344,11 @@ package body Sem_Ch3 is\n             --  if needed, before applying checks, since checks may cause\n             --  duplication of the expression without forcing evaluation.\n \n+            --  The forced evaluation removes side effects from expressions,\n+            --  which should occur also in Alfa mode. Otherwise, we end up with\n+            --  unexpected insertions of actions at places where this is not\n+            --  supposed to occur, e.g. on default parameters of a call.\n+\n             if Expander_Active then\n                Force_Evaluation (Lo);\n                Force_Evaluation (Hi);\n@@ -18449,6 +18459,11 @@ package body Sem_Ch3 is\n \n       --  Case of other than an explicit N_Range node\n \n+      --  The forced evaluation removes side effects from expressions, which\n+      --  should occur also in Alfa mode. Otherwise, we end up with unexpected\n+      --  insertions of actions at places where this is not supposed to occur,\n+      --  e.g. on default parameters of a call.\n+\n       elsif Expander_Active then\n          Get_Index_Bounds (R, Lo, Hi);\n          Force_Evaluation (Lo);"}, {"sha": "073bc2b840a63112556b061f5d8357d1ddb0c796", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 196, "deletions": 102, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -75,6 +75,14 @@ package body Sem_Ch5 is\n    --  messages. This variable is recursively saved on entry to processing the\n    --  construct, and restored on exit.\n \n+   procedure Pre_Analyze_Range (R_Copy : Node_Id);\n+   --  Determine expected type of range or domain of iteration of Ada 2012\n+   --  loop by analyzing separate copy. Do the analysis and resolution of the\n+   --  copy of the bound(s) with expansion disabled, to prevent the generation\n+   --  of finalization actions. This prevents memory leaks when the bounds\n+   --  contain calls to functions returning controlled arrays or when the\n+   --  domain of iteration is a container.\n+\n    ------------------------\n    -- Analyze_Assignment --\n    ------------------------\n@@ -1618,90 +1626,6 @@ package body Sem_Ch5 is\n       --  calls that use the secondary stack, returning True if any such call\n       --  is found, and False otherwise.\n \n-      procedure Pre_Analyze_Range (R_Copy : Node_Id);\n-      --  Determine expected type of range or domain of iteration of Ada 2012\n-      --  loop by analyzing separate copy. Do the analysis and resolution of\n-      --  the copy of the bound(s) with expansion disabled, to prevent the\n-      --  generation of finalization actions. This prevents memory leaks when\n-      --  the bounds contain calls to functions returning controlled arrays or\n-      --  when the domain of iteration is a container.\n-\n-      -----------------------\n-      -- Pre_Analyze_Range --\n-      -----------------------\n-\n-      procedure Pre_Analyze_Range (R_Copy : Node_Id) is\n-         Save_Analysis : Boolean;\n-      begin\n-         Save_Analysis := Full_Analysis;\n-         Full_Analysis := False;\n-         Expander_Mode_Save_And_Set (False);\n-\n-         Analyze (R_Copy);\n-\n-         if Nkind (R_Copy) in N_Subexpr\n-           and then Is_Overloaded (R_Copy)\n-         then\n-\n-            --  Apply preference rules for range of predefined integer types,\n-            --  or diagnose true ambiguity.\n-\n-            declare\n-               I     : Interp_Index;\n-               It    : Interp;\n-               Found : Entity_Id := Empty;\n-\n-            begin\n-               Get_First_Interp (R_Copy, I, It);\n-               while Present (It.Typ) loop\n-                  if Is_Discrete_Type (It.Typ) then\n-                     if No (Found) then\n-                        Found := It.Typ;\n-                     else\n-                        if Scope (Found) = Standard_Standard then\n-                           null;\n-\n-                        elsif Scope (It.Typ) = Standard_Standard then\n-                           Found := It.Typ;\n-\n-                        else\n-                           --  Both of them are user-defined\n-\n-                           Error_Msg_N\n-                             (\"ambiguous bounds in range of iteration\",\n-                               R_Copy);\n-                           Error_Msg_N (\"\\possible interpretations:\", R_Copy);\n-                           Error_Msg_NE (\"\\\\} \", R_Copy, Found);\n-                           Error_Msg_NE (\"\\\\} \", R_Copy, It.Typ);\n-                           exit;\n-                        end if;\n-                     end if;\n-                  end if;\n-\n-                  Get_Next_Interp (I, It);\n-               end loop;\n-            end;\n-         end if;\n-\n-         if  Is_Entity_Name (R_Copy)\n-           and then Is_Type (Entity (R_Copy))\n-         then\n-\n-            --  Subtype mark in iteration scheme\n-\n-            null;\n-\n-         elsif Nkind (R_Copy) in N_Subexpr then\n-\n-            --  Expression in range, or Ada 2012 iterator\n-\n-            Resolve (R_Copy);\n-         end if;\n-\n-         Expander_Mode_Restore;\n-         Full_Analysis := Save_Analysis;\n-      end Pre_Analyze_Range;\n-\n       --------------------\n       -- Process_Bounds --\n       --------------------\n@@ -1855,7 +1779,7 @@ package body Sem_Ch5 is\n          if New_Lo_Bound /= Lo\n            and then Is_Static_Expression (New_Lo_Bound)\n          then\n-            Rewrite  (Low_Bound (R), New_Copy (New_Lo_Bound));\n+            Rewrite (Low_Bound (R), New_Copy (New_Lo_Bound));\n          end if;\n \n          if New_Hi_Bound /= Hi\n@@ -2034,7 +1958,7 @@ package body Sem_Ch5 is\n                begin\n                   if Present (H)\n                     and then Enclosing_Dynamic_Scope (H) =\n-                    Enclosing_Dynamic_Scope (Id)\n+                               Enclosing_Dynamic_Scope (Id)\n                     and then Ekind (H) = E_Variable\n                     and then Is_Discrete_Type (Etype (H))\n                   then\n@@ -2059,7 +1983,7 @@ package body Sem_Ch5 is\n                then\n                   Process_Bounds (DS);\n \n-               --  expander not active or else range of iteration is a subtype\n+               --  Expander not active or else range of iteration is a subtype\n                --  indication, an entity, or a function call that yields an\n                --  aggregate or a container.\n \n@@ -2513,12 +2437,95 @@ package body Sem_Ch5 is\n    ----------------------------\n \n    procedure Analyze_Loop_Statement (N : Node_Id) is\n-      Loop_Statement : constant Node_Id := N;\n \n-      Id   : constant Node_Id := Identifier (Loop_Statement);\n-      Iter : constant Node_Id := Iteration_Scheme (Loop_Statement);\n+      function Is_Container_Iterator (Iter : Node_Id) return Boolean;\n+      --  Given a loop iteration scheme, determine whether it is an Ada 2012\n+      --  container iteration.\n+\n+      function Is_Wrapped_In_Block (N : Node_Id) return Boolean;\n+      --  Determine whether node N is the sole statement of a block\n+\n+      ---------------------------\n+      -- Is_Container_Iterator --\n+      ---------------------------\n+\n+      function Is_Container_Iterator (Iter : Node_Id) return Boolean is\n+      begin\n+         --  Infinite loop\n+\n+         if No (Iter) then\n+            return False;\n+\n+         --  While loop\n+\n+         elsif Present (Condition (Iter)) then\n+            return False;\n+\n+         --  for Def_Id in [reverse] Name loop\n+         --  for Def_Id [: Subtype_Indication] of [reverse] Name loop\n+\n+         elsif Present (Iterator_Specification (Iter)) then\n+            declare\n+               Nam : constant Node_Id := Name (Iterator_Specification (Iter));\n+               Nam_Copy : Node_Id;\n+\n+            begin\n+               Nam_Copy := New_Copy_Tree (Nam);\n+               Set_Parent (Nam_Copy, Parent (Nam));\n+               Pre_Analyze_Range (Nam_Copy);\n+\n+               --  The only two options here are iteration over a container or\n+               --  an array.\n+\n+               return not Is_Array_Type (Etype (Nam_Copy));\n+            end;\n+\n+         --  for Def_Id in [reverse] Discrete_Subtype_Definition loop\n+\n+         else\n+            declare\n+               LP : constant Node_Id := Loop_Parameter_Specification (Iter);\n+               DS : constant Node_Id := Discrete_Subtype_Definition (LP);\n+               DS_Copy : Node_Id;\n+\n+            begin\n+               DS_Copy := New_Copy_Tree (DS);\n+               Set_Parent (DS_Copy, Parent (DS));\n+               Pre_Analyze_Range (DS_Copy);\n+\n+               --  Check for a call to Iterate ()\n+\n+               return\n+                 Nkind (DS_Copy) = N_Function_Call\n+                   and then Needs_Finalization (Etype (DS_Copy));\n+            end;\n+         end if;\n+      end Is_Container_Iterator;\n+\n+      -------------------------\n+      -- Is_Wrapped_In_Block --\n+      -------------------------\n+\n+      function Is_Wrapped_In_Block (N : Node_Id) return Boolean is\n+         HSS : constant Node_Id := Parent (N);\n+\n+      begin\n+         return\n+           Nkind (HSS) = N_Handled_Sequence_Of_Statements\n+             and then Nkind (Parent (HSS)) = N_Block_Statement\n+             and then First (Statements (HSS)) = N\n+             and then No (Next (First (Statements (HSS))));\n+      end Is_Wrapped_In_Block;\n+\n+      --  Local declarations\n+\n+      Id   : constant Node_Id := Identifier (N);\n+      Iter : constant Node_Id := Iteration_Scheme (N);\n+      Loc  : constant Source_Ptr := Sloc (N);\n       Ent  : Entity_Id;\n \n+   --  Start of processing for Analyze_Loop_Statement\n+\n    begin\n       if Present (Id) then\n \n@@ -2534,15 +2541,13 @@ package body Sem_Ch5 is\n \n          if No (Ent) then\n             if Total_Errors_Detected /= 0 then\n-               Ent :=\n-                 New_Internal_Entity\n-                   (E_Loop, Current_Scope, Sloc (Loop_Statement), 'L');\n+               Ent := New_Internal_Entity (E_Loop, Current_Scope, Loc, 'L');\n             else\n                raise Program_Error;\n             end if;\n \n          else\n-            Generate_Reference  (Ent, Loop_Statement, ' ');\n+            Generate_Reference (Ent, N, ' ');\n             Generate_Definition (Ent);\n \n             --  If we found a label, mark its type. If not, ignore it, since it\n@@ -2555,19 +2560,36 @@ package body Sem_Ch5 is\n                Set_Ekind (Ent, E_Loop);\n \n                if Nkind (Parent (Ent)) = N_Implicit_Label_Declaration then\n-                  Set_Label_Construct (Parent (Ent), Loop_Statement);\n+                  Set_Label_Construct (Parent (Ent), N);\n                end if;\n             end if;\n          end if;\n \n       --  Case of no identifier present\n \n       else\n-         Ent :=\n-           New_Internal_Entity\n-             (E_Loop, Current_Scope, Sloc (Loop_Statement), 'L');\n-         Set_Etype (Ent,  Standard_Void_Type);\n-         Set_Parent (Ent, Loop_Statement);\n+         Ent := New_Internal_Entity (E_Loop, Current_Scope, Loc, 'L');\n+         Set_Etype  (Ent, Standard_Void_Type);\n+         Set_Parent (Ent, N);\n+      end if;\n+\n+      --  Iteration over a container in Ada 2012 involves the creation of a\n+      --  controlled iterator object. Wrap the loop in a block to ensure the\n+      --  timely finalization of the iterator and release of container locks.\n+\n+      if Ada_Version >= Ada_2012\n+        and then Is_Container_Iterator (Iter)\n+        and then not Is_Wrapped_In_Block (N)\n+      then\n+         Rewrite (N,\n+           Make_Block_Statement (Loc,\n+             Declarations               => New_List,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Relocate_Node (N)))));\n+\n+         Analyze (N);\n+         return;\n       end if;\n \n       --  Kill current values on entry to loop, since statements in the body of\n@@ -2610,7 +2632,7 @@ package body Sem_Ch5 is\n             end;\n          end if;\n \n-         Analyze_Statements (Statements (Loop_Statement));\n+         Analyze_Statements (Statements (N));\n       end if;\n \n       --  Finish up processing for the loop. We kill all current values, since\n@@ -2619,7 +2641,7 @@ package body Sem_Ch5 is\n       --  know will execute at least once, but it's not worth the trouble and\n       --  the front end is not in the business of flow tracing.\n \n-      Process_End_Label (Loop_Statement, 'e', Ent);\n+      Process_End_Label (N, 'e', Ent);\n       End_Scope;\n       Kill_Current_Values;\n \n@@ -2871,4 +2893,76 @@ package body Sem_Ch5 is\n       end if;\n    end Check_Unreachable_Code;\n \n+   -----------------------\n+   -- Pre_Analyze_Range --\n+   -----------------------\n+\n+   procedure Pre_Analyze_Range (R_Copy : Node_Id) is\n+      Save_Analysis : constant Boolean := Full_Analysis;\n+\n+   begin\n+      Full_Analysis := False;\n+      Expander_Mode_Save_And_Set (False);\n+\n+      Analyze (R_Copy);\n+\n+      if Nkind (R_Copy) in N_Subexpr\n+        and then Is_Overloaded (R_Copy)\n+      then\n+         --  Apply preference rules for range of predefined integer types, or\n+         --  diagnose true ambiguity.\n+\n+         declare\n+            I     : Interp_Index;\n+            It    : Interp;\n+            Found : Entity_Id := Empty;\n+\n+         begin\n+            Get_First_Interp (R_Copy, I, It);\n+            while Present (It.Typ) loop\n+               if Is_Discrete_Type (It.Typ) then\n+                  if No (Found) then\n+                     Found := It.Typ;\n+                  else\n+                     if Scope (Found) = Standard_Standard then\n+                        null;\n+\n+                     elsif Scope (It.Typ) = Standard_Standard then\n+                        Found := It.Typ;\n+\n+                     else\n+                        --  Both of them are user-defined\n+\n+                        Error_Msg_N\n+                          (\"ambiguous bounds in range of iteration\", R_Copy);\n+                        Error_Msg_N (\"\\possible interpretations:\", R_Copy);\n+                        Error_Msg_NE (\"\\\\} \", R_Copy, Found);\n+                        Error_Msg_NE (\"\\\\} \", R_Copy, It.Typ);\n+                        exit;\n+                     end if;\n+                  end if;\n+               end if;\n+\n+               Get_Next_Interp (I, It);\n+            end loop;\n+         end;\n+      end if;\n+\n+      --  Subtype mark in iteration scheme\n+\n+      if Is_Entity_Name (R_Copy)\n+        and then Is_Type (Entity (R_Copy))\n+      then\n+         null;\n+\n+      --  Expression in range, or Ada 2012 iterator\n+\n+      elsif Nkind (R_Copy) in N_Subexpr then\n+         Resolve (R_Copy);\n+      end if;\n+\n+      Expander_Mode_Restore;\n+      Full_Analysis := Save_Analysis;\n+   end Pre_Analyze_Range;\n+\n end Sem_Ch5;"}, {"sha": "98913dbccce8ee371c1a6714693c8f6c98802b19", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -52,6 +52,7 @@ with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch12; use Sem_Ch12;\n+with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n with Sem_Eval; use Sem_Eval;\n@@ -2848,6 +2849,13 @@ package body Sem_Ch8 is\n           (\"?redundant renaming, entity is directly visible\", Name (N));\n       end if;\n \n+      --  Implementation-defined aspect specifications can appear in a renaming\n+      --  declaration, but not language-defined ones.\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, New_S);\n+      end if;\n+\n       Ada_Version := Save_AV;\n       Ada_Version_Explicit := Save_AV_Exp;\n    end Analyze_Subprogram_Renaming;"}, {"sha": "16b8087ad663c260b301a8c0e40fbe65d1d547f0", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -911,6 +911,9 @@ package body Sem_Ch9 is\n          --  Note: originally this check was not performed here, but in that\n          --  case the check happens deep in the expander, and the message is\n          --  posted at the wrong location, and omitted in -gnatc mode.\n+         --  If the type of the entry index is a generic formal, no check\n+         --  is possible. In an instance, the check is not static and a run-\n+         --  time exception will be raised if the bounds are unreasonable.\n \n          declare\n             PEI : constant Entity_Id := RTE (RE_Protected_Entry_Index);\n@@ -921,12 +924,19 @@ package body Sem_Ch9 is\n             UBR : Node_Id;\n \n          begin\n-            if Nkind (D_Sdef) = N_Range then\n+            if Is_Generic_Type (Etype (D_Sdef))\n+              or else In_Instance\n+            then\n+               goto Skip_LB;\n+\n+            elsif Nkind (D_Sdef) = N_Range then\n                LBR := Low_Bound (D_Sdef);\n+\n             elsif Is_Entity_Name (D_Sdef)\n               and then Is_Type (Entity (D_Sdef))\n             then\n                LBR := Type_Low_Bound (Entity (D_Sdef));\n+\n             else\n                goto Skip_LB;\n             end if;\n@@ -939,12 +949,19 @@ package body Sem_Ch9 is\n             end if;\n \n             <<Skip_LB>>\n-            if Nkind (D_Sdef) = N_Range then\n+            if Is_Generic_Type (Etype (D_Sdef))\n+              or else In_Instance\n+            then\n+               goto Skip_UB;\n+\n+            elsif Nkind (D_Sdef) = N_Range then\n                UBR := High_Bound (D_Sdef);\n+\n             elsif Is_Entity_Name (D_Sdef)\n               and then Is_Type (Entity (D_Sdef))\n             then\n                UBR := Type_High_Bound (Entity (D_Sdef));\n+\n             else\n                goto Skip_UB;\n             end if;"}, {"sha": "9fc3d97d2e2fe196731c633a11eff636e8ee4fb4", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9924527b2a36fbadd27ca9f67f32368aeee6f2/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=ef9924527b2a36fbadd27ca9f67f32368aeee6f2", "patch": "@@ -6377,6 +6377,30 @@ package VMS_Data is\n    --   of the directory specified in the project file. If the subdirectory\n    --   does not exist, it is created automatically.\n \n+   S_Pretty_Types     : aliased constant S := \"/TYPE_CASING=\"              &\n+                                              \"AS_DECLARED \"               &\n+                                                 \"-ntD \"                   &\n+                                              \"LOWER_CASE \"                &\n+                                                 \"-ntL \"                   &\n+                                              \"UPPER_CASE \"                &\n+                                                 \"-ntU \"                   &\n+                                              \"MIXED_CASE \"                &\n+                                                 \"-ntM\";\n+   --        /TYPE_CASING=name-option\n+   --\n+   --   Specify the casing of type and subtype. If not specified, the\n+   --   casing of these names is defined by the NAME_CASING option.\n+   --   'name-option' may be one of:\n+   --\n+   --      AS_DECLARED       Name casing for defining occurrences are\n+   --                        as they appear in the source file.\n+   --\n+   --      LOWER_CASE        Namess are in lower case.\n+   --\n+   --      UPPER_CASE        Namess are in upper case.\n+   --\n+   --      MIXED_CASE        Namess are in mixed case.\n+\n    S_Pretty_Verbose   : aliased constant S := \"/VERBOSE \"                  &\n                                               \"-v\";\n    --        /NOVERBOSE (D)\n@@ -6440,6 +6464,7 @@ package VMS_Data is\n                         S_Pretty_Stnm_On_Nw_Line  'Access,\n                         S_Pretty_Specific         'Access,\n                         S_Pretty_Standard         'Access,\n+                        S_Pretty_Types            'Access,\n                         S_Pretty_Verbose          'Access,\n                         S_Pretty_Warnings         'Access);\n "}]}