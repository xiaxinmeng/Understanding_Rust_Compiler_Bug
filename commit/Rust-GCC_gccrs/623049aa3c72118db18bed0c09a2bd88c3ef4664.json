{"sha": "623049aa3c72118db18bed0c09a2bd88c3ef4664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzMDQ5YWEzYzcyMTE4ZGIxOGJlZDBjMDlhMmJkODhjM2VmNDY2NA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-14T02:27:18Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-14T02:27:18Z"}, "message": "re PR tree-optimization/19944 (cris-elf testsuite failures: gcc.dg/pr15784-1.c, gcc.dg/pr15784-2.c)\n\n2005-02-13  James A. Morrison  <phython@gcc.gnu.org>\n\n       PR tree-optimization/19944\n       * fold-const.c (fold): Re-add ABS_EXPR folding.\n\nFrom-SVN: r95002", "tree": {"sha": "45f0166013ff03258ca55d7560c8f120cfc3e373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45f0166013ff03258ca55d7560c8f120cfc3e373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/623049aa3c72118db18bed0c09a2bd88c3ef4664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623049aa3c72118db18bed0c09a2bd88c3ef4664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623049aa3c72118db18bed0c09a2bd88c3ef4664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623049aa3c72118db18bed0c09a2bd88c3ef4664/comments", "author": null, "committer": null, "parents": [{"sha": "d9099901ad485296a17b18d332a9393b9217842b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9099901ad485296a17b18d332a9393b9217842b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9099901ad485296a17b18d332a9393b9217842b"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "11dbcf766e7eed890a9c6b8365e9dab02e05c2d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623049aa3c72118db18bed0c09a2bd88c3ef4664/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623049aa3c72118db18bed0c09a2bd88c3ef4664/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=623049aa3c72118db18bed0c09a2bd88c3ef4664", "patch": "@@ -1,3 +1,8 @@\n+2005-02-13  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/19944\n+\t* fold-const.c (fold): Re-add ABS_EXPR folding.\n+\n 2005-02-13  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/19019"}, {"sha": "ae4b7e5396d33da465f8891bf5b4f348a96d6400", "filename": "gcc/fold-const.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623049aa3c72118db18bed0c09a2bd88c3ef4664/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623049aa3c72118db18bed0c09a2bd88c3ef4664/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=623049aa3c72118db18bed0c09a2bd88c3ef4664", "patch": "@@ -8973,6 +8973,26 @@ fold (tree expr)\n \t\t\t     build2 (LE_EXPR, type,\n \t\t\t\t     TREE_OPERAND (arg0, 0), arg1)));\n \n+      /* Convert ABS_EXPR<x> >= 0 to true.  */\n+      else if (code == GE_EXPR\n+\t       && tree_expr_nonnegative_p (arg0)\n+\t       && (integer_zerop (arg1)\n+\t\t   || (! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n+                       && real_zerop (arg1))))\n+\treturn omit_one_operand (type, integer_one_node, arg0);\n+\n+      /* Convert ABS_EXPR<x> < 0 to false.  */\n+      else if (code == LT_EXPR\n+\t       && tree_expr_nonnegative_p (arg0)\n+\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n+\treturn omit_one_operand (type, integer_zero_node, arg0);\n+\n+      /* Convert ABS_EXPR<x> == 0 or ABS_EXPR<x> != 0 to x == 0 or x != 0.  */\n+      else if ((code == EQ_EXPR || code == NE_EXPR)\n+\t       && TREE_CODE (arg0) == ABS_EXPR\n+\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n+\treturn fold (build2 (code, type, TREE_OPERAND (arg0, 0), arg1));\n+\n       /* If this is an EQ or NE comparison with zero and ARG0 is\n \t (1 << foo) & bar, convert it to (bar >> foo) & 1.  Both require\n \t two operations, but the latter can be done in one less insn"}]}