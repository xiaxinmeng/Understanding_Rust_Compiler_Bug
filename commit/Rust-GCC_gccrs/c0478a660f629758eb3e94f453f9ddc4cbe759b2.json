{"sha": "c0478a660f629758eb3e94f453f9ddc4cbe759b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0NzhhNjYwZjYyOTc1OGViM2U5NGY0NTNmOWRkYzRjYmU3NTliMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-17T16:47:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-17T16:47:45Z"}, "message": "c-tree.texi: Fix typos and follow spelling conventions.\n\n\t* doc/c-tree.texi: Fix typos and follow spelling conventions.\n\t* doc/cpp.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/gty.texi: Likewise.\n\t* doc/install.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/passes.texi: Likewise.\n\t* doc/rtl.texi: Likewise.\n\t* doc/sourcebuild.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\nFrom-SVN: r60213", "tree": {"sha": "52512245a3c6c727ac29ca32c62509431a79f201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52512245a3c6c727ac29ca32c62509431a79f201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0478a660f629758eb3e94f453f9ddc4cbe759b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0478a660f629758eb3e94f453f9ddc4cbe759b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0478a660f629758eb3e94f453f9ddc4cbe759b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0478a660f629758eb3e94f453f9ddc4cbe759b2/comments", "author": null, "committer": null, "parents": [{"sha": "3364c33bf7a20b4444090d6a14be3e921dadc220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3364c33bf7a20b4444090d6a14be3e921dadc220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3364c33bf7a20b4444090d6a14be3e921dadc220"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "acbc5d46d592cf0f3bfe877ab5cd170f05e851b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -1,3 +1,17 @@\n+2002-12-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/c-tree.texi: Fix typos and follow spelling conventions.\n+\t* doc/cpp.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/gty.texi: Likewise.\n+\t* doc/install.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/passes.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\t* doc/sourcebuild.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\n 2002-12-17  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* doc/invoke.texi: Minor spelling and grammar fixes."}, {"sha": "69e529a6c6cd49519e80886fb5627bd75893c6f8", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -64,7 +64,7 @@ should submit your patches for inclusion in GCC@.\n @node Deficiencies\n @section Deficiencies\n \n-There are many places in which this document is incomplet and incorrekt.\n+There are many places in which this document is incomplete and incorrect.\n It is, as of yet, only @emph{preliminary} documentation.\n \n @c ---------------------------------------------------------------------"}, {"sha": "a0366e9576c04fc3b445ce2025ec480fa9f48b3a", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -3779,7 +3779,7 @@ The standard requires at least 15 levels.\n The C standard mandates this be at least 63.  CPP is limited only by\n available memory.\n \n-@item Levels of parenthesised expressions within a full expression.\n+@item Levels of parenthesized expressions within a full expression.\n \n The C standard requires this to be at least 63.  In preprocessor\n conditional expressions, it is limited only by available memory.\n@@ -3892,9 +3892,9 @@ answers.  Subsequent assertions do not override previous ones for the\n same predicate.  All the answers for any given predicate are\n simultaneously true.\n \n-@cindex assertions, cancelling\n+@cindex assertions, canceling\n @findex #unassert\n-Assertions can be cancelled with the @samp{#unassert} directive.  It\n+Assertions can be canceled with the @samp{#unassert} directive.  It\n has the same syntax as @samp{#assert}.  In that form it cancels only the\n answer which was specified on the @samp{#unassert} line; other answers\n for that predicate remain true.  You can cancel an entire predicate by"}, {"sha": "b904c7eb1a10ec0771558559e0c4bf2362fdcc58", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -4904,7 +4904,7 @@ type is @code{long double}.\n This is an implementation of the ISO C99 function @code{nan}.\n \n Since ISO C99 defines this function in terms of @code{strtod}, which we\n-do not implement, a desription of the parsing is in order.  The string\n+do not implement, a description of the parsing is in order.  The string\n is parsed as by @code{strtol}; that is, the base is recognized by\n leading @samp{0} or @samp{0x} prefixes.  The number parsed is placed\n in the significand such that the least significant bit of the number\n@@ -6698,7 +6698,7 @@ Add after paragraph 4\n \n @quotation\n The storage for an object of thread storage duration shall be\n-staticly initialized before the first statement of the thread startup\n+statically initialized before the first statement of the thread startup\n function.  An object of thread storage duration shall not require\n dynamic initialization.\n @end quotation"}, {"sha": "55deef24f69b844ad845a322e7d26b05eee8fcec", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -184,10 +184,10 @@ specify the real type of a field identified by @code{use_param1} through\n @findex use_params\n @item use_params\n \n-When a structure contains another structure that is parameterised,\n+When a structure contains another structure that is parameterized,\n there's no need to do anything special, the inner stucture inherits the\n parameters of the outer one.  When a structure contains a pointer to a\n-parameterised structure, the type machinery won't automatically detect\n+parameterized structure, the type machinery won't automatically detect\n this (it could, it just doesn't yet), so it's necessary to tell it that\n the pointed-to structure should use the same parameters as the outer\n structure.  This is done by marking the pointer with the"}, {"sha": "c395838214491d89c4f35776405fe9861262b2ce", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -2063,7 +2063,7 @@ and tested on @samp{i386-*-freebsd4.5} and @samp{alpha-*-freebsd5.0}.\n The static\n library may be incorrectly built (symbols are missing at link time).\n There is a rare timing-based startup hang (probably involves an\n-assupmtion about the thread library).  Multi-threaded boehm-gc (required for\n+assumption about the thread library).  Multi-threaded boehm-gc (required for\n libjava) exposes severe threaded signal-handling bugs on FreeBSD before\n 4.5-RELEASE.  The alpha port may not fully bootstrap without some manual\n intervention: @command{gcjh} will crash with a floating-point exception while"}, {"sha": "baab4a9febab6620d57f85c6c948252f2034ade9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -1608,7 +1608,7 @@ struct C : public B, public A @{@};\n @end smallexample\n \n @noindent\n-G++ will place the @code{A} base class of @code{C} at a non-zero offset;\n+G++ will place the @code{A} base class of @code{C} at a nonzero offset;\n it should be placed at offset zero.  G++ mistakenly believes that the\n @code{A} data member of @code{B} is already at offset zero.\n \n@@ -2518,7 +2518,7 @@ Warn if floating point values are used in equality comparisons.\n The idea behind this is that sometimes it is convenient (for the\n programmer) to consider floating-point values as approximations to\n infinitely precise real numbers.  If you are doing this, then you need\n-to compute (by analysing the code, or in some other way) the maximum or\n+to compute (by analyzing the code, or in some other way) the maximum or\n likely maximum error that the computation introduces, and allow for it\n when performing comparisons (and when producing output, but that's a\n different problem).  In particular, instead of testing for equality, you\n@@ -3150,7 +3150,7 @@ Dump after local register allocation, to @file{@var{file}.23.lreg}.\n Dump after loop optimization, to @file{@var{file}.12.loop}.\n @item M\n @opindex dM\n-Dump after performing the machine dependent reorganisation pass, to\n+Dump after performing the machine dependent reorganization pass, to\n @file{@var{file}.33.mach}.\n @item n\n @opindex dn"}, {"sha": "34a38e6e6a7a0bbae12215e1d72c64db51ed8b15", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -898,7 +898,7 @@ digit is used together with letters within the same alternative, the\n digit should come last.\n \n This number is allowed to be more than a single digit.  If multiple\n-digits are encountered consecutavely, they are interpreted as a single\n+digits are encountered consecutively, they are interpreted as a single\n decimal integer.  There is scant chance for ambiguity, since to-date\n it has never been desirable that @samp{10} be interpreted as matching\n either operand 1 @emph{or} operand 0.  Should this be desired, one\n@@ -965,7 +965,7 @@ The machine description macro @code{REG_CLASS_FROM_LETTER} has first\n cut at the otherwise unused letters.  If it evaluates to @code{NO_REGS},\n then @code{EXTRA_CONSTRAINT} is evaluated.\n \n-A typical use for @code{EXTRA_CONSTRANT} would be to distinguish certain\n+A typical use for @code{EXTRA_CONSTRAINT} would be to distinguish certain\n types of memory references that affect other insn operands.\n @end ifset\n @end table\n@@ -1609,7 +1609,7 @@ Second floating point register\n @samp{c} register\n \n @item C\n-Specifies constant that can be easilly constructed in SSE register without\n+Specifies constant that can be easily constructed in SSE register without\n loading it from memory.\n \n @item d\n@@ -5413,7 +5413,7 @@ The first one is a data dependence delay determining @dfn{instruction\n latency time}.  The instruction execution is not started until all\n source data have been evaluated by prior instructions (there are more\n complex cases when the instruction execution starts even when the data\n-are not availaible but will be ready in given time after the\n+are not available but will be ready in given time after the\n instruction execution start).  Taking the data dependence delays into\n account is simple.  The data dependence (true, output, and\n anti-dependence) delay between two instructions is given by a"}, {"sha": "51d3722dc15f01b553b83586ef818b0002897936", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -289,7 +289,7 @@ SSA Conditional Constant Propagation.  Turned on by the @option{-fssa-ccp}\n SSA Aggressive Dead Code Elimination.  Turned on by the @option{-fssa-dce}\n option.  This pass performs conditional constant propagation to simplify\n instructions including conditional branches.  This pass is more aggressive\n-than the constant propgation done by the CSE and GCSE pases, but operates\n+than the constant propagation done by the CSE and GCSE pases, but operates\n in linear time.\n \n @opindex dW"}, {"sha": "7b4ad23cada019310144b14a28f6c31fd3404344", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -2841,7 +2841,7 @@ labels: @code{LABEL_NORMAL}, @code{LABEL_STATIC_ENTRY},\n that do not have type @code{LABEL_NORMAL} are @dfn{alternate entry\n points} to the current function.  These may be static (visible only in\n the containing translation unit), global (exposed to all translation\n-units), or weak (global, but can be overriden by another symbol with the\n+units), or weak (global, but can be overridden by another symbol with the\n same name).\n \n Much of the compiler treats all four kinds of label identically.  Some"}, {"sha": "f10a800862bc901006f268cc37b6889ef58993e0", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -867,7 +867,7 @@ the compiler with optimization.\n FIXME: describe this.\n \n @item gcc.c-torture\n-This contains particlar code fragments which have historically broken easily.\n+This contains particular code fragments which have historically broken easily.\n These tests are run with multiple optimization options, so tests for features\n which only break at some optimization levels belong here.  This also contains\n tests to check that certain optimizations occur.  It might be worthwhile to "}, {"sha": "496a4a298ddffc246c11ff8efb56251c6f7a830f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0478a660f629758eb3e94f453f9ddc4cbe759b2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c0478a660f629758eb3e94f453f9ddc4cbe759b2", "patch": "@@ -2317,7 +2317,7 @@ which is the register value plus a displacement.\n @findex MODE_BASE_REG_CLASS\n @item MODE_BASE_REG_CLASS (@var{mode})\n This is a variation of the @code{BASE_REG_CLASS} macro which allows\n-the selection of a base register in a mode depenedent manner.  If\n+the selection of a base register in a mode dependent manner.  If\n @var{mode} is VOIDmode then it should return the same value as\n @code{BASE_REG_CLASS}.\n \n@@ -4192,7 +4192,7 @@ not support varargs.\n @findex TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_VCALL_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, int @var{vcall_offset}, tree @var{function})\n A function like @code{TARGET_ASM_OUTPUT_MI_THUNK}, except that if\n-@var{vcall_offset} is non-zero, an additional adjustment should be made\n+@var{vcall_offset} is nonzero, an additional adjustment should be made\n after adding @code{delta}.  In particular, if @var{p} is the\n adjusted pointer, the following adjustment should be made:\n \n@@ -9068,7 +9068,7 @@ structure, which are defined by the @code{IFCVT_EXTRA_FIELDS} macro.\n @findex IFCVT_EXTRA_FIELDS\n @item IFCVT_EXTRA_FIELDS\n If defined, it should expand to a set of field declarations that will be\n-added to the @code{struct ce_if_block} structure.  These should be intialized\n+added to the @code{struct ce_if_block} structure.  These should be initialized\n by the @code{IFCVT_INIT_EXTRA_FIELDS} macro.\n \n @end table"}]}