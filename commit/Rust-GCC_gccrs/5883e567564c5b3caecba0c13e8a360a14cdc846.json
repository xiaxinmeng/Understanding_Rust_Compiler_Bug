{"sha": "5883e567564c5b3caecba0c13e8a360a14cdc846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4M2U1Njc1NjRjNWIzY2FlY2JhMGMxM2U4YTM2MGExNGNkYzg0Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-03T18:05:31Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-03T18:06:11Z"}, "message": "i386: Add insert and extract patterns for 4-byte vectors [PR100637]\n\nThe patch introduces insert and extract patterns for 4-byte vectors.\nIt effectively only emits PINSR and PEXTR instructions when available,\notherwise falls back to generic code that emulates these instructions\nvia inserts, extracts, logic operations and shifts in integer registers.\n\nPlease note that generic fallback produces better code than the current\napproach of constructing new vector in memory (due to store forwarding stall)\nso also enable QImode 8-byte vector inserts only with TARGET_SSE4_1.\n\n2021-06-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386-expand.c (ix86_expand_vector_set):\n\tHandle V2HI and V4QI modes.\n\t(ix86_expand_vector_extract): Ditto.\n\t* config/i386/mmx.md (*pinsrw): New insn pattern.\n\t(*pinsrb): Ditto.\n\t(*pextrw): Ditto.\n\t(*pextrw_zext): Ditto.\n\t(*pextrb): Ditto.\n\t(*pextrb_zext): Ditto.\n\t(vec_setv2hi): New expander.\n\t(vec_extractv2hihi): Ditto.\n\t(vec_setv4qi): Ditto.\n\t(vec_extractv4qiqi): Ditto.\n\n\t(vec_setv8qi): Enable only for TARGET_SSE4_1.\n\t(vec_extractv8qiqi): Ditto.\n\ngcc/testsuite/\n\n\tPR target/100637\n\t* gcc.target/i386/vperm-v2hi.c: New test.\n\t* gcc.target/i386/vperm-v4qi.c: Ditto.", "tree": {"sha": "c2d7ab68442d5fbfd3fda078572071bc6f3b7653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d7ab68442d5fbfd3fda078572071bc6f3b7653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5883e567564c5b3caecba0c13e8a360a14cdc846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5883e567564c5b3caecba0c13e8a360a14cdc846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5883e567564c5b3caecba0c13e8a360a14cdc846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5883e567564c5b3caecba0c13e8a360a14cdc846/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e130652a76ff3d14c0f572fcd79fa53637ce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e130652a76ff3d14c0f572fcd79fa53637ce2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e130652a76ff3d14c0f572fcd79fa53637ce2c"}], "stats": {"total": 270, "additions": 268, "deletions": 2}, "files": [{"sha": "eb7cdb0c14f192dc0f61d0097d1ecde114f9d062", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=5883e567564c5b3caecba0c13e8a360a14cdc846", "patch": "@@ -14968,13 +14968,15 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       return;\n \n     case E_V8HImode:\n+    case E_V2HImode:\n       use_vec_merge = TARGET_SSE2;\n       break;\n     case E_V4HImode:\n       use_vec_merge = mmx_ok && (TARGET_SSE || TARGET_3DNOW_A);\n       break;\n \n     case E_V16QImode:\n+    case E_V4QImode:\n       use_vec_merge = TARGET_SSE4_1;\n       break;\n \n@@ -15274,6 +15276,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n       break;\n \n     case E_V8HImode:\n+    case E_V2HImode:\n       use_vec_extr = TARGET_SSE2;\n       break;\n     case E_V4HImode:\n@@ -15294,6 +15297,9 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \t  return;\n \t}\n       break;\n+    case E_V4QImode:\n+      use_vec_extr = TARGET_SSE4_1;\n+      break;\n \n     case E_V8SFmode:\n       if (TARGET_AVX)"}, {"sha": "914e5e91e90e5788fbbac64a783a487c3bb46b79", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 174, "deletions": 2, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=5883e567564c5b3caecba0c13e8a360a14cdc846", "patch": "@@ -3092,7 +3092,7 @@\n   [(match_operand:V8QI 0 \"register_operand\")\n    (match_operand:QI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n {\n   ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n \t\t\t  INTVAL (operands[2]));\n@@ -3103,7 +3103,7 @@\n   [(match_operand:QI 0 \"register_operand\")\n    (match_operand:V8QI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n {\n   ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],\n \t\t\t      operands[1], INTVAL (operands[2]));\n@@ -3120,6 +3120,178 @@\n   DONE;\n })\n \n+(define_insn \"*pinsrw\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,YW\")\n+        (vec_merge:V2HI\n+          (vec_duplicate:V2HI\n+            (match_operand:HI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V2HI 1 \"register_operand\" \"0,YW\")\n+          (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_SSE2\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V2HImode))\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  switch (which_alternative)\n+    {\n+    case 1:\n+      if (MEM_P (operands[2]))\n+\treturn \"vpinsrw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      else\n+\treturn \"vpinsrw\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+    case 0:\n+      if (MEM_P (operands[2]))\n+\treturn \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\";\n+      else\n+\treturn \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*pinsrb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=x,YW\")\n+        (vec_merge:V4QI\n+          (vec_duplicate:V4QI\n+            (match_operand:QI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V4QI 1 \"register_operand\" \"0,YW\")\n+          (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_SSE4_1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V4QImode))\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  switch (which_alternative)\n+    {\n+    case 1:\n+      if (MEM_P (operands[2]))\n+\treturn \"vpinsrb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      else\n+\treturn \"vpinsrb\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+    case 0:\n+      if (MEM_P (operands[2]))\n+\treturn \"pinsrb\\t{%3, %2, %0|%0, %2, %3}\";\n+      else\n+\treturn \"pinsrb\\t{%3, %k2, %0|%0, %k2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*pextrw\"\n+  [(set (match_operand:HI 0 \"register_sse4nonimm_operand\" \"=r,m\")\n+\t(vec_select:HI\n+\t  (match_operand:V2HI 1 \"register_operand\" \"YW,YW\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_1_operand\" \"n,n\")])))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   %vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse4\")\n+   (set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*pextrw_zext\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SWI48\n+\t  (vec_select:HI\n+\t    (match_operand:V2HI 1 \"register_operand\" \"YW\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\" \"n\")]))))]\n+  \"TARGET_SSE2\"\n+  \"%vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*pextrb\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(vec_select:QI\n+\t  (match_operand:V4QI 1 \"register_operand\" \"YW,YW\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   %vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrb\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*pextrb_zext\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SWI248\n+\t  (vec_select:QI\n+\t    (match_operand:V4QI 1 \"register_operand\" \"YW\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")]))))]\n+  \"TARGET_SSE4_1\"\n+  \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"vec_setv2hi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand:HI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t  INTVAL (operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extractv2hihi\"\n+  [(match_operand:HI 0 \"register_operand\")\n+   (match_operand:V2HI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_extract (false, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_setv4qi\"\n+  [(match_operand:V4QI 0 \"register_operand\")\n+   (match_operand:QI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n+  \"TARGET_SSE4_1\"\n+{\n+  ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t  INTVAL (operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extractv4qiqi\"\n+  [(match_operand:QI 0 \"register_operand\")\n+   (match_operand:V4QI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n+  \"TARGET_SSE4_1\"\n+{\n+  ix86_expand_vector_extract (false, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Miscellaneous"}, {"sha": "0af94f2c6b1716595abaef527a87e589d408ecad", "filename": "gcc/testsuite/gcc.target/i386/vperm-v2hi.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2hi.c?ref=5883e567564c5b3caecba0c13e8a360a14cdc846", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"isa-check.h\"\n+#include \"sse-os-support.h\"\n+\n+typedef short S;\n+typedef short V __attribute__((vector_size(4)));\n+typedef short IV __attribute__((vector_size(4)));\n+typedef union { S s[2]; V v; } U;\n+\n+static U i[2], b, c;\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+#define assert(T) ((T) || (__builtin_trap (), 0))\n+\n+#define TEST(E0, E1) \\\n+  b.v = __builtin_shuffle (i[0].v, i[1].v, (IV){E0, E1}); \\\n+  c.s[0] = i[0].s[E0]; \\\n+  c.s[1] = i[0].s[E1]; \\\n+  __asm__(\"\" : : : \"memory\"); \\\n+  assert (memcmp (&b, &c, sizeof(c)) == 0);\n+\n+#include \"vperm-2-2.inc\"\n+\n+int main()\n+{\n+  check_isa ();\n+\n+  if (!sse_os_support ())\n+    exit (0);\n+\n+  i[0].s[0] = 0;\n+  i[0].s[1] = 1;\n+  i[0].s[2] = 2;\n+  i[0].s[3] = 3;\n+\n+  check();\n+  return 0;\n+}"}, {"sha": "57fa547b9d567158ba43d197c6c2783f761353b3", "filename": "gcc/testsuite/gcc.target/i386/vperm-v4qi.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5883e567564c5b3caecba0c13e8a360a14cdc846/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4qi.c?ref=5883e567564c5b3caecba0c13e8a360a14cdc846", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"isa-check.h\"\n+#include \"sse-os-support.h\"\n+\n+typedef char S;\n+typedef char V __attribute__((vector_size(4)));\n+typedef char IV __attribute__((vector_size(4)));\n+typedef union { S s[4]; V v; } U;\n+\n+static U i[2], b, c;\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+#define assert(T) ((T) || (__builtin_trap (), 0))\n+\n+#define TEST(E0, E1, E2, E3) \\\n+  b.v = __builtin_shuffle (i[0].v, i[1].v, (IV){E0, E1, E2, E3}); \\\n+  c.s[0] = i[0].s[E0]; \\\n+  c.s[1] = i[0].s[E1]; \\\n+  c.s[2] = i[0].s[E2]; \\\n+  c.s[3] = i[0].s[E3]; \\\n+  __asm__(\"\" : : : \"memory\"); \\\n+  assert (memcmp (&b, &c, sizeof(c)) == 0);\n+\n+#include \"vperm-4-2.inc\"\n+\n+int main()\n+{\n+  check_isa ();\n+\n+  if (!sse_os_support ())\n+    exit (0);\n+\n+  i[0].s[0] = 0;\n+  i[0].s[1] = 1;\n+  i[0].s[2] = 2;\n+  i[0].s[3] = 3;\n+  i[0].s[4] = 4;\n+  i[0].s[5] = 5;\n+  i[0].s[6] = 6;\n+  i[0].s[7] = 7;\n+\n+  check();\n+  return 0;\n+}"}]}