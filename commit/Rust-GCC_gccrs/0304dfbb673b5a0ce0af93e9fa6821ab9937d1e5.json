{"sha": "0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMwNGRmYmI2NzNiNWEwY2UwYWY5M2U5ZmE2ODIxYWI5OTM3ZDFlNQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-05-27T23:27:50Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-05-27T23:27:50Z"}, "message": "expr.c (use_reg): Fix recording of USE information.\n\n\t* expr.c (use_reg): Fix recording of USE information.\n\t(use_regs): Likewise.\n\tDelete argument `reg'.  All callers changed.\n\t* expr.h (use_regs): Update prototype.\n\t* calls.c (expand_call): Update call to use_regs.  Call use_reg\n\tif parm is wholly in registers.\n\nFrom-SVN: r7378", "tree": {"sha": "82d89828e664516015a582e84da5cb3a9dc59ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d89828e664516015a582e84da5cb3a9dc59ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/comments", "author": null, "committer": null, "parents": [{"sha": "869c489d35a294989b952baa3e5aa28fd7deb96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869c489d35a294989b952baa3e5aa28fd7deb96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869c489d35a294989b952baa3e5aa28fd7deb96d"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "444d00c13cffa18f637c60ae4cedc095427a79a2", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "patch": "@@ -1844,8 +1844,11 @@ expand_call (exp, target, ignore)\n \t    move_block_to_reg (REGNO (reg),\n \t\t\t       validize_mem (args[i].value), nregs,\n \t\t\t       args[i].mode);\n-\t\n-\t  use_regs (&call_fusage, reg, REGNO (reg), nregs);\n+\n+\t  if (nregs == -1)\n+\t    use_reg (&call_fusage, reg);\n+\t  else\n+\t    use_regs (&call_fusage, REGNO (reg), nregs == 0 ? 1 : nregs);\n \n \t  /* PARTIAL referred only to the first register, so clear it for the\n \t     next time.  */"}, {"sha": "6ca30573d7264a1988b338350709764abfdb9864", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "patch": "@@ -1671,34 +1671,31 @@ void\n use_reg (call_fusage, reg)\n      rtx *call_fusage, reg;\n {\n-  if (GET_CODE (reg) == REG\n-      && REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n+  if (GET_CODE (reg) != REG\n+      || REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n     abort();\n \n   *call_fusage\n     = gen_rtx (EXPR_LIST, VOIDmode,\n-               gen_rtx (USE, reg_raw_mode[REGNO (reg)], reg), *call_fusage);\n-\n+\t       gen_rtx (USE, VOIDmode, reg), *call_fusage);\n }\n \n /* Mark NREGS consecutive regs, starting at REGNO, as holding parameters\n    for the CALL_INSN.  */\n \n void\n-use_regs (call_fusage, reg, regno, nregs)\n-     rtx *call_fusage, reg;\n+use_regs (call_fusage, regno, nregs)\n+     rtx *call_fusage;\n      int regno;\n      int nregs;\n {\n-  if (nregs <= 1 && reg)\n-    use_reg (call_fusage, reg);\n-  else\n-   {\n-     int i;\n+  int i;\n \n-     for (i = 0; i < nregs; i++)\n-        use_reg (call_fusage, gen_rtx (REG, word_mode, regno + i));\n-   }\n+  if (regno + nregs > FIRST_PSEUDO_REGISTER)\n+    abort ();\n+\n+  for (i = 0; i < nregs; i++)\n+    use_reg (call_fusage, gen_rtx (REG, reg_raw_mode[regno + i], regno + i));\n }\n \f\n /* Write zeros through the storage of OBJECT."}, {"sha": "7abeb73c7520ef4a643d280eb0fb3735e387ee8b", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=0304dfbb673b5a0ce0af93e9fa6821ab9937d1e5", "patch": "@@ -600,7 +600,7 @@ extern void move_block_from_reg PROTO((int, rtx, int, int));\n extern void use_reg PROTO((rtx*, rtx));\n /* Mark NREGS consecutive regs, starting at REGNO, as holding parameters\n    for the next CALL_INSN.  */\n-extern void use_regs PROTO((rtx*, rtx, int, int));\n+extern void use_regs PROTO((rtx*, int, int));\n \n /* Write zeros through the storage of OBJECT.\n    If OBJECT has BLKmode, SIZE is its length in bytes.  */"}]}