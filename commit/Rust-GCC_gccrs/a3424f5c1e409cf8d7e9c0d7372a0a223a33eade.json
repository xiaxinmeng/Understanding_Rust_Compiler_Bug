{"sha": "a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0MjRmNWMxZTQwOWNmOGQ3ZTljMGQ3MzcyYTBhMjIzYTMzZWFkZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-06-20T17:30:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-06-20T17:30:05Z"}, "message": "hooks.c (hook_int_void_no_regs): Rename from hook_reg_class_void_no_regs; change return type.\n\n        * hooks.c (hook_int_void_no_regs): Rename from\n        hook_reg_class_void_no_regs; change return type.\n        * hooks.h: Update.\n        * target-def.h (TARGET_BRANCH_TARGET_REGISTER_CLASS): Update.\n        * target.h (branch_target_register_class): Change return type to int.\n        Add documentation.\n        * config/sh/sh.c (sh_target_reg_class): Change return type.\n        * doc/tm.texi (TARGET_BRANCH_TARGET_REGISTER_CLASS): Likewise.\n\nFrom-SVN: r68275", "tree": {"sha": "73514e4f64d84936d90b75c8a73e6fd5958b4ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73514e4f64d84936d90b75c8a73e6fd5958b4ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/comments", "author": null, "committer": null, "parents": [{"sha": "3a9476696caa7ef0cea761530df25647b8dbbe0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a9476696caa7ef0cea761530df25647b8dbbe0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a9476696caa7ef0cea761530df25647b8dbbe0b"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "99b1289d4f903c0c423f86212825425016724fe4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -1,3 +1,14 @@\n+2003-06-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* hooks.c (hook_int_void_no_regs): Rename from\n+\thook_reg_class_void_no_regs; change return type.\n+\t* hooks.h: Update.\n+\t* target-def.h (TARGET_BRANCH_TARGET_REGISTER_CLASS): Update.\n+\t* target.h (branch_target_register_class): Change return type to int.\n+\tAdd documentation.\n+\t* config/sh/sh.c (sh_target_reg_class): Change return type.\n+\t* doc/tm.texi (TARGET_BRANCH_TARGET_REGISTER_CLASS): Likewise.\n+\n 2003-06-20  Andreas Tobler <toa@pop.agri.ch>\n \n \t* c-format.c: Change _Bool to bool reverting part of the last"}, {"sha": "070e4093e205fec222916681a2582ee90883c544", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -211,7 +211,7 @@ static int sh_issue_rate PARAMS ((void));\n static bool sh_function_ok_for_sibcall PARAMS ((tree, tree));\n \n static bool sh_cannot_modify_jumps_p PARAMS ((void));\n-static enum reg_class sh_target_reg_class (void);\n+static int sh_target_reg_class (void);\n static bool sh_optimize_target_register_callee_saved (bool);\n static bool sh_ms_bitfield_layout_p PARAMS ((tree));\n \n@@ -7804,7 +7804,7 @@ sh_cannot_modify_jumps_p ()\n   return (TARGET_SHMEDIA && (reload_in_progress || reload_completed));\n }\n \n-static enum reg_class\n+static int\n sh_target_reg_class (void)\n {\n   return TARGET_SHMEDIA ? TARGET_REGS : NO_REGS;"}, {"sha": "355ea4bb32638531450edfd613110eed4afd337a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -9134,7 +9134,7 @@ cannot_modify_jumps_past_reload_p ()\n @end smallexample\n @end deftypefn\n \n-@deftypefn {Target Hook} enum reg_class TARGET_BRANCH_TARGET_REGISTER_CLASS (void)\n+@deftypefn {Target Hook} int TARGET_BRANCH_TARGET_REGISTER_CLASS (void)\n This target hook returns a register class for which branch target register\n optimizations should be applied.  All registers in this class should be\n usable interchangably.  After reload, registers in this class will be"}, {"sha": "e183a11766ee870ce78d1e944b764e5312fe588d", "filename": "gcc/hooks.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -41,9 +41,9 @@ hook_bool_void_false ()\n   return false;\n }\n \n-/* The same, but formally returning an enum reg_class.  */\n-enum reg_class\n-hook_reg_class_void_no_regs (void)\n+/* The same, but formally returning NO_REGS.  */\n+int\n+hook_int_void_no_regs (void)\n {\n   return NO_REGS;\n }"}, {"sha": "044654acb38d88ed97cd9124d02a096e4ad34aed", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -23,15 +23,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define GCC_HOOKS_H\n \n bool hook_bool_void_false PARAMS ((void));\n-\n-/* Check if tm.h has been included, since ISO C does not allow forward\n-   definitions for enums, and making hooks.h dependent on tm.h would create\n-   unnecessary dependencies where no hook declaration involving\n-   enum_reg_class is needed.  */\n-#ifdef REG_CLASS_CONTENTS\n-enum reg_class hook_reg_class_void_no_regs (void);\n-#endif\n-\n bool hook_bool_bool_false (bool);\n bool hook_bool_tree_false PARAMS ((tree));\n bool hook_bool_tree_hwi_hwi_tree_false\n@@ -51,6 +42,7 @@ int hook_int_tree_tree_1 PARAMS ((tree, tree));\n int hook_int_rtx_0 PARAMS ((rtx));\n int hook_int_void_0 (void);\n int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n+int hook_int_void_no_regs (void);\n \n bool default_can_output_mi_thunk_no_vcall\n   PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));"}, {"sha": "31970222cf1f967fca878c68e9661a5b05947d90", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -282,7 +282,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n-#define TARGET_BRANCH_TARGET_REGISTER_CLASS hook_reg_class_void_no_regs\n+#define TARGET_BRANCH_TARGET_REGISTER_CLASS hook_int_void_no_regs\n #define TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED hook_bool_bool_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n #define TARGET_CANNOT_COPY_INSN_P NULL"}, {"sha": "f693868eb5794f28368e57164d2ca83e5e551828", "filename": "gcc/target.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3424f5c1e409cf8d7e9c0d7372a0a223a33eade/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=a3424f5c1e409cf8d7e9c0d7372a0a223a33eade", "patch": "@@ -296,8 +296,15 @@ struct gcc_target\n      not, at the current point in the compilation.  */\n   bool (* cannot_modify_jumps_p) PARAMS ((void));\n \n-  enum reg_class (* branch_target_register_class) PARAMS ((void));\n-  bool (* branch_target_register_callee_saved) PARAMS ((bool));\n+  /* Return a register class for which branch target register\n+     optimizations should be applied.  */\n+  int (* branch_target_register_class) PARAMS ((void));\n+\n+  /* Return true if branch target register optimizations should include\n+     callee-saved registers that are not already live during the current\n+     function.  AFTER_PE_GEN is true if prologues and epilogues have\n+     already been generated.  */\n+  bool (* branch_target_register_callee_saved) PARAMS ((bool after_pe_gen));\n \n   /* True if the constant X cannot be placed in the constant pool.  */\n   bool (* cannot_force_const_mem) PARAMS ((rtx));"}]}