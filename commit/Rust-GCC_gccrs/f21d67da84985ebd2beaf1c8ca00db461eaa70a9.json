{"sha": "f21d67da84985ebd2beaf1c8ca00db461eaa70a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxZDY3ZGE4NDk4NWViZDJiZWFmMWM4Y2EwMGRiNDYxZWFhNzBhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-14T22:15:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-14T22:15:08Z"}, "message": "(PREFERRED_RELOAD_CLASS): Avoid f regs for HI and QI if poss.\n\nFrom-SVN: r1205", "tree": {"sha": "edfe56d4691927310937f8f5dc5eb387251dcd33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edfe56d4691927310937f8f5dc5eb387251dcd33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21d67da84985ebd2beaf1c8ca00db461eaa70a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21d67da84985ebd2beaf1c8ca00db461eaa70a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21d67da84985ebd2beaf1c8ca00db461eaa70a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21d67da84985ebd2beaf1c8ca00db461eaa70a9/comments", "author": null, "committer": null, "parents": [{"sha": "96b5daff8d4667cf475ac0d749da20524a93a275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b5daff8d4667cf475ac0d749da20524a93a275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b5daff8d4667cf475ac0d749da20524a93a275"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "3ebcf70a6f92525ed1ff0ed934d5c1373bfddaf1", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21d67da84985ebd2beaf1c8ca00db461eaa70a9/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21d67da84985ebd2beaf1c8ca00db461eaa70a9/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=f21d67da84985ebd2beaf1c8ca00db461eaa70a9", "patch": "@@ -350,10 +350,16 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    integer register to an FP register.  If we are trying to put a \n    non-zero floating-point constant into some register, use an integer\n    register if the constant is SFmode and GENERAL_REGS is one of our options.\n-   Otherwise, put the constant into memory.  */\n+   Otherwise, put the constant into memory.\n+\n+   When reloading something smaller than a word, use a general reg\n+   rather than an FP reg.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n   ((CLASS) == ALL_REGS && GET_CODE (X) == CONST_INT ? GENERAL_REGS\t\\\n+   : ((GET_MODE (X) == HImode || GET_MODE (X) == QImode)\t\t\\\n+      && (CLASS) == ALL_REGS)\t\t\t\t\t\t\\\n+   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n    : (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n       && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\t\\\n       && ! CONST_DOUBLE_OK_FOR_LETTER_P (X, 'G'))\t\t\t\\"}]}