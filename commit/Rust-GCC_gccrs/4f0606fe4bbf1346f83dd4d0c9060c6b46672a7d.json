{"sha": "4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwNjA2ZmU0YmJmMTM0NmY4M2RkNGQwYzkwNjBjNmI0NjY3MmE3ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-30T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-30T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "467d88884131daeed858269e1a756d1e79063fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467d88884131daeed858269e1a756d1e79063fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/comments", "author": null, "committer": null, "parents": [{"sha": "ffe6b4101501b5ada6f09a1fdf3822a23b68b5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe6b4101501b5ada6f09a1fdf3822a23b68b5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe6b4101501b5ada6f09a1fdf3822a23b68b5aa"}], "stats": {"total": 649, "additions": 648, "deletions": 1}, "files": [{"sha": "3291758820d03e496141d41b944cdbcad247fd73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,174 @@\n+2020-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (compute_avail): Free operands consistently.\n+\t* tree-vect-loop.c (vectorizable_phi): Make sure all operand\n+\tdefs vectors are released.\n+\n+2020-10-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* vec.h (vec<T, va_heap, vl_ptr>::copy): Pass mem stat info.\n+\n+2020-10-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* wide-int.h (trailing_wide_ints <N>): Turn len to array of structures\n+\tso it does not imply typeless storage.\n+\t(trailing_wide_ints <N>::operator): update\n+\t(trailing_wide_ints <N>::operator []): Update.\n+\n+2020-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stdbool.h [__STDC_VERSION__ > 201710L] (true, false):\n+\tDefine with type _Bool.\n+\n+2020-10-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97505\n+\t* vr-values.c (vr_values::extract_range_basic): Enable\n+\ttrap again for everything except UBSAN builtins.\n+\n+2020-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_transform_slp_perm_load): Take an\n+\toptional extra parameter.\n+\t* tree-vect-slp.c (vect_transform_slp_perm_load): Calculate\n+\tthe number of loads as well as the number of permutes, taking\n+\tthe counting loop from...\n+\t* tree-vect-stmts.c (vect_model_load_cost): ...here.  Use the\n+\tvalue computed by vect_transform_slp_perm_load for ncopies.\n+\n+2020-10-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/97508\n+\t* langhooks.c (lhd_begin_section): Call get_section with\n+\tnot_existing = true.\n+\t* output.h (get_section): Add new argument.\n+\t* varasm.c (get_section): Fail when NOT_EXISTING is true\n+\tand a section already exists.\n+\t* ipa-cp.c (ipcp_write_summary): Remove.\n+\t(ipcp_read_summary): Likewise.\n+\t* ipa-fnsummary.c (ipa_fn_summary_read): Always read jump\n+\tfunctions summary.\n+\t(ipa_fn_summary_write): Always stream it.\n+\n+2020-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Pass\n+\tSLP_TREE_VECTYPE to record_stmt_cost.\n+\n+2020-10-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* optc-gen.awk: Check that params start with -param=.\n+\t* params.opt: Fix ipa-jump-function-lookups.\n+\n+2020-10-29  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-ssa-math-opts.c (sincos_stats): Add conv_removed.\n+\t(execute_cse_conv_1): New.\n+\t(execute_cse_sincos_1): Call it.  Fix return within\n+\tFOR_EACH_IMM_USE_STMT.\n+\t(pass_cse_sincos::execute): Report conv_inserted.\n+\n+2020-10-29  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\t    Hongyu Wang  <hongyu.wang@intel.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect KL, AESKLE and WIDEKL features.\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_KL_SET): New.\n+\t(OPTION_MASK_ISA_WIDEKL_SET): Likewise.\n+\t(OPTION_MASK_ISA_KL_UNSET): Likewise.\n+\t(OPTION_MASK_ISA_WIDEKL_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_AVX2_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_AVX_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE4_2_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE4_1_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE4_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSSE3_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE3_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE2_UNSET): Likewise.\n+\t(OPTION_MASK_ISA2_SSE_UNSET): Likewise.\n+\t(ix86_handle_option): Handle kl and widekl, add dependency chain\n+\tfor KL and SSE2.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\t(FEATURE_KL, FEATURE_AESKLE, FEATURE_WIDEKL): New.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n+\tfor KL, AESKLE and WIDEKL.\n+\t* config.gcc: Add keylockerintrin.h.\n+\t* doc/invoke.texi: Document new option -mkl and -mwidekl.\n+\t* doc/extend.texi: Document kl and widekl.\n+\t* config/i386/cpuid.h (bit_KL, bit_AESKLE, bit_WIDEKL): New.\n+\t* config/i386/i386-builtin-types.def ((UINT, UINT, V2DI, V2DI, PVOID),\n+\t(UINT, UINT, V2DI, PVOID), (VOID, V2DI, V2DI, V2DI, UINT),\n+\t(UINT8, PV2DI, V2DI, PCVOID), (UINT8, PV2DI, PCV2DI, PCVOID)): New\n+\tfunction types.\n+\t* config/i386/i386-builtin.def: Add\n+\t__builtin_ia32_loadiwkey,\n+\t__builtin_ia32_aesdec128kl_u8,\n+\t__builtin_ia32_aesdec256kl_u8,\n+\t__builtin_ia32_aesenc128kl_u8,\n+\t__builtin_ia32_aesenc256kl_u8,\n+\t__builtin_ia32_aesdecwide128kl_u8,\n+\t__builtin_ia32_aesdecwide256kl_u8,\n+\t__builtin_ia32_aesencwide128kl_u8,\n+\t__builtin_ia32_aesencwide256kl_u8,\n+\t__builtin_ia32_encodekey128_u32,\n+\t__builtin_ia32_encodekey256_u32.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tkl and widekl.\n+\t* config/i386/i386-options.c (isa2_opts): Add -mkl and -mwidekl.\n+\t(ix86_option_override_internal): Handle KL and WIDEKL.\n+\t(ix86_valid_target_attribute_inner_p): Add attribute for kl and widekl.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_builtin): Expand Keylocker Builtins.\n+\t* config/i386/i386.h (TARGET_KL): New.\n+\t(TARGET_KL_P): Likewise.\n+\t(TARGET_WIDEKL): Likewise.\n+\t(TARGET_WIDEKL_P): Likewise.\n+\t(PTA_KL): Likewise.\n+\t(PTA_WIDEKL): Likewise.\n+\t(PTA_TIGERLAKE): Add PTA_KL, PTA_WIDEKL.\n+\t(PTA_ALDERLAKE): Likewise.\n+\t* config/i386/i386.opt: Add new option mkl and mwidekl.\n+\t* config/i386/keylockerintrin.h: New header file for Keylocker.\n+\t* config/i386/immintrin.h: Include keylockerintrin.h.\n+\t* config/i386/predicates.md (encodekey128_operation): New\n+\tpredicate.\n+\t(encodekey256_operation): Likewise.\n+\t(aeswidekl_operation): Likewise.\n+\t* config/i386/sse.md (UNSPECV_LOADIWKEY): New.\n+\t(UNSPECV_AESDEC128KLU8): Likewise.\n+\t(UNSPECV_AESENC128KLU8): Likewise.\n+\t(UNSPECV_AESDEC256KLU8): Likewise.\n+\t(UNSPECV_AESENC256KLU8): Likewise.\n+\t(UNSPECV_AESDECWIDE128KLU8): Likewise.\n+\t(UNSPECV_AESENCWIDE128KLU8): Likewise.\n+\t(UNSPECV_AESDECWIDE256KLU8): Likewise.\n+\t(UNSPECV_AESENCWIDE256KLU8): Likewise.\n+\t(UNSPECV_ENCODEKEY128U32): Likewise.\n+\t(UNSPECV_ENCODEKEY256U32): Likewise.\n+\t(encodekey128u32): New expander.\n+\t(encodekey256u32): Likewise.\n+\t(aes<aeswideklvariant>u8): Likewise.\n+\t(loadiwkey): New insn pattern.\n+\t(*encodekey128u32): Likewise.\n+\t(*encodekey256u32): Likewise.\n+\t(aes<aesklvariant>u8): Likewise.\n+\t(*aes<aeswideklvariant>u8): Likewise.\n+\n+2020-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Allow splatting\n+\tnot vectorizable loads.\n+\t(vect_build_slp_instance): Amend dumping with address.\n+\t(vect_slp_convert_to_external): Likewise.\n+\n+2020-10-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97609\n+\t* gimple-range-cache.cc (non_null_ref::process_name): Call\n+\tinfer_nonnull_range directly instead of infer_value_range.\n+\n 2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (ANALYZER_OBJS): Add analyzer/complexity.o."}, {"sha": "d724ea40a76c3af13155b7476bf041488c09ec4d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1 +1 @@\n-20201029\n+20201030"}, {"sha": "ca844ca775aef7a0c4d2704c77767bdc26b1bc4e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,10 @@\n+2020-10-29  Asher Gordon  <AsDaGo@posteo.net>\n+\n+\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Replace free\n+\twith XDELETE.\n+\t(finish_init): Likewise.\n+\t(pop_init_level): Likewise.\n+\n 2020-10-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (store_parm_decls_newstyle): Use pedwarn_c11 not"}, {"sha": "2ece89676767f913cc8884ed09db5e1b0dcae151", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,95 @@\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 625\n+\tPR c++/97479\n+\t* parser.c (cp_parser_type_id_1): Reject using auto as\n+\ta template-argument in C++20.\n+\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93107\n+\t* pt.c (do_auto_deduction): Call resolve_nondeduced_context for\n+\tthe elements of a { } list.\n+\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\t* typeck.c (do_warn_enum_conversions): Don't warn for SPACESHIP_EXPR.\n+\t(cp_build_binary_op): Reject float <=> enum or enum <=> float.  Use\n+\tCP_INTEGRAL_TYPE_P instead of INTEGRAL_OR_ENUMERATION_TYPE_P.\n+\n+2020-10-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (get_normalized_constraints): Remove 'args'\n+\tparameter.  Pass NULL_TREE as the initial template arguments to\n+\tnormalize_expression.\n+\t(get_normalized_constraints_from_info): Remove 'args' parameter\n+\tand adjust the call to get_normalized_constraints.\n+\t(get_normalized_constraints_from_decl): Remove 'args' local\n+\tvariable and adjust call to get_normalized_constraints_from_info.\n+\t(normalize_concept_definition): Remove 'args' local variable\n+\tand adjust call to get_normalized_constraints.\n+\t(normalize_constraint_expression): Remove the two-parameter\n+\toverload.  Remove 'args' parameter from the three-parameter\n+\toverload and update function comment accordingly.  Remove\n+\tdefault argument from 'diag' parameter.  Adjust call to\n+\tget_normalized_constraints.\n+\t(finish_nested_requirement): Adjust call to\n+\tnormalize_constraint_expression.\n+\t(strictly_subsumes): Remove 'args' parameter.  Adjust call to\n+\tget_normalized_constraints_from_info.\n+\t(weakly_subsumes): Likewise.\n+\t* cp-tree.h (strictly_subsumes): Remove 'args' parameter.\n+\t(weakly_subsumes): Likewise.\n+\t* pt.c (process_partial_specialization): Adjust call to\n+\tstrictly_subsumes.\n+\t(is_compatible_template_arg): Adjust call to weakly_subsumes.\n+\n+2020-10-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97412\n+\t* constraint.cc (normalize_concept_check): Don't call\n+\ttsubst_template_args when 'args' is NULL.\n+\n+2020-10-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97388\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Revert to\n+\toriginal expression if evaluation sets non_constant_p.\n+\n+2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97388\n+\t* constexpr.c (cxx_bind_parameters_in_call): Set non_constant_args\n+\tif the parameter type has a non-trivial destructor.\n+\t(cxx_eval_call_expression): Only unshare arguments if we're\n+\tmemoizing this evaluation.\n+\n+2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95808\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_HEAP_VEC_UNINIT_IDENTIFIER\n+\tand CPTI_HEAP_VEC_IDENTIFIER.\n+\t(heap_vec_uninit_identifier, heap_vec_identifier): Define.\n+\t* decl.c (initialize_predefined_identifiers): Initialize those\n+\tidentifiers.\n+\t* constexpr.c (cxx_eval_call_expression): Reject array allocations\n+\tdeallocated with non-array deallocation or non-array allocations\n+\tdeallocated with array deallocation.\n+\t(non_const_var_error): Handle heap_vec_uninit_identifier and\n+\theap_vec_identifier too.\n+\t(cxx_eval_constant_expression): Handle also heap_vec_uninit_identifier\n+\tand in that case during initialization replace it with\n+\theap_vec_identifier.\n+\t(find_heap_var_refs): Handle heap_vec_uninit_identifier and\n+\theap_vec_identifier too.\n+\n+2020-10-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (push_template_decl): Do not give function-scope entities\n+\tother than implicit typedefs a template header. Do not readd\n+\ttemplate info to a redeclared template.\n+\n 2020-10-28  Marek Polacek  <polacek@redhat.com>\n \n \t* decl.c (grokdeclarator): Offer a fix-it hint for the \"unnecessary"}, {"sha": "99c388992394b0206237f36ba31017dc6d8d2b3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,95 @@\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 625\n+\tPR c++/97479\n+\t* g++.dg/cpp0x/auto3.C: Update dg-error.\n+\t* g++.dg/cpp0x/auto9.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979.C: Likewise.\n+\t* g++.dg/DRs/dr625.C: New test.\n+\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93107\n+\t* g++.dg/cpp0x/initlist-deduce3.C: New test.\n+\n+2020-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp2a/enum-conv1.C: Remove unused code.\n+\t* g++.dg/cpp2a/spaceship-err5.C: New test.\n+\n+2020-10-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97412\n+\t* g++.dg/cpp2a/concepts-variadic2.C: New test.\n+\n+2020-10-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97388\n+\t* g++.dg/cpp2a/constexpr-dtor8.C: New test.\n+\n+2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97388\n+\t* g++.dg/cpp2a/constexpr-dtor5.C: New test.\n+\t* g++.dg/cpp2a/constexpr-dtor6.C: New test.\n+\t* g++.dg/cpp2a/constexpr-dtor7.C: New test.\n+\n+2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95808\n+\t* g++.dg/cpp2a/constexpr-new15.C: New test.\n+\n+2020-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-bool-1.c, gcc.dg/c2x-bool-1.c, gcc.dg/c99-bool-4.c:\n+\tNew tests.\n+\n+2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/pr97596.c: Require int128 effective target.\n+\n+2020-10-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97596.c: New.\n+\n+2020-10-29  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gnat.dg/sin_cos.ads: New.\n+\t* gnat.dg/sin_cos.adb: New.\n+\t* gcc.dg/sin_cos.c: New.\n+\n+2020-10-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/keylocker-aesdec128kl.c: New test.\n+\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-encodekey128.c: Likewise.\n+\t* gcc.target/i386/keylocker-encodekey256.c: Likewise.\n+\t* gcc.target/i386/keylocker-loadiwkey.c: Likewise.\n+\t* g++.dg/other/i386-2.C: Add -mkl and -mwidekl.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/sse-12.c: Likewise.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Add kl and widekl.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute test.\n+\n+2020-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-pr65935.c: Adjust.\n+\n+2020-10-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/pr97609.C: New.\n+\n 2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97608"}, {"sha": "2f19a9711282b277260d3f923cfe0343ca5a00bc", "filename": "gotools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,9 @@\n+2020-10-29  Nikhil Benesch  <nikhil.benesch@gmail.com>\n+\n+\t* Makefile.am (check-runtime): Add runtime_linknames.go to\n+\t--extrafiles.\n+\t* Makefile.in: Regenerate.\n+\n 2020-01-21  Ian Lance Taylor  <iant@golang.org>\n \n \t* Makefile.am (gofmt$(EXEEXT)): Link against $(LIBGOTOOL)."}, {"sha": "e1450136133c109d64ace158a2848c53a5ae20e2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,14 @@\n+2020-10-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/gthr-vxworks-tls.c: Fix preprocessor logic\n+\tcontrolling the definition of VX_ENTER_TLS_DTOR and\n+\tVX_LEAVE_TLS_DTOR based on a version major check.\n+\n+2020-10-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/gthr-vxworks-thread.c: Fix name of macro used\n+\tto condition the inclusion of an actual implementation.\n+\n 2020-10-27  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/97461"}, {"sha": "bcfa429a7f919600d5c513dc52a64b8dbb0ad8ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 268, "deletions": 0, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f0606fe4bbf1346f83dd4d0c9060c6b46672a7d", "patch": "@@ -1,3 +1,271 @@\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Tighten patterns\n+\tfor old <sstream> symbols some more.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_util.h (subrange::subrange(R&&)): Use\n+\tdirect-initialization instead of list-initialization, so a\n+\tpotential narrowing conversion from ranges::size(r) to the\n+\tstored size isn't ill-formed.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/parse_numbers.h (_Select_int_base): Avoid\n+\tnarrowing conversion in constant expression.\n+\t* include/experimental/buffer (buffer_copy): Avoid narrowing\n+\tconversion.\n+\t* include/experimental/internet (hash<>::operator()): Do not\n+\tuse deprecated 'argument_type' member.\n+\t* include/std/variant (variant::emplace): Use cast instead\n+\tof implicit conversion from size_t to narrower unsigned type.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/tr1/shared_ptr.h (__shared_count, __shared_ptr)\n+\t(shared_ptr): Add diagnostic pragmas around uses of auto_ptr.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n+\tAdust dg-error line numbers.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/96817.cc: Avoid -Wunused warnings.\n+\t* testsuite/20_util/any/assign/2.cc: Likewise.\n+\t* testsuite/20_util/any/cons/2.cc: Likewise.\n+\t* testsuite/20_util/align/1.cc: Avoid -Wsign-compare warning.\n+\t* testsuite/20_util/function/65760.cc: Avoid -Wunused warning.\n+\t* testsuite/20_util/function/1.cc: Avoid -Wcatch-value warning.\n+\t* testsuite/20_util/function/cons/move_target.cc: Avoid -Wunused\n+\twarning.\n+\t* testsuite/20_util/headers/memory/synopsis.cc: Add exception\n+\tspecification.\n+\t* testsuite/20_util/monotonic_buffer_resource/allocate.cc: Avoid\n+\t-Wsign-compare warning.\n+\t* testsuite/20_util/tuple/cons/deduction.cc: Avoid -Wunused\n+\twarning.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/808590-cxx11.cc:\n+\tAvoid -Wdeprecated-copy warning.\n+\t* testsuite/21_strings/basic_string/56166.cc: Avoid\n+\t-Wcatch-value warning.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc:\n+\tAvoid -Wcatch-value warnings.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stof.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoi.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stol.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stold.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoll.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoul.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoull.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/nonnull.cc:\n+\tPrune additional diagnostics.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/nonnull.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/nonnull.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/headers/string/synopsis.cc: Add exception\n+\tspecifications.\n+\t* testsuite/22_locale/locale/cons/12352.cc: Define sized\n+\tdelete operators to avoid warnings.\n+\t* testsuite/23_containers/deque/modifiers/swap/1.cc: Add\n+\texception specification.\n+\t* testsuite/23_containers/forward_list/cons/11.cc: Avoid\n+\t-Wdeprecated-copy warning.\n+\t* testsuite/23_containers/headers/bitset/synopsis.cc: Add\n+\texception specification.\n+\t* testsuite/23_containers/headers/deque/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/forward_list/synopsis.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/map/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/queue/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/set/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/vector/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/list/modifiers/swap/1.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/swap/1.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/swap/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/modifiers/swap/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/modifiers/swap/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/56267-2.cc: Avoid\n+\t-Wdeprecated-copy warning.\n+\t* testsuite/23_containers/vector/bool/23632.cc: Avoid\n+\t-Wempty-body warning.\n+\t* testsuite/23_containers/vector/modifiers/swap/1.cc: Add\n+\texception specification.\n+\t* testsuite/25_algorithms/heap/moveable2.cc: Fix misplaced\n+\tparentheses around arguments.\n+\t* testsuite/25_algorithms/sample/1.cc: Use return value.\n+\t* testsuite/25_algorithms/search/searcher.cc: Avoid -Wunused\n+\twarnings.\n+\t* testsuite/27_io/basic_ostream/exceptions/char/9561.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc: Avoid\n+\t-Wsign-compare warning.\n+\t* testsuite/experimental/any/assign/2.cc: Avoid -Wunused warnings.\n+\t* testsuite/experimental/any/cons/2.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n+\tAvoid -Wign-compare warning.\n+\t* testsuite/experimental/memory/observer_ptr/cons/cons.cc:\n+\tLikewise.\n+\t* testsuite/experimental/memory_resource/null_memory_resource.cc:\n+\tLikewise.\n+\t* testsuite/experimental/source_location/1.cc: Avoid -Waddress\n+\twarning.\n+\t* testsuite/ext/pod_char_traits.cc: Avoid -Wunused warning.\n+\t* testsuite/ext/vstring/modifiers/clear/56166.cc: Avoid\n+\t-Wcatch-value.\n+\t* testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc:\n+\tAvoid -Wunused warning.\n+\t* testsuite/std/concepts/concepts.lang/concept.swappable/swappable.cc:\n+\tLikewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n+\tPrune additional warnings.\n+\t* testsuite/tr1/3_function_objects/function/1.cc: Avoid\n+\t-Wcatch-value warning.\n+\t* testsuite/util/replacement_memory_operators.h: Define sized\n+\tdelete to avoid warnings.\n+\t* testsuite/util/testsuite_api.h (_NonDefaultConstructible): Add\n+\tuser-declared assignment operator to stop -Wdeprecated-copy\n+\twarnings.\n+\t* testsuite/util/testsuite_containers.h: Avoid -Wunused warning.\n+\t* testsuite/util/testsuite_iterators.h: Avoid -Wsign-compare\n+\twarnings.\n+\t* testsuite/util/testsuite_new_operators.h: Define sized deleted.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/25_algorithms/all_of/constexpr.cc: Check result of\n+\tthe algorithm.\n+\t* testsuite/25_algorithms/any_of/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/binary_search/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_backward/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/count/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/equal/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/equal_range/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/find_end/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/is_partitioned/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/is_permutation/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted_until/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lexicographical_compare/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lower_bound/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/merge/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/mismatch/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/remove_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/remove_copy_if/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/remove_if/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/replace_if/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/reverse/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/reverse_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/search/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/set_difference/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/set_intersection/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_symmetric_difference/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_union/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/upper_bound/constexpr.cc: Likewise.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/uniform_int_dist.h (_Power_of_two): Add\n+\tconstexpr.\n+\t(uniform_int_distribution::_S_nd): Add static_assert to ensure\n+\tthe wider type is twice as wide as the result type.\n+\t(uniform_int_distribution::__generate_impl): Add static_assert\n+\tand declare variables as constexpr where appropriate.\n+\t(uniform_int_distribution:operator()): Likewise. Only consider\n+\tthe uniform random bit generator's range of possible results\n+\twhen deciding whether _S_nd can be used, not the __uctype type.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/rope (_Refcount_Base::_M_ref_count): Remove\n+\tvolatile qualifier.\n+\t(_Refcount_Base::_M_decr()): Likewise.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h (_Function_handler<void, void>):\n+\tDefine explicit specialization used for invalid target types.\n+\t(_Base_manager::_M_manager) [!__cpp_rtti]: Return null.\n+\t(function::target_type()): Check for null pointer.\n+\t(function::target()): Define unconditionall. Fix bug with\n+\tconst_cast of function pointer type.\n+\t(function::target() const): Define unconditionally, but\n+\tonly use RTTI if enabled.\n+\t* testsuite/20_util/function/target_no_rtti.cc: New test.\n+\n+2020-10-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/25_algorithms/lexicographical_compare/constrained.cc:\n+\t(test03): Fix initializing the vector vy with the array y of size 4.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable_policy.h (_Local_iterator_base): Cast\n+\tvalue to avoid -Wsign-compare warnings.\n+\t* include/bits/regex.h (sub_match::_M_str): Avoid narrowing\n+\tconversion.\n+\t* include/bits/regex_compiler.tcc (_Compiler::_M_quantifier):\n+\tInitialize variable to avoid -Wmaybe-uninitialized warning.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter::_Impl):\n+\tReorder mem-initializer-list to avoid -Wreorder warning.\n+\t* include/bits/stl_tree.h (_Rb_tree_impl): Explicitly\n+\tinitialize base class in copy constructor.\n+\t* include/debug/safe_iterator.h (_Safe_iterator): Likewise.\n+\t* include/ext/debug_allocator.h: Reorder mem-initializer-list\n+\tto avoid -Wreorder warning.\n+\t* include/ext/throw_allocator.h (throw_allocator_limit)\n+\t(throw_allocator_random): Add user-declared assignment operators\n+\tto avoid -Wdeprecated-copy warnings.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/uniform_int_dist.h (uniform_int_distribution):\n+\tRename _UniformRandomNumberGenerator template parameters to\n+\t_UniformRandomBitGenerator, as per P0346R1.\n+\n+2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/sstream (basic_stringbuf(__string_type&&, openmode)):\n+\tCall _M_init_syncbuf to set up get/put areas. Also qualify\n+\tstd::move.\n+\n 2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Remove duplicate"}]}