{"sha": "af66d0af87cf36d923d4663935a2b7a682753a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2NmQwYWY4N2NmMzZkOTIzZDQ2NjM5MzVhMmI3YTY4Mjc1M2EyNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-20T10:23:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-26T19:31:27Z"}, "message": "Cleanup get_range_info\n\nNow that there is only one user of get_range_info() we can clean this up\nto always return a range instead of pairs of wide_ints.\n\nA follow-up patch will inline both get_range_info and get_ptr_nonnull\ninto its only remaining user.\n\ngcc/ChangeLog:\n\n\t* tree-ssanames.c (get_range_info): Merge both copies of\n\tget_range_info into one that works with irange.\n\t* tree-ssanames.h (get_range_info): Remove version that works on\n\twide_ints.", "tree": {"sha": "a68b19ba886b99e72be942a4bdb27d2ddc9701bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68b19ba886b99e72be942a4bdb27d2ddc9701bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af66d0af87cf36d923d4663935a2b7a682753a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66d0af87cf36d923d4663935a2b7a682753a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af66d0af87cf36d923d4663935a2b7a682753a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66d0af87cf36d923d4663935a2b7a682753a24/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f4e2b01b82c72b3a11ff4ad184d7edcf0e63d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f4e2b01b82c72b3a11ff4ad184d7edcf0e63d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f4e2b01b82c72b3a11ff4ad184d7edcf0e63d4"}], "stats": {"total": 59, "additions": 14, "deletions": 45}, "files": [{"sha": "5329c0a418768e0ecdedb42da06bceaf0014ef70", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 14, "deletions": 43, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66d0af87cf36d923d4663935a2b7a682753a24/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66d0af87cf36d923d4663935a2b7a682753a24/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=af66d0af87cf36d923d4663935a2b7a682753a24", "patch": "@@ -423,58 +423,29 @@ set_range_info (tree name, const value_range &vr)\n   set_range_info (name, vr.kind (), min, max);\n }\n \n-/* Gets range information MIN, MAX and returns enum value_range_kind\n-   corresponding to tree ssa_name NAME.  enum value_range_kind returned\n-   is used to determine if MIN and MAX are valid values.  */\n+/* Gets range information corresponding to ssa_name NAME and stores it\n+   in a value_range VR.  Returns the value_range_kind.  */\n \n enum value_range_kind\n-get_range_info (const_tree expr, wide_int *min, wide_int *max)\n+get_range_info (const_tree name, irange &vr)\n {\n-  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (expr)));\n-  gcc_assert (min && max);\n-  if (TREE_CODE (expr) == INTEGER_CST)\n-    {\n-      *min = wi::to_wide (expr);\n-      *max = *min;\n-      return VR_RANGE;\n-    }\n-  if (TREE_CODE (expr) != SSA_NAME)\n-    return VR_VARYING;\n+  tree type = TREE_TYPE (name);\n+  gcc_checking_assert (!POINTER_TYPE_P (type));\n+  gcc_checking_assert (TREE_CODE (name) == SSA_NAME);\n \n-  range_info_def *ri = SSA_NAME_RANGE_INFO (expr);\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n \n   /* Return VR_VARYING for SSA_NAMEs with NULL RANGE_INFO or SSA_NAMEs\n      with integral types width > 2 * HOST_BITS_PER_WIDE_INT precision.  */\n-  if (!ri || (GET_MODE_PRECISION (SCALAR_INT_TYPE_MODE (TREE_TYPE (expr)))\n+  if (!ri || (GET_MODE_PRECISION (SCALAR_INT_TYPE_MODE (TREE_TYPE (name)))\n \t      > 2 * HOST_BITS_PER_WIDE_INT))\n-    return VR_VARYING;\n-\n-  *min = ri->get_min ();\n-  *max = ri->get_max ();\n-  return SSA_NAME_RANGE_TYPE (expr);\n-}\n-\n-/* Gets range information corresponding to ssa_name NAME and stores it\n-   in a value_range VR.  Returns the value_range_kind.  */\n-\n-enum value_range_kind\n-get_range_info (const_tree name, irange &vr)\n-{\n-  tree min, max;\n-  wide_int wmin, wmax;\n-  enum value_range_kind kind = get_range_info (name, &wmin, &wmax);\n-\n-  if (kind == VR_VARYING)\n-    vr.set_varying (TREE_TYPE (name));\n-  else if (kind == VR_UNDEFINED)\n-    vr.set_undefined ();\n+    vr.set_varying (type);\n   else\n-    {\n-      min = wide_int_to_tree (TREE_TYPE (name), wmin);\n-      max = wide_int_to_tree (TREE_TYPE (name), wmax);\n-      vr.set (min, max, kind);\n-    }\n-  return kind;\n+    vr.set (wide_int_to_tree (type, ri->get_min ()),\n+\t    wide_int_to_tree (type, ri->get_max ()),\n+\t    SSA_NAME_RANGE_TYPE (name));\n+\n+  return vr.kind ();\n }\n \n /* Set nonnull attribute to pointer NAME.  */"}, {"sha": "166f921f04cbbd3c4ae43b71797077361cc3d754", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66d0af87cf36d923d4663935a2b7a682753a24/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66d0af87cf36d923d4663935a2b7a682753a24/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=af66d0af87cf36d923d4663935a2b7a682753a24", "patch": "@@ -71,8 +71,6 @@ extern void set_range_info (tree, enum value_range_kind, const wide_int_ref &,\n \t\t\t    const wide_int_ref &);\n extern void set_range_info (tree, const value_range &);\n /* Gets the value range from SSA.  */\n-extern enum value_range_kind get_range_info (const_tree, wide_int *,\n-\t\t\t\t\t     wide_int *);\n extern enum value_range_kind get_range_info (const_tree, irange &);\n extern void set_nonzero_bits (tree, const wide_int_ref &);\n extern wide_int get_nonzero_bits (const_tree);"}]}