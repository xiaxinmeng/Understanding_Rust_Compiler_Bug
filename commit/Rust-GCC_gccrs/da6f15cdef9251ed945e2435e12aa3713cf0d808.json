{"sha": "da6f15cdef9251ed945e2435e12aa3713cf0d808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2ZjE1Y2RlZjkyNTFlZDk0NWUyNDM1ZTEyYWEzNzEzY2YwZDgwOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-01-28T18:55:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-01-28T18:55:00Z"}, "message": "pa.md (call, call_value): Always save the PIC register before a call.\n\n\t* pa.md (call, call_value): Always save the PIC register before\n\ta call.\n\nFrom-SVN: r8836", "tree": {"sha": "c634df7e50f5463a6f9216ac1b17e3b2b45f6fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c634df7e50f5463a6f9216ac1b17e3b2b45f6fc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da6f15cdef9251ed945e2435e12aa3713cf0d808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6f15cdef9251ed945e2435e12aa3713cf0d808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6f15cdef9251ed945e2435e12aa3713cf0d808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6f15cdef9251ed945e2435e12aa3713cf0d808/comments", "author": null, "committer": null, "parents": [{"sha": "8e6c802b46eeadb19407635dcc53bd8cafdd54ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6c802b46eeadb19407635dcc53bd8cafdd54ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6c802b46eeadb19407635dcc53bd8cafdd54ff"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "62bd4e2072f767b60308f1df6462b86066e5575f", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6f15cdef9251ed945e2435e12aa3713cf0d808/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6f15cdef9251ed945e2435e12aa3713cf0d808/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=da6f15cdef9251ed945e2435e12aa3713cf0d808", "patch": "@@ -3426,13 +3426,19 @@\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n       if (!hppa_save_pic_table_rtx)\n-\t{\n-\t  hppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\t  emit_insn_before (gen_rtx (SET, VOIDmode,\n-\t\t\t\t    hppa_save_pic_table_rtx,\n-\t\t\t\t    pic_offset_table_rtx),\n-\t\t\t   call_insn);\n-\t}\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+\n+      /* We must save and restore the PIC register around every call\n+\t since we don't have flow information to determine if this save\n+\t is redundant with a previous save.  The old code assumed once\n+\t the register was saved it never needs to be saved again, but\n+\t the save could have been on a path which doesn't always\n+\t execute; a call site physically later in the program would\n+\t then attempt a restore from an uninitialized register!  */\n+      emit_insn_before (gen_rtx (SET, VOIDmode,\n+\t\t\t\t hppa_save_pic_table_rtx,\n+\t\t\t\t pic_offset_table_rtx),\n+\t\t\tcall_insn);\n \n       emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n \t\t\t  hppa_save_pic_table_rtx));\n@@ -3522,13 +3528,19 @@\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n       if (!hppa_save_pic_table_rtx)\n-\t{\n-\t  hppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\t  emit_insn_before (gen_rtx (SET, VOIDmode,\n-\t\t\t\t    hppa_save_pic_table_rtx,\n-\t\t\t\t    pic_offset_table_rtx),\n-\t\t\t   call_insn);\n-\t}\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+\n+      /* We must save and restore the PIC register around every call\n+\t since we don't have flow information to determine if this save\n+\t is redundant with a previous save.  The old code assumed once\n+\t the register was saved it never needs to be saved again, but\n+\t the save could have been on a path which doesn't always\n+\t execute; a call site physically later in the program would\n+\t then attempt a restore from an uninitialized register!  */\n+      emit_insn_before (gen_rtx (SET, VOIDmode,\n+\t\t\t\t hppa_save_pic_table_rtx,\n+\t\t\t\t pic_offset_table_rtx),\n+\t\t\tcall_insn);\n \n       emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n \t\t\t  hppa_save_pic_table_rtx));"}]}