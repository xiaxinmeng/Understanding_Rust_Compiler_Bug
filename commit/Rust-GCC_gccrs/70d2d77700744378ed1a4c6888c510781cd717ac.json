{"sha": "70d2d77700744378ed1a4c6888c510781cd717ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkMmQ3NzcwMDc0NDM3OGVkMWE0YzY4ODhjNTEwNzgxY2Q3MTdhYw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-24T16:20:43Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-24T16:20:43Z"}, "message": "d/dmd: Merge upstream dmd 74ac873be\n\nIntroduces a fix for a segfault when building without object.d being\npresent, as well as MinGW host build errors in dmd/root/filename.c.\n\nUpdates a couple of non-portable tests, removing one and fixing the\nother.\n\nFrom-SVN: r269897", "tree": {"sha": "085a91cca83e20849cecb84036e72ee2e159832f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/085a91cca83e20849cecb84036e72ee2e159832f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d2d77700744378ed1a4c6888c510781cd717ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d2d77700744378ed1a4c6888c510781cd717ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d2d77700744378ed1a4c6888c510781cd717ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d2d77700744378ed1a4c6888c510781cd717ac/comments", "author": null, "committer": null, "parents": [{"sha": "4dd1130557b74008d0404d3af7b384fba5edb8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd1130557b74008d0404d3af7b384fba5edb8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd1130557b74008d0404d3af7b384fba5edb8a8"}], "stats": {"total": 89, "additions": 26, "deletions": 63}, "files": [{"sha": "3017f0d34af581a4a97145f790a6ebd303ad97c7", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=70d2d77700744378ed1a4c6888c510781cd717ac", "patch": "@@ -1,4 +1,4 @@\n-8d4c876c658608e8f6e653803c534a9e15618f57\n+74ac873be1862090b7ec0e4a876fd1b758520359\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "07e47127130ed53ed74510631d5ce8b7c4687d04", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=70d2d77700744378ed1a4c6888c510781cd717ac", "patch": "@@ -302,7 +302,7 @@ bool Module::read(Loc loc)\n         {\n             ::error(loc, \"cannot find source code for runtime library file 'object.d'\");\n             errorSupplemental(loc, \"dmd might not be correctly installed. Run 'dmd -man' for installation instructions.\");\n-            const char *dmdConfFile = FileName::canonicalName(global.inifilename);\n+            const char *dmdConfFile = global.inifilename ? FileName::canonicalName(global.inifilename) : NULL;\n             errorSupplemental(loc, \"config file: %s\", dmdConfFile ? dmdConfFile : \"not found\");\n         }\n         else"}, {"sha": "6144d810fb5b6edea385c987eca530eb1ff6a767", "filename": "gcc/d/dmd/root/filename.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c?ref=70d2d77700744378ed1a4c6888c510781cd717ac", "patch": "@@ -262,6 +262,7 @@ const char *FileName::name(const char *str)\n                 if (e == str + 1 || e == str + len - 1)\n                     return e + 1;\n #endif\n+                /* falls through */\n             default:\n                 if (e == str)\n                     break;\n@@ -542,7 +543,7 @@ int FileName::exists(const char *name)\n     int result;\n \n     dw = GetFileAttributesA(name);\n-    if (dw == -1L)\n+    if (dw == INVALID_FILE_ATTRIBUTES)\n         result = 0;\n     else if (dw & FILE_ATTRIBUTE_DIRECTORY)\n         result = 2;\n@@ -568,7 +569,7 @@ bool FileName::ensurePathExists(const char *path)\n                 size_t len = strlen(path);\n                 if ((len > 2 && p[-1] == ':' && strcmp(path + 2, p) == 0) ||\n                     len == strlen(p))\n-                {   mem.xfree(const_cast<void *>(p));\n+                {   mem.xfree(const_cast<char *>(p));\n                     return 0;\n                 }\n #endif\n@@ -621,7 +622,7 @@ const char *FileName::canonicalName(const char *name)\n     DWORD result = GetFullPathNameA(name, 0, NULL, NULL);\n     if (result)\n     {\n-        char *buf = (char *)malloc(result);\n+        char *buf = (char *)mem.xmalloc(result);\n         result = GetFullPathNameA(name, result, buf, NULL);\n         if (result == 0)\n         {"}, {"sha": "54c628ac0751539ff12f0507cd62377e2cf3d316", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail6451.d", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd1130557b74008d0404d3af7b384fba5edb8a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6451.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd1130557b74008d0404d3af7b384fba5edb8a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6451.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6451.d?ref=4dd1130557b74008d0404d3af7b384fba5edb8a8", "patch": "@@ -1,18 +0,0 @@\n-\n-version(GNU)\n-{\n-    static assert(0);\n-}\n-version(Win64)\n-{\n-    static assert(0);\n-}\n-else version(X86_64)\n-{\n-    void error(...){}\n-}\n-else\n-{\n-    static assert(0);\n-}\n-"}, {"sha": "b5263e7a9d1b78c2433f0ba90edc9b821b5a1fb6", "filename": "gcc/testsuite/gdc.test/runnable/test4.d", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d2d77700744378ed1a4c6888c510781cd717ac/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d?ref=70d2d77700744378ed1a4c6888c510781cd717ac", "patch": "@@ -224,46 +224,26 @@ void test6()\n     assert(&t.Bottom < &t.foo2);\n \n     assert(TRECT6.foo1.offsetof == 0);\n-version (Win32)\n-{\n-    assert(TRECT6.Left.offsetof == 8);\n-    assert(TRECT6.Top.offsetof == 12);\n-    assert(TRECT6.Right.offsetof == 16);\n-    assert(TRECT6.Bottom.offsetof == 20);\n-    assert(TRECT6.TopLeft.offsetof == 8);\n-    assert(TRECT6.BottomRight.offsetof == 16);\n-    assert(TRECT6.foo2.offsetof == 24);\n-}\n-else version (X86_64)\n-{\n-    assert(TRECT6.Left.offsetof == 8);\n-    assert(TRECT6.Top.offsetof == 12);\n-    assert(TRECT6.Right.offsetof == 16);\n-    assert(TRECT6.Bottom.offsetof == 20);\n-    assert(TRECT6.TopLeft.offsetof == 8);\n-    assert(TRECT6.BottomRight.offsetof == 16);\n-    assert(TRECT6.foo2.offsetof == 24);\n-}\n-else version(ARM)\n-{\n-    assert(TRECT6.Left.offsetof == 8);\n-    assert(TRECT6.Top.offsetof == 12);\n-    assert(TRECT6.Right.offsetof == 16);\n-    assert(TRECT6.Bottom.offsetof == 20);\n-    assert(TRECT6.TopLeft.offsetof == 8);\n-    assert(TRECT6.BottomRight.offsetof == 16);\n-    assert(TRECT6.foo2.offsetof == 24);\n-}\n-else\n-{\n-    assert(TRECT6.Left.offsetof == 4);\n-    assert(TRECT6.Top.offsetof == 8);\n-    assert(TRECT6.Right.offsetof == 12);\n-    assert(TRECT6.Bottom.offsetof == 16);\n-    assert(TRECT6.TopLeft.offsetof == 4);\n-    assert(TRECT6.BottomRight.offsetof == 12);\n-    assert(TRECT6.foo2.offsetof == 20);\n-}\n+    static if (long.alignof == 8)\n+    {\n+        assert(TRECT6.Left.offsetof == 8);\n+        assert(TRECT6.Top.offsetof == 12);\n+        assert(TRECT6.Right.offsetof == 16);\n+        assert(TRECT6.Bottom.offsetof == 20);\n+        assert(TRECT6.TopLeft.offsetof == 8);\n+        assert(TRECT6.BottomRight.offsetof == 16);\n+        assert(TRECT6.foo2.offsetof == 24);\n+    }\n+    else\n+    {\n+        assert(TRECT6.Left.offsetof == 4);\n+        assert(TRECT6.Top.offsetof == 8);\n+        assert(TRECT6.Right.offsetof == 12);\n+        assert(TRECT6.Bottom.offsetof == 16);\n+        assert(TRECT6.TopLeft.offsetof == 4);\n+        assert(TRECT6.BottomRight.offsetof == 12);\n+        assert(TRECT6.foo2.offsetof == 20);\n+    }\n }\n \n /* ================================ */"}]}