{"sha": "3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E5ZWJmM2NlZDdhMmZkMWQ0NDQ3OTE4YmU1ZjM2YjM5ZDA2MWZhZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-25T06:36:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-25T06:36:32Z"}, "message": "ostream_inserter_char.cc (test07): New.\n\n\n2002-01-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/27_io/ostream_inserter_char.cc (test07): New.\n\n2002-01-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_ios.h (basic_ios::_M_check_facet): Make\n\tconst, tweak.\n\t(basic_ios::fill(char_type)): Use fill().\n\t* include/bits/basic_ios.tcc (basic_ios::widen): Use _M_check_facet.\n\t(basic_ios::narrow): Same.\n\t(basic_ios::_M_cache_facets): Explicitly set cached facets to zero\n\tif they are invalid.\n\t(basic_ios::init): Comment.\n\t* testsuite/27_io/ios_init.cc (test02): New.\n\nFrom-SVN: r49205", "tree": {"sha": "147b43df3b19f4ab2a95375185b83cdba58dbace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/147b43df3b19f4ab2a95375185b83cdba58dbace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/comments", "author": null, "committer": null, "parents": [{"sha": "c4df4ceb847290d6155d6315b6de1f0206cba488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4df4ceb847290d6155d6315b6de1f0206cba488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4df4ceb847290d6155d6315b6de1f0206cba488"}], "stats": {"total": 218, "additions": 170, "deletions": 48}, "files": [{"sha": "2bc1a95fa1ee995f897018d7df19c2a6f29bc7d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "patch": "@@ -1,3 +1,19 @@\n+2002-01-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/27_io/ostream_inserter_char.cc (test07): New. \n+\t\n+2002-01-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_ios.h (basic_ios::_M_check_facet): Make\n+\tconst, tweak.\n+\t(basic_ios::fill(char_type)): Use fill().\t\n+\t* include/bits/basic_ios.tcc (basic_ios::widen): Use _M_check_facet.\n+\t(basic_ios::narrow): Same.\n+\t(basic_ios::_M_cache_facets): Explicitly set cached facets to zero\n+\tif they are invalid.\n+\t(basic_ios::init): Comment.\n+\t* testsuite/27_io/ios_init.cc (test02): New.\n+\t\n 2002-01-24  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/stl_tempbuf.h (_Temporary_buffer):  Add doxygen hook."}, {"sha": "f680a5082063ddfc19d8caff52520e9e7f19a0a1", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,12 +62,11 @@ namespace std\n       typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n       \n       // Data members:\n-    private:\n+    protected:\n       basic_ostream<_CharT, _Traits>* \t_M_tie;\n       char_type \t\t\t_M_fill;\n       iostate \t\t\t\t_M_exception;\n \n-    protected:\n       basic_streambuf<_CharT, _Traits>* _M_streambuf;\n       iostate \t\t\t\t_M_streambuf_state;\n \n@@ -174,7 +173,7 @@ namespace std\n       inline char_type \n       fill(char_type __ch)\n       {\n-\tchar_type __old = _M_fill;\n+\tchar_type __old = this->fill();\n \t_M_fill = __ch;\n \treturn __old;\n       }\n@@ -198,14 +197,11 @@ namespace std\n       init(basic_streambuf<_CharT, _Traits>* __sb);\n \n       bool\n-      _M_check_facet(const locale::facet* __f)\n+      _M_check_facet(const locale::facet* __f) const\n       {\n-\tbool __ret = false;\n-\tif (__f)\n-\t  __ret = true;\n-\telse\n+\tif (!__f)\n \t  __throw_bad_cast();\n-\treturn __ret;\n+\treturn true;\n       }\n \n       void"}, {"sha": "d1f5d19b33ccf7aa6389e61c279af689e2b21b03", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "patch": "@@ -1,6 +1,6 @@\n // basic_ios locale and locale-related member functions -*- C++ -*-\n \n-// Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -91,12 +91,22 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     char\n     basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const\n-    { return _M_ios_fctype->narrow(__c, __dfault); }\n+    { \n+      char __ret;\n+      if (_M_check_facet(_M_ios_fctype))\n+\t__ret = _M_ios_fctype->narrow(__c, __dfault); \n+      return __ret;\n+    }\n \n   template<typename _CharT, typename _Traits>\n     _CharT\n     basic_ios<_CharT, _Traits>::widen(char __c) const\n-    { return _M_ios_fctype->widen(__c); }\n+    {\n+      char_type __ret;\n+      if (_M_check_facet(_M_ios_fctype))\n+\t__ret = _M_ios_fctype->widen(__c); \n+      return __ret;\n+    }\n \n   // Locales:\n   template<typename _CharT, typename _Traits>\n@@ -119,7 +129,19 @@ namespace std\n       ios_base::_M_init();\n       _M_cache_facets(_M_ios_locale);\n       _M_tie = 0;\n+\n+      // NB: The 27.4.4.1 Postconditions Table only specifies\n+      // requirements after basic_ios::init() has been called. As part\n+      // of this, fill() must return widen(' '), which needs an imbued\n+      // ctype facet of char_type to return without throwing an\n+      // exception. This is not a required facet, so streams with\n+      // char_type != [char, wchar_t] will not have it by\n+      // default. However, because fill()'s signature is const, this\n+      // data member cannot be lazily initialized.  Thus, thoughts of\n+      // using a non-const helper function in ostream inserters is\n+      // really besides the point.\n       _M_fill = this->widen(' ');\n+\n       _M_exception = goodbit;\n       _M_streambuf = __sb;\n       _M_streambuf_state = __sb ? goodbit : badbit;\n@@ -131,15 +153,18 @@ namespace std\n     {\n       if (has_facet<__ctype_type>(__loc))\n \t_M_ios_fctype = &use_facet<__ctype_type>(__loc);\n+      else\n+\t_M_ios_fctype = 0;\n       // Should be filled in by ostream and istream, respectively.\n       if (has_facet<__numput_type>(__loc))\n \t_M_fnumput = &use_facet<__numput_type>(__loc); \n+      else\n+\t_M_fnumput = 0;\n       if (has_facet<__numget_type>(__loc))\n \t_M_fnumget = &use_facet<__numget_type>(__loc); \n+      else\n+\t_M_fnumget = 0;\n     }\n } // namespace std\n \n-#endif // _CPP_BITS_BASICIOS_TCC\n-\n-\n-\n+#endif "}, {"sha": "8356448af9d9ff20ee1cca659a8863ea3c89d8ce", "filename": "libstdc++-v3/testsuite/27_io/ios_init.cc", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc?ref=3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,6 +30,7 @@\n // 27.4.2.1.6 class ios_base::init\n \n #include <fstream>\n+#include <sstream>\n #include <iostream>\n #include <testsuite_hooks.h>\n \n@@ -81,8 +82,58 @@ void test01()\n   VERIFY( k1 == initial );\n }\n \n+// Non-required instantiations don't have the required facets inbued,\n+// by default, into the locale object. As such, basic_ios::init is\n+// required to return a bad_cast for the first use of fill() call.\n+// See 27.4.4.1\n+void test02() \n+{\n+  bool test = true;\n+\n+  // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..\n+  try\n+    {\n+      std::basic_ostringstream<unsigned short> \toss;\n+    }\n+  catch(...)\n+    { \n+      test = false; \n+    }\n+\n+  // 02: Calls basic_ios::init, which uses ctype<char_type>..\n+  try\n+    {\n+      std::basic_string<unsigned short>        \tstr;\n+      std::basic_ostringstream<unsigned short> \toss(str);\n+      \n+      // Shouldn't get this far.\n+      test = false; \n+\n+      // Try each member functions for unformatted io.\n+      // put\n+      oss.put(324);\n+\n+      // write\n+      const unsigned short us[4] = {1246, 433, 520, 0};\n+      oss.write(us, 4);\n+\n+      // flush\n+      oss.flush();\n+    }\n+  catch(const std::bad_cast& obj)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+}\n+\n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "e8c15588557f7e7b8ac53ef6b65019163fb38296", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_char.cc", "status": "modified", "additions": 64, "deletions": 30, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a9ebf3ced7a2fd1d4447918be5f36b39d061fae/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc?ref=3a9ebf3ced7a2fd1d4447918be5f36b39d061fae", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-16 bkoz\n \n-// Copyright (C) 2000, 1999 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -52,10 +52,7 @@ bool test01()\n   f << str01;\n   f.close();\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n+  VERIFY( test );\n   return test;\n }\n \n@@ -92,11 +89,6 @@ bool test02(void)\n   oss03 << str03;\n   tmp = oss03.str();\n   VERIFY( tmp == \"909909\" );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n   return test;\n }\n \n@@ -133,17 +125,12 @@ bool test03(void)\n   oss03 << str03;\n   tmp = oss03.str();\n   VERIFY( tmp == \"909909\" );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n   return test;\n }\n \n // stringstream and large strings\n-bool test04() {\n-\n+bool test04() \n+{\n   bool test = true;\n   std::string str_01;\n   const std::string str_02(\"coltrane playing 'softly as a morning sunrise'\");\n@@ -166,11 +153,6 @@ bool test04() {\n   VERIFY( oss_02.good() );\n   VERIFY( str_tmp != str_01 );\n   VERIFY( str_tmp.size() == 2390 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n   return test;\n }\n \n@@ -216,11 +198,6 @@ bool test05()\n   str10 = sstr05.str();\n   VERIFY( str05 == str01 );\n   VERIFY( str10 == str01 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n   return test;\n }\n \n@@ -249,13 +226,69 @@ void test06()\n   VERIFY( ostr2.str() == \"blackalicious NIA \" );\n   ostr2 << \"4: deception (5:19)\";  // should append to full string from above\n   VERIFY( ostr2.str() == \"blackalicious NIA 4: deception (5:19)\" );\n+}\n+\n+// Global counter, needs to be reset after use.\n+bool used;\n+\n+class gnu_ctype : public std::ctype<wchar_t>\n+{\n+protected:\n+  char_type        \n+  do_widen(char c) const\n+  { \n+    used = true;\n+    return std::ctype<wchar_t>::do_widen(c);\n+  }\n+\n+  const char*  \n+  do_widen(const char* low, const char* high, char_type* dest) const\n+  { \n+    used = true;\n+    return std::ctype<wchar_t>::do_widen(low, high, dest);\n+  }\n+};\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n+// 27.6.2.5.4 - Character inserter template functions \n+// [lib.ostream.inserters.character]\n+void test07()\n+{\n+#if _GLIBCPP_USE_WCHAR_T\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* buffer = \"SFPL 5th floor, outside carrol, the Asian side\";\n+\n+  wostringstream oss;\n+  oss.imbue(locale(locale::classic(), new gnu_ctype));\n+  \n+  // 1\n+  // template<class charT, class traits>\n+  // basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>& out,\n+  //                                           const char* s);\n+  used = false;\n+  oss << buffer;\n+  VERIFY( used ); // Only required for char_type != char\n+  wstring str = oss.str();\n+  wchar_t c1 = oss.widen(buffer[0]);\n+  VERIFY( str[0] == c1 );\n+  wchar_t c2 = oss.widen(buffer[1]);\n+  VERIFY( str[1] == c2 );\n+\n+  // 2\n+  // template<class charT, class traits>\n+  // basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>& out,\n+  //                                         char c);\n+  used = false;\n+  oss.str(wstring());\n+  oss << 'b';\n+  VERIFY( used ); // Only required for char_type != char\n+  str = oss.str();\n+  wchar_t c3 = oss.widen('b');\n+  VERIFY( str[0] == c3 );\n #endif\n }\n \n-\n int main()\n {\n   test01();\n@@ -264,5 +297,6 @@ int main()\n   test04();\n   test05();\n   test06();\n+  test07();\n   return 0;\n }"}]}