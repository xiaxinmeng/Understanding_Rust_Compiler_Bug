{"sha": "41b81065aeaf755949819944088e09aa528a9b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiODEwNjVhZWFmNzU1OTQ5ODE5OTQ0MDg4ZTA5YWE1MjhhOWIwNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-11-12T20:50:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-11-12T20:50:45Z"}, "message": "re PR c++/38007 (g++ instantiate same operator twice due to bitfield in -O0 mode, causing symbol already defined assembler error)\n\n        PR c++/38007                                                                                     \ngcc/cp/                                                                                                  \n        * typeck.c (cp_build_modify_expr): Update bitfield handling.                                     \ngcc/                                                                                                     \n        * c-common.c (c_common_signed_or_unsigned_type): Remove C++                                      \n        special casing.                                                                                  \ngcc/testsuite/                                                                                           \n        * g++.dg/conversion/bitfield10.C: New test.                                                      \n        * g++.dg/warn/pr35635.C (func1): Accept additional warning.                                      \n        * g++.old-deja/g++.mike/enum1.C: Expect warn about assignment.                                   \n        * g++.dg/expr/bitfield9.C: Pass -Wno-overflow.\n\nFrom-SVN: r141800", "tree": {"sha": "8fdace543da40707cb9b62a31440fa60bc60f1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fdace543da40707cb9b62a31440fa60bc60f1a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41b81065aeaf755949819944088e09aa528a9b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b81065aeaf755949819944088e09aa528a9b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b81065aeaf755949819944088e09aa528a9b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b81065aeaf755949819944088e09aa528a9b06/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dea4e8d064c5fb2e5693602fcc1563886b3777e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea4e8d064c5fb2e5693602fcc1563886b3777e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea4e8d064c5fb2e5693602fcc1563886b3777e7"}], "stats": {"total": 124, "additions": 61, "deletions": 63}, "files": [{"sha": "e0c09c482217393d233dad22cc2a7545f217a795", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -1,3 +1,9 @@\n+2008-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38007\n+\t* c-common.c (c_common_signed_or_unsigned_type): Remove C++\n+\tspecial casing.\n+\n 2008-11-12  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.c (avr_mcu_t): Add atmega16hvb, atmega32hvb,"}, {"sha": "df8281711e943e4ec3962f5511cedce0431a1950", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -2719,7 +2719,7 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n \n #define TYPE_OK(node)\t\t\t\t\t\t\t    \\\n   (TYPE_MODE (type) == TYPE_MODE (node)\t\t\t\t\t    \\\n-   && (c_dialect_cxx () || TYPE_PRECISION (type) == TYPE_PRECISION (node)))\n+   && TYPE_PRECISION (type) == TYPE_PRECISION (node))\n   if (TYPE_OK (signed_char_type_node))\n     return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n   if (TYPE_OK (integer_type_node))\n@@ -2749,10 +2749,7 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n #undef TYPE_OK\n \n-  if (c_dialect_cxx ())\n-    return type;\n-  else\n-    return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);\n+  return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);\n }\n \n /* Build a bit-field integer type for the given WIDTH and UNSIGNEDP.  */"}, {"sha": "769e4cbc75540ae8aa8227b7323b6dd9466bc7ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -1,3 +1,8 @@\n+2008-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38007\n+\t* typeck.c (cp_build_modify_expr): Update bitfield handling.\n+\n 2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34269"}, {"sha": "321f76b32702cefc0aafeca75f83465640c5acb4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 56, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -5801,7 +5801,6 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n   tree newrhs = rhs;\n   tree lhstype = TREE_TYPE (lhs);\n   tree olhstype = lhstype;\n-  tree olhs = NULL_TREE;\n   bool plain_assign = (modifycode == NOP_EXPR);\n \n   /* Avoid duplicate error messages from operands that had errors.  */\n@@ -6005,35 +6004,11 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \treturn error_mark_node;\n     }\n \n-  /* If storing into a structure or union member, it has probably been\n-     given type `int'.  Compute the type that would go with the actual\n-     amount of storage the member occupies.  */\n+  /* If storing into a structure or union member, it may have been given a\n+     lowered bitfield type.  We need to convert to the declared type first,\n+     so retrieve it now.  */\n \n-  if (TREE_CODE (lhs) == COMPONENT_REF\n-      && (TREE_CODE (lhstype) == INTEGER_TYPE\n-\t  || TREE_CODE (lhstype) == REAL_TYPE\n-\t  || TREE_CODE (lhstype) == ENUMERAL_TYPE))\n-    {\n-      lhstype = TREE_TYPE (get_unwidened (lhs, 0));\n-\n-      /* If storing in a field that is in actuality a short or narrower\n-\t than one, we must store in the field in its actual type.  */\n-\n-      if (lhstype != TREE_TYPE (lhs))\n-\t{\n-\t  /* Avoid warnings converting integral types back into enums for\n-\t     enum bit fields.  */\n-\t  if (TREE_CODE (lhstype) == INTEGER_TYPE\n-\t      && TREE_CODE (olhstype) == ENUMERAL_TYPE)\n-\t    {\n-\t      if (TREE_SIDE_EFFECTS (lhs))\n-\t\tlhs = stabilize_reference (lhs);\n-\t      olhs = lhs;\n-\t    }\n-\t  lhs = copy_node (lhs);\n-\t  TREE_TYPE (lhs) = lhstype;\n-\t}\n-    }\n+  olhstype = unlowered_expr_type (lhs);\n \n   /* Convert new value to destination type.  */\n \n@@ -6073,22 +6048,18 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     }\n \n   if (modifycode == INIT_EXPR)\n-    newrhs = convert_for_initialization (lhs, lhstype, newrhs, LOOKUP_NORMAL,\n+    newrhs = convert_for_initialization (lhs, olhstype, newrhs, LOOKUP_NORMAL,\n \t\t\t\t\t \"initialization\", NULL_TREE, 0,\n                                          complain);\n   else\n+    newrhs = convert_for_assignment (olhstype, newrhs, \"assignment\",\n+\t\t\t\t     NULL_TREE, 0, complain);\n+\n+  if (!same_type_p (lhstype, olhstype))\n+    newrhs = cp_convert_and_check (lhstype, newrhs);\n+\n+  if (modifycode != INIT_EXPR)\n     {\n-      /* Avoid warnings on enum bit fields.  */\n-      if (TREE_CODE (olhstype) == ENUMERAL_TYPE\n-\t  && TREE_CODE (lhstype) == INTEGER_TYPE)\n-\t{\n-\t  newrhs = convert_for_assignment (olhstype, newrhs, \"assignment\",\n-\t\t\t\t\t   NULL_TREE, 0, complain);\n-\t  newrhs = convert_force (lhstype, newrhs, 0);\n-\t}\n-      else\n-\tnewrhs = convert_for_assignment (lhstype, newrhs, \"assignment\",\n-\t\t\t\t\t NULL_TREE, 0, complain);\n       if (TREE_CODE (newrhs) == CALL_EXPR\n \t  && TYPE_NEEDS_CONSTRUCTING (lhstype))\n \tnewrhs = build_cplus_new (lhstype, newrhs);\n@@ -6120,21 +6091,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n   if (!plain_assign)\n     TREE_NO_WARNING (result) = 1;\n \n-  /* If we got the LHS in a different type for storing in,\n-     convert the result back to the nominal type of LHS\n-     so that the value we return always has the same type\n-     as the LHS argument.  */\n-\n-  if (olhstype == TREE_TYPE (result))\n-    return result;\n-  if (olhs)\n-    {\n-      result = build2 (COMPOUND_EXPR, olhstype, result, olhs);\n-      TREE_NO_WARNING (result) = 1;\n-      return result;\n-    }\n-  return convert_for_assignment (olhstype, result, \"assignment\",\n-\t\t\t\t NULL_TREE, 0, complain);\n+  return result;\n }\n \n tree"}, {"sha": "a14100fe312b9b60849d5ad33c5108a13443a85c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -1,3 +1,11 @@\n+2008-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38007\n+\t* g++.dg/conversion/bitfield10.C: New test.\n+\t* g++.dg/warn/pr35635.C (func1): Accept additional warning.\n+\t* g++.old-deja/g++.mike/enum1.C: Expect warn about assignment.\n+\t* g++.dg/expr/bitfield9.C: Pass -Wno-overflow.\n+\n 2008-11-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/38065"}, {"sha": "f75504e0d9931a4d304f626d712b59403e5b86dc", "filename": "gcc/testsuite/g++.dg/conversion/bitfield10.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield10.C?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/38007\n+// We need to use the conversion function to the declared type of a bitfield,\n+// not the lowered bitfield type.\n+// { dg-do link }\n+\n+struct A\n+{\n+  operator unsigned int() { return 42; }\n+  operator unsigned char();\n+};\n+\n+struct B\n+{\n+  unsigned int b : 8;\n+};\n+\n+int\n+main ()\n+{\n+  A u;\n+  unsigned int v = u;\n+  B w;\n+  w.b = u;\n+}"}, {"sha": "177f65b8800dbfc74b6040bb7799c9e709685920", "filename": "gcc/testsuite/g++.dg/expr/bitfield9.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -1,5 +1,6 @@\n // PR c++/32346\n // { dg-do run }\n+// { dg-options \"-Wno-overflow\" }\n \n extern \"C\" void abort();\n "}, {"sha": "66ade8b28e12b5397463c60a1e2cea05525edf37", "filename": "gcc/testsuite/g++.dg/warn/pr35635.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -32,7 +32,7 @@ void func1()\n   /* At least one branch of ? does not fit in the destination, thus\n      warn.  */\n   unsigned_bit.x = bar != 0 ? 2 : 0; /* { dg-warning \"conversion\" } */\n-  unsigned_bit.x = bar != 0 ? 0 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  unsigned_bit.x = bar != 0 ? 0 : -1; /* { dg-warning \"conver\" } */\n }\n \n void func2()"}, {"sha": "35b1df0898ad8a9d3db4cb4dcc9e8c02686588f9", "filename": "gcc/testsuite/g++.old-deja/g++.mike/enum1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b81065aeaf755949819944088e09aa528a9b06/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C?ref=41b81065aeaf755949819944088e09aa528a9b06", "patch": "@@ -8,4 +8,4 @@ struct Type {\n   void setBTK();\n };\n \n-void Type::setBTK() { kind = DTK; }\n+void Type::setBTK() { kind = DTK; } // { dg-warning \"truncate\" }"}]}