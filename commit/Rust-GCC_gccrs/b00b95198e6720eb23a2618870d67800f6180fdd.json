{"sha": "b00b95198e6720eb23a2618870d67800f6180fdd", "node_id": "C_kwDOANBUbNoAKGIwMGI5NTE5OGU2NzIwZWIyM2EyNjE4ODcwZDY3ODAwZjYxODBmZGQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-23T20:36:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-23T20:36:43Z"}, "message": "c++: constexpr folding in unevaluated context [PR105931]\n\nChanging the type of N from int to unsigned in decltype82.C (from\nr13-986-g0ecb6b906f215e) reveals another spot where we perform constexpr\nevaluation in an unevaluated context for sake of warnings, this time\nfrom the call to shorten_compare in cp_build_binary_op, which calls\nfold_for_warn.\n\nWe could (and probably should) suppress the shorten_compare warnings\nwhen in an unevaluated context, but there's probably other callers of\nfold_for_warn that are similarly affected.  So this patch takes the\napproach of directly suppressing fold_for_warn when in an unevaluated\ncontext.\n\n\tPR c++/105931\n\ngcc/cp/ChangeLog:\n\n\t* expr.cc (fold_for_warn): Don't fold when in an unevaluated\n\tcontext.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype82a.C: New test.", "tree": {"sha": "7a13650a79c41666833341dabc72dfacd7a90700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a13650a79c41666833341dabc72dfacd7a90700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00b95198e6720eb23a2618870d67800f6180fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00b95198e6720eb23a2618870d67800f6180fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00b95198e6720eb23a2618870d67800f6180fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00b95198e6720eb23a2618870d67800f6180fdd/comments", "author": null, "committer": null, "parents": [{"sha": "01aff2ba18a654324957af446a3065db489c0f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aff2ba18a654324957af446a3065db489c0f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01aff2ba18a654324957af446a3065db489c0f14"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "56fc11f425b3e6f218a800f1176a6b66643381ef", "filename": "gcc/cp/expr.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00b95198e6720eb23a2618870d67800f6180fdd/gcc%2Fcp%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00b95198e6720eb23a2618870d67800f6180fdd/gcc%2Fcp%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.cc?ref=b00b95198e6720eb23a2618870d67800f6180fdd", "patch": "@@ -397,6 +397,11 @@ fold_for_warn (tree x)\n {\n   /* C++ implementation.  */\n \n+  if (cp_unevaluated_operand)\n+    /* In an unevaluated context we don't care about the reduced value\n+       of an expression, so neither should any warnings.  */\n+    return x;\n+\n   /* Prevent warning-dependent constexpr evaluation from changing\n      DECL_UID (which breaks -fcompare-debug) and from instantiating\n      templates.  */"}, {"sha": "cbbcdfd8e586500639f05feadaae017d3a54f13a", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype82a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00b95198e6720eb23a2618870d67800f6180fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00b95198e6720eb23a2618870d67800f6180fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82a.C?ref=b00b95198e6720eb23a2618870d67800f6180fdd", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/105931\n+// { dg-do compile { target c++11 } }\n+// A version of decltype82.C where N is unsigned.\n+\n+template<unsigned N>\n+void f() {\n+  using ty1 = decltype((5 % N) == 0);\n+  using ty2 = decltype((5 / N) == 0);\n+}\n+\n+template void f<0>();"}]}