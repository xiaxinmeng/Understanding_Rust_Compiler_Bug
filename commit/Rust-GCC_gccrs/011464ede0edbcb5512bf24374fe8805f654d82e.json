{"sha": "011464ede0edbcb5512bf24374fe8805f654d82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExNDY0ZWRlMGVkYmNiNTUxMmJmMjQzNzRmZTg4MDVmNjU0ZDgyZQ==", "commit": {"author": {"name": "Hongtao Liu", "email": "hongtao.liu@intel.com", "date": "2019-10-26T02:34:34Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-10-26T02:34:34Z"}, "message": "Fix false dependence of scalar operation vrcp/vsqrt/vrsqrt/vrndscale\nFor instructions with xmm operand:\n\nop %xmmN,%xmmQ,%xmmQ ----> op %xmmN, %xmmN, %xmmQ\n\nfor instruction with mem operand or gpr operand:\n\nop mem/gpr, %xmmQ, %xmmQ\n\n--->  using pass rpad ---->\n\nxorps %xmmN, %xmmN, %xxN\nop mem/gpr, %xmmN, %xmmQ\n\nPerformance influence of SPEC2017 fprate which is tested on SKX\n----\n503.bwaves_r\t-0.03%\n507.cactuBSSN_r -0.22%\n508.namd_r\t-0.02%\n510.parest_r\t0.37%\n511.povray_r\t0.74%\n519.lbm_r\t0.24%\n521.wrf_r\t2.35%\n526.blender_r\t0.71%\n527.cam4_r\t0.65%\n538.imagick_r\t0.95%\n544.nab_r\t-0.37\n549.fotonik3d_r 0.24%\n554.roms_r\t0.90%\nfprate geomean\t0.50%\n-----\n\nChangelog\ngcc/\n\t* config/i386/i386.md (*rcpsf2_sse): Add\n\tavx_partial_xmm_update, prefer m constraint for TARGET_AVX.\n\t(*rsqrtsf2_sse): Ditto.\n\t(*sqrt<mode>2_sse): Ditto.\n\t(sse4_1_round<mode>2): separate constraint vm, add\n\tavx_partail_xmm_update, prefer m constraint for TARGET_AVX.\n\t* config/i386/sse.md (*sse_vmrcpv4sf2\"): New define_insn used\n\tby pass rpad.\n\t(*<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>*):\n\tDitto.\n\t(*sse_vmrsqrtv4sf2): Ditto.\n\t(*avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n\t(*sse4_1_round<ssescalarmodesuffix>): Ditto.\n\t(sse4_1_round<ssescalarmodesuffix>): Add m constraint and\n\t<iptr> pointer size modifier since vround support memory operand.\n\ngcc/testsuite\n\t* gcc.target/i386/pr87007-4.c: New test.\n\t* gcc.target/i386/pr87007-5.c: Ditto.\n\nFrom-SVN: r277469", "tree": {"sha": "adca33d8e1b0de7e3bba89f275ef69ec4bacb6c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adca33d8e1b0de7e3bba89f275ef69ec4bacb6c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/011464ede0edbcb5512bf24374fe8805f654d82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011464ede0edbcb5512bf24374fe8805f654d82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011464ede0edbcb5512bf24374fe8805f654d82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011464ede0edbcb5512bf24374fe8805f654d82e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6755d2d056ae05af0353638b8a01d69a6b58deba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6755d2d056ae05af0353638b8a01d69a6b58deba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6755d2d056ae05af0353638b8a01d69a6b58deba"}], "stats": {"total": 225, "additions": 193, "deletions": 32}, "files": [{"sha": "7015e1b8584ea9a7acabff01fc9e29ba0ecf233a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -1,3 +1,22 @@\n+2019-10-26  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/89071\n+\t* config/i386/i386.md (*rcpsf2_sse): Add\n+\tavx_partial_xmm_update, prefer m constraint for TARGET_AVX.\n+\t(*rsqrtsf2_sse): Ditto.\n+\t(*sqrt<mode>2_sse): Ditto.\n+\t(sse4_1_round<mode>2): separate constraint vm, add\n+\tavx_partail_xmm_update, prefer m constraint for TARGET_AVX.\n+\t* config/i386/sse.md (*sse_vmrcpv4sf2\"): New define_insn used\n+\tby pass rpad.\n+\t(*<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>*):\n+\tDitto.\n+\t(*sse_vmrsqrtv4sf2): Ditto.\n+\t(*avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n+\t(*sse4_1_round<ssescalarmodesuffix>): Ditto.\n+\t(sse4_1_round<ssescalarmodesuffix>): Add m constraint and\n+\t<iptr> pointer size modifier since vround support memory operand.\n+\n 2019-10-18  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/85969"}, {"sha": "fb2235a5e347a915c2fb8a02d52662bc9bc44e48", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -14843,13 +14843,14 @@\n    (set_attr \"btver2_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,false,true\")\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"1\")\n-\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   (eq_attr \"alternative\" \"2\")\n-\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   ]\n-\t   (symbol_ref \"true\")))])\n+      (cond [(match_test \"TARGET_AVX\")\n+\t       (symbol_ref \"true\")\n+\t     (eq_attr \"alternative\" \"1,2\")\n+\t       (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t    ]\n+\t    (symbol_ref \"true\")))])\n \n (define_insn \"*fop_xf_1_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n@@ -15089,13 +15090,14 @@\n    (set_attr \"btver2_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,false,true\")\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"1\")\n-\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   (eq_attr \"alternative\" \"2\")\n-\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   ]\n-\t   (symbol_ref \"true\")))])\n+      (cond [(match_test \"TARGET_AVX\")\n+\t       (symbol_ref \"true\")\n+\t     (eq_attr \"alternative\" \"1,2\")\n+\t       (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t    ]\n+\t    (symbol_ref \"true\")))])\n \n (define_expand \"rsqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\")\n@@ -15120,14 +15122,15 @@\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,false,true\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"1\")\n-\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   (eq_attr \"alternative\" \"2\")\n-\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   ]\n-\t   (symbol_ref \"true\")))])\n+      (cond [(match_test \"TARGET_AVX\")\n+\t       (symbol_ref \"true\")\n+\t     (eq_attr \"alternative\" \"1,2\")\n+\t       (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t    ]\n+\t    (symbol_ref \"true\")))])\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n@@ -16261,30 +16264,32 @@\n \f\n \n (define_insn \"sse4_1_round<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,x,v\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,x,v,v\")\n \t(unspec:MODEF\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,x,m,vm\")\n-\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n,n\")]\n+\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,x,m,v,m\")\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n,n,n\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"@\n    %vround<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    %vround<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    %vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\n+   vrndscale<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    vrndscale<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_extra\" \"1,1,1,*\")\n-   (set_attr \"length_immediate\" \"*,*,*,1\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,evex\")\n-   (set_attr \"isa\" \"noavx512f,noavx512f,noavx512f,avx512f\")\n+   (set_attr \"prefix_extra\" \"1,1,1,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,1,1\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,evex,evex\")\n+   (set_attr \"isa\" \"noavx512f,noavx512f,noavx512f,avx512f,avx512f\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,false,true,false,true\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"1\")\n-\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   (eq_attr \"alternative\" \"2\")\n-\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t   ]\n-\t   (symbol_ref \"true\")))])\n+      (cond [(match_test \"TARGET_AVX\")\n+\t       (symbol_ref \"true\")\n+\t     (eq_attr \"alternative\" \"1,2\")\n+\t       (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t    ]\n+\t    (symbol_ref \"true\")))])\n \n (define_insn \"rintxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")"}, {"sha": "ce0dccf3e0839da8c3cf00c44c820599f3b88d98", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -2035,6 +2035,25 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*sse_vmrcpv4sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V4SF\n+\t  (vec_duplicate:V4SF\n+\t    (unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t         UNSPEC_RCP))\n+\t  (match_operand:V4SF 2 \"register_operand\" \"0,x\")\n+\t  (const_int 1)))]\n+  \"TARGET_SSE\"\n+  \"@\n+   rcpss\\t{%1, %0|%0, %1}\n+   vrcpss\\t{%1, %2, %0|%0, %2, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n+   (set_attr \"btver2_sse_attr\" \"rcp\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"<mask_codefor>rcp14<mode><mask_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL\n@@ -2130,6 +2149,25 @@\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n+(define_insn \"*<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_duplicate:VF_128\n+\t    (sqrt:<ssescalarmode>\n+\t      (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\")))\n+\t  (match_operand:VF_128 2 \"register_operand\" \"0,v\")\n+\t  (const_int 1)))]\n+  \"TARGET_SSE\"\n+  \"@\n+   sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n+   vsqrt<ssescalarmodesuffix>\\t{<round_scalar_mask_op3>%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %1<round_scalar_mask_op3>}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"sqrt\")\n+   (set_attr \"prefix\" \"<round_scalar_prefix>\")\n+   (set_attr \"btver2_sse_attr\" \"sqrt\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n (define_expand \"rsqrt<mode>2\"\n   [(set (match_operand:VF1_128_256 0 \"register_operand\")\n \t(unspec:VF1_128_256\n@@ -2219,6 +2257,23 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*sse_vmrsqrtv4sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V4SF\n+\t  (vec_duplicate:V4SF\n+\t    (unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t         UNSPEC_RSQRT))\n+\t  (match_operand:V4SF 2 \"register_operand\" \"0,x\")\n+\t  (const_int 1)))]\n+  \"TARGET_SSE\"\n+  \"@\n+   rsqrtss\\t{%1, %0|%0, %1}\n+   vrsqrtss\\t{%1, %2, %0|%0, %2, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_expand \"<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(smaxmin:VF\n@@ -9709,6 +9764,22 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*avx512f_rndscale<mode><round_saeonly_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_duplicate:VF_128\n+\t    (unspec:<ssescalarmode>\n+\t      [(match_operand:<ssescalarmode> 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t       (match_operand:SI 3 \"const_0_to_255_operand\")]\n+\t      UNSPEC_ROUND))\n+          (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\"\n+  [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; One bit in mask selects 2 elements.\n (define_insn \"avx512f_shufps512_1<mask_name>\"\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n@@ -17954,12 +18025,36 @@\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x,v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 2 \"register_operand\" \"Yr,*x,x,v\")\n+\t    [(match_operand:VF_128 2 \"nonimmediate_operand\" \"Yrm,*xm,xm,vm\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n \t    UNSPEC_ROUND)\n \t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE4_1\"\n+  \"@\n+   round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %3}\n+   round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %3}\n+   vround<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %3}\n+   vrndscale<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx512f\")\n+   (set_attr \"type\" \"ssecvt\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,1,*,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex,evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*sse4_1_round<ssescalarmodesuffix>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_duplicate:VF_128\n+\t    (unspec:<ssescalarmode>\n+\t      [(match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"Yrm,*xm,xm,vm\")\n+\t       (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n+\t      UNSPEC_ROUND))\n+\t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n+\t  (const_int 1)))]\n+  \"TARGET_SSE4_1\"\n   \"@\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}"}, {"sha": "c5900b24bc2b22d2c8241eaec633bc0a3d851666", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -1,3 +1,9 @@\n+2019-10-26  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/89071\n+\t* gcc.target/i386/pr87007-4.c: New test.\n+\t* gcc.target/i386/pr87007-5.c: Ditto.\n+\n 2019-10-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91581 - ICE in exception-specification of defaulted ctor."}, {"sha": "e91bdcbac44b2510d6462fbf03e82f948467395f", "filename": "gcc/testsuite/gcc.target/i386/pr87007-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=skylake-avx512 -mfpmath=sse\" } */\n+\n+\n+#include<math.h>\n+\n+extern double d1, d2, d3;\n+void\n+foo (int n, int k)\n+{\n+  for (int i = 0; i != n; i++)\n+    if(i < k)\n+      d1 = floor (d2);\n+    else\n+      d1 = ceil (d3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}, {"sha": "20d13cf650b9100f5c07b5a16c456d2dcc2b1e1e", "filename": "gcc/testsuite/gcc.target/i386/pr87007-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011464ede0edbcb5512bf24374fe8805f654d82e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c?ref=011464ede0edbcb5512bf24374fe8805f654d82e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=skylake-avx512 -mfpmath=sse\" } */\n+\n+\n+#include<math.h>\n+\n+extern double d1, d2, d3;\n+void\n+foo (int n, int k)\n+{\n+  for (int i = 0; i != n; i++)\n+    if(i < k)\n+      d1 = sqrt (d2);\n+    else\n+      d1 = sqrt (d3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}]}