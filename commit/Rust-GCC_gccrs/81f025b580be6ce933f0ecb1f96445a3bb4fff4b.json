{"sha": "81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmMDI1YjU4MGJlNmNlOTMzZjBlY2IxZjk2NDQ1YTNiYjRmZmY0Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2020-01-07T23:13:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2020-01-07T23:13:24Z"}, "message": "compiler, runtime: stop using __go_runtime_error\n    \n    Use specific panic functions instead, which are mostly already in the\n    runtime package.\n    \n    Also correct \"defer nil\" to panic when we execute the defer, rather\n    than throw when we queue it.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/213642\n\nFrom-SVN: r279979", "tree": {"sha": "593e3698208109bb3b3071e6498865ec327c4f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593e3698208109bb3b3071e6498865ec327c4f34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/comments", "author": null, "committer": null, "parents": [{"sha": "7010bcd1c80e2a89f43c064ba21289df8c67a84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7010bcd1c80e2a89f43c064ba21289df8c67a84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7010bcd1c80e2a89f43c064ba21289df8c67a84c"}], "stats": {"total": 297, "additions": 61, "deletions": 236}, "files": [{"sha": "fbba6626cc4b1fd3b53bf2403e40d07e13cd912c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -1,4 +1,4 @@\n-86d223eaccecff72b44cd23a014bc028b658055e\n+6fa9657df508ff4d7760cf1abfad3611ba808561\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "af09138e7abaf0493be4e9912e0323ca4af6921c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -5270,13 +5270,13 @@ Unary_expression::do_get_backend(Translate_context* context)\n                 Bexpression* compare =\n                     gogo->backend()->binary_expression(OPERATOR_EQEQ, tbexpr,\n                                                        nil, loc);\n-                Bexpression* crash =\n-                    gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n-                                        loc)->get_backend(context);\n+\t\tExpression* crash = Runtime::make_call(Runtime::PANIC_MEM,\n+\t\t\t\t\t\t       loc, 0);\n+\t\tBexpression* bcrash = crash->get_backend(context);\n                 Bfunction* bfn = context->function()->func_value()->get_decl();\n                 bexpr = gogo->backend()->conditional_expression(bfn, btype,\n                                                                 compare,\n-                                                                crash, ubexpr,\n+                                                                bcrash, ubexpr,\n                                                                 loc);\n                 known_valid = true;\n                 break;\n@@ -7060,12 +7060,12 @@ Binary_expression::do_get_backend(Translate_context* context)\n \t  Bexpression* compare =\n \t    gogo->backend()->binary_expression(OPERATOR_LT, right, zero_expr,\n \t\t\t\t\t       loc);\n-\t  const int errcode = RUNTIME_ERROR_SHIFT_BY_NEGATIVE;\n-\t  Bexpression* crash =\n-\t    gogo->runtime_error(errcode, loc)->get_backend(context);\n+\t  Expression* crash = Runtime::make_call(Runtime::PANIC_SHIFT,\n+\t\t\t\t\t\t loc, 0);\n+\t  Bexpression* bcrash = crash->get_backend(context);\n \t  Bfunction* bfn = context->function()->func_value()->get_decl();\n \t  ret = gogo->backend()->conditional_expression(bfn, btype, compare,\n-\t\t\t\t\t\t\tcrash, ret, loc);\n+\t\t\t\t\t\t\tbcrash, ret, loc);\n \t}\n     }\n \n@@ -7081,15 +7081,14 @@ Binary_expression::do_get_backend(Translate_context* context)\n               gogo->backend()->binary_expression(OPERATOR_EQEQ,\n                                                  right, zero_expr, loc);\n \n-\t  // __go_runtime_error(RUNTIME_ERROR_DIVISION_BY_ZERO)\n-\t  int errcode = RUNTIME_ERROR_DIVISION_BY_ZERO;\n-\t  Bexpression* crash = gogo->runtime_error(errcode,\n-\t\t\t\t\t\t   loc)->get_backend(context);\n+\t  Expression* crash = Runtime::make_call(Runtime::PANIC_DIVIDE,\n+\t\t\t\t\t\t loc, 0);\n+\t  Bexpression* bcrash = crash->get_backend(context);\n \n-\t  // right == 0 ? (__go_runtime_error(...), 0) : ret\n+\t  // right == 0 ? (panicdivide(), 0) : ret\n           Bfunction* bfn = context->function()->func_value()->get_decl();\n           ret = gogo->backend()->conditional_expression(bfn, btype,\n-                                                        check, crash,\n+                                                        check, bcrash,\n \t\t\t\t\t\t\tret, loc);\n \t}\n \n@@ -8071,8 +8070,7 @@ Bound_method_expression::do_flatten(Gogo* gogo, Named_object*,\n \n   if (nil_check != NULL)\n     {\n-      Expression* crash = gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n-\t\t\t\t\t      loc);\n+      Expression* crash = Runtime::make_call(Runtime::PANIC_MEM, loc, 0);\n       // Fix the type of the conditional expression by pretending to\n       // evaluate to RET either way through the conditional.\n       crash = Expression::make_compound(crash, ret, loc);\n@@ -8886,11 +8884,8 @@ Builtin_call_expression::flatten_append(Gogo* gogo, Named_object* function,\n           Expression* zero = Expression::make_integer_ul(0, int_type, loc);\n           Expression* cond = Expression::make_binary(OPERATOR_LT, len2,\n                                                      zero, loc);\n-          Expression* arg =\n-            Expression::make_integer_ul(RUNTIME_ERROR_MAKE_SLICE_LEN_OUT_OF_BOUNDS,\n-                                        NULL, loc);\n-          Expression* call = Runtime::make_call(Runtime::RUNTIME_ERROR,\n-                                                loc, 1, arg);\n+\t  Expression* call = Runtime::make_call(Runtime::PANIC_MAKE_SLICE_LEN,\n+\t\t\t\t\t\tloc, 0);\n           cond = Expression::make_conditional(cond, call, zero->copy(), loc);\n           gogo->lower_expression(function, inserter, &cond);\n           gogo->flatten_expression(function, inserter, &cond);\n@@ -8901,9 +8896,7 @@ Builtin_call_expression::flatten_append(Gogo* gogo, Named_object* function,\n           Expression* cap2 = Expression::make_temporary_reference(c2tmp, loc);\n           cond = Expression::make_binary(OPERATOR_LT, cap2,\n                                          zero->copy(), loc);\n-          arg = Expression::make_integer_ul(RUNTIME_ERROR_MAKE_SLICE_CAP_OUT_OF_BOUNDS,\n-                                            NULL, loc);\n-          call = Runtime::make_call(Runtime::RUNTIME_ERROR, loc, 1, arg);\n+\t  call = Runtime::make_call(Runtime::PANIC_MAKE_SLICE_CAP, loc, 0);\n           cond = Expression::make_conditional(cond, call, zero->copy(), loc);\n           gogo->lower_expression(function, inserter, &cond);\n           gogo->flatten_expression(function, inserter, &cond);\n@@ -14416,8 +14409,8 @@ Interface_field_reference_expression::do_get_backend(Translate_context* context)\n                               Expression::make_nil(loc), loc);\n   Bexpression* bnil_check = nil_check->get_backend(context);\n \n-  Bexpression* bcrash = gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n-\t\t\t\t\t    loc)->get_backend(context);\n+  Expression* crash = Runtime::make_call(Runtime::PANIC_MEM, loc, 0);\n+  Bexpression* bcrash = crash->get_backend(context);\n \n   Bfunction* bfn = context->function()->func_value()->get_decl();\n   Bexpression* bcond ="}, {"sha": "212ef45a29c2a976551322f7ad2421b5d080d8c9", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -4887,17 +4887,6 @@ Gogo::build_recover_thunks()\n   this->traverse(&build_recover_thunks);\n }\n \n-// Build a call to the runtime error function.\n-\n-Expression*\n-Gogo::runtime_error(int code, Location location)\n-{\n-  Type* int32_type = Type::lookup_integer_type(\"int32\");\n-  Expression* code_expr = Expression::make_integer_ul(code, int32_type,\n-\t\t\t\t\t\t      location);\n-  return Runtime::make_call(Runtime::RUNTIME_ERROR, location, 1, code_expr);\n-}\n-\n // Look for named types to see whether we need to create an interface\n // method table.\n \n@@ -6346,9 +6335,8 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n \t    }\n \n \t  if (this->asm_name_ == \"runtime.gopanic\"\n+\t      || this->asm_name_.compare(0, 13, \"runtime.panic\") == 0\n \t      || this->asm_name_.compare(0, 15, \"runtime.goPanic\") == 0\n-\t      || this->asm_name_ == \"__go_runtime_error\"\n-              || this->asm_name_ == \"runtime.panicdottype\"\n               || this->asm_name_ == \"runtime.block\")\n \t    flags |= Backend::function_does_not_return;\n \t}"}, {"sha": "7d83119b698b9a3c0b8f80f94ef5f71a11679463", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -850,10 +850,6 @@ class Gogo\n   void\n   write_globals();\n \n-  // Build a call to the runtime error function.\n-  Expression*\n-  runtime_error(int code, Location);\n-\n   // Build required interface method tables.\n   void\n   build_interface_method_tables();\n@@ -3727,57 +3723,6 @@ class Translate_context\n   bool is_const_;\n };\n \n-// Runtime error codes.  These must match the values in\n-// libgo/runtime/go-runtime-error.c.\n-\n-// Slice index out of bounds: negative or larger than the length of\n-// the slice.\n-static const int RUNTIME_ERROR_SLICE_INDEX_OUT_OF_BOUNDS = 0;\n-\n-// Array index out of bounds.\n-static const int RUNTIME_ERROR_ARRAY_INDEX_OUT_OF_BOUNDS = 1;\n-\n-// String index out of bounds.\n-static const int RUNTIME_ERROR_STRING_INDEX_OUT_OF_BOUNDS = 2;\n-\n-// Slice slice out of bounds: negative or larger than the length of\n-// the slice or high bound less than low bound.\n-static const int RUNTIME_ERROR_SLICE_SLICE_OUT_OF_BOUNDS = 3;\n-\n-// Array slice out of bounds.\n-static const int RUNTIME_ERROR_ARRAY_SLICE_OUT_OF_BOUNDS = 4;\n-\n-// String slice out of bounds.\n-static const int RUNTIME_ERROR_STRING_SLICE_OUT_OF_BOUNDS = 5;\n-\n-// Dereference of nil pointer.  This is used when there is a\n-// dereference of a pointer to a very large struct or array, to ensure\n-// that a gigantic array is not used a proxy to access random memory\n-// locations.\n-static const int RUNTIME_ERROR_NIL_DEREFERENCE = 6;\n-\n-// Slice length out of bounds in make: negative or overflow\n-// or length greater than capacity.\n-static const int RUNTIME_ERROR_MAKE_SLICE_LEN_OUT_OF_BOUNDS = 7;\n-\n-// Slice capacity out of bounds in make: negative.\n-static const int RUNTIME_ERROR_MAKE_SLICE_CAP_OUT_OF_BOUNDS = 8;\n-\n-// Map capacity out of bounds in make: negative or overflow.\n-static const int RUNTIME_ERROR_MAKE_MAP_OUT_OF_BOUNDS = 9;\n-\n-// Channel capacity out of bounds in make: negative or overflow.\n-static const int RUNTIME_ERROR_MAKE_CHAN_OUT_OF_BOUNDS = 10;\n-\n-// Division by zero.\n-static const int RUNTIME_ERROR_DIVISION_BY_ZERO = 11;\n-\n-// Go statement with nil function.\n-static const int RUNTIME_ERROR_GO_NIL = 12;\n-\n-// Shift by negative value.\n-static const int RUNTIME_ERROR_SHIFT_BY_NEGATIVE = 13;\n-\n // This is used by some of the langhooks.\n extern Gogo* go_get_gogo();\n "}, {"sha": "2ef0f94133dad75112c42920ab45ea33e5ed79f8", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -243,9 +243,6 @@ DEF_GO_RUNTIME(CHECKDEFER, \"runtime.checkdefer\", P1(BOOLPTR), R0())\n // Run deferred functions.\n DEF_GO_RUNTIME(DEFERRETURN, \"runtime.deferreturn\", P1(BOOLPTR), R0())\n \n-// Panic with a runtime error.\n-DEF_GO_RUNTIME(RUNTIME_ERROR, \"__go_runtime_error\", P1(INT32), R0())\n-\n \n // Close.\n DEF_GO_RUNTIME(CLOSE, \"runtime.closechan\", P1(CHAN), R0())\n@@ -499,6 +496,24 @@ DEF_GO_RUNTIME(ATOMIC_OR_FETCH_1, \"__atomic_or_fetch_1\",\n                P3(POINTER, UINT8, INT32),\n                R1(UINT8))\n \n+// Panic reporting a division by zero.\n+DEF_GO_RUNTIME(PANIC_DIVIDE, \"runtime.panicdivide\", P0(), R0())\n+\n+// Panic reporting a shift by negative count.\n+DEF_GO_RUNTIME(PANIC_SHIFT, \"runtime.panicshift\", P0(), R0())\n+\n+// Panic reporting a nil dereference.\n+DEF_GO_RUNTIME(PANIC_MEM, \"runtime.panicmem\", P0(), R0())\n+\n+// Panic reporting that make's slice len argument is out of range.\n+DEF_GO_RUNTIME(PANIC_MAKE_SLICE_LEN, \"runtime.panicmakeslicelen\", P0(), R0())\n+\n+// Panic reporting that make's slice cap argument is out of range.\n+DEF_GO_RUNTIME(PANIC_MAKE_SLICE_CAP, \"runtime.panicmakeslicecap\", P0(), R0())\n+\n+// Panic reporting using go with a nil function.\n+DEF_GO_RUNTIME(PANIC_GO_NIL, \"runtime.panicgonil\", P0(), R0())\n+\n // Panics reporting an index or slice out of bounds error.\n DEF_GO_RUNTIME(PANIC_INDEX, \"runtime.goPanicIndex\",\n \t       P2(INT, INT), R0())"}, {"sha": "a059ee4d0d9a26a38497c379e5fbde242e14678c", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -2597,13 +2597,14 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   // nil` we get a backtrace from the go statement, rather than a\n   // useless backtrace from the brand new goroutine.\n   Expression* param = constructor;\n-  if (!is_constant_function)\n+  if (!is_constant_function && this->classification() == STATEMENT_GO)\n     {\n       fn = Expression::make_temporary_reference(fn_temp, location);\n       Expression* nil = Expression::make_nil(location);\n       Expression* isnil = Expression::make_binary(OPERATOR_EQEQ, fn, nil,\n \t\t\t\t\t\t  location);\n-      Expression* crash = gogo->runtime_error(RUNTIME_ERROR_GO_NIL, location);\n+      Expression* crash = Runtime::make_call(Runtime::PANIC_GO_NIL,\n+\t\t\t\t\t     location, 0);\n       crash = Expression::make_conditional(isnil, crash,\n \t\t\t\t\t   Expression::make_nil(location),\n \t\t\t\t\t   location);"}, {"sha": "4b2dd58d40aab0b2b20c73d2196cbe95ecd688d3", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -438,7 +438,6 @@ runtime_files = \\\n \truntime/go-now.c \\\n \truntime/go-nosys.c \\\n \truntime/go-reflect-call.c \\\n-\truntime/go-runtime-error.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\\n \truntime/go-unsafe-pointer.c \\"}, {"sha": "72c6f9c88866d8b4c6a0fc7c744dd7568e117d5d", "filename": "libgo/Makefile.in", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -242,13 +242,13 @@ am__objects_4 = runtime/aeshash.lo runtime/go-assert.lo \\\n \truntime/go-matherr.lo runtime/go-memclr.lo \\\n \truntime/go-memequal.lo runtime/go-nanotime.lo \\\n \truntime/go-now.lo runtime/go-nosys.lo \\\n-\truntime/go-reflect-call.lo runtime/go-runtime-error.lo \\\n-\truntime/go-setenv.lo runtime/go-signal.lo \\\n-\truntime/go-unsafe-pointer.lo runtime/go-unsetenv.lo \\\n-\truntime/go-unwind.lo runtime/go-varargs.lo \\\n-\truntime/env_posix.lo runtime/panic.lo runtime/print.lo \\\n-\truntime/proc.lo runtime/runtime_c.lo runtime/stack.lo \\\n-\truntime/yield.lo $(am__objects_2) $(am__objects_3)\n+\truntime/go-reflect-call.lo runtime/go-setenv.lo \\\n+\truntime/go-signal.lo runtime/go-unsafe-pointer.lo \\\n+\truntime/go-unsetenv.lo runtime/go-unwind.lo \\\n+\truntime/go-varargs.lo runtime/env_posix.lo runtime/panic.lo \\\n+\truntime/print.lo runtime/proc.lo runtime/runtime_c.lo \\\n+\truntime/stack.lo runtime/yield.lo $(am__objects_2) \\\n+\t$(am__objects_3)\n am_libgo_llgo_la_OBJECTS = $(am__objects_4)\n libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n@@ -884,7 +884,6 @@ runtime_files = \\\n \truntime/go-now.c \\\n \truntime/go-nosys.c \\\n \truntime/go-reflect-call.c \\\n-\truntime/go-runtime-error.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\\n \truntime/go-unsafe-pointer.c \\\n@@ -1333,8 +1332,6 @@ runtime/go-nosys.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-reflect-call.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n-runtime/go-runtime-error.lo: runtime/$(am__dirstamp) \\\n-\truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-setenv.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-signal.lo: runtime/$(am__dirstamp) \\\n@@ -1398,7 +1395,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-nosys.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-now.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-reflect-call.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-runtime-error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-setenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-signal.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@"}, {"sha": "9667181c99fc4993e7e9ee39a8b5e248c559ad0e", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -38,6 +38,8 @@ import (\n //go:linkname goPanicSlice3BU\n //go:linkname goPanicSlice3C\n //go:linkname goPanicSlice3CU\n+//go:linkname panicshift\n+//go:linkname panicdivide\n //go:linkname panicmem\n // Temporary for C code to call:\n //go:linkname throw"}, {"sha": "a025137f367a10c41db33dabae43627990dea579", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -3157,6 +3157,14 @@ func syscall_runtime_AfterExec() {\n \texecLock.unlock()\n }\n \n+// panicgonil is used for gccgo as we need to use a compiler check for\n+// a nil func, in case we have to build a thunk.\n+//go:linkname panicgonil\n+func panicgonil() {\n+\tgetg().m.throwing = -1 // do not dump full stacks\n+\tthrow(\"go of nil func value\")\n+}\n+\n // Create a new g running fn passing arg as the single argument.\n // Put it on the queue of g's waiting to run.\n // The compiler turns a go statement into a call to this."}, {"sha": "49d5a8610541450ec751cfc297178dd3ea1bdca0", "filename": "libgo/go/runtime/slice.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fslice.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f025b580be6ce933f0ecb1f96445a3bb4fff4b/libgo%2Fgo%2Fruntime%2Fslice.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fslice.go?ref=81f025b580be6ce933f0ecb1f96445a3bb4fff4b", "patch": "@@ -12,6 +12,8 @@ import (\n \n // For gccgo, use go:linkname to export compiler-called functions.\n //\n+//go:linkname panicmakeslicelen\n+//go:linkname panicmakeslicecap\n //go:linkname makeslice\n //go:linkname makeslice64\n //go:linkname growslice"}, {"sha": "8179e685ef785c065d6721860f16dae206c17970", "filename": "libgo/runtime/go-runtime-error.c", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7010bcd1c80e2a89f43c064ba21289df8c67a84c/libgo%2Fruntime%2Fgo-runtime-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7010bcd1c80e2a89f43c064ba21289df8c67a84c/libgo%2Fruntime%2Fgo-runtime-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-runtime-error.c?ref=7010bcd1c80e2a89f43c064ba21289df8c67a84c", "patch": "@@ -1,124 +0,0 @@\n-/* go-runtime-error.c -- Go runtime error.\n-\n-   Copyright 2010 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"runtime.h\"\n-\n-/* The compiler generates calls to this function.  This enum values\n-   are known to the compiler and used by compiled code.  Any change\n-   here must be reflected in the compiler.  */\n-\n-enum\n-{\n-  /* Slice index out of bounds: negative or larger than the length of\n-     the slice.  */\n-  SLICE_INDEX_OUT_OF_BOUNDS = 0,\n-\n-  /* Array index out of bounds.  */\n-  ARRAY_INDEX_OUT_OF_BOUNDS = 1,\n-\n-  /* String index out of bounds.  */\n-  STRING_INDEX_OUT_OF_BOUNDS = 2,\n-\n-  /* Slice slice out of bounds: negative or larger than the length of\n-     the slice or high bound less than low bound.  */\n-  SLICE_SLICE_OUT_OF_BOUNDS = 3,\n-\n-  /* Array slice out of bounds.  */\n-  ARRAY_SLICE_OUT_OF_BOUNDS = 4,\n-\n-  /* String slice out of bounds.  */\n-  STRING_SLICE_OUT_OF_BOUNDS = 5,\n-\n-  /* Dereference of nil pointer.  This is used when there is a\n-     dereference of a pointer to a very large struct or array, to\n-     ensure that a gigantic array is not used a proxy to access random\n-     memory locations.  */\n-  NIL_DEREFERENCE = 6,\n-\n-  /* Slice length out of bounds in make: negative or overflow or length\n-     greater than capacity.  */\n-  MAKE_SLICE_LEN_OUT_OF_BOUNDS = 7,\n-\n-  /* Slice capacity out of bounds in make: negative.  */\n-  MAKE_SLICE_CAP_OUT_OF_BOUNDS = 8,\n-\n-  /* Map capacity out of bounds in make: negative or overflow.  */\n-  MAKE_MAP_OUT_OF_BOUNDS = 9,\n-\n-  /* Channel capacity out of bounds in make: negative or overflow.  */\n-  MAKE_CHAN_OUT_OF_BOUNDS = 10,\n-\n-  /* Integer division by zero.  */\n-  DIVISION_BY_ZERO = 11,\n-\n-  /* Go statement with nil function.  */\n-  GO_NIL = 12,\n-\n-  /* Shift by negative value.  */\n-  SHIFT_BY_NEGATIVE = 13\n-};\n-\n-extern void __go_runtime_error (int32) __attribute__ ((noreturn));\n-\n-void\n-__go_runtime_error (int32 i)\n-{\n-  struct funcfileline_return fileline;\n-  bool in_runtime;\n-\n-  fileline = runtime_funcfileline ((uintptr) runtime_getcallerpc()-1, 0);\n-  in_runtime = (fileline.retfn.len > 0\n-\t\t&& (__builtin_strncmp ((const char *) fileline.retfn.str,\n-\t\t\t\t      \"runtime.\", 8)\n-\t\t    == 0));\n-\n-  switch (i)\n-    {\n-    case SLICE_INDEX_OUT_OF_BOUNDS:\n-    case ARRAY_INDEX_OUT_OF_BOUNDS:\n-    case STRING_INDEX_OUT_OF_BOUNDS:\n-      if (in_runtime)\n-\truntime_throw (\"index out of range\");\n-      runtime_panicstring (\"index out of range\");\n-\n-    case SLICE_SLICE_OUT_OF_BOUNDS:\n-    case ARRAY_SLICE_OUT_OF_BOUNDS:\n-    case STRING_SLICE_OUT_OF_BOUNDS:\n-      if (in_runtime)\n-\truntime_throw (\"slice bounds out of range\");\n-      runtime_panicstring (\"slice bounds out of range\");\n-\n-    case NIL_DEREFERENCE:\n-      runtime_panicstring (\"nil pointer dereference\");\n-\n-    case MAKE_SLICE_LEN_OUT_OF_BOUNDS:\n-      runtime_panicstring (\"make slice len out of range\");\n-\n-    case MAKE_SLICE_CAP_OUT_OF_BOUNDS:\n-      runtime_panicstring (\"make slice cap out of range\");\n-\n-    case MAKE_MAP_OUT_OF_BOUNDS:\n-      runtime_panicstring (\"make map len out of range\");\n-\n-    case MAKE_CHAN_OUT_OF_BOUNDS:\n-      runtime_panicstring (\"make chan len out of range\");\n-\n-    case DIVISION_BY_ZERO:\n-      runtime_panicstring (\"integer divide by zero\");\n-\n-    case GO_NIL:\n-      /* This one is a throw, rather than a panic.  Set throwing to\n-\t not dump full stacks.  */\n-      runtime_g()->m->throwing = -1;\n-      runtime_throw (\"go of nil func value\");\n-\n-    case SHIFT_BY_NEGATIVE:\n-      runtime_panicstring (\"negative shift amount\");\n-\n-    default:\n-      runtime_panicstring (\"unknown runtime error\");\n-    }\n-}"}]}