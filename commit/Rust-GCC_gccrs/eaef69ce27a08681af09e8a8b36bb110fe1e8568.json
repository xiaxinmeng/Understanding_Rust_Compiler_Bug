{"sha": "eaef69ce27a08681af09e8a8b36bb110fe1e8568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlZjY5Y2UyN2EwODY4MWFmMDllOGE4YjM2YmIxMTBmZTFlODU2OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-16T23:51:18Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-16T23:51:18Z"}, "message": "cp-treeh (BINFO_NEW_VTABLE_MARKED): Update documentation.\n\n\t* cp-treeh (BINFO_NEW_VTABLE_MARKED): Update documentation.\n\t* init.c (dfs_vtable_path_unmark): Remove.\n\t* search.c (marked_new_vtable_p): Likewise.\n\t(unmarked_new_vtable_p): Likewise.\n\t(dfs_search_slot_nonempty_p): Likewise.\n\t(dfs_mark): Likewise.\n\t(dfs_vtable_path_unmark): Likewise.\n\t(dfs_find_vbases): Don't set BINFO_NEW_VTABLE_MARKED.\n\t(dfs_int_vbase_pointers): Don't clear BINFO_VTABLE_PATH_MARKED.\n\t(dfs_init_vbase_pointers): Remove special-case new ABI code.\n\t(dfs_clear_vbase_slots): Don't clear BINFO_NEW_VTABLE_MARKED.\n\t(init_vbase_pointers): Simplify.\n\t(expand_indirect_vtbls_init): Likewise.\n\nFrom-SVN: r33948", "tree": {"sha": "2513cfd0aae166479bdc6c06fe739de00f47d50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2513cfd0aae166479bdc6c06fe739de00f47d50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaef69ce27a08681af09e8a8b36bb110fe1e8568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef69ce27a08681af09e8a8b36bb110fe1e8568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaef69ce27a08681af09e8a8b36bb110fe1e8568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef69ce27a08681af09e8a8b36bb110fe1e8568/comments", "author": null, "committer": null, "parents": [{"sha": "13fa202991ba0b58b062e222d92a8f0d2fc886ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fa202991ba0b58b062e222d92a8f0d2fc886ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13fa202991ba0b58b062e222d92a8f0d2fc886ac"}], "stats": {"total": 89, "additions": 28, "deletions": 61}, "files": [{"sha": "1400181faa193d91823cb39a7d713e5eaa92b0d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eaef69ce27a08681af09e8a8b36bb110fe1e8568", "patch": "@@ -1,5 +1,19 @@\n 2000-05-16  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-treeh (BINFO_NEW_VTABLE_MARKED): Update documentation.\n+\t* init.c (dfs_vtable_path_unmark): Remove.\n+\t* search.c (marked_new_vtable_p): Likewise.\n+\t(unmarked_new_vtable_p): Likewise.\n+\t(dfs_search_slot_nonempty_p): Likewise.\n+\t(dfs_mark): Likewise.\n+\t(dfs_vtable_path_unmark): Likewise.\n+\t(dfs_find_vbases): Don't set BINFO_NEW_VTABLE_MARKED.\n+\t(dfs_int_vbase_pointers): Don't clear BINFO_VTABLE_PATH_MARKED.\n+\t(dfs_init_vbase_pointers): Remove special-case new ABI code.\n+\t(dfs_clear_vbase_slots): Don't clear BINFO_NEW_VTABLE_MARKED.\n+\t(init_vbase_pointers): Simplify.\n+\t(expand_indirect_vtbls_init): Likewise.\n+\n \t* class.c (copy_virtuals): New function.\n \t(build_primary_table): Use it.\n \t(build_secondary_vtable): Likewise."}, {"sha": "fc5cf2cf7491623cdacebca2f14d191e07a12394", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eaef69ce27a08681af09e8a8b36bb110fe1e8568", "patch": "@@ -1740,8 +1740,11 @@ struct lang_type\n #define SET_BINFO_VTABLE_PATH_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?SET_CLASSTYPE_MARKED3(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_3(NODE)=1))\n #define CLEAR_BINFO_VTABLE_PATH_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?CLEAR_CLASSTYPE_MARKED3(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_3(NODE)=0))\n \n-/* Nonzero means B (a BINFO) needs a new vtable.  B is part of the\n-   hierarchy dominated by C.  */\n+/* Nonzero means B (a BINFO) has its own vtable.  Under the old ABI,\n+   secondary vtables are sometimes shared.  Any copies will not have\n+   this flag set.\n+\n+   B is part of the hierarchy dominated by C.  */\n #define BINFO_NEW_VTABLE_MARKED(B, C) \\\n   (TREE_LANG_FLAG_4 (CANONICAL_BINFO (B, C)))\n #define SET_BINFO_NEW_VTABLE_MARKED(B, C) \\\n@@ -4351,7 +4354,6 @@ extern tree dfs_walk_real                      PARAMS ((tree,\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       void *));\n extern tree dfs_unmark                          PARAMS ((tree, void *));\n-extern tree dfs_vtable_path_unmark              PARAMS ((tree, void *));\n extern tree markedp                             PARAMS ((tree, void *));\n extern tree unmarkedp                           PARAMS ((tree, void *));\n extern tree dfs_skip_nonprimary_vbases_unmarkedp PARAMS ((tree, void *));"}, {"sha": "b296ea5de2dc7741016bd842cdfe3feb6af745b8", "filename": "gcc/cp/search.c", "status": "modified", "additions": 9, "deletions": 58, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaef69ce27a08681af09e8a8b36bb110fe1e8568/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=eaef69ce27a08681af09e8a8b36bb110fe1e8568", "patch": "@@ -104,8 +104,6 @@ static void expand_upcast_fixups\n static void fixup_virtual_upcast_offsets\n \tPARAMS ((tree, tree, int, int, tree, tree, tree, tree,\n \t       tree *));\n-static tree marked_new_vtablep PARAMS ((tree, void *));\n-static tree unmarked_new_vtablep PARAMS ((tree, void *));\n static tree marked_pushdecls_p PARAMS ((tree, void *));\n static tree unmarked_pushdecls_p PARAMS ((tree, void *));\n static tree dfs_debug_unmarkedp PARAMS ((tree, void *));\n@@ -2442,26 +2440,6 @@ unmarked_vtable_pathp (binfo, data)\n   return !BINFO_VTABLE_PATH_MARKED (binfo) ? binfo : NULL_TREE; \n }\n \n-static tree \n-marked_new_vtablep (binfo, data) \n-     tree binfo;\n-     void *data;\n-{\n-  struct vbase_info *vi = (struct vbase_info *) data;\n-\n-  return BINFO_NEW_VTABLE_MARKED (binfo, vi->type) ? binfo : NULL_TREE; \n-}\n-\n-static tree\n-unmarked_new_vtablep (binfo, data) \n-     tree binfo;\n-     void *data;\n-{ \n-  struct vbase_info *vi = (struct vbase_info *) data;\n-\n-  return !BINFO_NEW_VTABLE_MARKED (binfo, vi->type) ? binfo : NULL_TREE; \n-}\n-\n static tree\n marked_pushdecls_p (binfo, data) \n      tree binfo;\n@@ -2480,21 +2458,10 @@ unmarked_pushdecls_p (binfo, data)\n \t  && !BINFO_PUSHDECLS_MARKED (binfo)) ? binfo : NULL_TREE;\n }\n \n-#if 0\n-static int dfs_search_slot_nonempty_p (binfo) tree binfo;\n-{ return CLASSTYPE_SEARCH_SLOT (BINFO_TYPE (binfo)) != 0; }\n-#endif\n-\n /* The worker functions for `dfs_walk'.  These do not need to\n    test anything (vis a vis marking) if they are paired with\n    a predicate function (above).  */\n \n-#if 0\n-static void\n-dfs_mark (binfo) tree binfo;\n-{ SET_BINFO_MARKED (binfo); }\n-#endif\n-\n tree\n dfs_unmark (binfo, data) \n      tree binfo;\n@@ -2504,17 +2471,6 @@ dfs_unmark (binfo, data)\n   return NULL_TREE;\n }\n \n-/* Clear BINFO_VTABLE_PATH_MARKED.  */\n-\n-tree\n-dfs_vtable_path_unmark (binfo, data)\n-     tree binfo;\n-     void *data ATTRIBUTE_UNUSED;\n-{ \n-  CLEAR_BINFO_VTABLE_PATH_MARKED (binfo); \n-  return NULL_TREE;\n-}\n-\n \f\n /*  Attach to the type of the virtual base class, the pointer to the\n     virtual base class.  */\n@@ -2545,7 +2501,6 @@ dfs_find_vbases (binfo, data)\n \t}\n     }\n   SET_BINFO_VTABLE_PATH_MARKED (binfo);\n-  SET_BINFO_NEW_VTABLE_MARKED (binfo, vi->type);\n \n   return NULL_TREE;\n }\n@@ -2560,8 +2515,6 @@ dfs_init_vbase_pointers (binfo, data)\n   tree fields;\n   tree this_vbase_ptr;\n \n-  CLEAR_BINFO_VTABLE_PATH_MARKED (binfo);\n-\n   if (BINFO_INHERITANCE_CHAIN (binfo))\n     {\n       this_vbase_ptr = TREE_CHAIN (BINFO_INHERITANCE_CHAIN (binfo));\n@@ -2578,10 +2531,6 @@ dfs_init_vbase_pointers (binfo, data)\n   /* We're going to iterate through all the pointers to virtual\n      base-classes.  They come at the beginning of the class.  */\n   fields = TYPE_FIELDS (type);\n-  if (fields == TYPE_VFIELD (type))\n-    /* If the first field is the vtbl pointer (as happens in the new\n-       ABI), skip it.  */\n-    fields = TREE_CHAIN (fields);\n \n   if (fields == NULL_TREE\n       || DECL_NAME (fields) == NULL_TREE\n@@ -2614,14 +2563,12 @@ dfs_init_vbase_pointers (binfo, data)\n static tree\n dfs_clear_vbase_slots (binfo, data)\n      tree binfo;\n-     void *data;\n+     void *data ATTRIBUTE_UNUSED;\n {\n   tree type = BINFO_TYPE (binfo);\n-  struct vbase_info *vi = (struct vbase_info *) data;\n \n   CLASSTYPE_SEARCH_SLOT (type) = 0;\n   CLEAR_BINFO_VTABLE_PATH_MARKED (binfo);\n-  CLEAR_BINFO_NEW_VTABLE_MARKED (binfo, vi->type);\n   return NULL_TREE;\n }\n \n@@ -2630,6 +2577,8 @@ init_vbase_pointers (type, decl_ptr)\n      tree type;\n      tree decl_ptr;\n {\n+  my_friendly_assert (!vbase_offsets_in_vtable_p (), 20000516);\n+\n   if (TYPE_USES_VIRTUAL_BASECLASSES (type))\n     {\n       struct vbase_info vi;\n@@ -2653,7 +2602,7 @@ init_vbase_pointers (type, decl_ptr)\n \t\t     marked_vtable_pathp,\n \t\t     &vi);\n \n-      dfs_walk (binfo, dfs_clear_vbase_slots, marked_new_vtablep, &vi);\n+      dfs_walk (binfo, dfs_clear_vbase_slots, marked_vtable_pathp, NULL);\n       flag_this_is_variable = old_flag;\n       return vi.inits;\n     }\n@@ -2950,7 +2899,9 @@ expand_indirect_vtbls_init (binfo, decl_ptr)\n      tree binfo;\n      tree decl_ptr;\n {\n-  tree type = BINFO_TYPE (binfo);\n+  tree type;\n+\n+  type = BINFO_TYPE (binfo);\n \n   /* This function executes during the finish_function() segment,\n      AFTER the auto variables and temporary stack space has been marked\n@@ -2971,9 +2922,9 @@ expand_indirect_vtbls_init (binfo, decl_ptr)\n       vi.decl_ptr = decl_ptr;\n       vi.vbase_types = vbases;\n \n-      dfs_walk (binfo, dfs_find_vbases, unmarked_new_vtablep, &vi);\n+      dfs_walk (binfo, dfs_find_vbases, NULL, &vi);\n       fixup_all_virtual_upcast_offsets (type, vi.decl_ptr);\n-      dfs_walk (binfo, dfs_clear_vbase_slots, marked_new_vtablep, &vi);\n+      dfs_walk (binfo, dfs_clear_vbase_slots, marked_vtable_pathp, &vi);\n     }\n }\n "}]}