{"sha": "f230adf6179df01a709bacc8e7e83a160d04aeb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzMGFkZjYxNzlkZjAxYTcwOWJhY2M4ZTdlODNhMTYwZDA0YWViMg==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-30T17:41:40Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "Compile conditional expressions if/if-else/if-elif-else", "tree": {"sha": "6652a869e12bb2f6934b7674fe90a3ea317071d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6652a869e12bb2f6934b7674fe90a3ea317071d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f230adf6179df01a709bacc8e7e83a160d04aeb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f230adf6179df01a709bacc8e7e83a160d04aeb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f230adf6179df01a709bacc8e7e83a160d04aeb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f230adf6179df01a709bacc8e7e83a160d04aeb2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9ddc71985f33dbe9e22a3dff99533f881f5ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9ddc71985f33dbe9e22a3dff99533f881f5ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9ddc71985f33dbe9e22a3dff99533f881f5ba1"}], "stats": {"total": 134, "additions": 122, "deletions": 12}, "files": [{"sha": "3eb2f5d8f5ad09d36606325cf5c27d4082cbee48", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=f230adf6179df01a709bacc8e7e83a160d04aeb2", "patch": "@@ -1970,7 +1970,7 @@ IfExprConseqIf::as_string () const\n {\n   ::std::string str = IfExpr::as_string ();\n \n-  str += \"\\n Else if expr: \\n  \" + if_expr->as_string ();\n+  str += \"\\n Else if expr: \\n  \" + conseq_if_expr->as_string ();\n \n   return str;\n }"}, {"sha": "ea66884fc379e9bf6c750507a765519b95bd589c", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=f230adf6179df01a709bacc8e7e83a160d04aeb2", "patch": "@@ -4195,6 +4195,14 @@ class IfExpr : public ExprWithBlock\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  void vis_if_condition (ASTVisitor &vis) { condition->accept_vis (vis); }\n+\n+  void vis_if_block (ASTVisitor &vis) { if_block->accept_vis (vis); }\n+\n+  Expr *get_if_condition () { return condition.get (); }\n+\n+  BlockExpr *get_if_block () { return if_block.get (); }\n+\n protected:\n   // Use covariance to implement clone function as returning this object rather\n   // than base\n@@ -4259,6 +4267,8 @@ class IfExprConseqElse : public IfExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  void vis_else_block (ASTVisitor &vis) { else_block->accept_vis (vis); }\n+\n protected:\n   // Use covariance to implement clone function as returning this object rather\n   // than base\n@@ -4286,7 +4296,7 @@ class IfExprConseqElse : public IfExpr\n class IfExprConseqIf : public IfExpr\n {\n   // IfExpr* if_expr;\n-  ::std::unique_ptr<IfExpr> if_expr;\n+  ::std::unique_ptr<IfExpr> conseq_if_expr;\n \n public:\n   /*~IfExprConseqIf() {\n@@ -4299,13 +4309,13 @@ class IfExprConseqIf : public IfExpr\n \t\t  ::std::unique_ptr<BlockExpr> if_block,\n \t\t  ::std::unique_ptr<IfExpr> conseq_if_expr, Location locus)\n     : IfExpr (::std::move (condition), ::std::move (if_block), locus),\n-      if_expr (::std::move (conseq_if_expr))\n+      conseq_if_expr (::std::move (conseq_if_expr))\n   {}\n   // outer attributes not allowed\n \n   // Copy constructor with clone\n   IfExprConseqIf (IfExprConseqIf const &other)\n-    : IfExpr (other), if_expr (other.if_expr->clone_if_expr ())\n+    : IfExpr (other), conseq_if_expr (other.conseq_if_expr->clone_if_expr ())\n   {}\n \n   // Destructor - define here if required\n@@ -4316,7 +4326,7 @@ class IfExprConseqIf : public IfExpr\n     IfExpr::operator= (other);\n     // condition = other.condition->clone_expr();\n     // if_block = other.if_block->clone_block_expr();\n-    if_expr = other.if_expr->clone_if_expr ();\n+    conseq_if_expr = other.conseq_if_expr->clone_if_expr ();\n \n     return *this;\n   }\n@@ -4327,6 +4337,11 @@ class IfExprConseqIf : public IfExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  void vis_conseq_if_expr (ASTVisitor &vis)\n+  {\n+    conseq_if_expr->accept_vis (vis);\n+  }\n+\n protected:\n   // Use covariance to implement clone function as returning this object rather\n   // than base"}, {"sha": "69245dc0097066a83a56c95e82bff9b90d90e664", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 101, "deletions": 7, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=f230adf6179df01a709bacc8e7e83a160d04aeb2", "patch": "@@ -170,7 +170,6 @@ Compilation::visit (AST::AttrInputMetaItemContainer &input)\n void\n Compilation::visit (AST::IdentifierExpr &ident_expr)\n {\n-  printf (\"IdentifierExpr: %s\\n\", ident_expr.as_string ().c_str ());\n   Bvariable *var = NULL;\n   if (!scope.LookupVar (ident_expr.as_string (), &var))\n     {\n@@ -581,9 +580,27 @@ Compilation::visit (AST::FieldAccessExpr &expr)\n void\n Compilation::visit (AST::ClosureExprInner &expr)\n {}\n+\n void\n Compilation::visit (AST::BlockExpr &expr)\n-{}\n+{\n+  Bblock *enclosingScope = NULL;\n+  Location start_location; /* = stmt.locus; FIXME */\n+  Location end_location;   // FIXME\n+\n+  std::vector<Bvariable *> vars;\n+  auto code_block\n+    = backend->block (scope.GetCurrentFndecl (), scope.CurBlock (), vars,\n+\t\t      start_location, end_location);\n+\n+  scope.PushBlock (code_block);\n+  for (auto &stmt : expr.statements)\n+    {\n+      stmt->accept_vis (*this);\n+    }\n+  // dont pop\n+}\n+\n void\n Compilation::visit (AST::ClosureExprInnerTyped &expr)\n {}\n@@ -653,18 +670,89 @@ Compilation::visit (AST::ForLoopExpr &expr)\n void\n Compilation::visit (AST::IfExpr &expr)\n {\n-  printf (\"IfExpr %s\\n\", expr.as_string ().c_str ());\n+  Bexpression *cond = NULL;\n+  VISIT_POP (expr.get_if_condition ()->get_locus_slow (),\n+\t     expr.get_if_condition (), cond, exprs);\n+  if (cond == NULL)\n+    {\n+      rust_error_at (expr.get_if_condition ()->get_locus_slow (),\n+\t\t     \"failed to compile\");\n+      return;\n+    }\n+\n+  expr.vis_if_block (*this);\n+  Bblock *then_block = scope.PopBlock ();\n+\n+  auto stmt = backend->if_statement (scope.GetCurrentFndecl (), cond,\n+\t\t\t\t     then_block, NULL, expr.get_locus_slow ());\n+  stmts.push_back (stmt);\n }\n+\n void\n Compilation::visit (AST::IfExprConseqElse &expr)\n {\n-  printf (\"IfExprConseqElse %s\\n\", expr.as_string ().c_str ());\n+  Bexpression *cond = NULL;\n+  VISIT_POP (expr.get_if_condition ()->get_locus_slow (),\n+\t     expr.get_if_condition (), cond, exprs);\n+  if (cond == NULL)\n+    {\n+      rust_error_at (expr.get_if_condition ()->get_locus_slow (),\n+\t\t     \"failed to compile\");\n+      return;\n+    }\n+\n+  expr.vis_if_block (*this);\n+  Bblock *then_block = scope.PopBlock ();\n+\n+  expr.vis_else_block (*this);\n+  Bblock *else_block = scope.PopBlock ();\n+\n+  auto stmt\n+    = backend->if_statement (scope.GetCurrentFndecl (), cond, then_block,\n+\t\t\t     else_block, expr.get_locus_slow ());\n+  stmts.push_back (stmt);\n }\n+\n void\n Compilation::visit (AST::IfExprConseqIf &expr)\n {\n-  printf (\"IfExprConseqIf %s\\n\", expr.as_string ().c_str ());\n+  Bexpression *cond = NULL;\n+  VISIT_POP (expr.get_if_condition ()->get_locus_slow (),\n+\t     expr.get_if_condition (), cond, exprs);\n+  if (cond == NULL)\n+    {\n+      rust_error_at (expr.get_if_condition ()->get_locus_slow (),\n+\t\t     \"failed to compile\");\n+      return;\n+    }\n+\n+  expr.vis_if_block (*this);\n+  Bblock *then_block = scope.PopBlock ();\n+\n+  // setup else block\n+  Bblock *enclosingScope = NULL;\n+  Location start_location; /* = stmt.locus; FIXME */\n+  Location end_location;   // FIXME\n+\n+  std::vector<Bvariable *> vars;\n+  auto else_block\n+    = backend->block (scope.GetCurrentFndecl (), scope.CurBlock (), vars,\n+\t\t      start_location, end_location);\n+\n+  scope.PushBlock (else_block);\n+  expr.vis_conseq_if_expr (*this);\n+  // get trailing if required\n+  for (auto &s : stmts)\n+    scope.AddStatement (s);\n+  stmts.clear ();\n+  scope.PopBlock ();\n+\n+  auto stmt\n+    = backend->if_statement (scope.GetCurrentFndecl (), cond, then_block,\n+\t\t\t     else_block, expr.get_locus_slow ());\n+  stmts.push_back (stmt);\n }\n+\n void\n Compilation::visit (AST::IfExprConseqIfLet &expr)\n {\n@@ -1104,8 +1192,6 @@ Compilation::visit (AST::ExprStmtWithoutBlock &stmt)\n void\n Compilation::visit (AST::ExprStmtWithBlock &stmt)\n {\n-  printf (\"ExprStmtWithBlock: %s\\n\", stmt.as_string ().c_str ());\n-\n   Bblock *enclosingScope = NULL;\n   Location start_location; /* = stmt.locus; FIXME */\n   Location end_location;   // FIXME\n@@ -1117,6 +1203,14 @@ Compilation::visit (AST::ExprStmtWithBlock &stmt)\n \n   scope.PushBlock (code_block);\n   stmt.expr->accept_vis (*this);\n+\n+  // get trailing if required\n+  for (auto &s : stmts)\n+    {\n+      scope.AddStatement (s);\n+    }\n+  stmts.clear ();\n+\n   scope.PopBlock ();\n \n   auto body = backend->block_statement (code_block);"}, {"sha": "ec392360d0425a68c77c68ad73246f394626044a", "filename": "gcc/rust/backend/rust-compile.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fbackend%2Frust-compile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230adf6179df01a709bacc8e7e83a160d04aeb2/gcc%2Frust%2Fbackend%2Frust-compile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.h?ref=f230adf6179df01a709bacc8e7e83a160d04aeb2", "patch": "@@ -241,6 +241,7 @@ class Compilation : public AST::ASTVisitor\n   ::Btype *translatedType;\n   std::vector<AST::IdentifierPattern> patternBuffer;\n   std::vector< ::Bexpression *> exprs;\n+  std::vector< ::Bstatement *> stmts;\n \n   // careful these are the vectors we pass into the GCC middle-end\n   std::vector< ::Btype *> type_decls;"}]}