{"sha": "1b99d71bb27e308aed7a586de20d6dc6768de32d", "node_id": "C_kwDOANBUbNoAKDFiOTlkNzFiYjI3ZTMwOGFlZDdhNTg2ZGUyMGQ2ZGM2NzY4ZGUzMmQ", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-03-30T17:24:27Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-20T07:34:29Z"}, "message": "testsuite: Add new tests for DFP under aarch64/aapcs64\n\nThis patch copies all existing tests involving float/double/long\ndouble types and replaces them with _Decimal32/_Decimal64/_Decimal128.\nI thought it would be clearer/easier to maintain to do it this way\nrather than adding tests for DFP types in the existing testcases,\nexcept for func-ret-1.c and func-ret-3.c.\n\nThis makes sure all cases tested for traditional floating-point are\nequally tested for decimal floating-point.\n\nThe patch also adds a test involving loading DFP values from memory.\n\n2022-03-31  Christophe Lyon  <christophe.lyon@arm.com>\n\n\tgcc/testsuite/\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Support new dfp*.c tests.\n\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Add DFP tests.\n\t* gcc.target/aarch64/aapcs64/func-ret-3.c: Add DFP tests.\n\t* gcc.target/aarch64/aapcs64/type-def.h: Add DFP types.\n\t* gcc.target/aarch64/aapcs64/dfp-1.c: New test.\n\t* gcc.target/aarch64/aapcs64/ice_dfp_5.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_align_dfp-1.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_align_dfp-4.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_1.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_10.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_11.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_12.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_13.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_14.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_15.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_16.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_17.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_18.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_19.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_2.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_20.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_21.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_22.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_23.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_24.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_25.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_26.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_27.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_3.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_5.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_6.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_7.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_8.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_dfp_9.c: New test.\n\t* gcc.target/aarch64/aapcs64/test_quad_double_dfp.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-1.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-10.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-11.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-12.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-13.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-14.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-16.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-2.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-3.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-4.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-5.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-6.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-8.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg_dfp-9.c: New test.", "tree": {"sha": "3591b8a85c0ea45c0bd7545f588a33dd13923a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3591b8a85c0ea45c0bd7545f588a33dd13923a7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b99d71bb27e308aed7a586de20d6dc6768de32d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b99d71bb27e308aed7a586de20d6dc6768de32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b99d71bb27e308aed7a586de20d6dc6768de32d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b99d71bb27e308aed7a586de20d6dc6768de32d/comments", "author": null, "committer": null, "parents": [{"sha": "4ca320112e4bc6fd65475dea37fd5034e97ace17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca320112e4bc6fd65475dea37fd5034e97ace17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca320112e4bc6fd65475dea37fd5034e97ace17"}], "stats": {"total": 1982, "additions": 1982, "deletions": 0}, "files": [{"sha": "caa6e5b9b81214acbb5396b38b25f1d799b7cd84", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -88,4 +88,12 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/ice_*.c]] {\n     }\n }\n \n+# Test DFP support\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/dfp*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture [list $src] \\\n+\t\t\t    $additional_flags\n+    }\n+}\n+\n torture-finish"}, {"sha": "958681024955a6d04eda5ac426a000c328d98947", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/dfp-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fdfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fdfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fdfp-1.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,24 @@\n+/* Test loading DFP values from memory.  */\n+\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+_Decimal32 var32 = 1.2df;\n+\n+int foo32(_Decimal32 param32)\n+{\n+\treturn param32 == var32;\n+}\n+\n+_Decimal64 var64 = 1.2df;\n+\n+int foo64(_Decimal64 param64)\n+{\n+\treturn param64 == var64;\n+}\n+\n+_Decimal128 var128 = 1.2df;\n+\n+int foo128(_Decimal128 param128)\n+{\n+\treturn param128 == var128;\n+}"}, {"sha": "5405e1e4920e040a022c6ebb5a129e88ec38ce96", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -14,6 +14,8 @@ vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n vlf1_t vlf1 = (vlf1_t) { 17.0 };\n \n+vldf1_t vldf1 = (vldf1_t) { 17.0dl };\n+\n union int128_t qword;\n \n int *int_ptr = (int *)0xabcdef0123456789ULL;\n@@ -45,4 +47,9 @@ FUNC_VAL_CHECK (13,         vi4_t,        vi4, Q0, i32in128)\n FUNC_VAL_CHECK (14,         int *,    int_ptr, X0, flat)\n FUNC_VAL_CHECK (15,         vlf1_t,    vlf1, Q0, flat)\n FUNC_VAL_CHECK (16,         __fp16,    0xabcd, H0, flat)\n+\n+FUNC_VAL_CHECK (17,     _Decimal32, 65432.12345df, S0, flat)\n+FUNC_VAL_CHECK (18,     _Decimal64, 9876543.212345dd, D0, flat)\n+FUNC_VAL_CHECK (19,    _Decimal128, 98765432123456789.987654321dl, Q0, flat)\n+FUNC_VAL_CHECK (20,        vldf1_t, vldf1, Q0, flat)\n #endif"}, {"sha": "ad312b675b93071f53af0547bfb2774c63d6fe26", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-3.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -30,6 +30,23 @@ struct non_hfa_fffd_t non_hfa_fffd = {33.f, 34.f, 35.f, 36.0};\n union hfa_union_t hfa_union;\n union non_hfa_union_t non_hfa_union;\n \n+/* Decimal Floating-point.  */\n+struct hfa_dfx1_t hfa_dfx1 = {12.345df};\n+struct hfa_dfx2_t hfa_dfx2 = {123.456df, 234.456df};\n+struct hfa_ddx2_t hfa_ddx2 = {234.567dd, 345.678dd};\n+struct hfa_ddx4_t hfa_ddx4 = {1234.123dd, 2345.234dd, 3456.345dd, 4567.456dd};\n+struct hfa_dldx3_t hfa_dldx3 = {123456.7890dl, 234567.8901dl, 345678.9012dl};\n+struct non_hfa_dfx5_t non_hfa_dfx5 = {456.789df, 567.890df, 678.901df, 789.012df, 890.123df};\n+struct hfa_dffs_t hfa_dffs;\n+struct non_hfa_dffs_t non_hfa_dffs;\n+struct non_hfa_dffs_2_t non_hfa_dffs_2;\n+struct hva_vdf2x1_t hva_vdf2x1;\n+struct non_hfa_dffd_t non_hfa_dffd = {23.df, 24.df, 25.0dd};\n+struct non_hfa_dffvf2_t non_hfa_dffvf2;\n+struct non_hfa_dfffd_t non_hfa_dfffd = {33.df, 34.df, 35.df, 36.0dd};\n+union hfa_dunion_t hfa_dunion;\n+union non_hfa_dunion_t non_hfa_dunion;\n+\n #define HAS_DATA_INIT_FUNC\n void init_data ()\n {\n@@ -61,6 +78,36 @@ void init_data ()\n   non_hfa_ffs_2.s.b = 51;\n   non_hfa_ffs_2.c = 52.f;\n   non_hfa_ffs_2.d = 53.f;\n+\n+  /* Decimal floating-point.  */\n+  hva_vdf2x1.a = (vdf2_t){17.df, 18.df};\n+\n+  non_hfa_dffvf2.a = 29.df;\n+  non_hfa_dffvf2.b = 30.df;\n+  non_hfa_dffvf2.c = (vdf2_t){31.df, 32.df};\n+\n+  hfa_dunion.s.a = 37.df;\n+  hfa_dunion.s.b = 38.df;\n+  hfa_dunion.c   = 39.df;\n+\n+  non_hfa_dunion.a = 40.0dd;\n+  non_hfa_dunion.b = 41.df;\n+\n+  hfa_dffs.a = 42.df;\n+  hfa_dffs.b = 43.df;\n+  hfa_dffs.c.a = 44.df;\n+  hfa_dffs.c.b = 45.df;\n+\n+  non_hfa_dffs.a = 46.df;\n+  non_hfa_dffs.b = 47.df;\n+  non_hfa_dffs.c.a = 48.0dd;\n+  non_hfa_dffs.c.b = 49.0dd;\n+\n+  non_hfa_dffs_2.s.a = 50;\n+  non_hfa_dffs_2.s.b = 51;\n+  non_hfa_dffs_2.c = 52.df;\n+  non_hfa_dffs_2.d = 53.df;\n+\n }\n \n #include \"abitest-2.h\"\n@@ -90,4 +137,24 @@ FUNC_VAL_CHECK (18, struct non_hfa_ffs_t  , non_hfa_ffs  , X8, flat)\n FUNC_VAL_CHECK (19, struct non_hfa_ffs_2_t, non_hfa_ffs_2, X0, flat)\n FUNC_VAL_CHECK (20, union  non_hfa_union_t, non_hfa_union, X0, flat)\n \n+/* Decimal floating-point.  */\n+FUNC_VAL_CHECK (21, struct hfa_dfx1_t , hfa_dfx1  , S0, flat)\n+FUNC_VAL_CHECK (22, struct hfa_dfx2_t , hfa_dfx2  , S0, flat)\n+FUNC_VAL_CHECK (23, struct hfa_ddx2_t , hfa_ddx2  , D0, flat)\n+\n+FUNC_VAL_CHECK (24, struct hfa_ddx4_t , hfa_ddx4  , D0, flat)\n+FUNC_VAL_CHECK (25, struct hfa_dldx3_t, hfa_dldx3 , Q0, flat)\n+FUNC_VAL_CHECK (26, struct hfa_dffs_t , hfa_dffs  , S0, flat)\n+FUNC_VAL_CHECK (27, union hfa_dunion_t, hfa_dunion, S0, flat)\n+\n+FUNC_VAL_CHECK (28, struct hva_vdf2x1_t, hva_vdf2x1, D0, flat)\n+\n+FUNC_VAL_CHECK (29, struct non_hfa_dfx5_t  , non_hfa_dfx5  , X8, flat)\n+FUNC_VAL_CHECK (30, struct non_hfa_dffd_t  , non_hfa_dffd  , X0, flat)\n+FUNC_VAL_CHECK (31, struct non_hfa_dffvf2_t, non_hfa_dffvf2, X0, flat)\n+FUNC_VAL_CHECK (32, struct non_hfa_dfffd_t , non_hfa_dfffd , X8, flat)\n+FUNC_VAL_CHECK (33, struct non_hfa_dffs_t  , non_hfa_dffs  , X8, flat)\n+FUNC_VAL_CHECK (34, struct non_hfa_dffs_2_t, non_hfa_dffs_2, X0, flat)\n+FUNC_VAL_CHECK (35, union  non_hfa_dunion_t, non_hfa_dunion, X0, flat)\n+\n #endif"}, {"sha": "4d0fdd9bc39dd15d2a490d4304ab54afdd22d547", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_dfp_5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_dfp_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_dfp_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_dfp_5.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+struct S\n+{\n+  union\n+    {\n+      _Decimal128 b;\n+    } a;\n+};\n+\n+struct S s;\n+\n+extern struct S a[5];\n+extern struct S check (struct S, struct S *, struct S);\n+extern void checkx (struct S);\n+\n+void test (void)\n+{\n+  checkx (check (s, &a[1], a[2]));\n+}"}, {"sha": "35913e9f2d1c98b4eeccc5254db18bfecc56557e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align_dfp-1.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-1.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,126 @@\n+/* Test AAPCS64 layout.\n+\n+   Test the comformance to the alignment and padding requirements.\n+\n+   B.4  If the argument type is a Composite Type then the size of the\n+        argument is rounded up to the nearest multiple of 8 bytes.\n+   C.4  If the argument is an HFA, a Quad-precision Floating-point or Short\n+\tVector Type then the NSAA is rounded up to the larger of 8 or the\n+\tNatural Alignment of the argument's type.\n+   C.12 The NSAA is rounded up to the larger of 8 or the Natural Alignment\n+\tof the argument's type.\n+   C.14 If the size of the argument is less than 8 bytes then the size of\n+\tthe argument is set ot 8 bytes.  The effect is as if the argument\n+\twas copied to the least significant bits of a 64-bit register and\n+\tthe remaining bits filled with unspecified values.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-1.c\"\n+#include \"type-def.h\"\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+};\n+\n+struct y v1 = { 1, 2, 3, 4 };\n+struct y v2 = { 5, 6, 7, 8 };\n+struct y v3 = { 9, 10, 11, 12 };\n+struct y v4 = { 13, 14, 15, 16 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+vf4_t c = { 13.f, 14.f, 15.f, 16.f };\n+\n+struct x\n+{\n+  vf4_t v;\n+} w;\n+\n+char ch='a';\n+short sh=13;\n+int i=14;\n+long long ll=15;\n+\n+struct s1\n+{\n+  short sh[3];\n+} s1;\n+\n+struct s2\n+{\n+  int i[2];\n+  char c;\n+} s2;\n+\n+struct ldx2_t\n+{\n+  _Decimal128 ld[2];\n+} ldx2 = { 12345.67890dl, 23456.78901dl };\n+\n+union u_t\n+{\n+  _Decimal128 ld;\n+  _Decimal64 d[2];\n+} u;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  w.v = (vf4_t){ 17.f, 18.f, 19.f, 20.f };\n+  s1.sh[0] = 16;\n+  s1.sh[1] = 17;\n+  s1.sh[2] = 18;\n+  s2.i[0] = 19;\n+  s2.i[1] = 20;\n+  s2.c = 21;\n+  u.ld = 34567.89012L;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(struct y, v1, X0)\n+  ARG(struct y, v2, X2)\n+  ARG(struct y, v3, X4)\n+  ARG(struct y, v4, X6)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  ARG(_Decimal64, 12.5, STACK)\n+  ARG(vf4_t, c, STACK+16)       /* [C.4] 16-byte aligned short vector */\n+  ARG(_Decimal64, 17.0dd, STACK+32)\n+  ARG(struct x, w, STACK+48)    /* [C.12] 16-byte aligned small struct */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(char, ch, STACK+64)       /* [C.14] char  padded to the size of 8 bytes */\n+  ARG(short, sh, STACK+72)      /* [C.14] short padded to the size of 8 bytes */\n+  ARG(int, i, STACK+80)         /* [C.14] int   padded to the size of 8 bytes */\n+#else\n+  ARG(char, ch, STACK+71)\n+  ARG(short, sh, STACK+78)\n+  ARG(int, i, STACK+84)\n+#endif\n+  ARG(long long, ll, STACK+88)\n+  ARG(struct s1, s1, STACK+96)  /* [B.4] small struct padded to the size of 8 bytes */\n+  ARG(_Decimal64, 18.0dd, STACK+104)\n+  ARG(struct s2, s2, STACK+112) /* [B.4] small struct padded to the size of 16 bytes */\n+  ARG(_Decimal64, 19.0dd, STACK+128)\n+  ARG(_Decimal128, 30.0dl, STACK+144)  /* [C.4] 16-byte aligned quad-precision */\n+  ARG(_Decimal64, 31.0dd, STACK+160)\n+  ARG(struct ldx2_t, ldx2, STACK+176) /* [C.4] 16-byte aligned HFA */\n+  ARG(_Decimal64, 32.0dd, STACK+208)\n+  ARG(__int128, 33, STACK+224)  /* [C.12] 16-byte aligned 128-bit integer */\n+  ARG(_Decimal64, 34.0dd, STACK+240)\n+  ARG(union u_t, u, STACK+256)  /* [C.12] 16-byte aligned small composite (union in this case) */\n+  LAST_ARG_NONFLAT (int, 35.0, STACK+272, i32in64)\n+#endif"}, {"sha": "50ee7c0cc9d9371947db7afe00bd48e9c12ef230", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align_dfp-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align_dfp-4.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS64 layout.\n+\n+   C.3 If the argument is an HFA then the NSRN is set to 8 and the size\n+   of the argument is rounded up to the nearest multiple of 8 bytes.\n+\n+   TODO: add the check of an HFA containing half-precision floating-point\n+   when __f16 is supported in A64 GCC.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align_dfp-4.c\"\n+\n+struct z1\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z1 a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+\n+struct z2\n+{\n+  _Decimal32 x[3];\n+};\n+\n+struct z2 b = { 13.df, 14.df, 15.df };\n+struct z2 c = { 16.df, 17.df, 18.df };\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(struct z1, a, D0)\n+  ARG(_Decimal64, 9.0dd, D4)\n+  ARG(_Decimal64, 10.0dd, D5)\n+  ARG(struct z2, b, STACK)       /* [C.3] on stack and size padded to 16 bytes */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(_Decimal32, 15.5df, STACK+16)    /* [C.3] NSRN has been set to 8 */\n+#else\n+  ARG(_Decimal32, 15.5df, STACK+20)\n+#endif\n+  LAST_ARG(struct z2, c, STACK+24)\n+#endif"}, {"sha": "3435261b07d22ae7766d5bd1bf6b4924fee08f92", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_1.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS64 layout */\n+\n+/* C.7  If the argument is an Integral Type, the size of the argument is\n+\tless than or equal to 8 bytes and the NGRN is less than 8, the\n+\targument is copied to the least significant bits in x[NGRN].  The\n+\tNGRN is incremented by one.  The argument has now been allocated.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_1.c\"\n+/* TODO: review if we need this */\n+#define RUNTIME_ENDIANNESS_CHECK\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 4, W0)\n+  ARG(_Decimal64, 4.0dd, D0)\n+  ARG(int, 3, W1)\n+  /* TODO: review the way of memcpy char, short, etc.  */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(char, 0xEF, X2)\n+  ARG(short, 0xBEEF, X3)\n+  ARG(int, 0xDEADBEEF, X4)\n+#else\n+  /* TODO: need the model/qemu to be big-endian as well  */\n+  ARG(char, 0xEF, X2+7)\n+  ARG(short, 0xBEEF, X3+6)\n+  ARG(int, 0xDEADBEEF, X4+4)\n+#endif\n+  LAST_ARG(long long, 0xDEADBEEFCAFEBABELL, X5)\n+#endif"}, {"sha": "8c1ccd1e7ffca06ade0de000b0c5e4d0a080524b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_10.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_10.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_10.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(int, 7, W0)\n+  DOTS\n+  ANON(struct z, a, D0)\n+  ANON(struct z, b, D4)\n+  ANON(_Decimal64, 0.5dd, STACK)\n+  LAST_ANON(_Decimal64, 1.5dd, STACK+8)\n+#endif"}, {"sha": "d06de66cc17f4b7a114e1f6c49c3265a9ac11bbe", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_11.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_11.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_11.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal64, 11.0dd, D0)\n+  DOTS\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  LAST_ANON(_Decimal64, 0.5dd, STACK+32)\n+#endif"}, {"sha": "491bfd9964e3dc6ab3ba4924e76b632cc0eaa869", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_12.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_12.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,44 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_12.c\"\n+\n+\n+struct y\n+{\n+  long p;\n+  long q;\n+  long r;\n+  long s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct y1\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v1 = { 1, 2, 3, 4 };\n+\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#define MYFUNCTYPE struct y\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y1, v1, X1)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  LAST_ARG(_Decimal64, 0.5dd, STACK)\n+#endif"}, {"sha": "6012185285b2ab5784369cf76740feea8314a15f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_13.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_13.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+\n+#define TESTFILE \"test_dfp_13.c\"\n+\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(_Decimal64, 1.0dd, D4)\n+  ARG(struct z, b, STACK)\n+  LAST_ARG(_Decimal64, 0.5dd, STACK+32)\n+#endif"}, {"sha": "9d1cf2d94d1454ab77bfb8b591b999f02f7dee86", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_14.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_14.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_14.c\"\n+\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(int, 9, W1)\n+  ARG(struct z, a, D0)\n+  ARG(_Decimal64, 1.0dd, D4)\n+  ARG(struct z, b, STACK)\n+  ARG(int, 4, W2)\n+  LAST_ARG(_Decimal64, 0.5dd, STACK+32)\n+#endif"}, {"sha": "8ec7b4662a441b995e3892352b346e3d565ff57a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_15.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_15.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_15.c\"\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal64, 1.0dd, D0)\n+  ARG(_Decimal64, 2.0dd, D1)\n+  ARG(_Decimal64, 3.0dd, D2)\n+  ARG(_Decimal64, 4.0dd, D3)\n+  ARG(_Decimal64, 5.0dd, D4)\n+  ARG(_Decimal64, 6.0dd, D5)\n+  ARG(_Decimal64, 7.0dd, D6)\n+  ARG(_Decimal64, 8.0dd, D7)\n+  ARG(_Decimal64, 9.0dd, STACK)\n+  LAST_ARG(_Decimal64, 10.0dd, STACK+8)\n+#endif"}, {"sha": "cdbfd96c47550b8608d5df6d373ac84b76f9f493", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_16.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS layout */\n+/* C.5 If the argument is a Half- or Single- precision Floating-point type,\n+   then the size of the argument is set to 8 bytes.  The effect is as if\n+   the argument had been copied to the least significant bits of a 64-bit\n+   register and the remaining bits filled with unspecified values.  */\n+/* TODO: add the check of half-precision floating-point when it is supported\n+   by the A64 GCC.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_16.c\"\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal32, 1.0df, S0)\n+  ARG(_Decimal32, 2.0df, S1)\n+  ARG(_Decimal32, 3.0df, S2)\n+  ARG(_Decimal32, 4.0df, S3)\n+  ARG(_Decimal32, 5.0df, S4)\n+  ARG(_Decimal32, 6.0df, S5)\n+  ARG(_Decimal32, 7.0df, S6)\n+  ARG(_Decimal32, 8.0df, S7)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(_Decimal32, 9.0df, STACK)\n+  LAST_ARG(_Decimal32, 10.0df, STACK+8)\n+#else\n+  ARG(_Decimal32, 9.0df, STACK+4)\n+  LAST_ARG(_Decimal32, 10.0df, STACK+12)\n+#endif\n+#endif"}, {"sha": "22dc462bf7cb724c556ed5b4106da65e774b8e0f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_17.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_17.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,37 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_17.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+_Decimal32 f1 = 25.0df;\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal64, 11.0dd, D0)\n+  DOTS\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  ANON(int , 5, W0)\n+  ANON(_Decimal32, f1, STACK+32) /* Note: no promotion to _Decimal64.  */\n+  LAST_ANON(_Decimal64, 0.5dd, STACK+40)\n+#endif"}, {"sha": "bb90b0c906f2c82dde23347bdcdf33f219367783", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_18.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_18.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+\n+#define TESTFILE \"test_dfp_18.c\"\n+\n+\n+struct y\n+{\n+  long long p;\n+  long long q;\n+  long long r;\n+  long long s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  PTR(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(_Decimal64, 1.0dd, D4)\n+  ARG(struct z, b, STACK)\n+  LAST_ARG(_Decimal64, 0.5dd, STACK+32)\n+#endif"}, {"sha": "e8210ec3c93753973e528b70f28fb9663cf09ab1", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_19.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_19.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS64 layout.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_19.c\"\n+\n+struct y\n+{\n+  int p1;\n+  int p2;\n+  _Decimal32 q;\n+  int r1;\n+  int r2;\n+  char x;\n+} v = { -1, 1, 2.0df, 3, 18, 19, 20};\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  DOTS\n+  ANON(_Decimal64, 4.0dd, D0)\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  PTR_ANON(struct y, v, X1)\n+  LAST_ANON(int, 10, W2)\n+#endif"}, {"sha": "5e9716cdb0fd3d652695bca3f62a42862ffb05bc", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_2.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,17 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_2.c\"\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(_Decimal32, 1.0df, S0)\n+  ARG(_Decimal64, 4.0dd, D1)\n+  ARG(_Decimal32, 2.0df, S2)\n+  ARG(_Decimal64, 5.0dd, D3)\n+  ARG(__fp16, 8.0f, H4)\n+  LAST_ARG(int, 3, W0)\n+#endif"}, {"sha": "4c524b18dbee323f45a9859a83ad3a9d1a196e6a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_20.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_20.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,22 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_20.c\"\n+\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(int, 8, W0)\n+  ARG(_Decimal64, 1.0dd, D0)\n+  ARG(_Decimal64, 2.0dd, D1)\n+  ARG(_Decimal64, 3.0dd, D2)\n+  ARG(_Decimal64, 4.0dd, D3)\n+  ARG(_Decimal64, 5.0dd, D4)\n+  ARG(_Decimal64, 6.0dd, D5)\n+  ARG(_Decimal64, 7.0dd, D6)\n+  DOTS\n+  ANON(_Complex double, 1234.0 + 567.0i, STACK)\n+  LAST_ANON(_Decimal64, -987.0dd, STACK+16)\n+#endif"}, {"sha": "37c4177d9b8ed2e7981b7139d44c50001a713576", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_21.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_21.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_21.c\"\n+\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(int, 8, W0)\n+  ARG(_Decimal64, 1.0dd, D0)\n+  ARG(_Decimal64, 2.0dd, D1)\n+  ARG(_Decimal64, 3.0dd, D2)\n+  ARG(_Decimal64, 4.0dd, D3)\n+  ARG(_Decimal64, 5.0dd, D4)\n+  ARG(_Decimal64, 6.0dd, D5)\n+  ARG(_Decimal64, 7.0dd, D6)\n+  ARG(_Complex double, 1234.0 + 567.0i, STACK)\n+  LAST_ARG(_Decimal64, -987.0dd, STACK+16)\n+#endif"}, {"sha": "497566836a8a3bc579511cd6e0b4c293e094e8ef", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_22.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_22.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,19 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_22.c\"\n+\n+struct y\n+{\n+  _Decimal32 p;\n+  _Decimal32 q;\n+} v = { 345.0df, 678.0df };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal32, 123.0df, S0)\n+  ARG(struct y, v, S1)\n+  LAST_ARG(_Decimal32, 901.0df, S3)\n+#endif"}, {"sha": "82e72192c3d9628ad2299ad710afa51d2278bfba", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_23.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_23.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS64 layout.\n+\n+   Larger than machine-supported vector size.  The behavior is unspecified by\n+   the AAPCS64 document; the implementation opts for pass by reference.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_23.c\"\n+\n+typedef char A __attribute__ ((vector_size (64)));\n+\n+struct y\n+{\n+  _Decimal64 df[8];\n+};\n+\n+union u\n+{\n+  struct y x;\n+  A a;\n+} u;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  u.x.df[0] = 1.0dd;\n+  u.x.df[1] = 2.0dd;\n+  u.x.df[2] = 3.0dd;\n+  u.x.df[3] = 4.0dd;\n+  u.x.df[4] = 5.0dd;\n+  u.x.df[5] = 6.0dd;\n+  u.x.df[6] = 7.0dd;\n+  u.x.df[7] = 8.0dd;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (_Decimal32, 123.0df, S0)\n+PTR (A, u.a, X0)\n+LAST_ARG_NONFLAT (int, 0xdeadbeef, X1, i32in64)\n+#endif"}, {"sha": "0b76c9de8c6ebb7f7fd3b706cc9bd314b1e1986c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_24.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_24.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,22 @@\n+/* Test AAPCS64 layout.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_24.c\"\n+\n+typedef _Decimal128 TDtype;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(TDtype, 1.0dl, Q0)\n+  ARG(TDtype, 2.0dl, Q1)\n+  ARG(TDtype, 3.0dl, Q2)\n+  ARG(TDtype, 4.0dl, Q3)\n+  ARG(TDtype, 5.0dl, Q4)\n+  ARG(TDtype, 6.0dl, Q5)\n+  ARG(TDtype, 7.0dl, Q6)\n+  ARG(TDtype, 8.0dl, Q7)\n+  ARG(_Decimal64, 9.0dd, STACK)\n+  LAST_ARG(TDtype, 10.0dl, STACK+16)\n+#endif"}, {"sha": "04372adc1e427b5a320b4a8221aeffd1adfd6a2c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_25.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_25.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,61 @@\n+/* Test AAPCS64 layout\n+\n+   Test homogeneous floating-point aggregates and homogeneous short-vector\n+   aggregates, which should be passed in SIMD/FP registers or via the\n+   stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_25.c\"\n+\n+typedef _Decimal32 vf2_t __attribute__((vector_size (8)));\n+struct x0\n+{\n+  vf2_t v;\n+} s0;\n+struct x3\n+{\n+  vf2_t v[2];\n+} s3;\n+struct x4\n+{\n+  vf2_t v[3];\n+} s4;\n+\n+typedef _Decimal32 vf4_t __attribute__((vector_size(16)));\n+struct x1\n+{\n+  vf4_t v;\n+} s1;\n+\n+struct x2\n+{\n+  _Decimal64 df[3];\n+} s2;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  s0.v = (vf2_t){ 17.df, 18.df };\n+  s1.v = (vf4_t){ 567.890df, 678.901df, 789.012df, 890.123df };\n+  s2.df[0] = 123.456dd;\n+  s2.df[1] = 234.567dd;\n+  s2.df[2] = 345.678dd;\n+  s3.v[0] = (vf2_t){ 19.df, 20.df };\n+  s3.v[1] = (vf2_t){ 23.df, 24.df };\n+  s4.v[0] = (vf2_t){ 27.df, 28.df };\n+  s4.v[1] = (vf2_t){ 31.df, 32.df };\n+  s4.v[2] = (vf2_t){ 35.df, 36.df };\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct x0, s0, D0)\n+ARG (struct x2, s2, D1)\n+ARG (struct x1, s1, Q4)\n+ARG (struct x3, s3, D5)\n+ARG (struct x4, s4, STACK)\n+ARG (int, 0xdeadbeef, W0)\n+LAST_ARG (_Decimal64, 456.789dd, STACK+24)\n+#endif"}, {"sha": "e95175bfe7826f2d7ed8255979e07a96da2a0d77", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_26.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_26.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,54 @@\n+/* Test AAPCS64 layout.\n+\n+   Test some small structures that should be passed in GPRs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_26.c\"\n+\n+struct y0\n+{\n+  char ch;\n+} c0 = { 'A' };\n+\n+struct y2\n+{\n+  long long ll[2];\n+} c2 = { 0xDEADBEEF, 0xCAFEBABE };\n+\n+struct y3\n+{\n+  int i[3];\n+} c3 = { 56789, 67890, 78901 };\n+\n+typedef _Decimal32 vf2_t __attribute__((vector_size (8)));\n+struct x0\n+{\n+  vf2_t v;\n+} s0;\n+\n+typedef short vh4_t __attribute__((vector_size (8)));\n+\n+struct x1\n+{\n+  vh4_t v[2];\n+} s1;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  s0.v = (vf2_t){ 17.df, 18.df };\n+  s1.v[0] = (vh4_t){ 345, 456, 567, 678 };\n+  s1.v[1] = (vh4_t){ 789, 890, 901, 123 };\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct y0, c0, X0)\n+ARG (struct y2, c2, X1)\n+ARG (struct y3, c3, X3)\n+ARG_NONFLAT (struct x0, s0, D0, f32in64)\n+ARG (struct x1, s1, D1)\n+LAST_ARG_NONFLAT (int, 89012, X5, i32in64)\n+#endif"}, {"sha": "12dfe7ed12c5a5c74248e20a508ee70996e6d412", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_27.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_27.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,46 @@\n+/* Test AAPCS64 layout\n+\n+   Test named homogeneous floating-point aggregates of __fp16 data,\n+   which should be passed in SIMD/FP registers or via the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_27.c\"\n+\n+struct x0\n+{\n+  __fp16 v[1];\n+} f16x1;\n+\n+struct x1\n+{\n+  __fp16 v[2];\n+} f16x2;\n+\n+struct x2\n+{\n+  __fp16 v[3];\n+} f16x3;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  f16x1.v[0] = 2.0f;\n+  f16x2.v[0] = 4.0f;\n+  f16x2.v[1] = 8.0f;\n+  f16x3.v[0] = 16.0f;\n+  f16x3.v[1] = 32.0f;\n+  f16x3.v[2] = 64.0f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct x0, f16x1, H0)\n+ARG (struct x1, f16x2, H1)\n+ARG (struct x2, f16x3, H3)\n+ARG (struct x1, f16x2, H6)\n+ARG (struct x0, f16x1, STACK)\n+ARG (int, 0xdeadbeef, W0)\n+LAST_ARG (_Decimal64, 456.789dd, STACK+8)\n+#endif"}, {"sha": "c92cb143cdadbab6fcf222c0b9b1b92c8f293518", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_3.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,18 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_3.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+#include \"abitest.h\"\n+#else\n+ARG (_Decimal32, 1.0df, S0)\n+ARG (__complex__ double, x, D1)\n+ARG (_Decimal32, 2.0df, S3)\n+ARG (_Decimal64, 5.0dd, D4)\n+LAST_ARG_NONFLAT (int, 3, X0, i32in64)\n+#endif"}, {"sha": "90b30310b740757a6d4f51d8907bbd0c953f8b5f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_5.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,24 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_5.c\"\n+\n+__complex__ float x = 1.0+2.0i;\n+\n+struct y\n+{\n+  long p;\n+  long q;\n+} v = { 1, 2};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal32, 1.0df, S0)\n+  ARG(__complex__ float, x, S1)\n+  ARG(_Decimal32, 2.0df, S3)\n+  ARG(_Decimal64, 5.0dd, D4)\n+  LAST_ARG(struct y, v, X0)\n+#endif"}, {"sha": "7c720c6ee69c119caf3c0d42df61ea4d36ebbd99", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_6.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_6.c\"\n+\n+__complex__ double x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct y, v, X0)\n+  ARG(_Decimal32, 1.0df, S0)\n+  ARG(__complex__ double, x, D1)\n+  ARG(_Decimal32, 2.0df, S3)\n+  ARG(_Decimal64, 5.0dd, D4)\n+  LAST_ARG(int, 3, W2)\n+#endif"}, {"sha": "c53e192e704bbc44250fd6ee866298d9e8d48d54", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_7.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_7.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,30 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_dfp_7.c\"\n+\n+__complex__ float x = 1.0f + 2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 }, v1 = {5, 6, 7, 8}, v2 = {9, 10, 11, 12};\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct y, v, X0)\n+ARG (struct y, v1, X2)\n+ARG (struct y, v2, X4)\n+ARG (int, 4, W6)\n+ARG (_Decimal32, 1.0df, S0)\n+ARG (__complex__ float, x, S1)\n+ARG (_Decimal32, 2.0df, S3)\n+ARG (_Decimal64, 5.0dd, D4)\n+ARG (int, 3, W7)\n+LAST_ARG_NONFLAT (int, 5, STACK, i32in64)\n+#endif"}, {"sha": "2f48918f8c908300e8e6d0723452877100d00a1a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_8.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,24 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_8.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  ARG(_Decimal64, 0.5dd, STACK)\n+  ARG(int, 7, W0)\n+  LAST_ARG(int, 8, W1) \n+#endif"}, {"sha": "cf08027209652f9c503dac542ec0ca2cb9b50cc1", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_dfp_9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_dfp_9.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_dfp_9.c\"\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  LAST_ARG(_Decimal64, 0.5dd, STACK)\n+#endif"}, {"sha": "08d540dccf1f8836d28739ab3485f147e2df5d61", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_quad_double_dfp.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double_dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double_dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double_dfp.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS64 layout.\n+\n+   Test parameter passing of floating-point quad precision types.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_quad_double_dfp.c\"\n+\n+typedef _Decimal128 TDtype;\n+typedef _Complex long double CTFtype;\n+\n+TDtype x = 1.0dl;\n+TDtype y = 2.0dl;\n+\n+CTFtype cx = 3.0 + 4.0i;\n+CTFtype cy = 5.0 + 6.0i;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG       ( TDtype,  x, Q0)\n+  ARG       (CTFtype, cx, Q1)\n+  DOTS\n+  ANON      (CTFtype, cy, Q3)\n+  LAST_ANON ( TDtype,  y, Q5)\n+#endif"}, {"sha": "6452b91778859c8d94b6ffbd34e7e03f4680237c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/type-def.h", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -13,6 +13,15 @@ typedef int vi4_t __attribute__((vector_size (16)));\n /* 128-bit vector of 1 quad precision float.  */\n typedef long double vlf1_t __attribute__((vector_size (16)));\n \n+/* 64-bit vector of 2 decimal floats.  */\n+typedef _Decimal32 vdf2_t __attribute__((vector_size (8)));\n+\n+/* 128-bit vector of 4 decimal floats.  */\n+typedef _Decimal32 vdf4_t __attribute__((vector_size (16)));\n+\n+/* 128-bit vector of 1 quad precision decimal float.  */\n+typedef _Decimal128 vldf1_t __attribute__((vector_size (16)));\n+\n /* signed quad-word (in an union for the convenience of initialization).  */\n union int128_t\n {\n@@ -183,3 +192,126 @@ union non_hfa_union_t\n   double a;\n   float b;\n };\n+\n+/* Same, with decimal floating-point types.  */\n+struct hfa_dfx1_t\n+{\n+  _Decimal32 a;\n+};\n+\n+struct hfa_dfx2_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+};\n+\n+struct hfa_dfx3_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  _Decimal32 c;\n+};\n+\n+struct hfa_ddx2_t\n+{\n+  _Decimal64 a;\n+  _Decimal64 b;\n+};\n+\n+struct hfa_ddx4_t\n+{\n+  _Decimal64 a;\n+  _Decimal64 b;\n+  _Decimal64 c;\n+  _Decimal64 d;\n+};\n+\n+struct hfa_dldx3_t\n+{\n+  _Decimal128 a;\n+  _Decimal128 b;\n+  _Decimal128 c;\n+};\n+\n+struct hfa_dffs_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  struct hfa_dfx2_t c;\n+};\n+\n+union hfa_dunion_t\n+{\n+  struct\n+    {\n+      _Decimal32 a;\n+      _Decimal32 b;\n+    } s;\n+  _Decimal32 c;\n+};\n+\n+struct non_hfa_dfx5_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  _Decimal32 c;\n+  _Decimal32 d;\n+  _Decimal32 e;\n+};\n+\n+struct non_hfa_dffs_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  struct hfa_ddx2_t c;\n+};\n+\n+struct non_hfa_dffs_2_t\n+{\n+  struct\n+    {\n+      int a;\n+      int b;\n+    } s;\n+  _Decimal32 c;\n+  _Decimal32 d;\n+};\n+\n+struct hva_vdf2x1_t\n+{\n+  vdf2_t a;\n+};\n+\n+struct hva_vdf2x2_t\n+{\n+  vdf2_t a;\n+  vdf2_t b;\n+};\n+\n+struct non_hfa_dffd_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  _Decimal64 c;\n+};\n+\n+struct non_hfa_dffvf2_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  vdf2_t c;\n+};\n+\n+struct non_hfa_dfffd_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+  _Decimal32 c;\n+  _Decimal64 d;\n+};\n+\n+union non_hfa_dunion_t\n+{\n+  _Decimal64 a;\n+  _Decimal32 b;\n+};"}, {"sha": "81e78c1268e45755cac2d4dea0fcf09aebe19936", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-1.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,60 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers fundamental data types as specified in AAPCS64 \\S 4.1.\n+   It is focused on unnamed parameter passed in registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-1.c\"\n+#include \"type-def.h\"\n+\n+vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n+vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+union int128_t qword;\n+signed char sc = 0xed;\n+signed int sc_promoted = 0xffffffed;\n+signed short ss = 0xcba9;\n+signed int ss_promoted = 0xffffcba9;\n+_Decimal32 fp = 65432.12345df;\n+_Decimal64 fp_promoted = (_Decimal64)65432.12345df;\n+__fp16 fp16 = 2.0f;\n+__fp16 fp16_promoted = (double)2.0f;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG          (         int      , 0xff  ,                            W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON_PROMOTED(unsigned char     , 0xfe  , unsigned int, 0xfe       , W1,       1)\n+  ANON_PROMOTED(  signed char     , sc    ,   signed int, sc_promoted, W2,       2)\n+  ANON_PROMOTED(unsigned short    , 0xdcba, unsigned int, 0xdcba     , W3,       3)\n+  ANON_PROMOTED(  signed short    , ss    ,   signed int, ss_promoted, W4,       4)\n+  ANON         (unsigned int      , 0xdeadbeef,                        W5,       5)\n+  ANON         (  signed int      , 0xcafebabe,                        W6,       6)\n+  ANON         (unsigned long long, 0xba98765432101234ULL,             X7,       7)\n+  ANON         (  signed long long, 0xa987654321012345LL ,             STACK,    8)\n+  ANON         (          __int128, qword.i              ,             STACK+16, 9)\n+  ANON_PROMOTED(     _Decimal32   , fp    ,    _Decimal64, fp_promoted, D0,      10)\n+  ANON         (     _Decimal64   , 9876543.212345dd,                  D1,      11)\n+  ANON         (    _Decimal128   , 98765432123456789.987654321dl,     Q2,      12)\n+  ANON         (             vf2_t, vf2   ,                            D3,      13)\n+  ANON         (             vi4_t, vi4   ,                            Q4,      14)\n+  /* 7.2: For unprototyped (i.e. pre- ANSI or K&R C) and variadic functions,\n+     in addition to the normal conversions and promotions, arguments of\n+     type __fp16 are converted to type double.  */\n+  ANON_PROMOTED(            __fp16, fp16  ,     double, fp16_promoted, D5,      15)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+32,16)\n+#else\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+36,16)\n+#endif\n+#endif"}, {"sha": "c94f1ce2c096aad5fd1cc22319dc406a2a6b2b38", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-10.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-10.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,29 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: Anonymous arguments passed on the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-10.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+_Decimal64 d1 = 25.0dd;\n+_Decimal64 d2 = 103.0dd;\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct z, a, D0, 0)\n+  ARG(struct z, b, D4, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(_Decimal64, d1, STACK, 2)\n+  LAST_ANON(_Decimal64, d2, STACK+8, 3)\n+\n+#endif"}, {"sha": "9ca991138dd84ef6a2843f1090ced9f255800420", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-11.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-11.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: Anonymous arguments passed on the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-11.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[2];\n+};\n+\n+_Decimal64 d1 = 25.0dd;\n+struct z a = { 5.0dd, 6.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal64, 1.0dd, D0, 0)\n+  ARG(_Decimal64, 2.0dd, D1, 1)\n+  ARG(_Decimal64, 3.0dd, D2, 2)\n+  ARG(_Decimal64, 4.0dd, D3, 3)\n+  ARG(_Decimal64, 5.0dd, D4, 4)\n+  ARG(_Decimal64, 6.0dd, D5, 5)\n+  ARG(_Decimal64, 7.0dd, D6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(struct z, a, STACK, 8)\n+  LAST_ANON(_Decimal64, d1, STACK+16, 9)\n+\n+#endif"}, {"sha": "8e7942f48fc555203eb08d490c0ffede0822db7a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-12.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-12.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,64 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Pass by reference.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-12.c\"\n+\n+struct z\n+{\n+  char c;\n+  short s;\n+  int ia[4];\n+};\n+\n+struct z a, b, c;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  a.c = 0x11;\n+  a.s = 0x2222;\n+  a.ia[0] = 0x33333333;\n+  a.ia[1] = 0x44444444;\n+  a.ia[2] = 0x55555555;\n+  a.ia[3] = 0x66666666;\n+\n+  b.c = 0x77;\n+  b.s = 0x8888;\n+  b.ia[0] = 0x99999999;\n+  b.ia[1] = 0xaaaaaaaa;\n+  b.ia[2] = 0xbbbbbbbb;\n+  b.ia[3] = 0xcccccccc;\n+\n+  c.c = 0xdd;\n+  c.s = 0xeeee;\n+  c.ia[0] = 0xffffffff;\n+  c.ia[1] = 0x12121212;\n+  c.ia[2] = 0x23232323;\n+  c.ia[3] = 0x34343434;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  PTR(struct z, a, X0, 0)\n+  ARG(int, 0xdeadbeef, W1, 1)\n+  ARG(int, 0xcafebabe, W2, 2)\n+  ARG(int, 0xdeadbabe, W3, 3)\n+  ARG(int, 0xcafebeef, W4, 4)\n+  ARG(int, 0xbeefdead, W5, 5)\n+  ARG(int, 0xbabecafe, W6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  PTR_ANON(struct z, b, X7, 7)\n+  PTR_ANON(struct z, c, STACK, 8)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ANON(int, 0xbabedead, STACK+8, 9)\n+#else\n+  ANON(int, 0xbabedead, STACK+12, 9)\n+#endif\n+  LAST_ANON(_Decimal64, 123.45dd, D0, 10)\n+\n+#endif"}, {"sha": "59d5d5ebd6d061350421b20fbe22c3338626b75b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-13.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-13.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,59 @@\n+/* Test AAPCS64 layout and __builtin_va_start.\n+\n+   Pass named HFA/HVA argument on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-13.c\"\n+\n+struct float_float_t\n+{\n+  _Decimal32 a;\n+  _Decimal32 b;\n+} float_float;\n+\n+union float_int_t\n+{\n+  _Decimal32 b8;\n+  int b5;\n+} float_int;\n+\n+#define HAS_DATA_INIT_FUNC\n+void\n+init_data ()\n+{\n+  float_float.a = 1.2df;\n+  float_float.b = 2.2df;\n+\n+  float_int.b8 = 4983.80df;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (_Decimal32, 1.0df, S0, 0)\n+  ARG (_Decimal32, 2.0df, S1, 1)\n+  ARG (_Decimal32, 3.0df, S2, 2)\n+  ARG (_Decimal32, 4.0df, S3, 3)\n+  ARG (_Decimal32, 5.0df, S4, 4)\n+  ARG (_Decimal32, 6.0df, S5, 5)\n+  ARG (_Decimal32, 7.0df, S6, 6)\n+  ARG (struct float_float_t, float_float, STACK, 7)\n+  ARG (int,  9, W0, 8)\n+  ARG (int, 10, W1, 9)\n+  ARG (int, 11, W2, 10)\n+  ARG (int, 12, W3, 11)\n+  ARG (int, 13, W4, 12)\n+  ARG (int, 14, W5, 13)\n+  ARG (int, 15, W6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* Note on the reason of using 'X7' instead of 'W7' here:\n+     Using 'X7' makes sure the test works in the big-endian mode.\n+     According to PCS rules B.4 and C.10, the size of float_int is rounded\n+     to 8 bytes and prepared in the register X7 as if loaded via LDR from\n+     the memory, with the content of the other 4 bytes unspecified.  The\n+     test framework will only compare the 4 relavent bytes.  */\n+  ANON (union float_int_t, float_int, X7, 15)\n+  LAST_ANON (long long, 12683143434LL, STACK + 8, 16)\n+#endif"}, {"sha": "b54c66f011570f7c32c40300b5abeb838460a9f1", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-14.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-14.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS64 layout and __builtin_va_start.\n+\n+   Pass named HFA/HVA argument on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-14.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_dfx2_t hfa_dfx2 = {1.2df, 2.2df};\n+struct hfa_dfx3_t hfa_dfx3 = {3.2df, 4.2df, 5.2df};\n+vf4_t float32x4 = {6.2f, 7.2f, 8.2f, 9.2f};\n+vf4_t float32x4_2 = {10.2f, 11.2f, 12.2f, 13.2f};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (_Decimal32, 1.0df, S0, 0)\n+  ARG (_Decimal32, 2.0df, S1, 1)\n+  ARG (_Decimal32, 3.0df, S2, 2)\n+  ARG (_Decimal32, 4.0df, S3, 3)\n+  ARG (_Decimal32, 5.0df, S4, 4)\n+  ARG (_Decimal32, 6.0df, S5, 5)\n+  ARG (_Decimal32, 7.0df, S6, 6)\n+  ARG (struct hfa_dfx3_t, hfa_dfx3, STACK, 7)\n+  /* Previous argument size has been rounded up to the nearest multiple of\n+     8 bytes.  */\n+  ARG (struct hfa_dfx2_t, hfa_dfx2, STACK + 16, 8)\n+  /* NSAA is rounded up to the nearest natural alignment of float32x4.  */\n+  ARG (vf4_t, float32x4, STACK + 32, 9)\n+  ARG (vf4_t, float32x4_2, STACK + 48, LAST_NAMED_ARG_ID)\n+  DOTS\n+  LAST_ANON (_Decimal64, 123456789.987dd, STACK + 64, 11)\n+#endif"}, {"sha": "5e17e6d273d74b608faa2ea3d97330beac5876ea", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-16.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-16.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,28 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focused particularly on __fp16 unnamed homogeneous\n+   floating-point aggregate types which should be passed in fp/simd\n+   registers until we run out of those, then the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-16.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_f16x1_t hfa_f16x1 = {2.0f};\n+struct hfa_f16x2_t hfa_f16x2 = {4.0f, 8.0f};\n+struct hfa_f16x3_t hfa_f16x3 = {16.0f, 32.0f, 64.0f};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct hfa_f16x1_t, hfa_f16x1, H0     , 0)\n+  ANON     (struct hfa_f16x2_t, hfa_f16x2, H1     , 1)\n+  ANON     (struct hfa_f16x3_t, hfa_f16x3, H3     , 2)\n+  ANON     (struct hfa_f16x2_t, hfa_f16x2, H6     , 3)\n+  ANON     (struct hfa_f16x1_t, hfa_f16x1, STACK  , 4)\n+  LAST_ANON(_Decimal64        , 1.0dd    , STACK+8, 5)\n+#endif"}, {"sha": "d14bfb36e1d172ad484df0d58fa5a131a21f51ac", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-2.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,75 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers fundamental data types as specified in AAPCS64 \\S 4.1.\n+   It is focus on unnamed parameter passed on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-2.c\"\n+#include \"type-def.h\"\n+\n+vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n+vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+union int128_t qword;\n+signed char sc = 0xed;\n+signed int sc_promoted = 0xffffffed;\n+signed short ss = 0xcba9;\n+signed int ss_promoted = 0xffffcba9;\n+_Decimal32 fp = 65432.12345df;\n+_Decimal64 fp_promoted = (_Decimal64)65432.12345df;\n+__fp16 fp16 = 2.0f;\n+__fp16 fp16_promoted = (double)2.0f;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG          (         int      , 0xff  ,                            W0,        0)\n+  ARG          (    _Decimal32    , 1.0df ,                            S0,        1)\n+  ARG          (    _Decimal32    , 1.0df ,                            S1,        2)\n+  ARG          (    _Decimal32    , 1.0df ,                            S2,        3)\n+  ARG          (    _Decimal32    , 1.0df ,                            S3,        4)\n+  ARG          (    _Decimal32    , 1.0df ,                            S4,        5)\n+  ARG          (    _Decimal32    , 1.0df ,                            S5,        6)\n+  ARG          (    _Decimal32    , 1.0df ,                            S6,        7)\n+  ARG          (    _Decimal32    , 1.0df ,                            S7, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON         (          __int128, qword.i              ,             X2,        8)\n+  ANON         (  signed long long, 0xa987654321012345LL ,             X4,        9)\n+  ANON         (          __int128, qword.i              ,             X6,       10)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ANON_PROMOTED(unsigned char     , 0xfe  , unsigned int, 0xfe       , STACK,    11)\n+  ANON_PROMOTED(  signed char     , sc    ,   signed int, sc_promoted, STACK+8,  12)\n+  ANON_PROMOTED(unsigned short    , 0xdcba, unsigned int, 0xdcba     , STACK+16, 13)\n+  ANON_PROMOTED(  signed short    , ss    ,   signed int, ss_promoted, STACK+24, 14)\n+  ANON         (unsigned int      , 0xdeadbeef,                        STACK+32, 15)\n+  ANON         (  signed int      , 0xcafebabe,                        STACK+40, 16)\n+#else\n+  ANON_PROMOTED(unsigned char     , 0xfe  , unsigned int, 0xfe       , STACK+4,  11)\n+  ANON_PROMOTED(  signed char     , sc    ,   signed int, sc_promoted, STACK+12, 12)\n+  ANON_PROMOTED(unsigned short    , 0xdcba, unsigned int, 0xdcba     , STACK+20, 13)\n+  ANON_PROMOTED(  signed short    , ss    ,   signed int, ss_promoted, STACK+28, 14)\n+  ANON         (unsigned int      , 0xdeadbeef,                        STACK+36, 15)\n+  ANON         (  signed int      , 0xcafebabe,                        STACK+44, 16)\n+#endif\n+  ANON         (unsigned long long, 0xba98765432101234ULL,             STACK+48, 17)\n+  ANON_PROMOTED(    _Decimal32    , fp    ,       _Decimal64, fp_promoted, STACK+56, 18)\n+  ANON         (     _Decimal64   , 9876543.212345dd,                  STACK+64, 19)\n+  ANON         (    _Decimal128   , 98765432123456789.987654321dl,     STACK+80, 20)\n+  ANON         (             vf2_t, vf2   ,                            STACK+96, 21)\n+  ANON         (             vi4_t, vi4   ,                            STACK+112,22)\n+  ANON_PROMOTED(         __fp16   , fp16  ,     double, fp16_promoted, STACK+128,23)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+136,24)\n+#else\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+140,24)\n+#endif\n+#endif"}, {"sha": "9ab386f7a12605d2e566c91f7568b0c3f50a9f41", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-3.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-3.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,94 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers most composite types as described in AAPCS64 \\S 4.3.\n+   Homogeneous floating-point aggregate types are covered in other tests.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-3.c\"\n+#include \"type-def.h\"\n+\n+struct x0\n+{\n+  char ch;\n+  int i;\n+} y0 = { 'a', 12345 };\n+\n+struct x1\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+} y1 = { 0xdeadbeef, 0xcafebabe, 0x87654321, 0xabcedf975 };\n+\n+struct x2\n+{\n+  long long a;\n+  long long b;\n+  char ch;\n+} y2 = { 0x12, 0x34, 0x56 };\n+\n+union x3\n+{\n+  char ch;\n+  int i;\n+  long long ll;\n+} y3;\n+\n+union x4\n+{\n+  int i;\n+  struct x2 y2;\n+} y4;\n+\n+struct x5\n+{\n+  union int128_t qword;\n+} y5;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init small union.  */\n+  y3.ll = 0xfedcba98LL;\n+\n+  /* Init big union.  */\n+  y4.y2.a = 0x78;\n+  y4.y2.b = 0x89;\n+  y4.y2.ch= 0x9a;\n+\n+  /* Init signed quad-word integer.  */\n+  y5.qword.l64 = 0xfdb9753102468aceLL;\n+  y5.qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (_Decimal32 ,1.0df, S0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct x0, y0, X0,        1)\n+  ANON     (struct x1, y1, X1,        2)\n+  PTR_ANON (struct x2, y2, X3,        3)\n+  ANON     (union  x3, y3, X4,        4)\n+  PTR_ANON (union  x4, y4, X5,        5)\n+  ANON     (struct x5, y5, X6,        6)\n+  ANON     (struct x0, y0, STACK,     7)\n+  ANON     (struct x1, y1, STACK+8,   8)\n+  PTR_ANON (struct x2, y2, STACK+24,  9)\n+  ANON     (union  x3, y3, STACK+32, 10)\n+  PTR_ANON (union  x4, y4, STACK+40, 11)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ANON     (int      ,  1, STACK+48, 12)\n+#else\n+  ANON     (int      ,  1, STACK+52, 12)\n+#endif\n+  ANON     (struct x5, y5, STACK+64, 13)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  LAST_ANON(int      ,  2, STACK+80, 14)\n+#else\n+  LAST_ANON(int      ,  2, STACK+84, 14)\n+#endif\n+#endif"}, {"sha": "cf79aaa2c7f700fce3ce2534302f446449e2a28b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-4.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-4.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,90 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers homogeneous floating-point aggregate types and homogeneous\n+   short-vector aggregate types as described in AAPCS64 \\S 4.3.5.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-4.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_dfx1_t hfa_dfx1 = {12.345df};\n+struct hfa_dfx2_t hfa_dfx2 = {123.456df, 234.456df};\n+struct hfa_ddx2_t hfa_ddx2 = {234.567dd, 345.678dd};\n+struct hfa_ddx4_t hfa_ddx4 = {1234.123dd, 2345.234dd, 3456.345dd, 4567.456dd};\n+struct hfa_dldx3_t hfa_dldx3 = {123456.7890dl, 234567.8901dl, 345678.9012dl};\n+struct non_hfa_dfx5_t non_hfa_dfx5 = {456.789df, 567.890df, 678.901df, 789.012df, 890.123df};\n+struct hfa_dffs_t hfa_dffs;\n+struct non_hfa_dffs_t non_hfa_dffs;\n+struct non_hfa_dffs_2_t non_hfa_dffs_2;\n+struct hva_vdf2x1_t hva_vdf2x1;\n+struct hva_vdf2x2_t hva_vdf2x2;\n+struct non_hfa_dffd_t non_hfa_dffd = {23.df, 24.df, 25.0dd};\n+struct non_hfa_dffvf2_t non_hfa_dffvf2;\n+struct non_hfa_dfffd_t non_hfa_dfffd = {33.df, 34.df, 35.df, 36.0dd};\n+union hfa_dunion_t hfa_dunion;\n+union non_hfa_union_t non_hfa_union;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hva_vdf2x1.a = (vdf2_t){17.df, 18.df};\n+  hva_vdf2x2.a = (vdf2_t){19.df, 20.df};\n+  hva_vdf2x2.b = (vdf2_t){21.df, 22.df};\n+\n+  non_hfa_dffvf2.a = 29.df;\n+  non_hfa_dffvf2.b = 30.df;\n+  non_hfa_dffvf2.c = (vdf2_t){31.df, 32.df};\n+\n+  hfa_dunion.s.a = 37.df;\n+  hfa_dunion.s.b = 38.df;\n+  hfa_dunion.c   = 39.df;\n+\n+  non_hfa_dunion.a = 40.0dd;\n+  non_hfa_dunion.b = 41.df;\n+\n+  hfa_dffs.a = 42.df;\n+  hfa_dffs.b = 43.df;\n+  hfa_dffs.c.a = 44.df;\n+  hfa_dffs.c.b = 45.df;\n+\n+  non_hfa_dffs.a = 46.df;\n+  non_hfa_dffs.b = 47.df;\n+  non_hfa_dffs.c.a = 48.0dd;\n+  non_hfa_dffs.c.b = 49.0dd;\n+\n+  non_hfa_dffs_2.s.a = 50;\n+  non_hfa_dffs_2.s.b = 51;\n+  non_hfa_dffs_2.c = 52.df;\n+  non_hfa_dffs_2.d = 53.df;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int   , 1, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* HFA or HVA passed in fp/simd registers or on stack.  */\n+  ANON     (struct hfa_dfx1_t , hfa_dfx1,  S0      , 0)\n+  ANON     (struct hfa_dfx2_t , hfa_dfx2,  S1      , 1)\n+  ANON     (struct hfa_ddx2_t , hfa_ddx2,  D3      , 2)\n+  ANON     (struct hva_vdf2x1_t, hva_vdf2x1, D5      , 11)\n+  ANON     (struct hfa_ddx4_t , hfa_ddx4,  STACK   , 3)\n+  ANON     (struct hfa_dffs_t , hfa_dffs , STACK+32, 4)\n+  ANON     (union  hfa_dunion_t, hfa_dunion, STACK+48, 5)\n+  ANON     (struct hfa_dldx3_t, hfa_dldx3, STACK+64, 6)\n+  /* Non-H[FV]A passed in general registers or on stack or via reference.  */\n+  PTR_ANON (struct non_hfa_dfx5_t , non_hfa_dfx5 , X1       , 10)\n+  ANON     (struct non_hfa_dffd_t , non_hfa_dffd , X2       , 13)\n+  ANON     (struct non_hfa_dffvf2_t, non_hfa_dffvf2, X6       , 16)\n+  PTR_ANON (struct non_hfa_dfffd_t, non_hfa_dfffd, STACK+112, 17)\n+  PTR_ANON (struct non_hfa_dffs_t , non_hfa_dffs , STACK+120, 18)\n+  ANON     (struct non_hfa_dffs_2_t, non_hfa_dffs_2, STACK+128, 19)\n+  ANON     (union  non_hfa_dunion_t, non_hfa_dunion, STACK+144, 20)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  LAST_ANON(int                   , 2            , STACK+152, 30)\n+#else\n+  LAST_ANON(int                   , 2            , STACK+156, 30)\n+#endif\n+#endif"}, {"sha": "57ea87a37d634461a51871dedc1f28a6a01e0e82", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-5.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,47 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focus on certain unnamed homogeneous floating-point aggregate\n+   types passed in fp/simd registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-5.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_dfx1_t hfa_dfx1 = {12.345df};\n+struct hfa_dfx2_t hfa_dfx2 = {123.456df, 234.456df};\n+struct hfa_ddx2_t hfa_ddx2 = {234.567dd, 345.678dd};\n+struct hfa_ddx4_t hfa_ddx4 = {1234.123dd, 2345.234dd, 3456.345dd, 4567.456dd};\n+struct hfa_dldx3_t hfa_dldx3 = {123456.7890dl, 234567.8901dl, 345678.9012dl};\n+struct hfa_dffs_t hfa_dffs;\n+union hfa_dunion_t hfa_dunion;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hfa_dunion.s.a = 37.df;\n+  hfa_dunion.s.b = 38.df;\n+  hfa_dunion.c   = 39.df;\n+\n+  hfa_dffs.a = 42.df;\n+  hfa_dffs.b = 43.df;\n+  hfa_dffs.c.a = 44.df;\n+  hfa_dffs.c.b = 45.df;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* HFA passed in fp/simd registers or on stack.  */\n+  ANON     (struct hfa_ddx4_t , hfa_ddx4 , D0      , 0)\n+  ANON     (struct hfa_dldx3_t, hfa_dldx3, Q4      , 1)\n+  ANON     (struct hfa_dffs_t , hfa_dffs , STACK   , 2)\n+  ANON     (union  hfa_dunion_t, hfa_dunion, STACK+16, 3)\n+  ANON     (struct hfa_dfx1_t , hfa_dfx1 , STACK+24, 4)\n+  ANON     (struct hfa_dfx2_t , hfa_dfx2 , STACK+32, 5)\n+  ANON     (struct hfa_ddx2_t , hfa_ddx2 , STACK+40, 6)\n+  LAST_ANON(_Decimal64        , 1.0dd    , STACK+56, 9)\n+#endif"}, {"sha": "c4144be3f4a174b96ff4051bb578b6dea5ad664d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-6.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,40 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focus on certain unnamed homogeneous floating-point aggregate\n+   types passed in fp/simd registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-6.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_dfx1_t hfa_dfx1 = {12.345df};\n+struct hfa_ddx2_t hfa_ddx2 = {234.567dd, 345.678dd};\n+struct hfa_dffs_t hfa_dffs;\n+union hfa_dunion_t hfa_dunion;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hfa_dunion.s.a = 37.df;\n+  hfa_dunion.s.b = 38.df;\n+  hfa_dunion.c   = 39.df;\n+\n+  hfa_ffs.a = 42.f;\n+  hfa_ffs.b = 43.f;\n+  hfa_ffs.c.a = 44.f;\n+  hfa_ffs.c.b = 45.f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct hfa_dffs_t , hfa_dffs , S0     , 0)\n+  ANON     (union  hfa_dunion_t, hfa_dunion, S4   , 1)\n+  ANON     (struct hfa_ddx2_t , hfa_ddx2 , D6     , 2)\n+  ANON     (struct hfa_dfx1_t , hfa_dfx1 , STACK  , 3)\n+  LAST_ANON(_Decimal64        , 1.0dd    , STACK+8, 4)\n+#endif"}, {"sha": "bd4562ff9b0f1ed015dbd1c9e163ee1fbe44abbc", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-8.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,25 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: HFA anonymous parameter passed in SIMD/FP regs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-8.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 0xdeadbeef, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(_Decimal64, 4.0dd, D0, 1)\n+  LAST_ANON(struct z, a, D1, 2)\n+\n+#endif"}, {"sha": "d1f95c4ee66d1c7819b747c5614c29b14f09d64c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg_dfp-9.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b99d71bb27e308aed7a586de20d6dc6768de32d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg_dfp-9.c?ref=1b99d71bb27e308aed7a586de20d6dc6768de32d", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: HFA anonymous parameter passed in SIMD/FP regs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg_dfp-9.c\"\n+\n+struct z\n+{\n+  _Decimal64 x[4];\n+};\n+\n+_Decimal64 d1 = 25.0dd;\n+struct z a = { 5.0dd, 6.0dd, 7.0dd, 8.0dd };\n+struct z b = { 9.0dd, 10.0dd, 11.0dd, 12.0dd };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(_Decimal64, 11.0dd, D0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(int, 8, W0, 1)\n+  ANON(struct z, a, D1, 2)\n+  ANON(struct z, b, STACK, 3)\n+  ANON(int, 5, W1, 4)\n+  ANON(_Decimal64, d1, STACK+32, 5)\n+  LAST_ANON(_Decimal64, 0.5dd, STACK+40, 6)\n+\n+#endif"}]}