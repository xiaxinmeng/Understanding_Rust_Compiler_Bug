{"sha": "2550204162adf316f427ed8697b891ec5b416bf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1MDIwNDE2MmFkZjMxNmY0MjdlZDg2OTdiODkxZWM1YjQxNmJmNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-08-04T23:58:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-08-04T23:58:02Z"}, "message": "Consolidate red-zone logic into ix86_using_red_zone.\n\nFrom-SVN: r162885", "tree": {"sha": "6e7760df8436c7db9c6710b25692993ab976f09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7760df8436c7db9c6710b25692993ab976f09b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2550204162adf316f427ed8697b891ec5b416bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2550204162adf316f427ed8697b891ec5b416bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2550204162adf316f427ed8697b891ec5b416bf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2550204162adf316f427ed8697b891ec5b416bf4/comments", "author": null, "committer": null, "parents": [{"sha": "cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcb5f261ea31ae5e27aa618a643765a6f9873d8"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "e08157f8a454370fcbf491829b246dc166eb8cb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2550204162adf316f427ed8697b891ec5b416bf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2550204162adf316f427ed8697b891ec5b416bf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2550204162adf316f427ed8697b891ec5b416bf4", "patch": "@@ -1,5 +1,9 @@\n 2010-08-04  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/i386.c (ix86_using_red_zone): New.\n+\t(ix86_compute_frame_layout, ix86_add_cfa_restore_note,\n+\tix86_expand_prologue, ix86_force_to_memory): Use it.\n+\n \t* config/i386/i386.c (ix86_expand_prologue): Simplify logic\n \tsaving the int registers.\n "}, {"sha": "efdb6c473d55857ed880c5d7576a0d59a884eb9b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2550204162adf316f427ed8697b891ec5b416bf4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2550204162adf316f427ed8697b891ec5b416bf4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2550204162adf316f427ed8697b891ec5b416bf4", "patch": "@@ -2201,6 +2201,14 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"bdver1\"\n };\n \f\n+/* Return true if a red-zone is in use.  */\n+\n+static inline bool\n+ix86_using_red_zone (void)\n+{\n+  return TARGET_RED_ZONE && !TARGET_64BIT_MS_ABI;\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -8459,7 +8467,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n       || (TARGET_64BIT && frame->to_allocate >= (HOST_WIDE_INT) 0x80000000))\n     frame->save_regs_using_mov = false;\n \n-  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE\n+  if (ix86_using_red_zone ()\n       && current_function_sp_is_unchanging\n       && current_function_is_leaf\n       && !ix86_current_function_calls_tls_descriptor)\n@@ -8542,8 +8550,7 @@ static GTY(()) rtx queued_cfa_restores;\n static void\n ix86_add_cfa_restore_note (rtx insn, rtx reg, HOST_WIDE_INT red_offset)\n {\n-  if (TARGET_RED_ZONE\n-      && !TARGET_64BIT_MS_ABI\n+  if (ix86_using_red_zone ()\n       && red_offset + RED_ZONE_SIZE >= 0\n       && crtl->args.pops_args < 65536)\n     return;\n@@ -9387,7 +9394,7 @@ ix86_expand_prologue (void)\n      at least on x86_64 the stack probe can turn into a call that clobbers\n      a red zone location */\n   if (!int_registers_saved\n-      && (TARGET_RED_ZONE && !TARGET_64BIT_MS_ABI)\n+      && ix86_using_red_zone ()\n       && (! TARGET_STACK_PROBE || allocate < CHECK_STACK_LIMIT))\n     {\n       ix86_emit_save_regs_using_mov ((frame_pointer_needed\n@@ -25774,15 +25781,15 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n   rtx result;\n \n   gcc_assert (reload_completed);\n-  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE)\n+  if (ix86_using_red_zone ())\n     {\n       result = gen_rtx_MEM (mode,\n \t\t\t    gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t  GEN_INT (-RED_ZONE_SIZE)));\n       emit_move_insn (result, operand);\n     }\n-  else if ((TARGET_64BIT_MS_ABI || !TARGET_RED_ZONE) && TARGET_64BIT)\n+  else if (TARGET_64BIT)\n     {\n       switch (mode)\n \t{\n@@ -25849,7 +25856,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n void\n ix86_free_from_memory (enum machine_mode mode)\n {\n-  if (!TARGET_RED_ZONE || TARGET_64BIT_MS_ABI)\n+  if (!ix86_using_red_zone ())\n     {\n       int size;\n "}]}