{"sha": "61ae296d2beb645bd0aed720cf408891d67913d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhZTI5NmQyYmViNjQ1YmQwYWVkNzIwY2Y0MDg4OTFkNjc5MTNkOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-01-06T10:01:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:01:05Z"}, "message": "snames.ads-tmpl: Remove entries for attribute Enum_Image.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* snames.ads-tmpl: Remove entries for attribute Enum_Image.\n\t* exp_attr.adb: Remove reference to Attribute_Enum_Image.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* s-vallli.adb (Value_Long_Long_Integer): Handle case of Str'Last\n\t= Positive'Last.\n\t* s-valllu.adb (Value_Long_Long_Unsigned): Handle case of\n\tStr'Last = Positive'Last.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Process_Inline): Remove redundant construct\n\twarning (-gnatw.r) for an ineffective pragma Inline.\n\nFrom-SVN: r219244", "tree": {"sha": "6f7793841c4e1fcde4c33c02fe46029e82f1af2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f7793841c4e1fcde4c33c02fe46029e82f1af2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ae296d2beb645bd0aed720cf408891d67913d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ae296d2beb645bd0aed720cf408891d67913d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ae296d2beb645bd0aed720cf408891d67913d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ae296d2beb645bd0aed720cf408891d67913d9/comments", "author": null, "committer": null, "parents": [{"sha": "21db8699c3896ec0f4acba2a008874592832bdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21db8699c3896ec0f4acba2a008874592832bdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21db8699c3896ec0f4acba2a008874592832bdab"}], "stats": {"total": 96, "additions": 63, "deletions": 33}, "files": [{"sha": "7eeb8cce9ff169ebf978dea18dc5944efdddd994", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -1,3 +1,20 @@\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* snames.ads-tmpl: Remove entries for attribute Enum_Image.\n+\t* exp_attr.adb: Remove reference to Attribute_Enum_Image.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-vallli.adb (Value_Long_Long_Integer): Handle case of Str'Last\n+\t= Positive'Last.\n+\t* s-valllu.adb (Value_Long_Long_Unsigned): Handle case of\n+\tStr'Last = Positive'Last.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Process_Inline): Remove redundant construct\n+\twarning (-gnatw.r) for an ineffective pragma Inline.\n+\n 2015-01-06  Robert Dewar  <dewar@adacore.com>\n \n \t* s-valint.adb: Fix typo in last checkin."}, {"sha": "74b013ee687d6a69088e95fb4e66d6c3320222a3", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -7178,7 +7178,6 @@ package body Exp_Attr is\n            Attribute_Digits                       |\n            Attribute_Emax                         |\n            Attribute_Enabled                      |\n-           Attribute_Enum_Image                   |\n            Attribute_Epsilon                      |\n            Attribute_Fast_Math                    |\n            Attribute_First_Valid                  |"}, {"sha": "bf0e15d1234833bea991e6eb21a9096a1afce756", "filename": "gcc/ada/s-vallli.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fs-vallli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fs-vallli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vallli.adb?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -91,12 +91,30 @@ package body System.Val_LLI is\n    -----------------------------\n \n    function Value_Long_Long_Integer (Str : String) return Long_Long_Integer is\n-      V : Long_Long_Integer;\n-      P : aliased Integer := Str'First;\n    begin\n-      V := Scan_Long_Long_Integer (Str, P'Access, Str'Last);\n-      Scan_Trailing_Blanks (Str, P);\n-      return V;\n+      --  We have to special case Str'Last = Positive'Last because the normal\n+      --  circuit ends up setting P to Str'Last + 1 which is out of bounds. We\n+      --  deal with this by converting to a subtype which fixes the bounds.\n+\n+      if Str'Last = Positive'Last then\n+         declare\n+            subtype NT is String (1 .. Str'Length);\n+         begin\n+            return Value_Long_Long_Integer (NT (Str));\n+         end;\n+\n+      --  Normal case where Str'Last < Positive'Last\n+\n+      else\n+         declare\n+            V : Long_Long_Integer;\n+            P : aliased Integer := Str'First;\n+         begin\n+            V := Scan_Long_Long_Integer (Str, P'Access, Str'Last);\n+            Scan_Trailing_Blanks (Str, P);\n+            return V;\n+         end;\n+      end if;\n    end Value_Long_Long_Integer;\n \n end System.Val_LLI;"}, {"sha": "90ce099c6236925a8cf5308241ceb8adc4249dc9", "filename": "gcc/ada/s-valllu.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fs-valllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fs-valllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.adb?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -294,12 +294,30 @@ package body System.Val_LLU is\n    function Value_Long_Long_Unsigned\n      (Str : String) return Long_Long_Unsigned\n    is\n-      V : Long_Long_Unsigned;\n-      P : aliased Integer := Str'First;\n    begin\n-      V := Scan_Long_Long_Unsigned (Str, P'Access, Str'Last);\n-      Scan_Trailing_Blanks (Str, P);\n-      return V;\n+      --  We have to special case Str'Last = Positive'Last because the normal\n+      --  circuit ends up setting P to Str'Last + 1 which is out of bounds. We\n+      --  deal with this by converting to a subtype which fixes the bounds.\n+\n+      if Str'Last = Positive'Last then\n+         declare\n+            subtype NT is String (1 .. Str'Length);\n+         begin\n+            return Value_Long_Long_Unsigned (NT (Str));\n+         end;\n+\n+      --  Normal case where Str'Last < Positive'Last\n+\n+      else\n+         declare\n+            V : Long_Long_Unsigned;\n+            P : aliased Integer := Str'First;\n+         begin\n+            V := Scan_Long_Long_Unsigned (Str, P'Access, Str'Last);\n+            Scan_Trailing_Blanks (Str, P);\n+            return V;\n+         end;\n+      end if;\n    end Value_Long_Long_Unsigned;\n \n end System.Val_LLU;"}, {"sha": "3ced30d6febe6997f7eb1ba3052111b53ae584da", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -8087,10 +8087,6 @@ package body Sem_Prag is\n          Subp      : Entity_Id;\n          Applies   : Boolean;\n \n-         Effective : Boolean := False;\n-         --  Set True if inline has some effect, i.e. if there is at least one\n-         --  subprogram set as inlined as a result of the use of the pragma.\n-\n          procedure Make_Inline (Subp : Entity_Id);\n          --  Subp is the defining unit name of the subprogram declaration. Set\n          --  the flag, as well as the flag in the corresponding body, if there\n@@ -8348,7 +8344,6 @@ package body Sem_Prag is\n \n                if not Has_Pragma_Inline (Subp) then\n                   Set_Has_Pragma_Inline (Subp);\n-                  Effective := True;\n                end if;\n             end if;\n \n@@ -8392,7 +8387,6 @@ package body Sem_Prag is\n \n                   Check_Error_Detected;\n                   Applies   := True;\n-                  Effective := True;\n \n                else\n                   Make_Inline (Subp);\n@@ -8416,20 +8410,6 @@ package body Sem_Prag is\n             if not Applies then\n                Error_Pragma_Arg\n                  (\"inappropriate argument for pragma%\", Assoc);\n-\n-            elsif not Effective\n-              and then Warn_On_Redundant_Constructs\n-              and then not (Status = Suppressed or else Suppress_All_Inlining)\n-            then\n-               if Inlining_Not_Possible (Subp) then\n-                  Error_Msg_NE\n-                    (\"pragma Inline for& is ignored?r?\",\n-                     N, Entity (Subp_Id));\n-               else\n-                  Error_Msg_NE\n-                    (\"pragma Inline for& is redundant?r?\",\n-                     N, Entity (Subp_Id));\n-               end if;\n             end if;\n \n             Next (Assoc);"}, {"sha": "673a7530cd203b48cdfd0d5fb394be461b8ce33d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ae296d2beb645bd0aed720cf408891d67913d9/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=61ae296d2beb645bd0aed720cf408891d67913d9", "patch": "@@ -962,7 +962,6 @@ package Snames is\n    Name_Adjacent                       : constant Name_Id := N + $;\n    Name_Ceiling                        : constant Name_Id := N + $;\n    Name_Copy_Sign                      : constant Name_Id := N + $;\n-   Name_Enum_Image                     : constant Name_Id := N + $;\n    Name_Floor                          : constant Name_Id := N + $;\n    Name_Fraction                       : constant Name_Id := N + $;\n    Name_From_Any                       : constant Name_Id := N + $; -- GNAT\n@@ -1590,7 +1589,6 @@ package Snames is\n       Attribute_Adjacent,\n       Attribute_Ceiling,\n       Attribute_Copy_Sign,\n-      Attribute_Enum_Image,\n       Attribute_Floor,\n       Attribute_Fraction,\n       Attribute_From_Any,"}]}