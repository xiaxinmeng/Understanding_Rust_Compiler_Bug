{"sha": "a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiZDYwZDFjOWI2YmRiODVlZWFhOTdhN2U5MWI0MTdhYTcwYmNmZg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-15T03:46:59Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-15T03:46:59Z"}, "message": "Fix mv8plus, allow targetting Linux or Solaris from other sparc host.\n\n\t* config/sparc/sol2.h: Protect -m{cpu,tune}=native handling\n\twith a more complete cpp test.\n\t* config/sparc/linux64.h: Likewise.\n\t* config/sparc/linux.h: Likewise.\n\t* config/sparc/sparc.opt (sparc_debug): New target variable.\n\t(mdebug): New target option.\n\t* config/sparc/sparc.h (MASK_DEBUG_OPTIONS, MASK_DEBUG_ALL,\n\tTARGET_DEBUG_OPTIONS): New defines.\n\t* config/sparc/sparc.c (debug_target_flag_bits,\n\tdebug_target_flags): New functions.\n\t(sparc_option_override): Add name strings back to cpu_table[].\n\tParse -mdebug string.  When TARGET_DEBUG_OPTIONS is true, print\n\tout the target flags before and after override processing as well\n\tas the selected cpu.  If MASK_V8PLUS, make sure that the selected\n\tcpu is at least v9.\n\nFrom-SVN: r180021", "tree": {"sha": "74646ffce7b35d20944e5ea06dd96ce907fdcf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74646ffce7b35d20944e5ea06dd96ce907fdcf5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ff9d29412643e24f930933526a837238227c68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff9d29412643e24f930933526a837238227c68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff9d29412643e24f930933526a837238227c68d"}], "stats": {"total": 199, "additions": 174, "deletions": 25}, "files": [{"sha": "2bc40b0f75cc83bfd30acf2c8279ae5013e98ab7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -1,3 +1,21 @@\n+2011-10-14  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sol2.h: Protect -m{cpu,tune}=native handling\n+\twith a more complete cpp test.\n+\t* config/sparc/linux64.h: Likewise.\n+\t* config/sparc/linux.h: Likewise.\n+\t* config/sparc/sparc.opt (sparc_debug): New target variable.\n+\t(mdebug): New target option.\n+\t* config/sparc/sparc.h (MASK_DEBUG_OPTIONS, MASK_DEBUG_ALL,\n+\tTARGET_DEBUG_OPTIONS): New defines.\n+\t* config/sparc/sparc.c (debug_target_flag_bits,\n+\tdebug_target_flags): New functions.\n+\t(sparc_option_override): Add name strings back to cpu_table[].\n+\tParse -mdebug string.  When TARGET_DEBUG_OPTIONS is true, print\n+\tout the target flags before and after override processing as well\n+\tas the selected cpu.  If MASK_V8PLUS, make sure that the selected\n+\tcpu is at least v9.\n+\n 2011-10-15  Oleg Endo  <oleg.endo@t-online.de>\n \n \tPR target/49263"}, {"sha": "443c796640521415692c07c715eb3f4454d48f2c", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -41,7 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* -mcpu=native handling only makes sense with compiler running on\n    a SPARC chip.  */\n-#if defined(__sparc__)\n+#if defined(__sparc__) && defined(__linux__)\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n   { \"local_cpu_detect\", host_detect_local_cpu },"}, {"sha": "a51a2f0e1c761c12627f8e8c54d9c7d4adb052f0", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -139,7 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* -mcpu=native handling only makes sense with compiler running on\n    a SPARC chip.  */\n-#if defined(__sparc__)\n+#if defined(__sparc__) && defined(__linux__)\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n   { \"local_cpu_detect\", host_detect_local_cpu },"}, {"sha": "ba2ec35e20ad11e792f9f4b0b55538d9640394a8", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -181,7 +181,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* -mcpu=native handling only makes sense with compiler running on\n    a SPARC chip.  */\n-#if defined(__sparc__)\n+#if defined(__sparc__) && defined(__SVR4)\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n   { \"local_cpu_detect\", host_detect_local_cpu },"}, {"sha": "a7b075cb5696ad9e1d5496f015adccb30f2dde6c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 139, "deletions": 22, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -700,6 +700,61 @@ char sparc_hard_reg_printed[8];\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n+static void\n+dump_target_flag_bits (const int flags)\n+{\n+  if (flags & MASK_64BIT)\n+    fprintf (stderr, \"64BIT \");\n+  if (flags & MASK_APP_REGS)\n+    fprintf (stderr, \"APP_REGS \");\n+  if (flags & MASK_FASTER_STRUCTS)\n+    fprintf (stderr, \"FASTER_STRUCTS \");\n+  if (flags & MASK_FLAT)\n+    fprintf (stderr, \"FLAT \");\n+  if (flags & MASK_FMAF)\n+    fprintf (stderr, \"FMAF \");\n+  if (flags & MASK_FPU)\n+    fprintf (stderr, \"FPU \");\n+  if (flags & MASK_HARD_QUAD)\n+    fprintf (stderr, \"HARD_QUAD \");\n+  if (flags & MASK_POPC)\n+    fprintf (stderr, \"POPC \");\n+  if (flags & MASK_PTR64)\n+    fprintf (stderr, \"PTR64 \");\n+  if (flags & MASK_STACK_BIAS)\n+    fprintf (stderr, \"STACK_BIAS \");\n+  if (flags & MASK_UNALIGNED_DOUBLES)\n+    fprintf (stderr, \"UNALIGNED_DOUBLES \");\n+  if (flags & MASK_V8PLUS)\n+    fprintf (stderr, \"V8PLUS \");\n+  if (flags & MASK_VIS)\n+    fprintf (stderr, \"VIS \");\n+  if (flags & MASK_VIS2)\n+    fprintf (stderr, \"VIS2 \");\n+  if (flags & MASK_VIS3)\n+    fprintf (stderr, \"VIS3 \");\n+  if (flags & MASK_DEPRECATED_V8_INSNS)\n+    fprintf (stderr, \"DEPRECATED_V8_INSNS \");\n+  if (flags & MASK_LITTLE_ENDIAN)\n+    fprintf (stderr, \"LITTLE_ENDIAN \");\n+  if (flags & MASK_SPARCLET)\n+    fprintf (stderr, \"SPARCLET \");\n+  if (flags & MASK_SPARCLITE)\n+    fprintf (stderr, \"SPARCLITE \");\n+  if (flags & MASK_V8)\n+    fprintf (stderr, \"V8 \");\n+  if (flags & MASK_V9)\n+    fprintf (stderr, \"V9 \");\n+}\n+\n+static void\n+dump_target_flags (const char *prefix, const int flags)\n+{\n+  fprintf (stderr, \"%s: (%08x) [ \", prefix, flags);\n+  dump_target_flag_bits (flags);\n+  fprintf(stderr, \"]\\n\");\n+}\n+\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n@@ -745,49 +800,93 @@ sparc_option_override (void)\n   /* Table of values for -m{cpu,tune}=.  This must match the order of\n      the PROCESSOR_* enumeration.  */\n   static struct cpu_table {\n+    const char *const name;\n     const int disable;\n     const int enable;\n   } const cpu_table[] = {\n-    { MASK_ISA, 0 },\n-    { MASK_ISA, 0 },\n-    { MASK_ISA, MASK_V8 },\n+    { \"v7\",\t\tMASK_ISA, 0 },\n+    { \"cypress\",\tMASK_ISA, 0 },\n+    { \"v8\",\t\tMASK_ISA, MASK_V8 },\n     /* TI TMS390Z55 supersparc */\n-    { MASK_ISA, MASK_V8 },\n-    { MASK_ISA, MASK_V8|MASK_FPU },\n+    { \"supersparc\",\tMASK_ISA, MASK_V8 },\n+    { \"hypersparc\",\tMASK_ISA, MASK_V8|MASK_FPU },\n     /* LEON */\n-    { MASK_ISA, MASK_V8|MASK_FPU },\n-    { MASK_ISA, MASK_SPARCLITE },\n+    { \"leon\",\t\tMASK_ISA, MASK_V8|MASK_FPU },\n+    { \"sparclite\",\tMASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n-    { MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n+    { \"f930\",\t\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n     /* The Fujitsu MB86934 is the recent sparclite chip, with an FPU.  */\n-    { MASK_ISA, MASK_SPARCLITE|MASK_FPU },\n-    { MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n-    { MASK_ISA, MASK_SPARCLET },\n+    { \"f934\",\t\tMASK_ISA, MASK_SPARCLITE|MASK_FPU },\n+    { \"sparclite86x\",\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n+    { \"sparclet\",\tMASK_ISA, MASK_SPARCLET },\n     /* TEMIC sparclet */\n-    { MASK_ISA, MASK_SPARCLET },\n-    { MASK_ISA, MASK_V9 },\n+    { \"tsc701\",\t\tMASK_ISA, MASK_SPARCLET },\n+    { \"v9\",\t\tMASK_ISA, MASK_V9 },\n     /* UltraSPARC I, II, IIi */\n-    { MASK_ISA,\n+    { \"ultrasparc\",\tMASK_ISA,\n     /* Although insns using %y are deprecated, it is a clear win.  */\n-      MASK_V9|MASK_DEPRECATED_V8_INSNS},\n+      MASK_V9|MASK_DEPRECATED_V8_INSNS },\n     /* UltraSPARC III */\n     /* ??? Check if %y issue still holds true.  */\n-    { MASK_ISA,\n-      MASK_V9|MASK_DEPRECATED_V8_INSNS|MASK_VIS2},\n+    { \"ultrasparc3\",\tMASK_ISA,\n+      MASK_V9|MASK_DEPRECATED_V8_INSNS|MASK_VIS2 },\n     /* UltraSPARC T1 */\n-    { MASK_ISA,\n-      MASK_V9|MASK_DEPRECATED_V8_INSNS},\n+    { \"niagara\",\tMASK_ISA,\n+      MASK_V9|MASK_DEPRECATED_V8_INSNS },\n     /* UltraSPARC T2 */\n-    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2},\n+    { \"niagara2\",\tMASK_ISA,\n+      MASK_V9|MASK_POPC|MASK_VIS2 },\n     /* UltraSPARC T3 */\n-    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n+    { \"niagara3\",\tMASK_ISA,\n+      MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF },\n     /* UltraSPARC T4 */\n-    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n+    { \"niagara4\",\tMASK_ISA,\n+      MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF },\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n   int fpu;\n \n+  if (sparc_debug_string != NULL)\n+    {\n+      const char *q;\n+      char *p;\n+\n+      p = ASTRDUP (sparc_debug_string);\n+      while ((q = strtok (p, \",\")) != NULL)\n+\t{\n+\t  bool invert;\n+\t  int mask;\n+\n+\t  p = NULL;\n+\t  if (*q == '!')\n+\t    {\n+\t      invert = true;\n+\t      q++;\n+\t    }\n+\t  else\n+\t    invert = false;\n+\n+\t  if (! strcmp (q, \"all\"))\n+\t    mask = MASK_DEBUG_ALL;\n+\t  else if (! strcmp (q, \"options\"))\n+\t    mask = MASK_DEBUG_OPTIONS;\n+\t  else\n+\t    error (\"unknown -mdebug-%s switch\", q);\n+\n+\t  if (invert)\n+\t    sparc_debug &= ~mask;\n+\t  else\n+\t    sparc_debug |= mask;\n+\t}\n+    }\n+\n+  if (TARGET_DEBUG_OPTIONS)\n+    {\n+      dump_target_flags(\"Initial target_flags\", target_flags);\n+      dump_target_flags(\"target_flags_explicit\", target_flags_explicit);\n+    }\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n@@ -849,10 +948,25 @@ sparc_option_override (void)\n       gcc_assert (def->cpu != -1);\n       sparc_cpu_and_features = def->processor;\n     }\n+\n+  if ((target_flags & MASK_V8PLUS)\n+      && sparc_cpu_and_features < PROCESSOR_V9)\n+    sparc_cpu_and_features = PROCESSOR_V9;\n+\n   if (!global_options_set.x_sparc_cpu)\n     sparc_cpu = sparc_cpu_and_features;\n \n   cpu = &cpu_table[(int) sparc_cpu_and_features];\n+\n+  if (TARGET_DEBUG_OPTIONS)\n+    {\n+      fprintf (stderr, \"sparc_cpu_and_features: %s\\n\", cpu->name);\n+      fprintf (stderr, \"sparc_cpu: %s\\n\",\n+\t       cpu_table[(int) sparc_cpu].name);\n+      dump_target_flags (\"cpu->disable\", cpu->disable);\n+      dump_target_flags (\"cpu->enable\", cpu->enable);\n+    }\n+\n   target_flags &= ~cpu->disable;\n   target_flags |= (cpu->enable\n #ifndef HAVE_AS_FMAF_HPC_VIS3\n@@ -976,6 +1090,9 @@ sparc_option_override (void)\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n \n+  if (TARGET_DEBUG_OPTIONS)\n+    dump_target_flags (\"Final target_flags\", target_flags);\n+\n   maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n \t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA"}, {"sha": "e0db816c9e0159bdbf1dee6defa24823c62e4079", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -1880,3 +1880,9 @@ extern int sparc_indent_opcode;\n \n /* We use gcc _mcount for profiling.  */\n #define NO_PROFILE_COUNTERS 0\n+\n+/* Debug support */\n+#define MASK_DEBUG_OPTIONS\t\t0x01\t/* debug option handling */\n+#define MASK_DEBUG_ALL\t\t\tMASK_DEBUG_OPTIONS\n+\n+#define TARGET_DEBUG_OPTIONS\t\t(sparc_debug & MASK_DEBUG_OPTIONS)"}, {"sha": "5ee6396d5fcb8c3a9d7decb9a58848e8e964205a", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=a0bd60d1c9b6bdb85eeaa97a7e91b417aa70bcff", "patch": "@@ -21,6 +21,10 @@\n HeaderInclude\n config/sparc/sparc-opts.h\n \n+;; Debug flags\n+TargetVariable\n+unsigned int sparc_debug\n+\n mfpu\n Target Report Mask(FPU)\n Use hardware FP\n@@ -180,6 +184,10 @@ mcmodel=\n Target RejectNegative Joined Var(sparc_cmodel_string)\n Use given SPARC-V9 code model\n \n+mdebug=\n+Target RejectNegative Joined Var(sparc_debug_string)\n+Enable debug output\n+\n mstd-struct-return\n Target Report RejectNegative Var(sparc_std_struct_return)\n Enable strict 32-bit psABI struct return checking."}]}