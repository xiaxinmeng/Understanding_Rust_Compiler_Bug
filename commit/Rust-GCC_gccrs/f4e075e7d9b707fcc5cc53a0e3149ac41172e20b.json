{"sha": "f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlMDc1ZTdkOWI3MDdmY2M1Y2M1M2EwZTMxNDlhYzQxMTcyZTIwYg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-05-16T17:37:17Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-05-16T17:37:17Z"}, "message": "re PR rtl-optimization/60969 (ICE in output_129 in MMXMOV of mode MODE_SF for march=pentium4)\n\n2014-05-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60969\n\t* ira-costs.c (record_reg_classes): Allow only memory for pseudo.\n\tCalculate costs for this case.\n\n2014-05-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60969\n\t* g++.dg/pr60969.C: New.\n\nFrom-SVN: r210520", "tree": {"sha": "a386a1e13bbe1fcf16cc990e1e73750636a0674a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a386a1e13bbe1fcf16cc990e1e73750636a0674a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b628e86eca0f0719a58070b08fc794483fad6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b628e86eca0f0719a58070b08fc794483fad6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b628e86eca0f0719a58070b08fc794483fad6a1"}], "stats": {"total": 147, "additions": 121, "deletions": 26}, "files": [{"sha": "4477e8c6e893085d0e8e1e396e310f5d55d95cb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60969\n+\t* ira-costs.c (record_reg_classes): Allow only memory for pseudo.\n+\tCalculate costs for this case.\n+\n 2014-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const (fold_unary_loc) <NON_LVALUE_EXPR>: New case."}, {"sha": "116e1c8dfd16c6277c98681882fe006cdf7ec88d", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 80, "deletions": 26, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "patch": "@@ -762,10 +762,11 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t     into that class.  */\n \t  if (REG_P (op) && REGNO (op) >= FIRST_PSEUDO_REGISTER)\n \t    {\n-\t      if (classes[i] == NO_REGS)\n+\t      if (classes[i] == NO_REGS && ! allows_mem[i])\n \t\t{\n \t\t  /* We must always fail if the operand is a REG, but\n-\t\t     we did not find a suitable class.\n+\t\t     we did not find a suitable class and memory is\n+\t\t     not allowed.\n \n \t\t     Otherwise we may perform an uninitialized read\n \t\t     from this_op_costs after the `continue' statement\n@@ -783,50 +784,90 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t  bool out_p = recog_data.operand_type[i] != OP_IN;\n \t\t  enum reg_class op_class = classes[i];\n \t\t  move_table *move_in_cost, *move_out_cost;\n+\t\t  short (*mem_cost)[2];\n \n \t\t  ira_init_register_move_cost_if_necessary (mode);\n \t\t  if (! in_p)\n \t\t    {\n \t\t      ira_assert (out_p);\n-\t\t      move_out_cost = ira_may_move_out_cost[mode];\n-\t\t      for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t      if (op_class == NO_REGS)\n \t\t\t{\n-\t\t\t  rclass = cost_classes[k];\n-\t\t\t  pp_costs[k]\n-\t\t\t    = move_out_cost[op_class][rclass] * frequency;\n+\t\t\t  mem_cost = ira_memory_move_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k] = mem_cost[rclass][0] * frequency;\n+\t\t\t    }\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  move_out_cost = ira_may_move_out_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k]\n+\t\t\t\t= move_out_cost[op_class][rclass] * frequency;\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t  else if (! out_p)\n \t\t    {\n \t\t      ira_assert (in_p);\n-\t\t      move_in_cost = ira_may_move_in_cost[mode];\n-\t\t      for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t      if (op_class == NO_REGS)\n \t\t\t{\n-\t\t\t  rclass = cost_classes[k];\n-\t\t\t  pp_costs[k]\n-\t\t\t    = move_in_cost[rclass][op_class] * frequency;\n+\t\t\t  mem_cost = ira_memory_move_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k] = mem_cost[rclass][1] * frequency;\n+\t\t\t    }\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  move_in_cost = ira_may_move_in_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k]\n+\t\t\t\t= move_in_cost[rclass][op_class] * frequency;\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      move_in_cost = ira_may_move_in_cost[mode];\n-\t\t      move_out_cost = ira_may_move_out_cost[mode];\n-\t\t      for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t      if (op_class == NO_REGS)\n \t\t\t{\n-\t\t\t  rclass = cost_classes[k];\n-\t\t\t  pp_costs[k] = ((move_in_cost[rclass][op_class]\n-\t\t\t\t\t  + move_out_cost[op_class][rclass])\n-\t\t\t\t\t * frequency);\n+\t\t\t  mem_cost = ira_memory_move_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k] = ((mem_cost[rclass][0]\n+\t\t\t\t\t      + mem_cost[rclass][1])\n+\t\t\t\t\t     * frequency);\n+\t\t\t    }\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  move_in_cost = ira_may_move_in_cost[mode];\n+\t\t\t  move_out_cost = ira_may_move_out_cost[mode];\n+\t\t\t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n+\t\t\t    {\n+\t\t\t      rclass = cost_classes[k];\n+\t\t\t      pp_costs[k] = ((move_in_cost[rclass][op_class]\n+\t\t\t\t\t      + move_out_cost[op_class][rclass])\n+\t\t\t\t\t     * frequency);\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \n \t\t  /* If the alternative actually allows memory, make\n \t\t     things a bit cheaper since we won't need an extra\n \t\t     insn to load it.  */\n-\t\t  pp->mem_cost\n-\t\t    = ((out_p ? ira_memory_move_cost[mode][op_class][0] : 0)\n-\t\t       + (in_p ? ira_memory_move_cost[mode][op_class][1] : 0)\n-\t\t       - allows_mem[i]) * frequency;\n+\t\t  if (op_class != NO_REGS)\n+\t\t    pp->mem_cost\n+\t\t      = ((out_p ? ira_memory_move_cost[mode][op_class][0] : 0)\n+\t\t\t + (in_p ? ira_memory_move_cost[mode][op_class][1] : 0)\n+\t\t\t - allows_mem[i]) * frequency;\n \t\t  /* If we have assigned a class to this allocno in\n \t\t     our first pass, add a cost to this alternative\n \t\t     corresponding to what we would add if this\n@@ -836,15 +877,28 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t      enum reg_class pref_class = pref[COST_INDEX (REGNO (op))];\n \n \t\t      if (pref_class == NO_REGS)\n+\t\t\t{\n+\t\t\t  if (op_class != NO_REGS)\n+\t\t\t    alt_cost\n+\t\t\t      += ((out_p\n+\t\t\t\t   ? ira_memory_move_cost[mode][op_class][0]\n+\t\t\t\t   : 0)\n+\t\t\t\t  + (in_p\n+\t\t\t\t     ? ira_memory_move_cost[mode][op_class][1]\n+\t\t\t\t     : 0));\n+\t\t\t}\n+\t\t      else if (op_class == NO_REGS)\n \t\t\talt_cost\n \t\t\t  += ((out_p\n-\t\t\t       ? ira_memory_move_cost[mode][op_class][0] : 0)\n+\t\t\t       ? ira_memory_move_cost[mode][pref_class][1]\n+\t\t\t       : 0)\n \t\t\t      + (in_p\n-\t\t\t\t ? ira_memory_move_cost[mode][op_class][1]\n+\t\t\t\t ? ira_memory_move_cost[mode][pref_class][0]\n \t\t\t\t : 0));\n \t\t      else if (ira_reg_class_intersect[pref_class][op_class]\n \t\t\t       == NO_REGS)\n-\t\t\talt_cost += ira_register_move_cost[mode][pref_class][op_class];\n+\t\t\talt_cost += (ira_register_move_cost\n+\t\t\t\t     [mode][pref_class][op_class]);\n \t\t    }\n \t\t}\n \t    }"}, {"sha": "7254012ba3e1711c15aeef9fa8646d2b2365409b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "patch": "@@ -1,3 +1,8 @@\n+2014-05-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60969\n+\t* g++.dg/pr60969.C: New.\n+\n 2014-05-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61194"}, {"sha": "3f8d4c5b959a76ada74c38d869d8b0bc1e508cb6", "filename": "gcc/testsuite/g++.dg/pr60969.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60969.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e075e7d9b707fcc5cc53a0e3149ac41172e20b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60969.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60969.C?ref=f4e075e7d9b707fcc5cc53a0e3149ac41172e20b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -march=pentium4\" } */\n+\n+struct A\n+{\n+  float f, g, h, k;\n+  A () {}\n+  A (float v0, float x, float y) : f(v0), g(x), h(y), k(0.0f) {}\n+  A bar (A &a, float t) { return A (f + a.f * t, g + a.g * t, h + a.h * t); }\n+};\n+\n+A\n+baz (A &x, A &y, float t)\n+{\n+  return x.bar (y, t);\n+}\n+\n+A *\n+foo (A &s, A &t, A &u, A &v, int y, int z)\n+{\n+  A *x = new A[y * z];\n+  for (int i = 0; i < 7; i++)\n+    {\n+      A s = baz (s, u, i / (float) z);\n+      A t = baz (t, v, i / (float) z);\n+      for (int j = 0; j < 7; j++)\n+        x[i * y + j] = baz (s, t, j / (float) y);\n+    }\n+  return x;\n+}"}]}