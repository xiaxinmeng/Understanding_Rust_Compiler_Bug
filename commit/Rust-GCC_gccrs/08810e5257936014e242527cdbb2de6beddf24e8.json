{"sha": "08810e5257936014e242527cdbb2de6beddf24e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4MTBlNTI1NzkzNjAxNGUyNDI1MjdjZGJiMmRlNmJlZGRmMjRlOA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-10-31T14:59:19Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-10-31T14:59:19Z"}, "message": "Update file position for inquire lazily.\n\nlibgfortran ChangeLog:\n\n2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* io/inquire.c (inquire_via_unit): Check whether we're at the\n\tbeginning or end if the position is unspecified. If the position\n\tis not one of the 3 standard ones, return unspecified.\n\t* io/io.h (update_position): Remove prototype.\n\t* io/transfer.c (next_record): Set the position to unspecified,\n\tletting inquire figure it out more exactly when needed.\n\t* io/unit.c (update_position): Remove function.\n\n\ntestsuite ChangeLog:\n\n2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* gfortran.dg/inquire_5.f90: Update testcase to match the standard\n\tand current implementation.\n\nFrom-SVN: r180703", "tree": {"sha": "41e75a36bf344be0552dbdadfdb4a498e01f5710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e75a36bf344be0552dbdadfdb4a498e01f5710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08810e5257936014e242527cdbb2de6beddf24e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08810e5257936014e242527cdbb2de6beddf24e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08810e5257936014e242527cdbb2de6beddf24e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08810e5257936014e242527cdbb2de6beddf24e8/comments", "author": null, "committer": null, "parents": [{"sha": "3469bd8660b6c79a4727287ef4214d2b9c864ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3469bd8660b6c79a4727287ef4214d2b9c864ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3469bd8660b6c79a4727287ef4214d2b9c864ba6"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "c3a1f0fba4349341cfcb1becc87d7e0bf3204fcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -1,3 +1,8 @@\n+2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* gfortran.dg/inquire_5.f90: Update testcase to match the standard\n+\tand current implementation.\n+\n 2011-10-31  Paul Brook  <paul@codesourcery.com>\n \n \t* gcc.dg/constructor-1.c: New test."}, {"sha": "2be3a34c3f376663741476ee06d5f0621c513887", "filename": "gcc/testsuite/gfortran.dg/inquire_5.f90", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_5.f90?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -1,11 +1,10 @@\n ! { dg-do run { target fd_truncate } }\n-! { dg-options \"-std=legacy\" }\n !\n ! pr19314 inquire(..position=..) segfaults\n ! test by Thomas.Koenig@online.de\n !         bdavis9659@comcast.net\n       implicit none\n-      character*20 chr\n+      character(len=20) chr\n       open(7,STATUS='SCRATCH')\n       inquire(7,position=chr)\n       if (chr.NE.'ASIS') CALL ABORT\n@@ -31,7 +30,7 @@\n       write(7,*)'this is another record'\n       backspace(7)\n       inquire(7,position=chr)\n-      if (chr.NE.'ASIS') CALL ABORT\n+      if (chr .NE. 'UNSPECIFIED') CALL ABORT\n       rewind(7)\n       inquire(7,position=chr)\n       if (chr.NE.'REWIND') CALL ABORT"}, {"sha": "cbad61af460d8fc4df79db5368dcb5f99d61a611", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -1,3 +1,13 @@\n+2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/inquire.c (inquire_via_unit): Check whether we're at the\n+\tbeginning or end if the position is unspecified. If the position\n+\tis not one of the 3 standard ones, return unspecified.\n+\t* io/io.h (update_position): Remove prototype.\n+\t* io/transfer.c (next_record): Set the position to unspecified,\n+\tletting inquire figure it out more exactly when needed.\n+\t* io/unit.c (update_position): Remove function.\n+\n 2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/unix.h (struct stream): Add size function pointer."}, {"sha": "fb525caf863b2fd546afafdaa253c927297b041a", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -418,24 +418,36 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n       if (u == NULL || u->flags.access == ACCESS_DIRECT)\n         p = undefined;\n       else\n-        switch (u->flags.position)\n-          {\n-             case POSITION_REWIND:\n-               p = \"REWIND\";\n-               break;\n-             case POSITION_APPEND:\n-               p = \"APPEND\";\n-               break;\n-             case POSITION_ASIS:\n-               p = \"ASIS\";\n-               break;\n-             default:\n-               /* if not direct access, it must be\n-                  either REWIND, APPEND, or ASIS.\n-                  ASIS seems to be the best default */\n-               p = \"ASIS\";\n-               break;\n-          }\n+\t{\n+\t  /* If the position is unspecified, check if we can figure\n+\t     out whether it's at the beginning or end.  */\n+\t  if (u->flags.position == POSITION_UNSPECIFIED)\n+\t    {\n+\t      gfc_offset cur = stell (u->s);\n+\t      if (cur == 0)\n+\t\tu->flags.position = POSITION_REWIND;\n+\t      else if (cur != -1 && (ssize (u->s) == cur))\n+\t\tu->flags.position = POSITION_APPEND;\n+\t    }\n+\t  switch (u->flags.position)\n+\t    {\n+\t    case POSITION_REWIND:\n+\t      p = \"REWIND\";\n+\t      break;\n+\t    case POSITION_APPEND:\n+\t      p = \"APPEND\";\n+\t      break;\n+\t    case POSITION_ASIS:\n+\t      p = \"ASIS\";\n+\t      break;\n+\t    default:\n+\t      /* If the position has changed and is not rewind or\n+\t\t append, it must be set to a processor-dependent\n+\t\t value.  */\n+\t      p = \"UNSPECIFIED\";\n+\t      break;\n+\t    }\n+\t}\n       cf_strcpy (iqp->position, iqp->position_len, p);\n     }\n "}, {"sha": "23f07cae54842ebc96c3cce6558221aa7ca4260d", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -608,9 +608,6 @@ internal_proto(get_unit);\n extern void unlock_unit (gfc_unit *);\n internal_proto(unlock_unit);\n \n-extern void update_position (gfc_unit *);\n-internal_proto(update_position);\n-\n extern void finish_last_advance_record (gfc_unit *u);\n internal_proto (finish_last_advance_record);\n "}, {"sha": "062f80efec47b31c0cac91a786c91b85a922f6fd", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -3343,9 +3343,10 @@ next_record (st_parameter_dt *dtp, int done)\n \n   if (!is_stream_io (dtp))\n     {\n-      /* Keep position up to date for INQUIRE */\n+      /* Since we have changed the position, set it to unspecified so\n+\t that INQUIRE(POSITION=) knows it needs to look into it.  */\n       if (done)\n-\tupdate_position (dtp->u.p.current_unit);\n+\tdtp->u.p.current_unit->flags.position = POSITION_UNSPECIFIED;\n \n       dtp->u.p.current_unit->current_record = 0;\n       if (dtp->u.p.current_unit->flags.access == ACCESS_DIRECT)"}, {"sha": "b4d10cdbf11d32c0c3b6a8834e261b8d0f82052e", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08810e5257936014e242527cdbb2de6beddf24e8/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=08810e5257936014e242527cdbb2de6beddf24e8", "patch": "@@ -706,26 +706,6 @@ close_units (void)\n }\n \n \n-/* update_position()-- Update the flags position for later use by inquire.  */\n-\n-void\n-update_position (gfc_unit *u)\n-{\n-  /* If unit is not seekable, this makes no sense (and the standard is\n-     silent on this matter), and thus we don't change the position for\n-     a non-seekable file.  */\n-  gfc_offset cur = stell (u->s);\n-  if (cur == -1)\n-    return;\n-  else if (cur == 0)\n-    u->flags.position = POSITION_REWIND;\n-  else if (ssize (u->s) == cur)\n-    u->flags.position = POSITION_APPEND;\n-  else\n-    u->flags.position = POSITION_ASIS;\n-}\n-\n-\n /* High level interface to truncate a file, i.e. flush format buffers,\n    and generate an error or set some flags.  Just like POSIX\n    ftruncate, returns 0 on success, -1 on failure.  */"}]}