{"sha": "205dafb6edeca08419f4a5976be79bf7c86fd9a1", "node_id": "C_kwDOANBUbNoAKDIwNWRhZmI2ZWRlY2EwODQxOWY0YTU5NzZiZTc5YmY3Yzg2ZmQ5YTE", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-09-28T15:26:09Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-10-07T10:26:44Z"}, "message": "amdgcn: Implement -msram-ecc=any\n\nThe option was already there, but just an alias for -msram-ecc=on.  Now that\nLLVM13 supports HSACOv4 and the new ELF flags I can implement the option\nproperly.\n\nThe \"any\" option is the default in order to ensure that library files work\nwhichever way the user wants, which means we won't need multilibs to support\nthe different SRAM ECC hardware configurations.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-hsa.h (SRAMOPT): Include the whole option string.\n\tAdjust for new -msram-ecc=any behaviour.\n\t(ASM_SPEC): Adjust -mxnack and -msram-ecc usage.\n\t* config/gcn/gcn.c (output_file_start): Implement -msram-ecc=any.\n\t* config/gcn/mkoffload.c (EF_AMDGPU_XNACK): Rename to ...\n\t(EF_AMDGPU_XNACK_V3): ... this.\n\t(EF_AMDGPU_SRAM_ECC): Rename to ...\n\t(EF_AMDGPU_SRAM_ECC_V3): ... this.\n\t(EF_AMDGPU_FEATURE_XNACK_V4): New.\n\t(EF_AMDGPU_FEATURE_XNACK_UNSUPPORTED_V4): New.\n\t(EF_AMDGPU_FEATURE_XNACK_ANY_V4): New.\n\t(EF_AMDGPU_FEATURE_XNACK_OFF_V4): New.\n\t(EF_AMDGPU_FEATURE_XNACK_ON_V4): New.\n\t(EF_AMDGPU_FEATURE_SRAMECC_V4): New.\n\t(EF_AMDGPU_FEATURE_SRAMECC_UNSUPPORTED_V4): New.\n\t(EF_AMDGPU_FEATURE_SRAMECC_ANY_V4): New.\n\t(EF_AMDGPU_FEATURE_SRAMECC_OFF_V4): New.\n\t(EF_AMDGPU_FEATURE_SRAMECC_ON_V4): New.\n\t(SET_XNACK_ON): New.\n\t(SET_XNACK_OFF): New.\n\t(TEST_XNACK): New.\n\t(SET_SRAM_ECC_ON): New.\n\t(SET_SRAM_ECC_ANY): New.\n\t(SET_SRAM_ECC_OFF): New.\n\t(TEST_SRAM_ECC_ANY): New.\n\t(TEST_SRAM_ECC_ON): New.\n\t(main): Implement HSACOv4 and -msram-ecc=any.", "tree": {"sha": "4d9ba145807936c2a24d3c20b73874b4010cb256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d9ba145807936c2a24d3c20b73874b4010cb256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205dafb6edeca08419f4a5976be79bf7c86fd9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205dafb6edeca08419f4a5976be79bf7c86fd9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205dafb6edeca08419f4a5976be79bf7c86fd9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205dafb6edeca08419f4a5976be79bf7c86fd9a1/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca03ca35a58ebf9792aa8a08adf00b6fd3e0015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca03ca35a58ebf9792aa8a08adf00b6fd3e0015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca03ca35a58ebf9792aa8a08adf00b6fd3e0015"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "6a432d17d99f157ae19a3f292d7349392d968b11", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=205dafb6edeca08419f4a5976be79bf7c86fd9a1", "patch": "@@ -118,10 +118,12 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n #endif\n \n #ifdef HAVE_GCN_ASM_V3_SYNTAX\n-#define SRAMOPT \"sram-ecc\"\n+#define SRAMOPT \"!msram-ecc=off:-mattr=+sram-ecc;:-mattr=-sram-ecc\"\n #endif\n #ifdef HAVE_GCN_ASM_V4_SYNTAX\n-#define SRAMOPT \"sramecc\"\n+/* In HSACOv4 no attribute setting means the binary supports \"any\" hardware\n+   configuration.  The name of the attribute also changed.  */\n+#define SRAMOPT \"msram-ecc=on:-mattr=+sramecc;msram-ecc=off:-mattr=-sramecc\"\n #endif\n #if !defined(SRAMOPT) && !defined(IN_LIBGCC2)\n #error \"No assembler syntax configured\"\n@@ -143,11 +145,9 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n #define ASM_SPEC  \"-triple=amdgcn--amdhsa \"  \\\n \t\t  \"%:last_arg(%{march=*:-mcpu=%*}) \" \\\n \t\t  HSACO3_SELECT_OPT \\\n-\t\t  \"-mattr=%{\" X_FIJI X_900 X_906 X_908 \\\n-\t\t\t    \"mxnack:+xnack;:-xnack} \" \\\n-\t\t  /* FIXME: support \"any\" when we move to HSACOv4.  */ \\\n-\t\t  \"-mattr=%{\" S_FIJI S_900 S_906 S_908 \\\n-\t\t\t    \"!msram-ecc=off:+\" SRAMOPT \";:-\" SRAMOPT \"} \" \\\n+\t\t  \"%{\" X_FIJI X_900 X_906 X_908 \\\n+\t\t     \"mxnack:-mattr=+xnack;:-mattr=-xnack} \" \\\n+\t\t  \"%{\" S_FIJI S_900 S_906 S_908 SRAMOPT \"} \" \\\n \t\t  \"-filetype=obj\"\n #define LINK_SPEC \"--pie --export-dynamic\"\n #define LIB_SPEC  \"-lc\""}, {"sha": "2e90f327c45124ee67510a570922d173bdb97ff8", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=205dafb6edeca08419f4a5976be79bf7c86fd9a1", "patch": "@@ -5265,9 +5265,13 @@ output_file_start (void)\n   const char *sram_ecc = (flag_sram_ecc ? \"+sram-ecc\" : \"\");\n #endif\n #if HAVE_GCN_ASM_V4_SYNTAX\n+  /* In HSACOv4 no attribute setting means the binary supports \"any\" hardware\n+     configuration.  In GCC binaries, this is true for SRAM ECC, but not\n+     XNACK.  */\n   const char *xnack = (flag_xnack ? \":xnack+\" : \":xnack-\");\n-  /* FIXME: support \"any\" when we move to HSACOv4.  */\n-  const char *sram_ecc = (flag_sram_ecc ? \":sramecc+\" : \":sramecc-\");\n+  const char *sram_ecc = (flag_sram_ecc == SRAM_ECC_ON ? \":sramecc+\"\n+\t\t\t  : flag_sram_ecc == SRAM_ECC_OFF ? \":sramecc-\"\n+\t\t\t  : \"\");\n #endif\n   if (!use_xnack_attr)\n     xnack = \"\";"}, {"sha": "a3b22d059b962ec7843e30168f4cb2e9ff0f05a3", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 83, "deletions": 29, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205dafb6edeca08419f4a5976be79bf7c86fd9a1/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=205dafb6edeca08419f4a5976be79bf7c86fd9a1", "patch": "@@ -54,8 +54,51 @@\n #undef  EF_AMDGPU_MACH_AMDGCN_GFX908\n #define EF_AMDGPU_MACH_AMDGCN_GFX908 0x30\n \n-#define EF_AMDGPU_XNACK    0x100\n-#define EF_AMDGPU_SRAM_ECC 0x200\n+#define EF_AMDGPU_XNACK_V3    0x100\n+#define EF_AMDGPU_SRAM_ECC_V3 0x200\n+\n+#define EF_AMDGPU_FEATURE_XNACK_V4\t0x300  /* Mask.  */\n+#define EF_AMDGPU_FEATURE_XNACK_UNSUPPORTED_V4\t0x000\n+#define EF_AMDGPU_FEATURE_XNACK_ANY_V4\t0x100\n+#define EF_AMDGPU_FEATURE_XNACK_OFF_V4\t0x200\n+#define EF_AMDGPU_FEATURE_XNACK_ON_V4\t0x300\n+\n+#define EF_AMDGPU_FEATURE_SRAMECC_V4\t0xc00  /* Mask.  */\n+#define EF_AMDGPU_FEATURE_SRAMECC_UNSUPPORTED_V4\t0x000\n+#define EF_AMDGPU_FEATURE_SRAMECC_ANY_V4\t0x400\n+#define EF_AMDGPU_FEATURE_SRAMECC_OFF_V4\t0x800\n+#define EF_AMDGPU_FEATURE_SRAMECC_ON_V4\t\t0xc00\n+\n+#ifdef HAVE_GCN_ASM_V3_SYNTAX\n+#define SET_XNACK_ON(VAR) VAR |= EF_AMDGPU_XNACK_V3\n+#define SET_XNACK_OFF(VAR) VAR &= ~EF_AMDGPU_XNACK_V3\n+#define TEST_XNACK(VAR) (VAR & EF_AMDGPU_XNACK_V3)\n+\n+#define SET_SRAM_ECC_ON(VAR) VAR |= EF_AMDGPU_SRAM_ECC_V3\n+#define SET_SRAM_ECC_ANY(VAR) SET_SRAM_ECC_ON (VAR)\n+#define SET_SRAM_ECC_OFF(VAR) VAR &= ~EF_AMDGPU_SRAM_ECC_V3\n+#define TEST_SRAM_ECC_ANY(VAR) 0 /* Not supported.  */\n+#define TEST_SRAM_ECC_ON(VAR) (VAR & EF_AMDGPU_SRAM_ECC_V3)\n+#endif\n+#ifdef HAVE_GCN_ASM_V4_SYNTAX\n+#define SET_XNACK_ON(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_XNACK_V4) \\\n+\t\t\t\t | EF_AMDGPU_FEATURE_XNACK_ON_V4)\n+#define SET_XNACK_OFF(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_XNACK_V4) \\\n+\t\t\t\t  | EF_AMDGPU_FEATURE_XNACK_OFF_V4)\n+#define TEST_XNACK(VAR) ((VAR & EF_AMDGPU_FEATURE_XNACK_V4) \\\n+\t\t\t == EF_AMDGPU_FEATURE_XNACK_ON_V4)\n+\n+#define SET_SRAM_ECC_ON(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t\t\t\t    | EF_AMDGPU_FEATURE_SRAMECC_ON_V4)\n+#define SET_SRAM_ECC_ANY(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t\t\t\t     | EF_AMDGPU_FEATURE_SRAMECC_ANY_V4)\n+#define SET_SRAM_ECC_OFF(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t\t\t\t     | EF_AMDGPU_FEATURE_SRAMECC_OFF_V4)\n+#define TEST_SRAM_ECC_ANY(VAR) ((VAR & EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t\t\t\t== EF_AMDGPU_FEATURE_SRAMECC_ANY_V4)\n+#define TEST_SRAM_ECC_ON(VAR) ((VAR & EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t\t\t       == EF_AMDGPU_FEATURE_SRAMECC_ON_V4)\n+#endif\n \n #ifndef R_AMDGPU_NONE\n #define R_AMDGPU_NONE\t\t0\n@@ -80,7 +123,13 @@ static struct obstack files_to_cleanup;\n \n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n uint32_t elf_arch = EF_AMDGPU_MACH_AMDGCN_GFX803;  // Default GPU architecture.\n-uint32_t elf_flags = 0;\n+uint32_t elf_flags =\n+#ifdef HAVE_GCN_ASM_V3_SYNTAX\n+    0;\n+#endif\n+#ifdef HAVE_GCN_ASM_V4_SYNTAX\n+    (EF_AMDGPU_FEATURE_XNACK_ANY_V4 | EF_AMDGPU_FEATURE_SRAMECC_ANY_V4);\n+#endif\n \n /* Delete tempfiles.  */\n \n@@ -851,23 +900,22 @@ main (int argc, char **argv)\n       else if (strcmp (argv[i], \"-fpic\") == 0)\n \tfpic = true;\n       else if (strcmp (argv[i], \"-mxnack\") == 0)\n-\telf_flags |= EF_AMDGPU_XNACK;\n+\tSET_XNACK_ON (elf_flags);\n       else if (strcmp (argv[i], \"-mno-xnack\") == 0)\n-\telf_flags &= ~EF_AMDGPU_XNACK;\n+\tSET_XNACK_OFF (elf_flags);\n       else if (strcmp (argv[i], \"-msram-ecc=on\") == 0)\n \t{\n-\t  elf_flags |= EF_AMDGPU_SRAM_ECC;\n+\t  SET_SRAM_ECC_ON (elf_flags);\n \t  sram_seen = true;\n \t}\n       else if (strcmp (argv[i], \"-msram-ecc=any\") == 0)\n \t{\n-\t  /* FIXME: change this when we move to HSACOv4.  */\n-\t  elf_flags |= EF_AMDGPU_SRAM_ECC;\n+\t  SET_SRAM_ECC_ANY (elf_flags);\n \t  sram_seen = true;\n \t}\n       else if (strcmp (argv[i], \"-msram-ecc=off\") == 0)\n \t{\n-\t  elf_flags &= ~EF_AMDGPU_SRAM_ECC;\n+\t  SET_SRAM_ECC_OFF (elf_flags);\n \t  sram_seen = true;\n \t}\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n@@ -890,23 +938,27 @@ main (int argc, char **argv)\n   if (!(fopenacc ^ fopenmp))\n     fatal_error (input_location, \"either -fopenacc or -fopenmp must be set\");\n \n-  /* The SRAM-ECC feature defaults to \"any\" on GPUs where the feature is\n-     available.  */\n   if (!sram_seen)\n-    switch (elf_arch)\n-      {\n-      case EF_AMDGPU_MACH_AMDGCN_GFX803:\n-      case EF_AMDGPU_MACH_AMDGCN_GFX900:\n-      case EF_AMDGPU_MACH_AMDGCN_GFX906:\n+    {\n+#ifdef HAVE_GCN_ASM_V3_SYNTAX\n+      /* For HSACOv3, the SRAM-ECC feature defaults to \"on\" on GPUs where the\n+\t feature is available.\n+\t (HSACOv4 has elf_flags initialsed to \"any\" in all cases.)  */\n+      switch (elf_arch)\n+\t{\n+\tcase EF_AMDGPU_MACH_AMDGCN_GFX803:\n+\tcase EF_AMDGPU_MACH_AMDGCN_GFX900:\n+\tcase EF_AMDGPU_MACH_AMDGCN_GFX906:\n #ifndef HAVE_GCN_SRAM_ECC_GFX908\n-      case EF_AMDGPU_MACH_AMDGCN_GFX908:\n+\tcase EF_AMDGPU_MACH_AMDGCN_GFX908:\n #endif\n-\tbreak;\n-      default:\n-\t/* FIXME: change this when we move to HSACOv4.  */\n-\telf_flags |= EF_AMDGPU_SRAM_ECC;\n-\tbreak;\n-      }\n+\t  break;\n+\tdefault:\n+\t  SET_SRAM_ECC_ON (elf_flags);\n+\t  break;\n+\t}\n+#endif\n+    }\n \n   const char *abi;\n   switch (offload_abi)\n@@ -936,11 +988,12 @@ main (int argc, char **argv)\n   if (fopenmp)\n     obstack_ptr_grow (&cc_argv_obstack, \"-mgomp\");\n   obstack_ptr_grow (&cc_argv_obstack,\n-\t\t    (elf_flags & EF_AMDGPU_XNACK\n+\t\t    (TEST_XNACK (elf_flags)\n \t\t     ? \"-mxnack\" : \"-mno-xnack\"));\n   obstack_ptr_grow (&cc_argv_obstack,\n-\t\t    (elf_flags & EF_AMDGPU_SRAM_ECC\n-\t\t     ? \"-msram-ecc=on\" : \"-msram-ecc=off\"));\n+\t\t    (TEST_SRAM_ECC_ON (elf_flags) ? \"-msram-ecc=on\"\n+\t\t     : TEST_SRAM_ECC_ANY (elf_flags) ? \"-msram-ecc=any\"\n+\t\t     : \"-msram-ecc=off\"));\n \n   for (int ix = 1; ix != argc; ix++)\n     {\n@@ -1043,11 +1096,12 @@ main (int argc, char **argv)\n       obstack_ptr_grow (&ld_argv_obstack, gcn_s2_name);\n       obstack_ptr_grow (&ld_argv_obstack, \"-lgomp\");\n       obstack_ptr_grow (&ld_argv_obstack,\n-\t\t\t(elf_flags & EF_AMDGPU_XNACK\n+\t\t\t(TEST_XNACK (elf_flags)\n \t\t\t ? \"-mxnack\" : \"-mno-xnack\"));\n       obstack_ptr_grow (&ld_argv_obstack,\n-\t\t\t(elf_flags & EF_AMDGPU_SRAM_ECC\n-\t\t\t ? \"-msram-ecc=on\" : \"-msram-ecc=off\"));\n+\t\t\t(TEST_SRAM_ECC_ON (elf_flags) ? \"-msram-ecc=on\"\n+\t\t\t : TEST_SRAM_ECC_ANY (elf_flags) ? \"-msram-ecc=any\"\n+\t\t\t : \"-msram-ecc=off\"));\n       if (verbose)\n \tobstack_ptr_grow (&ld_argv_obstack, \"-v\");\n "}]}