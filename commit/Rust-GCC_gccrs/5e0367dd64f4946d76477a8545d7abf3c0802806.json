{"sha": "5e0367dd64f4946d76477a8545d7abf3c0802806", "node_id": "C_kwDOANBUbNoAKDVlMDM2N2RkNjRmNDk0NmQ3NjQ3N2E4NTQ1ZDdhYmYzYzA4MDI4MDY", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-06-29T22:38:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:13Z"}, "message": "[Ada] Incremental patch for restriction No_Dynamic_Accessibility_Checks\n\ngcc/ada/\n\n\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n\tAdd new entry for No_Dynamic_Accessibility_Checks documenting\n\tbehavior.\n\t* gnat_rm.texi: Regenerate.\n\t* exp_ch4.adb (Expand_N_In): Perform special expansion for\n\tmembership tests when No_Dynamic_Accessibility_Checks is active.\n\t* sem_attr.adb (Resolve_Attribute): Skip static accessibility\n\tcheck on actuals for anonymous access type formal parameters,\n\tand add constants for readability.\n\t* sem_util.adb (Function_Call_Or_Allocator_Level): Use the\n\tinnermost master for determining the level for function calls\n\twithin the alternative accessibility model.\n\t(Type_Access_Level): Properly get the level for anonymous access\n\tfunction result types.", "tree": {"sha": "0be6ee1aab23b667ba995e983485136ecb48f117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be6ee1aab23b667ba995e983485136ecb48f117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0367dd64f4946d76477a8545d7abf3c0802806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0367dd64f4946d76477a8545d7abf3c0802806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0367dd64f4946d76477a8545d7abf3c0802806", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0367dd64f4946d76477a8545d7abf3c0802806/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ca68773b8bbb89b6e0cbb21d55d0ceeec58f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ca68773b8bbb89b6e0cbb21d55d0ceeec58f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ca68773b8bbb89b6e0cbb21d55d0ceeec58f9c"}], "stats": {"total": 906, "additions": 518, "deletions": 388}, "files": [{"sha": "cbd780b285e6aec1f320237dcdb308aee6e62623", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=5e0367dd64f4946d76477a8545d7abf3c0802806", "patch": "@@ -870,6 +870,44 @@ used, the compiler is allowed to suppress the elaboration counter normally\n associated with the unit. This counter is typically used to check for access\n before elaboration and to control multiple elaboration attempts.\n \n+No_Dynamic_Accessibility_Checks\n+-------------------------------\n+.. index:: No_Dynamic_Accessibility_Checks\n+\n+[GNAT] No dynamic accessibility checks are generated when this restriction is\n+in effect. Instead, dangling references are prevented via more conservative\n+compile-time checking. More specifically, existing compile-time checks are\n+enforced but with more conservative assumptions about the accessibility levels\n+of the relevant entities. These conservative assumptions eliminate the need for\n+dynamic accessibility checks.\n+\n+These new rules for computing (at compile-time) the accessibility level of an\n+anonymous access type T are as follows:\n+\n+*\n+ If T is a function result type then, from the caller's perspective, its level\n+ is that of the innermost master enclosing the function call. From the callee's\n+ perspective, the level of parameters and local variables of the callee is\n+ statically deeper than the level of T.\n+\n+ For any other accessibility level L such that the level of parameters and local\n+ variables of the callee is statically deeper than L, the level of T (from the\n+ callee's perspective) is also statically deeper than L.\n+*\n+ If T is the type of a formal parameter then, from the caller's perspective,\n+ its level is at least as deep as that of the type of the corresponding actual\n+ parameter (whatever that actual parameter might be). From the callee's\n+ perspective, the level of parameters and local variables of the callee is\n+ statically deeper than the level of T.\n+*\n+ If T is the type of a discriminant then its level is that of the discriminated\n+ type.\n+*\n+ If T is the type of a stand-alone object then its level is the level of the\n+ object.\n+*\n+ In all other cases, the level of T is as defined by the existing rules of Ada.\n+\n No_Dynamic_Sized_Objects\n ------------------------\n .. index:: No_Dynamic_Sized_Objects"}, {"sha": "d636cb0f6137290e5f8fa3eb194108926e9022ba", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5e0367dd64f4946d76477a8545d7abf3c0802806", "patch": "@@ -6911,7 +6911,6 @@ package body Exp_Ch4 is\n             if Ada_Version >= Ada_2012\n               and then Is_Acc\n               and then Ekind (Ltyp) = E_Anonymous_Access_Type\n-              and then not No_Dynamic_Accessibility_Checks_Enabled (Lop)\n             then\n                declare\n                   Expr_Entity : Entity_Id := Empty;\n@@ -6928,11 +6927,26 @@ package body Exp_Ch4 is\n                      end if;\n                   end if;\n \n+                  --  When restriction No_Dynamic_Accessibility_Checks is in\n+                  --  effect, expand the membership test to a static value\n+                  --  since we cannot rely on dynamic levels.\n+\n+                  if No_Dynamic_Accessibility_Checks_Enabled (Lop) then\n+                     if Static_Accessibility_Level\n+                          (Lop, Object_Decl_Level)\n+                            > Type_Access_Level (Rtyp)\n+                     then\n+                        Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n+                     else\n+                        Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n+                     end if;\n+                     Analyze_And_Resolve (N, Restyp);\n+\n                   --  If a conversion of the anonymous access value to the\n                   --  tested type would be illegal, then the result is False.\n \n-                  if not Valid_Conversion\n-                           (Lop, Rtyp, Lop, Report_Errs => False)\n+                  elsif not Valid_Conversion\n+                              (Lop, Rtyp, Lop, Report_Errs => False)\n                   then\n                      Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n                      Analyze_And_Resolve (N, Restyp);"}, {"sha": "f5b58d2a0844409ad9d6a37acd1235fc6ad52411", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 404, "deletions": 353, "changes": 757, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5e0367dd64f4946d76477a8545d7abf3c0802806"}, {"sha": "4d69d58d3bcaba516a8baf400081dee1287704a3", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=5e0367dd64f4946d76477a8545d7abf3c0802806", "patch": "@@ -11506,28 +11506,45 @@ package body Sem_Attr is\n                --  in such a context - unless the restriction\n                --  No_Dynamic_Accessibility_Checks is active.\n \n-               if Attr_Id /= Attribute_Unchecked_Access\n-                 and then\n-                   (Ekind (Btyp) = E_General_Access_Type\n-                      or else No_Dynamic_Accessibility_Checks_Enabled (Btyp))\n-\n-                 --  Call Accessibility_Level directly to avoid returning zero\n-                 --  on cases where the prefix is an explicitly aliased\n-                 --  parameter in a return statement, instead of using the\n-                 --  normal Static_Accessibility_Level function.\n-\n-                 --  Shouldn't this be handled somehow in\n-                 --  Static_Accessibility_Level ???\n+               declare\n+                  No_Dynamic_Acc_Checks : constant Boolean :=\n+                    No_Dynamic_Accessibility_Checks_Enabled (Btyp);\n \n-                 and then Nkind (Accessibility_Level (P, Dynamic_Level))\n-                            = N_Integer_Literal\n-                 and then\n-                   Intval (Accessibility_Level (P, Dynamic_Level))\n-                     > Deepest_Type_Access_Level (Btyp)\n-               then\n-                  Accessibility_Message;\n-                  return;\n-               end if;\n+                  Compatible_Alt_Checks : constant Boolean :=\n+                    No_Dynamic_Acc_Checks and then not Debug_Flag_Underscore_B;\n+               begin\n+                  if Attr_Id /= Attribute_Unchecked_Access\n+                    and then (Ekind (Btyp) = E_General_Access_Type\n+                               or else No_Dynamic_Acc_Checks)\n+\n+                    --  In the case of the alternate \"compatibility\"\n+                    --  accessibility model we do not perform a static\n+                    --  accessibility check on actuals for anonymous access\n+                    --  types - so exclude them here.\n+\n+                    and then not (Compatible_Alt_Checks\n+                                   and then Is_Actual_Parameter (N)\n+                                   and then Ekind (Btyp)\n+                                              = E_Anonymous_Access_Type)\n+\n+                    --  Call Accessibility_Level directly to avoid returning\n+                    --  zero on cases where the prefix is an explicitly aliased\n+                    --  parameter in a return statement, instead of using the\n+                    --  normal Static_Accessibility_Level function.\n+\n+                    --  Shouldn't this be handled somehow in\n+                    --  Static_Accessibility_Level ???\n+\n+                    and then Nkind (Accessibility_Level (P, Dynamic_Level))\n+                               = N_Integer_Literal\n+                    and then\n+                      Intval (Accessibility_Level (P, Dynamic_Level))\n+                        > Deepest_Type_Access_Level (Btyp)\n+                  then\n+                     Accessibility_Message;\n+                     return;\n+                  end if;\n+               end;\n             end if;\n \n             if Ekind (Btyp) in E_Access_Protected_Subprogram_Type"}, {"sha": "072cd3f6745d8fde20066bde6204e3a3ae7f9a08", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0367dd64f4946d76477a8545d7abf3c0802806/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5e0367dd64f4946d76477a8545d7abf3c0802806", "patch": "@@ -415,16 +415,14 @@ package body Sem_Util is\n                if Debug_Flag_Underscore_B then\n                   return Make_Level_Literal (Typ_Access_Level (Etype (N)));\n \n-               --  For function calls the level is that of the subprogram,\n-               --  otherwise (for allocators etc.) we get the level of the\n-               --  corresponding anonymous access type which is calculated\n-               --  through the normal path of execution.\n+               --  For function calls the level is that of the innermost\n+               --  master, otherwise (for allocators etc.) we get the level\n+               --  of the corresponding anonymous access type, which is\n+               --  calculated through the normal path of execution.\n \n-               elsif Nkind (N) = N_Function_Call\n-                 and then Nkind (Name (N)) /= N_Explicit_Dereference\n-               then\n+               elsif Nkind (N) = N_Function_Call then\n                   return Make_Level_Literal\n-                           (Subprogram_Access_Level (Entity (Name (N))));\n+                           (Innermost_Master_Scope_Depth (Expr));\n                end if;\n             end if;\n \n@@ -29382,10 +29380,22 @@ package body Sem_Util is\n                             (Associated_Node_For_Itype (Typ));\n \n                if Present (Def_Ent) then\n-                  --  When the type comes from an anonymous access parameter,\n-                  --  the level is that of the subprogram declaration.\n+                  --  When the defining entity is a subprogram then we know the\n+                  --  anonymous access type Typ has been generated to either\n+                  --  describe an anonymous access type formal or an anonymous\n+                  --  access result type.\n+\n+                  --  Since we are only interested in the formal case, avoid\n+                  --  the anonymous access result type.\n+\n+                  if Ekind (Def_Ent) in Subprogram_Kind\n+                    and then not (Ekind (Def_Ent) = E_Function\n+                                   and then Etype (Def_Ent) = Typ)\n+                  then\n+                     --  When the type comes from an anonymous access\n+                     --  parameter, the level is that of the subprogram\n+                     --  declaration.\n \n-                  if Ekind (Def_Ent) in Subprogram_Kind then\n                      return Scope_Depth (Def_Ent);\n \n                   --  When the type is an access discriminant, the level is"}]}