{"sha": "d2c92f5a43a4541115e0b8eadf024ed7004e1386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjOTJmNWE0M2E0NTQxMTE1ZTBiOGVhZGYwMjRlZDcwMDRlMTM4Ng==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-01-28T19:09:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-28T19:09:41Z"}, "message": "reload.c (push_reload): If WORD_REGISTER_OPERATIONS...\n\n        * reload.c (push_reload): If WORD_REGISTER_OPERATIONS, reload the\n        SUBREG_REG if the word count is unchanged, also in the input reload\n        case.  Disable non-applicable sanity checks.\n\nFrom-SVN: r17541", "tree": {"sha": "1c0035b1008301f0c1636f9a9b2ab3bf5c8484e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0035b1008301f0c1636f9a9b2ab3bf5c8484e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c92f5a43a4541115e0b8eadf024ed7004e1386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c92f5a43a4541115e0b8eadf024ed7004e1386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c92f5a43a4541115e0b8eadf024ed7004e1386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c92f5a43a4541115e0b8eadf024ed7004e1386/comments", "author": null, "committer": null, "parents": [{"sha": "90ad3ab77dfe645679ac8aee9e5d5bd303dc1d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ad3ab77dfe645679ac8aee9e5d5bd303dc1d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ad3ab77dfe645679ac8aee9e5d5bd303dc1d25"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "c84c110820ce06e3b085c40a1310237e5d6cd83b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c92f5a43a4541115e0b8eadf024ed7004e1386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c92f5a43a4541115e0b8eadf024ed7004e1386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2c92f5a43a4541115e0b8eadf024ed7004e1386", "patch": "@@ -1,3 +1,9 @@\n+Wed Jan 28 20:11:06 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload.c (push_reload): If WORD_REGISTER_OPERATIONS, reload the\n+\tSUBREG_REG if the word count is unchanged, also in the input reload\n+\tcase.  Disable non-applicable sanity checks.\n+\n Wed Jan 28 20:08:26 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* config/t-svr4 (TARGET_LIBGCC2_CFLAGS): Add -fPIC."}, {"sha": "6006357da29032d6e1a57bb92bb38ce6cd872795", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c92f5a43a4541115e0b8eadf024ed7004e1386/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c92f5a43a4541115e0b8eadf024ed7004e1386/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d2c92f5a43a4541115e0b8eadf024ed7004e1386", "patch": "@@ -885,6 +885,13 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (in))))\n \t\t      && INTEGRAL_MODE_P (GET_MODE (SUBREG_REG (in)))\n \t\t      && LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (in))) != NIL)\n+#endif\n+#ifdef WORD_REGISTER_OPERATIONS\n+\t\t  || ((GET_MODE_SIZE (inmode)\n+\t\t       < GET_MODE_SIZE (GET_MODE (SUBREG_REG (in))))\n+\t\t      && ((GET_MODE_SIZE (inmode) - 1) / UNITS_PER_WORD ==\n+\t\t\t  ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (in))) - 1)\n+\t\t\t   / UNITS_PER_WORD)))\n #endif\n \t\t  ))\n \t  || (GET_CODE (SUBREG_REG (in)) == REG\n@@ -923,7 +930,7 @@ push_reload (in, out, inloc, outloc, class,\n       in_subreg_loc = inloc;\n       inloc = &SUBREG_REG (in);\n       in = *inloc;\n-#ifndef LOAD_EXTEND_OP\n+#if ! defined (LOAD_EXTEND_OP) && ! defined (WORD_REGISTER_OPERATIONS)\n       if (GET_CODE (in) == MEM)\n \t/* This is supposed to happen only for paradoxical subregs made by\n \t   combine.c.  (SUBREG (MEM)) isn't supposed to occur other ways.  */\n@@ -1027,7 +1034,7 @@ push_reload (in, out, inloc, outloc, class,\n       out_subreg_loc = outloc;\n       outloc = &SUBREG_REG (out);\n       out = *outloc; \n-#ifndef LOAD_EXTEND_OP\n+#if ! defined (LOAD_EXTEND_OP) && ! defined (WORD_REGISTER_OPERATIONS)\n      if (GET_CODE (out) == MEM\n \t  && GET_MODE_SIZE (GET_MODE (out)) > GET_MODE_SIZE (outmode))\n \tabort ();"}]}