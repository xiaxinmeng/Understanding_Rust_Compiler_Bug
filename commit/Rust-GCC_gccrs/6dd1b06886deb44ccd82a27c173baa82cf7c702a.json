{"sha": "6dd1b06886deb44ccd82a27c173baa82cf7c702a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkMWIwNjg4NmRlYjQ0Y2NkODJhMjdjMTczYmFhODJjZjdjNzAyYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-08T17:35:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-08T17:35:32Z"}, "message": "Input_UTF8.java (read): Fixed handling of surrogate characters.\n\n\t* gnu/gcj/convert/Input_UTF8.java (read): Fixed handling of\n\tsurrogate characters.\n\t* gnu/gcj/convert/Output_UTF8.java (standardUTF8): Default to\n\ttrue.\n\t(write): Correct handling of surrogate characters.\n\nFrom-SVN: r35569", "tree": {"sha": "4e56c11527f3021de4681a3fb9c9570949a66080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e56c11527f3021de4681a3fb9c9570949a66080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dd1b06886deb44ccd82a27c173baa82cf7c702a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd1b06886deb44ccd82a27c173baa82cf7c702a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd1b06886deb44ccd82a27c173baa82cf7c702a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd1b06886deb44ccd82a27c173baa82cf7c702a/comments", "author": null, "committer": null, "parents": [{"sha": "97e242b0a71b4d685eca7514da77f8058adbda38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e242b0a71b4d685eca7514da77f8058adbda38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e242b0a71b4d685eca7514da77f8058adbda38"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "12e4dca4eaad642ec2f313f993b33ee1c3e45ab4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6dd1b06886deb44ccd82a27c173baa82cf7c702a", "patch": "@@ -1,3 +1,11 @@\n+2000-08-08  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gnu/gcj/convert/Input_UTF8.java (read): Fixed handling of\n+\tsurrogate characters.\n+\t* gnu/gcj/convert/Output_UTF8.java (standardUTF8): Default to\n+\ttrue.\n+\t(write): Correct handling of surrogate characters.\n+\n 2000-08-07  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/reflect/Method.java (hashCode): Use getName()."}, {"sha": "433a0d1e3a62cea96464256a994e55045f5efdad", "filename": "libjava/gnu/gcj/convert/Input_UTF8.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java?ref=6dd1b06886deb44ccd82a27c173baa82cf7c702a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -56,10 +56,11 @@ public int read (char[] outbuffer, int outpos, int count)\n \t\t\t// partial == (hi-0xD800)*0x10+((lo-0xDC00)>>6)+0x400.\n \t\t\t// The definition lo>=0xDC00 && lo<=0xDFFF implies\n \t\t\t// that (lo-0xDC00)>>6 is in the range 0..15.\n-\t\t\t// Hence we can infer (partial-0x400)>>4 == (hi-0xDB00)\n-\t\t\t// and we can emit the high-surrogate without waiting\n-\t\t\t// for the final byte:\n-\t\t\toutbuffer[outpos++] = (char) (0xDA00+(partial>>4));\n+\t\t\t// Hence we can solve for `hi' and we can emit\n+\t\t\t// the high-surrogate without waiting for the\n+\t\t\t// final byte:\n+\t\t\toutbuffer[outpos++]\n+\t\t\t  = (char) (0xD800 + ((partial - 0x400) >> 4));\n \n \t\t\t// Now we want to set it up so that when we read\n \t\t\t// the final byte on the next iteration, we will"}, {"sha": "01f5ce890e37b6cbfc01f2e69ef1a8eb3b5747ff", "filename": "libjava/gnu/gcj/convert/Output_UTF8.java", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd1b06886deb44ccd82a27c173baa82cf7c702a/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java?ref=6dd1b06886deb44ccd82a27c173baa82cf7c702a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -21,7 +21,7 @@ public class Output_UTF8 extends UnicodeToBytes\n   /** True if a surrogate pair should be emitted as a single UTF8 sequence.\n    * Otherwise, a surrogate pair is treated as two separate characters.\n    * Also, '\\0' is emitted as {0} if true, and as {0xC0,0x80} if false. */\n-  public boolean standardUTF8;\n+  public boolean standardUTF8 = true;\n \n   // Saves the previous char if it was a high-surrogate.\n   char hi_part;\n@@ -60,9 +60,27 @@ public int write (char[] inbuffer, int inpos, int inlength)\n \t    while (bytes_todo > 0 && avail > 0);\n \t    continue;\n \t  }\n+\n \tchar ch = inbuffer[inpos++];\n \tinlength--;\n-\tif (ch < 128 && (ch != 0 || standardUTF8))\n+\n+\tif ((hi_part != 0 && (ch <= 0xDBFF || ch > 0xDFFF))\n+\t    || (hi_part == 0 && ch >= 0xDC00 && ch <= 0xDFFF))\n+\t  {\n+\t    // If the previous character was a high surrogate, and we\n+\t    // don't now have a low surrogate, we print the high\n+\t    // surrogate as an isolated character.  If this character\n+\t    // is a low surrogate and we didn't previously see a high\n+\t    // surrogate, we do the same thing.\n+\t    --inpos;\n+\t    ++inlength;\n+\t    buf[count++] = (byte) (0xE0 | (hi_part >> 12));\n+\t    value = hi_part;\n+\t    hi_part = 0;\n+\t    avail--;\n+\t    bytes_todo = 2;\n+\t  }\n+\telse if (ch < 128 && (ch != 0 || standardUTF8))\n \t  {\n \t    avail--;\n \t    buf[count++] = (byte) ch;\n@@ -78,19 +96,16 @@ else if (ch >= 0xD800 && ch <= 0xDFFF && standardUTF8)\n \t  {\n \t    if (ch <= 0xDBFF)  // High surrogates\n \t      {\n-\t\t// The first byte is (0xF0 | value>>18), where value is the\n-\t\t// Unicode scalar value of the combine character - which\n-\t\t// we may not know yet.  But from substituting:\n-\t\t// value == (hi-0xD800)*0x400+(lo-0xDC00)+0x10000,\n-\t\t// hi==ch, and cancelling we get:\n-\t\tbuf[count++] = (byte) (0xF0 | ((ch-0xD800) >> 8));\n-\t\tavail--;\n+\t\t// Just save the high surrogate until the next\n+\t\t// character comes along.\n \t\thi_part = ch;\n \t      }\n \t    else // Low surrogates\n \t      {\n \t\tvalue = (hi_part - 0xD800) * 0x400 + (ch - 0xDC00) + 0x10000;\n+\t\tbuf[count++] = (byte) (0xF0 | (value >> 18));\n \t\tbytes_todo = 3;\n+\t\thi_part = 0;\n \t      }\n \t  }\n \telse"}]}