{"sha": "b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmMTdiMjA2MmM2ZTA3YzQyMzZlMTZkMTI0ZTlmMWRjZDM0NDQ3Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2010-10-18T10:10:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T10:10:51Z"}, "message": "einfo.ads, einfo.adb: New attribute PPC_Wrapper for entries and entry families.\n\n2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb: New attribute PPC_Wrapper for entries and entry\n\tfamilies. Denotes a procedure that performs pre/postcondition checks\n\tand then performs the entry call.\n\t* sem_res.adb (Resolve_Entry_Call): If the entry has\n\tpre/postconditions, replace call with a call to the PPC_Wrapper of the\n\tentry.\n\t* exp_ch9.adb (Build_PPC_Wrapper): new procedure.\n\t(Expand_N_Entry_Declaration, Expand_N_Protected_Type_Declaration): call\n\tBuild_PPC_Wrapper for all entries in task and protected definitions.\n\nFrom-SVN: r165622", "tree": {"sha": "9d44d5009c4eacefdf04073beccd3205499d3266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d44d5009c4eacefdf04073beccd3205499d3266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12009a12f4f447123c23b6b54674b105b26cbb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12009a12f4f447123c23b6b54674b105b26cbb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12009a12f4f447123c23b6b54674b105b26cbb54"}], "stats": {"total": 283, "additions": 256, "deletions": 27}, "files": [{"sha": "cf709097483beca2b1878f972fb5ddd92a17ffc4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "patch": "@@ -1,3 +1,15 @@\n+2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: New attribute PPC_Wrapper for entries and entry\n+\tfamilies. Denotes a procedure that performs pre/postcondition checks\n+\tand then performs the entry call.\n+\t* sem_res.adb (Resolve_Entry_Call): If the entry has\n+\tpre/postconditions, replace call with a call to the PPC_Wrapper of the\n+\tentry.\n+\t* exp_ch9.adb (Build_PPC_Wrapper): new procedure.\n+\t(Expand_N_Entry_Declaration, Expand_N_Protected_Type_Declaration): call\n+\tBuild_PPC_Wrapper for all entries in task and protected definitions.\n+\n 2010-10-18  Tristan Gingold  <gingold@adacore.com>\n \n \t* init.c: Add __gnat_set_stack_guard_page and __gnat_set_stack_limit."}, {"sha": "5675f79aa2b2eb34d689bbe11f615eb8bd4141e7", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "patch": "@@ -214,6 +214,7 @@ package body Einfo is\n    --    Interfaces                      Elist25\n    --    Debug_Renaming_Link             Node25\n    --    DT_Offset_To_Top_Func           Node25\n+   --    PPC_Wrapper                     Node25\n    --    Task_Body_Procedure             Node25\n \n    --    Dispatch_Table_Wrappers         Elist26\n@@ -512,7 +513,6 @@ package body Einfo is\n    --    OK_To_Rename                    Flag247\n \n    --    (unused)                        Flag232\n-\n    --    (unused)                        Flag248\n    --    (unused)                        Flag249\n    --    (unused)                        Flag250\n@@ -2359,6 +2359,12 @@ package body Einfo is\n       return Node8 (Id);\n    end Postcondition_Proc;\n \n+   function PPC_Wrapper (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Entry, E_Entry_Family));\n+      return Node25 (Id);\n+   end PPC_Wrapper;\n+\n    function Prival (Id : E) return E is\n    begin\n       pragma Assert (Is_Protected_Component (Id));\n@@ -2582,7 +2588,7 @@ package body Einfo is\n    function Spec_PPC_List (Id : E) return N is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Entry\n+        (Ekind_In (Id,  E_Entry, E_Entry_Family)\n           or else Is_Subprogram (Id)\n           or else Is_Generic_Subprogram (Id));\n       return Node24 (Id);\n@@ -4817,6 +4823,12 @@ package body Einfo is\n       Set_Node8 (Id, V);\n    end Set_Postcondition_Proc;\n \n+   procedure Set_PPC_Wrapper (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Entry, E_Entry_Family));\n+      Set_Node25 (Id, V);\n+   end Set_PPC_Wrapper;\n+\n    procedure Set_Direct_Primitive_Operations (Id : E; V : L) is\n    begin\n       pragma Assert\n@@ -5057,7 +5069,7 @@ package body Einfo is\n    procedure Set_Spec_PPC_List (Id : E; V : N) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Entry, E_Void)\n+        (Ekind_In (Id, E_Entry, E_Entry_Family, E_Void)\n           or else Is_Subprogram (Id)\n           or else Is_Generic_Subprogram (Id));\n       Set_Node24 (Id, V);\n@@ -6575,16 +6587,6 @@ package body Einfo is\n       return Ekind (Id);\n    end Parameter_Mode;\n \n-   ---------------------\n-   -- Record_Rep_Item --\n-   ---------------------\n-\n-   procedure Record_Rep_Item (E : Entity_Id; N : Node_Id) is\n-   begin\n-      Set_Next_Rep_Item (N, First_Rep_Item (E));\n-      Set_First_Rep_Item (E, N);\n-   end Record_Rep_Item;\n-\n    --------------------------\n    -- Primitive_Operations --\n    --------------------------\n@@ -6603,6 +6605,16 @@ package body Einfo is\n       end if;\n    end Primitive_Operations;\n \n+   ---------------------\n+   -- Record_Rep_Item --\n+   ---------------------\n+\n+   procedure Record_Rep_Item (E : Entity_Id; N : Node_Id) is\n+   begin\n+      Set_Next_Rep_Item (N, First_Rep_Item (E));\n+      Set_First_Rep_Item (E, N);\n+   end Record_Rep_Item;\n+\n    ---------------\n    -- Root_Type --\n    ---------------\n@@ -8132,6 +8144,10 @@ package body Einfo is\n          when E_Variable                                   =>\n             Write_Str (\"Debug_Renaming_Link\");\n \n+         when E_Entry                                      |\n+              E_Entry_Family                               =>\n+            Write_Str (\"PPC_Wrapper\");\n+\n          when others                                       =>\n             Write_Str (\"Field25??\");\n       end case;"}, {"sha": "cbfa6325f1af5ae56bb8d3a4981a756e246c3609", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "patch": "@@ -3211,6 +3211,11 @@ package Einfo is\n --       to generate the call to this procedure in case the expander inserts\n --       implicit return statements.\n \n+--    PPC_Wrapper (Node25)\n+--       Present in entries and entry families. Set only if pre- or post-\n+--       conditions are present. The precondition_wrapper body is the original\n+--       entry call, decorated with the given precondition for the entry.\n+\n --    Primitive_Operations (synthesized)\n --       Present in concurrent types, tagged record types and subtypes, tagged\n --       private types and tagged incomplete types. For concurrent types that\n@@ -4960,6 +4965,7 @@ package Einfo is\n    --    Scope_Depth_Value                   (Uint22)\n    --    Protection_Object                   (Node23)   (protected kind)\n    --    Spec_PPC_List                       (Node24)   (for entry only)\n+   --    PPC_Wrapper                         (Node25)\n    --    Default_Expressions_Processed       (Flag108)\n    --    Entry_Accepted                      (Flag152)\n    --    Is_AST_Entry                        (Flag132)  (for entry only)\n@@ -6079,6 +6085,7 @@ package Einfo is\n    function Packed_Array_Type                   (Id : E) return E;\n    function Parent_Subtype                      (Id : E) return E;\n    function Postcondition_Proc                  (Id : E) return E;\n+   function PPC_Wrapper                         (Id : E) return E;\n    function Direct_Primitive_Operations         (Id : E) return L;\n    function Prival                              (Id : E) return E;\n    function Prival_Link                         (Id : E) return E;\n@@ -6649,6 +6656,7 @@ package Einfo is\n    procedure Set_Packed_Array_Type               (Id : E; V : E);\n    procedure Set_Parent_Subtype                  (Id : E; V : E);\n    procedure Set_Postcondition_Proc              (Id : E; V : E);\n+   procedure Set_PPC_Wrapper                     (Id : E; V : E);\n    procedure Set_Direct_Primitive_Operations     (Id : E; V : L);\n    procedure Set_Prival                          (Id : E; V : E);\n    procedure Set_Prival_Link                     (Id : E; V : E);\n@@ -7367,6 +7375,7 @@ package Einfo is\n    pragma Inline (Parameter_Mode);\n    pragma Inline (Parent_Subtype);\n    pragma Inline (Postcondition_Proc);\n+   pragma Inline (PPC_Wrapper);\n    pragma Inline (Prival);\n    pragma Inline (Prival_Link);\n    pragma Inline (Private_Dependents);\n@@ -7757,6 +7766,7 @@ package Einfo is\n    pragma Inline (Set_Packed_Array_Type);\n    pragma Inline (Set_Parent_Subtype);\n    pragma Inline (Set_Postcondition_Proc);\n+   pragma Inline (Set_PPC_Wrapper);\n    pragma Inline (Set_Prival);\n    pragma Inline (Set_Prival_Link);\n    pragma Inline (Set_Private_Dependents);"}, {"sha": "c16ffba8c9b279135484c0eb8b52cd77a7f2a81a", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 182, "deletions": 14, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "patch": "@@ -162,6 +162,14 @@ package body Exp_Ch9 is\n    --       <formalN> : AnnN;\n    --    end record;\n \n+   procedure Build_PPC_Wrapper (E : Entity_Id; Decl : Node_Id);\n+   --  Build body of wrapper procedure for an entry or entry family that has\n+   --  pre/postconditions. The body gathers the PPC's and expands them in the\n+   --  usual way, and performs the entry call itself. This way preconditions\n+   --  are evaluated before the call is queued. E is the entry in question,\n+   --  and Decl is the enclosing synchronized type declaration at whose\n+   --  freeze point the generated body is analyzed.\n+\n    procedure Build_Wrapper_Bodies\n      (Loc : Source_Ptr;\n       Typ : Entity_Id;\n@@ -1568,6 +1576,147 @@ package body Exp_Ch9 is\n       return Rec_Nam;\n    end Build_Parameter_Block;\n \n+   -----------------------\n+   -- Build_PPC_Wrapper --\n+   -----------------------\n+\n+   procedure Build_PPC_Wrapper (E : Entity_Id; Decl : Node_Id) is\n+      Loc        : constant Source_Ptr := Sloc (E);\n+      Synch_Type : constant Entity_Id := Scope (E);\n+\n+      Wrapper_Id : constant Entity_Id :=\n+                     Make_Defining_Identifier (Loc,\n+                       Chars => New_External_Name (Chars (E), 'E'));\n+      --  the wrapper procedure name\n+\n+      Wrapper_Body : Node_Id;\n+\n+      Synch_Id : constant Entity_Id :=\n+                   Make_Defining_Identifier (Loc,\n+                     Chars => New_External_Name (Chars (Scope (E)), 'A'));\n+      --  The parameter that designates the synchronized object in the call\n+\n+      Actuals : constant List_Id := New_List;\n+      --  the actuals in the entry call.\n+\n+      Entry_Call : constant Node_Id :=\n+                     Make_Procedure_Call_Statement (Loc,\n+                       Name =>\n+                         Make_Selected_Component (Loc,\n+                           Prefix        => New_Occurrence_Of (Synch_Id, Loc),\n+                           Selector_Name => New_Occurrence_Of (E, Loc)),\n+                       Parameter_Associations => Actuals);\n+\n+      Decls      : constant List_Id := New_List;\n+\n+      Specs : List_Id;\n+      --  The specification of the wrapper procedure\n+\n+   begin\n+\n+      --  Only build the wrapper if entry has pre/postconditions.\n+      --  Should this be done unconditionally instead ???\n+\n+      declare\n+         P : Node_Id;\n+\n+      begin\n+         P := Spec_PPC_List (E);\n+         if No (P) then\n+            return;\n+         end if;\n+\n+         --  Transfer ppc pragmas to the declarations of the wrapper\n+\n+         while Present (P) loop\n+            if Pragma_Name (P) = Name_Precondition\n+              or else Pragma_Name (P) = Name_Postcondition\n+            then\n+               Append (Relocate_Node (P), Decls);\n+               Set_Analyzed (Last (Decls), False);\n+            end if;\n+\n+            P := Next_Pragma (P);\n+         end loop;\n+      end;\n+\n+      --  First formal is synchronized object\n+\n+      Specs := New_List (\n+        Make_Parameter_Specification (Loc,\n+          Defining_Identifier => Synch_Id,\n+          Out_Present         =>  True,\n+          In_Present          =>  True,\n+          Parameter_Type      => New_Occurrence_Of (Scope (E), Loc)));\n+\n+      --  Now add formals that match those of the entry, and build actuals\n+      --  for the nested entry call.\n+\n+      declare\n+         Form      : Entity_Id;\n+         New_Form  : Entity_Id;\n+         Parm_Spec : Node_Id;\n+\n+      begin\n+         Form := First_Formal (E);\n+         while Present (Form) loop\n+            New_Form := Make_Defining_Identifier (Loc, Chars (Form));\n+            Parm_Spec :=\n+              Make_Parameter_Specification (Loc,\n+                Defining_Identifier => New_Form,\n+                Out_Present         =>  Out_Present (Parent (Form)),\n+                In_Present          =>  In_Present  (Parent (Form)),\n+                Parameter_Type      => New_Occurrence_Of (Etype (Form), Loc));\n+\n+            Append (Parm_Spec, Specs);\n+            Append (New_Occurrence_Of (New_Form, Loc), Actuals);\n+            Next_Formal (Form);\n+         end loop;\n+      end;\n+\n+      --  Add renaming declarations for the discriminants of the enclosing\n+      --  type, which may be visible in the preconditions.\n+\n+      if Has_Discriminants (Synch_Type) then\n+         declare\n+            D : Entity_Id;\n+            Decl : Node_Id;\n+\n+         begin\n+            D := First_Discriminant (Synch_Type);\n+            while Present (D) loop\n+               Decl :=\n+                 Make_Object_Renaming_Declaration (Loc,\n+                   Defining_Identifier =>\n+                     Make_Defining_Identifier (Loc, Chars (D)),\n+                   Subtype_Mark        => New_Reference_To (Etype (D), Loc),\n+                   Name                =>\n+                     Make_Selected_Component (Loc,\n+                       Prefix        => New_Reference_To (Synch_Id, Loc),\n+                       Selector_Name => Make_Identifier (Loc, Chars (D))));\n+               Prepend (Decl, Decls);\n+               Next_Discriminant (D);\n+            end loop;\n+         end;\n+      end if;\n+\n+      Set_PPC_Wrapper (E, Wrapper_Id);\n+      Wrapper_Body :=\n+        Make_Subprogram_Body (Loc,\n+          Specification =>\n+            Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name => Wrapper_Id,\n+              Parameter_Specifications => Specs),\n+         Declarations => Decls,\n+         Handled_Statement_Sequence =>\n+           Make_Handled_Sequence_Of_Statements (Loc,\n+             Statements => New_List (Entry_Call)));\n+\n+      --  The wrapper body is analyzed when the enclosing type is frozen.\n+\n+      Append_Freeze_Action (Defining_Entity (Decl), Wrapper_Body);\n+   end Build_PPC_Wrapper;\n+\n    --------------------------\n    -- Build_Wrapper_Bodies --\n    --------------------------\n@@ -1613,11 +1762,11 @@ package body Exp_Ch9 is\n          end if;\n \n          declare\n-            Actuals      : List_Id := No_List;\n-            Conv_Id      : Node_Id;\n-            First_Form   : Node_Id;\n-            Formal       : Node_Id;\n-            Nam          : Node_Id;\n+            Actuals    : List_Id := No_List;\n+            Conv_Id    : Node_Id;\n+            First_Form : Node_Id;\n+            Formal     : Node_Id;\n+            Nam        : Node_Id;\n \n          begin\n             --  Map formals to actuals. Use the list built for the wrapper\n@@ -1630,7 +1779,6 @@ package body Exp_Ch9 is\n \n             if Present (Formal) then\n                Actuals := New_List;\n-\n                while Present (Formal) loop\n                   Append_To (Actuals,\n                     Make_Identifier (Loc, Chars =>\n@@ -1653,9 +1801,9 @@ package body Exp_Ch9 is\n \n                if Is_Controlling_Formal (First_Formal (Subp_Id)) then\n                   Prepend_To (Actuals,\n-                    Unchecked_Convert_To (\n-                      Corresponding_Concurrent_Type (Obj_Typ),\n-                      Make_Identifier (Loc, Name_uO)));\n+                    Unchecked_Convert_To\n+                      (Corresponding_Concurrent_Type (Obj_Typ),\n+                       Make_Identifier (Loc, Name_uO)));\n \n                else\n                   Prepend_To (Actuals,\n@@ -1685,11 +1833,9 @@ package body Exp_Ch9 is\n                Nam :=\n                  Make_Selected_Component (Loc,\n                    Prefix =>\n-                     Unchecked_Convert_To (\n-                       Corresponding_Concurrent_Type (Obj_Typ),\n-                       Conv_Id),\n-                   Selector_Name =>\n-                     New_Reference_To (Subp_Id, Loc));\n+                     Unchecked_Convert_To\n+                       (Corresponding_Concurrent_Type (Obj_Typ), Conv_Id),\n+                   Selector_Name => New_Reference_To (Subp_Id, Loc));\n             end if;\n \n             --  Create the subprogram body. For a function, the call to the\n@@ -8050,6 +8196,10 @@ package body Exp_Ch9 is\n             Insert_After (Current_Node, Sub);\n             Analyze (Sub);\n \n+            --  build wrapper procedure for pre/postconditions.\n+\n+            Build_PPC_Wrapper (Comp_Id, N);\n+\n             Set_Protected_Body_Subprogram\n               (Defining_Identifier (Comp),\n                Defining_Unit_Name (Specification (Sub)));\n@@ -10599,6 +10749,24 @@ package body Exp_Ch9 is\n       --  any were declared.\n \n       Expand_Previous_Access_Type (Tasktyp);\n+\n+      --  Create wrappers for entries that have pre/postconditions\n+\n+      declare\n+         Ent : Entity_Id;\n+\n+      begin\n+         Ent := First_Entity (Tasktyp);\n+         while Present (Ent) loop\n+            if Ekind_In (Ent, E_Entry, E_Entry_Family)\n+              and then Present (Spec_PPC_List (Ent))\n+            then\n+               Build_PPC_Wrapper (Ent, N);\n+            end if;\n+\n+            Next_Entity (Ent);\n+         end loop;\n+      end;\n    end Expand_N_Task_Type_Declaration;\n \n    -------------------------------"}, {"sha": "3ca9798f9c38f4212b527afdcffbe8369ada26b5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f17b2062c6e07c4236e16d124e9f1dcd34447f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b7f17b2062c6e07c4236e16d124e9f1dcd34447f", "patch": "@@ -6327,6 +6327,29 @@ package body Sem_Res is\n          end;\n       end if;\n \n+      if Ekind_In (Nam, E_Entry, E_Entry_Family)\n+        and then Present (PPC_Wrapper (Nam))\n+        and then Current_Scope /= PPC_Wrapper (Nam)\n+      then\n+\n+         --  Rewrite as call to the precondition wrapper, adding the\n+         --  task object to the list of actuals.\n+\n+         declare\n+            New_Call : Node_Id;\n+            New_Actuals : List_Id;\n+         begin\n+            New_Actuals := New_List (Obj);\n+            Append_List (Parameter_Associations (N), New_Actuals);\n+            New_Call := Make_Procedure_Call_Statement (Loc,\n+              Name => New_Occurrence_Of (PPC_Wrapper (Nam), Loc),\n+              Parameter_Associations => New_Actuals);\n+            Rewrite (N, New_Call);\n+            Analyze_And_Resolve (N);\n+            return;\n+         end;\n+      end if;\n+\n       --  The operation name may have been overloaded. Order the actuals\n       --  according to the formals of the resolved entity, and set the\n       --  return type to that of the operation."}]}