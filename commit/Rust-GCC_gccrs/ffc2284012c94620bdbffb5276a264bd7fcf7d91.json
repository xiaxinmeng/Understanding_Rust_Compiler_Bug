{"sha": "ffc2284012c94620bdbffb5276a264bd7fcf7d91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjMjI4NDAxMmM5NDYyMGJkYmZmYjUyNzZhMjY0YmQ3ZmNmN2Q5MQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-07-20T13:07:43Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-20T13:07:43Z"}, "message": "target.def (addr_space): Add new diagnose_usage to hook vector.\n\ngcc/\n\t* target.def (addr_space): Add new diagnose_usage to hook vector.\n\t* targhooks.c (default_addr_space_diagnose_usage): Add default\n\timplementation and...\n\t* targhooks.h (default_addr_space_diagnose_usage): ... its prototype.\n\t* c/c-parser.c (c_lex_one_token) [CPP_NAME]: If the token\n\tis some address space, call targetm.addr_space.diagnose_usage.\n\t* doc/tm.texi.in (Named Address Spaces): Add anchor for\n\tTARGET_ADDR_SPACE_DIAGNOSE_USAGE documentation.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r238514", "tree": {"sha": "3af01204ef4bbfc231cede2c4fc9c9162a5b05a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af01204ef4bbfc231cede2c4fc9c9162a5b05a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffc2284012c94620bdbffb5276a264bd7fcf7d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc2284012c94620bdbffb5276a264bd7fcf7d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc2284012c94620bdbffb5276a264bd7fcf7d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc2284012c94620bdbffb5276a264bd7fcf7d91/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144530cf6352a55404e04bce3354e23d7c7c2d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144530cf6352a55404e04bce3354e23d7c7c2d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144530cf6352a55404e04bce3354e23d7c7c2d1d"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "8cafd56b5b26ddcd705308a84b72fb8eef845371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -1,3 +1,15 @@\n+2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* target.def (addr_space): Add new diagnose_usage to hook vector.\n+\t* targhooks.c (default_addr_space_diagnose_usage): Add default\n+\timplementation and...\n+\t* targhooks.h (default_addr_space_diagnose_usage): ... its prototype.\n+\t* c/c-parser.c (c_lex_one_token) [CPP_NAME]: If the token\n+\tis some address space, call targetm.addr_space.diagnose_usage.\n+\t* doc/tm.texi.in (Named Address Spaces): Add anchor for\n+\tTARGET_ADDR_SPACE_DIAGNOSE_USAGE documentation.\n+\t* doc/tm.texi: Regenerate.\n+\n 2016-07-20  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/71898"}, {"sha": "45e32ba49d4fdd7bfe9576b97eff0adfeecdb34b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -301,6 +301,9 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t    else if (rid_code >= RID_FIRST_ADDR_SPACE\n \t\t     && rid_code <= RID_LAST_ADDR_SPACE)\n \t      {\n+\t\taddr_space_t as;\n+\t\tas = (addr_space_t) (rid_code - RID_FIRST_ADDR_SPACE);\n+\t\ttargetm.addr_space.diagnose_usage (as, token->location);\n \t\ttoken->id_kind = C_ID_ADDRSPACE;\n \t\ttoken->keyword = rid_code;\n \t\tbreak;"}, {"sha": "160ced1d284526c031e930e8c4d2c694756ffeca", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -10431,6 +10431,17 @@ Define this to define how the address space is encoded in dwarf.\n The result is the value to be used with @code{DW_AT_address_class}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ADDR_SPACE_DIAGNOSE_USAGE (addr_space_t @var{as}, location_t @var{loc})\n+Define this hook if the availability of an address space depends on\n+command line options and some diagnostics should be printed when the\n+address space is used.  This hook is called during parsing and allows\n+to emit a better diagnostic compared to the case where the address space\n+was not registered with @code{c_register_addr_space}.  @var{as} is\n+the address space as registered with @code{c_register_addr_space}.\n+@var{loc} is the location of the address space qualifier token.\n+The default implementation does nothing.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "6a114961e2732b467c555ba54c510df40a38dee1", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -7486,6 +7486,8 @@ c_register_addr_space (\"__ea\", ADDR_SPACE_EA);\n \n @hook TARGET_ADDR_SPACE_DEBUG\n \n+@hook TARGET_ADDR_SPACE_DIAGNOSE_USAGE\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "4a849227de46773863637819f18f7a0de5197a82", "filename": "gcc/target.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -3241,6 +3241,20 @@ The result is the value to be used with @code{DW_AT_address_class}.\",\n  int, (addr_space_t as),\n  default_addr_space_debug)\n \n+/* Function to emit custom diagnostic if an address space is used.  */\n+DEFHOOK\n+(diagnose_usage,\n+ \"Define this hook if the availability of an address space depends on\\n\\\n+command line options and some diagnostics should be printed when the\\n\\\n+address space is used.  This hook is called during parsing and allows\\n\\\n+to emit a better diagnostic compared to the case where the address space\\n\\\n+was not registered with @code{c_register_addr_space}.  @var{as} is\\n\\\n+the address space as registered with @code{c_register_addr_space}.\\n\\\n+@var{loc} is the location of the address space qualifier token.\\n\\\n+The default implementation does nothing.\",\n+ void, (addr_space_t as, location_t loc),\n+ default_addr_space_diagnose_usage)\n+\n HOOK_VECTOR_END (addr_space)\n \n #undef HOOK_PREFIX"}, {"sha": "65055b4b443ca744ad59aca7f4b599d463e50dbd", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -1291,6 +1291,15 @@ default_addr_space_debug (addr_space_t as)\n   return as;\n }\n \n+/* The default hook implementation for TARGET_ADDR_SPACE_DIAGNOSE_USAGE.\n+   Don't complain about any address space.  */\n+\n+void\n+default_addr_space_diagnose_usage (addr_space_t, location_t)\n+{\n+}\n+\t \n+\n /* The default hook for TARGET_ADDR_SPACE_CONVERT. This hook should never be\n    called for targets with only a generic address space.  */\n "}, {"sha": "bcec7a3027e9bfef9af74f7a0037a783fabd31da", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc2284012c94620bdbffb5276a264bd7fcf7d91/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=ffc2284012c94620bdbffb5276a264bd7fcf7d91", "patch": "@@ -181,6 +181,7 @@ extern rtx default_addr_space_legitimize_address (rtx, rtx, machine_mode,\n extern bool default_addr_space_subset_p (addr_space_t, addr_space_t);\n extern bool default_addr_space_zero_address_valid (addr_space_t);\n extern int default_addr_space_debug (addr_space_t);\n+extern void default_addr_space_diagnose_usage (addr_space_t, location_t);\n extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);"}]}