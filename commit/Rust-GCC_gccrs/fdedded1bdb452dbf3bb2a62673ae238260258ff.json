{"sha": "fdedded1bdb452dbf3bb2a62673ae238260258ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlZGRlZDFiZGI0NTJkYmYzYmIyYTYyNjczYWUyMzgyNjAyNThmZg==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2003-02-26T22:14:24Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2003-02-26T22:14:24Z"}, "message": "decl.c (finish_enum): Merge two 'for' loops.\n\n        * decl.c (finish_enum): Merge two 'for' loops. Copy value node if required.\n        Postpone enum setting for template decls.\n        (build_enumerator): Delay copying value node until finish_enum (). Remove\n        #if 0'ed code.\n        * pt.c (tsubst_enum): Set TREE_TYPE and copy value node.\n        (tsubst_copy): Add check for enum type.\n\nFrom-SVN: r63487", "tree": {"sha": "fc38680b655982d2f6210efb42c64a722484b673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc38680b655982d2f6210efb42c64a722484b673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdedded1bdb452dbf3bb2a62673ae238260258ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdedded1bdb452dbf3bb2a62673ae238260258ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdedded1bdb452dbf3bb2a62673ae238260258ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdedded1bdb452dbf3bb2a62673ae238260258ff/comments", "author": null, "committer": null, "parents": [{"sha": "eeec05e1dbd553dc97695ac6bb91112c42599d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeec05e1dbd553dc97695ac6bb91112c42599d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeec05e1dbd553dc97695ac6bb91112c42599d30"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "b896fb30d200ab4ee7fdd927db003d5fee6426d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fdedded1bdb452dbf3bb2a62673ae238260258ff", "patch": "@@ -1,3 +1,12 @@\n+2003-02-26  Devang Patel  <dpatel@apple.com>\n+\n+\t* decl.c (finish_enum): Merge two 'for' loops. Copy value node if required.\n+\tPostpone enum setting for template decls.\n+\t(build_enumerator): Delay copying value node until finish_enum (). Remove\n+\t#if 0'ed code.\n+\t* pt.c (tsubst_enum): Set TREE_TYPE and copy value node.\n+\t(tsubst_copy): Add check for enum type.\n+\t\n 2003-02-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9683"}, {"sha": "de631813ae80cac97c93137433fcaa8c2ca5c1d5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fdedded1bdb452dbf3bb2a62673ae238260258ff", "patch": "@@ -13062,15 +13062,6 @@ finish_enum (tree enumtype)\n   /* We built up the VALUES in reverse order.  */\n   TYPE_VALUES (enumtype) = nreverse (TYPE_VALUES (enumtype));\n \n-  /* [dcl.enum]\n-\n-     Following the closing brace of an enum-specifier, each\n-     enumerator has the type of its enumeration.  Prior to the\n-     closing brace, the type of each enumerator is the type of\n-     its initializing value.  */\n-  for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n-    TREE_TYPE (TREE_VALUE (pair)) = enumtype;\n-  \n   /* For an enum defined in a template, all further processing is\n      postponed until the template is instantiated.  */\n   if (processing_template_decl)\n@@ -13080,31 +13071,51 @@ finish_enum (tree enumtype)\n       return;\n     }\n \n-  /* Figure out what the minimum and maximum values of the enumerators\n-     are.  */\n   if (TYPE_VALUES (enumtype))\n     {\n+      /* Initialize min and max values and figure out actual values in\n+\t following 'for' loop.  */\n       minnode = maxnode = NULL_TREE;\n \n-      for (pair = TYPE_VALUES (enumtype);\n-\t   pair;\n-\t   pair = TREE_CHAIN (pair))\n+      /* [dcl.enum]\n+\t \n+      Following the closing brace of an enum-specifier, each\n+      enumerator has the type of its enumeration.  Prior to the\n+      closing brace, the type of each enumerator is the type of\n+      its initializing value.  */\n+      for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n \t{\n+\n \t  tree value;\n \n-\t  value = DECL_INITIAL (TREE_VALUE (pair));\n+\t  /* If we are going to reset type then copy node first.\n+\t     It cannot be shared now.  */\n+\t  if (TREE_TYPE (TREE_VALUE (pair)) != enumtype)\n+\t    {\n+\t      if (DECL_INITIAL (TREE_VALUE (pair)))\n+\t\tDECL_INITIAL (TREE_VALUE (pair)) = \n+\t\t  copy_node (DECL_INITIAL (TREE_VALUE (pair)));\n+\t      TREE_TYPE (TREE_VALUE (pair)) = enumtype;\n+\t    }\n \n-\t  if (!minnode)\n-\t    minnode = maxnode = value;\n-\t  else if (tree_int_cst_lt (maxnode, value))\n-\t    maxnode = value;\n-\t  else if (tree_int_cst_lt (value, minnode))\n-\t    minnode = value;\n+\t  if (!processing_template_decl)\n+\t    {\n+\t      /* Adjust min and max value.  */\n+\t      value = DECL_INITIAL (TREE_VALUE (pair));\n+\n+\t      if (!minnode)\n+\t\tminnode = maxnode = value;\n+\t      else if (tree_int_cst_lt (maxnode, value))\n+\t\tmaxnode = value;\n+\t      else if (tree_int_cst_lt (value, minnode))\n+\t\tminnode = value;\n+\t    }\n \t}\n     }\n   else\n     minnode = maxnode = integer_zero_node;\n \n+\n   /* Compute the number of bits require to represent all values of the\n      enumeration.  We must do this before the type of MINNODE and\n      MAXNODE are transformed, since min_precision relies on the\n@@ -13174,7 +13185,6 @@ build_enumerator (tree name, tree value, tree enumtype)\n   tree decl;\n   tree context;\n   tree type;\n-  tree values;\n \n   /* Remove no-op casts from the value.  */\n   if (value)\n@@ -13223,24 +13233,8 @@ build_enumerator (tree name, tree value, tree enumtype)\n       /* Remove no-op casts from the value.  */\n       if (value)\n \tSTRIP_TYPE_NOPS (value);\n-#if 0\n-      /* To fix MAX_VAL enum consts. (bkoz)  */\n-      TREE_TYPE (value) = integer_type_node;\n-#endif\n     }\n \n-  /* We always have to copy here; not all INTEGER_CSTs are unshared.\n-     Even in other cases, we will later (in finish_enum) be setting\n-     the type of VALUE.  But, we don't need to make a copy if this\n-     VALUE is one of the enumeration constants for this same\n-     enumeration type.  */\n-  for (values = TYPE_VALUES (enumtype); values; values = TREE_CHAIN (values))\n-    if (TREE_VALUE (values) == value)\n-      break;\n-  /* If we didn't break out of the loop, then we do need a copy.  */\n-  if (!values && value)\n-    value = copy_node (value);\n-\n   /* C++ associates enums with global, function, or class declarations.  */\n   context = current_scope ();\n "}, {"sha": "c0ec51dc73e978fe8aae5213e274bec32cab4ae8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdedded1bdb452dbf3bb2a62673ae238260258ff/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fdedded1bdb452dbf3bb2a62673ae238260258ff", "patch": "@@ -7143,6 +7143,10 @@ tsubst_copy (t, args, complain, in_decl)\n \t  = tsubst_aggr_type (TREE_TYPE (t), args, complain, in_decl, \n \t\t\t      /*entering_scope=*/0);\n \n+\t/* Not yet available.  */\n+\tif (!enum_type || enum_type == (TREE_TYPE (t)))\n+\t  return t;\n+\n \tfor (v = TYPE_VALUES (enum_type); \n \t     v != NULL_TREE; \n \t     v = TREE_CHAIN (v))\n@@ -11065,7 +11069,12 @@ tsubst_enum (tag, newtag, args)\n   for (e = TYPE_VALUES (tag); e; e = TREE_CHAIN (e))\n     {\n       tree value;\n-      \n+\n+      /* Copy node and set type */\n+      if (DECL_INITIAL (TREE_VALUE (e)))\n+\tDECL_INITIAL (TREE_VALUE (e)) = copy_node (DECL_INITIAL (TREE_VALUE (e)));\n+      TREE_TYPE (TREE_VALUE (e)) = tag;\n+\t  \n       /* Note that in a template enum, the TREE_VALUE is the\n \t CONST_DECL, not the corresponding INTEGER_CST.  */\n       value = tsubst_expr (DECL_INITIAL (TREE_VALUE (e)), "}]}