{"sha": "1bda738bab8193f0fb4551672d3be928d2015cd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkYTczOGJhYjgxOTNmMGZiNDU1MTY3MmQzYmU5MjhkMjAxNWNkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-29T11:58:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-29T11:58:24Z"}, "message": "re PR target/85918 (Conversions to/from [unsigned] long long are not vectorized for AVX512DQ target)\n\n\tPR target/85918\n\t* tree.def (VEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR,\n\tVEC_PACK_FLOAT_EXPR): New tree codes.\n\t* tree-pretty-print.c (op_code_prio): Handle\n\tVEC_UNPACK_FIX_TRUNC_HI_EXPR and VEC_UNPACK_FIX_TRUNC_LO_EXPR.\n\t(dump_generic_node): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR,\n\tVEC_UNPACK_FIX_TRUNC_LO_EXPR and VEC_PACK_FLOAT_EXPR.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* gimple-pretty-print.c (dump_binary_rhs): Handle VEC_PACK_FLOAT_EXPR.\n\t* fold-const.c (const_binop): Likewise.\n\t(const_unop): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR and\n\tVEC_UNPACK_FIX_TRUNC_LO_EXPR.\n\t* tree-cfg.c (verify_gimple_assign_unary): Likewise.\n\t(verify_gimple_assign_binary): Handle VEC_PACK_FLOAT_EXPR.\n\t* cfgexpand.c (expand_debug_expr): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR,\n\tVEC_UNPACK_FIX_TRUNC_LO_EXPR and VEC_PACK_FLOAT_EXPR.\n\t* expr.c (expand_expr_real_2): Likewise.\n\t* optabs.def (vec_packs_float_optab, vec_packu_float_optab,\n\tvec_unpack_sfix_trunc_hi_optab, vec_unpack_sfix_trunc_lo_optab,\n\tvec_unpack_ufix_trunc_hi_optab, vec_unpack_ufix_trunc_lo_optab): New\n\toptabs.\n\t* optabs.c (expand_widen_pattern_expr): For\n\tVEC_UNPACK_FIX_TRUNC_HI_EXPR and VEC_UNPACK_FIX_TRUNC_LO_EXPR use\n\tsign from result type rather than operand's type.\n\t(expand_binop_directly): For vec_packu_float_optab and\n\tvec_packs_float_optab allow result type to be different from operand's\n\ttype.\n\t* optabs-tree.c (optab_for_tree_code): Handle\n\tVEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR and\n\tVEC_PACK_FLOAT_EXPR.  Formatting fixes.\n\t* tree-vect-generic.c (expand_vector_operations_1):  Handle\n\tVEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR and\n\tVEC_PACK_FLOAT_EXPR.\n\t* tree-vect-stmts.c (supportable_widening_operation): Handle\n\tFIX_TRUNC_EXPR.\n\t(supportable_narrowing_operation): Handle FLOAT_EXPR.\n\t* config/i386/i386.md (fixprefix, floatprefix): New code attributes.\n\t* config/i386/sse.md (*float<floatunssuffix>v2div2sf2): Rename to ...\n\t(float<floatunssuffix>v2div2sf2): ... this.  Formatting fix.\n\t(vpckfloat_concat_mode, vpckfloat_temp_mode, vpckfloat_op_mode): New\n\tmode attributes.\n\t(vec_pack<floatprefix>_float_<mode>): New expander.\n\t(vunpckfixt_mode, vunpckfixt_model, vunpckfixt_extract_mode): New mode\n\tattributes.\n\t(vec_unpack_<fixprefix>fix_trunc_lo_<mode>,\n\tvec_unpack_<fixprefix>fix_trunc_hi_<mode>): New expanders.\n\t* doc/md.texi (vec_packs_float_@var{m}, vec_packu_float_@var{m},\n\tvec_unpack_sfix_trunc_hi_@var{m}, vec_unpack_sfix_trunc_lo_@var{m},\n\tvec_unpack_ufix_trunc_hi_@var{m}, vec_unpack_ufix_trunc_lo_@var{m}):\n\tDocument.\n\t* doc/generic.texi (VEC_UNPACK_FLOAT_HI_EXPR,\n\tVEC_UNPACK_FLOAT_LO_EXPR): Fix pasto in description.\n\t(VEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR,\n\tVEC_PACK_FLOAT_EXPR): Document.\n\n\t* gcc.target/i386/avx512dq-pr85918.c: Add -mprefer-vector-width=512\n\tand -fno-vect-cost-model options.  Add aligned(64) attribute to the\n\tarrays.  Add suffix 1 to all functions and use 4 iterations rather\n\tthan N.  Add functions with conversions to and from float.\n\tAdd new set of functions with 8 iterations and another one\n\twith 16 iterations, expect 24 vectorized loops instead of just 4.\n\t* gcc.target/i386/avx512dq-pr85918-2.c: New test.\n\nFrom-SVN: r260893", "tree": {"sha": "bcf9ea503ca283dec2dd4da451af24384493afe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcf9ea503ca283dec2dd4da451af24384493afe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bda738bab8193f0fb4551672d3be928d2015cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bda738bab8193f0fb4551672d3be928d2015cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bda738bab8193f0fb4551672d3be928d2015cd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bda738bab8193f0fb4551672d3be928d2015cd2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8"}], "stats": {"total": 1029, "additions": 970, "deletions": 59}, "files": [{"sha": "6a3747c929a6d9842b5157bb40efb635f6988f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1,3 +1,60 @@\n+2018-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85918\n+\t* tree.def (VEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR,\n+\tVEC_PACK_FLOAT_EXPR): New tree codes.\n+\t* tree-pretty-print.c (op_code_prio): Handle\n+\tVEC_UNPACK_FIX_TRUNC_HI_EXPR and VEC_UNPACK_FIX_TRUNC_LO_EXPR.\n+\t(dump_generic_node): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR,\n+\tVEC_UNPACK_FIX_TRUNC_LO_EXPR and VEC_PACK_FLOAT_EXPR.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* gimple-pretty-print.c (dump_binary_rhs): Handle VEC_PACK_FLOAT_EXPR.\n+\t* fold-const.c (const_binop): Likewise.\n+\t(const_unop): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR and\n+\tVEC_UNPACK_FIX_TRUNC_LO_EXPR.\n+\t* tree-cfg.c (verify_gimple_assign_unary): Likewise.\n+\t(verify_gimple_assign_binary): Handle VEC_PACK_FLOAT_EXPR.\n+\t* cfgexpand.c (expand_debug_expr): Handle VEC_UNPACK_FIX_TRUNC_HI_EXPR,\n+\tVEC_UNPACK_FIX_TRUNC_LO_EXPR and VEC_PACK_FLOAT_EXPR.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* optabs.def (vec_packs_float_optab, vec_packu_float_optab,\n+\tvec_unpack_sfix_trunc_hi_optab, vec_unpack_sfix_trunc_lo_optab,\n+\tvec_unpack_ufix_trunc_hi_optab, vec_unpack_ufix_trunc_lo_optab): New\n+\toptabs.\n+\t* optabs.c (expand_widen_pattern_expr): For\n+\tVEC_UNPACK_FIX_TRUNC_HI_EXPR and VEC_UNPACK_FIX_TRUNC_LO_EXPR use\n+\tsign from result type rather than operand's type.\n+\t(expand_binop_directly): For vec_packu_float_optab and\n+\tvec_packs_float_optab allow result type to be different from operand's\n+\ttype.\n+\t* optabs-tree.c (optab_for_tree_code): Handle\n+\tVEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR and\n+\tVEC_PACK_FLOAT_EXPR.  Formatting fixes.\n+\t* tree-vect-generic.c (expand_vector_operations_1):  Handle\n+\tVEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR and\n+\tVEC_PACK_FLOAT_EXPR.\n+\t* tree-vect-stmts.c (supportable_widening_operation): Handle\n+\tFIX_TRUNC_EXPR.\n+\t(supportable_narrowing_operation): Handle FLOAT_EXPR.\n+\t* config/i386/i386.md (fixprefix, floatprefix): New code attributes.\n+\t* config/i386/sse.md (*float<floatunssuffix>v2div2sf2): Rename to ...\n+\t(float<floatunssuffix>v2div2sf2): ... this.  Formatting fix.\n+\t(vpckfloat_concat_mode, vpckfloat_temp_mode, vpckfloat_op_mode): New\n+\tmode attributes.\n+\t(vec_pack<floatprefix>_float_<mode>): New expander.\n+\t(vunpckfixt_mode, vunpckfixt_model, vunpckfixt_extract_mode): New mode\n+\tattributes.\n+\t(vec_unpack_<fixprefix>fix_trunc_lo_<mode>,\n+\tvec_unpack_<fixprefix>fix_trunc_hi_<mode>): New expanders.\n+\t* doc/md.texi (vec_packs_float_@var{m}, vec_packu_float_@var{m},\n+\tvec_unpack_sfix_trunc_hi_@var{m}, vec_unpack_sfix_trunc_lo_@var{m},\n+\tvec_unpack_ufix_trunc_hi_@var{m}, vec_unpack_ufix_trunc_lo_@var{m}):\n+\tDocument.\n+\t* doc/generic.texi (VEC_UNPACK_FLOAT_HI_EXPR,\n+\tVEC_UNPACK_FLOAT_LO_EXPR): Fix pasto in description.\n+\t(VEC_UNPACK_FIX_TRUNC_HI_EXPR, VEC_UNPACK_FIX_TRUNC_LO_EXPR,\n+\tVEC_PACK_FLOAT_EXPR): Document.\n+\n 2018-05-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (struct vec_info): Add stmt_vec_infos"}, {"sha": "c61104d1683984c19f33b6345accf628928bf671", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -5101,8 +5101,11 @@ expand_debug_expr (tree exp)\n     case REALIGN_LOAD_EXPR:\n     case VEC_COND_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n+    case VEC_PACK_FLOAT_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n     case VEC_UNPACK_HI_EXPR:"}, {"sha": "209bf3f97f4de0ac20c21079fec3d5e68187f31a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -982,11 +982,13 @@\n (define_code_iterator any_fix [fix unsigned_fix])\n (define_code_attr fixsuffix [(fix \"\") (unsigned_fix \"u\")])\n (define_code_attr fixunssuffix [(fix \"\") (unsigned_fix \"uns\")])\n+(define_code_attr fixprefix [(fix \"s\") (unsigned_fix \"u\")])\n \n ;; Used in signed and unsigned float.\n (define_code_iterator any_float [float unsigned_float])\n (define_code_attr floatsuffix [(float \"\") (unsigned_float \"u\")])\n (define_code_attr floatunssuffix [(float \"\") (unsigned_float \"uns\")])\n+(define_code_attr floatprefix [(float \"s\") (unsigned_float \"u\")])\n \n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])"}, {"sha": "dd65e57ad6a27e6496a1bf13d7d5c1e24218648c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -4887,9 +4887,9 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*float<floatunssuffix>v2div2sf2\"\n+(define_insn \"float<floatunssuffix>v2div2sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-    (vec_concat:V4SF\n+\t(vec_concat:V4SF\n \t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n \t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n@@ -4898,6 +4898,33 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_mode_attr vpckfloat_concat_mode\n+  [(V8DI \"v16sf\") (V4DI \"v8sf\") (V2DI \"v8sf\")])\n+(define_mode_attr vpckfloat_temp_mode\n+  [(V8DI \"V8SF\") (V4DI \"V4SF\") (V2DI \"V4SF\")])\n+(define_mode_attr vpckfloat_op_mode\n+  [(V8DI \"v8sf\") (V4DI \"v4sf\") (V2DI \"v2sf\")])\n+\n+(define_expand \"vec_pack<floatprefix>_float_<mode>\"\n+  [(match_operand:<ssePSmode> 0 \"register_operand\")\n+   (any_float:<ssePSmode>\n+     (match_operand:VI8_AVX512VL 1 \"register_operand\"))\n+   (match_operand:VI8_AVX512VL 2 \"register_operand\")]\n+  \"TARGET_AVX512DQ\"\n+{\n+  rtx r1 = gen_reg_rtx (<vpckfloat_temp_mode>mode);\n+  rtx r2 = gen_reg_rtx (<vpckfloat_temp_mode>mode);\n+  rtx (*gen) (rtx, rtx) = gen_float<floatunssuffix><mode><vpckfloat_op_mode>2;\n+  emit_insn (gen (r1, operands[1]));\n+  emit_insn (gen (r2, operands[2]));\n+  if (<MODE>mode == V2DImode)\n+    emit_insn (gen_sse_movlhps (operands[0], r1, r2));\n+  else\n+    emit_insn (gen_avx_vec_concat<vpckfloat_concat_mode> (operands[0],\n+\t\t\t\t\t\t\t  r1, r2));\n+  DONE;\n+})\n+\n (define_insn \"float<floatunssuffix>v2div2sf2_mask\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n     (vec_concat:V4SF\n@@ -5177,6 +5204,56 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_mode_attr vunpckfixt_mode\n+  [(V16SF \"V8DI\") (V8SF \"V4DI\") (V4SF \"V2DI\")])\n+(define_mode_attr vunpckfixt_model\n+  [(V16SF \"v8di\") (V8SF \"v4di\") (V4SF \"v2di\")])\n+(define_mode_attr vunpckfixt_extract_mode\n+  [(V16SF \"v16sf\") (V8SF \"v8sf\") (V4SF \"v8sf\")])\n+\n+(define_expand \"vec_unpack_<fixprefix>fix_trunc_lo_<mode>\"\n+  [(match_operand:<vunpckfixt_mode> 0 \"register_operand\")\n+   (any_fix:<vunpckfixt_mode>\n+     (match_operand:VF1_AVX512VL 1 \"register_operand\"))]\n+  \"TARGET_AVX512DQ\"\n+{\n+  rtx tem = operands[1];\n+  if (<MODE>mode != V4SFmode)\n+    {\n+      tem = gen_reg_rtx (<ssehalfvecmode>mode);\n+      emit_insn (gen_vec_extract_lo_<vunpckfixt_extract_mode> (tem,\n+\t\t\t\t\t\t\t       operands[1]));\n+    }\n+  rtx (*gen) (rtx, rtx)\n+    = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n+  emit_insn (gen (operands[0], tem));\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpack_<fixprefix>fix_trunc_hi_<mode>\"\n+  [(match_operand:<vunpckfixt_mode> 0 \"register_operand\")\n+   (any_fix:<vunpckfixt_mode>\n+     (match_operand:VF1_AVX512VL 1 \"register_operand\"))]\n+  \"TARGET_AVX512DQ\"\n+{\n+  rtx tem;\n+  if (<MODE>mode != V4SFmode)\n+    {\n+      tem = gen_reg_rtx (<ssehalfvecmode>mode);\n+      emit_insn (gen_vec_extract_hi_<vunpckfixt_extract_mode> (tem,\n+\t\t\t\t\t\t\t       operands[1]));\n+    }\n+  else\n+    {\n+      tem = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_avx_vpermilv4sf (tem, operands[1], GEN_INT (0x4e)));\n+    }\n+  rtx (*gen) (rtx, rtx)\n+    = gen_fix<fixunssuffix>_trunc<ssehalfvecmodelower><vunpckfixt_model>2;\n+  emit_insn (gen (operands[0], tem));\n+  DONE;\n+})\n+\n (define_insn \"ufix_trunc<mode><sseintvecmodelower>2<mask_name>\"\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\" \"=v\")\n \t(unsigned_fix:<sseintvecmode>"}, {"sha": "a4d0af40886c0fe2b514ca082644c1e27dcf1cb1", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1789,9 +1789,12 @@ a value from @code{enum annot_expr_kind}, the third is an @code{INTEGER_CST}.\n @tindex VEC_UNPACK_LO_EXPR\n @tindex VEC_UNPACK_FLOAT_HI_EXPR\n @tindex VEC_UNPACK_FLOAT_LO_EXPR\n+@tindex VEC_UNPACK_FIX_TRUNC_HI_EXPR\n+@tindex VEC_UNPACK_FIX_TRUNC_LO_EXPR\n @tindex VEC_PACK_TRUNC_EXPR\n @tindex VEC_PACK_SAT_EXPR\n @tindex VEC_PACK_FIX_TRUNC_EXPR\n+@tindex VEC_PACK_FLOAT_EXPR\n @tindex VEC_COND_EXPR\n @tindex SAD_EXPR\n \n@@ -1846,10 +1849,22 @@ where the values are converted from fixed point to floating point.  The\n single operand is a vector that contains @code{N} elements of the same\n integral type.  The result is a vector that contains half as many elements\n of a floating point type whose size is twice as wide.  In the case of\n-@code{VEC_UNPACK_HI_EXPR} the high @code{N/2} elements of the vector are\n-extracted, converted and widened.  In the case of @code{VEC_UNPACK_LO_EXPR}\n+@code{VEC_UNPACK_FLOAT_HI_EXPR} the high @code{N/2} elements of the vector are\n+extracted, converted and widened.  In the case of @code{VEC_UNPACK_FLOAT_LO_EXPR}\n the low @code{N/2} elements of the vector are extracted, converted and widened.\n \n+@item VEC_UNPACK_FIX_TRUNC_HI_EXPR\n+@itemx VEC_UNPACK_FIX_TRUNC_LO_EXPR\n+These nodes represent unpacking of the high and low parts of the input vector,\n+where the values are truncated from floating point to fixed point.  The\n+single operand is a vector that contains @code{N} elements of the same\n+floating point type.  The result is a vector that contains half as many\n+elements of an integral type whose size is twice as wide.  In the case of\n+@code{VEC_UNPACK_FIX_TRUNC_HI_EXPR} the high @code{N/2} elements of the\n+vector are extracted and converted with truncation.  In the case of\n+@code{VEC_UNPACK_FIX_TRUNC_LO_EXPR} the low @code{N/2} elements of the\n+vector are extracted and converted with truncation.\n+\n @item VEC_PACK_TRUNC_EXPR\n This node represents packing of truncated elements of the two input vectors\n into the output vector.  Input operands are vectors that contain the same\n@@ -1875,6 +1890,14 @@ twice as many elements of an integral type whose size is half as wide.  The\n elements of the two vectors are merged (concatenated) to form the output\n vector.\n \n+@item VEC_PACK_FLOAT_EXPR\n+This node represents packing of elements of the two input vectors into the\n+output vector, where the values are converted from fixed point to floating\n+point.  Input operands are vectors that contain the same number of elements\n+of an integral type.  The result is a vector that contains twice as many\n+elements of floating point type whose size is half as wide.  The elements of\n+the two vectors are merged (concatenated) to form the output vector.\n+\n @item VEC_COND_EXPR\n These nodes represent @code{?:} expressions.  The three operands must be\n vectors of the same size and number of elements.  The second and third"}, {"sha": "be37619f3402a559adcae236a1e7b64c1d88b0ec", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -5371,6 +5371,14 @@ of two vectors.  Operands 1 and 2 are vectors of the same mode having N\n floating point elements of size S@.  Operand 0 is the resulting vector\n in which 2*N elements of size N/2 are concatenated.\n \n+@cindex @code{vec_packs_float_@var{m}} instruction pattern\n+@cindex @code{vec_packu_float_@var{m}} instruction pattern\n+@item @samp{vec_packs_float_@var{m}}, @samp{vec_packu_float_@var{m}}\n+Narrow, convert to floating point type and merge the elements\n+of two vectors.  Operands 1 and 2 are vectors of the same mode having N\n+signed/unsigned integral elements of size S@.  Operand 0 is the resulting vector\n+in which 2*N elements of size N/2 are concatenated.\n+\n @cindex @code{vec_unpacks_hi_@var{m}} instruction pattern\n @cindex @code{vec_unpacks_lo_@var{m}} instruction pattern\n @item @samp{vec_unpacks_hi_@var{m}}, @samp{vec_unpacks_lo_@var{m}}\n@@ -5400,6 +5408,20 @@ has N elements of size S@.  Convert the high/low elements of the vector using\n floating point conversion and place the resulting N/2 values of size 2*S in\n the output vector (operand 0).\n \n+@cindex @code{vec_unpack_sfix_trunc_hi_@var{m}} instruction pattern\n+@cindex @code{vec_unpack_sfix_trunc_lo_@var{m}} instruction pattern\n+@cindex @code{vec_unpack_ufix_trunc_hi_@var{m}} instruction pattern\n+@cindex @code{vec_unpack_ufix_trunc_lo_@var{m}} instruction pattern\n+@item @samp{vec_unpack_sfix_trunc_hi_@var{m}},\n+@itemx @samp{vec_unpack_sfix_trunc_lo_@var{m}}\n+@itemx @samp{vec_unpack_ufix_trunc_hi_@var{m}}\n+@itemx @samp{vec_unpack_ufix_trunc_lo_@var{m}}\n+Extract, convert to signed/unsigned integer type and widen the high/low part of a\n+vector of floating point elements.  The input vector (operand 1)\n+has N elements of size S@.  Convert the high/low elements of the vector\n+to integers and place the resulting N/2 values of size 2*S in\n+the output vector (operand 0).\n+\n @cindex @code{vec_widen_umult_hi_@var{m}} instruction pattern\n @cindex @code{vec_widen_umult_lo_@var{m}} instruction pattern\n @cindex @code{vec_widen_smult_hi_@var{m}} instruction pattern"}, {"sha": "51fbc326000773470d150d6a775f16aa1e2c37ed", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -9458,6 +9458,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n       {\n \top0 = expand_normal (treeop0);\n \ttemp = expand_widen_pattern_expr (ops, op0, NULL_RTX, NULL_RTX,\n@@ -9497,6 +9499,18 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n       mode = TYPE_MODE (TREE_TYPE (treeop0));\n       goto binop;\n \n+    case VEC_PACK_FLOAT_EXPR:\n+      mode = TYPE_MODE (TREE_TYPE (treeop0));\n+      expand_operands (treeop0, treeop1,\n+\t\t       subtarget, &op0, &op1, EXPAND_NORMAL);\n+      this_optab = optab_for_tree_code (code, TREE_TYPE (treeop0),\n+\t\t\t\t\toptab_default);\n+      target = expand_binop (mode, this_optab, op0, op1, target,\n+\t\t\t     TYPE_UNSIGNED (TREE_TYPE (treeop0)),\n+\t\t\t     OPTAB_LIB_WIDEN);\n+      gcc_assert (target);\n+      return target;\n+\n     case VEC_PERM_EXPR:\n       {\n \texpand_operands (treeop0, treeop1, target, &op0, &op1, EXPAND_NORMAL);"}, {"sha": "3258aad44be69e279f88814a15242e5c82e80e91", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1622,6 +1622,7 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n \n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n+    case VEC_PACK_FLOAT_EXPR:\n       {\n \tunsigned int HOST_WIDE_INT out_nelts, in_nelts, i;\n \n@@ -1643,7 +1644,9 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n \t\t\t? VECTOR_CST_ELT (arg1, i)\n \t\t\t: VECTOR_CST_ELT (arg2, i - in_nelts));\n \t    elt = fold_convert_const (code == VEC_PACK_TRUNC_EXPR\n-\t\t\t\t      ? NOP_EXPR : FIX_TRUNC_EXPR,\n+\t\t\t\t      ? NOP_EXPR\n+\t\t\t\t      : code == VEC_PACK_FLOAT_EXPR\n+\t\t\t\t      ? FLOAT_EXPR : FIX_TRUNC_EXPR,\n \t\t\t\t      TREE_TYPE (type), elt);\n \t    if (elt == NULL_TREE || !CONSTANT_CLASS_P (elt))\n \t      return NULL_TREE;\n@@ -1817,6 +1820,8 @@ const_unop (enum tree_code code, tree type, tree arg0)\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n       {\n \tunsigned HOST_WIDE_INT out_nelts, in_nelts, i;\n \tenum tree_code subcode;\n@@ -1831,13 +1836,17 @@ const_unop (enum tree_code code, tree type, tree arg0)\n \n \tunsigned int offset = 0;\n \tif ((!BYTES_BIG_ENDIAN) ^ (code == VEC_UNPACK_LO_EXPR\n-\t\t\t\t   || code == VEC_UNPACK_FLOAT_LO_EXPR))\n+\t\t\t\t   || code == VEC_UNPACK_FLOAT_LO_EXPR\n+\t\t\t\t   || code == VEC_UNPACK_FIX_TRUNC_LO_EXPR))\n \t  offset = out_nelts;\n \n \tif (code == VEC_UNPACK_LO_EXPR || code == VEC_UNPACK_HI_EXPR)\n \t  subcode = NOP_EXPR;\n-\telse\n+\telse if (code == VEC_UNPACK_FLOAT_LO_EXPR\n+\t\t || code == VEC_UNPACK_FLOAT_HI_EXPR)\n \t  subcode = FLOAT_EXPR;\n+\telse\n+\t  subcode = FIX_TRUNC_EXPR;\n \n \ttree_vector_builder elts (type, out_nelts, 1);\n \tfor (i = 0; i < out_nelts; i++)"}, {"sha": "c0d6e1538572faf381d7a618390da24acbcbb8ac", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -429,6 +429,7 @@ dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n+    case VEC_PACK_FLOAT_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n     case VEC_SERIES_EXPR:"}, {"sha": "11cea175caa27f37b75f453eaff0c0e06ddd2ebc", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -144,46 +144,58 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n \t\t ? ssmsub_widen_optab : smsub_widen_optab));\n \n     case VEC_WIDEN_MULT_HI_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_umult_hi_optab : vec_widen_smult_hi_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_umult_hi_optab : vec_widen_smult_hi_optab);\n \n     case VEC_WIDEN_MULT_LO_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_umult_lo_optab : vec_widen_smult_lo_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_umult_lo_optab : vec_widen_smult_lo_optab);\n \n     case VEC_WIDEN_MULT_EVEN_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_umult_even_optab : vec_widen_smult_even_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_umult_even_optab : vec_widen_smult_even_optab);\n \n     case VEC_WIDEN_MULT_ODD_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_umult_odd_optab : vec_widen_smult_odd_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_umult_odd_optab : vec_widen_smult_odd_optab);\n \n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_ushiftl_hi_optab : vec_widen_sshiftl_hi_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_ushiftl_hi_optab : vec_widen_sshiftl_hi_optab);\n \n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_widen_ushiftl_lo_optab : vec_widen_sshiftl_lo_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_ushiftl_lo_optab : vec_widen_sshiftl_lo_optab);\n \n     case VEC_UNPACK_HI_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_unpacku_hi_optab : vec_unpacks_hi_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpacku_hi_optab : vec_unpacks_hi_optab);\n \n     case VEC_UNPACK_LO_EXPR:\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_unpacku_lo_optab : vec_unpacks_lo_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpacku_lo_optab : vec_unpacks_lo_optab);\n \n     case VEC_UNPACK_FLOAT_HI_EXPR:\n       /* The signedness is determined from input operand.  */\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_unpacku_float_hi_optab : vec_unpacks_float_hi_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpacku_float_hi_optab : vec_unpacks_float_hi_optab);\n \n     case VEC_UNPACK_FLOAT_LO_EXPR:\n       /* The signedness is determined from input operand.  */\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_unpacku_float_lo_optab : vec_unpacks_float_lo_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpacku_float_lo_optab : vec_unpacks_float_lo_optab);\n+\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+      /* The signedness is determined from output operand.  */\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpack_ufix_trunc_hi_optab\n+\t      : vec_unpack_sfix_trunc_hi_optab);\n+\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n+      /* The signedness is determined from output operand.  */\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_unpack_ufix_trunc_lo_optab\n+\t      : vec_unpack_sfix_trunc_lo_optab);\n \n     case VEC_PACK_TRUNC_EXPR:\n       return vec_pack_trunc_optab;\n@@ -193,8 +205,13 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n \n     case VEC_PACK_FIX_TRUNC_EXPR:\n       /* The signedness is determined from output operand.  */\n-      return TYPE_UNSIGNED (type) ?\n-\tvec_pack_ufix_trunc_optab : vec_pack_sfix_trunc_optab;\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_pack_ufix_trunc_optab : vec_pack_sfix_trunc_optab);\n+\n+    case VEC_PACK_FLOAT_EXPR:\n+      /* The signedness is determined from input operand.  */\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_packu_float_optab : vec_packs_float_optab);\n \n     case VEC_DUPLICATE_EXPR:\n       return vec_duplicate_optab;"}, {"sha": "cadf4676c986c8430baafab8ef5282e890d36308", "filename": "gcc/optabs.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -259,8 +259,15 @@ expand_widen_pattern_expr (sepops ops, rtx op0, rtx op1, rtx wide_op,\n \n   oprnd0 = ops->op0;\n   tmode0 = TYPE_MODE (TREE_TYPE (oprnd0));\n-  widen_pattern_optab =\n-    optab_for_tree_code (ops->code, TREE_TYPE (oprnd0), optab_default);\n+  if (ops->code == VEC_UNPACK_FIX_TRUNC_HI_EXPR\n+      || ops->code == VEC_UNPACK_FIX_TRUNC_LO_EXPR)\n+    /* The sign is from the result type rather than operand's type\n+       for these ops.  */\n+    widen_pattern_optab\n+      = optab_for_tree_code (ops->code, ops->type, optab_default);\n+  else\n+    widen_pattern_optab\n+      = optab_for_tree_code (ops->code, TREE_TYPE (oprnd0), optab_default);\n   if (ops->code == WIDEN_MULT_PLUS_EXPR\n       || ops->code == WIDEN_MULT_MINUS_EXPR)\n     icode = find_widening_optab_handler (widen_pattern_optab,\n@@ -1068,7 +1075,9 @@ expand_binop_directly (enum insn_code icode, machine_mode mode, optab binoptab,\n       || binoptab == vec_pack_usat_optab\n       || binoptab == vec_pack_ssat_optab\n       || binoptab == vec_pack_ufix_trunc_optab\n-      || binoptab == vec_pack_sfix_trunc_optab)\n+      || binoptab == vec_pack_sfix_trunc_optab\n+      || binoptab == vec_packu_float_optab\n+      || binoptab == vec_packs_float_optab)\n     {\n       /* The mode of the result is different then the mode of the\n \t arguments.  */"}, {"sha": "11af7aaeb1570b6eb9a83adbd78f5e3c73852ef1", "filename": "gcc/optabs.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -327,10 +327,16 @@ OPTAB_D (vec_pack_ssat_optab, \"vec_pack_ssat_$a\")\n OPTAB_D (vec_pack_trunc_optab, \"vec_pack_trunc_$a\")\n OPTAB_D (vec_pack_ufix_trunc_optab, \"vec_pack_ufix_trunc_$a\")\n OPTAB_D (vec_pack_usat_optab, \"vec_pack_usat_$a\")\n+OPTAB_D (vec_packs_float_optab, \"vec_packs_float_$a\")\n+OPTAB_D (vec_packu_float_optab, \"vec_packu_float_$a\")\n OPTAB_D (vec_perm_optab, \"vec_perm$a\")\n OPTAB_D (vec_realign_load_optab, \"vec_realign_load_$a\")\n OPTAB_D (vec_set_optab, \"vec_set$a\")\n OPTAB_D (vec_shr_optab, \"vec_shr_$a\")\n+OPTAB_D (vec_unpack_sfix_trunc_hi_optab, \"vec_unpack_sfix_trunc_hi_$a\")\n+OPTAB_D (vec_unpack_sfix_trunc_lo_optab, \"vec_unpack_sfix_trunc_lo_$a\")\n+OPTAB_D (vec_unpack_ufix_trunc_hi_optab, \"vec_unpack_ufix_trunc_hi_$a\")\n+OPTAB_D (vec_unpack_ufix_trunc_lo_optab, \"vec_unpack_ufix_trunc_lo_$a\")\n OPTAB_D (vec_unpacks_float_hi_optab, \"vec_unpacks_float_hi_$a\")\n OPTAB_D (vec_unpacks_float_lo_optab, \"vec_unpacks_float_lo_$a\")\n OPTAB_D (vec_unpacks_hi_optab, \"vec_unpacks_hi_$a\")"}, {"sha": "28a28448741e633a0c8f04d21dc73cbae1121726", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1,3 +1,14 @@\n+2018-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85918\n+\t* gcc.target/i386/avx512dq-pr85918.c: Add -mprefer-vector-width=512\n+\tand -fno-vect-cost-model options.  Add aligned(64) attribute to the\n+\tarrays.  Add suffix 1 to all functions and use 4 iterations rather\n+\tthan N.  Add functions with conversions to and from float.\n+\tAdd new set of functions with 8 iterations and another one\n+\twith 16 iterations, expect 24 vectorized loops instead of just 4.\n+\t* gcc.target/i386/avx512dq-pr85918-2.c: New test.\n+\n 2018-05-29  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/equal2.adb: New testcase."}, {"sha": "fdf7b1584d774b981cf700164c9d3b0ef1d5fdca", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr85918-2.c", "status": "added", "additions": 435, "deletions": 0, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918-2.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -0,0 +1,435 @@\n+/* PR target/85918 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-O3 -mavx512dq -mavx512vl -mprefer-vector-width=512 -fno-vect-cost-model\" } */\n+\n+#define AVX512DQ\n+#define AVX512VL\n+#define DO_TEST avx512dqvl_test\n+\n+static void avx512dqvl_test (void);\n+\n+#include \"avx512-check.h\"\n+\n+#define N 16\n+\n+long long ll[N] __attribute__((aligned (64)));\n+unsigned long long ull[N] __attribute__((aligned (64)));\n+float f[N] __attribute__((aligned (64)));\n+double d[N] __attribute__((aligned (64)));\n+\n+__attribute__((noipa)) void\n+ll2d1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    d[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2d1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    d[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ll1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ll[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ull1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ull[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+ll2f1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    f[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2f1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    f[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ll1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ll[i] = f[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ull1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ull[i] = f[i];\n+}\n+\n+__attribute__((noipa)) void\n+ll2d2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    d[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2d2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    d[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ll2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ll[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ull2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ull[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+ll2f2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    f[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2f2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    f[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ll2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ll[i] = f[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ull2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ull[i] = f[i];\n+}\n+\n+__attribute__((noipa)) void\n+ll2d3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    d[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2d3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    d[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ll3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ll[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+d2ull3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ull[i] = d[i];\n+}\n+\n+__attribute__((noipa)) void\n+ll2f3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    f[i] = ll[i];\n+}\n+\n+__attribute__((noipa)) void\n+ull2f3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    f[i] = ull[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ll3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ll[i] = f[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2ull3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ull[i] = f[i];\n+}\n+\n+unsigned long long ullt[] = {\n+  13835058055282163712ULL, 9223653511831486464ULL, 9218868437227405312ULL,\n+  1ULL, 9305281255077576704ULL, 1191936ULL, 18446462598732840960ULL, 0ULL,\n+  9223372036854775808ULL, 4611686018427387904ULL, 2305843009213693952ULL,\n+  9ULL, 9223653511831486464ULL, 0ULL, 65536ULL, 131071ULL\n+};\n+float uft[] = {\n+  13835058055282163712.0f, 9223653511831486464.0f, 9218868437227405312.0f,\n+  1.0f, 9305281255077576704.0f, 1191936.0f, 18446462598732840960.0f, 0.0f,\n+  9223372036854775808.0f, 4611686018427387904.0f, 2305843009213693952.0f,\n+  9.0f, 9223653511831486464.0f, 0.0f, 65536.0f, 131071.0f\n+};\n+long long llt[] = {\n+  9223090561878065152LL, -9223372036854775807LL - 1, -9223090561878065152LL,\n+  -4LL, -8074672656898588672LL, 8074672656898588672LL, 29LL, -15LL,\n+  7574773098260463616LL, -7579276697887834112LL, -8615667562136469504LL,\n+  148LL, -255LL, 9151595917793558528LL, -9218868437227405312LL, 9LL\n+};\n+float ft[] = {\n+  9223090561878065152.0f, -9223372036854775808.0f, -9223090561878065152.0f,\n+  -4.0f, -8074672656898588672.0f, 8074672656898588672.0f, 29.0f, -15.0f,\n+  7574773098260463616.0f, -7579276697887834112.0f, -8615667562136469504.0f,\n+  148.0f, -255.0f, 9151595917793558528.0f, -9218868437227405312.0f, 9.0f\n+};\n+\n+static void\n+avx512dqvl_test (void)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      ll[i] = llt[i];\n+      ull[i] = ullt[i];\n+    }\n+  ll2d1 ();\n+  for (i = 0; i < 4; i++)\n+    if (d[i] != ft[i])\n+      abort ();\n+  ull2d1 ();\n+  for (i = 0; i < 4; i++)\n+    if (d[i] != uft[i])\n+      abort ();\n+    else\n+      d[i] = ft[i + 4];\n+  d2ll1 ();\n+  for (i = 0; i < 4; i++)\n+    if (ll[i] != llt[i + 4])\n+      abort ();\n+    else\n+      d[i] = uft[i + 4];\n+  d2ull1 ();\n+  for (i = 0; i < 4; i++)\n+    if (ull[i] != ullt[i + 4])\n+      abort ();\n+    else\n+      {\n+        ll[i] = llt[i + 8];\n+\tull[i] = ullt[i + 8];\n+      }\n+  ll2f1 ();\n+  for (i = 0; i < 4; i++)\n+    if (f[i] != ft[i + 8])\n+      abort ();\n+  ull2f1 ();\n+  for (i = 0; i < 4; i++)\n+    if (f[i] != uft[i + 8])\n+      abort ();\n+    else\n+      f[i] = ft[i + 12];\n+  f2ll1 ();\n+  for (i = 0; i < 4; i++)\n+    if (ll[i] != llt[i + 12])\n+      abort ();\n+    else\n+      f[i] = uft[i + 12];\n+  f2ull1 ();\n+  for (i = 0; i < 4; i++)\n+    if (ull[i] != ullt[i + 12])\n+      abort ();\n+  for (i = 0; i < 8; i++)\n+    {\n+      ll[i] = llt[i];\n+      ull[i] = ullt[i];\n+    }\n+  ll2d2 ();\n+  for (i = 0; i < 8; i++)\n+    if (d[i] != ft[i])\n+      abort ();\n+  ull2d2 ();\n+  for (i = 0; i < 8; i++)\n+    if (d[i] != uft[i])\n+      abort ();\n+    else\n+      {\n+        d[i] = ft[i];\n+        ll[i] = 1234567LL;\n+        ull[i] = 7654321ULL;\n+      }\n+  d2ll2 ();\n+  for (i = 0; i < 8; i++)\n+    if (ll[i] != llt[i])\n+      abort ();\n+    else\n+      d[i] = uft[i];\n+  d2ull2 ();\n+  for (i = 0; i < 8; i++)\n+    if (ull[i] != ullt[i])\n+      abort ();\n+    else\n+      {\n+        ll[i] = llt[i + 8];\n+\tull[i] = ullt[i + 8];\n+      }\n+  ll2f2 ();\n+  for (i = 0; i < 8; i++)\n+    if (f[i] != ft[i + 8])\n+      abort ();\n+  ull2f2 ();\n+  for (i = 0; i < 8; i++)\n+    if (f[i] != uft[i + 8])\n+      abort ();\n+    else\n+      {\n+\tf[i] = ft[i + 8];\n+\tll[i] = 1234567LL;\n+\tull[i] = 7654321ULL;\n+      }\n+  f2ll2 ();\n+  for (i = 0; i < 8; i++)\n+    if (ll[i] != llt[i + 8])\n+      abort ();\n+    else\n+      f[i] = uft[i + 8];\n+  f2ull2 ();\n+  for (i = 0; i < 8; i++)\n+    if (ull[i] != ullt[i + 8])\n+      abort ();\n+  for (i = 0; i < 16; i++)\n+    {\n+      ll[i] = llt[i];\n+      ull[i] = ullt[i];\n+    }\n+  ll2d3 ();\n+  for (i = 0; i < 16; i++)\n+    if (d[i] != ft[i])\n+      abort ();\n+  ull2d3 ();\n+  for (i = 0; i < 16; i++)\n+    if (d[i] != uft[i])\n+      abort ();\n+    else\n+      {\n+        d[i] = ft[i];\n+        ll[i] = 1234567LL;\n+        ull[i] = 7654321ULL;\n+      }\n+  d2ll3 ();\n+  for (i = 0; i < 16; i++)\n+    if (ll[i] != llt[i])\n+      abort ();\n+    else\n+      d[i] = uft[i];\n+  d2ull3 ();\n+  for (i = 0; i < 16; i++)\n+    if (ull[i] != ullt[i])\n+      abort ();\n+    else\n+      {\n+        ll[i] = llt[i];\n+\tull[i] = ullt[i];\n+\tf[i] = 3.0f;\n+\td[i] = 4.0;\n+      }\n+  ll2f3 ();\n+  for (i = 0; i < 16; i++)\n+    if (f[i] != ft[i])\n+      abort ();\n+  ull2f3 ();\n+  for (i = 0; i < 16; i++)\n+    if (f[i] != uft[i])\n+      abort ();\n+    else\n+      {\n+\tf[i] = ft[i];\n+\tll[i] = 1234567LL;\n+\tull[i] = 7654321ULL;\n+      }\n+  f2ll3 ();\n+  for (i = 0; i < 16; i++)\n+    if (ll[i] != llt[i])\n+      abort ();\n+    else\n+      f[i] = uft[i];\n+  f2ull3 ();\n+  for (i = 0; i < 16; i++)\n+    if (ull[i] != ullt[i])\n+      abort ();\n+}"}, {"sha": "79593f285b752d80ffd2db8a7e1cccfe10eb0eae", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr85918.c", "status": "modified", "additions": 174, "deletions": 13, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85918.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1,42 +1,203 @@\n /* PR target/85918 */\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mavx512dq -mavx512vl -fdump-tree-vect-details\" } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+/* { dg-options \"-O3 -mavx512dq -mavx512vl -mprefer-vector-width=512 -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 24 \"vect\" } } */\n \n #define N 1024\n \n-long long ll[N];\n-unsigned long long ull[N];\n-double d[N];\n+long long ll[N] __attribute__((aligned (64)));\n+unsigned long long ull[N] __attribute__((aligned (64)));\n+float f[N] __attribute__((aligned (64)));\n+double d[N] __attribute__((aligned (64)));\n \n-void ll2d (void)\n+void ll2d1 (void)\n {\n   int i;\n \n-  for (i = 0; i < N; i++)\n+  for (i = 0; i < 4; i++)\n     d[i] = ll[i];\n }\n \n-void ull2d (void)\n+void ull2d1 (void)\n {\n   int i;\n \n-  for (i = 0; i < N; i++)\n+  for (i = 0; i < 4; i++)\n     d[i] = ull[i];\n }\n \n-void d2ll (void)\n+void d2ll1 (void)\n {\n   int i;\n \n-  for (i = 0; i < N; i++)\n+  for (i = 0; i < 4; i++)\n     ll[i] = d[i];\n }\n \n-void d2ull (void)\n+void d2ull1 (void)\n {\n   int i;\n \n-  for (i = 0; i < N; i++)\n+  for (i = 0; i < 4; i++)\n     ull[i] = d[i];\n }\n+\n+void ll2f1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    f[i] = ll[i];\n+}\n+\n+void ull2f1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    f[i] = ull[i];\n+}\n+\n+void f2ll1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ll[i] = f[i];\n+}\n+\n+void f2ull1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ull[i] = f[i];\n+}\n+\n+void ll2d2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    d[i] = ll[i];\n+}\n+\n+void ull2d2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    d[i] = ull[i];\n+}\n+\n+void d2ll2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ll[i] = d[i];\n+}\n+\n+void d2ull2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ull[i] = d[i];\n+}\n+\n+void ll2f2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    f[i] = ll[i];\n+}\n+\n+void ull2f2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    f[i] = ull[i];\n+}\n+\n+void f2ll2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ll[i] = f[i];\n+}\n+\n+void f2ull2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    ull[i] = f[i];\n+}\n+\n+void ll2d3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    d[i] = ll[i];\n+}\n+\n+void ull2d3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    d[i] = ull[i];\n+}\n+\n+void d2ll3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ll[i] = d[i];\n+}\n+\n+void d2ull3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ull[i] = d[i];\n+}\n+\n+void ll2f3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    f[i] = ll[i];\n+}\n+\n+void ull2f3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    f[i] = ull[i];\n+}\n+\n+void f2ll3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ll[i] = f[i];\n+}\n+\n+void f2ull3 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    ull[i] = f[i];\n+}"}, {"sha": "ab2feed19d5ea7c1fecaf7990965ef563afe6c44", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -3676,6 +3676,8 @@ verify_gimple_assign_unary (gassign *stmt)\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n       /* FIXME.  */\n       return false;\n \n@@ -4003,6 +4005,24 @@ verify_gimple_assign_binary (gassign *stmt)\n         return false;\n       }\n \n+    case VEC_PACK_FLOAT_EXPR:\n+      if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n+\t  || TREE_CODE (lhs_type) != VECTOR_TYPE\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (rhs1_type))\n+\t  || !SCALAR_FLOAT_TYPE_P (TREE_TYPE (lhs_type))\n+\t  || !types_compatible_p (rhs1_type, rhs2_type)\n+\t  || maybe_ne (GET_MODE_SIZE (element_mode (rhs1_type)),\n+\t\t       2 * GET_MODE_SIZE (element_mode (lhs_type))))\n+\t{\n+\t  error (\"type mismatch in vector pack expression\");\n+\t  debug_generic_expr (lhs_type);\n+\t  debug_generic_expr (rhs1_type);\n+\t  debug_generic_expr (rhs2_type);\n+\t  return true;\n+\t}\n+\n+      return false;\n+\n     case MULT_EXPR:\n     case MULT_HIGHPART_EXPR:\n     case TRUNC_DIV_EXPR:"}, {"sha": "ae36cc710fdca99baeb08bf397f6241e10ae9986", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -3924,9 +3924,12 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n+    case VEC_PACK_FLOAT_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n     case VEC_DUPLICATE_EXPR:"}, {"sha": "125507ee34866af66c96bdfa19ca8bd13dd4396f", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -3235,6 +3235,18 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_string (pp, \" > \");\n       break;\n \n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+      pp_string (pp, \" VEC_UNPACK_FIX_TRUNC_HI_EXPR < \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (pp, \" > \");\n+      break;\n+\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n+      pp_string (pp, \" VEC_UNPACK_FIX_TRUNC_LO_EXPR < \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (pp, \" > \");\n+      break;\n+\n     case VEC_PACK_TRUNC_EXPR:\n       pp_string (pp, \" VEC_PACK_TRUNC_EXPR < \");\n       dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n@@ -3259,6 +3271,14 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_string (pp, \" > \");\n       break;\n \n+    case VEC_PACK_FLOAT_EXPR:\n+      pp_string (pp, \" VEC_PACK_FLOAT_EXPR < \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (pp, \", \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 1), spc, flags, false);\n+      pp_string (pp, \" > \");\n+      break;\n+\n     case BLOCK:\n       dump_block_node (pp, node, spc, flags);\n       break;\n@@ -3575,6 +3595,8 @@ op_code_prio (enum tree_code code)\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_HI_EXPR:\n+    case VEC_UNPACK_FIX_TRUNC_LO_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n       return 16;"}, {"sha": "46502c42c7463b60357abf11cd5b31d35e10a968", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1653,7 +1653,8 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n \n   /* The signedness is determined from input argument.  */\n   if (code == VEC_UNPACK_FLOAT_HI_EXPR\n-      || code == VEC_UNPACK_FLOAT_LO_EXPR)\n+      || code == VEC_UNPACK_FLOAT_LO_EXPR\n+      || code == VEC_PACK_FLOAT_EXPR)\n     {\n       type = TREE_TYPE (rhs1);\n       /* We do not know how to scalarize those.  */\n@@ -1670,6 +1671,8 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       || code == VEC_WIDEN_MULT_ODD_EXPR\n       || code == VEC_UNPACK_HI_EXPR\n       || code == VEC_UNPACK_LO_EXPR\n+      || code == VEC_UNPACK_FIX_TRUNC_HI_EXPR\n+      || code == VEC_UNPACK_FIX_TRUNC_LO_EXPR\n       || code == VEC_PACK_TRUNC_EXPR\n       || code == VEC_PACK_SAT_EXPR\n       || code == VEC_PACK_FIX_TRUNC_EXPR"}, {"sha": "caa157fd3bd5c0983b3cc93392be6c3f32e9c781", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -10249,10 +10249,10 @@ vect_is_simple_use (tree operand, vec_info *vinfo,\n    vector form (i.e., when operating on arguments of type VECTYPE_IN\n    producing a result of type VECTYPE_OUT).\n \n-   Widening operations we currently support are NOP (CONVERT), FLOAT\n-   and WIDEN_MULT.  This function checks if these operations are supported\n-   by the target platform either directly (via vector tree-codes), or via\n-   target builtins.\n+   Widening operations we currently support are NOP (CONVERT), FLOAT,\n+   FIX_TRUNC and WIDEN_MULT.  This function checks if these operations\n+   are supported by the target platform either directly (via vector\n+   tree-codes), or via target builtins.\n \n    Output:\n    - CODE1 and CODE2 are codes of vector operations to be used when\n@@ -10382,10 +10382,9 @@ supportable_widening_operation (enum tree_code code, gimple *stmt,\n       break;\n \n     case FIX_TRUNC_EXPR:\n-      /* ??? Not yet implemented due to missing VEC_UNPACK_FIX_TRUNC_HI_EXPR/\n-\t VEC_UNPACK_FIX_TRUNC_LO_EXPR tree codes and optabs used for\n-\t computing the operation.  */\n-      return false;\n+      c1 = VEC_UNPACK_FIX_TRUNC_LO_EXPR;\n+      c2 = VEC_UNPACK_FIX_TRUNC_HI_EXPR;\n+      break;\n \n     default:\n       gcc_unreachable ();\n@@ -10493,8 +10492,8 @@ supportable_widening_operation (enum tree_code code, gimple *stmt,\n    vector form (i.e., when operating on arguments of type VECTYPE_IN\n    and producing a result of type VECTYPE_OUT).\n \n-   Narrowing operations we currently support are NOP (CONVERT) and\n-   FIX_TRUNC.  This function checks if these operations are supported by\n+   Narrowing operations we currently support are NOP (CONVERT), FIX_TRUNC\n+   and FLOAT.  This function checks if these operations are supported by\n    the target platform directly via vector tree-codes.\n \n    Output:\n@@ -10535,9 +10534,8 @@ supportable_narrowing_operation (enum tree_code code,\n       break;\n \n     case FLOAT_EXPR:\n-      /* ??? Not yet implemented due to missing VEC_PACK_FLOAT_EXPR\n-\t tree code and optabs used for computing the operation.  */\n-      return false;\n+      c1 = VEC_PACK_FLOAT_EXPR;\n+      break;\n \n     default:\n       gcc_unreachable ();\n@@ -10566,6 +10564,9 @@ supportable_narrowing_operation (enum tree_code code,\n \t    || known_eq (TYPE_VECTOR_SUBPARTS (vectype) * 2,\n \t\t\t TYPE_VECTOR_SUBPARTS (narrow_vectype)));\n \n+  if (code == FLOAT_EXPR)\n+    return false;\n+\n   /* Check if it's a multi-step conversion that can be done using intermediate\n      types.  */\n   prev_mode = vec_mode;"}, {"sha": "9696fee6813520d931c3a7b9e09d579659b59809", "filename": "gcc/tree.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bda738bab8193f0fb4551672d3be928d2015cd2/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1bda738bab8193f0fb4551672d3be928d2015cd2", "patch": "@@ -1371,6 +1371,15 @@ DEFTREECODE (VEC_UNPACK_LO_EXPR, \"vec_unpack_lo_expr\", tcc_unary, 1)\n DEFTREECODE (VEC_UNPACK_FLOAT_HI_EXPR, \"vec_unpack_float_hi_expr\", tcc_unary, 1)\n DEFTREECODE (VEC_UNPACK_FLOAT_LO_EXPR, \"vec_unpack_float_lo_expr\", tcc_unary, 1)\n \n+/* Unpack (extract) the high/low elements of the input vector, convert\n+   floating point values to integer and widen elements into the output\n+   vector.  The input vector has twice as many elements as the output\n+   vector, that are half the size of the elements of the output vector.  */\n+DEFTREECODE (VEC_UNPACK_FIX_TRUNC_HI_EXPR, \"vec_unpack_fix_trunc_hi_expr\",\n+\t     tcc_unary, 1)\n+DEFTREECODE (VEC_UNPACK_FIX_TRUNC_LO_EXPR, \"vec_unpack_fix_trunc_lo_expr\",\n+\t     tcc_unary, 1)\n+\n /* Pack (demote/narrow and merge) the elements of the two input vectors\n    into the output vector using truncation/saturation.\n    The elements of the input vectors are twice the size of the elements of the\n@@ -1384,6 +1393,12 @@ DEFTREECODE (VEC_PACK_SAT_EXPR, \"vec_pack_sat_expr\", tcc_binary, 2)\n    the output vector.  */\n DEFTREECODE (VEC_PACK_FIX_TRUNC_EXPR, \"vec_pack_fix_trunc_expr\", tcc_binary, 2)\n \n+/* Convert fixed point values of the two input vectors to floating point\n+   and pack (narrow and merge) the elements into the output vector. The\n+   elements of the input vector are twice the size of the elements of\n+   the output vector.  */\n+DEFTREECODE (VEC_PACK_FLOAT_EXPR, \"vec_pack_float_expr\", tcc_binary, 2)\n+\n /* Widening vector shift left in bits.\n    Operand 0 is a vector to be shifted with N elements of size S.\n    Operand 1 is an integer shift amount in bits."}]}