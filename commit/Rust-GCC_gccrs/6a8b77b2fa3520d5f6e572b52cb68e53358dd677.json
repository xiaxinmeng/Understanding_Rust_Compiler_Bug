{"sha": "6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4Yjc3YjJmYTM1MjBkNWY2ZTU3MmI1MmNiNjhlNTMzNThkZDY3Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-02T07:34:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-02T07:34:53Z"}, "message": "tree-ssa-sccvn.c (has_VN_INFO): New function.\n\n2015-10-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (has_VN_INFO): New function.\n\t(free_scc_vn): Use it.\n\t(visit_use): Remove dead code and refactor to use gassign\n\tand use less indentation.\n\nFrom-SVN: r228369", "tree": {"sha": "b8bc8656c29dcddbf0c2f009ca92a197f8116ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8bc8656c29dcddbf0c2f009ca92a197f8116ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8b77b2fa3520d5f6e572b52cb68e53358dd677/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d751beac550156b637116db02867e629715e3dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d751beac550156b637116db02867e629715e3dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d751beac550156b637116db02867e629715e3dfb"}], "stats": {"total": 327, "additions": 158, "deletions": 169}, "files": [{"sha": "bcc33bd245e5c7b0167c7a4d38f882e9c454be9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8b77b2fa3520d5f6e572b52cb68e53358dd677/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8b77b2fa3520d5f6e572b52cb68e53358dd677/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "patch": "@@ -1,3 +1,10 @@\n+2015-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (has_VN_INFO): New function.\n+\t(free_scc_vn): Use it.\n+\t(visit_use): Remove dead code and refactor to use gassign\n+\tand use less indentation.\n+\n 2015-10-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/67788"}, {"sha": "0432a5db82c6017a63f2a1a39125af97a10c8d37", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 151, "deletions": 169, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8b77b2fa3520d5f6e572b52cb68e53358dd677/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8b77b2fa3520d5f6e572b52cb68e53358dd677/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6a8b77b2fa3520d5f6e572b52cb68e53358dd677", "patch": "@@ -365,6 +365,16 @@ static vec<tree> sccstack;\n static vec<vn_ssa_aux_t> vn_ssa_aux_table;\n static struct obstack vn_ssa_aux_obstack;\n \n+/* Return whether there is value numbering information for a given SSA name.  */\n+\n+bool\n+has_VN_INFO (tree name)\n+{\n+  if (SSA_NAME_VERSION (name) < vn_ssa_aux_table.length ())\n+    return vn_ssa_aux_table[SSA_NAME_VERSION (name)] != NULL;\n+  return false;\n+}\n+\n /* Return the value numbering information for a given SSA name.  */\n \n vn_ssa_aux_t\n@@ -3316,34 +3326,118 @@ visit_use (tree use)\n   /* Handle uninitialized uses.  */\n   if (SSA_NAME_IS_DEFAULT_DEF (use))\n     changed = set_ssa_val_to (use, use);\n-  else\n+  else if (gimple_code (stmt) == GIMPLE_PHI)\n+    changed = visit_phi (stmt);\n+  else if (gimple_has_volatile_ops (stmt))\n+    changed = defs_to_varying (stmt);\n+  else if (gassign *ass = dyn_cast <gassign *> (stmt))\n     {\n-      if (gimple_code (stmt) == GIMPLE_PHI)\n-\tchanged = visit_phi (stmt);\n-      else if (gimple_has_volatile_ops (stmt))\n-\tchanged = defs_to_varying (stmt);\n-      else if (is_gimple_assign (stmt))\n+      enum tree_code code = gimple_assign_rhs_code (ass);\n+      tree lhs = gimple_assign_lhs (ass);\n+      tree rhs1 = gimple_assign_rhs1 (ass);\n+      tree simplified;\n+\n+      /* Shortcut for copies. Simplifying copies is pointless,\n+\t since we copy the expression and value they represent.  */\n+      if (code == SSA_NAME\n+\t  && TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  changed = visit_copy (lhs, rhs1);\n+\t  goto done;\n+\t}\n+      simplified = try_to_simplify (ass);\n+      if (simplified)\n \t{\n-\t  enum tree_code code = gimple_assign_rhs_code (stmt);\n-\t  tree lhs = gimple_assign_lhs (stmt);\n-\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t  tree simplified;\n-\n-\t  /* Shortcut for copies. Simplifying copies is pointless,\n-\t     since we copy the expression and value they represent.  */\n-\t  if (code == SSA_NAME\n-\t      && TREE_CODE (lhs) == SSA_NAME)\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n-\t      changed = visit_copy (lhs, rhs1);\n-\t      goto done;\n+\t      fprintf (dump_file, \"RHS \");\n+\t      print_gimple_expr (dump_file, ass, 0, 0);\n+\t      fprintf (dump_file, \" simplified to \");\n+\t      print_generic_expr (dump_file, simplified, 0);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n-\t  simplified = try_to_simplify (as_a <gassign *> (stmt));\n+\t}\n+      /* Setting value numbers to constants will occasionally\n+\t screw up phi congruence because constants are not\n+\t uniquely associated with a single ssa name that can be\n+\t looked up.  */\n+      if (simplified\n+\t  && is_gimple_min_invariant (simplified)\n+\t  && TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  changed = set_ssa_val_to (lhs, simplified);\n+\t  goto done;\n+\t}\n+      else if (simplified\n+\t       && TREE_CODE (simplified) == SSA_NAME\n+\t       && TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  changed = visit_copy (lhs, simplified);\n+\t  goto done;\n+\t}\n+\n+      if ((TREE_CODE (lhs) == SSA_NAME\n+\t   /* We can substitute SSA_NAMEs that are live over\n+\t      abnormal edges with their constant value.  */\n+\t   && !(gimple_assign_copy_p (ass)\n+\t\t&& is_gimple_min_invariant (rhs1))\n+\t   && !(simplified\n+\t\t&& is_gimple_min_invariant (simplified))\n+\t   && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t  /* Stores or copies from SSA_NAMEs that are live over\n+\t     abnormal edges are a problem.  */\n+\t  || (code == SSA_NAME\n+\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs1)))\n+\tchanged = defs_to_varying (ass);\n+      else if (REFERENCE_CLASS_P (lhs)\n+\t       || DECL_P (lhs))\n+\tchanged = visit_reference_op_store (lhs, rhs1, ass);\n+      else if (TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  if ((gimple_assign_copy_p (ass)\n+\t       && is_gimple_min_invariant (rhs1))\n+\t      || (simplified\n+\t\t  && is_gimple_min_invariant (simplified)))\n+\t    {\n+\t      if (simplified)\n+\t\tchanged = set_ssa_val_to (lhs, simplified);\n+\t      else\n+\t\tchanged = set_ssa_val_to (lhs, rhs1);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Visit the original statement.  */\n+\t      switch (vn_get_stmt_kind (ass))\n+\t\t{\n+\t\tcase VN_NARY:\n+\t\tchanged = visit_nary_op (lhs, ass);\n+\t\tbreak;\n+\t\tcase VN_REFERENCE:\n+\t\tchanged = visit_reference_op_load (lhs, rhs1, ass);\n+\t\tbreak;\n+\t\tdefault:\n+\t\tchanged = defs_to_varying (ass);\n+\t\tbreak;\n+\t\t}\n+\t    }\n+\t}\n+      else\n+\tchanged = defs_to_varying (ass);\n+    }\n+  else if (gcall *call_stmt = dyn_cast <gcall *> (stmt))\n+    {\n+      tree lhs = gimple_call_lhs (call_stmt);\n+      if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  /* Try constant folding based on our current lattice.  */\n+\t  tree simplified = gimple_fold_stmt_to_constant_1 (call_stmt,\n+\t\t\t\t\t\t\t    vn_valueize);\n \t  if (simplified)\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n-\t\t  fprintf (dump_file, \"RHS \");\n-\t\t  print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t  fprintf (dump_file, \"call \");\n+\t\t  print_gimple_expr (dump_file, call_stmt, 0, 0);\n \t\t  fprintf (dump_file, \" simplified to \");\n \t\t  print_generic_expr (dump_file, simplified, 0);\n \t\t  fprintf (dump_file, \"\\n\");\n@@ -3354,168 +3448,57 @@ visit_use (tree use)\n \t     uniquely associated with a single ssa name that can be\n \t     looked up.  */\n \t  if (simplified\n-\t      && is_gimple_min_invariant (simplified)\n-\t      && TREE_CODE (lhs) == SSA_NAME)\n+\t      && is_gimple_min_invariant (simplified))\n \t    {\n \t      changed = set_ssa_val_to (lhs, simplified);\n+\t      if (gimple_vdef (call_stmt))\n+\t\tchanged |= set_ssa_val_to (gimple_vdef (call_stmt),\n+\t\t\t\t\t   SSA_VAL (gimple_vuse (call_stmt)));\n \t      goto done;\n \t    }\n \t  else if (simplified\n-\t\t   && TREE_CODE (simplified) == SSA_NAME\n-\t\t   && TREE_CODE (lhs) == SSA_NAME)\n+\t\t   && TREE_CODE (simplified) == SSA_NAME)\n \t    {\n \t      changed = visit_copy (lhs, simplified);\n+\t      if (gimple_vdef (call_stmt))\n+\t\tchanged |= set_ssa_val_to (gimple_vdef (call_stmt),\n+\t\t\t\t\t   SSA_VAL (gimple_vuse (call_stmt)));\n \t      goto done;\n \t    }\n-\n-\t  if ((TREE_CODE (lhs) == SSA_NAME\n-\t       /* We can substitute SSA_NAMEs that are live over\n-\t\t  abnormal edges with their constant value.  */\n-\t       && !(gimple_assign_copy_p (stmt)\n-\t\t    && is_gimple_min_invariant (rhs1))\n-\t       && !(simplified\n-\t\t    && is_gimple_min_invariant (simplified))\n-\t       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n-\t      /* Stores or copies from SSA_NAMEs that are live over\n-\t\t abnormal edges are a problem.  */\n-\t      || (code == SSA_NAME\n-\t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs1)))\n-\t    changed = defs_to_varying (stmt);\n-\t  else if (REFERENCE_CLASS_P (lhs)\n-\t\t   || DECL_P (lhs))\n-\t    changed = visit_reference_op_store (lhs, rhs1, stmt);\n-\t  else if (TREE_CODE (lhs) == SSA_NAME)\n+\t  else if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n \t    {\n-\t      if ((gimple_assign_copy_p (stmt)\n-\t\t   && is_gimple_min_invariant (rhs1))\n-\t\t  || (simplified\n-\t\t      && is_gimple_min_invariant (simplified)))\n-\t\t{\n-\t\t  if (simplified)\n-\t\t    changed = set_ssa_val_to (lhs, simplified);\n-\t\t  else\n-\t\t    changed = set_ssa_val_to (lhs, rhs1);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  /* First try to lookup the simplified expression.  */\n-\t\t  if (simplified)\n-\t\t    {\n-\t\t      enum gimple_rhs_class rhs_class;\n-\n-\n-\t\t      rhs_class = get_gimple_rhs_class (TREE_CODE (simplified));\n-\t\t      if ((rhs_class == GIMPLE_UNARY_RHS\n-\t\t\t   || rhs_class == GIMPLE_BINARY_RHS\n-\t\t\t   || rhs_class == GIMPLE_TERNARY_RHS)\n-\t\t\t  && valid_gimple_rhs_p (simplified))\n-\t\t\t{\n-\t\t\t  tree result = vn_nary_op_lookup (simplified, NULL);\n-\t\t\t  if (result)\n-\t\t\t    {\n-\t\t\t      changed = set_ssa_val_to (lhs, result);\n-\t\t\t      goto done;\n-\t\t\t    }\n-\t\t\t}\n-\t\t    }\n-\n-\t\t  /* Otherwise visit the original statement.  */\n-\t\t  switch (vn_get_stmt_kind (stmt))\n-\t\t    {\n-\t\t    case VN_NARY:\n-\t\t      changed = visit_nary_op (lhs, stmt);\n-\t\t      break;\n-\t\t    case VN_REFERENCE:\n-\t\t      changed = visit_reference_op_load (lhs, rhs1, stmt);\n-\t\t      break;\n-\t\t    default:\n-\t\t      changed = defs_to_varying (stmt);\n-\t\t      break;\n-\t\t    }\n-\t\t}\n+\t      changed = defs_to_varying (call_stmt);\n+\t      goto done;\n \t    }\n-\t  else\n-\t    changed = defs_to_varying (stmt);\n \t}\n-      else if (gcall *call_stmt = dyn_cast <gcall *> (stmt))\n-\t{\n-\t  tree lhs = gimple_call_lhs (stmt);\n-\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-\t    {\n-\t      /* Try constant folding based on our current lattice.  */\n-\t      tree simplified = gimple_fold_stmt_to_constant_1 (stmt,\n-\t\t\t\t\t\t\t\tvn_valueize);\n-\t      if (simplified)\n-\t\t{\n-\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t    {\n-\t\t      fprintf (dump_file, \"call \");\n-\t\t      print_gimple_expr (dump_file, stmt, 0, 0);\n-\t\t      fprintf (dump_file, \" simplified to \");\n-\t\t      print_generic_expr (dump_file, simplified, 0);\n-\t\t      fprintf (dump_file, \"\\n\");\n-\t\t    }\n-\t\t}\n-\t      /* Setting value numbers to constants will occasionally\n-\t\t screw up phi congruence because constants are not\n-\t\t uniquely associated with a single ssa name that can be\n-\t\t looked up.  */\n-\t      if (simplified\n-\t\t  && is_gimple_min_invariant (simplified))\n-\t\t{\n-\t\t  changed = set_ssa_val_to (lhs, simplified);\n-\t\t  if (gimple_vdef (stmt))\n-\t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n-\t\t\t\t\t       SSA_VAL (gimple_vuse (stmt)));\n-\t\t  goto done;\n-\t\t}\n-\t      else if (simplified\n-\t\t       && TREE_CODE (simplified) == SSA_NAME)\n-\t\t{\n-\t\t  changed = visit_copy (lhs, simplified);\n-\t\t  if (gimple_vdef (stmt))\n-\t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n-\t\t\t\t\t       SSA_VAL (gimple_vuse (stmt)));\n-\t\t  goto done;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n-\t\t    {\n-\t\t      changed = defs_to_varying (stmt);\n-\t\t      goto done;\n-\t\t    }\n-\t\t}\n-\t    }\n \n-\t  if (!gimple_call_internal_p (stmt)\n-\t      && (/* Calls to the same function with the same vuse\n-\t\t     and the same operands do not necessarily return the same\n-\t\t     value, unless they're pure or const.  */\n-\t\t  gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST)\n-\t\t  /* If calls have a vdef, subsequent calls won't have\n-\t\t     the same incoming vuse.  So, if 2 calls with vdef have the\n-\t\t     same vuse, we know they're not subsequent.\n-\t\t     We can value number 2 calls to the same function with the\n-\t\t     same vuse and the same operands which are not subsequent\n-\t\t     the same, because there is no code in the program that can\n-\t\t     compare the 2 values...  */\n-\t\t  || (gimple_vdef (stmt)\n-\t\t      /* ... unless the call returns a pointer which does\n-\t\t         not alias with anything else.  In which case the\n-\t\t\t information that the values are distinct are encoded\n-\t\t\t in the IL.  */\n-\t\t      && !(gimple_call_return_flags (call_stmt) & ERF_NOALIAS)\n-\t\t      /* Only perform the following when being called from PRE\n-\t\t\t which embeds tail merging.  */\n-\t\t      && default_vn_walk_kind == VN_WALK)))\n-\t    changed = visit_reference_op_call (lhs, call_stmt);\n-\t  else\n-\t    changed = defs_to_varying (stmt);\n-\t}\n+      if (!gimple_call_internal_p (call_stmt)\n+\t  && (/* Calls to the same function with the same vuse\n+\t\t and the same operands do not necessarily return the same\n+\t\t value, unless they're pure or const.  */\n+\t      gimple_call_flags (call_stmt) & (ECF_PURE | ECF_CONST)\n+\t      /* If calls have a vdef, subsequent calls won't have\n+\t\t the same incoming vuse.  So, if 2 calls with vdef have the\n+\t\t same vuse, we know they're not subsequent.\n+\t\t We can value number 2 calls to the same function with the\n+\t\t same vuse and the same operands which are not subsequent\n+\t\t the same, because there is no code in the program that can\n+\t\t compare the 2 values...  */\n+\t      || (gimple_vdef (call_stmt)\n+\t\t  /* ... unless the call returns a pointer which does\n+\t\t     not alias with anything else.  In which case the\n+\t\t     information that the values are distinct are encoded\n+\t\t     in the IL.  */\n+\t\t  && !(gimple_call_return_flags (call_stmt) & ERF_NOALIAS)\n+\t\t  /* Only perform the following when being called from PRE\n+\t\t     which embeds tail merging.  */\n+\t\t  && default_vn_walk_kind == VN_WALK)))\n+\tchanged = visit_reference_op_call (lhs, call_stmt);\n       else\n-\tchanged = defs_to_varying (stmt);\n+\tchanged = defs_to_varying (call_stmt);\n     }\n+  else\n+    changed = defs_to_varying (stmt);\n  done:\n   return changed;\n }\n@@ -4001,8 +3984,7 @@ free_scc_vn (void)\n     {\n       tree name = ssa_name (i);\n       if (name\n-\t  && SSA_NAME_VERSION (name) < vn_ssa_aux_table.length ()\n-\t  && vn_ssa_aux_table[SSA_NAME_VERSION (name)]\n+\t  && has_VN_INFO (name)\n \t  && VN_INFO (name)->needs_insertion)\n \trelease_ssa_name (name);\n     }"}]}