{"sha": "c3240b8d526ba878266751ac05b41f52b2c13840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyNDBiOGQ1MjZiYTg3ODI2Njc1MWFjMDViNDFmNTJiMmMxMzg0MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-12-08T09:45:44Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-12-08T09:45:44Z"}, "message": "re PR fortran/27546 (IMPORT is broken)\n\nfortran/\n2006-12-08  Tobias Burnus  <burnus@net-b.de>\n\n    PR fortran/27546\n    * trans-decl.f90 (gfc_create_module_variable): Allow imported symbols\n      in interface bodys in modules.\n\ntestsuite/\n2006-12-08  Tobias Burnus  <burnus@net-b.de>\n\n    PR fortran/27546\n    * gfortran.dg/import4.f90: New test for IMPORT in modules.\n\nFrom-SVN: r119651", "tree": {"sha": "330a035e936df629acc237e160f4249d88aa366a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/330a035e936df629acc237e160f4249d88aa366a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3240b8d526ba878266751ac05b41f52b2c13840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3240b8d526ba878266751ac05b41f52b2c13840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3240b8d526ba878266751ac05b41f52b2c13840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3240b8d526ba878266751ac05b41f52b2c13840/comments", "author": null, "committer": null, "parents": [{"sha": "faf8957192ac3ddff0f34990c0b339ec1fb23560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf8957192ac3ddff0f34990c0b339ec1fb23560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf8957192ac3ddff0f34990c0b339ec1fb23560"}], "stats": {"total": 127, "additions": 115, "deletions": 12}, "files": [{"sha": "be404adad1c56a30a602d959b2136adf35102211", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3240b8d526ba878266751ac05b41f52b2c13840", "patch": "@@ -1,3 +1,9 @@\n+2006-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/27546\n+\t* trans-decl.f90 (gfc_create_module_variable): Allow imported symbols\n+\t  in interface bodys in modules.\n+\n 2006-12-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/29711"}, {"sha": "67e654c9751abc4bb4cbbc61fc3e840f81a35d5c", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=c3240b8d526ba878266751ac05b41f52b2c13840", "patch": "@@ -2760,13 +2760,6 @@ gfc_create_module_variable (gfc_symbol * sym)\n   if (sym->attr.entry)\n     return;\n \n-  /* Only output symbols from this module.  */\n-  if (sym->ns != module_namespace)\n-    {\n-      /* I don't think this should ever happen.  */\n-      internal_error (\"module symbol %s in wrong namespace\", sym->name);\n-    }\n-\n   /* Only output variables and array valued parameters.  */\n   if (sym->attr.flavor != FL_VARIABLE\n       && (sym->attr.flavor != FL_PARAMETER || sym->attr.dimension == 0))"}, {"sha": "fbeef252fbaf5bc3d8fb61c569c5baa80137602f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3240b8d526ba878266751ac05b41f52b2c13840", "patch": "@@ -1,3 +1,8 @@\n+2006-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/27546\n+\t* gfortran.dg/import4.f90: New test for IMPORT in modules.\n+\n 2006-12-07  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29732\n@@ -12,10 +17,10 @@\n \n 2006-12-07  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/29980\n-        * g++.dg/ext/attrib27.C: New test.\n-        * g++.dg/parse/struct-as-enum1.C: Adjust error markers.\n-        * g++.dg/parse/typedef5.C: Likewise.\n+\tPR c++/29980\n+\t* g++.dg/ext/attrib27.C: New test.\n+\t* g++.dg/parse/struct-as-enum1.C: Adjust error markers.\n+\t* g++.dg/parse/typedef5.C: Likewise.\n \t\n 2006-12-07  Mike Stump  <mrs@apple.com>\n \n@@ -250,7 +255,7 @@\n \n 2006-11-29  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n-        PR target/29945\n+\tPR target/29945\n \t* gcc.c-torture/compile/pr29945.c: New testcase.\n \n 2006-11-30  Joseph Myers  <joseph@codesourcery.com>"}, {"sha": "761c9846b35d913c4df8239230761f6827b11b1e", "filename": "gcc/testsuite/gfortran.dg/import4.f90", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3240b8d526ba878266751ac05b41f52b2c13840/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport4.f90?ref=c3240b8d526ba878266751ac05b41f52b2c13840", "patch": "@@ -0,0 +1,99 @@\n+! { dg-do run }\n+! Test for import in modules\n+! PR fortran/29601\n+\n+subroutine bar(r)\n+  implicit none\n+  integer(8) :: r\n+  if(r /= 42) call abort()\n+  r = 13\n+end subroutine bar\n+\n+subroutine foo(a)\n+  implicit none\n+  type myT\n+     sequence\n+     character(len=3) :: c\n+  end type myT\n+  type(myT) :: a\n+  if(a%c /= \"xyz\") call abort()\n+  a%c = \"abc\"\n+end subroutine\n+\n+subroutine new(a,b)\n+  implicit none\n+  type gType\n+     sequence\n+     integer(8) :: c\n+  end type gType\n+  real(8) :: a\n+  type(gType) :: b\n+  if(a /= 99.0 .or. b%c /= 11) call abort()\n+  a = -123.0\n+  b%c = -44\n+end subroutine new\n+\n+module general\n+  implicit none\n+  integer,parameter :: ikind = 8\n+  type gType\n+     sequence\n+     integer(ikind) :: c\n+  end type gType\n+end module general\n+\n+module modtest\n+  use general\n+  implicit none\n+  type myT\n+     sequence\n+     character(len=3) :: c\n+  end type myT\n+  integer, parameter :: dp = 8\n+  interface\n+     subroutine bar(x)\n+       import :: dp\n+       integer(dp) :: x\n+     end subroutine bar\n+     subroutine foo(c)\n+      import :: myT\n+       type(myT) :: c\n+     end subroutine foo\n+     subroutine new(x,y)\n+      import :: ikind,gType\n+      real(ikind) :: x\n+      type(gType) :: y\n+     end subroutine new\n+  end interface\n+  contains\n+  subroutine test\n+    integer(dp) :: y\n+    y = 42\n+    call bar(y)\n+    if(y /= 13) call abort()\n+  end subroutine test\n+  subroutine test2()\n+    type(myT) :: z\n+    z%c = \"xyz\"\n+    call foo(z)\n+    if(z%c /= \"abc\") call abort()\n+  end subroutine test2\n+end module modtest\n+\n+program all\n+  use modtest\n+  implicit none\n+  call test()\n+  call test2()\n+  call test3()\n+contains\n+  subroutine test3()\n+    real(ikind) :: r\n+    type(gType) :: t\n+    r   = 99.0\n+    t%c = 11\n+    call new(r,t)\n+    if(r /= -123.0 .or. t%c /= -44) call abort()\n+  end subroutine test3\n+end program all\n+! { dg-final { cleanup-modules \"modtest general\" } }"}]}