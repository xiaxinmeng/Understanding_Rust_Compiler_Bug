{"sha": "fe577e58d44ceae408340bc37b8af7247fb3d9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1NzdlNThkNDRjZWFlNDA4MzQwYmMzN2I4YWY3MjQ3ZmIzZDlhZA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-04-13T04:11:52Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-04-13T04:11:52Z"}, "message": "i386.c (ix86_expand_binary_operator, [...]): Check no_new_pseudos instead of reload_in_progress and reload_completed.\n\n\t* i386.c (ix86_expand_binary_operator,\n\tix86_expand_unary_operator): Check no_new_pseudos\n\tinstead of reload_in_progress and reload_completed.\n\t(ix86_split_ashldi, ix86_split_ashrdi,\n\tix86_split_lshrdi): Check no_new_pseudos instead\n\tof reload_completed.\n\nFrom-SVN: r33134", "tree": {"sha": "e947fa1cefd9ed067922a8ebe615c2f093d906d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e947fa1cefd9ed067922a8ebe615c2f093d906d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe577e58d44ceae408340bc37b8af7247fb3d9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe577e58d44ceae408340bc37b8af7247fb3d9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe577e58d44ceae408340bc37b8af7247fb3d9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe577e58d44ceae408340bc37b8af7247fb3d9ad/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fa48eaefa5e78fbecb27a73d4f622ea238a3628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa48eaefa5e78fbecb27a73d4f622ea238a3628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa48eaefa5e78fbecb27a73d4f622ea238a3628"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "fb5ba6ef49753372306d08984a98c0a321b0cd86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe577e58d44ceae408340bc37b8af7247fb3d9ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe577e58d44ceae408340bc37b8af7247fb3d9ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe577e58d44ceae408340bc37b8af7247fb3d9ad", "patch": "@@ -1,3 +1,12 @@\n+Thu Apr 13 00:09:16 EDT 2000  John Wehle  (john@feith.com)\n+\n+\t* i386.c (ix86_expand_binary_operator,\n+\tix86_expand_unary_operator): Check no_new_pseudos\n+\tinstead of reload_in_progress and reload_completed.\n+\t(ix86_split_ashldi, ix86_split_ashrdi,\n+\tix86_split_lshrdi): Check no_new_pseudos instead\n+\tof reload_completed.\n+\n 2000-04-12  Jeffrey A Law  (law@cygnus.com)\n \n \t* function.c (purge_addressof): Unshare any shared rtl created by"}, {"sha": "d5ebd677dd4044ca89c57e52a68ac07a70849237", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe577e58d44ceae408340bc37b8af7247fb3d9ad/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe577e58d44ceae408340bc37b8af7247fb3d9ad/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fe577e58d44ceae408340bc37b8af7247fb3d9ad", "patch": "@@ -4200,7 +4200,7 @@ ix86_expand_binary_operator (code, mode, operands)\n     src1 = force_reg (mode, src1);\n     \n   /* If optimizing, copy to regs to improve CSE */\n-  if (optimize && !reload_in_progress && !reload_completed)\n+  if (optimize && ! no_new_pseudos)\n     {\n       if (GET_CODE (dst) == MEM)\n \tdst = gen_reg_rtx (mode);\n@@ -4294,7 +4294,7 @@ ix86_expand_unary_operator (code, mode, operands)\n     src = force_reg (mode, src);\n   \n   /* If optimizing, copy to regs to improve CSE */\n-  if (optimize && !reload_in_progress && !reload_completed)\n+  if (optimize && ! no_new_pseudos)\n     {\n       if (GET_CODE (dst) == MEM)\n \tdst = gen_reg_rtx (mode);\n@@ -5613,9 +5613,9 @@ ix86_split_ashldi (operands, scratch)\n       emit_insn (gen_x86_shld_1 (high[0], low[0], operands[2]));\n       emit_insn (gen_ashlsi3 (low[0], low[0], operands[2]));\n \n-      if (TARGET_CMOVE && (! reload_completed || scratch))\n+      if (TARGET_CMOVE && (! no_new_pseudos || scratch))\n \t{\n-\t  if (! reload_completed)\n+\t  if (! no_new_pseudos)\n \t    scratch = force_reg (SImode, const0_rtx);\n \t  else\n \t    emit_move_insn (scratch, const0_rtx);\n@@ -5673,9 +5673,9 @@ ix86_split_ashrdi (operands, scratch)\n       emit_insn (gen_x86_shrd_1 (low[0], high[0], operands[2]));\n       emit_insn (gen_ashrsi3 (high[0], high[0], operands[2]));\n \n-      if (TARGET_CMOVE && (!reload_completed || scratch))\n+      if (TARGET_CMOVE && (! no_new_pseudos || scratch))\n \t{\n-\t  if (! reload_completed)\n+\t  if (! no_new_pseudos)\n \t    scratch = gen_reg_rtx (SImode);\n \t  emit_move_insn (scratch, high[0]);\n \t  emit_insn (gen_ashrsi3 (scratch, scratch, GEN_INT (31)));\n@@ -5726,9 +5726,9 @@ ix86_split_lshrdi (operands, scratch)\n       emit_insn (gen_lshrsi3 (high[0], high[0], operands[2]));\n \n       /* Heh.  By reversing the arguments, we can reuse this pattern.  */\n-      if (TARGET_CMOVE && (! reload_completed || scratch))\n+      if (TARGET_CMOVE && (! no_new_pseudos || scratch))\n \t{\n-\t  if (! reload_completed)\n+\t  if (! no_new_pseudos)\n \t    scratch = force_reg (SImode, const0_rtx);\n \t  else\n \t    emit_move_insn (scratch, const0_rtx);"}]}