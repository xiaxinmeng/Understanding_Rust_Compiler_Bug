{"sha": "c19bd769205d1847639eaddcd897058d8b7218da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5YmQ3NjkyMDVkMTg0NzYzOWVhZGRjZDg5NzA1OGQ4YjcyMThkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-07T01:55:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-07T01:55:49Z"}, "message": "libgo: Add back tests of syscall time.\n\nFrom-SVN: r182075", "tree": {"sha": "7ab76111168396659b37399467b30967769e1abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab76111168396659b37399467b30967769e1abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19bd769205d1847639eaddcd897058d8b7218da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19bd769205d1847639eaddcd897058d8b7218da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19bd769205d1847639eaddcd897058d8b7218da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19bd769205d1847639eaddcd897058d8b7218da/comments", "author": null, "committer": null, "parents": [{"sha": "598fd331d0ea4bb6435d1045ff6c219f098db1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598fd331d0ea4bb6435d1045ff6c219f098db1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598fd331d0ea4bb6435d1045ff6c219f098db1a7"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "c603e1b0d7981057b3468b465d7df446e771b426", "filename": "libgo/go/runtime/export_test.go", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fgo%2Fruntime%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fgo%2Fruntime%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexport_test.go?ref=c19bd769205d1847639eaddcd897058d8b7218da", "patch": "@@ -18,11 +18,8 @@ var F64toint = f64toint\n \n func entersyscall()\n func exitsyscall()\n-func LockedOSThread() bool\n-\n-/* Useless for gccgo.\n+func golockedOSThread() bool\n \n var Entersyscall = entersyscall\n var Exitsyscall = exitsyscall\n-\n-*/\n+var LockedOSThread = golockedOSThread"}, {"sha": "32111080a5465b8f0eeb6999af5b0a4c7b5e6eda", "filename": "libgo/go/runtime/proc_test.go", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fgo%2Fruntime%2Fproc_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fgo%2Fruntime%2Fproc_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc_test.go?ref=c19bd769205d1847639eaddcd897058d8b7218da", "patch": "@@ -74,8 +74,6 @@ func BenchmarkStackGrowth(b *testing.B) {\n \t}\n }\n \n-/* These benchmarks are meaningless for gccgo.\n-\n func BenchmarkSyscall(b *testing.B) {\n \tconst CallsPerSched = 1000\n \tprocs := runtime.GOMAXPROCS(-1)\n@@ -125,5 +123,3 @@ func BenchmarkSyscallWork(b *testing.B) {\n \t\t<-c\n \t}\n }\n-\n-*/"}, {"sha": "88831d41a67df179255d6463f344d297415e52e2", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19bd769205d1847639eaddcd897058d8b7218da/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=c19bd769205d1847639eaddcd897058d8b7218da", "patch": "@@ -1156,6 +1156,26 @@ runtime_malg(int32 stacksize, byte** ret_stack, size_t* ret_stacksize)\n \treturn newg;\n }\n \n+/* For runtime package testing.  */\n+\n+void runtime_testing_entersyscall(void)\n+  __asm__(\"libgo_runtime.runtime.entersyscall\");\n+\n+void\n+runtime_testing_entersyscall()\n+{\n+\truntime_entersyscall();\n+}\n+\n+void runtime_testing_exitsyscall(void)\n+  __asm__(\"libgo_runtime.runtime.exitsyscall\");\n+\n+void\n+runtime_testing_exitsyscall()\n+{\n+\truntime_exitsyscall();\n+}\n+\n G*\n __go_go(void (*fn)(void*), void* arg)\n {\n@@ -1330,6 +1350,17 @@ runtime_lockedOSThread(void)\n \treturn g->lockedm != nil && m->lockedg != nil;\n }\n \n+// for testing of callbacks\n+\n+_Bool runtime_golockedOSThread(void)\n+  asm(\"libgo_runtime.runtime.golockedOSThread\");\n+\n+_Bool\n+runtime_golockedOSThread(void)\n+{\n+\treturn runtime_lockedOSThread();\n+}\n+\n // for testing of wire, unwire\n uint32\n runtime_mid()"}]}