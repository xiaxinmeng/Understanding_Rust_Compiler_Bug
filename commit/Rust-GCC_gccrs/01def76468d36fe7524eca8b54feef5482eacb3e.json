{"sha": "01def76468d36fe7524eca8b54feef5482eacb3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkZWY3NjQ2OGQzNmZlNzUyNGVjYThiNTRmZWVmNTQ4MmVhY2IzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T17:05:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T17:05:40Z"}, "message": "(subsi3): Don't bother calling negate_rtx for constant; we shouldn't be called with a constant.\n\n(subsi3): Don't bother calling negate_rtx for constant; we shouldn't be\ncalled with a constant.\n(maskir patterns): Don't mention an operand before it is used; use operand\nnumber 1 for operand with '0' constraint.\n(allocate_stack): Use reg_or_short_operand for predicate of allocation amount;\nuse negate_rtx and always make a PLUS.\n\nFrom-SVN: r2262", "tree": {"sha": "8ea74e0dbcbc7a9ede472653a7e4f865d146651e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ea74e0dbcbc7a9ede472653a7e4f865d146651e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01def76468d36fe7524eca8b54feef5482eacb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01def76468d36fe7524eca8b54feef5482eacb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01def76468d36fe7524eca8b54feef5482eacb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01def76468d36fe7524eca8b54feef5482eacb3e/comments", "author": null, "committer": null, "parents": [{"sha": "36d51583bf75a28e824b2df02e128e3b9beac3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d51583bf75a28e824b2df02e128e3b9beac3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d51583bf75a28e824b2df02e128e3b9beac3ed"}], "stats": {"total": 95, "additions": 44, "deletions": 51}, "files": [{"sha": "cbcb156ae0e29195603883cc00806bcbf8a2623f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 44, "deletions": 51, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01def76468d36fe7524eca8b54feef5482eacb3e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01def76468d36fe7524eca8b54feef5482eacb3e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=01def76468d36fe7524eca8b54feef5482eacb3e", "patch": "@@ -259,15 +259,7 @@\n \t(minus:SI (match_operand:SI 1 \"reg_or_short_operand\" \"\")\n \t\t  (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n   \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      emit_insn (gen_addsi3 (operands[0], operands[1],\n-\t\t\t     negate_rtx (SImode, operands[2])));\n-      DONE;\n-    }\n-}\")\n+  \"\")\n \n ;; For SMIN, SMAX, UMIN, and UMAX, we use DEFINE_EXPAND's that involve a doz[i]\n ;; instruction and some auxiliary computations.  Then we just have a single\n@@ -965,98 +957,98 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"0\"))\n-\t\t(and:SI (match_dup 1)\n+\t(ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n+\t\t(and:SI (match_dup 2)\n \t\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\"))))]\n   \"\"\n-  \"maskir %0,%3,%1\")\n+  \"maskir %0,%3,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"0\"))\n+\t(ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n \t\t(and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_dup 1))))]\n+\t\t\t(match_dup 2))))]\n   \"\"\n-  \"maskir %0,%3,%1\")\n+  \"maskir %0,%3,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (match_dup 1)\n+\t(ior:SI (and:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\"))\n-\t\t(and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"0\"))))]\n+\t\t(and:SI (not:SI (match_dup 2))\n+\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))))]\n   \"\"\n-  \"maskir %0,%3,%1\")\n+  \"maskir %0,%3,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(ior:SI (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_dup 1))\n-\t\t(and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"0\"))))]\n+\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t(and:SI (not:SI (match_dup 2))\n+\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))))]\n   \"\"\n-  \"maskir %0,%3,%1\")\n+  \"maskir %0,%3,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"0\"))\n-\t\t (and:SI (match_dup 1)\n+\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n+\t\t (and:SI (match_dup 2)\n \t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_dup 1)) (match_dup 2))\n-\t\t(and:SI (match_dup 1) (match_dup 3))))]\n+\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n+\t\t(and:SI (match_dup 2) (match_dup 3))))]\n   \"\"\n-  \"maskir. %0,%3,%1\"\n+  \"maskir. %0,%3,%2\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"0\"))\n+\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n \t\t (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_dup 1)))\n+\t\t\t (match_dup 2)))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_dup 1)) (match_dup 2))\n-\t\t(and:SI (match_dup 3) (match_dup 1))))]\n+\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n+\t\t(and:SI (match_dup 3) (match_dup 2))))]\n   \"\"\n-  \"maskir. %0,%3,%1\"\n+  \"maskir. %0,%3,%2\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n-\t (ior:SI (and:SI (match_dup 1)\n+\t (ior:SI (and:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\"))\n-\t\t (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"0\")))\n+\t\t (and:SI (not:SI (match_dup 2))\n+\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0\")))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (match_dup 1) (match_dup 3))\n-\t\t(and:SI (not:SI (match_dup 1)) (match_dup 2))))]\n+\t(ior:SI (and:SI (match_dup 2) (match_dup 3))\n+\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n   \"\"\n-  \"maskir. %0,%3,%1\"\n+  \"maskir. %0,%3,%2\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n \t (ior:SI (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_dup 1))\n-\t\t (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"0\")))\n+\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t (and:SI (not:SI (match_dup 2))\n+\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0\")))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (match_dup 3) (match_dup 1))\n-\t\t(and:SI (not:SI (match_dup 1)) (match_dup 2))))]\n+\t(ior:SI (and:SI (match_dup 3) (match_dup 2))\n+\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n   \"\"\n-  \"maskir. %0,%3,%1\"\n+  \"maskir. %0,%3,%2\"\n   [(set_attr \"type\" \"compare\")])\n \f\n ;; Rotate and shift insns, in all their variants.  These support shifts,\n@@ -2894,14 +2886,15 @@\n \n (define_expand \"allocate_stack\"\n   [(set (reg:SI 1)\n-\t(minus:SI (reg:SI 1) (match_operand:SI 0 \"reg_or_cint_operand\" \"\")))]\n+\t(minus:SI (reg:SI 1) (match_operand:SI 0 \"reg_or_short_operand\" \"\")))]\n   \"\"\n   \"\n { rtx chain = gen_reg_rtx (SImode);\n   rtx stack_bot = gen_rtx (MEM, Pmode, stack_pointer_rtx);\n \n   emit_move_insn (chain, stack_bot);\n-  emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, operands[0]));\n+  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t negate_rtx (SImode, operands[0])));\n   emit_move_insn (stack_bot, chain);\n   DONE;\n }\")"}]}