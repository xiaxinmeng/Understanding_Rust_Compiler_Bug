{"sha": "c71d6a561e249d1fe07fcbd97e348b0849247d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxZDZhNTYxZTI0OWQxZmUwN2ZjYmQ5N2UzNDhiMDg0OTI0N2Q0Mg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:13:29Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:13:29Z"}, "message": "re PR fortran/28923 (Bad triplet interpretation in initialization)\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28923\n\texpr.c (find_array_section): Only use the array lower and upper\n\tbounds for the start and end of the sections, where the expr is\n\tNULL.\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR libfortran/28923\n\tgfortran.dg/array_initializer_2.f90: Fill in missing index start value.\n\tgfortran.dg/array_initializer_3.f90: New test.\n\nFrom-SVN: r116815", "tree": {"sha": "4d0f643177dfce60aa763c608f0b349c0290cdd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0f643177dfce60aa763c608f0b349c0290cdd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c71d6a561e249d1fe07fcbd97e348b0849247d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71d6a561e249d1fe07fcbd97e348b0849247d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71d6a561e249d1fe07fcbd97e348b0849247d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71d6a561e249d1fe07fcbd97e348b0849247d42/comments", "author": null, "committer": null, "parents": [{"sha": "a7819e426a4f0a6d1022d0d1e96c5096e0726912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7819e426a4f0a6d1022d0d1e96c5096e0726912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7819e426a4f0a6d1022d0d1e96c5096e0726912"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "5b6221573984a2030a00cdbd737761f27f445310", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c71d6a561e249d1fe07fcbd97e348b0849247d42", "patch": "@@ -1,4 +1,11 @@\n-2006-09-09  Paul Thomas <pault@gcc.gnu.org>\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28923\n+\texpr.c (find_array_section): Only use the array lower and upper\n+\tbounds for the start and end of the sections, where the expr is\n+\tNULL.\n+\n+2006-09-10  Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/28914\n \t* trans-array.c (gfc_trans_array_constructor_value): Create a temporary"}, {"sha": "5eef93978aa65c5021da26420b022fe2a4dbae75", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c71d6a561e249d1fe07fcbd97e348b0849247d42", "patch": "@@ -1090,24 +1090,15 @@ find_array_section (gfc_expr *expr, gfc_ref *ref)\n       if (begin)\n \t  mpz_set (start[d], begin->value.integer);\n       else\n-\t{\n-\t  if (mpz_cmp_si (stride[d], 0) < 0)\n-\t    mpz_set (start[d], upper->value.integer);\n-\t  else\n-\t    mpz_set (start[d], lower->value.integer);\n-\t}\n+\tmpz_set (start[d], lower->value.integer);\n+\n       mpz_set (ctr[d], start[d]);\n \n       /* Obtain the end value for the index.  */\n       if (finish)\n         mpz_set (end[d], finish->value.integer);\n       else\n-\t{\n-\t  if (mpz_cmp_si (stride[d], 0) < 0)\n-\t    mpz_set (end[d], lower->value.integer);\n-\t  else\n-\t    mpz_set (end[d], upper->value.integer);\n-\t}\n+\tmpz_set (end[d], upper->value.integer);\n \n       /* Separate 'if' because elements sometimes arrive with\n \t non-null end.  */"}, {"sha": "152d5cf911e7d9457b608cb26290afa6d6c5bef9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c71d6a561e249d1fe07fcbd97e348b0849247d42", "patch": "@@ -1,3 +1,9 @@\n+2006-09-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR libfortran/28923\n+\tgfortran.dg/array_initializer_2.f90: Fill in missing index start value.\n+\tgfortran.dg/array_initializer_3.f90: New test.\n+\n 2006-09-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/28914"}, {"sha": "a7cd3a7c45ed69a23017ac0e6dcf8691766fc6c9", "filename": "gcc/testsuite/gfortran.dg/array_initializer_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90?ref=c71d6a561e249d1fe07fcbd97e348b0849247d42", "patch": "@@ -8,7 +8,7 @@\n   integer, dimension(3), parameter :: a=(/1,2,3/)\n   integer, dimension(3), parameter :: b=(/a(:)/)\n   integer, dimension(3,3), parameter :: c=reshape ((/(i, i = 1,9)/),(/3,3/))\n-  integer, dimension(2,3), parameter :: d=reshape ((/c(:2:-1,:)/),(/2,3/))\n+  integer, dimension(2,3), parameter :: d=reshape ((/c(3:2:-1,:)/),(/2,3/))\n   integer, dimension(3,3), parameter :: e=reshape ((/a(:),a(:)+3,a(:)+6/),(/3,3/))\n   integer, dimension(2,3), parameter :: f=reshape ((/c(2:1:-1,:)/),(/2,3/))\n   if (any (b .ne. (/1,2,3/))) call abort ()"}, {"sha": "fd35875d2af70d015787f08227fb9787952b7931", "filename": "gcc/testsuite/gfortran.dg/array_initializer_3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71d6a561e249d1fe07fcbd97e348b0849247d42/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90?ref=c71d6a561e249d1fe07fcbd97e348b0849247d42", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! Tests the fix for PR28923 in which initializer array constructors with\n+! a missing initial array index and negative stride would be incorrectly\n+! interpreted.\n+!\n+! Contributed by Dominique d'Humieres  <dominiq@lps.ens.fr>\n+!\n+real, dimension(3,3), parameter :: a=reshape ((/(i, i = 1,9)/),(/3,3/))\n+real, dimension(2,3) :: b=a(:2:-1,:)  ! { dg-error \"different shape for Array assignment\" }\n+real, dimension(2,3) :: c=a(3:2:-1,:)\n+print *, b\n+print *, c\n+end\n+"}]}