{"sha": "c191b1abe9db08abdf3b2d792980e8eee63735b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5MWIxYWJlOWRiMDhhYmRmM2IyZDc5Mjk4MGU4ZWVlNjM3MzViNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-08-01T17:17:29Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-08-01T17:17:29Z"}, "message": "Cherry-pick compiler-rt revision 318044 and 319180.\n\n    [PowerPC][tsan] Update tsan to handle changed memory layouts in newer kernels\n    \n    In more recent Linux kernels with 47 bit VMAs the layout of virtual memory\n    for powerpc64 changed causing the thread sanitizer to not work properly. This\n    patch adds support for 47 bit VMA kernels for powerpc64.\n    \n    Tested on several 4.x and 3.x kernel releases.\n\nRegtested/bootstrapped on ppc64le-linux with kernel 4.14; applying to\ntrunk/8.3.\n\n2018-08-01  Marek Polacek  <polacek@redhat.com>\n\n\tPR sanitizer/86759\n\t* tsan/tsan_platform.h: Cherry-pick compiler-rt revision 318044.\n\t* tsan/tsan_platform_linux.cc: Cherry-pick compiler-rt revision\n\t319180.\n\nFrom-SVN: r263229", "tree": {"sha": "b0a7fd76d49f61f580ac251b671c79eecabb8779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a7fd76d49f61f580ac251b671c79eecabb8779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c191b1abe9db08abdf3b2d792980e8eee63735b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c191b1abe9db08abdf3b2d792980e8eee63735b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c191b1abe9db08abdf3b2d792980e8eee63735b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c191b1abe9db08abdf3b2d792980e8eee63735b5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "616fc41ca2e3eb90c6e870d72d54277546c62a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616fc41ca2e3eb90c6e870d72d54277546c62a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616fc41ca2e3eb90c6e870d72d54277546c62a4d"}], "stats": {"total": 133, "additions": 95, "deletions": 38}, "files": [{"sha": "52b88337f0017fa691f22cccac8efa3b275de506", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=c191b1abe9db08abdf3b2d792980e8eee63735b5", "patch": "@@ -1,3 +1,10 @@\n+2018-08-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/86759\n+\t* tsan/tsan_platform.h: Cherry-pick compiler-rt revision 318044.\n+\t* tsan/tsan_platform_linux.cc: Cherry-pick compiler-rt revision\n+\t319180.\n+\n 2018-07-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/86560"}, {"sha": "44a3ea99107a0a6a87158749b23a509002b7ffce", "filename": "libsanitizer/tsan/tsan_platform.h", "status": "modified", "additions": 86, "deletions": 36, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2Ftsan%2Ftsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2Ftsan%2Ftsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform.h?ref=c191b1abe9db08abdf3b2d792980e8eee63735b5", "patch": "@@ -301,6 +301,38 @@ struct Mapping46 {\n   static const uptr kVdsoBeg       = 0x7800000000000000ull;\n };\n \n+/*\n+C/C++ on linux/powerpc64 (47-bit VMA)\n+0000 0000 1000 - 0100 0000 0000: main binary\n+0100 0000 0000 - 0200 0000 0000: -\n+0100 0000 0000 - 1000 0000 0000: shadow\n+1000 0000 0000 - 1000 0000 0000: -\n+1000 0000 0000 - 2000 0000 0000: metainfo (memory blocks and sync objects)\n+2000 0000 0000 - 2000 0000 0000: -\n+2000 0000 0000 - 2200 0000 0000: traces\n+2200 0000 0000 - 7d00 0000 0000: -\n+7d00 0000 0000 - 7e00 0000 0000: heap\n+7e00 0000 0000 - 7e80 0000 0000: -\n+7e80 0000 0000 - 8000 0000 0000: modules and main thread stack\n+*/\n+struct Mapping47 {\n+  static const uptr kMetaShadowBeg = 0x100000000000ull;\n+  static const uptr kMetaShadowEnd = 0x200000000000ull;\n+  static const uptr kTraceMemBeg   = 0x200000000000ull;\n+  static const uptr kTraceMemEnd   = 0x220000000000ull;\n+  static const uptr kShadowBeg     = 0x010000000000ull;\n+  static const uptr kShadowEnd     = 0x100000000000ull;\n+  static const uptr kHeapMemBeg    = 0x7d0000000000ull;\n+  static const uptr kHeapMemEnd    = 0x7e0000000000ull;\n+  static const uptr kLoAppMemBeg   = 0x000000001000ull;\n+  static const uptr kLoAppMemEnd   = 0x010000000000ull;\n+  static const uptr kHiAppMemBeg   = 0x7e8000000000ull;\n+  static const uptr kHiAppMemEnd   = 0x800000000000ull; // 47 bits\n+  static const uptr kAppMemMsk     = 0x7c0000000000ull;\n+  static const uptr kAppMemXor     = 0x020000000000ull;\n+  static const uptr kVdsoBeg       = 0x7800000000000000ull;\n+};\n+\n // Indicates the runtime will define the memory regions at runtime.\n #define TSAN_RUNTIME_VMA 1\n #endif\n@@ -427,11 +459,13 @@ uptr MappingArchImpl(void) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return MappingImpl<Mapping44, Type>();\n-  else\n-    return MappingImpl<Mapping46, Type>();\n+  switch (vmaSize) {\n+    case 44: return MappingImpl<Mapping44, Type>();\n+    case 46: return MappingImpl<Mapping46, Type>();\n+    case 47: return MappingImpl<Mapping47, Type>();\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return MappingImpl<Mapping, Type>();\n #endif\n@@ -580,11 +614,13 @@ bool IsAppMem(uptr mem) {\n   DCHECK(0);\n   return false;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return IsAppMemImpl<Mapping44>(mem);\n-  else\n-    return IsAppMemImpl<Mapping46>(mem);\n+  switch (vmaSize) {\n+    case 44: return IsAppMemImpl<Mapping44>(mem);\n+    case 46: return IsAppMemImpl<Mapping46>(mem);\n+    case 47: return IsAppMemImpl<Mapping47>(mem);\n+  }\n   DCHECK(0);\n+  return false;\n #else\n   return IsAppMemImpl<Mapping>(mem);\n #endif\n@@ -607,11 +643,13 @@ bool IsShadowMem(uptr mem) {\n   DCHECK(0);\n   return false;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return IsShadowMemImpl<Mapping44>(mem);\n-  else\n-    return IsShadowMemImpl<Mapping46>(mem);\n+  switch (vmaSize) {\n+    case 44: return IsShadowMemImpl<Mapping44>(mem);\n+    case 46: return IsShadowMemImpl<Mapping46>(mem);\n+    case 47: return IsShadowMemImpl<Mapping47>(mem);\n+  }\n   DCHECK(0);\n+  return false;\n #else\n   return IsShadowMemImpl<Mapping>(mem);\n #endif\n@@ -634,11 +672,13 @@ bool IsMetaMem(uptr mem) {\n   DCHECK(0);\n   return false;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return IsMetaMemImpl<Mapping44>(mem);\n-  else\n-    return IsMetaMemImpl<Mapping46>(mem);\n+  switch (vmaSize) {\n+    case 44: return IsMetaMemImpl<Mapping44>(mem);\n+    case 46: return IsMetaMemImpl<Mapping46>(mem);\n+    case 47: return IsMetaMemImpl<Mapping47>(mem);\n+  }\n   DCHECK(0);\n+  return false;\n #else\n   return IsMetaMemImpl<Mapping>(mem);\n #endif\n@@ -671,11 +711,13 @@ uptr MemToShadow(uptr x) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return MemToShadowImpl<Mapping44>(x);\n-  else\n-    return MemToShadowImpl<Mapping46>(x);\n+  switch (vmaSize) {\n+    case 44: return MemToShadowImpl<Mapping44>(x);\n+    case 46: return MemToShadowImpl<Mapping46>(x);\n+    case 47: return MemToShadowImpl<Mapping47>(x);\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return MemToShadowImpl<Mapping>(x);\n #endif\n@@ -710,11 +752,13 @@ u32 *MemToMeta(uptr x) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return MemToMetaImpl<Mapping44>(x);\n-  else\n-    return MemToMetaImpl<Mapping46>(x);\n+  switch (vmaSize) {\n+    case 44: return MemToMetaImpl<Mapping44>(x);\n+    case 46: return MemToMetaImpl<Mapping46>(x);\n+    case 47: return MemToMetaImpl<Mapping47>(x);\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return MemToMetaImpl<Mapping>(x);\n #endif\n@@ -762,11 +806,13 @@ uptr ShadowToMem(uptr s) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return ShadowToMemImpl<Mapping44>(s);\n-  else\n-    return ShadowToMemImpl<Mapping46>(s);\n+  switch (vmaSize) {\n+    case 44: return ShadowToMemImpl<Mapping44>(s);\n+    case 46: return ShadowToMemImpl<Mapping46>(s);\n+    case 47: return ShadowToMemImpl<Mapping47>(s);\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return ShadowToMemImpl<Mapping>(s);\n #endif\n@@ -797,11 +843,13 @@ uptr GetThreadTrace(int tid) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return GetThreadTraceImpl<Mapping44>(tid);\n-  else\n-    return GetThreadTraceImpl<Mapping46>(tid);\n+  switch (vmaSize) {\n+    case 44: return GetThreadTraceImpl<Mapping44>(tid);\n+    case 46: return GetThreadTraceImpl<Mapping46>(tid);\n+    case 47: return GetThreadTraceImpl<Mapping47>(tid);\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return GetThreadTraceImpl<Mapping>(tid);\n #endif\n@@ -827,11 +875,13 @@ uptr GetThreadTraceHeader(int tid) {\n   DCHECK(0);\n   return 0;\n #elif defined(__powerpc64__)\n-  if (vmaSize == 44)\n-    return GetThreadTraceHeaderImpl<Mapping44>(tid);\n-  else\n-    return GetThreadTraceHeaderImpl<Mapping46>(tid);\n+  switch (vmaSize) {\n+    case 44: return GetThreadTraceHeaderImpl<Mapping44>(tid);\n+    case 46: return GetThreadTraceHeaderImpl<Mapping46>(tid);\n+    case 47: return GetThreadTraceHeaderImpl<Mapping47>(tid);\n+  }\n   DCHECK(0);\n+  return 0;\n #else\n   return GetThreadTraceHeaderImpl<Mapping>(tid);\n #endif"}, {"sha": "d46dff45a673d274141e08768037734823a7e0b7", "filename": "libsanitizer/tsan/tsan_platform_linux.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c191b1abe9db08abdf3b2d792980e8eee63735b5/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc?ref=c191b1abe9db08abdf3b2d792980e8eee63735b5", "patch": "@@ -214,9 +214,9 @@ void InitializePlatformEarly() {\n     Die();\n   }\n #elif defined(__powerpc64__)\n-  if (vmaSize != 44 && vmaSize != 46) {\n+  if (vmaSize != 44 && vmaSize != 46 && vmaSize != 47) {\n     Printf(\"FATAL: ThreadSanitizer: unsupported VMA range\\n\");\n-    Printf(\"FATAL: Found %d - Supported 44 and 46\\n\", vmaSize);\n+    Printf(\"FATAL: Found %d - Supported 44, 46, and 47\\n\", vmaSize);\n     Die();\n   }\n #endif"}]}