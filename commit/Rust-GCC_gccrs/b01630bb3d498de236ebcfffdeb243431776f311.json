{"sha": "b01630bb3d498de236ebcfffdeb243431776f311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxNjMwYmIzZDQ5OGRlMjM2ZWJjZmZmZGViMjQzNDMxNzc2ZjMxMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-06-08T14:38:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-08T14:38:48Z"}, "message": "random.tcc (gamma_distribution<>::operator() (_UniformRandomNumberGenerator&, const param_type&): Redo, using the Marsaglia/Tsang algorithm.\n\n2009-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.tcc (gamma_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&): Redo, using\n\tthe Marsaglia/Tsang algorithm.\n\t(gamma_distribution<>::param_type::_M_initialize): Adjust.\n\t(operator<<(basic_ostream<>&, gamma_distribution<>),\n\toperator>>(basic_ostream<>&, gamma_distribution<>): Likewise.\n\n\t* include/bits/random.tcc(student_t_distribution<>::_M_gaussian):\n\tRemove, just use normal_distribution.\n\t(operator<<(basic_ostream<>&, student_t_distribution<>),\n\toperator>>(basic_ostream<>&, student_t_distribution<>): Adjust.\n\t(linear_congruential_engine<>::operator()()): Move inline.\n\t(lognormal_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&)): Move inline, just use normal_distribution.\n\t(operator<<(basic_ostream<>&, lognormal_distribution<>),\n\toperator>>(basic_ostream<>&, lognormal_distribution<>): Adjust.\n\t(weibull_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&)): Move here, out of line.\n\t(piecewise_constant_distribution<>::param_type::param_type()): Move\n\tinline.\n\t* include/bits/random.h: Adjust, minor tweaks.\n\nFrom-SVN: r148276", "tree": {"sha": "a53cbfe8bd55c627775514f64ff7af66570549c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53cbfe8bd55c627775514f64ff7af66570549c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01630bb3d498de236ebcfffdeb243431776f311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01630bb3d498de236ebcfffdeb243431776f311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01630bb3d498de236ebcfffdeb243431776f311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01630bb3d498de236ebcfffdeb243431776f311/comments", "author": null, "committer": null, "parents": [{"sha": "06ddd8716e4e231b0356a3c78f0d54f7f7282c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ddd8716e4e231b0356a3c78f0d54f7f7282c5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ddd8716e4e231b0356a3c78f0d54f7f7282c5e"}], "stats": {"total": 337, "additions": 120, "deletions": 217}, "files": [{"sha": "9d3bf47053e3c300b6b403176aab4dcc7a3c0b6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b01630bb3d498de236ebcfffdeb243431776f311", "patch": "@@ -1,3 +1,27 @@\n+2009-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.tcc (gamma_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&): Redo, using\n+\tthe Marsaglia/Tsang algorithm.\n+\t(gamma_distribution<>::param_type::_M_initialize): Adjust.\n+\t(operator<<(basic_ostream<>&, gamma_distribution<>),\n+\toperator>>(basic_ostream<>&, gamma_distribution<>): Likewise.\n+\n+\t* include/bits/random.tcc(student_t_distribution<>::_M_gaussian):\n+\tRemove, just use normal_distribution.\n+\t(operator<<(basic_ostream<>&, student_t_distribution<>),\n+\toperator>>(basic_ostream<>&, student_t_distribution<>): Adjust.\n+\t(linear_congruential_engine<>::operator()()): Move inline.\n+\t(lognormal_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&)): Move inline, just use normal_distribution.\n+\t(operator<<(basic_ostream<>&, lognormal_distribution<>),\n+\toperator>>(basic_ostream<>&, lognormal_distribution<>): Adjust.\n+\t(weibull_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&)): Move here, out of line.\n+\t(piecewise_constant_distribution<>::param_type::param_type()): Move\n+\tinline.\n+\t* include/bits/random.h: Adjust, minor tweaks.\n+\n 2009-06-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Remove xfail."}, {"sha": "8a21ae55da7dc66634976bf63f305d17a95c8a73", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 32, "deletions": 52, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=b01630bb3d498de236ebcfffdeb243431776f311", "patch": "@@ -268,7 +268,11 @@ namespace std\n        * @brief Gets the next random number in the sequence.\n        */\n       result_type\n-      operator()();\n+      operator()()\n+      {\n+\t_M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n+\treturn _M_x;\n+      }\n \n       /**\n        * @brief Compares two linear congruential random number generator\n@@ -1588,12 +1592,7 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{\n-\t  typedef typename _UniformRandomNumberGenerator::result_type\n-\t    _UResult_type;\n-\t  return _M_call(__urng, this->a(), this->b(),\n-\t\t\t typename is_integral<_UResult_type>::type());\n-\t}\n+        { return this->operator()(__urng, this->param()); }\n \n       /**\n        * Gets a uniform random number in the range @f$[0, n)@f$.\n@@ -1765,11 +1764,7 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{\n-\t  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t    __aurng(__urng);\n-\t  return (__aurng() * (this->b() - this->a())) + this->a();\n-\t}\n+        { return this->operator()(__urng, this->param()); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -2014,20 +2009,20 @@ namespace std\n       explicit\n       lognormal_distribution(_RealType __m = _RealType(0),\n \t\t\t     _RealType __s = _RealType(1))\n-      : _M_param(__m, __s)\n+      : _M_param(__m, __s), _M_nd()\n       { }\n \n       explicit\n       lognormal_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_nd()\n       { }\n \n       /**\n        * Resets the distribution state.\n        */\n       void\n       reset()\n-      { }\n+      { _M_nd.reset(); }\n \n       /**\n        *\n@@ -2077,10 +2072,13 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n+\t\t   const param_type& __p)\n+        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }\n \n     private:\n       param_type _M_param;\n+\n+      normal_distribution<result_type> _M_nd;\n     };\n \n   /**\n@@ -2555,20 +2553,20 @@ namespace std\n \n       explicit\n       student_t_distribution(_RealType __n = _RealType(1))\n-      : _M_param(__n)\n+      : _M_param(__n), _M_nd()\n       { }\n \n       explicit\n       student_t_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_nd()\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n        */\n       void\n       reset()\n-      { }\n+      { _M_nd.reset(); }\n \n       /**\n        *\n@@ -2617,12 +2615,9 @@ namespace std\n \t\t   const param_type& __p);\n \n     private:\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\t_M_gaussian(_UniformRandomNumberGenerator& __urng,\n-\t\t    const result_type __sigma);\n-\n       param_type _M_param;\n+\n+      normal_distribution<result_type> _M_nd;\n     };\n \n   /**\n@@ -2761,14 +2756,7 @@ namespace std\n     template<typename _UniformRandomNumberGenerator>\n       result_type\n       operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n-\t  __aurng(__urng);\n-\tif ((__aurng() - __aurng.min())\n-\t     < this->p() * (__aurng.max() - __aurng.min()))\n-\t  return true;\n-\treturn false;\n-      }\n+      { return this->operator()(__urng, this->param()); }\n \n     template<typename _UniformRandomNumberGenerator>\n       result_type\n@@ -3539,11 +3527,7 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{\n-\t  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t    __aurng(__urng);\n-\t  return -std::log(__aurng()) / this->lambda();\n-\t}\n+        { return this->operator()(__urng, this->param()); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -3633,8 +3617,7 @@ namespace std\n \t_RealType _M_alpha;\n \t_RealType _M_beta;\n \n-\t// Hosts either lambda of GB or d of modified Vaduva's.\n-\t_RealType _M_l_d;\n+\t_RealType _M_malpha, _M_a2;\n       };\n \n     public:\n@@ -3645,21 +3628,20 @@ namespace std\n       explicit\n       gamma_distribution(_RealType __alpha_val = _RealType(1),\n \t\t\t _RealType __beta_val = _RealType(1))\n-      : _M_param(__alpha_val, __beta_val)\n+      : _M_param(__alpha_val, __beta_val), _M_nd()\n       { }\n \n       explicit\n       gamma_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_nd()\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n-       *\n-       * Does nothing for the gamma distribution.\n        */\n       void\n-      reset() { }\n+      reset()\n+      { _M_nd.reset(); }\n \n       /**\n        * @brief Returns the @f$ \\alpha @f$ of the distribution.\n@@ -3716,6 +3698,8 @@ namespace std\n \n     private:\n       param_type _M_param;\n+\n+      normal_distribution<result_type> _M_nd;\n     };\n \n   /**\n@@ -3854,13 +3838,7 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p)\n-\t{\n-\t  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t    __aurng(__urng);\n-\t  return __p.b() * std::pow(-std::log(__aurng()),\n-\t\t\t\t    result_type(1) / __p.a());\n-\t}\n+\t\t   const param_type& __p);\n \n     private:\n       param_type _M_param;\n@@ -4222,7 +4200,9 @@ namespace std\n \ttypedef piecewise_constant_distribution<_RealType> distribution_type;\n \tfriend class piecewise_constant_distribution<_RealType>;\n \n-\tparam_type();\n+\tparam_type()\n+\t: _M_int(), _M_den(), _M_cp()\n+\t{ _M_initialize(); }\n \n \ttemplate<typename _InputIteratorB, typename _InputIteratorW>\n \t  param_type(_InputIteratorB __bfirst,"}, {"sha": "b933f6d3dfcfb227bc5f17a6f8b949cf97423de6", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 64, "deletions": 165, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01630bb3d498de236ebcfffdeb243431776f311/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=b01630bb3d498de236ebcfffdeb243431776f311", "patch": "@@ -128,19 +128,6 @@ namespace std\n       seed(__sum);\n     }\n \n-  /**\n-   * Gets the next generated value in sequence.\n-   */\n-  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    typename linear_congruential_engine<_UIntType, __a, __c, __m>::\n-\t     result_type\n-    linear_congruential_engine<_UIntType, __a, __c, __m>::\n-    operator()()\n-    {\n-      _M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n-      return _M_x;\n-    }\n-\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -556,7 +543,7 @@ namespace std\n     {\n       const long double __r = static_cast<long double>(_M_b.max())\n \t\t\t    - static_cast<long double>(_M_b.min()) + 1.0L;\n-      const result_type __m = std::log10(__r) / std::log10(2.0L);\n+      const result_type __m = std::log(__r) / std::log(2.0L);\n       result_type __n, __n0, __y0, __y1, __s0, __s1;\n       for (size_t __i = 0; __i < 2; ++__i)\n \t{\n@@ -874,17 +861,12 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __p)\n       {\n-\ttypename gamma_distribution<>::param_type\n-\t  __gamma_param(__p.k(), 1.0);\n-\tgamma_distribution<> __gamma(__gamma_param);\n+\tgamma_distribution<> __gamma(__p.k(), 1.0);\n \tdouble __x = __gamma(__urng);\n \n-\ttypename poisson_distribution<result_type>::param_type\n-\t  __poisson_param(__x * __p.p() / (1.0 - __p.p()));\n-\tpoisson_distribution<result_type> __poisson(__poisson_param);\n-\tresult_type __m = __poisson(__urng);\n-\n-\treturn __m;\n+\tpoisson_distribution<result_type> __poisson(__x * __p.p()\n+\t\t\t\t\t\t    / (1.0 - __p.p()));\n+\treturn __poisson(__urng);\n       }\n \n   template<typename _IntType, typename _CharT, typename _Traits>\n@@ -1510,33 +1492,6 @@ namespace std\n     }\n \n \n-  template<typename _RealType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename lognormal_distribution<_RealType>::result_type\n-      lognormal_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng,\n-\t\t const param_type& __p)\n-      {\n-\t_RealType __u, __v, __r2, __normal;\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t  __aurng(__urng);\n-\n-\tdo\n-\t  {\n-\t    // Choose x,y in uniform square (-1,-1) to (+1,+1).\n-\t    __u = 2 * __aurng() - 1;\n-\t    __v = 2 * __aurng() - 1;\n-\n-\t    // See if it is in the unit circle.\n-\t    __r2 = __u * __u + __v * __v;\n-\t  }\n-\twhile (__r2 > 1 || __r2 == 0);\n-\n-\t__normal = __u * std::sqrt(-2 * std::log(__r2) / __r2);\n-\n-\treturn std::exp(__p.s() * __normal + __p.m());\n-      }\n-\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1553,7 +1508,8 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.m() << __space << __x.s();\n+      __os << __x.m() << __space << __x.s()\n+\t   << __space << __x._M_nd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -1573,7 +1529,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __m, __s;\n-      __is >> __m >> __s;\n+      __is >> __m >> __s >> __x._M_nd;\n       __x.param(typename lognormal_distribution<_RealType>::\n \t\tparam_type(__m, __s));\n \n@@ -1589,9 +1545,7 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __p)\n       {\n-\ttypename gamma_distribution<_RealType>::param_type\n-\t  __gamma_param(__p.n() / 2, 1.0);\n-\tgamma_distribution<_RealType> __gamma(__gamma_param);\n+\tgamma_distribution<_RealType> __gamma(__p.n() / 2, 1.0);\n \treturn 2 * __gamma(__urng);\n       }\n \n@@ -1765,35 +1719,6 @@ namespace std\n     }\n \n \n-  //\n-  //  This could be operator() for a Gaussian distribution.\n-  //\n-  template<typename _RealType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename student_t_distribution<_RealType>::result_type\n-      student_t_distribution<_RealType>::\n-      _M_gaussian(_UniformRandomNumberGenerator& __urng,\n-\t\t  const result_type __sigma)\n-      {\n-\t_RealType __x, __y, __r2;\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t  __aurng(__urng);\n-\n-\tdo\n-\t  {\n-\t    // Choose x,y in uniform square (-1,-1) to (+1,+1).\n-\t    __x = 2 * __aurng() - 1;\n-\t    __y = 2 * __aurng() - 1;\n-\n-\t    // See if it is in the unit circle.\n-\t    __r2 = __x * __x + __y * __y;\n-\t  }\n-\twhile (__r2 > 1 || __r2 == 0);\n-\n-\t// Box-Muller transform.\n-\treturn __sigma * __y * std::sqrt(-2 * std::log(__r2) / __r2);\n-      }\n-\n   template<typename _RealType>\n     template<typename _UniformRandomNumberGenerator>\n       typename student_t_distribution<_RealType>::result_type\n@@ -1803,24 +1728,21 @@ namespace std\n       {\n \tif (__param.n() <= 2.0)\n \t  {\n-\t    _RealType __y1 = _M_gaussian(__urng, 1.0);\n-\t    typename chi_squared_distribution<_RealType>::param_type\n-\t      __chisq_param(__param.n());\n-\t    chi_squared_distribution<_RealType> __chisq(__chisq_param);\n+\t    _RealType __y1 = _M_nd(__urng);\n+\t    chi_squared_distribution<_RealType> __chisq(__param.n());\n \t    _RealType __y2 = __chisq(__urng);\n \n \t    return __y1 / std::sqrt(__y2 / __param.n());\n \t  }\n \telse\n \t  {\n \t    _RealType __y1, __y2, __z;\n+\t    exponential_distribution<_RealType>\n+\t      __exponential(1.0 / (__param.n() / 2.0 - 1.0));\n+\n \t    do\n \t      {\n-\t\t__y1 = _M_gaussian(__urng, 1.0);\n-\t\ttypename exponential_distribution<_RealType>::param_type\n-\t\t  __exp_param(1.0 / (__param.n() / 2.0 - 1.0));\n-\t\texponential_distribution<_RealType>\n-\t\t  __exponential(__exp_param);\n+\t\t__y1 = _M_nd(__urng);\n \t\t__y2 = __exponential(__urng);\n \n \t\t__z = __y1 * __y1 / (__param.n() - 2.0);\n@@ -1850,7 +1772,7 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.n();\n+      __os << __x.n() << __space << __x._M_nd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -1870,7 +1792,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __n;\n-      __is >> __n;\n+      __is >> __n >> __x._M_nd;\n       __x.param(typename student_t_distribution<_RealType>::param_type(__n));\n \n       __is.flags(__flags);\n@@ -1883,28 +1805,16 @@ namespace std\n     gamma_distribution<_RealType>::param_type::\n     _M_initialize()\n     {\n-      if (_M_alpha >= 1)\n-\t_M_l_d = std::sqrt(2 * _M_alpha - 1);\n-      else\n-\t_M_l_d = (std::pow(_M_alpha, _M_alpha / (1 - _M_alpha))\n-\t\t  * (1 - _M_alpha));\n+      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;\n+\n+      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);\n+      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);\n     }\n \n   /**\n-   * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n-   * of Vaduva's rejection from Weibull algorithm due to Devroye for\n-   * alpha < 1.\n-   *\n-   * References:\n-   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n-   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n-   *\n-   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n-   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n-   * Series in Statistics, 8, 545-576, 1977.\n-   *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n-   * New York, 1986, Ch. IX, Sect. 3.4 (+ Errata!).\n+   * Marsaglia, G. and Tsang, W. W.\n+   * \"A Simple Method for Generating Gamma Variables\"\n+   * ACM Transactions on Mathematical Software, 26, 3, 363-372, 2000.\n    */\n   template<typename _RealType>\n     template<typename _UniformRandomNumberGenerator>\n@@ -1913,58 +1823,40 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\tresult_type __x;\n \t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n \t  __aurng(__urng);\n \n-\tbool __reject;\n-\tconst _RealType __alpha_val = __param.alpha();\n-\tconst _RealType __beta_val = __param.beta();\n-\tif (__alpha_val >= 1)\n-\t  {\n-\t    // alpha - log(4)\n-\t    const result_type __b = __alpha_val\n-\t      - result_type(1.3862943611198906188344642429163531L);\n-\t    const result_type __c = __alpha_val + __param._M_l_d;\n-\t    const result_type __1l = 1 / __param._M_l_d;\n-\n-\t    // 1 + log(9 / 2)\n-\t    const result_type __k = 2.5040773967762740733732583523868748L;\n+\tresult_type __u, __v, __n;\n+\tconst result_type __a1 = (__param._M_malpha\n+\t\t\t\t  - _RealType(1.0) / _RealType(3.0));\n \n+\tdo\n+\t  {\n \t    do\n \t      {\n-\t\tconst result_type __u = __aurng() / __beta_val;\n-\t\tconst result_type __v = __aurng() / __beta_val;\n-\n-\t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n-\t\t__x = __alpha_val * std::exp(__y);\n-\n-\t\tconst result_type __z = __u * __v * __v;\n-\t\tconst result_type __r = __b + __c * __y - __x;\n-\n-\t\t__reject = __r < result_type(4.5) * __z - __k;\n-\t\tif (__reject)\n-\t\t  __reject = __r < std::log(__z);\n+\t\t__n = _M_nd(__urng);\n+\t\t__v = result_type(1.0) + __param._M_a2 * __n; \n \t      }\n-\t    while (__reject);\n+\t    while (__v <= 0.0);\n+\n+\t    __v = __v * __v * __v;\n+\t    __u = __aurng();\n \t  }\n+\twhile (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n\n+\t       && (std::log(__u) > (0.5 * __n * __n + __a1\n+\t\t\t\t    * (1.0 - __v + std::log(__v)))));\n+\n+\tif (__param.alpha() == __param._M_malpha)\n+\t  return __a1 * __v * __param.beta();\n \telse\n \t  {\n-\t    const result_type __c = 1 / __alpha_val;\n-\n \t    do\n-\t      {\n-\t\tconst result_type __z = -std::log(__aurng() / __beta_val);\n-\t\tconst result_type __e = -std::log(__aurng() / __beta_val);\n-\n-\t\t__x = std::pow(__z, __c);\n-\n-\t\t__reject = __z + __e < __param._M_l_d + __x;\n-\t      }\n-\t    while (__reject);\n+\t      __u = __aurng();\n+\t    while (__u == 0.0);\n+\t    \n+\t    return (std::pow(__u, result_type(1.0) / __param.alpha())\n+\t\t    * __a1 * __v * __param.beta());\n \t  }\n-\n-\treturn __beta_val * __x;\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n@@ -1983,7 +1875,8 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.alpha() << __space << __x.beta();\n+      __os << __x.alpha() << __space << __x.beta()\n+\t   << __space << __x._M_nd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -2003,7 +1896,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __alpha_val, __beta_val;\n-      __is >> __alpha_val >> __beta_val;\n+      __is >> __alpha_val >> __beta_val >> __x._M_nd;\n       __x.param(typename gamma_distribution<_RealType>::\n \t\tparam_type(__alpha_val, __beta_val));\n \n@@ -2012,6 +1905,19 @@ namespace std\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename weibull_distribution<_RealType>::result_type\n+      weibull_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\treturn __p.b() * std::pow(-std::log(__aurng()),\n+\t\t\t\t  result_type(1) / __p.a());\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2265,12 +2171,6 @@ namespace std\n       _M_cp[_M_cp.size() - 1] = 1.0;\n     }\n \n-  template<typename _RealType>\n-    piecewise_constant_distribution<_RealType>::param_type::\n-    param_type()\n-    : _M_int(), _M_den(), _M_cp()\n-    { _M_initialize(); }\n-\n   template<typename _RealType>\n     template<typename _InputIteratorB, typename _InputIteratorW>\n       piecewise_constant_distribution<_RealType>::param_type::\n@@ -2315,8 +2215,7 @@ namespace std\n   template<typename _RealType>\n     template<typename _Func>\n       piecewise_constant_distribution<_RealType>::param_type::\n-      param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n-\t\t _Func __fw)\n+      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)\n       : _M_int(), _M_den(), _M_cp()\n       {\n \tfor (size_t __i = 0; __i <= __nw; ++__i)\n@@ -2713,7 +2612,7 @@ namespace std\n                    __bits);\n       const long double __r = static_cast<long double>(__urng.max())\n \t\t\t    - static_cast<long double>(__urng.min()) + 1.0L;\n-      const size_t __log2r = std::log10(__r) / std::log10(2.0L);\n+      const size_t __log2r = std::log(__r) / std::log(2.0L);\n       size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);\n       _RealType __sum = _RealType(0);\n       _RealType __tmp = _RealType(1);"}]}