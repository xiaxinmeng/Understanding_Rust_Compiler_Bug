{"sha": "e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjNDMzM2IxMWY3MmQwOWRkMmQxZDhkZjQ1MTgyYmJlZTkyZTcyZg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@mckinlay.net.nz", "date": "2003-09-29T07:13:40Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2003-09-29T07:13:40Z"}, "message": "boehm.cc (_Jv_BuildGCDescr): Put first word of object in most significant bit of descriptor.\n\n\t* boehm.cc (_Jv_BuildGCDescr): Put first word of object in most\n\tsignificant bit of descriptor. Include the vtable and sync_info\n\tfields.\n\nFrom-SVN: r71895", "tree": {"sha": "1397c42e60d3ad4a753c51532cfbbe1d9cbc64da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1397c42e60d3ad4a753c51532cfbbe1d9cbc64da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c4333b11f72d09dd2d1d8df45182bbee92e72f/comments", "author": null, "committer": null, "parents": [{"sha": "5560a945d8497667c898b73d3f4eea2f4ad016d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5560a945d8497667c898b73d3f4eea2f4ad016d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5560a945d8497667c898b73d3f4eea2f4ad016d8"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "88ed0594af0536641e38273e177c9d5ce33ab9d4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c4333b11f72d09dd2d1d8df45182bbee92e72f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c4333b11f72d09dd2d1d8df45182bbee92e72f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "patch": "@@ -1,3 +1,9 @@\n+2003-09-29  Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\t* boehm.cc (_Jv_BuildGCDescr): Put first word of object in most \n+\tsignificant bit of descriptor. Include the vtable and sync_info \n+\tfields.\n+\n 2003-09-28  Bryce McKinlay  <bryce@mckinlay.net.nz>\n \n \t* java/text/DateFormat.java (format): Throw IllegalArgumentException"}, {"sha": "af5f979197d3214f68422d21747dac9d06b32f25", "filename": "libjava/boehm.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c4333b11f72d09dd2d1d8df45182bbee92e72f/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c4333b11f72d09dd2d1d8df45182bbee92e72f/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=e7c4333b11f72d09dd2d1d8df45182bbee92e72f", "patch": "@@ -331,12 +331,20 @@ void *\n _Jv_BuildGCDescr(jclass self)\n {\n   jlong desc = 0;\n+  jint bits_per_word = CHAR_BIT * sizeof (void *);\n \n   // Note: for now we only consider a bitmap mark descriptor.  We\n   // could also handle the case where the first N fields of a type are\n   // references.  However, this is not very likely to be used by many\n   // classes, and it is easier to compute things this way.\n \n+  // The vtable pointer.\n+  desc |= 1ULL << (bits_per_word - 1);\n+#ifndef JV_HASH_SYNCHRONIZATION\n+  // The sync_info field.\n+  desc |= 1ULL << (bits_per_word - 2);\n+#endif\n+\n   for (jclass klass = self; klass != NULL; klass = klass->getSuperclass())\n     {\n       jfieldID field = JvGetFirstInstanceField(klass);\n@@ -351,13 +359,12 @@ _Jv_BuildGCDescr(jclass self)\n \t      if (off % sizeof (void *) != 0)\n \t\treturn (void *) (GCJ_DEFAULT_DESCR);\n \t      off /= sizeof (void *);\n-\t      // Bottom 2 bits are reserved.\n-\t      off += 2;\n \t      // If we find a field outside the range of our bitmap,\n-\t      // fall back to procedure marker.\n-\t      if (off > CHAR_BIT * sizeof (void *))\n+\t      // fall back to procedure marker. The bottom 2 bits are\n+\t      // reserved.\n+\t      if (off >= bits_per_word - 2)\n \t\treturn (void *) (GCJ_DEFAULT_DESCR);\n-\t      desc |= 1ULL << off;\n+\t      desc |= 1ULL << (bits_per_word - off - 1);\n \t    }\n \n \t  field = field->getNextField();"}]}