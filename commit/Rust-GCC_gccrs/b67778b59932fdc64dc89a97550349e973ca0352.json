{"sha": "b67778b59932fdc64dc89a97550349e973ca0352", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3Nzc4YjU5OTMyZmRjNjRkYzg5YTk3NTUwMzQ5ZTk3M2NhMDM1Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-21T08:08:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-21T08:08:44Z"}, "message": "varasm: Two SECTION_RETAIN fixes [PR100130]\n\nswitch_to_section warns if we try to output a retain decl in a\nsection without a retain flag, or if we try to output a non-retain\ndecl in a section with a retain flag.  However, the warning only\napplied if we were trying to \u201cswitch\u201d to the current section.\nThis works if all decls that use a section are generated consecutively,\nbut not if there is an unrelated decl in between.\n\nThis patch makes the check unconditional, but suppresses the warning\nif we're writing the section's named.decl (i.e. the decl from which\nthe section name and original flags were derived).\n\nAlso, the warning didn't fire for -fsection-anchors, for two reasons:\nwe allowed retain and non-retain decls to be put into the same block,\nand we didn't pass a decl to switch_to_section.\n\nAlthough these are arguably separate bugs, it isn't easy to fix them\nindependently without temporarily regressing -fsection-anchor targets.\n\ngcc/\n\tPR middle-end/100130\n\t* varasm.c (get_block_for_decl): Make sure that any use of the\n\tretain attribute matches the section's retain flag.\n\t(switch_to_section): Check for retain mismatches even when\n\tchanging sections, but do not warn if the given decl is the\n\tsection's named.decl.\n\t(output_object_block): Pass the first decl in the block (if any)\n\tto switch_to_section.\n\ngcc/testsuite/\n\tPR middle-end/100130\n\t* c-c++-common/attr-retain-10.c: New test.\n\t* c-c++-common/attr-retain-11.c: Likewise.", "tree": {"sha": "5d72991773b38f84f60f8f849481c986648a1212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d72991773b38f84f60f8f849481c986648a1212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b67778b59932fdc64dc89a97550349e973ca0352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67778b59932fdc64dc89a97550349e973ca0352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67778b59932fdc64dc89a97550349e973ca0352", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67778b59932fdc64dc89a97550349e973ca0352/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb60e56d4ac2958c422c003221ca0cff6a537e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb60e56d4ac2958c422c003221ca0cff6a537e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb60e56d4ac2958c422c003221ca0cff6a537e0b"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "0bac947023a4c734012125f3f74586e6fcd42a9a", "filename": "gcc/testsuite/c-c++-common/attr-retain-10.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-10.c?ref=b67778b59932fdc64dc89a97550349e973ca0352", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* powerpc*-*-aix* } } */\n+/* { dg-options \"-Wall -O2 -fno-toplevel-reorder\" } */\n+\n+int __attribute__((used,retain,section(\".data.foo\"))) foo2 = 2;\n+int between = 1;\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "d1d3d9e8c9f3c0f54080b17b57c4fd66599c4ffb", "filename": "gcc/testsuite/c-c++-common/attr-retain-11.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-11.c?ref=b67778b59932fdc64dc89a97550349e973ca0352", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* powerpc*-*-aix* } } */\n+/* { dg-options \"-Wall -O2 -fno-toplevel-reorder\" } */\n+\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+int between = 1;\n+int __attribute__((used,retain,section(\".data.foo\"))) foo2 = 2;\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "3ecf9e039bb95dda5a4fb73905b8bfa6deb911cb", "filename": "gcc/varasm.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67778b59932fdc64dc89a97550349e973ca0352/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b67778b59932fdc64dc89a97550349e973ca0352", "patch": "@@ -1314,6 +1314,10 @@ get_block_for_decl (tree decl)\n   if (SECTION_STYLE (sect) == SECTION_NOSWITCH)\n     return NULL;\n \n+  if (bool (lookup_attribute (\"retain\", DECL_ATTRIBUTES (decl)))\n+      != bool (sect->common.flags & SECTION_RETAIN))\n+    return NULL;\n+\n   return get_block_for_section (sect);\n }\n \n@@ -7758,43 +7762,43 @@ output_section_asm_op (const void *directive)\n void\n switch_to_section (section *new_section, tree decl)\n {\n-  if (in_section == new_section)\n+  bool retain_p;\n+  if ((new_section->common.flags & SECTION_NAMED)\n+      && decl != nullptr\n+      && DECL_P (decl)\n+      && ((retain_p = !!lookup_attribute (\"retain\",\n+\t\t\t\t\t  DECL_ATTRIBUTES (decl)))\n+\t  != !!(new_section->common.flags & SECTION_RETAIN)))\n     {\n-      bool retain_p;\n-      if ((new_section->common.flags & SECTION_NAMED)\n-\t  && decl != nullptr\n-\t  && DECL_P (decl)\n-\t  && ((retain_p = !!lookup_attribute (\"retain\",\n-\t\t\t\t\t      DECL_ATTRIBUTES (decl)))\n-\t      != !!(new_section->common.flags & SECTION_RETAIN)))\n-\t{\n-\t  /* If the SECTION_RETAIN bit doesn't match, switch to a new\n-\t     section.  */\n-\t  tree used_decl, no_used_decl;\n+      /* If the SECTION_RETAIN bit doesn't match, switch to a new\n+\t section.  */\n+      tree used_decl, no_used_decl;\n \n-\t  if (retain_p)\n-\t    {\n-\t      new_section->common.flags |= SECTION_RETAIN;\n-\t      used_decl = decl;\n-\t      no_used_decl = new_section->named.decl;\n-\t    }\n-\t  else\n-\t    {\n-\t      new_section->common.flags &= ~(SECTION_RETAIN\n-\t\t\t\t\t     | SECTION_DECLARED);\n-\t      used_decl = new_section->named.decl;\n-\t      no_used_decl = decl;\n-\t    }\n+      if (retain_p)\n+\t{\n+\t  new_section->common.flags |= SECTION_RETAIN;\n+\t  used_decl = decl;\n+\t  no_used_decl = new_section->named.decl;\n+\t}\n+      else\n+\t{\n+\t  new_section->common.flags &= ~(SECTION_RETAIN\n+\t\t\t\t\t | SECTION_DECLARED);\n+\t  used_decl = new_section->named.decl;\n+\t  no_used_decl = decl;\n+\t}\n+      if (no_used_decl != used_decl)\n+\t{\n \t  warning (OPT_Wattributes,\n \t\t   \"%+qD without %<retain%> attribute and %qD with \"\n \t\t   \"%<retain%> attribute are placed in a section with \"\n \t\t   \"the same name\", no_used_decl, used_decl);\n \t  inform (DECL_SOURCE_LOCATION (used_decl),\n \t\t  \"%qD was declared here\", used_decl);\n \t}\n-      else\n-\treturn;\n     }\n+  else if (in_section == new_section)\n+    return;\n \n   if (new_section->common.flags & SECTION_FORGET)\n     in_section = NULL;\n@@ -8007,7 +8011,7 @@ output_object_block (struct object_block *block)\n       && (strcmp (block->sect->named.name, \".vtable_map_vars\") == 0))\n     handle_vtv_comdat_section (block->sect, block->sect->named.decl);\n   else\n-    switch_to_section (block->sect);\n+    switch_to_section (block->sect, SYMBOL_REF_DECL ((*block->objects)[0]));\n \n   gcc_checking_assert (!(block->sect->common.flags & SECTION_MERGE));\n   assemble_align (block->alignment);"}]}