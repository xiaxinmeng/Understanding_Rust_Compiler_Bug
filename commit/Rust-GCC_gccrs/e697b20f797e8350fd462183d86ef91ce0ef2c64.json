{"sha": "e697b20f797e8350fd462183d86ef91ce0ef2c64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5N2IyMGY3OTdlODM1MGZkNDYyMTgzZDg2ZWY5MWNlMGVmMmM2NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-03-08T21:56:36Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-08T21:56:36Z"}, "message": "re PR middle-end/14289 (ICE in a register array)\n\n\n\tPR middle-end/14289\n\t* c-typeck.c (c_mark_addressable): A register variable should\n\tbe considered global if its not automatic, i.e. TREE_PUBLIC,\n\tTREE_STATIC or DECL_EXTERNAL.\n\t* function.c (put_var_into_stack): Call abort when placing a\n\thard register into the stack, if x_parm_reg_stack_loc is NULL.\n\n\t* gcc.dg/pr14289-1.c: New test case.\n\t* gcc.dg/pr14289-2.c: Likewise.\n\t* gcc.dg/pr14289-3.c: Likewise.\n\nFrom-SVN: r79127", "tree": {"sha": "93edd15f6d8a3af3c971d1499927e5190c015173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93edd15f6d8a3af3c971d1499927e5190c015173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e697b20f797e8350fd462183d86ef91ce0ef2c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e697b20f797e8350fd462183d86ef91ce0ef2c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e697b20f797e8350fd462183d86ef91ce0ef2c64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e697b20f797e8350fd462183d86ef91ce0ef2c64/comments", "author": null, "committer": null, "parents": [{"sha": "59f8a8be077b37d2933480dcada348104a00093f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f8a8be077b37d2933480dcada348104a00093f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f8a8be077b37d2933480dcada348104a00093f"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "8c7aae7e58dd32f1281d24ae373ce7dbd1a33b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -1,3 +1,12 @@\n+2004-03-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/14289\n+\t* c-typeck.c (c_mark_addressable): A register variable should\n+\tbe considered global if its not automatic, i.e. TREE_PUBLIC,\n+\tTREE_STATIC or DECL_EXTERNAL.\n+\t* function.c (put_var_into_stack): Call abort when placing a\n+\thard register into the stack, if x_parm_reg_stack_loc is NULL.\n+\n 2004-03-08  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"*extendqidi2_short_displ\"): Add CC clobber."}, {"sha": "15cb6def01c332d283949425d699e5fda787ecee", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -2603,7 +2603,7 @@ c_mark_addressable (tree exp)\n \tif (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x)\n \t    && DECL_NONLOCAL (x))\n \t  {\n-\t    if (TREE_PUBLIC (x))\n+\t    if (TREE_PUBLIC (x) || TREE_STATIC (x) || DECL_EXTERNAL (x))\n \t      {\n \t\terror (\"global register variable `%s' used in nested function\",\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n@@ -2614,7 +2614,7 @@ c_mark_addressable (tree exp)\n \t  }\n \telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n \t  {\n-\t    if (TREE_PUBLIC (x))\n+\t    if (TREE_PUBLIC (x) || TREE_STATIC (x) || DECL_EXTERNAL (x))\n \t      {\n \t\terror (\"address of global register variable `%s' requested\",\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));"}, {"sha": "4fffcd81b00adca8d2fb64179c3db8734554754b", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -1430,8 +1430,9 @@ put_var_into_stack (tree decl, int rescan)\n \n static void\n put_reg_into_stack (struct function *function, rtx reg, tree type,\n-\t\t    enum machine_mode promoted_mode, enum machine_mode decl_mode,\n-\t\t    int volatile_p, unsigned int original_regno, int used_p, htab_t ht)\n+\t\t    enum machine_mode promoted_mode,\n+\t\t    enum machine_mode decl_mode, int volatile_p,\n+\t\t    unsigned int original_regno, int used_p, htab_t ht)\n {\n   struct function *func = function ? function : cfun;\n   rtx new = 0;\n@@ -1441,7 +1442,11 @@ put_reg_into_stack (struct function *function, rtx reg, tree type,\n     regno = REGNO (reg);\n \n   if (regno < func->x_max_parm_reg)\n-    new = func->x_parm_reg_stack_loc[regno];\n+    {\n+      if (!func->x_parm_reg_stack_loc)\n+\tabort ();\n+      new = func->x_parm_reg_stack_loc[regno];\n+    }\n \n   if (new == 0)\n     new = assign_stack_local_1 (decl_mode, GET_MODE_SIZE (decl_mode), 0, func);"}, {"sha": "f0193f0c67bc6acf286ab28df2fe2480d32d3c23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -1,3 +1,10 @@\n+2004-03-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/14289\n+\t* gcc.dg/pr14289-1.c: New test case.\n+\t* gcc.dg/pr14289-2.c: Likewise.\n+\t* gcc.dg/pr14289-3.c: Likewise.\n+\n 2004-03-08  Eric Botcazou  <ebotcazou@act-europe.fr>\n \n \t* gcc.c-torture/execute/20040308-1.c: New test."}, {"sha": "652916325c21e648aa80f31f370363aaaa3a776d", "filename": "gcc/testsuite/gcc.dg/pr14289-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-1.c?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/14289 */\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O0\" } */\n+\n+register int a[2] asm(\"ebx\");\n+\n+void Nase(void)\n+{\n+  int i=6;\n+  a[i]=5;  /* { dg-error \"address of global\" } */\n+}\n+"}, {"sha": "7530b468caca87059130872b6208cbdefd3a6cfa", "filename": "gcc/testsuite/gcc.dg/pr14289-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/14289 */\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O0\" } */\n+\n+static register int a[2] asm(\"ebx\");  /* { dg-error \"multiple storage\" } */\n+\n+void Nase(void)\n+{\n+  int i=6;\n+  a[i]=5;  /* { dg-error \"address of global\" } */\n+}\n+"}, {"sha": "7cfbf78ce0508dc749ac430e7d3fced07e6ad024", "filename": "gcc/testsuite/gcc.dg/pr14289-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e697b20f797e8350fd462183d86ef91ce0ef2c64/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c?ref=e697b20f797e8350fd462183d86ef91ce0ef2c64", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/14289 */\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O0\" } */\n+\n+extern register int a[2] asm(\"ebx\");  /* { dg-error \"multiple storage\" } */\n+\n+void Nase(void)\n+{\n+  int i=6;\n+  a[i]=5;  /* { dg-error \"address of global\" } */\n+}\n+"}]}