{"sha": "e90c7b8433d23ac0d385e104d67f8a7c458dced0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYzdiODQzM2QyM2FjMGQzODVlMTA0ZDY3ZjhhN2M0NThkY2VkMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-11T20:33:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-11T20:33:35Z"}, "message": "re PR c++/3478 (Accepts invalid \"enum typename\")\n\n\tPR c++/3478\n\t* parser.c (cp_parser_decl_specifier_seq): If the first decl_spec\n\tis error_mark_node, don't add any more decl_specs.\n\t(cp_parser_init_declarator): After committing to a declaration, if\n\tthe decl_specifiers start with error_mark_node, issue an error and\n\tchange the type to \"int\".\n\nFrom-SVN: r75688", "tree": {"sha": "7162d93bf8ecdf6e43e1a396f1e68ea82f4cac8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7162d93bf8ecdf6e43e1a396f1e68ea82f4cac8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90c7b8433d23ac0d385e104d67f8a7c458dced0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90c7b8433d23ac0d385e104d67f8a7c458dced0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90c7b8433d23ac0d385e104d67f8a7c458dced0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90c7b8433d23ac0d385e104d67f8a7c458dced0/comments", "author": null, "committer": null, "parents": [{"sha": "b4544c366abe2b38430cd70c0954ebeaaab8c401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4544c366abe2b38430cd70c0954ebeaaab8c401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4544c366abe2b38430cd70c0954ebeaaab8c401"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "2d100c8cab2a399b9b9baec4f82965213b9c0b66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c7b8433d23ac0d385e104d67f8a7c458dced0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c7b8433d23ac0d385e104d67f8a7c458dced0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e90c7b8433d23ac0d385e104d67f8a7c458dced0", "patch": "@@ -1,3 +1,12 @@\n+2004-01-11  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\tPR c++/3478\n+\t* parser.c (cp_parser_decl_specifier_seq): If the first decl_spec\n+\tis error_mark_node, don't add any more decl_specs.\n+\t(cp_parser_init_declarator): After committing to a declaration, if\n+\tthe decl_specifiers start with error_mark_node, issue an error and\n+\tchange the type to \"int\".\n+\n 2004-01-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \tPR bootstrap/7817"}, {"sha": "2f5c9d91d74d524530d08889c3e66b16cb293529", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c7b8433d23ac0d385e104d67f8a7c458dced0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c7b8433d23ac0d385e104d67f8a7c458dced0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e90c7b8433d23ac0d385e104d67f8a7c458dced0", "patch": "@@ -6717,7 +6717,8 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t}\n \n       /* Add the DECL_SPEC to the list of specifiers.  */\n-      decl_specs = tree_cons (NULL_TREE, decl_spec, decl_specs);\n+      if (decl_specs == NULL || TREE_VALUE (decl_specs) != error_mark_node)\n+\tdecl_specs = tree_cons (NULL_TREE, decl_spec, decl_specs);\n \n       /* After we see one decl-specifier, further decl-specifiers are\n \t always optional.  */\n@@ -9818,6 +9819,17 @@ cp_parser_init_declarator (cp_parser* parser,\n      possibly be looking at any other construct.  */\n   cp_parser_commit_to_tentative_parse (parser);\n \n+  /* If the decl specifiers were bad, issue an error now that we're\n+     sure this was intended to be a declarator.  Then continue\n+     declaring the variable(s), as int, to try to cut down on further\n+     errors.  */\n+  if (decl_specifiers != NULL\n+      && TREE_VALUE (decl_specifiers) == error_mark_node)\n+    {\n+      cp_parser_error (parser, \"invalid type in declaration\");\n+      TREE_VALUE (decl_specifiers) = integer_type_node;\n+    }\n+\n   /* Check to see whether or not this declaration is a friend.  */\n   friend_p = cp_parser_friend_p (decl_specifiers);\n "}]}