{"sha": "09f8fc7fd0d1062b609721d281d726b3ec42345d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmOGZjN2ZkMGQxMDYyYjYwOTcyMWQyODFkNzI2YjNlYzQyMzQ1ZA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:50:39Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:50:39Z"}, "message": "vqshl.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: New file.\n\nFrom-SVN: r223381", "tree": {"sha": "2f48a1f4a9ff7c997100b6eaa2ee4fbf07adda28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f48a1f4a9ff7c997100b6eaa2ee4fbf07adda28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09f8fc7fd0d1062b609721d281d726b3ec42345d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f8fc7fd0d1062b609721d281d726b3ec42345d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f8fc7fd0d1062b609721d281d726b3ec42345d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f8fc7fd0d1062b609721d281d726b3ec42345d/comments", "author": null, "committer": null, "parents": [{"sha": "fd2069df51ad19ab9f19aeeae0df0b8e779c73ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2069df51ad19ab9f19aeeae0df0b8e779c73ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2069df51ad19ab9f19aeeae0df0b8e779c73ef"}], "stats": {"total": 833, "additions": 833, "deletions": 0}, "files": [{"sha": "2e8aa8844f747d3850673b73faa63a6762201a41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f8fc7fd0d1062b609721d281d726b3ec42345d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f8fc7fd0d1062b609721d281d726b3ec42345d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09f8fc7fd0d1062b609721d281d726b3ec42345d", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrshrun_n.c: New file."}, {"sha": "a1cccc2df28f40efdb0f5ea746ff8d5c32d95c12", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshl.c", "status": "added", "additions": 829, "deletions": 0, "changes": 829, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f8fc7fd0d1062b609721d281d726b3ec42345d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f8fc7fd0d1062b609721d281d726b3ec42345d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c?ref=09f8fc7fd0d1062b609721d281d726b3ec42345d", "patch": "@@ -0,0 +1,829 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag with input=0.  */\n+int VECT_VAR(expected_cumulative_sat_0,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,64,2) = 0;\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag with input=0 and\n+   negative shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,2) = 0;\n+\n+/* Expected results with input=0 and negative shift amount.  */\n+VECT_VAR_DECL(expected_0_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n+\t\t\t\t       0xe8, 0xea, 0xec, 0xee };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xff80, 0xff88, 0xff90, 0xff98 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffff000, 0xfffff100 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffffe };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x1ffffffffffffffe };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x8000, 0x8000, 0x8000, 0x8000,\n+\t\t\t\t\t0x8000, 0x8000, 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t0x8000000000000000 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t 0xffffffffffffffff };\n+\n+/* Expected values of cumulative_sat_saturation flag with negative shift\n+   amount.  */\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,64,2) = 0;\n+\n+/* Expected results with negative shift amount.  */\n+VECT_VAR_DECL(expected_neg,int,8,8) [] = { 0xf8, 0xf8, 0xf9, 0xf9,\n+\t\t\t\t\t   0xfa, 0xfa, 0xfb, 0xfb };\n+VECT_VAR_DECL(expected_neg,int,16,4) [] = { 0xfffc, 0xfffc, 0xfffc, 0xfffc };\n+VECT_VAR_DECL(expected_neg,int,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected_neg,int,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x78, 0x78, 0x79, 0x79,\n+\t\t\t\t\t    0x7a, 0x7a, 0x7b, 0x7b };\n+VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x3ffc, 0x3ffc, 0x3ffc, 0x3ffc };\n+VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x1ffffffe, 0x1ffffffe };\n+VECT_VAR_DECL(expected_neg,uint,64,1) [] = { 0xfffffffffffffff };\n+VECT_VAR_DECL(expected_neg,int,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_neg,int,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t    0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_neg,int,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t    0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_neg,int,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t    0xffffffffffffffff };\n+VECT_VAR_DECL(expected_neg,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t     0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t     0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t     0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0x1f, 0x1f, 0x1f, 0x1f,\n+\t\t\t\t\t     0x1f, 0x1f, 0x1f, 0x1f };\n+VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x7ffff, 0x7ffff,\n+\t\t\t\t\t     0x7ffff, 0x7ffff };\n+VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0xfffffffffff, 0xfffffffffff };\n+\n+/* Expected values of cumulative_sat_saturation flag with negative\n+   input and large shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large,uint,64,2) = 1;\n+\n+/* Expected results with negative input and large shift amount.  */\n+VECT_VAR_DECL(expected_neg_large,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_neg_large,int,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_neg_large,int,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_neg_large,int,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_neg_large,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_neg_large,uint,16,4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL(expected_neg_large,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_neg_large,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_neg_large,int,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_neg_large,int,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_neg_large,int,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t  0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_neg_large,int,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t  0x8000000000000000 };\n+VECT_VAR_DECL(expected_neg_large,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_neg_large,uint,16,8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL(expected_neg_large,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t   0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_neg_large,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t\t   0xffffffffffffffff };\n+\n+/* Expected values of cumulative_sat_saturation flag with max input\n+   and shift by -1.  */\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_max_minus1,uint,64,2) = 0;\n+\n+/* Expected results with max input and shift by -1.  */\n+VECT_VAR_DECL(expected_max_minus1,int,8,8) [] = { 0x3f, 0x3f, 0x3f, 0x3f,\n+\t\t\t\t\t\t  0x3f, 0x3f, 0x3f, 0x3f };\n+VECT_VAR_DECL(expected_max_minus1,int,16,4) [] = { 0x3fff, 0x3fff,\n+\t\t\t\t\t\t   0x3fff, 0x3fff };\n+VECT_VAR_DECL(expected_max_minus1,int,32,2) [] = { 0x3fffffff, 0x3fffffff };\n+VECT_VAR_DECL(expected_max_minus1,int,64,1) [] = { 0x3fffffffffffffff };\n+VECT_VAR_DECL(expected_max_minus1,uint,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_minus1,uint,16,4) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t    0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_minus1,uint,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_minus1,uint,64,1) [] = { 0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_max_minus1,int,8,16) [] = { 0x3f, 0x3f, 0x3f, 0x3f,\n+\t\t\t\t\t\t   0x3f, 0x3f, 0x3f, 0x3f,\n+\t\t\t\t\t\t   0x3f, 0x3f, 0x3f, 0x3f,\n+\t\t\t\t\t\t   0x3f, 0x3f, 0x3f, 0x3f };\n+VECT_VAR_DECL(expected_max_minus1,int,16,8) [] = { 0x3fff, 0x3fff,\n+\t\t\t\t\t\t   0x3fff, 0x3fff,\n+\t\t\t\t\t\t   0x3fff, 0x3fff,\n+\t\t\t\t\t\t   0x3fff, 0x3fff };\n+VECT_VAR_DECL(expected_max_minus1,int,32,4) [] = { 0x3fffffff, 0x3fffffff,\n+\t\t\t\t\t\t   0x3fffffff, 0x3fffffff };\n+VECT_VAR_DECL(expected_max_minus1,int,64,2) [] = { 0x3fffffffffffffff,\n+\t\t\t\t\t\t   0x3fffffffffffffff };\n+VECT_VAR_DECL(expected_max_minus1,uint,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_minus1,uint,16,8) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t    0x7fff, 0x7fff,\n+\t\t\t\t\t\t    0x7fff, 0x7fff,\n+\t\t\t\t\t\t    0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_minus1,uint,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t    0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_minus1,uint,64,2) [] = { 0x7fffffffffffffff,\n+\t\t\t\t\t\t    0x7fffffffffffffff };\n+\n+/* Expected values of cumulative_sat_saturation flag with max input\n+   and large shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_max_large,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_large,uint,64,2) = 1;\n+\n+/* Expected results with max input and large shift amount.  */\n+VECT_VAR_DECL(expected_max_large,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_large,int,16,4) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_large,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_large,int,64,1) [] = { 0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_max_large,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_large,uint,16,4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_large,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_max_large,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_max_large,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_large,int,16,8) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_large,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_large,int,64,2) [] = { 0x7fffffffffffffff,\n+\t\t\t\t\t\t0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_max_large,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_large,uint,16,8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_large,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_max_large,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t\t 0xffffffffffffffff };\n+\n+/* Expected values of cumulative_sat_saturation flag with saturation\n+   on 64-bits values.  */\n+int VECT_VAR(expected_cumulative_sat_64,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_64,int,64,2) = 1;\n+\n+/* Expected results with saturation on 64-bits values..  */\n+VECT_VAR_DECL(expected_64,int,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_64,int,64,2) [] = { 0x7fffffffffffffff,\n+\t\t\t\t\t   0x7fffffffffffffff };\n+\n+#define INSN vqshl\n+#define TEST_MSG \"VQSHL/VQSHLQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: v3=vqshl(v1,v2), then store the result.  */\n+#define TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector_shift, T3, W, N));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQSHL(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  DECL_VARIABLE_SIGNED_VARIANTS(vector_shift);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with 0, to check saturation on limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , int, s, 64, 1, 0);\n+  VDUP(vector, , uint, u, 8, 8, 0);\n+  VDUP(vector, , uint, u, 16, 4, 0);\n+  VDUP(vector, , uint, u, 32, 2, 0);\n+  VDUP(vector, , uint, u, 64, 1, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount */\n+  /* Use values equal or one-less-than the type width to check\n+     behaviour on limits.  */\n+\n+  /* 64-bits vectors first.  */\n+  /* Shift 8-bits lanes by 7...  */\n+  VDUP(vector_shift, , int, s, 8, 8, 7);\n+  /* ... except: lane 0 (by 6), lane 1 (by 8) and lane 2 (by 9).  */\n+  VSET_LANE(vector_shift, , int, s, 8, 8, 0, 6);\n+  VSET_LANE(vector_shift, , int, s, 8, 8, 1, 8);\n+  VSET_LANE(vector_shift, , int, s, 8, 8, 2, 9);\n+\n+  /* Shift 16-bits lanes by 15... */\n+  VDUP(vector_shift, , int, s, 16, 4, 15);\n+  /* ... except: lane 0 (by 14), lane 1 (by 16), and lane 2 (by 17).  */\n+  VSET_LANE(vector_shift, , int, s, 16, 4, 0, 14);\n+  VSET_LANE(vector_shift, , int, s, 16, 4, 1, 16);\n+  VSET_LANE(vector_shift, , int, s, 16, 4, 2, 17);\n+\n+  /* Shift 32-bits lanes by 31... */\n+  VDUP(vector_shift, , int, s, 32, 2, 31);\n+  /* ... except lane 1 (by 30).  */\n+  VSET_LANE(vector_shift, , int, s, 32, 2, 1, 30);\n+\n+  /* Shift 64 bits lane by 63.  */\n+  VDUP(vector_shift, , int, s, 64, 1, 63);\n+\n+  /* 128-bits vectors.  */\n+  /* Shift 8-bits lanes by 8.  */\n+  VDUP(vector_shift, q, int, s, 8, 16, 8);\n+  /* Shift 16-bits lanes by 16.  */\n+  VDUP(vector_shift, q, int, s, 16, 8, 16);\n+  /* Shift 32-bits lanes by 32...  */\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  /* ... except lane 1 (by 33).  */\n+  VSET_LANE(vector_shift, q, int, s, 32, 4, 1, 33);\n+\n+  /* Shift 64-bits lanes by 64... */\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+  /* ... except lane 1 (by 62).  */\n+  VSET_LANE(vector_shift, q, int, s, 64, 2, 1, 62);\n+\n+#define CMT \" (with input = 0)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0, CMT);\n+\n+\n+  /* Use negative shift amounts */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+#undef CMT\n+#define CMT \" (input 0 and negative shift amount)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0_neg, CMT);\n+\n+  /* Test again, with predefined input values.  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 1);\n+  VDUP(vector_shift, , int, s, 16, 4, 3);\n+  VDUP(vector_shift, , int, s, 32, 2, 8);\n+  VDUP(vector_shift, , int, s, 64, 1, -3);\n+  VDUP(vector_shift, q, int, s, 8, 16, 10);\n+  VDUP(vector_shift, q, int, s, 16, 8, 12);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 63);\n+\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Use negative shift amounts */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+#undef CMT\n+#define CMT \" (negative shift amount)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_neg, CMT);\n+\n+\n+  /* Use large shift amounts.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 8);\n+  VDUP(vector_shift, , int, s, 16, 4, 16);\n+  VDUP(vector_shift, , int, s, 32, 2, 32);\n+  VDUP(vector_shift, , int, s, 64, 1, 64);\n+  VDUP(vector_shift, q, int, s, 8, 16, 8);\n+  VDUP(vector_shift, q, int, s, 16, 8, 16);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (large shift amount, negative input)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg_large, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_neg_large, CMT);\n+\n+\n+  /* Fill input vector with max value, to check saturation on limits */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+  /* Shift by -1 */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -1);\n+  VDUP(vector_shift, , int, s, 32, 2, -1);\n+  VDUP(vector_shift, , int, s, 64, 1, -1);\n+  VDUP(vector_shift, q, int, s, 8, 16, -1);\n+  VDUP(vector_shift, q, int, s, 16, 8, -1);\n+  VDUP(vector_shift, q, int, s, 32, 4, -1);\n+  VDUP(vector_shift, q, int, s, 64, 2, -1);\n+\n+#undef CMT\n+#define CMT \" (max input, shift by -1)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_max_minus1, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_minus1, CMT);\n+\n+\n+  /* Use large shift amounts */\n+  VDUP(vector_shift, , int, s, 8, 8, 8);\n+  VDUP(vector_shift, , int, s, 16, 4, 16);\n+  VDUP(vector_shift, , int, s, 32, 2, 32);\n+  VDUP(vector_shift, , int, s, 64, 1, 64);\n+  VDUP(vector_shift, q, int, s, 8, 16, 8);\n+  VDUP(vector_shift, q, int, s, 16, 8, 16);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (max input, large shift amount)\"\n+  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_max_large, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_large, CMT);\n+\n+\n+  /* Check 64 bits saturation.  */\n+  VDUP(vector, , int, s, 64, 1, -10);\n+  VDUP(vector_shift, , int, s, 64, 1, 64);\n+  VDUP(vector, q, int, s, 64, 2, 10);\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (check saturation on 64 bits)\"\n+  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_64, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_64, CMT);\n+\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_64, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshl ();\n+  return 0;\n+}"}]}