{"sha": "8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2ZWFiMzQzYWRlZjkyZjhkMjBhNGE1OWJhZmRmYThlMGI2N2U1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-02T11:56:54Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-02T11:56:54Z"}, "message": "re PR c/81448 (False positive -Werror=multistatement-macros in openssl)\n\n\tPR c/81448\n\tPR c/81306\n\t* c-warn.c (warn_for_multistatement_macros): Prevent bogus\n\twarnings.  Avoid walking MACRO_MAP_LOCATIONS.\t\t\t\t\t\t     \n\n\t* c-c++-common/Wmultistatement-macros-13.c: New test.\n\nFrom-SVN: r250822", "tree": {"sha": "cfafb2d10eb8c86e97e52f603c8e27ed8f95ee15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfafb2d10eb8c86e97e52f603c8e27ed8f95ee15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7b6353a7ff5edd28bda30480e304bc02cc05432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b6353a7ff5edd28bda30480e304bc02cc05432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b6353a7ff5edd28bda30480e304bc02cc05432"}], "stats": {"total": 165, "additions": 144, "deletions": 21}, "files": [{"sha": "e970ab2a00d200efaacf50529d93cc418b032bfb", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "patch": "@@ -2457,34 +2457,44 @@ warn_for_multistatement_macros (location_t body_loc, location_t next_loc,\n       || body_loc_exp == next_loc_exp)\n     return;\n \n-  /* Find the macro map for the macro expansion BODY_LOC.  */\n-  const line_map *map = linemap_lookup (line_table, body_loc);\n-  const line_map_macro *macro_map = linemap_check_macro (map);\n-\n-  /* Now see if the following token is coming from the same macro\n-     expansion.  If it is, it's a problem, because it should've been\n-     parsed at this point.  We only look at odd-numbered indexes\n-     within the MACRO_MAP_LOCATIONS array, i.e. the spelling locations\n-     of the tokens.  */\n-  bool found_guard = false;\n-  bool found_next = false;\n-  for (unsigned int i = 1;\n-       i < 2 * MACRO_MAP_NUM_MACRO_TOKENS (macro_map);\n-       i += 2)\n-    {\n-      if (MACRO_MAP_LOCATIONS (macro_map)[i] == next_loc_exp)\n-\tfound_next = true;\n-      if (MACRO_MAP_LOCATIONS (macro_map)[i] == guard_loc_exp)\n-\tfound_guard = true;\n-    }\n+  /* Find the macro maps for the macro expansions.  */\n+  const line_map *body_map = linemap_lookup (line_table, body_loc);\n+  const line_map *next_map = linemap_lookup (line_table, next_loc);\n+  const line_map *guard_map = linemap_lookup (line_table, guard_loc);\n+\n+  /* Now see if the following token (after the body) is coming from the\n+     same macro expansion.  If it is, it might be a problem.  */\n+  if (body_map != next_map)\n+    return;\n \n   /* The conditional itself must not come from the same expansion, because\n      we don't want to warn about\n      #define IF if (x) x++; y++\n      and similar.  */\n-  if (!found_next || found_guard)\n+  if (guard_map == body_map)\n     return;\n \n+  /* Handle the case where NEXT and BODY come from the same expansion while\n+     GUARD doesn't, yet we shouldn't warn.  E.g.\n+\n+       #define GUARD if (...)\n+       #define GUARD2 GUARD\n+\n+     and in the definition of another macro:\n+\n+       GUARD2\n+\tfoo ();\n+       return 1;\n+   */\n+  while (linemap_macro_expansion_map_p (guard_map))\n+    {\n+      const line_map_macro *mm = linemap_check_macro (guard_map);\n+      guard_loc_exp = MACRO_MAP_EXPANSION_POINT_LOCATION (mm);\n+      guard_map = linemap_lookup (line_table, guard_loc_exp);\n+      if (guard_map == body_map)\n+\treturn;\n+    }\n+\n   if (warning_at (body_loc, OPT_Wmultistatement_macros,\n \t\t  \"macro expands to multiple statements\"))\n     inform (guard_loc, \"some parts of macro expansion are not guarded by \""}, {"sha": "6c7b585fb83032c1308c43fbb87c149d781209fd", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "patch": "@@ -3,6 +3,11 @@\n \tPR c/81289\n \t* c-parser.c (c_parser_unary_expression): Use set_error.\n \n+\tPR c/81448\n+\tPR c/81306\n+\t* c-warn.c (warn_for_multistatement_macros): Prevent bogus\n+\twarnings.  Avoid walking MACRO_MAP_LOCATIONS.\n+\n 2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "9730b0cafa6d0bbc40f54a554744b43cf2d384f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "patch": "@@ -3,6 +3,10 @@\n \tPR c/81289\n \t* gcc.dg/noncompile/pr81289.c: New test.\n \n+\tPR c/81448\n+\tPR c/81306\n+\t* c-c++-common/Wmultistatement-macros-13.c: New test.\n+\n 2017-08-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/81640"}, {"sha": "9f42e268d9f11b507ff1557b006aafc81532839d", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-13.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6eab343adef92f8d20a4a59bafdfa8e0b67e55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-13.c?ref=8a6eab343adef92f8d20a4a59bafdfa8e0b67e55", "patch": "@@ -0,0 +1,104 @@\n+/* PR c/81448 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+\n+extern int i;\n+\n+#define BAD4 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define BAD5 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define BAD6 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define BAD7 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define BAD8 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define BAD9 i++; i++ /* { dg-warning \"macro expands to multiple statements\" } */\n+#define IF if (1) /* { dg-message \"not guarded by this 'if' clause\" } */\n+#define IF2 IF /* { dg-message \"in expansion of macro .IF.\" } */\n+#define BADB7 BAD7 /* { dg-message \"in expansion of macro .BAD7.\" } */\n+#define BADB8 BAD8 /* { dg-message \"in expansion of macro .BAD8.\" } */\n+#define BADB9 BAD9 /* { dg-message \"in expansion of macro .BAD9.\" } */\n+\n+#define FN0\t\t\t\t\\\n+void fn0 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF\t\t\t\t\t\\\n+    i++;\t\t\t\t\\\n+  return;\t\t\t\t\\\n+}\n+\n+#define FN1\t\t\t\t\\\n+void fn1 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF2\t\t\t\t\t\\\n+    i++;\t\t\t\t\\\n+  return;\t\t\t\t\\\n+}\n+\n+#define FN2\t\t\t\t\\\n+void fn2 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  if (1)\t\t\t\t\\\n+    i++;\t\t\t\t\\\n+  return;\t\t\t\t\\\n+}\n+\n+#define TOP FN3\n+#define FN3\t\t\t\t\\\n+void fn3 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF\t\t\t\t\t\\\n+    i++;\t\t\t\t\\\n+  return;\t\t\t\t\\\n+}\n+\n+#define TOP2 FN4 /* { dg-message \"in expansion of macro .FN4.\" } */\n+#define FN4\t\t\t\t\\\n+void fn4 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF2 /* { dg-message \"in expansion of macro .IF2.\" } */ \\\n+    BAD4; /* { dg-message \"in expansion of macro .BAD4.\" } */ \\\n+}\n+\n+#define FN5\t\t\t\t\\\n+void fn5 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF /* { dg-message \"in expansion of macro .IF.\" } */\t\\\n+    BAD5; /* { dg-message \"in expansion of macro .BAD5.\" } */ \\\n+}\n+\n+#define FN6\t\t\t\t\\\n+void fn6 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  if (1) /* { dg-message \"not guarded by this 'if' clause\" } */ \\\n+    BAD6; /* { dg-message \"in expansion of macro .BAD6.\" } */ \\\n+}\n+\n+#define FN7\t\t\t\t\\\n+void fn7 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  if (1) /* { dg-message \"not guarded by this 'if' clause\" } */\t\\\n+    BADB7; /* { dg-message \"in expansion of macro .BADB7.\" } */ \\\n+}\n+\n+#define FN8\t\t\t\t\\\n+void fn8 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF2 /* { dg-message \"in expansion of macro .IF2.\" } */ \\\n+    BADB8; /* { dg-message \"in expansion of macro .BADB8.\" } */ \\\n+}\n+\n+#define FN9\t\t\t\t\\\n+void fn9 (void)\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  IF /* { dg-message \"in expansion of macro .IF.\" } */ \\\n+    BADB9; /* { dg-message \"in expansion of macro .BADB9.\" } */\t\\\n+}\n+\n+FN0\n+FN1\n+FN2\n+TOP\n+TOP2 /* { dg-message \"in expansion of macro .TOP2.\" } */\n+FN5 /* { dg-message \"in expansion of macro .FN5.\" } */\n+FN6 /* { dg-message \"in expansion of macro .FN6.\" } */\n+FN7 /* { dg-message \"in expansion of macro .FN7.\" } */\n+FN8 /* { dg-message \"in expansion of macro .FN8.\" } */\n+FN9 /* { dg-message \"in expansion of macro .FN9.\" } */"}]}