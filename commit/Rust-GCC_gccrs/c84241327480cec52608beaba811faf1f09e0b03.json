{"sha": "c84241327480cec52608beaba811faf1f09e0b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0MjQxMzI3NDgwY2VjNTI2MDhiZWFiYTgxMWZhZjFmMDllMGIwMw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-09-04T21:24:31Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-09-04T21:24:31Z"}, "message": "mips.h (ISA_HAS_EXTS): New macro.\n\n\t* config/mips/mips.h (ISA_HAS_EXTS): New macro.\n\t* config/mips/mips.md (*ashr_trunc<mode>): Name the pattern\n\tcombining an arithmetic right shift by more than 31 and a\n\ttrunction.  Don't match for out-of-range shift amounts.  Set\n\tattribute mode to <MODE>.\n\t(*lshr32_trunc<mode>): Name the pattern combining a logical right\n\tshift by 32 and and a truncation.  Set attribute mode to <MODE>.\n\t(*<optab>_trunc<mode>_exts): New pattern for truncated right\n\tshifts by less than 32.\n\t(extv): Change predicate on first operand to accept registers.\n\tChange predicate of the other operands from immediate_operand to\n\tconst_int_operand.  Expand exts when source is a register.\n\t(extzv): Change predicate of the constant operands from\n\timmediate_operand to const_int_operand.\n\t(extzv<mode>): Change predicate of the constant operands from\n\timmediate_operand to const_int_operand and no constraint. Also\n\tremove mode.\n\t(*extzv_trunc<mode>_exts): New pattern.\n\ntestsuite/\n\t* gcc.target/mips/truncate-2.c: New test.\n\t* gcc.target/mips/octeon-exts-1.c: New test.\n\t* gcc.target/mips/octeon-exts-2.c: New test.\n\t* gcc.target/mips/octeon-exts-3.c: New test.\n\t* gcc.target/mips/octeon-exts-4.c: New test.\n\nFrom-SVN: r140009", "tree": {"sha": "dc0bd06f267d1ef48787f27859cb224f630704eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0bd06f267d1ef48787f27859cb224f630704eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c84241327480cec52608beaba811faf1f09e0b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84241327480cec52608beaba811faf1f09e0b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84241327480cec52608beaba811faf1f09e0b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84241327480cec52608beaba811faf1f09e0b03/comments", "author": null, "committer": null, "parents": [{"sha": "49912bcd97ec640f130fcf1551ea472d50f06f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49912bcd97ec640f130fcf1551ea472d50f06f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49912bcd97ec640f130fcf1551ea472d50f06f53"}], "stats": {"total": 232, "additions": 220, "deletions": 12}, "files": [{"sha": "d035a4bfdff52844bd4275a683753cbb77a46d3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -1,3 +1,24 @@\n+2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_EXTS): New macro.\n+\t* config/mips/mips.md (*ashr_trunc<mode>): Name the pattern\n+\tcombining an arithmetic right shift by more than 31 and a\n+\ttrunction.  Don't match for out-of-range shift amounts.  Set\n+\tattribute mode to <MODE>.\n+\t(*lshr32_trunc<mode>): Name the pattern combining a logical right\n+\tshift by 32 and and a truncation.  Set attribute mode to <MODE>.\n+\t(*<optab>_trunc<mode>_exts): New pattern for truncated right\n+\tshifts by less than 32.\n+\t(extv): Change predicate on first operand to accept registers.\n+\tChange predicate of the other operands from immediate_operand to\n+\tconst_int_operand.  Expand exts when source is a register.\n+\t(extzv): Change predicate of the constant operands from\n+\timmediate_operand to const_int_operand.\n+\t(extzv<mode>): Change predicate of the constant operands from\n+\timmediate_operand to const_int_operand and no constraint. Also\n+\tremove mode.\n+\t(*extzv_trunc<mode>_exts): New pattern.\n+\n 2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.h (ISA_HAS_CINS): New macro."}, {"sha": "46775464470caa78cab1e12d73e9fa8b71f18f8e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -1012,6 +1012,9 @@ enum mips_code_readable_setting {\n /* ISA includes the cins instruction.  */\n #define ISA_HAS_CINS\t\tTARGET_OCTEON\n \n+/* ISA includes the exts instruction.  */\n+#define ISA_HAS_EXTS\t\tTARGET_OCTEON\n+\n /* ISA includes the pop instruction.  */\n #define ISA_HAS_POP\t\tTARGET_OCTEON\n \f"}, {"sha": "0f478cf558fa15d85f577fa45438aa4e0aa7e00b", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -772,6 +772,10 @@\n ;; to use the same template.\n (define_code_iterator any_extend [sign_extend zero_extend])\n \n+;; This code iterator allows the two right shift instructions to be\n+;; generated from the same template.\n+(define_code_iterator any_shiftrt [ashiftrt lshiftrt])\n+\n ;; This code iterator allows the three shift instructions to be generated\n ;; from the same template.\n (define_code_iterator any_shift [ashift ashiftrt lshiftrt])\n@@ -2683,26 +2687,37 @@\n \n ;; Combiner patterns to optimize shift/truncate combinations.\n \n-(define_insn \"\"\n+(define_insn \"*ashr_trunc<mode>\"\n   [(set (match_operand:SUBDI 0 \"register_operand\" \"=d\")\n         (truncate:SUBDI\n \t  (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t       (match_operand:DI 2 \"const_arith_operand\" \"\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16 && INTVAL (operands[2]) >= 32\"\n+  \"TARGET_64BIT && !TARGET_MIPS16 && IN_RANGE (INTVAL (operands[2]), 32, 63)\"\n   \"dsra\\t%0,%1,%2\"\n   [(set_attr \"type\" \"shift\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"\"\n+(define_insn \"*lshr32_trunc<mode>\"\n   [(set (match_operand:SUBDI 0 \"register_operand\" \"=d\")\n         (truncate:SUBDI\n \t  (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t       (const_int 32))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"dsra\\t%0,%1,32\"\n   [(set_attr \"type\" \"shift\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n+;; Logical shift by 32 or more results in proper SI values so\n+;; truncation is removed by the middle end.\n+(define_insn \"*<optab>_trunc<mode>_exts\"\n+  [(set (match_operand:SUBDI 0 \"register_operand\" \"=d\")\n+        (truncate:SUBDI\n+\t (any_shiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t (match_operand:DI 2 \"const_arith_operand\" \"\"))))]\n+  \"ISA_HAS_EXTS && TARGET_64BIT && UINTVAL (operands[2]) < 32\"\n+  \"exts\\t%0,%1,%2,31\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Combiner patterns for truncate/sign_extend combinations.  The SI versions\n ;; use the shift/truncate patterns above.\n@@ -3353,24 +3368,46 @@\n \n (define_expand \"extv\"\n   [(set (match_operand 0 \"register_operand\")\n-\t(sign_extract (match_operand:QI 1 \"memory_operand\")\n-\t\t      (match_operand 2 \"immediate_operand\")\n-\t\t      (match_operand 3 \"immediate_operand\")))]\n+\t(sign_extract (match_operand 1 \"nonimmediate_operand\")\n+\t\t      (match_operand 2 \"const_int_operand\")\n+\t\t      (match_operand 3 \"const_int_operand\")))]\n   \"!TARGET_MIPS16\"\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n \t\t\t\t\t INTVAL (operands[2]),\n \t\t\t\t\t INTVAL (operands[3])))\n     DONE;\n+  else if (register_operand (operands[1], GET_MODE (operands[0]))\n+\t   && ISA_HAS_EXTS && UINTVAL (operands[2]) <= 32)\n+    {\n+      if (GET_MODE (operands[0]) == DImode)\n+\temit_insn (gen_extvdi (operands[0], operands[1], operands[2],\n+\t\t\t       operands[3]));\n+      else\n+\temit_insn (gen_extvsi (operands[0], operands[1], operands[2],\n+\t\t\t       operands[3]));\n+      DONE;\n+    }\n   else\n     FAIL;\n })\n \n+(define_insn \"extv<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (sign_extract:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"\")\n+\t\t\t  (match_operand 3 \"const_int_operand\" \"\")))]\n+  \"ISA_HAS_EXTS && UINTVAL (operands[2]) <= 32\"\n+  \"exts\\t%0,%1,%3,%m2\"\n+  [(set_attr \"type\"     \"arith\")\n+   (set_attr \"mode\"     \"<MODE>\")])\n+\n+\n (define_expand \"extzv\"\n   [(set (match_operand 0 \"register_operand\")\n \t(zero_extract (match_operand 1 \"nonimmediate_operand\")\n-\t\t      (match_operand 2 \"immediate_operand\")\n-\t\t      (match_operand 3 \"immediate_operand\")))]\n+\t\t      (match_operand 2 \"const_int_operand\")\n+\t\t      (match_operand 3 \"const_int_operand\")))]\n   \"!TARGET_MIPS16\"\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n@@ -3395,14 +3432,25 @@\n (define_insn \"extzv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(zero_extract:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"I\")\n-\t\t\t  (match_operand:SI 3 \"immediate_operand\" \"I\")))]\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"\")\n+\t\t\t  (match_operand 3 \"const_int_operand\" \"\")))]\n   \"mips_use_ins_ext_p (operands[1], INTVAL (operands[2]),\n \t\t       INTVAL (operands[3]))\"\n   \"<d>ext\\t%0,%1,%3,%2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"<MODE>\")])\n \n+(define_insn \"*extzv_trunc<mode>_exts\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (truncate:GPR\n+\t (zero_extract:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"\")\n+\t\t\t  (match_operand 3 \"const_int_operand\" \"\"))))]\n+  \"ISA_HAS_EXTS && TARGET_64BIT && IN_RANGE (INTVAL (operands[2]), 32, 63)\"\n+  \"exts\\t%0,%1,%3,31\"\n+  [(set_attr \"type\"     \"arith\")\n+   (set_attr \"mode\"     \"<MODE>\")])\n+\n \n (define_expand \"insv\"\n   [(set (zero_extract (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "9eeb9cc27dc5cf82e1e9d06a3ee0156144e6cd83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -1,3 +1,11 @@\n+2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/truncate-2.c: New test.\n+\t* gcc.target/mips/octeon-exts-1.c: New test.\n+\t* gcc.target/mips/octeon-exts-2.c: New test.\n+\t* gcc.target/mips/octeon-exts-3.c: New test.\n+\t* gcc.target/mips/octeon-exts-4.c: New test.\n+\n 2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/octeon-cins-1.c: New test."}, {"sha": "bdaa0b927ef411ef2c1ddf4886c9d15e91f40feb", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-1.c?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=octeon\" } */\n+/* { dg-final { scan-assembler \"\\texts\\t\" } } */\n+\n+struct foo\n+{\n+  long long a:3;\n+  long long b:23;\n+  long long c:38;\n+};\n+\n+NOMIPS16 int\n+f (struct foo s)\n+{\n+  return s.b;\n+}"}, {"sha": "a87c5fb45db92a8ce9f05d300cd76d6885cb61b6", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O -march=octeon\" } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 4 } } */\n+\n+struct bar\n+{\n+  unsigned long long a:1;\n+  long long b:14;\n+  unsigned long long c:48;\n+  long long d:1;\n+};\n+\n+NOMIPS16 int\n+f1 (struct bar *s, int a)\n+{\n+  return (int) s->b + a;\n+}\n+\n+NOMIPS16 char\n+f2 (struct bar *s)\n+{\n+  return s->d + 1;\n+}\n+\n+NOMIPS16 int\n+f3 ()\n+{\n+  struct bar s;\n+  asm (\"\" : \"=r\"(s));\n+  return (int) s.b + 1;\n+}\n+\n+NOMIPS16 long long\n+f4 (struct bar *s)\n+{\n+  return s->d;\n+}"}, {"sha": "d7610f82e3277554e13c14b4d2a2480472ff7b1f", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-3.c?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O -march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 3 } } */\n+\n+struct foo\n+{\n+  unsigned long long a:10;\n+  unsigned long long b:32;\n+  unsigned long long c:22;\n+};\n+\n+NOMIPS16 unsigned\n+f (struct foo s)\n+{\n+  return s.b;\n+}\n+\n+struct bar\n+{\n+  unsigned long long a:15;\n+  unsigned long long b:48;\n+  unsigned long long c:1;\n+};\n+\n+NOMIPS16 int\n+g (struct bar s)\n+{\n+  return (int) s.b;\n+}\n+\n+NOMIPS16 int\n+h (int i)\n+{\n+  return (i << 4) >> 24;\n+}"}, {"sha": "475fa21e8dcd06752081862073aacd5c4bdebe37", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-4.c?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O -march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\\[^\\n\\]*,0\" } } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 6 } } */\n+\n+#define TEST(ID, TYPE, SHIFT)\t\t\t\t\\\n+  int NOMIPS16\t\t\t\t\t\t\\\n+  f##ID (long long y)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return (TYPE) ((TYPE) (y >> SHIFT) + 1);\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  int NOMIPS16\t\t\t\t\t\t\\\n+  g##ID (unsigned long long y)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return (TYPE) ((TYPE) (y >> SHIFT) + 1);\t\t\\\n+  }\n+\n+TEST (1, int, 10)\n+TEST (2, short, 5)\n+TEST (3, char, 31)"}, {"sha": "51125a4819020a11475f3bfa4926814c3aba4a66", "filename": "gcc/testsuite/gcc.target/mips/truncate-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84241327480cec52608beaba811faf1f09e0b03/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-2.c?ref=c84241327480cec52608beaba811faf1f09e0b03", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-mips-options \"-O -mgp64\" } */\n+\n+#define TEST(ID, TYPE, SHIFT)\t\t\t\t\\\n+  int NOMIPS16\t\t\t\t\t\t\\\n+  f##ID (long long y)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return (TYPE) ((TYPE) (y >> SHIFT) + 1);\t\t\\\n+  }\n+\n+TEST (1, int, 32)\n+TEST (2, short, 32)\n+TEST (3, char, 32)\n+TEST (4, int, 33)\n+TEST (5, short, 33)\n+TEST (6, char, 33)\n+TEST (7, int, 61)\n+TEST (8, short, 61)\n+TEST (9, char, 61)\n+\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\\[^\\n\\]*,0\" } } */"}]}