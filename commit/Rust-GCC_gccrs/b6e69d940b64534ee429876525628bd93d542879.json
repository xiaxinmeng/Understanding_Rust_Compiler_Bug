{"sha": "b6e69d940b64534ee429876525628bd93d542879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNjlkOTQwYjY0NTM0ZWU0Mjk4NzY1MjU2MjhiZDkzZDU0Mjg3OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-05T15:06:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-05T15:06:36Z"}, "message": "* doc/invoke.texi: Remove traces of dead ports.\n\nFrom-SVN: r75430", "tree": {"sha": "f20d5a54a9e52308427ad5c59a2c189cfbd8f693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20d5a54a9e52308427ad5c59a2c189cfbd8f693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e69d940b64534ee429876525628bd93d542879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e69d940b64534ee429876525628bd93d542879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e69d940b64534ee429876525628bd93d542879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e69d940b64534ee429876525628bd93d542879/comments", "author": null, "committer": null, "parents": [{"sha": "fa1704829dcffb01eff7339e16b758b811c88b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1704829dcffb01eff7339e16b758b811c88b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1704829dcffb01eff7339e16b758b811c88b0c"}], "stats": {"total": 328, "additions": 6, "deletions": 322}, "files": [{"sha": "02d745e0a4003e384aba1797c95d4e384bc7e234", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e69d940b64534ee429876525628bd93d542879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e69d940b64534ee429876525628bd93d542879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6e69d940b64534ee429876525628bd93d542879", "patch": "@@ -1,3 +1,7 @@\n+2004-01-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/invoke.texi: Remove traces of dead ports.\n+\n 2004-01-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* doc/invoke.texi: Add documentation for the MIPS -mexplicit-relocs"}, {"sha": "57954a7a612ad3874bbfbedf5a7f96ea79a10d7c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 322, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e69d940b64534ee429876525628bd93d542879/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e69d940b64534ee429876525628bd93d542879/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b6e69d940b64534ee429876525628bd93d542879", "patch": "@@ -390,9 +390,6 @@ in the following sections.\n -mtpcs-frame  -mtpcs-leaf-frame @gol\n -mcaller-super-interworking  -mcallee-super-interworking}\n \n-@emph{MN10200 Options}\n-@gccoptlist{-mrelax}\n-\n @emph{MN10300 Options}\n @gccoptlist{-mmult-bug  -mno-mult-bug @gol\n -mam33  -mno-am33 @gol\n@@ -411,18 +408,6 @@ in the following sections.\n -mno-flush-trap -mflush-trap=@var{number} @gol\n -G @var{num}}\n \n-@emph{M88K Options}\n-@gccoptlist{-m88000  -m88100  -m88110  -mbig-pic @gol\n--mcheck-zero-division  -mhandle-large-shift @gol\n--midentify-revision  -mno-check-zero-division @gol\n--mno-ocs-debug-info  -mno-ocs-frame-position @gol\n--mno-optimize-arg-area  -mno-serialize-volatile @gol\n--mno-underscores  -mocs-debug-info @gol\n--mocs-frame-position  -moptimize-arg-area @gol\n--mserialize-volatile  -mshort-data-@var{num}  -msvr3 @gol\n--msvr4  -mtrap-large-shift  -muse-div-instruction @gol\n--mversion-03.00  -mwarn-passed-structs}\n-\n @emph{RS/6000 and PowerPC Options}\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n -mtune=@var{cpu-type} @gol\n@@ -478,11 +463,6 @@ in the following sections.\n -unexported_symbols_list  -weak_reference_mismatches @gol\n -whatsloaded}\n \n-@emph{RT Options}\n-@gccoptlist{-mcall-lib-mul  -mfp-arg-in-fpregs  -mfp-arg-in-gregs @gol\n--mfull-fp-blocks  -mhc-struct-return  -min-line-mul @gol\n--mminimum-fp-blocks  -mnohc-struct-return}\n-\n @emph{MIPS Options}\n @gccoptlist{-EL  -EB  -march=@var{arch}  -mtune=@var{arch} @gol\n -mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n@@ -5840,13 +5820,10 @@ that macro, which enables you to change the defaults.\n * VAX Options::\n * SPARC Options::\n * ARM Options::\n-* MN10200 Options::\n * MN10300 Options::\n * M32R/D Options::\n-* M88K Options::\n * RS/6000 and PowerPC Options::\n * Darwin Options::\n-* RT Options::\n * MIPS Options::\n * i386 and x86-64 Options::\n * HPPA Options::\n@@ -6766,22 +6743,6 @@ of executing a function pointer if this option is enabled.\n \n @end table\n \n-@node MN10200 Options\n-@subsection MN10200 Options\n-@cindex MN10200 options\n-\n-These @option{-m} options are defined for Matsushita MN10200 architectures:\n-@table @gcctabopt\n-\n-@item -mrelax\n-@opindex mrelax\n-Indicate to the linker that it should perform a relaxation optimization pass\n-to shorten branches, calls and absolute memory addresses.  This option only\n-has an effect when used on the command line for the final link step.\n-\n-This option makes symbolic debugging impossible.\n-@end table\n-\n @node MN10300 Options\n @subsection MN10300 Options\n @cindex MN10300 options\n@@ -6945,231 +6906,6 @@ Indicates that there is no OS function for flushing the cache.\n \n @end table\n \n-@node M88K Options\n-@subsection M88K Options\n-@cindex M88k options\n-\n-These @samp{-m} options are defined for Motorola 88k architectures:\n-\n-@table @gcctabopt\n-@item -m88000\n-@opindex m88000\n-Generate code that works well on both the m88100 and the\n-m88110.\n-\n-@item -m88100\n-@opindex m88100\n-Generate code that works best for the m88100, but that also\n-runs on the m88110.\n-\n-@item -m88110\n-@opindex m88110\n-Generate code that works best for the m88110, and may not run\n-on the m88100.\n-\n-@item -mbig-pic\n-@opindex mbig-pic\n-Obsolete option to be removed from the next revision.\n-Use @option{-fPIC}.\n-\n-@item -midentify-revision\n-@opindex midentify-revision\n-@cindex identifying source, compiler (88k)\n-Include an @code{ident} directive in the assembler output recording the\n-source file name, compiler name and version, timestamp, and compilation\n-flags used.\n-\n-@item -mno-underscores\n-@opindex mno-underscores\n-@cindex underscores, avoiding (88k)\n-In assembler output, emit symbol names without adding an underscore\n-character at the beginning of each name.  The default is to use an\n-underscore as prefix on each name.\n-\n-@item -mocs-debug-info\n-@itemx -mno-ocs-debug-info\n-@opindex mocs-debug-info\n-@opindex mno-ocs-debug-info\n-@cindex OCS (88k)\n-@cindex debugging, 88k OCS\n-Include (or omit) additional debugging information (about registers used\n-in each stack frame) as specified in the 88open Object Compatibility\n-Standard, ``OCS''@.  This extra information allows debugging of code that\n-has had the frame pointer eliminated.  The default for SVr4 and Delta 88\n-SVr3.2 is to include this information; other 88k configurations omit this\n-information by default.\n-\n-@item -mocs-frame-position\n-@opindex mocs-frame-position\n-@cindex register positions in frame (88k)\n-When emitting COFF debugging information for automatic variables and\n-parameters stored on the stack, use the offset from the canonical frame\n-address, which is the stack pointer (register 31) on entry to the\n-function.  The SVr4 and Delta88 SVr3.2, and BCS configurations use\n-@option{-mocs-frame-position}; other 88k configurations have the default\n-@option{-mno-ocs-frame-position}.\n-\n-@item -mno-ocs-frame-position\n-@opindex mno-ocs-frame-position\n-@cindex register positions in frame (88k)\n-When emitting COFF debugging information for automatic variables and\n-parameters stored on the stack, use the offset from the frame pointer\n-register (register 30).  When this option is in effect, the frame\n-pointer is not eliminated when debugging information is selected by the\n--g switch.\n-\n-@item -moptimize-arg-area\n-@opindex moptimize-arg-area\n-@cindex arguments in frame (88k)\n-Save space by reorganizing the stack frame.  This option generates code\n-that does not agree with the 88open specifications, but uses less\n-memory.\n-\n-@itemx -mno-optimize-arg-area\n-@opindex mno-optimize-arg-area\n-Do not reorganize the stack frame to save space.  This is the default.\n-The generated conforms to the specification, but uses more memory.\n-\n-@item -mshort-data-@var{num}\n-@opindex mshort-data\n-@cindex smaller data references (88k)\n-@cindex r0-relative references (88k)\n-Generate smaller data references by making them relative to @code{r0},\n-which allows loading a value using a single instruction (rather than the\n-usual two).  You control which data references are affected by\n-specifying @var{num} with this option.  For example, if you specify\n-@option{-mshort-data-512}, then the data references affected are those\n-involving displacements of less than 512 bytes.\n-@option{-mshort-data-@var{num}} is not effective for @var{num} greater\n-than 64k.\n-\n-@item -mserialize-volatile\n-@opindex mserialize-volatile\n-@itemx -mno-serialize-volatile\n-@opindex mno-serialize-volatile\n-@cindex sequential consistency on 88k\n-Do, or don't, generate code to guarantee sequential consistency\n-of volatile memory references.  By default, consistency is\n-guaranteed.\n-\n-The order of memory references made by the MC88110 processor does\n-not always match the order of the instructions requesting those\n-references.  In particular, a load instruction may execute before\n-a preceding store instruction.  Such reordering violates\n-sequential consistency of volatile memory references, when there\n-are multiple processors.   When consistency must be guaranteed,\n-GCC generates special instructions, as needed, to force\n-execution in the proper order.\n-\n-The MC88100 processor does not reorder memory references and so\n-always provides sequential consistency.  However, by default, GCC\n-generates the special instructions to guarantee consistency\n-even when you use @option{-m88100}, so that the code may be run on an\n-MC88110 processor.  If you intend to run your code only on the\n-MC88100 processor, you may use @option{-mno-serialize-volatile}.\n-\n-The extra code generated to guarantee consistency may affect the\n-performance of your application.  If you know that you can safely\n-forgo this guarantee, you may use @option{-mno-serialize-volatile}.\n-\n-@item -msvr4\n-@itemx -msvr3\n-@opindex msvr4\n-@opindex msvr3\n-@cindex assembler syntax, 88k\n-@cindex SVr4\n-Turn on (@option{-msvr4}) or off (@option{-msvr3}) compiler extensions\n-related to System V release 4 (SVr4).  This controls the following:\n-\n-@enumerate\n-@item\n-Which variant of the assembler syntax to emit.\n-@item\n-@option{-msvr4} makes the C preprocessor recognize @samp{#pragma weak}\n-that is used on System V release 4.\n-@item\n-@option{-msvr4} makes GCC issue additional declaration directives used in\n-SVr4.\n-@end enumerate\n-\n-@option{-msvr4} is the default for the m88k-motorola-sysv4 configuration.\n-@option{-msvr3} is the default for all other m88k configurations.\n-\n-@item -mversion-03.00\n-@opindex mversion-03.00\n-This option is obsolete, and is ignored.\n-@c ??? which asm syntax better for GAS?  option there too?\n-\n-@item -mno-check-zero-division\n-@itemx -mcheck-zero-division\n-@opindex mno-check-zero-division\n-@opindex mcheck-zero-division\n-@cindex zero division on 88k\n-Do, or don't, generate code to guarantee that integer division by\n-zero will be detected.  By default, detection is guaranteed.\n-\n-Some models of the MC88100 processor fail to trap upon integer\n-division by zero under certain conditions.  By default, when\n-compiling code that might be run on such a processor, GCC\n-generates code that explicitly checks for zero-valued divisors\n-and traps with exception number 503 when one is detected.  Use of\n-@option{-mno-check-zero-division} suppresses such checking for code\n-generated to run on an MC88100 processor.\n-\n-GCC assumes that the MC88110 processor correctly detects all instances\n-of integer division by zero.  When @option{-m88110} is specified, no\n-explicit checks for zero-valued divisors are generated, and both\n-@option{-mcheck-zero-division} and @option{-mno-check-zero-division} are\n-ignored.\n-\n-@item -muse-div-instruction\n-@opindex muse-div-instruction\n-@cindex divide instruction, 88k\n-Use the div instruction for signed integer division on the\n-MC88100 processor.  By default, the div instruction is not used.\n-\n-On the MC88100 processor the signed integer division instruction\n-div) traps to the operating system on a negative operand.  The\n-operating system transparently completes the operation, but at a\n-large cost in execution time.  By default, when compiling code\n-that might be run on an MC88100 processor, GCC emulates signed\n-integer division using the unsigned integer division instruction\n-divu), thereby avoiding the large penalty of a trap to the\n-operating system.  Such emulation has its own, smaller, execution\n-cost in both time and space.  To the extent that your code's\n-important signed integer division operations are performed on two\n-nonnegative operands, it may be desirable to use the div\n-instruction directly.\n-\n-On the MC88110 processor the div instruction (also known as the\n-divs instruction) processes negative operands without trapping to\n-the operating system.  When @option{-m88110} is specified,\n-@option{-muse-div-instruction} is ignored, and the div instruction is used\n-for signed integer division.\n-\n-Note that the result of dividing @code{INT_MIN} by @minus{}1 is undefined.  In\n-particular, the behavior of such a division with and without\n-@option{-muse-div-instruction} may differ.\n-\n-@item -mtrap-large-shift\n-@itemx -mhandle-large-shift\n-@opindex mtrap-large-shift\n-@opindex mhandle-large-shift\n-@cindex bit shift overflow (88k)\n-@cindex large bit shifts (88k)\n-Include code to detect bit-shifts of more than 31 bits; respectively,\n-trap such shifts or emit code to handle them properly.  By default GCC\n-makes no special provision for large bit shifts.\n-\n-@item -mwarn-passed-structs\n-@opindex mwarn-passed-structs\n-@cindex structure passing (88k)\n-Warn when a function passes a struct as an argument or result.\n-Structure-passing conventions have changed during the evolution of the C\n-language, and are often the source of portability problems.  By default,\n-GCC issues no such warning.\n-@end table\n-\n @c break page here to avoid unsightly interparagraph stretch.\n @c -zw, 2001-8-17\n @page\n@@ -7965,62 +7701,6 @@ describes them in detail.\n @end table\n \n \n-@node RT Options\n-@subsection IBM RT Options\n-@cindex RT options\n-@cindex IBM RT options\n-\n-These @samp{-m} options are defined for the IBM RT PC:\n-\n-@table @gcctabopt\n-@item -min-line-mul\n-@opindex min-line-mul\n-Use an in-line code sequence for integer multiplies.  This is the\n-default.\n-\n-@item -mcall-lib-mul\n-@opindex mcall-lib-mul\n-Call @code{lmul$$} for integer multiples.\n-\n-@item -mfull-fp-blocks\n-@opindex mfull-fp-blocks\n-Generate full-size floating point data blocks, including the minimum\n-amount of scratch space recommended by IBM@.  This is the default.\n-\n-@item -mminimum-fp-blocks\n-@opindex mminimum-fp-blocks\n-Do not include extra scratch space in floating point data blocks.  This\n-results in smaller code, but slower execution, since scratch space must\n-be allocated dynamically.\n-\n-@cindex @file{stdarg.h} and RT PC\n-@item -mfp-arg-in-fpregs\n-@opindex mfp-arg-in-fpregs\n-Use a calling sequence incompatible with the IBM calling convention in\n-which floating point arguments are passed in floating point registers.\n-Note that @code{stdarg.h} will not work with floating point operands\n-if this option is specified.\n-\n-@item -mfp-arg-in-gregs\n-@opindex mfp-arg-in-gregs\n-Use the normal calling convention for floating point arguments.  This is\n-the default.\n-\n-@item -mhc-struct-return\n-@opindex mhc-struct-return\n-Return structures of more than one word in memory, rather than in a\n-register.  This provides compatibility with the MetaWare HighC (hc)\n-compiler.  Use the option @option{-fpcc-struct-return} for compatibility\n-with the Portable C Compiler (pcc).\n-\n-@item -mnohc-struct-return\n-@opindex mnohc-struct-return\n-Return some structures of more than one word in registers, when\n-convenient.  This is the default.  For compatibility with the\n-IBM-supplied compilers, use the option @option{-fpcc-struct-return} or the\n-option @option{-mhc-struct-return}.\n-@end table\n-\n @node MIPS Options\n @subsection MIPS Options\n @cindex MIPS options\n@@ -11280,7 +10960,7 @@ loader is not part of GCC; it is part of the operating system).  If\n the GOT size for the linked executable exceeds a machine-specific\n maximum size, you get an error message from the linker indicating that\n @option{-fpic} does not work; in that case, recompile with @option{-fPIC}\n-instead.  (These maximums are 16k on the m88k, 8k on the SPARC, and 32k\n+instead.  (These maximums are 8k on the SPARC and 32k\n on the m68k and RS/6000.  The 386 has no such limit.)\n \n Position-independent code requires special support, and therefore works\n@@ -11292,7 +10972,7 @@ position-independent.\n @opindex fPIC\n If supported for the target machine, emit position-independent code,\n suitable for dynamic linking and avoiding any limit on the size of the\n-global offset table.  This option makes a difference on the m68k, m88k,\n+global offset table.  This option makes a difference on the m68k\n and the SPARC.\n \n Position-independent code requires special support, and therefore works"}]}