{"sha": "c34d3fd3068c5f991f75017023ba8eb36879ffa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0ZDNmZDMwNjhjNWY5OTFmNzUwMTcwMjNiYThlYjM2ODc5ZmZhMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-07T22:46:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-07T22:46:53Z"}, "message": "Improve API docs for <chrono> and <ratio>\n\n\t* doc/doxygen/doxygroups.cc (std::literals): Add documentation for\n\tinline namespace.\n\t* include/std/chrono: Improve docs.\n\t* include/std/ratio: Do not document implementation details.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n\nFrom-SVN: r270988", "tree": {"sha": "7cf807b6dcd8750cb98b872c75e422881b553bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf807b6dcd8750cb98b872c75e422881b553bc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c34d3fd3068c5f991f75017023ba8eb36879ffa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34d3fd3068c5f991f75017023ba8eb36879ffa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34d3fd3068c5f991f75017023ba8eb36879ffa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34d3fd3068c5f991f75017023ba8eb36879ffa3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605"}], "stats": {"total": 149, "additions": 139, "deletions": 10}, "files": [{"sha": "5c668bac172cfd2a070899fdd0c14a5281371ea9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -1,5 +1,13 @@\n 2019-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/doxygen/doxygroups.cc (std::literals): Add documentation for\n+\tinline namespace.\n+\t* include/std/chrono: Improve docs.\n+\t* include/std/ratio: Do not document implementation details.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n+\n \tPR libstdc++/89102\n \t* doc/xml/manual/intro.xml: Document DR 2408 and 2465 changes.\n \t* include/std/chrono (__duration_common_type_wrapper): Replace with ..."}, {"sha": "94ef3bb4f65b1cbdbd37bbc94a6471f55d73faa0", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -19,6 +19,9 @@\n /** @namespace std\n  *  @brief ISO C++ entities toplevel namespace is std.\n */\n+/** @namespace std\n+ *  @brief ISO C++ inline namespace for literal suffixes.\n+*/\n /** @namespace std::__detail\n  *  @brief Implementation details not part of the namespace std interface.\n */"}, {"sha": "1f2c8799b5b2ca6df7c67f58970436d8d7d62cad", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -24,6 +24,7 @@\n \n /** @file include/chrono\n  *  This is a Standard C++ Library header.\n+ *  @ingroup chrono\n  */\n \n #ifndef _GLIBCXX_CHRONO\n@@ -67,6 +68,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)\n \n+  /// @cond undocumented\n+\n   template<typename _CT, typename _Period1, typename _Period2, typename = void>\n     struct __duration_common_type\n     { };\n@@ -90,6 +93,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __duration_common_type<__failure_type, _Period1, _Period2>\n     { typedef __failure_type type; };\n \n+  /// @endcond\n+\n+  /// Specialization of common_type for chrono::duration types.\n+  /// @relates duration\n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n \t\t       chrono::duration<_Rep2, _Period2>>\n@@ -98,6 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n \n+  /// @cond undocumented\n+\n   template<typename _CT, typename _Clock, typename = void>\n     struct __timepoint_common_type\n     { };\n@@ -108,14 +117,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using type = chrono::time_point<_Clock, typename _CT::type>;\n     };\n \n+  /// @endcond\n+\n+  /// Specialization of common_type for chrono::time_point types.\n+  /// @relates time_point\n   template<typename _Clock, typename _Duration1, typename _Duration2>\n     struct common_type<chrono::time_point<_Clock, _Duration1>,\n \t\t       chrono::time_point<_Clock, _Duration2>>\n     : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>\n     { };\n \n+  // @} group chrono\n+\n   namespace chrono\n   {\n+    /// @addtogroup chrono\n+    /// @{\n+\n+    /// @cond undocumented\n+\n     // Primary template for duration_cast impl.\n     template<typename _ToDur, typename _CF, typename _CR,\n \t     bool _NumIsOne = false, bool _DenIsOne = false>\n@@ -188,6 +208,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __disable_if_is_duration\n \t= typename enable_if<!__is_duration<_Tp>::value, _Tp>::type;\n \n+    /// @endcond\n+\n     /// duration_cast\n     template<typename _ToDur, typename _Rep, typename _Period>\n       constexpr __enable_if_is_duration<_ToDur>\n@@ -288,6 +310,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return numeric_limits<_Rep>::lowest(); }\n       };\n \n+    /// @cond undocumented\n+\n     template<typename _Tp>\n       struct __is_ratio\n       : std::false_type\n@@ -298,6 +322,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : std::true_type\n       { };\n \n+    /// @endcond\n+\n     /// duration\n     template<typename _Rep, typename _Period>\n       struct duration\n@@ -446,6 +472,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \trep __r;\n       };\n \n+    /// @relates duration @{\n+\n+    /// The sum of two durations.\n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n       constexpr typename common_type<duration<_Rep1, _Period1>,\n@@ -459,6 +488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __cd(__cd(__lhs).count() + __cd(__rhs).count());\n       }\n \n+    /// The difference between two durations.\n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n       constexpr typename common_type<duration<_Rep1, _Period1>,\n@@ -472,6 +502,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __cd(__cd(__lhs).count() - __cd(__rhs).count());\n       }\n \n+    /// @}\n+\n+    /// @cond undocumented\n+\n     // SFINAE helper to obtain common_type<_Rep1, _Rep2> only if _Rep2\n     // is implicitly convertible to it.\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -481,6 +515,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __common_rep_t = typename\n \tenable_if<is_convertible<const _Rep2&, _CRep>::value, _CRep>::type;\n \n+    /// @endcond\n+\n+    /// @relates duration @{\n+\n+    /// Multiply a duration by a scalar value.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n       constexpr duration<__common_rep_t<_Rep1, _Rep2>, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n@@ -490,6 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __cd(__cd(__d).count() * __s);\n       }\n \n+    /// Multiply a duration by a scalar value.\n     template<typename _Rep1, typename _Rep2, typename _Period>\n       constexpr duration<__common_rep_t<_Rep2, _Rep1>, _Period>\n       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n@@ -542,6 +582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     // comparisons\n+\n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n       constexpr bool\n@@ -594,6 +635,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n+    /// @}\n+\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n # define _GLIBCXX_CHRONO_INT64_T int64_t\n #elif defined __INT64_TYPE__\n@@ -721,6 +764,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n #endif // C++17\n \n+    /// @relates time_point @{\n+\n+    /// Adjust a time point forwards by the given duration.\n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n       constexpr time_point<_Clock,\n@@ -734,6 +780,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __time_point(__lhs.time_since_epoch() + __rhs);\n       }\n \n+    /// Adjust a time point forwards by the given duration.\n     template<typename _Rep1, typename _Period1,\n \t     typename _Clock, typename _Dur2>\n       constexpr time_point<_Clock,\n@@ -747,6 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __time_point(__rhs.time_since_epoch() + __lhs);\n       }\n \n+    /// Adjust a time point backwards by the given duration.\n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n       constexpr time_point<_Clock,\n@@ -760,6 +808,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __time_point(__lhs.time_since_epoch() -__rhs);\n       }\n \n+    /// @}\n+\n+    /// @relates time_point @{\n+\n+    /// The difference between two time points (as a duration)\n     template<typename _Clock, typename _Dur1, typename _Dur2>\n       constexpr typename common_type<_Dur1, _Dur2>::type\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n@@ -802,6 +855,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n+    // @}\n \n     // Clocks.\n \n@@ -827,6 +881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  @brief System clock.\n      *\n      *  Time returned represents wall time from the system-wide clock.\n+     *  @ingroup chrono\n     */\n     struct system_clock\n     {\n@@ -866,6 +921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  @brief Monotonic clock\n      *\n      *  Time returned has the property of only increasing at a uniform rate.\n+     *  @ingroup chrono\n     */\n     struct steady_clock\n     {\n@@ -887,10 +943,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  This is the clock \"with the shortest tick period.\" Alias to\n      *  std::system_clock until higher-than-nanosecond definitions\n      *  become feasible.\n+     *  @ingroup chrono\n     */\n     using high_resolution_clock = system_clock;\n \n     } // end inline namespace _V2\n+    // @}\n   } // namespace chrono\n \n #if __cplusplus > 201103L\n@@ -899,10 +957,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline namespace literals\n   {\n+  /** ISO C++ 2014  namespace for suffixes for duration literals.\n+   *\n+   * These suffixes can be used to create `chrono::duration` values with\n+   * tick periods of hours, minutes, seconds, milliseconds, microseconds\n+   * or nanoseconds. For example, `std::chrono::seconds(5)` can be written\n+   * as `5s` after making the suffix visible in the current scope.\n+   * The suffixes can be made visible by a using-directive or\n+   * using-declaration such as:\n+   *  - `using namespace std::chrono_literals;`\n+   *  - `using namespace std::literals;`\n+   *  - `using namespace std::chrono;`\n+   *  - `using namespace std;`\n+   *  - `using std::chrono_literals::operator\"\"s;`\n+   *\n+   * The result of these suffixes on an integer literal is one of the\n+   * standard typedefs such as `std::chrono::hours`.\n+   * The result on a floating-point literal is a duration type with the\n+   * specified tick period and an unspecified floating-point representation,\n+   * for example `1.5e2ms` might be equivalent to\n+   * `chrono::duration<long double, chrono::milli>(1.5e2)`.\n+   *\n+   * @ingroup chrono\n+   */\n   inline namespace chrono_literals\n   {\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n+    /// @cond undocumented\n     template<typename _Dur, char... _Digits>\n       constexpr _Dur __check_overflow()\n       {\n@@ -912,56 +994,69 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      \"literal value cannot be represented by duration type\");\n \treturn _Dur(__repval);\n       }\n+    /// @endcond\n \n+    /// Literal suffix for durations representing non-integer hours\n     constexpr chrono::duration<long double, ratio<3600,1>>\n     operator\"\"h(long double __hours)\n     { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n \n+    /// Literal suffix for durations of type `std::chrono::hours`\n     template <char... _Digits>\n       constexpr chrono::hours\n       operator\"\"h()\n       { return __check_overflow<chrono::hours, _Digits...>(); }\n \n+    /// Literal suffix for durations representing non-integer minutes\n     constexpr chrono::duration<long double, ratio<60,1>>\n     operator\"\"min(long double __mins)\n     { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n \n+    /// Literal suffix for durations of type `std::chrono::minutes`\n     template <char... _Digits>\n       constexpr chrono::minutes\n       operator\"\"min()\n       { return __check_overflow<chrono::minutes, _Digits...>(); }\n \n+    /// Literal suffix for durations representing non-integer seconds\n     constexpr chrono::duration<long double>\n     operator\"\"s(long double __secs)\n     { return chrono::duration<long double>{__secs}; }\n \n+    /// Literal suffix for durations of type `std::chrono::seconds`\n     template <char... _Digits>\n       constexpr chrono::seconds\n       operator\"\"s()\n       { return __check_overflow<chrono::seconds, _Digits...>(); }\n \n+    /// Literal suffix for durations representing non-integer milliseconds\n     constexpr chrono::duration<long double, milli>\n     operator\"\"ms(long double __msecs)\n     { return chrono::duration<long double, milli>{__msecs}; }\n \n+    /// Literal suffix for durations of type `std::chrono::milliseconds`\n     template <char... _Digits>\n       constexpr chrono::milliseconds\n       operator\"\"ms()\n       { return __check_overflow<chrono::milliseconds, _Digits...>(); }\n \n+    /// Literal suffix for durations representing non-integer microseconds\n     constexpr chrono::duration<long double, micro>\n     operator\"\"us(long double __usecs)\n     { return chrono::duration<long double, micro>{__usecs}; }\n \n+    /// Literal suffix for durations of type `std::chrono::microseconds`\n     template <char... _Digits>\n       constexpr chrono::microseconds\n       operator\"\"us()\n       { return __check_overflow<chrono::microseconds, _Digits...>(); }\n \n+    /// Literal suffix for durations representing non-integer nanoseconds\n     constexpr chrono::duration<long double, nano>\n     operator\"\"ns(long double __nsecs)\n     { return chrono::duration<long double, nano>{__nsecs}; }\n \n+    /// Literal suffix for durations of type `std::chrono::nanoseconds`\n     template <char... _Digits>\n       constexpr chrono::nanoseconds\n       operator\"\"ns()\n@@ -978,8 +1073,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif // C++14\n \n-  // @} group chrono\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "645525bd30d7c662f5facde095efba72c661dacc", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -24,6 +24,7 @@\n \n /** @file include/ratio\n  *  This is a Standard C++ Library header.\n+ *  @ingroup ratio\n  */\n \n #ifndef _GLIBCXX_RATIO\n@@ -50,6 +51,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+  /// @cond undocumented\n+\n   template<intmax_t _Pn>\n     struct __static_sign\n     : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>\n@@ -243,6 +246,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(__rem < __d, \"Internal library error\");\n     };\n \n+  /// @endcond\n+\n   /**\n    *  @brief Provides compile-time rational arithmetic.\n    *\n@@ -280,6 +285,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<intmax_t _Num, intmax_t _Den>\n     constexpr intmax_t ratio<_Num, _Den>::den;\n \n+  /// @cond undocumented\n+\n   template<typename _R1, typename _R2>\n     struct __ratio_multiply\n     {\n@@ -306,10 +313,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_multiply<_R1, _R2>::den;\n \n+  /// @endcond\n+\n   /// ratio_multiply\n   template<typename _R1, typename _R2>\n     using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;\n \n+  /// @cond undocumented\n+\n   template<typename _R1, typename _R2>\n     struct __ratio_divide\n     {\n@@ -329,6 +340,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_divide<_R1, _R2>::den;\n \n+  /// @endcond\n+\n   /// ratio_divide\n   template<typename _R1, typename _R2>\n     using ratio_divide = typename __ratio_divide<_R1, _R2>::type;\n@@ -345,6 +358,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : integral_constant<bool, !ratio_equal<_R1, _R2>::value>\n     { };\n \n+  /// @cond undocumented\n+\n   // Both numbers are positive.\n   template<typename _R1, typename _R2,\n            typename _Left = __big_mul<_R1::num,_R2::den>,\n@@ -375,6 +390,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            ratio<-_R1::num, _R1::den> >::type\n     { };\n \n+  /// @endcond\n+\n   /// ratio_less\n   template<typename _R1, typename _R2>\n     struct ratio_less\n@@ -416,6 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     = ratio_greater_equal<_R1, _R2>::value;\n #endif // C++17\n \n+  /// @cond undocumented\n+\n   template<typename _R1, typename _R2,\n       bool = (_R1::num >= 0),\n       bool = (_R2::num >= 0),\n@@ -499,10 +518,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_add<_R1, _R2>::den;\n \n+  /// @endcond\n+\n   /// ratio_add\n   template<typename _R1, typename _R2>\n     using ratio_add = typename __ratio_add<_R1, _R2>::type;\n \n+  /// @cond undocumented\n+\n   template<typename _R1, typename _R2>\n     struct __ratio_subtract\n     {\n@@ -520,6 +543,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_subtract<_R1, _R2>::den;\n \n+  /// @endcond\n+\n   /// ratio_subtract\n   template<typename _R1, typename _R2>\n     using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;"}, {"sha": "0dc6bd7e6adf76ff857ee0a3c35d4da77f4760b5", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -45,7 +45,7 @@ test04()\n   std::ratio<1,0> r1 __attribute__((unused)); // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 263 }\n-// { dg-error \"out of range\" \"\" { target *-*-* } 264 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 59 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 0 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 0 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "de6f6276ffee0a393cfb366f8b44c5a1e94bc0ee", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow_neg.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d3fd3068c5f991f75017023ba8eb36879ffa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc?ref=c34d3fd3068c5f991f75017023ba8eb36879ffa3", "patch": "@@ -41,10 +41,10 @@ test02()\n // { dg-error \"required from here\" \"\" { target *-*-* } 28 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 35 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 37 }\n-// { dg-error \"overflow in addition\" \"\" { target *-*-* } 450 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 95 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 97 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 99 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 106 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 0 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 98 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 100 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 102 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"out of range\" }\n // { dg-prune-output \"not usable in a constant expression\" }"}]}