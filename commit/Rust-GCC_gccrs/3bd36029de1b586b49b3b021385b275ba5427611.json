{"sha": "3bd36029de1b586b49b3b021385b275ba5427611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkMzYwMjlkZTFiNTg2YjQ5YjNiMDIxMzg1YjI3NWJhNTQyNzYxMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:53:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:53:01Z"}, "message": "tm.texi.in (SWITCHABLE_TARGET): Document.\n\ngcc/\n\t* doc/tm.texi.in (SWITCHABLE_TARGET): Document.\n\t* doc/tm.texi: Regenerate.\n\t* Makefile.in (OBJS-common): Add target-globals.o.\n\t(gtype-desc.o): Depend on $(IPA_PROP_H), $(LTO_STREAMER_H)\n\tand target-globals.h.\n\t(target-globals.o): New rule.\n\t(GTFILES): Include $(srcdir)/target-globals.h.\n\t* defaults.h (SWITCHABLE_TARGET): Define.\n\t* gengtype.c (open_base_files): Add target-globals.h to the\n\tlist of includes.\n\t* target-globals.h: New file.\n\t* target-globals.c: Likewise.\n\n\t* Makefile.in (target-globals.o): Depend on $(FLAGS_H).\n\t* flags.h (target_flag_state): New structure.\n\t(default_target_flag_state): Declare.\n\t(this_target_flag_state): Declare as a variable or define as a macro.\n\t(align_loops_log): Redefine as a macro.\n\t(align_loops_max_skip, align_jumps_log): Likewise.\n\t(align_jumps_max_skip, align_labels_log): Likewise.\n\t(align_labels_max_skip, align_functions_log): Likewise.\n\t* toplev.c (default_target_flag_state): New variable.\n\t(this_target_flag_state): New conditional variable.\n\t(align_loops_log): Delete.\n\t(align_loops_max_skip, align_jumps_log): Likewise.\n\t(align_jumps_max_skip, align_labels_log): Likewise.\n\t(align_labels_max_skip, align_functions_log): Likewise.\n\t* target-globals.h (this_target_flag_state): Declare.\n\t(target_globals): Add a flag_state field.\n\t(restore_target_globals): Copy the flag_state field to\n\tthis_target_flag_state.\n\t* target-globals.c: Include flags.h.\n\t(default_target_globals): Initialize the flag_state field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162086", "tree": {"sha": "31082728f6e9907bb69ff117b048b63b0e31d51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31082728f6e9907bb69ff117b048b63b0e31d51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd36029de1b586b49b3b021385b275ba5427611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd36029de1b586b49b3b021385b275ba5427611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd36029de1b586b49b3b021385b275ba5427611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd36029de1b586b49b3b021385b275ba5427611/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7beb0596ea999005a74327e48c6174988eb61ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7beb0596ea999005a74327e48c6174988eb61ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7beb0596ea999005a74327e48c6174988eb61ced"}], "stats": {"total": 246, "additions": 219, "deletions": 27}, "files": [{"sha": "aa2ef8416376efb63c30575361700b685e73d601", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -1,3 +1,40 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/tm.texi.in (SWITCHABLE_TARGET): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* Makefile.in (OBJS-common): Add target-globals.o.\n+\t(gtype-desc.o): Depend on $(IPA_PROP_H), $(LTO_STREAMER_H)\n+\tand target-globals.h.\n+\t(target-globals.o): New rule.\n+\t(GTFILES): Include $(srcdir)/target-globals.h.\n+\t* defaults.h (SWITCHABLE_TARGET): Define.\n+\t* gengtype.c (open_base_files): Add target-globals.h to the\n+\tlist of includes.\n+\t* target-globals.h: New file.\n+\t* target-globals.c: Likewise.\n+\n+\t* Makefile.in (target-globals.o): Depend on $(FLAGS_H).\n+\t* flags.h (target_flag_state): New structure.\n+\t(default_target_flag_state): Declare.\n+\t(this_target_flag_state): Declare as a variable or define as a macro.\n+\t(align_loops_log): Redefine as a macro.\n+\t(align_loops_max_skip, align_jumps_log): Likewise.\n+\t(align_jumps_max_skip, align_labels_log): Likewise.\n+\t(align_labels_max_skip, align_functions_log): Likewise.\n+\t* toplev.c (default_target_flag_state): New variable.\n+\t(this_target_flag_state): New conditional variable.\n+\t(align_loops_log): Delete.\n+\t(align_loops_max_skip, align_jumps_log): Likewise.\n+\t(align_jumps_max_skip, align_labels_log): Likewise.\n+\t(align_labels_max_skip, align_functions_log): Likewise.\n+\t* target-globals.h (this_target_flag_state): Declare.\n+\t(target_globals): Add a flag_state field.\n+\t(restore_target_globals): Copy the flag_state field to\n+\tthis_target_flag_state.\n+\t* target-globals.c: Include flags.h.\n+\t(default_target_globals): Initialize the flag_state field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Jie Zhang  <jie@codesourcery.com>\n \n \t* postreload.c (reg_symbol_ref[]): New."}, {"sha": "6fd3b00bb0670fc09e6fe01738bf215ccf96f3f0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -1337,6 +1337,7 @@ OBJS-common = \\\n \tstor-layout.o \\\n \tstore-motion.o \\\n \tstringpool.o \\\n+\ttarget-globals.o \\\n \ttarghooks.o \\\n \ttimevar.o \\\n \ttoplev.o \\\n@@ -2249,7 +2250,8 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \thard-reg-set.h $(BASIC_BLOCK_H) cselib.h $(INSN_ADDR_H) $(OPTABS_H) \\\n \tlibfuncs.h debug.h $(GGC_H) $(CGRAPH_H) $(TREE_FLOW_H) reload.h \\\n \t$(CPP_ID_DATA_H) tree-chrec.h $(CFGLAYOUT_H) $(EXCEPT_H) output.h \\\n-\t$(CFGLOOP_H) $(TARGET_H)\n+\t$(CFGLOOP_H) $(TARGET_H) $(IPA_PROP_H) $(LTO_STREAMER_H) \\\n+\ttarget-globals.h\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n \t$(GGC_H) $(HASHTAB_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H) hosthooks.h\t\\\n@@ -3473,6 +3475,9 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(MACHMODE_H) $(TM_H) $(RTL_H) $(TM_P_H) $(TIMEVAR_H) $(FLAGS_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) $(OBSTACK_H) $(BITMAP_H) \\\n    $(EXPR_H) $(EXCEPT_H) $(REGS_H) $(TREE_PASS_H) $(DF_H)\n+target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n+   $(FLAGS_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\\n@@ -3750,6 +3755,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-ssa-alias.h \\\n   $(srcdir)/ipa-prop.h \\\n   $(srcdir)/lto-streamer.h \\\n+  $(srcdir)/target-globals.h \\\n   @all_gtfiles@\n \n # Compute the list of GT header files from the corresponding C sources,"}, {"sha": "5d56c7559fb28c69c346d16448e6e452a7e0eff3", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -1372,6 +1372,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define STACK_CHECK_MAX_VAR_SIZE (STACK_CHECK_MAX_FRAME_SIZE / 100)\n #endif\n \n+#ifndef SWITCHABLE_TARGET\n+#define SWITCHABLE_TARGET 0\n+#endif\n+\n #endif /* GCC_INSN_FLAGS_H  */\n \n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "78f2f2f3ed4bab247d5bb01dad50880f8b53aa88", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -842,6 +842,25 @@ pointer.  If this macro is defined, GCC will turn on the\n @option{-fomit-frame-pointer} option whenever @option{-O} is specified.\n @end defmac\n \n+@defmac SWITCHABLE_TARGET\n+Some targets need to switch between substantially different subtargets\n+during compilation.  For example, the MIPS target has one subtarget for\n+the traditional MIPS architecture and another for MIPS16.  Source code\n+can switch between these two subarchitectures using the @code{mips16}\n+and @code{nomips16} attributes.\n+\n+Such subtargets can differ in things like the set of available\n+registers, the set of available instructions, the costs of various\n+operations, and so on.  GCC caches a lot of this type of information\n+in global variables, and recomputing them for each subtarget takes a\n+significant amount of time.  The compiler therefore provides a facility\n+for maintaining several versions of the global variables and quickly\n+switching between them; see @file{target-globals.h} for details.\n+\n+Define this macro to 1 if your target needs this facility.  The default\n+is 0.\n+@end defmac\n+\n @node Per-Function Data\n @section Defining data structures for per-function information.\n @cindex per-function data"}, {"sha": "2f35a429c524a2e1a433906cfb8c0f0844f67d2e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -842,6 +842,25 @@ pointer.  If this macro is defined, GCC will turn on the\n @option{-fomit-frame-pointer} option whenever @option{-O} is specified.\n @end defmac\n \n+@defmac SWITCHABLE_TARGET\n+Some targets need to switch between substantially different subtargets\n+during compilation.  For example, the MIPS target has one subtarget for\n+the traditional MIPS architecture and another for MIPS16.  Source code\n+can switch between these two subarchitectures using the @code{mips16}\n+and @code{nomips16} attributes.\n+\n+Such subtargets can differ in things like the set of available\n+registers, the set of available instructions, the costs of various\n+operations, and so on.  GCC caches a lot of this type of information\n+in global variables, and recomputing them for each subtarget takes a\n+significant amount of time.  The compiler therefore provides a facility\n+for maintaining several versions of the global variables and quickly\n+switching between them; see @file{target-globals.h} for details.\n+\n+Define this macro to 1 if your target needs this facility.  The default\n+is 0.\n+@end defmac\n+\n @node Per-Function Data\n @section Defining data structures for per-function information.\n @cindex per-function data"}, {"sha": "32f9fbfc493e8787620190b905fca4e49a8979ae", "filename": "gcc/flags.h", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -239,6 +239,43 @@ extern enum excess_precision flag_excess_precision;\n \f\n /* Other basic status info about current function.  */\n \n+/* Target-dependent global state.  */\n+struct target_flag_state {\n+  /* Values of the -falign-* flags: how much to align labels in code.\n+     0 means `use default', 1 means `don't align'.\n+     For each variable, there is an _log variant which is the power\n+     of two not less than the variable, for .align output.  */\n+  int x_align_loops_log;\n+  int x_align_loops_max_skip;\n+  int x_align_jumps_log;\n+  int x_align_jumps_max_skip;\n+  int x_align_labels_log;\n+  int x_align_labels_max_skip;\n+  int x_align_functions_log;\n+};\n+\n+extern struct target_flag_state default_target_flag_state;\n+#if SWITCHABLE_TARGET\n+extern struct target_flag_state *this_target_flag_state;\n+#else\n+#define this_target_flag_state (&default_target_flag_state)\n+#endif\n+\n+#define align_loops_log \\\n+  (this_target_flag_state->x_align_loops_log)\n+#define align_loops_max_skip \\\n+  (this_target_flag_state->x_align_loops_max_skip)\n+#define align_jumps_log \\\n+  (this_target_flag_state->x_align_jumps_log)\n+#define align_jumps_max_skip \\\n+  (this_target_flag_state->x_align_jumps_max_skip)\n+#define align_labels_log \\\n+  (this_target_flag_state->x_align_labels_log)\n+#define align_labels_max_skip \\\n+  (this_target_flag_state->x_align_labels_max_skip)\n+#define align_functions_log \\\n+  (this_target_flag_state->x_align_functions_log)\n+\n /* Nonzero if subexpressions must be evaluated from left-to-right.  */\n extern int flag_evaluation_order;\n \n@@ -252,19 +289,6 @@ extern bool sel_sched_switch_set;\n /* Whether to run the warn_unused_result attribute pass.  */\n extern bool flag_warn_unused_result;\n \n-/* Values of the -falign-* flags: how much to align labels in code.\n-   0 means `use default', 1 means `don't align'.\n-   For each variable, there is an _log variant which is the power\n-   of two not less than the variable, for .align output.  */\n-\n-extern int align_loops_log;\n-extern int align_loops_max_skip;\n-extern int align_jumps_log;\n-extern int align_jumps_max_skip;\n-extern int align_labels_log;\n-extern int align_labels_max_skip;\n-extern int align_functions_log;\n-\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n "}, {"sha": "91272513736188d59ae19a365eee3e11ffb2c38e", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -1571,7 +1571,7 @@ open_base_files (void)\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       \"cfglayout.h\", \"except.h\", \"output.h\", \"gimple.h\", \"cfgloop.h\",\n-      \"target.h\", \"ipa-prop.h\", \"lto-streamer.h\", NULL\n+      \"target.h\", \"ipa-prop.h\", \"lto-streamer.h\", \"target-globals.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "ecbc76b6ef8631dee4e80e6c748bfa1a7e71f8c2", "filename": "gcc/target-globals.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -0,0 +1,48 @@\n+/* Target-dependent globals.\n+   Copyright (C) 2010  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"insn-config.h\"\n+#include \"machmode.h\"\n+#include \"ggc.h\"\n+#include \"toplev.h\"\n+#include \"target-globals.h\"\n+#include \"flags.h\"\n+\n+#if SWITCHABLE_TARGET\n+struct target_globals default_target_globals = {\n+  &default_target_flag_state\n+};\n+\n+struct target_globals *\n+save_target_globals (void)\n+{\n+  struct target_globals *g;\n+\n+  g = ggc_alloc_target_globals ();\n+  g->flag_state = XCNEW (struct target_flag_state);\n+  restore_target_globals (g);\n+  target_reinit ();\n+  return g;\n+}\n+\n+#endif"}, {"sha": "496a50706c66c5cd72d00ab45f7e4d475f3c79d8", "filename": "gcc/target-globals.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -0,0 +1,41 @@\n+/* Target-dependent globals.\n+   Copyright (C) 2010  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TARGET_GLOBALS_H\n+#define TARGET_GLOBALS_H 1\n+\n+#if SWITCHABLE_TARGET\n+extern struct target_flag_state *this_target_flag_state;\n+\n+struct GTY(()) target_globals {\n+  struct target_flag_state *GTY((skip)) flag_state;\n+};\n+\n+extern struct target_globals default_target_globals;\n+\n+extern struct target_globals *save_target_globals (void);\n+\n+static inline void\n+restore_target_globals (struct target_globals *g)\n+{\n+  this_target_flag_state = g->flag_state;\n+}\n+#endif\n+\n+#endif"}, {"sha": "14725799499d988dc928eaad138e7e221467e215", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd36029de1b586b49b3b021385b275ba5427611/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3bd36029de1b586b49b3b021385b275ba5427611", "patch": "@@ -317,18 +317,12 @@ enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n \n bool user_defined_section_attribute = false;\n \n-/* Values of the -falign-* flags: how much to align labels in code.\n-   0 means `use default', 1 means `don't align'.\n-   For each variable, there is an _log variant which is the power\n-   of two not less than the variable, for .align output.  */\n-\n-int align_loops_log;\n-int align_loops_max_skip;\n-int align_jumps_log;\n-int align_jumps_max_skip;\n-int align_labels_log;\n-int align_labels_max_skip;\n-int align_functions_log;\n+struct target_flag_state default_target_flag_state;\n+#if SWITCHABLE_TARGET\n+struct target_flag_state *this_target_flag_state = &default_target_flag_state;\n+#else\n+#define this_target_flag_state (&default_target_flag_state)\n+#endif\n \n typedef struct\n {"}]}