{"sha": "4e6a144034de387e9ff11a6ae78d6af86f0dc228", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU2YTE0NDAzNGRlMzg3ZTlmZjExYTZhZTc4ZDZhZjg2ZjBkYzIyOA==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-04-17T14:09:21Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-04-17T14:09:21Z"}, "message": "remove -fugly, other doc fixes\n\nFrom-SVN: r26519", "tree": {"sha": "c277d18c2930d35193192450120a56e43caee603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c277d18c2930d35193192450120a56e43caee603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e6a144034de387e9ff11a6ae78d6af86f0dc228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6a144034de387e9ff11a6ae78d6af86f0dc228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6a144034de387e9ff11a6ae78d6af86f0dc228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6a144034de387e9ff11a6ae78d6af86f0dc228/comments", "author": null, "committer": null, "parents": [{"sha": "8a19a44a1fc162ba149500603e9951cc9cccf2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a19a44a1fc162ba149500603e9951cc9cccf2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a19a44a1fc162ba149500603e9951cc9cccf2d2"}], "stats": {"total": 546, "additions": 298, "deletions": 248}, "files": [{"sha": "29caa6ec16bf61abb66407b30c80f1198ef630f1", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -1,3 +1,22 @@\n+Sat Apr 17 16:55:59 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* bugs.texi, ffe.texi, g77.texi, g77install.texi, news.texi:\n+\tClean up @code{} vs. @samp{}.\n+\tClean up dashes (`--') vs. @minus{} vs. `---'.\n+\n+\t* ffe.texi: Add copyright header.\n+\n+\t* g77.texi, lang-options.h, news.texi, top.c (ffe_decode_option):\n+\tRemove support for -fugly option.\n+\tClarify that -fugly-logint is needed instead of -fugly\n+\tto work around using .EQ./.NE. on LOGICAL operands.\n+\tExplain more about why -fugly-logint is bad juju.\n+\n+\t* g77.texi (Missing Features): Describe READONLY as a missing\n+\tfeature.  Describe AUTOMATIC better.\n+\n+\t* news.texi: Mention libf2c upgrade.\n+\n Sat Apr 17 14:05:53 1999  Craig Burley  <craig@jcb-sc.com>\n \n \tMake a place for front-end internals documentation:"}, {"sha": "3d4e791e2667a343f3c71db6da486eda550bf3a6", "filename": "gcc/f/bugs.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fbugs.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fbugs.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbugs.texi?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -9,7 +9,7 @@\n @c in the standalone derivations of this file (e.g. BUGS).\n @set copyrights-bugs 1995-1999\n \n-@set last-update-bugs 1999-04-03\n+@set last-update-bugs 1999-04-17\n \n @include root.texi\n \n@@ -111,8 +111,8 @@ e.g. not passed to other procedures as they should be.\n @code{g77} fails to warn about\n use of a ``live'' iterative-DO variable\n as an implied-DO variable\n-in a @samp{WRITE} or @samp{PRINT} statement\n-(although it does warn about this in a @samp{READ} statement).\n+in a @code{WRITE} or @code{PRINT} statement\n+(although it does warn about this in a @code{READ} statement).\n \n @item\n Something about @code{g77}'s straightforward handling of\n@@ -210,8 +210,8 @@ for information on the @samp{-fdebug-kludge} option.\n @item\n When debugging, after starting up the debugger but before being able\n to see the source code for the main program unit, the user must currently\n-set a breakpoint at @samp{MAIN__} (or @samp{MAIN___} or @samp{MAIN_} if\n-@samp{MAIN__} doesn't exist)\n+set a breakpoint at @code{MAIN__} (or @code{MAIN___} or @code{MAIN_} if\n+@code{MAIN__} doesn't exist)\n and run the program until it hits the breakpoint.\n At that point, the\n main program unit is activated and about to execute its first"}, {"sha": "4108bb850bcb6db68c7b1cf26b60bbd01a8dfd6a", "filename": "gcc/f/ffe.texi", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fffe.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fffe.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fffe.texi?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -1,3 +1,7 @@\n+@c Copyright (C) 1999 Free Software Foundation, Inc.\n+@c This is part of the G77 manual.\n+@c For copying conditions, see the file g77.texi.\n+\n @node Front End\n @chapter Front End\n @cindex GNU Fortran Front End (FFE)\n@@ -375,15 +379,15 @@ Whether @samp{Y} and @samp{Z} are local variables,\n additional function entry points,\n or dummy arguments to additional entry points\n is not known\n-until the @samp{ENTRY} statement is parsed.\n+until the @code{ENTRY} statement is parsed.\n \n @item\n Similarly, whether @samp{TMP} is a local variable is not known\n until the @samp{READ *, TMP} statement is parsed.\n \n @item\n The initial values for @samp{EE} and @samp{PI}\n-are not known until after the @samp{DATA} statement is parsed.\n+are not known until after the @code{DATA} statement is parsed.\n \n @item\n Whether @samp{FRED} is a function returning type @code{REAL}\n@@ -404,7 +408,7 @@ especially when @code{ASSIGN}'ed.)\n \n @item\n That @samp{J} is a local variable is not known\n-until the first @samp{ASSIGN} statement is parsed.\n+until the first @code{ASSIGN} statement is parsed.\n (This happens @emph{after} executable code has been seen.)\n @end itemize\n \n@@ -678,17 +682,17 @@ END\n \n The arguments to the two calls to @samp{LFUNC}\n require dynamic allocation (at run time),\n-but are not required during execution of the @samp{CALL} statements.\n+but are not required during execution of the @code{CALL} statements.\n \n So, the scopes of those temporaries must be within blocks inside\n the block corresponding to the Fortran @code{IF} block.\n \n This cannot be represented ``naturally''\n in vanilla C, nor in GBEL.\n-The @samp{if}, @samp{elseif}, @samp{else},\n-and @samp{endif} constructs\n+The @code{if}, @code{elseif}, @code{else},\n+and @code{endif} constructs\n provided by both languages must,\n-for a given @samp{if} block,\n+for a given @code{if} block,\n share the same C/GBE block.\n \n Therefore, any temporaries needed during evaluation of @samp{expr}\n@@ -793,7 +797,7 @@ as if @samp{SELECT CASE(temp0)} had been written.\n Each corresponding @code{CASE} is replaced with @samp{CASE(@var{i})},\n where @var{i} is the ordinal for that case,\n determined while, or before,\n-generating the cascade of @samp{if}-related constructs\n+generating the cascade of @code{if}-related constructs\n to cope with @code{CHARACTER} selection.\n \n @item"}, {"sha": "8d0a08f2d679e34602df32a336d01dc5d55c5988", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 161, "deletions": 129, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -2,7 +2,7 @@\n @c %**start of header\n @setfilename g77.info\n \n-@set last-update 1999-04-03\n+@set last-update 1999-04-17\n @set copyrights-g77 1995-1999\n \n @include root.texi\n@@ -1388,7 +1388,7 @@ by type.  Explanations are in the following sections.\n @item Shorthand Options\n @xref{Shorthand Options}.\n @smallexample\n--ff66  -fno-f66  -ff77  -fno-f77  -fugly  -fno-ugly\n+-ff66  -fno-f66  -ff77  -fno-f77  -fno-ugly\n @end smallexample\n \n @item Fortran Language Options\n@@ -1529,7 +1529,7 @@ Fortran source code that should not be preprocessed.\n Such source code cannot contain any preprocessor directives, such\n as @code{#include}, @code{#define}, @code{#if}, and so on.\n \n-You can force @samp{.f} files to be preprocessed by @samp{cpp} by using\n+You can force @samp{.f} files to be preprocessed by @code{cpp} by using\n @samp{-x f77-cpp-input}.\n @xref{LEX}.\n \n@@ -1656,7 +1656,7 @@ and when the resulting commands compile Fortran source files.\n This option is obsolete in @code{egcs}\n as of version 1.1.\n The effect is instead achieved\n-by the @samp{lang_init_options} routine\n+by the @code{lang_init_options} routine\n in @file{egcs/gcc/f/com.c}.\n \n @cindex consistency checks\n@@ -1720,6 +1720,10 @@ for other options accepted by the compiler:\n @item -fugly\n @cindex ugly features\n @cindex features, ugly\n+@emph{Note:} This option is no longer supported.\n+The information, below, is provided to aid\n+in the conversion of old scripts.\n+\n Specify that certain ``ugly'' constructs are to be quietly accepted.\n Same as:\n \n@@ -1734,14 +1738,6 @@ or well-maintained portable Fortran code, but widely used\n in old code.\n @xref{Distensions}, for more information.\n \n-@emph{Note:} The @samp{-fugly} option is likely to\n-be removed in a future version.\n-Implicitly enabling all the @samp{-fugly-*} options\n-is unlikely to be feasible, or sensible, in the future,\n-so users should learn to specify only those\n-@samp{-fugly-*} options they really need for a\n-particular source file.\n-\n @cindex -fno-ugly option\n @cindex options, -fno-ugly\n @item -fno-ugly\n@@ -2733,7 +2729,7 @@ some machines, but might slow down a program that doesn't.\n \n This option is effective when the floating-point unit is set to work in\n IEEE 854 `extended precision'---as it typically is on x86 and m68k GNU\n-systems---rather than IEEE 754 double precision.  @code{-ffloat-store}\n+systems---rather than IEEE 754 double precision.  @samp{-ffloat-store}\n tries to remove the extra precision by spilling data from floating-point\n registers into memory and this typically involves a big performance\n hit.  However, it doesn't affect intermediate results, so that it is\n@@ -2852,7 +2848,7 @@ currently recognized as such.  This option unrolls only iterative\n @c DL: Check my understanding of -funroll-all-loops v. -funroll-loops is correct.\n Probably improves performance on code using @code{DO WHILE} loops by\n unrolling them in addition to iterative @code{DO} loops.  In the absence\n-of @code{DO WHILE}, this option is equivalent to @code{-funroll-loops}\n+of @code{DO WHILE}, this option is equivalent to @samp{-funroll-loops}\n but possibly slower.\n \n @item -fno-move-all-movables\n@@ -3877,7 +3873,7 @@ For example: @samp{PRINT *, 'My name is Bob'}.\n @item\n A metasyntactic variable---that is, a name used in this document\n to serve as a placeholder for whatever text is used by the\n-user or programmer--appears as shown in the following example:\n+user or programmer---appears as shown in the following example:\n \n ``The @code{INTEGER @var{ivar}} statement specifies that\n @var{ivar} is a variable or array of type @code{INTEGER}.''\n@@ -5666,7 +5662,7 @@ These disagreements strongly suggest that Fortran programmers,\n and certainly existing Fortran programs, disagree about the\n meaning of such invocations.\n \n-The first version of @samp{JCB002} didn't accommodate some compilers'\n+The first version of @code{JCB002} didn't accommodate some compilers'\n treatment of @samp{INT(I1-I2)} where @samp{I1} and @samp{I2} are\n @code{INTEGER*2}.\n In such a case, these compilers apparently convert both\n@@ -5678,7 +5674,7 @@ However, the results of the careful analyses done on the outputs\n of programs compiled by these various compilers show that they\n all implement either @samp{Interp 1} or @samp{Interp 2} above.\n \n-Specifically, it is believed that the new version of @samp{JCB002}\n+Specifically, it is believed that the new version of @code{JCB002}\n above will confirm that:\n \n @itemize @bullet\n@@ -6396,7 +6392,7 @@ but that seems to be overkill for a product in beta test.\n \n Note 2: Rules for InitialCaps names are:\n \n-@itemize --\n+@itemize @minus\n @item\n Must be a single uppercase letter, @strong{or}\n @item\n@@ -6409,7 +6405,7 @@ valid InitialCaps names, but @samp{AB}, @samp{A2}, and @samp{ABC} are\n not.\n Note that most, but not all, built-in names meet these\n requirements---the exceptions are some of the two-letter format\n-specifiers, such as @samp{BN} and @samp{BZ}.\n+specifiers, such as @code{BN} and @code{BZ}.\n \n Here are the names of the corresponding command-line options:\n \n@@ -6603,7 +6599,7 @@ meaning is to be assumed.\n \n @code{g77} treats double-quote (@samp{\"})\n as beginning an octal constant of @code{INTEGER(KIND=1)} type\n-when the @code{-fvxt} option is specified.\n+when the @samp{-fvxt} option is specified.\n The form of this octal constant is\n \n @example\n@@ -6614,7 +6610,7 @@ The form of this octal constant is\n where @var{octal-digits} is a nonempty string of characters in\n the set @samp{01234567}.\n \n-For example, the @code{-fvxt} option permits this:\n+For example, the @samp{-fvxt} option permits this:\n \n @example\n PRINT *, \"20\n@@ -6647,7 +6643,7 @@ a fixed-form source file\n as a continuation character rather than\n as the beginning of a comment\n (as it does in any other column)\n-when the @code{-fvxt} option is specified.\n+when the @samp{-fvxt} option is specified.\n \n The following program, when run, prints a message indicating\n whether it is interpreted according to GNU Fortran (and Fortran 90)\n@@ -6758,7 +6754,7 @@ provided for by that standard.\n Automatic conversion of numeric\n expressions to @code{INTEGER(KIND=1)} in contexts such as:\n \n-@itemize --\n+@itemize @minus\n @item\n Array-reference indexes.\n @item\n@@ -6877,18 +6873,6 @@ portable constructs, are accepted.\n These are humorously referred to as ``distensions'',\n extensions that just plain look ugly in the harsh light of day.\n \n-@emph{Note:} The @samp{-fugly} option, which currently serves\n-as shorthand to enable all of the distensions below, is likely to\n-be removed in a future version of @code{g77}.\n-That's because it's likely new distensions will be added that\n-conflict with existing ones in terms of assigning meaning to\n-a given chunk of code.\n-(Also, it's pretty clear that users should not use @samp{-fugly}\n-as shorthand when the next release of @code{g77} might add a\n-distension to that that causes their existing code, when recompiled,\n-to behave differently---perhaps even fail to compile or run\n-correctly.)\n-\n @menu\n * Ugly Implicit Argument Conversion::  Disabled via @samp{-fno-ugly-args}.\n * Ugly Assumed-Size Arrays::           Enabled via @samp{-fugly-assumed}.\n@@ -7182,7 +7166,7 @@ ASSIGN 10 TO I\n Normally, for portability and improved diagnostics, @code{g77}\n reserves distinct storage for a ``sibling'' of @samp{I}, used\n only for @code{ASSIGN} statements to that variable (along with\n-the corresponding assigned-@code{GOTO} and assigned-@samp{FORMAT}-I/O\n+the corresponding assigned-@code{GOTO} and assigned-@code{FORMAT}-I/O\n statements that reference the variable).\n \n However, some code (that violates the ANSI FORTRAN 77 standard)\n@@ -7411,15 +7395,15 @@ on at least some systems:\n The @code{libg2c} library\n shipped with any @code{g77} that warns\n about invocation of a non-Y2K-compliant intrinsic\n-has renamed the @samp{EXTERNAL} procedure names\n+has renamed the @code{EXTERNAL} procedure names\n of those intrinsics.\n This is done so that\n the @code{libg2c} implementations of these intrinsics\n cannot be directly linked to\n-as @samp{EXTERNAL} names\n+as @code{EXTERNAL} names\n (which normally would avoid the non-Y2K-intrinsic warning).\n \n-The renamed forms of the @samp{EXTERNAL} names\n+The renamed forms of the @code{EXTERNAL} names\n of these renamed procedures\n may be linked to\n by appending the string @samp{_y2kbug}\n@@ -7435,35 +7419,35 @@ CALL DATE_Y2KBUG (STR)\n CALL VXTIDATE_Y2KBUG (MM, DD, YY)\n @end smallexample\n \n-(Note that the @samp{EXTERNAL} statement\n+(Note that the @code{EXTERNAL} statement\n is not actually required,\n since the modified names are not recognized as intrinsics\n by the current version of @code{g77}.\n But it is shown in this specific case,\n for purposes of illustration.)\n \n-The renaming of @samp{EXTERNAL} procedure names of these intrinsics\n+The renaming of @code{EXTERNAL} procedure names of these intrinsics\n causes unresolved references at link time.\n For example, @samp{EXTERNAL DATE; CALL DATE(STR)}\n is normally compiled by @code{g77}\n as, in C, @samp{date_(&str, 20);}.\n-This, in turn, links to the @samp{date_} procedure\n-in the @samp{libE77} portion of @code{libg2c},\n+This, in turn, links to the @code{date_} procedure\n+in the @code{libE77} portion of @code{libg2c},\n which purposely calls a nonexistent procedure\n-named @samp{G77_date_y2kbuggy_0}.\n+named @code{G77_date_y2kbuggy_0}.\n The resulting link-time error is designed, via this name,\n to encourage the programmer to look up the\n index entries to this portion of the @code{g77} documentation.\n \n-Generally, we recommend that the @samp{EXTERNAL} method\n+Generally, we recommend that the @code{EXTERNAL} method\n of invoking procedures in @code{libg2c}\n @emph{not} be used.\n When used, some of the correctness checking\n normally performed by @code{g77}\n is skipped.\n \n In particular, it is probably better to use the\n-@samp{INTRINSIC} method of invoking\n+@code{INTRINSIC} method of invoking\n non-Y2K-compliant procedures,\n so anyone compiling the code\n can quickly notice the potential Y2K problems\n@@ -7491,14 +7475,14 @@ So, linking newly-compiled code\n (invoking one of the intrinsics in question)\n to an old library\n might yield an unresolved reference\n-to @samp{G77_date_y2kbug_0}.\n-(The old library calls it @samp{G77_date_0}.)\n+to @code{G77_date_y2kbug_0}.\n+(The old library calls it @code{G77_date_0}.)\n \n Similarly, linking previously-compiled code\n to a new library\n might yield an unresolved reference\n-to @samp{G77_vxtidate_0}.\n-(The new library calls it @samp{G77_vxtidate_y2kbug_0}.)\n+to @code{G77_vxtidate_0}.\n+(The new library calls it @code{G77_vxtidate_y2kbug_0}.)\n \n The proper fix for the above problems\n is to obtain the latest release of @code{g77}\n@@ -8160,7 +8144,7 @@ options @code{g77} passes by running @samp{g77 -v}.\n @pindex f2c\n @cindex cfortran.h\n @cindex Netlib\n-Even if you don't actually use it as a compiler, @samp{f2c} from\n+Even if you don't actually use it as a compiler, @code{f2c} from\n @uref{ftp://ftp.netlib.org/f2c/src}, can be a useful tool when you're\n interfacing (linking) Fortran and C@.\n @xref{f2c Skeletons and Prototypes,,Generating Skeletons and Prototypes with @code{f2c}}.\n@@ -8187,7 +8171,7 @@ Generally, C code written to link with\n called from Fortran---should @samp{#include <g2c.h>} to define the C\n versions of the Fortran types.\n Don't assume Fortran @code{INTEGER} types\n-correspond to C @samp{int}s, for instance; instead, declare them as\n+correspond to C @code{int}s, for instance; instead, declare them as\n @code{integer}, a type defined by @file{g2c.h}.\n @file{g2c.h} is installed where @code{gcc} will find it by\n default, assuming you use a copy of @code{gcc} compatible with\n@@ -8202,7 +8186,7 @@ A simple and foolproof way to write @code{g77}-callable C routines---e.g.@: to\n interface with an existing library---is to write a file (named, for\n example, @file{fred.f}) of dummy Fortran\n skeletons comprising just the declaration of the routine(s) and dummy\n-arguments plus @samp{END} statements.\n+arguments plus @code{END} statements.\n Then run @code{f2c} on file @file{fred.f} to produce @file{fred.c}\n into which you can edit\n useful code, confident the calling sequence is correct, at least.\n@@ -8216,7 +8200,7 @@ as the return type of a @code{REAL} @code{FUNCTION}.)\n @samp{-P} option to generate C prototypes appropriate for calling the\n Fortran.@footnote{The files generated like this can also be used for\n inter-unit consistency checking of dummy and actual arguments, although\n-the @samp{ftnchek} tool from @uref{ftp://ftp.netlib.org/fortran}\n+the @code{ftnchek} tool from @uref{ftp://ftp.netlib.org/fortran}\n or @uref{ftp://ftp.dsm.fordham.edu} is\n probably better for this purpose.}\n If the Fortran code containing any\n@@ -8462,11 +8446,11 @@ described in this section.\n @cindex statements, PROGRAM\n \n When @code{g77} compiles a main program unit, it gives it the public\n-procedure name @samp{MAIN__}.\n+procedure name @code{MAIN__}.\n The @code{libg2c} library has the actual @code{main()} procedure\n as is typical of C-based environments, and\n it is this procedure that performs some initial start-up\n-activity and then calls @samp{MAIN__}.\n+activity and then calls @code{MAIN__}.\n \n Generally, @code{g77} and @code{libg2c} are designed so that you need not\n include a main program unit written in Fortran in your program---it\n@@ -8508,7 +8492,7 @@ Fortran code.\n \n The standard way to get around this problem is to set a break\n point (a one-time, or temporary, break point will do) at\n-the entrance to @samp{MAIN__}, and then run the program.\n+the entrance to @code{MAIN__}, and then run the program.\n A convenient way to do so is to add the @code{gdb} command\n \n @example\n@@ -8525,7 +8509,7 @@ unit of your program.\n \n Of course, if you really want to set a break point at some\n other place in your program and just start the program\n-running, without first breaking at @samp{MAIN__},\n+running, without first breaking at @code{MAIN__},\n that should work fine.\n \n @node Procedures\n@@ -9322,7 +9306,7 @@ Instead, make a separate @code{INCLUDE} file that defines\n so you can more easily change the actual numbers in the future.\n \n The information below is culled from the definition\n-of @samp{F_err} in @file{f/runtime/libI77/err.c} in the\n+of @code{F_err} in @file{f/runtime/libI77/err.c} in the\n @code{g77} source tree.\n \n @smallexample\n@@ -10234,7 +10218,7 @@ it provides either form of detection are welcome.\n \n For several versions prior to 0.5.20, @code{g77} configured its\n version of the @code{libf2c} run-time library so that one of\n-its configuration macros, @samp{ALWAYS_FLUSH}, was defined.\n+its configuration macros, @code{ALWAYS_FLUSH}, was defined.\n \n This was done as a result of a belief that many programs expected\n output to be flushed to the operating system (under UNIX, via\n@@ -10259,7 +10243,7 @@ non-flushing library routines.)\n \n @xref{Always Flush Output}, for information on how to modify\n the @code{g77} source tree so that a version of @code{libg2c}\n-can be built and installed with the @samp{ALWAYS_FLUSH} macro defined.\n+can be built and installed with the @code{ALWAYS_FLUSH} macro defined.\n \n @node Large File Unit Numbers\n @subsection Large File Unit Numbers\n@@ -10278,13 +10262,13 @@ file unit number that is out of the range accepted by\n @code{libg2c}.\n Normally, this range is 0 through 99, and the high end\n of the range is controlled by a @code{libg2c} source-file\n-macro named @samp{MXUNIT}.\n+macro named @code{MXUNIT}.\n \n If you can easily change your program to use unit numbers\n in the range 0 through 99, you should do so.\n \n Otherwise, see @ref{Larger File Unit Numbers}, for information on how\n-to change @samp{MXUNIT} in @code{libg2c} so you can build and\n+to change @code{MXUNIT} in @code{libg2c} so you can build and\n install a new version of @code{libg2c} that supports the larger\n unit numbers you need.\n \n@@ -10306,11 +10290,11 @@ in your system's documentation.\n @cindex x86 floating-point\n If your program depends on exact IEEE 754 floating-point handling it may\n help on some systems---specifically x86 or m68k hardware---to use\n-the @code{-ffloat-store} option or to reset the precision flag on the\n+the @samp{-ffloat-store} option or to reset the precision flag on the\n floating-point unit @xref{Optimize Options}.\n \n However, it might be better simply to put the FPU into double precision\n-mode and not take the performance hit of @code{-ffloat-store}.  On x86\n+mode and not take the performance hit of @samp{-ffloat-store}.  On x86\n and m68k GNU systems you can do this with a technique similar to that\n for turning on floating-point exceptions @xref{Floating-point Exception\n Handling}.  The control word could be set to double precision by\n@@ -10430,15 +10414,6 @@ Currently, @code{g77} supports only automatic arrays, not\n @code{RECURSIVE} procedures or other means of explicitly\n specifying that variables or arrays are automatic.\n \n-@cindex -fugly option\n-@cindex options, -fugly\n-@item -fugly\n-Fix the source code so that @samp{-fno-ugly} will work.\n-Note that, for many programs, it is difficult to practically\n-avoid using the features enabled via @samp{-fugly-init}, and these\n-features pose the lowest risk of writing nonportable code, among the\n-various ``ugly'' features.\n-\n @cindex -f@var{group}-intrinsics-hide option\n @cindex options, -f@var{group}-intrinsics-hide\n @item -f@var{group}-intrinsics-hide\n@@ -10975,16 +10950,16 @@ simply too large for the system, or buggy.)\n @subsection Nothing Happens\n @cindex nothing happens\n @cindex naming programs\n-@cindex @samp{test} programs\n-@cindex programs, @samp{test}\n+@cindex @code{test} programs\n+@cindex programs, @code{test}\n It is occasionally reported that a ``simple'' program,\n such as a ``Hello, World!'' program, does nothing when\n it is run, even though the compiler reported no errors,\n despite the program containing nothing other than a\n simple @code{PRINT} statement.\n \n This most often happens because the program has been\n-compiled and linked on a UNIX system and named @samp{test},\n+compiled and linked on a UNIX system and named @code{test},\n though other names can lead to similarly unexpected\n run-time behavior on various systems.\n \n@@ -11151,7 +11126,7 @@ used by @code{g77}, handles only double-precision values.\n Since @samp{0.2} in the program is a single-precision value, it\n is converted to double precision (still in binary notation)\n before being converted back to decimal.\n-The conversion to binary appends _binary_ zero digits to the\n+The conversion to binary appends @emph{binary} zero digits to the\n original value---which, again, is an inexact approximation of\n 0.2---resulting in an approximation that is much less exact\n than is connoted by the use of double precision.\n@@ -11196,7 +11171,7 @@ with that produced by some other Fortran implementations.\n A useful source of information on floating-point computation is David\n Goldberg, `What Every Computer Scientist Should Know About\n Floating-Point Arithmetic', Computing Surveys, 23, March 1991, pp.@:\n-5--48.\n+5-48.\n An online version is available at\n @uref{http://docs.sun.com},\n and there is a supplemented version, in PostScript form, at\n@@ -11259,6 +11234,7 @@ GNU Fortran language:\n * Array Bounds Expressions::\n * POINTER Statements::\n * Sensible Non-standard Constructs::\n+* READONLY Keyword::\n * FLUSH Statement::\n * Expressions in FORMAT Statements::\n * Explicit Assembler Code::\n@@ -11344,7 +11320,7 @@ but one of the most frequent bugs encountered by new users is\n accidentally writing fixed-form source code into and beyond\n column 73.\n So, maybe the users of old code would be able to more easily handle\n-having to specify, say, a @code{-Wno-col73to80} option.\n+having to specify, say, a @samp{-Wno-col73to80} option.\n \n @node Fortran 90 Support\n @subsection Fortran 90 Support\n@@ -11587,6 +11563,34 @@ specification of an attribute), please submit a\n bug report with an explanation, so we can consider\n fixing @code{g77} just for cases like yours.\n \n+@node READONLY Keyword\n+@subsection @code{READONLY} Keyword\n+@cindex READONLY\n+\n+Support for @code{READONLY}, in @code{OPEN} statements,\n+requires @code{libg2c} support,\n+to make sure that @samp{CLOSE(@dots{},STATUS='DELETE')}\n+does not delete a file opened on a unit\n+with the @code{READONLY} keyword,\n+and perhaps to trigger a fatal diagnostic\n+if a @code{WRITE} or @code{PRINT}\n+to such a unit is attempted.\n+\n+@emph{Note:} It is not sufficient for @code{g77} and @code{libg2c}\n+(its version of @code{libf2c})\n+to assume that @code{READONLY} does not need some kind of explicit support\n+at run time,\n+due to UNIX systems not (generally) needing it.\n+@code{g77} is not just a UNIX-based compiler!\n+\n+Further, mounting of non-UNIX filesystems on UNIX systems\n+(such as via NFS)\n+might require proper @code{READONLY} support.\n+\n+@cindex SHARED\n+(Similar issues might be involved with supporting the @code{SHARED}\n+keyword.)\n+\n @node FLUSH Statement\n @subsection @code{FLUSH} Statement\n \n@@ -11811,22 +11815,36 @@ be supported by a future version of @code{g77}.\n @cindex automatic variables\n @cindex variables, automatic\n \n-@code{g77} doesn't support the @code{AUTOMATIC} keyword that\n+@code{g77} doesn't support the @code{AUTOMATIC} statement that\n @code{f2c} does.\n \n-It is not yet clear exactly what this statement would achieve.\n-The semantic equivalent would be provided by @code{RECURSIVE}\n-combined with lack of @code{SAVE}.\n-In that sense, perhaps all it would provide is an\n-overriding of an unadorned (blanket) @code{SAVE} statement\n-for specific variables.\n+@code{AUTOMATIC} would identify a variable or array\n+as not being @code{SAVE}'d, which is normally the default,\n+but which would be especially useful for code that, @emph{generally},\n+needed to be compiled with the @samp{-fno-automatic} option.\n+\n+@code{AUTOMATIC} also would serve as a hint to the compiler that placing\n+the variable or array---even a very large array--on the stack is acceptable.\n+\n+@code{AUTOMATIC} would not, by itself, designate the containing procedure\n+as recursive.\n \n-It might also serve as a hint to the compiler that placing\n-even a very large array on the stack is acceptable.\n+@code{AUTOMATIC} should work syntactically like @code{SAVE},\n+in that @code{AUTOMATIC} with no variables listed should apply to\n+all pertinent variables and arrays\n+(which would not include common blocks or their members).\n \n-Perhaps it should disallow @code{DATA}\n-or other specification of any initial values\n-for affected variables as well.\n+Variables and arrays denoted as @code{AUTOMATIC}\n+would not be permitted to be initialized via @code{DATA}\n+or other specification of any initial values,\n+requiring explicit initialization,\n+such as via assignment statements.\n+\n+@cindex UNSAVE\n+@cindex STATIC\n+Perhaps @code{UNSAVE} and @code{STATIC},\n+as strict semantic opposites to @code{SAVE} and @code{AUTOMATIC},\n+should be provided as well.\n \n @node Suppressing Space Padding\n @subsection Suppressing Space Padding of Source Lines\n@@ -11934,7 +11952,7 @@ A convenient trick is to compile this something like:\n @smallexample\n gcc -o libtrapfpe.a trapfpe.c\n @end smallexample\n-and then use it by adding @code{-trapfpe} to the @code{g77} command line\n+and then use it by adding @samp{-trapfpe} to the @code{g77} command line\n when linking.\n \n @node Nonportable Conversions\n@@ -11949,7 +11967,7 @@ is type @code{REAL}), that other compilers might\n quietly accept.\n \n Some of these conversions are accepted by @code{g77}\n-when the @samp{-fugly} option is specified.\n+when the @samp{-fugly-logint} option is specified.\n Perhaps it should accept more or all of them.\n \n @node Large Automatic Arrays\n@@ -12625,7 +12643,7 @@ could be very helpful.\n @cindex logical expressions, comparing\n \n Use of @code{.EQ.} and @code{.NE.} on @code{LOGICAL} operands\n-is not supported, except via @samp{-fugly}, which is not\n+is not supported, except via @samp{-fugly-logint}, which is not\n recommended except for legacy code (where the behavior expected\n by the @emph{code} is assumed).\n \n@@ -12683,6 +12701,20 @@ that were well-designed in the first place.\n you, without knowing more context, whether the @samp{&} and @samp{-}\n operators are infix (binary) or unary!)\n \n+Most dangerous of all is the fact that,\n+even assuming consensus on its meaning,\n+an expression like @samp{L.AND.M.EQ.N},\n+if it is the result of a typographical error,\n+doesn't @emph{look} like it has such a typo.\n+Even experienced Fortran programmers would not likely notice that\n+@samp{L.AND.M.EQV.N} was, in fact, intended.\n+\n+So, this is a prime example of a circumstance in which\n+a quality compiler diagnoses the code,\n+instead of leaving it up to someone debugging it\n+to know to turn on special compiler options\n+that might diagnose it.\n+\n @node Order of Side Effects\n @subsection Order of Side Effects\n @cindex side effects, order of evaluation\n@@ -13539,13 +13571,13 @@ when compiling most any kind of program.\n which is used during the build of @code{gcc} to\n build a list of all options that are accepted by\n at least one language's compiler.\n-This list goes into the @samp{lang_options} array\n+This list goes into the @code{lang_options} array\n in @file{gcc/toplev.c}, which uses this array to\n determine whether a particular option should be\n offered to the linked-in front end for processing\n-by calling @samp{lang_option_decode}, which, for\n+by calling @code{lang_option_decode}, which, for\n @code{g77}, is in @file{@value{path-g77}/com.c} and just\n-calls @samp{ffe_decode_option}.\n+calls @code{ffe_decode_option}.\n \n If the linked-in front end ``rejects'' a\n particular option passed to it, @file{toplev.c}\n@@ -13555,7 +13587,7 @@ language's compiler is willing to accept it.\n This allows commands like @samp{gcc -fno-asm foo.c bar.f}\n to work, even though Fortran compilation does\n not currently support the @samp{-fno-asm} option;\n-even though the @code{f771} version of @samp{lang_decode_option}\n+even though the @code{f771} version of @code{lang_decode_option}\n rejects @samp{-fno-asm}, @file{toplev.c} doesn't\n produce a diagnostic because some other language (C)\n does accept it.\n@@ -13568,7 +13600,7 @@ a warning about this would be helpful if it were\n possible.\n \n Code that processes Fortran options is found in\n-@file{@value{path-g77}/top.c}, function @samp{ffe_decode_option}.\n+@file{@value{path-g77}/top.c}, function @code{ffe_decode_option}.\n This code needs to check positive and negative forms\n of each option.\n \n@@ -13588,9 +13620,9 @@ Accessor macros for Fortran options, used by code\n in the @code{g77} FFE, are defined in @file{@value{path-g77}/top.h}.\n \n @emph{Compiler options} are listed in @file{gcc/toplev.c}\n-in the array @samp{f_options}.\n-An option not listed in @samp{lang_options} is\n-looked up in @samp{f_options} and handled from there.\n+in the array @code{f_options}.\n+An option not listed in @code{lang_options} is\n+looked up in @code{f_options} and handled from there.\n \n The defaults for compiler options are set in the\n global definitions for the corresponding variables,\n@@ -13608,7 +13640,7 @@ Change the way @code{f771} handles the @samp{-fset-g77-defaults}\n option, which is always provided as the first option when\n called by @code{g77} or @code{gcc}.\n \n-This code is in @samp{ffe_decode_options} in @file{@value{path-g77}/top.c}.\n+This code is in @code{ffe_decode_options} in @file{@value{path-g77}/top.c}.\n Have it change just the variables that you want to default\n to a different setting for Fortran compiles compared to\n compiles of other languages.\n@@ -13630,7 +13662,7 @@ are passed via this mechanism.\n \n @item EGCS-1.1\n @itemx EGCS-1.2\n-Change the @samp{lang_init_options} routine in @file{egcs/gcc/f/com.c}.\n+Change the @code{lang_init_options} routine in @file{egcs/gcc/f/com.c}.\n \n (Note that these versions of @code{g77}\n perform internal consistency checking automatically\n@@ -13670,7 +13702,7 @@ them show up only given certain kinds of (popular) input.\n \n @itemize @bullet\n @item\n-Improve @samp{malloc} package and its uses to specify more info about\n+Improve @code{malloc} package and its uses to specify more info about\n memory pools and, where feasible, use obstacks to implement them.\n \n @item\n@@ -13697,11 +13729,11 @@ unimplemented-statement catch-all.\n \n @item\n Throughout @code{g77}, don't pass line/column pairs where\n-a simple @samp{ffewhere} type, which points to the error as much as is\n-desired by the configuration, will do, and don't pass @samp{ffelexToken} types\n-where a simple @samp{ffewhere} type will do.\n+a simple @code{ffewhere} type, which points to the error as much as is\n+desired by the configuration, will do, and don't pass @code{ffelexToken} types\n+where a simple @code{ffewhere} type will do.\n Then, allow new default\n-configuration of @samp{ffewhere} such that the source line text is not\n+configuration of @code{ffewhere} such that the source line text is not\n preserved, and leave it to things like Emacs' next-error function\n to point to them (now that @samp{next-error} supports column,\n or, perhaps, character-offset, numbers).\n@@ -13751,7 +13783,7 @@ that are at all worth inlining.\n @item\n When doing @samp{CHAR_VAR = CHAR_FUNC(@dots{})},\n and it's clear that types line up\n-and @samp{CHAR_VAR} is addressable or not a @samp{VAR_DECL},\n+and @samp{CHAR_VAR} is addressable or not a @code{VAR_DECL},\n make @samp{CHAR_VAR}, not a\n temporary, be the receiver for @samp{CHAR_FUNC}.\n (This is now done for @code{COMPLEX} variables.)\n@@ -13799,7 +13831,7 @@ external names for @code{COMPLEX} functions in some cases once @code{g77} uses\n @code{gcc} rather than @code{f2c} calling conventions.)\n \n @item\n-Do something useful with @samp{doiter} references where possible.\n+Do something useful with @code{doiter} references where possible.\n For example, @samp{CALL FOO(I)} cannot modify @samp{I} if within\n a @code{DO} loop that uses @samp{I} as the\n iteration variable, and the back end might find that info useful\n@@ -13963,7 +13995,7 @@ provides it via its configuration.\n \n @itemize @bullet\n @item\n-Switch to using @samp{REAL_VALUE_TYPE} to represent floating-point constants\n+Switch to using @code{REAL_VALUE_TYPE} to represent floating-point constants\n exclusively so the target float format need not be required.\n This\n means changing the way @code{g77} handles initialization of aggregate areas\n@@ -14016,13 +14048,13 @@ Come up with better naming conventions for @samp{-D} to establish requirements\n to achieve desired implementation dialect via @file{proj.h}.\n \n @item\n-Clean up used tokens and @samp{ffewhere}s in @samp{ffeglobal_terminate_1}.\n+Clean up used tokens and @code{ffewhere}s in @code{ffeglobal_terminate_1}.\n \n @item\n-Replace @file{sta.c} @samp{outpooldisp} mechanism with @samp{malloc_pool_use}.\n+Replace @file{sta.c} @code{outpooldisp} mechanism with @code{malloc_pool_use}.\n \n @item\n-Check for @samp{opANY} in more places in @file{com.c}, @file{std.c},\n+Check for @code{opANY} in more places in @file{com.c}, @file{std.c},\n and @file{ste.c}, and get rid of the @samp{opCONVERT(opANY)} kludge\n (after determining if there is indeed no real need for it).\n \n@@ -14064,22 +14096,22 @@ to the official standard, or put documentation of the rules as used\n in the code@dots{}uh@dots{}in the code.\n \n @item\n-Some @samp{ffebld_new} calls (those outside of @file{ffeexpr.c} or\n-inside but invoked via paths not involving @samp{ffeexpr_lhs} or\n-@samp{ffeexpr_rhs}) might be creating things\n+Some @code{ffebld_new} calls (those outside of @file{ffeexpr.c} or\n+inside but invoked via paths not involving @code{ffeexpr_lhs} or\n+@code{ffeexpr_rhs}) might be creating things\n in improper pools, leading to such things staying around too long or\n (doubtful, but possible and dangerous) not long enough.\n \n @item\n-Some @samp{ffebld_list_new} (or whatever) calls might not be matched by\n-@samp{ffebld_list_bottom} (or whatever) calls, which might someday matter.\n+Some @code{ffebld_list_new} (or whatever) calls might not be matched by\n+@code{ffebld_list_bottom} (or whatever) calls, which might someday matter.\n (It definitely is not a problem just yet.)\n \n @item\n Probably not doing clean things when we fail to @code{EQUIVALENCE} something\n due to alignment/mismatch or other problems---they end up without\n-@samp{ffestorag} objects, so maybe the backend (and other parts of the front\n-end) can notice that and handle like an @samp{opANY} (do what it wants, just\n+@code{ffestorag} objects, so maybe the backend (and other parts of the front\n+end) can notice that and handle like an @code{opANY} (do what it wants, just\n don't complain or crash).\n Most of this seems to have been addressed\n by now, but a code review wouldn't hurt.\n@@ -14097,7 +14129,7 @@ clutter.\n @item\n When @code{FUNCTION} and @code{ENTRY} point types disagree (@code{CHARACTER}\n lengths, type classes, and so on),\n-@samp{ANY}-ize the offending @code{ENTRY} point and any @emph{new} dummies\n+@code{ANY}-ize the offending @code{ENTRY} point and any @emph{new} dummies\n it specifies.\n \n @item\n@@ -14166,7 +14198,7 @@ as the above is just a sample, no such section exists.\n * INTGLOB::     Intrinsic also used as name of global.\n * LEX::         Various lexer messages\n * GLOBALS::     Disagreements about globals.\n-* LINKFAIL::    When linking @samp{f771} fails.\n+* LINKFAIL::    When linking @code{f771} fails.\n * Y2KBAD::      Use of non-Y2K-compliant intrinsic.\n @end menu\n \n@@ -14285,8 +14317,8 @@ expects the Fortran 90 interpretation, you can:\n @itemize @bullet\n @item\n Change it to @samp{DBLE(@var{expr})} (if @var{intrinsic} is\n-@samp{REAL}) or @samp{DIMAG(@var{expr})} (if @var{intrinsic}\n-is @samp{AIMAG})\n+@code{REAL}) or @samp{DIMAG(@var{expr})} (if @var{intrinsic}\n+is @code{AIMAG})\n if it expected the Fortran 90 interpretation.\n \n This assumes @var{expr} is @code{COMPLEX(KIND=2)}---if it is\n@@ -14574,13 +14606,13 @@ C On XYZZY systems, remove \"C\" on next line:\n      CALL XYZZY_RESET\n @end smallexample\n \n-However, that leaves the first @samp{C} in the @samp{CALL}\n+However, that leaves the first @samp{C} in the @code{CALL}\n statement in column 6, making it a comment line, which is\n not really what the author intended, and which is likely\n to result in one of the above-listed diagnostics.\n \n @emph{Replacing} the @samp{C} in column 1 with a space\n-is the proper change to make, to ensure the @samp{CALL}\n+is the proper change to make, to ensure the @code{CALL}\n keyword starts in or after column 7.\n \n Another common mistake like this is to forget that fixed-form"}, {"sha": "cae1fb31fd5438f57eb9b690afbb294b9120a2a3", "filename": "gcc/f/g77install.texi", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fg77install.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fg77install.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77install.texi?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -423,9 +423,9 @@ These problems can occur on most or all systems.\n * GNU C Required::             Why even ANSI C is not enough.\n * Patching GNU CC::            Why @code{gcc} needn't be patched.\n * Building GNU CC Necessary::  Why you can't build @emph{just} Fortran.\n-* Missing strtoul or bsearch:: When linking @samp{f771} fails.\n+* Missing strtoul or bsearch:: When linking @code{f771} fails.\n * Cleanup Kills Stage Directories::  For @code{g77} developers.\n-* LANGUAGES Macro Ignored::    Sometimes @samp{LANGUAGES} is ignored.\n+* LANGUAGES Macro Ignored::    Sometimes @code{LANGUAGES} is ignored.\n @end menu\n \n @node GNU C Required\n@@ -490,11 +490,11 @@ This information does not apply to the\n @ifclear OMIT-FSF-G77\n On SunOS4 systems, linking the @code{f771} program used to\n produce an error message concerning an undefined symbol named\n-@samp{_strtoul}, because the @samp{strtoul} library function\n+@samp{_strtoul}, because the @code{strtoul} library function\n is not provided on that system.\n \n Other systems have, in the past, been reported to not provide\n-their own @samp{strtoul} or @samp{bsearch} function.\n+their own @code{strtoul} or @code{bsearch} function.\n \n Some versions @code{g77} tried to default to providing bare-bones\n versions of @code{bsearch} and @code{strtoul} automatically,\n@@ -504,8 +504,8 @@ To limit the failures to those few systems actually missing the\n required routines, the bare-bones versions are still provided,\n in @file{@value{path-g77}/proj.c},\n if the appropriate macros are defined.\n-These are @code{NEED_BSEARCH} for @samp{bsearch} and\n-@code{NEED_STRTOUL} for @samp{NEED_STRTOUL}.\n+These are @code{NEED_BSEARCH} for @code{bsearch} and\n+@code{NEED_STRTOUL} for @code{NEED_STRTOUL}.\n \n Therefore, if you are sure your system is missing\n @code{bsearch} or @code{strtoul} in its library,\n@@ -530,8 +530,8 @@ make bootstrap BOOT_CFLAGS='-O2 -g -DNEED_STRTOUL'\n @end smallexample\n \n If you then encounter problems compiling @file{@value{path-g77}/proj.c},\n-it might be due to a discrepancy between how @samp{bsearch}\n-or @samp{strtoul} are defined by that file and how they're\n+it might be due to a discrepancy between how @code{bsearch}\n+or @code{strtoul} are defined by that file and how they're\n declared by your system's header files.\n \n In that case, you'll have to use some basic knowledge of C\n@@ -559,14 +559,14 @@ that, on demand.\n \n @node LANGUAGES Macro Ignored\n @subsubsection LANGUAGES Macro Ignored\n-@cindex @samp{LANGUAGES} macro ignored\n-@cindex ignoring @samp{LANGUAGES} macro\n+@cindex @code{LANGUAGES} macro ignored\n+@cindex ignoring @code{LANGUAGES} macro\n \n Prior to version 0.5.23 of @code{g77}\n and version 1.1 of @code{egcs},\n @code{g77} would sometimes ignore\n-the absence of @samp{f77} and @samp{F77} in the\n-@samp{LANGUAGES} macro definition used for the\n+the absence of @code{f77} and @code{F77} in the\n+@code{LANGUAGES} macro definition used for the\n @code{make} command being processed.\n \n As of @code{g77} version 0.5.23\n@@ -580,7 +580,7 @@ such as @code{g++},\n are known to go ahead and perform various\n language-specific activities when their\n respective language strings do not appear\n-in the @samp{LANGUAGES} macro in effect\n+in the @code{LANGUAGES} macro in effect\n during that invocation of @code{make}.\n \n It is expected that these remaining problems will\n@@ -669,7 +669,7 @@ As such, none of the following information is expected to\n be pertinent in future versions of @code{g77}.\n \n @menu\n-* Larger File Unit Numbers::     Raising @samp{MXUNIT}.\n+* Larger File Unit Numbers::     Raising @code{MXUNIT}.\n * Always Flush Output::          Synchronizing write errors.\n * Maximum Stackable Size::       Large arrays forced off the stack.\n * Floating-point Bit Patterns::  Possible programs building @code{g77}\n@@ -697,7 +697,7 @@ a run-time crash in @code{libf2c}, because the unit number,\n \n If you know that Fortran programs at your installation require\n the use of unit numbers higher than 99, you can change the\n-value of the @samp{MXUNIT} macro, which represents the maximum unit\n+value of the @code{MXUNIT} macro, which represents the maximum unit\n number, to an appropriately higher value.\n \n To do this, edit the file @file{@value{path-libf2c}/libI77/fio.h} in your\n@@ -707,12 +707,12 @@ To do this, edit the file @file{@value{path-libf2c}/libI77/fio.h} in your\n #define MXUNIT 100\n @end example\n \n-Change the line so that the value of @samp{MXUNIT} is defined to be\n+Change the line so that the value of @code{MXUNIT} is defined to be\n at least one @emph{greater} than the maximum unit number used by\n the Fortran programs on your system.\n \n (For example, a program that does @samp{WRITE (UNIT=255)} would require\n-@samp{MXUNIT} set to at least 256 to avoid crashing.)\n+@code{MXUNIT} set to at least 256 to avoid crashing.)\n \n Then build or rebuild @code{g77} as appropriate.\n \n@@ -753,7 +753,7 @@ asynchronous, or, more precisely, buffered error reporting\n (detection of errors might be delayed).\n \n @code{libg2c} supports flagging write errors immediately when\n-it is built with the @samp{ALWAYS_FLUSH} macro defined.\n+it is built with the @code{ALWAYS_FLUSH} macro defined.\n This results in a @code{libg2c} that runs slower, sometimes\n quite a bit slower, under certain circumstances---for example,\n accessing files via the networked file system NFS---but the\n@@ -763,7 +763,7 @@ If you know that Fortran programs requiring this level of precision\n of error reporting are to be compiled using the\n version of @code{g77} you are building, you might wish to\n modify the @code{g77} source tree so that the version of\n-@code{libg2c} is built with the @samp{ALWAYS_FLUSH} macro\n+@code{libg2c} is built with the @code{ALWAYS_FLUSH} macro\n defined, enabling this behavior.\n \n To do this, find this line in @file{@value{path-libf2c}/f2c.h} in\n@@ -788,15 +788,15 @@ Then build or rebuild @code{g77} as appropriate.\n @cindex segmentation violation\n @code{g77}, on most machines, puts many variables and arrays on the stack\n where possible, and can be configured (by changing\n-@samp{FFECOM_sizeMAXSTACKITEM} in @file{@value{path-g77}/com.c}) to force\n+@code{FFECOM_sizeMAXSTACKITEM} in @file{@value{path-g77}/com.c}) to force\n smaller-sized entities into static storage (saving\n on stack space) or permit larger-sized entities to be put on the\n stack (which can improve run-time performance, as it presents\n more opportunities for the GBE to optimize the generated code).\n \n @emph{Note:} Putting more variables and arrays on the stack\n might cause problems due to system-dependent limits on stack size.\n-Also, the value of @samp{FFECOM_sizeMAXSTACKITEM} has no\n+Also, the value of @code{FFECOM_sizeMAXSTACKITEM} has no\n effect on automatic variables and arrays.\n @xref{But-bugs}, for more information.\n \n@@ -837,7 +837,7 @@ This size currently is quite small, since @code{g77}\n currently has a known bug requiring too much memory\n and time to handle such cases.\n In @file{@value{path-g77}/data.c}, the macro\n-@samp{FFEDATA_sizeTOO_BIG_INIT_} is defined\n+@code{FFEDATA_sizeTOO_BIG_INIT_} is defined\n to the minimum size for the warning to appear.\n The size is specified in storage units,\n which can be bytes, words, or whatever, on a case-by-case basis.\n@@ -1537,16 +1537,16 @@ issuing an explanatory diagnostic.\n @cindex building @code{gcc}\n @cindex building @code{g77}\n \n-@cindex @samp{LANGUAGES} macro\n+@cindex @code{LANGUAGES} macro\n Building @code{g77} requires building enough of @code{gcc} that\n these instructions assume you're going to build all of\n @code{gcc}, including @code{g++}, @code{protoize}, and so on.\n You can save a little time and disk space by changes the\n-@samp{LANGUAGES} macro definition in @code{gcc/Makefile.in}\n+@code{LANGUAGES} macro definition in @code{gcc/Makefile.in}\n or @code{gcc/Makefile}, but if you do that, you're on your own.\n One change is almost @emph{certainly} going to cause failures:\n-removing @samp{c} or @samp{f77} from the definition of the\n-@samp{LANGUAGES} macro.\n+removing @code{c} or @code{f77} from the definition of the\n+@code{LANGUAGES} macro.\n \n After configuring @code{gcc}, which configures @code{g77} and\n @code{libg2c} automatically, you're ready to start the actual\n@@ -1785,7 +1785,7 @@ make -k CC=gcc install\n \n As described in @ref{Installation,,Installing GNU CC,\n gcc,Using and Porting GNU CC}, the values for\n-the @samp{CC} and @samp{LANGUAGES} macros should\n+the @code{CC} and @code{LANGUAGES} macros should\n be the same as those you supplied for the build\n itself.\n \n@@ -1805,7 +1805,7 @@ make -k @dots{} install install-libf77\n \n We don't know why some non-GNU versions of @code{make} sometimes\n require this alternate command, but they do.\n-(Remember to supply the appropriate definition for @samp{CC}\n+(Remember to supply the appropriate definition for @code{CC}\n where you see @samp{@dots{}} in the above command.)\n \n Note that using the @samp{-k} option tells @code{make} to\n@@ -1939,10 +1939,10 @@ information for the derived files to work around the\n problem of not having the appropriate tools installed.\n \n On UNIX systems, the simplest way to update the date-time-modified\n-information of a file is to use the use the @samp{touch}\n+information of a file is to use the use the @code{touch}\n command.\n \n-How to use @samp{touch} to update the derived files\n+How to use @code{touch} to update the derived files\n updated by each of the tools is described below.\n @emph{Note:} New versions of @code{g77} might change the set of\n files it generates by invoking each of these tools."}, {"sha": "64e9f63615c3d29859f6da4523aa67f4ee7bbfa0", "filename": "gcc/f/lang-options.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-options.h?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -59,8 +59,7 @@ FTNOPT( \"-fpedantic\", \"Warn about use of (only a few for now) Fortran extensions\n FTNOPT( \"-fno-pedantic\", \"\" )\n FTNOPT( \"-fvxt\", \"Program is written in VXT (Digital-like) FORTRAN\" )\n FTNOPT( \"-fno-vxt\", \"\" )\n-FTNOPT( \"-fugly\", \"Obsolete; allow certain ugly features\" )\n-FTNOPT( \"-fno-ugly\", \"\" )\n+FTNOPT( \"-fno-ugly\", \"Disallow all ugly features\" )\n FTNOPT( \"-fugly-args\", \"\" )\n FTNOPT( \"-fno-ugly-args\", \"Hollerith and typeless constants not passed as arguments\" )\n FTNOPT( \"-fugly-assign\", \"Allow ordinary copying of ASSIGN'ed vars\" )"}, {"sha": "9520e28e6be19729b709e6d903bdefecc2b372d1", "filename": "gcc/f/news.texi", "status": "modified", "additions": 70, "deletions": 62, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fnews.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Fnews.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fnews.texi?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -9,7 +9,7 @@\n @c in the standalone derivations of this file (e.g. NEWS).\n @set copyrights-news 1995-1999\n \n-@set last-update-news 1999-04-03\n+@set last-update-news 1999-04-17\n \n @include root.texi\n \n@@ -190,7 +190,7 @@ as if they ended in @samp{.for} and @samp{.fpp}, respectively.\n that has an interface that is not Year 2000 (Y2K) compliant.\n Also, the @code{libg2c} has been changed to increase the likelihood\n of catching references to the implementations of these intrinsics\n-using the @samp{EXTERNAL} mechanism\n+using the @code{EXTERNAL} mechanism\n (which would avoid the new warnings).\n \n @ifset DOC-G77\n@@ -205,23 +205,31 @@ disagrees with the reference concerning the type of the function.\n @end ifclear\n \n @item\n-@code{-fno-emulate-complex} is now the default option.\n+@samp{-fno-emulate-complex} is now the default option.\n This should result in improved performance\n of code that uses the @code{COMPLEX} data type.\n \n @cindex alignment\n @cindex double-precision performance\n @cindex -malign-double\n @item\n-The @code{-malign-double} option\n+The @samp{-malign-double} option\n now reliably aligns @emph{all} double-precision variables and arrays\n on Intel x86 targets.\n \n+@item\n+Support for the @samp{-fugly} option has been removed.\n+\n @ifclear USERVISONLY\n @item\n Improve documentation and indexing,\n including information on Year 2000 (Y2K) compliance.\n @end ifclear\n+\n+@ifclear USERVISONLY\n+@item\n+Upgrade to @code{libf2c} as of 1999-03-17.\n+@end ifclear\n @end itemize\n \n @heading In 0.5.24 and @code{egcs} 1.1.2 (versus 0.5.23 and 1.1.1):\n@@ -230,7 +238,7 @@ including information on Year 2000 (Y2K) compliance.\n @item\n Fix the @code{IDate} intrinsic (VXT) (in @code{libg2c})\n so the returned year is in the documented, non-Y2K-compliant range\n-of 0--99,\n+of 0-99,\n instead of being returned as 100 in the year 2000.\n \n @ifset DOC-G77\n@@ -239,12 +247,12 @@ for more information.\n @end ifset\n \n @item\n-Fix the @samp{Date_and_Time} intrinsic (in @code{libg2c})\n+Fix the @code{Date_and_Time} intrinsic (in @code{libg2c})\n to return the milliseconds value properly\n in @var{Values}(8).\n \n @item\n-Fix the @samp{LStat} intrinsic (in @code{libg2c})\n+Fix the @code{LStat} intrinsic (in @code{libg2c})\n to return device-ID information properly\n in @var{SArray}(7).\n \n@@ -273,13 +281,13 @@ upon doing any I/O following a direct formatted write.\n \n @item\n Fix @code{g77} so it no longer crashes compiling references\n-to the @samp{Rand} intrinsic on some systems.\n+to the @code{Rand} intrinsic on some systems.\n \n @item\n Fix @code{g77} portion of installation process so it works\n better on some systems\n (those with shells requiring @samp{else true} clauses\n-on @samp{if} constructs\n+on @code{if} constructs\n for the completion code to be set properly).\n @end itemize\n @end ifclear\n@@ -310,7 +318,7 @@ involving @code{COMPLEX} arithmetic\n Fix a code-generation bug that afflicted\n Intel x86 targets when @samp{-O2} was specified\n compiling, for example, an old version of\n-the @samp{DNRM2} routine.\n+the @code{DNRM2} routine.\n \n The x87 coprocessor stack was being\n mismanaged in cases involving assigned @code{GOTO}\n@@ -335,11 +343,11 @@ or given initial values via @code{DATA}.\n @itemize @bullet\n @ifclear USERVISONLY\n @item\n-Fix bugs in the @code{libU77} intrinsic @samp{HostNm}\n-that wrote one byte beyond the end of its @samp{CHARACTER}\n+Fix bugs in the @code{libU77} intrinsic @code{HostNm}\n+that wrote one byte beyond the end of its @code{CHARACTER}\n argument,\n and in the @code{libU77} intrinsics\n-@samp{GMTime} and @samp{LTime}\n+@code{GMTime} and @code{LTime}\n that overwrote their arguments.\n @end ifclear\n \n@@ -385,7 +393,7 @@ compile-time constant @code{INTEGER} expression.\n \n @item\n Fix @code{g77} @samp{-g} option so procedures that\n-use @samp{ENTRY} can be stepped through, line by line,\n+use @code{ENTRY} can be stepped through, line by line,\n in @code{gdb}.\n \n @item\n@@ -503,7 +511,7 @@ Improve documentation and indexing.\n @item\n The upgrade to @code{libf2c} as of 1998-06-18\n should fix a variety of problems, including\n-those involving some uses of the @samp{T} format\n+those involving some uses of the @code{T} format\n specifier, and perhaps some build (porting) problems\n as well.\n @end ifclear\n@@ -515,7 +523,7 @@ as well.\n @item\n @code{g77} no longer produces incorrect code\n and initial values\n-for @samp{EQUIVALENCE} and @samp{COMMON}\n+for @code{EQUIVALENCE} and @code{COMMON}\n aggregates that, due to ``unnatural'' ordering of members\n vis-a-vis their types, require initial padding.\n @end ifclear\n@@ -562,20 +570,20 @@ in @code{libf2c} (@code{libg2c}).\n This new information allows, for example,\n @kbd{which __g77_length_a} to be used in @code{gdb}\n to determine the type of the phantom length argument\n-supplied with @samp{CHARACTER} variables.\n+supplied with @code{CHARACTER} variables.\n \n This information pertains to internally-generated\n type, variable, and other information,\n not to the longstanding deficiencies vis-a-vis\n-@samp{COMMON} and @samp{EQUIVALENCE}.\n+@code{COMMON} and @code{EQUIVALENCE}.\n \n @item\n-The F90 @samp{Date_and_Time} intrinsic now is\n+The F90 @code{Date_and_Time} intrinsic now is\n supported.\n \n @item\n-The F90 @samp{System_Clock} intrinsic allows\n-the optional arguments (except for the @samp{Count}\n+The F90 @code{System_Clock} intrinsic allows\n+the optional arguments (except for the @code{Count}\n argument) to be omitted.\n \n @ifclear USERVISONLY\n@@ -617,7 +625,7 @@ of @code{g77} due to their being implemented\n via @code{g77}-specific patches to the @code{gcc}\n back end in previous releases include:\n \n-@itemize --\n+@itemize @minus\n @item\n Support for @code{__restrict__} keyword,\n the options @samp{-fargument-alias}, @samp{-fargument-noalias},\n@@ -659,11 +667,11 @@ including patches for the @code{gcc} back end.\n \n @ifclear USERVISONLY\n @item\n-Fix bugs in the @code{libU77} intrinsic @samp{HostNm}\n-that wrote one byte beyond the end of its @samp{CHARACTER}\n+Fix bugs in the @code{libU77} intrinsic @code{HostNm}\n+that wrote one byte beyond the end of its @code{CHARACTER}\n argument,\n and in the @code{libU77} intrinsics\n-@samp{GMTime} and @samp{LTime}\n+@code{GMTime} and @code{LTime}\n that overwrote their arguments.\n @end ifclear\n \n@@ -800,7 +808,7 @@ Improve documentation and indexing.\n Upgrade to @code{libf2c} as of 1998-04-20.\n \n This should fix a variety of problems, including\n-those involving some uses of the @samp{T} format\n+those involving some uses of the @code{T} format\n specifier, and perhaps some build (porting) problems\n as well.\n @end ifclear\n@@ -826,7 +834,7 @@ For example, @samp{DO 10 J=2,J} now is compiled correctly.\n Fix a code-generation bug that afflicted\n Intel x86 targets when @samp{-O2} was specified\n compiling, for example, an old version of\n-the @samp{DNRM2} routine.\n+the @code{DNRM2} routine.\n \n The x87 coprocessor stack was being\n mismanaged in cases involving assigned @code{GOTO}\n@@ -856,7 +864,7 @@ Fix @code{g77} version of @code{libf2c} so it no longer\n produces a spurious @samp{I/O recursion} diagnostic at run time\n when an I/O operation (such as @samp{READ *,I}) is interrupted\n in a manner that causes the program to be terminated\n-via the @samp{f_exit} routine (such as via @kbd{C-c}).\n+via the @code{f_exit} routine (such as via @kbd{C-c}).\n @end ifclear\n \n @ifclear USERVISONLY\n@@ -898,7 +906,7 @@ compile-time constant @code{INTEGER} expression.\n \n @item\n Fix @code{g77} @samp{-g} option so procedures that\n-use @samp{ENTRY} can be stepped through, line by line,\n+use @code{ENTRY} can be stepped through, line by line,\n in @code{gdb}.\n \n @ifclear USERVISONLY\n@@ -1070,7 +1078,7 @@ of @code{g77} due to their being implemented\n via @code{g77}-specific patches to the @code{gcc}\n back end in previous releases include:\n \n-@itemize --\n+@itemize @minus\n @item\n Support for the C-language @code{restrict} keyword.\n \n@@ -1233,8 +1241,8 @@ or assigned-@code{GOTO} statement.\n @ifclear USERVISONLY\n @item\n Fix compiler crashes due to using the name of a some\n-non-standard intrinsics (such as @samp{FTELL} or\n-@samp{FPUTC}) as such and as the name of a procedure\n+non-standard intrinsics (such as @code{FTell} or\n+@code{FPutC}) as such and as the name of a procedure\n or common block.\n Such dual use of a name in a program is allowed by\n the standard.\n@@ -1251,19 +1259,19 @@ the standard.\n @c \n @c For example, the intrinsic @code{FPUTC} previously was\n @c implemented by @code{g77} as a call to the @code{libf2c}\n-@c routine @samp{fputc_}.\n+@c routine @code{fputc_}.\n @c This would conflict with a Fortran procedure named @code{FPUTC}\n @c (using default compiler options), and this conflict\n @c would cause a crash under certain circumstances.\n @c \n-@c Now, the intrinsic @code{FPUTC} calls @samp{G77_fputc_0},\n-@c which does not conflict with the @samp{fputc_} external\n+@c Now, the intrinsic @code{FPUTC} calls @code{G77_fputc_0},\n+@c which does not conflict with the @code{fputc_} external\n @c that implements a Fortran procedure named @code{FPUTC}.\n @c \n @c Programs that refer to @code{FPUTC} as an external procedure\n @c without supplying their own implementation will link to\n-@c the new @code{libf2c} routine @samp{fputc_}, which is\n-@c simply a jacket routine that calls @samp{G77_fputc_0}.\n+@c the new @code{libf2c} routine @code{fputc_}, which is\n+@c simply a jacket routine that calls @code{G77_fputc_0}.\n \n @ifclear USERVISONLY\n @item\n@@ -1370,7 +1378,7 @@ that have embedded blanks, commas, and so on.\n \n @item\n Fix @code{SIGNAL} intrinsic so it accepts an\n-optional third @samp{Status} argument.\n+optional third @code{Status} argument.\n \n @ifclear USERVISONLY\n @item\n@@ -1478,7 +1486,7 @@ Support @samp{*f771} entry in @code{gcc} @file{specs} file.\n \n @ifclear USERVISONLY\n @item\n-Fix typo in @code{make} rule @samp{g77-cross}, used only for\n+Fix typo in @code{make} rule @code{g77-cross}, used only for\n cross-compiling.\n @end ifclear\n \n@@ -1600,12 +1608,12 @@ statements specifying that these names are not intended\n to be names of intrinsics.\n \n @item\n-The @samp{ALWAYS_FLUSH} macro is no longer defined when\n+The @code{ALWAYS_FLUSH} macro is no longer defined when\n building @code{libf2c}, which should result in improved\n I/O performance, especially over NFS.\n \n @emph{Note:} If you have code that depends on the behavior\n-of @code{libf2c} when built with @samp{ALWAYS_FLUSH} defined,\n+of @code{libf2c} when built with @code{ALWAYS_FLUSH} defined,\n you will have to modify @code{libf2c} accordingly before\n building it from this and future versions of @code{g77}.\n \n@@ -1860,10 +1868,10 @@ These are @code{REALPART}, @code{IMAGPART},\n @code{LONG}, and @code{SHORT}.\n \n @item\n-A new group of intrinsics, @samp{gnu}, has been added\n+A new group of intrinsics, @code{gnu}, has been added\n to contain the new @code{REALPART}, @code{IMAGPART},\n and @code{COMPLEX} intrinsics.\n-An old group, @samp{dcp}, has been removed.\n+An old group, @code{dcp}, has been removed.\n \n @item\n Complain about industry-wide ambiguous references\n@@ -1891,8 +1899,8 @@ a new chapter containing information on one, later\n more, diagnostics that users are directed to pull\n up automatically via a message in the diagnostic itself.\n \n-(Hence the menu item @samp{M} for the node\n-@samp{Diagnostics} in the top-level menu of\n+(Hence the menu item @code{M} for the node\n+@code{Diagnostics} in the top-level menu of\n the Info documentation.)\n @end ifclear\n @end itemize\n@@ -1902,7 +1910,7 @@ the Info documentation.)\n \n Information on previous versions is archived\n in @file{@value{path-g77}/news.texi}\n-following the test of the @samp{DOC-OLDNEWS} macro.\n+following the test of the @code{DOC-OLDNEWS} macro.\n @end ifclear\n \n @ifset DOC-OLDNEWS\n@@ -1917,14 +1925,14 @@ These bugs occurred when assigning the result of an\n operation to a complex variable (or array element)\n that also served as an input to that operation.\n \n-The operations affected by this bug were: @samp{CONJG()},\n-@samp{DCONJG()}, @samp{CCOS()}, @samp{CDCOS()},\n-@samp{CLOG()}, @samp{CDLOG()}, @samp{CSIN()}, @samp{CDSIN()},\n-@samp{CSQRT()}, @samp{CDSQRT()}, complex division, and\n+The operations affected by this bug were: @code{CONJG()},\n+@code{DCONJG()}, @code{CCOS()}, @code{CDCOS()},\n+@code{CLOG()}, @code{CDLOG()}, @code{CSIN()}, @code{CDSIN()},\n+@code{CSQRT()}, @code{CDSQRT()}, complex division, and\n raising a @code{DOUBLE COMPLEX} operand to an @code{INTEGER}\n power.\n (The related generic and @samp{Z}-prefixed intrinsics,\n-such as @samp{ZSIN()}, also were affected.)\n+such as @code{ZSIN()}, also were affected.)\n \n For example, @samp{C = CSQRT(C)}, @samp{Z = Z/C}, and @samp{Z = Z**I}\n (where @samp{C} is @code{COMPLEX} and @samp{Z} is\n@@ -1936,7 +1944,7 @@ For example, @samp{C = CSQRT(C)}, @samp{Z = Z/C}, and @samp{Z = Z**I}\n @itemize @bullet\n @item\n Fix @code{FORMAT} statement parsing so negative values for\n-specifiers such as @samp{P} (e.g. @samp{FORMAT(-1PF8.1)})\n+specifiers such as @code{P} (e.g. @samp{FORMAT(-1PF8.1)})\n are correctly processed as negative.\n \n @item\n@@ -2020,7 +2028,7 @@ procedures in @code{libf2c}.\n @item\n Modify @code{fseek_()} in @code{libf2c} to be more portable\n (though, in practice, there might be no systems where this\n-matters) and to catch invalid @samp{whence} arguments.\n+matters) and to catch invalid @code{whence} arguments.\n \n @item\n Some useless warnings from the @samp{-Wunused} option have\n@@ -2032,7 +2040,7 @@ on AIX systems by linking with the @samp{-bbigtoc} option.\n \n @item\n Abort configuration if @code{gcc} has not been patched\n-using the patch file provided in the @samp{gcc/f/gbe/}\n+using the patch file provided in the @file{gcc/f/gbe/}\n subdirectory.\n \n @item\n@@ -2244,7 +2252,7 @@ maintainer's new address is @email{dmg@@bell-labs.com}.\n @itemize @bullet\n @item\n @strong{Fix serious bug} in @samp{g77 -v} command that can cause removal of a\n-system's @file{/dev/null} special file if run by user @samp{root}.\n+system's @file{/dev/null} special file if run by user @code{root}.\n \n @strong{All users} of version 0.5.16 should ensure that\n they have not removed @file{/dev/null} or replaced it with an ordinary\n@@ -2283,7 +2291,7 @@ never happen).\n \n @item\n Make @code{libf2c} build procedures work on more systems again by\n-eliminating unnecessary invocations of @samp{ld -r -x} and @samp{mv}.\n+eliminating unnecessary invocations of @samp{ld -r -x} and @code{mv}.\n \n @item\n Fix omission of @samp{-funix-intrinsics-@dots{}} options in list of permitted\n@@ -2362,7 +2370,7 @@ This is known to fix code invoking @code{ERF()}, @code{ERFC()},\n \n @item\n Update @code{libf2c} to include netlib patches through 1995-08-16, and\n-@code{#define} @samp{WANT_LEAD_0} to 1 to make @code{g77}-compiled code more\n+@code{#define} @code{WANT_LEAD_0} to 1 to make @code{g77}-compiled code more\n consistent with other Fortran implementations by outputting\n leading zeros in formatted and list-directed output.\n \n@@ -2444,12 +2452,12 @@ and @code{SYSTEM}, append a final argument specifying an @code{INTEGER}\n variable or array element (e.g. @samp{CALL SYSTEM('rm foo',ISTAT)}).\n \n @item\n-Add new intrinsic group named @samp{unix} to contain the new intrinsics,\n+Add new intrinsic group named @code{unix} to contain the new intrinsics,\n and by default enable this new group.\n \n @item\n-Move @code{LOC()} intrinsic out of the @samp{vxt} group to the new\n-@samp{unix} group.\n+Move @code{LOC()} intrinsic out of the @code{vxt} group to the new\n+@code{unix} group.\n \n @item\n Improve @code{g77} so that @samp{g77 -v} by itself (or with\n@@ -2706,7 +2714,7 @@ Allow @code{RETURN} in main program unit.\n Changes to Hollerith-constant support to obey Appendix C of the\n standard:\n \n-@itemize --\n+@itemize @minus\n @item\n Now padded on the right with zeros, not spaces.\n \n@@ -2734,7 +2742,7 @@ to widen to @code{INTEGER}), essentially.\n @item\n Changes and fixes to typeless-constant support:\n \n-@itemize --\n+@itemize @minus\n @item\n Now treated as a typeless double-length @code{INTEGER} value.\n "}, {"sha": "e8f0ce5e6d4594253fff900c60972fabb42f6d67", "filename": "gcc/f/top.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6a144034de387e9ff11a6ae78d6af86f0dc228/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=4e6a144034de387e9ff11a6ae78d6af86f0dc228", "patch": "@@ -235,18 +235,6 @@ ffe_decode_option (argc, argv)\n \twarning (\"%s no longer supported -- try -fvxt\", opt);\n       else if (strcmp (&opt[2], \"f90-not-vxt\") == 0)\n \twarning (\"%s no longer supported -- try -fno-vxt -ff90\", opt);\n-      else if (strcmp (&opt[2], \"ugly\") == 0)\n-\t{\n-\t  warning (\"%s is overloaded with meanings and likely to be removed;\", opt);\n-\t  warning (\"use only the specific -fugly-* options you need\");\n-\t  ffe_set_is_ugly_args (TRUE);\n-\t  ffe_set_is_ugly_assign (TRUE);\n-\t  ffe_set_is_ugly_assumed (TRUE);\n-\t  ffe_set_is_ugly_comma (TRUE);\n-\t  ffe_set_is_ugly_complex (TRUE);\n-\t  ffe_set_is_ugly_init (TRUE);\n-\t  ffe_set_is_ugly_logint (TRUE);\n-\t}\n       else if (strcmp (&opt[2], \"no-ugly\") == 0)\n \t{\n \t  ffe_set_is_ugly_args (FALSE);"}]}