{"sha": "46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmYjhmNmJhM2I0ZmE4N2IxYjMzNWQ1NzRkYTc0NGQ3NGNkYmJjOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-05-20T13:41:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-20T13:41:13Z"}, "message": "tmmintrin.h (_mm_alignr_epi32): Implement as always inlined function, not as a macro.\n\n        * config/i386/tmmintrin.h (_mm_alignr_epi32): Implement as always\n        inlined function, not as a macro.\n        (_mm_alignr_pi8): Ditto.\n        * config/i386/ammintrin.h (_mm_extracti_si64): Ditto.\n        (_mm_inserti_si64): Ditto.\n        * config/i386/emmintrin.h (_mm_shuffle_pd): Ditto.\n        (_mm_extract_epi16): Ditto.\n        (_mm_insert_epi16): Ditto.\n        (_mm_shufflehi_epi16): Ditto.\n        (_mm_shufflelo_epi16): Ditto.\n        (_mm_shuffle_epi32): Ditto.\n        * config/i386/xmmintrin.h (_mm_set_ss): Use 0.0f for float constant.\n        * config/386/mm3dnow.h: Add __attribute__((__always_inline__)) to\n        all functions.\n        (_m_from_float): Add __extension__ to conversion.  Use 0.0f for\n        float constant.\n        (_m_to_float): Use C89 compatible assignment.\n\ntestsuite/ChangeLog:\n\n        * gcc.target/i386/sse-vect-types.c: Revert 'Use \"-msse\"\n        instead of \"-msse2\".'\n        * gcc.target/i386/sse-12.c: Use \"-march=k8 -m3dnow -mssse3 -msse4a\"\n        instead of \"-msse3\".  Include only ammintrin.h, tmmintrin.h\n        and mm3dnow.h.\n        * gcc.target/i386/sse-13.c (__builtin_ia32_extrqi): Redefine\n        to test with immediate operand.\n        (__builtin_ia32_insertqi): Ditto.\n        (__builtin_ia32_palignr128): Ditto.\n        (__builtin_ia32_palignr): Ditto.\n        (__builtin_ia32_pshufhw): Ditto.\n        (__builtin_ia32_pshuflw): Ditto.\n        (__builtin_ia32_pshufd): Ditto.\n        (__builtin_ia32_vec_set_v8hi): Ditto.\n        (__builtin_ia32_vec_ext_v8hi): Ditto.\n        (__builtin_ia32_shufpd): Ditto.\n        * gcc.target/i386/sse-14.c: Same changes as sse-13.c.\n\nFrom-SVN: r124873", "tree": {"sha": "2f6af58ae79046e8d919e7191044bde1d1bc122a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6af58ae79046e8d919e7191044bde1d1bc122a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dde27bba7d11284185d1d0e97bf7dc0d302246dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde27bba7d11284185d1d0e97bf7dc0d302246dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde27bba7d11284185d1d0e97bf7dc0d302246dc"}], "stats": {"total": 219, "additions": 155, "deletions": 64}, "files": [{"sha": "d3d061f68080034c1b8a1501dede57f6131d982d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -1,3 +1,23 @@\n+2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/tmmintrin.h (_mm_alignr_epi32): Implement as always\n+\tinlined function, not as a macro.\n+\t(_mm_alignr_pi8): Ditto.\n+\t* config/i386/ammintrin.h (_mm_extracti_si64): Ditto.\n+\t(_mm_inserti_si64): Ditto.\n+\t* config/i386/emmintrin.h (_mm_shuffle_pd): Ditto.\n+\t(_mm_extract_epi16): Ditto.\n+\t(_mm_insert_epi16): Ditto.\n+\t(_mm_shufflehi_epi16): Ditto.\n+\t(_mm_shufflelo_epi16): Ditto.\n+\t(_mm_shuffle_epi32): Ditto.\n+\t* config/i386/xmmintrin.h (_mm_set_ss): Use 0.0f for float constant.\n+\t* config/386/mm3dnow.h: Add __attribute__((__always_inline__)) to\n+\tall functions.\n+\t(_m_from_float): Add __extension__ to conversion.  Use 0.0f for\n+\tfloat constant.\n+\t(_m_to_float): Use C89 compatible assignment.\n+\n 2007-04-20  Martin Michlmayr  <tbm@cyrius.com>\n \n \tPR target/32007"}, {"sha": "51eaefd4e56e08c5dac8f0c3a2789cff5ef5e7ae", "filename": "gcc/config/i386/ammintrin.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fammintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fammintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fammintrin.h?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -55,17 +55,23 @@ _mm_extract_si64 (__m128i __X, __m128i __Y)\n   return (__m128i) __builtin_ia32_extrq ((__v2di) __X, (__v16qi) __Y);\n }\n \n-#define _mm_extracti_si64(X, I, L) \\\n-((__m128i) __builtin_ia32_extrqi ((__v2di)(X), I, L))\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_extracti_si64 (__m128i __X, unsigned const int __I, unsigned const int __L)\n+{\n+  return (__m128i) __builtin_ia32_extrqi ((__v2di) __X, __I, __L);\n+}\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_insert_si64 (__m128i __X,__m128i __Y)\n {\n   return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);\n }\n \n-#define _mm_inserti_si64(X, Y, I, L) \\\n-((__m128i) __builtin_ia32_insertqi ((__v2di)(X), (__v2di)(Y), I, L))\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_inserti_si64(__m128i __X, __m128i __Y, unsigned const int __I, unsigned const int __L)\n+{\n+  return (__m128i) __builtin_ia32_insertqi ((__v2di)__X, (__v2di)__Y, __I, __L);\n+}\n \n \n #endif /* __SSE4A__ */"}, {"sha": "f878728a04f4d30446bb00f74af8bdcd8004a2e8", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -57,7 +57,7 @@ typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n static __inline __m128d __attribute__((__always_inline__))\n _mm_set_sd (double __F)\n {\n-  return __extension__ (__m128d){ __F, 0 };\n+  return __extension__ (__m128d){ __F, 0.0 };\n }\n \n /* Create a vector with both elements equal to F.  */\n@@ -880,7 +880,11 @@ _mm_cvtss_sd (__m128d __A, __m128 __B)\n   return (__m128d)__builtin_ia32_cvtss2sd ((__v2df) __A, (__v4sf)__B);\n }\n \n-#define _mm_shuffle_pd(__A, __B, __C) ((__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, (__C)))\n+static __inline __m128d __attribute__((__always_inline__))\n+_mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)\n+{\n+  return (__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, __mask);\n+}\n \n static __inline __m128d __attribute__((__always_inline__))\n _mm_unpackhi_pd (__m128d __A, __m128d __B)\n@@ -1137,13 +1141,13 @@ _mm_srai_epi32 (__m128i __A, const int __B)\n static __inline __m128i __attribute__((__always_inline__))\n _mm_srli_si128 (__m128i __A, const int __B)\n {\n-  return ((__m128i)__builtin_ia32_psrldqi128 (__A, __B * 8));\n+  return (__m128i)__builtin_ia32_psrldqi128 (__A, __B * 8);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_slli_si128 (__m128i __A, const int __B)\n {\n-  return ((__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8));\n+  return (__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n@@ -1290,7 +1294,6 @@ _mm_cmpgt_epi32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__A, (__v4si)__B);\n }\n \n-#if 0\n static __inline int __attribute__((__always_inline__))\n _mm_extract_epi16 (__m128i const __A, int const __N)\n {\n@@ -1302,12 +1305,6 @@ _mm_insert_epi16 (__m128i const __A, int const __D, int const __N)\n {\n   return (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)__A, __D, __N);\n }\n-#else\n-#define _mm_extract_epi16(A, N) \\\n-  ((int) __builtin_ia32_vec_ext_v8hi ((__v8hi)(A), (N)))\n-#define _mm_insert_epi16(A, D, N) \\\n-  ((__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)(A), (D), (N)))\n-#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_max_epi16 (__m128i __A, __m128i __B)\n@@ -1345,9 +1342,23 @@ _mm_mulhi_epu16 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pmulhuw128 ((__v8hi)__A, (__v8hi)__B);\n }\n \n-#define _mm_shufflehi_epi16(__A, __B) ((__m128i)__builtin_ia32_pshufhw ((__v8hi)__A, __B))\n-#define _mm_shufflelo_epi16(__A, __B) ((__m128i)__builtin_ia32_pshuflw ((__v8hi)__A, __B))\n-#define _mm_shuffle_epi32(__A, __B) ((__m128i)__builtin_ia32_pshufd ((__v4si)__A, __B))\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_shufflehi_epi16 (__m128i __A, const int __mask)\n+{\n+  return (__m128i)__builtin_ia32_pshufhw ((__v8hi)__A, __mask);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_shufflelo_epi16 (__m128i __A, const int __mask)\n+{\n+  return (__m128i)__builtin_ia32_pshuflw ((__v8hi)__A, __mask);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_shuffle_epi32 (__m128i __A, const int __mask)\n+{\n+  return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);\n+}\n \n static __inline void __attribute__((__always_inline__))\n _mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)"}, {"sha": "fc5b35c1deea5daa481f17776c27d1352b8d9640", "filename": "gcc/config/i386/mm3dnow.h", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -37,178 +37,179 @@\n /* Internal data types for implementing the intrinsics.  */\n typedef float __v2sf __attribute__ ((__vector_size__ (8)));\n \n-static __inline void\n+static __inline void __attribute__((__always_inline__))\n _m_femms (void)\n {\n   __builtin_ia32_femms();\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pavgusb (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pavgusb ((__v8qi)__A, (__v8qi)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pf2id (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pf2id ((__v2sf)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfacc (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfacc ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfadd (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfadd ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfcmpeq (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfcmpeq ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfcmpge (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfcmpge ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfcmpgt (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfcmpgt ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfmax (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfmax ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfmin (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfmin ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfmul (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfmul ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfrcp (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pfrcp ((__v2sf)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfrcpit1 (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfrcpit1 ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfrcpit2 (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfrcpit2 ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfrsqrt (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pfrsqrt ((__v2sf)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfrsqit1 (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfrsqit1 ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfsub (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfsub ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfsubr (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfsubr ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pi2fd (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pi2fd ((__v2si)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pmulhrw (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pmulhrw ((__v4hi)__A, (__v4hi)__B);\n }\n \n-static __inline void\n+static __inline void __attribute__((__always_inline__))\n _m_prefetch (void *__P)\n {\n   __builtin_prefetch (__P, 0, 3 /* _MM_HINT_T0 */);\n }\n \n-static __inline void\n+static __inline void __attribute__((__always_inline__))\n _m_prefetchw (void *__P)\n {\n   __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_from_float (float __A)\n {\n-  return (__m64)(__v2sf){ __A, 0 };\n+  return __extension__ (__m64)(__v2sf){ __A, 0.0f };\n }\n \n-static __inline float\n+static __inline float __attribute__((__always_inline__))\n _m_to_float (__m64 __A)\n {\n-  union { __v2sf v; float a[2]; } __tmp = { (__v2sf)__A };\n+  union { __v2sf v; float a[2]; } __tmp;\n+  __tmp.v = (__v2sf)__A;\n   return __tmp.a[0];\n }\n \n #ifdef __3dNOW_A__\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pf2iw (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pf2iw ((__v2sf)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfnacc (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfnacc ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pfpnacc (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pfpnacc ((__v2sf)__A, (__v2sf)__B);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pi2fw (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pi2fw ((__v2si)__A);\n }\n \n-static __inline __m64\n+static __inline __m64 __attribute__((__always_inline__))\n _m_pswapd (__m64 __A)\n {\n   return (__m64)__builtin_ia32_pswapdsf ((__v2sf)__A);"}, {"sha": "dbcfbd0d07c6646a1ae4822ab7d73776650861b5", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -181,11 +181,16 @@ _mm_sign_pi32 (__m64 __X, __m64 __Y)\n   return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);\n }\n \n-#define _mm_alignr_epi8(__X, __Y, __N) \\\n-  ((__m128i)__builtin_ia32_palignr128 ((__v2di) __X, (__v2di) __Y, (__N) * 8))\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N)\n+{\n+  return (__m128i)__builtin_ia32_palignr128 ((__v2di)__X, (__v2di)__Y, __N * 8);}\n \n-#define _mm_alignr_pi8(__X, __Y, __N) \\\n-  ((__m64)__builtin_ia32_palignr ((long long) (__X), (long long) (__Y), (__N) * 8))\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N)\n+{\n+  return (__m64)__builtin_ia32_palignr ((long long)__X, (long long)__Y, __N * 8);\n+}\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_abs_epi8 (__m128i __X)"}, {"sha": "3716daae98b79c621414fb90d53e1c38dfe29b2f", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -855,7 +855,7 @@ _MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)\n static __inline __m128 __attribute__((__always_inline__))\n _mm_set_ss (float __F)\n {\n-  return __extension__ (__m128)(__v4sf){ __F, 0, 0, 0 };\n+  return __extension__ (__m128)(__v4sf){ __F, 0.0f, 0.0f, 0.0f };\n }\n \n /* Create a vector with all four elements equal to F.  */"}, {"sha": "0b7b2c0583f10adafced64015715827042a9a3ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -1,3 +1,23 @@\n+2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-vect-types.c: Revert 'Use \"-msse\"\n+\tinstead of \"-msse2\".'\n+\t* gcc.target/i386/sse-12.c: Use \"-march=k8 -m3dnow -mssse3 -msse4a\"\n+\tinstead of \"-msse3\".  Include only ammintrin.h, tmmintrin.h\n+\tand mm3dnow.h.\n+\t* gcc.target/i386/sse-13.c (__builtin_ia32_extrqi): Redefine\n+\tto test with immediate operand.\n+\t(__builtin_ia32_insertqi): Ditto.\n+\t(__builtin_ia32_palignr128): Ditto.\n+\t(__builtin_ia32_palignr): Ditto.\n+\t(__builtin_ia32_pshufhw): Ditto.\n+\t(__builtin_ia32_pshuflw): Ditto.\n+\t(__builtin_ia32_pshufd): Ditto.\n+\t(__builtin_ia32_vec_set_v8hi): Ditto.\n+\t(__builtin_ia32_vec_ext_v8hi): Ditto.\n+\t(__builtin_ia32_shufpd): Ditto.\n+\t* gcc.target/i386/sse-14.c: Same changes as sse-13.c.\n+\n 2007-05-20  Daniel Franke  <franke.daniel@gmail.org>\n \n \tPR fortran/32001"}, {"sha": "c0ab47821212b14f75df8c844cbedd2d19c72f38", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -1,12 +1,10 @@\n-/* Test that {,x,e,p}mmintrin.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -std=c89 -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-std=c89 -pedantic-errors -msse3\" } */\n+/* { dg-options \"-std=c89 -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n \n-#include <mmintrin.h>\n-#include <xmmintrin.h>\n-#include <emmintrin.h>\n-#include <pmmintrin.h>\n-#include <mm_malloc.h>\n+#include <ammintrin.h>\n+#include <tmmintrin.h>\n+#include <mm3dnow.h>\n \n int dummy;"}, {"sha": "aa7c70fd74ca4a7e97c56692a0d033babe33f7e6", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -11,6 +11,14 @@\n \n /* Following intrinsics require immediate arguments. */\n \n+/* ammintrin.h */\n+#define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n+#define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n+\n+/* tmmintrin.h */\n+#define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n+#define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n+\n /* emmintrin.h */\n #define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n #define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n@@ -22,14 +30,21 @@\n #define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n #define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n #define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n+#define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n+#define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n+#define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)\n+#define __builtin_ia32_vec_set_v8hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v8hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v8hi(A, N) __builtin_ia32_vec_ext_v8hi(A, 0)\n+#define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n #define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)\n #define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n-#define __builtin_ia32_shufps(A, B, C) __builtin_ia32_shufps(A, B, 0)\n+#define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n #include <ammintrin.h>\n #include <tmmintrin.h>"}, {"sha": "aca882ae8c8c4f34b878e399bda00c79724c1fbc", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -11,6 +11,14 @@\n \n /* Following intrinsics require immediate arguments. */\n \n+/* ammintrin.h */\n+#define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n+#define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n+\n+/* tmmintrin.h */\n+#define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n+#define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n+\n /* emmintrin.h */\n #define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n #define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n@@ -22,14 +30,21 @@\n #define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n #define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n #define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n+#define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n+#define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n+#define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)\n+#define __builtin_ia32_vec_set_v8hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v8hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v8hi(A, N) __builtin_ia32_vec_ext_v8hi(A, 0)\n+#define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n #define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)\n #define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n-#define __builtin_ia32_shufps(A, B, C) __builtin_ia32_shufps(A, B, 0)\n+#define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n #include <ammintrin.h>\n #include <tmmintrin.h>"}, {"sha": "354173a60a30c5658eee282a22c805d9792c7b11", "filename": "gcc/testsuite/gcc.target/i386/sse-vect-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c?ref=46fb8f6ba3b4fa87b1b335d574da744d74cdbbc8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O0 -msse\" } */\n+/* { dg-options \"-O0 -msse2\" } */\n \n #include <xmmintrin.h>\n "}]}