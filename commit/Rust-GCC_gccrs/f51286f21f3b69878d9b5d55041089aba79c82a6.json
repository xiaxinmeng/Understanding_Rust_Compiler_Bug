{"sha": "f51286f21f3b69878d9b5d55041089aba79c82a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxMjg2ZjIxZjNiNjk4NzhkOWI1ZDU1MDQxMDg5YWJhNzljODJhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-12T20:44:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-12T20:44:32Z"}, "message": "re PR tree-optimization/64454 (optimize (x%5)%5)\n\n\tPR tree-optimization/64454\n\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Optimize\n\top0 % op1 into op0 if op0 is in range [-op1 + 1, op1 - 1]\n\tfor signed or [0, op1 - 1] for unsigned modulo.\n\t(simplify_stmt_using_ranges): Call simplify_div_or_mod_using_ranges\n\teven if op1 does not satisfy integer_pow2p.\n\n\t* gcc.dg/pr64454.c: New test.\n\nFrom-SVN: r219491", "tree": {"sha": "0217d8864283be08a04517b8666b0763b5234f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0217d8864283be08a04517b8666b0763b5234f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51286f21f3b69878d9b5d55041089aba79c82a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51286f21f3b69878d9b5d55041089aba79c82a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51286f21f3b69878d9b5d55041089aba79c82a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51286f21f3b69878d9b5d55041089aba79c82a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01991953449246570f85f30b7b37e29a7e5b2cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01991953449246570f85f30b7b37e29a7e5b2cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01991953449246570f85f30b7b37e29a7e5b2cc1"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "b9d47cf84dc33f03e140fb8bc18816f57b1ff930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f51286f21f3b69878d9b5d55041089aba79c82a6", "patch": "@@ -1,5 +1,12 @@\n 2015-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/64454\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Optimize\n+\top0 % op1 into op0 if op0 is in range [-op1 + 1, op1 - 1]\n+\tfor signed or [0, op1 - 1] for unsigned modulo.\n+\t(simplify_stmt_using_ranges): Call simplify_div_or_mod_using_ranges\n+\teven if op1 does not satisfy integer_pow2p.\n+\n \tPR other/64370\n \t* sreal.c (sreal::to_double): Use ldexp instead of scalbnl.\n "}, {"sha": "9a07ada5235fc911e41ecfd57a0db3ff298e0ba3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f51286f21f3b69878d9b5d55041089aba79c82a6", "patch": "@@ -1,5 +1,8 @@\n 2015-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/64454\n+\t* gcc.dg/pr64454.c: New test.\n+\n \tPR testsuite/64028\n \t* gcc.dg/vect/no-section-anchors-vect-31.c: Add dg-add-options\n \tbind_pic_locally."}, {"sha": "33018d3bb18443e958dbc270708fed7182394a11", "filename": "gcc/testsuite/gcc.dg/pr64454.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64454.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64454.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64454.c?ref=f51286f21f3b69878d9b5d55041089aba79c82a6", "patch": "@@ -0,0 +1,43 @@\n+/* PR tree-optimization/64454 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+unsigned\n+f1 (unsigned x)\n+{\n+  return (x % 5) % 5;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  return (x % 5) % 5;\n+}\n+\n+int\n+f3 (int x)\n+{\n+  return (x % -5) % -5;\n+}\n+\n+unsigned\n+f4 (unsigned x)\n+{\n+  return (x % 5) % 6;\n+}\n+\n+int\n+f5 (int x)\n+{\n+  return (x % 5) % 6;\n+}\n+\n+int\n+f6 (int x)\n+{\n+  return (x % -5) % -6;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"% 5\" 6 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"% 6\" 0 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "ecf86c35666d26ad23878de6e2f999befde56f4c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51286f21f3b69878d9b5d55041089aba79c82a6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f51286f21f3b69878d9b5d55041089aba79c82a6", "patch": "@@ -8998,7 +8998,11 @@ simplify_truth_ops_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n \n /* Simplify a division or modulo operator to a right shift or\n    bitwise and if the first operand is unsigned or is greater\n-   than zero and the second operand is an exact power of two.  */\n+   than zero and the second operand is an exact power of two.\n+   For TRUNC_MOD_EXPR op0 % op1 with constant op1, optimize it\n+   into just op0 if op0's range is known to be a subset of\n+   [-op1 + 1, op1 - 1] for signed and [0, op1 - 1] for unsigned\n+   modulo.  */\n \n static bool\n simplify_div_or_mod_using_ranges (gimple stmt)\n@@ -9007,7 +9011,30 @@ simplify_div_or_mod_using_ranges (gimple stmt)\n   tree val = NULL;\n   tree op0 = gimple_assign_rhs1 (stmt);\n   tree op1 = gimple_assign_rhs2 (stmt);\n-  value_range_t *vr = get_value_range (gimple_assign_rhs1 (stmt));\n+  value_range_t *vr = get_value_range (op0);\n+\n+  if (rhs_code == TRUNC_MOD_EXPR\n+      && TREE_CODE (op1) == INTEGER_CST\n+      && tree_int_cst_sgn (op1) == 1\n+      && range_int_cst_p (vr)\n+      && tree_int_cst_lt (vr->max, op1))\n+    {\n+      if (TYPE_UNSIGNED (TREE_TYPE (op0))\n+\t  || tree_int_cst_sgn (vr->min) >= 0\n+\t  || tree_int_cst_lt (fold_unary (NEGATE_EXPR, TREE_TYPE (op1), op1),\n+\t\t\t      vr->min))\n+\t{\n+\t  /* If op0 already has the range op0 % op1 has,\n+\t     then TRUNC_MOD_EXPR won't change anything.  */\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t  gimple_assign_set_rhs_from_tree (&gsi, op0);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+    }\n+\n+  if (!integer_pow2p (op1))\n+    return false;\n \n   if (TYPE_UNSIGNED (TREE_TYPE (op0)))\n     {\n@@ -9880,11 +9907,14 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \n       /* Transform TRUNC_DIV_EXPR and TRUNC_MOD_EXPR into RSHIFT_EXPR\n \t and BIT_AND_EXPR respectively if the first operand is greater\n-\t than zero and the second operand is an exact power of two.  */\n+\t than zero and the second operand is an exact power of two.\n+\t Also optimize TRUNC_MOD_EXPR away if the second operand is\n+\t constant and the first operand already has the right value\n+\t range.  */\n \tcase TRUNC_DIV_EXPR:\n \tcase TRUNC_MOD_EXPR:\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n-\t      && integer_pow2p (gimple_assign_rhs2 (stmt)))\n+\t  if (TREE_CODE (rhs1) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t    return simplify_div_or_mod_using_ranges (stmt);\n \t  break;\n "}]}