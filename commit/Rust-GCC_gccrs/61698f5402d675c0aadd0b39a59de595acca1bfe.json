{"sha": "61698f5402d675c0aadd0b39a59de595acca1bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2OThmNTQwMmQ2NzVjMGFhZGQwYjM5YTU5ZGU1OTVhY2NhMWJmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-06-28T09:24:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-06-28T09:24:35Z"}, "message": "optabs.c (libfunc_decls): New variable.\n\ngcc/\n\t* optabs.c (libfunc_decls): New variable.\n\t(libfunc_decl_hash, libfunc_decl_eq): New functions.\n\t(init_one_libfunc): Reuse decls and SYMBOL_REFs when asked\n\tfor the same function twice.\n\nFrom-SVN: r137215", "tree": {"sha": "7168b1710dcb37396b1e78a039c85ae0f6125a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7168b1710dcb37396b1e78a039c85ae0f6125a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61698f5402d675c0aadd0b39a59de595acca1bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61698f5402d675c0aadd0b39a59de595acca1bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61698f5402d675c0aadd0b39a59de595acca1bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61698f5402d675c0aadd0b39a59de595acca1bfe/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d476e6690108ebb332936725fe8d061ca6016473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d476e6690108ebb332936725fe8d061ca6016473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d476e6690108ebb332936725fe8d061ca6016473"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "87b85c00552cb891d2660a4b641e1633efc11215", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61698f5402d675c0aadd0b39a59de595acca1bfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61698f5402d675c0aadd0b39a59de595acca1bfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61698f5402d675c0aadd0b39a59de595acca1bfe", "patch": "@@ -1,3 +1,10 @@\n+2008-06-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* optabs.c (libfunc_decls): New variable.\n+\t(libfunc_decl_hash, libfunc_decl_eq): New functions.\n+\t(init_one_libfunc): Reuse decls and SYMBOL_REFs when asked\n+\tfor the same function twice.\n+\n 2008-06-27 Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ashlti3, ashrti3, lshrti3): Expand using"}, {"sha": "c3377c872389eb5369d777e86d8fcd420b8030d2", "filename": "gcc/optabs.c", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61698f5402d675c0aadd0b39a59de595acca1bfe/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61698f5402d675c0aadd0b39a59de595acca1bfe/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=61698f5402d675c0aadd0b39a59de595acca1bfe", "patch": "@@ -5984,28 +5984,58 @@ gen_satfractuns_conv_libfunc (convert_optab tab,\n   gen_interclass_conv_libfunc (tab, opname, tmode, fmode);\n }\n \n-rtx\n-init_one_libfunc (const char *name)\n-{\n-  rtx symbol;\n+/* A table of previously-created libfuncs, hashed by name.  */\n+static GTY ((param_is (union tree_node))) htab_t libfunc_decls;\n \n-  /* Create a FUNCTION_DECL that can be passed to\n-     targetm.encode_section_info.  */\n-  /* ??? We don't have any type information except for this is\n-     a function.  Pretend this is \"int foo()\".  */\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name),\n-\t\t\t  build_function_type (integer_type_node, NULL_TREE));\n-  DECL_ARTIFICIAL (decl) = 1;\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n+/* Hashtable callbacks for libfunc_decls.  */\n \n-  symbol = XEXP (DECL_RTL (decl), 0);\n+static hashval_t\n+libfunc_decl_hash (const void *entry)\n+{\n+  return htab_hash_string (IDENTIFIER_POINTER (DECL_NAME ((tree) entry)));\n+}\n \n-  /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n-     are the flags assigned by targetm.encode_section_info.  */\n-  SET_SYMBOL_REF_DECL (symbol, 0);\n+static int\n+libfunc_decl_eq (const void *entry1, const void *entry2)\n+{\n+  return DECL_NAME ((tree) entry1) == (tree) entry2;\n+}\n \n-  return symbol;\n+rtx\n+init_one_libfunc (const char *name)\n+{\n+  tree id, decl;\n+  void **slot;\n+  hashval_t hash;\n+\n+  if (libfunc_decls == NULL)\n+    libfunc_decls = htab_create_ggc (37, libfunc_decl_hash,\n+\t\t\t\t     libfunc_decl_eq, NULL);\n+\n+  /* See if we have already created a libfunc decl for this function.  */\n+  id = get_identifier (name);\n+  hash = htab_hash_string (name);\n+  slot = htab_find_slot_with_hash (libfunc_decls, id, hash, INSERT);\n+  decl = (tree) *slot;\n+  if (decl == NULL)\n+    {\n+      /* Create a new decl, so that it can be passed to\n+\t targetm.encode_section_info.  */\n+      /* ??? We don't have any type information except for this is\n+\t a function.  Pretend this is \"int foo()\".  */\n+      decl = build_decl (FUNCTION_DECL, get_identifier (name),\n+\t\t\t build_function_type (integer_type_node, NULL_TREE));\n+      DECL_ARTIFICIAL (decl) = 1;\n+      DECL_EXTERNAL (decl) = 1;\n+      TREE_PUBLIC (decl) = 1;\n+\n+      /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n+\t are the flags assigned by targetm.encode_section_info.  */\n+      SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);\n+\n+      *slot = decl;\n+    }\n+  return XEXP (DECL_RTL (decl), 0);\n }\n \n /* Call this to reset the function entry for one optab (OPTABLE) in mode"}]}