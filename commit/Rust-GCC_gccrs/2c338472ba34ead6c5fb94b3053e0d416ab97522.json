{"sha": "2c338472ba34ead6c5fb94b3053e0d416ab97522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzMzg0NzJiYTM0ZWFkNmM1ZmI5NGIzMDUzZTBkNDE2YWI5NzUyMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-24T22:12:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-24T22:12:32Z"}, "message": "avr.c: Fix comment formatting.\n\n\t* config/avr/avr.c: Fix comment formatting.\n\t* config/avr/avr.md: Likewise.\n\nFrom-SVN: r75011", "tree": {"sha": "f72669ecb8aaa9cd8140072bd7123c3e4a82db63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72669ecb8aaa9cd8140072bd7123c3e4a82db63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c338472ba34ead6c5fb94b3053e0d416ab97522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c338472ba34ead6c5fb94b3053e0d416ab97522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c338472ba34ead6c5fb94b3053e0d416ab97522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c338472ba34ead6c5fb94b3053e0d416ab97522/comments", "author": null, "committer": null, "parents": [{"sha": "baac771ac4c36d411f60dbf1700626cedfb1e605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baac771ac4c36d411f60dbf1700626cedfb1e605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baac771ac4c36d411f60dbf1700626cedfb1e605"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "24a875214c252b7d9e27f281c7a1a63279025685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c338472ba34ead6c5fb94b3053e0d416ab97522", "patch": "@@ -1,3 +1,8 @@\n+2003-12-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/avr/avr.c: Fix comment formatting.\n+\t* config/avr/avr.md: Likewise.\n+\n 2003-12-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR target/12721."}, {"sha": "b149e7efae829fcb142ce66539f898bf52b81ea0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2c338472ba34ead6c5fb94b3053e0d416ab97522", "patch": "@@ -78,7 +78,7 @@ static int default_rtx_costs (rtx, enum rtx_code, enum rtx_code);\n static bool avr_rtx_costs (rtx, int, int, int *);\n static int avr_address_cost (rtx);\n \n-/* Allocate registers from r25 to r8 for parameters for function calls */\n+/* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n \n /* Temporary register RTX (gen_rtx (REG,QImode,TMP_REGNO)) */\n@@ -276,7 +276,7 @@ avr_override_options (void)\n   zero_reg_rtx = gen_rtx_REG (QImode, ZERO_REGNO);\n }\n \n-/*  return register class from register number */\n+/*  return register class from register number.  */\n \n static const int reg_class_tab[]={\n   GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n@@ -292,7 +292,7 @@ static const int reg_class_tab[]={\n   STACK_REG,STACK_REG           /* SPL,SPH */\n };\n \n-/* Return register class for register R */\n+/* Return register class for register R.  */\n \n enum reg_class\n avr_regno_reg_class (int r)\n@@ -415,7 +415,7 @@ avr_regs_to_save (HARD_REG_SET *set)\n   return count;\n }\n \n-/* Compute offset between arg_pointer and frame_pointer */\n+/* Compute offset between arg_pointer and frame_pointer.  */\n \n int\n initial_elimination_offset (int from, int to)\n@@ -446,7 +446,7 @@ avr_simple_epilogue (void)\n \t  && ! TREE_THIS_VOLATILE (current_function_decl));\n }\n \n-/* This function checks sequence of live registers */\n+/* This function checks sequence of live registers.  */\n \n static int\n sequent_regs_live (void)\n@@ -603,7 +603,7 @@ out_set_stack_ptr (FILE *file, int before, int after)\n }\n \n \n-/* Output function prologue */\n+/* Output function prologue.  */\n \n static void\n avr_output_function_prologue (FILE *file, HOST_WIDE_INT size)\n@@ -733,7 +733,7 @@ avr_output_function_prologue (FILE *file, HOST_WIDE_INT size)\n   fprintf (file, \"/* prologue end (size=%d) */\\n\", prologue_size);\n }\n \n-/* Output function epilogue */\n+/* Output function epilogue.  */\n \n static void\n avr_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n@@ -980,7 +980,7 @@ legitimize_address (rtx x, rtx oldx, enum machine_mode mode)\n }\n \n \n-/* Return a pointer register name as a string */\n+/* Return a pointer register name as a string.  */\n \n static const char *\n ptrreg_to_str (int regno)\n@@ -1027,7 +1027,7 @@ cond_string (enum rtx_code code)\n     }\n }\n \n-/* Output ADDR to FILE as address */\n+/* Output ADDR to FILE as address.  */\n \n void\n print_operand_address (FILE *file, rtx addr)\n@@ -1061,7 +1061,7 @@ print_operand_address (FILE *file, rtx addr)\n }\n \n \n-/* Output X as assembler operand to file FILE */\n+/* Output X as assembler operand to file FILE.  */\n      \n void\n print_operand (FILE *file, rtx x, int code)\n@@ -1132,7 +1132,7 @@ print_operand (FILE *file, rtx x, int code)\n     print_operand_address (file, x);\n }\n \n-/* Recognize operand OP of mode MODE used in call instructions */\n+/* Recognize operand OP of mode MODE used in call instructions.  */\n \n int\n call_insn_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n@@ -1454,7 +1454,7 @@ avr_num_arg_regs (enum machine_mode mode, tree type)\n }\n \n /* Controls whether a function argument is passed\n-   in a register, and which register. */\n+   in a register, and which register.  */\n \n rtx\n function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n@@ -2592,7 +2592,7 @@ out_movhi_mr_r (rtx insn, rtx op[], int *l)\n   return \"\";\n }\n \n-/* Return 1 if frame pointer for current function required */\n+/* Return 1 if frame pointer for current function required.  */\n \n int\n frame_pointer_required_p (void)\n@@ -2648,7 +2648,7 @@ compare_eq_p (rtx insn)\n }\n \n \n-/* Output test instruction for HImode */\n+/* Output test instruction for HImode.  */\n \n const char *\n out_tsthi (rtx insn, int *l)\n@@ -2661,7 +2661,7 @@ out_tsthi (rtx insn, int *l)\n   if (reg_unused_after (insn, SET_SRC (PATTERN (insn)))\n       && compare_eq_p (insn))\n     {\n-      /* faster than sbiw if we can clobber the operand */\n+      /* Faster than sbiw if we can clobber the operand.  */\n       if (l) *l = 1;\n       return AS2 (or,%A0,%B0);\n     }\n@@ -2676,7 +2676,7 @@ out_tsthi (rtx insn, int *l)\n }\n \n \n-/* Output test instruction for SImode */\n+/* Output test instruction for SImode.  */\n \n const char *\n out_tstsi (rtx insn, int *l)\n@@ -4215,7 +4215,7 @@ adjust_insn_length (rtx insn, int len)\n   return len;\n }\n \n-/* Return nonzero if register REG dead after INSN */\n+/* Return nonzero if register REG dead after INSN. */\n \n int\n reg_unused_after (rtx insn, rtx reg)\n@@ -4346,7 +4346,7 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n-/* Sets section name for declaration DECL */\n+/* Sets section name for declaration DECL.  */\n   \n static void\n avr_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n@@ -4838,7 +4838,7 @@ avr_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n-/* Calculate the cost of a memory address */\n+/* Calculate the cost of a memory address.  */\n \n static int\n avr_address_cost (rtx x)\n@@ -4903,7 +4903,7 @@ extra_constraint (rtx x, int c)\n   return 0;\n }\n \n-/* Convert condition code CONDITION to the valid AVR condition code */\n+/* Convert condition code CONDITION to the valid AVR condition code.  */\n \n RTX_CODE\n avr_normalize_condition (RTX_CODE condition)\n@@ -4948,7 +4948,7 @@ avr_reorg (void)\n \t{\n \t  if (GET_CODE (SET_SRC (pattern)) == COMPARE)\n \t    {\n-\t      /* Now we work under compare insn */\n+\t      /* Now we work under compare insn.  */\n \t      \n \t      pattern = SET_SRC (pattern);\n \t      if (true_regnum (XEXP (pattern,0)) >= 0"}, {"sha": "e253e38a7179351d172a0c001fae79ee611795c9", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c338472ba34ead6c5fb94b3053e0d416ab97522/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=2c338472ba34ead6c5fb94b3053e0d416ab97522", "patch": "@@ -178,7 +178,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"/* One of the ops has to be in a register */\n+  \"/* One of the ops has to be in a register.  */\n    if (!register_operand(operand0, QImode)\n        && ! (register_operand(operand1, QImode) || const0_rtx == operand1))\n        operands[1] = copy_to_mode_reg(QImode, operand1);\n@@ -226,7 +226,7 @@\n   \"\"\n   \"\n {\n-   /* One of the ops has to be in a register */\n+   /* One of the ops has to be in a register.  */\n   if (!register_operand(operand0, HImode)\n       && !(register_operand(operand1, HImode) || const0_rtx == operands[1]))\n     {"}]}