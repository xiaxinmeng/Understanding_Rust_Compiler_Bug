{"sha": "4d901dd7357b5e4150026548449166ebd5edd48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5MDFkZDczNTdiNWU0MTUwMDI2NTQ4NDQ5MTY2ZWJkNWVkZDQ4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-06T02:00:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-06T02:00:13Z"}, "message": "os: Clean up directory reading code.\n\nFrom-SVN: r194237", "tree": {"sha": "cc71dfa39df4e1b16b96f13ad38293dbc9f135e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc71dfa39df4e1b16b96f13ad38293dbc9f135e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d901dd7357b5e4150026548449166ebd5edd48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d901dd7357b5e4150026548449166ebd5edd48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d901dd7357b5e4150026548449166ebd5edd48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d901dd7357b5e4150026548449166ebd5edd48f/comments", "author": null, "committer": null, "parents": [{"sha": "d6981042607499e6e3f1b134d4b8cd969840b288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6981042607499e6e3f1b134d4b8cd969840b288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6981042607499e6e3f1b134d4b8cd969840b288"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "d811c9fdd863682e0bf601adbf8a342885780448", "filename": "libgo/go/os/dir.go", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d901dd7357b5e4150026548449166ebd5edd48f/libgo%2Fgo%2Fos%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d901dd7357b5e4150026548449166ebd5edd48f/libgo%2Fgo%2Fos%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir.go?ref=4d901dd7357b5e4150026548449166ebd5edd48f", "patch": "@@ -6,6 +6,7 @@ package os\n \n import (\n \t\"io\"\n+\t\"sync/atomic\"\n \t\"syscall\"\n \t\"unsafe\"\n )\n@@ -29,27 +30,42 @@ func clen(n []byte) int {\n \treturn len(n)\n }\n \n-var elen int\n+var nameMax int32\n \n func (file *File) readdirnames(n int) (names []string, err error) {\n-\tif elen == 0 {\n-\t\tvar dummy syscall.Dirent\n-\t\telen = (int(unsafe.Offsetof(dummy.Name)) +\n-\t\t\tlibc_pathconf(syscall.StringBytePtr(file.name), syscall.PC_NAME_MAX) +\n-\t\t\t1)\n-\t}\n-\n \tif file.dirinfo == nil {\n-\t\tfile.dirinfo = new(dirInfo)\n-\t\tfile.dirinfo.buf = make([]byte, elen)\n-\t\tp := syscall.StringBytePtr(file.name)\n+\t\tp, err := syscall.BytePtrFromString(file.name)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\telen := int(atomic.LoadInt32(&nameMax))\n+\t\tif elen == 0 {\n+\t\t\tsyscall.Entersyscall()\n+\t\t\tplen := libc_pathconf(p, syscall.PC_NAME_MAX)\n+\t\t\tsyscall.Exitsyscall()\n+\t\t\tif plen < 1024 {\n+\t\t\t\tplen = 1024\n+\t\t\t}\n+\t\t\tvar dummy syscall.Dirent\n+\t\t\telen = int(unsafe.Offsetof(dummy.Name)) + plen + 1\n+\t\t\tatomic.StoreInt32(&nameMax, int32(elen))\n+\t\t}\n+\n \t\tsyscall.Entersyscall()\n \t\tr := libc_opendir(p)\n+\t\terrno := syscall.GetErrno()\n \t\tsyscall.Exitsyscall()\n+\t\tif r == nil {\n+\t\t\treturn nil, &PathError{\"opendir\", file.name, errno}\n+\t\t}\n+\n+\t\tfile.dirinfo = new(dirInfo)\n+\t\tfile.dirinfo.buf = make([]byte, elen)\n \t\tfile.dirinfo.dir = r\n \t}\n \n-\tentry_dirent := (*syscall.Dirent)(unsafe.Pointer(&file.dirinfo.buf[0]))\n+\tentryDirent := (*syscall.Dirent)(unsafe.Pointer(&file.dirinfo.buf[0]))\n \n \tsize := n\n \tif size <= 0 {\n@@ -59,24 +75,20 @@ func (file *File) readdirnames(n int) (names []string, err error) {\n \n \tnames = make([]string, 0, size) // Empty with room to grow.\n \n-\tdir := file.dirinfo.dir\n-\tif dir == nil {\n-\t\treturn names, NewSyscallError(\"opendir\", syscall.GetErrno())\n-\t}\n-\n \tfor n != 0 {\n-\t\tvar result *syscall.Dirent\n-\t\tpr := &result\n+\t\tvar dirent *syscall.Dirent\n+\t\tpr := &dirent\n \t\tsyscall.Entersyscall()\n-\t\ti := libc_readdir_r(dir, entry_dirent, pr)\n+\t\ti := libc_readdir_r(file.dirinfo.dir, entryDirent, pr)\n \t\tsyscall.Exitsyscall()\n \t\tif i != 0 {\n \t\t\treturn names, NewSyscallError(\"readdir_r\", i)\n \t\t}\n-\t\tif result == nil {\n+\t\tif dirent == nil {\n \t\t\tbreak // EOF\n \t\t}\n-\t\tvar name = string(result.Name[0:clen(result.Name[0:])])\n+\t\tbytes := (*[10000]byte)(unsafe.Pointer(&dirent.Name[0]))\n+\t\tvar name = string(bytes[0:clen(bytes[:])])\n \t\tif name == \".\" || name == \"..\" { // Useless names\n \t\t\tcontinue\n \t\t}"}, {"sha": "68f4be88d06853c967df561aa4cdffa441a53759", "filename": "libgo/go/os/file_unix.go", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d901dd7357b5e4150026548449166ebd5edd48f/libgo%2Fgo%2Fos%2Ffile_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d901dd7357b5e4150026548449166ebd5edd48f/libgo%2Fgo%2Fos%2Ffile_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Ffile_unix.go?ref=4d901dd7357b5e4150026548449166ebd5edd48f", "patch": "@@ -108,8 +108,13 @@ func (file *file) close() error {\n \t}\n \n \tif file.dirinfo != nil {\n-\t\tif libc_closedir(file.dirinfo.dir) < 0 && err == nil {\n-\t\t\terr = &PathError{\"closedir\", file.name, syscall.GetErrno()}\n+\t\tsyscall.Entersyscall()\n+\t\ti := libc_closedir(file.dirinfo.dir)\n+\t\terrno := syscall.GetErrno()\n+\t\tsyscall.Exitsyscall()\n+\t\tfile.dirinfo = nil\n+\t\tif i < 0 && err == nil {\n+\t\t\terr = &PathError{\"closedir\", file.name, errno}\n \t\t}\n \t}\n "}]}