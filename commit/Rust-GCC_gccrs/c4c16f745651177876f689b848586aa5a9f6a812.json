{"sha": "c4c16f745651177876f689b848586aa5a9f6a812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjMTZmNzQ1NjUxMTc3ODc2ZjY4OWI4NDg1ODZhYTVhOWY2YTgxMg==", "commit": {"author": {"name": "Kostya Serebryany", "email": "kcc@google.com", "date": "2013-12-05T10:28:59Z"}, "committer": {"name": "Kostya Serebryany", "email": "kcc@gcc.gnu.org", "date": "2013-12-05T10:28:59Z"}, "message": "libsanitizer merge from upstream r196489\n\nFrom-SVN: r205700", "tree": {"sha": "9a355019c43c1ee17910aa964aac70eae64817a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a355019c43c1ee17910aa964aac70eae64817a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c16f745651177876f689b848586aa5a9f6a812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c16f745651177876f689b848586aa5a9f6a812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c16f745651177876f689b848586aa5a9f6a812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c16f745651177876f689b848586aa5a9f6a812/comments", "author": {"login": "kcc", "id": 1789297, "node_id": "MDQ6VXNlcjE3ODkyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kcc", "html_url": "https://github.com/kcc", "followers_url": "https://api.github.com/users/kcc/followers", "following_url": "https://api.github.com/users/kcc/following{/other_user}", "gists_url": "https://api.github.com/users/kcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kcc/subscriptions", "organizations_url": "https://api.github.com/users/kcc/orgs", "repos_url": "https://api.github.com/users/kcc/repos", "events_url": "https://api.github.com/users/kcc/events{/privacy}", "received_events_url": "https://api.github.com/users/kcc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "022351a2355150868e7fd4d34b45f141e97594ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022351a2355150868e7fd4d34b45f141e97594ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/022351a2355150868e7fd4d34b45f141e97594ee"}], "stats": {"total": 445, "additions": 329, "deletions": 116}, "files": [{"sha": "0af33d012ed8c80a8cc945a1f65d2b276c017a4b", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -1,3 +1,8 @@\n+2013-12-05  Kostya Serebryany  <kcc@google.com>\n+\n+\t* All source files: Merge from upstream r196489.\n+\t* merge.sh: Add *.S to the list of merged files.\n+\n 2013-12-05  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/59368"}, {"sha": "4688f0c8693fce034401f66122878b83d4573d4f", "filename": "libsanitizer/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FMERGE?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -1,4 +1,4 @@\n-196090\n+196489\n \n The first line of this file holds the svn revision number of the\n last merge done from the master library sources."}, {"sha": "1e37bc26e94548b9007aa5035aa0e2a8468118ad", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -63,8 +63,8 @@ static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa8000;\n \n #if ASAN_FLEXIBLE_MAPPING_AND_OFFSET == 1\n-extern SANITIZER_INTERFACE_ATTRIBUTE uptr __asan_mapping_scale;\n-extern SANITIZER_INTERFACE_ATTRIBUTE uptr __asan_mapping_offset;\n+extern \"C\" SANITIZER_INTERFACE_ATTRIBUTE uptr __asan_mapping_scale;\n+extern \"C\" SANITIZER_INTERFACE_ATTRIBUTE uptr __asan_mapping_offset;\n # define SHADOW_SCALE (__asan_mapping_scale)\n # define SHADOW_OFFSET (__asan_mapping_offset)\n #else"}, {"sha": "24cccbd196e33e9e6481e8817dfc37a947e72191", "filename": "libsanitizer/asan/asan_stack.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_stack.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_stack.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_stack.cc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -43,3 +43,11 @@ bool __asan_symbolize(const void *pc, char *out_buffer, int out_size) {\n   return false;\n }\n #endif\n+\n+extern \"C\" {\n+SANITIZER_INTERFACE_ATTRIBUTE\n+void __sanitizer_print_stack_trace() {\n+  using namespace __asan;\n+  PRINT_CURRENT_STACK();\n+}\n+}  // extern \"C\""}, {"sha": "df7a9805f92f0bfbf872c2b499287b3fef513dc0", "filename": "libsanitizer/asan/asan_stack.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fasan%2Fasan_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_stack.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -75,11 +75,10 @@ void PrintStack(const uptr *trace, uptr size);\n \n #define GET_STACK_TRACE_FREE GET_STACK_TRACE_MALLOC\n \n-#define PRINT_CURRENT_STACK()                    \\\n-  {                                              \\\n-    GET_STACK_TRACE(kStackTraceMax,              \\\n-      common_flags()->fast_unwind_on_fatal);     \\\n-    PrintStack(&stack);                          \\\n+#define PRINT_CURRENT_STACK()   \\\n+  {                             \\\n+    GET_STACK_TRACE_FATAL_HERE; \\\n+    PrintStack(&stack);         \\\n   }\n \n #endif  // ASAN_STACK_H"}, {"sha": "db8b3b543e3dc61ef51620f9cc82348acccee1ab", "filename": "libsanitizer/include/sanitizer/common_interface_defs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Finclude%2Fsanitizer%2Fcommon_interface_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Finclude%2Fsanitizer%2Fcommon_interface_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finclude%2Fsanitizer%2Fcommon_interface_defs.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -83,6 +83,9 @@ extern \"C\" {\n                                                  const void *old_mid,\n                                                  const void *new_mid);\n \n+  // Print the stack trace leading to this call. Useful for debugging user code.\n+  void __sanitizer_print_stack_trace();\n+\n #ifdef __cplusplus\n }  // extern \"C\"\n #endif"}, {"sha": "29e444248f158b3dc2bec6b8138ad732cb1d8136", "filename": "libsanitizer/merge.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fmerge.sh?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -16,7 +16,7 @@ get_current_rev() {\n }\n \n list_files() {\n-  (cd $1; ls *.{cc,h,inc} 2> /dev/null)\n+  (cd $1; ls *.{cc,h,inc,S} 2> /dev/null)\n \n }\n "}, {"sha": "0d93527aa5e583d5b7c898680c72adb0bc1a9872", "filename": "libsanitizer/sanitizer_common/sanitizer_common.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.cc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -40,6 +40,13 @@ char report_path_prefix[sizeof(report_path_prefix)];\n // child thread will be different from |report_fd_pid|.\n uptr report_fd_pid = 0;\n \n+// PID of the tracer task in StopTheWorld. It shares the address space with the\n+// main process, but has a different PID and thus requires special handling.\n+uptr stoptheworld_tracer_pid = 0;\n+// Cached pid of parent process - if the parent process dies, we want to keep\n+// writing to the same log file.\n+uptr stoptheworld_tracer_ppid = 0;\n+\n static DieCallbackType DieCallback;\n void SetDieCallback(DieCallbackType callback) {\n   DieCallback = callback;"}, {"sha": "07d1b63db584f394f063b7425cab76a0e5747b5a", "filename": "libsanitizer/sanitizer_common/sanitizer_common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -134,6 +134,8 @@ extern fd_t report_fd;\n extern bool log_to_file;\n extern char report_path_prefix[4096];\n extern uptr report_fd_pid;\n+extern uptr stoptheworld_tracer_pid;\n+extern uptr stoptheworld_tracer_ppid;\n \n uptr OpenFile(const char *filename, bool write);\n // Opens the file 'file_name\" and reads up to 'max_len' bytes.\n@@ -318,8 +320,7 @@ template<typename T>\n class InternalMmapVector {\n  public:\n   explicit InternalMmapVector(uptr initial_capacity) {\n-    CHECK_GT(initial_capacity, 0);\n-    capacity_ = initial_capacity;\n+    capacity_ = Max(initial_capacity, (uptr)1);\n     size_ = 0;\n     data_ = (T *)MmapOrDie(capacity_ * sizeof(T), \"InternalMmapVector\");\n   }"}, {"sha": "e301dc17bd35fc9b0e1c61068e47ee58d9a8744e", "filename": "libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -58,6 +58,22 @@\n #define COMMON_INTERCEPTOR_HANDLE_RECVMSG(ctx, msg) ((void)(msg))\n #endif\n \n+#if SANITIZER_INTERCEPT_TEXTDOMAIN\n+INTERCEPTOR(char*, textdomain, const char *domainname) {\n+  void *ctx;\n+  COMMON_INTERCEPTOR_ENTER(ctx, textdomain, domainname);\n+  char* domain = REAL(textdomain)(domainname);\n+  if (domain) {\n+    COMMON_INTERCEPTOR_INITIALIZE_RANGE(ctx, domain,\n+        REAL(strlen)(domain) + 1);\n+  }\n+  return domain;\n+}\n+#define INIT_TEXTDOMAIN COMMON_INTERCEPT_FUNCTION(textdomain)\n+#else\n+#define INIT_TEXTDOMAIN\n+#endif\n+\n #if SANITIZER_INTERCEPT_STRCMP\n static inline int CharCmpX(unsigned char c1, unsigned char c2) {\n   return (c1 == c2) ? 0 : (c1 < c2) ? -1 : 1;\n@@ -2891,6 +2907,7 @@ INTERCEPTOR(__sanitizer_clock_t, times, void *tms) {\n #endif\n \n #define SANITIZER_COMMON_INTERCEPTORS_INIT \\\n+  INIT_TEXTDOMAIN;                         \\\n   INIT_STRCMP;                             \\\n   INIT_STRNCMP;                            \\\n   INIT_STRCASECMP;                         \\"}, {"sha": "f37d84b041d807eae8654c9666422708baf7e249", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -46,6 +46,7 @@\n #endif\n \n # define SANITIZER_INTERCEPT_STRCMP 1\n+# define SANITIZER_INTERCEPT_TEXTDOMAIN SI_LINUX_NOT_ANDROID\n # define SANITIZER_INTERCEPT_STRCASECMP SI_NOT_WINDOWS\n \n # define SANITIZER_INTERCEPT_READ   SI_NOT_WINDOWS"}, {"sha": "f98ebea79f4d23a71acc988a26ef018721c35fc4", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -140,23 +140,32 @@ namespace __sanitizer {\n     int gid;\n     int cuid;\n     int cgid;\n-#ifdef __powerpc64__\n+#ifdef __powerpc__\n     unsigned mode;\n     unsigned __seq;\n+    u64 __unused1;\n+    u64 __unused2;\n #else\n     unsigned short mode;\n     unsigned short __pad1;\n     unsigned short __seq;\n     unsigned short __pad2;\n+#if defined(__x86_64__) && !defined(_LP64)\n+    u64 __unused1;\n+    u64 __unused2;\n+#else\n+    unsigned long __unused1;\n+    unsigned long __unused2;\n+#endif\n #endif\n-    uptr __unused1;\n-    uptr __unused2;\n   };\n \n   struct __sanitizer_shmid_ds {\n     __sanitizer_ipc_perm shm_perm;\n   #ifndef __powerpc__\n     uptr shm_segsz;\n+  #elif !defined(__powerpc64__)\n+    uptr __unused0;\n   #endif\n     uptr shm_atime;\n   #ifndef _LP64\n@@ -288,17 +297,20 @@ namespace __sanitizer {\n   typedef long __sanitizer_clock_t;\n \n #if SANITIZER_LINUX\n-#if defined(_LP64) || defined(__x86_64__)\n+#if defined(_LP64) || defined(__x86_64__) || defined(__powerpc__)\n   typedef unsigned __sanitizer___kernel_uid_t;\n   typedef unsigned __sanitizer___kernel_gid_t;\n-  typedef long long __sanitizer___kernel_off_t;\n #else\n   typedef unsigned short __sanitizer___kernel_uid_t;\n   typedef unsigned short __sanitizer___kernel_gid_t;\n+#endif\n+#if defined(__x86_64__) && !defined(_LP64)\n+  typedef long long __sanitizer___kernel_off_t;\n+#else\n   typedef long __sanitizer___kernel_off_t;\n #endif\n \n-#if defined(__powerpc64__)\n+#if defined(__powerpc__)\n   typedef unsigned int __sanitizer___kernel_old_uid_t;\n   typedef unsigned int __sanitizer___kernel_old_gid_t;\n #else"}, {"sha": "ef5cb0b03b8ec28a2a1e9851371088711bf57f1d", "filename": "libsanitizer/sanitizer_common/sanitizer_posix.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -196,10 +196,15 @@ char *FindPathToBinary(const char *name) {\n }\n \n void MaybeOpenReportFile() {\n-  if (!log_to_file || (report_fd_pid == internal_getpid())) return;\n+  if (!log_to_file) return;\n+  uptr pid = internal_getpid();\n+  // If in tracer, use the parent's file.\n+  if (pid == stoptheworld_tracer_pid)\n+    pid = stoptheworld_tracer_ppid;\n+  if (report_fd_pid == pid) return;\n   InternalScopedBuffer<char> report_path_full(4096);\n   internal_snprintf(report_path_full.data(), report_path_full.size(),\n-                    \"%s.%d\", report_path_prefix, internal_getpid());\n+                    \"%s.%d\", report_path_prefix, pid);\n   uptr openrv = OpenFile(report_path_full.data(), true);\n   if (internal_iserror(openrv)) {\n     report_fd = kStderrFd;\n@@ -212,7 +217,7 @@ void MaybeOpenReportFile() {\n     internal_close(report_fd);\n   }\n   report_fd = openrv;\n-  report_fd_pid = internal_getpid();\n+  report_fd_pid = pid;\n }\n \n void RawWrite(const char *buffer) {\n@@ -228,12 +233,11 @@ void RawWrite(const char *buffer) {\n \n bool GetCodeRangeForFile(const char *module, uptr *start, uptr *end) {\n   uptr s, e, off, prot;\n-  InternalMmapVector<char> fn(4096);\n-  fn.push_back(0);\n+  InternalScopedString buff(4096);\n   MemoryMappingLayout proc_maps(/*cache_enabled*/false);\n-  while (proc_maps.Next(&s, &e, &off, &fn[0], fn.capacity(), &prot)) {\n+  while (proc_maps.Next(&s, &e, &off, buff.data(), buff.size(), &prot)) {\n     if ((prot & MemoryMappingLayout::kProtectionExecute) != 0\n-        && internal_strcmp(module, &fn[0]) == 0) {\n+        && internal_strcmp(module, buff.data()) == 0) {\n       *start = s;\n       *end = e;\n       return true;"}, {"sha": "6ee63ec31686dead6a811a59b8f19eba4eab5603", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -354,6 +354,20 @@ class StopTheWorldScope {\n   int process_was_dumpable_;\n };\n \n+// When sanitizer output is being redirected to file (i.e. by using log_path),\n+// the tracer should write to the parent's log instead of trying to open a new\n+// file. Alert the logging code to the fact that we have a tracer.\n+struct ScopedSetTracerPID {\n+  explicit ScopedSetTracerPID(uptr tracer_pid) {\n+    stoptheworld_tracer_pid = tracer_pid;\n+    stoptheworld_tracer_ppid = internal_getpid();\n+  }\n+  ~ScopedSetTracerPID() {\n+    stoptheworld_tracer_pid = 0;\n+    stoptheworld_tracer_ppid = 0;\n+  }\n+};\n+\n void StopTheWorld(StopTheWorldCallback callback, void *argument) {\n   StopTheWorldScope in_stoptheworld;\n   // Prepare the arguments for TracerThread.\n@@ -377,6 +391,7 @@ void StopTheWorld(StopTheWorldCallback callback, void *argument) {\n       Report(\"Failed spawning a tracer thread (errno %d).\\n\", local_errno);\n     tracer_thread_argument.mutex.Unlock();\n   } else {\n+    ScopedSetTracerPID scoped_set_tracer_pid(tracer_pid);\n     // On some systems we have to explicitly declare that we want to be traced\n     // by the tracer thread.\n #ifdef PR_SET_PTRACER"}, {"sha": "20493ea4d3b94cfc2c07af771a697992b8ac82e1", "filename": "libsanitizer/tsan/tsan_rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -26,6 +26,7 @@\n \n #include \"sanitizer_common/sanitizer_allocator.h\"\n #include \"sanitizer_common/sanitizer_allocator_internal.h\"\n+#include \"sanitizer_common/sanitizer_asm.h\"\n #include \"sanitizer_common/sanitizer_common.h\"\n #include \"sanitizer_common/sanitizer_libignore.h\"\n #include \"sanitizer_common/sanitizer_suppressions.h\"\n@@ -734,11 +735,11 @@ void AcquireReleaseImpl(ThreadState *thr, uptr pc, SyncClock *c);\n // so we create a reserve stack frame for it (1024b must be enough).\n #define HACKY_CALL(f) \\\n   __asm__ __volatile__(\"sub $1024, %%rsp;\" \\\n-                       \".cfi_adjust_cfa_offset 1024;\" \\\n+                       CFI_INL_ADJUST_CFA_OFFSET(1024) \\\n                        \".hidden \" #f \"_thunk;\" \\\n                        \"call \" #f \"_thunk;\" \\\n                        \"add $1024, %%rsp;\" \\\n-                       \".cfi_adjust_cfa_offset -1024;\" \\\n+                       CFI_INL_ADJUST_CFA_OFFSET(-1024) \\\n                        ::: \"memory\", \"cc\");\n #else\n #define HACKY_CALL(f) f()"}, {"sha": "71a2ecda9ddac8a1dac492b649bde055858b9838", "filename": "libsanitizer/tsan/tsan_rtl_amd64.S", "status": "modified", "additions": 228, "deletions": 90, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_rtl_amd64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_rtl_amd64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_amd64.S?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -1,162 +1,300 @@\n-.section .text\n-\n+#include \"sanitizer_common/sanitizer_asm.h\"\n+.hidden __tsan_trace_switch\n .globl __tsan_trace_switch_thunk\n __tsan_trace_switch_thunk:\n-  .cfi_startproc\n+  CFI_STARTPROC\n   # Save scratch registers.\n   push %rax\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rax, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rax, 0)\n   push %rcx\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rcx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rcx, 0)\n   push %rdx\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rdx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdx, 0)\n   push %rsi\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rsi, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rsi, 0)\n   push %rdi\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rdi, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n   push %r8\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r8, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r8, 0)\n   push %r9\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r9, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r9, 0)\n   push %r10\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r10, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r10, 0)\n   push %r11\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r11, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r11, 0)\n   # Align stack frame.\n   push %rbx  # non-scratch\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rbx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rbx, 0)\n   mov %rsp, %rbx  # save current rsp\n-  .cfi_def_cfa_register %rbx\n+  CFI_DEF_CFA_REGISTER(%rbx)\n   shr $4, %rsp  # clear 4 lsb, align to 16\n   shl $4, %rsp\n \n   call __tsan_trace_switch\n \n   # Unalign stack frame back.\n   mov %rbx, %rsp  # restore the original rsp\n-  .cfi_def_cfa_register %rsp\n+  CFI_DEF_CFA_REGISTER(%rsp)\n   pop %rbx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   # Restore scratch registers.\n   pop %r11\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r10\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r9\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r8\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rdi\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rsi\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rdx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rcx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rax\n-  .cfi_adjust_cfa_offset -8\n-  .cfi_restore %rax\n-  .cfi_restore %rbx\n-  .cfi_restore %rcx\n-  .cfi_restore %rdx\n-  .cfi_restore %rsi\n-  .cfi_restore %rdi\n-  .cfi_restore %r8\n-  .cfi_restore %r9\n-  .cfi_restore %r10\n-  .cfi_restore %r11\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rax)\n+  CFI_RESTORE(%rbx)\n+  CFI_RESTORE(%rcx)\n+  CFI_RESTORE(%rdx)\n+  CFI_RESTORE(%rsi)\n+  CFI_RESTORE(%rdi)\n+  CFI_RESTORE(%r8)\n+  CFI_RESTORE(%r9)\n+  CFI_RESTORE(%r10)\n+  CFI_RESTORE(%r11)\n   ret\n-  .cfi_endproc\n+  CFI_ENDPROC\n \n+.hidden __tsan_report_race\n .globl __tsan_report_race_thunk\n __tsan_report_race_thunk:\n-  .cfi_startproc\n+  CFI_STARTPROC\n   # Save scratch registers.\n   push %rax\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rax, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rax, 0)\n   push %rcx\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rcx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rcx, 0)\n   push %rdx\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rdx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdx, 0)\n   push %rsi\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rsi, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rsi, 0)\n   push %rdi\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rdi, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n   push %r8\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r8, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r8, 0)\n   push %r9\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r9, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r9, 0)\n   push %r10\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r10, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r10, 0)\n   push %r11\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %r11, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%r11, 0)\n   # Align stack frame.\n   push %rbx  # non-scratch\n-  .cfi_adjust_cfa_offset 8\n-  .cfi_rel_offset %rbx, 0\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rbx, 0)\n   mov %rsp, %rbx  # save current rsp\n-  .cfi_def_cfa_register %rbx\n+  CFI_DEF_CFA_REGISTER(%rbx)\n   shr $4, %rsp  # clear 4 lsb, align to 16\n   shl $4, %rsp\n \n   call __tsan_report_race\n \n   # Unalign stack frame back.\n   mov %rbx, %rsp  # restore the original rsp\n-  .cfi_def_cfa_register %rsp\n+  CFI_DEF_CFA_REGISTER(%rsp)\n   pop %rbx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   # Restore scratch registers.\n   pop %r11\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r10\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r9\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %r8\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rdi\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rsi\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rdx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rcx\n-  .cfi_adjust_cfa_offset -8\n+  CFI_ADJUST_CFA_OFFSET(-8)\n   pop %rax\n-  .cfi_adjust_cfa_offset -8\n-  .cfi_restore %rax\n-  .cfi_restore %rbx\n-  .cfi_restore %rcx\n-  .cfi_restore %rdx\n-  .cfi_restore %rsi\n-  .cfi_restore %rdi\n-  .cfi_restore %r8\n-  .cfi_restore %r9\n-  .cfi_restore %r10\n-  .cfi_restore %r11\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rax)\n+  CFI_RESTORE(%rbx)\n+  CFI_RESTORE(%rcx)\n+  CFI_RESTORE(%rdx)\n+  CFI_RESTORE(%rsi)\n+  CFI_RESTORE(%rdi)\n+  CFI_RESTORE(%r8)\n+  CFI_RESTORE(%r9)\n+  CFI_RESTORE(%r10)\n+  CFI_RESTORE(%r11)\n   ret\n-  .cfi_endproc\n+  CFI_ENDPROC\n+\n+.hidden __tsan_setjmp\n+.comm _ZN14__interception11real_setjmpE,8,8\n+.globl setjmp\n+.type setjmp, @function\n+setjmp:\n+  CFI_STARTPROC\n+  // save env parameter\n+  push %rdi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n+  // obtain %rsp\n+  lea 16(%rsp), %rdi\n+  mov %rdi, %rsi\n+  xor %fs:0x30, %rsi  // magic mangling of rsp (see libc setjmp)\n+  rol $0x11, %rsi\n+  // call tsan interceptor\n+  call __tsan_setjmp\n+  // restore env parameter\n+  pop %rdi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rdi)\n+  // tail jump to libc setjmp\n+  movl $0, %eax\n+  movq _ZN14__interception11real_setjmpE@GOTPCREL(%rip), %rdx\n+  jmp *(%rdx)\n+  CFI_ENDPROC\n+.size setjmp, .-setjmp\n+\n+.comm _ZN14__interception12real__setjmpE,8,8\n+.globl _setjmp\n+.type _setjmp, @function\n+_setjmp:\n+  CFI_STARTPROC\n+  // save env parameter\n+  push %rdi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n+  // obtain %rsp\n+  lea 16(%rsp), %rdi\n+  mov %rdi, %rsi\n+  xor %fs:0x30, %rsi  // magic mangling of rsp (see libc setjmp)\n+  rol $0x11, %rsi\n+  // call tsan interceptor\n+  call __tsan_setjmp\n+  // restore env parameter\n+  pop %rdi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rdi)\n+  // tail jump to libc setjmp\n+  movl $0, %eax\n+  movq _ZN14__interception12real__setjmpE@GOTPCREL(%rip), %rdx\n+  jmp *(%rdx)\n+  CFI_ENDPROC\n+.size _setjmp, .-_setjmp\n+\n+.comm _ZN14__interception14real_sigsetjmpE,8,8\n+.globl sigsetjmp\n+.type sigsetjmp, @function\n+sigsetjmp:\n+  CFI_STARTPROC\n+  // save env parameter\n+  push %rdi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n+  // save savesigs parameter\n+  push %rsi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rsi, 0)\n+  // align stack frame\n+  sub $8, %rsp\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  // obtain %rsp\n+  lea 32(%rsp), %rdi\n+  mov %rdi, %rsi\n+  xor %fs:0x30, %rsi  // magic mangling of rsp (see libc setjmp)\n+  rol $0x11, %rsi\n+  // call tsan interceptor\n+  call __tsan_setjmp\n+  // unalign stack frame\n+  add $8, %rsp\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  // restore savesigs parameter\n+  pop %rsi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rsi)\n+  // restore env parameter\n+  pop %rdi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rdi)\n+  // tail jump to libc sigsetjmp\n+  movl $0, %eax\n+  movq _ZN14__interception14real_sigsetjmpE@GOTPCREL(%rip), %rdx\n+  jmp *(%rdx)\n+  CFI_ENDPROC\n+.size sigsetjmp, .-sigsetjmp\n+\n+.comm _ZN14__interception16real___sigsetjmpE,8,8\n+.globl __sigsetjmp\n+.type __sigsetjmp, @function\n+__sigsetjmp:\n+  CFI_STARTPROC\n+  // save env parameter\n+  push %rdi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rdi, 0)\n+  // save savesigs parameter\n+  push %rsi\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  CFI_REL_OFFSET(%rsi, 0)\n+  // align stack frame\n+  sub $8, %rsp\n+  CFI_ADJUST_CFA_OFFSET(8)\n+  // obtain %rsp\n+  lea 32(%rsp), %rdi\n+  mov %rdi, %rsi\n+  xor %fs:0x30, %rsi  // magic mangling of rsp (see libc setjmp)\n+  rol $0x11, %rsi\n+  // call tsan interceptor\n+  call __tsan_setjmp\n+  // unalign stack frame\n+  add $8, %rsp\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  // restore savesigs parameter\n+  pop %rsi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rsi)\n+  // restore env parameter\n+  pop %rdi\n+  CFI_ADJUST_CFA_OFFSET(-8)\n+  CFI_RESTORE(%rdi)\n+  // tail jump to libc sigsetjmp\n+  movl $0, %eax\n+  movq _ZN14__interception16real___sigsetjmpE@GOTPCREL(%rip), %rdx\n+  jmp *(%rdx)\n+  CFI_ENDPROC\n+.size __sigsetjmp, .-__sigsetjmp\n \n #ifdef __linux__\n /* We do not need executable stack.  */"}, {"sha": "6bc345397adb2e79728aa174ee7fced350df5d56", "filename": "libsanitizer/tsan/tsan_stat.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_stat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_stat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_stat.cc?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -124,6 +124,7 @@ void StatOutput(u64 *stat) {\n   name[StatInt_strlen]                   = \"  strlen                          \";\n   name[StatInt_memset]                   = \"  memset                          \";\n   name[StatInt_memcpy]                   = \"  memcpy                          \";\n+  name[StatInt_textdomain]               = \"  textdomain                      \";\n   name[StatInt_strcmp]                   = \"  strcmp                          \";\n   name[StatInt_memchr]                   = \"  memchr                          \";\n   name[StatInt_memrchr]                  = \"  memrchr                         \";"}, {"sha": "3e08313d1a5fa5c3639372d5e9ac4b3f6ce376aa", "filename": "libsanitizer/tsan/tsan_stat.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_stat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c16f745651177876f689b848586aa5a9f6a812/libsanitizer%2Ftsan%2Ftsan_stat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_stat.h?ref=c4c16f745651177876f689b848586aa5a9f6a812", "patch": "@@ -121,6 +121,7 @@ enum StatType {\n   StatInt_strlen,\n   StatInt_memset,\n   StatInt_memcpy,\n+  StatInt_textdomain,\n   StatInt_strcmp,\n   StatInt_memchr,\n   StatInt_memrchr,"}]}