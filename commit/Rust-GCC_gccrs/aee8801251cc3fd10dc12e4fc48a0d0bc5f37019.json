{"sha": "aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVlODgwMTI1MWNjM2ZkMTBkYzEyZTRmYzQ4YTBkMGJjNWYzNzAxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-05T04:33:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-05T04:33:08Z"}, "message": "re PR c++/50248 ([C++0x] unnecessary instantiation of constexpr constructor)\n\n\tPR c++/50248\n\tCore 1358\n\t* init.c (perform_member_init): Don't diagnose missing inits here.\n\t(emit_mem_initializers): Or here.\n\t* method.c (process_subob_fn): Don't instantiate constexpr ctors.\n\t* semantics.c (cx_check_missing_mem_inits): New.\n\t(explain_invalid_constexpr_fn): Call it.\n\t(register_constexpr_fundef): Likewise.  Leave\n\tDECL_DECLARED_CONSTEXPR_P set when the body is unsuitable.\n\t(cxx_eval_call_expression): Adjust diagnostics.\n\t(cxx_eval_constant_expression): Catch use of 'this' in a constructor.\n\nFrom-SVN: r178518", "tree": {"sha": "d41708befc760369af40f5ad47e802f104006409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d41708befc760369af40f5ad47e802f104006409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e818d3ff6869ccfe551e999cbe270266ff1c33ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e818d3ff6869ccfe551e999cbe270266ff1c33ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e818d3ff6869ccfe551e999cbe270266ff1c33ec"}], "stats": {"total": 188, "additions": 146, "deletions": 42}, "files": [{"sha": "a83d19ba665c878d011f25ccb0365ba5fcfc1aa5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -1,3 +1,17 @@\n+2011-09-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50248\n+\tCore 1358\n+\t* init.c (perform_member_init): Don't diagnose missing inits here.\n+\t(emit_mem_initializers): Or here.\n+\t* method.c (process_subob_fn): Don't instantiate constexpr ctors.\n+\t* semantics.c (cx_check_missing_mem_inits): New.\n+\t(explain_invalid_constexpr_fn): Call it.\n+\t(register_constexpr_fundef): Likewise.  Leave\n+\tDECL_DECLARED_CONSTEXPR_P set when the body is unsuitable.\n+\t(cxx_eval_call_expression): Adjust diagnostics.\n+\t(cxx_eval_constant_expression): Catch use of 'this' in a constructor.\n+\n 2011-08-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50084"}, {"sha": "ff1884b361de5f6cb45891db5f083beaea6868ce", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -606,15 +606,6 @@ perform_member_init (tree member, tree init)\n \n \t  core_type = strip_array_types (type);\n \n-\t  if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-\t      && !type_has_constexpr_default_constructor (core_type))\n-\t    {\n-\t      if (!DECL_TEMPLATE_INSTANTIATION (current_function_decl))\n-\t\terror (\"uninitialized member %qD in %<constexpr%> constructor\",\n-\t\t       member);\n-\t      DECL_DECLARED_CONSTEXPR_P (current_function_decl) = false;\n-\t    }\n-\n \t  if (CLASS_TYPE_P (core_type)\n \t      && (CLASSTYPE_READONLY_FIELDS_NEED_INIT (core_type)\n \t\t  || CLASSTYPE_REF_FIELDS_NEED_INIT (core_type)))\n@@ -962,16 +953,6 @@ emit_mem_initializers (tree mem_inits)\n \t\t\tOPT_Wextra, \"base class %q#T should be explicitly \"\n \t\t\t\"initialized in the copy constructor\",\n \t\t\tBINFO_TYPE (subobject));\n-\n-\t  if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-\t      && !(type_has_constexpr_default_constructor\n-\t\t   (BINFO_TYPE (subobject))))\n-\t    {\n-\t      if (!DECL_TEMPLATE_INSTANTIATION (current_function_decl))\n-\t\terror (\"uninitialized base %qT in %<constexpr%> constructor\",\n-\t\t       BINFO_TYPE (subobject));\n-\t      DECL_DECLARED_CONSTEXPR_P (current_function_decl) = false;\n-\t    }\n \t}\n \n       /* Initialize the base.  */"}, {"sha": "74a3bdbd83961d51099ed48941b1e1439356f3eb", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -952,23 +952,14 @@ process_subob_fn (tree fn, bool move_p, tree *spec_p, bool *trivial_p,\n       goto bad;\n     }\n \n-  if (constexpr_p)\n+  if (constexpr_p && !DECL_DECLARED_CONSTEXPR_P (fn))\n     {\n-      /* If this is a specialization of a constexpr template, we need to\n-\t force the instantiation now so that we know whether or not it's\n-\t really constexpr.  */\n-      if (DECL_DECLARED_CONSTEXPR_P (fn) && DECL_TEMPLATE_INSTANTIATION (fn)\n-\t  && !DECL_TEMPLATE_INSTANTIATED (fn))\n-\tinstantiate_decl (fn, /*defer_ok*/false, /*expl_class*/false);\n-      if (!DECL_DECLARED_CONSTEXPR_P (fn))\n+      *constexpr_p = false;\n+      if (msg)\n \t{\n-\t  *constexpr_p = false;\n-\t  if (msg)\n-\t    {\n-\t      inform (0, \"defaulted constructor calls non-constexpr \"\n-\t\t      \"%q+D\", fn);\n-\t      explain_invalid_constexpr_fn (fn);\n-\t    }\n+\t  inform (0, \"defaulted constructor calls non-constexpr \"\n+\t\t  \"%q+D\", fn);\n+\t  explain_invalid_constexpr_fn (fn);\n \t}\n     }\n "}, {"sha": "fd96d706c89e26deb89cec9325baad9ee87d500f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -5775,6 +5775,53 @@ massage_constexpr_body (tree fun, tree body)\n   return body;\n }\n \n+/* FUN is a constexpr constructor with massaged body BODY.  Return true\n+   if some bases/fields are uninitialized, and complain if COMPLAIN.  */\n+\n+static bool\n+cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n+{\n+  bool bad;\n+  tree field;\n+  unsigned i, nelts;\n+\n+  if (TREE_CODE (body) != CONSTRUCTOR)\n+    return false;\n+\n+  bad = false;\n+  nelts = CONSTRUCTOR_NELTS (body);\n+  field = TYPE_FIELDS (DECL_CONTEXT (fun));\n+  for (i = 0; i <= nelts; ++i)\n+    {\n+      tree index;\n+      if (i == nelts)\n+\tindex = NULL_TREE;\n+      else\n+\t{\n+\t  index = CONSTRUCTOR_ELT (body, i)->index;\n+\t  /* Skip base vtable inits.  */\n+\t  if (TREE_CODE (index) == COMPONENT_REF)\n+\t    continue;\n+\t}\n+      for (; field != index; field = DECL_CHAIN (field))\n+\t{\n+\t  if (TREE_CODE (field) != FIELD_DECL\n+\t      || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n+\t    continue;\n+\t  if (!complain)\n+\t    return true;\n+\t  error (\"uninitialized member %qD in %<constexpr%> constructor\",\n+\t\t field);\n+\t  bad = true;\n+\t}\n+      if (field == NULL_TREE)\n+\tbreak;\n+      field = DECL_CHAIN (field);\n+    }\n+\n+  return bad;\n+}\n+\n /* We are processing the definition of the constexpr function FUN.\n    Check that its BODY fulfills the propriate requirements and\n    enter it in the constexpr function definition table.\n@@ -5797,12 +5844,15 @@ register_constexpr_fundef (tree fun, tree body)\n \n   if (!potential_rvalue_constant_expression (body))\n     {\n-      DECL_DECLARED_CONSTEXPR_P (fun) = false;\n       if (!DECL_TEMPLATE_INFO (fun))\n \trequire_potential_rvalue_constant_expression (body);\n       return NULL;\n     }\n \n+  if (DECL_CONSTRUCTOR_P (fun)\n+      && cx_check_missing_mem_inits (fun, body, !DECL_TEMPLATE_INFO (fun)))\n+    return NULL;\n+\n   /* Create the constexpr function table if necessary.  */\n   if (constexpr_fundef_table == NULL)\n     constexpr_fundef_table = htab_create_ggc (101,\n@@ -5842,8 +5892,7 @@ explain_invalid_constexpr_fn (tree fun)\n \n   save_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (fun);\n-  inform (0, \"%q+D is not constexpr because it does not satisfy the \"\n-\t  \"requirements:\", fun);\n+  inform (0, \"%q+D is not usable as a constexpr function because:\", fun);\n   /* First check the declaration.  */\n   if (is_valid_constexpr_fn (fun, true))\n     {\n@@ -5854,6 +5903,8 @@ explain_invalid_constexpr_fn (tree fun)\n \t{\n \t  body = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n \t  require_potential_rvalue_constant_expression (body);\n+\t  if (DECL_CONSTRUCTOR_P (fun))\n+\t    cx_check_missing_mem_inits (fun, body, true);\n \t}\n     }\n   input_location = save_loc;\n@@ -6203,7 +6254,16 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n       if (new_call.fundef == NULL || new_call.fundef->body == NULL)\n         {\n \t  if (!allow_non_constant)\n-\t    error_at (loc, \"%qD used before its definition\", fun);\n+\t    {\n+\t      if (DECL_SAVED_TREE (fun))\n+\t\t{\n+\t\t  /* The definition of fun was somehow unsuitable.  */\n+\t\t  error_at (loc, \"%qD called in a constant expression\", fun);\n+\t\t  explain_invalid_constexpr_fn (fun);\n+\t\t}\n+\t      else\n+\t\terror_at (loc, \"%qD used before its definition\", fun);\n+\t    }\n \t  *non_constant_p = true;\n           return t;\n         }\n@@ -7176,7 +7236,17 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \n     case PARM_DECL:\n       if (call && DECL_CONTEXT (t) == call->fundef->decl)\n-\tr = lookup_parameter_binding (call, t);\n+\t{\n+\t  if (DECL_ARTIFICIAL (t) && DECL_CONSTRUCTOR_P (DECL_CONTEXT (t)))\n+\t    {\n+\t      if (!allow_non_constant)\n+\t\tsorry (\"use of the value of the object being constructed \"\n+\t\t       \"in a constant expression\");\n+\t      *non_constant_p = true;\n+\t    }\n+\t  else\n+\t    r = lookup_parameter_binding (call, t);\n+\t}\n       else if (addr)\n \t/* Defer in case this is only used for its type.  */;\n       else"}, {"sha": "19441c44b790633aa58e7d0607f56f9b0a83de6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -1,3 +1,12 @@\n+2011-09-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50248\n+\tCore 1358\n+\t* g++.dg/cpp0x/constexpr-template1.C: New.\n+\t* g++.dg/cpp0x/constexpr-template2.C: New.\n+\t* g++.dg/cpp0x/constexpr-48089.C: Adjust error markup.\n+\t* g++.dg/cpp0x/constexpr-ex1.C: Adjust error markup.\n+\n 2011-09-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/debug1.ads: Tweak pattern."}, {"sha": "a6cf4080756c57527d3fa7c94c67792154bb8df4", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-48089.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -14,7 +14,7 @@ struct s {\n   int v;\n };\n \n-constexpr s bang;\t\t// { dg-error \"\" }\n+constexpr s bang;\t\t// { dg-message \"\" }\n \n struct R {\n   int i,j;\n@@ -33,7 +33,7 @@ struct T {\n \n constexpr T t1;\n // Ill-formed (diagnostic required)\n-constexpr T t2(t1);\t\t// { dg-error \"\" }\n+constexpr T t2(t1);\t\t// { dg-message \"\" }\n \n // Well-formed\n struct U {"}, {"sha": "3df7956fd28d434dd3cb08ff3b0f2cf0de9a12b5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -89,6 +89,6 @@ struct resource {\n };\n constexpr resource f(resource d)\n { return d; }                  // { dg-error \"non-constexpr\" }\n-constexpr resource d = f(9);   // { dg-error \"resource\" }\n+constexpr resource d = f(9);   // { dg-message \"constexpr\" }\n \n // 4.4 floating-point constant expressions"}, {"sha": "88077231b0ddec0550fa6f1a3c83a729614e7704", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-template1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template1.C?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/50248, DR 1358\n+// { dg-options -std=c++0x }\n+\n+template<class Elt, unsigned max>\n+struct earray\n+{\n+    Elt elts[max];\n+    earray() = default;\n+    template<typename... Elt2>\n+    constexpr earray(Elt2&& ... e): elts(0) { }\n+};\n+\n+struct SessionData\n+{\n+    SessionData(SessionData&) = delete;\n+    SessionData() = default;\n+};\n+\n+struct MapSessionData : SessionData\n+{\n+    earray<short, 11> equip_index;\n+};\n+\n+void test()\n+{\n+    MapSessionData *sd = new MapSessionData;\n+}"}, {"sha": "6786d1651e571deaf9fc7e6ae541d65ea60fbea3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-template2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee8801251cc3fd10dc12e4fc48a0d0bc5f37019/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C?ref=aee8801251cc3fd10dc12e4fc48a0d0bc5f37019", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options -std=c++0x }\n+\n+template <class T> struct A\n+{\n+  T t;\n+  constexpr A() { }\t\t// { dg-error \"uninitialized\" }\n+};\n+\n+int main()\n+{\n+  constexpr A<int> a;\t\t// { dg-error \"A()\" }\n+}"}]}