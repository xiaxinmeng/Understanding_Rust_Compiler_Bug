{"sha": "dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "node_id": "C_kwDOANBUbNoAKGRmYmRkNGI5ODEyYjE5OWE3NGRiYjk0OGI0ZWI1NGZiN2JiMzA4ODM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-02-10T11:37:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:32Z"}, "message": "[Ada] Fix for internal error on semi-circular record aggregate\n\nThis creates a couple of record subtypes pointing to each other through\naccess subtypes, and we break the circularity at the latter subtypes.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Record_Subtype>: If\n\tit is a special subtype designated by an access subtype, then defer\n\tthe completion of incomplete types.", "tree": {"sha": "607ee7b249d4cc2b8e79fbcfccaac02c2a8a1f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607ee7b249d4cc2b8e79fbcfccaac02c2a8a1f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d98c670fa97d203297f14ad270fd5d9e6f3f4d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d98c670fa97d203297f14ad270fd5d9e6f3f4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d98c670fa97d203297f14ad270fd5d9e6f3f4d5"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "075a7ebd372998e6357a377b955aed8576579008", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "patch": "@@ -2134,6 +2134,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   suppress expanding incomplete types.  */\n \tgnu_type = make_node (UNCONSTRAINED_ARRAY_TYPE);\n \n+\t/* The component may refer to this type, so defer completion of any\n+\t   incomplete types.  */\n \tif (!definition)\n \t  {\n \t    defer_incomplete_level++;\n@@ -3066,7 +3068,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \tprocess_attributes (&gnu_type, &attr_list, true, gnat_entity);\n \n-\t/* If we are not defining it, suppress expanding incomplete types.  */\n+\t/* Some component may refer to this type, so defer completion of any\n+\t   incomplete types.  */\n \tif (!definition)\n \t  {\n \t    defer_incomplete_level++;\n@@ -3439,7 +3442,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t{\n \t  Entity_Id gnat_base_type = Implementation_Base_Type (gnat_entity);\n \n-\t  if (!definition)\n+\t  /* Some component may refer to this type, so defer completion of any\n+\t     incomplete types.  We also need to do it for the special subtypes\n+\t     designated by access subtypes in case they are recursive, see the\n+\t     E_Access_Subtype case below.  */\n+\t  if (!definition\n+\t      || (Is_Itype (gnat_entity)\n+\t\t  && Is_Frozen (gnat_entity)\n+\t\t  && No (Freeze_Node (gnat_entity))))\n \t    {\n \t      defer_incomplete_level++;\n \t      this_deferred = true;"}]}