{"sha": "3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlYWU2MDg0YjcyZTY2Y2Y2MTJiOGQzZDViMzA2NGEzN2RjYjJkNw==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-01-31T12:27:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-31T12:27:13Z"}, "message": "i386.md (movsicc, [...]): Delete unconstrained alternatives.\n\n        * i386.md (movsicc, movhicc, movsfcc, movdfcc,\n        movxfcc, movdicc): Delete unconstrained alternatives.\n        * i386.c (output_fp_conditional_move,\n        output_int_conditional_move): Delete unused case.\n\nFrom-SVN: r24937", "tree": {"sha": "0ff28f9f7f0dcb63232cf022bc44b608d4d6b985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ff28f9f7f0dcb63232cf022bc44b608d4d6b985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d7c42466b52a5899a431fe23ca5dd6fbd6a61f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7c42466b52a5899a431fe23ca5dd6fbd6a61f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7c42466b52a5899a431fe23ca5dd6fbd6a61f1"}], "stats": {"total": 254, "additions": 122, "deletions": 132}, "files": [{"sha": "0af55f39bcbc2b68e3bf13a8e95ab3e2b55495ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "patch": "@@ -1,3 +1,10 @@\n+Sun Jan 31 13:22:02 1999  John Wehle  (john@feith.com)\n+\n+\t* i386.md (movsicc, movhicc, movsfcc, movdfcc,\n+\tmovxfcc, movdicc): Delete unconstrained alternatives.\n+\t* i386.c (output_fp_conditional_move,\n+\toutput_int_conditional_move): Delete unused case.\n+\n Sun Jan 31 01:15:04 PST 1999 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "a64fa5d0c894aaf6364ef2ec9e8c3cc0ca70b65a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel X86.\n-   Copyright (C) 1988, 92, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92, 94-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -5443,12 +5443,6 @@ output_fp_conditional_move (which_alternative, operands)\n       output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);\n       break;\n \n-    case 2:\n-      /* r <- cond ? r : arg */\n-      output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n-      output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);\n-      break;\n-\n     default:\n       abort ();\n     }\n@@ -5508,17 +5502,6 @@ output_int_conditional_move (which_alternative, operands)\n \toutput_asm_insn (AS2 (cmov%c1,%3,%0), xops);\n       break;\n \n-    case 2:\n-      /* rm <- cond ? arg1 : arg2 */\n-      output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n-      output_asm_insn (AS2 (cmov%c1,%3,%0), operands);\n-      if (mode == DImode)\n-\t{\n-\t  output_asm_insn (AS2 (cmov%C1,%2,%0), xops);\n-\t  output_asm_insn (AS2 (cmov%c1,%3,%0), xops);\n-\t}\n-      break;\n-\n     default:\n       abort ();\n     }"}, {"sha": "9781d7aeb024f1f577294c2b8239e16ee6deee6f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3aeae6084b72e66cf612b8d3d5b3064a37dcb2d7", "patch": "@@ -7151,32 +7151,32 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,&r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,rm,0,0,rm,rm\")\n-\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,0,rm,rm,rm,rm\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,rm,0,0\")\n+\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,0,rm,rm\")))]\n   \"TARGET_CMOVE\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,&r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,rm,0,0,rm,rm\")\n-\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,0,rm,rm,rm,rm\")))]\n+\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,rm,0,0\")\n+\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,0,rm,rm\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7186,12 +7186,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7200,11 +7200,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_int_conditional_move (which_alternative, operands);\")\n \n@@ -7225,32 +7225,32 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,&r,&r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,rm,0,0,rm,rm\")\n-\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,0,rm,rm,rm,rm\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,rm,0,0\")\n+\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,0,rm,rm\")))]\n   \"TARGET_CMOVE\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,&r,&r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,rm,0,0,rm,rm\")\n-\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,0,rm,rm,rm,rm\")))]\n+\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,rm,0,0\")\n+\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,0,rm,rm\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7260,12 +7260,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(compare (match_dup 2) (match_dup 3)))\n@@ -7275,11 +7275,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n+\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_int_conditional_move (which_alternative, operands);\")\n \n@@ -7324,36 +7324,36 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n-\t\t[(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t (match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t\t[(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t (match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:SF 4 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:SF 3 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:SF 4 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7363,12 +7363,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:SF 4 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:SF 5 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:SF 4 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:SF 5 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7377,11 +7377,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:SF 2 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:SF 3 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_fp_conditional_move (which_alternative, operands);\")\n \n@@ -7426,36 +7426,36 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DF 3 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:DF 4 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:DF 3 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:DF 4 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7465,12 +7465,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:DF 4 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:DF 5 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:DF 4 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:DF 5 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7479,11 +7479,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:DF 2 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:DF 3 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:DF 2 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:DF 3 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_fp_conditional_move (which_alternative, operands);\")\n \n@@ -7528,36 +7528,36 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f,f,f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f,f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0,f,f\")\n-\t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n+\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0\")\n+\t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n     && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n     && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:XF 3 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:XF 4 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:XF 3 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:XF 4 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7567,12 +7567,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:XF 4 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:XF 5 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:XF 4 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:XF 5 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7581,11 +7581,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:XF 2 \"register_operand\" \"f,0,f\")\n-\t\t      (match_operand:XF 3 \"register_operand\" \"0,f,f\")))]\n+\t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_fp_conditional_move (which_alternative, operands);\")\n \n@@ -7606,32 +7606,32 @@ byte_xor_operation:\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r,&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r,&r\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m,q,m\")\n-\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n-\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,ro,0,0,ro,ro\")\n-\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,0,ro,ro,ro,ro\")))]\n+\t      [(match_operand:QI 2 \"nonimmediate_operand\" \"q,m,q,m\")\n+\t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn\")])\n+\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,ro,0,0\")\n+\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,0,ro,ro\")))]\n   \"TARGET_CMOVE\"\n   \"#\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r,&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r,&r\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n-\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\")\n-\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n-\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,ro,0,0,ro,ro\")\n-\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,0,ro,ro,ro,ro\")))]\n+\t      [(match_operand 2 \"nonimmediate_operand\" \"r,m,r,m\")\n+\t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri\")])\n+\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,ro,0,0\")\n+\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,0,ro,ro\")))]\n   \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"ro,0,ro\")\n-\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"0,ro,ro\")))]\n+\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"ro,0\")\n+\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"0,ro\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7641,12 +7641,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,0,ro\")\n-\t\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,ro,ro\")))]\n+\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,0\")\n+\t\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,ro\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7655,11 +7655,11 @@ byte_xor_operation:\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"ro,0,ro\")\n-\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"0,ro,ro\")))]\n+\t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"ro,0\")\n+\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"0,ro\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   \"* return output_int_conditional_move (which_alternative, operands);\")\n "}]}