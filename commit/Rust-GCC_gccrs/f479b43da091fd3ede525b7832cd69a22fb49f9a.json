{"sha": "f479b43da091fd3ede525b7832cd69a22fb49f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3OWI0M2RhMDkxZmQzZWRlNTI1Yjc4MzJjZDY5YTIyZmI0OWY5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-02T19:04:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-02T19:04:48Z"}, "message": "Do constant folding in warn_* functions.\n\ngcc/c-family/\n\t* c-common.c (fold_for_warn): New.\n\t(warn_logical_operator, warn_tautological_cmp)\n\t(check_function_arguments_recurse, maybe_warn_bool_compare): Use it.\ngcc/cp/\n\t* call.c (build_new_op_1): Don't fold arguments to\n\twarn_logical_operator or maybe_warn_bool_compare.\n\nFrom-SVN: r231198", "tree": {"sha": "a2673f4d1a0faba8a3681800dd902ffc2694cc6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2673f4d1a0faba8a3681800dd902ffc2694cc6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f479b43da091fd3ede525b7832cd69a22fb49f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f479b43da091fd3ede525b7832cd69a22fb49f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f479b43da091fd3ede525b7832cd69a22fb49f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f479b43da091fd3ede525b7832cd69a22fb49f9a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7426fcc84f6e0a410139f60778d8d1c1d32d0283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7426fcc84f6e0a410139f60778d8d1c1d32d0283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7426fcc84f6e0a410139f60778d8d1c1d32d0283"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "8aef600be7074fe77c4564d0d3c115d17fb2cee4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f479b43da091fd3ede525b7832cd69a22fb49f9a", "patch": "@@ -1,5 +1,9 @@\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n+\t* c-common.c (fold_for_warn): New.\n+\t(warn_logical_operator, warn_tautological_cmp)\n+\t(check_function_arguments_recurse, maybe_warn_bool_compare): Use it.\n+\n \t* c-common.c (c_disable_warnings, c_enable_warnings, c_fully_fold)\n \t(c_fully_fold_internal, decl_constant_value_for_optimization):\n \tMove to c/c-fold.c."}, {"sha": "a8122b30309ee3b022dc47f595fb0b91ddf24681", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f479b43da091fd3ede525b7832cd69a22fb49f9a", "patch": "@@ -1094,6 +1094,19 @@ fix_string_type (tree value)\n   return value;\n }\n \f\n+/* Fold X for consideration by one of the warning functions when checking\n+   whether an expression has a constant value.  */\n+\n+static tree\n+fold_for_warn (tree x)\n+{\n+  if (c_dialect_cxx ())\n+    return c_fully_fold (x, /*for_init*/false, /*maybe_constp*/NULL);\n+  else\n+    /* The C front-end has already folded X appropriately.  */\n+    return x;\n+}\n+\n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n    requires to be a constant expression.\n@@ -1207,6 +1220,9 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n      programmer. That is, an expression such as op && MASK\n      where op should not be any boolean expression, nor a\n      constant, and mask seems to be a non-boolean integer constant.  */\n+  if (TREE_CODE (op_right) == CONST_DECL)\n+    /* An enumerator counts as a constant.  */\n+    op_right = DECL_INITIAL (op_right);\n   if (!truth_value_p (code_left)\n       && INTEGRAL_TYPE_P (TREE_TYPE (op_left))\n       && !CONSTANT_CLASS_P (op_left)\n@@ -1227,7 +1243,8 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n \n   /* We do not warn for constants because they are typical of macro\n      expansions that test for features.  */\n-  if (CONSTANT_CLASS_P (op_left) || CONSTANT_CLASS_P (op_right))\n+  if (CONSTANT_CLASS_P (fold_for_warn (op_left))\n+      || CONSTANT_CLASS_P (fold_for_warn (op_right)))\n     return;\n \n   /* This warning only makes sense with logical operands.  */\n@@ -1347,7 +1364,8 @@ warn_tautological_cmp (location_t loc, enum tree_code code, tree lhs, tree rhs)\n \n   /* We do not warn for constants because they are typical of macro\n      expansions that test for features, sizeof, and similar.  */\n-  if (CONSTANT_CLASS_P (fold (lhs)) || CONSTANT_CLASS_P (fold (rhs)))\n+  if (CONSTANT_CLASS_P (fold_for_warn (lhs))\n+      || CONSTANT_CLASS_P (fold_for_warn (rhs)))\n     return;\n \n   /* Don't warn for e.g.\n@@ -9701,11 +9719,14 @@ check_function_arguments_recurse (void (*callback)\n \n   if (TREE_CODE (param) == COND_EXPR)\n     {\n+      tree cond = fold_for_warn (TREE_OPERAND (param, 0));\n       /* Check both halves of the conditional expression.  */\n-      check_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\tTREE_OPERAND (param, 1), param_num);\n-      check_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\tTREE_OPERAND (param, 2), param_num);\n+      if (!integer_zerop (cond))\n+\tcheck_function_arguments_recurse (callback, ctx,\n+\t\t\t\t\t  TREE_OPERAND (param, 1), param_num);\n+      if (!integer_nonzerop (cond))\n+\tcheck_function_arguments_recurse (callback, ctx,\n+\t\t\t\t\t  TREE_OPERAND (param, 2), param_num);\n       return;\n     }\n \n@@ -11984,9 +12005,14 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n   if (TREE_CODE_CLASS (code) != tcc_comparison)\n     return;\n \n-  tree cst = (TREE_CODE (op0) == INTEGER_CST)\n-\t     ? op0 : (TREE_CODE (op1) == INTEGER_CST) ? op1 : NULL_TREE;\n-  if (!cst)\n+  tree f, cst;\n+  if (f = fold_for_warn (op0),\n+      TREE_CODE (f) == INTEGER_CST)\n+    cst = op0 = f;\n+  else if (f = fold_for_warn (op1),\n+\t   TREE_CODE (f) == INTEGER_CST)\n+    cst = op1 = f;\n+  else\n     return;\n \n   if (!integer_zerop (cst) && !integer_onep (cst))"}, {"sha": "6d344ffdf3c77bdb23c44188e872a3671033905a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f479b43da091fd3ede525b7832cd69a22fb49f9a", "patch": "@@ -1,5 +1,8 @@\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (build_new_op_1): Don't fold arguments to\n+\twarn_logical_operator or maybe_warn_bool_compare.\n+\n \t* cp-gimplify.c (cp_fold_maybe_rvalue, cp_fold_rvalue): New.\n \t(c_fully_fold): Use cp_fold_rvalue.\n \t(cp_fold): Use them for rvalue operands."}, {"sha": "117dd7991ff8f9b75eee3767c428e062de5c17ce", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f479b43da091fd3ede525b7832cd69a22fb49f9a", "patch": "@@ -5687,8 +5687,8 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n \t\t decaying an enumerator to its value.  */\n \t      if (complain & tf_warning)\n \t\twarn_logical_operator (loc, code, boolean_type_node,\n-\t\t\t\t       code_orig_arg1, fold (arg1),\n-\t\t\t\t       code_orig_arg2, fold (arg2));\n+\t\t\t\t       code_orig_arg1, arg1,\n+\t\t\t\t       code_orig_arg2, arg2);\n \n \t      arg2 = convert_like (conv, arg2, complain);\n \t    }\n@@ -5726,8 +5726,8 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n     case TRUTH_OR_EXPR:\n       if (complain & tf_warning)\n \twarn_logical_operator (loc, code, boolean_type_node,\n-\t\t\t       code_orig_arg1, fold (arg1),\n-\t\t\t       code_orig_arg2, fold (arg2));\n+\t\t\t       code_orig_arg1, arg1,\n+\t\t\t       code_orig_arg2, arg2);\n       /* Fall through.  */\n     case GT_EXPR:\n     case LT_EXPR:\n@@ -5738,8 +5738,7 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n       if ((complain & tf_warning)\n \t  && ((code_orig_arg1 == BOOLEAN_TYPE)\n \t      ^ (code_orig_arg2 == BOOLEAN_TYPE)))\n-\tmaybe_warn_bool_compare (loc, code, fold (arg1),\n-\t\t\t\t fold (arg2));\n+\tmaybe_warn_bool_compare (loc, code, arg1, arg2);\n       if (complain & tf_warning && warn_tautological_compare)\n \twarn_tautological_cmp (loc, code, arg1, arg2);\n       /* Fall through.  */"}, {"sha": "0f610f449c72e420a9cfe3c1b18b782deb9cfd57", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f479b43da091fd3ede525b7832cd69a22fb49f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull1.C?ref=f479b43da091fd3ede525b7832cd69a22fb49f9a", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options -Wnonnull }\n+\n+void g(void *) __attribute__ ((nonnull (1)));\n+void f(void *p)\n+{\n+  g(1 == 1 ? p : 0);\n+}"}]}