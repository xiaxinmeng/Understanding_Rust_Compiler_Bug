{"sha": "15c76378f688b89a176482e183512783e1395650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjNzYzNzhmNjg4Yjg5YTE3NjQ4MmUxODM1MTI3ODNlMTM5NTY1MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-11T04:38:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-11T04:38:47Z"}, "message": "(change_main_variant): New function.\n\n(build_array_type): Use that to set the TYPE_MAIN_VARIANT.\n\n(real_value_from_int_cst):\nIf I is unsigned, use REAL_VALUE_FROM_UNSIGNED_INT.\n\nFrom-SVN: r4418", "tree": {"sha": "91ab25efac2a992d3e441b37d300e795eeaec87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ab25efac2a992d3e441b37d300e795eeaec87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c76378f688b89a176482e183512783e1395650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c76378f688b89a176482e183512783e1395650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c76378f688b89a176482e183512783e1395650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c76378f688b89a176482e183512783e1395650/comments", "author": null, "committer": null, "parents": [{"sha": "e1fe03e98f0b3b141e38e06bce3f4aefbbe80b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fe03e98f0b3b141e38e06bce3f4aefbbe80b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fe03e98f0b3b141e38e06bce3f4aefbbe80b52"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "e734a26d79e1dce05e34fe4defbf49cd5a13ea66", "filename": "gcc/tree.c", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c76378f688b89a176482e183512783e1395650/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c76378f688b89a176482e183512783e1395650/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=15c76378f688b89a176482e183512783e1395650", "patch": "@@ -1155,7 +1155,10 @@ real_value_from_int_cst (i)\n {\n   REAL_VALUE_TYPE d;\n #ifdef REAL_ARITHMETIC\n-  REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n+  if (! TREE_UNSIGNED (TREE_TYPE (i)))\n+    REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n+  else\n+    REAL_VALUE_FROM_UNSIGNED_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n #else /* not REAL_ARITHMETIC */\n   if (TREE_INT_CST_HIGH (i) < 0 && ! TREE_UNSIGNED (TREE_TYPE (i)))\n     {\n@@ -2269,6 +2272,34 @@ build_type_variant (type, constp, volatilep)\n   return t;\n }\n \n+/* Give TYPE a new main variant: NEW_MAIN.\n+   This is the right thing to do only when something else\n+   about TYPE is modified in place.  */\n+\n+tree\n+change_main_variant (type, new_main)\n+     tree type, new_main;\n+{\n+  tree t;\n+  tree omain = TYPE_MAIN_VARIANT (type);\n+\n+  /* Remove TYPE from the TYPE_NEXT_VARIANT chain of its main variant.  */\n+  if (TYPE_NEXT_VARIANT (omain) == type)\n+    TYPE_NEXT_VARIANT (omain) = TYPE_NEXT_VARIANT (type);\n+  else\n+    for (t = TYPE_NEXT_VARIANT (omain); t && TYPE_NEXT_VARIANT (t);\n+\t t = TYPE_NEXT_VARIANT (t))\n+      if (TYPE_NEXT_VARIANT (t) == type)\n+\t{\n+\t  TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (type);\n+\t  break;\n+\t}\n+\n+  TYPE_MAIN_VARIANT (type) = new_main;\n+  TYPE_NEXT_VARIANT (type) = TYPE_NEXT_VARIANT (new_main);\n+  TYPE_NEXT_VARIANT (new_main) = type;\n+}\n+\n /* Create a new variant of TYPE, equivalent but distinct.\n    This is so the caller can modify it.  */\n \n@@ -2792,18 +2823,26 @@ build_array_type (elt_type, index_type)\n   TREE_TYPE (t) = elt_type;\n   TYPE_DOMAIN (t) = index_type;\n \n-  /* The main variant of an array type should always\n-     be an array whose element type is the main variant.  */\n-  if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n-    TYPE_MAIN_VARIANT (t) = build_array_type (TYPE_MAIN_VARIANT (elt_type),\n-\t\t\t\t\t      index_type);\n-\n   if (index_type == 0)\n-    return t;\n+    {\n+      /* The main variant of an array type should always\n+\t be an array whose element type is the main variant.  */\n+      if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n+\tchange_main_variant (t, build_array_type (TYPE_MAIN_VARIANT (elt_type),\n+\t\t\t\t\t\t  index_type));\n+\n+      return t;\n+    }\n \n   hashcode = TYPE_HASH (elt_type) + TYPE_HASH (index_type);\n   t = type_hash_canon (hashcode, t);\n \n+  /* The main variant of an array type should always\n+     be an array whose element type is the main variant.  */\n+  if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n+    change_main_variant (t, build_array_type (TYPE_MAIN_VARIANT (elt_type),\n+\t\t\t\t\t      index_type));\n+\n   if (TYPE_SIZE (t) == 0)\n     layout_type (t);\n   return t;"}]}