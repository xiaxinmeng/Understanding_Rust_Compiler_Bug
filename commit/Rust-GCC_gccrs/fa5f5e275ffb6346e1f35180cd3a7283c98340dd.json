{"sha": "fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1ZjVlMjc1ZmZiNjM0NmUxZjM1MTgwY2QzYTcyODNjOTgzNDBkZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-27T09:44:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-27T09:44:30Z"}, "message": "cgraph.c (cgraph_propagate_frequency): New function.\n\n\n\t* cgraph.c (cgraph_propagate_frequency): New function.\n\t* cgraph.h (cgraph_propagate_frequency): Declare.\n\t* ipa-inline.c (cgraph_clone_inlined_nodes): Call\n\tcgraph_propagate_frequency.\n\n\t* testsuite/gcc.dg/ipa/iinline-1.c (main): Rename to...\n\t(test): ... this one.\n\nFrom-SVN: r158775", "tree": {"sha": "f6e2acb576b9d9b2a9255d6a0a08d3fa74150b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6e2acb576b9d9b2a9255d6a0a08d3fa74150b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/comments", "author": null, "committer": null, "parents": [{"sha": "934f5b4225f21082f9d9e94cf5c12390d70a727f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934f5b4225f21082f9d9e94cf5c12390d70a727f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934f5b4225f21082f9d9e94cf5c12390d70a727f"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "65c8feab413d1a65c90c3f042554bb0ef0810dfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -1,3 +1,10 @@\n+2010-04-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_propagate_frequency): New function.\n+\t* cgraph.h (cgraph_propagate_frequency): Declare.\n+\t* ipa-inline.c (cgraph_clone_inlined_nodes): Call\n+\tcgraph_propagate_frequency.\n+\n 2010-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* unwind-dw2.c (_Unwind_DebugHook): Add used and noclone attributes."}, {"sha": "95f441132f3993b4cdfc5791717e128a06cc12e6", "filename": "gcc/cgraph.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -2307,4 +2307,67 @@ cgraph_set_looping_const_or_pure_flag (struct cgraph_node *node,\n     DECL_LOOPING_CONST_OR_PURE_P (alias->decl) = looping_const_or_pure;\n }\n \n+/* See if the frequency of NODE can be updated based on frequencies of its\n+   callers.  */\n+bool\n+cgraph_propagate_frequency (struct cgraph_node *node)\n+{\n+  bool maybe_unlikely_executed = true, maybe_executed_once = true;\n+  struct cgraph_edge *edge;\n+  if (node->needed || node->local.externally_visible)\n+    return false;\n+  gcc_assert (node->analyzed);\n+  if (node->frequency == NODE_FREQUENCY_HOT)\n+    return false;\n+  if (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return false;\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Processing frequency %s\\n\", cgraph_node_name (node));\n+  for (edge = node->callers;\n+       edge && (maybe_unlikely_executed || maybe_executed_once);\n+       edge = edge->next_caller)\n+    {\n+      if (!edge->frequency)\n+\tcontinue;\n+      switch (edge->caller->frequency)\n+        {\n+\tcase NODE_FREQUENCY_UNLIKELY_EXECUTED:\n+\t  break;\n+\tcase NODE_FREQUENCY_EXECUTED_ONCE:\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"  Called by %s that is executed once\\n\", cgraph_node_name (node));\n+\t  maybe_unlikely_executed = false;\n+\t  if (edge->loop_nest)\n+\t    {\n+\t      maybe_executed_once = false;\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t        fprintf (dump_file, \"  Called in loop\\n\");\n+\t    }\n+\t  break;\n+\tcase NODE_FREQUENCY_HOT:\n+\tcase NODE_FREQUENCY_NORMAL:\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"  Called by %s that is normal or hot\\n\", cgraph_node_name (node));\n+\t  maybe_unlikely_executed = false;\n+\t  maybe_executed_once = false;\n+\t  break;\n+\t}\n+    }\n+   if (maybe_unlikely_executed)\n+     {\n+       node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+       if (dump_file)\n+         fprintf (dump_file, \"Node %s promoted to unlikely executed.\\n\", cgraph_node_name (node));\n+       return true;\n+     }\n+   if (maybe_executed_once && node->frequency != NODE_FREQUENCY_EXECUTED_ONCE)\n+     {\n+       node->frequency = NODE_FREQUENCY_EXECUTED_ONCE;\n+       if (dump_file)\n+         fprintf (dump_file, \"Node %s promoted to executed once.\\n\", cgraph_node_name (node));\n+       return true;\n+     }\n+   return false;\n+}\n+\n #include \"gt-cgraph.h\""}, {"sha": "c208cfaeb636c22a15845204021aee0c9a534b8b", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -557,6 +557,7 @@ struct cgraph_2node_hook_list *cgraph_add_node_duplication_hook (cgraph_2node_ho\n void cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *);\n void cgraph_materialize_all_clones (void);\n gimple cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *);\n+bool cgraph_propagate_frequency (struct cgraph_node *node);\n /* In cgraphbuild.c  */\n unsigned int rebuild_cgraph_edges (void);\n void reset_inline_failed (struct cgraph_node *);"}, {"sha": "381942a55864c87d635922a5b05e35837922dce9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -285,6 +285,7 @@ cgraph_clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n       + inline_summary (e->callee)->estimated_self_stack_size;\n   if (e->callee->global.inlined_to->global.estimated_stack_size < peak)\n     e->callee->global.inlined_to->global.estimated_stack_size = peak;\n+  cgraph_propagate_frequency (e->callee);\n \n   /* Recursively clone all bodies.  */\n   for (e = e->callee->callees; e; e = e->next_callee)"}, {"sha": "72e61c0e348f57337a6695cadcecd09adaa9f3be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -1,3 +1,8 @@\n+2010-04-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/iinline-1.c (main): Rename to...\n+\t(test): ... this one.\n+\n 2010-04-27  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/40657"}, {"sha": "617c484994b4d0bf25e9392b9dd1ef573c4559a5", "filename": "gcc/testsuite/gcc.dg/ipa/iinline-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5f5e275ffb6346e1f35180cd3a7283c98340dd/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-1.c?ref=fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "patch": "@@ -16,11 +16,11 @@ static void hiphip (void (*f)())\n   f ();\n }\n \n-int main (int argc, int *argv[])\n+int test (void)\n {\n   hiphip (hooray);\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in main\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in test\"  \"inline\"  } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}