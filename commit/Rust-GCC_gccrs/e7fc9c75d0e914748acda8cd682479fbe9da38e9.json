{"sha": "e7fc9c75d0e914748acda8cd682479fbe9da38e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmYzljNzVkMGU5MTQ3NDhhY2RhOGNkNjgyNDc5ZmJlOWRhMzhlOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-04-30T09:15:03Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-04-30T09:15:03Z"}, "message": "unix.c (raw_truncate): Explicit cast from integer-scal to pointer.\n\n2010-04-30  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR/43844\n        * io/unix.c (raw_truncate): Explicit cast from integer-scal\n        to pointer.\n        (empfile): Use for mingw GetTempPath and avoid double slash\n        for path.\n\nFrom-SVN: r158925", "tree": {"sha": "374e660ca9135e3767b6552ac34ca325e626b5a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374e660ca9135e3767b6552ac34ca325e626b5a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7fc9c75d0e914748acda8cd682479fbe9da38e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fc9c75d0e914748acda8cd682479fbe9da38e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7fc9c75d0e914748acda8cd682479fbe9da38e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fc9c75d0e914748acda8cd682479fbe9da38e9/comments", "author": null, "committer": null, "parents": [{"sha": "4be68d9a2d50985d79835f109a46d7665eec721a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be68d9a2d50985d79835f109a46d7665eec721a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be68d9a2d50985d79835f109a46d7665eec721a"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "a869f31ccc8236da369e2e97a1f848dc59d68060", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fc9c75d0e914748acda8cd682479fbe9da38e9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fc9c75d0e914748acda8cd682479fbe9da38e9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e7fc9c75d0e914748acda8cd682479fbe9da38e9", "patch": "@@ -1,3 +1,11 @@\n+2010-04-30  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR/43844\n+\t* io/unix.c (raw_truncate): Explicit cast from integer-scalar\n+\tto pointer.\n+\t(empfile): Use for mingw GetTempPath and avoid double slash\n+\tfor path.\n+\n 2010-04-24  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR/43844"}, {"sha": "9ab5bcdbc5642d88a4456560e093dcd8fa66e6d4", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fc9c75d0e914748acda8cd682479fbe9da38e9/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fc9c75d0e914748acda8cd682479fbe9da38e9/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=e7fc9c75d0e914748acda8cd682479fbe9da38e9", "patch": "@@ -308,7 +308,7 @@ raw_truncate (unix_stream * s, gfc_offset length)\n       errno = EBADF;\n       return -1;\n     }\n-  h = _get_osfhandle (s->fd);\n+  h = (HANDLE) _get_osfhandle (s->fd);\n   if (h == INVALID_HANDLE_VALUE)\n     {\n       errno = EBADF;\n@@ -877,28 +877,53 @@ tempfile (st_parameter_open *opp)\n {\n   const char *tempdir;\n   char *template;\n+  const char *slash = \"/\";\n   int fd;\n \n   tempdir = getenv (\"GFORTRAN_TMPDIR\");\n+#ifdef __MINGW32__\n+  if (tempdir == NULL)\n+    {\n+      char buffer[MAX_PATH + 1];\n+      DWORD ret;\n+      ret = GetTempPath (MAX_PATH, buffer);\n+      /* If we are not able to get a temp-directory, we use\n+\t current directory.  */\n+      if (ret > MAX_PATH || !ret)\n+        buffer[0] = 0;\n+      else\n+        buffer[ret] = 0;\n+      tempdir = strdup (buffer);\n+    }\n+#else\n   if (tempdir == NULL)\n     tempdir = getenv (\"TMP\");\n   if (tempdir == NULL)\n     tempdir = getenv (\"TEMP\");\n   if (tempdir == NULL)\n     tempdir = DEFAULT_TEMPDIR;\n+#endif\n+  /* Check for special case that tempdir contains slash\n+     or backslash at end.  */\n+  if (*tempdir == 0 || tempdir[strlen (tempdir) - 1] == '/'\n+#ifdef __MINGW32__\n+      || tempdir[strlen (tempdir) - 1] == '\\\\'\n+#endif\n+     )\n+    slash = \"\";\n \n   template = get_mem (strlen (tempdir) + 20);\n \n #ifdef HAVE_MKSTEMP\n-  sprintf (template, \"%s/gfortrantmpXXXXXX\", tempdir);\n+  sprintf (template, \"%s%sgfortrantmpXXXXXX\", tempdir, slash);\n \n   fd = mkstemp (template);\n \n #else /* HAVE_MKSTEMP */\n   fd = -1;\n   do\n     {\n-      sprintf (template, \"%s/gfortrantmpXXXXXX\", tempdir);\n+      sprintf (template, \"%s%sgfortrantmpXXXXXX\", tempdir, slash);\n       if (!mktemp (template))\n \tbreak;\n #if defined(HAVE_CRLF) && defined(O_BINARY)\n@@ -909,7 +934,6 @@ tempfile (st_parameter_open *opp)\n #endif\n     }\n   while (fd == -1 && errno == EEXIST);\n-\n #endif /* HAVE_MKSTEMP */\n \n   if (fd < 0)"}]}