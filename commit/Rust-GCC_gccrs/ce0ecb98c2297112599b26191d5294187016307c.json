{"sha": "ce0ecb98c2297112599b26191d5294187016307c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwZWNiOThjMjI5NzExMjU5OWIyNjE5MWQ1Mjk0MTg3MDE2MzA3Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-03-30T19:39:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-03-30T19:39:48Z"}, "message": "re PR c++/43559 (Overloaded template functions became ambiguous)\n\n\tPR c++/43559\n\t* pt.c (more_specialized_fn): Don't control cv-qualifier check\n\twith same_type_p.\n\nFrom-SVN: r157831", "tree": {"sha": "c23097a0549faf770de07458f894f742af64cb36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23097a0549faf770de07458f894f742af64cb36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce0ecb98c2297112599b26191d5294187016307c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0ecb98c2297112599b26191d5294187016307c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0ecb98c2297112599b26191d5294187016307c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0ecb98c2297112599b26191d5294187016307c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26e020539c3d5bc0831d0443e38a9f0ed37620a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e020539c3d5bc0831d0443e38a9f0ed37620a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e020539c3d5bc0831d0443e38a9f0ed37620a7"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "eb42b0be8c9a57be8f07c38d56760021e639a665", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce0ecb98c2297112599b26191d5294187016307c", "patch": "@@ -1,3 +1,9 @@\n+2010-03-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43559\n+\t* pt.c (more_specialized_fn): Don't control cv-qualifier check\n+\twith same_type_p.\n+\n 2010-03-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43509"}, {"sha": "a58dba29ee3bfc02a7eb33ae958068e7a4b302bc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ce0ecb98c2297112599b26191d5294187016307c", "patch": "@@ -15474,13 +15474,10 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n \t than the type from the parameter template (as described above)\n \t that type is considered to be more specialized than the other. If\n \t neither type is more cv-qualified than the other then neither type\n-\t is more specialized than the other.\"\n+\t is more specialized than the other.\"  */\n \n-         We check same_type_p explicitly because deduction can also succeed\n-         in both directions when there is a nondeduced context.  */\n       if (deduce1 && deduce2\n-\t  && quals1 != quals2 && quals1 >= 0 && quals2 >= 0\n-\t  && same_type_p (arg1, arg2))\n+\t  && quals1 != quals2 && quals1 >= 0 && quals2 >= 0)\n \t{\n \t  if ((quals1 & quals2) == quals2)\n \t    lose2 = true;"}, {"sha": "ddc9128c1e936e5454a092d9842aec1789554e55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce0ecb98c2297112599b26191d5294187016307c", "patch": "@@ -1,3 +1,8 @@\n+2010-03-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43559\n+\t* g++.dg/template/partial7.C: New.\n+\n 2010-03-30  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.target/s390/stackcheck1.c: New testcase."}, {"sha": "0fd157fdcec13709da968e85c3b76ed7a02a2726", "filename": "gcc/testsuite/g++.dg/template/partial7.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0ecb98c2297112599b26191d5294187016307c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial7.C?ref=ce0ecb98c2297112599b26191d5294187016307c", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/43559\n+\n+template<typename T, typename U> void f(U&) { }\n+template<typename T, typename U> void f(T const&) { }\n+\n+int main()\n+{\n+        int a;\n+        f<int, int const>(a);\n+}"}]}