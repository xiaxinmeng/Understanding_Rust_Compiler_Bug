{"sha": "e2adfdad84167e48735d35154e0a8becf9264111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhZGZkYWQ4NDE2N2U0ODczNWQzNTE1NGUwYThiZWNmOTI2NDExMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:35:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:35:18Z"}, "message": "re PR c++/56447 ([C++11] Lambda in template has conversion op it shouldn't have)\n\n\tPR c++/56447\n\tPR c++/55532\n\t* pt.c (instantiate_class_template_1): Instantiate lambda capture\n\tlist here.\n\t(tsubst_copy_and_build): Not here.\n\nFrom-SVN: r196729", "tree": {"sha": "4e7fde1281608a8010dea2b084852afa029f76a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e7fde1281608a8010dea2b084852afa029f76a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2adfdad84167e48735d35154e0a8becf9264111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2adfdad84167e48735d35154e0a8becf9264111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2adfdad84167e48735d35154e0a8becf9264111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2adfdad84167e48735d35154e0a8becf9264111/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5275b2c7d7c1ae888b1af5b6c86a96de032f12d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5275b2c7d7c1ae888b1af5b6c86a96de032f12d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5275b2c7d7c1ae888b1af5b6c86a96de032f12d8"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "59d6e8aad767499cda6b19a4a49afe441b2de0b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2adfdad84167e48735d35154e0a8becf9264111", "patch": "@@ -1,5 +1,11 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56447\n+\tPR c++/55532\n+\t* pt.c (instantiate_class_template_1): Instantiate lambda capture\n+\tlist here.\n+\t(tsubst_copy_and_build): Not here.\n+\n \tPR c++/55017\n \t* method.c (walk_field_subobs): Disallow copy of rvalue ref.\n "}, {"sha": "126e110fc206a66d0592b295d705f3e0f444589b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e2adfdad84167e48735d35154e0a8becf9264111", "patch": "@@ -8991,12 +8991,26 @@ instantiate_class_template_1 (tree type)\n \t}\n     }\n \n-  if (CLASSTYPE_LAMBDA_EXPR (type))\n+  if (tree expr = CLASSTYPE_LAMBDA_EXPR (type))\n     {\n       tree decl = lambda_function (type);\n       if (decl)\n \t{\n \t  instantiate_decl (decl, false, false);\n+\n+\t  /* We need to instantiate the capture list from the template\n+\t     after we've instantiated the closure members, but before we\n+\t     consider adding the conversion op.  Also keep any captures\n+\t     that may have been added during instantiation of the op().  */\n+\t  tree tmpl_expr = CLASSTYPE_LAMBDA_EXPR (pattern);\n+\t  tree tmpl_cap\n+\t    = tsubst_copy_and_build (LAMBDA_EXPR_CAPTURE_LIST (tmpl_expr),\n+\t\t\t\t     args, tf_warning_or_error, NULL_TREE,\n+\t\t\t\t     false, false);\n+\n+\t  LAMBDA_EXPR_CAPTURE_LIST (expr)\n+\t    = chainon (tmpl_cap, nreverse (LAMBDA_EXPR_CAPTURE_LIST (expr)));\n+\n \t  maybe_add_lambda_conv_op (type);\n \t}\n       else\n@@ -14470,12 +14484,6 @@ tsubst_copy_and_build (tree t,\n \t   declaration of the op() for later calls to lambda_function.  */\n \tcomplete_type (type);\n \n-\t/* The capture list refers to closure members, so this needs to\n-\t   wait until after we finish instantiating the type.  Also keep\n-\t   any captures that may have been added during instantiation.  */\n-\tLAMBDA_EXPR_CAPTURE_LIST (r)\n-\t  = chainon (RECUR (LAMBDA_EXPR_CAPTURE_LIST (t)),\n-\t\t     LAMBDA_EXPR_CAPTURE_LIST (r));\n \tLAMBDA_EXPR_THIS_CAPTURE (r) = NULL_TREE;\n \n \tRETURN (build_lambda_object (r));"}, {"sha": "abe272a8b8b717aa1b6ca9332c471467a5b513ce", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv8.C?ref=e2adfdad84167e48735d35154e0a8becf9264111", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/56447\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+void f()\n+{\n+  int i;\n+  // This lambda should not have a conversion op, since it captures i\n+  int (*p)() = [=]{ return i; }; // { dg-error \"cannot convert\" }\n+}\n+\n+int main()\n+{\n+  f<int>();\n+}"}, {"sha": "c54ff5c841cdc96dd78864f9351d219276f0f306", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mutable2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mutable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2adfdad84167e48735d35154e0a8becf9264111/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mutable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mutable2.C?ref=e2adfdad84167e48735d35154e0a8becf9264111", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/55532\n+// { dg-do compile { target c++11 } }\n+\n+struct Foo {\n+    void doit() {\n+    }\n+};\n+\n+template<typename T>\n+void oops(Foo &foo, const T &) {\n+    auto fun = [&] () mutable {\n+        foo.doit();\n+    };\n+    auto fun2 = [=]() {\n+        fun();\t\t\t// { dg-error \"\" }\n+    };\n+    fun2();\n+}\n+\n+int main() {\n+    Foo foo;\n+    oops(foo, 1);\n+}"}]}