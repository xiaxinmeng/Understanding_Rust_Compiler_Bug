{"sha": "23ac7a009ecfeec3eab79136abed8aac9768b458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhYzdhMDA5ZWNmZWVjM2VhYjc5MTM2YWJlZDhhYWM5NzY4YjQ1OA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-11-01T06:32:20Z"}, "committer": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-11-03T14:07:25Z"}, "message": "Fix PR97205\n\nThis makes sure that stack allocated SSA_NAMEs are\nat least MODE_ALIGNED.  Also increase the MEM_ALIGN\nfor the corresponding rtl objects.\n\ngcc:\n2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR target/97205\n\t* cfgexpand.c (align_local_variable): Make SSA_NAMEs\n\tat least MODE_ALIGNED.\n\t(expand_one_stack_var_at): Increase MEM_ALIGN for SSA_NAMEs.\n\ngcc/testsuite:\n2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR target/97205\n\t* gcc.c-torture/compile/pr97205.c: New test.", "tree": {"sha": "22bddfb8b48a476402daf49715654ff07dab0704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22bddfb8b48a476402daf49715654ff07dab0704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ac7a009ecfeec3eab79136abed8aac9768b458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ac7a009ecfeec3eab79136abed8aac9768b458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ac7a009ecfeec3eab79136abed8aac9768b458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ac7a009ecfeec3eab79136abed8aac9768b458/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8909271a2b44fddfb6d3a6719a82e3836ddfcb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8909271a2b44fddfb6d3a6719a82e3836ddfcb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8909271a2b44fddfb6d3a6719a82e3836ddfcb3"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "5de466df34787d956fe26123e988c651cff30244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23ac7a009ecfeec3eab79136abed8aac9768b458", "patch": "@@ -1,3 +1,10 @@\n+2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/97205\n+\t* cfgexpand.c (align_local_variable): Make SSA_NAMEs\n+\tat least MODE_ALIGNED.\n+\t(expand_one_stack_var_at): Increase MEM_ALIGN for SSA_NAMEs.\n+\n 2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def(vbfcvt): New entry."}, {"sha": "6c41a7e21a7cef38ba063a26509e067ba81da349", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=23ac7a009ecfeec3eab79136abed8aac9768b458", "patch": "@@ -366,7 +366,15 @@ align_local_variable (tree decl, bool really_expand)\n   unsigned int align;\n \n   if (TREE_CODE (decl) == SSA_NAME)\n-    align = TYPE_ALIGN (TREE_TYPE (decl));\n+    {\n+      tree type = TREE_TYPE (decl);\n+      machine_mode mode = TYPE_MODE (type);\n+\n+      align = TYPE_ALIGN (type);\n+      if (mode != BLKmode\n+\t  && align < GET_MODE_ALIGNMENT (mode))\n+\talign = GET_MODE_ALIGNMENT (mode);\n+    }\n   else\n     {\n       align = LOCAL_DECL_ALIGNMENT (decl);\n@@ -999,20 +1007,21 @@ expand_one_stack_var_at (tree decl, rtx base, unsigned base_align,\n   x = plus_constant (Pmode, base, offset);\n   x = gen_rtx_MEM (TREE_CODE (decl) == SSA_NAME\n \t\t   ? TYPE_MODE (TREE_TYPE (decl))\n-\t\t   : DECL_MODE (SSAVAR (decl)), x);\n+\t\t   : DECL_MODE (decl), x);\n+\n+  /* Set alignment we actually gave this decl if it isn't an SSA name.\n+     If it is we generate stack slots only accidentally so it isn't as\n+     important, we'll simply set the alignment directly on the MEM.  */\n+\n+  if (base == virtual_stack_vars_rtx)\n+    offset -= frame_phase;\n+  align = known_alignment (offset);\n+  align *= BITS_PER_UNIT;\n+  if (align == 0 || align > base_align)\n+    align = base_align;\n \n   if (TREE_CODE (decl) != SSA_NAME)\n     {\n-      /* Set alignment we actually gave this decl if it isn't an SSA name.\n-         If it is we generate stack slots only accidentally so it isn't as\n-\t important, we'll simply use the alignment that is already set.  */\n-      if (base == virtual_stack_vars_rtx)\n-\toffset -= frame_phase;\n-      align = known_alignment (offset);\n-      align *= BITS_PER_UNIT;\n-      if (align == 0 || align > base_align)\n-\talign = base_align;\n-\n       /* One would think that we could assert that we're not decreasing\n \t alignment here, but (at least) the i386 port does exactly this\n \t via the MINIMUM_ALIGNMENT hook.  */\n@@ -1022,6 +1031,8 @@ expand_one_stack_var_at (tree decl, rtx base, unsigned base_align,\n     }\n \n   set_rtl (decl, x);\n+\n+  set_mem_align (x, align);\n }\n \n class stack_vars_data\n@@ -1327,13 +1338,11 @@ expand_one_stack_var_1 (tree var)\n     {\n       tree type = TREE_TYPE (var);\n       size = tree_to_poly_uint64 (TYPE_SIZE_UNIT (type));\n-      byte_align = TYPE_ALIGN_UNIT (type);\n     }\n   else\n-    {\n-      size = tree_to_poly_uint64 (DECL_SIZE_UNIT (var));\n-      byte_align = align_local_variable (var, true);\n-    }\n+    size = tree_to_poly_uint64 (DECL_SIZE_UNIT (var));\n+\n+  byte_align = align_local_variable (var, true);\n \n   /* We handle highly aligned variables in expand_stack_vars.  */\n   gcc_assert (byte_align * BITS_PER_UNIT <= MAX_SUPPORTED_STACK_ALIGNMENT);"}, {"sha": "d4814947cab1dd3b37aa4f5340a8fe60e3ce0933", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23ac7a009ecfeec3eab79136abed8aac9768b458", "patch": "@@ -1,3 +1,8 @@\n+2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/97205\n+\t* gcc.c-torture/compile/pr97205.c: New test.\n+\n 2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c"}, {"sha": "6600011fcf84660edcba8d968c78ee6aaa0aa923", "filename": "gcc/testsuite/gcc.c-torture/compile/pr97205.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac7a009ecfeec3eab79136abed8aac9768b458/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97205.c?ref=23ac7a009ecfeec3eab79136abed8aac9768b458", "patch": "@@ -0,0 +1,7 @@\n+int a;\n+typedef __attribute__((aligned(2))) int x;\n+int f ()\n+{\n+  x b = a;\n+  return b;\n+}"}]}