{"sha": "f036d759ecee538555fa8c6b11963e4033732463", "node_id": "C_kwDOANBUbNoAKGYwMzZkNzU5ZWNlZTUzODU1NWZhOGM2YjExOTYzZTQwMzM3MzI0NjM", "commit": {"author": {"name": "LIU Hao", "email": "lh_mouse@126.com", "date": "2022-04-15T16:46:23Z"}, "committer": {"name": "Jonathan Yong", "email": "10walls@gmail.com", "date": "2022-10-19T13:52:37Z"}, "message": "gcc: Add 'mcf' thread model support from mcfgthread\n\nThis patch adds the new thread model `mcf`, which implements mutexes\nand condition variables with the mcfgthread library.\n\nSource code for mcfgthread is available at <https://github.com/lhmouse/mcfgthread>.\n\nconfig/ChangeLog:\n\t* gthr.m4 (GCC_AC_THREAD_HEADER): Add new case for `mcf` thread\n\tmodel\n\ngcc/ChangeLog:\n\t* config/i386/mingw-mcfgthread.h: New file\n\t* config/i386/mingw32.h: Add builtin macro and default libraries\n\tfor mcfgthread when thread model is `mcf`\n\t* config.gcc: Include 'i386/mingw-mcfgthread.h' when thread model\n\tis `mcf`\n\t* configure.ac: Recognize `mcf` as a valid thread model\n\t* config.in: Regenerate\n\t* configure: Regenerate\n\nlibatomic/ChangeLog:\n\t* configure.tgt: Add new case for `mcf` thread model\n\nlibgcc/ChangeLog:\n\t* config.host: Add new cases for `mcf` thread model\n\t* config/i386/gthr-mcf.h: New file\n\t* config/i386/t-mingw-mcfgthread: New file\n\t* config/i386/t-slibgcc-cygming: Add mcfgthread for libgcc DLL\n\t* configure: Regenerate\n\nlibstdc++-v3/ChangeLog:\n\t* libsupc++/atexit_thread.cc (__cxa_thread_atexit): Use\n\timplementation from mcfgthread if available\n\t* libsupc++/guard.cc (__cxa_guard_acquire, __cxa_guard_release,\n\t__cxa_guard_abort): Use implementations from mcfgthread if\n\tavailable\n\t* configure: Regenerate", "tree": {"sha": "b1f521e7f71c849d3b8f64e2d65d8df081b977ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f521e7f71c849d3b8f64e2d65d8df081b977ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f036d759ecee538555fa8c6b11963e4033732463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f036d759ecee538555fa8c6b11963e4033732463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f036d759ecee538555fa8c6b11963e4033732463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f036d759ecee538555fa8c6b11963e4033732463/comments", "author": {"login": "lhmouse", "id": 5071344, "node_id": "MDQ6VXNlcjUwNzEzNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5071344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhmouse", "html_url": "https://github.com/lhmouse", "followers_url": "https://api.github.com/users/lhmouse/followers", "following_url": "https://api.github.com/users/lhmouse/following{/other_user}", "gists_url": "https://api.github.com/users/lhmouse/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhmouse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhmouse/subscriptions", "organizations_url": "https://api.github.com/users/lhmouse/orgs", "repos_url": "https://api.github.com/users/lhmouse/repos", "events_url": "https://api.github.com/users/lhmouse/events{/privacy}", "received_events_url": "https://api.github.com/users/lhmouse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jon-y", "id": 4688224, "node_id": "MDQ6VXNlcjQ2ODgyMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4688224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jon-y", "html_url": "https://github.com/jon-y", "followers_url": "https://api.github.com/users/jon-y/followers", "following_url": "https://api.github.com/users/jon-y/following{/other_user}", "gists_url": "https://api.github.com/users/jon-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/jon-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jon-y/subscriptions", "organizations_url": "https://api.github.com/users/jon-y/orgs", "repos_url": "https://api.github.com/users/jon-y/repos", "events_url": "https://api.github.com/users/jon-y/events{/privacy}", "received_events_url": "https://api.github.com/users/jon-y/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b957ea8b9dadfb1ed30f24f463529684b7a36a"}], "stats": {"total": 113, "additions": 98, "deletions": 15}, "files": [{"sha": "11996247f150f99a9eb6720b33f8f72bacb8bf8c", "filename": "config/gthr.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/config%2Fgthr.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/config%2Fgthr.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fgthr.m4?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -22,6 +22,7 @@ case $1 in\n     tpf)\tthread_header=config/s390/gthr-tpf.h ;;\n     vxworks)\tthread_header=config/gthr-vxworks.h ;;\n     win32)\tthread_header=config/i386/gthr-win32.h ;;\n+    mcf)\tthread_header=config/i386/gthr-mcf.h ;;\n esac\n AC_SUBST(thread_header)\n ])"}, {"sha": "2fbf2e6fa699babfb2786eeb199666d4498b8cab", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -2096,6 +2096,9 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \tif test x$enable_threads = xposix ; then\n \t\ttm_file=\"${tm_file} i386/mingw-pthread.h\"\n \tfi\n+\tif test x$enable_threads = xmcf ; then\n+\t\ttm_file=\"${tm_file} i386/mingw-mcfgthread.h\"\n+\tfi\n \ttm_file=\"${tm_file} i386/mingw32.h\"\n \t# This makes the logic if mingw's or the w64 feature set has to be used\n \tcase ${target} in"}, {"sha": "5e41748a35422ed99d0308131e91a956e42c3867", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -1451,6 +1451,12 @@\n #endif\n \n \n+/* Define to 1 if you have the `getauxval' function. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GETAUXVAL\n+#endif\n+\n+\n /* Define to 1 if you have the `getchar_unlocked' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETCHAR_UNLOCKED\n@@ -2678,7 +2684,3 @@\n #undef vfork\n #endif\n \n-/* Define to 1 if you have the `getauxval' function. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GETAUXVAL\n-#endif"}, {"sha": "7d4eda3ed49424b6bc17a49a86461b77b4902f3f", "filename": "gcc/config/i386/mingw-mcfgthread.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig%2Fi386%2Fmingw-mcfgthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig%2Fi386%2Fmingw-mcfgthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-mcfgthread.h?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -0,0 +1 @@\n+#define TARGET_USING_MCFGTHREAD  1"}, {"sha": "b5f31c3da0aca9a45c0095b93de2e66c1db4db40", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -32,6 +32,10 @@ along with GCC; see the file COPYING3.  If not see\n \t | MASK_STACK_PROBE | MASK_ALIGN_DOUBLE \\\n \t | MASK_MS_BITFIELD_LAYOUT)\n \n+#ifndef TARGET_USING_MCFGTHREAD\n+#define TARGET_USING_MCFGTHREAD  0\n+#endif\n+\n /* See i386/crtdll.h for an alternative definition. _INTEGRAL_MAX_BITS\n    is for compatibility with native compiler.  */\n #define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\\n@@ -50,6 +54,8 @@ along with GCC; see the file COPYING3.  If not see\n \t  builtin_define_std (\"WIN64\");\t\t\t\t\\\n \t  builtin_define (\"_WIN64\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n+      if (TARGET_USING_MCFGTHREAD)\t\t\t\t\\\n+\tbuiltin_define (\"__USING_MCFGTHREAD__\");\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -181,11 +187,16 @@ along with GCC; see the file COPYING3.  If not see\n #else\n #define SHARED_LIBGCC_SPEC \" -lgcc \"\n #endif\n+#if TARGET_USING_MCFGTHREAD\n+#define MCFGTHREAD_SPEC  \" -lmcfgthread -lkernel32 -lntdll \"\n+#else\n+#define MCFGTHREAD_SPEC  \"\"\n+#endif\n #undef REAL_LIBGCC_SPEC\n #define REAL_LIBGCC_SPEC \\\n   \"%{mthreads:-lmingwthrd} -lmingw32 \\\n    \" SHARED_LIBGCC_SPEC \" \\\n-   -lmoldname -lmingwex -lmsvcrt -lkernel32\"\n+   -lmoldname -lmingwex -lmsvcrt -lkernel32 \" MCFGTHREAD_SPEC\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{shared|mdll:dllcrt2%O%s} \\"}, {"sha": "2ce51a8a45836589dae855adedde1659b041316c", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -12900,7 +12900,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | lynx | mipssde | posix | rtems | \\\n-  single | tpf | vxworks | win32)\n+  single | tpf | vxworks | win32 | mcf)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "e1ef2ecf0267b0c4ea0bda799629127990586f65", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -1991,7 +1991,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | lynx | mipssde | posix | rtems | \\\n-  single | tpf | vxworks | win32)\n+  single | tpf | vxworks | win32 | mcf)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "86a59475b6e78354e23343d21983dde8398742db", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -159,7 +159,7 @@ case \"${target}\" in\n   *-*-mingw*)\n \t# OS support for atomic primitives.\n         case ${target_thread_file} in\n-          win32)\n+          win32 | mcf)\n             config_path=\"${config_path} mingw\"\n             ;;\n           posix)"}, {"sha": "eb23abe89f5ebdc772a5023cfc94d7d410e04a8d", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -825,6 +825,9 @@ i[34567]86-*-mingw*)\n \t  posix)\n \t    tmake_file=\"i386/t-mingw-pthread $tmake_file\"\n \t    ;;\n+\t  mcf)\n+\t    tmake_file=\"i386/t-mingw-mcfgthread $tmake_file\"\n+\t    ;;\n \tesac\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n \tif test x$ac_cv_sjlj_exceptions = xyes; then\n@@ -849,6 +852,9 @@ x86_64-*-mingw*)\n \t  posix)\n \t    tmake_file=\"i386/t-mingw-pthread $tmake_file\"\n \t    ;;\n+\t  mcf)\n+\t    tmake_file=\"i386/t-mingw-mcfgthread $tmake_file\"\n+\t    ;;\n \tesac\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n \tif test x$ac_cv_sjlj_exceptions = xyes; then"}, {"sha": "58131bb7ca923e63cecc3474d217a85ed24f3649", "filename": "libgcc/config/i386/gthr-mcf.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Fgthr-mcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Fgthr-mcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgthr-mcf.h?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -0,0 +1 @@\n+#include <mcfgthread/gthr.h>"}, {"sha": "c5b817f09b71801e364afe32b82d073e494d9b06", "filename": "libgcc/config/i386/t-mingw-mcfgthread", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Ft-mingw-mcfgthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Ft-mingw-mcfgthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-mingw-mcfgthread?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -0,0 +1 @@\n+SHLIB_MCFGTHREAD_LIBS = -lmcfgthread -lkernel32 -lntdll"}, {"sha": "6871498cf60e421628840d65960d61da60aaacde", "filename": "libgcc/config/i386/t-slibgcc-cygming", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-cygming?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -27,6 +27,9 @@ endif\n ifndef SHLIB_PTHREAD_LDFLAG\n SHLIB_PTHREAD_LDFLAG =\n endif\n+ifndef SHLIB_MCFGTHREAD_LIBS\n+SHLIB_MCFGTHREAD_LIBS =\n+endif\n \n SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \\\n \tif [ ! -d $(SHLIB_DIR) ]; then \\\n@@ -37,7 +40,8 @@ SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \\\n \t$(SHLIB_MAP).def \\\n \t-Wl,--out-implib,$(SHLIB_DIR)/$(SHLIB_IMPLIB).tmp \\\n \t-o $(SHLIB_DIR)/$(SHLIB_SONAME).tmp @multilib_flags@ \\\n-\t$(SHLIB_OBJS) ${SHLIB_PTHREAD_LDFLAG} $(SHLIB_LC) && \\\n+\t$(SHLIB_OBJS) ${SHLIB_PTHREAD_LDFLAG} $(SHLIB_LC) \\\n+\t$(SHLIB_MCFGTHREAD_LIBS) && \\\n \tif [ -f $(SHLIB_DIR)/$(SHLIB_SONAME) ]; then \\\n \t  mv -f $(SHLIB_DIR)/$(SHLIB_SONAME) \\\n \t\t$(SHLIB_DIR)/$(SHLIB_SONAME).backup; \\"}, {"sha": "be5d45f1755cb77e10d2f54f55adaa1bb05f52a4", "filename": "libgcc/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -5699,6 +5699,7 @@ case $target_thread_file in\n     tpf)\tthread_header=config/s390/gthr-tpf.h ;;\n     vxworks)\tthread_header=config/gthr-vxworks.h ;;\n     win32)\tthread_header=config/i386/gthr-win32.h ;;\n+    mcf)\tthread_header=config/i386/gthr-mcf.h ;;\n esac\n \n "}, {"sha": "a90097523ab7011fd7c7c8fdac680ae084f8d518", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -15855,6 +15855,7 @@ case $target_thread_file in\n     tpf)\tthread_header=config/s390/gthr-tpf.h ;;\n     vxworks)\tthread_header=config/gthr-vxworks.h ;;\n     win32)\tthread_header=config/i386/gthr-win32.h ;;\n+    mcf)\tthread_header=config/i386/gthr-mcf.h ;;\n esac\n \n \n@@ -16062,7 +16063,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16065 \"configure\"\n+#line 16066 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -16097,7 +16098,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16100 \"configure\"\n+#line 16101 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16132,7 +16133,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16135 \"configure\"\n+#line 16136 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16168,7 +16169,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16171 \"configure\"\n+#line 16172 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16324,7 +16325,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16327 \"configure\"\n+#line 16328 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16366,7 +16367,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16369 \"configure\"\n+#line 16370 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "2f936ab02ce2e9d2b553130c0798c7bd4efd2974", "filename": "libstdc++-v3/libsupc++/atexit_thread.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatexit_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatexit_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatexit_thread.cc?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -25,6 +25,24 @@\n #include <cstdlib>\n #include <new>\n #include \"bits/gthr.h\"\n+\n+#ifdef __USING_MCFGTHREAD__\n+\n+#include <mcfgthread/cxa.h>\n+\n+namespace __cxxabiv1 {\n+\n+extern \"C\" int\n+__cxa_thread_atexit (void (_GLIBCXX_CDTOR_CALLABI *dtor)(void *),\n+\t\t     void *obj, void *dso_handle) _GLIBCXX_NOTHROW\n+{\n+  return __MCF_cxa_thread_atexit (dtor, obj, dso_handle);\n+}\n+\n+}  // namespace __cxxabiv1\n+\n+#else // __USING_MCFGTHREAD__\n+\n #ifdef _GLIBCXX_THREAD_ATEXIT_WIN32\n #define WIN32_LEAN_AND_MEAN\n #include <windows.h>\n@@ -173,3 +191,5 @@ __cxxabiv1::__cxa_thread_atexit (void (_GLIBCXX_CDTOR_CALLABI *dtor)(void *),\n }\n \n #endif /* _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL */\n+\n+#endif // __USING_MCFGTHREAD__"}, {"sha": "0f81a22c6845a83c9085062b4cbd58ab0caad71b", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036d759ecee538555fa8c6b11963e4033732463/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=f036d759ecee538555fa8c6b11963e4033732463", "patch": "@@ -28,6 +28,35 @@\n #include <cxxabi.h>\n #include <exception>\n #include <new>\n+\n+#ifdef __USING_MCFGTHREAD__\n+\n+#include <mcfgthread/cxa.h>\n+\n+namespace __cxxabiv1 {\n+\n+extern \"C\" int\n+__cxa_guard_acquire (__guard* g) _GLIBCXX_NOTHROW\n+  {\n+    return __MCF_cxa_guard_acquire(g);\n+  }\n+\n+extern \"C\" void\n+__cxa_guard_release (__guard* g) _GLIBCXX_NOTHROW\n+  {\n+    __MCF_cxa_guard_release(g);\n+  }\n+\n+extern \"C\" void\n+__cxa_guard_abort (__guard* g) _GLIBCXX_NOTHROW\n+  {\n+    __MCF_cxa_guard_abort(g);\n+  }\n+\n+}  // namespace __cxxabiv1\n+\n+#else // __USING_MCFGTHREAD__\n+\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n #include <bits/atomic_lockfree_defines.h>\n@@ -458,3 +487,5 @@ namespace __cxxabiv1\n #endif\n   }\n }\n+\n+#endif // __USING_MCFGTHREAD__"}]}