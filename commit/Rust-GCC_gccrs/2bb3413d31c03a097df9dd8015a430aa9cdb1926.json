{"sha": "2bb3413d31c03a097df9dd8015a430aa9cdb1926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiMzQxM2QzMWMwM2EwOTdkZjlkZDgwMTVhNDMwYWE5Y2RiMTkyNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-20T06:54:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-20T06:54:26Z"}, "message": "(movqi): In address reg case, if d0\nappears in the address, use d1 instead as intermediate reg.\n\nFrom-SVN: r3797", "tree": {"sha": "17d4ac9cb2add049b79b90e893d93cd6fb33673f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d4ac9cb2add049b79b90e893d93cd6fb33673f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb3413d31c03a097df9dd8015a430aa9cdb1926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb3413d31c03a097df9dd8015a430aa9cdb1926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb3413d31c03a097df9dd8015a430aa9cdb1926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb3413d31c03a097df9dd8015a430aa9cdb1926/comments", "author": null, "committer": null, "parents": [{"sha": "14a8d078590eb7741732ef43040347cd8e531371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a8d078590eb7741732ef43040347cd8e531371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a8d078590eb7741732ef43040347cd8e531371"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c31ba9b2e1f5d56ffcd6f0172f2f1056d9f1be80", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb3413d31c03a097df9dd8015a430aa9cdb1926/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb3413d31c03a097df9dd8015a430aa9cdb1926/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=2bb3413d31c03a097df9dd8015a430aa9cdb1926", "patch": "@@ -931,10 +931,24 @@\n   /* Moving a byte into an address register is not possible.  */\n   /* Use d0 as an intermediate, but don't clobber its contents.  */\n   if (ADDRESS_REG_P (operands[0]) && GET_CODE (operands[1]) == MEM)\n-    return \\\"exg %/d0,%0\\;move%.b %1,%/d0\\;exg %/d0,%0\\\";\n+    {\n+      /* If the address of operand 1 uses d0, choose d1 as intermediate.  */\n+      if (refers_to_regno_p (0, 1, operands[1], NULL_RTX))\n+\treturn \\\"exg %/d1,%0\\;move%.b %1,%/d1\\;exg %/d1,%0\\\";\n+      /* Otherwise d0 is usable.\n+\t (An effective address on the 68k can't use two d-regs.)  */\n+      else\n+\treturn \\\"exg %/d0,%0\\;move%.b %1,%/d0\\;exg %/d0,%0\\\";\n+    }\n+    \n   /* Likewise for moving from an address reg.  */\n   if (ADDRESS_REG_P (operands[1]) && GET_CODE (operands[0]) == MEM)\n-    return \\\"exg %/d0,%1\\;move%.b %/d0,%0\\;exg %/d0,%1\\\";\n+    {\n+      if (refers_to_regno_p (0, 1, operands[0], NULL_RTX))\n+        return \\\"exg %/d1,%1\\;move%.b %/d1,%0\\;exg %/d1,%1\\\";\n+      else\n+        return \\\"exg %/d0,%1\\;move%.b %/d0,%0\\;exg %/d0,%1\\\";\n+    }\n \n   /* clr and st insns on 68000 read before writing.\n      This isn't so on the 68010, but we have no alternative for it.  */"}]}