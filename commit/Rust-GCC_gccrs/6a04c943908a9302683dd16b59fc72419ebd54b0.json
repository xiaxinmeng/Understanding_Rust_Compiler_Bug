{"sha": "6a04c943908a9302683dd16b59fc72419ebd54b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwNGM5NDM5MDhhOTMwMjY4M2RkMTZiNTlmYzcyNDE5ZWJkNTRiMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-01T13:34:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-01T13:34:30Z"}, "message": "[Ada] Compiler abort on use of Invalid_Value on numeric positive subtype\n\nInvalid_Value in most cases uses a predefined numeric value from a\nbuilt-in table, but if the type does not include zero in its range, the\nliteral 0 is used instead. In that case the value (produced by a call to\nGet_Simple_Init_Val) must be resolved for proper type information.\n\nThe following must compile quietly:\n\n   gnatmake -q main\n\n----\nwith Problems; use Problems;\nwith Text_IO; use Text_IO;\n\nprocedure Main is\nbegin\n\n   Put_Line (\"P1: \" & P1'Image);\n   Put_Line (\"P2: \" & P2'Image);\n   Put_Line (\"P3: \" & P3'Image);\n   Put_Line (\"P4: \" & P4'Image);\n\nend Main;\n--\npackage Problems is\n\n   function P1 return Integer;\n   function P2 return Long_Integer;\n\n   -- Max. number of prime factors a number can have is log_2 N\n   -- For N = 600851475143, this is ~ 40\n   -- type P3_Factors is array (1 .. 40) of Long_Integer;\n   function P3 return Long_Integer;\n\n   type P4_Palindrome is range 100*100 .. 999*999;\n   function P4 return P4_Palindrome;\n\nend Problems;\n----\npackage body Problems is\n\n   function P1 return Integer is separate;\n   function P2 return Long_Integer is separate;\n   function P3 return Long_Integer is separate;\n   function P4 return P4_Palindrome is separate;\n\nend Problems;\n----\nseparate(Problems)\n\nfunction P1 return Integer is\n\n   Sum : Integer range 0 .. 500_500 := 0;\n\nbegin\n\n   for I in Integer range 1 .. 1000 - 1 loop\n      if I mod 3 = 0 or I mod 5 = 0 then\n         Sum := Sum + I;\n      end if;\n   end loop;\n\n   return Sum;\n\nend P1;\n--\nseparate(Problems)\n\nfunction P2 return Long_Integer is\n\n   subtype Total is Long_Integer range 0 .. 8_000002e6 ;\n   subtype Elem  is Total        range 0 .. 4e7 ;\n\n   Sum : Total := 0;\n   a, b, c : Elem;\n\nbegin\n   a := 1;\n   b := 2;\n\n   loop\n      if b mod 2 = 0 then\n         Sum := Sum + b;\n      end if;\n\n      c := b;\n      b := a + b;\n      a := c;\n\n      exit when b >= 4e6;\n   end loop;\n\n   return Sum;\n\nend P2;\n--\nwith Text_IO; use Text_IO;\nwith Ada.Numerics.Elementary_Functions; use Ada.Numerics.Elementary_Functions;\n\nseparate(Problems)\nfunction P3 return Long_Integer is\n\n   -- Greatest prime factor\n   GPF      : Long_Integer       := 1;\n\n   Dividend : Long_Integer  := 600851475143;\n   Factor   : Long_Integer  := 2;\n   Quotient : Long_Integer;\n\nbegin\n\n   while Dividend > 1 loop\n      Quotient := Dividend / Factor;\n      if Dividend mod Factor = 0 then\n         GPF := Factor;\n         Dividend := Quotient;\n      else\n         if Factor >= Quotient then\n            GPF := Dividend;\n            exit;\n         end if;\n         Factor := Factor + 1;\n      end if;\n   end loop;\n\n   return GPF;\n\nend P3;\n----\nwith Text_IO; use Text_IO;\nseparate(Problems)\nfunction P4 return P4_Palindrome is\n\n   type TripleDigit is range 100 .. 999;\n   a, b: TripleDigit := TripleDigit'First;\n\n   c : P4_Palindrome;\n\n   Max_Palindrome : P4_Palindrome := P4_Palindrome'Invalid_Value;\n\n   function Is_Palindrome (X : in P4_Palindrome) return Boolean is\n\n      type Int_Digit is range 0 .. 9;\n      type Int_Digits is array (1 .. 6) of Int_Digit;\n\n      type Digit_Extractor is range 0 .. P4_Palindrome'Last;\n      Y : Digit_Extractor := Digit_Extractor (X);\n      X_Digits : Int_Digits;\n\n   begin\n\n      for I in reverse X_Digits'Range loop\n         X_Digits (I) := Int_Digit (Y mod 10);\n         Y := Y / 10;\n      end loop;\n\n      return\n        (X_Digits (1) = X_Digits (6) and X_Digits (2) = X_Digits (5) and\n             X_Digits (3) = X_Digits (4)) or\n        (X_Digits (2) = X_Digits (6) and X_Digits (3) = X_Digits (5) and\n             X_Digits(1) = 0);\n\n   end Is_Palindrome;\n\nbegin\n\n   for a in TripleDigit'Range loop\n      for b in TripleDigit'Range loop\n         c := P4_Palindrome (a * b);\n         if Is_Palindrome (c) then\n            if Max_Palindrome'Valid or else c > Max_Palindrome then\n               Max_Palindrome := c;\n            end if;\n         end if;\n      end loop;\n   end loop;\n\n   return Max_Palindrome;\nend;\n\n2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Attribute_Reference, case Invalid_Value):\n\tResolve result of call to Get_Simple_Init_Val, which may be a\n\tconversion of a literal.\n\nFrom-SVN: r272855", "tree": {"sha": "a8e5109cf9548d8f8cea3131bb86941501720799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e5109cf9548d8f8cea3131bb86941501720799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a04c943908a9302683dd16b59fc72419ebd54b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a04c943908a9302683dd16b59fc72419ebd54b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a04c943908a9302683dd16b59fc72419ebd54b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a04c943908a9302683dd16b59fc72419ebd54b0/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "867edb0b613898bec9128e1ecb055c3277e34dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867edb0b613898bec9128e1ecb055c3277e34dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867edb0b613898bec9128e1ecb055c3277e34dbc"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "82e808bf9a5ac8e60407b1d59c599f6797653ee7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a04c943908a9302683dd16b59fc72419ebd54b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a04c943908a9302683dd16b59fc72419ebd54b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a04c943908a9302683dd16b59fc72419ebd54b0", "patch": "@@ -1,3 +1,9 @@\n+2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute_Reference, case Invalid_Value):\n+\tResolve result of call to Get_Simple_Init_Val, which may be a\n+\tconversion of a literal.\n+\n 2019-07-01  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Freeze_Expression): Remove the horrible useless"}, {"sha": "cbf7db372ff7a95d13961a40566f7681b9e6a9b8", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a04c943908a9302683dd16b59fc72419ebd54b0/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a04c943908a9302683dd16b59fc72419ebd54b0/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=6a04c943908a9302683dd16b59fc72419ebd54b0", "patch": "@@ -4242,6 +4242,11 @@ package body Exp_Attr is\n       when Attribute_Invalid_Value =>\n          Rewrite (N, Get_Simple_Init_Val (Ptyp, N));\n \n+         --  The value produced may be a conversion of a literal, which\n+         --  must be resolved to establish its proper type.\n+\n+         Analyze_And_Resolve (N);\n+\n       ----------\n       -- Last --\n       ----------"}]}