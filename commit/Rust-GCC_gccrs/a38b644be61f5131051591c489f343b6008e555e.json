{"sha": "a38b644be61f5131051591c489f343b6008e555e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4YjY0NGJlNjFmNTEzMTA1MTU5MWM0ODlmMzQzYjYwMDhlNTU1ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-11T21:14:39Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-11T21:14:39Z"}, "message": "tree.c (tree_code_size): New function, bulk of code from tree_size.\n\n\t* tree.c (tree_code_size): New function, bulk of code from tree_size.\n\t(tree_size, make_node): Use it.\n\t* tree-ssa-pre.c (init_pre): Use it.\n\t* tree.h: Prototype it.\n\nFrom-SVN: r87371", "tree": {"sha": "02ed409cddb73dd4e5bef2d9859d272ef3ce4744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ed409cddb73dd4e5bef2d9859d272ef3ce4744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38b644be61f5131051591c489f343b6008e555e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38b644be61f5131051591c489f343b6008e555e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38b644be61f5131051591c489f343b6008e555e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38b644be61f5131051591c489f343b6008e555e/comments", "author": null, "committer": null, "parents": [{"sha": "68a97276d689ed61be616643316bc9be453e412b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a97276d689ed61be616643316bc9be453e412b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a97276d689ed61be616643316bc9be453e412b"}], "stats": {"total": 92, "additions": 56, "deletions": 36}, "files": [{"sha": "190c7e6fe05fadb1eb4a29e269b3815331ef0e60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b644be61f5131051591c489f343b6008e555e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b644be61f5131051591c489f343b6008e555e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a38b644be61f5131051591c489f343b6008e555e", "patch": "@@ -1,3 +1,10 @@\n+2004-09-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.c (tree_code_size): New function, bulk of code from tree_size.\n+\t(tree_size, make_node): Use it.\n+\t* tree-ssa-pre.c (init_pre): Use it.\n+\t* tree.h: Prototype it.\n+\n 2004-09-11  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-cfg.c (set_bb_for_stmt): Use PHI_BB.\n@@ -91,11 +98,11 @@\n \t* tree-pretty-print.c (dump_decl_name): Print unnamed decls as\n \tD.xxx rather than <Dxxx>.\n \n-2004-09-10  Adam Nemet  <anemet@lnxw.com>  \n+2004-09-10  Adam Nemet  <anemet@lnxw.com>\n \n \t* configure.ac (AC_MSG_CHECKING(what linker to use)):\n \tin_tree_ld_is_elf should be true for LynxOS.\n-\t* configure: Regenerate.  \n+\t* configure: Regenerate.\n \n 2004-09-10  Adam Nemet  <anemet@lnxw.com>\n "}, {"sha": "bf332f41b9bd54e62d2ddf17328c9355b9e134ae", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a38b644be61f5131051591c489f343b6008e555e", "patch": "@@ -1905,7 +1905,6 @@ eliminate (void)\n static void\n init_pre (void)\n {\n-  size_t tsize;\n   basic_block bb;\n \n   connect_infinite_loops_to_exit ();\n@@ -1937,13 +1936,12 @@ init_pre (void)\n \t\t\t\t           sizeof (struct value_set_node), 30);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n   calculate_dominance_info (CDI_DOMINATORS);\n-  tsize = tree_size (build (PLUS_EXPR, void_type_node, NULL_TREE, NULL_TREE));\n-  binary_node_pool = create_alloc_pool (\"Binary tree nodes\", tsize, 30);\n-  tsize = tree_size (build1 (NEGATE_EXPR, void_type_node, NULL_TREE));\n-  unary_node_pool = create_alloc_pool (\"Unary tree nodes\", tsize, 30);\n-  tsize = tree_size (build (COMPONENT_REF, void_type_node, NULL_TREE,\n-\t\t\t    NULL_TREE, NULL_TREE));\n-  reference_node_pool = create_alloc_pool (\"Reference tree nodes\", tsize, 30);\n+  binary_node_pool = create_alloc_pool (\"Binary tree nodes\",\n+\t\t\t\t        tree_code_size (PLUS_EXPR), 30);\n+  unary_node_pool = create_alloc_pool (\"Unary tree nodes\",\n+\t\t\t\t       tree_code_size (NEGATE_EXPR), 30);\n+  reference_node_pool = create_alloc_pool (\"Reference tree nodes\",\n+\t\t\t\t\t   tree_code_size (COMPONENT_REF), 30);\n   FOR_ALL_BB (bb)\n     {\n       EXP_GEN (bb) = set_new (true);"}, {"sha": "9ef5a62a0726dc42797179e19715b30a1d212d4a", "filename": "gcc/tree.c", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a38b644be61f5131051591c489f343b6008e555e", "patch": "@@ -142,12 +142,16 @@ decl_assembler_name (tree decl)\n   return DECL_CHECK (decl)->decl.assembler_name;\n }\n \n-/* Compute the number of bytes occupied by 'node'.  This routine only\n-   looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */\n+/* Compute the number of bytes occupied by a tree with code CODE.  This\n+   function cannot be used for TREE_VEC or PHI_NODE codes, which are of\n+   variable length.  */\n size_t\n-tree_size (tree node)\n+tree_code_size (enum tree_code code)\n {\n-  enum tree_code code = TREE_CODE (node);\n+  /* We can't state the size of a TREE_VEC or PHI_NODE\n+     without knowing how many elements it will have.  */\n+  gcc_assert (code != TREE_VEC);\n+  gcc_assert (code != PHI_NODE);\n \n   switch (TREE_CODE_CLASS (code))\n     {\n@@ -164,7 +168,7 @@ tree_size (tree node)\n     case '1':  /* a unary arithmetic expression */\n     case '2':  /* a binary arithmetic expression */\n       return (sizeof (struct tree_exp)\n-\t      + TREE_CODE_LENGTH (code) * sizeof (char *) - sizeof (char *));\n+\t      + (TREE_CODE_LENGTH (code) - 1) * sizeof (char *));\n \n     case 'c':  /* a constant */\n       switch (code)\n@@ -183,16 +187,11 @@ tree_size (tree node)\n \t{\n \tcase IDENTIFIER_NODE:\treturn lang_hooks.identifier_size;\n \tcase TREE_LIST:\t\treturn sizeof (struct tree_list);\n-\tcase TREE_VEC:\t\treturn (sizeof (struct tree_vec)\n-\t\t\t\t\t+ TREE_VEC_LENGTH(node) * sizeof(char *)\n-\t\t\t\t\t- sizeof (char *));\n \n \tcase ERROR_MARK:\n \tcase PLACEHOLDER_EXPR:\treturn sizeof (struct tree_common);\n \n-\tcase PHI_NODE:\t\treturn (sizeof (struct tree_phi_node)\n-\t\t\t\t\t+ (PHI_ARG_CAPACITY (node) - 1) *\n-\t\t\t\t\tsizeof (struct phi_arg_d));\n+\tcase PHI_NODE:\t\t\n \n \tcase SSA_NAME:\t\treturn sizeof (struct tree_ssa_name);\n \n@@ -209,9 +208,31 @@ tree_size (tree node)\n     }\n }\n \n-/* Return a newly allocated node of code CODE.\n-   For decl and type nodes, some other fields are initialized.\n-   The rest of the node is initialized to zero.\n+/* Compute the number of bytes occupied by NODE.  This routine only\n+   looks at TREE_CODE, except for PHI_NODE and TREE_VEC nodes.  */\n+size_t\n+tree_size (tree node)\n+{\n+  enum tree_code code = TREE_CODE (node);\n+  switch (code)\n+    {\n+    case PHI_NODE:\n+      return (sizeof (struct tree_phi_node)\n+\t      + (PHI_ARG_CAPACITY (node) - 1) * sizeof (struct phi_arg_d));\n+\n+    case TREE_VEC:\n+      return (sizeof (struct tree_vec)\n+\t      + (TREE_VEC_LENGTH (node) - 1) * sizeof(char *));\n+\n+    default:\n+      return tree_code_size (code);\n+    }\n+}\n+\n+/* Return a newly allocated node of code CODE.  For decl and type\n+   nodes, some other fields are initialized.  The rest of the node is\n+   initialized to zero.  This function cannot be used for PHI_NODE or\n+   TREE_VEC nodes, which is enforced by asserts in tree_code_size.\n \n    Achoo!  I got a code in the node.  */\n \n@@ -220,21 +241,10 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n {\n   tree t;\n   int type = TREE_CODE_CLASS (code);\n-  size_t length;\n+  size_t length = tree_code_size (code);\n #ifdef GATHER_STATISTICS\n   tree_node_kind kind;\n-#endif\n-  struct tree_common ttmp;\n \n-  /* We can't allocate a TREE_VEC, PHI_NODE, or STRING_CST\n-     without knowing how many elements it will have.  */\n-  gcc_assert (code != TREE_VEC);\n-  gcc_assert (code != PHI_NODE);\n-\n-  TREE_SET_CODE ((tree)&ttmp, code);\n-  length = tree_size ((tree)&ttmp);\n-\n-#ifdef GATHER_STATISTICS\n   switch (type)\n     {\n     case 'd':  /* A decl node */"}, {"sha": "0dd7eacc2a8b6965e01a4a68012284fadb379cd0", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b644be61f5131051591c489f343b6008e555e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a38b644be61f5131051591c489f343b6008e555e", "patch": "@@ -2650,6 +2650,11 @@ extern tree decl_assembler_name (tree);\n \n extern size_t tree_size (tree);\n \n+/* Compute the number of bytes occupied by a tree with code CODE.  This\n+   function cannot be used for TREE_VEC or PHI_NODE codes, which are of\n+   variable length.  */\n+extern size_t tree_code_size (enum tree_code);\n+\n /* Lowest level primitive for allocating a node.\n    The TREE_CODE is the only argument.  Contents are initialized\n    to zero except for a few of the common fields.  */"}]}