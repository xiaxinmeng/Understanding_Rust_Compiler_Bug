{"sha": "f99d7d669eaa2830eb5878df4da67e77ec791522", "node_id": "C_kwDOANBUbNoAKGY5OWQ3ZDY2OWVhYTI4MzBlYjU4NzhkZjRkYTY3ZTc3ZWM3OTE1MjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-09T08:42:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-11T12:13:50Z"}, "message": "tree-optimization/107767 - not profitable switch conversion\n\nWhen the CFG has not merged equal PHI defs in a switch stmt the\ncost model from switch conversion gets off and we prefer a\njump table over branches.  The following fixes that by recording\ncases that will be merged later and more appropriately counting\nunique values.\n\n\tPR tree-optimization/107767\n\t* tree-cfgcleanup.cc (phi_alternatives_equal): Export.\n\t* tree-cfgcleanup.h (phi_alternatives_equal): Declare.\n\t* tree-switch-conversion.cc (switch_conversion::collect):\n\tCount unique non-default targets accounting for later\n\tmerging opportunities.\n\n\t* gcc.dg/tree-ssa/pr107767.c: New testcase.", "tree": {"sha": "feea70ad9071ddde1440fbb8c422c964fa23699d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feea70ad9071ddde1440fbb8c422c964fa23699d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99d7d669eaa2830eb5878df4da67e77ec791522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99d7d669eaa2830eb5878df4da67e77ec791522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99d7d669eaa2830eb5878df4da67e77ec791522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99d7d669eaa2830eb5878df4da67e77ec791522/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39c1bea5bae9aee1df25cab1064f983b9ec6941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39c1bea5bae9aee1df25cab1064f983b9ec6941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39c1bea5bae9aee1df25cab1064f983b9ec6941"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "bace8abfd9c82e5705aafa062b083b74bcfc218a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107767.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107767.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107767.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107767.c?ref=f99d7d669eaa2830eb5878df4da67e77ec791522", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-switchconv\" } */\n+\n+int firewall2(const unsigned char *restrict data)\n+{\n+  const unsigned short dst_port = *((const unsigned short *)data + 32);\n+\n+  if (dst_port == 15) return 1;\n+  if (dst_port == 23) return 1;\n+  if (dst_port == 47) return 1;\n+  if (dst_port == 45) return 1;\n+  if (dst_port == 42) return 1;\n+  if (dst_port == 1) return 1;\n+  if (dst_port == 2) return 1;\n+  if (dst_port == 3) return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"CSWTCH\" \"switchconv\" } } */"}, {"sha": "ca0cb633f2c5e2edf395b8d1a3f6216ef3588141", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=f99d7d669eaa2830eb5878df4da67e77ec791522", "patch": "@@ -450,7 +450,7 @@ tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n    those alternatives are equal in each of the PHI nodes, then return\n    true, else return false.  */\n \n-static bool\n+bool\n phi_alternatives_equal (basic_block dest, edge e1, edge e2)\n {\n   int n1 = e1->dest_idx;"}, {"sha": "b7c7ff1ebcd1b2b7d40a096252db7375bc0cab19", "filename": "gcc/tree-cfgcleanup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-cfgcleanup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-cfgcleanup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.h?ref=f99d7d669eaa2830eb5878df4da67e77ec791522", "patch": "@@ -27,5 +27,6 @@ extern bool fixup_noreturn_call (gimple *stmt);\n extern bool delete_unreachable_blocks_update_callgraph (cgraph_node *dst_node,\n \t\t\t\t\t\t\tbool update_clones);\n extern unsigned clean_up_loop_closed_phi (function *);\n+extern bool phi_alternatives_equal (basic_block, edge, edge);\n \n #endif /* GCC_TREE_CFGCLEANUP_H */"}, {"sha": "c08c22039c939d244bd9c5302cfb9b91d9b3b2e6", "filename": "gcc/tree-switch-conversion.cc", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-switch-conversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99d7d669eaa2830eb5878df4da67e77ec791522/gcc%2Ftree-switch-conversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.cc?ref=f99d7d669eaa2830eb5878df4da67e77ec791522", "patch": "@@ -51,6 +51,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-into-ssa.h\"\n #include \"omp-general.h\"\n #include \"gimple-range.h\"\n+#include \"tree-cfgcleanup.h\"\n \n /* ??? For lang_hooks.types.type_for_mode, but is there a word_mode\n    type in the GIMPLE type system that is language-independent?  */\n@@ -132,16 +133,42 @@ switch_conversion::collect (gswitch *swtch)\n   /* Require that all switch destinations are either that common\n      FINAL_BB or a forwarder to it, except for the default\n      case if contiguous range.  */\n+  auto_vec<edge, 10> fw_edges;\n+  m_uniq = 0;\n   if (m_final_bb)\n     FOR_EACH_EDGE (e, ei, m_switch_bb->succs)\n       {\n+\tedge phi_e = nullptr;\n \tif (e->dest == m_final_bb)\n-\t  continue;\n-\n-\tif (single_pred_p (e->dest)\n-\t    && single_succ_p (e->dest)\n-\t    && single_succ (e->dest) == m_final_bb)\n-\t  continue;\n+\t  phi_e = e;\n+\telse if (single_pred_p (e->dest)\n+\t\t && single_succ_p (e->dest)\n+\t\t && single_succ (e->dest) == m_final_bb)\n+\t  phi_e = single_succ_edge (e->dest);\n+\tif (phi_e)\n+\t  {\n+\t    if (e == e_default)\n+\t      ;\n+\t    else if (phi_e == e || empty_block_p (e->dest))\n+\t      {\n+\t\t/* For empty blocks consider forwarders with equal\n+\t\t   PHI arguments in m_final_bb as unique.  */\n+\t\tunsigned i;\n+\t\tfor (i = 0; i < fw_edges.length (); ++i)\n+\t\t  if (phi_alternatives_equal (m_final_bb, fw_edges[i], phi_e))\n+\t\t    break;\n+\t\tif (i == fw_edges.length ())\n+\t\t  {\n+\t\t    /* But limit the above possibly quadratic search.  */\n+\t\t    if (fw_edges.length () < 10)\n+\t\t      fw_edges.quick_push (phi_e);\n+\t\t    m_uniq++;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      m_uniq++;\n+\t    continue;\n+\t  }\n \n \tif (e == e_default && m_contiguous_range)\n \t  {\n@@ -153,6 +180,11 @@ switch_conversion::collect (gswitch *swtch)\n \tbreak;\n       }\n \n+  /* When there's not a single common successor block conservatively\n+     approximate the number of unique non-default targets.  */\n+  if (!m_final_bb)\n+    m_uniq = EDGE_COUNT (gimple_bb (swtch)->succs) - 1;\n+\n   m_range_size\n     = int_const_binop (MINUS_EXPR, m_range_max, m_range_min);\n \n@@ -168,11 +200,6 @@ switch_conversion::collect (gswitch *swtch)\n \t  && ! tree_int_cst_equal (CASE_LOW (elt), CASE_HIGH (elt)))\n \tm_count++;\n     }\n-\n-  /* Get the number of unique non-default targets out of the GIMPLE_SWITCH\n-     block.  Assume a CFG cleanup would have already removed degenerate\n-     switch statements, this allows us to just use EDGE_COUNT.  */\n-  m_uniq = EDGE_COUNT (gimple_bb (swtch)->succs) - 1;\n }\n \n /* Checks whether the range given by individual case statements of the switch"}]}