{"sha": "341e6cd8d603a334fd34657a6b454176be1c6437", "node_id": "C_kwDOANBUbNoAKDM0MWU2Y2Q4ZDYwM2EzMzRmZDM0NjU3YTZiNDU0MTc2YmUxYzY0Mzc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-03T16:37:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-03T16:37:02Z"}, "message": "c++: thinko in extract_local_specs [PR108998]\n\nIn order to fix PR100295, r13-4730-g18499b9f848707 attempted to make\nextract_local_specs walk the given pattern twice, ignoring unevaluated\noperands the first time around so that we prefer to process a local\nspecialization in an evaluated context if it appears in one (we process\neach local specialization once even if it appears multiple times in the\npattern).\n\nBut there's a thinko in the patch, namely that we don't actually walk\nthe pattern twice since we don't clear the visited set for the second\nwalk (to avoid processing a local specialization twice) and so the root\nnode (and any node leading up to an unevaluated operand) is considered\nvisited already.  So the patch effectively made extract_local_specs\nignore unevaluated operands altogether, which this testcase demonstrates\nisn't quite safe (extract_local_specs never sees 'aa' and we don't record\nits local specialization, so later we try to specialize 'aa' on the spot\nwith the args {{int},{17}} which causes us to nonsensically substitute\nits auto with 17.)\n\nThis patch fixes this by refining the second walk to start from the\ntrees we skipped over during the first walk.\n\n\tPR c++/108998\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (el_data::skipped_trees): New data member.\n\t(extract_locals_r): Push to skipped_trees any unevaluated\n\tcontexts that we skipped over.\n\t(extract_local_specs): For the second walk, start from each\n\ttree in skipped_trees.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/lambda-generic11.C: New test.", "tree": {"sha": "660890b062fdd5a3231c2eb283edff991f327765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660890b062fdd5a3231c2eb283edff991f327765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341e6cd8d603a334fd34657a6b454176be1c6437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341e6cd8d603a334fd34657a6b454176be1c6437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341e6cd8d603a334fd34657a6b454176be1c6437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341e6cd8d603a334fd34657a6b454176be1c6437/comments", "author": null, "committer": null, "parents": [{"sha": "9056d0df830c5a295d7594d517d409d10476990d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9056d0df830c5a295d7594d517d409d10476990d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9056d0df830c5a295d7594d517d409d10476990d"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "85136df1730656679b7545018034df1ae662cfba", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e6cd8d603a334fd34657a6b454176be1c6437/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e6cd8d603a334fd34657a6b454176be1c6437/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=341e6cd8d603a334fd34657a6b454176be1c6437", "patch": "@@ -13052,6 +13052,8 @@ class el_data\n   tsubst_flags_t complain;\n   /* True iff we don't want to walk into unevaluated contexts.  */\n   bool skip_unevaluated_operands = false;\n+  /* The unevaluated contexts that we avoided walking.  */\n+  auto_vec<tree> skipped_trees;\n \n   el_data (tsubst_flags_t c)\n     : extra (NULL_TREE), complain (c) {}\n@@ -13066,6 +13068,7 @@ extract_locals_r (tree *tp, int *walk_subtrees, void *data_)\n   if (data.skip_unevaluated_operands\n       && unevaluated_p (TREE_CODE (*tp)))\n     {\n+      data.skipped_trees.safe_push (*tp);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n     }\n@@ -13168,8 +13171,13 @@ extract_local_specs (tree pattern, tsubst_flags_t complain)\n      context).  */\n   data.skip_unevaluated_operands = true;\n   cp_walk_tree (&pattern, extract_locals_r, &data, &data.visited);\n+  /* Now walk the unevaluated contexts we skipped the first time around.  */\n   data.skip_unevaluated_operands = false;\n-  cp_walk_tree (&pattern, extract_locals_r, &data, &data.visited);\n+  for (tree t : data.skipped_trees)\n+    {\n+      data.visited.remove (t);\n+      cp_walk_tree (&t, extract_locals_r, &data, &data.visited);\n+    }\n   return data.extra;\n }\n "}, {"sha": "62affac542e442069873a5a429ea0ba0eca47178", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic11.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e6cd8d603a334fd34657a6b454176be1c6437/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e6cd8d603a334fd34657a6b454176be1c6437/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic11.C?ref=341e6cd8d603a334fd34657a6b454176be1c6437", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/108999\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T>\n+void ice(T a) {\n+  auto aa = a;\n+  auto lambda = []<int I>() {\n+    if constexpr (sizeof(aa) + I != 42) { }\n+  };\n+  lambda.template operator()<17>();\n+}\n+\n+template void ice(int);"}]}