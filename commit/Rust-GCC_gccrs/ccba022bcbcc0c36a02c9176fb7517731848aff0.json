{"sha": "ccba022bcbcc0c36a02c9176fb7517731848aff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiYTAyMmJjYmNjMGMzNmEwMmM5MTc2ZmI3NTE3NzMxODQ4YWZmMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:43:57Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:43:57Z"}, "message": "(gen_highpart): New function.\n\nFrom-SVN: r2084", "tree": {"sha": "364fa1346917c5be27189f2b0c961bdc638b09b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364fa1346917c5be27189f2b0c961bdc638b09b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccba022bcbcc0c36a02c9176fb7517731848aff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccba022bcbcc0c36a02c9176fb7517731848aff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccba022bcbcc0c36a02c9176fb7517731848aff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccba022bcbcc0c36a02c9176fb7517731848aff0/comments", "author": null, "committer": null, "parents": [{"sha": "89b48889f143b299ad4ee218c740594e8f71406e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b48889f143b299ad4ee218c740594e8f71406e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b48889f143b299ad4ee218c740594e8f71406e"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "2f2cdcc3132c15f7b666fe84a4681cbb7051ba0e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccba022bcbcc0c36a02c9176fb7517731848aff0/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccba022bcbcc0c36a02c9176fb7517731848aff0/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ccba022bcbcc0c36a02c9176fb7517731848aff0", "patch": "@@ -692,6 +692,71 @@ gen_lowpart (mode, x)\n     abort ();\n }\n \n+/* Like `gen_lowpart', but refer to the most significant part. \n+   This is used to access the imaginary part of a complex number.  */\n+\n+rtx\n+gen_highpart (mode, x)\n+     enum machine_mode mode;\n+     register rtx x;\n+{\n+  /* This case loses if X is a subreg.  To catch bugs early,\n+     complain if an invalid MODE is used even in other cases.  */\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD\n+      && GET_MODE_SIZE (mode) != GET_MODE_UNIT_SIZE (GET_MODE (x)))\n+    abort ();\n+  if (GET_CODE (x) == CONST_DOUBLE\n+#if !(TARGET_FLOAT_FORMAT != HOST_FLOAT_FORMAT || defined(REAL_IS_NOT_DOUBLE))\n+      && GET_MODE_CLASS (GET_MODE (x)) != MODE_FLOAT\n+#endif\n+      )\n+    return gen_rtx (CONST_INT, VOIDmode,\n+\t\t    CONST_DOUBLE_HIGH (x) & GET_MODE_MASK (mode));\n+  else if (GET_CODE (x) == CONST_INT)\n+    return const0_rtx;\n+  else if (GET_CODE (x) == MEM)\n+    {\n+      register int offset = 0;\n+#if !WORDS_BIG_ENDIAN\n+      offset = (MAX (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD)\n+\t\t- MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD));\n+#endif\n+#if !BYTES_BIG_ENDIAN\n+      if (GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n+\toffset -= (GET_MODE_SIZE (mode)\n+\t\t   - MIN (UNITS_PER_WORD,\n+\t\t\t  GET_MODE_SIZE (GET_MODE (x))));\n+#endif\n+      return change_address (x, mode, plus_constant (XEXP (x, 0), offset));\n+    }\n+  else if (GET_CODE (x) == SUBREG)\n+    {\n+      /* The only time this should occur is when we are looking at a\n+\t multi-word item with a SUBREG whose mode is the same as that of the\n+\t item.  It isn't clear what we would do if it wasn't.  */\n+      if (SUBREG_WORD (x) != 0)\n+\tabort ();\n+      return gen_highpart (mode, SUBREG_REG (x));\n+    }\n+  else if (GET_CODE (x) == REG)\n+    {\n+      int word = 0;\n+\n+#if !WORDS_BIG_ENDIAN\n+      if (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n+\tword = ((GET_MODE_SIZE (GET_MODE (x))\n+\t\t - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD))\n+\t\t/ UNITS_PER_WORD);\n+#endif\n+      if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n+\treturn gen_rtx (REG, mode, REGNO (x) + word);\n+      else\n+\treturn gen_rtx (SUBREG, mode, x, word);\n+    }\n+  else\n+    abort ();\n+}\n+\n /* Return 1 iff X, assumed to be a SUBREG,\n    refers to the least significant part of its containing reg.\n    If X is not a SUBREG, always return 1 (it is its own low part!).  */"}]}