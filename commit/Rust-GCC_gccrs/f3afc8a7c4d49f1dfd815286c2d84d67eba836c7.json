{"sha": "f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhZmM4YTdjNGQ0OWYxZGZkODE1Mjg2YzJkODRkNjdlYmE4MzZjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-03T06:33:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-03T06:33:31Z"}, "message": "driver-i386.c (describe_cache): Optimize concatenation of strings.\n\n\t* config/i386/driver-i386.c (describe_cache): Optimize\n\tconcatenation of strings.  Use snprintf instead of sprintf.\n\t(host_detect_local_cpu): Ditto.  Ignore -march and -mtune for native\n\ttarget when not compiling with GCC.\n\nFrom-SVN: r148115", "tree": {"sha": "c55e9c054e6a865f5290620a00932f06ea1dfc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c55e9c054e6a865f5290620a00932f06ea1dfc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/comments", "author": null, "committer": null, "parents": [{"sha": "394e9195612ec301c18ae54d3d4b7f7a8c8b80f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394e9195612ec301c18ae54d3d4b7f7a8c8b80f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394e9195612ec301c18ae54d3d4b7f7a8c8b80f7"}], "stats": {"total": 201, "additions": 91, "deletions": 110}, "files": [{"sha": "8a1816aa22a3665a1a298dd27c91eef2e3b0d6db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 64, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "patch": "@@ -1,3 +1,10 @@\n+2009-06-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/driver-i386.c (describe_cache): Optimize\n+\tconcatenation of strings.  Use snprintf instead of sprintf.\n+\t(host_detect_local_cpu): Ditto.  Ignore -march and -mtune for native\n+\ttarget when not compiling with GCC.\n+\n 2009-06-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c: Revert last change.\n@@ -210,7 +217,7 @@\n \tand push insns.\n \n 2009-06-01  Olivier Hainque  <hainque@adacore.com>\n-            Eric Botcazou  <botcazou@adacore.com>\n+\t    Eric Botcazou  <botcazou@adacore.com>\n \n \t* tree.h (CONSTRUCTOR_BITFIELD_P): True if NODE, a FIELD_DECL, is\n \tto be processed as a bitfield for constructor output purposes.\n@@ -286,21 +293,18 @@\n \n 2009-05-31  Ian Lance Taylor  <iant@google.com>\n \n-\t* regstat.c (regstat_n_sets_and_refs): Remove duplicate\n-\tdefinition.\n+\t* regstat.c (regstat_n_sets_and_refs): Remove duplicate definition.\n \n 2009-05-31  Ian Lance Taylor  <iant@google.com>\n \n-\t* Makefile.in (except.o): Depend upon gt-except.h, not\n-\tgt-$(EXCEPT_H).\n+\t* Makefile.in (except.o): Depend upon gt-except.h, not gt-$(EXCEPT_H).\n \t(ipa-cp.o): Depend upon $(FIBHEAP_H) and $(PARAMS_H).\n \t(ipa-reference.o): Depend upon gt-ipa-reference.h.\n \n 2009-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* tree-pretty-print.c (print_call_name): Take the callee, not the\n-\tcall itself.  Make non-static.  Use dump_function_name for\n-\tfunctions.\n+\tcall itself.  Make non-static.  Use dump_function_name for functions.\n \t(dump_generic_node): Adjust.\n \t* diagnostic.h: Declare print_call_name.\n \t* gimple-pretty-print.c (dump_gimple_call): Use it.\n@@ -330,8 +334,9 @@\n \t(vectorize_loops): Don't allocate and free vect_memsyms_to_rename.\n \tCall mark_sym_for_renaming.\n \t* tree-vectorizer.h (vect_memsyms_to_rename): Remove.\n-\t* tree-vect-loop.c (vect_transform_loop): Remove vect_memsyms_to_rename\n-\tinitialization and a call to mark_set_for_renaming.\n+\t* tree-vect-loop.c (vect_transform_loop): Remove\n+\tvect_memsyms_to_rename initialization and a call to\n+\tmark_set_for_renaming.\n \n 2009-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -342,10 +347,9 @@\n 2009-05-30  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/mingw-tls.c: New file.\n-\t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Add\n-\tmingw-tls.c file.\n-\t* gthr-win32.h (MINGW32_SUPPORTS_MT_EH): Define\n-\tit for targets defining _WIN32 but not __CYGWIN__.\n+\t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Add mingw-tls.c file.\n+\t* gthr-win32.h (MINGW32_SUPPORTS_MT_EH): Define it for targets\n+\tdefining _WIN32 but not __CYGWIN__.\n \n 2009-05-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -544,8 +548,7 @@\n \tavx_cmps<ssemodesuffixf2c><mode>3, *avx_maskcmp<mode>3,\n \t<sse>_maskcmp<mode>3, <sse>_vmmaskcmp<mode>3,\n \tavx_shufps256_1, *avx_shufps_<mode>, sse_shufps_<mode>,\n-\t*vec_dupv4sf_avx, *vec_dupv4sf): Set\n-\tlength_immediate attribute to 1.\n+\t*vec_dupv4sf_avx, *vec_dupv4sf): Set length_immediate attribute to 1.\n \t(*avx_cvtsi2ssq, *avx_cvtsi2sdq): Set length_vex attribute to 4.\n \t(sse_cvtsi2ssq, sse2_cvtsi2sdq): Set prefix_rex attribute to 1.\n \t(sse2_cvtpi2pd, sse_loadlps, sse2_storelpd): Override\n@@ -564,8 +567,7 @@\n \t(*avx_mulv2siv2di3, *avx_mulv4si3, sse4_2_gtv2di3): Set prefix_extra\n \tto 1.\n \t(*avx_<code><mode>3, *avx_eq<mode>3, *avx_gt<mode>3): Set\n-\tprefix_extra attribute for variants that don't have 0f prefix\n-\talone.\n+\tprefix_extra attribute for variants that don't have 0f prefix alone.\n \t(*avx_pinsr<ssevecsize>): Likewise.  Set length_immediate to 1.\n \t(*sse4_1_pinsrb, *sse2_pinsrw, *sse4_1_pinsrd, *sse4_1_pextrb,\n \t*sse4_1_pextrb_memory, *sse2_pextrw, *sse4_1_pextrw_memory,\n@@ -597,13 +599,11 @@\n \tssse3_phsubwv4hi3, ssse3_phsubdv2si3, ssse3_phsubswv4hi3,\n \tssse3_pmaddubsw, *ssse3_pmulhrswv4hi, ssse3_pshufbv8qi3,\n \tssse3_psign<mode>3): Override prefix_rex attribute.\n-\t(*avx_palignrti): Override prefix_extra and length_immediate\n-\tto 1.\n+\t(*avx_palignrti): Override prefix_extra and length_immediate to 1.\n \t(ssse3_palignrti): Override length_immediate to 1.\n \t(ssse3_palignrdi): Override length_immediate to 1, override\n \tprefix_rex attribute.\n-\t(abs<mode>2): Override prefix_rep to 0, override prefix_rex\n-\tattribute.\n+\t(abs<mode>2): Override prefix_rep to 0, override prefix_rex attribute.\n \t(sse4a_extrqi): Override length_immediate to 2.\n \t(sse4a_insertqi): Likewise.  Override prefix_data16 to 0.\n \t(sse4a_insertq): Override prefix_data16 to 0.\n@@ -674,8 +674,7 @@\n \t(mmx_ashr<mode>3, mmx_lshr<mode>3, mmx_ashl<mode>3): Set\n \tlength_immediate to 1 if operand 2 is const_int_operand.\n \t(*mmx_pinsrw, mmx_pextrw, mmx_pshufw_1, *vec_dupv4hi,\n-\t*vec_extractv2si_1): Set length_immediate\n-\tattribute to 1.\n+\t*vec_extractv2si_1): Set length_immediate attribute to 1.\n \t(*mmx_uavgv8qi3): Override prefix_extra attribute to 1 if\n \tusing old 3DNOW insn rather than SSE/3DNOW_A.\n \t(mmx_emms, mmx_femms): Clear modrm attribute.\n@@ -762,22 +761,21 @@\n \n 2009-05-28  Steve Ellcey  <sje@cup.hp.com>\n \n-\t* doc/invoke.texi (IA-64 Options)\n+\t* doc/invoke.texi (IA-64 Options):\n \tAdd -msdata, -mfused-madd, -mno-inline-float-divide, \n \t-mno-inline-int-divide, -mno-inline-sqrt, -msched-spec-ldc,\n \t-msched-spec-control-ldc, -msched-prefer-non-data-spec-insns,\n \t-msched-prefer-non-control-spec-insns,\n \t-msched-stop-bits-after-every-cycle,\n \t-msched-count-spec-in-critical-path,\n \t-msel-sched-dont-check-control-spec, -msched-fp-mem-deps-zero-cost\n-\t-msched-max-memory-insns-hard-limit, -msched-max-memory-insns\n+\t-msched-max-memory-insns-hard-limit, -msched-max-memory-insns.\n \tRemove -mt, -pthread, -msched-ldc, -mno-sched-control-ldc,\n \tand -msched-spec-verbose.\n \n 2009-05-28  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* config/arm/lib1funcs.asm (__clear_cache): Define if\n-\tL_clear_cache.\n+\t* config/arm/lib1funcs.asm (__clear_cache): Define if L_clear_cache.\n \t* config/arm/linux-eabi.h (CLEAR_INSN_CACHE): Define to give an\n \terror if used.\n \t* config/arm/t-linux-eabi (LIB1ASMFUNCS): Add _clear_cache.\n@@ -809,8 +807,7 @@\n \t(get_ref_from_reference_ops): remove.\n \t(vn_reference_lookup_2): Adjust signature.\n \t(vn_reference_lookup_3): Do not re-build trees.  Handle unions.\n-\t(vn_reference_lookup_pieces): Adjust signature, do not re-build\n-\ttrees.\n+\t(vn_reference_lookup_pieces): Adjust signature, do not re-build trees.\n \t(vn_reference_lookup): Adjust.\n \t(vn_reference_insert): Likewise.\n \t(vn_reference_insert_pieces): Adjust signature.\n@@ -856,8 +853,7 @@\n 2009-05-28  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR middle-end/33699\n-\t* target.h (struct gcc_target): Fix indentation.  Add\n-\tconst_anchor.\n+\t* target.h (struct gcc_target): Fix indentation.  Add const_anchor.\n \t* target-def.h (TARGET_CONST_ANCHOR): New macro.\n \t(TARGET_INITIALIZER): Use it.\n \t* cse.c (CHEAPER): Move it up to the other macros.\n@@ -869,8 +865,7 @@\n \tfind_reg_offset_for_const, try_const_anchors): New functions.\n \t(cse_insn): Call try_const_anchors.  Adjust cost of src_related\n \twhen using a const-anchor.  Call insert_const_anchors.\n-\t* config/mips/mips.c (mips_set_mips16_mode): Set\n-\ttargetm.const_anchor.\n+\t* config/mips/mips.c (mips_set_mips16_mode): Set targetm.const_anchor.\n \t* doc/tm.texi (Misc): Document TARGET_CONST_ANCHOR.\n \n 2009-05-28  Alexandre Oliva  <aoliva@redhat.com>\n@@ -920,7 +915,7 @@\n \n 2009-05-21  Denis Chertykov  <denisc@overta.ru>\n \n-\t* doc/contrib.texi (Contributors): add myself to the list.\n+\t* doc/contrib.texi (Contributors): Add myself to the list.\n \n 2009-05-27  Olivier Hainque  <hainque@adacore.com>\n \n@@ -945,8 +940,8 @@\n \n 2009-05-27  Rafael Avila de Espindola  <espindola@google.com>\n \n-\t* Makefile.in (GCC_PLUGIN_H): New. Replace all uses of gcc-plugin.h with\n-\tit.\n+\t* Makefile.in (GCC_PLUGIN_H): New. Replace all uses of gcc-plugin.h\n+\twith it.\n \t* doc/plugins.texi: Document that gcc-plugin.h must be the first to be\n \tincluded.\n \t* gcc-plugin.h: Include config.h and system.h.\n@@ -983,10 +978,8 @@\n \t* gcc-plugin.h (PLUGIN_GGC_START, PLUGIN_GGC_MARKING)\n \t(PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS): Added new events.\n \t(register_callback): Improved comment in declaration.\n-\t* ggc-common.c (const_ggc_root_tab_t) Added new typedef for\n-\tvectors.\n-\t(extra_root_vec) Added static variable for dynamic roots\n-\tregistration.\n+\t* ggc-common.c (const_ggc_root_tab_t) Added new typedef for vectors.\n+\t(extra_root_vec) Added static variable for dynamic roots registration.\n \t(ggc_register_root_tab) Added new routine.\n \t(ggc_mark_roots) Added iteration inside extra_root_vec, and invoke\n \tPLUGIN_GGC_MARKING event.\n@@ -1123,8 +1116,8 @@\n \t(cgraph_default_inline_p): Likewise.\n \t(cgraph_edge_badness): Compute badness based on benefit and size cost.\n \t(cgraph_decide_recursive_inlining): Check size.\n-\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes and\n-\ttimes.\n+\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes\n+\tand times.\n \t(cgraph_decide_inlining): Likewise.\n \t(cgraph_decide_inlining_incrementally): Likewise; honor\n \tPARAM_EARLY_INLINING_INSNS.\n@@ -1144,8 +1137,7 @@\n \n \tPR tree-optimization/36327\n \t* tree-ssa-alias.c (walk_non_aliased_vuses): Add second walker\n-\tcallback for reference translation or lookup at the point\n-\tof may-defs.\n+\tcallback for reference translation or lookup at the point of may-defs.\n \t* tree-ssa-alias.h (walk_non_aliased_vuses): Adjust prototype.\n \t* tree-ssa-sccvn.c (get_ref_from_reference_ops): Bail out\n \tfor union COMPONENT_REFs.\n@@ -1222,7 +1214,8 @@\n \tLikewise.\n \t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n \t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n-\t(dom_opt_finalize_block): Likewise, adjusting access to stmts_to_rescan.\n+\t(dom_opt_finalize_block): Likewise, adjusting access to\n+\tstmts_to_rescan.\n \t(optimize_stmt): Likewise, adjusting access to stmts_to_rescan.\n \t(stmts_to_rescan): Change item type to gimple.\n \t(tree_ssa_dominator_optimize): Change type of stmts_to_rescan.\n@@ -1776,8 +1769,7 @@\n 2009-05-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Check\n-\textended family and model for Intel processors.  Support Intel\n-\tAtom.\n+\textended family and model for Intel processors.  Support Intel Atom.\n \n 2009-05-20  Olivier Hainque  <hainque@adacore.com>\n \n@@ -1908,8 +1900,7 @@\n \n 2009-05-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n-\t* c-common.c (warn_logical_operator): Remove unnecessary\n-\tconditionals.\n+\t* c-common.c (warn_logical_operator): Remove unnecessary conditionals.\n \n 2009-05-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -2289,8 +2280,8 @@\n \t(cgraph_default_inline_p): Likewise.\n \t(cgraph_edge_badness): Compute badness based on benefit and size cost.\n \t(cgraph_decide_recursive_inlining): Check size.\n-\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes and\n-\ttimes.\n+\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes\n+\tand times.\n \t(cgraph_decide_inlining): Likewise.\n \t(cgraph_decide_inlining_incrementally): Likewise; honor\n \tPARAM_EARLY_INLINING_INSNS.\n@@ -2359,8 +2350,8 @@\n \t(cgraph_default_inline_p): Likewise.\n \t(cgraph_edge_badness): Compute badness based on benefit and size cost.\n \t(cgraph_decide_recursive_inlining): Check size.\n-\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes and\n-\ttimes.\n+\t(cgraph_decide_inlining_of_small_function): Update size; dump sizes\n+\tand times.\n \t(cgraph_decide_inlining): Likewise.\n \t(cgraph_decide_inlining_incrementally): Likewise; honor\n \tPARAM_EARLY_INLINING_INSNS.\n@@ -2390,16 +2381,16 @@\n \t(is_subrange_type): Delete.\n \t(subrange_type_die): Add LOW and HIGH parameters.  Use them for bounds.\n \t(modified_type_die): Call subrange_type_for_debug_p on subtypes.\n-\t* fold-const.c (fold_truth_not_expr) <CONVERT_EXPR>: Do not strip it if\n-\tthe destination type is boolean.\n+\t* fold-const.c (fold_truth_not_expr) <CONVERT_EXPR>: Do not strip it\n+\tif the destination type is boolean.\n \t(build_range_check): Do not special-case subtypes.\n \t(fold_sign_changed_comparison): Likewise.\n \t(fold_unary): Likewise.\n \t* langhooks-def.h (LANG_HOOKS_GET_SUBRANGE_BOUNDS): Define.\n \t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add LANG_HOOKS_GET_SUBRANGE_BOUNDS.\n \t* langhooks.h (lang_hooks_for_types): Add get_subrange_bounds.\n-\t* tree.c (subrange_type_for_debug_p): New predicate based on the former\n-\tis_subrange_type.\n+\t* tree.c (subrange_type_for_debug_p): New predicate based on the\n+\tformer is_subrange_type.\n \t* tree.h (subrange_type_for_debug_p): Declare.\n \t* tree-chrec.c (avoid_arithmetics_in_type_p): Delete.\n \t(convert_affine_scev): Remove call to above function.\n@@ -2630,9 +2621,11 @@\n \t(arm_legitimate_address_outer_p): ... this.\n \t* config/arm/constraints.md (\"Uq\"): Adjust call.\n \t* config/arm/predicates.md (arm_extendqisi_mem_op): Likewise.\n-\t* config/arm/arm.c (arm_legitimate_address_p): New, rename old one to...\n+\t* config/arm/arm.c (arm_legitimate_address_p): New, rename old one\n+\tto...\n \t(arm_legitimate_address_outer_p): ... this.\n-\t(thumb1_legitimate_address_p, thumb2_legitimate_address_p): Make static.\n+\t(thumb1_legitimate_address_p, thumb2_legitimate_address_p): Make\n+\tstatic.\n \t(TARGET_LEGITIMATE_ADDRESS_P): New.\n \n \t* config/mips/mips.h (GO_IF_LEGITIMATE_ADDRESS): Delete.\n@@ -2683,9 +2676,10 @@\n \n 2009-05-13  Taras Glek  <tglek@mozilla.com>\n \n-\t* attribs.c (register_attribute): moved out attribute registration into\n-\tregister_attribute.\n-\t* doc/plugins.texi: Documented register_attribute and PLUGIN_ATTRIBUTES.\n+\t* attribs.c (register_attribute): moved out attribute registration\n+\tinto register_attribute.\n+\t* doc/plugins.texi: Documented register_attribute and\n+\tPLUGIN_ATTRIBUTES.\n \t* gcc-plugin.h: Added forward decl for register_attribute.\n \t* gcc-plugin.h (plugins_event): Added PLUGIN_ATTRIBUTES.\n \t* plugin.c (register_callback, invoke_plugin_callbacks): Added\n@@ -2860,8 +2854,8 @@\n \t(bcc_gen_fctn, setcc_gen_code, emit_cmp_insn): Delete.\n \t* ifcvt.c (find_if_header): Replace HAVE_conditional_trap\n \twith lookup of ctrap_optab.\n-\t* genopinit.c (cmp_optab, tst_optab, bcc_gen_fctn,\n-\tsetcc_gen_code): Delete.\n+\t* genopinit.c (cmp_optab, tst_optab, bcc_gen_fctn, setcc_gen_code):\n+\tDelete.\n \t(ctrap_optab): New.\n \n \t* combine.c (combine_simplify_rtx, simplify_set): Do not"}, {"sha": "df0689db1493a817998a6eb4e39a102aca09cb2b", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "patch": "@@ -46,12 +46,15 @@ describe_cache (struct cache_desc level1, struct cache_desc level2)\n   /* At the moment, gcc does not use the information\n      about the associativity of the cache.  */\n \n-  sprintf (size, \"--param l1-cache-size=%u\", level1.sizekb);\n-  sprintf (line, \"--param l1-cache-line-size=%u\", level1.line);\n+  snprintf (size, sizeof (size),\n+\t    \"--param l1-cache-size=%u \", level1.sizekb);\n+  snprintf (line, sizeof (line),\n+\t    \"--param l1-cache-line-size=%u \", level1.line);\n \n-  sprintf (size2, \"--param l2-cache-size=%u\", level2.sizekb);\n+  snprintf (size2, sizeof (size2),\n+\t    \"--param l2-cache-size=%u \", level2.sizekb);\n \n-  return concat (size, \" \", line, \" \", size2, \" \", NULL);\n+  return concat (size, line, size2, NULL);\n }\n \n /* Detect L2 cache parameters using CPUID extended function 0x80000006.  */\n@@ -608,55 +611,38 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   if (arch)\n     {\n       if (has_cmpxchg16b)\n-\toptions = concat (options, \"-mcx16 \", NULL);\n+\toptions = concat (options, \" -mcx16\", NULL);\n       if (has_lahf_lm)\n-\toptions = concat (options, \"-msahf \", NULL);\n+\toptions = concat (options, \" -msahf\", NULL);\n       if (has_movbe)\n-\toptions = concat (options, \"-mmovbe \", NULL);\n+\toptions = concat (options, \" -mmovbe\", NULL);\n       if (has_aes)\n-\toptions = concat (options, \"-maes \", NULL);\n+\toptions = concat (options, \" -maes\", NULL);\n       if (has_pclmul)\n-\toptions = concat (options, \"-mpclmul \", NULL);\n+\toptions = concat (options, \" -mpclmul\", NULL);\n       if (has_popcnt)\n-\toptions = concat (options, \"-mpopcnt \", NULL);\n+\toptions = concat (options, \" -mpopcnt\", NULL);\n+\n       if (has_avx)\n-\toptions = concat (options, \"-mavx \", NULL);\n+\toptions = concat (options, \" -mavx\", NULL);\n       else if (has_sse4_2)\n-\toptions = concat (options, \"-msse4.2 \", NULL);\n+\toptions = concat (options, \" -msse4.2\", NULL);\n       else if (has_sse4_1)\n-\toptions = concat (options, \"-msse4.1 \", NULL);\n+\toptions = concat (options, \" -msse4.1\", NULL);\n     }\n \n done:\n-  return concat (cache, \"-m\", argv[0], \"=\", cpu, \" \", options, NULL);\n+  return concat (cache, \"-m\", argv[0], \"=\", cpu, options, NULL);\n }\n #else\n \n-/* If we aren't compiling with GCC we just provide a minimal\n-   default value.  */\n+/* If we aren't compiling with GCC then the driver will just ignore\n+   -march and -mtune \"native\" target and will leave to the newly\n+   built compiler to generate code for its default target.  */\n \n-const char *host_detect_local_cpu (int argc, const char **argv)\n+const char *host_detect_local_cpu (int argc ATTRIBUTE_UNUSED,\n+\t\t\t\t   const char **argv ATTRIBUTE_UNUSED)\n {\n-  const char *cpu;\n-  bool arch;\n-\n-  if (argc < 1)\n-    return NULL;\n-\n-  arch = !strcmp (argv[0], \"arch\");\n-\n-  if (!arch && strcmp (argv[0], \"tune\"))\n-    return NULL;\n-  \n-  if (arch)\n-    {\n-      /* FIXME: i386 is wrong for 64bit compiler.  How can we tell if\n-\t we are generating 64bit or 32bit code?  */\n-      cpu = \"i386\";\n-    }\n-  else\n-    cpu = \"generic\";\n-\n-  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n+  return NULL;\n }\n #endif /* __GNUC__ */"}, {"sha": "dcab4676daedb26e3dd3d6825e71ecbfd376c7f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3afc8a7c4d49f1dfd815286c2d84d67eba836c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3afc8a7c4d49f1dfd815286c2d84d67eba836c7", "patch": "@@ -72,7 +72,7 @@\n \t* gnat.dg/nested_float_packed.ads: New test.\n \n 2009-06-01  Olivier Hainque  <hainque@adacore.com>\n-            Eric Botcazou  <botcazou@adacore.com>\n+\t    Eric Botcazou  <botcazou@adacore.com>\n \n \t* gnat.dg/oconst[1-6].ad[bs]: New tests. Also support for ...\n \t* gnat.dg/test_oconst.adb: New test.\n@@ -154,8 +154,7 @@\n \n 2009-05-28  Kai Tietz  <kai.tietz@onevision.com>\n \n-\t*  g++.dg/ext/packed6.C (size_t): Use __extension__ and\n-\t__SIZE_TYPE__.\n+\t*  g++.dg/ext/packed6.C (size_t): Use __extension__ and __SIZE_TYPE__.\n \t* g++.dg/opt/memcpy1.C (size_t): Likewise.\n \t* g++.dg/pr37742.C (size_t): Likewise.\n \t* g++.dg/torture/pr34850.C (size_t): Likewise.\n@@ -314,7 +313,7 @@\n \t* gcc.dg/vect/pr40238.c: New test.\n \n 2009-05-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\t    Dominique Dhumieres\n+\t    Dominique Dhumieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/35732\n \tPR fortran/39872\n@@ -580,8 +579,10 @@\n \t* gcc.target/i386/align-main-2.c (check): Mark noinline.\n \t* gcc.dg/ipa/ipa-4.c: Disable early inlining.\n \t* gcc.dg/vect/vect-iv-10.c (main1): Mark noinline.\n-\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c (main1): Mark noinline.\n-\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c (main1): Mark noinline.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c (main1):\n+\tMark noinline.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c (main1):\n+\tMark noinline.\n \t* gcc.dg/vect/pr31699.c (foo): Mark noinline.\n \t* gcc.dg/vect/pr18400.c (main1): Mark noinline.\n \n@@ -669,8 +670,8 @@\n \n 2009-05-12  Jan Hubicka  <jh@suse.cz>\n \n-\t* gcc.dg/tree-ssa/loop-36.c: Reduce amount of iterations to 2 so unrolling\n-\tstill happens.\n+\t* gcc.dg/tree-ssa/loop-36.c: Reduce amount of iterations to 2\n+\tso unrolling still happens.\n \t* gcc.dg/ipa/ipacost-1.c: Prevent inlining\n \t* gcc.dg/ipa/ipacost-2.c: Likewise.\n \t* gcc.dg/vect/slp-3.c: Loop is no longer unrolled."}]}