{"sha": "854b5fd7b52ae803fd48eb942095a75fa6f910a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0YjVmZDdiNTJhZTgwM2ZkNDhlYjk0MjA5NWE3NWZhNmY5MTBhOA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-10-19T12:46:44Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-10-19T12:46:44Z"}, "message": "re PR rtl-optimization/50340 (Fails to build SPEC 2000 176.gcc)\n\n2011-10-19  Andrey Belevantsev  <abel@ispras.ru>\n\n\tPR rtl-optimization/50340\n\t* sel-sched-ir.c (update_target_availability): LHS register\n\tavailability is not known if the unavailable LHS of the other\n\texpression is a different register.\n\n\t* gcc.dg/pr50340.c: New.\n\nFrom-SVN: r180186", "tree": {"sha": "431a3f95c56d18fcbb0c246f32e76182005871da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431a3f95c56d18fcbb0c246f32e76182005871da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854b5fd7b52ae803fd48eb942095a75fa6f910a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b5fd7b52ae803fd48eb942095a75fa6f910a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854b5fd7b52ae803fd48eb942095a75fa6f910a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b5fd7b52ae803fd48eb942095a75fa6f910a8/comments", "author": null, "committer": null, "parents": [{"sha": "9b6ab3c0591fd583915861cfd1d27183873221e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6ab3c0591fd583915861cfd1d27183873221e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6ab3c0591fd583915861cfd1d27183873221e8"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "4a3bc7502748d797cd4b90cfcb507b84a1f48006", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=854b5fd7b52ae803fd48eb942095a75fa6f910a8", "patch": "@@ -1,3 +1,10 @@\n+2011-10-19  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/50340\n+\t* sel-sched-ir.c (update_target_availability): LHS register\n+\tavailability is not known if the unavailable LHS of the other\n+\texpression is a different register.\n+\n 2011-10-19  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR target/50310"}, {"sha": "dacee0b9e9bd5ccf98f671e8f911a6ed52c386c0", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=854b5fd7b52ae803fd48eb942095a75fa6f910a8", "patch": "@@ -1745,6 +1745,11 @@ update_target_availability (expr_t to, expr_t from, insn_t split_point)\n           else\n             EXPR_TARGET_AVAILABLE (to) = -1;\n         }\n+      else if (EXPR_TARGET_AVAILABLE (from) == 0\n+\t       && EXPR_LHS (from)\n+\t       && REG_P (EXPR_LHS (from))\n+\t       && REGNO (EXPR_LHS (to)) != REGNO (EXPR_LHS (from)))\n+\tEXPR_TARGET_AVAILABLE (to) = -1;\n       else\n         EXPR_TARGET_AVAILABLE (to) &= EXPR_TARGET_AVAILABLE (from);\n     }"}, {"sha": "72c85cdebaedfd84cc8660a8d03ee3c85fc4244a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=854b5fd7b52ae803fd48eb942095a75fa6f910a8", "patch": "@@ -1,3 +1,8 @@\n+2011-10-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/50340\n+\t* gcc.dg/pr50340.c: New.\n+\n 2011-10-18  Andrew Stubbs  <ams@codesourcery.com>\n \n \tPR tree-optimization/50717"}, {"sha": "18430366fe13d6d19fe546b01c1f125fd01d3564", "filename": "gcc/testsuite/gcc.dg/pr50340.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50340.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b5fd7b52ae803fd48eb942095a75fa6f910a8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50340.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50340.c?ref=854b5fd7b52ae803fd48eb942095a75fa6f910a8", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O3 -fselective-scheduling2 -funroll-loops\" } */\n+extern int mode_size[];\n+typedef unsigned HARD_REG_SET[ ((64 + 32 - 1) / 32) ];\n+enum reload_type {\n+  RELOAD_FOR_INPUT,\n+  RELOAD_FOR_OUTPUT,\n+  RELOAD_FOR_INSN,\n+  RELOAD_FOR_INPUT_ADDRESS,\n+  RELOAD_FOR_OUTPUT_ADDRESS,\n+  RELOAD_FOR_OPERAND_ADDRESS,\n+  RELOAD_FOR_OPADDR_ADDR,\n+  RELOAD_OTHER,\n+  RELOAD_FOR_OTHER_ADDRESS\n+};\n+static HARD_REG_SET reload_reg_used;\n+static HARD_REG_SET reload_reg_used_in_input_addr[10];\n+static HARD_REG_SET reload_reg_used_in_output_addr[10];\n+static HARD_REG_SET reload_reg_used_in_input[10];\n+static HARD_REG_SET reload_reg_used_in_output[10];\n+static HARD_REG_SET reload_reg_used_in_op_addr;\n+static HARD_REG_SET reload_reg_used_in_op_addr_reload;\n+static HARD_REG_SET reload_reg_used_in_insn;\n+static HARD_REG_SET reload_reg_used_in_other_addr;\n+static HARD_REG_SET reload_reg_used_at_all;\n+void __attribute__((cold)) mark_reload_reg_in_use (regno, opnum, type, mode)\n+{\n+  int nregs = regno ? 1 : mode_size[mode];\n+  int i;\n+  for (i = regno; i < nregs + regno; i++)\n+  {\n+    switch (type)\n+    {\n+      case RELOAD_OTHER: reload_reg_used[i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_INPUT_ADDRESS: reload_reg_used_in_input_addr[opnum][i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_OUTPUT_ADDRESS: reload_reg_used_in_output_addr[opnum][i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_OPERAND_ADDRESS: reload_reg_used_in_op_addr[i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_OPADDR_ADDR: reload_reg_used_in_op_addr_reload[i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_OTHER_ADDRESS: reload_reg_used_in_other_addr[i / 32u] |= 1; break;\n+      case RELOAD_FOR_INPUT: reload_reg_used_in_input[opnum][i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_OUTPUT: reload_reg_used_in_output[opnum][i / 32u] |= 1 << i % 32u; break;\n+      case RELOAD_FOR_INSN: reload_reg_used_in_insn[i / 32u] |= 1 << i % 32u;\n+    }\n+    reload_reg_used_at_all[i / 32u] |= 1 << i;\n+  }\n+}"}]}