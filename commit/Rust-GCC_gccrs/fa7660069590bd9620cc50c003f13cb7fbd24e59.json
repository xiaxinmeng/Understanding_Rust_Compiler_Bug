{"sha": "fa7660069590bd9620cc50c003f13cb7fbd24e59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3NjYwMDY5NTkwYmQ5NjIwY2M1MGMwMDNmMTNjYjdmYmQyNGU1OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-29T11:40:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-29T11:40:25Z"}, "message": "lto-streamer-out.c (pack_ts_fixed_cst_value_fields, [...]): Use enum and variable length i/o.\n\n\n\t* lto-streamer-out.c (pack_ts_fixed_cst_value_fields,\n\tpack_ts_decl_common_value_fields, pack_ts_decl_with_vis_value_fields,\n\tpack_ts_function_decl_value_fields, lto_output_builtin_tree,\n\toutput_cfg, output_gimple_stmt): Use enum and variable length i/o.\n\t* lto-streamer-in.c (input_cfg, input_gimple_stmt,\n\tunpack_ts_fixed_cst_value_fields, unpack_ts_decl_common_value_fields,\n\tunpack_ts_decl_with_vis_value_fields,\n\tunpack_ts_type_common_value_fields, unpack_ts_block_value_fields,\n\tlto_get_builtin_tree): Use enum and variable length i/o.\n\t* basic-block.h (profile_status_d): Add PROFILE_LAST.\n\t* lto-streamer.h (bp_pack_int_in_range, bp_unpack_int_in_range):\n\tNew functions.\n\t(bp_pack_enum, bp_unpack_enum): New macros.\n\nFrom-SVN: r174394", "tree": {"sha": "eed156dd5808f73e4b6f5b4bfe6c145931ecbe0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eed156dd5808f73e4b6f5b4bfe6c145931ecbe0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa7660069590bd9620cc50c003f13cb7fbd24e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7660069590bd9620cc50c003f13cb7fbd24e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7660069590bd9620cc50c003f13cb7fbd24e59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7660069590bd9620cc50c003f13cb7fbd24e59/comments", "author": null, "committer": null, "parents": [{"sha": "04a4a57b1b71244dd9504ae96476d1e8428cc2a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a4a57b1b71244dd9504ae96476d1e8428cc2a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a4a57b1b71244dd9504ae96476d1e8428cc2a4"}], "stats": {"total": 172, "additions": 132, "deletions": 40}, "files": [{"sha": "7d149a39987b1f6c40f8e73e315139fb9b3427a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -1,3 +1,19 @@\n+2011-05-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-out.c (pack_ts_fixed_cst_value_fields,\n+\tpack_ts_decl_common_value_fields, pack_ts_decl_with_vis_value_fields,\n+\tpack_ts_function_decl_value_fields, lto_output_builtin_tree,\n+\toutput_cfg, output_gimple_stmt): Use enum and variable length i/o.\n+\t* lto-streamer-in.c (input_cfg, input_gimple_stmt,\n+\tunpack_ts_fixed_cst_value_fields, unpack_ts_decl_common_value_fields,\n+\tunpack_ts_decl_with_vis_value_fields,\n+\tunpack_ts_type_common_value_fields, unpack_ts_block_value_fields,\n+\tlto_get_builtin_tree): Use enum and variable length i/o.\n+\t* basic-block.h (profile_status_d): Add PROFILE_LAST.\n+\t* lto-streamer.h (bp_pack_int_in_range, bp_unpack_int_in_range):\n+\tNew functions.\n+\t(bp_pack_enum, bp_unpack_enum): New macros.\n+\n 2011-05-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* genrecog.c: Remove redundant forward declarations."}, {"sha": "29c1167cfe77fa12039d665baf68bc096fbbd3ee", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -283,7 +283,8 @@ enum profile_status_d\n {\n   PROFILE_ABSENT,\n   PROFILE_GUESSED,\n-  PROFILE_READ\n+  PROFILE_READ,\n+  PROFILE_LAST\t/* Last value, used by profile streaming.  */\n };\n \n /* A structure to group all the per-function control flow graph data."}, {"sha": "88966f2d03dc56872975ba993fef7f1d117fe9b0", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -798,8 +798,7 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n   init_empty_tree_cfg_for_function (fn);\n   init_ssa_operands ();\n \n-  profile_status_for_function (fn) =\n-    (enum profile_status_d) lto_input_uleb128 (ib);\n+  profile_status_for_function (fn) = lto_input_enum (ib, profile_status_d, PROFILE_LAST);\n \n   bb_count = lto_input_uleb128 (ib);\n \n@@ -960,13 +959,13 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \n   /* Read the tuple header.  */\n   bp = lto_input_bitpack (ib);\n-  num_ops = bp_unpack_value (&bp, sizeof (unsigned) * 8);\n+  num_ops = bp_unpack_var_len_unsigned (&bp);\n   stmt = gimple_alloc (code, num_ops);\n   stmt->gsbase.no_warning = bp_unpack_value (&bp, 1);\n   if (is_gimple_assign (stmt))\n     stmt->gsbase.nontemporal_move = bp_unpack_value (&bp, 1);\n   stmt->gsbase.has_volatile_ops = bp_unpack_value (&bp, 1);\n-  stmt->gsbase.subcode = bp_unpack_value (&bp, 16);\n+  stmt->gsbase.subcode = bp_unpack_var_len_unsigned (&bp);\n \n   /* Read location information.  */\n   gimple_set_location (stmt, lto_input_location (ib, data_in));\n@@ -1090,7 +1089,7 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t{\n \t  if (gimple_call_internal_p (stmt))\n \t    gimple_call_set_internal_fn\n-\t      (stmt, (enum internal_fn) lto_input_sleb128 (ib));\n+\t      (stmt, lto_input_enum (ib, internal_fn, IFN_LAST));\n \t  else\n \t    gimple_call_set_fntype (stmt, lto_input_tree (ib, data_in));\n \t}\n@@ -1638,9 +1637,9 @@ unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n   struct fixed_value fv;\n \n-  fv.data.low = (HOST_WIDE_INT) bp_unpack_value (bp, HOST_BITS_PER_WIDE_INT);\n-  fv.data.high = (HOST_WIDE_INT) bp_unpack_value (bp, HOST_BITS_PER_WIDE_INT);\n-  fv.mode = (enum machine_mode) bp_unpack_value (bp, HOST_BITS_PER_INT);\n+  fv.mode = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n+  fv.data.low = bp_unpack_var_len_int (bp);\n+  fv.data.high = bp_unpack_var_len_int (bp);\n   TREE_FIXED_CST (expr) = fv;\n }\n \n@@ -1651,7 +1650,7 @@ unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n static void\n unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  DECL_MODE (expr) = (enum machine_mode) bp_unpack_value (bp, 8);\n+  DECL_MODE (expr) = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n   DECL_NONLOCAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_VIRTUAL_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IGNORED_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -1662,12 +1661,12 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_DEBUG_EXPR_IS_FROM (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_EXTERNAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_ALIGN (expr) = (unsigned) bp_unpack_value (bp, HOST_BITS_PER_INT);\n+  DECL_ALIGN (expr) = (unsigned) bp_unpack_var_len_unsigned (bp);\n \n   if (TREE_CODE (expr) == LABEL_DECL)\n     {\n       DECL_ERROR_ISSUED (expr) = (unsigned) bp_unpack_value (bp, 1);\n-      EH_LANDING_PAD_NR (expr) = (int) bp_unpack_value (bp, HOST_BITS_PER_INT);\n+      EH_LANDING_PAD_NR (expr) = (int) bp_unpack_var_len_unsigned (bp);\n \n       /* Always assume an initial value of -1 for LABEL_DECL_UID to\n \t force gimple_set_bb to recreate label_to_block_map.  */\n@@ -1730,7 +1729,7 @@ unpack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n   if (VAR_OR_FUNCTION_DECL_P (expr))\n     {\n       priority_type p;\n-      p = (priority_type) bp_unpack_value (bp, HOST_BITS_PER_SHORT);\n+      p = (priority_type) bp_unpack_var_len_unsigned (bp);\n       SET_DECL_INIT_PRIORITY (expr, p);\n     }\n }\n@@ -1742,8 +1741,8 @@ unpack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n static void\n unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  DECL_FUNCTION_CODE (expr) = (enum built_in_function) bp_unpack_value (bp, 11);\n-  DECL_BUILT_IN_CLASS (expr) = (enum built_in_class) bp_unpack_value (bp, 2);\n+  DECL_BUILT_IN_CLASS (expr) = bp_unpack_enum (bp, built_in_class,\n+\t\t\t\t\t       BUILT_IN_LAST);\n   DECL_STATIC_CONSTRUCTOR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_STATIC_DESTRUCTOR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_UNINLINABLE (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -1761,10 +1760,24 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_DISREGARD_INLINE_LIMITS (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_LOOPING_CONST_OR_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n+    {\n+      DECL_FUNCTION_CODE (expr) = (enum built_in_function) bp_unpack_value (bp, 11);\n+      if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_NORMAL\n+\t  && DECL_FUNCTION_CODE (expr) >= END_BUILTINS)\n+\tfatal_error (\"machine independent builtin code out of range\");\n+      else if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_MD)\n+\t{\n+          tree result = targetm.builtin_decl (DECL_FUNCTION_CODE (expr), true);\n+\t  if (!result || result == error_mark_node)\n+\t    fatal_error (\"target specific builtin not available\");\n+\t}\n+    }\n   if (DECL_STATIC_DESTRUCTOR (expr))\n     {\n-       priority_type p = (priority_type) bp_unpack_value (bp, HOST_BITS_PER_SHORT);\n-       SET_DECL_FINI_PRIORITY (expr, p);\n+      priority_type p;\n+      p = (priority_type) bp_unpack_var_len_unsigned (bp);\n+      SET_DECL_FINI_PRIORITY (expr, p);\n     }\n }\n \n@@ -1777,8 +1790,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n   enum machine_mode mode;\n \n-  TYPE_PRECISION (expr) = (unsigned) bp_unpack_value (bp, 10);\n-  mode = (enum machine_mode) bp_unpack_value (bp, 8);\n+  mode = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n   SET_TYPE_MODE (expr, mode);\n   TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_NO_FORCE_BLK (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -1791,6 +1803,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     \t= (unsigned) bp_unpack_value (bp, 2);\n   TYPE_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_READONLY (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   TYPE_ALIGN (expr) = bp_unpack_var_len_unsigned (bp);\n   TYPE_ALIAS_SET (expr) = bp_unpack_var_len_int (bp);\n }\n@@ -1803,7 +1816,7 @@ static void\n unpack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n {\n   BLOCK_ABSTRACT (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  BLOCK_NUMBER (expr) = (unsigned) bp_unpack_value (bp, 31);\n+  /* BLOCK_NUMBER is recomputed.  */\n }\n \n /* Unpack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL\n@@ -2603,14 +2616,15 @@ lto_get_builtin_tree (struct lto_input_block *ib, struct data_in *data_in)\n   const char *asmname;\n   tree result;\n \n-  fclass = (enum built_in_class) lto_input_uleb128 (ib);\n+  fclass = lto_input_enum (ib, built_in_class, BUILT_IN_LAST);\n   gcc_assert (fclass == BUILT_IN_NORMAL || fclass == BUILT_IN_MD);\n \n   fcode = (enum built_in_function) lto_input_uleb128 (ib);\n \n   if (fclass == BUILT_IN_NORMAL)\n     {\n-      gcc_assert (fcode < END_BUILTINS);\n+      if (fcode >= END_BUILTINS)\n+\tfatal_error (\"machine independent builtin code out of range\");\n       result = built_in_decls[fcode];\n       gcc_assert (result);\n     }"}, {"sha": "2b80640d70e52450201b7475bd55a0fa4e1db497", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -372,9 +372,9 @@ static void\n pack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n   struct fixed_value fv = TREE_FIXED_CST (expr);\n-  bp_pack_value (bp, fv.data.low, HOST_BITS_PER_WIDE_INT);\n-  bp_pack_value (bp, fv.data.high, HOST_BITS_PER_WIDE_INT);\n-  bp_pack_value (bp, fv.mode, HOST_BITS_PER_INT);\n+  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, fv.mode);\n+  bp_pack_var_len_int (bp, fv.data.low);\n+  bp_pack_var_len_int (bp, fv.data.high);\n }\n \n \n@@ -384,7 +384,7 @@ pack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  bp_pack_value (bp, DECL_MODE (expr), 8);\n+  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, DECL_MODE (expr));\n   bp_pack_value (bp, DECL_NONLOCAL (expr), 1);\n   bp_pack_value (bp, DECL_VIRTUAL_P (expr), 1);\n   bp_pack_value (bp, DECL_IGNORED_P (expr), 1);\n@@ -395,15 +395,15 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_DEBUG_EXPR_IS_FROM (expr), 1);\n   bp_pack_value (bp, DECL_EXTERNAL (expr), 1);\n   bp_pack_value (bp, DECL_GIMPLE_REG_P (expr), 1);\n-  bp_pack_value (bp, DECL_ALIGN (expr), HOST_BITS_PER_INT);\n+  bp_pack_var_len_unsigned (bp, DECL_ALIGN (expr));\n \n   if (TREE_CODE (expr) == LABEL_DECL)\n     {\n       /* Note that we do not write LABEL_DECL_UID.  The reader will\n \t always assume an initial value of -1 so that the\n \t label_to_block_map is recreated by gimple_set_bb.  */\n       bp_pack_value (bp, DECL_ERROR_ISSUED (expr), 1);\n-      bp_pack_value (bp, EH_LANDING_PAD_NR (expr), HOST_BITS_PER_INT);\n+      bp_pack_var_len_unsigned (bp, EH_LANDING_PAD_NR (expr));\n     }\n \n   if (TREE_CODE (expr) == FIELD_DECL)\n@@ -460,7 +460,7 @@ pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n     }\n \n   if (VAR_OR_FUNCTION_DECL_P (expr))\n-    bp_pack_value (bp, DECL_INIT_PRIORITY (expr), HOST_BITS_PER_SHORT);\n+    bp_pack_var_len_unsigned (bp, DECL_INIT_PRIORITY (expr));\n }\n \n \n@@ -474,8 +474,8 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n      should never be handled here.  */\n   gcc_assert (!lto_stream_as_builtin_p (expr));\n \n-  bp_pack_value (bp, DECL_FUNCTION_CODE (expr), 11);\n-  bp_pack_value (bp, DECL_BUILT_IN_CLASS (expr), 2);\n+  bp_pack_enum (bp, built_in_class, BUILT_IN_LAST,\n+\t\tDECL_BUILT_IN_CLASS (expr));\n   bp_pack_value (bp, DECL_STATIC_CONSTRUCTOR (expr), 1);\n   bp_pack_value (bp, DECL_STATIC_DESTRUCTOR (expr), 1);\n   bp_pack_value (bp, DECL_UNINLINABLE (expr), 1);\n@@ -492,8 +492,10 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_DISREGARD_INLINE_LIMITS (expr), 1);\n   bp_pack_value (bp, DECL_PURE_P (expr), 1);\n   bp_pack_value (bp, DECL_LOOPING_CONST_OR_PURE_P (expr), 1);\n+  if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n+    bp_pack_value (bp, DECL_FUNCTION_CODE (expr), 11);\n   if (DECL_STATIC_DESTRUCTOR (expr))\n-    bp_pack_value (bp, DECL_FINI_PRIORITY (expr), HOST_BITS_PER_SHORT);\n+    bp_pack_var_len_unsigned (bp, DECL_FINI_PRIORITY (expr));\n }\n \n \n@@ -503,8 +505,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  bp_pack_value (bp, TYPE_PRECISION (expr), 10);\n-  bp_pack_value (bp, TYPE_MODE (expr), 8);\n+  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, TYPE_MODE (expr));\n   bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   bp_pack_value (bp, TYPE_NO_FORCE_BLK (expr), 1);\n   bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING (expr), 1);\n@@ -515,6 +516,7 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TYPE_CONTAINS_PLACEHOLDER_INTERNAL (expr), 2);\n   bp_pack_value (bp, TYPE_USER_ALIGN (expr), 1);\n   bp_pack_value (bp, TYPE_READONLY (expr), 1);\n+  bp_pack_var_len_unsigned (bp, TYPE_PRECISION (expr));\n   bp_pack_var_len_unsigned (bp, TYPE_ALIGN (expr));\n   bp_pack_var_len_int (bp, TYPE_ALIAS_SET (expr) == 0 ? 0 : -1);\n }\n@@ -527,7 +529,7 @@ static void\n pack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n {\n   bp_pack_value (bp, BLOCK_ABSTRACT (expr), 1);\n-  bp_pack_value (bp, BLOCK_NUMBER (expr), 31);\n+  /* BLOCK_NUMBER is recomputed.  */\n }\n \n /* Pack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL structure\n@@ -1339,7 +1341,8 @@ lto_output_builtin_tree (struct output_block *ob, tree expr)\n \t   \"functions on this target\");\n \n   output_record_start (ob, LTO_builtin_decl);\n-  output_uleb128 (ob, DECL_BUILT_IN_CLASS (expr));\n+  lto_output_enum (ob->main_stream, built_in_class, BUILT_IN_LAST,\n+\t\t   DECL_BUILT_IN_CLASS (expr));\n   output_uleb128 (ob, DECL_FUNCTION_CODE (expr));\n \n   if (DECL_ASSEMBLER_NAME_SET_P (expr))\n@@ -1660,7 +1663,8 @@ output_cfg (struct output_block *ob, struct function *fn)\n \n   ob->main_stream = ob->cfg_stream;\n \n-  output_uleb128 (ob, profile_status_for_function (fn));\n+  lto_output_enum (ob->main_stream, profile_status_d, PROFILE_LAST,\n+\t\t   profile_status_for_function (fn));\n \n   /* Output the number of the highest basic block.  */\n   output_uleb128 (ob, last_basic_block_for_function (fn));\n@@ -1734,12 +1738,12 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n \n   /* Emit the tuple header.  */\n   bp = bitpack_create (ob->main_stream);\n-  bp_pack_value (&bp, gimple_num_ops (stmt), sizeof (unsigned) * 8);\n+  bp_pack_var_len_unsigned (&bp, gimple_num_ops (stmt));\n   bp_pack_value (&bp, gimple_no_warning_p (stmt), 1);\n   if (is_gimple_assign (stmt))\n     bp_pack_value (&bp, gimple_assign_nontemporal_move_p (stmt), 1);\n   bp_pack_value (&bp, gimple_has_volatile_ops (stmt), 1);\n-  bp_pack_value (&bp, stmt->gsbase.subcode, 16);\n+  bp_pack_var_len_unsigned (&bp, stmt->gsbase.subcode);\n   lto_output_bitpack (&bp);\n \n   /* Emit location information for the statement.  */\n@@ -1808,7 +1812,8 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n       if (is_gimple_call (stmt))\n \t{\n \t  if (gimple_call_internal_p (stmt))\n-\t    output_sleb128 (ob, (int) gimple_call_internal_fn (stmt));\n+\t    lto_output_enum (ob->main_stream, internal_fn,\n+\t\t\t     IFN_LAST, gimple_call_internal_fn (stmt));\n \t  else\n \t    lto_output_tree_ref (ob, gimple_call_fntype (stmt));\n \t}"}, {"sha": "150442d8d8dad82a7c6277aa439d8cf4f6811191", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -1262,6 +1262,47 @@ lto_input_int_in_range (struct lto_input_block *ib,\n   return val;\n }\n \n+\n+/* Output VAL into BP and verify it is in range MIN...MAX that is supposed\n+   to be compile time constant.\n+   Be host independent, limit range to 31bits.  */\n+\n+static inline void\n+bp_pack_int_in_range (struct bitpack_d *bp,\n+\t\t      HOST_WIDE_INT min,\n+\t\t      HOST_WIDE_INT max,\n+\t\t      HOST_WIDE_INT val)\n+{\n+  HOST_WIDE_INT range = max - min;\n+  int nbits = floor_log2 (range) + 1;\n+\n+  gcc_checking_assert (val >= min && val <= max && range > 0\n+\t\t       && range < 0x7fffffff);\n+\n+  val -= min;\n+  bp_pack_value (bp, val, nbits);\n+}\n+\n+/* Input VAL into BP and verify it is in range MIN...MAX that is supposed\n+   to be compile time constant.  PURPOSE is used for error reporting.  */\n+\n+static inline HOST_WIDE_INT\n+bp_unpack_int_in_range (struct bitpack_d *bp,\n+\t\t        const char *purpose,\n+\t\t        HOST_WIDE_INT min,\n+\t\t        HOST_WIDE_INT max)\n+{\n+  HOST_WIDE_INT range = max - min;\n+  int nbits = floor_log2 (range) + 1;\n+  HOST_WIDE_INT val = bp_unpack_value (bp, nbits);\n+\n+  gcc_checking_assert (range > 0 && range < 0x7fffffff);\n+\n+  if (val < min || val > max)\n+    lto_value_range_error (purpose, val, min, max);\n+  return val;\n+}\n+\n /* Output VAL of type \"enum enum_name\" into OBS.\n    Assume range 0...ENUM_LAST - 1.  */\n #define lto_output_enum(obs,enum_name,enum_last,val) \\\n@@ -1273,4 +1314,15 @@ lto_input_int_in_range (struct lto_input_block *ib,\n   (enum enum_name)lto_input_int_in_range ((ib), #enum_name, 0, \\\n \t\t\t\t\t  (int)(enum_last) - 1)\n \n+/* Output VAL of type \"enum enum_name\" into BP.\n+   Assume range 0...ENUM_LAST - 1.  */\n+#define bp_pack_enum(bp,enum_name,enum_last,val) \\\n+  bp_pack_int_in_range ((bp), 0, (int)(enum_last) - 1, (int)(val))\n+\n+/* Input enum of type \"enum enum_name\" from BP.\n+   Assume range 0...ENUM_LAST - 1.  */\n+#define bp_unpack_enum(bp,enum_name,enum_last) \\\n+  (enum enum_name)bp_unpack_int_in_range ((bp), #enum_name, 0, \\\n+\t\t\t\t\t(int)(enum_last) - 1)\n+\n #endif /* GCC_LTO_STREAMER_H  */"}, {"sha": "02a999449333b2f750195d611bf78d98d1570a90", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7660069590bd9620cc50c003f13cb7fbd24e59/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fa7660069590bd9620cc50c003f13cb7fbd24e59", "patch": "@@ -277,6 +277,10 @@ enum built_in_class\n   BUILT_IN_NORMAL\n };\n \n+/* Last marker used for LTO stremaing of built_in_class.  We can not add it\n+   to the enum since we need the enumb to fit in 2 bits.  */\n+#define BUILT_IN_LAST (BUILT_IN_NORMAL + 1)\n+\n /* Names for the above.  */\n extern const char *const built_in_class_names[4];\n "}]}