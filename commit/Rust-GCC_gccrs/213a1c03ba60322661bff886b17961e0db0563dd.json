{"sha": "213a1c03ba60322661bff886b17961e0db0563dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzYTFjMDNiYTYwMzIyNjYxYmZmODg2YjE3OTYxZTBkYjA1NjNkZA==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2016-01-26T12:45:13Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2016-01-26T12:45:13Z"}, "message": "remove arm_crypto_pragma test selector\n\nFrom-SVN: r232824", "tree": {"sha": "8695588fd379544dfc44e4250ed880432095b2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8695588fd379544dfc44e4250ed880432095b2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213a1c03ba60322661bff886b17961e0db0563dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213a1c03ba60322661bff886b17961e0db0563dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213a1c03ba60322661bff886b17961e0db0563dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213a1c03ba60322661bff886b17961e0db0563dd/comments", "author": null, "committer": null, "parents": [{"sha": "6a8b00eb9c5f4cd2859c28ee9dec16c36a302a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8b00eb9c5f4cd2859c28ee9dec16c36a302a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8b00eb9c5f4cd2859c28ee9dec16c36a302a50"}], "stats": {"total": 70, "additions": 11, "deletions": 59}, "files": [{"sha": "800b75c12622078ed50ca02b995dc21ecbde9496", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=213a1c03ba60322661bff886b17961e0db0563dd", "patch": "@@ -1,3 +1,7 @@\n+2016-01-26  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* doc/sourcebuild.texi (arm_crypto_pragma_ok): Remove.\n+\n 2016-01-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/ia64/ia64.c (ia64_expand_vecint_compare): Use gen_int_mode."}, {"sha": "6d548aad7aa24c59b40ec13d9c99733d94ec0aa6", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=213a1c03ba60322661bff886b17961e0db0563dd", "patch": "@@ -1511,12 +1511,6 @@ Target generates decimal floating point instructions with current options.\n @item arm32\n ARM target generates 32-bit code.\n \n-@item arm_crypto_pragma_ok\n-@anchor{arm_crypto_pragma_ok}\n-ARM target supports pragma target @code{fpu=crypto-neon-fp-armv8}.\n-This may need @code{-mfpu=crypto-neon-fp-armv8} or equivalent options.\n-Some multilibs may be incompatible with these options.\n-\n @item arm_eabi\n ARM target adheres to the ABI for the ARM Architecture.\n \n@@ -2059,12 +2053,6 @@ The supported values of @var{feature} for directive @code{dg-add-options}\n are:\n \n @table @code\n-@item arm_crypto_pragma\n-Crypto extension pragma support.  Only ARM targets support this\n-feature, and only then in certain modes; see the\n-@ref{arm_crypto_pragma_ok,,arm_crypto_pragma_ok effective target\n-keyword}.\n-\n @item arm_fp\n @code{__ARM_FP} definition.  Only ARM targets support this feature, and only then\n in certain modes; see the @ref{arm_fp_ok,,arm_fp_ok effective target"}, {"sha": "040a2f841224a2d6bd31d16f176d32b64d921c60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=213a1c03ba60322661bff886b17961e0db0563dd", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_crypto_pragma_ok_nocache): Remove.\n+\t(check_effective_target_arm_crypto_pragma_ok): Likewise.\n+\t* gcc.target/arm/attr-crypto.c: Remove arm_crypto_pragma_ok test.\n+\n 2016-01-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69452"}, {"sha": "af774cdaf59c2d8898e0ff1b80f5cf7fbba9f03a", "filename": "gcc/testsuite/gcc.target/arm/attr-crypto.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c?ref=213a1c03ba60322661bff886b17961e0db0563dd", "patch": "@@ -2,7 +2,6 @@\n /* Make sure we can force fpu=vfp before switching using the\n    pragma.  */\n /* { dg-require-effective-target arm_fp_ok } */\n-/* { dg-require-effective-target arm_crypto_pragma_ok } */\n /* { dg-options \"-O2 -march=armv8-a\" } */\n /* { dg-add-options arm_fp } */\n "}, {"sha": "645981a8733b68a7c37919a53b324841d2c125aa", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213a1c03ba60322661bff886b17961e0db0563dd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=213a1c03ba60322661bff886b17961e0db0563dd", "patch": "@@ -2852,52 +2852,6 @@ proc add_options_for_arm_crypto { flags } {\n     return \"$flags $et_arm_crypto_flags\"\n }\n \n-# Return 1 if this is an ARM target supporting pragma target\n-# fpu=crypto-neon-fp-armv8, possibly needing -mfloat-abi=softfp or\n-# equivalent options.  Some multilibs may be incompatible with these\n-# options.  Also set et_arm_crypto_pragma_flags to the best options to\n-# add.\n-\n-proc check_effective_target_arm_crypto_pragma_ok_nocache { } {\n-    global et_arm_crypto_pragma_flags\n-    set et_arm_crypto_pragma_flags \"\"\n-    if { [check_effective_target_arm_v8_neon_ok] } {\n-\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=crypto-neon-fp-armv8\" \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"} {\n-\t    if { [check_no_compiler_messages_nocache arm_crypto_pragmaok object {\n-\t\t#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n-\t\t#include \"arm_neon.h\"\n-\t\tuint8x16_t\n-\t\tfoo (uint8x16_t a, uint8x16_t b)\n-\t\t{\n-\t          return vaeseq_u8 (a, b);\n-\t\t}\n-\t    } \"[add_options_for_arm_v8_neon \"\"] $flags\"] } {\n-\t\tset et_arm_crypto_pragma_flags \"[add_options_for_arm_v8_neon \"\"] $flags\"\n-\t\treturn 1\n-\t    }\n-\t}\n-    }\n-\n-    return 0\n-}\n-\n-# Return 1 if this is an ARM target supporting pragma target\n-# -mfpu=crypto-neon-fp-armv8.\n-\n-proc check_effective_target_arm_crypto_pragma_ok { } {\n-    return [check_cached_effective_target arm_crypto_pragma_ok \\\n-\t\tcheck_effective_target_arm_crypto_pragma_ok_nocache]\n-}\n-\n-# Add options for crypto extensions pragma.\n-proc add_options_for_arm_crypto_pragma { flags } {\n-    if { ! [check_effective_target_arm_crypto_pragma_ok] } {\n-        return \"$flags\"\n-    }\n-    global et_arm_crypto_pragma_flags\n-    return \"$flags $et_arm_crypto_pragma_flags\"\n-}\n-\n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.  Similarly, if a -mfpu option already enables"}]}