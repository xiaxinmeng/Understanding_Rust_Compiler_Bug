{"sha": "397186076bb729eee63191034adbd7bc2528b22b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk3MTg2MDc2YmI3MjllZWU2MzE5MTAzNGFkYmQ3YmMyNTI4YjIyYg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-30T14:26:42Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-30T14:26:42Z"}, "message": "cfgrtl.c (fixup_reorder_chain): Do not emit barriers to BB_FOOTER.\n\n\n\t* cfgrtl.c (fixup_reorder_chain): Do not emit barriers to BB_FOOTER.\n\n\t* postreload-gcse.c (bb_has_well_behaved_predecessors): Correct test\n\tfor table jump at the end of a basic block using tablejump_p.\n\t* targhooks.c (default_invalid_within_doloop): Likewise.\n\t* config/rs6000/rs6000.c (TARGET_INVALID_WITHIN_DOLOOP): Remove\n\ttarget hook implementation that is identical to the default hook.\n\t(rs6000_invalid_within_doloop): Remove.\n\n\t* bb-reorder.c (fix_crossing_unconditional_branches): Remove set but\n\tunused variable from tablejump_p call.\n\n\t* rtl.def (JUMP_TABLE_DATA): New RTX_INSN object.\n\t* rtl.h (RTX_PREV, RTX_NEXT): Adjust for new JUMP_TABLE_DATA.\n\t(INSN_DELETED_P): Likewise.\n\t(emit_jump_table_data): New prototype.\n\t* gengtype.c (adjust_field_rtx_def): Handle JUMP_TABLE_DATA fields\n\tafter 4th as unused.\n\t* print-rtl.c (print_rtl): Handle JUMP_TABLE_DATA.\n\t* sched-vis.c (print_insn): Likewise.\n\t* emit-rtl.c (active_insn_p): Consider JUMP_TABLE_DATA an active\n\tinsn for compatibility with back ends that use next_active_insn to\n\tidentify jump table data.\n\t(set_insn_deleted): Remove no longer useful JUMP_TABLE_DATA_P check.\n\t(remove_insn): Likewise.\n\t(emit_insn): Do not accept JUMP_TABLE_DATA objects in insn chains\n\tto be emitted.\n\t(emit_debug_insn, emit_jump_insn, emit_call_insn, emit_label): Idem.\n\t(emit_jump_table_data): New function.\n\n\t* cfgbuild.c (inside_basic_block_p): A JUMP_INSN is always inside a\n\tbasic block, a JUMP_TABLE_DATA never is.\n\t(control_flow_insn_p): JUMP_TABLE_DATA is not a control flow insn.\n\t* cfgrtl.c (duplicate_insn_chain): Split handling of JUMP_TABLE_DATA\n\toff from code handling real insns.\n\t* final.c (get_attr_length_1): Simplify for JUMP_INSNs.\n\t* function.c (instantiate_virtual_regs): Remove JUMP_TABLE_DATA_P\n\ttest, now redundant because JUMP_TABLE_DATA is not an INSN_P insn.\n\t* gcse.c (insert_insn_end_basic_block): Likewise, JUMP_TABLE_DATA_P\n\tis not a NONDEBUG_INSN_P.\n\t* ira-costs.c (scan_one_insn): Likewise.\n\t* jump.c (mark_all_labels): Likewise.\n\t(mark_jump_label_1): Likewise.\n\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n\t* lra.c (get_insn_freq): Expect all insns reaching here to be in\n\ta basic block.\n\t(check_rtl): Remove JUMP_TABLE_DATA_P test, not a NONDEBUG_INSN_P insn.\n\t* predict.c (expensive_function_p): Use FOR_BB_INSNS.\n\t* reload1.c (calculate_needs_all_insns): Call set_label_offsets for\n\tJUMP_TABLE_DATA_P insns.\n\t(calculate_elim_costs_all_insns): Likewise.\n\t(set_label_offsets): Recurse on the PATTERN of JUMP_TABLE_DATA insns.\n\t(elimination_costs_in_insn): Remove redundant JUMP_TABLE_DATA_P test.\n\t(delete_output_reload): Code style fixups.\n\t* reorg.c (dbr_schedule): Move JUMP_TABLE_DATA_P up to avoid setting\n\tinsn flags on this non-insn.\n\t* sched-rgn.c (add_branch_dependences): Treat JUMP_TABLE_DATA insns\n\tas scheduling barriers, for pre-change compatibility.\n\t* stmt.c (emit_case_dispatch_table): Emit jump table data not as\n\tJUMP_INSN objects but instead as JUMP_TABLE_DATA objects.\n\n\t* config/alpha/alpha.c (alpha_does_function_need_gp): Remove\n\tredundant JUMP_TABLE_DATA_P test.\n\t* config/arm/arm.c (thumb_far_jump_used_p): Likewise.\n\t* config/frv/frv.c (frv_function_contains_far_jump): Likewise.\n\t(frv_for_each_packet): Likewise.\n\t* config/i386/i386.c (min_insn_size): Likewise.\n\t(ix86_avoid_jump_mispredicts): Likewise.\n\t* config/m32r/m32r.c (m32r_is_insn): Likewise.\n\t* config/mep/mep.c (mep_reorg_erepeat): Likewise.\n\t* config/mips/mips.c (USEFUL_INSN_P): Likewise.\n\t(mips16_insn_length): Robustify.\n\t(mips_has_long_branch_p): Remove redundant JUMP_TABLE_DATA_P test.\n\t(mips16_split_long_branches): Likewise.\n\t* config/pa/pa.c (pa_combine_instructions): Likewise.\n\t* config/rs6000/rs6000.c (get_next_active_insn): Treat\n\tJUMP_TABLE_DATA objects as active insns, like in active_insn_p.\n\t* config/s390/s390.c (s390_chunkify_start): Treat JUMP_TABLE_DATA\n\tas contributing to pool range lengths.\n\t* config/sh/sh.c (find_barrier): Restore check for ADDR_DIFF_VEC.\n\tRemove redundant JUMP_TABLE_DATA_P test.\n\t(sh_loop_align): Likewise.\n\t(split_branches): Likewise.\n\t(sh_insn_length_adjustment): Likewise.\n\t* config/spu/spu.c (get_branch_target): Likewise.\n\nFrom-SVN: r197266", "tree": {"sha": "e26ba89a7001938413a07a7ffa3e4305911badc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e26ba89a7001938413a07a7ffa3e4305911badc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/397186076bb729eee63191034adbd7bc2528b22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397186076bb729eee63191034adbd7bc2528b22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397186076bb729eee63191034adbd7bc2528b22b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397186076bb729eee63191034adbd7bc2528b22b/comments", "author": null, "committer": null, "parents": [{"sha": "6ab7e76a5944b0f0204a98954116d1e7207c7262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab7e76a5944b0f0204a98954116d1e7207c7262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab7e76a5944b0f0204a98954116d1e7207c7262"}], "stats": {"total": 409, "additions": 224, "deletions": 185}, "files": [{"sha": "b4f7111ab23d7c9be09f0cdf8acf5e098783d4a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1,3 +1,91 @@\n+2013-03-30  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cfgrtl.c (fixup_reorder_chain): Do not emit barriers to BB_FOOTER.\n+\n+\t* postreload-gcse.c (bb_has_well_behaved_predecessors): Correct test\n+\tfor table jump at the end of a basic block using tablejump_p.\n+\t* targhooks.c (default_invalid_within_doloop): Likewise.\n+\t* config/rs6000/rs6000.c (TARGET_INVALID_WITHIN_DOLOOP): Remove\n+\ttarget hook implementation that is identical to the default hook.\n+\t(rs6000_invalid_within_doloop): Remove.\n+\n+\t* bb-reorder.c (fix_crossing_unconditional_branches): Remove set but\n+\tunused variable from tablejump_p call.\n+\n+\t* rtl.def (JUMP_TABLE_DATA): New RTX_INSN object.\n+\t* rtl.h (RTX_PREV, RTX_NEXT): Adjust for new JUMP_TABLE_DATA.\n+\t(INSN_DELETED_P): Likewise.\n+\t(emit_jump_table_data): New prototype.\n+\t* gengtype.c (adjust_field_rtx_def): Handle JUMP_TABLE_DATA fields\n+\tafter 4th as unused.\n+\t* print-rtl.c (print_rtl): Handle JUMP_TABLE_DATA.\n+\t* sched-vis.c (print_insn): Likewise.\n+\t* emit-rtl.c (active_insn_p): Consider JUMP_TABLE_DATA an active\n+\tinsn for compatibility with back ends that use next_active_insn to\n+\tidentify jump table data.\n+\t(set_insn_deleted): Remove no longer useful JUMP_TABLE_DATA_P check.\n+\t(remove_insn): Likewise.\n+\t(emit_insn): Do not accept JUMP_TABLE_DATA objects in insn chains\n+\tto be emitted.\n+\t(emit_debug_insn, emit_jump_insn, emit_call_insn, emit_label): Idem.\n+\t(emit_jump_table_data): New function.\n+\n+\t* cfgbuild.c (inside_basic_block_p): A JUMP_INSN is always inside a\n+\tbasic block, a JUMP_TABLE_DATA never is.\n+\t(control_flow_insn_p): JUMP_TABLE_DATA is not a control flow insn.\n+\t* cfgrtl.c (duplicate_insn_chain): Split handling of JUMP_TABLE_DATA\n+\toff from code handling real insns.\n+\t* final.c (get_attr_length_1): Simplify for JUMP_INSNs.\n+\t* function.c (instantiate_virtual_regs): Remove JUMP_TABLE_DATA_P\n+\ttest, now redundant because JUMP_TABLE_DATA is not an INSN_P insn.\n+\t* gcse.c (insert_insn_end_basic_block): Likewise, JUMP_TABLE_DATA_P\n+\tis not a NONDEBUG_INSN_P.\n+\t* ira-costs.c (scan_one_insn): Likewise.\n+\t* jump.c (mark_all_labels): Likewise.\n+\t(mark_jump_label_1): Likewise.\n+\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n+\t* lra.c (get_insn_freq): Expect all insns reaching here to be in\n+\ta basic block.\n+\t(check_rtl): Remove JUMP_TABLE_DATA_P test, not a NONDEBUG_INSN_P insn.\n+\t* predict.c (expensive_function_p): Use FOR_BB_INSNS.\n+\t* reload1.c (calculate_needs_all_insns): Call set_label_offsets for\n+\tJUMP_TABLE_DATA_P insns.\n+\t(calculate_elim_costs_all_insns): Likewise.\n+\t(set_label_offsets): Recurse on the PATTERN of JUMP_TABLE_DATA insns.\n+\t(elimination_costs_in_insn): Remove redundant JUMP_TABLE_DATA_P test.\n+\t(delete_output_reload): Code style fixups.\n+\t* reorg.c (dbr_schedule): Move JUMP_TABLE_DATA_P up to avoid setting\n+\tinsn flags on this non-insn.\n+\t* sched-rgn.c (add_branch_dependences): Treat JUMP_TABLE_DATA insns\n+\tas scheduling barriers, for pre-change compatibility.\n+\t* stmt.c (emit_case_dispatch_table): Emit jump table data not as\n+\tJUMP_INSN objects but instead as JUMP_TABLE_DATA objects.\n+\n+\t* config/alpha/alpha.c (alpha_does_function_need_gp): Remove\n+\tredundant JUMP_TABLE_DATA_P test.\n+\t* config/arm/arm.c (thumb_far_jump_used_p): Likewise.\n+\t* config/frv/frv.c (frv_function_contains_far_jump): Likewise.\n+\t(frv_for_each_packet): Likewise.\n+\t* config/i386/i386.c (min_insn_size): Likewise.\n+\t(ix86_avoid_jump_mispredicts): Likewise.\n+\t* config/m32r/m32r.c (m32r_is_insn): Likewise.\n+\t* config/mep/mep.c (mep_reorg_erepeat): Likewise.\n+\t* config/mips/mips.c (USEFUL_INSN_P): Likewise.\n+\t(mips16_insn_length): Robustify.\n+\t(mips_has_long_branch_p): Remove redundant JUMP_TABLE_DATA_P test.\n+\t(mips16_split_long_branches): Likewise.\n+\t* config/pa/pa.c (pa_combine_instructions): Likewise.\n+\t* config/rs6000/rs6000.c (get_next_active_insn): Treat\n+\tJUMP_TABLE_DATA objects as active insns, like in active_insn_p.\n+\t* config/s390/s390.c (s390_chunkify_start): Treat JUMP_TABLE_DATA\n+\tas contributing to pool range lengths.\n+\t* config/sh/sh.c (find_barrier): Restore check for ADDR_DIFF_VEC.\n+\tRemove redundant JUMP_TABLE_DATA_P test.\n+\t(sh_loop_align): Likewise.\n+\t(split_branches): Likewise.\n+\t(sh_insn_length_adjustment): Likewise.\n+\t* config/spu/spu.c (get_branch_target): Likewise.\n+\n 2013-03-29  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (output_profile_summary, input_profile_summary): Use"}, {"sha": "48d43a63dde7e8c6b7e25ae208d857d0f81ee2e3", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1998,14 +1998,14 @@ fix_crossing_unconditional_branches (void)\n       if (JUMP_P (last_insn)\n \t  && (succ->flags & EDGE_CROSSING))\n \t{\n-\t  rtx label2, table;\n+\t  rtx label2;\n \n \t  gcc_assert (!any_condjump_p (last_insn));\n \n \t  /* Make sure the jump is not already an indirect or table jump.  */\n \n \t  if (!computed_jump_p (last_insn)\n-\t      && !tablejump_p (last_insn, &label2, &table))\n+\t      && !tablejump_p (last_insn, &label2, NULL))\n \t    {\n \t      /* We have found a \"crossing\" unconditional branch.  Now\n \t\t we must convert it to an indirect jump.  First create"}, {"sha": "200f52d698b924299593ed3defabcd394b8a4494", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -54,13 +54,12 @@ inside_basic_block_p (const_rtx insn)\n \t      || ! JUMP_TABLE_DATA_P (insn));\n \n     case JUMP_INSN:\n-      return (! JUMP_TABLE_DATA_P (insn));\n-\n     case CALL_INSN:\n     case INSN:\n     case DEBUG_INSN:\n       return true;\n \n+    case JUMP_TABLE_DATA:\n     case BARRIER:\n     case NOTE:\n       return false;\n@@ -84,8 +83,7 @@ control_flow_insn_p (const_rtx insn)\n       return false;\n \n     case JUMP_INSN:\n-      /* Jump insn always causes control transfer except for tablejumps.  */\n-      return (! JUMP_TABLE_DATA_P (insn));\n+      return true;\n \n     case CALL_INSN:\n       /* Noreturn and sibling call instructions terminate the basic blocks\n@@ -109,8 +107,9 @@ control_flow_insn_p (const_rtx insn)\n \treturn false;\n       break;\n \n+    case JUMP_TABLE_DATA:\n     case BARRIER:\n-      /* It is nonsense to reach barrier when looking for the\n+      /* It is nonsense to reach this when looking for the\n \t end of basic block, but before dead code is eliminated\n \t this may happen.  */\n       return false;"}, {"sha": "f0ec70c41da2251e4fab80bb438593ae9bb729e0", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2488,7 +2488,7 @@ rtl_verify_flow_info (void)\n \t      break;\n \n \t    case CODE_LABEL:\n-\t      /* An addr_vec is placed outside any basic block.  */\n+\t      /* An ADDR_VEC is placed outside any basic block.  */\n \t      if (NEXT_INSN (x)\n \t\t  && JUMP_TABLE_DATA_P (NEXT_INSN (x)))\n \t\tx = NEXT_INSN (x);\n@@ -3244,7 +3244,7 @@ fixup_reorder_chain (void)\n \t\t{\n \t\t  gcc_assert (!onlyjump_p (bb_end_insn)\n \t\t\t      || returnjump_p (bb_end_insn));\n-\t\t  BB_FOOTER (bb) = emit_barrier_after (bb_end_insn);\n+\t\t  emit_barrier_after (bb_end_insn);\n \t\t  continue;\n \t\t}\n \n@@ -3604,7 +3604,7 @@ cfg_layout_can_duplicate_bb_p (const_basic_block bb)\n rtx\n duplicate_insn_chain (rtx from, rtx to)\n {\n-  rtx insn, last, copy;\n+  rtx insn, next, last, copy;\n \n   /* Avoid updating of boundaries of previous basic block.  The\n      note will get removed from insn stream in fixup.  */\n@@ -3624,31 +3624,28 @@ duplicate_insn_chain (rtx from, rtx to)\n \tcase INSN:\n \tcase CALL_INSN:\n \tcase JUMP_INSN:\n-\t  /* Avoid copying of dispatch tables.  We never duplicate\n-\t     tablejumps, so this can hit only in case the table got\n-\t     moved far from original jump.  */\n-\t  if (JUMP_TABLE_DATA_P (insn))\n-\t    {\n-\t      /* Avoid copying following barrier as well if any\n-\t\t (and debug insns in between).  */\n-\t      rtx next;\n-\n-\t      for (next = NEXT_INSN (insn);\n-\t\t   next != NEXT_INSN (to);\n-\t\t   next = NEXT_INSN (next))\n-\t\tif (!DEBUG_INSN_P (next))\n-\t\t  break;\n-\t      if (next != NEXT_INSN (to) && BARRIER_P (next))\n-\t\tinsn = next;\n-\t      break;\n-\t    }\n \t  copy = emit_copy_of_insn_after (insn, get_last_insn ());\n \t  if (JUMP_P (insn) && JUMP_LABEL (insn) != NULL_RTX\n \t      && ANY_RETURN_P (JUMP_LABEL (insn)))\n \t    JUMP_LABEL (copy) = JUMP_LABEL (insn);\n           maybe_copy_prologue_epilogue_insn (insn, copy);\n \t  break;\n \n+\tcase JUMP_TABLE_DATA:\n+\t  /* Avoid copying of dispatch tables.  We never duplicate\n+\t     tablejumps, so this can hit only in case the table got\n+\t     moved far from original jump.\n+\t     Avoid copying following barrier as well if any\n+\t     (and debug insns in between).  */\n+\t  for (next = NEXT_INSN (insn);\n+\t       next != NEXT_INSN (to);\n+\t       next = NEXT_INSN (next))\n+\t    if (!DEBUG_INSN_P (next))\n+\t      break;\n+\t  if (next != NEXT_INSN (to) && BARRIER_P (next))\n+\t    insn = next;\n+\t  break;\n+\n \tcase CODE_LABEL:\n \t  break;\n "}, {"sha": "9afce176bffe158770455442e570d415c8ace102", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -7454,7 +7454,6 @@ alpha_does_function_need_gp (void)\n \n   for (; insn; insn = NEXT_INSN (insn))\n     if (NONDEBUG_INSN_P (insn)\n-\t&& ! JUMP_TABLE_DATA_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER\n \t&& get_attr_usegp (insn))"}, {"sha": "88165f27da479c3abb8f4675b49a25cf1dc1a6b9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -22654,11 +22654,7 @@ thumb_far_jump_used_p (void)\n      insn with the far jump attribute set.  */\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      if (JUMP_P (insn)\n-\t  /* Ignore tablejump patterns.  */\n-\t  && ! JUMP_TABLE_DATA_P (insn)\n-\t  && get_attr_far_jump (insn) == FAR_JUMP_YES\n-\t  )\n+      if (JUMP_P (insn) && get_attr_far_jump (insn) == FAR_JUMP_YES)\n \t{\n \t  /* Record the fact that we have decided that\n \t     the function does use far jumps.  */"}, {"sha": "b0e8c91c93d734098711a8b8db4b51f2f4dd2364", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1409,8 +1409,6 @@ frv_function_contains_far_jump (void)\n   rtx insn = get_insns ();\n   while (insn != NULL\n \t && !(JUMP_P (insn)\n-\t      /* Ignore tablejump patterns.  */\n-\t      && ! JUMP_TABLE_DATA_P (insn)\n \t      && get_attr_far_jump (insn) == FAR_JUMP_YES))\n     insn = NEXT_INSN (insn);\n   return (insn != NULL);\n@@ -7480,7 +7478,7 @@ frv_for_each_packet (void (*handle_packet) (void))\n \t  frv_start_packet_block ();\n \t}\n \n-      if (INSN_P (insn) && ! JUMP_TABLE_DATA_P (insn))\n+      if (INSN_P (insn))\n \tswitch (GET_CODE (PATTERN (insn)))\n \t  {\n \t  case USE:"}, {"sha": "8e9d38f8887bbd155f290b2a006a1c1b7251a1d7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -35116,8 +35116,6 @@ min_insn_size (rtx insn)\n   if (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n       && XINT (PATTERN (insn), 1) == UNSPECV_ALIGN)\n     return 0;\n-  if (JUMP_TABLE_DATA_P (insn))\n-    return 0;\n \n   /* Important case - calls are always 5 bytes.\n      It is common to have many calls in the row.  */\n@@ -35208,9 +35206,7 @@ ix86_avoid_jump_mispredicts (void)\n \t      while (nbytes + max_skip >= 16)\n \t\t{\n \t\t  start = NEXT_INSN (start);\n-\t\t  if ((JUMP_P (start)\n-\t\t       && ! JUMP_TABLE_DATA_P (start))\n-\t\t      || CALL_P (start))\n+\t\t  if (JUMP_P (start) || CALL_P (start))\n \t\t    njumps--, isjump = 1;\n \t\t  else\n \t\t    isjump = 0;\n@@ -35225,19 +35221,15 @@ ix86_avoid_jump_mispredicts (void)\n       if (dump_file)\n \tfprintf (dump_file, \"Insn %i estimated to %i bytes\\n\",\n \t\t INSN_UID (insn), min_size);\n-      if ((JUMP_P (insn)\n-\t   && ! JUMP_TABLE_DATA_P (insn))\n-\t  || CALL_P (insn))\n+      if (JUMP_P (insn) || CALL_P (insn))\n \tnjumps++;\n       else\n \tcontinue;\n \n       while (njumps > 3)\n \t{\n \t  start = NEXT_INSN (start);\n-\t  if ((JUMP_P (start)\n-\t       && ! JUMP_TABLE_DATA_P (start))\n-\t      || CALL_P (start))\n+\t  if (JUMP_P (start) || CALL_P (start))\n \t    njumps--, isjump = 1;\n \t  else\n \t    isjump = 0;"}, {"sha": "c94da538fcfb15b3f92e4809d328a9e30fa6d9a9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1308,7 +1308,6 @@ static int\n m32r_is_insn (rtx insn)\n {\n   return (NONDEBUG_INSN_P (insn)\n-\t  && ! JUMP_TABLE_DATA_P (insn)\n \t  && GET_CODE (PATTERN (insn)) != USE\n \t  && GET_CODE (PATTERN (insn)) != CLOBBER);\n }"}, {"sha": "a5b7e6c68be8247030528b5d5f0093971e7cfb8d", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -5511,7 +5511,6 @@ mep_reorg_erepeat (rtx insns)\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (JUMP_P (insn)\n-\t&& ! JUMP_TABLE_DATA_P (insn)\n \t&& mep_invertable_branch_p (insn))\n       {\n \tif (dump_file)"}, {"sha": "d1ba99680d3c79dbf5965f96f0d98d1b012e4831", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -99,7 +99,6 @@ along with GCC; see the file COPYING3.  If not see\n \tmoved to rtl.h.  */\n #define USEFUL_INSN_P(INSN)\t\t\t\t\t\t\\\n   (NONDEBUG_INSN_P (INSN)\t\t\t\t\t\t\\\n-   && ! JUMP_TABLE_DATA_P (INSN)\t\t\t\t\t\\\n    && GET_CODE (PATTERN (INSN)) != USE\t\t\t\t\t\\\n    && GET_CODE (PATTERN (INSN)) != CLOBBER)\n \n@@ -14654,8 +14653,10 @@ mips16_insn_length (rtx insn)\n       rtx body = PATTERN (insn);\n       if (GET_CODE (body) == ADDR_VEC)\n \treturn GET_MODE_SIZE (GET_MODE (body)) * XVECLEN (body, 0);\n-      if (GET_CODE (body) == ADDR_DIFF_VEC)\n+      else if (GET_CODE (body) == ADDR_DIFF_VEC)\n \treturn GET_MODE_SIZE (GET_MODE (body)) * XVECLEN (body, 1);\n+      else\n+\tgcc_unreachable ();\n     }\n   return get_attr_length (insn);\n }\n@@ -16184,7 +16185,6 @@ mips_has_long_branch_p (void)\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     FOR_EACH_SUBINSN (subinsn, insn)\n       if (JUMP_P (subinsn)\n-\t  && USEFUL_INSN_P (subinsn)\n \t  && get_attr_length (subinsn) > normal_length\n \t  && (any_condjump_p (subinsn) || any_uncondjump_p (subinsn)))\n \treturn true;\n@@ -16286,7 +16286,6 @@ mips16_split_long_branches (void)\n       something_changed = false;\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \tif (JUMP_P (insn)\n-\t    && USEFUL_INSN_P (insn)\n \t    && get_attr_length (insn) > 8\n \t    && (any_condjump_p (insn) || any_uncondjump_p (insn)))\n \t  {"}, {"sha": "c06513c567df9821d80c8fad037ecb12ec1eb60a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -9134,7 +9134,6 @@ pa_combine_instructions (void)\n       /* We only care about INSNs, JUMP_INSNs, and CALL_INSNs.\n \t Also ignore any special USE insns.  */\n       if ((! NONJUMP_INSN_P (anchor) && ! JUMP_P (anchor) && ! CALL_P (anchor))\n-\t  || JUMP_TABLE_DATA_P (anchor)\n \t  || GET_CODE (PATTERN (anchor)) == USE\n \t  || GET_CODE (PATTERN (anchor)) == CLOBBER)\n \tcontinue;\n@@ -9159,8 +9158,7 @@ pa_combine_instructions (void)\n \t\tcontinue;\n \n \t      /* Anything except a regular INSN will stop our search.  */\n-\t      if (! NONJUMP_INSN_P (floater)\n-\t\t  || JUMP_TABLE_DATA_P (floater))\n+\t      if (! NONJUMP_INSN_P (floater))\n \t\t{\n \t\t  floater = NULL_RTX;\n \t\t  break;\n@@ -9220,8 +9218,7 @@ pa_combine_instructions (void)\n \t\t    continue;\n \n \t\t  /* Anything except a regular INSN will stop our search.  */\n-\t\t  if (! NONJUMP_INSN_P (floater)\n-\t\t      || JUMP_TABLE_DATA_P (floater))\n+\t\t  if (! NONJUMP_INSN_P (floater))\n \t\t    {\n \t\t      floater = NULL_RTX;\n \t\t      break;"}, {"sha": "eda641d591ef72e9b84bf9fa6472a4bd12b2f78d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1290,9 +1290,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL rs6000_function_ok_for_sibcall\n \n-#undef TARGET_INVALID_WITHIN_DOLOOP\n-#define TARGET_INVALID_WITHIN_DOLOOP rs6000_invalid_within_doloop\n-\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST rs6000_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n@@ -18778,22 +18775,6 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp)\n   return false;\n }\n \n-/* NULL if INSN insn is valid within a low-overhead loop.\n-   Otherwise return why doloop cannot be applied.\n-   PowerPC uses the COUNT register for branch on table instructions.  */\n-\n-static const char *\n-rs6000_invalid_within_doloop (const_rtx insn)\n-{\n-  if (CALL_P (insn))\n-    return \"Function call in the loop.\";\n-\n-  if (JUMP_TABLE_DATA_P (insn))\n-    return \"Computed branch in the loop.\";\n-\n-  return NULL;\n-}\n-\n static int\n rs6000_ra_ever_killed (void)\n {\n@@ -23940,7 +23921,7 @@ get_next_active_insn (rtx insn, rtx tail)\n \treturn NULL_RTX;\n \n       if (CALL_P (insn)\n-\t  || JUMP_P (insn)\n+\t  || JUMP_P (insn) || JUMP_TABLE_DATA_P (insn)\n \t  || (NONJUMP_INSN_P (insn)\n \t      && GET_CODE (PATTERN (insn)) != USE\n \t      && GET_CODE (PATTERN (insn)) != CLOBBER"}, {"sha": "663cc545b8cfe59ce3030e3d353820a9ccfe2efc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -6867,7 +6867,7 @@ s390_chunkify_start (void)\n \t    }\n \t}\n \n-      if (JUMP_P (insn) || LABEL_P (insn))\n+      if (JUMP_P (insn) || JUMP_TABLE_DATA_P (insn) || LABEL_P (insn))\n \t{\n \t  if (curr_pool)\n \t    s390_add_pool_insn (curr_pool, insn);"}, {"sha": "ccf0ffe21082cadae35f86d3397f44e87a227e5f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -5213,7 +5213,8 @@ find_barrier (int num_mova, rtx mova, rtx from)\n \t  if (found_si > count_si)\n \t    count_si = found_si;\n \t}\n-      else if (JUMP_TABLE_DATA_P (from))\n+      else if (JUMP_TABLE_DATA_P (from)\n+\t       && GET_CODE (PATTERN (from)) == ADDR_DIFF_VEC)\n \t{\n \t  if ((num_mova > 1 && GET_MODE (prev_nonnote_insn (from)) == VOIDmode)\n \t      || (num_mova\n@@ -5247,7 +5248,7 @@ find_barrier (int num_mova, rtx mova, rtx from)\n \n       /* There is a possibility that a bf is transformed into a bf/s by the\n \t delay slot scheduler.  */\n-      if (JUMP_P (from) && !JUMP_TABLE_DATA_P (from) \n+      if (JUMP_P (from)\n \t  && get_attr_type (from) == TYPE_CBRANCH\n \t  && ! sequence_insn_p (from))\n \tinc += 2;\n@@ -5973,7 +5974,6 @@ sh_loop_align (rtx label)\n \n   if (! next\n       || ! INSN_P (next)\n-      || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC\n       || recog_memoized (next) == CODE_FOR_consttable_2)\n     return 0;\n \n@@ -6494,9 +6494,7 @@ split_branches (rtx first)\n \t   so transform it into a note.  */\n \tSET_INSN_DELETED (insn);\n       }\n-    else if (JUMP_P (insn)\n-\t     /* Don't mess with ADDR_DIFF_VEC */\n-\t     && ! JUMP_TABLE_DATA_P (insn))\n+    else if (JUMP_P (insn))\n       {\n \tenum attr_type type = get_attr_type (insn);\n \tif (type == TYPE_CBRANCH)\n@@ -10122,16 +10120,15 @@ sh_insn_length_adjustment (rtx insn)\n   if (((NONJUMP_INSN_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER)\n-       || CALL_P (insn)\n-       || (JUMP_P (insn) && !JUMP_TABLE_DATA_P (insn)))\n+       || CALL_P (insn) || JUMP_P (insn))\n       && ! sequence_insn_p (insn)\n       && get_attr_needs_delay_slot (insn) == NEEDS_DELAY_SLOT_YES)\n     return 2;\n \n   /* SH2e has a bug that prevents the use of annulled branches, so if\n      the delay slot is not filled, we'll have to put a NOP in it.  */\n   if (sh_cpu_attr == CPU_SH2E\n-      && JUMP_P (insn) && !JUMP_TABLE_DATA_P (insn)\n+      && JUMP_P (insn)\n       && get_attr_type (insn) == TYPE_CBRANCH\n       && ! sequence_insn_p (insn))\n     return 2;"}, {"sha": "31d31f928a6be3149bf08008fef796a2cd51ab2e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2171,10 +2171,6 @@ get_branch_target (rtx branch)\n       if (GET_CODE (PATTERN (branch)) == RETURN)\n \treturn gen_rtx_REG (SImode, LINK_REGISTER_REGNUM);\n \n-      /* jump table */\n-      if (JUMP_TABLE_DATA_P (branch))\n-\treturn 0;\n-\n      /* ASM GOTOs. */\n      if (extract_asm_operands (PATTERN (branch)) != NULL)\n \treturn NULL;"}, {"sha": "73a59b58046213bd1f05e94a51b99008c8279417", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -3268,6 +3268,7 @@ int\n active_insn_p (const_rtx insn)\n {\n   return (CALL_P (insn) || JUMP_P (insn)\n+\t  || JUMP_TABLE_DATA_P (insn) /* FIXME */\n \t  || (NONJUMP_INSN_P (insn)\n \t      && (! reload_completed\n \t\t  || (GET_CODE (PATTERN (insn)) != USE\n@@ -3900,7 +3901,7 @@ add_insn_before (rtx insn, rtx before, basic_block bb)\n void\n set_insn_deleted (rtx insn)\n {\n-  if (INSN_P (insn) && !JUMP_TABLE_DATA_P (insn))\n+  if (INSN_P (insn))\n     df_insn_delete (insn);\n   PUT_CODE (insn, NOTE);\n   NOTE_KIND (insn) = NOTE_INSN_DELETED;\n@@ -3968,7 +3969,7 @@ remove_insn (rtx insn)\n     }\n \n   /* Invalidate data flow information associated with INSN.  */\n-  if (INSN_P (insn) && !JUMP_TABLE_DATA_P (insn))\n+  if (INSN_P (insn))\n     df_insn_delete (insn);\n \n   /* Fix up basic block boundaries, if necessary.  */\n@@ -4661,6 +4662,7 @@ emit_insn (rtx x)\n       break;\n \n #ifdef ENABLE_RTL_CHECKING\n+    case JUMP_TABLE_DATA:\n     case SEQUENCE:\n       gcc_unreachable ();\n       break;\n@@ -4707,6 +4709,7 @@ emit_debug_insn (rtx x)\n       break;\n \n #ifdef ENABLE_RTL_CHECKING\n+    case JUMP_TABLE_DATA:\n     case SEQUENCE:\n       gcc_unreachable ();\n       break;\n@@ -4749,6 +4752,7 @@ emit_jump_insn (rtx x)\n       break;\n \n #ifdef ENABLE_RTL_CHECKING\n+    case JUMP_TABLE_DATA:\n     case SEQUENCE:\n       gcc_unreachable ();\n       break;\n@@ -4785,6 +4789,7 @@ emit_call_insn (rtx x)\n \n #ifdef ENABLE_RTL_CHECKING\n     case SEQUENCE:\n+    case JUMP_TABLE_DATA:\n       gcc_unreachable ();\n       break;\n #endif\n@@ -4809,6 +4814,20 @@ emit_label (rtx label)\n   return label;\n }\n \n+/* Make an insn of code JUMP_TABLE_DATA\n+   and add it to the end of the doubly-linked list.  */\n+\n+rtx\n+emit_jump_table_data (rtx table)\n+{\n+  rtx jump_table_data = rtx_alloc (JUMP_TABLE_DATA);\n+  INSN_UID (jump_table_data) = cur_insn_uid++;\n+  PATTERN (jump_table_data) = table;\n+  BLOCK_FOR_INSN (jump_table_data) = NULL;\n+  add_insn (jump_table_data);\n+  return jump_table_data;\n+}\n+\n /* Make an insn of code BARRIER\n    and add it to the end of the doubly-linked list.  */\n "}, {"sha": "714137c712e7f24799ecc3f63d5fade3245b1b9f", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -391,18 +391,8 @@ get_attr_length_1 (rtx insn, int (*fallback_fn) (rtx))\n \treturn 0;\n \n       case CALL_INSN:\n-\tlength = fallback_fn (insn);\n-\tbreak;\n-\n       case JUMP_INSN:\n-\tbody = PATTERN (insn);\n-\tif (JUMP_TABLE_DATA_P (insn))\n-\t  {\n-\t    /* Alignment is machine-dependent and should be handled by\n-\t       ADDR_VEC_ALIGN.  */\n-\t  }\n-\telse\n-\t  length = fallback_fn (insn);\n+\tlength = fallback_fn (insn);\n \tbreak;\n \n       case INSN:"}, {"sha": "7e55c94cf75e7f87f4fd0b1ad90465e404c1817f", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1915,8 +1915,7 @@ instantiate_virtual_regs (void)\n       {\n \t/* These patterns in the instruction stream can never be recognized.\n \t   Fortunately, they shouldn't contain virtual registers either.  */\n-        if (JUMP_TABLE_DATA_P (insn)\n-\t    || GET_CODE (PATTERN (insn)) == USE\n+        if (GET_CODE (PATTERN (insn)) == USE\n \t    || GET_CODE (PATTERN (insn)) == CLOBBER\n \t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n \t  continue;"}, {"sha": "f421a3a7a0764069d4a563f993cbfd40eba12647", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2148,20 +2148,10 @@ insert_insn_end_basic_block (struct expr *expr, basic_block bb)\n \t  && (!single_succ_p (bb)\n \t      || single_succ_edge (bb)->flags & EDGE_ABNORMAL)))\n     {\n-#ifdef HAVE_cc0\n-      rtx note;\n-#endif\n-\n-      /* If this is a jump table, then we can't insert stuff here.  Since\n-\t we know the previous real insn must be the tablejump, we insert\n-\t the new instruction just before the tablejump.  */\n-      if (JUMP_TABLE_DATA_P (insn))\n-\tinsn = prev_active_insn (insn);\n-\n #ifdef HAVE_cc0\n       /* FIXME: 'twould be nice to call prev_cc0_setter here but it aborts\n \t if cc0 isn't set.  */\n-      note = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n+      rtx note = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n       if (note)\n \tinsn = XEXP (note, 0);\n       else"}, {"sha": "eede79861f3427fd6da02874d4fbb9647c210c66", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1219,6 +1219,8 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == SYMBOL_REF && aindex == 2)\n \t\tt = symbol_union_tp, subname = \"\";\n+\t      else if (i == JUMP_TABLE_DATA && aindex >= 5)\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == BARRIER && aindex >= 3)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == ENTRY_VALUE && aindex == 0)"}, {"sha": "d2806bdffbdfa499a7b451eb0652e3ad01e87443", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1269,8 +1269,7 @@ scan_one_insn (rtx insn)\n   int i, k;\n   bool counted_mem;\n \n-  if (!NONDEBUG_INSN_P (insn)\n-      || JUMP_TABLE_DATA_P (insn))\n+  if (!NONDEBUG_INSN_P (insn))\n     return insn;\n \n   pat_code = GET_CODE (PATTERN (insn));"}, {"sha": "6038c255d8b442ebec3bde6b7f5d87a6cbbe9d69", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -274,17 +274,11 @@ mark_all_labels (rtx f)\n \t     basic blocks.  If those non-insns represent tablejump data,\n \t     they contain label references that we must record.  */\n \t  for (insn = BB_HEADER (bb); insn; insn = NEXT_INSN (insn))\n-\t    if (INSN_P (insn))\n-\t      {\n-\t\tgcc_assert (JUMP_TABLE_DATA_P (insn));\n-\t\tmark_jump_label (PATTERN (insn), insn, 0);\n-\t      }\n+\t    if (JUMP_TABLE_DATA_P (insn))\n+\t      mark_jump_label (PATTERN (insn), insn, 0);\n \t  for (insn = BB_FOOTER (bb); insn; insn = NEXT_INSN (insn))\n-\t    if (INSN_P (insn))\n-\t      {\n-\t\tgcc_assert (JUMP_TABLE_DATA_P (insn));\n-\t\tmark_jump_label (PATTERN (insn), insn, 0);\n-\t      }\n+\t    if (JUMP_TABLE_DATA_P (insn))\n+\t      mark_jump_label (PATTERN (insn), insn, 0);\n \t}\n     }\n   else\n@@ -296,6 +290,8 @@ mark_all_labels (rtx f)\n \t    ;\n \t  else if (LABEL_P (insn))\n \t    prev_nonjump_insn = NULL;\n+\t  else if (JUMP_TABLE_DATA_P (insn))\n+\t    mark_jump_label (PATTERN (insn), insn, 0);\n \t  else if (NONDEBUG_INSN_P (insn))\n \t    {\n \t      mark_jump_label (PATTERN (insn), insn, 0);\n@@ -1163,8 +1159,8 @@ mark_jump_label_1 (rtx x, rtx insn, bool in_mem, bool is_target)\n \treturn;\n       }\n \n-  /* Do walk the labels in a vector, but not the first operand of an\n-     ADDR_DIFF_VEC.  Don't set the JUMP_LABEL of a vector.  */\n+    /* Do walk the labels in a vector, but not the first operand of an\n+       ADDR_DIFF_VEC.  Don't set the JUMP_LABEL of a vector.  */\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n       if (! INSN_DELETED_P (insn))"}, {"sha": "b8ec69fdcd9b74141fd5e838f78c481941891c59", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -767,8 +767,7 @@ eliminate_regs_in_insn (rtx insn, bool replace_p)\n \n   if (icode < 0 && asm_noperands (PATTERN (insn)) < 0 && ! DEBUG_INSN_P (insn))\n     {\n-      lra_assert (JUMP_TABLE_DATA_P (insn)\n-\t\t  || GET_CODE (PATTERN (insn)) == USE\n+      lra_assert (GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n \t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT);\n       return;"}, {"sha": "e7fa888df576e8cd1703fc058f2b1598c4635f5e", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1619,18 +1619,10 @@ add_regs_to_insn_regno_info (lra_insn_recog_data_t data, rtx x, int uid,\n static int\n get_insn_freq (rtx insn)\n {\n-  basic_block bb;\n+  basic_block bb = BLOCK_FOR_INSN (insn);\n \n-  if ((bb = BLOCK_FOR_INSN (insn)) != NULL)\n-    return REG_FREQ_FROM_BB (bb);\n-  else\n-    {\n-      lra_assert (lra_insn_recog_data[INSN_UID (insn)]\n-\t\t  ->insn_static_data->n_operands == 0);\n-      /* We don't care about such insn, e.g. it might be jump with\n-\t addr_vec.  */\n-      return 1;\n-    }\n+  gcc_checking_assert (bb != NULL);\n+  return REG_FREQ_FROM_BB (bb);\n }\n \n /* Invalidate all reg info of INSN with DATA and execution frequency\n@@ -1997,7 +1989,6 @@ check_rtl (bool final_p)\n   FOR_EACH_BB (bb)\n     FOR_BB_INSNS (bb, insn)\n     if (NONDEBUG_INSN_P (insn)\n-\t&& ! JUMP_TABLE_DATA_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER\n \t&& GET_CODE (PATTERN (insn)) != ASM_INPUT)"}, {"sha": "1b94b5c7d73ea2702f55440445c72b1d21b845d7", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -918,7 +918,7 @@ bb_has_well_behaved_predecessors (basic_block bb)\n       if ((pred->flags & EDGE_ABNORMAL_CALL) && cfun->has_nonlocal_label)\n \treturn false;\n \n-      if (JUMP_TABLE_DATA_P (BB_END (pred->src)))\n+      if (tablejump_p (BB_END (pred->src), NULL, NULL))\n \treturn false;\n     }\n   return true;"}, {"sha": "52a4bb46b12f895051284a0b40d9a8859de62d75", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2748,8 +2748,7 @@ expensive_function_p (int threshold)\n     {\n       rtx insn;\n \n-      for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));\n-\t   insn = NEXT_INSN (insn))\n+      FOR_BB_INSNS (bb, insn)\n \tif (active_insn_p (insn))\n \t  {\n \t    sum += bb->frequency;"}, {"sha": "d2bda9ec84c6b523750c38bb7181320e421157ea", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -778,6 +778,7 @@ print_rtl (FILE *outf, const_rtx rtx_first)\n       case CALL_INSN:\n       case NOTE:\n       case CODE_LABEL:\n+      case JUMP_TABLE_DATA:\n       case BARRIER:\n \tfor (tmp_rtx = rtx_first; tmp_rtx != 0; tmp_rtx = NEXT_INSN (tmp_rtx))\n \t  {"}, {"sha": "b8c3bfabbfb11e6b9ea1c307e3c9395f50f10992", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -1490,7 +1490,7 @@ calculate_needs_all_insns (int global)\n \t include REG_LABEL_OPERAND and REG_LABEL_TARGET), we need to see\n \t what effects this has on the known offsets at labels.  */\n \n-      if (LABEL_P (insn) || JUMP_P (insn)\n+      if (LABEL_P (insn) || JUMP_P (insn) || JUMP_TABLE_DATA_P (insn)\n \t  || (INSN_P (insn) && REG_NOTES (insn) != 0))\n \tset_label_offsets (insn, insn, 0);\n \n@@ -1620,7 +1620,7 @@ calculate_elim_costs_all_insns (void)\n \t     include REG_LABEL_OPERAND and REG_LABEL_TARGET), we need to see\n \t     what effects this has on the known offsets at labels.  */\n \n-\t  if (LABEL_P (insn) || JUMP_P (insn)\n+\t  if (LABEL_P (insn) || JUMP_P (insn) || JUMP_TABLE_DATA_P (insn)\n \t      || (INSN_P (insn) && REG_NOTES (insn) != 0))\n \t    set_label_offsets (insn, insn, 0);\n \n@@ -2404,6 +2404,10 @@ set_label_offsets (rtx x, rtx insn, int initial_p)\n \n       return;\n \n+    case JUMP_TABLE_DATA:\n+      set_label_offsets (PATTERN (insn), insn, initial_p);\n+      return;\n+\n     case JUMP_INSN:\n       set_label_offsets (PATTERN (insn), insn, initial_p);\n \n@@ -3234,11 +3238,10 @@ eliminate_regs_in_insn (rtx insn, int replace)\n \n   if (! insn_is_asm && icode < 0)\n     {\n-      gcc_assert (JUMP_TABLE_DATA_P (insn)\n+      gcc_assert (DEBUG_INSN_P (insn)\n \t\t  || GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n-\t\t  || DEBUG_INSN_P (insn));\n+\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT);\n       if (DEBUG_INSN_P (insn))\n \tINSN_VAR_LOCATION_LOC (insn)\n \t  = eliminate_regs (INSN_VAR_LOCATION_LOC (insn), VOIDmode, insn);\n@@ -3644,11 +3647,10 @@ elimination_costs_in_insn (rtx insn)\n \n   if (! insn_is_asm && icode < 0)\n     {\n-      gcc_assert (JUMP_TABLE_DATA_P (insn)\n+      gcc_assert (DEBUG_INSN_P (insn)\n \t\t  || GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n-\t\t  || DEBUG_INSN_P (insn));\n+\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT);\n       return;\n     }\n \n@@ -8866,8 +8868,7 @@ delete_output_reload (rtx insn, int j, int last_reload_reg, rtx new_reload_reg)\n \t     since if they are the only uses, they are dead.  */\n \t  if (set != 0 && SET_DEST (set) == reg)\n \t    continue;\n-\t  if (LABEL_P (i2)\n-\t      || JUMP_P (i2))\n+\t  if (LABEL_P (i2) || JUMP_P (i2))\n \t    break;\n \t  if ((NONJUMP_INSN_P (i2) || CALL_P (i2))\n \t      && reg_mentioned_p (reg, PATTERN (i2)))\n@@ -8891,8 +8892,7 @@ delete_output_reload (rtx insn, int j, int last_reload_reg, rtx new_reload_reg)\n \t      delete_address_reloads (i2, insn);\n \t      delete_insn (i2);\n \t    }\n-\t  if (LABEL_P (i2)\n-\t      || JUMP_P (i2))\n+\t  if (LABEL_P (i2) || JUMP_P (i2))\n \t    break;\n \t}\n "}, {"sha": "82b54e2a14e0e7924b2b3db14ba37f0ec7b44dfd", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -3700,14 +3700,14 @@ dbr_schedule (rtx first)\n     {\n       rtx target;\n \n-      if (JUMP_P (insn))\n-        INSN_ANNULLED_BRANCH_P (insn) = 0;\n-      INSN_FROM_TARGET_P (insn) = 0;\n-\n       /* Skip vector tables.  We can't get attributes for them.  */\n       if (JUMP_TABLE_DATA_P (insn))\n \tcontinue;\n \n+      if (JUMP_P (insn))\n+        INSN_ANNULLED_BRANCH_P (insn) = 0;\n+      INSN_FROM_TARGET_P (insn) = 0;\n+\n       if (num_delay_slots (insn) > 0)\n \tobstack_ptr_grow (&unfilled_slots_obstack, insn);\n "}, {"sha": "47a37623c6d9dbe6b3cac5892695b46ab6711224", "filename": "gcc/rtl.def", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -64,7 +64,8 @@ along with GCC; see the file COPYING3.  If not see\n      RTX_BITFIELD_OPS\n          an rtx code for a bit-field operation (ZERO_EXTRACT, SIGN_EXTRACT)\n      RTX_INSN\n-         an rtx code for a machine insn (INSN, JUMP_INSN, CALL_INSN)\n+         an rtx code for a machine insn (INSN, JUMP_INSN, CALL_INSN) or\n+\t data that will be output as assembly pseudo-ops (DEBUG_INSN)\n      RTX_MATCH\n          an rtx code for something that matches in insns (e.g, MATCH_DUP)\n      RTX_AUTOINC\n@@ -137,6 +138,13 @@ DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"iuuBeiie0\", RTX_INSN)\n    All other fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"iuuBeiiee\", RTX_INSN)\n \n+/* Placeholder for tablejump JUMP_INSNs.  The pattern of this kind\n+   of rtx is always either an ADDR_VEC or an ADDR_DIFF_VEC.  These\n+   placeholders do not appear as real instructions inside a basic\n+   block, but are considered active_insn_p instructions for historical\n+   reasons, when jump table data was represented with JUMP_INSNs.  */\n+DEF_RTL_EXPR(JUMP_TABLE_DATA, \"jump_table_data\", \"iuuBe0000\", RTX_INSN)\n+\n /* A marker that indicates that control will not flow through.  */\n DEF_RTL_EXPR(BARRIER, \"barrier\", \"iuu00000\", RTX_EXTRA)\n \n@@ -214,8 +222,12 @@ DEF_RTL_EXPR(UNSPEC, \"unspec\", \"Ei\", RTX_EXTRA)\n /* Similar, but a volatile operation and one which may trap.  */\n DEF_RTL_EXPR(UNSPEC_VOLATILE, \"unspec_volatile\", \"Ei\", RTX_EXTRA)\n \n-/* Vector of addresses, stored as full words.  */\n-/* Each element is a LABEL_REF to a CODE_LABEL whose address we want.  */\n+/* ----------------------------------------------------------------------\n+   Table jump addresses.\n+   ---------------------------------------------------------------------- */\n+\n+/* Vector of addresses, stored as full words.\n+   Each element is a LABEL_REF to a CODE_LABEL whose address we want.  */\n DEF_RTL_EXPR(ADDR_VEC, \"addr_vec\", \"E\", RTX_EXTRA)\n \n /* Vector of address differences X0 - BASE, X1 - BASE, ...\n@@ -240,7 +252,6 @@ DEF_RTL_EXPR(ADDR_VEC, \"addr_vec\", \"E\", RTX_EXTRA)\n    The third, fourth and fifth operands are only valid when\n    CASE_VECTOR_SHORTEN_MODE is defined, and only in an optimizing\n    compilation.  */\n-\n DEF_RTL_EXPR(ADDR_DIFF_VEC, \"addr_diff_vec\", \"eEee0\", RTX_EXTRA)\n \n /* Memory prefetch, with attributes supported on some targets."}, {"sha": "ea2a1ccc59904e68f4eb6ddfcbd3f16cbc6627d5", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -363,6 +363,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n  */\n #define RTX_PREV(X) ((INSN_P (X)       \t\t\t\\\n                       || NOTE_P (X)       \t\t\\\n+                      || JUMP_TABLE_DATA_P (X)\t\t\\\n                       || BARRIER_P (X)        \t\t\\\n                       || LABEL_P (X))    \t\t\\\n                      && PREV_INSN (X) != NULL           \\\n@@ -469,9 +470,7 @@ struct GTY((variable_size)) rtvec_def {\n #define BARRIER_P(X) (GET_CODE (X) == BARRIER)\n \n /* Predicate yielding nonzero iff X is a data for a jump table.  */\n-#define JUMP_TABLE_DATA_P(INSN) \\\n-  (JUMP_P (INSN) && (GET_CODE (PATTERN (INSN)) == ADDR_VEC || \\\n-\t\t     GET_CODE (PATTERN (INSN)) == ADDR_DIFF_VEC))\n+#define JUMP_TABLE_DATA_P(INSN) (GET_CODE (INSN) == JUMP_TABLE_DATA)\n \n /* Predicate yielding nonzero iff X is a return or simple_return.  */\n #define ANY_RETURN_P(X) \\\n@@ -849,8 +848,8 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n /* 1 if RTX is an insn that has been deleted.  */\n #define INSN_DELETED_P(RTX)\t\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK7(\"INSN_DELETED_P\", (RTX), DEBUG_INSN, INSN,\t\t\\\n-\t\t   CALL_INSN, JUMP_INSN,\t\t\t\t\\\n+  (RTL_FLAG_CHECK8(\"INSN_DELETED_P\", (RTX), DEBUG_INSN, INSN,\t\t\\\n+\t\t   CALL_INSN, JUMP_INSN, JUMP_TABLE_DATA,\t\t\\\n \t\t   CODE_LABEL, BARRIER, NOTE)->volatil)\n \n /* 1 if RTX is a call to a const function.  Built from ECF_CONST and\n@@ -869,7 +868,7 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n /* 1 if RTX is a call to a looping const or pure function.  Built from\n    ECF_LOOPING_CONST_OR_PURE and DECL_LOOPING_CONST_OR_PURE_P.  */\n-#define RTL_LOOPING_CONST_OR_PURE_CALL_P(RTX)\t\t\t\t\t\\\n+#define RTL_LOOPING_CONST_OR_PURE_CALL_P(RTX)\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"CONST_OR_PURE_CALL_P\", (RTX), CALL_INSN)->call)\n \n /* 1 if RTX is a call_insn for a sibling call.  */\n@@ -1881,6 +1880,7 @@ extern rtx emit_debug_insn (rtx);\n extern rtx emit_jump_insn (rtx);\n extern rtx emit_call_insn (rtx);\n extern rtx emit_label (rtx);\n+extern rtx emit_jump_table_data (rtx);\n extern rtx emit_barrier (void);\n extern rtx emit_note (enum insn_note);\n extern rtx emit_note_copy (rtx);"}, {"sha": "e8d32fd7ebae51069e924be1c76ac7f026b41005", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2449,7 +2449,7 @@ add_branch_dependences (rtx head, rtx tail)\n   insn = tail;\n   last = 0;\n   while (CALL_P (insn)\n-\t || JUMP_P (insn)\n+\t || JUMP_P (insn) || JUMP_TABLE_DATA_P (insn)\n \t || (NONJUMP_INSN_P (insn)\n \t     && (GET_CODE (PATTERN (insn)) == USE\n \t\t || GET_CODE (PATTERN (insn)) == CLOBBER\n@@ -2536,7 +2536,7 @@ add_branch_dependences (rtx head, rtx tail)\n      possible improvement for handling COND_EXECs in this scheduler: it\n      could remove always-true predicates.  */\n \n-  if (!reload_completed || ! JUMP_P (tail))\n+  if (!reload_completed || ! (JUMP_P (tail) || JUMP_TABLE_DATA_P (tail)))\n     return;\n \n   insn = tail;"}, {"sha": "1dc1420935518625dc31495d34fe13bf3d5ca6b5", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -666,6 +666,11 @@ print_insn (pretty_printer *pp, const_rtx x, int verbose)\n     case CODE_LABEL:\n       pp_printf (pp, \"L%d:\", INSN_UID (x));\n       break;\n+    case JUMP_TABLE_DATA:\n+      pp_string (pp, \"jump_table_data{\\n\");\n+      print_pattern (pp, PATTERN (x), verbose);\n+      pp_string (pp, \"}\");\n+      break;\n     case BARRIER:\n       pp_string (pp, \"barrier\");\n       break;"}, {"sha": "5a6138bdd323aa2367a99bd553e51737fb3f5c52", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -2025,13 +2025,14 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n   emit_label (table_label);\n \n   if (CASE_VECTOR_PC_RELATIVE || flag_pic)\n-    emit_jump_insn (gen_rtx_ADDR_DIFF_VEC (CASE_VECTOR_MODE,\n-\t\t\t\t\t   gen_rtx_LABEL_REF (Pmode, table_label),\n-\t\t\t\t\t   gen_rtvec_v (ncases, labelvec),\n-\t\t\t\t\t   const0_rtx, const0_rtx));\n+    emit_jump_table_data (gen_rtx_ADDR_DIFF_VEC (CASE_VECTOR_MODE,\n+\t\t\t\t\t\t gen_rtx_LABEL_REF (Pmode,\n+\t\t\t\t\t\t\t\t    table_label),\n+\t\t\t\t\t\t gen_rtvec_v (ncases, labelvec),\n+\t\t\t\t\t\t const0_rtx, const0_rtx));\n   else\n-    emit_jump_insn (gen_rtx_ADDR_VEC (CASE_VECTOR_MODE,\n-\t\t\t\t      gen_rtvec_v (ncases, labelvec)));\n+    emit_jump_table_data (gen_rtx_ADDR_VEC (CASE_VECTOR_MODE,\n+\t\t\t\t\t    gen_rtvec_v (ncases, labelvec)));\n \n   /* Record no drop-through after the table.  */\n   emit_barrier ();"}, {"sha": "85436ac7393dc682c4b7a1bd2120b149ebb08ef4", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397186076bb729eee63191034adbd7bc2528b22b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=397186076bb729eee63191034adbd7bc2528b22b", "patch": "@@ -474,7 +474,7 @@ default_invalid_within_doloop (const_rtx insn)\n   if (CALL_P (insn))\n     return \"Function call in loop.\";\n \n-  if (JUMP_TABLE_DATA_P (insn))\n+  if (tablejump_p (insn, NULL, NULL) || computed_jump_p (insn))\n     return \"Computed branch in the loop.\";\n \n   return NULL;"}]}