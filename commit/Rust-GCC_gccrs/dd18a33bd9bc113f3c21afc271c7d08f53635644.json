{"sha": "dd18a33bd9bc113f3c21afc271c7d08f53635644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQxOGEzM2JkOWJjMTEzZjNjMjFhZmMyNzFjN2QwOGY1MzYzNTY0NA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-06-03T17:28:33Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-06-03T17:28:33Z"}, "message": "trans.c (gfc_msg_bounds, [...]): Add strings for common runtime error messages.\n\n\t* trans.c (gfc_msg_bounds, gfc_msg_fault, gfc_msg_wrong_return):\n\tAdd strings for common runtime error messages.\n\t(gfc_trans_runtime_check): Add a locus argument, use a string\n\tand not a string tree for the message.\n\t* trans.h (gfc_trans_runtime_check): Change prototype accordingly.\n\t(gfc_msg_bounds, gfc_msg_fault, gfc_msg_wrong_return): Add proto.\n\t* trans-const.c (gfc_strconst_bounds, gfc_strconst_fault,\n\tgfc_strconst_wrong_return, gfc_strconst_current_filename): Remove.\n\t(gfc_init_constants): Likewise.\n\t* trans-const.h: Likewise.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Call to\n\t_gfortran_runtime_error has only one argument, the message string.\n\t* trans-array.h (gfc_conv_array_ref): Add a symbol argument and a\n\tlocus.\n\t* trans-array.c (gfc_trans_array_bound_check): Build precise\n\terror messages.\n\t(gfc_conv_array_ref): Use the new symbol argument and the locus\n\tto build more precise error messages.\n\t(gfc_conv_ss_startstride): More precise error messages.\n\t* trans-expr.c (gfc_conv_variable): Give symbol reference and\n\tlocus to gfc_conv_array_ref.\n\t(gfc_conv_function_call): Use the new prototype for\n\tgfc_trans_runtime_check.\n\t* trans-stmt.c (gfc_trans_goto): Build more precise error message.\n\t* trans-io.c (set_string): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Use new prototype\n\tfor gfc_trans_runtime_check.\n\nFrom-SVN: r114346", "tree": {"sha": "2bd078734b2fda2d0a8face0efc809fc5f9589ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd078734b2fda2d0a8face0efc809fc5f9589ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd18a33bd9bc113f3c21afc271c7d08f53635644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd18a33bd9bc113f3c21afc271c7d08f53635644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd18a33bd9bc113f3c21afc271c7d08f53635644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd18a33bd9bc113f3c21afc271c7d08f53635644/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3d90548b4590281766091564da0bb23515af75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3d90548b4590281766091564da0bb23515af75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3d90548b4590281766091564da0bb23515af75"}], "stats": {"total": 219, "additions": 137, "deletions": 82}, "files": [{"sha": "cc040a65cccdfeb3bc477bb3e930a8426d6f8a35", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -1,3 +1,33 @@\n+2006-06-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* trans.c (gfc_msg_bounds, gfc_msg_fault, gfc_msg_wrong_return):\n+\tAdd strings for common runtime error messages.\n+\t(gfc_trans_runtime_check): Add a locus argument, use a string\n+\tand not a string tree for the message.\n+\t* trans.h (gfc_trans_runtime_check): Change prototype accordingly.\n+\t(gfc_msg_bounds, gfc_msg_fault, gfc_msg_wrong_return): Add proto.\n+\t* trans-const.c (gfc_strconst_bounds, gfc_strconst_fault,\n+\tgfc_strconst_wrong_return, gfc_strconst_current_filename): Remove.\n+\t(gfc_init_constants): Likewise.\n+\t* trans-const.h: Likewise.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Call to\n+\t_gfortran_runtime_error has only one argument, the message string.\n+\t* trans-array.h (gfc_conv_array_ref): Add a symbol argument and a\n+\tlocus.\n+\t* trans-array.c (gfc_trans_array_bound_check): Build precise\n+\terror messages.\n+\t(gfc_conv_array_ref): Use the new symbol argument and the locus\n+\tto build more precise error messages.\n+\t(gfc_conv_ss_startstride): More precise error messages.\n+\t* trans-expr.c (gfc_conv_variable): Give symbol reference and\n+\tlocus to gfc_conv_array_ref.\n+\t(gfc_conv_function_call): Use the new prototype for\n+\tgfc_trans_runtime_check.\n+\t* trans-stmt.c (gfc_trans_goto): Build more precise error message.\n+\t* trans-io.c (set_string): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Use new prototype\n+\tfor gfc_trans_runtime_check.\n+\n 2006-06-01  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/27715"}, {"sha": "26d5febaa4ab92b62b1913256e1530c47cf5c5f4", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -1767,23 +1767,40 @@ gfc_conv_array_ubound (tree descriptor, int dim)\n static tree\n gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n)\n {\n-  tree cond;\n   tree fault;\n   tree tmp;\n+  char *msg;\n \n   if (!flag_bounds_check)\n     return index;\n \n   index = gfc_evaluate_now (index, &se->pre);\n+\n   /* Check lower bound.  */\n   tmp = gfc_conv_array_lbound (descriptor, n);\n   fault = fold_build2 (LT_EXPR, boolean_type_node, index, tmp);\n+  if (se->ss)\n+    asprintf (&msg, \"%s for array '%s', lower bound of dimension %d exceeded\",\n+\t      gfc_msg_fault, se->ss->expr->symtree->name, n+1);\n+  else\n+    asprintf (&msg, \"%s, lower bound of dimension %d exceeded\",\n+\t      gfc_msg_fault, n+1);\n+  gfc_trans_runtime_check (fault, msg, &se->pre,\n+\t\t\t   (se->ss ? &se->ss->expr->where : NULL));\n+  gfc_free (msg);\n+\n   /* Check upper bound.  */\n   tmp = gfc_conv_array_ubound (descriptor, n);\n-  cond = fold_build2 (GT_EXPR, boolean_type_node, index, tmp);\n-  fault = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault, cond);\n-\n-  gfc_trans_runtime_check (fault, gfc_strconst_fault, &se->pre);\n+  fault = fold_build2 (GT_EXPR, boolean_type_node, index, tmp);\n+  if (se->ss)\n+    asprintf (&msg, \"%s for array '%s', upper bound of dimension %d exceeded\",\n+\t      gfc_msg_fault, se->ss->expr->symtree->name, n+1);\n+  else\n+    asprintf (&msg, \"%s, upper bound of dimension %d exceeded\",\n+\t      gfc_msg_fault, n+1);\n+  gfc_trans_runtime_check (fault, msg, &se->pre,\n+\t\t\t   (se->ss ? &se->ss->expr->where : NULL));\n+  gfc_free (msg);\n \n   return index;\n }\n@@ -1919,13 +1936,13 @@ gfc_conv_tmp_array_ref (gfc_se * se)\n    a(i, j, k) = base[offset + i * stride[0] + j * stride[1] + k * stride[2]]*/\n \n void\n-gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n+gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n+\t\t    locus * where)\n {\n   int n;\n   tree index;\n   tree tmp;\n   tree stride;\n-  tree fault;\n   gfc_se indexse;\n \n   /* Handle scalarized references separately.  */\n@@ -1938,8 +1955,6 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n \n   index = gfc_index_zero_node;\n \n-  fault = gfc_index_zero_node;\n-\n   /* Calculate the offsets from all the dimensions.  */\n   for (n = 0; n < ar->dimen; n++)\n     {\n@@ -1953,20 +1968,27 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n \t{\n \t  /* Check array bounds.  */\n \t  tree cond;\n+\t  char *msg;\n \n \t  indexse.expr = gfc_evaluate_now (indexse.expr, &se->pre);\n \n \t  tmp = gfc_conv_array_lbound (se->expr, n);\n \t  cond = fold_build2 (LT_EXPR, boolean_type_node, \n \t\t\t      indexse.expr, tmp);\n-\t  fault =\n-\t    fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault, cond);\n+\t  asprintf (&msg, \"%s for array '%s', \"\n+\t            \"lower bound of dimension %d exceeded\", gfc_msg_fault,\n+\t\t    sym->name, n+1);\n+\t  gfc_trans_runtime_check (cond, msg, &se->pre, where);\n+\t  gfc_free (msg);\n \n \t  tmp = gfc_conv_array_ubound (se->expr, n);\n \t  cond = fold_build2 (GT_EXPR, boolean_type_node, \n \t\t\t      indexse.expr, tmp);\n-\t  fault =\n-\t    fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault, cond);\n+\t  asprintf (&msg, \"%s for array '%s', \"\n+\t            \"upper bound of dimension %d exceeded\", gfc_msg_fault,\n+\t\t    sym->name, n+1);\n+\t  gfc_trans_runtime_check (cond, msg, &se->pre, where);\n+\t  gfc_free (msg);\n \t}\n \n       /* Multiply the index by the stride.  */\n@@ -1978,9 +2000,6 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n       index = fold_build2 (PLUS_EXPR, gfc_array_index_type, index, tmp);\n     }\n \n-  if (flag_bounds_check)\n-    gfc_trans_runtime_check (fault, gfc_strconst_fault, &se->pre);\n-\n   tmp = gfc_conv_array_offset (se->expr);\n   if (!integer_zerop (tmp))\n     index = fold_build2 (PLUS_EXPR, gfc_array_index_type, index, tmp);\n@@ -2457,16 +2476,15 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n   if (flag_bounds_check)\n     {\n       stmtblock_t block;\n-      tree fault;\n       tree bound;\n       tree end;\n       tree size[GFC_MAX_DIMENSIONS];\n       gfc_ss_info *info;\n+      char *msg;\n       int dim;\n \n       gfc_start_block (&block);\n \n-      fault = boolean_false_node;\n       for (n = 0; n < loop->dimen; n++)\n \tsize[n] = NULL_TREE;\n \n@@ -2492,15 +2510,21 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      bound = gfc_conv_array_lbound (desc, dim);\n \t      tmp = info->start[n];\n \t      tmp = fold_build2 (LT_EXPR, boolean_type_node, tmp, bound);\n-\t      fault = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault,\n-\t\t\t\t   tmp);\n+\t      asprintf (&msg, \"%s, lower bound of dimension %d of array '%s'\"\n+\t\t\t\" exceeded\", gfc_msg_bounds, n+1,\n+\t\t\tss->expr->symtree->name);\n+\t      gfc_trans_runtime_check (tmp, msg, &block, &ss->expr->where);\n+\t      gfc_free (msg);\n \n \t      /* Check the upper bound.  */\n \t      bound = gfc_conv_array_ubound (desc, dim);\n \t      end = gfc_conv_section_upper_bound (ss, n, &block);\n \t      tmp = fold_build2 (GT_EXPR, boolean_type_node, end, bound);\n-\t      fault = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault,\n-\t\t\t\t   tmp);\n+\t      asprintf (&msg, \"%s, upper bound of dimension %d of array '%s'\"\n+\t\t\t\" exceeded\", gfc_msg_bounds, n+1,\n+\t\t\tss->expr->symtree->name);\n+\t      gfc_trans_runtime_check (tmp, msg, &block, &ss->expr->where);\n+\t      gfc_free (msg);\n \n \t      /* Check the section sizes match.  */\n \t      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type, end,\n@@ -2513,14 +2537,16 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t{\n \t\t  tmp =\n \t\t    fold_build2 (NE_EXPR, boolean_type_node, tmp, size[n]);\n-\t\t  fault =\n-\t\t    build2 (TRUTH_OR_EXPR, boolean_type_node, fault, tmp);\n+\t\t  asprintf (&msg, \"%s, size mismatch for dimension %d \"\n+\t\t\t    \"of array '%s'\", gfc_msg_bounds, n+1,\n+\t\t\t    ss->expr->symtree->name);\n+\t\t  gfc_trans_runtime_check (tmp, msg, &block, &ss->expr->where);\n+\t\t  gfc_free (msg);\n \t\t}\n \t      else\n \t\tsize[n] = gfc_evaluate_now (tmp, &block);\n \t    }\n \t}\n-      gfc_trans_runtime_check (fault, gfc_strconst_bounds, &block);\n \n       tmp = gfc_finish_block (&block);\n       gfc_add_expr_to_block (&loop->pre, tmp);\n@@ -3709,13 +3735,17 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n \t  if (checkparm)\n \t    {\n \t      /* Check (ubound(a) - lbound(a) == ubound(b) - lbound(b)).  */\n+\t      char * msg;\n \n \t      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t\t ubound, lbound);\n               stride2 = build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t       dubound, dlbound);\n               tmp = fold_build2 (NE_EXPR, gfc_array_index_type, tmp, stride2);\n-\t      gfc_trans_runtime_check (tmp, gfc_strconst_bounds, &block);\n+\t      asprintf (&msg, \"%s for dimension %d of array '%s'\",\n+\t\t\tgfc_msg_bounds, n+1, sym->name);\n+\t      gfc_trans_runtime_check (tmp, msg, &block, NULL);\n+\t      gfc_free (msg);\n \t    }\n \t}\n       else"}, {"sha": "ae085346643313a62961a5d731ee0564517879d8", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -86,7 +86,7 @@ void gfc_conv_resolve_dependencies (gfc_loopinfo *, gfc_ss *, gfc_ss *);\n tree gfc_build_null_descriptor (tree);\n \n /* Get a single array element.  */\n-void gfc_conv_array_ref (gfc_se *, gfc_array_ref *);\n+void gfc_conv_array_ref (gfc_se *, gfc_array_ref *, gfc_symbol *, locus *);\n /* Translate a reference to a temporary array.  */\n void gfc_conv_tmp_array_ref (gfc_se * se);\n /* Translate a reference to an array temporary.  */"}, {"sha": "936dd6459afcd405a8cce08fd83984b81f205ff1", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -33,12 +33,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"trans-const.h\"\n #include \"trans-types.h\"\n \n-/* String constants.  */\n-tree gfc_strconst_bounds;\n-tree gfc_strconst_fault;\n-tree gfc_strconst_wrong_return;\n-tree gfc_strconst_current_filename;\n-\n tree gfc_rank_cst[GFC_MAX_DIMENSIONS + 1];\n \n /* Build a constant with given type from an int_cst.  */\n@@ -154,17 +148,6 @@ gfc_init_constants (void)\n \n   for (n = 0; n <= GFC_MAX_DIMENSIONS; n++)\n     gfc_rank_cst[n] = build_int_cst (gfc_array_index_type, n);\n-\n-  gfc_strconst_bounds = gfc_build_cstring_const (\"Array bound mismatch\");\n-\n-  gfc_strconst_fault =\n-    gfc_build_cstring_const (\"Array reference out of bounds\");\n-\n-  gfc_strconst_wrong_return =\n-    gfc_build_cstring_const (\"Incorrect function return value\");\n-\n-  gfc_strconst_current_filename =\n-    gfc_build_cstring_const (gfc_source_file);\n }\n \n /* Converts a GMP integer into a backend tree node.  */"}, {"sha": "c01316e0a7d0163befe82f8ea618205cdc7003e8", "filename": "gcc/fortran/trans-const.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.h?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -49,12 +49,6 @@ void gfc_init_constants (void);\n /* Build a constant with given type from an int_cst.  */\n tree gfc_build_const (tree, tree);\n \n-/* String constants.  */\n-extern GTY(()) tree gfc_strconst_current_filename;\n-extern GTY(()) tree gfc_strconst_bounds;\n-extern GTY(()) tree gfc_strconst_fault;\n-extern GTY(()) tree gfc_strconst_wrong_return;\n-\n /* Integer constants 0..GFC_MAX_DIMENSIONS.  */\n extern GTY(()) tree gfc_rank_cst[GFC_MAX_DIMENSIONS + 1];\n "}, {"sha": "30d51b996ca6847d4b2b7263c6ff2d1e29801e34", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -2275,10 +2275,7 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_runtime_error =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"runtime_error\")),\n-\t\t\t\t     void_type_node,\n-\t\t\t\t     3,\n-\t\t\t\t     pchar_type_node, pchar_type_node,\n-\t\t\t\t     gfc_int4_type_node);\n+\t\t\t\t     void_type_node, 1, pchar_type_node);\n   /* The runtime_error function does not return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_runtime_error) = 1;\n "}, {"sha": "c0422b1aaf89ba20b015769f44ed430990743be8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -472,7 +472,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t      && ref->next == NULL && (se->descriptor_only))\n \t    return;\n \n-\t  gfc_conv_array_ref (se, &ref->u.ar);\n+\t  gfc_conv_array_ref (se, &ref->u.ar, sym, &expr->where);\n \t  /* Return a pointer to an element.  */\n \t  break;\n \n@@ -2153,7 +2153,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t\t  tmp = gfc_conv_descriptor_data_get (info->descriptor);\n \t\t  tmp = fold_build2 (NE_EXPR, boolean_type_node,\n \t\t\t\t     tmp, info->data);\n-\t\t  gfc_trans_runtime_check (tmp, gfc_strconst_fault, &se->pre);\n+\t\t  gfc_trans_runtime_check (tmp, gfc_msg_fault, &se->pre, NULL);\n \t\t}\n \t      se->expr = info->descriptor;\n \t      /* Bundle in the string length.  */"}, {"sha": "e8fe286e40209136a20ab9639a444ffcee4706b9", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -761,7 +761,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n           tmp = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (TREE_TYPE (desc))];\n           tmp = fold_build2 (GE_EXPR, boolean_type_node, bound, tmp);\n           cond = fold_build2 (TRUTH_ORIF_EXPR, boolean_type_node, cond, tmp);\n-          gfc_trans_runtime_check (cond, gfc_strconst_fault, &se->pre);\n+          gfc_trans_runtime_check (cond, gfc_msg_fault, &se->pre, NULL);\n         }\n     }\n "}, {"sha": "e56232140a40caf3d6a8312dae546706459122fe", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -518,7 +518,6 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n {\n   gfc_se se;\n   tree tmp;\n-  tree msg;\n   tree io;\n   tree len;\n   gfc_st_parameter_field *p = &st_parameter_field[type];\n@@ -536,13 +535,18 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n   /* Integer variable assigned a format label.  */\n   if (e->ts.type == BT_INTEGER && e->symtree->n.sym->attr.assign == 1)\n     {\n+      char * msg;\n+\n       gfc_conv_label_variable (&se, e);\n-      msg =\n-        gfc_build_cstring_const (\"Assigned label is not a format label\");\n       tmp = GFC_DECL_STRING_LEN (se.expr);\n       tmp = fold_build2 (LT_EXPR, boolean_type_node,\n \t\t\t tmp, build_int_cst (TREE_TYPE (tmp), 0));\n-      gfc_trans_runtime_check (tmp, msg, &se.pre);\n+\n+      asprintf(&msg, \"Label assigned to variable '%s' is not a format label\",\n+\t       e->symtree->name);\n+      gfc_trans_runtime_check (tmp, msg, &se.pre, &e->where);\n+      gfc_free (msg);\n+\n       gfc_add_modify_expr (&se.pre, io,\n \t\t fold_convert (TREE_TYPE (io), GFC_DECL_ASSIGN_ADDR (se.expr)));\n       gfc_add_modify_expr (&se.pre, len, GFC_DECL_STRING_LEN (se.expr));"}, {"sha": "ef7d680bd9cf048761bf7daf00ec2701654a9782", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"toplev.h\"\n #include \"real.h\"\n #include \"gfortran.h\"\n+#include \"flags.h\"\n #include \"trans.h\"\n #include \"trans-stmt.h\"\n #include \"trans-types.h\"\n@@ -139,27 +140,24 @@ gfc_trans_label_assign (gfc_code * code)\n tree\n gfc_trans_goto (gfc_code * code)\n {\n+  locus loc = code->loc;\n   tree assigned_goto;\n   tree target;\n   tree tmp;\n-  tree assign_error;\n-  tree range_error;\n   gfc_se se;\n \n-\n   if (code->label != NULL)\n     return build1_v (GOTO_EXPR, gfc_get_label_decl (code->label));\n \n   /* ASSIGNED GOTO.  */\n   gfc_init_se (&se, NULL);\n   gfc_start_block (&se.pre);\n   gfc_conv_label_variable (&se, code->expr);\n-  assign_error =\n-    gfc_build_cstring_const (\"Assigned label is not a target label\");\n   tmp = GFC_DECL_STRING_LEN (se.expr);\n   tmp = fold_build2 (NE_EXPR, boolean_type_node, tmp,\n \t\t     build_int_cst (TREE_TYPE (tmp), -1));\n-  gfc_trans_runtime_check (tmp, assign_error, &se.pre);\n+  gfc_trans_runtime_check (tmp, \"Assigned label is not a target label\",\n+\t\t\t   &se.pre, &loc);\n \n   assigned_goto = GFC_DECL_ASSIGN_ADDR (se.expr);\n \n@@ -172,8 +170,6 @@ gfc_trans_goto (gfc_code * code)\n     }\n \n   /* Check the label list.  */\n-  range_error = gfc_build_cstring_const (\"Assigned label is not in the list\");\n-\n   do\n     {\n       target = gfc_get_label_decl (code->label);\n@@ -186,7 +182,9 @@ gfc_trans_goto (gfc_code * code)\n       code = code->block;\n     }\n   while (code != NULL);\n-  gfc_trans_runtime_check (boolean_true_node, range_error, &se.pre);\n+  gfc_trans_runtime_check (boolean_true_node,\n+\t\t\t   \"Assigned label is not in the list\", &se.pre, &loc);\n+\n   return gfc_finish_block (&se.pre); \n }\n "}, {"sha": "d4856fde02be5aa48d36eca1204d7ccabe1d3c5f", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -46,6 +46,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n static gfc_file *gfc_current_backend_file;\n \n+char gfc_msg_bounds[] = N_(\"Array bound mismatch\");\n+char gfc_msg_fault[] = N_(\"Array reference out of bounds\");\n+char gfc_msg_wrong_return[] = N_(\"Incorrect function return value\");\n+\n \n /* Advance along TREE_CHAIN n times.  */\n \n@@ -302,32 +306,40 @@ gfc_build_array_ref (tree base, tree offset)\n /* Generate a runtime error if COND is true.  */\n \n void\n-gfc_trans_runtime_check (tree cond, tree msg, stmtblock_t * pblock)\n+gfc_trans_runtime_check (tree cond, const char * msgid, stmtblock_t * pblock,\n+\t\t\t locus * where)\n {\n   stmtblock_t block;\n   tree body;\n   tree tmp;\n   tree args;\n+  char * message;\n+  int line;\n \n   if (integer_zerop (cond))\n     return;\n \n   /* The code to generate the error.  */\n   gfc_start_block (&block);\n \n-  gcc_assert (TREE_CODE (msg) == STRING_CST);\n-\n-  TREE_USED (msg) = 1;\n+  if (where)\n+    {\n+#ifdef USE_MAPPED_LOCATION\n+      line = LOCATION_LINE (where->lb->location);\n+#else \n+      line = where->lb->linenum;\n+#endif\n+      asprintf (&message, \"%s (in file '%s', at line %d)\", _(msgid),\n+\t\twhere->lb->file->filename, line);\n+    }\n+  else\n+    asprintf (&message, \"%s (in file '%s', around line %d)\", _(msgid),\n+\t      gfc_source_file, input_line + 1);\n \n-  tmp = gfc_build_addr_expr (pchar_type_node, msg);\n+  tmp = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  gfc_free(message);\n   args = gfc_chainon_list (NULL_TREE, tmp);\n \n-  tmp = gfc_build_addr_expr (pchar_type_node, gfc_strconst_current_filename);\n-  args = gfc_chainon_list (args, tmp);\n-\n-  tmp = build_int_cst (NULL_TREE, input_line);\n-  args = gfc_chainon_list (args, tmp);\n-\n   tmp = build_function_call_expr (gfor_fndecl_runtime_error, args);\n   gfc_add_expr_to_block (&block, tmp);\n "}, {"sha": "738ed0261bd531b7c35bcb35c4457d0cc5aeea60", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd18a33bd9bc113f3c21afc271c7d08f53635644/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=dd18a33bd9bc113f3c21afc271c7d08f53635644", "patch": "@@ -423,7 +423,7 @@ void gfc_generate_constructors (void);\n bool get_array_ctor_strlen (gfc_constructor *, tree *);\n \n /* Generate a runtime error check.  */\n-void gfc_trans_runtime_check (tree, tree, stmtblock_t *);\n+void gfc_trans_runtime_check (tree, const char *, stmtblock_t *, locus *);\n \n /* Generate code for an assignment, includes scalarization.  */\n tree gfc_trans_assignment (gfc_expr *, gfc_expr *);\n@@ -674,4 +674,11 @@ void gfc_finish_interface_mapping (gfc_interface_mapping *,\n void gfc_apply_interface_mapping (gfc_interface_mapping *,\n \t\t\t\t  gfc_se *, gfc_expr *);\n \n+\n+/* Standard error messages used in all the trans-*.c files.  */\n+extern char gfc_msg_bounds[];\n+extern char gfc_msg_fault[];\n+extern char gfc_msg_wrong_return[];\n+\n+\n #endif /* GFC_TRANS_H */"}]}