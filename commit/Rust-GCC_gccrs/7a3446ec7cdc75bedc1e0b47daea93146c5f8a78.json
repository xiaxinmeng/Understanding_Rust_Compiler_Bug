{"sha": "7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzNDQ2ZWM3Y2RjNzViZWRjMWUwYjQ3ZGFlYTkzMTQ2YzVmOGE3OA==", "commit": {"author": {"name": "Joshua Kinard", "email": "kumba@gentoo.org", "date": "2008-10-06T19:41:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-06T19:41:10Z"}, "message": "invoke.texi: List r1x000 family under the -march MIPS option.\n\ngcc/\n2008-10-06  Joshua Kinard  <kumba@gentoo.org>\n\n\t* doc/invoke.texi: List r1x000 family under the -march MIPS option.\n\t* config/mips/mips.h (PROCESSOR_R10000): New processor_type.\n\t* config/mips/mips.c (mips_cpu_info_table): Add r10000, r12000,\n\tr14000 and r16000.\n\t(mips_rtx_cost_data): Add a PROCESSOR_R10000 entry.\n\t(mips_issue_rate): Handle PROCESSOR_R10000.\n\t* config/mips/mips.md (cpu): Add r10000.\n\tInclude r10000.md.\n\t* config/mips/10000.md: New file.\n\nFrom-SVN: r140913", "tree": {"sha": "a9a9458f874bbfcf6766186c8e82864c8fccbd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a9458f874bbfcf6766186c8e82864c8fccbd35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/comments", "author": {"login": "Kumba42", "id": 29685010, "node_id": "MDQ6VXNlcjI5Njg1MDEw", "avatar_url": "https://avatars.githubusercontent.com/u/29685010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kumba42", "html_url": "https://github.com/Kumba42", "followers_url": "https://api.github.com/users/Kumba42/followers", "following_url": "https://api.github.com/users/Kumba42/following{/other_user}", "gists_url": "https://api.github.com/users/Kumba42/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kumba42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kumba42/subscriptions", "organizations_url": "https://api.github.com/users/Kumba42/orgs", "repos_url": "https://api.github.com/users/Kumba42/repos", "events_url": "https://api.github.com/users/Kumba42/events{/privacy}", "received_events_url": "https://api.github.com/users/Kumba42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "944258ebc661d4e3ade20c12dfa5ae5101b87db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944258ebc661d4e3ade20c12dfa5ae5101b87db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944258ebc661d4e3ade20c12dfa5ae5101b87db4"}], "stats": {"total": 292, "additions": 290, "deletions": 2}, "files": [{"sha": "b983fe556dcecd39f831f89d4d800177ab3052e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -1,3 +1,15 @@\n+2008-10-06  Joshua Kinard  <kumba@gentoo.org>\n+\n+\t* doc/invoke.texi: List r1x000 family under the -march MIPS option.\n+\t* config/mips/mips.h (PROCESSOR_R10000): New processor_type.\n+\t* config/mips/mips.c (mips_cpu_info_table): Add r10000, r12000,\n+\tr14000 and r16000.\n+\t(mips_rtx_cost_data): Add a PROCESSOR_R10000 entry.\n+\t(mips_issue_rate): Handle PROCESSOR_R10000.\n+\t* config/mips/mips.md (cpu): Add r10000.\n+\tInclude r10000.md.\n+\t* config/mips/10000.md: New file.\n+\n 2008-10-06  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_find_base_term): Declare."}, {"sha": "ad21e9e936e52806f4b31930708e741748c87569", "filename": "gcc/config/mips/10000.md", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2F10000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2F10000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F10000.md?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -0,0 +1,253 @@\n+;; DFA-based pipeline description for the VR1x000.\n+;;   Copyright (C) 2005, 2006, 2008 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; R12K/R14K/R16K are derivatives of R10K, thus copy its description\n+;; until specific tuning for each is added.\n+\n+;; R10000 has an int queue, fp queue, address queue.\n+;; The int queue feeds ALU1 and ALU2.\n+;; The fp queue feeds the fp-adder and fp-multiplier.\n+;; The addr queue feeds the Load/Store unit.\n+;;\n+;; However, we define the fp-adder and fp-multiplier as\n+;; separate automatons, because the fp-multiplier is\n+;; divided into fp-multiplier, fp-division, and\n+;; fp-squareroot units, all of which share the same\n+;; issue and completion logic, yet can operate in\n+;; parallel.\n+;;\n+;; This is based on the model described in the R10K Manual\n+;; and it helps to reduce the size of the automata.\n+(define_automaton \"r10k_a_int, r10k_a_fpadder, r10k_a_addr,\n+                   r10k_a_fpmpy, r10k_a_fpdiv, r10k_a_fpsqrt\")\n+\n+(define_cpu_unit \"r10k_alu1\" \"r10k_a_int\")\n+(define_cpu_unit \"r10k_alu2\" \"r10k_a_int\")\n+(define_cpu_unit \"r10k_fpadd\" \"r10k_a_fpadder\")\n+(define_cpu_unit \"r10k_fpmpy\" \"r10k_a_fpmpy\")\n+(define_cpu_unit \"r10k_fpdiv\" \"r10k_a_fpdiv\")\n+(define_cpu_unit \"r10k_fpsqrt\" \"r10k_a_fpsqrt\")\n+(define_cpu_unit \"r10k_loadstore\" \"r10k_a_addr\")\n+\n+\n+;; R10k Loads and Stores.\n+(define_insn_reservation \"r10k_load\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"load,prefetch,prefetchx\"))\n+  \"r10k_loadstore\")\n+\n+(define_insn_reservation \"r10k_store\" 0\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"store,fpstore,fpidxstore\"))\n+  \"r10k_loadstore\")\n+\n+(define_insn_reservation \"r10k_fpload\" 3\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r10k_loadstore\")\n+\n+\n+;; Integer add/sub + logic ops, and mt hi/lo can be done by alu1 or alu2.\n+;; Miscellaneous arith goes here too (this is a guess).\n+(define_insn_reservation \"r10k_arith\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"arith,mthilo,slt,clz,const,nop,trap,logical\"))\n+  \"r10k_alu1 | r10k_alu2\")\n+\n+;; We treat mfhilo differently, because we need to know when\n+;; it's HI and when it's LO.\n+(define_insn_reservation \"r10k_mfhi\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"mfhilo\")\n+            (not (match_operand 1 \"lo_operand\"))))\n+  \"r10k_alu1 | r10k_alu2\")\n+\n+(define_insn_reservation \"r10k_mflo\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"mfhilo\")\n+            (match_operand 1 \"lo_operand\")))\n+  \"r10k_alu1 | r10k_alu2\")\n+\n+\n+;; ALU1 handles shifts, branch eval, and condmove.\n+;;\n+;; Brancher is separate, but part of ALU1, but can only\n+;; do one branch per cycle (is this even implementable?).\n+;;\n+;; Unsure if the brancher handles jumps and calls as well, but since\n+;; they're related, we'll add them here for now.\n+(define_insn_reservation \"r10k_brancher\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"shift,branch,jump,call\"))\n+  \"r10k_alu1\")\n+\n+(define_insn_reservation \"r10k_int_cmove\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"condmove\")\n+            (eq_attr \"mode\" \"SI,DI\")))\n+  \"r10k_alu1\")\n+\n+\n+;; Coprocessor Moves.\n+;; mtc1/dmtc1 are handled by ALU1.\n+;; mfc1/dmfc1 are handled by the fp-multiplier.\n+(define_insn_reservation \"r10k_mt_xfer\" 3\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"r10k_alu1\")\n+\n+(define_insn_reservation \"r10k_mf_xfer\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"r10k_fpmpy\")\n+\n+\n+;; Only ALU2 does int multiplications and divisions.\n+;;\n+;; According to the Vr10000 series user manual,\n+;; integer mult and div insns can be issued one\n+;; cycle earlier if using register Lo.  We model\n+;; this by using the Lo value by default, as it\n+;; is the more common value, and use a bypass\n+;; for the Hi value when needed.\n+;;\n+;; Also of note, There are different latencies\n+;; for MULT/DMULT (Lo 5/Hi 6) and MULTU/DMULTU (Lo 6/Hi 7).\n+;; However, gcc does not have separate types\n+;; for these insns.  Thus to strike a balance,\n+;; we use the Hi latency value for imul\n+;; operations until the imul type can be split.\n+(define_insn_reservation \"r10k_imul_single\" 6\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"imul,imul3\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"r10k_alu2 * 6\")\n+\n+(define_insn_reservation \"r10k_imul_double\" 10\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"imul,imul3\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"r10k_alu2 * 10\")\n+\n+;; Divides keep ALU2 busy.\n+(define_insn_reservation \"r10k_idiv_single\" 34\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"r10k_alu2 * 35\")\n+\n+(define_insn_reservation \"r10k_idiv_double\" 66\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"r10k_alu2 * 67\")\n+\n+(define_bypass 35 \"r10k_idiv_single\" \"r10k_mfhi\")\n+(define_bypass 67 \"r10k_idiv_double\" \"r10k_mfhi\")\n+\n+\n+;; Floating point add/sub, mul, abs value, neg, comp, & moves.\n+(define_insn_reservation \"r10k_fp_miscadd\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg,fcmp\"))\n+  \"r10k_fpadd\")\n+\n+(define_insn_reservation \"r10k_fp_miscmul\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"fmul,fmove\"))\n+  \"r10k_fpmpy\")\n+\n+(define_insn_reservation \"r10k_fp_cmove\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"condmove\")\n+            (eq_attr \"mode\" \"SF,DF\")))\n+  \"r10k_fpmpy\")\n+\n+\n+;; The fcvt.s.[wl] insn has latency 4, repeat 2.\n+;; All other fcvt insns have latency 2, repeat 1.\n+(define_insn_reservation \"r10k_fcvt_single\" 4\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+            (eq_attr \"cnv_mode\" \"I2S\")))\n+  \"r10k_fpadd * 2\")\n+\n+(define_insn_reservation \"r10k_fcvt_other\" 2\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+            (eq_attr \"cnv_mode\" \"!I2S\")))\n+  \"r10k_fpadd\")\n+\n+\n+;; Run the fmadd insn through fp-adder first, then fp-multiplier.\n+;;\n+;; The latency for fmadd is 2 cycles if the result is used\n+;; by another fmadd instruction.\n+(define_insn_reservation \"r10k_fmadd\" 4\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"fmadd\"))\n+  \"r10k_fpadd, r10k_fpmpy\")\n+\n+(define_bypass 2 \"r10k_fmadd\" \"r10k_fmadd\")\n+\n+\n+;; Floating point Divisions & square roots.\n+(define_insn_reservation \"r10k_fdiv_single\" 12\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fdiv,frdiv\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"r10k_fpdiv * 14\")\n+\n+(define_insn_reservation \"r10k_fdiv_double\" 19\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fdiv,frdiv\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"r10k_fpdiv * 21\")\n+\n+(define_insn_reservation \"r10k_fsqrt_single\" 18\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"r10k_fpsqrt * 20\")\n+\n+(define_insn_reservation \"r10k_fsqrt_double\" 33\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"fsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"r10k_fpsqrt * 35\")\n+\n+(define_insn_reservation \"r10k_frsqrt_single\" 30\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"r10k_fpsqrt * 20\")\n+\n+(define_insn_reservation \"r10k_frsqrt_double\" 52\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"r10k_fpsqrt * 35\")\n+\n+\n+;; Handle unknown/multi insns here (this is a guess).\n+(define_insn_reservation \"r10k_unknown\" 1\n+  (and (eq_attr \"cpu\" \"r10000\")\n+       (eq_attr \"type\" \"unknown,multi\"))\n+  \"r10k_alu1 + r10k_alu2\")"}, {"sha": "597f1edd567104af9f0d3cf430bef52fee15304e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -607,6 +607,10 @@ static const struct mips_cpu_info mips_cpu_info_table[] = {\n \n   /* MIPS IV processors. */\n   { \"r8000\", PROCESSOR_R8000, 4, 0 },\n+  { \"r10000\", PROCESSOR_R10000, 4, 0 },\n+  { \"r12000\", PROCESSOR_R10000, 4, 0 },\n+  { \"r14000\", PROCESSOR_R10000, 4, 0 },\n+  { \"r16000\", PROCESSOR_R10000, 4, 0 },\n   { \"vr5000\", PROCESSOR_R5000, 4, 0 },\n   { \"vr5400\", PROCESSOR_R5400, 4, 0 },\n   { \"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY },\n@@ -1015,6 +1019,19 @@ static const struct mips_rtx_cost_data mips_rtx_cost_data[PROCESSOR_MAX] = {\n \t\t     1,           /* branch_cost */\n \t\t     4            /* memory_latency */\n   },\n+  { /* R1x000 */\n+    COSTS_N_INSNS (2),            /* fp_add */\n+    COSTS_N_INSNS (2),            /* fp_mult_sf */\n+    COSTS_N_INSNS (2),            /* fp_mult_df */\n+    COSTS_N_INSNS (12),           /* fp_div_sf */\n+    COSTS_N_INSNS (19),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (9),            /* int_mult_di */\n+    COSTS_N_INSNS (34),           /* int_div_si */\n+    COSTS_N_INSNS (66),           /* int_div_di */\n+\t\t     1,           /* branch_cost */\n+\t\t     4            /* memory_latency */\n+  },\n   { /* SB1 */\n     /* These costs are the same as the SB-1A below.  */\n     COSTS_N_INSNS (4),            /* fp_add */\n@@ -10369,7 +10386,10 @@ mips_issue_rate (void)\n \t but in reality only a maximum of 3 insns can be issued as\n \t floating-point loads and stores also require a slot in the\n \t AGEN pipe.  */\n-     return 4;\n+    case PROCESSOR_R10000:\n+      /* All R10K Processors are quad-issue (being the first MIPS\n+         processors to support this feature). */\n+      return 4;\n \n     case PROCESSOR_20KC:\n     case PROCESSOR_R4130:"}, {"sha": "b0f39dc9a57ce13e197a99009b6a3cb92a6048ee", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -67,6 +67,7 @@ enum processor_type {\n   PROCESSOR_R7000,\n   PROCESSOR_R8000,\n   PROCESSOR_R9000,\n+  PROCESSOR_R10000,\n   PROCESSOR_SB1,\n   PROCESSOR_SB1A,\n   PROCESSOR_SR71000,"}, {"sha": "6ae6c0bb78fbdf0b81e6a56b6a838acf551a4767", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -560,7 +560,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,74kf3_2,loongson_2e,loongson_2f,m4k,octeon,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000,xlr\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,74kf3_2,loongson_2e,loongson_2f,m4k,octeon,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,r10000,sb1,sb1a,sr71000,xlr\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -935,6 +935,7 @@\n (include \"6000.md\")\n (include \"7000.md\")\n (include \"9000.md\")\n+(include \"10000.md\")\n (include \"loongson2ef.md\")\n (include \"octeon.md\")\n (include \"sb1.md\")"}, {"sha": "49b5e5017b3c30248b13b8655bdcd814ecbb1951", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3446ec7cdc75bedc1e0b47daea93146c5f8a78/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7a3446ec7cdc75bedc1e0b47daea93146c5f8a78", "patch": "@@ -12231,6 +12231,7 @@ The processor names are:\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n @samp{r4600}, @samp{r4650}, @samp{r6000}, @samp{r8000},\n @samp{rm7000}, @samp{rm9000},\n+@samp{r10000}, @samp{r12000}, @samp{r14000}, @samp{r16000},\n @samp{sb1},\n @samp{sr71000},\n @samp{vr4100}, @samp{vr4111}, @samp{vr4120}, @samp{vr4130}, @samp{vr4300},"}]}