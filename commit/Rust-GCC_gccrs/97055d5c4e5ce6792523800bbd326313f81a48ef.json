{"sha": "97055d5c4e5ce6792523800bbd326313f81a48ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwNTVkNWM0ZTVjZTY3OTI1MjM4MDBiYmQzMjYzMTNmODFhNDhlZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-18T18:27:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-18T18:27:48Z"}, "message": "decl.c (duplicate_decls): Propagate DECL_UNINLINABLE.\n\n* decl.c (duplicate_decls): Propagate DECL_UNINLINABLE.\nWarn when merging inline with attribute noinline.\n(start_decl, start_function): Warn if inline and attribute\nnoinline appear in the same declaration.\n\nFrom-SVN: r46333", "tree": {"sha": "fe348fad82fd390d947736dda47c32dc99de8dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe348fad82fd390d947736dda47c32dc99de8dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97055d5c4e5ce6792523800bbd326313f81a48ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97055d5c4e5ce6792523800bbd326313f81a48ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97055d5c4e5ce6792523800bbd326313f81a48ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97055d5c4e5ce6792523800bbd326313f81a48ef/comments", "author": null, "committer": null, "parents": [{"sha": "c586d12794533da0614e70b7d17cd01ab8ebf049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c586d12794533da0614e70b7d17cd01ab8ebf049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c586d12794533da0614e70b7d17cd01ab8ebf049"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "8a3f10bacaa724fc08752f3188d191f957b6a910", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97055d5c4e5ce6792523800bbd326313f81a48ef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97055d5c4e5ce6792523800bbd326313f81a48ef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=97055d5c4e5ce6792523800bbd326313f81a48ef", "patch": "@@ -1,3 +1,10 @@\n+2001-10-18  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* decl.c (duplicate_decls): Propagate DECL_UNINLINABLE.\n+\tWarn when merging inline with attribute noinline.\n+\t(start_decl, start_function): Warn if inline and attribute\n+\tnoinline appear in the same declaration.\n+\n 2001-10-16  H.J. Lu <hjl@gnu.org>\n \n \t* cp-tree.h (BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK): Defined"}, {"sha": "bd64bc49101309fc45eceb1a57b703d9fb1494ce", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97055d5c4e5ce6792523800bbd326313f81a48ef/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97055d5c4e5ce6792523800bbd326313f81a48ef/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=97055d5c4e5ce6792523800bbd326313f81a48ef", "patch": "@@ -3093,6 +3093,39 @@ duplicate_decls (newdecl, olddecl)\n       || TREE_TYPE (olddecl) == error_mark_node)\n     types_match = 1;\n \n+  if (DECL_P (olddecl)\n+      && TREE_CODE (newdecl) == FUNCTION_DECL\n+      && TREE_CODE (olddecl) == FUNCTION_DECL\n+      && (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl)))\n+    {\n+      if (DECL_DECLARED_INLINE_P (newdecl)\n+\t  && DECL_UNINLINABLE (newdecl)\n+\t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n+\t/* Already warned elsewhere.  */;\n+      else if (DECL_DECLARED_INLINE_P (olddecl)\n+\t       && DECL_UNINLINABLE (olddecl)\n+\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+\t/* Already warned.  */;\n+      else if (DECL_DECLARED_INLINE_P (newdecl)\n+\t       && DECL_UNINLINABLE (olddecl)\n+\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+\t{\n+\t  warning_with_decl (newdecl,\n+\t\t\t     \"function `%s' redeclared as inline\");\n+\t  warning_with_decl (olddecl,\n+\t\t\t     \"previous declaration of function `%s' with attribute noinline\");\n+\t}\n+      else if (DECL_DECLARED_INLINE_P (olddecl)\n+\t       && DECL_UNINLINABLE (newdecl)\n+\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n+\t{\n+\t  warning_with_decl (newdecl,\n+\t\t\t     \"function `%s' redeclared with attribute noinline\");\n+\t  warning_with_decl (olddecl,\n+\t\t\t     \"previous declaration of function `%s' was inline\");\n+\t}\n+    }\n+\n   /* Check for redeclaration and other discrepancies. */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n       && DECL_ARTIFICIAL (olddecl))\n@@ -3640,6 +3673,9 @@ duplicate_decls (newdecl, olddecl)\n \tDECL_INLINE (olddecl) = 1;\n       DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n \n+      DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n+\t= (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n+\n       /* Preserve abstractness on cloned [cd]tors.  */\n       DECL_ABSTRACT (newdecl) = DECL_ABSTRACT (olddecl);\n \n@@ -7132,6 +7168,13 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   cplus_decl_attributes (&decl, attributes, 0);\n \n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && DECL_DECLARED_INLINE_P (decl)\n+      && DECL_UNINLINABLE (decl)\n+      && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n+    warning_with_decl (decl,\n+\t\t       \"inline function `%s' given attribute noinline\");\n+\n   if (context && COMPLETE_TYPE_P (complete_type (context)))\n     {\n       push_nested_class (context, 2);\n@@ -13328,6 +13371,11 @@ start_function (declspecs, declarator, attrs, flags)\n \t}\n     }\n \n+  if (DECL_DECLARED_INLINE_P (decl1)\n+      && lookup_attribute (\"noinline\", attrs))\n+    warning_with_decl (decl1,\n+\t\t       \"inline function `%s' given attribute noinline\");\n+\n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl1))\n     /* This is a constructor, we must ensure that any default args\n        introduced by this definition are propagated to the clones"}]}