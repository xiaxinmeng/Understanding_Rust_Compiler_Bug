{"sha": "602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyZmVhN2MyNjM3YWM4MjBhOGU4MGJmOGM3YjllYTllN2E3NzZkYQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-02-19T08:46:45Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-02-19T08:46:45Z"}, "message": "re PR tree-optimization/30795 (ice for legal code with -ftree-vectorize -O2)\n\n        PR tree-optimization/30975\n        * tree-vect-trasnform.c (vect_get_vec_def_for_stmt_copy): Remove\n        wrong assert.\n\nFrom-SVN: r122127", "tree": {"sha": "5db2d0b024834594c5a831e83a077e055f02ce2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db2d0b024834594c5a831e83a077e055f02ce2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/comments", "author": null, "committer": null, "parents": [{"sha": "5646ba1294058839e26374745c761bee47629600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5646ba1294058839e26374745c761bee47629600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5646ba1294058839e26374745c761bee47629600"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "f0f225ce4e167dcaf832c6cd1218ba7963305003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -1,3 +1,9 @@\n+2007-02-19  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/30975\n+\t* tree-vect-trasnform.c (vect_get_vec_def_for_stmt_copy): Remove\n+\twrong assert.\n+\n 2007-02-18  Eric Christopher  <echristo@gmail.com>\n \n \t* mips.c (mips_prepare_builtin_arg): Add argnum parameter."}, {"sha": "3633d7d1cf83630fb2339773e5aca8b281b90053", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -1,3 +1,10 @@\n+2007-02-18  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/30975\n+\t* gcc.dg/vect/vect-iv-8.c: Fix to include an induction. Xfail.\n+\t* gcc.dg/vect/vect-iv-8a.c: New (same as above, but signed).\n+\t* gcc.dg/vect/pr30795.c: New.\n+\n 2007-02-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/30681"}, {"sha": "53dc9fa51f3719c86f69cde4f33ad225465f939c", "filename": "gcc/testsuite/gcc.dg/vect/pr30795.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30795.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30795.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30795.c?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+char bigDone[260];\n+int runningOrder[260];\n+\n+int\n+main()\n+{\n+  int i;\n+  for (i = 0; i <= 255; i++) {\n+      bigDone [i] = ((char)0);\n+      runningOrder[i] = i;\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f8626a1a58fea8c20131a836eb30a393b9c8d4ae", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -10,6 +10,7 @@ int main1 (short X)\n   unsigned char a[N];\n   unsigned short b[N];\n   unsigned int c[N];\n+  short myX = X;\n   int i;\n \n   /* vectorization of induction with type conversions.  */\n@@ -18,12 +19,13 @@ int main1 (short X)\n     a[i] = (unsigned char)X;\n     b[i] = X;\n     c[i] = (unsigned int)X;\n+    X++;\n   }\n \n   /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != (char)X || b[i] != X || c[i] != (int)X)\n+      if (a[i] != (unsigned char)myX || b[i] != myX || c[i] != (unsigned int)myX++)\n \tabort ();\n     }\n \n@@ -37,5 +39,9 @@ int main (void)\n   return main1 (3);\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_mod && vect_unpack } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* Fails to get vectorized due to a redundant cast. Once this is fixed, \n+   should be vectorized as follows:\n+   dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_mod && vect_unpack } } } \n+*/\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ac6bde7210ca5dc3ffb47467589774156d2696df", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8a.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 26\n+ \n+int main1 (short X)\n+{  \n+  signed char a[N];\n+  short b[N];\n+  int c[N];\n+  short myX = X;\n+  int i;\n+\n+  /* vectorization of induction with type conversions.  */\n+  for (i = 0; i < N; i++)\n+  {\n+    a[i] = (signed char)X;\n+    b[i] = X;\n+    c[i] = (int)X;\n+    X++;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != (signed char)myX || b[i] != myX || c[i] != (int)myX++)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 (3);\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_mod && vect_unpack } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "109705d7e14cbefa186d53de77234e41232c5f26", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602fea7c2637ac820a8e80bf8c7b9ea9e7a776da/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=602fea7c2637ac820a8e80bf8c7b9ea9e7a776da", "patch": "@@ -897,8 +897,6 @@ vect_get_vec_def_for_stmt_copy (enum vect_def_type dt, tree vec_oprnd)\n \n   vec_stmt_for_operand = SSA_NAME_DEF_STMT (vec_oprnd);\n   def_stmt_info = vinfo_for_stmt (vec_stmt_for_operand);\n-  if (dt == vect_induction_def)\n-    gcc_assert (TREE_CODE (vec_stmt_for_operand) == PHI_NODE);  \n   gcc_assert (def_stmt_info);\n   vec_stmt_for_operand = STMT_VINFO_RELATED_STMT (def_stmt_info);\n   gcc_assert (vec_stmt_for_operand);"}]}