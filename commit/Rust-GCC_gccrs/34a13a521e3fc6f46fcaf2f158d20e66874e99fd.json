{"sha": "34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMTNhNTIxZTNmYzZmNDZmY2FmMmYxNThkMjBlNjY4NzRlOTlmZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2019-05-31T17:04:20Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2019-05-31T17:04:20Z"}, "message": "apply unary op to both sides of (vec_cond x cst1 cst2)\n\n2019-05-31  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (~(vec?cst1:cst2)): New transformation.\n\ngcc/testsuite/\n\t* g++.dg/tree-ssa/cprop-vcond.C: New file.\n\nFrom-SVN: r271817", "tree": {"sha": "62c4a9ad91508bf62cd56b389a0d893bf0a9e034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c4a9ad91508bf62cd56b389a0d893bf0a9e034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cf60d3b0d793fbd3b97aa0163b44a5c0c4e9aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf60d3b0d793fbd3b97aa0163b44a5c0c4e9aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf60d3b0d793fbd3b97aa0163b44a5c0c4e9aa3"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "832ec727959966c3378f46da6e51289b0f258b08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "patch": "@@ -1,3 +1,7 @@\n+2019-05-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (~(vec?cst1:cst2)): New transformation.\n+\n 2019-05-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (X/[ex]D<Y/[ex]D): Handle negative denominator."}, {"sha": "02e0471dd4efdd17fd53baa852975a7f36cfae94", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "patch": "@@ -2920,6 +2920,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (integer_zerop (@0))\n    @2)))\n \n+/* Sink unary operations to constant branches, but only if we do fold it to\n+   constants.  */\n+(for op (negate bit_not abs absu)\n+ (simplify\n+  (op (vec_cond @0 VECTOR_CST@1 VECTOR_CST@2))\n+  (with\n+   {\n+     tree cst1, cst2;\n+     cst1 = const_unop (op, type, @1);\n+     if (cst1)\n+       cst2 = const_unop (op, type, @2);\n+   }\n+   (if (cst1 && cst2)\n+    (vec_cond @0 { cst1; } { cst2; })))))\n+\n /* Simplification moved from fold_cond_expr_with_comparison.  It may also\n    be extended.  */\n /* This pattern implements two kinds simplification:"}, {"sha": "31edc62cdcde7327f56a793f01137e67efd99eef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "patch": "@@ -1,3 +1,7 @@\n+2019-05-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* g++.dg/tree-ssa/cprop-vcond.C: New file.\n+\n 2019-05-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/cmpexactdiv-3.c: New file."}, {"sha": "7d62cff1a17395e9fa12dddc5b056413860b49ae", "filename": "gcc/testsuite/g++.dg/tree-ssa/cprop-vcond.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcprop-vcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a13a521e3fc6f46fcaf2f158d20e66874e99fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcprop-vcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcprop-vcond.C?ref=34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1-raw\" } */\n+\n+typedef long vec __attribute__((vector_size(2*sizeof(long))));\n+void f(vec*v){\n+  vec t = { 5, 16 };\n+  vec f = { 27, -11 };\n+  vec r = *v ? t : f;\n+  *v = -r;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"negate_expr\" \"forwprop1\" } } */"}]}