{"sha": "fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlNTc1YjY1MmY1YmRjYzQ1OWY0NDdhMGU2ZjBlMDU5OTk2ZDRlZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-12-18T17:35:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-12-18T17:35:45Z"}, "message": "X86-64: Add -mskip-rax-setup\n\nThe Linux kernel never passes floating point arguments around, vararg\nfunctions or not. Hence no vector registers are ever used when calling a\nvararg function.  But gcc still dutifully emits an \"xor %eax,%eax\" before\neach and every call of a vararg function.  Since no callee use that for\nanything, these instructions are redundant.\n\nThis patch adds the -mskip-rax-setup option to skip setting up RAX\nregister when SSE is disabled and there are no variable arguments passed\nin vector registers.  Since RAX register is used to avoid unnecessarily\nsaving vector registers on stack when passing variable arguments, the\nimpacts of this option are callees may waste some stack space, misbehave\nor jump to a random location.  GCC 4.4 or newer don't those issues,\nregardless the RAX register value since they don't check the RAX register\nvalue when SSE is disabled.\n\ngcc/\n\n\t* config/i386/i386.c (ix86_expand_call): Skip setting up RAX\n\tregister for -mskip-rax-setup when there are no parameters\n\tpassed in vector registers.\n\t* config/i386/i386.opt (mskip-rax-setup): New option.\n\t* doc/invoke.texi: Document -mskip-rax-setup.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/amd64-abi-7.c: New tests.\n\t* gcc.target/i386/amd64-abi-8.c: Likwise.\n\t* gcc.target/i386/amd64-abi-9.c: Likwise.\n\nFrom-SVN: r218870", "tree": {"sha": "7abe718095968d4646ff74e4b3831d0cae25c95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abe718095968d4646ff74e4b3831d0cae25c95b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8448880117087e77aaf6bcfc4398f4b0442db1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8448880117087e77aaf6bcfc4398f4b0442db1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8448880117087e77aaf6bcfc4398f4b0442db1b1"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "6e7cfebb7d9508f712eeef43d592059b86764c43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -1,3 +1,11 @@\n+2014-12-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_call): Skip setting up RAX\n+\tregister for -mskip-rax-setup when there are no parameters\n+\tpassed in vector registers.\n+\t* config/i386/i386.opt (mskip-rax-setup): New option.\n+\t* doc/invoke.texi: Document -mskip-rax-setup.\n+\n 2014-12-18  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_lshr_simddi): Handle shift"}, {"sha": "122a350d99db656f64abc0d1c4d0d6b54d1b88b6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -25461,7 +25461,12 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t}\n     }\n \n-  if (TARGET_64BIT && INTVAL (callarg2) >= 0)\n+  /* Skip setting up RAX register for -mskip-rax-setup when there are no\n+     parameters passed in vector registers.  */\n+  if (TARGET_64BIT\n+      && (INTVAL (callarg2) > 0\n+\t  || (INTVAL (callarg2) == 0\n+\t      && (TARGET_SSE || !flag_skip_rax_setup))))\n     {\n       rtx al = gen_rtx_REG (QImode, AX_REG);\n       emit_move_insn (al, callarg2);"}, {"sha": "6dc4da280bb2dd527f75e5ba3844f0a358ac2cf2", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -831,6 +831,10 @@ Target Report Var(flag_nop_mcount) Init(0)\n Generate mcount/__fentry__ calls as nops. To activate they need to be\n patched in.\n \n+mskip-rax-setup\n+Target Report Var(flag_skip_rax_setup) Init(0)\n+Skip setting up RAX register when passing variable arguments.\n+\n m8bit-idiv\n Target Report Mask(USE_8BIT_IDIV) Save\n Expand 32bit/64bit integer divide into 8bit unsigned integer divide with run-time check"}, {"sha": "33a7ed2cfa83dade3504ab234dcdfe453725915e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -16256,6 +16256,19 @@ the profiling functions as nops. This is useful when they\n should be patched in later dynamically. This is likely only\n useful together with @option{-mrecord-mcount}.\n \n+@item -mskip-rax-setup\n+@itemx -mno-skip-rax-setup\n+@opindex mskip-rax-setup\n+When generating code for the x86-64 architecture with SSE extensions\n+disabled, @option{-skip-rax-setup} can be used to skip setting up RAX\n+register when there are no variable arguments passed in vector registers.\n+\n+@strong{Warning:} Since RAX register is used to avoid unnecessarily\n+saving vector registers on stack when passing variable arguments, the\n+impacts of this option are callees may waste some stack space,\n+misbehave or jump to a random location.  GCC 4.4 or newer don't have\n+those issues, regardless the RAX register value.\n+\n @item -m8bit-idiv\n @itemx -mno-8bit-idiv\n @opindex 8bit-idiv"}, {"sha": "4d75d0e04b20e0d674a38b69b9daa59161df9900", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -1,3 +1,9 @@\n+2014-12-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/amd64-abi-7.c: New tests.\n+\t* gcc.target/i386/amd64-abi-8.c: Likwise.\n+\t* gcc.target/i386/amd64-abi-9.c: Likwise.\n+\n 2014-12-18  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/ushr64_1.c: Remove scan-assembler \"ushr...64\"."}, {"sha": "fcca680a09c64d5d63c73c5fdc4a03d00cfec656", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-7.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-7.c?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+int n1 = 30;\n+int n2 = 324;\n+void *n3 = (void *) &n2;\n+int n4 = 407;\n+\n+int e1;\n+int e2;\n+void *e3;\n+int e4;\n+\n+static void\n+__attribute__((noinline))\n+foo (va_list va_arglist)\n+{\n+  e2 = va_arg (va_arglist, int);\n+  e3 = va_arg (va_arglist, void *);\n+  e4 = va_arg (va_arglist, int);\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (int a1, ...)\n+{\n+  va_list va_arglist;\n+  e1 = a1;\n+  va_start (va_arglist, a1);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}\n+\n+int\n+main ()\n+{\n+  test (n1, n2, n3, n4);\n+  assert (n1 == e1);\n+  assert (n2 == e2);\n+  assert (n3 == e3);\n+  assert (n4 == e4);\n+  return 0;\n+}"}, {"sha": "b25ceec1b8058d593ecf5a628e2de39839510813", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-8.c?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mno-sse -mskip-rax-setup\" } */\n+/* { dg-final { scan-assembler-not \"xorl\\[\\\\t \\]*\\\\\\%eax,\\[\\\\t \\]*%eax\" } } */\n+\n+void foo (const char *, ...);\n+\n+void\n+test1 (void)\n+{\n+  foo (\"%d\", 20);\n+}\n+\n+int\n+test2 (void)\n+{\n+  foo (\"%d\", 20);\n+  return 3;\n+}"}, {"sha": "4707eb7f1c25839227efd17207822192dabe4668", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575b652f5bdcc459f447a0e6f0e059996d4ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-9.c?ref=fbe575b652f5bdcc459f447a0e6f0e059996d4ef", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mno-sse -mno-skip-rax-setup\" } */\n+/* { dg-final { scan-assembler-times \"xorl\\[\\\\t \\]*\\\\\\%eax,\\[\\\\t \\]*%eax\" 2 } } */\n+\n+void foo (const char *, ...);\n+\n+void\n+test1 (void)\n+{\n+  foo (\"%d\", 20);\n+}\n+\n+int\n+test2 (void)\n+{\n+  foo (\"%d\", 20);\n+  return 3;\n+}"}]}