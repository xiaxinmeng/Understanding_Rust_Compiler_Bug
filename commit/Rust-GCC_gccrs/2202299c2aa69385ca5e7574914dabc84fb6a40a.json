{"sha": "2202299c2aa69385ca5e7574914dabc84fb6a40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwMjI5OWMyYWE2OTM4NWNhNWU3NTc0OTE0ZGFiYzg0ZmI2YTQwYQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T21:16:15Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T21:16:15Z"}, "message": "rs6000: Add pdepd and pextd\n\nAdd scalar instructions for parallel bit deposit and extract, with\nbuilt-in function support.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-builtin.def (__builtin_pdepd): New built-in\n\tfunction.\n\t(__builtin_pextd): Likewise.\n\t* config/rs6000/rs6000.md (UNSPEC_PDEPD): New constant.\n\t(UNSPEC_PEXTD): Likewise.\n\t(pdepd): New insn.\n\t(pextd): Likewise.\n\t* doc/extend.texi (Basic PowerPC Built-in Functions Available for\n\ta Future Architecture): Add descriptions of __builtin_pdepd and\n\t__builtin_pextd functions.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/pdep-0.c: New.\n\t* gcc.target/powerpc/pdep-1.c: New.\n\t* gcc.target/powerpc/pextd-0.c: New.\n\t* gcc.target/powerpc/pextd-1.c: New.", "tree": {"sha": "7cccdff490d7f9d5c84abb870ceb17768020f0ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cccdff490d7f9d5c84abb870ceb17768020f0ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2202299c2aa69385ca5e7574914dabc84fb6a40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2202299c2aa69385ca5e7574914dabc84fb6a40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2202299c2aa69385ca5e7574914dabc84fb6a40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2202299c2aa69385ca5e7574914dabc84fb6a40a/comments", "author": null, "committer": null, "parents": [{"sha": "25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bf7d32c31bb45993a9c81dd01043e77c4a44ed"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "02d7452376985ceafc26496cfee0d4fbff28dfcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -1,3 +1,16 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-builtin.def (__builtin_pdepd): New built-in\n+\tfunction.\n+\t(__builtin_pextd): Likewise.\n+\t* config/rs6000/rs6000.md (UNSPEC_PDEPD): New constant.\n+\t(UNSPEC_PEXTD): Likewise.\n+\t(pdepd): New insn.\n+\t(pextd): Likewise.\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions Available for\n+\ta Future Architecture): Add descriptions of __builtin_pdepd and\n+\t__builtin_pextd functions.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/altivec.h (vec_clrl): New #define."}, {"sha": "4b06323a07fef3744edf77f94cf4b70859843f2e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -2577,6 +2577,8 @@ BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n BU_FUTURE_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n BU_FUTURE_MISC_2 (CNTLZDM, \"cntlzdm\", CONST, cntlzdm)\n BU_FUTURE_MISC_2 (CNTTZDM, \"cnttzdm\", CONST, cnttzdm)\n+BU_FUTURE_MISC_2 (PDEPD, \"pdepd\", CONST, pdepd)\n+BU_FUTURE_MISC_2 (PEXTD, \"pextd\", CONST, pextd)\n \n /* Future architecture vector built-ins.  */\n BU_FUTURE_V_2 (VCLRLB, \"vclrlb\", CONST, vclrlb)"}, {"sha": "4fcd6a940221cf19ca9bb05cd851d2209ffb0cfa", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -151,6 +151,8 @@\n    UNSPEC_CFUGED\n    UNSPEC_CNTLZDM\n    UNSPEC_CNTTZDM\n+   UNSPEC_PDEPD\n+   UNSPEC_PEXTD\n   ])\n \n ;;\n@@ -2483,6 +2485,24 @@\n    \"cnttzdm %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n+(define_insn \"pdepd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t\t   UNSPEC_PDEPD))]\n+   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"pdepd %0,%1,%2\"\n+   [(set_attr \"type\" \"integer\")])\n+\n+(define_insn \"pextd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t\t   UNSPEC_PEXTD))]\n+   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"pextd %0,%1,%2\"\n+   [(set_attr \"type\" \"integer\")])\n+\n (define_insn \"cmpb<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "9602a310cbb25b61b97ec0807daa3d582a4d6981", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -17572,6 +17572,22 @@ Perform a 64-bit count trailing zeros operation under mask, as if\n implemented by the future @code{cnttzdm} instruction.\n @findex __builtin_cnttzdm\n \n+@smallexample\n+@exdent unsigned long long int\n+@exdent __builtin_pdepd (unsigned long long int, unsigned long long int)\n+@end smallexample\n+Perform a 64-bit parallel bits deposit operation, as if implemented by the\n+Future @code{pdepd} instruction.\n+@findex __builtin_pdepd\n+\n+@smallexample\n+@exdent unsigned long long int\n+@exdent __builtin_pextd (unsigned long long int, unsigned long long int)\n+@end smallexample\n+Perform a 64-bit parallel bits extract operation, as if implemented by the\n+Future @code{pextd} instruction.\n+@findex __builtin_pextd\n+\n @node PowerPC AltiVec/VSX Built-in Functions\n @subsection PowerPC AltiVec/VSX Built-in Functions\n "}, {"sha": "74e83323e6e13cbfd0658fd6918cefc2eec6e9d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/pdep-0.c: New.\n+\t* gcc.target/powerpc/pdep-1.c: New.\n+\t* gcc.target/powerpc/pextd-0.c: New.\n+\t* gcc.target/powerpc/pextd-1.c: New.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-clrl-0.c: New."}, {"sha": "5c6afb33169dd4243d263ee80c569a2758fa59d2", "filename": "gcc/testsuite/gcc.target/powerpc/pdep-0.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-0.c?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mcpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_pdepd (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_pdepd (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources [0] with each of masks [0..3] */\n+    { 0x7e3c0000ll, 0x00007e3cll, 0x070e030cll, 0x70e030c0ll },\n+    /* sources [1] with each of masks [0..3] */\n+    { 0xa5f00000ll, 0x0000a5f0ll, 0x0a050f00ll, 0xa050f000ll },\n+    /* sources [2] with each of masks [0..3] */\n+    { 0xf07e0000ll, 0x0000f07ell, 0x0f00070ell, 0xf00070e0ll },\n+    /* sources [3] with each of masks [0..3] */\n+    { 0xe7c30000ll, 0x0000e7c3ll, 0x0e070c03ll, 0xe070c030ll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_pdepd (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mpdepd\\M} } } */"}, {"sha": "40532ee1177340bc53b30018f1fc11fabc6aecd7", "filename": "gcc/testsuite/gcc.target/powerpc/pdep-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpdep-1.c?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mcpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_pdepd (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_pdepd (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources [0] with each of masks [0..3] */\n+    { 0x7e3c0000ll, 0x00007e3cll, 0x070e030cll, 0x70e030c0ll },\n+    /* sources [1] with each of masks [0..3] */\n+    { 0xa5f00000ll, 0x0000a5f0ll, 0x0a050f00ll, 0xa050f000ll },\n+    /* sources [2] with each of masks [0..3] */\n+    { 0xf07e0000ll, 0x0000f07ell, 0x0f00070ell, 0xf00070e0ll },\n+    /* sources [3] with each of masks [0..3] */\n+    { 0xe7c30000ll, 0x0000e7c3ll, 0x0e070c03ll, 0xe070c030ll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_pdepd (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "23a952dc2c696cfeb6bbb07be10f4df3f0369cef", "filename": "gcc/testsuite/gcc.target/powerpc/pextd-0.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-0.c?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mcpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_pextd (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_pextd (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources [0] with each of masks [0..3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources [1] with each of masks [0..3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources [2] with each of masks [0..3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources [3] with each of masks [0..3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_pextd (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mpextd\\M} } } */"}, {"sha": "814ce4325a0383ae6749776340f7f752b7fdab15", "filename": "gcc/testsuite/gcc.target/powerpc/pextd-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2202299c2aa69385ca5e7574914dabc84fb6a40a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpextd-1.c?ref=2202299c2aa69385ca5e7574914dabc84fb6a40a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mcpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_pextd (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_pextd (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources [0] with each of masks [0..3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources [1] with each of masks [0..3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources [2] with each of masks [0..3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources [3] with each of masks [0..3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_pextd (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}"}]}