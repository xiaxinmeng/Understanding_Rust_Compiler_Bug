{"sha": "42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmYWJmMjFiMjE2N2FiOWQwZmM4NDgyYjI5N2E3ZTc1ZmYyOTY0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-09T07:21:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-09T07:21:19Z"}, "message": "* config/i386/i386.md: Use FLAGS_REG everywhere.\n\nFrom-SVN: r91927", "tree": {"sha": "0e971414fca3ca056f645101385b12dd74d0f999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e971414fca3ca056f645101385b12dd74d0f999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fabf21b2167ab9d0fc8482b297a7e75ff2964f/comments", "author": null, "committer": null, "parents": [{"sha": "901713f134dfdbaebd96a26aea0f2335846d3e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901713f134dfdbaebd96a26aea0f2335846d3e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901713f134dfdbaebd96a26aea0f2335846d3e4d"}], "stats": {"total": 347, "additions": 176, "deletions": 171}, "files": [{"sha": "666b76c4ffdf66e58f493f83c3c303426f161d0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fabf21b2167ab9d0fc8482b297a7e75ff2964f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fabf21b2167ab9d0fc8482b297a7e75ff2964f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "patch": "@@ -1,3 +1,7 @@\n+2004-12-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md: Use FLAGS_REG everywhere.\n+\n 2004-12-08  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.c (mips_scalar_mode_supported_p): Rewrite"}, {"sha": "0d2ccb2bbb42265a4dc822c800934c3616e58c52", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 172, "deletions": 171, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fabf21b2167ab9d0fc8482b297a7e75ff2964f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fabf21b2167ab9d0fc8482b297a7e75ff2964f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=42fabf21b2167ab9d0fc8482b297a7e75ff2964f", "patch": "@@ -511,7 +511,7 @@\n })\n \n (define_insn \"cmpdi_ccno_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:DI 0 \"nonimmediate_operand\" \"r,?mr\")\n \t\t (match_operand:DI 1 \"const0_operand\" \"n,n\")))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n@@ -523,7 +523,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*cmpdi_minus_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (minus:DI (match_operand:DI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t\t   (match_operand:DI 1 \"x86_64_general_operand\" \"re,mr\"))\n \t\t (const_int 0)))]\n@@ -540,7 +540,7 @@\n   \"\")\n \n (define_insn \"cmpdi_1_insn_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:DI 0 \"nonimmediate_operand\" \"mr,r\")\n \t\t (match_operand:DI 1 \"x86_64_general_operand\" \"re,mr\")))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n@@ -550,7 +550,7 @@\n \n \n (define_insn \"*cmpsi_ccno_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n \t\t (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n@@ -562,7 +562,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*cmpsi_minus_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (minus:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t\t   (match_operand:SI 1 \"general_operand\" \"ri,mr\"))\n \t\t (const_int 0)))]\n@@ -579,7 +579,7 @@\n   \"\")\n \n (define_insn \"*cmpsi_1_insn\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n@@ -589,7 +589,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*cmphi_ccno_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n \t\t (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n@@ -601,7 +601,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*cmphi_minus_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (minus:HI (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t\t   (match_operand:HI 1 \"general_operand\" \"ri,mr\"))\n \t\t (const_int 0)))]\n@@ -611,7 +611,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*cmphi_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n@@ -621,7 +621,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*cmpqi_ccno_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n \t\t (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n@@ -633,7 +633,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n \t\t (match_operand:QI 1 \"general_operand\" \"qi,mq\")))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n@@ -643,7 +643,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_minus_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (minus:QI (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n \t\t\t   (match_operand:QI 1 \"general_operand\" \"qi,mq\"))\n \t\t (const_int 0)))]\n@@ -653,7 +653,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (match_operand:QI 0 \"general_operand\" \"Qm\")\n \t  (subreg:QI\n@@ -667,7 +667,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (match_operand:QI 0 \"register_operand\" \"Q\")\n \t  (subreg:QI\n@@ -681,7 +681,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n@@ -708,7 +708,7 @@\n   \"\")\n \n (define_insn \"cmpqi_ext_3_insn\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n@@ -722,7 +722,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"cmpqi_ext_3_insn_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n@@ -736,7 +736,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_4\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n@@ -5301,7 +5301,7 @@\n   \"\")\n \n (define_insn \"*adddi_2_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re\"))\n@@ -5353,7 +5353,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*adddi_3_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (neg:DI (match_operand:DI 2 \"x86_64_general_operand\" \"rme\"))\n \t\t (match_operand:DI 1 \"x86_64_general_operand\" \"%0\")))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n@@ -5411,7 +5411,7 @@\n ; Also carry flag is reversed compared to cmp, so this conversion is valid\n ; only for comparisons not depending on it.\n (define_insn \"*adddi_4_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"e\")))\n    (clobber (match_scratch:DI 0 \"=rm\"))]\n@@ -5450,7 +5450,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*adddi_5_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"rme\"))\n@@ -5650,7 +5650,7 @@\n })\n \n (define_insn \"*addsi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n@@ -5699,7 +5699,7 @@\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*addsi_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n@@ -5743,7 +5743,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n \t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n@@ -5789,7 +5789,7 @@\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*addsi_3_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n \t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5839,7 +5839,7 @@\n ; Also carry flag is reversed compared to cmp, so this conversion is valid\n ; only for comparisons not depending on it.\n (define_insn \"*addsi_4\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (clobber (match_scratch:SI 0 \"=rm\"))]\n@@ -5876,7 +5876,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi_5\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n@@ -6013,7 +6013,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n@@ -6053,7 +6053,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n \t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n@@ -6091,7 +6091,7 @@\n \n ; See comments above addsi_3_imm for details.\n (define_insn \"*addhi_4\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))\n    (clobber (match_scratch:HI 0 \"=rm\"))]\n@@ -6129,7 +6129,7 @@\n \n \n (define_insn \"*addhi_5\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"rmni\"))\n@@ -6303,7 +6303,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n@@ -6342,7 +6342,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n \t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n@@ -6379,7 +6379,7 @@\n \n ; See comments above addsi_3_imm for details.\n (define_insn \"*addqi_4\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t (match_operand:QI 2 \"const_int_operand\" \"n\")))\n    (clobber (match_scratch:QI 0 \"=qm\"))]\n@@ -6417,7 +6417,7 @@\n \n \n (define_insn \"*addqi_5\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qmni\"))\n@@ -6625,7 +6625,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*subdi_2_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:DI 2 \"x86_64_general_operand\" \"re,rm\"))\n@@ -6639,7 +6639,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*subdi_3_rex63\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t (match_operand:DI 2 \"x86_64_general_operand\" \"re,rm\")))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,r\")\n@@ -6729,7 +6729,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:SI 2 \"general_operand\" \"ri,rm\"))\n@@ -6743,7 +6743,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 2 \"general_operand\" \"rim\"))\n@@ -6759,7 +6759,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n@@ -6771,7 +6771,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi_3_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"rim\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -6803,7 +6803,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*subhi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:HI 2 \"general_operand\" \"ri,rm\"))\n@@ -6817,7 +6817,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*subhi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n@@ -6858,7 +6858,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*subqi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\"))\n@@ -6872,7 +6872,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*subqi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"qi,qm\")))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n@@ -7772,7 +7772,7 @@\n ;; Note that this excludes ah.\n \n (define_insn \"*testdi_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:DI (match_operand:DI 0 \"nonimmediate_operand\" \"%!*a,r,!*a,r,rm\")\n \t\t  (match_operand:DI 1 \"x86_64_szext_general_operand\" \"Z,Z,e,e,re\"))\n@@ -7791,7 +7791,7 @@\n    (set_attr \"pent_pair\" \"uv,np,uv,np,uv\")])\n \n (define_insn \"testsi_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%!*a,r,rm\")\n \t\t  (match_operand:SI 1 \"general_operand\" \"in,in,rin\"))\n@@ -7814,7 +7814,7 @@\n   \"\")\n \n (define_insn \"*testhi_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n         (compare (and:HI (match_operand:HI 0 \"nonimmediate_operand\" \"%!*a,r,rm\")\n \t\t\t (match_operand:HI 1 \"general_operand\" \"n,n,rn\"))\n \t\t (const_int 0)))]\n@@ -7870,7 +7870,7 @@\n   \"\")\n \n (define_insn \"*testqi_ext_0\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -7887,7 +7887,7 @@\n    (set_attr \"pent_pair\" \"np\")])\n \n (define_insn \"*testqi_ext_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -7904,7 +7904,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*testqi_ext_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -7920,7 +7920,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*testqi_ext_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -7939,7 +7939,7 @@\n \n ;; Combine likes to form bit extractions for some tests.  Humor it.\n (define_insn \"*testqi_ext_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n         (compare (zero_extract:SI\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n \t\t   (match_operand:SI 1 \"const_int_operand\" \"\")\n@@ -7953,7 +7953,7 @@\n   \"#\")\n \n (define_insn \"*testqi_ext_3_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n         (compare (zero_extract:DI\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n \t\t   (match_operand:DI 1 \"const_int_operand\" \"\")\n@@ -7974,7 +7974,7 @@\n   \"#\")\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n         (compare (zero_extract\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"\")\n \t\t   (match_operand 1 \"const_int_operand\" \"\")\n@@ -8027,7 +8027,7 @@\n ;; Do the conversion only post-reload to avoid limiting of the register class\n ;; to QI regs.\n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and (match_operand 0 \"register_operand\" \"\")\n \t       (match_operand 1 \"const_int_operand\" \"\"))\n@@ -8048,7 +8048,7 @@\n    operands[1] = gen_int_mode (INTVAL (operands[1]) >> 8, SImode);\")\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and (match_operand 0 \"nonimmediate_operand\" \"\")\n \t       (match_operand 1 \"const_int_operand\" \"\"))\n@@ -8124,7 +8124,7 @@\n    (set_attr \"mode\" \"SI,DI,DI,DI\")])\n \n (define_insn \"*anddi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n \t\t\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,rem,re\"))\n \t\t (const_int 0)))\n@@ -8236,7 +8236,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*andsi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -8250,7 +8250,7 @@\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*andsi_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -8298,7 +8298,7 @@\n    (set_attr \"mode\" \"HI,HI,SI\")])\n \n (define_insn \"*andhi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -8344,7 +8344,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*andqi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n@@ -8367,7 +8367,7 @@\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n (define_insn \"*andqi_2_slp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t   (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n \t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"qmi,qi\"))\n@@ -8406,7 +8406,7 @@\n ;; often in fp comparisons.\n \n (define_insn \"*andqi_ext_0_cc\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -8556,7 +8556,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*iordi_2_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rem,re\"))\n \t\t (const_int 0)))\n@@ -8570,7 +8570,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*iordi_3_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rem\"))\n \t\t (const_int 0)))\n@@ -8624,7 +8624,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*iorsi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -8639,7 +8639,7 @@\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n ;; ??? Special case for immediate operand is missing - it is tricky.\n (define_insn \"*iorsi_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -8652,7 +8652,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*iorsi_2_zext_imm\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand 2 \"x86_64_zext_immediate_operand\" \"Z\"))\n \t\t (const_int 0)))\n@@ -8665,7 +8665,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*iorsi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -8695,7 +8695,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*iorhi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -8708,7 +8708,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*iorhi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -8753,7 +8753,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*iorqi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n \t\t (const_int 0)))\n@@ -8766,7 +8766,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*iorqi_2_slp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"qim,qi\"))\n \t\t (const_int 0)))\n@@ -8780,7 +8780,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*iorqi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"qim\"))\n \t\t (const_int 0)))\n@@ -8931,7 +8931,7 @@\n    (set_attr \"mode\" \"DI,DI\")])\n \n (define_insn \"*xordi_2_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rem,re\"))\n \t\t (const_int 0)))\n@@ -8947,7 +8947,7 @@\n    (set_attr \"mode\" \"DI,DI\")])\n \n (define_insn \"*xordi_3_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rem\"))\n \t\t (const_int 0)))\n@@ -9001,7 +9001,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*xorsi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -9016,7 +9016,7 @@\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n ;; ??? Special case for immediate operand is missing - it is tricky.\n (define_insn \"*xorsi_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -9029,7 +9029,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*xorsi_2_zext_imm\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand 2 \"x86_64_zext_immediate_operand\" \"Z\"))\n \t\t (const_int 0)))\n@@ -9042,7 +9042,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*xorsi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -9072,7 +9072,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*xorhi_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n \t\t (const_int 0)))\n@@ -9085,7 +9085,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*xorhi_3\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"rim\"))\n \t\t (const_int 0)))\n@@ -9203,7 +9203,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_cc_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n@@ -9217,7 +9217,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_2_slp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (xor:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"qim,qi\"))\n \t\t (const_int 0)))\n@@ -9231,7 +9231,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_cc_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"qim\"))\n@@ -9244,7 +9244,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_cc_ext_1\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:SI\n \t    (zero_extract:SI\n@@ -9265,7 +9265,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_cc_ext_1_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:SI\n \t    (zero_extract:SI\n@@ -10325,7 +10325,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*one_cmpldi2_2_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -10337,7 +10337,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n \t\t (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -10374,7 +10374,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*one_cmplsi2_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -10386,7 +10386,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n \t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -10401,7 +10401,7 @@\n \n ;; ??? Currently never generated - xor is used instead.\n (define_insn \"*one_cmplsi2_2_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t\t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -10413,7 +10413,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:SI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -10441,7 +10441,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*one_cmplhi2_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -10453,7 +10453,7 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\"))\n \t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n@@ -10484,7 +10484,7 @@\n    (set_attr \"mode\" \"QI,SI\")])\n \n (define_insn \"*one_cmplqi2_2\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n@@ -10496,7 +10496,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n@@ -10603,7 +10603,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashldi3_cmp_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n@@ -10881,7 +10881,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlsi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -10919,7 +10919,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashlsi3_cmp_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11041,7 +11041,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlhi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11202,7 +11202,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlqi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11295,7 +11295,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrdi3_one_bit_cmp_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11316,7 +11316,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrdi3_cmp_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n@@ -11499,7 +11499,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrsi3_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11517,7 +11517,7 @@\n \t(const_string \"*\")))])\n \n (define_insn \"*ashrsi3_one_bit_cmp_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11535,7 +11535,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrsi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11549,7 +11549,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashrsi3_cmp_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11600,7 +11600,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrhi3_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11621,7 +11621,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrhi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11700,7 +11700,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrqi3_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"I\"))\n@@ -11721,7 +11721,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrqi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11775,7 +11775,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrdi3_cmp_one_bit_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11796,7 +11796,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrdi3_cmp_rex64\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n@@ -11903,7 +11903,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrsi3_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11921,7 +11921,7 @@\n \t(const_string \"*\")))])\n \n (define_insn \"*lshrsi3_cmp_one_bit_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -11939,7 +11939,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrsi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -11953,7 +11953,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lshrsi3_cmp_zext\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -12004,7 +12004,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrhi3_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -12025,7 +12025,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrhi3_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -12103,7 +12103,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrqi2_one_bit_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n@@ -12124,7 +12124,7 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrqi2_cmp\"\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_31_operand\" \"I\"))\n@@ -12700,7 +12700,7 @@\n (define_insn \"*setcc_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(match_operator:QI 1 \"ix86_comparison_operator\"\n-\t  [(reg 17) (const_int 0)]))]\n+\t  [(reg FLAGS_REG) (const_int 0)]))]\n   \"\"\n   \"set%C1\\t%0\"\n   [(set_attr \"type\" \"setcc\")\n@@ -12709,7 +12709,7 @@\n (define_insn \"*setcc_2\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(match_operator:QI 1 \"ix86_comparison_operator\"\n-\t  [(reg 17) (const_int 0)]))]\n+\t  [(reg FLAGS_REG) (const_int 0)]))]\n   \"\"\n   \"set%C1\\t%0\"\n   [(set_attr \"type\" \"setcc\")\n@@ -12726,7 +12726,7 @@\n (define_split \n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t         [(reg 17) (const_int 0)])\n+\t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -12737,7 +12737,7 @@\n (define_split \n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n \t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t         [(reg 17) (const_int 0)])\n+\t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -12748,7 +12748,7 @@\n (define_split \n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t         [(reg 17) (const_int 0)])\n+\t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -12768,7 +12768,7 @@\n (define_split \n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n \t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t         [(reg 17) (const_int 0)])\n+\t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -12817,7 +12817,7 @@\n ;; We ignore the overflow flag for signed branch instructions.\n \n ;; For all bCOND expanders, also expand the compare or test insn that\n-;; generates reg 17.  Generate an equality comparison if `beq' or `bne'.\n+;; generates reg FLAGS_REG.  Generate an equality comparison if `beq' or `bne'.\n \n (define_expand \"beq\"\n   [(set (pc)\n@@ -12966,7 +12966,7 @@\n (define_insn \"*jcc_1\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -12984,7 +12984,7 @@\n (define_insn \"*jcc_2\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -13010,7 +13010,7 @@\n (define_split \n   [(set (pc)\n \t(if_then_else (ne (match_operator 0 \"ix86_comparison_operator\"\n-\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n@@ -13026,7 +13026,7 @@\n (define_split \n   [(set (pc)\n \t(if_then_else (eq (match_operator 0 \"ix86_comparison_operator\"\n-\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n@@ -13532,10 +13532,10 @@\n ;; Convert setcc + movzbl to xor + setcc if operands don't overlap.\n \n (define_peephole2\n-  [(set (reg 17) (match_operand 0 \"\" \"\"))\n+  [(set (reg FLAGS_REG) (match_operand 0 \"\" \"\"))\n    (set (match_operand:QI 1 \"register_operand\" \"\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n-\t  [(reg 17) (const_int 0)]))\n+\t  [(reg FLAGS_REG) (const_int 0)]))\n    (set (match_operand 3 \"q_regs_operand\" \"\")\n \t(zero_extend (match_dup 1)))]\n   \"(peep2_reg_dead_p (3, operands[1])\n@@ -13553,10 +13553,10 @@\n ;; Similar, but match zero_extendhisi2_and, which adds a clobber.\n \n (define_peephole2\n-  [(set (reg 17) (match_operand 0 \"\" \"\"))\n+  [(set (reg FLAGS_REG) (match_operand 0 \"\" \"\"))\n    (set (match_operand:QI 1 \"register_operand\" \"\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n-\t  [(reg 17) (const_int 0)]))\n+\t  [(reg FLAGS_REG) (const_int 0)]))\n    (parallel [(set (match_operand 3 \"q_regs_operand\" \"\")\n \t\t   (zero_extend (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -14024,31 +14024,32 @@\n      [(set (match_operand:DI 0 \"register_operand\" \"\") \n \t   (ffs:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n       (clobber (match_scratch:DI 2 \"\"))\n-      (clobber (reg:CC 17))])]\n+      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && TARGET_CMOVE\"\n   \"\")\n \n (define_insn_and_split \"*ffs_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\") \n \t(ffs:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:DI 2 \"=&r\"))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_CMOVE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (const_int -1))\n-   (parallel [(set (reg:CCZ 17) (compare:CCZ (match_dup 1) (const_int 0)))\n+   (parallel [(set (reg:CCZ FLAGS_REG)\n+\t\t   (compare:CCZ (match_dup 1) (const_int 0)))\n \t      (set (match_dup 0) (ctz:DI (match_dup 1)))])\n    (set (match_dup 0) (if_then_else:DI\n-\t\t\t(eq (reg:CCZ 17) (const_int 0))\n+\t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n \t\t\t(match_dup 2)\n \t\t\t(match_dup 0)))\n    (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"\")\n \n (define_insn \"*ffsdi_1\"\n-  [(set (reg:CCZ 17)\n+  [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -14068,7 +14069,7 @@\n (define_insn \"ctzdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ctz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"bsf{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_0f\" \"1\")])\n@@ -14099,18 +14100,18 @@\n      [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t   (minus:DI (const_int 63)\n \t\t     (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\"))))\n-      (clobber (reg:CC 17))])\n+      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n      [(set (match_dup 0) (xor:DI (match_dup 0) (const_int 63)))\n-      (clobber (reg:CC 17))])]\n+      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT\"\n   \"\")\n \n (define_insn \"*bsr_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (const_int 63)\n \t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"bsr{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_0f\" \"1\")])\n@@ -17555,7 +17556,7 @@\n \t(gtu:QI (reg:CC FLAGS_REG) (const_int 0)))\n    (set (match_operand:QI 8 \"register_operand\" \"\")\n \t(ltu:QI (reg:CC FLAGS_REG) (const_int 0)))\n-   (set (reg 17)\n+   (set (reg FLAGS_REG)\n \t(compare (match_dup 7) (match_dup 8)))\n   ]\n   \"peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8])\"\n@@ -17590,7 +17591,7 @@\n \t(gtu:QI (reg:CC FLAGS_REG) (const_int 0)))\n    (set (match_operand:QI 8 \"register_operand\" \"\")\n \t(ltu:QI (reg:CC FLAGS_REG) (const_int 0)))\n-   (set (reg 17)\n+   (set (reg FLAGS_REG)\n \t(compare (match_dup 7) (match_dup 8)))\n   ]\n   \"peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8])\"\n@@ -17641,7 +17642,7 @@\n (define_insn \"movdicc_c_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_64BIT && TARGET_CMOVE\n@@ -17684,7 +17685,7 @@\n (define_insn \"*movsicc_noc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE\n@@ -17706,7 +17707,7 @@\n (define_insn \"*movhicc_noc\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:HI (match_operator 1 \"ix86_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n   \"TARGET_CMOVE\n@@ -17755,7 +17756,7 @@\n (define_insn \"*movsfcc_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f#r,f#r,r#f,r#f\")\n \t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:SF 2 \"nonimmediate_operand\" \"f#r,0,rm#f,0\")\n \t\t      (match_operand:SF 3 \"nonimmediate_operand\" \"0,f#r,0,rm#f\")))]\n   \"TARGET_CMOVE\n@@ -17779,7 +17780,7 @@\n (define_insn \"*movdfcc_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f#r,f#r,&r#f,&r#f\")\n \t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f#r,0,rm#f,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f#r,0,rm#f\")))]\n   \"!TARGET_64BIT && TARGET_CMOVE\n@@ -17795,7 +17796,7 @@\n (define_insn \"*movdfcc_1_rex64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f#r,f#r,r#f,r#f\")\n \t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f#r,0#r,rm#f,0#f\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0#r,f#r,0#f,rm#f\")))]\n   \"TARGET_64BIT && TARGET_CMOVE\n@@ -17838,7 +17839,7 @@\n (define_insn \"*movxfcc_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:XF (match_operator 1 \"fcmov_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE\"\n@@ -18809,7 +18810,7 @@\n ; instruction size is unchanged, except in the %eax case for\n ; which it is increased by one byte, hence the ! optimize_size.\n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and (match_operand 1 \"aligned_operand\" \"\")\n \t\t      (match_operand 2 \"const_int_operand\" \"\"))\n \t\t (const_int 0)))\n@@ -18838,7 +18839,7 @@\n ; the instruction size would at least double, which is not what we\n ; want even with ! optimize_size.\n (define_split\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and (match_operand:HI 0 \"aligned_operand\" \"\")\n \t\t      (match_operand:HI 1 \"const_int_operand\" \"\"))\n \t\t (const_int 0)))]\n@@ -18885,7 +18886,7 @@\n (define_split \n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(if_then_else (match_operator 1 \"comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand 2 \"register_operand\" \"\")\n \t\t      (match_operand 3 \"register_operand\" \"\")))]\n   \"! TARGET_PARTIAL_REG_STALL && TARGET_CMOVE\n@@ -19027,7 +19028,7 @@\n \n ;; Don't compare memory with zero, load and use a test instead.\n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"memory_operand\" \"\")\n \t         (const_int 0)))\n    (match_scratch:SI 3 \"r\")]\n@@ -19097,7 +19098,7 @@\n ;; versions if we're concerned about partial register stalls.\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:SI (match_operand:SI 0 \"register_operand\" \"\")\n \t\t\t (match_operand:SI 1 \"immediate_operand\" \"\"))\n \t\t (const_int 0)))]\n@@ -19119,7 +19120,7 @@\n ;; on ! TARGET_PARTIAL_REG_STALL\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (and:QI (match_operand:QI 0 \"register_operand\" \"\")\n \t\t\t (match_operand:QI 1 \"immediate_operand\" \"\"))\n \t\t (const_int 0)))]\n@@ -19137,7 +19138,7 @@\n   \"\")\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n@@ -19471,7 +19472,7 @@\n ;; Convert compares with 1 to shorter inc/dec operations when CF is not\n ;; required and register dies.\n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (match_operand:SI 1 \"incdec_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n@@ -19483,7 +19484,7 @@\n   \"\")\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (match_operand:HI 1 \"incdec_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n@@ -19495,7 +19496,7 @@\n   \"\")\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 0 \"register_operand\" \"\")\n \t\t (match_operand:QI 1 \"incdec_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n@@ -19508,7 +19509,7 @@\n \n ;; Convert compares with 128 to shorter add -128\n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n@@ -19520,7 +19521,7 @@\n   \"\")\n \n (define_peephole2\n-  [(set (reg 17)\n+  [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n@@ -19960,7 +19961,7 @@\n \n (define_insn \"*conditional_trap_1\"\n   [(trap_if (match_operator 0 \"comparison_operator\"\n-\t     [(reg 17) (const_int 0)])\n+\t     [(reg FLAGS_REG) (const_int 0)])\n \t    (match_operand 1 \"const_int_operand\" \"\"))]\n   \"\"\n {"}]}