{"sha": "13335ae6647410bdffb175ec9558cafcc65e0e3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzMzVhZTY2NDc0MTBiZGZmYjE3NWVjOTU1OGNhZmNjNjVlMGUzZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2006-11-24T18:32:14Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-11-24T18:32:14Z"}, "message": "re PR tree-optimization/29964 (function with volatile operators still found to be pure)\n\n2006-11-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/29964\n        * ipa-pure-const.c (check_tree): If the original tree\n        is volatile return early and say the function is not pure\n        nor const.  Remove the volatile check for writes.\n        (analyze_function): Print out the result of the local\n        analysis pass.\n\n2006-11-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/29964\n        * gcc.dg/pure-1.c: New test.\n\nFrom-SVN: r119162", "tree": {"sha": "32a1c1c8f49361c3502e6adb07259b9929277da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32a1c1c8f49361c3502e6adb07259b9929277da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13335ae6647410bdffb175ec9558cafcc65e0e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13335ae6647410bdffb175ec9558cafcc65e0e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13335ae6647410bdffb175ec9558cafcc65e0e3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13335ae6647410bdffb175ec9558cafcc65e0e3d/comments", "author": null, "committer": null, "parents": [{"sha": "db2675d3c0db34c0c0a0ccc73a609c7c24190e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2675d3c0db34c0c0a0ccc73a609c7c24190e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2675d3c0db34c0c0a0ccc73a609c7c24190e3c"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "12c14defe88e001f100da10854abfa5189eb3f08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13335ae6647410bdffb175ec9558cafcc65e0e3d", "patch": "@@ -1,3 +1,12 @@\n+2006-11-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/29964\n+\t* ipa-pure-const.c (check_tree): If the original tree\n+\tis volatile return early and say the function is not pure\n+\tnor const.  Remove the volatile check for writes.  \n+\t(analyze_function): Print out the result of the local\n+\tanalysis pass.\n+\n 2006-11-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/eabispe.h (TARGET_DEFAULT): Include"}, {"sha": "fdaff50d573b87dce8fba14bcc9ecad92f18c4c3", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=13335ae6647410bdffb175ec9558cafcc65e0e3d", "patch": "@@ -166,6 +166,14 @@ check_tree (funct_state local, tree t, bool checking_write)\n   if ((TREE_CODE (t) == EXC_PTR_EXPR) || (TREE_CODE (t) == FILTER_EXPR))\n     return;\n \n+  /* Any tree which is volatile disqualifies thie function from being\n+     const or pure. */\n+  if (TREE_THIS_VOLATILE (t))\n+    {\n+      local->pure_const_state = IPA_NEITHER;\n+      return;\n+    }\n+\n   while (TREE_CODE (t) == REALPART_EXPR \n \t || TREE_CODE (t) == IMAGPART_EXPR\n \t || handled_component_p (t))\n@@ -183,12 +191,13 @@ check_tree (funct_state local, tree t, bool checking_write)\n       \n       /* Any indirect reference that occurs on the lhs\n \t disqualifies the function from being pure or const. Any\n-\t indirect reference to a volatile disqualifies the\n-\t function from being pure or const.  Any indirect\n-\t reference that occurs on the rhs disqualifies the\n+\t indirect reference that occurs on the rhs disqualifies the\n \t function from being const.  */\n-      if (checking_write || TREE_THIS_VOLATILE (t)) \n-\tlocal->pure_const_state = IPA_NEITHER;\n+      if (checking_write) \n+\t{\n+\t  local->pure_const_state = IPA_NEITHER;\n+\t  return;\n+\t}\n       else if (local->pure_const_state == IPA_CONST)\n \tlocal->pure_const_state = IPA_PURE;\n     }\n@@ -541,7 +550,7 @@ analyze_function (struct cgraph_node *fn)\n \t      walk_tree (bsi_stmt_ptr (bsi), scan_function, \n \t\t\t fn, visited_nodes);\n \t      if (l->pure_const_state == IPA_NEITHER) \n-\t\treturn;\n+\t\tgoto end;\n \t    }\n \t}\n \n@@ -568,6 +577,14 @@ analyze_function (struct cgraph_node *fn)\n \t  pop_cfun ();\n \t}\n     }\n+\n+end:\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"after local analysis of %s with initial value = %d\\n \", \n+\t       cgraph_node_name (fn),\n+\t       l->pure_const_state);\n+    }\n }\n \n \f"}, {"sha": "49a333b7806581e30b5460be6390739bec12f595", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13335ae6647410bdffb175ec9558cafcc65e0e3d", "patch": "@@ -1,3 +1,8 @@\n+2006-11-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/29964\n+\t* gcc.dg/pure-1.c: New test.\n+\n 2006-11-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/eh/simd-2.C: Use -O -w in general for PowerPC."}, {"sha": "f365c8dae3756beeb14c39bc866d46b6154a1eda", "filename": "gcc/testsuite/gcc.dg/pure-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13335ae6647410bdffb175ec9558cafcc65e0e3d/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-1.c?ref=13335ae6647410bdffb175ec9558cafcc65e0e3d", "patch": "@@ -0,0 +1,16 @@\n+/* Regression test for PR middle-end/23584 */\n+/* Verify that dereferencing a volatile element in a struct causes\n+   the function not be pure.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-ipa-pure-const\" } */\n+\n+struct test_a { volatile int a; };\n+\n+int func_a(struct test_a *a)\n+{\n+        return a->a;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"found to be pure: func_a\" \"pure-const\" } } */\n+/* { dg-final { cleanup-ipa-dump \"pure-const\" } } */"}]}