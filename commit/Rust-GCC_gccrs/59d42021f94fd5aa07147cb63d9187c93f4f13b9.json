{"sha": "59d42021f94fd5aa07147cb63d9187c93f4f13b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkNDIwMjFmOTRmZDVhYTA3MTQ3Y2I2M2Q5MTg3YzkzZjRmMTNiOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-07T11:05:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-07T11:05:45Z"}, "message": "c-tree.texi, tm.texi: Consistently put NULL and NULL_TREE inside @code.\n\n\t* doc/c-tree.texi, doc/tm.texi: Consistently put NULL and\n\tNULL_TREE inside @code.\n\nFrom-SVN: r46057", "tree": {"sha": "290538b8a5f9fd01d6a105715cb56d12bd7a9bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290538b8a5f9fd01d6a105715cb56d12bd7a9bd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d42021f94fd5aa07147cb63d9187c93f4f13b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d42021f94fd5aa07147cb63d9187c93f4f13b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d42021f94fd5aa07147cb63d9187c93f4f13b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d42021f94fd5aa07147cb63d9187c93f4f13b9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96cd0e2d6bc4a178ade989180d2c09e5b0e72aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96cd0e2d6bc4a178ade989180d2c09e5b0e72aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96cd0e2d6bc4a178ade989180d2c09e5b0e72aa5"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "fc92184d08ccd07a0ad9823d7514da6443b23a07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59d42021f94fd5aa07147cb63d9187c93f4f13b9", "patch": "@@ -1,3 +1,8 @@\n+2001-10-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/c-tree.texi, doc/tm.texi: Consistently put NULL and\n+\tNULL_TREE inside @code.\n+\n 2001-10-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi: Document consistent style of \"32-bit\","}, {"sha": "e36090abcdd202b320c5dec6b28df2f351c722c5", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=59d42021f94fd5aa07147cb63d9187c93f4f13b9", "patch": "@@ -500,7 +500,7 @@ arguments.\n \n Note that in C (but not in C++) a function declared like @code{void f()}\n is an unprototyped function taking a variable number of arguments; the\n-@code{TYPE_ARG_TYPES} of such a function will be NULL@.\n+@code{TYPE_ARG_TYPES} of such a function will be @code{NULL}.\n \n @item METHOD_TYPE\n Used to represent the type of a non-static member function.  Like a\n@@ -1308,7 +1308,7 @@ This predicate holds if the function an overloaded\n @findex WHILE_COND\n \n A function that has a definition in the current translation unit will\n-have a non-NULL @code{DECL_INITIAL}.  However, back ends should not make\n+have a non-@code{NULL} @code{DECL_INITIAL}.  However, back ends should not make\n use of the particular value given by @code{DECL_INITIAL}.\n \n The @code{DECL_SAVED_TREE} macro will give the complete body of the\n@@ -1423,8 +1423,8 @@ fields.\n @item CASE_LABEL\n \n Use to represent a @code{case} label, range of @code{case} labels, or a\n-@code{default} label.  If @code{CASE_LOW} is NULL_TREE, then this is a a\n-@code{default} label.  Otherwise, if @code{CASE_HIGH} is NULL_TREE, then\n+@code{default} label.  If @code{CASE_LOW} is @code{NULL_TREE}, then this is a a\n+@code{default} label.  Otherwise, if @code{CASE_HIGH} is @code{NULL_TREE}, then\n this is an ordinary @code{case} label.  In this case, @code{CASE_LOW} is\n an expression giving the value of the label.  Both @code{CASE_LOW} and\n @code{CASE_HIGH} are @code{INTEGER_CST} nodes.  These values will have"}, {"sha": "193a060c72fca203d464cde284c6ead5ffa1d248", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d42021f94fd5aa07147cb63d9187c93f4f13b9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=59d42021f94fd5aa07147cb63d9187c93f4f13b9", "patch": "@@ -849,7 +849,7 @@ function pointers below.\n @findex init_machine_status\n @item   init_machine_status\n This is a @code{void (*)(struct function *)} function pointer.  If this\n-pointer is non-NULL it will be called once per function, before function\n+pointer is non-@code{NULL} it will be called once per function, before function\n compilation starts, in order to allow the target to perform any target\n specific initialisation of the @code{struct function} structure.  It is\n intended that this would be used to initialise the @code{machine} of\n@@ -858,14 +858,14 @@ that structure.\n @findex free_machine_status\n @item   free_machine_status\n This is a @code{void (*)(struct function *)} function pointer.  If this\n-pointer is non-NULL it will be called once per function, after the\n+pointer is non-@code{NULL} it will be called once per function, after the\n function has been compiled, in order to allow any memory allocated\n during the @code{init_machine_status} function call to be freed.\n \n @findex mark_machine_status\n @item   mark_machine_status\n This is a @code{void (*)(struct function *)} function pointer.  If this\n-pointer is non-NULL it will be called once per function in order to mark\n+pointer is non-@code{NULL} it will be called once per function in order to mark\n any data items in the @code{struct machine_function} structure which\n need garbage collection.\n \n@@ -6575,7 +6575,7 @@ buffer in which to store the name; its length is as long as\n \n The argument @var{is_inst} specifies whether the method is an instance\n method or a class method; @var{class_name} is the name of the class;\n-@var{cat_name} is the name of the category (or NULL if the method is not\n+@var{cat_name} is the name of the category (or @code{NULL} if the method is not\n in a category); and @var{sel_name} is the name of the selector.\n \n On systems where the assembler can handle quoted names, you can use this"}]}