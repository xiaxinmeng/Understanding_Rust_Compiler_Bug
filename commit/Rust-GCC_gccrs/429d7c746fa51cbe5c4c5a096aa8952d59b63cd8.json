{"sha": "429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5ZDdjNzQ2ZmE1MWNiZTVjNGM1YTA5NmFhODk1MmQ1OWI2M2NkOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "1999-11-23T11:40:26Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "1999-11-23T11:40:26Z"}, "message": "re GNATS java.net/57 (potential buffer overruns)\n\n1999-11-23  Bryce McKinlay  <bryce@albatross.co.nz>\n\n        * java/net/natPlainSocketImpl.cc: Fix potential buffer overruns in\n        Exception messages. PR java.net/57.\n        (bind): set SO_REUSEADDR before bind.\n        * java/net/natPlainDatagramSocketImpl.cc: Fix potential buffer\n        overruns. PR java.net/57.\n\nFrom-SVN: r30637", "tree": {"sha": "27127c34a727db5fad0f96ccea9ba47cc02fe95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27127c34a727db5fad0f96ccea9ba47cc02fe95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/comments", "author": null, "committer": null, "parents": [{"sha": "a166668a979ae3acfeb08af8dcd1022fb1cb0dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a166668a979ae3acfeb08af8dcd1022fb1cb0dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a166668a979ae3acfeb08af8dcd1022fb1cb0dc3"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "586d1213833bbed1864e853ee6fe621419167253", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "patch": "@@ -1,3 +1,11 @@\n+1999-11-23  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/net/natPlainSocketImpl.cc: Fix potential buffer overruns in\n+\tException messages. PR java.net/57.\n+\t(bind): set SO_REUSEADDR before bind.\n+\t* java/net/natPlainDatagramSocketImpl.cc: Fix potential buffer\n+\toverruns. PR java.net/57.\n+\n 1999-11-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.am (DIVIDESPEC): Removed."}, {"sha": "472faafcf1db578bd067d68182085bea9d2d2cb3", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "patch": "@@ -152,9 +152,9 @@ java::net::PlainDatagramSocketImpl::create ()\n   int sock = ::socket (AF_INET, SOCK_DGRAM, 0);\n   if (sock < 0)\n     {\n-      char msg[100];\n+      char msg[80];\n       char* strerr = strerror (errno);\n-      sprintf (msg, \"DatagramSocketImpl.create: %.*s\", 80, strerr);\n+      sprintf (msg, \"%.*s\", 80, strerr);\n       JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n     }\n   fnum = sock;\n@@ -206,9 +206,9 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n       return;\n     }\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.bind: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::BindException (JvNewStringUTF (msg)));\n }\n \n@@ -246,9 +246,9 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n   i->address = raddr;\n   return rport;\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.peek: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -284,9 +284,9 @@ java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n   if (::sendto (fnum, (char *) dbytes, p->getLength(), 0, ptr, len) >= 0)\n     return;\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.send: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -344,9 +344,9 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n   p->setLength ((jint) retlen);\n   return;\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.receive: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -359,9 +359,9 @@ java::net::PlainDatagramSocketImpl::setTimeToLive (jint ttl)\n   if (::setsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, val_len) == 0)\n     return;\n \n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.setTimeToLive: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -374,9 +374,9 @@ java::net::PlainDatagramSocketImpl::getTimeToLive ()\n   if (::getsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, &val_len) == 0)\n     return ((int) val) & 0xFF;\n \n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.getTimeToLive: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -423,10 +423,9 @@ java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *inetaddr,\n   if (::setsockopt (fnum, level, opname, ptr, len) == 0)\n     return;\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.%s: %.*s\", join ? \"join\" : \"leave\", 80,\n-    strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -531,9 +530,9 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n     }\n \n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.setOption: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n }\n \n@@ -633,9 +632,9 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n     }\n \n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"DatagramSocketImpl.getOption: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n }\n "}, {"sha": "732eb36155fe4b162c7e70fb20abf56e2a89e871", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d7c746fa51cbe5c4c5a096aa8952d59b63cd8/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=429d7c746fa51cbe5c4c5a096aa8952d59b63cd8", "patch": "@@ -84,7 +84,7 @@ java::net::PlainSocketImpl::setOption (jint, java::lang::Object *)\n java::lang::Object *\n java::net::PlainSocketImpl::getOption (jint)\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"SocketImpl.create: unimplemented\")));\n+  JvThrow (new SocketException (JvNewStringLatin1 (\"SocketImpl.getOption: unimplemented\")));\n }\n \n #else /* DISABLE_JAVA_NET */\n@@ -124,6 +124,7 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n   jbyteArray haddress = host->address;\n   jbyte *bytes = elements (haddress);\n   int len = haddress->length;\n+  int i = 1;\n \n   if (len == 4)\n     {\n@@ -146,6 +147,10 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n #endif\n   else\n     goto error;\n+\n+  // Enable SO_REUSEADDR, so that servers can reuse ports left in TIME_WAIT.\n+  ::setsockopt(fnum, SOL_SOCKET, SO_REUSEADDR, &i, sizeof(i));\n+  \n   if (::bind (fnum, ptr, len) == 0)\n     {\n       address = host;\n@@ -159,9 +164,9 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n       return;\n     }\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"SocketImpl.bind: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::BindException (JvNewStringUTF (msg)));\n }\n \n@@ -204,9 +209,9 @@ java::net::PlainSocketImpl::connect (java::net::InetAddress *host, jint rport)\n       goto error;\n   return;  \n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"SocketImpl.connect: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::ConnectException (JvNewStringUTF (msg)));\n }\n \n@@ -215,9 +220,9 @@ java::net::PlainSocketImpl::listen (jint backlog)\n {\n   if (::listen (fnum, backlog) != 0)\n     {\n-      char msg[100];\n+      char msg[80];\n       char* strerr = strerror (errno);\n-      sprintf (msg, \"SocketImpl.listen: %.*s\", 80, strerr);\n+      sprintf (msg, \"%.*s\", 80, strerr);\n       JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n     }\n }\n@@ -274,9 +279,9 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n   s->fd = new java::io::FileDescriptor (new_socket);\n   return;\n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"SocketImpl.accept: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n }\n \n@@ -365,9 +370,9 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n     }\n \n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"SocketImpl.setOption: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n }\n \n@@ -465,9 +470,9 @@ java::net::PlainSocketImpl::getOption (jint optID)\n     }\n \n  error:\n-  char msg[100];\n+  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"SocketImpl.getOption: %.*s\", 80, strerr);\n+  sprintf (msg, \"%.*s\", 80, strerr);\n   JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n }\n "}]}