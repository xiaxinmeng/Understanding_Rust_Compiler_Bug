{"sha": "bc795e3e039342e74d2d2b0515dd190f7d24ec65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3OTVlM2UwMzkzNDJlNzRkMmQyYjA1MTVkZDE5MGY3ZDI0ZWM2NQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2016-04-20T10:44:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:44:17Z"}, "message": "sem_ch4.adb: Fix typos in comments.\n\n2016-04-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch4.adb: Fix typos in comments.\n\t* sem_res.adb (Resolve_Case_Expression): Fix type of case alternatives.\n\nFrom-SVN: r235263", "tree": {"sha": "a74e6596573ee26603c7bef7d84f7db2858afd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74e6596573ee26603c7bef7d84f7db2858afd8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc795e3e039342e74d2d2b0515dd190f7d24ec65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc795e3e039342e74d2d2b0515dd190f7d24ec65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc795e3e039342e74d2d2b0515dd190f7d24ec65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc795e3e039342e74d2d2b0515dd190f7d24ec65/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d493941584db02404346da828ee794e871ad5955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d493941584db02404346da828ee794e871ad5955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d493941584db02404346da828ee794e871ad5955"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "1409c795e354722e2fdfb552aeda9392adaf41cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bc795e3e039342e74d2d2b0515dd190f7d24ec65", "patch": "@@ -1,3 +1,8 @@\n+2016-04-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch4.adb: Fix typos in comments.\n+\t* sem_res.adb (Resolve_Case_Expression): Fix type of case alternatives.\n+\n 2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Selected_Component): A reference to the"}, {"sha": "6ba51e8f3d8c2b259ebeb3bbe416ecae5bb595d1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bc795e3e039342e74d2d2b0515dd190f7d24ec65", "patch": "@@ -2175,12 +2175,12 @@ package body Sem_Ch4 is\n          begin\n             Set_Etype (N, Any_Type);\n \n-            --  Loop through intepretations of Then_Expr\n+            --  Loop through interpretations of Then_Expr\n \n             Get_First_Interp (Then_Expr, I, It);\n             while Present (It.Nam) loop\n \n-               --  Add possible intepretation of Then_Expr if no Else_Expr, or\n+               --  Add possible interpretation of Then_Expr if no Else_Expr, or\n                --  Else_Expr is present and has a compatible type.\n \n                if No (Else_Expr)"}, {"sha": "2ce47e23f97266fe2e68ded96850246b2d59d412", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc795e3e039342e74d2d2b0515dd190f7d24ec65/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bc795e3e039342e74d2d2b0515dd190f7d24ec65", "patch": "@@ -6509,27 +6509,42 @@ package body Sem_Res is\n    -----------------------------\n \n    procedure Resolve_Case_Expression (N : Node_Id; Typ : Entity_Id) is\n-      Alt    : Node_Id;\n-      Is_Dyn : Boolean;\n+      Alt      : Node_Id;\n+      Alt_Expr : Node_Id;\n+      Alt_Typ  : Entity_Id;\n+      Is_Dyn   : Boolean;\n \n    begin\n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n-         Resolve (Expression (Alt), Typ);\n+         Alt_Expr := Expression (Alt);\n+         Resolve (Alt_Expr, Typ);\n+         Alt_Typ := Etype (Alt_Expr);\n+\n+         --  When the expression is of a scalar subtype different from the\n+         --  result subtype, then insert a conversion to ensure the generation\n+         --  of a constraint check.\n+\n+         if Is_Scalar_Type (Alt_Typ) and then Alt_Typ /= Typ then\n+            Rewrite (Alt_Expr, Convert_To (Typ, Alt_Expr));\n+            Analyze_And_Resolve (Alt_Expr, Typ);\n+         end if;\n+\n          Next (Alt);\n       end loop;\n \n       --  Apply RM 4.5.7 (17/3): whether the expression is statically or\n       --  dynamically tagged must be known statically.\n \n       if Is_Tagged_Type (Typ) and then not Is_Class_Wide_Type (Typ) then\n-         Alt := First (Alternatives (N));\n+         Alt    := First (Alternatives (N));\n          Is_Dyn := Is_Dynamically_Tagged (Expression (Alt));\n \n          while Present (Alt) loop\n             if Is_Dynamically_Tagged (Expression (Alt)) /= Is_Dyn then\n-               Error_Msg_N (\"all or none of the dependent expressions \"\n-                            & \"can be dynamically tagged\", N);\n+               Error_Msg_N\n+                 (\"all or none of the dependent expressions can be \"\n+                  & \"dynamically tagged\", N);\n             end if;\n \n             Next (Alt);"}]}