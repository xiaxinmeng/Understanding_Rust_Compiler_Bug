{"sha": "be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU0N2Q2ZWNlZmZkMmM1ZGJiYzE1NjZkNWVlYTQ5MDUyN2ZiMmJkNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-16T06:54:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-16T06:54:42Z"}, "message": "libgo: Update to Go 1.1.1.\n\nFrom-SVN: r200974", "tree": {"sha": "0e8fda573576bb4181dba29d0e88380a8c38fafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e8fda573576bb4181dba29d0e88380a8c38fafd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/comments", "author": null, "committer": null, "parents": [{"sha": "efb30cdeb003fd7c585ee0d7657340086abcbd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb30cdeb003fd7c585ee0d7657340086abcbd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb30cdeb003fd7c585ee0d7657340086abcbd9e"}], "stats": {"total": 146585, "additions": 23912, "deletions": 122673}, "files": [{"sha": "5b7344c007d699e285074301c038d890228d220c", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -1,4 +1,4 @@\n-229081515358\n+a7bd9a33067b\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "6a81d336819cdd68282253e0540fcbc35b312796", "filename": "libgo/Makefile.am", "status": "modified", "additions": 58, "deletions": 282, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -211,40 +211,11 @@ toolexeclibgoencoding_DATA = \\\n \tencoding/pem.gox \\\n \tencoding/xml.gox\n \n-if LIBGO_IS_LINUX\n-# exp_inotify_gox = exp/inotify.gox\n-exp_inotify_gox =\n-else\n-exp_inotify_gox =\n-endif\n-\n toolexeclibgoexpdir = $(toolexeclibgodir)/exp\n \n toolexeclibgoexp_DATA = \\\n-\texp/cookiejar.gox \\\n-\texp/ebnf.gox \\\n-\texp/html.gox \\\n-\t$(exp_inotify_gox) \\\n-\texp/norm.gox \\\n \texp/proxy.gox \\\n-\texp/ssa.gox \\\n-\texp/terminal.gox \\\n-\texp/utf8string.gox\n-\n-toolexeclibgoexphtmldir = $(toolexeclibgoexpdir)/html\n-\n-toolexeclibgoexphtml_DATA = \\\n-\texp/html/atom.gox\n-\n-toolexeclibgoexplocaledir = $(toolexeclibgoexpdir)/locale\n-\n-toolexeclibgoexplocale_DATA = \\\n-\texp/locale/collate.gox\n-\n-toolexeclibgoexplocalecollatedir = $(toolexeclibgoexplocaledir)/collate\n-\n-toolexeclibgoexplocalecollate_DATA = \\\n-\texp/locale/collate/build.gox\n+\texp/terminal.gox\n \n toolexeclibgogodir = $(toolexeclibgodir)/go\n \n@@ -256,8 +227,7 @@ toolexeclibgogo_DATA = \\\n \tgo/parser.gox \\\n \tgo/printer.gox \\\n \tgo/scanner.gox \\\n-\tgo/token.gox \\\n-\tgo/types.gox\n+\tgo/token.gox\n \n toolexeclibgohashdir = $(toolexeclibgodir)/hash\n \n@@ -322,6 +292,7 @@ toolexeclibgonethttpdir = $(toolexeclibgonetdir)/http\n \n toolexeclibgonethttp_DATA = \\\n \tnet/http/cgi.gox \\\n+\tnet/http/cookiejar.gox \\\n \tnet/http/fcgi.gox \\\n \tnet/http/httptest.gox \\\n \tnet/http/httputil.gox \\\n@@ -335,7 +306,6 @@ toolexeclibgonetrpc_DATA = \\\n toolexeclibgoolddir = $(toolexeclibgodir)/old\n \n toolexeclibgoold_DATA = \\\n-\told/netchan.gox \\\n \told/regexp.gox \\\n \told/template.gox\n \n@@ -435,6 +405,16 @@ endif\n endif\n endif\n \n+if LIBGO_IS_LINUX\n+runtime_netpoll_files = netpoll.c runtime/netpoll_epoll.c\n+else\n+if LIBGO_IS_DARWIN\n+runtime_netpoll_files = netpoll.c runtime/netpoll_kqueue.c\n+else\n+runtime_netpoll_files = runtime/netpoll_stub.c\n+endif\n+endif\n+\n runtime_files = \\\n \truntime/go-append.c \\\n \truntime/go-assert.c \\\n@@ -513,6 +493,7 @@ runtime_files = \\\n \truntime/mgc0.c \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n+\t$(runtime_netpoll_files) \\\n \truntime/panic.c \\\n \truntime/parfor.c \\\n \truntime/print.c \\\n@@ -548,6 +529,10 @@ mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n+netpoll.c: $(srcdir)/runtime/netpoll.goc goc2c\n+\t./goc2c $< > $@.tmp\n+\tmv -f $@.tmp $@\n+\n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n@@ -573,7 +558,8 @@ time.c: $(srcdir)/runtime/time.goc goc2c\n \tmv -f $@.tmp $@\n \n go_bufio_files = \\\n-\tgo/bufio/bufio.go\n+\tgo/bufio/bufio.go \\\n+\tgo/bufio/scan.go\n \n go_bytes_files = \\\n \tgo/bytes/buffer.go \\\n@@ -678,17 +664,17 @@ go_net_fd_os_file = go/net/fd_select.go\n go_net_newpollserver_file = go/net/newpollserver_rtems.go\n else # !LIBGO_IS_RTEMS\n if LIBGO_IS_LINUX\n-go_net_fd_os_file = go/net/fd_linux.go\n-go_net_newpollserver_file = go/net/newpollserver_unix.go\n+go_net_fd_os_file =\n+go_net_newpollserver_file =\n else # !LIBGO_IS_LINUX && !LIBGO_IS_RTEMS\n if LIBGO_IS_NETBSD\n go_net_fd_os_file = go/net/fd_bsd.go\n-go_net_newpollserver_file = go/net/newpollserver_unix.go\n+go_net_newpollserver_file =\n else # !LIBGO_IS_NETBSD && !LIBGO_IS_LINUX && !LIBGO_IS_RTEMS\n # By default use select with pipes.  Most systems should have\n # something better.\n go_net_fd_os_file = go/net/fd_select.go\n-go_net_newpollserver_file = go/net/newpollserver_unix.go\n+go_net_newpollserver_file =\n endif # !LIBGO_IS_NETBSD\n endif # !LIBGO_IS_LINUX\n endif # !LIBGO_IS_RTEMS\n@@ -759,6 +745,16 @@ else\n go_net_cloexec_file = go/net/sys_cloexec.go\n endif\n \n+if LIBGO_IS_LINUX\n+go_net_poll_file = go/net/fd_poll_runtime.go\n+else\n+if LIBGO_IS_DARWIN\n+go_net_poll_file = go/net/fd_poll_runtime.go\n+else\n+go_net_poll_file = go/net/fd_poll_unix.go\n+endif\n+endif\n+\n go_net_files = \\\n \tgo/net/cgo_unix.go \\\n \t$(go_net_cgo_file) \\\n@@ -786,10 +782,12 @@ go_net_files = \\\n \tgo/net/net.go \\\n \tgo/net/parse.go \\\n \tgo/net/pipe.go \\\n+\t$(go_net_poll_file) \\\n \tgo/net/port.go \\\n \tgo/net/port_unix.go \\\n \t$(go_net_sendfile_file) \\\n \tgo/net/sock_posix.go \\\n+\tgo/net/sock_unix.go \\\n \t$(go_net_sock_file) \\\n \tgo/net/sockopt_posix.go \\\n \t$(go_net_sockopt_file) \\\n@@ -890,7 +888,8 @@ go_os_files = \\\n \t$(go_os_stat_file) \\\n \tgo/os/str.go \\\n \t$(go_os_sys_file) \\\n-\tgo/os/types.go\n+\tgo/os/types.go \\\n+\tgo/os/types_notwin.go\n \n go_path_files = \\\n \tgo/path/match.go \\\n@@ -979,6 +978,7 @@ go_syslog_c_files = \\\n \tgo/log/syslog/syslog_c.c\n \n go_testing_files = \\\n+\tgo/testing/allocs.go \\\n \tgo/testing/benchmark.go \\\n \tgo/testing/example.go \\\n \tgo/testing/testing.go\n@@ -1101,7 +1101,8 @@ go_crypto_rand_files = \\\n \tgo/crypto/rand/rand_unix.go \\\n \tgo/crypto/rand/util.go\n go_crypto_rc4_files = \\\n-\tgo/crypto/rc4/rc4.go\n+\tgo/crypto/rc4/rc4.go \\\n+\tgo/crypto/rc4/rc4_ref.go\n go_crypto_rsa_files = \\\n \tgo/crypto/rsa/pkcs1v15.go \\\n \tgo/crypto/rsa/rsa.go\n@@ -1212,73 +1213,14 @@ go_encoding_xml_files = \\\n \tgo/encoding/xml/typeinfo.go \\\n \tgo/encoding/xml/xml.go\n \n-go_exp_cookiejar_files = \\\n-\tgo/exp/cookiejar/jar.go \\\n-\tgo/exp/cookiejar/storage.go\n-go_exp_ebnf_files = \\\n-\tgo/exp/ebnf/ebnf.go \\\n-\tgo/exp/ebnf/parser.go\n-go_exp_html_files = \\\n-\tgo/exp/html/const.go \\\n-\tgo/exp/html/doc.go \\\n-\tgo/exp/html/doctype.go \\\n-\tgo/exp/html/entity.go \\\n-\tgo/exp/html/escape.go \\\n-\tgo/exp/html/foreign.go \\\n-\tgo/exp/html/node.go \\\n-\tgo/exp/html/parse.go \\\n-\tgo/exp/html/render.go \\\n-\tgo/exp/html/token.go\n-go_exp_html_atom_files = \\\n-\tgo/exp/html/atom/atom.go \\\n-\tgo/exp/html/atom/table.go\n-go_exp_inotify_files = \\\n-\tgo/exp/inotify/inotify_linux.go\n-go_exp_locale_collate_files = \\\n-\tgo/exp/locale/collate/colelem.go \\\n-\tgo/exp/locale/collate/collate.go \\\n-\tgo/exp/locale/collate/colltab.go \\\n-\tgo/exp/locale/collate/contract.go \\\n-\tgo/exp/locale/collate/export.go \\\n-\tgo/exp/locale/collate/sort.go \\\n-\tgo/exp/locale/collate/table.go \\\n-\tgo/exp/locale/collate/tables.go \\\n-\tgo/exp/locale/collate/trie.go\n-go_exp_locale_collate_build_files = \\\n-\tgo/exp/locale/collate/build/builder.go \\\n-\tgo/exp/locale/collate/build/colelem.go \\\n-\tgo/exp/locale/collate/build/contract.go \\\n-\tgo/exp/locale/collate/build/order.go \\\n-\tgo/exp/locale/collate/build/table.go \\\n-\tgo/exp/locale/collate/build/trie.go\n-go_exp_norm_files = \\\n-\tgo/exp/norm/composition.go \\\n-\tgo/exp/norm/forminfo.go \\\n-\tgo/exp/norm/input.go \\\n-\tgo/exp/norm/iter.go \\\n-\tgo/exp/norm/normalize.go \\\n-\tgo/exp/norm/readwriter.go \\\n-\tgo/exp/norm/tables.go \\\n-\tgo/exp/norm/trie.go\n go_exp_proxy_files = \\\n \tgo/exp/proxy/direct.go \\\n \tgo/exp/proxy/per_host.go \\\n \tgo/exp/proxy/proxy.go \\\n \tgo/exp/proxy/socks5.go\n-go_exp_ssa_files = \\\n-\tgo/exp/ssa/blockopt.go \\\n-\tgo/exp/ssa/doc.go \\\n-\tgo/exp/ssa/func.go \\\n-\tgo/exp/ssa/sanity.go \\\n-\tgo/exp/ssa/ssa.go \\\n-\tgo/exp/ssa/literal.go \\\n-\tgo/exp/ssa/print.go \\\n-\tgo/exp/ssa/util.go\n go_exp_terminal_files = \\\n \tgo/exp/terminal/terminal.go \\\n \tgo/exp/terminal/util.go\n-go_exp_utf8string_files = \\\n-\tgo/exp/utf8string/string.go\n \n go_go_ast_files = \\\n \tgo/go/ast/ast.go \\\n@@ -1317,24 +1259,6 @@ go_go_token_files = \\\n \tgo/go/token/position.go \\\n \tgo/go/token/serialize.go \\\n \tgo/go/token/token.go\n-go_go_types_files = \\\n-\tgo/go/types/api.go \\\n-\tgo/go/types/builtins.go \\\n-\tgo/go/types/check.go \\\n-\tgo/go/types/const.go \\\n-\tgo/go/types/conversions.go \\\n-\tgo/go/types/errors.go \\\n-\tgo/go/types/exportdata.go \\\n-\tgo/go/types/expr.go \\\n-\tgo/go/types/gcimporter.go \\\n-\tgo/go/types/objects.go \\\n-\tgo/go/types/operand.go \\\n-\tgo/go/types/predicates.go \\\n-\tgo/go/types/resolve.go \\\n-\tgo/go/types/scope.go \\\n-\tgo/go/types/stmt.go \\\n-\tgo/go/types/types.go \\\n-\tgo/go/types/universe.go\n \n go_hash_adler32_files = \\\n \tgo/hash/adler32/adler32.go\n@@ -1458,6 +1382,9 @@ go_net_url_files = \\\n go_net_http_cgi_files = \\\n \tgo/net/http/cgi/child.go \\\n \tgo/net/http/cgi/host.go\n+go_net_http_cookiejar_files = \\\n+\tgo/net/http/cookiejar/jar.go \\\n+\tgo/net/http/cookiejar/punycode.go\n go_net_http_fcgi_files = \\\n \tgo/net/http/fcgi/child.go \\\n \tgo/net/http/fcgi/fcgi.go\n@@ -1473,10 +1400,6 @@ go_net_http_httputil_files = \\\n \tgo/net/http/httputil/reverseproxy.go\n \n \n-go_old_netchan_files = \\\n-\tgo/old/netchan/common.go \\\n-\tgo/old/netchan/export.go \\\n-\tgo/old/netchan/import.go\n go_old_regexp_files = \\\n \tgo/old/regexp/regexp.go\n go_old_template_files = \\\n@@ -1518,6 +1441,7 @@ go_net_rpc_jsonrpc_files = \\\n \tgo/net/rpc/jsonrpc/server.go\n \n go_runtime_debug_files = \\\n+\tgo/runtime/debug/garbage.go \\\n \tgo/runtime/debug/stack.go\n go_runtime_pprof_files = \\\n \tgo/runtime/pprof/pprof.go\n@@ -1896,17 +1820,8 @@ libgo_go_objs = \\\n \tencoding/json.lo \\\n \tencoding/pem.lo \\\n \tencoding/xml.lo \\\n-\texp/cookiejar.lo \\\n-\texp/ebnf.lo \\\n-\texp/html.lo \\\n-\texp/html/atom.lo \\\n-\texp/locale/collate.lo \\\n-\texp/locale/collate/build.lo \\\n-\texp/norm.lo \\\n \texp/proxy.lo \\\n-\texp/ssa.lo \\\n \texp/terminal.lo \\\n-\texp/utf8string.lo \\\n \thtml/template.lo \\\n \tgo/ast.lo \\\n \tgo/build.lo \\\n@@ -1916,12 +1831,12 @@ libgo_go_objs = \\\n \tgo/printer.lo \\\n \tgo/scanner.lo \\\n \tgo/token.lo \\\n-\tgo/types.lo \\\n \thash/adler32.lo \\\n \thash/crc32.lo \\\n \thash/crc64.lo \\\n \thash/fnv.lo \\\n \tnet/http/cgi.lo \\\n+\tnet/http/cookiejar.lo \\\n \tnet/http/fcgi.lo \\\n \tnet/http/httptest.lo \\\n \tnet/http/httputil.lo \\\n@@ -1945,7 +1860,6 @@ libgo_go_objs = \\\n \tnet/smtp.lo \\\n \tnet/textproto.lo \\\n \tnet/url.lo \\\n-\told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n \tos/exec.lo \\\n@@ -2730,69 +2644,6 @@ encoding/xml/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/xml/check\n \n-@go_include@ exp/cookiejar.lo.dep\n-exp/cookiejar.lo.dep: $(go_exp_cookiejar_files)\n-\t$(BUILDDEPS)\n-exp/cookiejar.lo: $(go_exp_cookiejar_files)\n-\t$(BUILDPACKAGE)\n-exp/cookiejar/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/cookiejar/check\n-\n-@go_include@ exp/ebnf.lo.dep\n-exp/ebnf.lo.dep: $(go_exp_ebnf_files)\n-\t$(BUILDDEPS)\n-exp/ebnf.lo: $(go_exp_ebnf_files)\n-\t$(BUILDPACKAGE)\n-exp/ebnf/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/ebnf/check\n-\n-@go_include@ exp/html.lo.dep\n-exp/html.lo.dep: $(go_exp_html_files)\n-\t$(BUILDDEPS)\n-exp/html.lo: $(go_exp_html_files)\n-\t$(BUILDPACKAGE)\n-exp/html/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/html/check\n-\n-@go_include@ exp/html/atom.lo.dep\n-exp/html/atom.lo.dep: $(go_exp_html_atom_files)\n-\t$(BUILDDEPS)\n-exp/html/atom.lo: $(go_exp_html_atom_files)\n-\t$(BUILDPACKAGE)\n-exp/html/atom/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/html/atom/check\n-\n-@go_include@ exp/locale/collate.lo.dep\n-exp/locale/collate.lo.dep: $(go_exp_locale_collate_files)\n-\t$(BUILDDEPS)\n-exp/locale/collate.lo: $(go_exp_locale_collate_files)\n-\t$(BUILDPACKAGE)\n-exp/locale/collate/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/locale/collate/check\n-\n-@go_include@ exp/locale/collate/build.lo.dep\n-exp/locale/collate/build.lo.dep: $(go_exp_locale_collate_build_files)\n-\t$(BUILDDEPS)\n-exp/locale/collate/build.lo: $(go_exp_locale_collate_build_files)\n-\t$(BUILDPACKAGE)\n-exp/locale/collate/build/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/locale/collate/build/check\n-\n-@go_include@ exp/norm.lo.dep\n-exp/norm.lo.dep: $(go_exp_norm_files)\n-\t$(BUILDDEPS)\n-exp/norm.lo: $(go_exp_norm_files)\n-\t$(BUILDPACKAGE)\n-exp/norm/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/norm/check\n-\n @go_include@ exp/proxy.lo.dep\n exp/proxy.lo.dep: $(go_exp_proxy_files)\n \t$(BUILDDEPS)\n@@ -2802,15 +2653,6 @@ exp/proxy/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/proxy/check\n \n-@go_include@ exp/ssa.lo.dep\n-exp/ssa.lo.dep: $(go_exp_ssa_files)\n-\t$(BUILDDEPS)\n-exp/ssa.lo: $(go_exp_ssa_files)\n-\t$(BUILDPACKAGE)\n-exp/ssa/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/ssa/check\n-\n @go_include@ exp/terminal.lo.dep\n exp/terminal.lo.dep: $(go_exp_terminal_files)\n \t$(BUILDDEPS)\n@@ -2820,24 +2662,6 @@ exp/terminal/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/terminal/check\n \n-@go_include@ exp/utf8string.lo.dep\n-exp/utf8string.lo.dep: $(go_exp_utf8string_files)\n-\t$(BUILDDEPS)\n-exp/utf8string.lo: $(go_exp_utf8string_files)\n-\t$(BUILDPACKAGE)\n-exp/utf8string/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/utf8string/check\n-\n-@go_include@ exp/inotify.lo.dep\n-exp/inotify.lo.dep: $(go_exp_inotify_files)\n-\t$(BUILDDEPS)\n-exp/inotify.lo: $(go_exp_inotify_files)\n-\t$(BUILDPACKAGE)\n-exp/inotify/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/inotify/check\n-\n @go_include@ html/template.lo.dep\n html/template.lo.dep: $(go_html_template_files)\n \t$(BUILDDEPS)\n@@ -2928,15 +2752,6 @@ go/token/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: go/token/check\n \n-@go_include@ go/types.lo.dep\n-go/types.lo.dep: $(go_go_types_files)\n-\t$(BUILDDEPS)\n-go/types.lo: $(go_go_types_files)\n-\t$(BUILDPACKAGE)\n-go/types/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: go/types/check\n-\n @go_include@ hash/adler32.lo.dep\n hash/adler32.lo.dep: $(go_hash_adler32_files)\n \t$(BUILDDEPS)\n@@ -3147,6 +2962,15 @@ net/http/cgi/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/http/cgi/check\n \n+@go_include@ net/http/cookiejar.lo.dep\n+net/http/cookiejar.lo.dep: $(go_net_http_cookiejar_files)\n+\t$(BUILDDEPS)\n+net/http/cookiejar.lo: $(go_net_http_cookiejar_files)\n+\t$(BUILDPACKAGE)\n+net/http/cookiejar/check: $(CHECK_DEPS)\n+\t@$(CHECK)\n+.PHONY: net/http/cookiejar/check\n+\n @go_include@ net/http/fcgi.lo.dep\n net/http/fcgi.lo.dep: $(go_net_http_fcgi_files)\n \t$(BUILDDEPS)\n@@ -3192,15 +3016,6 @@ net/rpc/jsonrpc/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/rpc/jsonrpc/check\n \n-@go_include@ old/netchan.lo.dep\n-old/netchan.lo.dep: $(go_old_netchan_files)\n-\t$(BUILDDEPS)\n-old/netchan.lo: $(go_old_netchan_files)\n-\t$(BUILDPACKAGE)\n-old/netchan/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: old/netchan/check\n-\n @go_include@ old/regexp.lo.dep\n old/regexp.lo.dep: $(go_old_regexp_files)\n \t$(BUILDDEPS)\n@@ -3549,30 +3364,10 @@ encoding/pem.gox: encoding/pem.lo\n encoding/xml.gox: encoding/xml.lo\n \t$(BUILDGOX)\n \n-exp/cookiejar.gox: exp/cookiejar.lo\n-\t$(BUILDGOX)\n-exp/ebnf.gox: exp/ebnf.lo\n-\t$(BUILDGOX)\n-exp/html.gox: exp/html.lo\n-\t$(BUILDGOX)\n-exp/html/atom.gox: exp/html/atom.lo\n-\t$(BUILDGOX)\n-exp/inotify.gox: exp/inotify.lo\n-\t$(BUILDGOX)\n-exp/locale/collate.gox: exp/locale/collate.lo\n-\t$(BUILDGOX)\n-exp/locale/collate/build.gox: exp/locale/collate/build.lo\n-\t$(BUILDGOX)\n-exp/norm.gox: exp/norm.lo\n-\t$(BUILDGOX)\n exp/proxy.gox: exp/proxy.lo\n \t$(BUILDGOX)\n-exp/ssa.gox: exp/ssa.lo\n-\t$(BUILDGOX)\n exp/terminal.gox: exp/terminal.lo\n \t$(BUILDGOX)\n-exp/utf8string.gox: exp/utf8string.lo\t\n-\t$(BUILDGOX)\n \n html/template.gox: html/template.lo\n \t$(BUILDGOX)\n@@ -3593,8 +3388,6 @@ go/scanner.gox: go/scanner.lo\n \t$(BUILDGOX)\n go/token.gox: go/token.lo\n \t$(BUILDGOX)\n-go/types.gox: go/types.lo\n-\t$(BUILDGOX)\n \n hash/adler32.gox: hash/adler32.lo\n \t$(BUILDGOX)\n@@ -3650,6 +3443,8 @@ net/url.gox: net/url.lo\n \n net/http/cgi.gox: net/http/cgi.lo\n \t$(BUILDGOX)\n+net/http/cookiejar.gox: net/http/cookiejar.lo\n+\t$(BUILDGOX)\n net/http/fcgi.gox: net/http/fcgi.lo\n \t$(BUILDGOX)\n net/http/httptest.gox: net/http/httptest.lo\n@@ -3662,8 +3457,6 @@ net/http/pprof.gox: net/http/pprof.lo\n net/rpc/jsonrpc.gox: net/rpc/jsonrpc.lo\n \t$(BUILDGOX)\n \n-old/netchan.gox: old/netchan.lo\n-\t$(BUILDGOX)\n old/regexp.gox: old/regexp.lo\n \t$(BUILDGOX)\n old/template.gox: old/template.lo\n@@ -3709,13 +3502,6 @@ unicode/utf16.gox: unicode/utf16.lo\n unicode/utf8.gox: unicode/utf8.lo\n \t$(BUILDGOX)\n \n-if LIBGO_IS_LINUX\n-# exp_inotify_check = exp/inotify/check\n-exp_inotify_check =\n-else\n-exp_inotify_check =\n-endif\n-\n TEST_PACKAGES = \\\n \tbufio/check \\\n \tbytes/check \\\n@@ -3786,17 +3572,8 @@ TEST_PACKAGES = \\\n \tencoding/json/check \\\n \tencoding/pem/check \\\n \tencoding/xml/check \\\n-\texp/cookiejar/check \\\n-\texp/ebnf/check \\\n-\texp/html/check \\\n-\texp/html/atom/check \\\n-\t$(exp_inotify_check) \\\n-\texp/locale/collate/check \\\n-\texp/locale/collate/build/check \\\n-\texp/norm/check \\\n \texp/proxy/check \\\n \texp/terminal/check \\\n-\texp/utf8string/check \\\n \thtml/template/check \\\n \tgo/ast/check \\\n \t$(go_build_check_omitted_since_it_calls_6g) \\\n@@ -3806,7 +3583,6 @@ TEST_PACKAGES = \\\n \tgo/printer/check \\\n \tgo/scanner/check \\\n \tgo/token/check \\\n-\tgo/types/check \\\n \thash/adler32/check \\\n \thash/crc32/check \\\n \thash/crc64/check \\\n@@ -3824,6 +3600,7 @@ TEST_PACKAGES = \\\n \tmime/multipart/check \\\n \tnet/http/check \\\n \tnet/http/cgi/check \\\n+\tnet/http/cookiejar/check \\\n \tnet/http/fcgi/check \\\n \tnet/http/httptest/check \\\n \tnet/http/httputil/check \\\n@@ -3833,7 +3610,6 @@ TEST_PACKAGES = \\\n \tnet/textproto/check \\\n \tnet/url/check \\\n \tnet/rpc/jsonrpc/check \\\n-\told/netchan/check \\\n \told/regexp/check \\\n \told/template/check \\\n \tos/exec/check \\"}, {"sha": "eccc72d2e3caa58b5ccf7e5ea7c6b4924fc960b8", "filename": "libgo/Makefile.in", "status": "modified", "additions": 109, "deletions": 397, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -101,9 +101,6 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgodebugdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoencodingdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoexpdir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgoexphtmldir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgoexplocaledir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgoexplocalecollatedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgogodir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgohashdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgohtmldir)\" \\\n@@ -153,22 +150,20 @@ am__DEPENDENCIES_2 = bufio.lo bytes.lo bytes/index.lo crypto.lo \\\n \tdebug/pe.lo encoding/ascii85.lo encoding/asn1.lo \\\n \tencoding/base32.lo encoding/base64.lo encoding/binary.lo \\\n \tencoding/csv.lo encoding/gob.lo encoding/hex.lo \\\n-\tencoding/json.lo encoding/pem.lo encoding/xml.lo \\\n-\texp/cookiejar.lo exp/ebnf.lo exp/html.lo exp/html/atom.lo \\\n-\texp/locale/collate.lo exp/locale/collate/build.lo exp/norm.lo \\\n-\texp/proxy.lo exp/ssa.lo exp/terminal.lo exp/utf8string.lo \\\n-\thtml/template.lo go/ast.lo go/build.lo go/doc.lo go/format.lo \\\n-\tgo/parser.lo go/printer.lo go/scanner.lo go/token.lo \\\n-\tgo/types.lo hash/adler32.lo hash/crc32.lo hash/crc64.lo \\\n-\thash/fnv.lo net/http/cgi.lo net/http/fcgi.lo \\\n-\tnet/http/httptest.lo net/http/httputil.lo net/http/pprof.lo \\\n-\timage/color.lo image/draw.lo image/gif.lo image/jpeg.lo \\\n-\timage/png.lo index/suffixarray.lo io/ioutil.lo log/syslog.lo \\\n+\tencoding/json.lo encoding/pem.lo encoding/xml.lo exp/proxy.lo \\\n+\texp/terminal.lo html/template.lo go/ast.lo go/build.lo \\\n+\tgo/doc.lo go/format.lo go/parser.lo go/printer.lo \\\n+\tgo/scanner.lo go/token.lo hash/adler32.lo hash/crc32.lo \\\n+\thash/crc64.lo hash/fnv.lo net/http/cgi.lo \\\n+\tnet/http/cookiejar.lo net/http/fcgi.lo net/http/httptest.lo \\\n+\tnet/http/httputil.lo net/http/pprof.lo image/color.lo \\\n+\timage/draw.lo image/gif.lo image/jpeg.lo image/png.lo \\\n+\tindex/suffixarray.lo io/ioutil.lo log/syslog.lo \\\n \tlog/syslog/syslog_c.lo math/big.lo math/cmplx.lo math/rand.lo \\\n \tmime/multipart.lo net/http.lo net/mail.lo net/rpc.lo \\\n-\tnet/smtp.lo net/textproto.lo net/url.lo old/netchan.lo \\\n-\told/regexp.lo old/template.lo os/exec.lo $(am__DEPENDENCIES_1) \\\n-\tos/signal.lo os/user.lo path/filepath.lo regexp/syntax.lo \\\n+\tnet/smtp.lo net/textproto.lo net/url.lo old/regexp.lo \\\n+\told/template.lo os/exec.lo $(am__DEPENDENCIES_1) os/signal.lo \\\n+\tos/user.lo path/filepath.lo regexp/syntax.lo \\\n \tnet/rpc/jsonrpc.lo runtime/debug.lo runtime/pprof.lo \\\n \tsync/atomic.lo sync/atomic_c.lo text/scanner.lo \\\n \ttext/tabwriter.lo text/template.lo text/template/parse.lo \\\n@@ -183,16 +178,22 @@ libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) \\\n @LIBGO_IS_LINUX_TRUE@am__objects_1 = lock_futex.lo thread-linux.lo\n @HAVE_SYS_MMAN_H_FALSE@am__objects_2 = mem_posix_memalign.lo\n @HAVE_SYS_MMAN_H_TRUE@am__objects_2 = mem.lo\n-@LIBGO_IS_RTEMS_TRUE@am__objects_3 = rtems-task-variable-add.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_4 = getncpu-none.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@am__objects_4 = getncpu-bsd.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_4 = getncpu-bsd.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@am__objects_4 = getncpu-solaris.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_4 = getncpu-irix.lo\n-@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_4 =  \\\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@am__objects_3 =  \\\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@\tnetpoll_stub.lo\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_3 =  \\\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@\tnetpoll.lo \\\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@\tnetpoll_kqueue.lo\n+@LIBGO_IS_LINUX_TRUE@am__objects_3 = netpoll.lo netpoll_epoll.lo\n+@LIBGO_IS_RTEMS_TRUE@am__objects_4 = rtems-task-variable-add.lo\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_5 = getncpu-none.lo\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@am__objects_5 = getncpu-bsd.lo\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_5 = getncpu-bsd.lo\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@am__objects_5 = getncpu-solaris.lo\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_5 = getncpu-irix.lo\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_5 =  \\\n @LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@\tgetncpu-bsd.lo\n-@LIBGO_IS_LINUX_TRUE@am__objects_4 = getncpu-linux.lo\n-am__objects_5 = go-append.lo go-assert.lo go-assert-interface.lo \\\n+@LIBGO_IS_LINUX_TRUE@am__objects_5 = getncpu-linux.lo\n+am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-byte-array-to-string.lo go-breakpoint.lo go-caller.lo \\\n \tgo-callers.lo go-can-convert-interface.lo go-cgo.lo \\\n \tgo-check-interface.lo go-construct-map.lo \\\n@@ -215,12 +216,12 @@ am__objects_5 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-unsafe-new.lo go-unsafe-newarray.lo go-unsafe-pointer.lo \\\n \tgo-unwind.lo chan.lo cpuprof.lo env_posix.lo lfstack.lo \\\n \t$(am__objects_1) mcache.lo mcentral.lo $(am__objects_2) \\\n-\tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo panic.lo \\\n-\tparfor.lo print.lo proc.lo runtime.lo signal_unix.lo thread.lo \\\n-\tyield.lo $(am__objects_3) iface.lo malloc.lo map.lo mprof.lo \\\n-\treflect.lo runtime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n-\t$(am__objects_4)\n-am_libgo_la_OBJECTS = $(am__objects_5)\n+\tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo \\\n+\t$(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n+\truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_4) \\\n+\tiface.lo malloc.lo map.lo mprof.lo reflect.lo runtime1.lo \\\n+\tsema.lo sigqueue.lo string.lo time.lo $(am__objects_5)\n+am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(libgo_la_LDFLAGS) \\\n@@ -257,9 +258,7 @@ DATA = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n \t$(toolexeclibgocrypto_DATA) $(toolexeclibgocryptox509_DATA) \\\n \t$(toolexeclibgodatabase_DATA) $(toolexeclibgodatabasesql_DATA) \\\n \t$(toolexeclibgodebug_DATA) $(toolexeclibgoencoding_DATA) \\\n-\t$(toolexeclibgoexp_DATA) $(toolexeclibgoexphtml_DATA) \\\n-\t$(toolexeclibgoexplocale_DATA) \\\n-\t$(toolexeclibgoexplocalecollate_DATA) $(toolexeclibgogo_DATA) \\\n+\t$(toolexeclibgoexp_DATA) $(toolexeclibgogo_DATA) \\\n \t$(toolexeclibgohash_DATA) $(toolexeclibgohtml_DATA) \\\n \t$(toolexeclibgoimage_DATA) $(toolexeclibgoindex_DATA) \\\n \t$(toolexeclibgoio_DATA) $(toolexeclibgolog_DATA) \\\n@@ -606,33 +605,10 @@ toolexeclibgoencoding_DATA = \\\n \tencoding/pem.gox \\\n \tencoding/xml.gox\n \n-@LIBGO_IS_LINUX_FALSE@exp_inotify_gox = \n-\n-# exp_inotify_gox = exp/inotify.gox\n-@LIBGO_IS_LINUX_TRUE@exp_inotify_gox = \n toolexeclibgoexpdir = $(toolexeclibgodir)/exp\n toolexeclibgoexp_DATA = \\\n-\texp/cookiejar.gox \\\n-\texp/ebnf.gox \\\n-\texp/html.gox \\\n-\t$(exp_inotify_gox) \\\n-\texp/norm.gox \\\n \texp/proxy.gox \\\n-\texp/ssa.gox \\\n-\texp/terminal.gox \\\n-\texp/utf8string.gox\n-\n-toolexeclibgoexphtmldir = $(toolexeclibgoexpdir)/html\n-toolexeclibgoexphtml_DATA = \\\n-\texp/html/atom.gox\n-\n-toolexeclibgoexplocaledir = $(toolexeclibgoexpdir)/locale\n-toolexeclibgoexplocale_DATA = \\\n-\texp/locale/collate.gox\n-\n-toolexeclibgoexplocalecollatedir = $(toolexeclibgoexplocaledir)/collate\n-toolexeclibgoexplocalecollate_DATA = \\\n-\texp/locale/collate/build.gox\n+\texp/terminal.gox\n \n toolexeclibgogodir = $(toolexeclibgodir)/go\n toolexeclibgogo_DATA = \\\n@@ -643,8 +619,7 @@ toolexeclibgogo_DATA = \\\n \tgo/parser.gox \\\n \tgo/printer.gox \\\n \tgo/scanner.gox \\\n-\tgo/token.gox \\\n-\tgo/types.gox\n+\tgo/token.gox\n \n toolexeclibgohashdir = $(toolexeclibgodir)/hash\n toolexeclibgohash_DATA = \\\n@@ -699,6 +674,7 @@ toolexeclibgonet_DATA = \\\n toolexeclibgonethttpdir = $(toolexeclibgonetdir)/http\n toolexeclibgonethttp_DATA = \\\n \tnet/http/cgi.gox \\\n+\tnet/http/cookiejar.gox \\\n \tnet/http/fcgi.gox \\\n \tnet/http/httptest.gox \\\n \tnet/http/httputil.gox \\\n@@ -710,7 +686,6 @@ toolexeclibgonetrpc_DATA = \\\n \n toolexeclibgoolddir = $(toolexeclibgodir)/old\n toolexeclibgoold_DATA = \\\n-\told/netchan.gox \\\n \told/regexp.gox \\\n \told/template.gox\n \n@@ -770,6 +745,9 @@ toolexeclibgounicode_DATA = \\\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_getncpu_file = runtime/getncpu-irix.c\n @LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_getncpu_file = runtime/getncpu-bsd.c\n @LIBGO_IS_LINUX_TRUE@runtime_getncpu_file = runtime/getncpu-linux.c\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@runtime_netpoll_files = runtime/netpoll_stub.c\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_netpoll_files = netpoll.c runtime/netpoll_kqueue.c\n+@LIBGO_IS_LINUX_TRUE@runtime_netpoll_files = netpoll.c runtime/netpoll_epoll.c\n runtime_files = \\\n \truntime/go-append.c \\\n \truntime/go-assert.c \\\n@@ -848,6 +826,7 @@ runtime_files = \\\n \truntime/mgc0.c \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n+\t$(runtime_netpoll_files) \\\n \truntime/panic.c \\\n \truntime/parfor.c \\\n \truntime/print.c \\\n@@ -870,7 +849,8 @@ runtime_files = \\\n \t$(runtime_getncpu_file)\n \n go_bufio_files = \\\n-\tgo/bufio/bufio.go\n+\tgo/bufio/bufio.go \\\n+\tgo/bufio/scan.go\n \n go_bytes_files = \\\n \tgo/bytes/buffer.go \\\n@@ -975,11 +955,11 @@ go_mime_files = \\\n # something better.\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = go/net/fd_select.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = go/net/fd_bsd.go\n-@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = go/net/fd_linux.go\n+@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = \n @LIBGO_IS_RTEMS_TRUE@go_net_fd_os_file = go/net/fd_select.go\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = go/net/newpollserver_unix.go\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = go/net/newpollserver_unix.go\n-@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = go/net/newpollserver_unix.go\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n+@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n @LIBGO_IS_RTEMS_TRUE@go_net_newpollserver_file = go/net/newpollserver_rtems.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_cgo_file = go/net/cgo_bsd.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_net_cgo_file = go/net/cgo_netbsd.go\n@@ -1013,6 +993,9 @@ go_mime_files = \\\n @LIBGO_IS_LINUX_TRUE@go_net_interface_file = go/net/interface_linux.go\n @LIBGO_IS_LINUX_FALSE@go_net_cloexec_file = go/net/sys_cloexec.go\n @LIBGO_IS_LINUX_TRUE@go_net_cloexec_file = go/net/sock_cloexec.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@go_net_poll_file = go/net/fd_poll_unix.go\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_poll_file = go/net/fd_poll_runtime.go\n+@LIBGO_IS_LINUX_TRUE@go_net_poll_file = go/net/fd_poll_runtime.go\n go_net_files = \\\n \tgo/net/cgo_unix.go \\\n \t$(go_net_cgo_file) \\\n@@ -1040,10 +1023,12 @@ go_net_files = \\\n \tgo/net/net.go \\\n \tgo/net/parse.go \\\n \tgo/net/pipe.go \\\n+\t$(go_net_poll_file) \\\n \tgo/net/port.go \\\n \tgo/net/port_unix.go \\\n \t$(go_net_sendfile_file) \\\n \tgo/net/sock_posix.go \\\n+\tgo/net/sock_unix.go \\\n \t$(go_net_sock_file) \\\n \tgo/net/sockopt_posix.go \\\n \t$(go_net_sockopt_file) \\\n@@ -1095,7 +1080,8 @@ go_os_files = \\\n \t$(go_os_stat_file) \\\n \tgo/os/str.go \\\n \t$(go_os_sys_file) \\\n-\tgo/os/types.go\n+\tgo/os/types.go \\\n+\tgo/os/types_notwin.go\n \n go_path_files = \\\n \tgo/path/match.go \\\n@@ -1167,6 +1153,7 @@ go_syslog_c_files = \\\n \tgo/log/syslog/syslog_c.c\n \n go_testing_files = \\\n+\tgo/testing/allocs.go \\\n \tgo/testing/benchmark.go \\\n \tgo/testing/example.go \\\n \tgo/testing/testing.go\n@@ -1285,7 +1272,8 @@ go_crypto_rand_files = \\\n \tgo/crypto/rand/util.go\n \n go_crypto_rc4_files = \\\n-\tgo/crypto/rc4/rc4.go\n+\tgo/crypto/rc4/rc4.go \\\n+\tgo/crypto/rc4/rc4_ref.go\n \n go_crypto_rsa_files = \\\n \tgo/crypto/rsa/pkcs1v15.go \\\n@@ -1417,85 +1405,16 @@ go_encoding_xml_files = \\\n \tgo/encoding/xml/typeinfo.go \\\n \tgo/encoding/xml/xml.go\n \n-go_exp_cookiejar_files = \\\n-\tgo/exp/cookiejar/jar.go \\\n-\tgo/exp/cookiejar/storage.go\n-\n-go_exp_ebnf_files = \\\n-\tgo/exp/ebnf/ebnf.go \\\n-\tgo/exp/ebnf/parser.go\n-\n-go_exp_html_files = \\\n-\tgo/exp/html/const.go \\\n-\tgo/exp/html/doc.go \\\n-\tgo/exp/html/doctype.go \\\n-\tgo/exp/html/entity.go \\\n-\tgo/exp/html/escape.go \\\n-\tgo/exp/html/foreign.go \\\n-\tgo/exp/html/node.go \\\n-\tgo/exp/html/parse.go \\\n-\tgo/exp/html/render.go \\\n-\tgo/exp/html/token.go\n-\n-go_exp_html_atom_files = \\\n-\tgo/exp/html/atom/atom.go \\\n-\tgo/exp/html/atom/table.go\n-\n-go_exp_inotify_files = \\\n-\tgo/exp/inotify/inotify_linux.go\n-\n-go_exp_locale_collate_files = \\\n-\tgo/exp/locale/collate/colelem.go \\\n-\tgo/exp/locale/collate/collate.go \\\n-\tgo/exp/locale/collate/colltab.go \\\n-\tgo/exp/locale/collate/contract.go \\\n-\tgo/exp/locale/collate/export.go \\\n-\tgo/exp/locale/collate/sort.go \\\n-\tgo/exp/locale/collate/table.go \\\n-\tgo/exp/locale/collate/tables.go \\\n-\tgo/exp/locale/collate/trie.go\n-\n-go_exp_locale_collate_build_files = \\\n-\tgo/exp/locale/collate/build/builder.go \\\n-\tgo/exp/locale/collate/build/colelem.go \\\n-\tgo/exp/locale/collate/build/contract.go \\\n-\tgo/exp/locale/collate/build/order.go \\\n-\tgo/exp/locale/collate/build/table.go \\\n-\tgo/exp/locale/collate/build/trie.go\n-\n-go_exp_norm_files = \\\n-\tgo/exp/norm/composition.go \\\n-\tgo/exp/norm/forminfo.go \\\n-\tgo/exp/norm/input.go \\\n-\tgo/exp/norm/iter.go \\\n-\tgo/exp/norm/normalize.go \\\n-\tgo/exp/norm/readwriter.go \\\n-\tgo/exp/norm/tables.go \\\n-\tgo/exp/norm/trie.go\n-\n go_exp_proxy_files = \\\n \tgo/exp/proxy/direct.go \\\n \tgo/exp/proxy/per_host.go \\\n \tgo/exp/proxy/proxy.go \\\n \tgo/exp/proxy/socks5.go\n \n-go_exp_ssa_files = \\\n-\tgo/exp/ssa/blockopt.go \\\n-\tgo/exp/ssa/doc.go \\\n-\tgo/exp/ssa/func.go \\\n-\tgo/exp/ssa/sanity.go \\\n-\tgo/exp/ssa/ssa.go \\\n-\tgo/exp/ssa/literal.go \\\n-\tgo/exp/ssa/print.go \\\n-\tgo/exp/ssa/util.go\n-\n go_exp_terminal_files = \\\n \tgo/exp/terminal/terminal.go \\\n \tgo/exp/terminal/util.go\n \n-go_exp_utf8string_files = \\\n-\tgo/exp/utf8string/string.go\n-\n go_go_ast_files = \\\n \tgo/go/ast/ast.go \\\n \tgo/go/ast/commentmap.go \\\n@@ -1541,25 +1460,6 @@ go_go_token_files = \\\n \tgo/go/token/serialize.go \\\n \tgo/go/token/token.go\n \n-go_go_types_files = \\\n-\tgo/go/types/api.go \\\n-\tgo/go/types/builtins.go \\\n-\tgo/go/types/check.go \\\n-\tgo/go/types/const.go \\\n-\tgo/go/types/conversions.go \\\n-\tgo/go/types/errors.go \\\n-\tgo/go/types/exportdata.go \\\n-\tgo/go/types/expr.go \\\n-\tgo/go/types/gcimporter.go \\\n-\tgo/go/types/objects.go \\\n-\tgo/go/types/operand.go \\\n-\tgo/go/types/predicates.go \\\n-\tgo/go/types/resolve.go \\\n-\tgo/go/types/scope.go \\\n-\tgo/go/types/stmt.go \\\n-\tgo/go/types/types.go \\\n-\tgo/go/types/universe.go\n-\n go_hash_adler32_files = \\\n \tgo/hash/adler32/adler32.go\n \n@@ -1692,6 +1592,10 @@ go_net_http_cgi_files = \\\n \tgo/net/http/cgi/child.go \\\n \tgo/net/http/cgi/host.go\n \n+go_net_http_cookiejar_files = \\\n+\tgo/net/http/cookiejar/jar.go \\\n+\tgo/net/http/cookiejar/punycode.go\n+\n go_net_http_fcgi_files = \\\n \tgo/net/http/fcgi/child.go \\\n \tgo/net/http/fcgi/fcgi.go\n@@ -1709,11 +1613,6 @@ go_net_http_httputil_files = \\\n \tgo/net/http/httputil/persist.go \\\n \tgo/net/http/httputil/reverseproxy.go\n \n-go_old_netchan_files = \\\n-\tgo/old/netchan/common.go \\\n-\tgo/old/netchan/export.go \\\n-\tgo/old/netchan/import.go\n-\n go_old_regexp_files = \\\n \tgo/old/regexp/regexp.go\n \n@@ -1756,6 +1655,7 @@ go_net_rpc_jsonrpc_files = \\\n \tgo/net/rpc/jsonrpc/server.go\n \n go_runtime_debug_files = \\\n+\tgo/runtime/debug/garbage.go \\\n \tgo/runtime/debug/stack.go\n \n go_runtime_pprof_files = \\\n@@ -2005,17 +1905,8 @@ libgo_go_objs = \\\n \tencoding/json.lo \\\n \tencoding/pem.lo \\\n \tencoding/xml.lo \\\n-\texp/cookiejar.lo \\\n-\texp/ebnf.lo \\\n-\texp/html.lo \\\n-\texp/html/atom.lo \\\n-\texp/locale/collate.lo \\\n-\texp/locale/collate/build.lo \\\n-\texp/norm.lo \\\n \texp/proxy.lo \\\n-\texp/ssa.lo \\\n \texp/terminal.lo \\\n-\texp/utf8string.lo \\\n \thtml/template.lo \\\n \tgo/ast.lo \\\n \tgo/build.lo \\\n@@ -2025,12 +1916,12 @@ libgo_go_objs = \\\n \tgo/printer.lo \\\n \tgo/scanner.lo \\\n \tgo/token.lo \\\n-\tgo/types.lo \\\n \thash/adler32.lo \\\n \thash/crc32.lo \\\n \thash/crc64.lo \\\n \thash/fnv.lo \\\n \tnet/http/cgi.lo \\\n+\tnet/http/cookiejar.lo \\\n \tnet/http/fcgi.lo \\\n \tnet/http/httptest.lo \\\n \tnet/http/httputil.lo \\\n@@ -2054,7 +1945,6 @@ libgo_go_objs = \\\n \tnet/smtp.lo \\\n \tnet/textproto.lo \\\n \tnet/url.lo \\\n-\told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n \tos/exec.lo \\\n@@ -2185,10 +2075,6 @@ BUILDGOX = \\\n \tf=`echo $< | sed -e 's/.lo$$/.o/'`; \\\n \t$(OBJCOPY) -j .go_export $$f $@.tmp && mv -f $@.tmp $@\n \n-@LIBGO_IS_LINUX_FALSE@exp_inotify_check = \n-\n-# exp_inotify_check = exp/inotify/check\n-@LIBGO_IS_LINUX_TRUE@exp_inotify_check = \n TEST_PACKAGES = \\\n \tbufio/check \\\n \tbytes/check \\\n@@ -2259,17 +2145,8 @@ TEST_PACKAGES = \\\n \tencoding/json/check \\\n \tencoding/pem/check \\\n \tencoding/xml/check \\\n-\texp/cookiejar/check \\\n-\texp/ebnf/check \\\n-\texp/html/check \\\n-\texp/html/atom/check \\\n-\t$(exp_inotify_check) \\\n-\texp/locale/collate/check \\\n-\texp/locale/collate/build/check \\\n-\texp/norm/check \\\n \texp/proxy/check \\\n \texp/terminal/check \\\n-\texp/utf8string/check \\\n \thtml/template/check \\\n \tgo/ast/check \\\n \t$(go_build_check_omitted_since_it_calls_6g) \\\n@@ -2279,7 +2156,6 @@ TEST_PACKAGES = \\\n \tgo/printer/check \\\n \tgo/scanner/check \\\n \tgo/token/check \\\n-\tgo/types/check \\\n \thash/adler32/check \\\n \thash/crc32/check \\\n \thash/crc64/check \\\n@@ -2297,6 +2173,7 @@ TEST_PACKAGES = \\\n \tmime/multipart/check \\\n \tnet/http/check \\\n \tnet/http/cgi/check \\\n+\tnet/http/cookiejar/check \\\n \tnet/http/fcgi/check \\\n \tnet/http/httptest/check \\\n \tnet/http/httputil/check \\\n@@ -2306,7 +2183,6 @@ TEST_PACKAGES = \\\n \tnet/textproto/check \\\n \tnet/url/check \\\n \tnet/rpc/jsonrpc/check \\\n-\told/netchan/check \\\n \told/regexp/check \\\n \told/template/check \\\n \tos/exec/check \\\n@@ -2547,6 +2423,10 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mheap.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mprof.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/msize.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_epoll.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_kqueue.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_stub.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/panic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parfor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n@@ -3167,6 +3047,27 @@ msize.lo: runtime/msize.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o msize.lo `test -f 'runtime/msize.c' || echo '$(srcdir)/'`runtime/msize.c\n \n+netpoll_stub.lo: runtime/netpoll_stub.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_stub.lo -MD -MP -MF $(DEPDIR)/netpoll_stub.Tpo -c -o netpoll_stub.lo `test -f 'runtime/netpoll_stub.c' || echo '$(srcdir)/'`runtime/netpoll_stub.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_stub.Tpo $(DEPDIR)/netpoll_stub.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_stub.c' object='netpoll_stub.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_stub.lo `test -f 'runtime/netpoll_stub.c' || echo '$(srcdir)/'`runtime/netpoll_stub.c\n+\n+netpoll_kqueue.lo: runtime/netpoll_kqueue.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_kqueue.lo -MD -MP -MF $(DEPDIR)/netpoll_kqueue.Tpo -c -o netpoll_kqueue.lo `test -f 'runtime/netpoll_kqueue.c' || echo '$(srcdir)/'`runtime/netpoll_kqueue.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_kqueue.Tpo $(DEPDIR)/netpoll_kqueue.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_kqueue.c' object='netpoll_kqueue.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_kqueue.lo `test -f 'runtime/netpoll_kqueue.c' || echo '$(srcdir)/'`runtime/netpoll_kqueue.c\n+\n+netpoll_epoll.lo: runtime/netpoll_epoll.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_epoll.lo -MD -MP -MF $(DEPDIR)/netpoll_epoll.Tpo -c -o netpoll_epoll.lo `test -f 'runtime/netpoll_epoll.c' || echo '$(srcdir)/'`runtime/netpoll_epoll.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_epoll.Tpo $(DEPDIR)/netpoll_epoll.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_epoll.c' object='netpoll_epoll.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_epoll.lo `test -f 'runtime/netpoll_epoll.c' || echo '$(srcdir)/'`runtime/netpoll_epoll.c\n+\n panic.lo: runtime/panic.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT panic.lo -MD -MP -MF $(DEPDIR)/panic.Tpo -c -o panic.lo `test -f 'runtime/panic.c' || echo '$(srcdir)/'`runtime/panic.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/panic.Tpo $(DEPDIR)/panic.Plo\n@@ -3510,66 +3411,6 @@ uninstall-toolexeclibgoexpDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgoexpdir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgoexpdir)\" && rm -f $$files\n-install-toolexeclibgoexphtmlDATA: $(toolexeclibgoexphtml_DATA)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgoexphtmldir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoexphtmldir)\"\n-\t@list='$(toolexeclibgoexphtml_DATA)'; test -n \"$(toolexeclibgoexphtmldir)\" || list=; \\\n-\tfor p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \"$$d$$p\"; \\\n-\tdone | $(am__base_list) | \\\n-\twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgoexphtmldir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgoexphtmldir)\" || exit $$?; \\\n-\tdone\n-\n-uninstall-toolexeclibgoexphtmlDATA:\n-\t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgoexphtml_DATA)'; test -n \"$(toolexeclibgoexphtmldir)\" || list=; \\\n-\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgoexphtmldir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgoexphtmldir)\" && rm -f $$files\n-install-toolexeclibgoexplocaleDATA: $(toolexeclibgoexplocale_DATA)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgoexplocaledir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoexplocaledir)\"\n-\t@list='$(toolexeclibgoexplocale_DATA)'; test -n \"$(toolexeclibgoexplocaledir)\" || list=; \\\n-\tfor p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \"$$d$$p\"; \\\n-\tdone | $(am__base_list) | \\\n-\twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgoexplocaledir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgoexplocaledir)\" || exit $$?; \\\n-\tdone\n-\n-uninstall-toolexeclibgoexplocaleDATA:\n-\t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgoexplocale_DATA)'; test -n \"$(toolexeclibgoexplocaledir)\" || list=; \\\n-\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgoexplocaledir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgoexplocaledir)\" && rm -f $$files\n-install-toolexeclibgoexplocalecollateDATA: $(toolexeclibgoexplocalecollate_DATA)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgoexplocalecollatedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoexplocalecollatedir)\"\n-\t@list='$(toolexeclibgoexplocalecollate_DATA)'; test -n \"$(toolexeclibgoexplocalecollatedir)\" || list=; \\\n-\tfor p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \"$$d$$p\"; \\\n-\tdone | $(am__base_list) | \\\n-\twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgoexplocalecollatedir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgoexplocalecollatedir)\" || exit $$?; \\\n-\tdone\n-\n-uninstall-toolexeclibgoexplocalecollateDATA:\n-\t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgoexplocalecollate_DATA)'; test -n \"$(toolexeclibgoexplocalecollatedir)\" || list=; \\\n-\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgoexplocalecollatedir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgoexplocalecollatedir)\" && rm -f $$files\n install-toolexeclibgogoDATA: $(toolexeclibgogo_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgogodir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgogodir)\"\n@@ -4151,7 +3992,7 @@ all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) all-multi $(DATA) \\\n \t\tconfig.h\n installdirs: installdirs-recursive\n installdirs-am:\n-\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibgodir)\" \"$(DESTDIR)$(toolexeclibgoarchivedir)\" \"$(DESTDIR)$(toolexeclibgocompressdir)\" \"$(DESTDIR)$(toolexeclibgocontainerdir)\" \"$(DESTDIR)$(toolexeclibgocryptodir)\" \"$(DESTDIR)$(toolexeclibgocryptox509dir)\" \"$(DESTDIR)$(toolexeclibgodatabasedir)\" \"$(DESTDIR)$(toolexeclibgodatabasesqldir)\" \"$(DESTDIR)$(toolexeclibgodebugdir)\" \"$(DESTDIR)$(toolexeclibgoencodingdir)\" \"$(DESTDIR)$(toolexeclibgoexpdir)\" \"$(DESTDIR)$(toolexeclibgoexphtmldir)\" \"$(DESTDIR)$(toolexeclibgoexplocaledir)\" \"$(DESTDIR)$(toolexeclibgoexplocalecollatedir)\" \"$(DESTDIR)$(toolexeclibgogodir)\" \"$(DESTDIR)$(toolexeclibgohashdir)\" \"$(DESTDIR)$(toolexeclibgohtmldir)\" \"$(DESTDIR)$(toolexeclibgoimagedir)\" \"$(DESTDIR)$(toolexeclibgoindexdir)\" \"$(DESTDIR)$(toolexeclibgoiodir)\" \"$(DESTDIR)$(toolexeclibgologdir)\" \"$(DESTDIR)$(toolexeclibgomathdir)\" \"$(DESTDIR)$(toolexeclibgomimedir)\" \"$(DESTDIR)$(toolexeclibgonetdir)\" \"$(DESTDIR)$(toolexeclibgonethttpdir)\" \"$(DESTDIR)$(toolexeclibgonetrpcdir)\" \"$(DESTDIR)$(toolexeclibgoolddir)\" \"$(DESTDIR)$(toolexeclibgoosdir)\" \"$(DESTDIR)$(toolexeclibgopathdir)\" \"$(DESTDIR)$(toolexeclibgoregexpdir)\" \"$(DESTDIR)$(toolexeclibgoruntimedir)\" \"$(DESTDIR)$(toolexeclibgosyncdir)\" \"$(DESTDIR)$(toolexeclibgotestingdir)\" \"$(DESTDIR)$(toolexeclibgotextdir)\" \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" \"$(DESTDIR)$(toolexeclibgounicodedir)\"; do \\\n+\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibgodir)\" \"$(DESTDIR)$(toolexeclibgoarchivedir)\" \"$(DESTDIR)$(toolexeclibgocompressdir)\" \"$(DESTDIR)$(toolexeclibgocontainerdir)\" \"$(DESTDIR)$(toolexeclibgocryptodir)\" \"$(DESTDIR)$(toolexeclibgocryptox509dir)\" \"$(DESTDIR)$(toolexeclibgodatabasedir)\" \"$(DESTDIR)$(toolexeclibgodatabasesqldir)\" \"$(DESTDIR)$(toolexeclibgodebugdir)\" \"$(DESTDIR)$(toolexeclibgoencodingdir)\" \"$(DESTDIR)$(toolexeclibgoexpdir)\" \"$(DESTDIR)$(toolexeclibgogodir)\" \"$(DESTDIR)$(toolexeclibgohashdir)\" \"$(DESTDIR)$(toolexeclibgohtmldir)\" \"$(DESTDIR)$(toolexeclibgoimagedir)\" \"$(DESTDIR)$(toolexeclibgoindexdir)\" \"$(DESTDIR)$(toolexeclibgoiodir)\" \"$(DESTDIR)$(toolexeclibgologdir)\" \"$(DESTDIR)$(toolexeclibgomathdir)\" \"$(DESTDIR)$(toolexeclibgomimedir)\" \"$(DESTDIR)$(toolexeclibgonetdir)\" \"$(DESTDIR)$(toolexeclibgonethttpdir)\" \"$(DESTDIR)$(toolexeclibgonetrpcdir)\" \"$(DESTDIR)$(toolexeclibgoolddir)\" \"$(DESTDIR)$(toolexeclibgoosdir)\" \"$(DESTDIR)$(toolexeclibgopathdir)\" \"$(DESTDIR)$(toolexeclibgoregexpdir)\" \"$(DESTDIR)$(toolexeclibgoruntimedir)\" \"$(DESTDIR)$(toolexeclibgosyncdir)\" \"$(DESTDIR)$(toolexeclibgotestingdir)\" \"$(DESTDIR)$(toolexeclibgotextdir)\" \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" \"$(DESTDIR)$(toolexeclibgounicodedir)\"; do \\\n \t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n \tdone\n install: install-recursive\n@@ -4222,9 +4063,6 @@ install-exec-am: install-multi install-toolexeclibLIBRARIES \\\n \tinstall-toolexeclibgodatabasesqlDATA \\\n \tinstall-toolexeclibgodebugDATA \\\n \tinstall-toolexeclibgoencodingDATA install-toolexeclibgoexpDATA \\\n-\tinstall-toolexeclibgoexphtmlDATA \\\n-\tinstall-toolexeclibgoexplocaleDATA \\\n-\tinstall-toolexeclibgoexplocalecollateDATA \\\n \tinstall-toolexeclibgogoDATA install-toolexeclibgohashDATA \\\n \tinstall-toolexeclibgohtmlDATA install-toolexeclibgoimageDATA \\\n \tinstall-toolexeclibgoindexDATA install-toolexeclibgoioDATA \\\n@@ -4290,11 +4128,8 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tuninstall-toolexeclibgodatabasesqlDATA \\\n \tuninstall-toolexeclibgodebugDATA \\\n \tuninstall-toolexeclibgoencodingDATA \\\n-\tuninstall-toolexeclibgoexpDATA \\\n-\tuninstall-toolexeclibgoexphtmlDATA \\\n-\tuninstall-toolexeclibgoexplocaleDATA \\\n-\tuninstall-toolexeclibgoexplocalecollateDATA \\\n-\tuninstall-toolexeclibgogoDATA uninstall-toolexeclibgohashDATA \\\n+\tuninstall-toolexeclibgoexpDATA uninstall-toolexeclibgogoDATA \\\n+\tuninstall-toolexeclibgohashDATA \\\n \tuninstall-toolexeclibgohtmlDATA \\\n \tuninstall-toolexeclibgoimageDATA \\\n \tuninstall-toolexeclibgoindexDATA uninstall-toolexeclibgoioDATA \\\n@@ -4339,9 +4174,6 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tinstall-toolexeclibgodatabasesqlDATA \\\n \tinstall-toolexeclibgodebugDATA \\\n \tinstall-toolexeclibgoencodingDATA install-toolexeclibgoexpDATA \\\n-\tinstall-toolexeclibgoexphtmlDATA \\\n-\tinstall-toolexeclibgoexplocaleDATA \\\n-\tinstall-toolexeclibgoexplocalecollateDATA \\\n \tinstall-toolexeclibgogoDATA install-toolexeclibgohashDATA \\\n \tinstall-toolexeclibgohtmlDATA install-toolexeclibgoimageDATA \\\n \tinstall-toolexeclibgoindexDATA install-toolexeclibgoioDATA \\\n@@ -4371,11 +4203,8 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tuninstall-toolexeclibgodatabasesqlDATA \\\n \tuninstall-toolexeclibgodebugDATA \\\n \tuninstall-toolexeclibgoencodingDATA \\\n-\tuninstall-toolexeclibgoexpDATA \\\n-\tuninstall-toolexeclibgoexphtmlDATA \\\n-\tuninstall-toolexeclibgoexplocaleDATA \\\n-\tuninstall-toolexeclibgoexplocalecollateDATA \\\n-\tuninstall-toolexeclibgogoDATA uninstall-toolexeclibgohashDATA \\\n+\tuninstall-toolexeclibgoexpDATA uninstall-toolexeclibgogoDATA \\\n+\tuninstall-toolexeclibgohashDATA \\\n \tuninstall-toolexeclibgohtmlDATA \\\n \tuninstall-toolexeclibgoimageDATA \\\n \tuninstall-toolexeclibgoindexDATA uninstall-toolexeclibgoioDATA \\\n@@ -4408,6 +4237,10 @@ mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n+netpoll.c: $(srcdir)/runtime/netpoll.goc goc2c\n+\t./goc2c $< > $@.tmp\n+\tmv -f $@.tmp $@\n+\n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n@@ -5163,69 +4996,6 @@ encoding/xml/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/xml/check\n \n-@go_include@ exp/cookiejar.lo.dep\n-exp/cookiejar.lo.dep: $(go_exp_cookiejar_files)\n-\t$(BUILDDEPS)\n-exp/cookiejar.lo: $(go_exp_cookiejar_files)\n-\t$(BUILDPACKAGE)\n-exp/cookiejar/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/cookiejar/check\n-\n-@go_include@ exp/ebnf.lo.dep\n-exp/ebnf.lo.dep: $(go_exp_ebnf_files)\n-\t$(BUILDDEPS)\n-exp/ebnf.lo: $(go_exp_ebnf_files)\n-\t$(BUILDPACKAGE)\n-exp/ebnf/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/ebnf/check\n-\n-@go_include@ exp/html.lo.dep\n-exp/html.lo.dep: $(go_exp_html_files)\n-\t$(BUILDDEPS)\n-exp/html.lo: $(go_exp_html_files)\n-\t$(BUILDPACKAGE)\n-exp/html/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/html/check\n-\n-@go_include@ exp/html/atom.lo.dep\n-exp/html/atom.lo.dep: $(go_exp_html_atom_files)\n-\t$(BUILDDEPS)\n-exp/html/atom.lo: $(go_exp_html_atom_files)\n-\t$(BUILDPACKAGE)\n-exp/html/atom/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/html/atom/check\n-\n-@go_include@ exp/locale/collate.lo.dep\n-exp/locale/collate.lo.dep: $(go_exp_locale_collate_files)\n-\t$(BUILDDEPS)\n-exp/locale/collate.lo: $(go_exp_locale_collate_files)\n-\t$(BUILDPACKAGE)\n-exp/locale/collate/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/locale/collate/check\n-\n-@go_include@ exp/locale/collate/build.lo.dep\n-exp/locale/collate/build.lo.dep: $(go_exp_locale_collate_build_files)\n-\t$(BUILDDEPS)\n-exp/locale/collate/build.lo: $(go_exp_locale_collate_build_files)\n-\t$(BUILDPACKAGE)\n-exp/locale/collate/build/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/locale/collate/build/check\n-\n-@go_include@ exp/norm.lo.dep\n-exp/norm.lo.dep: $(go_exp_norm_files)\n-\t$(BUILDDEPS)\n-exp/norm.lo: $(go_exp_norm_files)\n-\t$(BUILDPACKAGE)\n-exp/norm/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/norm/check\n-\n @go_include@ exp/proxy.lo.dep\n exp/proxy.lo.dep: $(go_exp_proxy_files)\n \t$(BUILDDEPS)\n@@ -5235,15 +5005,6 @@ exp/proxy/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/proxy/check\n \n-@go_include@ exp/ssa.lo.dep\n-exp/ssa.lo.dep: $(go_exp_ssa_files)\n-\t$(BUILDDEPS)\n-exp/ssa.lo: $(go_exp_ssa_files)\n-\t$(BUILDPACKAGE)\n-exp/ssa/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/ssa/check\n-\n @go_include@ exp/terminal.lo.dep\n exp/terminal.lo.dep: $(go_exp_terminal_files)\n \t$(BUILDDEPS)\n@@ -5253,24 +5014,6 @@ exp/terminal/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/terminal/check\n \n-@go_include@ exp/utf8string.lo.dep\n-exp/utf8string.lo.dep: $(go_exp_utf8string_files)\n-\t$(BUILDDEPS)\n-exp/utf8string.lo: $(go_exp_utf8string_files)\n-\t$(BUILDPACKAGE)\n-exp/utf8string/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/utf8string/check\n-\n-@go_include@ exp/inotify.lo.dep\n-exp/inotify.lo.dep: $(go_exp_inotify_files)\n-\t$(BUILDDEPS)\n-exp/inotify.lo: $(go_exp_inotify_files)\n-\t$(BUILDPACKAGE)\n-exp/inotify/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exp/inotify/check\n-\n @go_include@ html/template.lo.dep\n html/template.lo.dep: $(go_html_template_files)\n \t$(BUILDDEPS)\n@@ -5361,15 +5104,6 @@ go/token/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: go/token/check\n \n-@go_include@ go/types.lo.dep\n-go/types.lo.dep: $(go_go_types_files)\n-\t$(BUILDDEPS)\n-go/types.lo: $(go_go_types_files)\n-\t$(BUILDPACKAGE)\n-go/types/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: go/types/check\n-\n @go_include@ hash/adler32.lo.dep\n hash/adler32.lo.dep: $(go_hash_adler32_files)\n \t$(BUILDDEPS)\n@@ -5580,6 +5314,15 @@ net/http/cgi/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/http/cgi/check\n \n+@go_include@ net/http/cookiejar.lo.dep\n+net/http/cookiejar.lo.dep: $(go_net_http_cookiejar_files)\n+\t$(BUILDDEPS)\n+net/http/cookiejar.lo: $(go_net_http_cookiejar_files)\n+\t$(BUILDPACKAGE)\n+net/http/cookiejar/check: $(CHECK_DEPS)\n+\t@$(CHECK)\n+.PHONY: net/http/cookiejar/check\n+\n @go_include@ net/http/fcgi.lo.dep\n net/http/fcgi.lo.dep: $(go_net_http_fcgi_files)\n \t$(BUILDDEPS)\n@@ -5625,15 +5368,6 @@ net/rpc/jsonrpc/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/rpc/jsonrpc/check\n \n-@go_include@ old/netchan.lo.dep\n-old/netchan.lo.dep: $(go_old_netchan_files)\n-\t$(BUILDDEPS)\n-old/netchan.lo: $(go_old_netchan_files)\n-\t$(BUILDPACKAGE)\n-old/netchan/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: old/netchan/check\n-\n @go_include@ old/regexp.lo.dep\n old/regexp.lo.dep: $(go_old_regexp_files)\n \t$(BUILDDEPS)\n@@ -5974,30 +5708,10 @@ encoding/pem.gox: encoding/pem.lo\n encoding/xml.gox: encoding/xml.lo\n \t$(BUILDGOX)\n \n-exp/cookiejar.gox: exp/cookiejar.lo\n-\t$(BUILDGOX)\n-exp/ebnf.gox: exp/ebnf.lo\n-\t$(BUILDGOX)\n-exp/html.gox: exp/html.lo\n-\t$(BUILDGOX)\n-exp/html/atom.gox: exp/html/atom.lo\n-\t$(BUILDGOX)\n-exp/inotify.gox: exp/inotify.lo\n-\t$(BUILDGOX)\n-exp/locale/collate.gox: exp/locale/collate.lo\n-\t$(BUILDGOX)\n-exp/locale/collate/build.gox: exp/locale/collate/build.lo\n-\t$(BUILDGOX)\n-exp/norm.gox: exp/norm.lo\n-\t$(BUILDGOX)\n exp/proxy.gox: exp/proxy.lo\n \t$(BUILDGOX)\n-exp/ssa.gox: exp/ssa.lo\n-\t$(BUILDGOX)\n exp/terminal.gox: exp/terminal.lo\n \t$(BUILDGOX)\n-exp/utf8string.gox: exp/utf8string.lo\t\n-\t$(BUILDGOX)\n \n html/template.gox: html/template.lo\n \t$(BUILDGOX)\n@@ -6018,8 +5732,6 @@ go/scanner.gox: go/scanner.lo\n \t$(BUILDGOX)\n go/token.gox: go/token.lo\n \t$(BUILDGOX)\n-go/types.gox: go/types.lo\n-\t$(BUILDGOX)\n \n hash/adler32.gox: hash/adler32.lo\n \t$(BUILDGOX)\n@@ -6075,6 +5787,8 @@ net/url.gox: net/url.lo\n \n net/http/cgi.gox: net/http/cgi.lo\n \t$(BUILDGOX)\n+net/http/cookiejar.gox: net/http/cookiejar.lo\n+\t$(BUILDGOX)\n net/http/fcgi.gox: net/http/fcgi.lo\n \t$(BUILDGOX)\n net/http/httptest.gox: net/http/httptest.lo\n@@ -6087,8 +5801,6 @@ net/http/pprof.gox: net/http/pprof.lo\n net/rpc/jsonrpc.gox: net/rpc/jsonrpc.lo\n \t$(BUILDGOX)\n \n-old/netchan.gox: old/netchan.lo\n-\t$(BUILDGOX)\n old/regexp.gox: old/regexp.lo\n \t$(BUILDGOX)\n old/template.gox: old/template.lo"}, {"sha": "60d207c4897661da866085126fd668d22b2302ce", "filename": "libgo/go/archive/tar/common.go", "status": "modified", "additions": 135, "deletions": 14, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -9,12 +9,14 @@\n // References:\n //   http://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5\n //   http://www.gnu.org/software/tar/manual/html_node/Standard.html\n+//   http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html\n package tar\n \n import (\n \t\"errors\"\n \t\"fmt\"\n \t\"os\"\n+\t\"path\"\n \t\"time\"\n )\n \n@@ -33,6 +35,8 @@ const (\n \tTypeCont          = '7'    // reserved\n \tTypeXHeader       = 'x'    // extended header\n \tTypeXGlobalHeader = 'g'    // global extended header\n+\tTypeGNULongName   = 'L'    // Next file has a long name\n+\tTypeGNULongLink   = 'K'    // Next file symlinks to a file w/ a long name\n )\n \n // A Header represents a single header in a tar archive.\n@@ -54,55 +58,172 @@ type Header struct {\n \tChangeTime time.Time // status change time\n }\n \n+// File name constants from the tar spec.\n+const (\n+\tfileNameSize       = 100 // Maximum number of bytes in a standard tar name.\n+\tfileNamePrefixSize = 155 // Maximum number of ustar extension bytes.\n+)\n+\n+// FileInfo returns an os.FileInfo for the Header.\n+func (h *Header) FileInfo() os.FileInfo {\n+\treturn headerFileInfo{h}\n+}\n+\n+// headerFileInfo implements os.FileInfo.\n+type headerFileInfo struct {\n+\th *Header\n+}\n+\n+func (fi headerFileInfo) Size() int64        { return fi.h.Size }\n+func (fi headerFileInfo) IsDir() bool        { return fi.Mode().IsDir() }\n+func (fi headerFileInfo) ModTime() time.Time { return fi.h.ModTime }\n+func (fi headerFileInfo) Sys() interface{}   { return fi.h }\n+\n+// Name returns the base name of the file.\n+func (fi headerFileInfo) Name() string {\n+\tif fi.IsDir() {\n+\t\treturn path.Clean(fi.h.Name)\n+\t}\n+\treturn fi.h.Name\n+}\n+\n+// Mode returns the permission and mode bits for the headerFileInfo.\n+func (fi headerFileInfo) Mode() (mode os.FileMode) {\n+\t// Set file permission bits.\n+\tmode = os.FileMode(fi.h.Mode).Perm()\n+\n+\t// Set setuid, setgid and sticky bits.\n+\tif fi.h.Mode&c_ISUID != 0 {\n+\t\t// setuid\n+\t\tmode |= os.ModeSetuid\n+\t}\n+\tif fi.h.Mode&c_ISGID != 0 {\n+\t\t// setgid\n+\t\tmode |= os.ModeSetgid\n+\t}\n+\tif fi.h.Mode&c_ISVTX != 0 {\n+\t\t// sticky\n+\t\tmode |= os.ModeSticky\n+\t}\n+\n+\t// Set file mode bits.\n+\t// clear perm, setuid, setgid and sticky bits.\n+\tm := os.FileMode(fi.h.Mode) &^ 07777\n+\tif m == c_ISDIR {\n+\t\t// directory\n+\t\tmode |= os.ModeDir\n+\t}\n+\tif m == c_ISFIFO {\n+\t\t// named pipe (FIFO)\n+\t\tmode |= os.ModeNamedPipe\n+\t}\n+\tif m == c_ISLNK {\n+\t\t// symbolic link\n+\t\tmode |= os.ModeSymlink\n+\t}\n+\tif m == c_ISBLK {\n+\t\t// device file\n+\t\tmode |= os.ModeDevice\n+\t}\n+\tif m == c_ISCHR {\n+\t\t// Unix character device\n+\t\tmode |= os.ModeDevice\n+\t\tmode |= os.ModeCharDevice\n+\t}\n+\tif m == c_ISSOCK {\n+\t\t// Unix domain socket\n+\t\tmode |= os.ModeSocket\n+\t}\n+\n+\tswitch fi.h.Typeflag {\n+\tcase TypeLink, TypeSymlink:\n+\t\t// hard link, symbolic link\n+\t\tmode |= os.ModeSymlink\n+\tcase TypeChar:\n+\t\t// character device node\n+\t\tmode |= os.ModeDevice\n+\t\tmode |= os.ModeCharDevice\n+\tcase TypeBlock:\n+\t\t// block device node\n+\t\tmode |= os.ModeDevice\n+\tcase TypeDir:\n+\t\t// directory\n+\t\tmode |= os.ModeDir\n+\tcase TypeFifo:\n+\t\t// fifo node\n+\t\tmode |= os.ModeNamedPipe\n+\t}\n+\n+\treturn mode\n+}\n+\n // sysStat, if non-nil, populates h from system-dependent fields of fi.\n var sysStat func(fi os.FileInfo, h *Header) error\n \n // Mode constants from the tar spec.\n const (\n-\tc_ISDIR  = 040000\n-\tc_ISFIFO = 010000\n-\tc_ISREG  = 0100000\n-\tc_ISLNK  = 0120000\n-\tc_ISBLK  = 060000\n-\tc_ISCHR  = 020000\n-\tc_ISSOCK = 0140000\n+\tc_ISUID  = 04000   // Set uid\n+\tc_ISGID  = 02000   // Set gid\n+\tc_ISVTX  = 01000   // Save text (sticky bit)\n+\tc_ISDIR  = 040000  // Directory\n+\tc_ISFIFO = 010000  // FIFO\n+\tc_ISREG  = 0100000 // Regular file\n+\tc_ISLNK  = 0120000 // Symbolic link\n+\tc_ISBLK  = 060000  // Block special file\n+\tc_ISCHR  = 020000  // Character special file\n+\tc_ISSOCK = 0140000 // Socket\n )\n \n // FileInfoHeader creates a partially-populated Header from fi.\n // If fi describes a symlink, FileInfoHeader records link as the link target.\n+// If fi describes a directory, a slash is appended to the name.\n func FileInfoHeader(fi os.FileInfo, link string) (*Header, error) {\n \tif fi == nil {\n \t\treturn nil, errors.New(\"tar: FileInfo is nil\")\n \t}\n+\tfm := fi.Mode()\n \th := &Header{\n \t\tName:    fi.Name(),\n \t\tModTime: fi.ModTime(),\n-\t\tMode:    int64(fi.Mode().Perm()), // or'd with c_IS* constants later\n+\t\tMode:    int64(fm.Perm()), // or'd with c_IS* constants later\n \t}\n \tswitch {\n-\tcase fi.Mode()&os.ModeType == 0:\n+\tcase fm.IsRegular():\n \t\th.Mode |= c_ISREG\n \t\th.Typeflag = TypeReg\n \t\th.Size = fi.Size()\n \tcase fi.IsDir():\n \t\th.Typeflag = TypeDir\n \t\th.Mode |= c_ISDIR\n-\tcase fi.Mode()&os.ModeSymlink != 0:\n+\t\th.Name += \"/\"\n+\tcase fm&os.ModeSymlink != 0:\n \t\th.Typeflag = TypeSymlink\n \t\th.Mode |= c_ISLNK\n \t\th.Linkname = link\n-\tcase fi.Mode()&os.ModeDevice != 0:\n-\t\tif fi.Mode()&os.ModeCharDevice != 0 {\n+\tcase fm&os.ModeDevice != 0:\n+\t\tif fm&os.ModeCharDevice != 0 {\n \t\t\th.Mode |= c_ISCHR\n \t\t\th.Typeflag = TypeChar\n \t\t} else {\n \t\t\th.Mode |= c_ISBLK\n \t\t\th.Typeflag = TypeBlock\n \t\t}\n-\tcase fi.Mode()&os.ModeSocket != 0:\n+\tcase fm&os.ModeNamedPipe != 0:\n+\t\th.Typeflag = TypeFifo\n+\t\th.Mode |= c_ISFIFO\n+\tcase fm&os.ModeSocket != 0:\n \t\th.Mode |= c_ISSOCK\n \tdefault:\n-\t\treturn nil, fmt.Errorf(\"archive/tar: unknown file mode %v\", fi.Mode())\n+\t\treturn nil, fmt.Errorf(\"archive/tar: unknown file mode %v\", fm)\n+\t}\n+\tif fm&os.ModeSetuid != 0 {\n+\t\th.Mode |= c_ISUID\n+\t}\n+\tif fm&os.ModeSetgid != 0 {\n+\t\th.Mode |= c_ISGID\n+\t}\n+\tif fm&os.ModeSticky != 0 {\n+\t\th.Mode |= c_ISVTX\n \t}\n \tif sysStat != nil {\n \t\treturn h, sysStat(fi, h)"}, {"sha": "05f82a40dd9e4561dd66f0038abc4f103f2d31ec", "filename": "libgo/go/archive/tar/reader.go", "status": "modified", "additions": 176, "deletions": 17, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -14,31 +14,20 @@ import (\n \t\"io/ioutil\"\n \t\"os\"\n \t\"strconv\"\n+\t\"strings\"\n \t\"time\"\n )\n \n var (\n \tErrHeader = errors.New(\"archive/tar: invalid tar header\")\n )\n \n+const maxNanoSecondIntSize = 9\n+\n // A Reader provides sequential access to the contents of a tar archive.\n // A tar archive consists of a sequence of files.\n // The Next method advances to the next file in the archive (including the first),\n // and then it can be treated as an io.Reader to access the file's data.\n-//\n-// Example:\n-//\ttr := tar.NewReader(r)\n-//\tfor {\n-//\t\thdr, err := tr.Next()\n-//\t\tif err == io.EOF {\n-//\t\t\t// end of tar archive\n-//\t\t\tbreak\n-//\t\t}\n-//\t\tif err != nil {\n-//\t\t\t// handle error\n-//\t\t}\n-//\t\tio.Copy(data, tr)\n-//\t}\n type Reader struct {\n \tr   io.Reader\n \terr error\n@@ -55,13 +44,183 @@ func (tr *Reader) Next() (*Header, error) {\n \tif tr.err == nil {\n \t\ttr.skipUnread()\n \t}\n-\tif tr.err == nil {\n+\tif tr.err != nil {\n+\t\treturn hdr, tr.err\n+\t}\n+\thdr = tr.readHeader()\n+\tif hdr == nil {\n+\t\treturn hdr, tr.err\n+\t}\n+\t// Check for PAX/GNU header.\n+\tswitch hdr.Typeflag {\n+\tcase TypeXHeader:\n+\t\t//  PAX extended header\n+\t\theaders, err := parsePAX(tr)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\t// We actually read the whole file,\n+\t\t// but this skips alignment padding\n+\t\ttr.skipUnread()\n \t\thdr = tr.readHeader()\n+\t\tmergePAX(hdr, headers)\n+\t\treturn hdr, nil\n+\tcase TypeGNULongName:\n+\t\t// We have a GNU long name header. Its contents are the real file name.\n+\t\trealname, err := ioutil.ReadAll(tr)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\thdr, err := tr.Next()\n+\t\thdr.Name = cString(realname)\n+\t\treturn hdr, err\n+\tcase TypeGNULongLink:\n+\t\t// We have a GNU long link header.\n+\t\trealname, err := ioutil.ReadAll(tr)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\thdr, err := tr.Next()\n+\t\thdr.Linkname = cString(realname)\n+\t\treturn hdr, err\n \t}\n \treturn hdr, tr.err\n }\n \n-// Parse bytes as a NUL-terminated C-style string.\n+// mergePAX merges well known headers according to PAX standard.\n+// In general headers with the same name as those found\n+// in the header struct overwrite those found in the header\n+// struct with higher precision or longer values. Esp. useful\n+// for name and linkname fields.\n+func mergePAX(hdr *Header, headers map[string]string) error {\n+\tfor k, v := range headers {\n+\t\tswitch k {\n+\t\tcase \"path\":\n+\t\t\thdr.Name = v\n+\t\tcase \"linkpath\":\n+\t\t\thdr.Linkname = v\n+\t\tcase \"gname\":\n+\t\t\thdr.Gname = v\n+\t\tcase \"uname\":\n+\t\t\thdr.Uname = v\n+\t\tcase \"uid\":\n+\t\t\tuid, err := strconv.ParseInt(v, 10, 0)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.Uid = int(uid)\n+\t\tcase \"gid\":\n+\t\t\tgid, err := strconv.ParseInt(v, 10, 0)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.Gid = int(gid)\n+\t\tcase \"atime\":\n+\t\t\tt, err := parsePAXTime(v)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.AccessTime = t\n+\t\tcase \"mtime\":\n+\t\t\tt, err := parsePAXTime(v)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.ModTime = t\n+\t\tcase \"ctime\":\n+\t\t\tt, err := parsePAXTime(v)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.ChangeTime = t\n+\t\tcase \"size\":\n+\t\t\tsize, err := strconv.ParseInt(v, 10, 0)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\thdr.Size = int64(size)\n+\t\t}\n+\n+\t}\n+\treturn nil\n+}\n+\n+// parsePAXTime takes a string of the form %d.%d as described in\n+// the PAX specification.\n+func parsePAXTime(t string) (time.Time, error) {\n+\tbuf := []byte(t)\n+\tpos := bytes.IndexByte(buf, '.')\n+\tvar seconds, nanoseconds int64\n+\tvar err error\n+\tif pos == -1 {\n+\t\tseconds, err = strconv.ParseInt(t, 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn time.Time{}, err\n+\t\t}\n+\t} else {\n+\t\tseconds, err = strconv.ParseInt(string(buf[:pos]), 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn time.Time{}, err\n+\t\t}\n+\t\tnano_buf := string(buf[pos+1:])\n+\t\t// Pad as needed before converting to a decimal.\n+\t\t// For example .030 -> .030000000 -> 30000000 nanoseconds\n+\t\tif len(nano_buf) < maxNanoSecondIntSize {\n+\t\t\t// Right pad\n+\t\t\tnano_buf += strings.Repeat(\"0\", maxNanoSecondIntSize-len(nano_buf))\n+\t\t} else if len(nano_buf) > maxNanoSecondIntSize {\n+\t\t\t// Right truncate\n+\t\t\tnano_buf = nano_buf[:maxNanoSecondIntSize]\n+\t\t}\n+\t\tnanoseconds, err = strconv.ParseInt(string(nano_buf), 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn time.Time{}, err\n+\t\t}\n+\t}\n+\tts := time.Unix(seconds, nanoseconds)\n+\treturn ts, nil\n+}\n+\n+// parsePAX parses PAX headers.\n+// If an extended header (type 'x') is invalid, ErrHeader is returned\n+func parsePAX(r io.Reader) (map[string]string, error) {\n+\tbuf, err := ioutil.ReadAll(r)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\theaders := make(map[string]string)\n+\t// Each record is constructed as\n+\t//     \"%d %s=%s\\n\", length, keyword, value\n+\tfor len(buf) > 0 {\n+\t\t// or the header was empty to start with.\n+\t\tvar sp int\n+\t\t// The size field ends at the first space.\n+\t\tsp = bytes.IndexByte(buf, ' ')\n+\t\tif sp == -1 {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\t// Parse the first token as a decimal integer.\n+\t\tn, err := strconv.ParseInt(string(buf[:sp]), 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\t// Extract everything between the decimal and the n -1 on the\n+\t\t// beginning to to eat the ' ', -1 on the end to skip the newline.\n+\t\tvar record []byte\n+\t\trecord, buf = buf[sp+1:n-1], buf[n:]\n+\t\t// The first equals is guaranteed to mark the end of the key.\n+\t\t// Everything else is value.\n+\t\teq := bytes.IndexByte(record, '=')\n+\t\tif eq == -1 {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\tkey, value := record[:eq], record[eq+1:]\n+\t\theaders[string(key)] = string(value)\n+\t}\n+\treturn headers, nil\n+}\n+\n+// cString parses bytes as a NUL-terminated C-style string.\n // If a NUL byte is not found then the whole slice is returned as a string.\n func cString(b []byte) string {\n \tn := 0\n@@ -99,7 +258,7 @@ func (tr *Reader) octal(b []byte) int64 {\n \treturn int64(x)\n }\n \n-// Skip any unread bytes in the existing file entry, as well as any alignment padding.\n+// skipUnread skips any unread bytes in the existing file entry, as well as any alignment padding.\n func (tr *Reader) skipUnread() {\n \tnr := tr.nb + tr.pad // number of bytes to skip\n \ttr.nb, tr.pad = 0, 0"}, {"sha": "9a1968237138c2c974fd01e19e64cc801daef835", "filename": "libgo/go/archive/tar/reader_test.go", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -10,6 +10,8 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -108,6 +110,38 @@ var untarTests = []*untarTest{\n \t\t\t},\n \t\t},\n \t},\n+\t{\n+\t\tfile: \"testdata/pax.tar\",\n+\t\theaders: []*Header{\n+\t\t\t{\n+\t\t\t\tName:       \"a/123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100\",\n+\t\t\t\tMode:       0664,\n+\t\t\t\tUid:        1000,\n+\t\t\t\tGid:        1000,\n+\t\t\t\tUname:      \"shane\",\n+\t\t\t\tGname:      \"shane\",\n+\t\t\t\tSize:       7,\n+\t\t\t\tModTime:    time.Unix(1350244992, 23960108),\n+\t\t\t\tChangeTime: time.Unix(1350244992, 23960108),\n+\t\t\t\tAccessTime: time.Unix(1350244992, 23960108),\n+\t\t\t\tTypeflag:   TypeReg,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tName:       \"a/b\",\n+\t\t\t\tMode:       0777,\n+\t\t\t\tUid:        1000,\n+\t\t\t\tGid:        1000,\n+\t\t\t\tUname:      \"shane\",\n+\t\t\t\tGname:      \"shane\",\n+\t\t\t\tSize:       0,\n+\t\t\t\tModTime:    time.Unix(1350266320, 910238425),\n+\t\t\t\tChangeTime: time.Unix(1350266320, 910238425),\n+\t\t\t\tAccessTime: time.Unix(1350266320, 910238425),\n+\t\t\t\tTypeflag:   TypeSymlink,\n+\t\t\t\tLinkname:   \"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100\",\n+\t\t\t},\n+\t\t},\n+\t},\n }\n \n func TestReader(t *testing.T) {\n@@ -133,7 +167,7 @@ testLoop:\n \t\t}\n \t\thdr, err := tr.Next()\n \t\tif err == io.EOF {\n-\t\t\tbreak\n+\t\t\tcontinue testLoop\n \t\t}\n \t\tif hdr != nil || err != nil {\n \t\t\tt.Errorf(\"test %d: Unexpected entry or error: hdr=%v err=%v\", i, hdr, err)\n@@ -260,3 +294,73 @@ func TestNonSeekable(t *testing.T) {\n \t\tt.Errorf(\"Didn't process all files\\nexpected: %d\\nprocessed %d\\n\", len(test.headers), nread)\n \t}\n }\n+\n+func TestParsePAXHeader(t *testing.T) {\n+\tpaxTests := [][3]string{\n+\t\t{\"a\", \"a=name\", \"10 a=name\\n\"}, // Test case involving multiple acceptable lengths\n+\t\t{\"a\", \"a=name\", \"9 a=name\\n\"},  // Test case involving multiple acceptable length\n+\t\t{\"mtime\", \"mtime=1350244992.023960108\", \"30 mtime=1350244992.023960108\\n\"}}\n+\tfor _, test := range paxTests {\n+\t\tkey, expected, raw := test[0], test[1], test[2]\n+\t\treader := bytes.NewBuffer([]byte(raw))\n+\t\theaders, err := parsePAX(reader)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Couldn't parse correctly formatted headers: %v\", err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.EqualFold(headers[key], expected) {\n+\t\t\tt.Errorf(\"mtime header incorrectly parsed: got %s, wanted %s\", headers[key], expected)\n+\t\t\tcontinue\n+\t\t}\n+\t\ttrailer := make([]byte, 100)\n+\t\tn, err := reader.Read(trailer)\n+\t\tif err != io.EOF || n != 0 {\n+\t\t\tt.Error(\"Buffer wasn't consumed\")\n+\t\t}\n+\t}\n+\tbadHeader := bytes.NewBuffer([]byte(\"3 somelongkey=\"))\n+\tif _, err := parsePAX(badHeader); err != ErrHeader {\n+\t\tt.Fatal(\"Unexpected success when parsing bad header\")\n+\t}\n+}\n+\n+func TestParsePAXTime(t *testing.T) {\n+\t// Some valid PAX time values\n+\ttimestamps := map[string]time.Time{\n+\t\t\"1350244992.023960108\":  time.Unix(1350244992, 23960108), // The commoon case\n+\t\t\"1350244992.02396010\":   time.Unix(1350244992, 23960100), // Lower precision value\n+\t\t\"1350244992.0239601089\": time.Unix(1350244992, 23960108), // Higher precision value\n+\t\t\"1350244992\":            time.Unix(1350244992, 0),        // Low precision value\n+\t}\n+\tfor input, expected := range timestamps {\n+\t\tts, err := parsePAXTime(input)\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tif !ts.Equal(expected) {\n+\t\t\tt.Fatalf(\"Time parsing failure %s %s\", ts, expected)\n+\t\t}\n+\t}\n+}\n+\n+func TestMergePAX(t *testing.T) {\n+\thdr := new(Header)\n+\t// Test a string, integer, and time based value.\n+\theaders := map[string]string{\n+\t\t\"path\":  \"a/b/c\",\n+\t\t\"uid\":   \"1000\",\n+\t\t\"mtime\": \"1350244992.023960108\",\n+\t}\n+\terr := mergePAX(hdr, headers)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\twant := &Header{\n+\t\tName:    \"a/b/c\",\n+\t\tUid:     1000,\n+\t\tModTime: time.Unix(1350244992, 23960108),\n+\t}\n+\tif !reflect.DeepEqual(hdr, want) {\n+\t\tt.Errorf(\"incorrect merge: got %+v, want %+v\", hdr, want)\n+\t}\n+}"}, {"sha": "dd6310313afa8bf6b5b307df3a32ea12c3f6c285", "filename": "libgo/go/archive/tar/tar_test.go", "status": "modified", "additions": 173, "deletions": 2, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftar_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftar_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Ftar_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -14,13 +14,13 @@ import (\n )\n \n func TestFileInfoHeader(t *testing.T) {\n-\tfi, err := os.Lstat(\"testdata/small.txt\")\n+\tfi, err := os.Stat(\"testdata/small.txt\")\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n \th, err := FileInfoHeader(fi, \"\")\n \tif err != nil {\n-\t\tt.Fatalf(\"on small.txt: %v\", err)\n+\t\tt.Fatalf(\"FileInfoHeader: %v\", err)\n \t}\n \tif g, e := h.Name, \"small.txt\"; g != e {\n \t\tt.Errorf(\"Name = %q; want %q\", g, e)\n@@ -36,6 +36,30 @@ func TestFileInfoHeader(t *testing.T) {\n \t}\n }\n \n+func TestFileInfoHeaderDir(t *testing.T) {\n+\tfi, err := os.Stat(\"testdata\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\th, err := FileInfoHeader(fi, \"\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"FileInfoHeader: %v\", err)\n+\t}\n+\tif g, e := h.Name, \"testdata/\"; g != e {\n+\t\tt.Errorf(\"Name = %q; want %q\", g, e)\n+\t}\n+\t// Ignoring c_ISGID for golang.org/issue/4867\n+\tif g, e := h.Mode&^c_ISGID, int64(fi.Mode().Perm())|c_ISDIR; g != e {\n+\t\tt.Errorf(\"Mode = %#o; want %#o\", g, e)\n+\t}\n+\tif g, e := h.Size, int64(0); g != e {\n+\t\tt.Errorf(\"Size = %v; want %v\", g, e)\n+\t}\n+\tif g, e := h.ModTime, fi.ModTime(); !g.Equal(e) {\n+\t\tt.Errorf(\"ModTime = %v; want %v\", g, e)\n+\t}\n+}\n+\n func TestFileInfoHeaderSymlink(t *testing.T) {\n \th, err := FileInfoHeader(symlink{}, \"some-target\")\n \tif err != nil {\n@@ -98,3 +122,150 @@ func TestRoundTrip(t *testing.T) {\n \t\tt.Errorf(\"Data mismatch.\\n got %q\\nwant %q\", rData, data)\n \t}\n }\n+\n+type headerRoundTripTest struct {\n+\th  *Header\n+\tfm os.FileMode\n+}\n+\n+func TestHeaderRoundTrip(t *testing.T) {\n+\tgolden := []headerRoundTripTest{\n+\t\t// regular file.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"test.txt\",\n+\t\t\t\tMode:     0644 | c_ISREG,\n+\t\t\t\tSize:     12,\n+\t\t\t\tModTime:  time.Unix(1360600916, 0),\n+\t\t\t\tTypeflag: TypeReg,\n+\t\t\t},\n+\t\t\tfm: 0644,\n+\t\t},\n+\t\t// hard link.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"hard.txt\",\n+\t\t\t\tMode:     0644 | c_ISLNK,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360600916, 0),\n+\t\t\t\tTypeflag: TypeLink,\n+\t\t\t},\n+\t\t\tfm: 0644 | os.ModeSymlink,\n+\t\t},\n+\t\t// symbolic link.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"link.txt\",\n+\t\t\t\tMode:     0777 | c_ISLNK,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360600852, 0),\n+\t\t\t\tTypeflag: TypeSymlink,\n+\t\t\t},\n+\t\t\tfm: 0777 | os.ModeSymlink,\n+\t\t},\n+\t\t// character device node.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"dev/null\",\n+\t\t\t\tMode:     0666 | c_ISCHR,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360578951, 0),\n+\t\t\t\tTypeflag: TypeChar,\n+\t\t\t},\n+\t\t\tfm: 0666 | os.ModeDevice | os.ModeCharDevice,\n+\t\t},\n+\t\t// block device node.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"dev/sda\",\n+\t\t\t\tMode:     0660 | c_ISBLK,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360578954, 0),\n+\t\t\t\tTypeflag: TypeBlock,\n+\t\t\t},\n+\t\t\tfm: 0660 | os.ModeDevice,\n+\t\t},\n+\t\t// directory.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"dir/\",\n+\t\t\t\tMode:     0755 | c_ISDIR,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360601116, 0),\n+\t\t\t\tTypeflag: TypeDir,\n+\t\t\t},\n+\t\t\tfm: 0755 | os.ModeDir,\n+\t\t},\n+\t\t// fifo node.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"dev/initctl\",\n+\t\t\t\tMode:     0600 | c_ISFIFO,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360578949, 0),\n+\t\t\t\tTypeflag: TypeFifo,\n+\t\t\t},\n+\t\t\tfm: 0600 | os.ModeNamedPipe,\n+\t\t},\n+\t\t// setuid.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"bin/su\",\n+\t\t\t\tMode:     0755 | c_ISREG | c_ISUID,\n+\t\t\t\tSize:     23232,\n+\t\t\t\tModTime:  time.Unix(1355405093, 0),\n+\t\t\t\tTypeflag: TypeReg,\n+\t\t\t},\n+\t\t\tfm: 0755 | os.ModeSetuid,\n+\t\t},\n+\t\t// setguid.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"group.txt\",\n+\t\t\t\tMode:     0750 | c_ISREG | c_ISGID,\n+\t\t\t\tSize:     0,\n+\t\t\t\tModTime:  time.Unix(1360602346, 0),\n+\t\t\t\tTypeflag: TypeReg,\n+\t\t\t},\n+\t\t\tfm: 0750 | os.ModeSetgid,\n+\t\t},\n+\t\t// sticky.\n+\t\t{\n+\t\t\th: &Header{\n+\t\t\t\tName:     \"sticky.txt\",\n+\t\t\t\tMode:     0600 | c_ISREG | c_ISVTX,\n+\t\t\t\tSize:     7,\n+\t\t\t\tModTime:  time.Unix(1360602540, 0),\n+\t\t\t\tTypeflag: TypeReg,\n+\t\t\t},\n+\t\t\tfm: 0600 | os.ModeSticky,\n+\t\t},\n+\t}\n+\n+\tfor i, g := range golden {\n+\t\tfi := g.h.FileInfo()\n+\t\th2, err := FileInfoHeader(fi, \"\")\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif got, want := h2.Name, g.h.Name; got != want {\n+\t\t\tt.Errorf(\"i=%d: Name: got %v, want %v\", i, got, want)\n+\t\t}\n+\t\tif got, want := h2.Size, g.h.Size; got != want {\n+\t\t\tt.Errorf(\"i=%d: Size: got %v, want %v\", i, got, want)\n+\t\t}\n+\t\tif got, want := h2.Mode, g.h.Mode; got != want {\n+\t\t\tt.Errorf(\"i=%d: Mode: got %o, want %o\", i, got, want)\n+\t\t}\n+\t\tif got, want := fi.Mode(), g.fm; got != want {\n+\t\t\tt.Errorf(\"i=%d: fi.Mode: got %o, want %o\", i, got, want)\n+\t\t}\n+\t\tif got, want := h2.ModTime, g.h.ModTime; got != want {\n+\t\t\tt.Errorf(\"i=%d: ModTime: got %v, want %v\", i, got, want)\n+\t\t}\n+\t\tif sysh, ok := fi.Sys().(*Header); !ok || sysh != g.h {\n+\t\t\tt.Errorf(\"i=%d: Sys didn't return original *Header\", i)\n+\t\t}\n+\t}\n+}"}, {"sha": "9bc24b6587d726c7fca4e533d9c61a3801a34688", "filename": "libgo/go/archive/tar/testdata/pax.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fpax.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fpax.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fpax.tar?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "29679d9a305fc0293f31212541335af824ab32c7", "filename": "libgo/go/archive/tar/testdata/ustar.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fustar.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fustar.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fustar.tar?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "d92dd06eab10fb29a856a0a323f1cafeb555a1d0", "filename": "libgo/go/archive/tar/writer.go", "status": "modified", "additions": 102, "deletions": 16, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -8,34 +8,28 @@ package tar\n // - catch more errors (no first header, etc.)\n \n import (\n+\t\"bytes\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"os\"\n+\t\"path\"\n \t\"strconv\"\n+\t\"strings\"\n \t\"time\"\n )\n \n var (\n \tErrWriteTooLong    = errors.New(\"archive/tar: write too long\")\n \tErrFieldTooLong    = errors.New(\"archive/tar: header field too long\")\n \tErrWriteAfterClose = errors.New(\"archive/tar: write after close\")\n+\terrNameTooLong     = errors.New(\"archive/tar: name too long\")\n )\n \n // A Writer provides sequential writing of a tar archive in POSIX.1 format.\n // A tar archive consists of a sequence of files.\n // Call WriteHeader to begin a new file, and then call Write to supply that file's data,\n // writing at most hdr.Size bytes in total.\n-//\n-// Example:\n-//\ttw := tar.NewWriter(w)\n-//\thdr := new(tar.Header)\n-//\thdr.Size = length of data in bytes\n-//\t// populate other hdr fields as desired\n-//\tif err := tw.WriteHeader(hdr); err != nil {\n-//\t\t// handle error\n-//\t}\n-//\tio.Copy(tw, data)\n-//\ttw.Close()\n type Writer struct {\n \tw          io.Writer\n \terr        error\n@@ -130,15 +124,31 @@ func (tw *Writer) WriteHeader(hdr *Header) error {\n \tif tw.err != nil {\n \t\treturn tw.err\n \t}\n-\n+\t// Decide whether or not to use PAX extensions\n+\t// TODO(shanemhansen): we might want to use PAX headers for\n+\t// subsecond time resolution, but for now let's just capture\n+\t// the long name/long symlink use case.\n+\tsuffix := hdr.Name\n+\tprefix := \"\"\n+\tif len(hdr.Name) > fileNameSize || len(hdr.Linkname) > fileNameSize {\n+\t\tvar err error\n+\t\tprefix, suffix, err = tw.splitUSTARLongName(hdr.Name)\n+\t\t// Either we were unable to pack the long name into ustar format\n+\t\t// or the link name is too long; use PAX headers.\n+\t\tif err == errNameTooLong || len(hdr.Linkname) > fileNameSize {\n+\t\t\tif err := tw.writePAXHeader(hdr); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t} else if err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n \ttw.nb = int64(hdr.Size)\n \ttw.pad = -tw.nb & (blockSize - 1) // blockSize is a power of two\n \n \theader := make([]byte, blockSize)\n \ts := slicer(header)\n-\n-\t// TODO(dsymonds): handle names longer than 100 chars\n-\tcopy(s.next(100), []byte(hdr.Name))\n+\ttw.cString(s.next(fileNameSize), suffix)\n \n \t// Handle out of range ModTime carefully.\n \tvar modTime int64\n@@ -159,11 +169,15 @@ func (tw *Writer) WriteHeader(hdr *Header) error {\n \ttw.cString(s.next(32), hdr.Gname)      // 297:329\n \ttw.numeric(s.next(8), hdr.Devmajor)    // 329:337\n \ttw.numeric(s.next(8), hdr.Devminor)    // 337:345\n-\n+\ttw.cString(s.next(155), prefix)        // 345:500\n \t// Use the GNU magic instead of POSIX magic if we used any GNU extensions.\n \tif tw.usedBinary {\n \t\tcopy(header[257:265], []byte(\"ustar  \\x00\"))\n \t}\n+\t// Use the ustar magic if we used ustar long names.\n+\tif len(prefix) > 0 {\n+\t\tcopy(header[257:265], []byte(\"ustar\\000\"))\n+\t}\n \n \t// The chksum field is terminated by a NUL and a space.\n \t// This is different from the other octal fields.\n@@ -181,6 +195,78 @@ func (tw *Writer) WriteHeader(hdr *Header) error {\n \treturn tw.err\n }\n \n+// writeUSTARLongName splits a USTAR long name hdr.Name.\n+// name must be < 256 characters. errNameTooLong is returned\n+// if hdr.Name can't be split. The splitting heuristic\n+// is compatible with gnu tar.\n+func (tw *Writer) splitUSTARLongName(name string) (prefix, suffix string, err error) {\n+\tlength := len(name)\n+\tif length > fileNamePrefixSize+1 {\n+\t\tlength = fileNamePrefixSize + 1\n+\t} else if name[length-1] == '/' {\n+\t\tlength--\n+\t}\n+\ti := strings.LastIndex(name[:length], \"/\")\n+\tnlen := length - i - 1\n+\tif i <= 0 || nlen > fileNameSize || nlen == 0 {\n+\t\terr = errNameTooLong\n+\t\treturn\n+\t}\n+\tprefix, suffix = name[:i], name[i+1:]\n+\treturn\n+}\n+\n+// writePaxHeader writes an extended pax header to the\n+// archive.\n+func (tw *Writer) writePAXHeader(hdr *Header) error {\n+\t// Prepare extended header\n+\text := new(Header)\n+\text.Typeflag = TypeXHeader\n+\t// Setting ModTime is required for reader parsing to\n+\t// succeed, and seems harmless enough.\n+\text.ModTime = hdr.ModTime\n+\t// The spec asks that we namespace our pseudo files\n+\t// with the current pid.\n+\tpid := os.Getpid()\n+\tdir, file := path.Split(hdr.Name)\n+\text.Name = path.Join(dir,\n+\t\tfmt.Sprintf(\"PaxHeaders.%d\", pid), file)[0:100]\n+\t// Construct the body\n+\tvar buf bytes.Buffer\n+\tif len(hdr.Name) > fileNameSize {\n+\t\tfmt.Fprint(&buf, paxHeader(\"path=\"+hdr.Name))\n+\t}\n+\tif len(hdr.Linkname) > fileNameSize {\n+\t\tfmt.Fprint(&buf, paxHeader(\"linkpath=\"+hdr.Linkname))\n+\t}\n+\text.Size = int64(len(buf.Bytes()))\n+\tif err := tw.WriteHeader(ext); err != nil {\n+\t\treturn err\n+\t}\n+\tif _, err := tw.Write(buf.Bytes()); err != nil {\n+\t\treturn err\n+\t}\n+\tif err := tw.Flush(); err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+// paxHeader formats a single pax record, prefixing it with the appropriate length\n+func paxHeader(msg string) string {\n+\tconst padding = 2 // Extra padding for space and newline\n+\tsize := len(msg) + padding\n+\tsize += len(strconv.Itoa(size))\n+\trecord := fmt.Sprintf(\"%d %s\\n\", size, msg)\n+\tif len(record) != size {\n+\t\t// Final adjustment if adding size increased\n+\t\t// the number of digits in size\n+\t\tsize = len(record)\n+\t\trecord = fmt.Sprintf(\"%d %s\\n\", size, msg)\n+\t}\n+\treturn record\n+}\n+\n // Write writes to the current entry in the tar archive.\n // Write returns the error ErrWriteTooLong if more than\n // hdr.Size bytes are written after WriteHeader."}, {"sha": "4cf7c72aff346ec04a77ed8d06244fa63f88820b", "filename": "libgo/go/archive/tar/writer_test.go", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"os\"\n \t\"strings\"\n \t\"testing\"\n \t\"testing/iotest\"\n@@ -101,6 +102,27 @@ var writerTests = []*writerTest{\n \t\t\t},\n \t\t},\n \t},\n+\t// This file was produced using gnu tar 1.17\n+\t// gnutar  -b 4 --format=ustar (longname/)*15 + file.txt\n+\t{\n+\t\tfile: \"testdata/ustar.tar\",\n+\t\tentries: []*writerTestEntry{\n+\t\t\t{\n+\t\t\t\theader: &Header{\n+\t\t\t\t\tName:     strings.Repeat(\"longname/\", 15) + \"file.txt\",\n+\t\t\t\t\tMode:     0644,\n+\t\t\t\t\tUid:      0765,\n+\t\t\t\t\tGid:      024,\n+\t\t\t\t\tSize:     06,\n+\t\t\t\t\tModTime:  time.Unix(1360135598, 0),\n+\t\t\t\t\tTypeflag: '0',\n+\t\t\t\t\tUname:    \"shane\",\n+\t\t\t\t\tGname:    \"staff\",\n+\t\t\t\t},\n+\t\t\t\tcontents: \"hello\\n\",\n+\t\t\t},\n+\t\t},\n+\t},\n }\n \n // Render byte array in a two-character hexadecimal string, spaced for easy visual inspection.\n@@ -180,3 +202,61 @@ testLoop:\n \t\t}\n \t}\n }\n+\n+func TestPax(t *testing.T) {\n+\t// Create an archive with a large name\n+\tfileinfo, err := os.Stat(\"testdata/small.txt\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\thdr, err := FileInfoHeader(fileinfo, \"\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"os.Stat: %v\", err)\n+\t}\n+\t// Force a PAX long name to be written\n+\tlongName := strings.Repeat(\"ab\", 100)\n+\tcontents := strings.Repeat(\" \", int(hdr.Size))\n+\thdr.Name = longName\n+\tvar buf bytes.Buffer\n+\twriter := NewWriter(&buf)\n+\tif err := writer.WriteHeader(hdr); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif _, err = writer.Write([]byte(contents)); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif err := writer.Close(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\t// Simple test to make sure PAX extensions are in effect\n+\tif !bytes.Contains(buf.Bytes(), []byte(\"PaxHeaders.\")) {\n+\t\tt.Fatal(\"Expected at least one PAX header to be written.\")\n+\t}\n+\t// Test that we can get a long name back out of the archive.\n+\treader := NewReader(&buf)\n+\thdr, err = reader.Next()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif hdr.Name != longName {\n+\t\tt.Fatal(\"Couldn't recover long file name\")\n+\t}\n+}\n+\n+func TestPAXHeader(t *testing.T) {\n+\tmedName := strings.Repeat(\"CD\", 50)\n+\tlongName := strings.Repeat(\"AB\", 100)\n+\tpaxTests := [][2]string{\n+\t\t{\"name=/etc/hosts\", \"19 name=/etc/hosts\\n\"},\n+\t\t{\"a=b\", \"6 a=b\\n\"},          // Single digit length\n+\t\t{\"a=names\", \"11 a=names\\n\"}, // Test case involving carries\n+\t\t{\"name=\" + longName, fmt.Sprintf(\"210 name=%s\\n\", longName)},\n+\t\t{\"name=\" + medName, fmt.Sprintf(\"110 name=%s\\n\", medName)}}\n+\n+\tfor _, test := range paxTests {\n+\t\tkey, expected := test[0], test[1]\n+\t\tif result := paxHeader(key); result != expected {\n+\t\t\tt.Fatalf(\"paxHeader: got %s, expected %s\", result, expected)\n+\t\t}\n+\t}\n+}"}, {"sha": "f19cf2d1f1e3c2b0b8e3a9c50acf0634c9dd6402", "filename": "libgo/go/archive/zip/reader.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -353,6 +353,11 @@ func readDirectoryEnd(r io.ReaderAt, size int64) (dir *directoryEnd, err error)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n+\n+\t// Make sure directoryOffset points to somewhere in our file.\n+\tif o := int64(d.directoryOffset); o < 0 || o >= size {\n+\t\treturn nil, ErrFormat\n+\t}\n \treturn d, nil\n }\n \n@@ -407,7 +412,7 @@ func findSignatureInBlock(b []byte) int {\n \t\tif b[i] == 'P' && b[i+1] == 'K' && b[i+2] == 0x05 && b[i+3] == 0x06 {\n \t\t\t// n is length of comment\n \t\t\tn := int(b[i+directoryEndLen-2]) | int(b[i+directoryEndLen-1])<<8\n-\t\t\tif n+directoryEndLen+i == len(b) {\n+\t\t\tif n+directoryEndLen+i <= len(b) {\n \t\t\t\treturn i\n \t\t\t}\n \t\t}"}, {"sha": "833ba28ad5252a62d98eaf46441c4c4319f58d64", "filename": "libgo/go/archive/zip/reader_test.go", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -63,6 +63,24 @@ var tests = []ZipTest{\n \t\t\t},\n \t\t},\n \t},\n+\t{\n+\t\tName:    \"test-trailing-junk.zip\",\n+\t\tComment: \"This is a zipfile comment.\",\n+\t\tFile: []ZipTestFile{\n+\t\t\t{\n+\t\t\t\tName:    \"test.txt\",\n+\t\t\t\tContent: []byte(\"This is a test text file.\\n\"),\n+\t\t\t\tMtime:   \"09-05-10 12:12:02\",\n+\t\t\t\tMode:    0644,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tName:  \"gophercolor16x16.png\",\n+\t\t\t\tFile:  \"gophercolor16x16.png\",\n+\t\t\t\tMtime: \"09-05-10 15:52:58\",\n+\t\t\t\tMode:  0644,\n+\t\t\t},\n+\t\t},\n+\t},\n \t{\n \t\tName:   \"r.zip\",\n \t\tSource: returnRecursiveZip,\n@@ -262,7 +280,7 @@ func readTestZip(t *testing.T, zt ZipTest) {\n \t\t}\n \t}\n \tif err != zt.Error {\n-\t\tt.Errorf(\"error=%v, want %v\", err, zt.Error)\n+\t\tt.Errorf(\"%s: error=%v, want %v\", zt.Name, err, zt.Error)\n \t\treturn\n \t}\n "}, {"sha": "73972d41cf0c9d8d95628bbd3322a8f51dba9144", "filename": "libgo/go/archive/zip/struct.go", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -64,8 +64,15 @@ const (\n \tzip64ExtraId = 0x0001 // zip64 Extended Information Extra Field\n )\n \n+// FileHeader describes a file within a zip file.\n+// See the zip spec for details.\n type FileHeader struct {\n-\tName               string\n+\t// Name is the name of the file.\n+\t// It must be a relative path: it must not start with a drive\n+\t// letter (e.g. C:) or leading slash, and only forward slashes\n+\t// are allowed.\n+\tName string\n+\n \tCreatorVersion     uint16\n \tReaderVersion      uint16\n \tFlags              uint16"}, {"sha": "42281b4e3053eec7924b58d234d04e492c3baa38", "filename": "libgo/go/archive/zip/testdata/test-trailing-junk.zip", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Ftest-trailing-junk.zip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Ftest-trailing-junk.zip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Ftest-trailing-junk.zip?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "e9f147cea666f6de177f07f3bb61b16cb7380f5c", "filename": "libgo/go/archive/zip/writer.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Farchive%2Fzip%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fwriter.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -163,6 +163,9 @@ func (w *Writer) Close() error {\n \n // Create adds a file to the zip file using the provided name.\n // It returns a Writer to which the file contents should be written.\n+// The name must be a relative path: it must not start with a drive\n+// letter (e.g. C:) or leading slash, and only forward slashes are\n+// allowed.\n // The file's contents must be written to the io.Writer before the next\n // call to Create, CreateHeader, or Close.\n func (w *Writer) Create(name string) (io.Writer, error) {"}, {"sha": "df3501f2ca1776dfae856aa2bfa8c4e3002aa803", "filename": "libgo/go/bufio/bufio.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fbufio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fbufio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -274,11 +274,10 @@ func (b *Reader) ReadSlice(delim byte) (line []byte, err error) {\n \t\t\treturn b.buf, ErrBufferFull\n \t\t}\n \t}\n-\tpanic(\"not reached\")\n }\n \n // ReadLine is a low-level line-reading primitive. Most callers should use\n-// ReadBytes('\\n') or ReadString('\\n') instead.\n+// ReadBytes('\\n') or ReadString('\\n') instead or use a Scanner.\n //\n // ReadLine tries to return a single line, not including the end-of-line bytes.\n // If the line was too long for the buffer then isPrefix is set and the\n@@ -331,6 +330,7 @@ func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error) {\n // it returns the data read before the error and the error itself (often io.EOF).\n // ReadBytes returns err != nil if and only if the returned data does not end in\n // delim.\n+// For simple uses, a Scanner may be more convenient.\n func (b *Reader) ReadBytes(delim byte) (line []byte, err error) {\n \t// Use ReadSlice to look for array,\n \t// accumulating full buffers.\n@@ -378,6 +378,7 @@ func (b *Reader) ReadBytes(delim byte) (line []byte, err error) {\n // it returns the data read before the error and the error itself (often io.EOF).\n // ReadString returns err != nil if and only if the returned data does not end in\n // delim.\n+// For simple uses, a Scanner may be more convenient.\n func (b *Reader) ReadString(delim byte) (line string, err error) {\n \tbytes, err := b.ReadBytes(delim)\n \treturn string(bytes), err"}, {"sha": "79ed0f178e036ccab1ffb7b2fe166a6138267ecc", "filename": "libgo/go/bufio/bufio_test.go", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -7,6 +7,7 @@ package bufio_test\n import (\n \t. \"bufio\"\n \t\"bytes\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n@@ -434,9 +435,12 @@ func TestWriteErrors(t *testing.T) {\n \t\t\tt.Errorf(\"Write hello to %v: %v\", w, e)\n \t\t\tcontinue\n \t\t}\n-\t\te = buf.Flush()\n-\t\tif e != w.expect {\n-\t\t\tt.Errorf(\"Flush %v: got %v, wanted %v\", w, e, w.expect)\n+\t\t// Two flushes, to verify the error is sticky.\n+\t\tfor i := 0; i < 2; i++ {\n+\t\t\te = buf.Flush()\n+\t\t\tif e != w.expect {\n+\t\t\t\tt.Errorf(\"Flush %d/2 %v: got %v, wanted %v\", i+1, w, e, w.expect)\n+\t\t\t}\n \t\t}\n \t}\n }\n@@ -953,7 +957,7 @@ func TestNegativeRead(t *testing.T) {\n \t\t\tt.Fatal(\"read did not panic\")\n \t\tcase error:\n \t\t\tif !strings.Contains(err.Error(), \"reader returned negative count from Read\") {\n-\t\t\t\tt.Fatal(\"wrong panic: %v\", err)\n+\t\t\t\tt.Fatalf(\"wrong panic: %v\", err)\n \t\t\t}\n \t\tdefault:\n \t\t\tt.Fatalf(\"unexpected panic value: %T(%v)\", err, err)\n@@ -962,6 +966,43 @@ func TestNegativeRead(t *testing.T) {\n \tb.Read(make([]byte, 100))\n }\n \n+var errFake = errors.New(\"fake error\")\n+\n+type errorThenGoodReader struct {\n+\tdidErr bool\n+\tnread  int\n+}\n+\n+func (r *errorThenGoodReader) Read(p []byte) (int, error) {\n+\tr.nread++\n+\tif !r.didErr {\n+\t\tr.didErr = true\n+\t\treturn 0, errFake\n+\t}\n+\treturn len(p), nil\n+}\n+\n+func TestReaderClearError(t *testing.T) {\n+\tr := &errorThenGoodReader{}\n+\tb := NewReader(r)\n+\tbuf := make([]byte, 1)\n+\tif _, err := b.Read(nil); err != nil {\n+\t\tt.Fatalf(\"1st nil Read = %v; want nil\", err)\n+\t}\n+\tif _, err := b.Read(buf); err != errFake {\n+\t\tt.Fatalf(\"1st Read = %v; want errFake\", err)\n+\t}\n+\tif _, err := b.Read(nil); err != nil {\n+\t\tt.Fatalf(\"2nd nil Read = %v; want nil\", err)\n+\t}\n+\tif _, err := b.Read(buf); err != nil {\n+\t\tt.Fatalf(\"3rd Read with buffer = %v; want nil\", err)\n+\t}\n+\tif r.nread != 2 {\n+\t\tt.Errorf(\"num reads = %d; want 2\", r.nread)\n+\t}\n+}\n+\n // An onlyReader only implements io.Reader, no matter what other methods the underlying implementation may have.\n type onlyReader struct {\n \tr io.Reader"}, {"sha": "08a39441e665adabd7897a66934279c86cac0220", "filename": "libgo/go/bufio/example_test.go", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fexample_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bufio_test\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+)\n+\n+// The simplest use of a Scanner, to read standard input as a set of lines.\n+func ExampleScanner_lines() {\n+\tscanner := bufio.NewScanner(os.Stdin)\n+\tfor scanner.Scan() {\n+\t\tfmt.Println(scanner.Text()) // Println will add back the final '\\n'\n+\t}\n+\tif err := scanner.Err(); err != nil {\n+\t\tfmt.Fprintln(os.Stderr, \"reading standard input:\", err)\n+\t}\n+}\n+\n+// Use a Scanner to implement a simple word-count utility by scanning the\n+// input as a sequence of space-delimited tokens.\n+func ExampleScanner_words() {\n+\t// An artificial input source.\n+\tconst input = \"Now is the winter of our discontent,\\nMade glorious summer by this sun of York.\\n\"\n+\tscanner := bufio.NewScanner(strings.NewReader(input))\n+\t// Set the split function for the scanning operation.\n+\tscanner.Split(bufio.ScanWords)\n+\t// Count the words.\n+\tcount := 0\n+\tfor scanner.Scan() {\n+\t\tcount++\n+\t}\n+\tif err := scanner.Err(); err != nil {\n+\t\tfmt.Fprintln(os.Stderr, \"reading input:\", err)\n+\t}\n+\tfmt.Printf(\"%d\\n\", count)\n+\t// Output: 15\n+}\n+\n+// Use a Scanner with a custom split function (built by wrapping ScanWords) to validate\n+// 32-bit decimal input.\n+func ExampleScanner_custom() {\n+\t// An artificial input source.\n+\tconst input = \"1234 5678 1234567901234567890\"\n+\tscanner := bufio.NewScanner(strings.NewReader(input))\n+\t// Create a custom split function by wrapping the existing ScanWords function.\n+\tsplit := func(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\t\tadvance, token, err = bufio.ScanWords(data, atEOF)\n+\t\tif err == nil && token != nil {\n+\t\t\t_, err = strconv.ParseInt(string(token), 10, 32)\n+\t\t}\n+\t\treturn\n+\t}\n+\t// Set the split function for the scanning operation.\n+\tscanner.Split(split)\n+\t// Validate the input\n+\tfor scanner.Scan() {\n+\t\tfmt.Printf(\"%s\\n\", scanner.Text())\n+\t}\n+\n+\tif err := scanner.Err(); err != nil {\n+\t\tfmt.Printf(\"Invalid input: %s\", err)\n+\t}\n+\t// Output:\n+\t// 1234\n+\t// 5678\n+\t// Invalid input: strconv.ParseInt: parsing \"1234567901234567890\": value out of range\n+}"}, {"sha": "3d3bb27d8da51b72e343579b1e54b115b3becb9a", "filename": "libgo/go/bufio/export_test.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fexport_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bufio\n+\n+// Exported for testing only.\n+import (\n+\t\"unicode/utf8\"\n+)\n+\n+var IsSpace = isSpace\n+\n+func (s *Scanner) MaxTokenSize(n int) {\n+\tif n < utf8.UTFMax || n > 1e9 {\n+\t\tpanic(\"bad max token size\")\n+\t}\n+\tif n < len(s.buf) {\n+\t\ts.buf = make([]byte, n)\n+\t}\n+\ts.maxTokenSize = n\n+}\n+\n+// ErrOrEOF is like Err, but returns EOF. Used to test a corner case.\n+func (s *Scanner) ErrOrEOF() error {\n+\treturn s.err\n+}"}, {"sha": "2e1a2e99973e23b0e617da127f4c50bd481e08c6", "filename": "libgo/go/bufio/scan.go", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fscan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fscan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fscan.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,346 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bufio\n+\n+import (\n+\t\"bytes\"\n+\t\"errors\"\n+\t\"io\"\n+\t\"unicode/utf8\"\n+)\n+\n+// Scanner provides a convenient interface for reading data such as\n+// a file of newline-delimited lines of text. Successive calls to\n+// the Scan method will step through the 'tokens' of a file, skipping\n+// the bytes between the tokens. The specification of a token is\n+// defined by a split function of type SplitFunc; the default split\n+// function breaks the input into lines with line termination stripped. Split\n+// functions are defined in this package for scanning a file into\n+// lines, bytes, UTF-8-encoded runes, and space-delimited words. The\n+// client may instead provide a custom split function.\n+//\n+// Scanning stops unrecoverably at EOF, the first I/O error, or a token too\n+// large to fit in the buffer. When a scan stops, the reader may have\n+// advanced arbitrarily far past the last token. Programs that need more\n+// control over error handling or large tokens, or must run sequential scans\n+// on a reader, should use bufio.Reader instead.\n+//\n+type Scanner struct {\n+\tr            io.Reader // The reader provided by the client.\n+\tsplit        SplitFunc // The function to split the tokens.\n+\tmaxTokenSize int       // Maximum size of a token; modified by tests.\n+\ttoken        []byte    // Last token returned by split.\n+\tbuf          []byte    // Buffer used as argument to split.\n+\tstart        int       // First non-processed byte in buf.\n+\tend          int       // End of data in buf.\n+\terr          error     // Sticky error.\n+}\n+\n+// SplitFunc is the signature of the split function used to tokenize the\n+// input. The arguments are an initial substring of the remaining unprocessed\n+// data and a flag, atEOF, that reports whether the Reader has no more data\n+// to give. The return values are the number of bytes to advance the input\n+// and the next token to return to the user, plus an error, if any. If the\n+// data does not yet hold a complete token, for instance if it has no newline\n+// while scanning lines, SplitFunc can return (0, nil) to signal the Scanner\n+// to read more data into the slice and try again with a longer slice\n+// starting at the same point in the input.\n+//\n+// If the returned error is non-nil, scanning stops and the error\n+// is returned to the client.\n+//\n+// The function is never called with an empty data slice unless atEOF\n+// is true. If atEOF is true, however, data may be non-empty and,\n+// as always, holds unprocessed text.\n+type SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)\n+\n+// Errors returned by Scanner.\n+var (\n+\tErrTooLong         = errors.New(\"bufio.Scanner: token too long\")\n+\tErrNegativeAdvance = errors.New(\"bufio.Scanner: SplitFunc returns negative advance count\")\n+\tErrAdvanceTooFar   = errors.New(\"bufio.Scanner: SplitFunc returns advance count beyond input\")\n+)\n+\n+const (\n+\t// Maximum size used to buffer a token. The actual maximum token size\n+\t// may be smaller as the buffer may need to include, for instance, a newline.\n+\tMaxScanTokenSize = 64 * 1024\n+)\n+\n+// NewScanner returns a new Scanner to read from r.\n+// The split function defaults to ScanLines.\n+func NewScanner(r io.Reader) *Scanner {\n+\treturn &Scanner{\n+\t\tr:            r,\n+\t\tsplit:        ScanLines,\n+\t\tmaxTokenSize: MaxScanTokenSize,\n+\t\tbuf:          make([]byte, 4096), // Plausible starting size; needn't be large.\n+\t}\n+}\n+\n+// Err returns the first non-EOF error that was encountered by the Scanner.\n+func (s *Scanner) Err() error {\n+\tif s.err == io.EOF {\n+\t\treturn nil\n+\t}\n+\treturn s.err\n+}\n+\n+// Bytes returns the most recent token generated by a call to Scan.\n+// The underlying array may point to data that will be overwritten\n+// by a subsequent call to Scan. It does no allocation.\n+func (s *Scanner) Bytes() []byte {\n+\treturn s.token\n+}\n+\n+// Text returns the most recent token generated by a call to Scan\n+// as a newly allocated string holding its bytes.\n+func (s *Scanner) Text() string {\n+\treturn string(s.token)\n+}\n+\n+// Scan advances the Scanner to the next token, which will then be\n+// available through the Bytes or Text method. It returns false when the\n+// scan stops, either by reaching the end of the input or an error.\n+// After Scan returns false, the Err method will return any error that\n+// occurred during scanning, except that if it was io.EOF, Err\n+// will return nil.\n+func (s *Scanner) Scan() bool {\n+\t// Loop until we have a token.\n+\tfor {\n+\t\t// See if we can get a token with what we already have.\n+\t\tif s.end > s.start {\n+\t\t\tadvance, token, err := s.split(s.buf[s.start:s.end], s.err != nil)\n+\t\t\tif err != nil {\n+\t\t\t\ts.setErr(err)\n+\t\t\t\treturn false\n+\t\t\t}\n+\t\t\tif !s.advance(advance) {\n+\t\t\t\treturn false\n+\t\t\t}\n+\t\t\ts.token = token\n+\t\t\tif token != nil {\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t}\n+\t\t// We cannot generate a token with what we are holding.\n+\t\t// If we've already hit EOF or an I/O error, we are done.\n+\t\tif s.err != nil {\n+\t\t\t// Shut it down.\n+\t\t\ts.start = 0\n+\t\t\ts.end = 0\n+\t\t\treturn false\n+\t\t}\n+\t\t// Must read more data.\n+\t\t// First, shift data to beginning of buffer if there's lots of empty space\n+\t\t// or space is neded.\n+\t\tif s.start > 0 && (s.end == len(s.buf) || s.start > len(s.buf)/2) {\n+\t\t\tcopy(s.buf, s.buf[s.start:s.end])\n+\t\t\ts.end -= s.start\n+\t\t\ts.start = 0\n+\t\t}\n+\t\t// Is the buffer full? If so, resize.\n+\t\tif s.end == len(s.buf) {\n+\t\t\tif len(s.buf) >= s.maxTokenSize {\n+\t\t\t\ts.setErr(ErrTooLong)\n+\t\t\t\treturn false\n+\t\t\t}\n+\t\t\tnewSize := len(s.buf) * 2\n+\t\t\tif newSize > s.maxTokenSize {\n+\t\t\t\tnewSize = s.maxTokenSize\n+\t\t\t}\n+\t\t\tnewBuf := make([]byte, newSize)\n+\t\t\tcopy(newBuf, s.buf[s.start:s.end])\n+\t\t\ts.buf = newBuf\n+\t\t\ts.end -= s.start\n+\t\t\ts.start = 0\n+\t\t\tcontinue\n+\t\t}\n+\t\t// Finally we can read some input. Make sure we don't get stuck with\n+\t\t// a misbehaving Reader. Officially we don't need to do this, but let's\n+\t\t// be extra careful: Scanner is for safe, simple jobs.\n+\t\tfor loop := 0; ; {\n+\t\t\tn, err := s.r.Read(s.buf[s.end:len(s.buf)])\n+\t\t\ts.end += n\n+\t\t\tif err != nil {\n+\t\t\t\ts.setErr(err)\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tif n > 0 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tloop++\n+\t\t\tif loop > 100 {\n+\t\t\t\ts.setErr(io.ErrNoProgress)\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+// advance consumes n bytes of the buffer. It reports whether the advance was legal.\n+func (s *Scanner) advance(n int) bool {\n+\tif n < 0 {\n+\t\ts.setErr(ErrNegativeAdvance)\n+\t\treturn false\n+\t}\n+\tif n > s.end-s.start {\n+\t\ts.setErr(ErrAdvanceTooFar)\n+\t\treturn false\n+\t}\n+\ts.start += n\n+\treturn true\n+}\n+\n+// setErr records the first error encountered.\n+func (s *Scanner) setErr(err error) {\n+\tif s.err == nil || s.err == io.EOF {\n+\t\ts.err = err\n+\t}\n+}\n+\n+// Split sets the split function for the Scanner. If called, it must be\n+// called before Scan. The default split function is ScanLines.\n+func (s *Scanner) Split(split SplitFunc) {\n+\ts.split = split\n+}\n+\n+// Split functions\n+\n+// ScanBytes is a split function for a Scanner that returns each byte as a token.\n+func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\tif atEOF && len(data) == 0 {\n+\t\treturn 0, nil, nil\n+\t}\n+\treturn 1, data[0:1], nil\n+}\n+\n+var errorRune = []byte(string(utf8.RuneError))\n+\n+// ScanRunes is a split function for a Scanner that returns each\n+// UTF-8-encoded rune as a token. The sequence of runes returned is\n+// equivalent to that from a range loop over the input as a string, which\n+// means that erroneous UTF-8 encodings translate to U+FFFD = \"\\xef\\xbf\\xbd\".\n+// Because of the Scan interface, this makes it impossible for the client to\n+// distinguish correctly encoded replacement runes from encoding errors.\n+func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\tif atEOF && len(data) == 0 {\n+\t\treturn 0, nil, nil\n+\t}\n+\n+\t// Fast path 1: ASCII.\n+\tif data[0] < utf8.RuneSelf {\n+\t\treturn 1, data[0:1], nil\n+\t}\n+\n+\t// Fast path 2: Correct UTF-8 decode without error.\n+\t_, width := utf8.DecodeRune(data)\n+\tif width > 1 {\n+\t\t// It's a valid encoding. Width cannot be one for a correctly encoded\n+\t\t// non-ASCII rune.\n+\t\treturn width, data[0:width], nil\n+\t}\n+\n+\t// We know it's an error: we have width==1 and implicitly r==utf8.RuneError.\n+\t// Is the error because there wasn't a full rune to be decoded?\n+\t// FullRune distinguishes correctly between erroneous and incomplete encodings.\n+\tif !atEOF && !utf8.FullRune(data) {\n+\t\t// Incomplete; get more bytes.\n+\t\treturn 0, nil, nil\n+\t}\n+\n+\t// We have a real UTF-8 encoding error. Return a properly encoded error rune\n+\t// but advance only one byte. This matches the behavior of a range loop over\n+\t// an incorrectly encoded string.\n+\treturn 1, errorRune, nil\n+}\n+\n+// dropCR drops a terminal \\r from the data.\n+func dropCR(data []byte) []byte {\n+\tif len(data) > 0 && data[len(data)-1] == '\\r' {\n+\t\treturn data[0 : len(data)-1]\n+\t}\n+\treturn data\n+}\n+\n+// ScanLines is a split function for a Scanner that returns each line of\n+// text, stripped of any trailing end-of-line marker. The returned line may\n+// be empty. The end-of-line marker is one optional carriage return followed\n+// by one mandatory newline. In regular expression notation, it is `\\r?\\n`.\n+// The last non-empty line of input will be returned even if it has no\n+// newline.\n+func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\tif atEOF && len(data) == 0 {\n+\t\treturn 0, nil, nil\n+\t}\n+\tif i := bytes.IndexByte(data, '\\n'); i >= 0 {\n+\t\t// We have a full newline-terminated line.\n+\t\treturn i + 1, dropCR(data[0:i]), nil\n+\t}\n+\t// If we're at EOF, we have a final, non-terminated line. Return it.\n+\tif atEOF {\n+\t\treturn len(data), dropCR(data), nil\n+\t}\n+\t// Request more data.\n+\treturn 0, nil, nil\n+}\n+\n+// isSpace returns whether the character is a Unicode white space character.\n+// We avoid dependency on the unicode package, but check validity of the implementation\n+// in the tests.\n+func isSpace(r rune) bool {\n+\tif r <= '\\u00FF' {\n+\t\t// Obvious ASCII ones: \\t through \\r plus space. Plus two Latin-1 oddballs.\n+\t\tswitch r {\n+\t\tcase ' ', '\\t', '\\n', '\\v', '\\f', '\\r':\n+\t\t\treturn true\n+\t\tcase '\\u0085', '\\u00A0':\n+\t\t\treturn true\n+\t\t}\n+\t\treturn false\n+\t}\n+\t// High-valued ones.\n+\tif '\\u2000' <= r && r <= '\\u200a' {\n+\t\treturn true\n+\t}\n+\tswitch r {\n+\tcase '\\u1680', '\\u180e', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000':\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// ScanWords is a split function for a Scanner that returns each\n+// space-separated word of text, with surrounding spaces deleted. It will\n+// never return an empty string. The definition of space is set by\n+// unicode.IsSpace.\n+func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\t// Skip leading spaces.\n+\tstart := 0\n+\tfor width := 0; start < len(data); start += width {\n+\t\tvar r rune\n+\t\tr, width = utf8.DecodeRune(data[start:])\n+\t\tif !isSpace(r) {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif atEOF && len(data) == 0 {\n+\t\treturn 0, nil, nil\n+\t}\n+\t// Scan until space, marking end of word.\n+\tfor width, i := 0, start; i < len(data); i += width {\n+\t\tvar r rune\n+\t\tr, width = utf8.DecodeRune(data[i:])\n+\t\tif isSpace(r) {\n+\t\t\treturn i + width, data[start:i], nil\n+\t\t}\n+\t}\n+\t// If we're at EOF, we have a final, non-empty, non-terminated word. Return it.\n+\tif atEOF && len(data) > start {\n+\t\treturn len(data), data[start:], nil\n+\t}\n+\t// Request more data.\n+\treturn 0, nil, nil\n+}"}, {"sha": "c1483b2685855da7b49c560e95ccc73549356c04", "filename": "libgo/go/bufio/scan_test.go", "status": "added", "additions": 406, "deletions": 0, "changes": 406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fscan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbufio%2Fscan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fscan_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,406 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bufio_test\n+\n+import (\n+\t. \"bufio\"\n+\t\"bytes\"\n+\t\"errors\"\n+\t\"io\"\n+\t\"strings\"\n+\t\"testing\"\n+\t\"unicode\"\n+\t\"unicode/utf8\"\n+)\n+\n+// Test white space table matches the Unicode definition.\n+func TestSpace(t *testing.T) {\n+\tfor r := rune(0); r <= utf8.MaxRune; r++ {\n+\t\tif IsSpace(r) != unicode.IsSpace(r) {\n+\t\t\tt.Fatalf(\"white space property disagrees: %#U should be %t\", r, unicode.IsSpace(r))\n+\t\t}\n+\t}\n+}\n+\n+var scanTests = []string{\n+\t\"\",\n+\t\"a\",\n+\t\"\u00bc\",\n+\t\"\u2639\",\n+\t\"\\x81\",   // UTF-8 error\n+\t\"\\uFFFD\", // correctly encoded RuneError\n+\t\"abcdefgh\",\n+\t\"abc def\\n\\t\\tgh    \",\n+\t\"abc\u00bc\u2639\\x81\\uFFFD\u65e5\u672c\u8a9e\\x82abc\",\n+}\n+\n+func TestScanByte(t *testing.T) {\n+\tfor n, test := range scanTests {\n+\t\tbuf := bytes.NewBufferString(test)\n+\t\ts := NewScanner(buf)\n+\t\ts.Split(ScanBytes)\n+\t\tvar i int\n+\t\tfor i = 0; s.Scan(); i++ {\n+\t\t\tif b := s.Bytes(); len(b) != 1 || b[0] != test[i] {\n+\t\t\t\tt.Errorf(\"#%d: %d: expected %q got %q\", n, i, test, b)\n+\t\t\t}\n+\t\t}\n+\t\tif i != len(test) {\n+\t\t\tt.Errorf(\"#%d: termination expected at %d; got %d\", n, len(test), i)\n+\t\t}\n+\t\terr := s.Err()\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: %v\", n, err)\n+\t\t}\n+\t}\n+}\n+\n+// Test that the rune splitter returns same sequence of runes (not bytes) as for range string.\n+func TestScanRune(t *testing.T) {\n+\tfor n, test := range scanTests {\n+\t\tbuf := bytes.NewBufferString(test)\n+\t\ts := NewScanner(buf)\n+\t\ts.Split(ScanRunes)\n+\t\tvar i, runeCount int\n+\t\tvar expect rune\n+\t\t// Use a string range loop to validate the sequence of runes.\n+\t\tfor i, expect = range string(test) {\n+\t\t\tif !s.Scan() {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\truneCount++\n+\t\t\tgot, _ := utf8.DecodeRune(s.Bytes())\n+\t\t\tif got != expect {\n+\t\t\t\tt.Errorf(\"#%d: %d: expected %q got %q\", n, i, expect, got)\n+\t\t\t}\n+\t\t}\n+\t\tif s.Scan() {\n+\t\t\tt.Errorf(\"#%d: scan ran too long, got %q\", n, s.Text())\n+\t\t}\n+\t\ttestRuneCount := utf8.RuneCountInString(test)\n+\t\tif runeCount != testRuneCount {\n+\t\t\tt.Errorf(\"#%d: termination expected at %d; got %d\", n, testRuneCount, runeCount)\n+\t\t}\n+\t\terr := s.Err()\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: %v\", n, err)\n+\t\t}\n+\t}\n+}\n+\n+var wordScanTests = []string{\n+\t\"\",\n+\t\" \",\n+\t\"\\n\",\n+\t\"a\",\n+\t\" a \",\n+\t\"abc def\",\n+\t\" abc def \",\n+\t\" abc\\tdef\\nghi\\rjkl\\fmno\\vpqr\\u0085stu\\u00a0\\n\",\n+}\n+\n+// Test that the word splitter returns the same data as strings.Fields.\n+func TestScanWords(t *testing.T) {\n+\tfor n, test := range wordScanTests {\n+\t\tbuf := bytes.NewBufferString(test)\n+\t\ts := NewScanner(buf)\n+\t\ts.Split(ScanWords)\n+\t\twords := strings.Fields(test)\n+\t\tvar wordCount int\n+\t\tfor wordCount = 0; wordCount < len(words); wordCount++ {\n+\t\t\tif !s.Scan() {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tgot := s.Text()\n+\t\t\tif got != words[wordCount] {\n+\t\t\t\tt.Errorf(\"#%d: %d: expected %q got %q\", n, wordCount, words[wordCount], got)\n+\t\t\t}\n+\t\t}\n+\t\tif s.Scan() {\n+\t\t\tt.Errorf(\"#%d: scan ran too long, got %q\", n, s.Text())\n+\t\t}\n+\t\tif wordCount != len(words) {\n+\t\t\tt.Errorf(\"#%d: termination expected at %d; got %d\", n, len(words), wordCount)\n+\t\t}\n+\t\terr := s.Err()\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: %v\", n, err)\n+\t\t}\n+\t}\n+}\n+\n+// slowReader is a reader that returns only a few bytes at a time, to test the incremental\n+// reads in Scanner.Scan.\n+type slowReader struct {\n+\tmax int\n+\tbuf *bytes.Buffer\n+}\n+\n+func (sr *slowReader) Read(p []byte) (n int, err error) {\n+\tif len(p) > sr.max {\n+\t\tp = p[0:sr.max]\n+\t}\n+\treturn sr.buf.Read(p)\n+}\n+\n+// genLine writes to buf a predictable but non-trivial line of text of length\n+// n, including the terminal newline and an occasional carriage return.\n+// If addNewline is false, the \\r and \\n are not emitted.\n+func genLine(buf *bytes.Buffer, lineNum, n int, addNewline bool) {\n+\tbuf.Reset()\n+\tdoCR := lineNum%5 == 0\n+\tif doCR {\n+\t\tn--\n+\t}\n+\tfor i := 0; i < n-1; i++ { // Stop early for \\n.\n+\t\tc := 'a' + byte(lineNum+i)\n+\t\tif c == '\\n' || c == '\\r' { // Don't confuse us.\n+\t\t\tc = 'N'\n+\t\t}\n+\t\tbuf.WriteByte(c)\n+\t}\n+\tif addNewline {\n+\t\tif doCR {\n+\t\t\tbuf.WriteByte('\\r')\n+\t\t}\n+\t\tbuf.WriteByte('\\n')\n+\t}\n+\treturn\n+}\n+\n+// Test the line splitter, including some carriage returns but no long lines.\n+func TestScanLongLines(t *testing.T) {\n+\tconst smallMaxTokenSize = 256 // Much smaller for more efficient testing.\n+\t// Build a buffer of lots of line lengths up to but not exceeding smallMaxTokenSize.\n+\ttmp := new(bytes.Buffer)\n+\tbuf := new(bytes.Buffer)\n+\tlineNum := 0\n+\tj := 0\n+\tfor i := 0; i < 2*smallMaxTokenSize; i++ {\n+\t\tgenLine(tmp, lineNum, j, true)\n+\t\tif j < smallMaxTokenSize {\n+\t\t\tj++\n+\t\t} else {\n+\t\t\tj--\n+\t\t}\n+\t\tbuf.Write(tmp.Bytes())\n+\t\tlineNum++\n+\t}\n+\ts := NewScanner(&slowReader{1, buf})\n+\ts.Split(ScanLines)\n+\ts.MaxTokenSize(smallMaxTokenSize)\n+\tj = 0\n+\tfor lineNum := 0; s.Scan(); lineNum++ {\n+\t\tgenLine(tmp, lineNum, j, false)\n+\t\tif j < smallMaxTokenSize {\n+\t\t\tj++\n+\t\t} else {\n+\t\t\tj--\n+\t\t}\n+\t\tline := tmp.String() // We use the string-valued token here, for variety.\n+\t\tif s.Text() != line {\n+\t\t\tt.Errorf(\"%d: bad line: %d %d\\n%.100q\\n%.100q\\n\", lineNum, len(s.Bytes()), len(line), s.Text(), line)\n+\t\t}\n+\t}\n+\terr := s.Err()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}\n+\n+// Test that the line splitter errors out on a long line.\n+func TestScanLineTooLong(t *testing.T) {\n+\tconst smallMaxTokenSize = 256 // Much smaller for more efficient testing.\n+\t// Build a buffer of lots of line lengths up to but not exceeding smallMaxTokenSize.\n+\ttmp := new(bytes.Buffer)\n+\tbuf := new(bytes.Buffer)\n+\tlineNum := 0\n+\tj := 0\n+\tfor i := 0; i < 2*smallMaxTokenSize; i++ {\n+\t\tgenLine(tmp, lineNum, j, true)\n+\t\tj++\n+\t\tbuf.Write(tmp.Bytes())\n+\t\tlineNum++\n+\t}\n+\ts := NewScanner(&slowReader{3, buf})\n+\ts.Split(ScanLines)\n+\ts.MaxTokenSize(smallMaxTokenSize)\n+\tj = 0\n+\tfor lineNum := 0; s.Scan(); lineNum++ {\n+\t\tgenLine(tmp, lineNum, j, false)\n+\t\tif j < smallMaxTokenSize {\n+\t\t\tj++\n+\t\t} else {\n+\t\t\tj--\n+\t\t}\n+\t\tline := tmp.Bytes()\n+\t\tif !bytes.Equal(s.Bytes(), line) {\n+\t\t\tt.Errorf(\"%d: bad line: %d %d\\n%.100q\\n%.100q\\n\", lineNum, len(s.Bytes()), len(line), s.Bytes(), line)\n+\t\t}\n+\t}\n+\terr := s.Err()\n+\tif err != ErrTooLong {\n+\t\tt.Fatalf(\"expected ErrTooLong; got %s\", err)\n+\t}\n+}\n+\n+// Test that the line splitter handles a final line without a newline.\n+func testNoNewline(text string, lines []string, t *testing.T) {\n+\tbuf := bytes.NewBufferString(text)\n+\ts := NewScanner(&slowReader{7, buf})\n+\ts.Split(ScanLines)\n+\tfor lineNum := 0; s.Scan(); lineNum++ {\n+\t\tline := lines[lineNum]\n+\t\tif s.Text() != line {\n+\t\t\tt.Errorf(\"%d: bad line: %d %d\\n%.100q\\n%.100q\\n\", lineNum, len(s.Bytes()), len(line), s.Bytes(), line)\n+\t\t}\n+\t}\n+\terr := s.Err()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}\n+\n+var noNewlineLines = []string{\n+\t\"abcdefghijklmn\\nopqrstuvwxyz\",\n+}\n+\n+// Test that the line splitter handles a final line without a newline.\n+func TestScanLineNoNewline(t *testing.T) {\n+\tconst text = \"abcdefghijklmn\\nopqrstuvwxyz\"\n+\tlines := []string{\n+\t\t\"abcdefghijklmn\",\n+\t\t\"opqrstuvwxyz\",\n+\t}\n+\ttestNoNewline(text, lines, t)\n+}\n+\n+// Test that the line splitter handles a final line with a carriage return but nonewline.\n+func TestScanLineReturnButNoNewline(t *testing.T) {\n+\tconst text = \"abcdefghijklmn\\nopqrstuvwxyz\\r\"\n+\tlines := []string{\n+\t\t\"abcdefghijklmn\",\n+\t\t\"opqrstuvwxyz\",\n+\t}\n+\ttestNoNewline(text, lines, t)\n+}\n+\n+// Test that the line splitter handles a final empty line.\n+func TestScanLineEmptyFinalLine(t *testing.T) {\n+\tconst text = \"abcdefghijklmn\\nopqrstuvwxyz\\n\\n\"\n+\tlines := []string{\n+\t\t\"abcdefghijklmn\",\n+\t\t\"opqrstuvwxyz\",\n+\t\t\"\",\n+\t}\n+\ttestNoNewline(text, lines, t)\n+}\n+\n+// Test that the line splitter handles a final empty line with a carriage return but no newline.\n+func TestScanLineEmptyFinalLineWithCR(t *testing.T) {\n+\tconst text = \"abcdefghijklmn\\nopqrstuvwxyz\\n\\r\"\n+\tlines := []string{\n+\t\t\"abcdefghijklmn\",\n+\t\t\"opqrstuvwxyz\",\n+\t\t\"\",\n+\t}\n+\ttestNoNewline(text, lines, t)\n+}\n+\n+var testError = errors.New(\"testError\")\n+\n+// Test the correct error is returned when the split function errors out.\n+func TestSplitError(t *testing.T) {\n+\t// Create a split function that delivers a little data, then a predictable error.\n+\tnumSplits := 0\n+\tconst okCount = 7\n+\terrorSplit := func(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\t\tif atEOF {\n+\t\t\tpanic(\"didn't get enough data\")\n+\t\t}\n+\t\tif numSplits >= okCount {\n+\t\t\treturn 0, nil, testError\n+\t\t}\n+\t\tnumSplits++\n+\t\treturn 1, data[0:1], nil\n+\t}\n+\t// Read the data.\n+\tconst text = \"abcdefghijklmnopqrstuvwxyz\"\n+\tbuf := bytes.NewBufferString(text)\n+\ts := NewScanner(&slowReader{1, buf})\n+\ts.Split(errorSplit)\n+\tvar i int\n+\tfor i = 0; s.Scan(); i++ {\n+\t\tif len(s.Bytes()) != 1 || text[i] != s.Bytes()[0] {\n+\t\t\tt.Errorf(\"#%d: expected %q got %q\", i, text[i], s.Bytes()[0])\n+\t\t}\n+\t}\n+\t// Check correct termination location and error.\n+\tif i != okCount {\n+\t\tt.Errorf(\"unexpected termination; expected %d tokens got %d\", okCount, i)\n+\t}\n+\terr := s.Err()\n+\tif err != testError {\n+\t\tt.Fatalf(\"expected %q got %v\", testError, err)\n+\t}\n+}\n+\n+// Test that an EOF is overridden by a user-generated scan error.\n+func TestErrAtEOF(t *testing.T) {\n+\ts := NewScanner(strings.NewReader(\"1 2 33\"))\n+\t// This spitter will fail on last entry, after s.err==EOF.\n+\tsplit := func(data []byte, atEOF bool) (advance int, token []byte, err error) {\n+\t\tadvance, token, err = ScanWords(data, atEOF)\n+\t\tif len(token) > 1 {\n+\t\t\tif s.ErrOrEOF() != io.EOF {\n+\t\t\t\tt.Fatal(\"not testing EOF\")\n+\t\t\t}\n+\t\t\terr = testError\n+\t\t}\n+\t\treturn\n+\t}\n+\ts.Split(split)\n+\tfor s.Scan() {\n+\t}\n+\tif s.Err() != testError {\n+\t\tt.Fatal(\"wrong error:\", s.Err())\n+\t}\n+}\n+\n+// Test for issue 5268.\n+type alwaysError struct{}\n+\n+func (alwaysError) Read(p []byte) (int, error) {\n+\treturn 0, io.ErrUnexpectedEOF\n+}\n+\n+func TestNonEOFWithEmptyRead(t *testing.T) {\n+\tscanner := NewScanner(alwaysError{})\n+\tfor scanner.Scan() {\n+\t\tt.Fatal(\"read should fail\")\n+\t}\n+\terr := scanner.Err()\n+\tif err != io.ErrUnexpectedEOF {\n+\t\tt.Errorf(\"unexpected error: %v\", err)\n+\t}\n+}\n+\n+// Test that Scan finishes if we have endless empty reads.\n+type endlessZeros struct{}\n+\n+func (endlessZeros) Read(p []byte) (int, error) {\n+\treturn 0, nil\n+}\n+\n+func TestBadReader(t *testing.T) {\n+\tscanner := NewScanner(endlessZeros{})\n+\tfor scanner.Scan() {\n+\t\tt.Fatal(\"read should fail\")\n+\t}\n+\terr := scanner.Err()\n+\tif err != io.ErrNoProgress {\n+\t\tt.Errorf(\"unexpected error: %v\", err)\n+\t}\n+}"}, {"sha": "128a1b5f8fc0ff969e80e800328d5330c131185a", "filename": "libgo/go/builtin/builtin.go", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -13,6 +13,12 @@ package builtin\n // bool is the set of boolean values, true and false.\n type bool bool\n \n+// true and false are the two untyped boolean values.\n+const (\n+\ttrue  = 0 == 0 // Untyped bool.\n+\tfalse = 0 != 0 // Untyped bool.\n+)\n+\n // uint8 is the set of all unsigned 8-bit integers.\n // Range: 0 through 255.\n type uint8 uint8\n@@ -85,6 +91,15 @@ type byte byte\n // used, by convention, to distinguish character values from integer values.\n type rune rune\n \n+// iota is a predeclared identifier representing the untyped integer ordinal\n+// number of the current const specification in a (usually parenthesized)\n+// const declaration. It is zero-indexed.\n+const iota = 0 // Untyped int.\n+\n+// nil is a predeclared identifier representing the zero value for a\n+// pointer, channel, func, interface, map, or slice type.\n+var nil Type // Type must be a pointer, channel, func, interface, map, or slice type\n+\n // Type is here for the purposes of documentation only. It is a stand-in\n // for any Go type, but represents the same type for any given function\n // invocation.\n@@ -114,6 +129,8 @@ type ComplexType complex64\n // result of append, often in the variable holding the slice itself:\n //\tslice = append(slice, elem1, elem2)\n //\tslice = append(slice, anotherSlice...)\n+// As a special case, it is legal to append a string to a byte slice, like this:\n+//\tslice = append([]byte(\"hello \"), \"world\"...)\n func append(slice []Type, elems ...Type) []Type\n \n // The copy built-in function copies elements from a source slice into a"}, {"sha": "46ca1d5ad3f6377ed0b3b587792ed216946526df", "filename": "libgo/go/bytes/buffer.go", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbuffer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbuffer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbuffer.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -87,6 +87,13 @@ func (b *Buffer) grow(n int) int {\n \t\tvar buf []byte\n \t\tif b.buf == nil && n <= len(b.bootstrap) {\n \t\t\tbuf = b.bootstrap[0:]\n+\t\t} else if m+n <= cap(b.buf)/2 {\n+\t\t\t// We can slide things down instead of allocating a new\n+\t\t\t// slice. We only need m+n <= cap(b.buf) to slide, but\n+\t\t\t// we instead let capacity get twice as large so we\n+\t\t\t// don't spend all our time copying.\n+\t\t\tcopy(b.buf[:], b.buf[b.off:])\n+\t\t\tbuf = b.buf[:m]\n \t\t} else {\n \t\t\t// not enough space anywhere\n \t\t\tbuf = makeSlice(2*cap(b.buf) + n)\n@@ -112,20 +119,18 @@ func (b *Buffer) Grow(n int) {\n \tb.buf = b.buf[0:m]\n }\n \n-// Write appends the contents of p to the buffer.  The return\n-// value n is the length of p; err is always nil.\n-// If the buffer becomes too large, Write will panic with\n-// ErrTooLarge.\n+// Write appends the contents of p to the buffer, growing the buffer as\n+// needed. The return value n is the length of p; err is always nil. If the\n+// buffer becomes too large, Write will panic with ErrTooLarge.\n func (b *Buffer) Write(p []byte) (n int, err error) {\n \tb.lastRead = opInvalid\n \tm := b.grow(len(p))\n \treturn copy(b.buf[m:], p), nil\n }\n \n-// WriteString appends the contents of s to the buffer.  The return\n-// value n is the length of s; err is always nil.\n-// If the buffer becomes too large, WriteString will panic with\n-// ErrTooLarge.\n+// WriteString appends the contents of s to the buffer, growing the buffer as\n+// needed. The return value n is the length of s; err is always nil. If the\n+// buffer becomes too large, WriteString will panic with ErrTooLarge.\n func (b *Buffer) WriteString(s string) (n int, err error) {\n \tb.lastRead = opInvalid\n \tm := b.grow(len(s))\n@@ -138,12 +143,10 @@ func (b *Buffer) WriteString(s string) (n int, err error) {\n // underlying buffer.\n const MinRead = 512\n \n-// ReadFrom reads data from r until EOF and appends it to the buffer.\n-// The return value n is the number of bytes read.\n-// Any error except io.EOF encountered during the read\n-// is also returned.\n-// If the buffer becomes too large, ReadFrom will panic with\n-// ErrTooLarge.\n+// ReadFrom reads data from r until EOF and appends it to the buffer, growing\n+// the buffer as needed. The return value n is the number of bytes read. Any\n+// error except io.EOF encountered during the read is also returned. If the\n+// buffer becomes too large, ReadFrom will panic with ErrTooLarge.\n func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {\n \tb.lastRead = opInvalid\n \t// If buffer is empty, reset to recover space.\n@@ -188,10 +191,10 @@ func makeSlice(n int) []byte {\n \treturn make([]byte, n)\n }\n \n-// WriteTo writes data to w until the buffer is drained or an error\n-// occurs. The return value n is the number of bytes written; it always\n-// fits into an int, but it is int64 to match the io.WriterTo interface.\n-// Any error encountered during the write is also returned.\n+// WriteTo writes data to w until the buffer is drained or an error occurs.\n+// The return value n is the number of bytes written; it always fits into an\n+// int, but it is int64 to match the io.WriterTo interface. Any error\n+// encountered during the write is also returned.\n func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {\n \tb.lastRead = opInvalid\n \tif b.off < len(b.buf) {\n@@ -216,10 +219,9 @@ func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {\n \treturn\n }\n \n-// WriteByte appends the byte c to the buffer.\n-// The returned error is always nil, but is included\n-// to match bufio.Writer's WriteByte.\n-// If the buffer becomes too large, WriteByte will panic with\n+// WriteByte appends the byte c to the buffer, growing the buffer as needed.\n+// The returned error is always nil, but is included to match bufio.Writer's\n+// WriteByte. If the buffer becomes too large, WriteByte will panic with\n // ErrTooLarge.\n func (b *Buffer) WriteByte(c byte) error {\n \tb.lastRead = opInvalid\n@@ -228,12 +230,10 @@ func (b *Buffer) WriteByte(c byte) error {\n \treturn nil\n }\n \n-// WriteRune appends the UTF-8 encoding of Unicode\n-// code point r to the buffer, returning its length and\n-// an error, which is always nil but is included\n-// to match bufio.Writer's WriteRune.\n-// If the buffer becomes too large, WriteRune will panic with\n-// ErrTooLarge.\n+// WriteRune appends the UTF-8 encoding of Unicode code point r to the\n+// buffer, returning its length and an error, which is always nil but is\n+// included to match bufio.Writer's WriteRune. The buffer is grown as needed;\n+// if it becomes too large, WriteRune will panic with ErrTooLarge.\n func (b *Buffer) WriteRune(r rune) (n int, err error) {\n \tif r < utf8.RuneSelf {\n \t\tb.WriteByte(byte(r))"}, {"sha": "75145b05e92df6619214c142c67644af89988eef", "filename": "libgo/go/bytes/buffer_test.go", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbuffer_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbuffer_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbuffer_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -475,3 +475,53 @@ func TestUnreadByte(t *testing.T) {\n \t\tt.Errorf(\"ReadByte = %q; want %q\", c, 'm')\n \t}\n }\n+\n+// Tests that we occasionally compact. Issue 5154.\n+func TestBufferGrowth(t *testing.T) {\n+\tvar b Buffer\n+\tbuf := make([]byte, 1024)\n+\tb.Write(buf[0:1])\n+\tvar cap0 int\n+\tfor i := 0; i < 5<<10; i++ {\n+\t\tb.Write(buf)\n+\t\tb.Read(buf)\n+\t\tif i == 0 {\n+\t\t\tcap0 = b.Cap()\n+\t\t}\n+\t}\n+\tcap1 := b.Cap()\n+\t// (*Buffer).grow allows for 2x capacity slop before sliding,\n+\t// so set our error threshold at 3x.\n+\tif cap1 > cap0*3 {\n+\t\tt.Errorf(\"buffer cap = %d; too big (grew from %d)\", cap1, cap0)\n+\t}\n+}\n+\n+// From Issue 5154.\n+func BenchmarkBufferNotEmptyWriteRead(b *testing.B) {\n+\tbuf := make([]byte, 1024)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tvar b Buffer\n+\t\tb.Write(buf[0:1])\n+\t\tfor i := 0; i < 5<<10; i++ {\n+\t\t\tb.Write(buf)\n+\t\t\tb.Read(buf)\n+\t\t}\n+\t}\n+}\n+\n+// Check that we don't compact too often. From Issue 5154.\n+func BenchmarkBufferFullSmallReads(b *testing.B) {\n+\tbuf := make([]byte, 1024)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tvar b Buffer\n+\t\tb.Write(buf)\n+\t\tfor b.Len()+20 < b.Cap() {\n+\t\t\tb.Write(buf[:10])\n+\t\t}\n+\t\tfor i := 0; i < 5<<10; i++ {\n+\t\t\tb.Read(buf[:1])\n+\t\t\tb.Write(buf[:1])\n+\t\t}\n+\t}\n+}"}, {"sha": "e42f7443946134cbc01acc2ae9d9baef712fac47", "filename": "libgo/go/bytes/bytes.go", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -37,10 +37,6 @@ func Compare(a, b []byte) int {\n \treturn 0\n }\n \n-// Equal returns a boolean reporting whether a == b.\n-// A nil argument is equivalent to an empty slice.\n-func Equal(a, b []byte) bool\n-\n func equalPortable(a, b []byte) bool {\n \tif len(a) != len(b) {\n \t\treturn false\n@@ -465,10 +461,10 @@ func isSeparator(r rune) bool {\n \treturn unicode.IsSpace(r)\n }\n \n-// BUG(r): The rule Title uses for word boundaries does not handle Unicode punctuation properly.\n-\n // Title returns a copy of s with all Unicode letters that begin words\n // mapped to their title case.\n+//\n+// BUG: The rule Title uses for word boundaries does not handle Unicode punctuation properly.\n func Title(s []byte) []byte {\n \t// Use a closure here to remember state.\n \t// Hackish but effective. Depends on Map scanning in order and calling\n@@ -515,6 +511,24 @@ func TrimFunc(s []byte, f func(r rune) bool) []byte {\n \treturn TrimRightFunc(TrimLeftFunc(s, f), f)\n }\n \n+// TrimPrefix returns s without the provided leading prefix string.\n+// If s doesn't start with prefix, s is returned unchanged.\n+func TrimPrefix(s, prefix []byte) []byte {\n+\tif HasPrefix(s, prefix) {\n+\t\treturn s[len(prefix):]\n+\t}\n+\treturn s\n+}\n+\n+// TrimSuffix returns s without the provided trailing suffix string.\n+// If s doesn't end with suffix, s is returned unchanged.\n+func TrimSuffix(s, suffix []byte) []byte {\n+\tif HasSuffix(s, suffix) {\n+\t\treturn s[:len(s)-len(suffix)]\n+\t}\n+\treturn s\n+}\n+\n // IndexFunc interprets s as a sequence of UTF-8-encoded Unicode code points.\n // It returns the byte index in s of the first Unicode\n // code point satisfying f(c), or -1 if none do.\n@@ -553,7 +567,10 @@ func indexFunc(s []byte, f func(r rune) bool, truth bool) int {\n // inverted.\n func lastIndexFunc(s []byte, f func(r rune) bool, truth bool) int {\n \tfor i := len(s); i > 0; {\n-\t\tr, size := utf8.DecodeLastRune(s[0:i])\n+\t\tr, size := rune(s[i-1]), 1\n+\t\tif r >= utf8.RuneSelf {\n+\t\t\tr, size = utf8.DecodeLastRune(s[0:i])\n+\t\t}\n \t\ti -= size\n \t\tif f(r) == truth {\n \t\t\treturn i"}, {"sha": "fbf92827527d81e5855479b82ec1ba3938447ab4", "filename": "libgo/go/bytes/bytes_decl.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes_decl.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -4,5 +4,13 @@\n \n package bytes\n \n+//go:noescape\n+\n // IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s.\n func IndexByte(s []byte, c byte) int // asm_$GOARCH.s\n+\n+//go:noescape\n+\n+// Equal returns a boolean reporting whether a == b.\n+// A nil argument is equivalent to an empty slice.\n+func Equal(a, b []byte) bool // asm_arm.s or ../runtime/asm_{386,amd64}.s"}, {"sha": "d296224ac4212b72a29a555423f1867be25b120d", "filename": "libgo/go/bytes/bytes_test.go", "status": "modified", "additions": 101, "deletions": 4, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -61,6 +61,10 @@ var compareTests = []struct {\n \t{[]byte(\"ab\"), []byte(\"x\"), -1},\n \t{[]byte(\"x\"), []byte(\"a\"), 1},\n \t{[]byte(\"b\"), []byte(\"x\"), -1},\n+\t// test runtime\u00b7memeq's chunked implementation\n+\t{[]byte(\"abcdefgh\"), []byte(\"abcdefgh\"), 0},\n+\t{[]byte(\"abcdefghi\"), []byte(\"abcdefghi\"), 0},\n+\t{[]byte(\"abcdefghi\"), []byte(\"abcdefghj\"), -1},\n \t// nil tests\n \t{nil, nil, 0},\n \t{[]byte(\"\"), nil, 0},\n@@ -86,6 +90,58 @@ func TestCompare(t *testing.T) {\n \t}\n }\n \n+func TestEqual(t *testing.T) {\n+\tvar size = 128\n+\tif testing.Short() {\n+\t\tsize = 32\n+\t}\n+\ta := make([]byte, size)\n+\tb := make([]byte, size)\n+\tb_init := make([]byte, size)\n+\t// randomish but deterministic data\n+\tfor i := 0; i < size; i++ {\n+\t\ta[i] = byte(17 * i)\n+\t\tb_init[i] = byte(23*i + 100)\n+\t}\n+\n+\tfor len := 0; len <= size; len++ {\n+\t\tfor x := 0; x <= size-len; x++ {\n+\t\t\tfor y := 0; y <= size-len; y++ {\n+\t\t\t\tcopy(b, b_init)\n+\t\t\t\tcopy(b[y:y+len], a[x:x+len])\n+\t\t\t\tif !Equal(a[x:x+len], b[y:y+len]) || !Equal(b[y:y+len], a[x:x+len]) {\n+\t\t\t\t\tt.Errorf(\"Equal(%d, %d, %d) = false\", len, x, y)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+// make sure Equal returns false for minimally different strings.  The data\n+// is all zeros except for a single one in one location.\n+func TestNotEqual(t *testing.T) {\n+\tvar size = 128\n+\tif testing.Short() {\n+\t\tsize = 32\n+\t}\n+\ta := make([]byte, size)\n+\tb := make([]byte, size)\n+\n+\tfor len := 0; len <= size; len++ {\n+\t\tfor x := 0; x <= size-len; x++ {\n+\t\t\tfor y := 0; y <= size-len; y++ {\n+\t\t\t\tfor diffpos := x; diffpos < x+len; diffpos++ {\n+\t\t\t\t\ta[diffpos] = 1\n+\t\t\t\t\tif Equal(a[x:x+len], b[y:y+len]) || Equal(b[y:y+len], a[x:x+len]) {\n+\t\t\t\t\t\tt.Errorf(\"NotEqual(%d, %d, %d, %d) = true\", len, x, y, diffpos)\n+\t\t\t\t\t}\n+\t\t\t\t\ta[diffpos] = 0\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n var indexTests = []BinOpTest{\n \t{\"\", \"\", 0},\n \t{\"\", \"a\", -1},\n@@ -303,10 +359,30 @@ func bmIndexByte(b *testing.B, index func([]byte, byte) int, n int) {\n \tbuf[n-1] = '\\x00'\n }\n \n+func BenchmarkEqual0(b *testing.B) {\n+\tvar buf [4]byte\n+\tbuf1 := buf[0:0]\n+\tbuf2 := buf[1:1]\n+\tfor i := 0; i < b.N; i++ {\n+\t\teq := Equal(buf1, buf2)\n+\t\tif !eq {\n+\t\t\tb.Fatal(\"bad equal\")\n+\t\t}\n+\t}\n+}\n+\n+func BenchmarkEqual1(b *testing.B)           { bmEqual(b, Equal, 1) }\n+func BenchmarkEqual6(b *testing.B)           { bmEqual(b, Equal, 6) }\n+func BenchmarkEqual9(b *testing.B)           { bmEqual(b, Equal, 9) }\n+func BenchmarkEqual15(b *testing.B)          { bmEqual(b, Equal, 15) }\n+func BenchmarkEqual16(b *testing.B)          { bmEqual(b, Equal, 16) }\n+func BenchmarkEqual20(b *testing.B)          { bmEqual(b, Equal, 20) }\n func BenchmarkEqual32(b *testing.B)          { bmEqual(b, Equal, 32) }\n func BenchmarkEqual4K(b *testing.B)          { bmEqual(b, Equal, 4<<10) }\n func BenchmarkEqual4M(b *testing.B)          { bmEqual(b, Equal, 4<<20) }\n func BenchmarkEqual64M(b *testing.B)         { bmEqual(b, Equal, 64<<20) }\n+func BenchmarkEqualPort1(b *testing.B)       { bmEqual(b, EqualPortable, 1) }\n+func BenchmarkEqualPort6(b *testing.B)       { bmEqual(b, EqualPortable, 6) }\n func BenchmarkEqualPort32(b *testing.B)      { bmEqual(b, EqualPortable, 32) }\n func BenchmarkEqualPort4K(b *testing.B)      { bmEqual(b, EqualPortable, 4<<10) }\n func BenchmarkEqualPortable4M(b *testing.B)  { bmEqual(b, EqualPortable, 4<<20) }\n@@ -794,8 +870,8 @@ func TestRunes(t *testing.T) {\n }\n \n type TrimTest struct {\n-\tf               string\n-\tin, cutset, out string\n+\tf            string\n+\tin, arg, out string\n }\n \n var trimTests = []TrimTest{\n@@ -820,25 +896,39 @@ var trimTests = []TrimTest{\n \t{\"TrimRight\", \"\", \"123\", \"\"},\n \t{\"TrimRight\", \"\", \"\", \"\"},\n \t{\"TrimRight\", \"\u263a\\xc0\", \"\u263a\", \"\u263a\\xc0\"},\n+\t{\"TrimPrefix\", \"aabb\", \"a\", \"abb\"},\n+\t{\"TrimPrefix\", \"aabb\", \"b\", \"aabb\"},\n+\t{\"TrimSuffix\", \"aabb\", \"a\", \"aabb\"},\n+\t{\"TrimSuffix\", \"aabb\", \"b\", \"aab\"},\n }\n \n func TestTrim(t *testing.T) {\n \tfor _, tc := range trimTests {\n \t\tname := tc.f\n \t\tvar f func([]byte, string) []byte\n+\t\tvar fb func([]byte, []byte) []byte\n \t\tswitch name {\n \t\tcase \"Trim\":\n \t\t\tf = Trim\n \t\tcase \"TrimLeft\":\n \t\t\tf = TrimLeft\n \t\tcase \"TrimRight\":\n \t\t\tf = TrimRight\n+\t\tcase \"TrimPrefix\":\n+\t\t\tfb = TrimPrefix\n+\t\tcase \"TrimSuffix\":\n+\t\t\tfb = TrimSuffix\n \t\tdefault:\n \t\t\tt.Errorf(\"Undefined trim function %s\", name)\n \t\t}\n-\t\tactual := string(f([]byte(tc.in), tc.cutset))\n+\t\tvar actual string\n+\t\tif f != nil {\n+\t\t\tactual = string(f([]byte(tc.in), tc.arg))\n+\t\t} else {\n+\t\t\tactual = string(fb([]byte(tc.in), []byte(tc.arg)))\n+\t\t}\n \t\tif actual != tc.out {\n-\t\t\tt.Errorf(\"%s(%q, %q) = %q; want %q\", name, tc.in, tc.cutset, actual, tc.out)\n+\t\t\tt.Errorf(\"%s(%q, %q) = %q; want %q\", name, tc.in, tc.arg, actual, tc.out)\n \t\t}\n \t}\n }\n@@ -1059,3 +1149,10 @@ func BenchmarkFieldsFunc(b *testing.B) {\n \t\tFieldsFunc(fieldsInput, unicode.IsSpace)\n \t}\n }\n+\n+func BenchmarkTrimSpace(b *testing.B) {\n+\ts := []byte(\"  Some text.  \\n\")\n+\tfor i := 0; i < b.N; i++ {\n+\t\tTrimSpace(s)\n+\t}\n+}"}, {"sha": "1bf19a74b80193c8be4d7952b18981ec0228e153", "filename": "libgo/go/bytes/equal_test.go", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fequal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fequal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fequal_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+//\n+// +build linux\n+\n+package bytes_test\n+\n+import (\n+\t. \"bytes\"\n+\t\"syscall\"\n+\t\"testing\"\n+\t\"unsafe\"\n+)\n+\n+// This file tests the situation where memeq is checking\n+// data very near to a page boundary.  We want to make sure\n+// equal does not read across the boundary and cause a page\n+// fault where it shouldn't.\n+\n+// This test runs only on linux.  The code being tested is\n+// not OS-specific, so it does not need to be tested on all\n+// operating systems.\n+\n+func TestEqualNearPageBoundary(t *testing.T) {\n+\tpagesize := syscall.Getpagesize()\n+\tb := make([]byte, 4*pagesize)\n+\ti := pagesize\n+\tfor ; uintptr(unsafe.Pointer(&b[i]))%uintptr(pagesize) != 0; i++ {\n+\t}\n+\tsyscall.Mprotect(b[i-pagesize:i], 0)\n+\tsyscall.Mprotect(b[i+pagesize:i+2*pagesize], 0)\n+\tdefer syscall.Mprotect(b[i-pagesize:i], syscall.PROT_READ|syscall.PROT_WRITE)\n+\tdefer syscall.Mprotect(b[i+pagesize:i+2*pagesize], syscall.PROT_READ|syscall.PROT_WRITE)\n+\n+\t// both of these should fault\n+\t//pagesize += int(b[i-1])\n+\t//pagesize += int(b[i+pagesize])\n+\n+\tfor j := 0; j < pagesize; j++ {\n+\t\tb[i+j] = 'A'\n+\t}\n+\tfor j := 0; j <= pagesize; j++ {\n+\t\tEqual(b[i:i+j], b[i+pagesize-j:i+pagesize])\n+\t\tEqual(b[i+pagesize-j:i+pagesize], b[i:i+j])\n+\t}\n+}"}, {"sha": "ad2dbc69b77a73362fbd79dfe318c61b0ae0c026", "filename": "libgo/go/bytes/example_test.go", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fexample_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -66,3 +66,20 @@ func ExampleCompare_search() {\n \t\t// Found it!\n \t}\n }\n+\n+func ExampleTrimSuffix() {\n+\tvar b = []byte(\"Hello, goodbye, etc!\")\n+\tb = bytes.TrimSuffix(b, []byte(\"goodbye, etc!\"))\n+\tb = bytes.TrimSuffix(b, []byte(\"gopher\"))\n+\tb = append(b, bytes.TrimSuffix([]byte(\"world!\"), []byte(\"x!\"))...)\n+\tos.Stdout.Write(b)\n+\t// Output: Hello, world!\n+}\n+\n+func ExampleTrimPrefix() {\n+\tvar b = []byte(\"Goodbye,, world!\")\n+\tb = bytes.TrimPrefix(b, []byte(\"Goodbye,\"))\n+\tb = bytes.TrimPrefix(b, []byte(\"See ya,\"))\n+\tfmt.Printf(\"Hello%s\", b)\n+\t// Output: Hello, world!\n+}"}, {"sha": "3b915d5ead80ae1aa7a4e32cb744709f7bd02401", "filename": "libgo/go/bytes/export_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fbytes%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fexport_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -7,3 +7,7 @@ package bytes\n // Export func for testing\n var IndexBytePortable = indexBytePortable\n var EqualPortable = equalPortable\n+\n+func (b *Buffer) Cap() int {\n+\treturn cap(b.buf)\n+}"}, {"sha": "f755019bb50eedc8804303b7773bc9a071c3daa7", "filename": "libgo/go/compress/bzip2/huffman.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fbzip2%2Fhuffman.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fbzip2%2Fhuffman.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fbzip2%2Fhuffman.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -54,8 +54,6 @@ func (t huffmanTree) Decode(br *bitReader) (v uint16) {\n \t\t\tnodeIndex = node.right\n \t\t}\n \t}\n-\n-\tpanic(\"unreachable\")\n }\n \n // newHuffmanTree builds a Huffman tree from a slice containing the code"}, {"sha": "8c4a6d6b36fab8a6526d335d15836c4f17ae00b0", "filename": "libgo/go/compress/flate/deflate_test.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -158,7 +158,6 @@ func (b *syncBuffer) Read(p []byte) (n int, err error) {\n \t\t}\n \t\t<-b.ready\n \t}\n-\tpanic(\"unreachable\")\n }\n \n func (b *syncBuffer) signal() {"}, {"sha": "beca34b4d8ce0eb385aedf52b8cc03a85f727157", "filename": "libgo/go/compress/flate/inflate.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -263,7 +263,6 @@ func (f *decompressor) Read(b []byte) (int, error) {\n \t\t}\n \t\tf.step(f)\n \t}\n-\tpanic(\"unreachable\")\n }\n \n func (f *decompressor) Close() error {\n@@ -495,7 +494,6 @@ func (f *decompressor) huffmanBlock() {\n \t\t\treturn\n \t\t}\n \t}\n-\tpanic(\"unreached\")\n }\n \n // copyHist copies f.copyLen bytes from f.hist (f.copyDist bytes ago) to itself.\n@@ -642,7 +640,6 @@ func (f *decompressor) huffSym(h *huffmanDecoder) (int, error) {\n \t\t\treturn int(chunk >> huffmanValueShift), nil\n \t\t}\n \t}\n-\treturn 0, CorruptInputError(f.roffset)\n }\n \n // Flush any buffered output to the underlying writer."}, {"sha": "4d491768717f8ccd945130ad8ff49618db3d8fa9", "filename": "libgo/go/compress/flate/token.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Ftoken.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fflate%2Ftoken.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Ftoken.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -99,5 +99,4 @@ func offsetCode(off uint32) uint32 {\n \tdefault:\n \t\treturn offsetCodes[off>>14] + 28\n \t}\n-\tpanic(\"unreachable\")\n }"}, {"sha": "1fb9b0964ce33399f768da7435f7db0cfc29eb62", "filename": "libgo/go/compress/gzip/gunzip.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -120,7 +120,6 @@ func (z *Reader) readString() (string, error) {\n \t\t\treturn string(z.buf[0:i]), nil\n \t\t}\n \t}\n-\tpanic(\"not reached\")\n }\n \n func (z *Reader) read2() (uint32, error) {"}, {"sha": "45558b74289409559751a927ecf47eaf8d417eba", "filename": "libgo/go/compress/gzip/gzip.go", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -28,7 +28,7 @@ type Writer struct {\n \tHeader\n \tw          io.Writer\n \tlevel      int\n-\tcompressor io.WriteCloser\n+\tcompressor *flate.Writer\n \tdigest     hash.Hash32\n \tsize       uint32\n \tclosed     bool\n@@ -191,6 +191,28 @@ func (z *Writer) Write(p []byte) (int, error) {\n \treturn n, z.err\n }\n \n+// Flush flushes any pending compressed data to the underlying writer.\n+//\n+// It is useful mainly in compressed network protocols, to ensure that\n+// a remote reader has enough data to reconstruct a packet. Flush does\n+// not return until the data has been written. If the underlying\n+// writer returns an error, Flush returns that error.\n+//\n+// In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.\n+func (z *Writer) Flush() error {\n+\tif z.err != nil {\n+\t\treturn z.err\n+\t}\n+\tif z.closed {\n+\t\treturn nil\n+\t}\n+\tif z.compressor == nil {\n+\t\tz.Write(nil)\n+\t}\n+\tz.err = z.compressor.Flush()\n+\treturn z.err\n+}\n+\n // Close closes the Writer. It does not close the underlying io.Writer.\n func (z *Writer) Close() error {\n \tif z.err != nil {"}, {"sha": "4d1af94381cab54ff234ef9e9d73e740c7179200", "filename": "libgo/go/compress/gzip/gzip_test.go", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -157,3 +157,43 @@ func TestLatin1RoundTrip(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestWriterFlush(t *testing.T) {\n+\tbuf := new(bytes.Buffer)\n+\n+\tw := NewWriter(buf)\n+\tw.Comment = \"comment\"\n+\tw.Extra = []byte(\"extra\")\n+\tw.ModTime = time.Unix(1e8, 0)\n+\tw.Name = \"name\"\n+\n+\tn0 := buf.Len()\n+\tif n0 != 0 {\n+\t\tt.Fatalf(\"buffer size = %d before writes; want 0\", n0)\n+\t}\n+\n+\tif err := w.Flush(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tn1 := buf.Len()\n+\tif n1 == 0 {\n+\t\tt.Fatal(\"no data after first flush\")\n+\t}\n+\n+\tw.Write([]byte(\"x\"))\n+\n+\tn2 := buf.Len()\n+\tif n1 != n2 {\n+\t\tt.Fatalf(\"after writing a single byte, size changed from %d to %d; want no change\", n1, n2)\n+\t}\n+\n+\tif err := w.Flush(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tn3 := buf.Len()\n+\tif n2 == n3 {\n+\t\tt.Fatal(\"Flush didn't flush any data\")\n+\t}\n+}"}, {"sha": "efbc758f94b8d0b80e1c02d64248eea210563c07", "filename": "libgo/go/compress/lzw/reader.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -121,7 +121,6 @@ func (d *decoder) Read(b []byte) (int, error) {\n \t\t}\n \t\td.decode()\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // decode decompresses bytes from r and leaves them in d.toRead.\n@@ -203,7 +202,6 @@ func (d *decoder) decode() {\n \t\t\treturn\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n }\n \n func (d *decoder) flush() {"}, {"sha": "70f654a00792a4956e52ba5a5667971120e86466", "filename": "libgo/go/container/heap/example_test.go", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fcontainer%2Fheap%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fcontainer%2Fheap%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fexample_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,100 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// This example demonstrates a priority queue built using the heap interface.\n-package heap_test\n-\n-import (\n-\t\"container/heap\"\n-\t\"fmt\"\n-)\n-\n-// An Item is something we manage in a priority queue.\n-type Item struct {\n-\tvalue    string // The value of the item; arbitrary.\n-\tpriority int    // The priority of the item in the queue.\n-\t// The index is needed by changePriority and is maintained by the heap.Interface methods.\n-\tindex int // The index of the item in the heap.\n-}\n-\n-// A PriorityQueue implements heap.Interface and holds Items.\n-type PriorityQueue []*Item\n-\n-func (pq PriorityQueue) Len() int { return len(pq) }\n-\n-func (pq PriorityQueue) Less(i, j int) bool {\n-\t// We want Pop to give us the highest, not lowest, priority so we use greater than here.\n-\treturn pq[i].priority > pq[j].priority\n-}\n-\n-func (pq PriorityQueue) Swap(i, j int) {\n-\tpq[i], pq[j] = pq[j], pq[i]\n-\tpq[i].index = i\n-\tpq[j].index = j\n-}\n-\n-func (pq *PriorityQueue) Push(x interface{}) {\n-\t// Push and Pop use pointer receivers because they modify the slice's length,\n-\t// not just its contents.\n-\tn := len(*pq)\n-\titem := x.(*Item)\n-\titem.index = n\n-\t*pq = append(*pq, item)\n-}\n-\n-func (pq *PriorityQueue) Pop() interface{} {\n-\ta := *pq\n-\tn := len(a)\n-\titem := a[n-1]\n-\titem.index = -1 // for safety\n-\t*pq = a[0 : n-1]\n-\treturn item\n-}\n-\n-// update is not used by the example but shows how to take the top item from\n-// the queue, update its priority and value, and put it back.\n-func (pq *PriorityQueue) update(value string, priority int) {\n-\titem := heap.Pop(pq).(*Item)\n-\titem.value = value\n-\titem.priority = priority\n-\theap.Push(pq, item)\n-}\n-\n-// changePriority is not used by the example but shows how to change the\n-// priority of an arbitrary item.\n-func (pq *PriorityQueue) changePriority(item *Item, priority int) {\n-\theap.Remove(pq, item.index)\n-\titem.priority = priority\n-\theap.Push(pq, item)\n-}\n-\n-// This example pushes 10 items into a PriorityQueue and takes them out in\n-// order of priority.\n-func Example() {\n-\tconst nItem = 10\n-\t// Random priorities for the items (a permutation of 0..9, times 11)).\n-\tpriorities := [nItem]int{\n-\t\t77, 22, 44, 55, 11, 88, 33, 99, 00, 66,\n-\t}\n-\tvalues := [nItem]string{\n-\t\t\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n-\t}\n-\t// Create a priority queue and put some items in it.\n-\tpq := make(PriorityQueue, 0, nItem)\n-\tfor i := 0; i < cap(pq); i++ {\n-\t\titem := &Item{\n-\t\t\tvalue:    values[i],\n-\t\t\tpriority: priorities[i],\n-\t\t}\n-\t\theap.Push(&pq, item)\n-\t}\n-\t// Take the items out; should arrive in decreasing priority order.\n-\t// For example, the highest priority (99) is the seventh item, so output starts with 99:\"seven\".\n-\tfor i := 0; i < nItem; i++ {\n-\t\titem := heap.Pop(&pq).(*Item)\n-\t\tfmt.Printf(\"%.2d:%s \", item.priority, item.value)\n-\t}\n-\t// Output:\n-\t// 99:seven 88:five 77:zero 66:nine 55:three 44:two 33:six 22:one 11:four 00:eight\n-}"}, {"sha": "c37e50e3c4058a5f388546292eb8598a04c6abd2", "filename": "libgo/go/container/heap/heap.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -4,13 +4,13 @@\n \n // Package heap provides heap operations for any type that implements\n // heap.Interface. A heap is a tree with the property that each node is the\n-// highest-valued node in its subtree.\n+// minimum-valued node in its subtree.\n //\n // A heap is a common way to implement a priority queue. To build a priority\n // queue, implement the Heap interface with the (negative) priority as the\n // ordering for the Less method, so Push adds items while Pop removes the\n // highest-priority item from the queue. The Examples include such an\n-// implementation; the file example_test.go has the complete source.\n+// implementation; the file example_pq_test.go has the complete source.\n //\n package heap\n \n@@ -90,7 +90,7 @@ func up(h Interface, j int) {\n func down(h Interface, i, n int) {\n \tfor {\n \t\tj1 := 2*i + 1\n-\t\tif j1 >= n {\n+\t\tif j1 >= n || j1 < 0 { // j1 < 0 after int overflow\n \t\t\tbreak\n \t\t}\n \t\tj := j1 // left child"}, {"sha": "274d587d874b303023c9a093983bfedcc4a616a5", "filename": "libgo/go/container/heap/heap_test.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -2,10 +2,9 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package heap_test\n+package heap\n \n import (\n-\t. \"container/heap\"\n \t\"testing\"\n )\n "}, {"sha": "913a5643f22cc7af0cdc69c9b1facbb4940cccfd", "filename": "libgo/go/crypto/cipher/cbc.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcbc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcbc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcbc.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -42,6 +42,12 @@ func NewCBCEncrypter(b Block, iv []byte) BlockMode {\n func (x *cbcEncrypter) BlockSize() int { return x.blockSize }\n \n func (x *cbcEncrypter) CryptBlocks(dst, src []byte) {\n+\tif len(src)%x.blockSize != 0 {\n+\t\tpanic(\"crypto/cipher: input not full blocks\")\n+\t}\n+\tif len(dst) < len(src) {\n+\t\tpanic(\"crypto/cipher: output smaller than input\")\n+\t}\n \tfor len(src) > 0 {\n \t\tfor i := 0; i < x.blockSize; i++ {\n \t\t\tx.iv[i] ^= src[i]\n@@ -70,6 +76,12 @@ func NewCBCDecrypter(b Block, iv []byte) BlockMode {\n func (x *cbcDecrypter) BlockSize() int { return x.blockSize }\n \n func (x *cbcDecrypter) CryptBlocks(dst, src []byte) {\n+\tif len(src)%x.blockSize != 0 {\n+\t\tpanic(\"crypto/cipher: input not full blocks\")\n+\t}\n+\tif len(dst) < len(src) {\n+\t\tpanic(\"crypto/cipher: output smaller than input\")\n+\t}\n \tfor len(src) > 0 {\n \t\tx.b.Decrypt(x.tmp, src[:x.blockSize])\n \t\tfor i := 0; i < x.blockSize; i++ {"}, {"sha": "8da5bce93ff01261e581900c8e9b668a72efe418", "filename": "libgo/go/crypto/cipher/cipher_test.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcipher_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcipher_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fcipher%2Fcipher_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cipher_test\n+\n+import (\n+\t\"crypto/aes\"\n+\t\"crypto/cipher\"\n+\t\"testing\"\n+)\n+\n+func TestCryptBlocks(t *testing.T) {\n+\tbuf := make([]byte, 16)\n+\tblock, _ := aes.NewCipher(buf)\n+\n+\tmode := cipher.NewCBCDecrypter(block, buf)\n+\tmustPanic(t, \"crypto/cipher: input not full blocks\", func() { mode.CryptBlocks(buf, buf[:3]) })\n+\tmustPanic(t, \"crypto/cipher: output smaller than input\", func() { mode.CryptBlocks(buf[:3], buf) })\n+\n+\tmode = cipher.NewCBCEncrypter(block, buf)\n+\tmustPanic(t, \"crypto/cipher: input not full blocks\", func() { mode.CryptBlocks(buf, buf[:3]) })\n+\tmustPanic(t, \"crypto/cipher: output smaller than input\", func() { mode.CryptBlocks(buf[:3], buf) })\n+}\n+\n+func mustPanic(t *testing.T, msg string, f func()) {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"function did not panic, wanted %q\", msg)\n+\t\t} else if err != msg {\n+\t\t\tt.Errorf(\"got panic %v, wanted %q\", err, msg)\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "373f6791be4ab9d52e5240b351aeccafd5139183", "filename": "libgo/go/crypto/cipher/example_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fcipher%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fcipher%2Fexample_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -233,7 +233,7 @@ func ExampleStreamReader() {\n \t}\n \tdefer outFile.Close()\n \n-\treader := &cipher.StreamReader{stream, inFile}\n+\treader := &cipher.StreamReader{S: stream, R: inFile}\n \t// Copy the input file to the output file, decrypting as we go.\n \tif _, err := io.Copy(outFile, reader); err != nil {\n \t\tpanic(err)\n@@ -270,7 +270,7 @@ func ExampleStreamWriter() {\n \t}\n \tdefer outFile.Close()\n \n-\twriter := &cipher.StreamWriter{stream, outFile, nil}\n+\twriter := &cipher.StreamWriter{S: stream, W: outFile}\n \t// Copy the input file to the output file, encrypting as we go.\n \tif _, err := io.Copy(writer, inFile); err != nil {\n \t\tpanic(err)"}, {"sha": "5a2a65744ed301e79bbf83653cf9601b6217966f", "filename": "libgo/go/crypto/dsa/dsa.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -144,8 +144,6 @@ GeneratePrimes:\n \t\tparams.G = g\n \t\treturn\n \t}\n-\n-\tpanic(\"unreachable\")\n }\n \n // GenerateKey generates a public&private key pair. The Parameters of the"}, {"sha": "568416d0dfb23377129b7db9d5081a4cb762e4ae", "filename": "libgo/go/crypto/dsa/dsa_test.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -63,8 +63,9 @@ func testParameterGeneration(t *testing.T, sizes ParameterSizes, L, N int) {\n }\n \n func TestParameterGeneration(t *testing.T) {\n-\t// This test is too slow to run all the time.\n-\treturn\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping parameter generation test in short mode\")\n+\t}\n \n \ttestParameterGeneration(t, L1024N160, 1024, 160)\n \ttestParameterGeneration(t, L2048N224, 2048, 224)"}, {"sha": "2550002293957fdb690f1adeb291de8e1b5e71e3", "filename": "libgo/go/crypto/ecdsa/ecdsa.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -49,7 +49,7 @@ func randFieldElement(c elliptic.Curve, rand io.Reader) (k *big.Int, err error)\n \treturn\n }\n \n-// GenerateKey generates a public&private key pair.\n+// GenerateKey generates a public and private key pair.\n func GenerateKey(c elliptic.Curve, rand io.Reader) (priv *PrivateKey, err error) {\n \tk, err := randFieldElement(c, rand)\n \tif err != nil {"}, {"sha": "275b4aeea396b89c3719a0469d7d4f6049cb7239", "filename": "libgo/go/crypto/md5/gen.go", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fgen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fgen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fgen.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -161,6 +161,11 @@ var data = Data{\n }\n \n var program = `\n+// DO NOT EDIT.\n+// Generate with: go run gen.go{{if .Full}} -full{{end}} | gofmt >md5block.go\n+\n+// +build !amd64\n+\n package md5\n \n import (\n@@ -186,6 +191,16 @@ import (\n \t}\n {{end}}\n \n+const x86 = runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\"\n+\n+var littleEndian bool\n+\n+func init() {\n+\tx := uint32(0x04030201)\n+\ty := [4]byte{0x1, 0x2, 0x3, 0x4}\n+\tlittleEndian = *(*[4]byte)(unsafe.Pointer(&x)) == y\n+}\n+\n func block(dig *digest, p []byte) {\n \ta := dig.s[0]\n \tb := dig.s[1]\n@@ -197,13 +212,13 @@ func block(dig *digest, p []byte) {\n \t\taa, bb, cc, dd := a, b, c, d\n \n \t\t// This is a constant condition - it is not evaluated on each iteration.\n-\t\tif runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\" {\n+\t\tif x86 {\n \t\t\t// MD5 was designed so that x86 processors can just iterate\n \t\t\t// over the block data directly as uint32s, and we generate\n \t\t\t// less code and run 1.3x faster if we take advantage of that.\n \t\t\t// My apologies.\n \t\t\tX = (*[16]uint32)(unsafe.Pointer(&p[0]))\n-\t\t} else if uintptr(unsafe.Pointer(&p[0]))&(unsafe.Alignof(uint32(0))-1) == 0 {\n+\t\t} else if littleEndian && uintptr(unsafe.Pointer(&p[0]))&(unsafe.Alignof(uint32(0))-1) == 0 {\n \t\t\tX = (*[16]uint32)(unsafe.Pointer(&p[0]))\n \t\t} else {\n \t\t\tX = &xbuf"}, {"sha": "3ef4519b9ad4b8d8601d80f24b88def07bf46e0c", "filename": "libgo/go/crypto/md5/md5_test.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -2,10 +2,9 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package md5_test\n+package md5\n \n import (\n-\t\"crypto/md5\"\n \t\"fmt\"\n \t\"io\"\n \t\"testing\"\n@@ -54,7 +53,7 @@ var golden = []md5Test{\n func TestGolden(t *testing.T) {\n \tfor i := 0; i < len(golden); i++ {\n \t\tg := golden[i]\n-\t\tc := md5.New()\n+\t\tc := New()\n \t\tbuf := make([]byte, len(g.in)+4)\n \t\tfor j := 0; j < 3+4; j++ {\n \t\t\tif j < 2 {\n@@ -79,14 +78,14 @@ func TestGolden(t *testing.T) {\n }\n \n func ExampleNew() {\n-\th := md5.New()\n+\th := New()\n \tio.WriteString(h, \"The fog is getting thicker!\")\n \tio.WriteString(h, \"And Leon's getting laaarger!\")\n \tfmt.Printf(\"%x\", h.Sum(nil))\n \t// Output: e2c569be17396eca2a2e3c11578123ed\n }\n \n-var bench = md5.New()\n+var bench = New()\n var buf = make([]byte, 8192+1)\n var sum = make([]byte, bench.Size())\n "}, {"sha": "a376fbee99b9e66d7e4d4caa43a28d81dc4011aa", "filename": "libgo/go/crypto/md5/md5block.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -1,3 +1,8 @@\n+// DO NOT EDIT.\n+// Generate with: go run gen.go -full | gofmt >md5block.go\n+\n+// +build !amd64,!386\n+\n package md5\n \n import ("}, {"sha": "14190c6ff29d159756f22d3155cb6a730abeeb35", "filename": "libgo/go/crypto/md5/md5block_decl.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build amd64 386\n+\n+package md5\n+\n+func block(dig *digest, p []byte)"}, {"sha": "0cd5e0e022f7bbb3095c6828e9a582d8eb130acc", "filename": "libgo/go/crypto/rand/util.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -98,12 +98,13 @@ func Prime(rand io.Reader, bits int) (p *big.Int, err error) {\n \t\t\treturn\n \t\t}\n \t}\n-\n-\treturn\n }\n \n-// Int returns a uniform random value in [0, max).\n+// Int returns a uniform random value in [0, max). It panics if max <= 0.\n func Int(rand io.Reader, max *big.Int) (n *big.Int, err error) {\n+\tif max.Sign() <= 0 {\n+\t\tpanic(\"crypto/rand: argument to Int is <= 0\")\n+\t}\n \tk := (max.BitLen() + 7) / 8\n \n \t// b is the number of bits in the most significant byte of max.\n@@ -130,6 +131,4 @@ func Int(rand io.Reader, max *big.Int) (n *big.Int, err error) {\n \t\t\treturn\n \t\t}\n \t}\n-\n-\treturn\n }"}, {"sha": "3d717c63b0c81cee2e51aa90b404cc6e91446d02", "filename": "libgo/go/crypto/rc4/rc4.go", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -13,7 +13,7 @@ import \"strconv\"\n \n // A Cipher is an instance of RC4 using a particular key.\n type Cipher struct {\n-\ts    [256]byte\n+\ts    [256]uint32\n \ti, j uint8\n }\n \n@@ -32,27 +32,16 @@ func NewCipher(key []byte) (*Cipher, error) {\n \t}\n \tvar c Cipher\n \tfor i := 0; i < 256; i++ {\n-\t\tc.s[i] = uint8(i)\n+\t\tc.s[i] = uint32(i)\n \t}\n \tvar j uint8 = 0\n \tfor i := 0; i < 256; i++ {\n-\t\tj += c.s[i] + key[i%k]\n+\t\tj += uint8(c.s[i]) + key[i%k]\n \t\tc.s[i], c.s[j] = c.s[j], c.s[i]\n \t}\n \treturn &c, nil\n }\n \n-// XORKeyStream sets dst to the result of XORing src with the key stream.\n-// Dst and src may be the same slice but otherwise should not overlap.\n-func (c *Cipher) XORKeyStream(dst, src []byte) {\n-\tfor i := range src {\n-\t\tc.i += 1\n-\t\tc.j += c.s[c.i]\n-\t\tc.s[c.i], c.s[c.j] = c.s[c.j], c.s[c.i]\n-\t\tdst[i] = src[i] ^ c.s[c.s[c.i]+c.s[c.j]]\n-\t}\n-}\n-\n // Reset zeros the key data so that it will no longer appear in the\n // process's memory.\n func (c *Cipher) Reset() {"}, {"sha": "c582a4488b85d98c09e3c5373fe2304659cbce6a", "filename": "libgo/go/crypto/rc4/rc4_asm.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build amd64 arm 386\n+\n+package rc4\n+\n+func xorKeyStream(dst, src *byte, n int, state *[256]uint32, i, j *uint8)\n+\n+// XORKeyStream sets dst to the result of XORing src with the key stream.\n+// Dst and src may be the same slice but otherwise should not overlap.\n+func (c *Cipher) XORKeyStream(dst, src []byte) {\n+\tif len(src) == 0 {\n+\t\treturn\n+\t}\n+\txorKeyStream(&dst[0], &src[0], len(src), &c.s, &c.i, &c.j)\n+}"}, {"sha": "13d52b95dd33c78a340000cda4eacfd7082cd2e6", "filename": "libgo/go/crypto/rc4/rc4_ref.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build !amd64,!arm,!386\n+\n+package rc4\n+\n+// XORKeyStream sets dst to the result of XORing src with the key stream.\n+// Dst and src may be the same slice but otherwise should not overlap.\n+func (c *Cipher) XORKeyStream(dst, src []byte) {\n+\ti, j := c.i, c.j\n+\tfor k, v := range src {\n+\t\ti += 1\n+\t\tj += uint8(c.s[i])\n+\t\tc.s[i], c.s[j] = c.s[j], c.s[i]\n+\t\tdst[k] = v ^ byte(c.s[byte(c.s[i]+c.s[j])])\n+\t}\n+\tc.i, c.j = i, j\n+}"}, {"sha": "7b4df6791d9aa4629e7c14322cec1478fc0d9863", "filename": "libgo/go/crypto/rc4/rc4_test.go", "status": "modified", "additions": 115, "deletions": 12, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -5,6 +5,8 @@\n package rc4\n \n import (\n+\t\"bytes\"\n+\t\"fmt\"\n \t\"testing\"\n )\n \n@@ -37,23 +39,124 @@ var golden = []rc4Test{\n \t\t[]byte{0x57, 0x69, 0x6b, 0x69},\n \t\t[]byte{0x60, 0x44, 0xdb, 0x6d, 0x41, 0xb7},\n \t},\n+\t{\n+\t\t[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+\t\t[]byte{\n+\t\t\t0xde, 0x18, 0x89, 0x41, 0xa3, 0x37, 0x5d, 0x3a,\n+\t\t\t0x8a, 0x06, 0x1e, 0x67, 0x57, 0x6e, 0x92, 0x6d,\n+\t\t\t0xc7, 0x1a, 0x7f, 0xa3, 0xf0, 0xcc, 0xeb, 0x97,\n+\t\t\t0x45, 0x2b, 0x4d, 0x32, 0x27, 0x96, 0x5f, 0x9e,\n+\t\t\t0xa8, 0xcc, 0x75, 0x07, 0x6d, 0x9f, 0xb9, 0xc5,\n+\t\t\t0x41, 0x7a, 0xa5, 0xcb, 0x30, 0xfc, 0x22, 0x19,\n+\t\t\t0x8b, 0x34, 0x98, 0x2d, 0xbb, 0x62, 0x9e, 0xc0,\n+\t\t\t0x4b, 0x4f, 0x8b, 0x05, 0xa0, 0x71, 0x08, 0x50,\n+\t\t\t0x92, 0xa0, 0xc3, 0x58, 0x4a, 0x48, 0xe4, 0xa3,\n+\t\t\t0x0a, 0x39, 0x7b, 0x8a, 0xcd, 0x1d, 0x00, 0x9e,\n+\t\t\t0xc8, 0x7d, 0x68, 0x11, 0xf2, 0x2c, 0xf4, 0x9c,\n+\t\t\t0xa3, 0xe5, 0x93, 0x54, 0xb9, 0x45, 0x15, 0x35,\n+\t\t\t0xa2, 0x18, 0x7a, 0x86, 0x42, 0x6c, 0xca, 0x7d,\n+\t\t\t0x5e, 0x82, 0x3e, 0xba, 0x00, 0x44, 0x12, 0x67,\n+\t\t\t0x12, 0x57, 0xb8, 0xd8, 0x60, 0xae, 0x4c, 0xbd,\n+\t\t\t0x4c, 0x49, 0x06, 0xbb, 0xc5, 0x35, 0xef, 0xe1,\n+\t\t\t0x58, 0x7f, 0x08, 0xdb, 0x33, 0x95, 0x5c, 0xdb,\n+\t\t\t0xcb, 0xad, 0x9b, 0x10, 0xf5, 0x3f, 0xc4, 0xe5,\n+\t\t\t0x2c, 0x59, 0x15, 0x65, 0x51, 0x84, 0x87, 0xfe,\n+\t\t\t0x08, 0x4d, 0x0e, 0x3f, 0x03, 0xde, 0xbc, 0xc9,\n+\t\t\t0xda, 0x1c, 0xe9, 0x0d, 0x08, 0x5c, 0x2d, 0x8a,\n+\t\t\t0x19, 0xd8, 0x37, 0x30, 0x86, 0x16, 0x36, 0x92,\n+\t\t\t0x14, 0x2b, 0xd8, 0xfc, 0x5d, 0x7a, 0x73, 0x49,\n+\t\t\t0x6a, 0x8e, 0x59, 0xee, 0x7e, 0xcf, 0x6b, 0x94,\n+\t\t\t0x06, 0x63, 0xf4, 0xa6, 0xbe, 0xe6, 0x5b, 0xd2,\n+\t\t\t0xc8, 0x5c, 0x46, 0x98, 0x6c, 0x1b, 0xef, 0x34,\n+\t\t\t0x90, 0xd3, 0x7b, 0x38, 0xda, 0x85, 0xd3, 0x2e,\n+\t\t\t0x97, 0x39, 0xcb, 0x23, 0x4a, 0x2b, 0xe7, 0x40,\n+\t\t},\n+\t},\n+}\n+\n+func testEncrypt(t *testing.T, desc string, c *Cipher, src, expect []byte) {\n+\tdst := make([]byte, len(src))\n+\tc.XORKeyStream(dst, src)\n+\tfor i, v := range dst {\n+\t\tif v != expect[i] {\n+\t\t\tt.Fatalf(\"%s: mismatch at byte %d:\\nhave %x\\nwant %x\", desc, i, dst, expect)\n+\t\t}\n+\t}\n }\n \n func TestGolden(t *testing.T) {\n-\tfor i := 0; i < len(golden); i++ {\n-\t\tg := golden[i]\n-\t\tc, err := NewCipher(g.key)\n-\t\tif err != nil {\n-\t\t\tt.Errorf(\"Failed to create cipher at golden index %d\", i)\n-\t\t\treturn\n+\tfor gi, g := range golden {\n+\t\tdata := make([]byte, len(g.keystream))\n+\t\tfor i := range data {\n+\t\t\tdata[i] = byte(i)\n \t\t}\n-\t\tkeystream := make([]byte, len(g.keystream))\n-\t\tc.XORKeyStream(keystream, keystream)\n-\t\tfor j, v := range keystream {\n-\t\t\tif g.keystream[j] != v {\n-\t\t\t\tt.Errorf(\"Failed at golden index %d\", i)\n-\t\t\t\tbreak\n+\n+\t\texpect := make([]byte, len(g.keystream))\n+\t\tfor i := range expect {\n+\t\t\texpect[i] = byte(i) ^ g.keystream[i]\n+\t\t}\n+\n+\t\tfor size := 1; size <= len(g.keystream); size++ {\n+\t\t\tc, err := NewCipher(g.key)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"#%d: NewCipher: %v\", gi, err)\n+\t\t\t}\n+\n+\t\t\toff := 0\n+\t\t\tfor off < len(g.keystream) {\n+\t\t\t\tn := len(g.keystream) - off\n+\t\t\t\tif n > size {\n+\t\t\t\t\tn = size\n+\t\t\t\t}\n+\t\t\t\tdesc := fmt.Sprintf(\"#%d@[%d:%d]\", gi, off, off+n)\n+\t\t\t\ttestEncrypt(t, desc, c, data[off:off+n], expect[off:off+n])\n+\t\t\t\toff += n\n \t\t\t}\n \t\t}\n \t}\n }\n+\n+func TestBlock(t *testing.T) {\n+\tc1a, _ := NewCipher(golden[0].key)\n+\tc1b, _ := NewCipher(golden[1].key)\n+\tdata1 := make([]byte, 1<<20)\n+\tfor i := range data1 {\n+\t\tc1a.XORKeyStream(data1[i:i+1], data1[i:i+1])\n+\t\tc1b.XORKeyStream(data1[i:i+1], data1[i:i+1])\n+\t}\n+\n+\tc2a, _ := NewCipher(golden[0].key)\n+\tc2b, _ := NewCipher(golden[1].key)\n+\tdata2 := make([]byte, 1<<20)\n+\tc2a.XORKeyStream(data2, data2)\n+\tc2b.XORKeyStream(data2, data2)\n+\n+\tif !bytes.Equal(data1, data2) {\n+\t\tt.Fatalf(\"bad block\")\n+\t}\n+}\n+\n+func benchmark(b *testing.B, size int64) {\n+\tbuf := make([]byte, size)\n+\tc, err := NewCipher(golden[0].key)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tb.SetBytes(size)\n+\n+\tfor i := 0; i < b.N; i++ {\n+\t\tc.XORKeyStream(buf, buf)\n+\t}\n+}\n+\n+func BenchmarkRC4_128(b *testing.B) {\n+\tbenchmark(b, 128)\n+}\n+\n+func BenchmarkRC4_1K(b *testing.B) {\n+\tbenchmark(b, 1024)\n+}\n+\n+func BenchmarkRC4_8K(b *testing.B) {\n+\tbenchmark(b, 8096)\n+}"}, {"sha": "f56fb37ee5471ef480a04bbb47fe422ab2b2a03d", "filename": "libgo/go/crypto/rsa/rsa.go", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -150,6 +150,20 @@ func GenerateMultiPrimeKey(random io.Reader, nprimes int, bits int) (priv *Priva\n NextSetOfPrimes:\n \tfor {\n \t\ttodo := bits\n+\t\t// crypto/rand should set the top two bits in each prime.\n+\t\t// Thus each prime has the form\n+\t\t//   p_i = 2^bitlen(p_i) \u00d7 0.11... (in base 2).\n+\t\t// And the product is:\n+\t\t//   P = 2^todo \u00d7 \u03b1\n+\t\t// where \u03b1 is the product of nprimes numbers of the form 0.11...\n+\t\t//\n+\t\t// If \u03b1 < 1/2 (which can happen for nprimes > 2), we need to\n+\t\t// shift todo to compensate for lost bits: the mean value of 0.11...\n+\t\t// is 7/8, so todo + shift - nprimes * log2(7/8) ~= bits - 1/2\n+\t\t// will give good results.\n+\t\tif nprimes >= 7 {\n+\t\t\ttodo += (nprimes - 2) / 5\n+\t\t}\n \t\tfor i := 0; i < nprimes; i++ {\n \t\t\tprimes[i], err = rand.Prime(random, todo/(nprimes-i))\n \t\t\tif err != nil {\n@@ -176,8 +190,9 @@ NextSetOfPrimes:\n \t\t\ttotient.Mul(totient, pminus1)\n \t\t}\n \t\tif n.BitLen() != bits {\n-\t\t\t// This should never happen because crypto/rand should\n-\t\t\t// set the top two bits in each prime.\n+\t\t\t// This should never happen for nprimes == 2 because\n+\t\t\t// crypto/rand should set the top two bits in each prime.\n+\t\t\t// For nprimes > 2 we hope it does not happen often.\n \t\t\tcontinue NextSetOfPrimes\n \t\t}\n \n@@ -188,7 +203,9 @@ NextSetOfPrimes:\n \t\tg.GCD(priv.D, y, e, totient)\n \n \t\tif g.Cmp(bigOne) == 0 {\n-\t\t\tpriv.D.Add(priv.D, totient)\n+\t\t\tif priv.D.Sign() < 0 {\n+\t\t\t\tpriv.D.Add(priv.D, totient)\n+\t\t\t}\n \t\t\tpriv.Primes = primes\n \t\t\tpriv.N = n\n "}, {"sha": "ffd96e62f64b72ad5cf74d67ae43e117a6c725a1", "filename": "libgo/go/crypto/rsa/rsa_test.go", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -28,11 +28,11 @@ func TestKeyGeneration(t *testing.T) {\n }\n \n func Test3PrimeKeyGeneration(t *testing.T) {\n+\tsize := 768\n \tif testing.Short() {\n-\t\treturn\n+\t\tsize = 256\n \t}\n \n-\tsize := 768\n \tpriv, err := GenerateMultiPrimeKey(rand.Reader, 3, size)\n \tif err != nil {\n \t\tt.Errorf(\"failed to generate key\")\n@@ -41,18 +41,36 @@ func Test3PrimeKeyGeneration(t *testing.T) {\n }\n \n func Test4PrimeKeyGeneration(t *testing.T) {\n+\tsize := 768\n \tif testing.Short() {\n-\t\treturn\n+\t\tsize = 256\n \t}\n \n-\tsize := 768\n \tpriv, err := GenerateMultiPrimeKey(rand.Reader, 4, size)\n \tif err != nil {\n \t\tt.Errorf(\"failed to generate key\")\n \t}\n \ttestKeyBasics(t, priv)\n }\n \n+func TestNPrimeKeyGeneration(t *testing.T) {\n+\tprimeSize := 64\n+\tmaxN := 24\n+\tif testing.Short() {\n+\t\tprimeSize = 16\n+\t\tmaxN = 16\n+\t}\n+\t// Test that generation of N-prime keys works for N > 4.\n+\tfor n := 5; n < maxN; n++ {\n+\t\tpriv, err := GenerateMultiPrimeKey(rand.Reader, n, 64+n*primeSize)\n+\t\tif err == nil {\n+\t\t\ttestKeyBasics(t, priv)\n+\t\t} else {\n+\t\t\tt.Errorf(\"failed to generate %d-prime key\", n)\n+\t\t}\n+\t}\n+}\n+\n func TestGnuTLSKey(t *testing.T) {\n \t// This is a key generated by `certtool --generate-privkey --bits 128`.\n \t// It's such that de \u2262 1 mod \u03c6(n), but is congruent mod the order of\n@@ -75,6 +93,9 @@ func testKeyBasics(t *testing.T, priv *PrivateKey) {\n \tif err := priv.Validate(); err != nil {\n \t\tt.Errorf(\"Validate() failed: %s\", err)\n \t}\n+\tif priv.D.Cmp(priv.N) > 0 {\n+\t\tt.Errorf(\"private exponent too large\")\n+\t}\n \n \tpub := &priv.PublicKey\n \tm := big.NewInt(42)"}, {"sha": "57cd4313eb27dd44502ddfea6e0341b9a1e12380", "filename": "libgo/go/crypto/sha1/sha1_test.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -4,10 +4,9 @@\n \n // SHA1 hash algorithm.  See RFC 3174.\n \n-package sha1_test\n+package sha1\n \n import (\n-\t\"crypto/sha1\"\n \t\"fmt\"\n \t\"io\"\n \t\"testing\"\n@@ -55,7 +54,7 @@ var golden = []sha1Test{\n func TestGolden(t *testing.T) {\n \tfor i := 0; i < len(golden); i++ {\n \t\tg := golden[i]\n-\t\tc := sha1.New()\n+\t\tc := New()\n \t\tfor j := 0; j < 3; j++ {\n \t\t\tif j < 2 {\n \t\t\t\tio.WriteString(c, g.in)\n@@ -74,13 +73,13 @@ func TestGolden(t *testing.T) {\n }\n \n func ExampleNew() {\n-\th := sha1.New()\n+\th := New()\n \tio.WriteString(h, \"His money is twice tainted: 'taint yours and 'taint mine.\")\n \tfmt.Printf(\"% x\", h.Sum(nil))\n \t// Output: 59 7f 6a 54 00 10 f9 4c 15 d7 18 06 a9 9a 2c 87 10 e7 47 bd\n }\n \n-var bench = sha1.New()\n+var bench = New()\n var buf = make([]byte, 8192)\n \n func benchmarkSize(b *testing.B, size int) {"}, {"sha": "92224fc0ef8fa17421afb784f4fbe2e40d394496", "filename": "libgo/go/crypto/sha1/sha1block.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build !amd64,!386\n+\n // SHA1 block step.\n // In its own file so that a faster assembly or C version\n // can be substituted easily."}, {"sha": "3512a58299140546b63c179a61b9037ad3322d2b", "filename": "libgo/go/crypto/sha1/sha1block_decl.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build amd64 386\n+\n+package sha1\n+\n+func block(dig *digest, p []byte)"}, {"sha": "f86c90de74d4769f6a9cee2872b579d1048ea9de", "filename": "libgo/go/crypto/tls/common.go", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -204,7 +204,24 @@ type Config struct {\n \t// connections using that key are compromised.\n \tSessionTicketKey [32]byte\n \n-\tserverInitOnce sync.Once\n+\tserverInitOnce sync.Once // guards calling (*Config).serverInit\n+}\n+\n+func (c *Config) serverInit() {\n+\tif c.SessionTicketsDisabled {\n+\t\treturn\n+\t}\n+\n+\t// If the key has already been set then we have nothing to do.\n+\tfor _, b := range c.SessionTicketKey {\n+\t\tif b != 0 {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\tif _, err := io.ReadFull(c.rand(), c.SessionTicketKey[:]); err != nil {\n+\t\tc.SessionTicketsDisabled = true\n+\t}\n }\n \n func (c *Config) rand() io.Reader {"}, {"sha": "215644d24358bde6a6468a18d2609e0c87248dfa", "filename": "libgo/go/crypto/tls/generate_cert.go", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -16,36 +16,80 @@ import (\n \t\"crypto/x509/pkix\"\n \t\"encoding/pem\"\n \t\"flag\"\n+\t\"fmt\"\n \t\"log\"\n \t\"math/big\"\n+\t\"net\"\n \t\"os\"\n+\t\"strings\"\n \t\"time\"\n )\n \n-var hostName *string = flag.String(\"host\", \"127.0.0.1\", \"Hostname to generate a certificate for\")\n+var (\n+\thost      = flag.String(\"host\", \"\", \"Comma-separated hostnames and IPs to generate a certificate for\")\n+\tvalidFrom = flag.String(\"start-date\", \"\", \"Creation date formatted as Jan 1 15:04:05 2011\")\n+\tvalidFor  = flag.Duration(\"duration\", 365*24*time.Hour, \"Duration that certificate is valid for\")\n+\tisCA      = flag.Bool(\"ca\", false, \"whether this cert should be its own Certificate Authority\")\n+\trsaBits   = flag.Int(\"rsa-bits\", 1024, \"Size of RSA key to generate\")\n+)\n \n func main() {\n \tflag.Parse()\n \n-\tpriv, err := rsa.GenerateKey(rand.Reader, 1024)\n+\tif len(*host) == 0 {\n+\t\tlog.Fatalf(\"Missing required --host parameter\")\n+\t}\n+\n+\tpriv, err := rsa.GenerateKey(rand.Reader, *rsaBits)\n \tif err != nil {\n \t\tlog.Fatalf(\"failed to generate private key: %s\", err)\n \t\treturn\n \t}\n \n-\tnow := time.Now()\n+\tvar notBefore time.Time\n+\tif len(*validFrom) == 0 {\n+\t\tnotBefore = time.Now()\n+\t} else {\n+\t\tnotBefore, err = time.Parse(\"Jan 2 15:04:05 2006\", *validFrom)\n+\t\tif err != nil {\n+\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse creation date: %s\\n\", err)\n+\t\t\tos.Exit(1)\n+\t\t}\n+\t}\n+\n+\tnotAfter := notBefore.Add(*validFor)\n+\n+\t// end of ASN.1 time\n+\tendOfTime := time.Date(2049, 12, 31, 23, 59, 59, 0, time.UTC)\n+\tif notAfter.After(endOfTime) {\n+\t\tnotAfter = endOfTime\n+\t}\n \n \ttemplate := x509.Certificate{\n \t\tSerialNumber: new(big.Int).SetInt64(0),\n \t\tSubject: pkix.Name{\n-\t\t\tCommonName:   *hostName,\n \t\t\tOrganization: []string{\"Acme Co\"},\n \t\t},\n-\t\tNotBefore: now.Add(-5 * time.Minute).UTC(),\n-\t\tNotAfter:  now.AddDate(1, 0, 0).UTC(), // valid for 1 year.\n+\t\tNotBefore: notBefore,\n+\t\tNotAfter:  notAfter,\n+\n+\t\tKeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\n+\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\n+\t\tBasicConstraintsValid: true,\n+\t}\n+\n+\thosts := strings.Split(*host, \",\")\n+\tfor _, h := range hosts {\n+\t\tif ip := net.ParseIP(h); ip != nil {\n+\t\t\ttemplate.IPAddresses = append(template.IPAddresses, ip)\n+\t\t} else {\n+\t\t\ttemplate.DNSNames = append(template.DNSNames, h)\n+\t\t}\n+\t}\n \n-\t\tSubjectKeyId: []byte{1, 2, 3, 4},\n-\t\tKeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\n+\tif *isCA {\n+\t\ttemplate.IsCA = true\n+\t\ttemplate.KeyUsage |= x509.KeyUsageCertSign\n \t}\n \n \tderBytes, err := x509.CreateCertificate(rand.Reader, &template, &template, &priv.PublicKey, priv)"}, {"sha": "823730c605c00eff5c96dffaf380834d208dc837", "filename": "libgo/go/crypto/tls/handshake_server.go", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -33,22 +33,7 @@ func (c *Conn) serverHandshake() error {\n \n \t// If this is the first server handshake, we generate a random key to\n \t// encrypt the tickets with.\n-\tconfig.serverInitOnce.Do(func() {\n-\t\tif config.SessionTicketsDisabled {\n-\t\t\treturn\n-\t\t}\n-\n-\t\t// If the key has already been set then we have nothing to do.\n-\t\tfor _, b := range config.SessionTicketKey {\n-\t\t\tif b != 0 {\n-\t\t\t\treturn\n-\t\t\t}\n-\t\t}\n-\n-\t\tif _, err := io.ReadFull(config.rand(), config.SessionTicketKey[:]); err != nil {\n-\t\t\tconfig.SessionTicketsDisabled = true\n-\t\t}\n-\t})\n+\tconfig.serverInitOnce.Do(config.serverInit)\n \n \ths := serverHandshakeState{\n \t\tc: c,"}, {"sha": "8e1585e15cc840571c634e9f14c0b300d9cf50a9", "filename": "libgo/go/crypto/x509/pkcs8.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs8.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs8.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs8.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -51,6 +51,4 @@ func ParsePKCS8PrivateKey(der []byte) (key interface{}, err error) {\n \tdefault:\n \t\treturn nil, fmt.Errorf(\"crypto/x509: PKCS#8 wrapping contained private key with unknown algorithm: %v\", privKey.Algo.Algorithm)\n \t}\n-\n-\tpanic(\"unreachable\")\n }"}, {"sha": "b29ddbc80f0377cc434ea29c0f08c5cc68910041", "filename": "libgo/go/crypto/x509/verify.go", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -5,6 +5,7 @@\n package x509\n \n import (\n+\t\"net\"\n \t\"runtime\"\n \t\"strings\"\n \t\"time\"\n@@ -63,14 +64,28 @@ type HostnameError struct {\n }\n \n func (h HostnameError) Error() string {\n-\tvar valid string\n \tc := h.Certificate\n-\tif len(c.DNSNames) > 0 {\n-\t\tvalid = strings.Join(c.DNSNames, \", \")\n+\n+\tvar valid string\n+\tif ip := net.ParseIP(h.Host); ip != nil {\n+\t\t// Trying to validate an IP\n+\t\tif len(c.IPAddresses) == 0 {\n+\t\t\treturn \"x509: cannot validate certificate for \" + h.Host + \" because it doesn't contain any IP SANs\"\n+\t\t}\n+\t\tfor _, san := range c.IPAddresses {\n+\t\t\tif len(valid) > 0 {\n+\t\t\t\tvalid += \", \"\n+\t\t\t}\n+\t\t\tvalid += san.String()\n+\t\t}\n \t} else {\n-\t\tvalid = c.Subject.CommonName\n+\t\tif len(c.DNSNames) > 0 {\n+\t\t\tvalid = strings.Join(c.DNSNames, \", \")\n+\t\t} else {\n+\t\t\tvalid = c.Subject.CommonName\n+\t\t}\n \t}\n-\treturn \"certificate is valid for \" + valid + \", not \" + h.Host\n+\treturn \"x509: certificate is valid for \" + valid + \", not \" + h.Host\n }\n \n // UnknownAuthorityError results when the certificate issuer is unknown\n@@ -334,6 +349,22 @@ func toLowerCaseASCII(in string) string {\n // VerifyHostname returns nil if c is a valid certificate for the named host.\n // Otherwise it returns an error describing the mismatch.\n func (c *Certificate) VerifyHostname(h string) error {\n+\t// IP addresses may be written in [ ].\n+\tcandidateIP := h\n+\tif len(h) >= 3 && h[0] == '[' && h[len(h)-1] == ']' {\n+\t\tcandidateIP = h[1 : len(h)-1]\n+\t}\n+\tif ip := net.ParseIP(candidateIP); ip != nil {\n+\t\t// We only match IP addresses against IP SANs.\n+\t\t// https://tools.ietf.org/html/rfc6125#appendix-B.2\n+\t\tfor _, candidate := range c.IPAddresses {\n+\t\t\tif ip.Equal(candidate) {\n+\t\t\t\treturn nil\n+\t\t\t}\n+\t\t}\n+\t\treturn HostnameError{c, candidateIP}\n+\t}\n+\n \tlowered := toLowerCaseASCII(h)\n \n \tif len(c.DNSNames) > 0 {\n@@ -389,6 +420,14 @@ func checkChainForKeyUsage(chain []*Certificate, keyUsages []ExtKeyUsage) bool {\n \t\t\tfor _, usage := range cert.ExtKeyUsage {\n \t\t\t\tif requestedUsage == usage {\n \t\t\t\t\tcontinue NextRequestedUsage\n+\t\t\t\t} else if requestedUsage == ExtKeyUsageServerAuth &&\n+\t\t\t\t\t(usage == ExtKeyUsageNetscapeServerGatedCrypto ||\n+\t\t\t\t\t\tusage == ExtKeyUsageMicrosoftServerGatedCrypto) {\n+\t\t\t\t\t// In order to support COMODO\n+\t\t\t\t\t// certificate chains, we have to\n+\t\t\t\t\t// accept Netscape or Microsoft SGC\n+\t\t\t\t\t// usages as equal to ServerAuth.\n+\t\t\t\t\tcontinue NextRequestedUsage\n \t\t\t\t}\n \t\t\t}\n "}, {"sha": "5103ed814aadd1fb394ee8bbac6151e6e49df497", "filename": "libgo/go/crypto/x509/verify_test.go", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -158,6 +158,19 @@ var verifyTests = []verifyTest{\n \t\t\t{\"Ryan Hurst\", \"GlobalSign PersonalSign 2 CA - G2\"},\n \t\t},\n \t},\n+\t{\n+\t\tleaf:          megaLeaf,\n+\t\tintermediates: []string{comodoIntermediate1},\n+\t\troots:         []string{comodoRoot},\n+\t\tcurrentTime:   1360431182,\n+\n+\t\t// CryptoAPI can find alternative validation paths so we don't\n+\t\t// perform this test with system validation.\n+\t\tsystemSkip: true,\n+\t\texpectedChains: [][]string{\n+\t\t\t{\"mega.co.nz\", \"EssentialSSL CA\", \"COMODO Certification Authority\"},\n+\t\t},\n+\t},\n }\n \n func expectHostnameError(t *testing.T, i int, err error) (ok bool) {\n@@ -563,3 +576,90 @@ YEvTWbWwGdPytDFPYIl3/6OqNSXSnZ7DxPcdLJq2uyiga8PB/TTIIHYkdM2+1DE0\n 7y3rH/7TjwDVD7SLu5/SdOfKskuMPTjOEvz3K161mymW06klVhubCIWOro/Gx1Q2\n 2FQOZ7/2k4uYoOdBTSlb8kTAuzZNgIE0rB2BIYCTz/P6zZIKW0ogbRSH\n -----END CERTIFICATE-----`\n+\n+var megaLeaf = `-----BEGIN CERTIFICATE-----\n+MIIFOjCCBCKgAwIBAgIQWYE8Dup170kZ+k11Lg51OjANBgkqhkiG9w0BAQUFADBy\n+MQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYD\n+VQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01PRE8gQ0EgTGltaXRlZDEYMBYGA1UE\n+AxMPRXNzZW50aWFsU1NMIENBMB4XDTEyMTIxNDAwMDAwMFoXDTE0MTIxNDIzNTk1\n+OVowfzEhMB8GA1UECxMYRG9tYWluIENvbnRyb2wgVmFsaWRhdGVkMS4wLAYDVQQL\n+EyVIb3N0ZWQgYnkgSW5zdHJhIENvcnBvcmF0aW9uIFB0eS4gTFREMRUwEwYDVQQL\n+EwxFc3NlbnRpYWxTU0wxEzARBgNVBAMTCm1lZ2EuY28ubnowggEiMA0GCSqGSIb3\n+DQEBAQUAA4IBDwAwggEKAoIBAQDcxMCClae8BQIaJHBUIVttlLvhbK4XhXPk3RQ3\n+G5XA6tLZMBQ33l3F9knYJ0YErXtr8IdfYoulRQFmKFMJl9GtWyg4cGQi2Rcr5VN5\n+S5dA1vu4oyJBxE9fPELcK6Yz1vqaf+n6za+mYTiQYKggVdS8/s8hmNuXP9Zk1pIn\n++q0pGsf8NAcSHMJgLqPQrTDw+zae4V03DvcYfNKjuno88d2226ld7MAmQZ7uRNsI\n+/CnkdelVs+akZsXf0szefSqMJlf08SY32t2jj4Ra7RApVYxOftD9nij/aLfuqOU6\n+ow6IgIcIG2ZvXLZwK87c5fxL7UAsTTV+M1sVv8jA33V2oKLhAgMBAAGjggG9MIIB\n+uTAfBgNVHSMEGDAWgBTay+qtWwhdzP/8JlTOSeVVxjj0+DAdBgNVHQ4EFgQUmP9l\n+6zhyrZ06Qj4zogt+6LKFk4AwDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQCMAAw\n+NAYDVR0lBC0wKwYIKwYBBQUHAwEGCCsGAQUFBwMCBgorBgEEAYI3CgMDBglghkgB\n+hvhCBAEwTwYDVR0gBEgwRjA6BgsrBgEEAbIxAQICBzArMCkGCCsGAQUFBwIBFh1o\n+dHRwczovL3NlY3VyZS5jb21vZG8uY29tL0NQUzAIBgZngQwBAgEwOwYDVR0fBDQw\n+MjAwoC6gLIYqaHR0cDovL2NybC5jb21vZG9jYS5jb20vRXNzZW50aWFsU1NMQ0Eu\n+Y3JsMG4GCCsGAQUFBwEBBGIwYDA4BggrBgEFBQcwAoYsaHR0cDovL2NydC5jb21v\n+ZG9jYS5jb20vRXNzZW50aWFsU1NMQ0FfMi5jcnQwJAYIKwYBBQUHMAGGGGh0dHA6\n+Ly9vY3NwLmNvbW9kb2NhLmNvbTAlBgNVHREEHjAcggptZWdhLmNvLm56gg53d3cu\n+bWVnYS5jby5uejANBgkqhkiG9w0BAQUFAAOCAQEAcYhrsPSvDuwihMOh0ZmRpbOE\n+Gw6LqKgLNTmaYUPQhzi2cyIjhUhNvugXQQlP5f0lp5j8cixmArafg1dTn4kQGgD3\n+ivtuhBTgKO1VYB/VRoAt6Lmswg3YqyiS7JiLDZxjoV7KoS5xdiaINfHDUaBBY4ZH\n+j2BUlPniNBjCqXe/HndUTVUewlxbVps9FyCmH+C4o9DWzdGBzDpCkcmo5nM+cp7q\n+ZhTIFTvZfo3zGuBoyu8BzuopCJcFRm3cRiXkpI7iOMUIixO1szkJS6WpL1sKdT73\n+UXp08U0LBqoqG130FbzEJBBV3ixbvY6BWMHoCWuaoF12KJnC5kHt2RoWAAgMXA==\n+-----END CERTIFICATE-----`\n+\n+var comodoIntermediate1 = `-----BEGIN CERTIFICATE-----\n+MIIFAzCCA+ugAwIBAgIQGLLLuqME8aAPwfLzJkYqSjANBgkqhkiG9w0BAQUFADCB\n+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV\n+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw\n+MDBaFw0xOTEyMzEyMzU5NTlaMHIxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVh\n+dGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9E\n+TyBDQSBMaW1pdGVkMRgwFgYDVQQDEw9Fc3NlbnRpYWxTU0wgQ0EwggEiMA0GCSqG\n+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCt8AiwcsargxIxF3CJhakgEtSYau2A1NHf\n+5I5ZLdOWIY120j8YC0YZYwvHIPPlC92AGvFaoL0dds23Izp0XmEbdaqb1IX04XiR\n+0y3hr/yYLgbSeT1awB8hLRyuIVPGOqchfr7tZ291HRqfalsGs2rjsQuqag7nbWzD\n+ypWMN84hHzWQfdvaGlyoiBSyD8gSIF/F03/o4Tjg27z5H6Gq1huQByH6RSRQXScq\n+oChBRVt9vKCiL6qbfltTxfEFFld+Edc7tNkBdtzffRDPUanlOPJ7FAB1WfnwWdsX\n+Pvev5gItpHnBXaIcw5rIp6gLSApqLn8tl2X2xQScRMiZln5+pN0vAgMBAAGjggGD\n+MIIBfzAfBgNVHSMEGDAWgBQLWOWLxkwVN6RAqTCpIb5HNlpW/zAdBgNVHQ4EFgQU\n+2svqrVsIXcz//CZUzknlVcY49PgwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQI\n+MAYBAf8CAQAwIAYDVR0lBBkwFwYKKwYBBAGCNwoDAwYJYIZIAYb4QgQBMD4GA1Ud\n+IAQ3MDUwMwYEVR0gADArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21v\n+ZG8uY29tL0NQUzBJBgNVHR8EQjBAMD6gPKA6hjhodHRwOi8vY3JsLmNvbW9kb2Nh\n+LmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDBsBggrBgEFBQcB\n+AQRgMF4wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQuY29tb2RvY2EuY29tL0NvbW9k\n+b1VUTlNHQ0NBLmNydDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuY29tb2RvY2Eu\n+Y29tMA0GCSqGSIb3DQEBBQUAA4IBAQAtlzR6QDLqcJcvgTtLeRJ3rvuq1xqo2l/z\n+odueTZbLN3qo6u6bldudu+Ennv1F7Q5Slqz0J790qpL0pcRDAB8OtXj5isWMcL2a\n+ejGjKdBZa0wztSz4iw+SY1dWrCRnilsvKcKxudokxeRiDn55w/65g+onO7wdQ7Vu\n+F6r7yJiIatnyfKH2cboZT7g440LX8NqxwCPf3dfxp+0Jj1agq8MLy6SSgIGSH6lv\n++Wwz3D5XxqfyH8wqfOQsTEZf6/Nh9yvENZ+NWPU6g0QO2JOsTGvMd/QDzczc4BxL\n+XSXaPV7Od4rhPsbXlM1wSTz/Dr0ISKvlUhQVnQ6cGodWaK2cCQBk\n+-----END CERTIFICATE-----`\n+\n+var comodoRoot = `-----BEGIN CERTIFICATE-----\n+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB\n+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV\n+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw\n+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl\n+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P\n+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0\n+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3\n+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI\n+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8\n+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp\n++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+\n+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O\n+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW\n+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g\n+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u\n+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY\n+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv\n+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/\n+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4\n+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd\n+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB\n+ZQ==\n+-----END CERTIFICATE-----`"}, {"sha": "4dfea2c9499312d1b408eed75ef77bcdc5d36d92", "filename": "libgo/go/crypto/x509/x509.go", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -19,6 +19,8 @@ import (\n \t\"errors\"\n \t\"io\"\n \t\"math/big\"\n+\t\"net\"\n+\t\"strconv\"\n \t\"time\"\n )\n \n@@ -360,16 +362,18 @@ const (\n // id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }\n // id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }\n var (\n-\toidExtKeyUsageAny             = asn1.ObjectIdentifier{2, 5, 29, 37, 0}\n-\toidExtKeyUsageServerAuth      = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 1}\n-\toidExtKeyUsageClientAuth      = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 2}\n-\toidExtKeyUsageCodeSigning     = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 3}\n-\toidExtKeyUsageEmailProtection = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 4}\n-\toidExtKeyUsageIPSECEndSystem  = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 5}\n-\toidExtKeyUsageIPSECTunnel     = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 6}\n-\toidExtKeyUsageIPSECUser       = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 7}\n-\toidExtKeyUsageTimeStamping    = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 8}\n-\toidExtKeyUsageOCSPSigning     = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 9}\n+\toidExtKeyUsageAny                        = asn1.ObjectIdentifier{2, 5, 29, 37, 0}\n+\toidExtKeyUsageServerAuth                 = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 1}\n+\toidExtKeyUsageClientAuth                 = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 2}\n+\toidExtKeyUsageCodeSigning                = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 3}\n+\toidExtKeyUsageEmailProtection            = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 4}\n+\toidExtKeyUsageIPSECEndSystem             = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 5}\n+\toidExtKeyUsageIPSECTunnel                = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 6}\n+\toidExtKeyUsageIPSECUser                  = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 7}\n+\toidExtKeyUsageTimeStamping               = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 8}\n+\toidExtKeyUsageOCSPSigning                = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 9}\n+\toidExtKeyUsageMicrosoftServerGatedCrypto = asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 311, 10, 3, 3}\n+\toidExtKeyUsageNetscapeServerGatedCrypto  = asn1.ObjectIdentifier{2, 16, 840, 1, 113730, 4, 1}\n )\n \n // ExtKeyUsage represents an extended set of actions that are valid for a given key.\n@@ -387,6 +391,8 @@ const (\n \tExtKeyUsageIPSECUser\n \tExtKeyUsageTimeStamping\n \tExtKeyUsageOCSPSigning\n+\tExtKeyUsageMicrosoftServerGatedCrypto\n+\tExtKeyUsageNetscapeServerGatedCrypto\n )\n \n // extKeyUsageOIDs contains the mapping between an ExtKeyUsage and its OID.\n@@ -404,6 +410,8 @@ var extKeyUsageOIDs = []struct {\n \t{ExtKeyUsageIPSECUser, oidExtKeyUsageIPSECUser},\n \t{ExtKeyUsageTimeStamping, oidExtKeyUsageTimeStamping},\n \t{ExtKeyUsageOCSPSigning, oidExtKeyUsageOCSPSigning},\n+\t{ExtKeyUsageMicrosoftServerGatedCrypto, oidExtKeyUsageMicrosoftServerGatedCrypto},\n+\t{ExtKeyUsageNetscapeServerGatedCrypto, oidExtKeyUsageNetscapeServerGatedCrypto},\n }\n \n func extKeyUsageFromOID(oid asn1.ObjectIdentifier) (eku ExtKeyUsage, ok bool) {\n@@ -458,6 +466,7 @@ type Certificate struct {\n \t// Subject Alternate Name values\n \tDNSNames       []string\n \tEmailAddresses []string\n+\tIPAddresses    []net.IP\n \n \t// Name constraints\n \tPermittedDNSDomainsCritical bool // if true then the name constraints are marked critical.\n@@ -660,6 +669,13 @@ func parsePublicKey(algo PublicKeyAlgorithm, keyData *publicKeyInfo) (interface{\n \t\t\treturn nil, err\n \t\t}\n \n+\t\tif p.N.Sign() <= 0 {\n+\t\t\treturn nil, errors.New(\"x509: RSA modulus is not a positive number\")\n+\t\t}\n+\t\tif p.E <= 0 {\n+\t\t\treturn nil, errors.New(\"x509: RSA public exponent is not a positive number\")\n+\t\t}\n+\n \t\tpub := &rsa.PublicKey{\n \t\t\tE: p.E,\n \t\t\tN: p.N,\n@@ -713,7 +729,6 @@ func parsePublicKey(algo PublicKeyAlgorithm, keyData *publicKeyInfo) (interface{\n \tdefault:\n \t\treturn nil, nil\n \t}\n-\tpanic(\"unreachable\")\n }\n \n func parseCertificate(in *certificate) (*Certificate, error) {\n@@ -828,6 +843,13 @@ func parseCertificate(in *certificate) (*Certificate, error) {\n \t\t\t\t\tcase 2:\n \t\t\t\t\t\tout.DNSNames = append(out.DNSNames, string(v.Bytes))\n \t\t\t\t\t\tparsedName = true\n+\t\t\t\t\tcase 7:\n+\t\t\t\t\t\tswitch len(v.Bytes) {\n+\t\t\t\t\t\tcase net.IPv4len, net.IPv6len:\n+\t\t\t\t\t\t\tout.IPAddresses = append(out.IPAddresses, v.Bytes)\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\treturn nil, errors.New(\"x509: certificate contained IP address of length \" + strconv.Itoa(len(v.Bytes)))\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n@@ -1072,11 +1094,22 @@ func buildExtensions(template *Certificate) (ret []pkix.Extension, err error) {\n \t\tn++\n \t}\n \n-\tif len(template.DNSNames) > 0 {\n+\tif len(template.DNSNames) > 0 || len(template.EmailAddresses) > 0 || len(template.IPAddresses) > 0 {\n \t\tret[n].Id = oidExtensionSubjectAltName\n-\t\trawValues := make([]asn1.RawValue, len(template.DNSNames))\n-\t\tfor i, name := range template.DNSNames {\n-\t\t\trawValues[i] = asn1.RawValue{Tag: 2, Class: 2, Bytes: []byte(name)}\n+\t\tvar rawValues []asn1.RawValue\n+\t\tfor _, name := range template.DNSNames {\n+\t\t\trawValues = append(rawValues, asn1.RawValue{Tag: 2, Class: 2, Bytes: []byte(name)})\n+\t\t}\n+\t\tfor _, email := range template.EmailAddresses {\n+\t\t\trawValues = append(rawValues, asn1.RawValue{Tag: 1, Class: 2, Bytes: []byte(email)})\n+\t\t}\n+\t\tfor _, rawIP := range template.IPAddresses {\n+\t\t\t// If possible, we always want to encode IPv4 addresses in 4 bytes.\n+\t\t\tip := rawIP.To4()\n+\t\t\tif ip == nil {\n+\t\t\t\tip = rawIP\n+\t\t\t}\n+\t\t\trawValues = append(rawValues, asn1.RawValue{Tag: 7, Class: 2, Bytes: ip})\n \t\t}\n \t\tret[n].Value, err = asn1.Marshal(rawValues)\n \t\tif err != nil {"}, {"sha": "abd4fe84d7eb7efd197a1160d73373d821023089", "filename": "libgo/go/crypto/x509/x509_test.go", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -19,6 +19,7 @@ import (\n \t\"encoding/hex\"\n \t\"encoding/pem\"\n \t\"math/big\"\n+\t\"net\"\n \t\"reflect\"\n \t\"testing\"\n \t\"time\"\n@@ -174,6 +175,49 @@ func TestMatchHostnames(t *testing.T) {\n \t}\n }\n \n+func TestMatchIP(t *testing.T) {\n+\t// Check that pattern matching is working.\n+\tc := &Certificate{\n+\t\tDNSNames: []string{\"*.foo.bar.baz\"},\n+\t\tSubject: pkix.Name{\n+\t\t\tCommonName: \"*.foo.bar.baz\",\n+\t\t},\n+\t}\n+\terr := c.VerifyHostname(\"quux.foo.bar.baz\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"VerifyHostname(quux.foo.bar.baz): %v\", err)\n+\t}\n+\n+\t// But check that if we change it to be matching against an IP address,\n+\t// it is rejected.\n+\tc = &Certificate{\n+\t\tDNSNames: []string{\"*.2.3.4\"},\n+\t\tSubject: pkix.Name{\n+\t\t\tCommonName: \"*.2.3.4\",\n+\t\t},\n+\t}\n+\terr = c.VerifyHostname(\"1.2.3.4\")\n+\tif err == nil {\n+\t\tt.Fatalf(\"VerifyHostname(1.2.3.4) should have failed, did not\")\n+\t}\n+\n+\tc = &Certificate{\n+\t\tIPAddresses: []net.IP{net.ParseIP(\"127.0.0.1\"), net.ParseIP(\"::1\")},\n+\t}\n+\terr = c.VerifyHostname(\"127.0.0.1\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"VerifyHostname(127.0.0.1): %v\", err)\n+\t}\n+\terr = c.VerifyHostname(\"::1\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"VerifyHostname(::1): %v\", err)\n+\t}\n+\terr = c.VerifyHostname(\"[::1]\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"VerifyHostname([::1]): %v\", err)\n+\t}\n+}\n+\n func TestCertificateParse(t *testing.T) {\n \ts, _ := hex.DecodeString(certBytes)\n \tcerts, err := ParseCertificates(s)\n@@ -284,8 +328,11 @@ func TestCreateSelfSignedCertificate(t *testing.T) {\n \t\t\tUnknownExtKeyUsage: testUnknownExtKeyUsage,\n \n \t\t\tBasicConstraintsValid: true,\n-\t\t\tIsCA:     true,\n-\t\t\tDNSNames: []string{\"test.example.com\"},\n+\t\t\tIsCA: true,\n+\n+\t\t\tDNSNames:       []string{\"test.example.com\"},\n+\t\t\tEmailAddresses: []string{\"gopher@golang.org\"},\n+\t\t\tIPAddresses:    []net.IP{net.IPv4(127, 0, 0, 1).To4(), net.ParseIP(\"2001:4860:0:2001::68\")},\n \n \t\t\tPolicyIdentifiers:   []asn1.ObjectIdentifier{[]int{1, 2, 3}},\n \t\t\tPermittedDNSDomains: []string{\".example.com\", \"example.com\"},\n@@ -327,6 +374,18 @@ func TestCreateSelfSignedCertificate(t *testing.T) {\n \t\t\tt.Errorf(\"%s: unknown extkeyusage wasn't correctly copied from the template. Got %v, want %v\", test.name, cert.UnknownExtKeyUsage, testUnknownExtKeyUsage)\n \t\t}\n \n+\t\tif !reflect.DeepEqual(cert.DNSNames, template.DNSNames) {\n+\t\t\tt.Errorf(\"%s: SAN DNS names differ from template. Got %v, want %v\", test.name, cert.DNSNames, template.DNSNames)\n+\t\t}\n+\n+\t\tif !reflect.DeepEqual(cert.EmailAddresses, template.EmailAddresses) {\n+\t\t\tt.Errorf(\"%s: SAN emails differ from template. Got %v, want %v\", test.name, cert.EmailAddresses, template.EmailAddresses)\n+\t\t}\n+\n+\t\tif !reflect.DeepEqual(cert.IPAddresses, template.IPAddresses) {\n+\t\t\tt.Errorf(\"%s: SAN IPs differ from template. Got %v, want %v\", test.name, cert.IPAddresses, template.IPAddresses)\n+\t\t}\n+\n \t\tif test.checkSig {\n \t\t\terr = cert.CheckSignatureFrom(cert)\n \t\t\tif err != nil {"}, {"sha": "c04adde1fc1603dafc35d4cd04696223555b6aa8", "filename": "libgo/go/database/sql/convert.go", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -14,12 +14,18 @@ import (\n \t\"strconv\"\n )\n \n+var errNilPtr = errors.New(\"destination pointer is nil\") // embedded in descriptive error\n+\n // driverArgs converts arguments from callers of Stmt.Exec and\n // Stmt.Query into driver Values.\n //\n-// The statement si may be nil, if no statement is available.\n-func driverArgs(si driver.Stmt, args []interface{}) ([]driver.Value, error) {\n+// The statement ds may be nil, if no statement is available.\n+func driverArgs(ds *driverStmt, args []interface{}) ([]driver.Value, error) {\n \tdargs := make([]driver.Value, len(args))\n+\tvar si driver.Stmt\n+\tif ds != nil {\n+\t\tsi = ds.si\n+\t}\n \tcc, ok := si.(driver.ColumnConverter)\n \n \t// Normal path, for a driver.Stmt that is not a ColumnConverter.\n@@ -58,7 +64,9 @@ func driverArgs(si driver.Stmt, args []interface{}) ([]driver.Value, error) {\n \t\t// column before going across the network to get the\n \t\t// same error.\n \t\tvar err error\n+\t\tds.Lock()\n \t\tdargs[n], err = cc.ColumnConverter(n).ConvertValue(arg)\n+\t\tds.Unlock()\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"sql: converting argument #%d's type: %v\", n, err)\n \t\t}\n@@ -75,34 +83,68 @@ func driverArgs(si driver.Stmt, args []interface{}) ([]driver.Value, error) {\n // An error is returned if the copy would result in loss of information.\n // dest should be a pointer type.\n func convertAssign(dest, src interface{}) error {\n-\t// Common cases, without reflect.  Fall through.\n+\t// Common cases, without reflect.\n \tswitch s := src.(type) {\n \tcase string:\n \t\tswitch d := dest.(type) {\n \t\tcase *string:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n \t\t\t*d = s\n \t\t\treturn nil\n \t\tcase *[]byte:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n \t\t\t*d = []byte(s)\n \t\t\treturn nil\n \t\t}\n \tcase []byte:\n \t\tswitch d := dest.(type) {\n \t\tcase *string:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n \t\t\t*d = string(s)\n \t\t\treturn nil\n \t\tcase *interface{}:\n-\t\t\tbcopy := make([]byte, len(s))\n-\t\t\tcopy(bcopy, s)\n-\t\t\t*d = bcopy\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n+\t\t\t*d = cloneBytes(s)\n \t\t\treturn nil\n \t\tcase *[]byte:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n+\t\t\t*d = cloneBytes(s)\n+\t\t\treturn nil\n+\t\tcase *RawBytes:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n \t\t\t*d = s\n \t\t\treturn nil\n \t\t}\n \tcase nil:\n \t\tswitch d := dest.(type) {\n+\t\tcase *interface{}:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n+\t\t\t*d = nil\n+\t\t\treturn nil\n \t\tcase *[]byte:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n+\t\t\t*d = nil\n+\t\t\treturn nil\n+\t\tcase *RawBytes:\n+\t\t\tif d == nil {\n+\t\t\t\treturn errNilPtr\n+\t\t\t}\n \t\t\t*d = nil\n \t\t\treturn nil\n \t\t}\n@@ -121,6 +163,26 @@ func convertAssign(dest, src interface{}) error {\n \t\t\t*d = fmt.Sprintf(\"%v\", src)\n \t\t\treturn nil\n \t\t}\n+\tcase *[]byte:\n+\t\tsv = reflect.ValueOf(src)\n+\t\tswitch sv.Kind() {\n+\t\tcase reflect.Bool,\n+\t\t\treflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n+\t\t\treflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64,\n+\t\t\treflect.Float32, reflect.Float64:\n+\t\t\t*d = []byte(fmt.Sprintf(\"%v\", src))\n+\t\t\treturn nil\n+\t\t}\n+\tcase *RawBytes:\n+\t\tsv = reflect.ValueOf(src)\n+\t\tswitch sv.Kind() {\n+\t\tcase reflect.Bool,\n+\t\t\treflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n+\t\t\treflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64,\n+\t\t\treflect.Float32, reflect.Float64:\n+\t\t\t*d = RawBytes(fmt.Sprintf(\"%v\", src))\n+\t\t\treturn nil\n+\t\t}\n \tcase *bool:\n \t\tbv, err := driver.Bool.ConvertValue(src)\n \t\tif err == nil {\n@@ -140,6 +202,9 @@ func convertAssign(dest, src interface{}) error {\n \tif dpv.Kind() != reflect.Ptr {\n \t\treturn errors.New(\"destination not a pointer\")\n \t}\n+\tif dpv.IsNil() {\n+\t\treturn errNilPtr\n+\t}\n \n \tif !sv.IsValid() {\n \t\tsv = reflect.ValueOf(src)\n@@ -189,6 +254,16 @@ func convertAssign(dest, src interface{}) error {\n \treturn fmt.Errorf(\"unsupported driver -> Scan pair: %T -> %T\", src, dest)\n }\n \n+func cloneBytes(b []byte) []byte {\n+\tif b == nil {\n+\t\treturn nil\n+\t} else {\n+\t\tc := make([]byte, len(b))\n+\t\tcopy(c, b)\n+\t\treturn c\n+\t}\n+}\n+\n func asString(src interface{}) string {\n \tswitch v := src.(type) {\n \tcase string:"}, {"sha": "950e24fc3a8e65bec86af25b7fcefea0458bda64", "filename": "libgo/go/database/sql/convert_test.go", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fconvert_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -22,6 +22,8 @@ type conversionTest struct {\n \twantint   int64\n \twantuint  uint64\n \twantstr   string\n+\twantbytes []byte\n+\twantraw   RawBytes\n \twantf32   float32\n \twantf64   float64\n \twanttime  time.Time\n@@ -35,6 +37,8 @@ type conversionTest struct {\n // Target variables for scanning into.\n var (\n \tscanstr    string\n+\tscanbytes  []byte\n+\tscanraw    RawBytes\n \tscanint    int\n \tscanint8   int8\n \tscanint16  int16\n@@ -56,6 +60,7 @@ var conversionTests = []conversionTest{\n \t{s: someTime, d: &scantime, wanttime: someTime},\n \n \t// To strings\n+\t{s: \"string\", d: &scanstr, wantstr: \"string\"},\n \t{s: []byte(\"byteslice\"), d: &scanstr, wantstr: \"byteslice\"},\n \t{s: 123, d: &scanstr, wantstr: \"123\"},\n \t{s: int8(123), d: &scanstr, wantstr: \"123\"},\n@@ -66,6 +71,31 @@ var conversionTests = []conversionTest{\n \t{s: uint64(123), d: &scanstr, wantstr: \"123\"},\n \t{s: 1.5, d: &scanstr, wantstr: \"1.5\"},\n \n+\t// To []byte\n+\t{s: nil, d: &scanbytes, wantbytes: nil},\n+\t{s: \"string\", d: &scanbytes, wantbytes: []byte(\"string\")},\n+\t{s: []byte(\"byteslice\"), d: &scanbytes, wantbytes: []byte(\"byteslice\")},\n+\t{s: 123, d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: int8(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: int64(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: uint8(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: uint16(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: uint32(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: uint64(123), d: &scanbytes, wantbytes: []byte(\"123\")},\n+\t{s: 1.5, d: &scanbytes, wantbytes: []byte(\"1.5\")},\n+\n+\t// To RawBytes\n+\t{s: nil, d: &scanraw, wantraw: nil},\n+\t{s: []byte(\"byteslice\"), d: &scanraw, wantraw: RawBytes(\"byteslice\")},\n+\t{s: 123, d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: int8(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: int64(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: uint8(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: uint16(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: uint32(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: uint64(123), d: &scanraw, wantraw: RawBytes(\"123\")},\n+\t{s: 1.5, d: &scanraw, wantraw: RawBytes(\"1.5\")},\n+\n \t// Strings to integers\n \t{s: \"255\", d: &scanuint8, wantuint: 255},\n \t{s: \"256\", d: &scanuint8, wanterr: `converting string \"256\" to a uint8: strconv.ParseUint: parsing \"256\": value out of range`},\n@@ -113,6 +143,7 @@ var conversionTests = []conversionTest{\n \t{s: []byte(\"byteslice\"), d: &scaniface, wantiface: []byte(\"byteslice\")},\n \t{s: true, d: &scaniface, wantiface: true},\n \t{s: nil, d: &scaniface},\n+\t{s: []byte(nil), d: &scaniface, wantiface: []byte(nil)},\n }\n \n func intPtrValue(intptr interface{}) interface{} {\n@@ -191,7 +222,7 @@ func TestConversions(t *testing.T) {\n \t\t\t}\n \t\t\tif srcBytes, ok := ct.s.([]byte); ok {\n \t\t\t\tdstBytes := (*ifptr).([]byte)\n-\t\t\t\tif &dstBytes[0] == &srcBytes[0] {\n+\t\t\t\tif len(srcBytes) > 0 && &dstBytes[0] == &srcBytes[0] {\n \t\t\t\t\terrf(\"copy into interface{} didn't copy []byte data\")\n \t\t\t\t}\n \t\t\t}"}, {"sha": "d7ca94f7809ff6b9e2284d1832fafcddb6ad3336", "filename": "libgo/go/database/sql/driver/driver.go", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -10,8 +10,8 @@ package driver\n \n import \"errors\"\n \n-// A driver Value is a value that drivers must be able to handle.\n-// A Value is either nil or an instance of one of these types:\n+// Value is a value that drivers must be able to handle.\n+// It is either nil or an instance of one of these types:\n //\n //   int64\n //   float64\n@@ -56,7 +56,7 @@ var ErrBadConn = errors.New(\"driver: bad connection\")\n \n // Execer is an optional interface that may be implemented by a Conn.\n //\n-// If a Conn does not implement Execer, the db package's DB.Exec will\n+// If a Conn does not implement Execer, the sql package's DB.Exec will\n // first prepare a query, execute the statement, and then close the\n // statement.\n //\n@@ -65,6 +65,17 @@ type Execer interface {\n \tExec(query string, args []Value) (Result, error)\n }\n \n+// Queryer is an optional interface that may be implemented by a Conn.\n+//\n+// If a Conn does not implement Queryer, the sql package's DB.Query will\n+// first prepare a query, execute the statement, and then close the\n+// statement.\n+//\n+// Query may return ErrSkip.\n+type Queryer interface {\n+\tQuery(query string, args []Value) (Rows, error)\n+}\n+\n // Conn is a connection to a database. It is not used concurrently\n // by multiple goroutines.\n //\n@@ -104,23 +115,8 @@ type Result interface {\n type Stmt interface {\n \t// Close closes the statement.\n \t//\n-\t// Closing a statement should not interrupt any outstanding\n-\t// query created from that statement. That is, the following\n-\t// order of operations is valid:\n-\t//\n-\t//  * create a driver statement\n-\t//  * call Query on statement, returning Rows\n-\t//  * close the statement\n-\t//  * read from Rows\n-\t//\n-\t// If closing a statement invalidates currently-running\n-\t// queries, the final step above will incorrectly fail.\n-\t//\n-\t// TODO(bradfitz): possibly remove the restriction above, if\n-\t// enough driver authors object and find it complicates their\n-\t// code too much. The sql package could be smarter about\n-\t// refcounting the statement and closing it at the appropriate\n-\t// time.\n+\t// As of Go 1.1, a Stmt will not be closed if it's in use\n+\t// by any queries.\n \tClose() error\n \n \t// NumInput returns the number of placeholder parameters."}, {"sha": "d900e2cebe8025e3de4d005cbc5275f6684159b3", "filename": "libgo/go/database/sql/fakedb_test.go", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Ffakedb_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Ffakedb_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Ffakedb_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -13,6 +13,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n+\t\"testing\"\n \t\"time\"\n )\n \n@@ -34,9 +35,10 @@ var _ = log.Printf\n // When opening a fakeDriver's database, it starts empty with no\n // tables.  All tables and data are stored in memory only.\n type fakeDriver struct {\n-\tmu        sync.Mutex\n-\topenCount int\n-\tdbs       map[string]*fakeDB\n+\tmu         sync.Mutex // guards 3 following fields\n+\topenCount  int        // conn opens\n+\tcloseCount int        // conn closes\n+\tdbs        map[string]*fakeDB\n }\n \n type fakeDB struct {\n@@ -229,7 +231,43 @@ func (c *fakeConn) Begin() (driver.Tx, error) {\n \treturn c.currTx, nil\n }\n \n-func (c *fakeConn) Close() error {\n+var hookPostCloseConn struct {\n+\tsync.Mutex\n+\tfn func(*fakeConn, error)\n+}\n+\n+func setHookpostCloseConn(fn func(*fakeConn, error)) {\n+\thookPostCloseConn.Lock()\n+\tdefer hookPostCloseConn.Unlock()\n+\thookPostCloseConn.fn = fn\n+}\n+\n+var testStrictClose *testing.T\n+\n+// setStrictFakeConnClose sets the t to Errorf on when fakeConn.Close\n+// fails to close. If nil, the check is disabled.\n+func setStrictFakeConnClose(t *testing.T) {\n+\ttestStrictClose = t\n+}\n+\n+func (c *fakeConn) Close() (err error) {\n+\tdrv := fdriver.(*fakeDriver)\n+\tdefer func() {\n+\t\tif err != nil && testStrictClose != nil {\n+\t\t\ttestStrictClose.Errorf(\"failed to close a test fakeConn: %v\", err)\n+\t\t}\n+\t\thookPostCloseConn.Lock()\n+\t\tfn := hookPostCloseConn.fn\n+\t\thookPostCloseConn.Unlock()\n+\t\tif fn != nil {\n+\t\t\tfn(c, err)\n+\t\t}\n+\t\tif err == nil {\n+\t\t\tdrv.mu.Lock()\n+\t\t\tdrv.closeCount++\n+\t\t\tdrv.mu.Unlock()\n+\t\t}\n+\t}()\n \tif c.currTx != nil {\n \t\treturn errors.New(\"can't close fakeConn; in a Transaction\")\n \t}\n@@ -266,6 +304,18 @@ func (c *fakeConn) Exec(query string, args []driver.Value) (driver.Result, error\n \treturn nil, driver.ErrSkip\n }\n \n+func (c *fakeConn) Query(query string, args []driver.Value) (driver.Rows, error) {\n+\t// This is an optional interface, but it's implemented here\n+\t// just to check that all the args are of the proper types.\n+\t// ErrSkip is returned so the caller acts as if we didn't\n+\t// implement this at all.\n+\terr := checkSubsetTypes(args)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn nil, driver.ErrSkip\n+}\n+\n func errf(msg string, args ...interface{}) error {\n \treturn errors.New(\"fakedb: \" + fmt.Sprintf(msg, args...))\n }\n@@ -412,6 +462,12 @@ func (s *fakeStmt) ColumnConverter(idx int) driver.ValueConverter {\n }\n \n func (s *fakeStmt) Close() error {\n+\tif s.c == nil {\n+\t\tpanic(\"nil conn in fakeStmt.Close\")\n+\t}\n+\tif s.c.db == nil {\n+\t\tpanic(\"in fakeStmt.Close, conn's db is nil (already closed)\")\n+\t}\n \tif !s.closed {\n \t\ts.c.incrStat(&s.c.stmtsClosed)\n \t\ts.closed = true\n@@ -503,6 +559,15 @@ func (s *fakeStmt) Query(args []driver.Value) (driver.Rows, error) {\n \tif !ok {\n \t\treturn nil, fmt.Errorf(\"fakedb: table %q doesn't exist\", s.table)\n \t}\n+\n+\tif s.table == \"magicquery\" {\n+\t\tif len(s.whereCol) == 2 && s.whereCol[0] == \"op\" && s.whereCol[1] == \"millis\" {\n+\t\t\tif args[0] == \"sleep\" {\n+\t\t\t\ttime.Sleep(time.Duration(args[1].(int64)) * time.Millisecond)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tt.mu.Lock()\n \tdefer t.mu.Unlock()\n "}, {"sha": "a80782bfedc87049f9b03efad253a9602576b031", "filename": "libgo/go/database/sql/sql.go", "status": "modified", "additions": 615, "deletions": 178, "changes": 793, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -4,13 +4,17 @@\n \n // Package sql provides a generic interface around SQL (or SQL-like)\n // databases.\n+//\n+// The sql package must be used in conjunction with a database driver.\n+// See http://golang.org/s/sqldrivers for a list of drivers.\n package sql\n \n import (\n \t\"database/sql/driver\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"runtime\"\n \t\"sync\"\n )\n \n@@ -176,45 +180,245 @@ var ErrNoRows = errors.New(\"sql: no rows in result set\")\n // DB is a database handle. It's safe for concurrent use by multiple\n // goroutines.\n //\n-// If the underlying database driver has the concept of a connection\n-// and per-connection session state, the sql package manages creating\n-// and freeing connections automatically, including maintaining a free\n-// pool of idle connections. If observing session state is required,\n-// either do not share a *DB between multiple concurrent goroutines or\n-// create and observe all state only within a transaction. Once\n-// DB.Open is called, the returned Tx is bound to a single isolated\n-// connection. Once Tx.Commit or Tx.Rollback is called, that\n-// connection is returned to DB's idle connection pool.\n+// The sql package creates and frees connections automatically; it\n+// also maintains a free pool of idle connections. If the database has\n+// a concept of per-connection state, such state can only be reliably\n+// observed within a transaction. Once DB.Begin is called, the\n+// returned Tx is bound to a single connection. Once Commit or\n+// Rollback is called on the transaction, that transaction's\n+// connection is returned to DB's idle connection pool. The pool size\n+// can be controlled with SetMaxIdleConns.\n type DB struct {\n \tdriver driver.Driver\n \tdsn    string\n \n-\tmu       sync.Mutex // protects freeConn and closed\n-\tfreeConn []driver.Conn\n+\tmu       sync.Mutex // protects following fields\n+\tfreeConn []*driverConn\n \tclosed   bool\n+\tdep      map[finalCloser]depSet\n+\tlastPut  map[*driverConn]string // stacktrace of last conn's put; debug only\n+\tmaxIdle  int                    // zero means defaultMaxIdleConns; negative means 0\n+}\n+\n+// driverConn wraps a driver.Conn with a mutex, to\n+// be held during all calls into the Conn. (including any calls onto\n+// interfaces returned via that Conn, such as calls on Tx, Stmt,\n+// Result, Rows)\n+type driverConn struct {\n+\tdb *DB\n+\n+\tsync.Mutex  // guards following\n+\tci          driver.Conn\n+\tclosed      bool\n+\tfinalClosed bool // ci.Close has been called\n+\topenStmt    map[driver.Stmt]bool\n+\n+\t// guarded by db.mu\n+\tinUse      bool\n+\tonPut      []func() // code (with db.mu held) run when conn is next returned\n+\tdbmuClosed bool     // same as closed, but guarded by db.mu, for connIfFree\n+}\n+\n+func (dc *driverConn) removeOpenStmt(si driver.Stmt) {\n+\tdc.Lock()\n+\tdefer dc.Unlock()\n+\tdelete(dc.openStmt, si)\n+}\n+\n+func (dc *driverConn) prepareLocked(query string) (driver.Stmt, error) {\n+\tsi, err := dc.ci.Prepare(query)\n+\tif err == nil {\n+\t\t// Track each driverConn's open statements, so we can close them\n+\t\t// before closing the conn.\n+\t\t//\n+\t\t// TODO(bradfitz): let drivers opt out of caring about\n+\t\t// stmt closes if the conn is about to close anyway? For now\n+\t\t// do the safe thing, in case stmts need to be closed.\n+\t\t//\n+\t\t// TODO(bradfitz): after Go 1.1, closing driver.Stmts\n+\t\t// should be moved to driverStmt, using unique\n+\t\t// *driverStmts everywhere (including from\n+\t\t// *Stmt.connStmt, instead of returning a\n+\t\t// driver.Stmt), using driverStmt as a pointer\n+\t\t// everywhere, and making it a finalCloser.\n+\t\tif dc.openStmt == nil {\n+\t\t\tdc.openStmt = make(map[driver.Stmt]bool)\n+\t\t}\n+\t\tdc.openStmt[si] = true\n+\t}\n+\treturn si, err\n+}\n+\n+// the dc.db's Mutex is held.\n+func (dc *driverConn) closeDBLocked() error {\n+\tdc.Lock()\n+\tif dc.closed {\n+\t\tdc.Unlock()\n+\t\treturn errors.New(\"sql: duplicate driverConn close\")\n+\t}\n+\tdc.closed = true\n+\tdc.Unlock() // not defer; removeDep finalClose calls may need to lock\n+\treturn dc.db.removeDepLocked(dc, dc)()\n+}\n+\n+func (dc *driverConn) Close() error {\n+\tdc.Lock()\n+\tif dc.closed {\n+\t\tdc.Unlock()\n+\t\treturn errors.New(\"sql: duplicate driverConn close\")\n+\t}\n+\tdc.closed = true\n+\tdc.Unlock() // not defer; removeDep finalClose calls may need to lock\n+\n+\t// And now updates that require holding dc.mu.Lock.\n+\tdc.db.mu.Lock()\n+\tdc.dbmuClosed = true\n+\tfn := dc.db.removeDepLocked(dc, dc)\n+\tdc.db.mu.Unlock()\n+\treturn fn()\n+}\n+\n+func (dc *driverConn) finalClose() error {\n+\tdc.Lock()\n+\n+\tfor si := range dc.openStmt {\n+\t\tsi.Close()\n+\t}\n+\tdc.openStmt = nil\n+\n+\terr := dc.ci.Close()\n+\tdc.ci = nil\n+\tdc.finalClosed = true\n+\n+\tdc.Unlock()\n+\treturn err\n+}\n+\n+// driverStmt associates a driver.Stmt with the\n+// *driverConn from which it came, so the driverConn's lock can be\n+// held during calls.\n+type driverStmt struct {\n+\tsync.Locker // the *driverConn\n+\tsi          driver.Stmt\n+}\n+\n+func (ds *driverStmt) Close() error {\n+\tds.Lock()\n+\tdefer ds.Unlock()\n+\treturn ds.si.Close()\n+}\n+\n+// depSet is a finalCloser's outstanding dependencies\n+type depSet map[interface{}]bool // set of true bools\n+\n+// The finalCloser interface is used by (*DB).addDep and related\n+// dependency reference counting.\n+type finalCloser interface {\n+\t// finalClose is called when the reference count of an object\n+\t// goes to zero. (*DB).mu is not held while calling it.\n+\tfinalClose() error\n+}\n+\n+// addDep notes that x now depends on dep, and x's finalClose won't be\n+// called until all of x's dependencies are removed with removeDep.\n+func (db *DB) addDep(x finalCloser, dep interface{}) {\n+\t//println(fmt.Sprintf(\"addDep(%T %p, %T %p)\", x, x, dep, dep))\n+\tdb.mu.Lock()\n+\tdefer db.mu.Unlock()\n+\tdb.addDepLocked(x, dep)\n+}\n+\n+func (db *DB) addDepLocked(x finalCloser, dep interface{}) {\n+\tif db.dep == nil {\n+\t\tdb.dep = make(map[finalCloser]depSet)\n+\t}\n+\txdep := db.dep[x]\n+\tif xdep == nil {\n+\t\txdep = make(depSet)\n+\t\tdb.dep[x] = xdep\n+\t}\n+\txdep[dep] = true\n+}\n+\n+// removeDep notes that x no longer depends on dep.\n+// If x still has dependencies, nil is returned.\n+// If x no longer has any dependencies, its finalClose method will be\n+// called and its error value will be returned.\n+func (db *DB) removeDep(x finalCloser, dep interface{}) error {\n+\tdb.mu.Lock()\n+\tfn := db.removeDepLocked(x, dep)\n+\tdb.mu.Unlock()\n+\treturn fn()\n+}\n+\n+func (db *DB) removeDepLocked(x finalCloser, dep interface{}) func() error {\n+\t//println(fmt.Sprintf(\"removeDep(%T %p, %T %p)\", x, x, dep, dep))\n+\tdone := false\n+\n+\txdep := db.dep[x]\n+\tif xdep != nil {\n+\t\tdelete(xdep, dep)\n+\t\tif len(xdep) == 0 {\n+\t\t\tdelete(db.dep, x)\n+\t\t\tdone = true\n+\t\t}\n+\t}\n+\n+\tif !done {\n+\t\treturn func() error { return nil }\n+\t}\n+\treturn func() error {\n+\t\t//println(fmt.Sprintf(\"calling final close on %T %v (%#v)\", x, x, x))\n+\t\treturn x.finalClose()\n+\t}\n }\n \n // Open opens a database specified by its database driver name and a\n // driver-specific data source name, usually consisting of at least a\n // database name and connection information.\n //\n // Most users will open a database via a driver-specific connection\n-// helper function that returns a *DB.\n+// helper function that returns a *DB. No database drivers are included\n+// in the Go standard library. See http://golang.org/s/sqldrivers for\n+// a list of third-party drivers.\n+//\n+// Open may just validate its arguments without creating a connection\n+// to the database. To verify that the data source name is valid, call\n+// Ping.\n func Open(driverName, dataSourceName string) (*DB, error) {\n-\tdriver, ok := drivers[driverName]\n+\tdriveri, ok := drivers[driverName]\n \tif !ok {\n \t\treturn nil, fmt.Errorf(\"sql: unknown driver %q (forgotten import?)\", driverName)\n \t}\n-\treturn &DB{driver: driver, dsn: dataSourceName}, nil\n+\tdb := &DB{\n+\t\tdriver:  driveri,\n+\t\tdsn:     dataSourceName,\n+\t\tlastPut: make(map[*driverConn]string),\n+\t}\n+\treturn db, nil\n+}\n+\n+// Ping verifies a connection to the database is still alive,\n+// establishing a connection if necessary.\n+func (db *DB) Ping() error {\n+\t// TODO(bradfitz): give drivers an optional hook to implement\n+\t// this in a more efficient or more reliable way, if they\n+\t// have one.\n+\tdc, err := db.conn()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tdb.putConn(dc, nil)\n+\treturn nil\n }\n \n // Close closes the database, releasing any open resources.\n func (db *DB) Close() error {\n \tdb.mu.Lock()\n \tdefer db.mu.Unlock()\n \tvar err error\n-\tfor _, c := range db.freeConn {\n-\t\terr1 := c.Close()\n+\tfor _, dc := range db.freeConn {\n+\t\terr1 := dc.closeDBLocked()\n \t\tif err1 != nil {\n \t\t\terr = err1\n \t\t}\n@@ -224,15 +428,45 @@ func (db *DB) Close() error {\n \treturn err\n }\n \n-func (db *DB) maxIdleConns() int {\n-\tconst defaultMaxIdleConns = 2\n-\t// TODO(bradfitz): ask driver, if supported, for its default preference\n-\t// TODO(bradfitz): let users override?\n-\treturn defaultMaxIdleConns\n+const defaultMaxIdleConns = 2\n+\n+func (db *DB) maxIdleConnsLocked() int {\n+\tn := db.maxIdle\n+\tswitch {\n+\tcase n == 0:\n+\t\t// TODO(bradfitz): ask driver, if supported, for its default preference\n+\t\treturn defaultMaxIdleConns\n+\tcase n < 0:\n+\t\treturn 0\n+\tdefault:\n+\t\treturn n\n+\t}\n+}\n+\n+// SetMaxIdleConns sets the maximum number of connections in the idle\n+// connection pool.\n+//\n+// If n <= 0, no idle connections are retained.\n+func (db *DB) SetMaxIdleConns(n int) {\n+\tdb.mu.Lock()\n+\tdefer db.mu.Unlock()\n+\tif n > 0 {\n+\t\tdb.maxIdle = n\n+\t} else {\n+\t\t// No idle connections.\n+\t\tdb.maxIdle = -1\n+\t}\n+\tfor len(db.freeConn) > 0 && len(db.freeConn) > n {\n+\t\tnfree := len(db.freeConn)\n+\t\tdc := db.freeConn[nfree-1]\n+\t\tdb.freeConn[nfree-1] = nil\n+\t\tdb.freeConn = db.freeConn[:nfree-1]\n+\t\tgo dc.Close()\n+\t}\n }\n \n-// conn returns a newly-opened or cached driver.Conn\n-func (db *DB) conn() (driver.Conn, error) {\n+// conn returns a newly-opened or cached *driverConn\n+func (db *DB) conn() (*driverConn, error) {\n \tdb.mu.Lock()\n \tif db.closed {\n \t\tdb.mu.Unlock()\n@@ -241,53 +475,132 @@ func (db *DB) conn() (driver.Conn, error) {\n \tif n := len(db.freeConn); n > 0 {\n \t\tconn := db.freeConn[n-1]\n \t\tdb.freeConn = db.freeConn[:n-1]\n+\t\tconn.inUse = true\n \t\tdb.mu.Unlock()\n \t\treturn conn, nil\n \t}\n \tdb.mu.Unlock()\n-\treturn db.driver.Open(db.dsn)\n+\n+\tci, err := db.driver.Open(db.dsn)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdc := &driverConn{\n+\t\tdb: db,\n+\t\tci: ci,\n+\t}\n+\tdb.mu.Lock()\n+\tdb.addDepLocked(dc, dc)\n+\tdc.inUse = true\n+\tdb.mu.Unlock()\n+\treturn dc, nil\n }\n \n-func (db *DB) connIfFree(wanted driver.Conn) (conn driver.Conn, ok bool) {\n+var (\n+\terrConnClosed = errors.New(\"database/sql: internal sentinel error: conn is closed\")\n+\terrConnBusy   = errors.New(\"database/sql: internal sentinel error: conn is busy\")\n+)\n+\n+// connIfFree returns (wanted, nil) if wanted is still a valid conn and\n+// isn't in use.\n+//\n+// The error is errConnClosed if the connection if the requested connection\n+// is invalid because it's been closed.\n+//\n+// The error is errConnBusy if the connection is in use.\n+func (db *DB) connIfFree(wanted *driverConn) (*driverConn, error) {\n \tdb.mu.Lock()\n \tdefer db.mu.Unlock()\n+\tif wanted.inUse {\n+\t\treturn nil, errConnBusy\n+\t}\n+\tif wanted.dbmuClosed {\n+\t\treturn nil, errConnClosed\n+\t}\n \tfor i, conn := range db.freeConn {\n \t\tif conn != wanted {\n \t\t\tcontinue\n \t\t}\n \t\tdb.freeConn[i] = db.freeConn[len(db.freeConn)-1]\n \t\tdb.freeConn = db.freeConn[:len(db.freeConn)-1]\n-\t\treturn wanted, true\n-\t}\n-\treturn nil, false\n+\t\twanted.inUse = true\n+\t\treturn wanted, nil\n+\t}\n+\t// TODO(bradfitz): shouldn't get here. After Go 1.1, change this to:\n+\t// panic(\"connIfFree call requested a non-closed, non-busy, non-free conn\")\n+\t// Which passes all the tests, but I'm too paranoid to include this\n+\t// late in Go 1.1.\n+\t// Instead, treat it like a busy connection:\n+\treturn nil, errConnBusy\n }\n \n // putConnHook is a hook for testing.\n-var putConnHook func(*DB, driver.Conn)\n+var putConnHook func(*DB, *driverConn)\n+\n+// noteUnusedDriverStatement notes that si is no longer used and should\n+// be closed whenever possible (when c is next not in use), unless c is\n+// already closed.\n+func (db *DB) noteUnusedDriverStatement(c *driverConn, si driver.Stmt) {\n+\tdb.mu.Lock()\n+\tdefer db.mu.Unlock()\n+\tif c.inUse {\n+\t\tc.onPut = append(c.onPut, func() {\n+\t\t\tsi.Close()\n+\t\t})\n+\t} else {\n+\t\tc.Lock()\n+\t\tdefer c.Unlock()\n+\t\tif !c.finalClosed {\n+\t\t\tsi.Close()\n+\t\t}\n+\t}\n+}\n+\n+// debugGetPut determines whether getConn & putConn calls' stack traces\n+// are returned for more verbose crashes.\n+const debugGetPut = false\n \n // putConn adds a connection to the db's free pool.\n // err is optionally the last error that occurred on this connection.\n-func (db *DB) putConn(c driver.Conn, err error) {\n+func (db *DB) putConn(dc *driverConn, err error) {\n+\tdb.mu.Lock()\n+\tif !dc.inUse {\n+\t\tif debugGetPut {\n+\t\t\tfmt.Printf(\"putConn(%v) DUPLICATE was: %s\\n\\nPREVIOUS was: %s\", dc, stack(), db.lastPut[dc])\n+\t\t}\n+\t\tpanic(\"sql: connection returned that was never out\")\n+\t}\n+\tif debugGetPut {\n+\t\tdb.lastPut[dc] = stack()\n+\t}\n+\tdc.inUse = false\n+\n+\tfor _, fn := range dc.onPut {\n+\t\tfn()\n+\t}\n+\tdc.onPut = nil\n+\n \tif err == driver.ErrBadConn {\n \t\t// Don't reuse bad connections.\n+\t\tdb.mu.Unlock()\n \t\treturn\n \t}\n-\tdb.mu.Lock()\n \tif putConnHook != nil {\n-\t\tputConnHook(db, c)\n+\t\tputConnHook(db, dc)\n \t}\n-\tif n := len(db.freeConn); !db.closed && n < db.maxIdleConns() {\n-\t\tdb.freeConn = append(db.freeConn, c)\n+\tif n := len(db.freeConn); !db.closed && n < db.maxIdleConnsLocked() {\n+\t\tdb.freeConn = append(db.freeConn, dc)\n \t\tdb.mu.Unlock()\n \t\treturn\n \t}\n-\t// TODO: check to see if we need this Conn for any prepared\n-\t// statements which are still active?\n \tdb.mu.Unlock()\n-\tc.Close()\n+\n+\tdc.Close()\n }\n \n-// Prepare creates a prepared statement for later execution.\n+// Prepare creates a prepared statement for later queries or executions.\n+// Multiple queries or executions may be run concurrently from the\n+// returned statement.\n func (db *DB) Prepare(query string) (*Stmt, error) {\n \tvar stmt *Stmt\n \tvar err error\n@@ -300,34 +613,36 @@ func (db *DB) Prepare(query string) (*Stmt, error) {\n \treturn stmt, err\n }\n \n-func (db *DB) prepare(query string) (stmt *Stmt, err error) {\n+func (db *DB) prepare(query string) (*Stmt, error) {\n \t// TODO: check if db.driver supports an optional\n \t// driver.Preparer interface and call that instead, if so,\n \t// otherwise we make a prepared statement that's bound\n \t// to a connection, and to execute this prepared statement\n \t// we either need to use this connection (if it's free), else\n \t// get a new connection + re-prepare + execute on that one.\n-\tci, err := db.conn()\n+\tdc, err := db.conn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer func() {\n-\t\tdb.putConn(ci, err)\n-\t}()\n-\n-\tsi, err := ci.Prepare(query)\n+\tdc.Lock()\n+\tsi, err := dc.prepareLocked(query)\n+\tdc.Unlock()\n \tif err != nil {\n+\t\tdb.putConn(dc, err)\n \t\treturn nil, err\n \t}\n-\tstmt = &Stmt{\n+\tstmt := &Stmt{\n \t\tdb:    db,\n \t\tquery: query,\n-\t\tcss:   []connStmt{{ci, si}},\n+\t\tcss:   []connStmt{{dc, si}},\n \t}\n+\tdb.addDep(stmt, stmt)\n+\tdb.putConn(dc, nil)\n \treturn stmt, nil\n }\n \n // Exec executes a query without returning any rows.\n+// The args are for any placeholder parameters in the query.\n func (db *DB) Exec(query string, args ...interface{}) (Result, error) {\n \tvar res Result\n \tvar err error\n@@ -341,50 +656,119 @@ func (db *DB) Exec(query string, args ...interface{}) (Result, error) {\n }\n \n func (db *DB) exec(query string, args []interface{}) (res Result, err error) {\n-\tci, err := db.conn()\n+\tdc, err := db.conn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \tdefer func() {\n-\t\tdb.putConn(ci, err)\n+\t\tdb.putConn(dc, err)\n \t}()\n \n-\tif execer, ok := ci.(driver.Execer); ok {\n+\tif execer, ok := dc.ci.(driver.Execer); ok {\n \t\tdargs, err := driverArgs(nil, args)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\t\tdc.Lock()\n \t\tresi, err := execer.Exec(query, dargs)\n+\t\tdc.Unlock()\n \t\tif err != driver.ErrSkip {\n \t\t\tif err != nil {\n \t\t\t\treturn nil, err\n \t\t\t}\n-\t\t\treturn result{resi}, nil\n+\t\t\treturn driverResult{dc, resi}, nil\n \t\t}\n \t}\n \n-\tsti, err := ci.Prepare(query)\n+\tdc.Lock()\n+\tsi, err := dc.ci.Prepare(query)\n+\tdc.Unlock()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer sti.Close()\n-\n-\treturn resultFromStatement(sti, args...)\n+\tdefer withLock(dc, func() { si.Close() })\n+\treturn resultFromStatement(driverStmt{dc, si}, args...)\n }\n \n // Query executes a query that returns rows, typically a SELECT.\n // The args are for any placeholder parameters in the query.\n func (db *DB) Query(query string, args ...interface{}) (*Rows, error) {\n-\tstmt, err := db.Prepare(query)\n+\tvar rows *Rows\n+\tvar err error\n+\tfor i := 0; i < 10; i++ {\n+\t\trows, err = db.query(query, args)\n+\t\tif err != driver.ErrBadConn {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn rows, err\n+}\n+\n+func (db *DB) query(query string, args []interface{}) (*Rows, error) {\n+\tci, err := db.conn()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treleaseConn := func(err error) { db.putConn(ci, err) }\n+\n+\treturn db.queryConn(ci, releaseConn, query, args)\n+}\n+\n+// queryConn executes a query on the given connection.\n+// The connection gets released by the releaseConn function.\n+func (db *DB) queryConn(dc *driverConn, releaseConn func(error), query string, args []interface{}) (*Rows, error) {\n+\tif queryer, ok := dc.ci.(driver.Queryer); ok {\n+\t\tdargs, err := driverArgs(nil, args)\n+\t\tif err != nil {\n+\t\t\treleaseConn(err)\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tdc.Lock()\n+\t\trowsi, err := queryer.Query(query, dargs)\n+\t\tdc.Unlock()\n+\t\tif err != driver.ErrSkip {\n+\t\t\tif err != nil {\n+\t\t\t\treleaseConn(err)\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\t// Note: ownership of dc passes to the *Rows, to be freed\n+\t\t\t// with releaseConn.\n+\t\t\trows := &Rows{\n+\t\t\t\tdc:          dc,\n+\t\t\t\treleaseConn: releaseConn,\n+\t\t\t\trowsi:       rowsi,\n+\t\t\t}\n+\t\t\treturn rows, nil\n+\t\t}\n+\t}\n+\n+\tdc.Lock()\n+\tsi, err := dc.ci.Prepare(query)\n+\tdc.Unlock()\n \tif err != nil {\n+\t\treleaseConn(err)\n \t\treturn nil, err\n \t}\n-\trows, err := stmt.Query(args...)\n+\n+\tds := driverStmt{dc, si}\n+\trowsi, err := rowsiFromStatement(ds, args...)\n \tif err != nil {\n-\t\tstmt.Close()\n+\t\treleaseConn(err)\n+\t\tdc.Lock()\n+\t\tsi.Close()\n+\t\tdc.Unlock()\n \t\treturn nil, err\n \t}\n-\trows.closeStmt = stmt\n+\n+\t// Note: ownership of ci passes to the *Rows, to be freed\n+\t// with releaseConn.\n+\trows := &Rows{\n+\t\tdc:          dc,\n+\t\treleaseConn: releaseConn,\n+\t\trowsi:       rowsi,\n+\t\tcloseStmt:   si,\n+\t}\n \treturn rows, nil\n }\n \n@@ -411,18 +795,20 @@ func (db *DB) Begin() (*Tx, error) {\n }\n \n func (db *DB) begin() (tx *Tx, err error) {\n-\tci, err := db.conn()\n+\tdc, err := db.conn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\ttxi, err := ci.Begin()\n+\tdc.Lock()\n+\ttxi, err := dc.ci.Begin()\n+\tdc.Unlock()\n \tif err != nil {\n-\t\tdb.putConn(ci, err)\n+\t\tdb.putConn(dc, err)\n \t\treturn nil, err\n \t}\n \treturn &Tx{\n \t\tdb:  db,\n-\t\tci:  ci,\n+\t\tdc:  dc,\n \t\ttxi: txi,\n \t}, nil\n }\n@@ -441,15 +827,11 @@ func (db *DB) Driver() driver.Driver {\n type Tx struct {\n \tdb *DB\n \n-\t// ci is owned exclusively until Commit or Rollback, at which point\n+\t// dc is owned exclusively until Commit or Rollback, at which point\n \t// it's returned with putConn.\n-\tci  driver.Conn\n+\tdc  *driverConn\n \ttxi driver.Tx\n \n-\t// cimu is held while somebody is using ci (between grabConn\n-\t// and releaseConn)\n-\tcimu sync.Mutex\n-\n \t// done transitions from false to true exactly once, on Commit\n \t// or Rollback. once done, all operations fail with\n \t// ErrTxDone.\n@@ -463,21 +845,16 @@ func (tx *Tx) close() {\n \t\tpanic(\"double close\") // internal error\n \t}\n \ttx.done = true\n-\ttx.db.putConn(tx.ci, nil)\n-\ttx.ci = nil\n+\ttx.db.putConn(tx.dc, nil)\n+\ttx.dc = nil\n \ttx.txi = nil\n }\n \n-func (tx *Tx) grabConn() (driver.Conn, error) {\n+func (tx *Tx) grabConn() (*driverConn, error) {\n \tif tx.done {\n \t\treturn nil, ErrTxDone\n \t}\n-\ttx.cimu.Lock()\n-\treturn tx.ci, nil\n-}\n-\n-func (tx *Tx) releaseConn() {\n-\ttx.cimu.Unlock()\n+\treturn tx.dc, nil\n }\n \n // Commit commits the transaction.\n@@ -486,6 +863,8 @@ func (tx *Tx) Commit() error {\n \t\treturn ErrTxDone\n \t}\n \tdefer tx.close()\n+\ttx.dc.Lock()\n+\tdefer tx.dc.Unlock()\n \treturn tx.txi.Commit()\n }\n \n@@ -495,6 +874,8 @@ func (tx *Tx) Rollback() error {\n \t\treturn ErrTxDone\n \t}\n \tdefer tx.close()\n+\ttx.dc.Lock()\n+\tdefer tx.dc.Unlock()\n \treturn tx.txi.Rollback()\n }\n \n@@ -518,21 +899,25 @@ func (tx *Tx) Prepare(query string) (*Stmt, error) {\n \t// Perhaps just looking at the reference count (by noting\n \t// Stmt.Close) would be enough. We might also want a finalizer\n \t// on Stmt to drop the reference count.\n-\tci, err := tx.grabConn()\n+\tdc, err := tx.grabConn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer tx.releaseConn()\n \n-\tsi, err := ci.Prepare(query)\n+\tdc.Lock()\n+\tsi, err := dc.ci.Prepare(query)\n+\tdc.Unlock()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n \tstmt := &Stmt{\n-\t\tdb:    tx.db,\n-\t\ttx:    tx,\n-\t\ttxsi:  si,\n+\t\tdb: tx.db,\n+\t\ttx: tx,\n+\t\ttxsi: &driverStmt{\n+\t\t\tLocker: dc,\n+\t\t\tsi:     si,\n+\t\t},\n \t\tquery: query,\n \t}\n \treturn stmt, nil\n@@ -556,16 +941,20 @@ func (tx *Tx) Stmt(stmt *Stmt) *Stmt {\n \tif tx.db != stmt.db {\n \t\treturn &Stmt{stickyErr: errors.New(\"sql: Tx.Stmt: statement from different database used\")}\n \t}\n-\tci, err := tx.grabConn()\n+\tdc, err := tx.grabConn()\n \tif err != nil {\n \t\treturn &Stmt{stickyErr: err}\n \t}\n-\tdefer tx.releaseConn()\n-\tsi, err := ci.Prepare(stmt.query)\n+\tdc.Lock()\n+\tsi, err := dc.ci.Prepare(stmt.query)\n+\tdc.Unlock()\n \treturn &Stmt{\n-\t\tdb:        tx.db,\n-\t\ttx:        tx,\n-\t\ttxsi:      si,\n+\t\tdb: tx.db,\n+\t\ttx: tx,\n+\t\ttxsi: &driverStmt{\n+\t\t\tLocker: dc,\n+\t\t\tsi:     si,\n+\t\t},\n \t\tquery:     stmt.query,\n \t\tstickyErr: err,\n \t}\n@@ -574,51 +963,46 @@ func (tx *Tx) Stmt(stmt *Stmt) *Stmt {\n // Exec executes a query that doesn't return rows.\n // For example: an INSERT and UPDATE.\n func (tx *Tx) Exec(query string, args ...interface{}) (Result, error) {\n-\tci, err := tx.grabConn()\n+\tdc, err := tx.grabConn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer tx.releaseConn()\n \n-\tif execer, ok := ci.(driver.Execer); ok {\n+\tif execer, ok := dc.ci.(driver.Execer); ok {\n \t\tdargs, err := driverArgs(nil, args)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\t\tdc.Lock()\n \t\tresi, err := execer.Exec(query, dargs)\n+\t\tdc.Unlock()\n \t\tif err == nil {\n-\t\t\treturn result{resi}, nil\n+\t\t\treturn driverResult{dc, resi}, nil\n \t\t}\n \t\tif err != driver.ErrSkip {\n \t\t\treturn nil, err\n \t\t}\n \t}\n \n-\tsti, err := ci.Prepare(query)\n+\tdc.Lock()\n+\tsi, err := dc.ci.Prepare(query)\n+\tdc.Unlock()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer sti.Close()\n+\tdefer withLock(dc, func() { si.Close() })\n \n-\treturn resultFromStatement(sti, args...)\n+\treturn resultFromStatement(driverStmt{dc, si}, args...)\n }\n \n // Query executes a query that returns rows, typically a SELECT.\n func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error) {\n-\tif tx.done {\n-\t\treturn nil, ErrTxDone\n-\t}\n-\tstmt, err := tx.Prepare(query)\n+\tdc, err := tx.grabConn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\trows, err := stmt.Query(args...)\n-\tif err != nil {\n-\t\tstmt.Close()\n-\t\treturn nil, err\n-\t}\n-\trows.closeStmt = stmt\n-\treturn rows, err\n+\treleaseConn := func(error) {}\n+\treturn tx.db.queryConn(dc, releaseConn, query, args)\n }\n \n // QueryRow executes a query that is expected to return at most one row.\n@@ -631,7 +1015,7 @@ func (tx *Tx) QueryRow(query string, args ...interface{}) *Row {\n \n // connStmt is a prepared statement on a particular connection.\n type connStmt struct {\n-\tci driver.Conn\n+\tdc *driverConn\n \tsi driver.Stmt\n }\n \n@@ -642,9 +1026,11 @@ type Stmt struct {\n \tquery     string // that created the Stmt\n \tstickyErr error  // if non-nil, this error is returned for all operations\n \n+\tclosemu sync.RWMutex // held exclusively during close, for read otherwise.\n+\n \t// If in a transaction, else both nil:\n \ttx   *Tx\n-\ttxsi driver.Stmt\n+\ttxsi *driverStmt\n \n \tmu     sync.Mutex // protects the rest of the fields\n \tclosed bool\n@@ -659,39 +1045,47 @@ type Stmt struct {\n // Exec executes a prepared statement with the given arguments and\n // returns a Result summarizing the effect of the statement.\n func (s *Stmt) Exec(args ...interface{}) (Result, error) {\n-\t_, releaseConn, si, err := s.connStmt()\n+\ts.closemu.RLock()\n+\tdefer s.closemu.RUnlock()\n+\tdc, releaseConn, si, err := s.connStmt()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \tdefer releaseConn(nil)\n \n-\treturn resultFromStatement(si, args...)\n+\treturn resultFromStatement(driverStmt{dc, si}, args...)\n }\n \n-func resultFromStatement(si driver.Stmt, args ...interface{}) (Result, error) {\n+func resultFromStatement(ds driverStmt, args ...interface{}) (Result, error) {\n+\tds.Lock()\n+\twant := ds.si.NumInput()\n+\tds.Unlock()\n+\n \t// -1 means the driver doesn't know how to count the number of\n \t// placeholders, so we won't sanity check input here and instead let the\n \t// driver deal with errors.\n-\tif want := si.NumInput(); want != -1 && len(args) != want {\n+\tif want != -1 && len(args) != want {\n \t\treturn nil, fmt.Errorf(\"sql: expected %d arguments, got %d\", want, len(args))\n \t}\n \n-\tdargs, err := driverArgs(si, args)\n+\tdargs, err := driverArgs(&ds, args)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\tresi, err := si.Exec(dargs)\n+\tds.Lock()\n+\tresi, err := ds.si.Exec(dargs)\n+\tds.Unlock()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\treturn result{resi}, nil\n+\treturn driverResult{ds.Locker, resi}, nil\n }\n \n // connStmt returns a free driver connection on which to execute the\n // statement, a function to call to release the connection, and a\n // statement bound to that connection.\n-func (s *Stmt) connStmt() (ci driver.Conn, releaseConn func(error), si driver.Stmt, err error) {\n+func (s *Stmt) connStmt() (ci *driverConn, releaseConn func(error), si driver.Stmt, err error) {\n \tif err = s.stickyErr; err != nil {\n \t\treturn\n \t}\n@@ -710,84 +1104,117 @@ func (s *Stmt) connStmt() (ci driver.Conn, releaseConn func(error), si driver.St\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\treleaseConn = func(error) { s.tx.releaseConn() }\n-\t\treturn ci, releaseConn, s.txsi, nil\n+\t\treleaseConn = func(error) {}\n+\t\treturn ci, releaseConn, s.txsi.si, nil\n \t}\n \n \tvar cs connStmt\n \tmatch := false\n-\tfor _, v := range s.css {\n-\t\t// TODO(bradfitz): lazily clean up entries in this\n-\t\t// list with dead conns while enumerating\n-\t\tif _, match = s.db.connIfFree(v.ci); match {\n+\tfor i := 0; i < len(s.css); i++ {\n+\t\tv := s.css[i]\n+\t\t_, err := s.db.connIfFree(v.dc)\n+\t\tif err == nil {\n+\t\t\tmatch = true\n \t\t\tcs = v\n \t\t\tbreak\n \t\t}\n+\t\tif err == errConnClosed {\n+\t\t\t// Lazily remove dead conn from our freelist.\n+\t\t\ts.css[i] = s.css[len(s.css)-1]\n+\t\t\ts.css = s.css[:len(s.css)-1]\n+\t\t\ti--\n+\t\t}\n+\n \t}\n \ts.mu.Unlock()\n \n \t// Make a new conn if all are busy.\n \t// TODO(bradfitz): or wait for one? make configurable later?\n \tif !match {\n \t\tfor i := 0; ; i++ {\n-\t\t\tci, err := s.db.conn()\n+\t\t\tdc, err := s.db.conn()\n \t\t\tif err != nil {\n \t\t\t\treturn nil, nil, nil, err\n \t\t\t}\n-\t\t\tsi, err := ci.Prepare(s.query)\n+\t\t\tdc.Lock()\n+\t\t\tsi, err := dc.prepareLocked(s.query)\n+\t\t\tdc.Unlock()\n \t\t\tif err == driver.ErrBadConn && i < 10 {\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\tif err != nil {\n \t\t\t\treturn nil, nil, nil, err\n \t\t\t}\n \t\t\ts.mu.Lock()\n-\t\t\tcs = connStmt{ci, si}\n+\t\t\tcs = connStmt{dc, si}\n \t\t\ts.css = append(s.css, cs)\n \t\t\ts.mu.Unlock()\n \t\t\tbreak\n \t\t}\n \t}\n \n-\tconn := cs.ci\n+\tconn := cs.dc\n \treleaseConn = func(err error) { s.db.putConn(conn, err) }\n \treturn conn, releaseConn, cs.si, nil\n }\n \n // Query executes a prepared query statement with the given arguments\n // and returns the query results as a *Rows.\n func (s *Stmt) Query(args ...interface{}) (*Rows, error) {\n-\tci, releaseConn, si, err := s.connStmt()\n+\ts.closemu.RLock()\n+\tdefer s.closemu.RUnlock()\n+\n+\tdc, releaseConn, si, err := s.connStmt()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tds := driverStmt{dc, si}\n+\trowsi, err := rowsiFromStatement(ds, args...)\n \tif err != nil {\n+\t\treleaseConn(err)\n \t\treturn nil, err\n \t}\n \n+\t// Note: ownership of ci passes to the *Rows, to be freed\n+\t// with releaseConn.\n+\trows := &Rows{\n+\t\tdc:    dc,\n+\t\trowsi: rowsi,\n+\t\t// releaseConn set below\n+\t}\n+\ts.db.addDep(s, rows)\n+\trows.releaseConn = func(err error) {\n+\t\treleaseConn(err)\n+\t\ts.db.removeDep(s, rows)\n+\t}\n+\treturn rows, nil\n+}\n+\n+func rowsiFromStatement(ds driverStmt, args ...interface{}) (driver.Rows, error) {\n+\tds.Lock()\n+\twant := ds.si.NumInput()\n+\tds.Unlock()\n+\n \t// -1 means the driver doesn't know how to count the number of\n \t// placeholders, so we won't sanity check input here and instead let the\n \t// driver deal with errors.\n-\tif want := si.NumInput(); want != -1 && len(args) != want {\n-\t\treturn nil, fmt.Errorf(\"sql: statement expects %d inputs; got %d\", si.NumInput(), len(args))\n+\tif want != -1 && len(args) != want {\n+\t\treturn nil, fmt.Errorf(\"sql: statement expects %d inputs; got %d\", want, len(args))\n \t}\n \n-\tdargs, err := driverArgs(si, args)\n+\tdargs, err := driverArgs(&ds, args)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\trowsi, err := si.Query(dargs)\n+\tds.Lock()\n+\trowsi, err := ds.si.Query(dargs)\n+\tds.Unlock()\n \tif err != nil {\n-\t\treleaseConn(err)\n \t\treturn nil, err\n \t}\n-\t// Note: ownership of ci passes to the *Rows, to be freed\n-\t// with releaseConn.\n-\trows := &Rows{\n-\t\tdb:          s.db,\n-\t\tci:          ci,\n-\t\treleaseConn: releaseConn,\n-\t\trowsi:       rowsi,\n-\t}\n-\treturn rows, nil\n+\treturn rowsi, nil\n }\n \n // QueryRow executes a prepared query statement with the given arguments.\n@@ -811,6 +1238,9 @@ func (s *Stmt) QueryRow(args ...interface{}) *Row {\n \n // Close closes the statement.\n func (s *Stmt) Close() error {\n+\ts.closemu.Lock()\n+\tdefer s.closemu.Unlock()\n+\n \tif s.stickyErr != nil {\n \t\treturn s.stickyErr\n \t}\n@@ -823,18 +1253,19 @@ func (s *Stmt) Close() error {\n \n \tif s.tx != nil {\n \t\ts.txsi.Close()\n-\t} else {\n-\t\tfor _, v := range s.css {\n-\t\t\tif ci, match := s.db.connIfFree(v.ci); match {\n-\t\t\t\tv.si.Close()\n-\t\t\t\ts.db.putConn(ci, nil)\n-\t\t\t} else {\n-\t\t\t\t// TODO(bradfitz): care that we can't close\n-\t\t\t\t// this statement because the statement's\n-\t\t\t\t// connection is in use?\n-\t\t\t}\n-\t\t}\n+\t\treturn nil\n+\t}\n+\n+\treturn s.db.removeDep(s, s)\n+}\n+\n+func (s *Stmt) finalClose() error {\n+\tfor _, v := range s.css {\n+\t\ts.db.noteUnusedDriverStatement(v.dc, v.si)\n+\t\tv.dc.removeOpenStmt(v.si)\n+\t\ts.db.removeDep(v.dc, s)\n \t}\n+\ts.css = nil\n \treturn nil\n }\n \n@@ -852,15 +1283,14 @@ func (s *Stmt) Close() error {\n //     err = rows.Err() // get any error encountered during iteration\n //     ...\n type Rows struct {\n-\tdb          *DB\n-\tci          driver.Conn // owned; must call putconn when closed to release\n+\tdc          *driverConn // owned; must call releaseConn when closed to release\n \treleaseConn func(error)\n \trowsi       driver.Rows\n \n \tclosed    bool\n \tlastcols  []driver.Value\n \tlasterr   error\n-\tcloseStmt *Stmt // if non-nil, statement to Close on close\n+\tcloseStmt driver.Stmt // if non-nil, statement to Close on close\n }\n \n // Next prepares the next result row for reading with the Scan method.\n@@ -936,24 +1366,6 @@ func (rs *Rows) Scan(dest ...interface{}) error {\n \t\t\treturn fmt.Errorf(\"sql: Scan error on column index %d: %v\", i, err)\n \t\t}\n \t}\n-\tfor _, dp := range dest {\n-\t\tb, ok := dp.(*[]byte)\n-\t\tif !ok {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif *b == nil {\n-\t\t\t// If the []byte is now nil (for a NULL value),\n-\t\t\t// don't fall through to below which would\n-\t\t\t// turn it into a non-nil 0-length byte slice\n-\t\t\tcontinue\n-\t\t}\n-\t\tif _, ok = dp.(*RawBytes); ok {\n-\t\t\tcontinue\n-\t\t}\n-\t\tclone := make([]byte, len(*b))\n-\t\tcopy(clone, *b)\n-\t\t*b = clone\n-\t}\n \treturn nil\n }\n \n@@ -966,10 +1378,10 @@ func (rs *Rows) Close() error {\n \t}\n \trs.closed = true\n \terr := rs.rowsi.Close()\n-\trs.releaseConn(err)\n \tif rs.closeStmt != nil {\n \t\trs.closeStmt.Close()\n \t}\n+\trs.releaseConn(err)\n \treturn err\n }\n \n@@ -1026,6 +1438,31 @@ type Result interface {\n \tRowsAffected() (int64, error)\n }\n \n-type result struct {\n-\tdriver.Result\n+type driverResult struct {\n+\tsync.Locker // the *driverConn\n+\tresi        driver.Result\n+}\n+\n+func (dr driverResult) LastInsertId() (int64, error) {\n+\tdr.Lock()\n+\tdefer dr.Unlock()\n+\treturn dr.resi.LastInsertId()\n+}\n+\n+func (dr driverResult) RowsAffected() (int64, error) {\n+\tdr.Lock()\n+\tdefer dr.Unlock()\n+\treturn dr.resi.RowsAffected()\n+}\n+\n+func stack() string {\n+\tvar buf [2 << 10]byte\n+\treturn string(buf[:runtime.Stack(buf[:], false)])\n+}\n+\n+// withLock runs while holding lk.\n+func withLock(lk sync.Locker, fn func()) {\n+\tlk.Lock()\n+\tfn()\n+\tlk.Unlock()\n }"}, {"sha": "e6cc667fa97830eac0d5cf3c0fe9977e9173ee60", "filename": "libgo/go/database/sql/sql_test.go", "status": "modified", "additions": 473, "deletions": 12, "changes": 485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -5,22 +5,22 @@\n package sql\n \n import (\n-\t\"database/sql/driver\"\n \t\"fmt\"\n \t\"reflect\"\n \t\"runtime\"\n \t\"strings\"\n+\t\"sync\"\n \t\"testing\"\n \t\"time\"\n )\n \n func init() {\n \ttype dbConn struct {\n \t\tdb *DB\n-\t\tc  driver.Conn\n+\t\tc  *driverConn\n \t}\n \tfreedFrom := make(map[dbConn]string)\n-\tputConnHook = func(db *DB, c driver.Conn) {\n+\tputConnHook = func(db *DB, c *driverConn) {\n \t\tfor _, oc := range db.freeConn {\n \t\t\tif oc == c {\n \t\t\t\t// print before panic, as panic may get lost due to conflicting panic\n@@ -38,7 +38,15 @@ const fakeDBName = \"foo\"\n \n var chrisBirthday = time.Unix(123456789, 0)\n \n-func newTestDB(t *testing.T, name string) *DB {\n+type testOrBench interface {\n+\tFatalf(string, ...interface{})\n+\tErrorf(string, ...interface{})\n+\tFatal(...interface{})\n+\tError(...interface{})\n+\tLogf(string, ...interface{})\n+}\n+\n+func newTestDB(t testOrBench, name string) *DB {\n \tdb, err := Open(\"test\", fakeDBName)\n \tif err != nil {\n \t\tt.Fatalf(\"Open: %v\", err)\n@@ -52,17 +60,42 @@ func newTestDB(t *testing.T, name string) *DB {\n \t\texec(t, db, \"INSERT|people|name=Bob,age=?,photo=BPHOTO\", 2)\n \t\texec(t, db, \"INSERT|people|name=Chris,age=?,photo=CPHOTO,bdate=?\", 3, chrisBirthday)\n \t}\n+\tif name == \"magicquery\" {\n+\t\t// Magic table name and column, known by fakedb_test.go.\n+\t\texec(t, db, \"CREATE|magicquery|op=string,millis=int32\")\n+\t\texec(t, db, \"INSERT|magicquery|op=sleep,millis=10\")\n+\t}\n \treturn db\n }\n \n-func exec(t *testing.T, db *DB, query string, args ...interface{}) {\n+func exec(t testOrBench, db *DB, query string, args ...interface{}) {\n \t_, err := db.Exec(query, args...)\n \tif err != nil {\n \t\tt.Fatalf(\"Exec of %q: %v\", query, err)\n \t}\n }\n \n-func closeDB(t *testing.T, db *DB) {\n+func closeDB(t testOrBench, db *DB) {\n+\tif e := recover(); e != nil {\n+\t\tfmt.Printf(\"Panic: %v\\n\", e)\n+\t\tpanic(e)\n+\t}\n+\tdefer setHookpostCloseConn(nil)\n+\tsetHookpostCloseConn(func(_ *fakeConn, err error) {\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Error closing fakeConn: %v\", err)\n+\t\t}\n+\t})\n+\tfor i, dc := range db.freeConn {\n+\t\tif n := len(dc.openStmt); n > 0 {\n+\t\t\t// Just a sanity check. This is legal in\n+\t\t\t// general, but if we make the tests clean up\n+\t\t\t// their statements first, then we can safely\n+\t\t\t// verify this is always zero here, and any\n+\t\t\t// other value is a leak.\n+\t\t\tt.Errorf(\"while closing db, freeConn %d/%d had %d open stmts; want 0\", i, len(db.freeConn), n)\n+\t\t}\n+\t}\n \terr := db.Close()\n \tif err != nil {\n \t\tt.Fatalf(\"error closing DB: %v\", err)\n@@ -75,7 +108,52 @@ func numPrepares(t *testing.T, db *DB) int {\n \tif n := len(db.freeConn); n != 1 {\n \t\tt.Fatalf(\"free conns = %d; want 1\", n)\n \t}\n-\treturn db.freeConn[0].(*fakeConn).numPrepare\n+\treturn db.freeConn[0].ci.(*fakeConn).numPrepare\n+}\n+\n+func (db *DB) numDeps() int {\n+\tdb.mu.Lock()\n+\tdefer db.mu.Unlock()\n+\treturn len(db.dep)\n+}\n+\n+// Dependencies are closed via a goroutine, so this polls waiting for\n+// numDeps to fall to want, waiting up to d.\n+func (db *DB) numDepsPollUntil(want int, d time.Duration) int {\n+\tdeadline := time.Now().Add(d)\n+\tfor {\n+\t\tn := db.numDeps()\n+\t\tif n <= want || time.Now().After(deadline) {\n+\t\t\treturn n\n+\t\t}\n+\t\ttime.Sleep(50 * time.Millisecond)\n+\t}\n+}\n+\n+func (db *DB) numFreeConns() int {\n+\tdb.mu.Lock()\n+\tdefer db.mu.Unlock()\n+\treturn len(db.freeConn)\n+}\n+\n+func (db *DB) dumpDeps(t *testing.T) {\n+\tfor fc := range db.dep {\n+\t\tdb.dumpDep(t, 0, fc, map[finalCloser]bool{})\n+\t}\n+}\n+\n+func (db *DB) dumpDep(t *testing.T, depth int, dep finalCloser, seen map[finalCloser]bool) {\n+\tseen[dep] = true\n+\tindent := strings.Repeat(\"  \", depth)\n+\tds := db.dep[dep]\n+\tfor k := range ds {\n+\t\tt.Logf(\"%s%T (%p) waiting for -> %T (%p)\", indent, dep, dep, k, k)\n+\t\tif fc, ok := k.(finalCloser); ok {\n+\t\t\tif !seen[fc] {\n+\t\t\t\tdb.dumpDep(t, depth+1, fc, seen)\n+\t\t\t}\n+\t\t}\n+\t}\n }\n \n func TestQuery(t *testing.T) {\n@@ -114,7 +192,7 @@ func TestQuery(t *testing.T) {\n \n \t// And verify that the final rows.Next() call, which hit EOF,\n \t// also closed the rows connection.\n-\tif n := len(db.freeConn); n != 1 {\n+\tif n := db.numFreeConns(); n != 1 {\n \t\tt.Fatalf(\"free conns after query hitting EOF = %d; want 1\", n)\n \t}\n \tif prepares := numPrepares(t, db) - prepares0; prepares != 1 {\n@@ -270,6 +348,35 @@ func TestStatementQueryRow(t *testing.T) {\n \n }\n \n+// golang.org/issue/3734\n+func TestStatementQueryRowConcurrent(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\tstmt, err := db.Prepare(\"SELECT|people|age|name=?\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"Prepare: %v\", err)\n+\t}\n+\tdefer stmt.Close()\n+\n+\tconst n = 10\n+\tch := make(chan error, n)\n+\tfor i := 0; i < n; i++ {\n+\t\tgo func() {\n+\t\t\tvar age int\n+\t\t\terr := stmt.QueryRow(\"Alice\").Scan(&age)\n+\t\t\tif err == nil && age != 1 {\n+\t\t\t\terr = fmt.Errorf(\"unexpected age %d\", age)\n+\t\t\t}\n+\t\t\tch <- err\n+\t\t}()\n+\t}\n+\tfor i := 0; i < n; i++ {\n+\t\tif err := <-ch; err != nil {\n+\t\t\tt.Error(err)\n+\t\t}\n+\t}\n+}\n+\n // just a test of fakedb itself\n func TestBogusPreboundParameters(t *testing.T) {\n \tdb := newTestDB(t, \"foo\")\n@@ -448,6 +555,30 @@ func TestIssue2542Deadlock(t *testing.T) {\n \t}\n }\n \n+// From golang.org/issue/3865\n+func TestCloseStmtBeforeRows(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\ts, err := db.Prepare(\"SELECT|people|name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tr, err := s.Query()\n+\tif err != nil {\n+\t\ts.Close()\n+\t\tt.Fatal(err)\n+\t}\n+\n+\terr = s.Close()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tr.Close()\n+}\n+\n // Tests fix for issue 2788, that we bind nil to a []byte if the\n // value in the column is sql null\n func TestNullByteSlice(t *testing.T) {\n@@ -520,7 +651,7 @@ func TestQueryRowClosingStmt(t *testing.T) {\n \tif len(db.freeConn) != 1 {\n \t\tt.Fatalf(\"expected 1 free conn\")\n \t}\n-\tfakeConn := db.freeConn[0].(*fakeConn)\n+\tfakeConn := db.freeConn[0].ci.(*fakeConn)\n \tif made, closed := fakeConn.stmtsMade, fakeConn.stmtsClosed; made != closed {\n \t\tt.Errorf(\"statement close mismatch: made %d, closed %d\", made, closed)\n \t}\n@@ -641,7 +772,337 @@ func nullTestRun(t *testing.T, spec nullTestSpec) {\n \t}\n }\n \n-func stack() string {\n-\tbuf := make([]byte, 1024)\n-\treturn string(buf[:runtime.Stack(buf, false)])\n+// golang.org/issue/4859\n+func TestQueryRowNilScanDest(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\tvar name *string // nil pointer\n+\terr := db.QueryRow(\"SELECT|people|name|\").Scan(name)\n+\twant := \"sql: Scan error on column index 0: destination pointer is nil\"\n+\tif err == nil || err.Error() != want {\n+\t\tt.Errorf(\"error = %q; want %q\", err.Error(), want)\n+\t}\n+}\n+\n+func TestIssue4902(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\tdriver := db.driver.(*fakeDriver)\n+\topens0 := driver.openCount\n+\n+\tvar stmt *Stmt\n+\tvar err error\n+\tfor i := 0; i < 10; i++ {\n+\t\tstmt, err = db.Prepare(\"SELECT|people|name|\")\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\terr = stmt.Close()\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t}\n+\n+\topens := driver.openCount - opens0\n+\tif opens > 1 {\n+\t\tt.Errorf(\"opens = %d; want <= 1\", opens)\n+\t\tt.Logf(\"db = %#v\", db)\n+\t\tt.Logf(\"driver = %#v\", driver)\n+\t\tt.Logf(\"stmt = %#v\", stmt)\n+\t}\n+}\n+\n+// Issue 3857\n+// This used to deadlock.\n+func TestSimultaneousQueries(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\ttx, err := db.Begin()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer tx.Rollback()\n+\n+\tr1, err := tx.Query(\"SELECT|people|name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer r1.Close()\n+\n+\tr2, err := tx.Query(\"SELECT|people|name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer r2.Close()\n+}\n+\n+func TestMaxIdleConns(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\ttx, err := db.Begin()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\ttx.Commit()\n+\tif got := len(db.freeConn); got != 1 {\n+\t\tt.Errorf(\"freeConns = %d; want 1\", got)\n+\t}\n+\n+\tdb.SetMaxIdleConns(0)\n+\n+\tif got := len(db.freeConn); got != 0 {\n+\t\tt.Errorf(\"freeConns after set to zero = %d; want 0\", got)\n+\t}\n+\n+\ttx, err = db.Begin()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\ttx.Commit()\n+\tif got := len(db.freeConn); got != 0 {\n+\t\tt.Errorf(\"freeConns = %d; want 0\", got)\n+\t}\n+}\n+\n+// golang.org/issue/5323\n+func TestStmtCloseDeps(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping in short mode\")\n+\t}\n+\tdefer setHookpostCloseConn(nil)\n+\tsetHookpostCloseConn(func(_ *fakeConn, err error) {\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Error closing fakeConn: %v\", err)\n+\t\t}\n+\t})\n+\n+\tdb := newTestDB(t, \"magicquery\")\n+\tdefer closeDB(t, db)\n+\n+\tdriver := db.driver.(*fakeDriver)\n+\n+\tdriver.mu.Lock()\n+\topens0 := driver.openCount\n+\tcloses0 := driver.closeCount\n+\tdriver.mu.Unlock()\n+\topenDelta0 := opens0 - closes0\n+\n+\tstmt, err := db.Prepare(\"SELECT|magicquery|op|op=?,millis=?\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\t// Start 50 parallel slow queries.\n+\tconst (\n+\t\tnquery      = 50\n+\t\tsleepMillis = 25\n+\t\tnbatch      = 2\n+\t)\n+\tvar wg sync.WaitGroup\n+\tfor batch := 0; batch < nbatch; batch++ {\n+\t\tfor i := 0; i < nquery; i++ {\n+\t\t\twg.Add(1)\n+\t\t\tgo func() {\n+\t\t\t\tdefer wg.Done()\n+\t\t\t\tvar op string\n+\t\t\t\tif err := stmt.QueryRow(\"sleep\", sleepMillis).Scan(&op); err != nil && err != ErrNoRows {\n+\t\t\t\t\tt.Error(err)\n+\t\t\t\t}\n+\t\t\t}()\n+\t\t}\n+\t\t// Sleep for twice the expected length of time for the\n+\t\t// batch of 50 queries above to finish before starting\n+\t\t// the next round.\n+\t\ttime.Sleep(2 * sleepMillis * time.Millisecond)\n+\t}\n+\twg.Wait()\n+\n+\tif g, w := db.numFreeConns(), 2; g != w {\n+\t\tt.Errorf(\"free conns = %d; want %d\", g, w)\n+\t}\n+\n+\tif n := db.numDepsPollUntil(4, time.Second); n > 4 {\n+\t\tt.Errorf(\"number of dependencies = %d; expected <= 4\", n)\n+\t\tdb.dumpDeps(t)\n+\t}\n+\n+\tdriver.mu.Lock()\n+\topens := driver.openCount - opens0\n+\tcloses := driver.closeCount - closes0\n+\tdriver.mu.Unlock()\n+\topenDelta := (driver.openCount - driver.closeCount) - openDelta0\n+\n+\tif openDelta > 2 {\n+\t\tt.Logf(\"open calls = %d\", opens)\n+\t\tt.Logf(\"close calls = %d\", closes)\n+\t\tt.Logf(\"open delta = %d\", openDelta)\n+\t\tt.Errorf(\"db connections opened = %d; want <= 2\", openDelta)\n+\t\tdb.dumpDeps(t)\n+\t}\n+\n+\tif len(stmt.css) > nquery {\n+\t\tt.Errorf(\"len(stmt.css) = %d; want <= %d\", len(stmt.css), nquery)\n+\t}\n+\n+\tif err := stmt.Close(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif g, w := db.numFreeConns(), 2; g != w {\n+\t\tt.Errorf(\"free conns = %d; want %d\", g, w)\n+\t}\n+\n+\tif n := db.numDepsPollUntil(2, time.Second); n > 2 {\n+\t\tt.Errorf(\"number of dependencies = %d; expected <= 2\", n)\n+\t\tdb.dumpDeps(t)\n+\t}\n+\n+\tdb.SetMaxIdleConns(0)\n+\n+\tif g, w := db.numFreeConns(), 0; g != w {\n+\t\tt.Errorf(\"free conns = %d; want %d\", g, w)\n+\t}\n+\n+\tif n := db.numDepsPollUntil(0, time.Second); n > 0 {\n+\t\tt.Errorf(\"number of dependencies = %d; expected 0\", n)\n+\t\tdb.dumpDeps(t)\n+\t}\n+}\n+\n+// golang.org/issue/5046\n+func TestCloseConnBeforeStmts(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\tdefer setHookpostCloseConn(nil)\n+\tsetHookpostCloseConn(func(_ *fakeConn, err error) {\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Error closing fakeConn: %v; from %s\", err, stack())\n+\t\t\tdb.dumpDeps(t)\n+\t\t\tt.Errorf(\"DB = %#v\", db)\n+\t\t}\n+\t})\n+\n+\tstmt, err := db.Prepare(\"SELECT|people|name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif len(db.freeConn) != 1 {\n+\t\tt.Fatalf(\"expected 1 freeConn; got %d\", len(db.freeConn))\n+\t}\n+\tdc := db.freeConn[0]\n+\tif dc.closed {\n+\t\tt.Errorf(\"conn shouldn't be closed\")\n+\t}\n+\n+\tif n := len(dc.openStmt); n != 1 {\n+\t\tt.Errorf(\"driverConn num openStmt = %d; want 1\", n)\n+\t}\n+\terr = db.Close()\n+\tif err != nil {\n+\t\tt.Errorf(\"db Close = %v\", err)\n+\t}\n+\tif !dc.closed {\n+\t\tt.Errorf(\"after db.Close, driverConn should be closed\")\n+\t}\n+\tif n := len(dc.openStmt); n != 0 {\n+\t\tt.Errorf(\"driverConn num openStmt = %d; want 0\", n)\n+\t}\n+\n+\terr = stmt.Close()\n+\tif err != nil {\n+\t\tt.Errorf(\"Stmt close = %v\", err)\n+\t}\n+\n+\tif !dc.closed {\n+\t\tt.Errorf(\"conn should be closed\")\n+\t}\n+\tif dc.ci != nil {\n+\t\tt.Errorf(\"after Stmt Close, driverConn's Conn interface should be nil\")\n+\t}\n+}\n+\n+// golang.org/issue/5283: don't release the Rows' connection in Close\n+// before calling Stmt.Close.\n+func TestRowsCloseOrder(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\tdb.SetMaxIdleConns(0)\n+\tsetStrictFakeConnClose(t)\n+\tdefer setStrictFakeConnClose(nil)\n+\n+\trows, err := db.Query(\"SELECT|people|age,name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\terr = rows.Close()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}\n+\n+func manyConcurrentQueries(t testOrBench) {\n+\tmaxProcs, numReqs := 16, 500\n+\tif testing.Short() {\n+\t\tmaxProcs, numReqs = 4, 50\n+\t}\n+\tdefer runtime.GOMAXPROCS(runtime.GOMAXPROCS(maxProcs))\n+\n+\tdb := newTestDB(t, \"people\")\n+\tdefer closeDB(t, db)\n+\n+\tstmt, err := db.Prepare(\"SELECT|people|name|\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer stmt.Close()\n+\n+\tvar wg sync.WaitGroup\n+\twg.Add(numReqs)\n+\n+\treqs := make(chan bool)\n+\tdefer close(reqs)\n+\n+\tfor i := 0; i < maxProcs*2; i++ {\n+\t\tgo func() {\n+\t\t\tfor _ = range reqs {\n+\t\t\t\trows, err := stmt.Query()\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tt.Errorf(\"error on query:  %v\", err)\n+\t\t\t\t\twg.Done()\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\n+\t\t\t\tvar name string\n+\t\t\t\tfor rows.Next() {\n+\t\t\t\t\trows.Scan(&name)\n+\t\t\t\t}\n+\t\t\t\trows.Close()\n+\n+\t\t\t\twg.Done()\n+\t\t\t}\n+\t\t}()\n+\t}\n+\n+\tfor i := 0; i < numReqs; i++ {\n+\t\treqs <- true\n+\t}\n+\n+\twg.Wait()\n+}\n+\n+func TestConcurrency(t *testing.T) {\n+\tmanyConcurrentQueries(t)\n+}\n+\n+func BenchmarkConcurrency(b *testing.B) {\n+\tb.ReportAllocs()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tmanyConcurrentQueries(b)\n+\t}\n }"}, {"sha": "53c46eb4b818e16be893686d6aeec87f7c266a1c", "filename": "libgo/go/debug/dwarf/buf.go", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -13,17 +13,45 @@ import (\n \n // Data buffer being decoded.\n type buf struct {\n-\tdwarf *Data\n-\tu     *unit\n-\torder binary.ByteOrder\n-\tname  string\n-\toff   Offset\n-\tdata  []byte\n-\terr   error\n+\tdwarf  *Data\n+\torder  binary.ByteOrder\n+\tformat dataFormat\n+\tname   string\n+\toff    Offset\n+\tdata   []byte\n+\terr    error\n }\n \n-func makeBuf(d *Data, u *unit, name string, off Offset, data []byte) buf {\n-\treturn buf{d, u, d.order, name, off, data, nil}\n+// Data format, other than byte order.  This affects the handling of\n+// certain field formats.\n+type dataFormat interface {\n+\t// DWARF version number.  Zero means unknown.\n+\tversion() int\n+\n+\t// 64-bit DWARF format?\n+\tdwarf64() (dwarf64 bool, isKnown bool)\n+\n+\t// Size of an address, in bytes.  Zero means unknown.\n+\taddrsize() int\n+}\n+\n+// Some parts of DWARF have no data format, e.g., abbrevs.\n+type unknownFormat struct{}\n+\n+func (u unknownFormat) version() int {\n+\treturn 0\n+}\n+\n+func (u unknownFormat) dwarf64() (bool, bool) {\n+\treturn false, false\n+}\n+\n+func (u unknownFormat) addrsize() int {\n+\treturn 0\n+}\n+\n+func makeBuf(d *Data, format dataFormat, name string, off Offset, data []byte) buf {\n+\treturn buf{d, d.order, format, name, off, data, nil}\n }\n \n func (b *buf) uint8() uint8 {\n@@ -121,17 +149,15 @@ func (b *buf) int() int64 {\n \n // Address-sized uint.\n func (b *buf) addr() uint64 {\n-\tif b.u != nil {\n-\t\tswitch b.u.addrsize {\n-\t\tcase 1:\n-\t\t\treturn uint64(b.uint8())\n-\t\tcase 2:\n-\t\t\treturn uint64(b.uint16())\n-\t\tcase 4:\n-\t\t\treturn uint64(b.uint32())\n-\t\tcase 8:\n-\t\t\treturn uint64(b.uint64())\n-\t\t}\n+\tswitch b.format.addrsize() {\n+\tcase 1:\n+\t\treturn uint64(b.uint8())\n+\tcase 2:\n+\t\treturn uint64(b.uint16())\n+\tcase 4:\n+\t\treturn uint64(b.uint32())\n+\tcase 8:\n+\t\treturn uint64(b.uint64())\n \t}\n \tb.error(\"unknown address size\")\n \treturn 0"}, {"sha": "ada723163a4a9d44d0d71d73f19d7f8076703507", "filename": "libgo/go/debug/dwarf/entry.go", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -40,7 +40,7 @@ func (d *Data) parseAbbrev(off uint32) (abbrevTable, error) {\n \t} else {\n \t\tdata = data[off:]\n \t}\n-\tb := makeBuf(d, nil, \"abbrev\", 0, data)\n+\tb := makeBuf(d, unknownFormat{}, \"abbrev\", 0, data)\n \n \t// Error handling is simplified by the buf getters\n \t// returning an endless stream of 0s after an error.\n@@ -190,28 +190,37 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\tcase formFlag:\n \t\t\tval = b.uint8() == 1\n \t\tcase formFlagPresent:\n+\t\t\t// The attribute is implicitly indicated as present, and no value is\n+\t\t\t// encoded in the debugging information entry itself.\n \t\t\tval = true\n \n \t\t// lineptr, loclistptr, macptr, rangelistptr\n \t\tcase formSecOffset:\n-\t\t\tif b.u == nil {\n+\t\t\tis64, known := b.format.dwarf64()\n+\t\t\tif !known {\n \t\t\t\tb.error(\"unknown size for DW_FORM_sec_offset\")\n-\t\t\t} else if b.u.dwarf64 {\n+\t\t\t} else if is64 {\n \t\t\t\tval = Offset(b.uint64())\n \t\t\t} else {\n \t\t\t\tval = Offset(b.uint32())\n \t\t\t}\n \n \t\t// reference to other entry\n \t\tcase formRefAddr:\n-\t\t\tif b.u == nil {\n+\t\t\tvers := b.format.version()\n+\t\t\tif vers == 0 {\n \t\t\t\tb.error(\"unknown version for DW_FORM_ref_addr\")\n-\t\t\t} else if b.u.version == 2 {\n+\t\t\t} else if vers == 2 {\n \t\t\t\tval = Offset(b.addr())\n-\t\t\t} else if b.u.dwarf64 {\n-\t\t\t\tval = Offset(b.uint64())\n \t\t\t} else {\n-\t\t\t\tval = Offset(b.uint32())\n+\t\t\t\tis64, known := b.format.dwarf64()\n+\t\t\t\tif !known {\n+\t\t\t\t\tb.error(\"unknown size for DW_FORM_ref_addr\")\n+\t\t\t\t} else if is64 {\n+\t\t\t\t\tval = Offset(b.uint64())\n+\t\t\t\t} else {\n+\t\t\t\t\tval = Offset(b.uint32())\n+\t\t\t\t}\n \t\t\t}\n \t\tcase formRef1:\n \t\t\tval = Offset(b.uint8()) + ubase\n@@ -234,7 +243,7 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t\tif b.err != nil {\n \t\t\t\treturn nil\n \t\t\t}\n-\t\t\tb1 := makeBuf(b.dwarf, b.u, \"str\", 0, b.dwarf.str)\n+\t\t\tb1 := makeBuf(b.dwarf, unknownFormat{}, \"str\", 0, b.dwarf.str)\n \t\t\tb1.skip(int(off))\n \t\t\tval = b1.string()\n \t\t\tif b1.err != nil {"}, {"sha": "c463c3b0d8f8dd193c14aba80937704ad858a4d2", "filename": "libgo/go/debug/dwarf/line.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -112,7 +112,7 @@ func (d *Data) readUnitLine(i int, u *unit) error {\n func (d *Data) readAddressRanges(off Offset, base uint64, u *unit) error {\n \tb := makeBuf(d, u, \"ranges\", off, d.ranges[off:])\n \tvar highest uint64\n-\tswitch u.addrsize {\n+\tswitch u.addrsize() {\n \tcase 1:\n \t\thighest = 0xff\n \tcase 2:"}, {"sha": "54000fbd75e02f85502119e30981bc2cbf99b25e", "filename": "libgo/go/debug/dwarf/type.go", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -435,7 +435,9 @@ func (d *Data) Type(off Offset) (Type, error) {\n \t\t\t\t\tgoto Error\n \t\t\t\t}\n \t\t\t\tif loc, ok := kid.Val(AttrDataMemberLoc).([]byte); ok {\n-\t\t\t\t\tb := makeBuf(d, nil, \"location\", 0, loc)\n+\t\t\t\t\t// TODO: Should have original compilation\n+\t\t\t\t\t// unit here, not unknownFormat.\n+\t\t\t\t\tb := makeBuf(d, unknownFormat{}, \"location\", 0, loc)\n \t\t\t\t\tif b.uint8() != opPlusUconst {\n \t\t\t\t\t\terr = DecodeError{\"info\", kid.Offset, \"unexpected opcode\"}\n \t\t\t\t\t\tgoto Error"}, {"sha": "8e09298a8b43ea061cab5bd9111c9aca39bac363", "filename": "libgo/go/debug/dwarf/unit.go", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -10,17 +10,31 @@ import \"strconv\"\n // Each unit has its own abbreviation table and address size.\n \n type unit struct {\n-\tbase     Offset // byte offset of header within the aggregate info\n-\toff      Offset // byte offset of data within the aggregate info\n-\tlineoff  Offset // byte offset of data within the line info\n-\tdata     []byte\n-\tatable   abbrevTable\n-\taddrsize int\n-\tversion  int\n-\tdwarf64  bool // True for 64-bit DWARF format\n-\tdir      string\n-\tpc       []addrRange   // PC ranges in this compilation unit\n-\tlines    []mapLineInfo // PC -> line mapping\n+\tbase    Offset // byte offset of header within the aggregate info\n+\toff     Offset // byte offset of data within the aggregate info\n+\tlineoff Offset // byte offset of data within the line info\n+\tdata    []byte\n+\tatable  abbrevTable\n+\tasize   int\n+\tvers    int\n+\tis64    bool // True for 64-bit DWARF format\n+\tdir     string\n+\tpc      []addrRange   // PC ranges in this compilation unit\n+\tlines   []mapLineInfo // PC -> line mapping\n+}\n+\n+// Implement the dataFormat interface.\n+\n+func (u *unit) version() int {\n+\treturn u.vers\n+}\n+\n+func (u *unit) dwarf64() (bool, bool) {\n+\treturn u.is64, true\n+}\n+\n+func (u *unit) addrsize() int {\n+\treturn u.asize\n }\n \n // A range is an address range.\n@@ -32,12 +46,12 @@ type addrRange struct {\n func (d *Data) parseUnits() ([]unit, error) {\n \t// Count units.\n \tnunit := 0\n-\tb := makeBuf(d, nil, \"info\", 0, d.info)\n+\tb := makeBuf(d, unknownFormat{}, \"info\", 0, d.info)\n \tfor len(b.data) > 0 {\n \t\tlen := b.uint32()\n \t\tif len == 0xffffffff {\n \t\t\tlen64 := b.uint64()\n-\t\t\tif len64 != uint64(int(len64)) {\n+\t\t\tif len64 != uint64(uint32(len64)) {\n \t\t\t\tb.error(\"unit length overflow\")\n \t\t\t\tbreak\n \t\t\t}\n@@ -51,31 +65,31 @@ func (d *Data) parseUnits() ([]unit, error) {\n \t}\n \n \t// Again, this time writing them down.\n-\tb = makeBuf(d, nil, \"info\", 0, d.info)\n+\tb = makeBuf(d, unknownFormat{}, \"info\", 0, d.info)\n \tunits := make([]unit, nunit)\n \tfor i := range units {\n \t\tu := &units[i]\n \t\tu.base = b.off\n \t\tn := b.uint32()\n \t\tif n == 0xffffffff {\n-\t\t\tu.dwarf64 = true\n+\t\t\tu.is64 = true\n \t\t\tn = uint32(b.uint64())\n \t\t}\n \t\tvers := b.uint16()\n \t\tif vers < 2 || vers > 4 {\n \t\t\tb.error(\"unsupported DWARF version \" + strconv.Itoa(int(vers)))\n \t\t\tbreak\n \t\t}\n+\t\tu.vers = int(vers)\n \t\tatable, err := d.parseAbbrev(b.uint32())\n \t\tif err != nil {\n \t\t\tif b.err == nil {\n \t\t\t\tb.err = err\n \t\t\t}\n \t\t\tbreak\n \t\t}\n-\t\tu.version = int(vers)\n \t\tu.atable = atable\n-\t\tu.addrsize = int(b.uint8())\n+\t\tu.asize = int(b.uint8())\n \t\tu.off = b.off\n \t\tu.data = b.bytes(int(n - (2 + 4 + 1)))\n \t}"}, {"sha": "8023eb0a0b75508019ded5977d7fcc58146481af", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -422,6 +422,10 @@ func (f *File) getSymbols32(typ SectionType) ([]Symbol, []byte, error) {\n \t\treturn nil, nil, errors.New(\"cannot load string table section\")\n \t}\n \n+\t// The first entry is all zeros.\n+\tvar skip [Sym32Size]byte\n+\tsymtab.Read(skip[:])\n+\n \tsymbols := make([]Symbol, symtab.Len()/Sym32Size)\n \n \ti := 0\n@@ -461,6 +465,10 @@ func (f *File) getSymbols64(typ SectionType) ([]Symbol, []byte, error) {\n \t\treturn nil, nil, errors.New(\"cannot load string table section\")\n \t}\n \n+\t// The first entry is all zeros.\n+\tvar skip [Sym64Size]byte\n+\tsymtab.Read(skip[:])\n+\n \tsymbols := make([]Symbol, symtab.Len()/Sym64Size)\n \n \ti := 0\n@@ -533,10 +541,10 @@ func (f *File) applyRelocationsAMD64(dst []byte, rels []byte) error {\n \t\tsymNo := rela.Info >> 32\n \t\tt := R_X86_64(rela.Info & 0xffff)\n \n-\t\tif symNo >= uint64(len(symbols)) {\n+\t\tif symNo == 0 || symNo > uint64(len(symbols)) {\n \t\t\tcontinue\n \t\t}\n-\t\tsym := &symbols[symNo]\n+\t\tsym := &symbols[symNo-1]\n \t\tif SymType(sym.Info&0xf) != STT_SECTION {\n \t\t\t// We don't handle non-section relocations for now.\n \t\t\tcontinue\n@@ -597,6 +605,10 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n }\n \n // Symbols returns the symbol table for f.\n+//\n+// For compatibility with Go 1.0, Symbols omits the null symbol at index 0.\n+// After retrieving the symbols as symtab, an externally supplied index x\n+// corresponds to symtab[x-1], not symtab[x].\n func (f *File) Symbols() ([]Symbol, error) {\n \tsym, _, err := f.getSymbols(SHT_SYMTAB)\n \treturn sym, err\n@@ -706,7 +718,7 @@ func (f *File) gnuVersionInit(str []byte) {\n // which came from offset i of the symbol table.\n func (f *File) gnuVersion(i int, sym *ImportedSymbol) {\n \t// Each entry is two bytes.\n-\ti = i * 2\n+\ti = (i + 1) * 2\n \tif i >= len(f.gnuVersym) {\n \t\treturn\n \t}"}, {"sha": "81ed4fb27dc5c4320e9359d710797e2b9464415b", "filename": "libgo/go/debug/gosym/symtab.go", "status": "modified", "additions": 108, "deletions": 15, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fgosym%2Fsymtab.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fgosym%2Fsymtab.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fgosym%2Fsymtab.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -99,31 +99,116 @@ type Table struct {\n }\n \n type sym struct {\n-\tvalue  uint32\n-\tgotype uint32\n+\tvalue  uint64\n+\tgotype uint64\n \ttyp    byte\n \tname   []byte\n }\n \n-var littleEndianSymtab = []byte{0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00}\n+var littleEndianSymtab = []byte{0xFD, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00}\n+var bigEndianSymtab = []byte{0xFF, 0xFF, 0xFF, 0xFD, 0x00, 0x00, 0x00}\n+\n+var oldLittleEndianSymtab = []byte{0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00}\n \n func walksymtab(data []byte, fn func(sym) error) error {\n \tvar order binary.ByteOrder = binary.BigEndian\n-\tif bytes.HasPrefix(data, littleEndianSymtab) {\n+\tnewTable := false\n+\tswitch {\n+\tcase bytes.HasPrefix(data, oldLittleEndianSymtab):\n+\t\t// Same as Go 1.0, but little endian.\n+\t\t// Format was used during interim development between Go 1.0 and Go 1.1.\n+\t\t// Should not be widespread, but easy to support.\n \t\tdata = data[6:]\n \t\torder = binary.LittleEndian\n+\tcase bytes.HasPrefix(data, bigEndianSymtab):\n+\t\tnewTable = true\n+\tcase bytes.HasPrefix(data, littleEndianSymtab):\n+\t\tnewTable = true\n+\t\torder = binary.LittleEndian\n+\t}\n+\tvar ptrsz int\n+\tif newTable {\n+\t\tif len(data) < 8 {\n+\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t}\n+\t\tptrsz = int(data[7])\n+\t\tif ptrsz != 4 && ptrsz != 8 {\n+\t\t\treturn &DecodingError{7, \"invalid pointer size\", ptrsz}\n+\t\t}\n+\t\tdata = data[8:]\n \t}\n \tvar s sym\n \tp := data\n-\tfor len(p) >= 6 {\n-\t\ts.value = order.Uint32(p[0:4])\n-\t\ttyp := p[4]\n-\t\tif typ&0x80 == 0 {\n-\t\t\treturn &DecodingError{len(data) - len(p) + 4, \"bad symbol type\", typ}\n+\tfor len(p) >= 4 {\n+\t\tvar typ byte\n+\t\tif newTable {\n+\t\t\t// Symbol type, value, Go type.\n+\t\t\ttyp = p[0] & 0x3F\n+\t\t\twideValue := p[0]&0x40 != 0\n+\t\t\tgoType := p[0]&0x80 != 0\n+\t\t\tif typ < 26 {\n+\t\t\t\ttyp += 'A'\n+\t\t\t} else {\n+\t\t\t\ttyp += 'a' - 26\n+\t\t\t}\n+\t\t\ts.typ = typ\n+\t\t\tp = p[1:]\n+\t\t\tif wideValue {\n+\t\t\t\tif len(p) < ptrsz {\n+\t\t\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t\t\t}\n+\t\t\t\t// fixed-width value\n+\t\t\t\tif ptrsz == 8 {\n+\t\t\t\t\ts.value = order.Uint64(p[0:8])\n+\t\t\t\t\tp = p[8:]\n+\t\t\t\t} else {\n+\t\t\t\t\ts.value = uint64(order.Uint32(p[0:4]))\n+\t\t\t\t\tp = p[4:]\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\t// varint value\n+\t\t\t\ts.value = 0\n+\t\t\t\tshift := uint(0)\n+\t\t\t\tfor len(p) > 0 && p[0]&0x80 != 0 {\n+\t\t\t\t\ts.value |= uint64(p[0]&0x7F) << shift\n+\t\t\t\t\tshift += 7\n+\t\t\t\t\tp = p[1:]\n+\t\t\t\t}\n+\t\t\t\tif len(p) == 0 {\n+\t\t\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t\t\t}\n+\t\t\t\ts.value |= uint64(p[0]) << shift\n+\t\t\t\tp = p[1:]\n+\t\t\t}\n+\t\t\tif goType {\n+\t\t\t\tif len(p) < ptrsz {\n+\t\t\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t\t\t}\n+\t\t\t\t// fixed-width go type\n+\t\t\t\tif ptrsz == 8 {\n+\t\t\t\t\ts.gotype = order.Uint64(p[0:8])\n+\t\t\t\t\tp = p[8:]\n+\t\t\t\t} else {\n+\t\t\t\t\ts.gotype = uint64(order.Uint32(p[0:4]))\n+\t\t\t\t\tp = p[4:]\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Value, symbol type.\n+\t\t\ts.value = uint64(order.Uint32(p[0:4]))\n+\t\t\tif len(p) < 5 {\n+\t\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t\t}\n+\t\t\ttyp = p[4]\n+\t\t\tif typ&0x80 == 0 {\n+\t\t\t\treturn &DecodingError{len(data) - len(p) + 4, \"bad symbol type\", typ}\n+\t\t\t}\n+\t\t\ttyp &^= 0x80\n+\t\t\ts.typ = typ\n+\t\t\tp = p[5:]\n \t\t}\n-\t\ttyp &^= 0x80\n-\t\ts.typ = typ\n-\t\tp = p[5:]\n+\n+\t\t// Name.\n \t\tvar i int\n \t\tvar nnul int\n \t\tfor i = 0; i < len(p); i++ {\n@@ -142,13 +227,21 @@ func walksymtab(data []byte, fn func(sym) error) error {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif i+nnul+4 > len(p) {\n+\t\tif len(p) < i+nnul {\n \t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n \t\t}\n \t\ts.name = p[0:i]\n \t\ti += nnul\n-\t\ts.gotype = order.Uint32(p[i : i+4])\n-\t\tp = p[i+4:]\n+\t\tp = p[i:]\n+\n+\t\tif !newTable {\n+\t\t\tif len(p) < 4 {\n+\t\t\t\treturn &DecodingError{len(data), \"unexpected EOF\", nil}\n+\t\t\t}\n+\t\t\t// Go type.\n+\t\t\ts.gotype = uint64(order.Uint32(p[:4]))\n+\t\t\tp = p[4:]\n+\t\t}\n \t\tfn(s)\n \t}\n \treturn nil"}, {"sha": "9d912e7a08734ac36dabe517e041e090f1a308b0", "filename": "libgo/go/debug/macho/file.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -142,6 +142,8 @@ type Dysymtab struct {\n  * Mach-O reader\n  */\n \n+// FormatError is returned by some operations if the data does\n+// not have the correct format for an object file.\n type FormatError struct {\n \toff int64\n \tmsg string"}, {"sha": "e2afc587140a3fedfe00cb1966105fd38668e0db", "filename": "libgo/go/encoding/ascii85/ascii85.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -296,5 +296,4 @@ func (d *decoder) Read(p []byte) (n int, err error) {\n \t\tnn, d.readErr = d.r.Read(d.buf[d.nbuf:])\n \t\td.nbuf += nn\n \t}\n-\tpanic(\"unreachable\")\n }"}, {"sha": "adaf80dcdb0a11f83a0d97793bd554e0601e0865", "filename": "libgo/go/encoding/asn1/marshal.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -460,7 +460,6 @@ func marshalBody(out *forkableWriter, value reflect.Value, params fieldParameter\n \t\tdefault:\n \t\t\treturn marshalUTF8String(out, v.String())\n \t\t}\n-\t\treturn\n \t}\n \n \treturn StructuralError{\"unknown Go type\"}"}, {"sha": "fe17b732207c82219d97bae3a39b0be83aab0536", "filename": "libgo/go/encoding/base32/base32.go", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -6,8 +6,10 @@\n package base32\n \n import (\n+\t\"bytes\"\n \t\"io\"\n \t\"strconv\"\n+\t\"strings\"\n )\n \n /*\n@@ -48,6 +50,13 @@ var StdEncoding = NewEncoding(encodeStd)\n // It is typically used in DNS.\n var HexEncoding = NewEncoding(encodeHex)\n \n+var removeNewlinesMapper = func(r rune) rune {\n+\tif r == '\\r' || r == '\\n' {\n+\t\treturn -1\n+\t}\n+\treturn r\n+}\n+\n /*\n  * Encoder\n  */\n@@ -228,57 +237,64 @@ func (e CorruptInputError) Error() string {\n \n // decode is like Decode but returns an additional 'end' value, which\n // indicates if end-of-message padding was encountered and thus any\n-// additional data is an error.\n+// additional data is an error. This method assumes that src has been\n+// stripped of all supported whitespace ('\\r' and '\\n').\n func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n-\tosrc := src\n+\tolen := len(src)\n \tfor len(src) > 0 && !end {\n \t\t// Decode quantum using the base32 alphabet\n \t\tvar dbuf [8]byte\n \t\tdlen := 8\n \n-\t\t// do the top bytes contain any data?\n \t\tfor j := 0; j < 8; {\n \t\t\tif len(src) == 0 {\n-\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - j)\n+\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - j)\n \t\t\t}\n \t\t\tin := src[0]\n \t\t\tsrc = src[1:]\n-\t\t\tif in == '\\r' || in == '\\n' {\n-\t\t\t\t// Ignore this character.\n-\t\t\t\tcontinue\n-\t\t\t}\n \t\t\tif in == '=' && j >= 2 && len(src) < 8 {\n-\t\t\t\t// We've reached the end and there's\n-\t\t\t\t// padding, the rest should be padded\n-\t\t\t\tfor k := 0; k < 8-j-1; k++ {\n+\t\t\t\t// We've reached the end and there's padding\n+\t\t\t\tif len(src)+j < 8-1 {\n+\t\t\t\t\t// not enough padding\n+\t\t\t\t\treturn n, false, CorruptInputError(olen)\n+\t\t\t\t}\n+\t\t\t\tfor k := 0; k < 8-1-j; k++ {\n \t\t\t\t\tif len(src) > k && src[k] != '=' {\n-\t\t\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) + k - 1)\n+\t\t\t\t\t\t// incorrect padding\n+\t\t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) + k - 1)\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tdlen = j\n-\t\t\t\tend = true\n+\t\t\t\tdlen, end = j, true\n+\t\t\t\t// 7, 5 and 2 are not valid padding lengths, and so 1, 3 and 6 are not\n+\t\t\t\t// valid dlen values. See RFC 4648 Section 6 \"Base 32 Encoding\" listing\n+\t\t\t\t// the five valid padding lengths, and Section 9 \"Illustrations and\n+\t\t\t\t// Examples\" for an illustration for how the the 1st, 3rd and 6th base32\n+\t\t\t\t// src bytes do not yield enough information to decode a dst byte.\n+\t\t\t\tif dlen == 1 || dlen == 3 || dlen == 6 {\n+\t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n+\t\t\t\t}\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tdbuf[j] = enc.decodeMap[in]\n \t\t\tif dbuf[j] == 0xFF {\n-\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - 1)\n+\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n \t\t\t}\n \t\t\tj++\n \t\t}\n \n \t\t// Pack 8x 5-bit source blocks into 5 byte destination\n \t\t// quantum\n \t\tswitch dlen {\n-\t\tcase 7, 8:\n+\t\tcase 8:\n \t\t\tdst[4] = dbuf[6]<<5 | dbuf[7]\n \t\t\tfallthrough\n-\t\tcase 6, 5:\n+\t\tcase 7:\n \t\t\tdst[3] = dbuf[4]<<7 | dbuf[5]<<2 | dbuf[6]>>3\n \t\t\tfallthrough\n-\t\tcase 4:\n+\t\tcase 5:\n \t\t\tdst[2] = dbuf[3]<<4 | dbuf[4]>>1\n \t\t\tfallthrough\n-\t\tcase 3:\n+\t\tcase 4:\n \t\t\tdst[1] = dbuf[1]<<6 | dbuf[2]<<1 | dbuf[3]>>4\n \t\t\tfallthrough\n \t\tcase 2:\n@@ -288,11 +304,11 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\tswitch dlen {\n \t\tcase 2:\n \t\t\tn += 1\n-\t\tcase 3, 4:\n+\t\tcase 4:\n \t\t\tn += 2\n \t\tcase 5:\n \t\t\tn += 3\n-\t\tcase 6, 7:\n+\t\tcase 7:\n \t\t\tn += 4\n \t\tcase 8:\n \t\t\tn += 5\n@@ -307,12 +323,14 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n // number of bytes successfully written and CorruptInputError.\n // New line characters (\\r and \\n) are ignored.\n func (enc *Encoding) Decode(dst, src []byte) (n int, err error) {\n+\tsrc = bytes.Map(removeNewlinesMapper, src)\n \tn, _, err = enc.decode(dst, src)\n \treturn\n }\n \n // DecodeString returns the bytes represented by the base32 string s.\n func (enc *Encoding) DecodeString(s string) ([]byte, error) {\n+\ts = strings.Map(removeNewlinesMapper, s)\n \tdbuf := make([]byte, enc.DecodedLen(len(s)))\n \tn, err := enc.Decode(dbuf, []byte(s))\n \treturn dbuf[:n], err\n@@ -377,9 +395,34 @@ func (d *decoder) Read(p []byte) (n int, err error) {\n \treturn n, d.err\n }\n \n+type newlineFilteringReader struct {\n+\twrapped io.Reader\n+}\n+\n+func (r *newlineFilteringReader) Read(p []byte) (int, error) {\n+\tn, err := r.wrapped.Read(p)\n+\tfor n > 0 {\n+\t\toffset := 0\n+\t\tfor i, b := range p[0:n] {\n+\t\t\tif b != '\\r' && b != '\\n' {\n+\t\t\t\tif i != offset {\n+\t\t\t\t\tp[offset] = b\n+\t\t\t\t}\n+\t\t\t\toffset++\n+\t\t\t}\n+\t\t}\n+\t\tif offset > 0 {\n+\t\t\treturn offset, err\n+\t\t}\n+\t\t// Previous buffer entirely whitespace, read again\n+\t\tn, err = r.wrapped.Read(p)\n+\t}\n+\treturn n, err\n+}\n+\n // NewDecoder constructs a new base32 stream decoder.\n func NewDecoder(enc *Encoding, r io.Reader) io.Reader {\n-\treturn &decoder{enc: enc, r: r}\n+\treturn &decoder{enc: enc, r: &newlineFilteringReader{r}}\n }\n \n // DecodedLen returns the maximum length in bytes of the decoded data"}, {"sha": "63298d1c94c180d34797b797768b80e7976f4229", "filename": "libgo/go/encoding/base32/base32_test.go", "status": "modified", "additions": 85, "deletions": 21, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -137,27 +138,48 @@ func TestDecoderBuffering(t *testing.T) {\n }\n \n func TestDecodeCorrupt(t *testing.T) {\n-\ttype corrupt struct {\n-\t\te string\n-\t\tp int\n-\t}\n-\texamples := []corrupt{\n+\ttestCases := []struct {\n+\t\tinput  string\n+\t\toffset int // -1 means no corruption.\n+\t}{\n+\t\t{\"\", -1},\n \t\t{\"!!!!\", 0},\n \t\t{\"x===\", 0},\n \t\t{\"AA=A====\", 2},\n \t\t{\"AAA=AAAA\", 3},\n \t\t{\"MMMMMMMMM\", 8},\n \t\t{\"MMMMMM\", 0},\n+\t\t{\"A=\", 1},\n+\t\t{\"AA=\", 3},\n+\t\t{\"AA==\", 4},\n+\t\t{\"AA===\", 5},\n+\t\t{\"AAAA=\", 5},\n+\t\t{\"AAAA==\", 6},\n+\t\t{\"AAAAA=\", 6},\n+\t\t{\"AAAAA==\", 7},\n+\t\t{\"A=======\", 1},\n+\t\t{\"AA======\", -1},\n+\t\t{\"AAA=====\", 3},\n+\t\t{\"AAAA====\", -1},\n+\t\t{\"AAAAA===\", -1},\n+\t\t{\"AAAAAA==\", 6},\n+\t\t{\"AAAAAAA=\", -1},\n+\t\t{\"AAAAAAAA\", -1},\n \t}\n-\n-\tfor _, e := range examples {\n-\t\tdbuf := make([]byte, StdEncoding.DecodedLen(len(e.e)))\n-\t\t_, err := StdEncoding.Decode(dbuf, []byte(e.e))\n+\tfor _, tc := range testCases {\n+\t\tdbuf := make([]byte, StdEncoding.DecodedLen(len(tc.input)))\n+\t\t_, err := StdEncoding.Decode(dbuf, []byte(tc.input))\n+\t\tif tc.offset == -1 {\n+\t\t\tif err != nil {\n+\t\t\t\tt.Error(\"Decoder wrongly detected coruption in\", tc.input)\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n \t\tswitch err := err.(type) {\n \t\tcase CorruptInputError:\n-\t\t\ttestEqual(t, \"Corruption in %q at offset %v, want %v\", e.e, int(err), e.p)\n+\t\t\ttestEqual(t, \"Corruption in %q at offset %v, want %v\", tc.input, int(err), tc.offset)\n \t\tdefault:\n-\t\t\tt.Error(\"Decoder failed to detect corruption in\", e)\n+\t\t\tt.Error(\"Decoder failed to detect corruption in\", tc)\n \t\t}\n \t}\n }\n@@ -195,9 +217,21 @@ func TestBig(t *testing.T) {\n \t}\n }\n \n+func testStringEncoding(t *testing.T, expected string, examples []string) {\n+\tfor _, e := range examples {\n+\t\tbuf, err := StdEncoding.DecodeString(e)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Decode(%q) failed: %v\", e, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif s := string(buf); s != expected {\n+\t\t\tt.Errorf(\"Decode(%q) = %q, want %q\", e, s, expected)\n+\t\t}\n+\t}\n+}\n+\n func TestNewLineCharacters(t *testing.T) {\n \t// Each of these should decode to the string \"sure\", without errors.\n-\tconst expected = \"sure\"\n \texamples := []string{\n \t\t\"ON2XEZI=\",\n \t\t\"ON2XEZI=\\r\",\n@@ -209,14 +243,44 @@ func TestNewLineCharacters(t *testing.T) {\n \t\t\"ON2XEZ\\nI=\",\n \t\t\"ON2XEZI\\n=\",\n \t}\n-\tfor _, e := range examples {\n-\t\tbuf, err := StdEncoding.DecodeString(e)\n-\t\tif err != nil {\n-\t\t\tt.Errorf(\"Decode(%q) failed: %v\", e, err)\n-\t\t\tcontinue\n-\t\t}\n-\t\tif s := string(buf); s != expected {\n-\t\t\tt.Errorf(\"Decode(%q) = %q, want %q\", e, s, expected)\n-\t\t}\n+\ttestStringEncoding(t, \"sure\", examples)\n+\n+\t// Each of these should decode to the string \"foobar\", without errors.\n+\texamples = []string{\n+\t\t\"MZXW6YTBOI======\",\n+\t\t\"MZXW6YTBOI=\\r\\n=====\",\n+\t}\n+\ttestStringEncoding(t, \"foobar\", examples)\n+}\n+\n+func TestDecoderIssue4779(t *testing.T) {\n+\tencoded := `JRXXEZLNEBUXA43VNUQGI33MN5ZCA43JOQQGC3LFOQWCAY3PNZZWKY3UMV2HK4\n+RAMFSGS4DJONUWG2LOM4QGK3DJOQWCA43FMQQGI3YKMVUXK43NN5SCA5DFNVYG64RANFXGG2LENFSH\n+K3TUEB2XIIDMMFRG64TFEBSXIIDEN5WG64TFEBWWCZ3OMEQGC3DJOF2WCLRAKV2CAZLONFWQUYLEEB\n+WWS3TJNUQHMZLONFQW2LBAOF2WS4ZANZXXG5DSOVSCAZLYMVZGG2LUMF2GS33OEB2WY3DBNVRW6IDM\n+MFRG64TJOMQG42LTNEQHK5AKMFWGS4LVNFYCAZLYEBSWCIDDN5WW233EN4QGG33OONSXC5LBOQXCAR\n+DVNFZSAYLVORSSA2LSOVZGKIDEN5WG64RANFXAU4TFOBZGK2DFNZSGK4TJOQQGS3RAOZXWY5LQORQX\n+IZJAOZSWY2LUEBSXG43FEBRWS3DMOVWSAZDPNRXXEZJAMV2SAZTVM5UWC5BANZ2WY3DBBJYGC4TJMF\n+2HK4ROEBCXQY3FOB2GK5LSEBZWS3TUEBXWGY3BMVRWC5BAMN2XA2LEMF2GC5BANZXW4IDQOJXWSZDF\n+NZ2CYIDTOVXHIIDJNYFGG5LMOBQSA4LVNEQG6ZTGNFRWSYJAMRSXGZLSOVXHIIDNN5WGY2LUEBQW42\n+LNEBUWIIDFON2CA3DBMJXXE5LNFY==\n+====`\n+\tencodedShort := strings.Replace(encoded, \"\\n\", \"\", -1)\n+\n+\tdec := NewDecoder(StdEncoding, bytes.NewBufferString(encoded))\n+\tres1, err := ioutil.ReadAll(dec)\n+\tif err != nil {\n+\t\tt.Errorf(\"ReadAll failed: %v\", err)\n+\t}\n+\n+\tdec = NewDecoder(StdEncoding, bytes.NewBufferString(encodedShort))\n+\tvar res2 []byte\n+\tres2, err = ioutil.ReadAll(dec)\n+\tif err != nil {\n+\t\tt.Errorf(\"ReadAll failed: %v\", err)\n+\t}\n+\n+\tif !bytes.Equal(res1, res2) {\n+\t\tt.Error(\"Decoded results not equal\")\n \t}\n }"}, {"sha": "85e398fd0b7be3b59e85df6f8a565cb53d0f8e91", "filename": "libgo/go/encoding/base64/base64.go", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -6,8 +6,10 @@\n package base64\n \n import (\n+\t\"bytes\"\n \t\"io\"\n \t\"strconv\"\n+\t\"strings\"\n )\n \n /*\n@@ -49,6 +51,13 @@ var StdEncoding = NewEncoding(encodeStd)\n // It is typically used in URLs and file names.\n var URLEncoding = NewEncoding(encodeURL)\n \n+var removeNewlinesMapper = func(r rune) rune {\n+\tif r == '\\r' || r == '\\n' {\n+\t\treturn -1\n+\t}\n+\treturn r\n+}\n+\n /*\n  * Encoder\n  */\n@@ -208,42 +217,37 @@ func (e CorruptInputError) Error() string {\n \n // decode is like Decode but returns an additional 'end' value, which\n // indicates if end-of-message padding was encountered and thus any\n-// additional data is an error.\n+// additional data is an error. This method assumes that src has been\n+// stripped of all supported whitespace ('\\r' and '\\n').\n func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n-\tosrc := src\n+\tolen := len(src)\n \tfor len(src) > 0 && !end {\n \t\t// Decode quantum using the base64 alphabet\n \t\tvar dbuf [4]byte\n \t\tdlen := 4\n \n \t\tfor j := 0; j < 4; {\n \t\t\tif len(src) == 0 {\n-\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - j)\n+\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - j)\n \t\t\t}\n \t\t\tin := src[0]\n \t\t\tsrc = src[1:]\n-\t\t\tif in == '\\r' || in == '\\n' {\n-\t\t\t\t// Ignore this character.\n-\t\t\t\tcontinue\n-\t\t\t}\n \t\t\tif in == '=' && j >= 2 && len(src) < 4 {\n-\t\t\t\t// We've reached the end and there's\n-\t\t\t\t// padding\n-\t\t\t\tif len(src) == 0 && j == 2 {\n+\t\t\t\t// We've reached the end and there's padding\n+\t\t\t\tif len(src)+j < 4-1 {\n \t\t\t\t\t// not enough padding\n-\t\t\t\t\treturn n, false, CorruptInputError(len(osrc))\n+\t\t\t\t\treturn n, false, CorruptInputError(olen)\n \t\t\t\t}\n \t\t\t\tif len(src) > 0 && src[0] != '=' {\n \t\t\t\t\t// incorrect padding\n-\t\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - 1)\n+\t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n \t\t\t\t}\n-\t\t\t\tdlen = j\n-\t\t\t\tend = true\n+\t\t\t\tdlen, end = j, true\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tdbuf[j] = enc.decodeMap[in]\n \t\t\tif dbuf[j] == 0xFF {\n-\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - 1)\n+\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n \t\t\t}\n \t\t\tj++\n \t\t}\n@@ -273,12 +277,14 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n // number of bytes successfully written and CorruptInputError.\n // New line characters (\\r and \\n) are ignored.\n func (enc *Encoding) Decode(dst, src []byte) (n int, err error) {\n+\tsrc = bytes.Map(removeNewlinesMapper, src)\n \tn, _, err = enc.decode(dst, src)\n \treturn\n }\n \n // DecodeString returns the bytes represented by the base64 string s.\n func (enc *Encoding) DecodeString(s string) ([]byte, error) {\n+\ts = strings.Map(removeNewlinesMapper, s)\n \tdbuf := make([]byte, enc.DecodedLen(len(s)))\n \tn, err := enc.Decode(dbuf, []byte(s))\n \treturn dbuf[:n], err\n@@ -343,9 +349,34 @@ func (d *decoder) Read(p []byte) (n int, err error) {\n \treturn n, d.err\n }\n \n+type newlineFilteringReader struct {\n+\twrapped io.Reader\n+}\n+\n+func (r *newlineFilteringReader) Read(p []byte) (int, error) {\n+\tn, err := r.wrapped.Read(p)\n+\tfor n > 0 {\n+\t\toffset := 0\n+\t\tfor i, b := range p[0:n] {\n+\t\t\tif b != '\\r' && b != '\\n' {\n+\t\t\t\tif i != offset {\n+\t\t\t\t\tp[offset] = b\n+\t\t\t\t}\n+\t\t\t\toffset++\n+\t\t\t}\n+\t\t}\n+\t\tif offset > 0 {\n+\t\t\treturn offset, err\n+\t\t}\n+\t\t// Previous buffer entirely whitespace, read again\n+\t\tn, err = r.wrapped.Read(p)\n+\t}\n+\treturn n, err\n+}\n+\n // NewDecoder constructs a new base64 stream decoder.\n func NewDecoder(enc *Encoding, r io.Reader) io.Reader {\n-\treturn &decoder{enc: enc, r: r}\n+\treturn &decoder{enc: enc, r: &newlineFilteringReader{r}}\n }\n \n // DecodedLen returns the maximum length in bytes of the decoded data"}, {"sha": "579591a88d7a0b44f33eef97c1beb53f7eba34fe", "filename": "libgo/go/encoding/base64/base64_test.go", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"errors\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"strings\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -142,30 +143,39 @@ func TestDecoderBuffering(t *testing.T) {\n }\n \n func TestDecodeCorrupt(t *testing.T) {\n-\ttype corrupt struct {\n-\t\te string\n-\t\tp int\n-\t}\n-\texamples := []corrupt{\n+\ttestCases := []struct {\n+\t\tinput  string\n+\t\toffset int // -1 means no corruption.\n+\t}{\n+\t\t{\"\", -1},\n \t\t{\"!!!!\", 0},\n \t\t{\"x===\", 1},\n \t\t{\"AA=A\", 2},\n \t\t{\"AAA=AAAA\", 3},\n \t\t{\"AAAAA\", 4},\n \t\t{\"AAAAAA\", 4},\n \t\t{\"A=\", 1},\n+\t\t{\"A==\", 1},\n \t\t{\"AA=\", 3},\n+\t\t{\"AA==\", -1},\n+\t\t{\"AAA=\", -1},\n+\t\t{\"AAAA\", -1},\n \t\t{\"AAAAAA=\", 7},\n \t}\n-\n-\tfor _, e := range examples {\n-\t\tdbuf := make([]byte, StdEncoding.DecodedLen(len(e.e)))\n-\t\t_, err := StdEncoding.Decode(dbuf, []byte(e.e))\n+\tfor _, tc := range testCases {\n+\t\tdbuf := make([]byte, StdEncoding.DecodedLen(len(tc.input)))\n+\t\t_, err := StdEncoding.Decode(dbuf, []byte(tc.input))\n+\t\tif tc.offset == -1 {\n+\t\t\tif err != nil {\n+\t\t\t\tt.Error(\"Decoder wrongly detected coruption in\", tc.input)\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n \t\tswitch err := err.(type) {\n \t\tcase CorruptInputError:\n-\t\t\ttestEqual(t, \"Corruption in %q at offset %v, want %v\", e.e, int(err), e.p)\n+\t\t\ttestEqual(t, \"Corruption in %q at offset %v, want %v\", tc.input, int(err), tc.offset)\n \t\tdefault:\n-\t\t\tt.Error(\"Decoder failed to detect corruption in\", e)\n+\t\t\tt.Error(\"Decoder failed to detect corruption in\", tc)\n \t\t}\n \t}\n }\n@@ -216,6 +226,8 @@ func TestNewLineCharacters(t *testing.T) {\n \t\t\"c3V\\nyZ\\rQ==\",\n \t\t\"c3VyZ\\nQ==\",\n \t\t\"c3VyZQ\\n==\",\n+\t\t\"c3VyZQ=\\n=\",\n+\t\t\"c3VyZQ=\\r\\n\\r\\n=\",\n \t}\n \tfor _, e := range examples {\n \t\tbuf, err := StdEncoding.DecodeString(e)\n@@ -257,6 +269,7 @@ func TestDecoderIssue3577(t *testing.T) {\n \twantErr := errors.New(\"my error\")\n \tnext <- nextRead{5, nil}\n \tnext <- nextRead{10, wantErr}\n+\tnext <- nextRead{0, wantErr}\n \td := NewDecoder(StdEncoding, &faultInjectReader{\n \t\tsource: \"VHdhcyBicmlsbGlnLCBhbmQgdGhlIHNsaXRoeSB0b3Zlcw==\", // twas brillig...\n \t\tnextc:  next,\n@@ -275,3 +288,40 @@ func TestDecoderIssue3577(t *testing.T) {\n \t\tt.Errorf(\"timeout; Decoder blocked without returning an error\")\n \t}\n }\n+\n+func TestDecoderIssue4779(t *testing.T) {\n+\tencoded := `CP/EAT8AAAEF\n+AQEBAQEBAAAAAAAAAAMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAAB\n+BAEDAgQCBQcGCAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHx\n+Y3M1FqKygyZEk1RkRcKjdDYX0lXiZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm\n+9jdHV2d3h5ent8fX5/cRAAICAQIEBAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS\n+0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0\n+pbXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x//aAAwDAQACEQMRAD8A9VSSSSUpJJJJSkkkJ+Tj\n+1kiy1jCJJDnAcCTykpKkuQ6p/jN6FgmxlNduXawwAzaGH+V6jn/R/wCt71zdn+N/qL3kVYFNYB4N\n+ji6PDVjWpKp9TSXnvTf8bFNjg3qOEa2n6VlLpj/rT/pf567DpX1i6L1hs9Py67X8mqdtg/rUWbbf\n++gkp0kkkklKSSSSUpJJJJT//0PVUkkklKVLq3WMDpGI7KzrNjADtYNXvI/Mqr/Pd/q9W3vaxjnvM\n+NaCXE9gNSvGPrf8AWS3qmba5jjsJhoB0DAf0NDf6sevf+/lf8Hj0JJATfWT6/dV6oXU1uOLQeKKn\n+EQP+Hubtfe/+R7Mf/g7f5xcocp++Z11JMCJPgFBxOg7/AOuqDx8I/ikpkXkmSdU8mJIJA/O8EMAy\n+j+mSARB/17pKVXYWHXjsj7yIex0PadzXMO1zT5KHoNA3HT8ietoGhgjsfA+CSnvvqh/jJtqsrwOv\n+2b6NGNzXfTYexzJ+nU7/ALkf4P8Awv6P9KvTQQ4AgyDqCF85Pho3CTB7eHwXoH+LT65uZbX9X+o2\n+bqbPb06551Y4\n+`\n+\tencodedShort := strings.Replace(encoded, \"\\n\", \"\", -1)\n+\n+\tdec := NewDecoder(StdEncoding, bytes.NewBufferString(encoded))\n+\tres1, err := ioutil.ReadAll(dec)\n+\tif err != nil {\n+\t\tt.Errorf(\"ReadAll failed: %v\", err)\n+\t}\n+\n+\tdec = NewDecoder(StdEncoding, bytes.NewBufferString(encodedShort))\n+\tvar res2 []byte\n+\tres2, err = ioutil.ReadAll(dec)\n+\tif err != nil {\n+\t\tt.Errorf(\"ReadAll failed: %v\", err)\n+\t}\n+\n+\tif !bytes.Equal(res1, res2) {\n+\t\tt.Error(\"Decoded results not equal\")\n+\t}\n+}"}, {"sha": "edbac197d6440fd5b622ce3a6b641ccd448eb1d1", "filename": "libgo/go/encoding/binary/binary.go", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -167,9 +167,9 @@ func Read(r io.Reader, order ByteOrder, data interface{}) error {\n \tdefault:\n \t\treturn errors.New(\"binary.Read: invalid type \" + d.Type().String())\n \t}\n-\tsize := dataSize(v)\n-\tif size < 0 {\n-\t\treturn errors.New(\"binary.Read: invalid type \" + v.Type().String())\n+\tsize, err := dataSize(v)\n+\tif err != nil {\n+\t\treturn errors.New(\"binary.Read: \" + err.Error())\n \t}\n \td := &decoder{order: order, buf: make([]byte, size)}\n \tif _, err := io.ReadFull(r, d.buf); err != nil {\n@@ -247,64 +247,68 @@ func Write(w io.Writer, order ByteOrder, data interface{}) error {\n \n \t// Fallback to reflect-based encoding.\n \tv := reflect.Indirect(reflect.ValueOf(data))\n-\tsize := dataSize(v)\n-\tif size < 0 {\n-\t\treturn errors.New(\"binary.Write: invalid type \" + v.Type().String())\n+\tsize, err := dataSize(v)\n+\tif err != nil {\n+\t\treturn errors.New(\"binary.Write: \" + err.Error())\n \t}\n \tbuf := make([]byte, size)\n \te := &encoder{order: order, buf: buf}\n \te.value(v)\n-\t_, err := w.Write(buf)\n+\t_, err = w.Write(buf)\n \treturn err\n }\n \n // Size returns how many bytes Write would generate to encode the value v, which\n // must be a fixed-size value or a slice of fixed-size values, or a pointer to such data.\n func Size(v interface{}) int {\n-\treturn dataSize(reflect.Indirect(reflect.ValueOf(v)))\n+\tn, err := dataSize(reflect.Indirect(reflect.ValueOf(v)))\n+\tif err != nil {\n+\t\treturn -1\n+\t}\n+\treturn n\n }\n \n // dataSize returns the number of bytes the actual data represented by v occupies in memory.\n // For compound structures, it sums the sizes of the elements. Thus, for instance, for a slice\n // it returns the length of the slice times the element size and does not count the memory\n // occupied by the header.\n-func dataSize(v reflect.Value) int {\n+func dataSize(v reflect.Value) (int, error) {\n \tif v.Kind() == reflect.Slice {\n-\t\telem := sizeof(v.Type().Elem())\n-\t\tif elem < 0 {\n-\t\t\treturn -1\n+\t\telem, err := sizeof(v.Type().Elem())\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n \t\t}\n-\t\treturn v.Len() * elem\n+\t\treturn v.Len() * elem, nil\n \t}\n \treturn sizeof(v.Type())\n }\n \n-func sizeof(t reflect.Type) int {\n+func sizeof(t reflect.Type) (int, error) {\n \tswitch t.Kind() {\n \tcase reflect.Array:\n-\t\tn := sizeof(t.Elem())\n-\t\tif n < 0 {\n-\t\t\treturn -1\n+\t\tn, err := sizeof(t.Elem())\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n \t\t}\n-\t\treturn t.Len() * n\n+\t\treturn t.Len() * n, nil\n \n \tcase reflect.Struct:\n \t\tsum := 0\n \t\tfor i, n := 0, t.NumField(); i < n; i++ {\n-\t\t\ts := sizeof(t.Field(i).Type)\n-\t\t\tif s < 0 {\n-\t\t\t\treturn -1\n+\t\t\ts, err := sizeof(t.Field(i).Type)\n+\t\t\tif err != nil {\n+\t\t\t\treturn 0, err\n \t\t\t}\n \t\t\tsum += s\n \t\t}\n-\t\treturn sum\n+\t\treturn sum, nil\n \n \tcase reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64,\n \t\treflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n \t\treflect.Float32, reflect.Float64, reflect.Complex64, reflect.Complex128:\n-\t\treturn int(t.Size())\n+\t\treturn int(t.Size()), nil\n \t}\n-\treturn -1\n+\treturn 0, errors.New(\"invalid type \" + t.String())\n }\n \n type coder struct {\n@@ -514,11 +518,12 @@ func (e *encoder) value(v reflect.Value) {\n }\n \n func (d *decoder) skip(v reflect.Value) {\n-\td.buf = d.buf[dataSize(v):]\n+\tn, _ := dataSize(v)\n+\td.buf = d.buf[n:]\n }\n \n func (e *encoder) skip(v reflect.Value) {\n-\tn := dataSize(v)\n+\tn, _ := dataSize(v)\n \tfor i := range e.buf[0:n] {\n \t\te.buf[i] = 0\n \t}"}, {"sha": "056f0998f27b94c01232f370360c65b65eab3636", "filename": "libgo/go/encoding/binary/binary_test.go", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"io\"\n \t\"math\"\n \t\"reflect\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -149,8 +150,14 @@ func TestWriteT(t *testing.T) {\n \n \ttv := reflect.Indirect(reflect.ValueOf(ts))\n \tfor i, n := 0, tv.NumField(); i < n; i++ {\n+\t\ttyp := tv.Field(i).Type().String()\n+\t\tif typ == \"[4]int\" {\n+\t\t\ttyp = \"int\" // the problem is int, not the [4]\n+\t\t}\n \t\tif err := Write(buf, BigEndian, tv.Field(i).Interface()); err == nil {\n \t\t\tt.Errorf(\"WriteT.%v: have err == nil, want non-nil\", tv.Field(i).Type())\n+\t\t} else if !strings.Contains(err.Error(), typ) {\n+\t\t\tt.Errorf(\"WriteT: have err == %q, want it to mention %s\", err, typ)\n \t\t}\n \t}\n }\n@@ -238,7 +245,7 @@ func BenchmarkReadStruct(b *testing.B) {\n \tbsr := &byteSliceReader{}\n \tvar buf bytes.Buffer\n \tWrite(&buf, BigEndian, &s)\n-\tn := dataSize(reflect.ValueOf(s))\n+\tn, _ := dataSize(reflect.ValueOf(s))\n \tb.SetBytes(int64(n))\n \tt := s\n \tb.ResetTimer()"}, {"sha": "3a2dfa3c74e2139199fa3922521d8ca783c7594c", "filename": "libgo/go/encoding/binary/varint.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fvarint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fbinary%2Fvarint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fvarint.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -120,7 +120,6 @@ func ReadUvarint(r io.ByteReader) (uint64, error) {\n \t\tx |= uint64(b&0x7f) << s\n \t\ts += 7\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // ReadVarint reads an encoded signed integer from r and returns it as an int64."}, {"sha": "b099caf60a805cb157d277db5ba636c72fff6c16", "filename": "libgo/go/encoding/csv/reader.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -171,7 +171,6 @@ func (r *Reader) ReadAll() (records [][]string, err error) {\n \t\t}\n \t\trecords = append(records, record)\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // readRune reads one rune from r, folding \\r\\n to \\n and keeping track\n@@ -213,7 +212,6 @@ func (r *Reader) skip(delim rune) error {\n \t\t\treturn nil\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // parseRecord reads and parses a single csv record from r.\n@@ -250,7 +248,6 @@ func (r *Reader) parseRecord() (fields []string, err error) {\n \t\t\treturn nil, err\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // parseField parses the next field in the record.  The read field is"}, {"sha": "9e38e31d5da252dce5a28b4d5b1dc9ba37103a29", "filename": "libgo/go/encoding/gob/codec_test.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -1191,10 +1191,8 @@ func TestInterface(t *testing.T) {\n \t\t\tif v1 != nil || v2 != nil {\n \t\t\t\tt.Errorf(\"item %d inconsistent nils\", i)\n \t\t\t}\n-\t\t\tcontinue\n-\t\t\tif v1.Square() != v2.Square() {\n-\t\t\t\tt.Errorf(\"item %d inconsistent values: %v %v\", i, v1, v2)\n-\t\t\t}\n+\t\t} else if v1.Square() != v2.Square() {\n+\t\t\tt.Errorf(\"item %d inconsistent values: %v %v\", i, v1, v2)\n \t\t}\n \t}\n }"}, {"sha": "7cc7565409c22ba2402ff85ba68be1ccf7d2903e", "filename": "libgo/go/encoding/gob/decode.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -1066,7 +1066,6 @@ func (dec *Decoder) compatibleType(fr reflect.Type, fw typeId, inProgress map[re\n \tcase reflect.Struct:\n \t\treturn true\n \t}\n-\treturn true\n }\n \n // typeString returns a human-readable description of the type identified by remoteId."}, {"sha": "ddcd80b1a7a3833dcc41389ef3b00703a981a806", "filename": "libgo/go/encoding/gob/gobencdec_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 20011 The Go Authors. All rights reserved.\n+// Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n@@ -348,7 +348,7 @@ func TestGobEncoderFieldsOfDifferentType(t *testing.T) {\n \t\tt.Fatal(\"decode error:\", err)\n \t}\n \tif y.G.s != \"XYZ\" {\n-\t\tt.Fatalf(\"expected `XYZ` got %c\", y.G.s)\n+\t\tt.Fatalf(\"expected `XYZ` got %q\", y.G.s)\n \t}\n }\n "}, {"sha": "f589675dd98da051effc6cf500b9c43107a49dea", "filename": "libgo/go/encoding/gob/timing_test.go", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -50,49 +50,51 @@ func BenchmarkEndToEndByteBuffer(b *testing.B) {\n }\n \n func TestCountEncodeMallocs(t *testing.T) {\n-\tdefer runtime.GOMAXPROCS(runtime.GOMAXPROCS(1))\n+\tif runtime.GOMAXPROCS(0) > 1 {\n+\t\tt.Skip(\"skipping; GOMAXPROCS>1\")\n+\t}\n+\n+\tconst N = 1000\n+\n \tvar buf bytes.Buffer\n \tenc := NewEncoder(&buf)\n \tbench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good men\")}\n-\tmemstats := new(runtime.MemStats)\n-\truntime.ReadMemStats(memstats)\n-\tmallocs := 0 - memstats.Mallocs\n-\tconst count = 1000\n-\tfor i := 0; i < count; i++ {\n+\n+\tallocs := testing.AllocsPerRun(N, func() {\n \t\terr := enc.Encode(bench)\n \t\tif err != nil {\n \t\t\tt.Fatal(\"encode:\", err)\n \t\t}\n-\t}\n-\truntime.ReadMemStats(memstats)\n-\tmallocs += memstats.Mallocs\n-\tfmt.Printf(\"mallocs per encode of type Bench: %d\\n\", mallocs/count)\n+\t})\n+\tfmt.Printf(\"mallocs per encode of type Bench: %v\\n\", allocs)\n }\n \n func TestCountDecodeMallocs(t *testing.T) {\n-\tdefer runtime.GOMAXPROCS(runtime.GOMAXPROCS(1))\n+\tif runtime.GOMAXPROCS(0) > 1 {\n+\t\tt.Skip(\"skipping; GOMAXPROCS>1\")\n+\t}\n+\n+\tconst N = 1000\n+\n \tvar buf bytes.Buffer\n \tenc := NewEncoder(&buf)\n \tbench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good men\")}\n-\tconst count = 1000\n-\tfor i := 0; i < count; i++ {\n+\n+\t// Fill the buffer with enough to decode\n+\ttesting.AllocsPerRun(N, func() {\n \t\terr := enc.Encode(bench)\n \t\tif err != nil {\n \t\t\tt.Fatal(\"encode:\", err)\n \t\t}\n-\t}\n+\t})\n+\n \tdec := NewDecoder(&buf)\n-\tmemstats := new(runtime.MemStats)\n-\truntime.ReadMemStats(memstats)\n-\tmallocs := 0 - memstats.Mallocs\n-\tfor i := 0; i < count; i++ {\n+\tallocs := testing.AllocsPerRun(N, func() {\n \t\t*bench = Bench{}\n \t\terr := dec.Decode(&bench)\n \t\tif err != nil {\n \t\t\tt.Fatal(\"decode:\", err)\n \t\t}\n-\t}\n-\truntime.ReadMemStats(memstats)\n-\tmallocs += memstats.Mallocs\n-\tfmt.Printf(\"mallocs per decode of type Bench: %d\\n\", mallocs/count)\n+\t})\n+\tfmt.Printf(\"mallocs per decode of type Bench: %v\\n\", allocs)\n }"}, {"sha": "7fa0b499f02f781b181dafb22cb8ad5fe5d51fb4", "filename": "libgo/go/encoding/gob/type.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -526,7 +526,6 @@ func newTypeObject(name string, ut *userTypeInfo, rt reflect.Type) (gobType, err\n \tdefault:\n \t\treturn nil, errors.New(\"gob NewTypeObject can't handle type: \" + rt.String())\n \t}\n-\treturn nil, nil\n }\n \n // isExported reports whether this is an exported - upper case - name."}, {"sha": "62ac294b89f3bd113c6b63f6974a1c4f7d147dcb", "filename": "libgo/go/encoding/json/decode.go", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -33,6 +33,10 @@ import (\n // the value pointed at by the pointer.  If the pointer is nil, Unmarshal\n // allocates a new value for it to point to.\n //\n+// To unmarshal JSON into a struct, Unmarshal matches incoming object\n+// keys to the keys used by Marshal (either the struct field name or its tag),\n+// preferring an exact match but also accepting a case-insensitive match.\n+//\n // To unmarshal JSON into an interface value, Unmarshal unmarshals\n // the JSON into the concrete value contained in the interface value.\n // If the interface value is nil, that is, has no concrete value stored in it,\n@@ -51,17 +55,22 @@ import (\n // If no more serious errors are encountered, Unmarshal returns\n // an UnmarshalTypeError describing the earliest such error.\n //\n+// When unmarshaling quoted strings, invalid UTF-8 or\n+// invalid UTF-16 surrogate pairs are not treated as an error.\n+// Instead, they are replaced by the Unicode replacement\n+// character U+FFFD.\n+//\n func Unmarshal(data []byte, v interface{}) error {\n-\td := new(decodeState).init(data)\n-\n-\t// Quick check for well-formedness.\n+\t// Check for well-formedness.\n \t// Avoids filling out half a data structure\n \t// before discovering a JSON syntax error.\n+\tvar d decodeState\n \terr := checkValid(data, &d.scan)\n \tif err != nil {\n \t\treturn err\n \t}\n \n+\td.init(data)\n \treturn d.unmarshal(v)\n }\n \n@@ -252,6 +261,16 @@ func (d *decodeState) value(v reflect.Value) {\n \t\t}\n \t\td.scan.step(&d.scan, '\"')\n \t\td.scan.step(&d.scan, '\"')\n+\n+\t\tn := len(d.scan.parseState)\n+\t\tif n > 0 && d.scan.parseState[n-1] == parseObjectKey {\n+\t\t\t// d.scan thinks we just read an object key; finish the object\n+\t\t\td.scan.step(&d.scan, ':')\n+\t\t\td.scan.step(&d.scan, '\"')\n+\t\t\td.scan.step(&d.scan, '\"')\n+\t\t\td.scan.step(&d.scan, '}')\n+\t\t}\n+\n \t\treturn\n \t}\n \n@@ -730,19 +749,19 @@ func (d *decodeState) valueInterface() interface{} {\n \tswitch d.scanWhile(scanSkipSpace) {\n \tdefault:\n \t\td.error(errPhase)\n+\t\tpanic(\"unreachable\")\n \tcase scanBeginArray:\n \t\treturn d.arrayInterface()\n \tcase scanBeginObject:\n \t\treturn d.objectInterface()\n \tcase scanBeginLiteral:\n \t\treturn d.literalInterface()\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // arrayInterface is like array but returns []interface{}.\n func (d *decodeState) arrayInterface() []interface{} {\n-\tvar v []interface{}\n+\tvar v = make([]interface{}, 0)\n \tfor {\n \t\t// Look ahead for ] - can only happen on first iteration.\n \t\top := d.scanWhile(scanSkipSpace)\n@@ -849,7 +868,6 @@ func (d *decodeState) literalInterface() interface{} {\n \t\t}\n \t\treturn n\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // getu4 decodes \\uXXXX from the beginning of s, returning the hex value,"}, {"sha": "f845f69ab7f4e7bb0cbfc83a98d4a425c36593f9", "filename": "libgo/go/encoding/json/decode_test.go", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -11,6 +11,7 @@ import (\n \t\"reflect\"\n \t\"strings\"\n \t\"testing\"\n+\t\"time\"\n )\n \n type T struct {\n@@ -29,7 +30,7 @@ type V struct {\n \tF3 Number\n }\n \n-// ifaceNumAsFloat64/ifaceNumAsNumber are used to test unmarshalling with and\n+// ifaceNumAsFloat64/ifaceNumAsNumber are used to test unmarshaling with and\n // without UseNumber\n var ifaceNumAsFloat64 = map[string]interface{}{\n \t\"k1\": float64(1),\n@@ -239,6 +240,12 @@ var unmarshalTests = []unmarshalTest{\n \t{in: `[1, 2, 3]`, ptr: new([1]int), out: [1]int{1}},\n \t{in: `[1, 2, 3]`, ptr: new([5]int), out: [5]int{1, 2, 3, 0, 0}},\n \n+\t// empty array to interface test\n+\t{in: `[]`, ptr: new([]interface{}), out: []interface{}{}},\n+\t{in: `null`, ptr: new([]interface{}), out: []interface{}(nil)},\n+\t{in: `{\"T\":[]}`, ptr: new(map[string]interface{}), out: map[string]interface{}{\"T\": []interface{}{}}},\n+\t{in: `{\"T\":null}`, ptr: new(map[string]interface{}), out: map[string]interface{}{\"T\": interface{}(nil)}},\n+\n \t// composite tests\n \t{in: allValueIndent, ptr: new(All), out: allValue},\n \t{in: allValueCompact, ptr: new(All), out: allValue},\n@@ -323,6 +330,43 @@ var unmarshalTests = []unmarshalTest{\n \t\tptr: new(S10),\n \t\tout: S10{S13: S13{S8: S8{S9: S9{Y: 2}}}},\n \t},\n+\n+\t// invalid UTF-8 is coerced to valid UTF-8.\n+\t{\n+\t\tin:  \"\\\"hello\\xffworld\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\xc2\\xc2world\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffd\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\xc2\\xffworld\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffd\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\\\ud800world\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\\\ud800\\\\ud800world\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffd\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\\\ud800\\\\ud800world\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffd\\ufffdworld\",\n+\t},\n+\t{\n+\t\tin:  \"\\\"hello\\xed\\xa0\\x80\\xed\\xb0\\x80world\\\"\",\n+\t\tptr: new(string),\n+\t\tout: \"hello\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffdworld\",\n+\t},\n }\n \n func TestMarshal(t *testing.T) {\n@@ -1107,3 +1151,43 @@ func TestUnmarshalUnexported(t *testing.T) {\n \t\tt.Errorf(\"got %q, want %q\", out, want)\n \t}\n }\n+\n+// Time3339 is a time.Time which encodes to and from JSON\n+// as an RFC 3339 time in UTC.\n+type Time3339 time.Time\n+\n+func (t *Time3339) UnmarshalJSON(b []byte) error {\n+\tif len(b) < 2 || b[0] != '\"' || b[len(b)-1] != '\"' {\n+\t\treturn fmt.Errorf(\"types: failed to unmarshal non-string value %q as an RFC 3339 time\", b)\n+\t}\n+\ttm, err := time.Parse(time.RFC3339, string(b[1:len(b)-1]))\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\t*t = Time3339(tm)\n+\treturn nil\n+}\n+\n+func TestUnmarshalJSONLiteralError(t *testing.T) {\n+\tvar t3 Time3339\n+\terr := Unmarshal([]byte(`\"0000-00-00T00:00:00Z\"`), &t3)\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected error; got time %v\", time.Time(t3))\n+\t}\n+\tif !strings.Contains(err.Error(), \"range\") {\n+\t\tt.Errorf(\"got err = %v; want out of range error\", err)\n+\t}\n+}\n+\n+// Test that extra object elements in an array do not result in a\n+// \"data changing underfoot\" error.\n+// Issue 3717\n+func TestSkipArrayObjects(t *testing.T) {\n+\tjson := `[{}]`\n+\tvar dest [0]interface{}\n+\n+\terr := Unmarshal([]byte(json), &dest)\n+\tif err != nil {\n+\t\tt.Errorf(\"got error %q, want nil\", err)\n+\t}\n+}"}, {"sha": "85727ba61c0806b24aafac197a9a5982366a513e", "filename": "libgo/go/encoding/json/encode.go", "status": "modified", "additions": 82, "deletions": 16, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -3,7 +3,8 @@\n // license that can be found in the LICENSE file.\n \n // Package json implements encoding and decoding of JSON objects as defined in\n-// RFC 4627.\n+// RFC 4627. The mapping between JSON objects and Go values is described\n+// in the documentation for the Marshal and Unmarshal functions.\n //\n // See \"JSON and Go\" for an introduction to this package:\n // http://golang.org/doc/articles/json_and_go.html\n@@ -38,8 +39,8 @@ import (\n //\n // Floating point, integer, and Number values encode as JSON numbers.\n //\n-// String values encode as JSON strings, with each invalid UTF-8 sequence\n-// replaced by the encoding of the Unicode replacement character U+FFFD.\n+// String values encode as JSON strings. InvalidUTF8Error will be returned\n+// if an invalid UTF-8 sequence is encountered.\n // The angle brackets \"<\" and \">\" are escaped to \"\\u003c\" and \"\\u003e\"\n // to keep some browsers from misinterpreting JSON output as HTML.\n //\n@@ -86,9 +87,21 @@ import (\n // underscores and slashes.\n //\n // Anonymous struct fields are usually marshaled as if their inner exported fields\n-// were fields in the outer struct, subject to the usual Go visibility rules.\n+// were fields in the outer struct, subject to the usual Go visibility rules amended\n+// as described in the next paragraph.\n // An anonymous struct field with a name given in its JSON tag is treated as\n-// having that name instead of as anonymous.\n+// having that name, rather than being anonymous.\n+//\n+// The Go visibility rules for struct fields are amended for JSON when\n+// deciding which field to marshal or unmarshal. If there are\n+// multiple fields at the same level, and that level is the least\n+// nested (and would therefore be the nesting level selected by the\n+// usual Go rules), the following extra rules apply:\n+//\n+// 1) Of those fields, if any are JSON-tagged, only tagged fields are considered,\n+// even if there are multiple untagged fields that would otherwise conflict.\n+// 2) If there is exactly one field (tagged or not according to the first rule), that is selected.\n+// 3) Otherwise there are multiple fields, and all are ignored; no error occurs.\n //\n // Handling of anonymous struct fields is new in Go 1.1.\n // Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of\n@@ -187,8 +200,10 @@ func (e *UnsupportedValueError) Error() string {\n \treturn \"json: unsupported value: \" + e.Str\n }\n \n+// An InvalidUTF8Error is returned by Marshal when attempting\n+// to encode a string value with invalid UTF-8 sequences.\n type InvalidUTF8Error struct {\n-\tS string\n+\tS string // the whole string value that caused the error\n }\n \n func (e *InvalidUTF8Error) Error() string {\n@@ -654,27 +669,78 @@ func typeFields(t reflect.Type) []field {\n \n \tsort.Sort(byName(fields))\n \n-\t// Remove fields with annihilating name collisions\n-\t// and also fields shadowed by fields with explicit JSON tags.\n-\tname := \"\"\n+\t// Delete all fields that are hidden by the Go rules for embedded fields,\n+\t// except that fields with JSON tags are promoted.\n+\n+\t// The fields are sorted in primary order of name, secondary order\n+\t// of field index length. Loop over names; for each name, delete\n+\t// hidden fields by choosing the one dominant field that survives.\n \tout := fields[:0]\n-\tfor _, f := range fields {\n-\t\tif f.name != name {\n-\t\t\tname = f.name\n-\t\t\tout = append(out, f)\n+\tfor advance, i := 0, 0; i < len(fields); i += advance {\n+\t\t// One iteration per name.\n+\t\t// Find the sequence of fields with the name of this first field.\n+\t\tfi := fields[i]\n+\t\tname := fi.name\n+\t\tfor advance = 1; i+advance < len(fields); advance++ {\n+\t\t\tfj := fields[i+advance]\n+\t\t\tif fj.name != name {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tif advance == 1 { // Only one field with this name\n+\t\t\tout = append(out, fi)\n \t\t\tcontinue\n \t\t}\n-\t\tif n := len(out); n > 0 && out[n-1].name == name && (!out[n-1].tag || f.tag) {\n-\t\t\tout = out[:n-1]\n+\t\tdominant, ok := dominantField(fields[i : i+advance])\n+\t\tif ok {\n+\t\t\tout = append(out, dominant)\n \t\t}\n \t}\n-\tfields = out\n \n+\tfields = out\n \tsort.Sort(byIndex(fields))\n \n \treturn fields\n }\n \n+// dominantField looks through the fields, all of which are known to\n+// have the same name, to find the single field that dominates the\n+// others using Go's embedding rules, modified by the presence of\n+// JSON tags. If there are multiple top-level fields, the boolean\n+// will be false: This condition is an error in Go and we skip all\n+// the fields.\n+func dominantField(fields []field) (field, bool) {\n+\t// The fields are sorted in increasing index-length order. The winner\n+\t// must therefore be one with the shortest index length. Drop all\n+\t// longer entries, which is easy: just truncate the slice.\n+\tlength := len(fields[0].index)\n+\ttagged := -1 // Index of first tagged field.\n+\tfor i, f := range fields {\n+\t\tif len(f.index) > length {\n+\t\t\tfields = fields[:i]\n+\t\t\tbreak\n+\t\t}\n+\t\tif f.tag {\n+\t\t\tif tagged >= 0 {\n+\t\t\t\t// Multiple tagged fields at the same level: conflict.\n+\t\t\t\t// Return no field.\n+\t\t\t\treturn field{}, false\n+\t\t\t}\n+\t\t\ttagged = i\n+\t\t}\n+\t}\n+\tif tagged >= 0 {\n+\t\treturn fields[tagged], true\n+\t}\n+\t// All remaining fields have the same length. If there's more than one,\n+\t// we have a conflict (two fields named \"X\" at the same level) and we\n+\t// return no field.\n+\tif len(fields) > 1 {\n+\t\treturn field{}, false\n+\t}\n+\treturn fields[0], true\n+}\n+\n var fieldCache struct {\n \tsync.RWMutex\n \tm map[reflect.Type][]field"}, {"sha": "5be0a992e1cab8522d6353ea6ed343ff07d3dfed", "filename": "libgo/go/encoding/json/encode_test.go", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -206,3 +206,107 @@ func TestAnonymousNonstruct(t *testing.T) {\n \t\tt.Errorf(\"got %q, want %q\", got, want)\n \t}\n }\n+\n+type BugA struct {\n+\tS string\n+}\n+\n+type BugB struct {\n+\tBugA\n+\tS string\n+}\n+\n+type BugC struct {\n+\tS string\n+}\n+\n+// Legal Go: We never use the repeated embedded field (S).\n+type BugX struct {\n+\tA int\n+\tBugA\n+\tBugB\n+}\n+\n+// Issue 5245.\n+func TestEmbeddedBug(t *testing.T) {\n+\tv := BugB{\n+\t\tBugA{\"A\"},\n+\t\t\"B\",\n+\t}\n+\tb, err := Marshal(v)\n+\tif err != nil {\n+\t\tt.Fatal(\"Marshal:\", err)\n+\t}\n+\twant := `{\"S\":\"B\"}`\n+\tgot := string(b)\n+\tif got != want {\n+\t\tt.Fatalf(\"Marshal: got %s want %s\", got, want)\n+\t}\n+\t// Now check that the duplicate field, S, does not appear.\n+\tx := BugX{\n+\t\tA: 23,\n+\t}\n+\tb, err = Marshal(x)\n+\tif err != nil {\n+\t\tt.Fatal(\"Marshal:\", err)\n+\t}\n+\twant = `{\"A\":23}`\n+\tgot = string(b)\n+\tif got != want {\n+\t\tt.Fatalf(\"Marshal: got %s want %s\", got, want)\n+\t}\n+}\n+\n+type BugD struct { // Same as BugA after tagging.\n+\tXXX string `json:\"S\"`\n+}\n+\n+// BugD's tagged S field should dominate BugA's.\n+type BugY struct {\n+\tBugA\n+\tBugD\n+}\n+\n+// Test that a field with a tag dominates untagged fields.\n+func TestTaggedFieldDominates(t *testing.T) {\n+\tv := BugY{\n+\t\tBugA{\"BugA\"},\n+\t\tBugD{\"BugD\"},\n+\t}\n+\tb, err := Marshal(v)\n+\tif err != nil {\n+\t\tt.Fatal(\"Marshal:\", err)\n+\t}\n+\twant := `{\"S\":\"BugD\"}`\n+\tgot := string(b)\n+\tif got != want {\n+\t\tt.Fatalf(\"Marshal: got %s want %s\", got, want)\n+\t}\n+}\n+\n+// There are no tags here, so S should not appear.\n+type BugZ struct {\n+\tBugA\n+\tBugC\n+\tBugY // Contains a tagged S field through BugD; should not dominate.\n+}\n+\n+func TestDuplicatedFieldDisappears(t *testing.T) {\n+\tv := BugZ{\n+\t\tBugA{\"BugA\"},\n+\t\tBugC{\"BugC\"},\n+\t\tBugY{\n+\t\t\tBugA{\"nested BugA\"},\n+\t\t\tBugD{\"nested BugD\"},\n+\t\t},\n+\t}\n+\tb, err := Marshal(v)\n+\tif err != nil {\n+\t\tt.Fatal(\"Marshal:\", err)\n+\t}\n+\twant := `{}`\n+\tgot := string(b)\n+\tif got != want {\n+\t\tt.Fatalf(\"Marshal: got %s want %s\", got, want)\n+\t}\n+}"}, {"sha": "77d3455d3073747d663c3043a4e0b3d9a8f3bcab", "filename": "libgo/go/encoding/json/scanner_test.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -277,9 +277,6 @@ func genArray(n int) []interface{} {\n \tif f > n {\n \t\tf = n\n \t}\n-\tif n > 0 && f == 0 {\n-\t\tf = 1\n-\t}\n \tx := make([]interface{}, f)\n \tfor i := range x {\n \t\tx[i] = genValue(((i+1)*n)/f - (i*n)/f)"}, {"sha": "47b00176342facfab24d4b53416f961bb9420081", "filename": "libgo/go/encoding/xml/marshal.go", "status": "modified", "additions": 107, "deletions": 13, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -81,8 +81,7 @@ func Marshal(v interface{}) ([]byte, error) {\n func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {\n \tvar b bytes.Buffer\n \tenc := NewEncoder(&b)\n-\tenc.prefix = prefix\n-\tenc.indent = indent\n+\tenc.Indent(prefix, indent)\n \tif err := enc.Encode(v); err != nil {\n \t\treturn nil, err\n \t}\n@@ -99,6 +98,14 @@ func NewEncoder(w io.Writer) *Encoder {\n \treturn &Encoder{printer{Writer: bufio.NewWriter(w)}}\n }\n \n+// Indent sets the encoder to generate XML in which each element\n+// begins on a new indented line that starts with prefix and is followed by\n+// one or more copies of indent according to the nesting depth.\n+func (enc *Encoder) Indent(prefix, indent string) {\n+\tenc.prefix = prefix\n+\tenc.indent = indent\n+}\n+\n // Encode writes the XML encoding of v to the stream.\n //\n // See the documentation for Marshal for details about the conversion\n@@ -113,10 +120,76 @@ func (enc *Encoder) Encode(v interface{}) error {\n \n type printer struct {\n \t*bufio.Writer\n+\tseq        int\n \tindent     string\n \tprefix     string\n \tdepth      int\n \tindentedIn bool\n+\tputNewline bool\n+\tattrNS     map[string]string // map prefix -> name space\n+\tattrPrefix map[string]string // map name space -> prefix\n+}\n+\n+// createAttrPrefix finds the name space prefix attribute to use for the given name space,\n+// defining a new prefix if necessary. It returns the prefix and whether it is new.\n+func (p *printer) createAttrPrefix(url string) (prefix string, isNew bool) {\n+\tif prefix = p.attrPrefix[url]; prefix != \"\" {\n+\t\treturn prefix, false\n+\t}\n+\n+\t// The \"http://www.w3.org/XML/1998/namespace\" name space is predefined as \"xml\"\n+\t// and must be referred to that way.\n+\t// (The \"http://www.w3.org/2000/xmlns/\" name space is also predefined as \"xmlns\",\n+\t// but users should not be trying to use that one directly - that's our job.)\n+\tif url == xmlURL {\n+\t\treturn \"xml\", false\n+\t}\n+\n+\t// Need to define a new name space.\n+\tif p.attrPrefix == nil {\n+\t\tp.attrPrefix = make(map[string]string)\n+\t\tp.attrNS = make(map[string]string)\n+\t}\n+\n+\t// Pick a name. We try to use the final element of the path\n+\t// but fall back to _.\n+\tprefix = strings.TrimRight(url, \"/\")\n+\tif i := strings.LastIndex(prefix, \"/\"); i >= 0 {\n+\t\tprefix = prefix[i+1:]\n+\t}\n+\tif prefix == \"\" || !isName([]byte(prefix)) || strings.Contains(prefix, \":\") {\n+\t\tprefix = \"_\"\n+\t}\n+\tif strings.HasPrefix(prefix, \"xml\") {\n+\t\t// xmlanything is reserved.\n+\t\tprefix = \"_\" + prefix\n+\t}\n+\tif p.attrNS[prefix] != \"\" {\n+\t\t// Name is taken. Find a better one.\n+\t\tfor p.seq++; ; p.seq++ {\n+\t\t\tif id := prefix + \"_\" + strconv.Itoa(p.seq); p.attrNS[id] == \"\" {\n+\t\t\t\tprefix = id\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tp.attrPrefix[url] = prefix\n+\tp.attrNS[prefix] = url\n+\n+\tp.WriteString(`xmlns:`)\n+\tp.WriteString(prefix)\n+\tp.WriteString(`=\"`)\n+\tEscapeText(p, []byte(url))\n+\tp.WriteString(`\" `)\n+\n+\treturn prefix, true\n+}\n+\n+// deleteAttrPrefix removes an attribute name space prefix.\n+func (p *printer) deleteAttrPrefix(prefix string) {\n+\tdelete(p.attrPrefix, p.attrNS[prefix])\n+\tdelete(p.attrNS, prefix)\n }\n \n // marshalValue writes one or more XML elements representing val.\n@@ -185,7 +258,9 @@ func (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo) error {\n \tif xmlns != \"\" {\n \t\tp.WriteString(` xmlns=\"`)\n \t\t// TODO: EscapeString, to avoid the allocation.\n-\t\tEscape(p, []byte(xmlns))\n+\t\tif err := EscapeText(p, []byte(xmlns)); err != nil {\n+\t\t\treturn err\n+\t\t}\n \t\tp.WriteByte('\"')\n \t}\n \n@@ -200,6 +275,14 @@ func (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo) error {\n \t\t\tcontinue\n \t\t}\n \t\tp.WriteByte(' ')\n+\t\tif finfo.xmlns != \"\" {\n+\t\t\tprefix, created := p.createAttrPrefix(finfo.xmlns)\n+\t\t\tif created {\n+\t\t\t\tdefer p.deleteAttrPrefix(prefix)\n+\t\t\t}\n+\t\t\tp.WriteString(prefix)\n+\t\t\tp.WriteByte(':')\n+\t\t}\n \t\tp.WriteString(finfo.name)\n \t\tp.WriteString(`=\"`)\n \t\tif err := p.marshalSimple(fv.Type(), fv); err != nil {\n@@ -244,19 +327,22 @@ func (p *printer) marshalSimple(typ reflect.Type, val reflect.Value) error {\n \t\tp.WriteString(strconv.FormatFloat(val.Float(), 'g', -1, val.Type().Bits()))\n \tcase reflect.String:\n \t\t// TODO: Add EscapeString.\n-\t\tEscape(p, []byte(val.String()))\n+\t\tEscapeText(p, []byte(val.String()))\n \tcase reflect.Bool:\n \t\tp.WriteString(strconv.FormatBool(val.Bool()))\n \tcase reflect.Array:\n \t\t// will be [...]byte\n-\t\tbytes := make([]byte, val.Len())\n-\t\tfor i := range bytes {\n-\t\t\tbytes[i] = val.Index(i).Interface().(byte)\n+\t\tvar bytes []byte\n+\t\tif val.CanAddr() {\n+\t\t\tbytes = val.Slice(0, val.Len()).Bytes()\n+\t\t} else {\n+\t\t\tbytes = make([]byte, val.Len())\n+\t\t\treflect.Copy(reflect.ValueOf(bytes), val)\n \t\t}\n-\t\tEscape(p, bytes)\n+\t\tEscapeText(p, bytes)\n \tcase reflect.Slice:\n \t\t// will be []byte\n-\t\tEscape(p, val.Bytes())\n+\t\tEscapeText(p, val.Bytes())\n \tdefault:\n \t\treturn &UnsupportedTypeError{typ}\n \t}\n@@ -273,7 +359,7 @@ func (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error {\n \ts := parentStack{printer: p}\n \tfor i := range tinfo.fields {\n \t\tfinfo := &tinfo.fields[i]\n-\t\tif finfo.flags&(fAttr) != 0 {\n+\t\tif finfo.flags&fAttr != 0 {\n \t\t\tcontinue\n \t\t}\n \t\tvf := finfo.value(val)\n@@ -290,10 +376,14 @@ func (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error {\n \t\t\tcase reflect.Bool:\n \t\t\t\tEscape(p, strconv.AppendBool(scratch[:0], vf.Bool()))\n \t\t\tcase reflect.String:\n-\t\t\t\tEscape(p, []byte(vf.String()))\n+\t\t\t\tif err := EscapeText(p, []byte(vf.String())); err != nil {\n+\t\t\t\t\treturn err\n+\t\t\t\t}\n \t\t\tcase reflect.Slice:\n \t\t\t\tif elem, ok := vf.Interface().([]byte); ok {\n-\t\t\t\t\tEscape(p, elem)\n+\t\t\t\t\tif err := EscapeText(p, elem); err != nil {\n+\t\t\t\t\t\treturn err\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\tcase reflect.Struct:\n \t\t\t\tif vf.Type() == timeType {\n@@ -387,7 +477,11 @@ func (p *printer) writeIndent(depthDelta int) {\n \t\t}\n \t\tp.indentedIn = false\n \t}\n-\tp.WriteByte('\\n')\n+\tif p.putNewline {\n+\t\tp.WriteByte('\\n')\n+\t} else {\n+\t\tp.putNewline = true\n+\t}\n \tif len(p.prefix) > 0 {\n \t\tp.WriteString(p.prefix)\n \t}"}, {"sha": "ca14a1e53db14ae3f13f389424ce2e1a723c4602", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -7,6 +7,7 @@ package xml\n import (\n \t\"bytes\"\n \t\"errors\"\n+\t\"fmt\"\n \t\"io\"\n \t\"reflect\"\n \t\"strconv\"\n@@ -265,6 +266,16 @@ type Plain struct {\n \tV interface{}\n }\n \n+type MyInt int\n+\n+type EmbedInt struct {\n+\tMyInt\n+}\n+\n+type Strings struct {\n+\tX []string `xml:\"A>B,omitempty\"`\n+}\n+\n // Unless explicitly stated as such (or *Plain), all of the\n // tests below are two-way tests. When introducing new tests,\n // please try to make them two-way as well to ensure that\n@@ -789,6 +800,17 @@ var marshalTests = []struct {\n \t\t},\n \t\tUnmarshalOnly: true,\n \t},\n+\t{\n+\t\tExpectXML: `<EmbedInt><MyInt>42</MyInt></EmbedInt>`,\n+\t\tValue: &EmbedInt{\n+\t\t\tMyInt: 42,\n+\t\t},\n+\t},\n+\t// Test omitempty with parent chain; see golang.org/issue/4168.\n+\t{\n+\t\tExpectXML: `<Strings><A></A></Strings>`,\n+\t\tValue:     &Strings{},\n+\t},\n }\n \n func TestMarshal(t *testing.T) {\n@@ -811,6 +833,10 @@ func TestMarshal(t *testing.T) {\n \t}\n }\n \n+type AttrParent struct {\n+\tX string `xml:\"X>Y,attr\"`\n+}\n+\n var marshalErrorTests = []struct {\n \tValue interface{}\n \tErr   string\n@@ -838,12 +864,39 @@ var marshalErrorTests = []struct {\n \t\tValue: &Domain{Comment: []byte(\"f--bar\")},\n \t\tErr:   `xml: comments must not contain \"--\"`,\n \t},\n+\t// Reject parent chain with attr, never worked; see golang.org/issue/5033.\n+\t{\n+\t\tValue: &AttrParent{},\n+\t\tErr:   `xml: X>Y chain not valid with attr flag`,\n+\t},\n+}\n+\n+var marshalIndentTests = []struct {\n+\tValue     interface{}\n+\tPrefix    string\n+\tIndent    string\n+\tExpectXML string\n+}{\n+\t{\n+\t\tValue: &SecretAgent{\n+\t\t\tHandle:    \"007\",\n+\t\t\tIdentity:  \"James Bond\",\n+\t\t\tObfuscate: \"<redacted/>\",\n+\t\t},\n+\t\tPrefix:    \"\",\n+\t\tIndent:    \"\\t\",\n+\t\tExpectXML: fmt.Sprintf(\"<agent handle=\\\"007\\\">\\n\\t<Identity>James Bond</Identity><redacted/>\\n</agent>\"),\n+\t},\n }\n \n func TestMarshalErrors(t *testing.T) {\n \tfor idx, test := range marshalErrorTests {\n-\t\t_, err := Marshal(test.Value)\n-\t\tif err == nil || err.Error() != test.Err {\n+\t\tdata, err := Marshal(test.Value)\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"#%d: marshal(%#v) = [success] %q, want error %v\", idx, test.Value, data, test.Err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif err.Error() != test.Err {\n \t\t\tt.Errorf(\"#%d: marshal(%#v) = [error] %v, want %v\", idx, test.Value, err, test.Err)\n \t\t}\n \t\tif test.Kind != reflect.Invalid {\n@@ -884,6 +937,19 @@ func TestUnmarshal(t *testing.T) {\n \t}\n }\n \n+func TestMarshalIndent(t *testing.T) {\n+\tfor i, test := range marshalIndentTests {\n+\t\tdata, err := MarshalIndent(test.Value, test.Prefix, test.Indent)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: Error: %s\", i, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif got, want := string(data), test.ExpectXML; got != want {\n+\t\t\tt.Errorf(\"#%d: MarshalIndent:\\nGot:%s\\nWant:\\n%s\", i, got, want)\n+\t\t}\n+\t}\n+}\n+\n type limitedBytesWriter struct {\n \tw      io.Writer\n \tremain int // until writes fail\n@@ -933,6 +999,16 @@ func TestMarshalWriteErrors(t *testing.T) {\n \t}\n }\n \n+func TestMarshalWriteIOErrors(t *testing.T) {\n+\tenc := NewEncoder(errWriter{})\n+\n+\texpectErr := \"unwritable\"\n+\terr := enc.Encode(&Passenger{})\n+\tif err == nil || err.Error() != expectErr {\n+\t\tt.Errorf(\"EscapeTest = [error] %v, want %v\", err, expectErr)\n+\t}\n+}\n+\n func BenchmarkMarshal(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tMarshal(atomValue)"}, {"sha": "a7a2a9655bba6743bdadd3d9d2dba8c52ab07104", "filename": "libgo/go/encoding/xml/read.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -263,7 +263,7 @@ func (p *Decoder) unmarshal(val reflect.Value, start *StartElement) error {\n \t\t\t\tstrv := finfo.value(sv)\n \t\t\t\t// Look for attribute.\n \t\t\t\tfor _, a := range start.Attr {\n-\t\t\t\t\tif a.Name.Local == finfo.name {\n+\t\t\t\t\tif a.Name.Local == finfo.name && (finfo.xmlns == \"\" || finfo.xmlns == a.Name.Space) {\n \t\t\t\t\t\tcopyValue(strv, []byte(a.Value))\n \t\t\t\t\t\tbreak\n \t\t\t\t\t}\n@@ -441,7 +441,7 @@ func (p *Decoder) unmarshalPath(tinfo *typeInfo, sv reflect.Value, parents []str\n Loop:\n \tfor i := range tinfo.fields {\n \t\tfinfo := &tinfo.fields[i]\n-\t\tif finfo.flags&fElement == 0 || len(finfo.parents) < len(parents) {\n+\t\tif finfo.flags&fElement == 0 || len(finfo.parents) < len(parents) || finfo.xmlns != \"\" && finfo.xmlns != start.Name.Space {\n \t\t\tcontinue\n \t\t}\n \t\tfor j := range parents {\n@@ -493,7 +493,6 @@ Loop:\n \t\t\treturn true, nil\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n }\n \n // Skip reads tokens until it has consumed the end element\n@@ -517,5 +516,4 @@ func (d *Decoder) Skip() error {\n \t\t\treturn nil\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n }"}, {"sha": "7d28c5d7d6ca41cbe360e113772150e6462c7528", "filename": "libgo/go/encoding/xml/read_test.go", "status": "modified", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -6,6 +6,7 @@ package xml\n \n import (\n \t\"reflect\"\n+\t\"strings\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -399,3 +400,224 @@ func TestUnmarshalAttr(t *testing.T) {\n \t\tt.Fatalf(\"Unmarshal with %s failed:\\nhave %#v,\\n want %#v\", x, p3.Int, 1)\n \t}\n }\n+\n+type Tables struct {\n+\tHTable string `xml:\"http://www.w3.org/TR/html4/ table\"`\n+\tFTable string `xml:\"http://www.w3schools.com/furniture table\"`\n+}\n+\n+var tables = []struct {\n+\txml string\n+\ttab Tables\n+\tns  string\n+}{\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table xmlns=\"http://www.w3.org/TR/html4/\">hello</table>` +\n+\t\t\t`<table xmlns=\"http://www.w3schools.com/furniture\">world</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{\"hello\", \"world\"},\n+\t},\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table xmlns=\"http://www.w3schools.com/furniture\">world</table>` +\n+\t\t\t`<table xmlns=\"http://www.w3.org/TR/html4/\">hello</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{\"hello\", \"world\"},\n+\t},\n+\t{\n+\t\txml: `<Tables xmlns:f=\"http://www.w3schools.com/furniture\" xmlns:h=\"http://www.w3.org/TR/html4/\">` +\n+\t\t\t`<f:table>world</f:table>` +\n+\t\t\t`<h:table>hello</h:table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{\"hello\", \"world\"},\n+\t},\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table>bogus</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{},\n+\t},\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table>only</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{HTable: \"only\"},\n+\t\tns:  \"http://www.w3.org/TR/html4/\",\n+\t},\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table>only</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{FTable: \"only\"},\n+\t\tns:  \"http://www.w3schools.com/furniture\",\n+\t},\n+\t{\n+\t\txml: `<Tables>` +\n+\t\t\t`<table>only</table>` +\n+\t\t\t`</Tables>`,\n+\t\ttab: Tables{},\n+\t\tns:  \"something else entirely\",\n+\t},\n+}\n+\n+func TestUnmarshalNS(t *testing.T) {\n+\tfor i, tt := range tables {\n+\t\tvar dst Tables\n+\t\tvar err error\n+\t\tif tt.ns != \"\" {\n+\t\t\td := NewDecoder(strings.NewReader(tt.xml))\n+\t\t\td.DefaultSpace = tt.ns\n+\t\t\terr = d.Decode(&dst)\n+\t\t} else {\n+\t\t\terr = Unmarshal([]byte(tt.xml), &dst)\n+\t\t}\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: Unmarshal: %v\", i, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\twant := tt.tab\n+\t\tif dst != want {\n+\t\t\tt.Errorf(\"#%d: dst=%+v, want %+v\", i, dst, want)\n+\t\t}\n+\t}\n+}\n+\n+func TestMarshalNS(t *testing.T) {\n+\tdst := Tables{\"hello\", \"world\"}\n+\tdata, err := Marshal(&dst)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Marshal: %v\", err)\n+\t}\n+\twant := `<Tables><table xmlns=\"http://www.w3.org/TR/html4/\">hello</table><table xmlns=\"http://www.w3schools.com/furniture\">world</table></Tables>`\n+\tstr := string(data)\n+\tif str != want {\n+\t\tt.Errorf(\"have: %q\\nwant: %q\\n\", str, want)\n+\t}\n+}\n+\n+type TableAttrs struct {\n+\tTAttr TAttr\n+}\n+\n+type TAttr struct {\n+\tHTable string `xml:\"http://www.w3.org/TR/html4/ table,attr\"`\n+\tFTable string `xml:\"http://www.w3schools.com/furniture table,attr\"`\n+\tLang   string `xml:\"http://www.w3.org/XML/1998/namespace lang,attr,omitempty\"`\n+\tOther1 string `xml:\"http://golang.org/xml/ other,attr,omitempty\"`\n+\tOther2 string `xml:\"http://golang.org/xmlfoo/ other,attr,omitempty\"`\n+\tOther3 string `xml:\"http://golang.org/json/ other,attr,omitempty\"`\n+\tOther4 string `xml:\"http://golang.org/2/json/ other,attr,omitempty\"`\n+}\n+\n+var tableAttrs = []struct {\n+\txml string\n+\ttab TableAttrs\n+\tns  string\n+}{\n+\t{\n+\t\txml: `<TableAttrs xmlns:f=\"http://www.w3schools.com/furniture\" xmlns:h=\"http://www.w3.org/TR/html4/\"><TAttr ` +\n+\t\t\t`h:table=\"hello\" f:table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"hello\", FTable: \"world\"}},\n+\t},\n+\t{\n+\t\txml: `<TableAttrs><TAttr xmlns:f=\"http://www.w3schools.com/furniture\" xmlns:h=\"http://www.w3.org/TR/html4/\" ` +\n+\t\t\t`h:table=\"hello\" f:table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"hello\", FTable: \"world\"}},\n+\t},\n+\t{\n+\t\txml: `<TableAttrs><TAttr ` +\n+\t\t\t`h:table=\"hello\" f:table=\"world\" xmlns:f=\"http://www.w3schools.com/furniture\" xmlns:h=\"http://www.w3.org/TR/html4/\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"hello\", FTable: \"world\"}},\n+\t},\n+\t{\n+\t\t// Default space does not apply to attribute names.\n+\t\txml: `<TableAttrs xmlns=\"http://www.w3schools.com/furniture\" xmlns:h=\"http://www.w3.org/TR/html4/\"><TAttr ` +\n+\t\t\t`h:table=\"hello\" table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"hello\", FTable: \"\"}},\n+\t},\n+\t{\n+\t\t// Default space does not apply to attribute names.\n+\t\txml: `<TableAttrs xmlns:f=\"http://www.w3schools.com/furniture\"><TAttr xmlns=\"http://www.w3.org/TR/html4/\" ` +\n+\t\t\t`table=\"hello\" f:table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"\", FTable: \"world\"}},\n+\t},\n+\t{\n+\t\txml: `<TableAttrs><TAttr ` +\n+\t\t\t`table=\"bogus\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{},\n+\t},\n+\t{\n+\t\t// Default space does not apply to attribute names.\n+\t\txml: `<TableAttrs xmlns:h=\"http://www.w3.org/TR/html4/\"><TAttr ` +\n+\t\t\t`h:table=\"hello\" table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"hello\", FTable: \"\"}},\n+\t\tns:  \"http://www.w3schools.com/furniture\",\n+\t},\n+\t{\n+\t\t// Default space does not apply to attribute names.\n+\t\txml: `<TableAttrs xmlns:f=\"http://www.w3schools.com/furniture\"><TAttr ` +\n+\t\t\t`table=\"hello\" f:table=\"world\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{TAttr{HTable: \"\", FTable: \"world\"}},\n+\t\tns:  \"http://www.w3.org/TR/html4/\",\n+\t},\n+\t{\n+\t\txml: `<TableAttrs><TAttr ` +\n+\t\t\t`table=\"bogus\" ` +\n+\t\t\t`/></TableAttrs>`,\n+\t\ttab: TableAttrs{},\n+\t\tns:  \"something else entirely\",\n+\t},\n+}\n+\n+func TestUnmarshalNSAttr(t *testing.T) {\n+\tfor i, tt := range tableAttrs {\n+\t\tvar dst TableAttrs\n+\t\tvar err error\n+\t\tif tt.ns != \"\" {\n+\t\t\td := NewDecoder(strings.NewReader(tt.xml))\n+\t\t\td.DefaultSpace = tt.ns\n+\t\t\terr = d.Decode(&dst)\n+\t\t} else {\n+\t\t\terr = Unmarshal([]byte(tt.xml), &dst)\n+\t\t}\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"#%d: Unmarshal: %v\", i, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\twant := tt.tab\n+\t\tif dst != want {\n+\t\t\tt.Errorf(\"#%d: dst=%+v, want %+v\", i, dst, want)\n+\t\t}\n+\t}\n+}\n+\n+func TestMarshalNSAttr(t *testing.T) {\n+\tsrc := TableAttrs{TAttr{\"hello\", \"world\", \"en_US\", \"other1\", \"other2\", \"other3\", \"other4\"}}\n+\tdata, err := Marshal(&src)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Marshal: %v\", err)\n+\t}\n+\twant := `<TableAttrs><TAttr xmlns:html4=\"http://www.w3.org/TR/html4/\" html4:table=\"hello\" xmlns:furniture=\"http://www.w3schools.com/furniture\" furniture:table=\"world\" xml:lang=\"en_US\" xmlns:_xml=\"http://golang.org/xml/\" _xml:other=\"other1\" xmlns:_xmlfoo=\"http://golang.org/xmlfoo/\" _xmlfoo:other=\"other2\" xmlns:json=\"http://golang.org/json/\" json:other=\"other3\" xmlns:json_1=\"http://golang.org/2/json/\" json_1:other=\"other4\"></TAttr></TableAttrs>`\n+\tstr := string(data)\n+\tif str != want {\n+\t\tt.Errorf(\"Marshal:\\nhave: %#q\\nwant: %#q\\n\", str, want)\n+\t}\n+\n+\tvar dst TableAttrs\n+\tif err := Unmarshal(data, &dst); err != nil {\n+\t\tt.Errorf(\"Unmarshal: %v\", err)\n+\t}\n+\n+\tif dst != src {\n+\t\tt.Errorf(\"Unmarshal = %q, want %q\", dst, src)\n+\t}\n+}"}, {"sha": "83e65402c00ebf6f0529402771a6879497b5c0c9", "filename": "libgo/go/encoding/xml/typeinfo.go", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -70,20 +70,19 @@ func getTypeInfo(typ reflect.Type) (*typeInfo, error) {\n \t\t\t\tif t.Kind() == reflect.Ptr {\n \t\t\t\t\tt = t.Elem()\n \t\t\t\t}\n-\t\t\t\tif t.Kind() != reflect.Struct {\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t\tinner, err := getTypeInfo(t)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\treturn nil, err\n-\t\t\t\t}\n-\t\t\t\tfor _, finfo := range inner.fields {\n-\t\t\t\t\tfinfo.idx = append([]int{i}, finfo.idx...)\n-\t\t\t\t\tif err := addFieldInfo(typ, tinfo, &finfo); err != nil {\n+\t\t\t\tif t.Kind() == reflect.Struct {\n+\t\t\t\t\tinner, err := getTypeInfo(t)\n+\t\t\t\t\tif err != nil {\n \t\t\t\t\t\treturn nil, err\n \t\t\t\t\t}\n+\t\t\t\t\tfor _, finfo := range inner.fields {\n+\t\t\t\t\t\tfinfo.idx = append([]int{i}, finfo.idx...)\n+\t\t\t\t\t\tif err := addFieldInfo(typ, tinfo, &finfo); err != nil {\n+\t\t\t\t\t\t\treturn nil, err\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tcontinue\n \t\t\t}\n \n \t\t\tfinfo, err := structFieldInfo(typ, &f)\n@@ -193,16 +192,19 @@ func structFieldInfo(typ reflect.Type, f *reflect.StructField) (*fieldInfo, erro\n \t}\n \n \t// Prepare field name and parents.\n-\ttokens = strings.Split(tag, \">\")\n-\tif tokens[0] == \"\" {\n-\t\ttokens[0] = f.Name\n+\tparents := strings.Split(tag, \">\")\n+\tif parents[0] == \"\" {\n+\t\tparents[0] = f.Name\n \t}\n-\tif tokens[len(tokens)-1] == \"\" {\n+\tif parents[len(parents)-1] == \"\" {\n \t\treturn nil, fmt.Errorf(\"xml: trailing '>' in field %s of type %s\", f.Name, typ)\n \t}\n-\tfinfo.name = tokens[len(tokens)-1]\n-\tif len(tokens) > 1 {\n-\t\tfinfo.parents = tokens[:len(tokens)-1]\n+\tfinfo.name = parents[len(parents)-1]\n+\tif len(parents) > 1 {\n+\t\tif (finfo.flags & fElement) == 0 {\n+\t\t\treturn nil, fmt.Errorf(\"xml: %s chain not valid with %s flag\", tag, strings.Join(tokens[1:], \",\"))\n+\t\t}\n+\t\tfinfo.parents = parents[:len(parents)-1]\n \t}\n \n \t// If the field type has an XMLName field, the names must match\n@@ -268,6 +270,9 @@ Loop:\n \t\tif oldf.flags&fMode != newf.flags&fMode {\n \t\t\tcontinue\n \t\t}\n+\t\tif oldf.xmlns != \"\" && newf.xmlns != \"\" && oldf.xmlns != newf.xmlns {\n+\t\t\tcontinue\n+\t\t}\n \t\tminl := min(len(newf.parents), len(oldf.parents))\n \t\tfor p := 0; p < minl; p++ {\n \t\t\tif oldf.parents[p] != newf.parents[p] {"}, {"sha": "021f7e47d91d31ca9200c0b8ae04a9c2a7330b55", "filename": "libgo/go/encoding/xml/xml.go", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -169,6 +169,11 @@ type Decoder struct {\n \t// the CharsetReader's result values must be non-nil.\n \tCharsetReader func(charset string, input io.Reader) (io.Reader, error)\n \n+\t// DefaultSpace sets the default name space used for unadorned tags,\n+\t// as if the entire XML stream were wrapped in an element containing\n+\t// the attribute xmlns=\"DefaultSpace\".\n+\tDefaultSpace string\n+\n \tr         io.ByteReader\n \tbuf       bytes.Buffer\n \tsaved     *bytes.Buffer\n@@ -268,6 +273,8 @@ func (d *Decoder) Token() (t Token, err error) {\n \treturn\n }\n \n+const xmlURL = \"http://www.w3.org/XML/1998/namespace\"\n+\n // Apply name space translation to name n.\n // The default name space (for Space==\"\")\n // applies only to element names, not to attribute names.\n@@ -277,11 +284,15 @@ func (d *Decoder) translate(n *Name, isElementName bool) {\n \t\treturn\n \tcase n.Space == \"\" && !isElementName:\n \t\treturn\n+\tcase n.Space == \"xml\":\n+\t\tn.Space = xmlURL\n \tcase n.Space == \"\" && n.Local == \"xmlns\":\n \t\treturn\n \t}\n \tif v, ok := d.ns[n.Space]; ok {\n \t\tn.Space = v\n+\t} else if n.Space == \"\" {\n+\t\tn.Space = d.DefaultSpace\n \t}\n }\n \n@@ -956,7 +967,7 @@ Input:\n \t\t\t\tb0, b1 = 0, 0\n \t\t\t\tcontinue Input\n \t\t\t}\n-\t\t\tent := string(d.buf.Bytes()[before])\n+\t\t\tent := string(d.buf.Bytes()[before:])\n \t\t\tif ent[len(ent)-1] != ';' {\n \t\t\t\tent += \" (no semicolon)\"\n \t\t\t}\n@@ -1692,7 +1703,7 @@ var HTMLAutoClose = htmlAutoClose\n var htmlAutoClose = []string{\n \t/*\n \t\thget http://www.w3.org/TR/html4/loose.dtd |\n-\t\t9 sed -n 's/<!ELEMENT (.*) - O EMPTY.+/\t\"\\1\",/p' | tr A-Z a-z\n+\t\t9 sed -n 's/<!ELEMENT ([^ ]*) +- O EMPTY.+/\t\"\\1\",/p' | tr A-Z a-z\n \t*/\n \t\"basefont\",\n \t\"br\",\n@@ -1702,7 +1713,7 @@ var htmlAutoClose = []string{\n \t\"param\",\n \t\"hr\",\n \t\"input\",\n-\t\"col     \",\n+\t\"col\",\n \t\"frame\",\n \t\"isindex\",\n \t\"base\",\n@@ -1718,15 +1729,18 @@ var (\n \tesc_tab  = []byte(\"&#x9;\")\n \tesc_nl   = []byte(\"&#xA;\")\n \tesc_cr   = []byte(\"&#xD;\")\n+\tesc_fffd = []byte(\"\\uFFFD\") // Unicode replacement character\n )\n \n-// Escape writes to w the properly escaped XML equivalent\n+// EscapeText writes to w the properly escaped XML equivalent\n // of the plain text data s.\n-func Escape(w io.Writer, s []byte) {\n+func EscapeText(w io.Writer, s []byte) error {\n \tvar esc []byte\n \tlast := 0\n-\tfor i, c := range s {\n-\t\tswitch c {\n+\tfor i := 0; i < len(s); {\n+\t\tr, width := utf8.DecodeRune(s[i:])\n+\t\ti += width\n+\t\tswitch r {\n \t\tcase '\"':\n \t\t\tesc = esc_quot\n \t\tcase '\\'':\n@@ -1744,13 +1758,31 @@ func Escape(w io.Writer, s []byte) {\n \t\tcase '\\r':\n \t\t\tesc = esc_cr\n \t\tdefault:\n+\t\t\tif !isInCharacterRange(r) {\n+\t\t\t\tesc = esc_fffd\n+\t\t\t\tbreak\n+\t\t\t}\n \t\t\tcontinue\n \t\t}\n-\t\tw.Write(s[last:i])\n-\t\tw.Write(esc)\n-\t\tlast = i + 1\n+\t\tif _, err := w.Write(s[last : i-width]); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif _, err := w.Write(esc); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tlast = i\n+\t}\n+\tif _, err := w.Write(s[last:]); err != nil {\n+\t\treturn err\n \t}\n-\tw.Write(s[last:])\n+\treturn nil\n+}\n+\n+// Escape is like EscapeText but omits the error return value.\n+// It is provided for backwards compatibility with Go 1.0.\n+// Code targeting Go 1.1 or later should use EscapeText.\n+func Escape(w io.Writer, s []byte) {\n+\tEscapeText(w, s)\n }\n \n // procInstEncoding parses the `encoding=\"...\"` or `encoding='...'`"}, {"sha": "eeedbe575f8b76fb99489d8134c46eb5d380c0f5", "filename": "libgo/go/encoding/xml/xml_test.go", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4", "patch": "@@ -5,6 +5,7 @@\n package xml\n \n import (\n+\t\"bytes\"\n \t\"fmt\"\n \t\"io\"\n \t\"reflect\"\n@@ -595,13 +596,6 @@ func TestEntityInsideCDATA(t *testing.T) {\n \t}\n }\n \n-// The last three tests (respectively one for characters in attribute\n-// names and two for character entities) pass not because of code\n-// changed for issue 1259, but instead pass with the given messages\n-// from other parts of xml.Decoder.  I provide these to note the\n-// current behavior of situations where one might think that character\n-// range checking would detect the error, but it does not in fact.\n-\n var characterTests = []struct {\n \tin  string\n \terr string\n@@ -611,8 +605,10 @@ var characterTests = []struct {\n \t{\"\\xef\\xbf\\xbe<doc/>\", \"illegal character code U+FFFE\"},\n \t{\"<?xml version=\\\"1.0\\\"?><doc>\\r\\n<hiya/>\\x07<toots/></doc>\", \"illegal character code U+0007\"},\n \t{\"<?xml version=\\\"1.0\\\"?><doc \\x12='value'>what's up</doc>\", \"expected attribute name in element\"},\n+\t{\"<doc>&abc\\x01;</doc>\", \"invalid character entity &abc (no semicolon)\"},\n \t{\"<doc>&\\x01;</doc>\", \"invalid character entity & (no semicolon)\"},\n-\t{\"<doc>&\\xef\\xbf\\xbe;</doc>\", \"invalid character entity & (no semicolon)\"},\n+\t{\"<doc>&\\xef\\xbf\\xbe;</doc>\", \"invalid character entity &\\uFFFE;\"},\n+\t{\"<doc>&hello;</doc>\", \"invalid character entity &hello;\"},\n }\n \n func TestDisallowedCharacters(t *testing.T) {\n@@ -629,7 +625,7 @@ func TestDisallowedCharacters(t *testing.T) {\n \t\t\tt.Fatalf(\"input %d d.Token() = _, %v, want _, *SyntaxError\", i, err)\n \t\t}\n \t\tif synerr.Msg != tt.err {\n-\t\t\tt.Fatalf(\"input %d synerr.Msg wrong: want '%s', got '%s'\", i, tt.err, synerr.Msg)\n+\t\t\tt.Fatalf(\"input %d synerr.Msg wrong: want %q, got %q\", i, tt.err, synerr.Msg)\n \t\t}\n \t}\n }\n@@ -689,3 +685,32 @@ func TestDirectivesWithComments(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+// Writer whose Write method always returns an error.\n+type errWriter struct{}\n+\n+func (errWriter) Write(p []byte) (n int, err error) { return 0, fmt.Errorf(\"unwritable\") }\n+\n+func TestEscapeTextIOErrors(t *testing.T) {\n+\texpectErr := \"unwritable\"\n+\terr := EscapeText(errWriter{}, []byte{'A'})\n+\n+\tif err == nil || err.Error() != expectErr {\n+\t\tt.Errorf(\"have %v, want %v\", err, expectErr)\n+\t}\n+}\n+\n+func TestEscapeTextInvalidChar(t *testing.T) {\n+\tinput := []byte(\"A \\x00 terminated string.\")\n+\texpected := \"A \\uFFFD terminated string.\"\n+\n+\tbuff := new(bytes.Buffer)\n+\tif err := EscapeText(buff, input); err != nil {\n+\t\tt.Fatalf(\"have %v, want nil\", err)\n+\t}\n+\ttext := buff.String()\n+\n+\tif text != expected {\n+\t\tt.Errorf(\"have %v, want %v\", text, expected)\n+\t}\n+}"}, {"sha": "2159ec532a29c56957696f736dbc74287080f538", "filename": "libgo/go/exp/cookiejar/jar.go", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fjar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fjar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fcookiejar%2Fjar.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,89 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// Package cookiejar implements an RFC 6265-compliant http.CookieJar.\n-//\n-// TODO: example code to create a memory-backed cookie jar with the default\n-// public suffix list.\n-package cookiejar\n-\n-import (\n-\t\"net/http\"\n-\t\"net/url\"\n-)\n-\n-// PublicSuffixList provides the public suffix of a domain. For example:\n-//      - the public suffix of \"example.com\" is \"com\",\n-//      - the public suffix of \"foo1.foo2.foo3.co.uk\" is \"co.uk\", and\n-//      - the public suffix of \"bar.pvt.k12.wy.us\" is \"pvt.k12.wy.us\".\n-//\n-// Implementations of PublicSuffixList must be safe for concurrent use by\n-// multiple goroutines.\n-//\n-// An implementation that always returns \"\" is valid and may be useful for\n-// testing but it is not secure: it means that the HTTP server for foo.com can\n-// set a cookie for bar.com.\n-type PublicSuffixList interface {\n-\t// PublicSuffix returns the public suffix of domain.\n-\t//\n-\t// TODO: specify which of the caller and callee is responsible for IP\n-\t// addresses, for leading and trailing dots, for case sensitivity, and\n-\t// for IDN/Punycode.\n-\tPublicSuffix(domain string) string\n-\n-\t// String returns a description of the source of this public suffix list.\n-\t// A Jar will store its PublicSuffixList's description in its storage,\n-\t// and update the stored cookies if its list has a different description\n-\t// than the stored list. The description will typically contain something\n-\t// like a time stamp or version number.\n-\tString() string\n-}\n-\n-// Options are the options for creating a new Jar.\n-type Options struct {\n-\t// Storage is the cookie jar storage. It may not be nil.\n-\tStorage Storage\n-\n-\t// PublicSuffixList is the public suffix list that determines whether an\n-\t// HTTP server can set a cookie for a domain. It may not be nil.\n-\tPublicSuffixList PublicSuffixList\n-\n-\t// TODO: ErrorFunc for handling storage errors?\n-}\n-\n-// Jar implements the http.CookieJar interface from the net/http package.\n-type Jar struct {\n-\tstorage Storage\n-\tpsList  PublicSuffixList\n-}\n-\n-// New returns a new cookie jar.\n-func New(o *Options) *Jar {\n-\treturn &Jar{\n-\t\tstorage: o.Storage,\n-\t\tpsList:  o.PublicSuffixList,\n-\t}\n-}\n-\n-// TODO(nigeltao): how do we reject HttpOnly cookies? Do we post-process the\n-// return value from Jar.Cookies?\n-//\n-// HttpOnly cookies are those for regular HTTP(S) requests but should not be\n-// visible from JavaScript. The HttpOnly bit mitigates XSS attacks; it's not\n-// for HTTP vs HTTPS vs FTP transports.\n-\n-// Cookies implements the Cookies method of the http.CookieJar interface.\n-//\n-// It returns an empty slice if the URL's scheme is not HTTP or HTTPS.\n-func (j *Jar) Cookies(u *url.URL) []*http.Cookie {\n-\t// TODO.\n-\treturn nil\n-}\n-\n-// SetCookies implements the SetCookies method of the http.CookieJar interface.\n-//\n-// It does nothing if the URL's scheme is not HTTP or HTTPS.\n-func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie) {\n-\t// TODO.\n-}"}, {"sha": "5294f587e4c7d9ebaa4173d3b9d235bba2719d78", "filename": "libgo/go/exp/cookiejar/storage.go", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,101 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package cookiejar\n-\n-import (\n-\t\"time\"\n-)\n-\n-// Storage is a Jar's storage. It is a multi-map, mapping keys to one or more\n-// entries. Each entry consists of a subkey, creation time, last access time,\n-// and some arbitrary data.\n-//\n-// The Add and Delete methods have undefined behavior if the key is invalid.\n-// A valid key must use only bytes in the character class [a-z0-9.-] and\n-// must have at least one non-. byte. Note that this excludes any key\n-// containing a capital ASCII letter as well as the empty string.\n-type Storage interface {\n-\t// A client must call Lock before calling other methods and must call\n-\t// Unlock when finished. Between the calls to Lock and Unlock, a client\n-\t// can assume that other clients are not modifying the Storage.\n-\tLock()\n-\tUnlock()\n-\n-\t// Add adds entries to the storage. Each entry's Subkey and Data must\n-\t// both be non-empty.\n-\t//\n-\t// If the Storage already contains an entry with the same key and\n-\t// subkey then the new entry is stored with the creation time of the\n-\t// old entry, and the old entry is deleted.\n-\t//\n-\t// Adding entries may cause other entries to be deleted, to maintain an\n-\t// implementation-specific storage constraint.\n-\tAdd(key string, entries ...Entry) error\n-\n-\t// Delete deletes all entries for the given key.\n-\tDelete(key string) error\n-\n-\t// Entries calls f for each entry stored for that key. If f returns a\n-\t// non-nil error then the iteration stops and Entries returns that\n-\t// error. Iteration is not guaranteed to be in any particular order.\n-\t//\n-\t// If f returns an Update action then that stored entry's LastAccess\n-\t// time will be set to the time that f returned. If f returns a Delete\n-\t// action then that entry will be deleted from the Storage.\n-\t//\n-\t// f may call a Storage's Add and Delete methods; those modifications\n-\t// will not affect the list of entries visited in this call to Entries.\n-\tEntries(key string, f func(entry Entry) (Action, time.Time, error)) error\n-\n-\t// Keys calls f for each key stored. f will not be called on a key with\n-\t// zero entries. If f returns a non-nil error then the iteration stops\n-\t// and Keys returns that error. Iteration is not guaranteed to be in any\n-\t// particular order.\n-\t//\n-\t// f may call a Storage's Add, Delete and Entries methods; those\n-\t// modifications will not affect the list of keys visited in this call\n-\t// to Keys.\n-\tKeys(f func(key string) error) error\n-}\n-\n-// Entry is an entry in a Storage.\n-type Entry struct {\n-\tSubkey     string\n-\tData       string\n-\tCreation   time.Time\n-\tLastAccess time.Time\n-}\n-\n-// Action is an action returned by the function passed to Entries.\n-type Action int\n-\n-const (\n-\t// Pass means to take no further action with an Entry.\n-\tPass Action = iota\n-\t// Update means to update the LastAccess time of an Entry.\n-\tUpdate\n-\t// Delete means to delete an Entry.\n-\tDelete\n-)\n-\n-// ValidStorageKey returns whether the given key is valid for a Storage.\n-func ValidStorageKey(key string) bool {\n-\thasNonDot := false\n-\tfor i := 0; i < len(key); i++ {\n-\t\tswitch c := key[i]; {\n-\t\tcase 'a' <= c && c <= 'z':\n-\t\t\tfallthrough\n-\t\tcase '0' <= c && c <= '9':\n-\t\t\tfallthrough\n-\t\tcase c == '-':\n-\t\t\thasNonDot = true\n-\t\tcase c == '.':\n-\t\t\t// No-op.\n-\t\tdefault:\n-\t\t\treturn false\n-\t\t}\n-\t}\n-\treturn hasNonDot\n-}"}, {"sha": "de6aa2b6a7f1674d5a9bda03160a8059b34be9e2", "filename": "libgo/go/exp/cookiejar/storage_test.go", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fcookiejar%2Fstorage_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package cookiejar\n-\n-import (\n-\t\"testing\"\n-)\n-\n-var validStorageKeyTests = map[string]bool{\n-\t\"\":            false,\n-\t\".\":           false,\n-\t\"..\":          false,\n-\t\"/\":           false,\n-\t\"EXAMPLE.com\": false,\n-\t\"\\n\":          false,\n-\t\"\\r\":          false,\n-\t\"\\r\\n\":        false,\n-\t\"\\x00\":        false,\n-\t\"back\\\\slash\": false,\n-\t\"co:lon\":      false,\n-\t\"com,ma\":      false,\n-\t\"semi;colon\":  false,\n-\t\"sl/ash\":      false,\n-\t\"sp ace\":      false,\n-\t\"under_score\": false,\n-\t\"\u03c0\":           false,\n-\n-\t\"-\":                true,\n-\t\".dot\":             true,\n-\t\".dot.\":            true,\n-\t\".metadata\":        true,\n-\t\".x..y..z...\":      true,\n-\t\"dot.\":             true,\n-\t\"example.com\":      true,\n-\t\"foo\":              true,\n-\t\"hy-phen\":          true,\n-\t\"xn--bcher-kva.ch\": true,\n-}\n-\n-func TestValidStorageKey(t *testing.T) {\n-\tfor key, want := range validStorageKeyTests {\n-\t\tif got := ValidStorageKey(key); got != want {\n-\t\t\tt.Errorf(\"%q: got %v, want %v\", key, got, want)\n-\t\t}\n-\t}\n-}"}, {"sha": "cd8c83c92101556c54c3c44c00c4636cc9b2b716", "filename": "libgo/go/exp/ebnf/ebnf.go", "status": "removed", "additions": 0, "deletions": 269, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,269 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// Package ebnf is a library for EBNF grammars. The input is text ([]byte)\n-// satisfying the following grammar (represented itself in EBNF):\n-//\n-//\tProduction  = name \"=\" [ Expression ] \".\" .\n-//\tExpression  = Alternative { \"|\" Alternative } .\n-//\tAlternative = Term { Term } .\n-//\tTerm        = name | token [ \"\u2026\" token ] | Group | Option | Repetition .\n-//\tGroup       = \"(\" Expression \")\" .\n-//\tOption      = \"[\" Expression \"]\" .\n-//\tRepetition  = \"{\" Expression \"}\" .\n-//\n-// A name is a Go identifier, a token is a Go string, and comments\n-// and white space follow the same rules as for the Go language.\n-// Production names starting with an uppercase Unicode letter denote\n-// non-terminal productions (i.e., productions which allow white-space\n-// and comments between tokens); all other production names denote\n-// lexical productions.\n-//\n-package ebnf\n-\n-import (\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"text/scanner\"\n-\t\"unicode\"\n-\t\"unicode/utf8\"\n-)\n-\n-// ----------------------------------------------------------------------------\n-// Error handling\n-\n-type errorList []error\n-\n-func (list errorList) Err() error {\n-\tif len(list) == 0 {\n-\t\treturn nil\n-\t}\n-\treturn list\n-}\n-\n-func (list errorList) Error() string {\n-\tswitch len(list) {\n-\tcase 0:\n-\t\treturn \"no errors\"\n-\tcase 1:\n-\t\treturn list[0].Error()\n-\t}\n-\treturn fmt.Sprintf(\"%s (and %d more errors)\", list[0], len(list)-1)\n-}\n-\n-func newError(pos scanner.Position, msg string) error {\n-\treturn errors.New(fmt.Sprintf(\"%s: %s\", pos, msg))\n-}\n-\n-// ----------------------------------------------------------------------------\n-// Internal representation\n-\n-type (\n-\t// An Expression node represents a production expression.\n-\tExpression interface {\n-\t\t// Pos is the position of the first character of the syntactic construct\n-\t\tPos() scanner.Position\n-\t}\n-\n-\t// An Alternative node represents a non-empty list of alternative expressions.\n-\tAlternative []Expression // x | y | z\n-\n-\t// A Sequence node represents a non-empty list of sequential expressions.\n-\tSequence []Expression // x y z\n-\n-\t// A Name node represents a production name.\n-\tName struct {\n-\t\tStringPos scanner.Position\n-\t\tString    string\n-\t}\n-\n-\t// A Token node represents a literal.\n-\tToken struct {\n-\t\tStringPos scanner.Position\n-\t\tString    string\n-\t}\n-\n-\t// A List node represents a range of characters.\n-\tRange struct {\n-\t\tBegin, End *Token // begin ... end\n-\t}\n-\n-\t// A Group node represents a grouped expression.\n-\tGroup struct {\n-\t\tLparen scanner.Position\n-\t\tBody   Expression // (body)\n-\t}\n-\n-\t// An Option node represents an optional expression.\n-\tOption struct {\n-\t\tLbrack scanner.Position\n-\t\tBody   Expression // [body]\n-\t}\n-\n-\t// A Repetition node represents a repeated expression.\n-\tRepetition struct {\n-\t\tLbrace scanner.Position\n-\t\tBody   Expression // {body}\n-\t}\n-\n-\t// A Production node represents an EBNF production.\n-\tProduction struct {\n-\t\tName *Name\n-\t\tExpr Expression\n-\t}\n-\n-\t// A Bad node stands for pieces of source code that lead to a parse error.\n-\tBad struct {\n-\t\tTokPos scanner.Position\n-\t\tError  string // parser error message\n-\t}\n-\n-\t// A Grammar is a set of EBNF productions. The map\n-\t// is indexed by production name.\n-\t//\n-\tGrammar map[string]*Production\n-)\n-\n-func (x Alternative) Pos() scanner.Position { return x[0].Pos() } // the parser always generates non-empty Alternative\n-func (x Sequence) Pos() scanner.Position    { return x[0].Pos() } // the parser always generates non-empty Sequences\n-func (x *Name) Pos() scanner.Position       { return x.StringPos }\n-func (x *Token) Pos() scanner.Position      { return x.StringPos }\n-func (x *Range) Pos() scanner.Position      { return x.Begin.Pos() }\n-func (x *Group) Pos() scanner.Position      { return x.Lparen }\n-func (x *Option) Pos() scanner.Position     { return x.Lbrack }\n-func (x *Repetition) Pos() scanner.Position { return x.Lbrace }\n-func (x *Production) Pos() scanner.Position { return x.Name.Pos() }\n-func (x *Bad) Pos() scanner.Position        { return x.TokPos }\n-\n-// ----------------------------------------------------------------------------\n-// Grammar verification\n-\n-func isLexical(name string) bool {\n-\tch, _ := utf8.DecodeRuneInString(name)\n-\treturn !unicode.IsUpper(ch)\n-}\n-\n-type verifier struct {\n-\terrors   errorList\n-\tworklist []*Production\n-\treached  Grammar // set of productions reached from (and including) the root production\n-\tgrammar  Grammar\n-}\n-\n-func (v *verifier) error(pos scanner.Position, msg string) {\n-\tv.errors = append(v.errors, newError(pos, msg))\n-}\n-\n-func (v *verifier) push(prod *Production) {\n-\tname := prod.Name.String\n-\tif _, found := v.reached[name]; !found {\n-\t\tv.worklist = append(v.worklist, prod)\n-\t\tv.reached[name] = prod\n-\t}\n-}\n-\n-func (v *verifier) verifyChar(x *Token) rune {\n-\ts := x.String\n-\tif utf8.RuneCountInString(s) != 1 {\n-\t\tv.error(x.Pos(), \"single char expected, found \"+s)\n-\t\treturn 0\n-\t}\n-\tch, _ := utf8.DecodeRuneInString(s)\n-\treturn ch\n-}\n-\n-func (v *verifier) verifyExpr(expr Expression, lexical bool) {\n-\tswitch x := expr.(type) {\n-\tcase nil:\n-\t\t// empty expression\n-\tcase Alternative:\n-\t\tfor _, e := range x {\n-\t\t\tv.verifyExpr(e, lexical)\n-\t\t}\n-\tcase Sequence:\n-\t\tfor _, e := range x {\n-\t\t\tv.verifyExpr(e, lexical)\n-\t\t}\n-\tcase *Name:\n-\t\t// a production with this name must exist;\n-\t\t// add it to the worklist if not yet processed\n-\t\tif prod, found := v.grammar[x.String]; found {\n-\t\t\tv.push(prod)\n-\t\t} else {\n-\t\t\tv.error(x.Pos(), \"missing production \"+x.String)\n-\t\t}\n-\t\t// within a lexical production references\n-\t\t// to non-lexical productions are invalid\n-\t\tif lexical && !isLexical(x.String) {\n-\t\t\tv.error(x.Pos(), \"reference to non-lexical production \"+x.String)\n-\t\t}\n-\tcase *Token:\n-\t\t// nothing to do for now\n-\tcase *Range:\n-\t\ti := v.verifyChar(x.Begin)\n-\t\tj := v.verifyChar(x.End)\n-\t\tif i >= j {\n-\t\t\tv.error(x.Pos(), \"decreasing character range\")\n-\t\t}\n-\tcase *Group:\n-\t\tv.verifyExpr(x.Body, lexical)\n-\tcase *Option:\n-\t\tv.verifyExpr(x.Body, lexical)\n-\tcase *Repetition:\n-\t\tv.verifyExpr(x.Body, lexical)\n-\tcase *Bad:\n-\t\tv.error(x.Pos(), x.Error)\n-\tdefault:\n-\t\tpanic(fmt.Sprintf(\"internal error: unexpected type %T\", expr))\n-\t}\n-}\n-\n-func (v *verifier) verify(grammar Grammar, start string) {\n-\t// find root production\n-\troot, found := grammar[start]\n-\tif !found {\n-\t\tvar noPos scanner.Position\n-\t\tv.error(noPos, \"no start production \"+start)\n-\t\treturn\n-\t}\n-\n-\t// initialize verifier\n-\tv.worklist = v.worklist[0:0]\n-\tv.reached = make(Grammar)\n-\tv.grammar = grammar\n-\n-\t// work through the worklist\n-\tv.push(root)\n-\tfor {\n-\t\tn := len(v.worklist) - 1\n-\t\tif n < 0 {\n-\t\t\tbreak\n-\t\t}\n-\t\tprod := v.worklist[n]\n-\t\tv.worklist = v.worklist[0:n]\n-\t\tv.verifyExpr(prod.Expr, isLexical(prod.Name.String))\n-\t}\n-\n-\t// check if all productions were reached\n-\tif len(v.reached) < len(v.grammar) {\n-\t\tfor name, prod := range v.grammar {\n-\t\t\tif _, found := v.reached[name]; !found {\n-\t\t\t\tv.error(prod.Pos(), name+\" is unreachable\")\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n-\n-// Verify checks that:\n-//\t- all productions used are defined\n-//\t- all productions defined are used when beginning at start\n-//\t- lexical productions refer only to other lexical productions\n-//\n-// Position information is interpreted relative to the file set fset.\n-//\n-func Verify(grammar Grammar, start string) error {\n-\tvar v verifier\n-\tv.verify(grammar, start)\n-\treturn v.errors.Err()\n-}"}, {"sha": "8cfd6b9c37037ca1753df4580ac71581f540766a", "filename": "libgo/go/exp/ebnf/ebnf_test.go", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Febnf_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Febnf_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnf%2Febnf_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,71 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package ebnf\n-\n-import (\n-\t\"bytes\"\n-\t\"testing\"\n-)\n-\n-var goodGrammars = []string{\n-\t`Program = .`,\n-\n-\t`Program = foo .\n-\t foo = \"foo\" .`,\n-\n-\t`Program = \"a\" | \"b\" \"c\" .`,\n-\n-\t`Program = \"a\" \u2026 \"z\" .`,\n-\n-\t`Program = Song .\n-\t Song = { Note } .\n-\t Note = Do | (Re | Mi | Fa | So | La) | Ti .\n-\t Do = \"c\" .\n-\t Re = \"d\" .\n-\t Mi = \"e\" .\n-\t Fa = \"f\" .\n-\t So = \"g\" .\n-\t La = \"a\" .\n-\t Ti = ti .\n-\t ti = \"b\" .`,\n-}\n-\n-var badGrammars = []string{\n-\t`Program = | .`,\n-\t`Program = | b .`,\n-\t`Program = a \u2026 b .`,\n-\t`Program = \"a\" \u2026 .`,\n-\t`Program = \u2026 \"b\" .`,\n-\t`Program = () .`,\n-\t`Program = [] .`,\n-\t`Program = {} .`,\n-}\n-\n-func checkGood(t *testing.T, src string) {\n-\tgrammar, err := Parse(\"\", bytes.NewBuffer([]byte(src)))\n-\tif err != nil {\n-\t\tt.Errorf(\"Parse(%s) failed: %v\", src, err)\n-\t\treturn\n-\t}\n-\tif err = Verify(grammar, \"Program\"); err != nil {\n-\t\tt.Errorf(\"Verify(%s) failed: %v\", src, err)\n-\t}\n-}\n-\n-func checkBad(t *testing.T, src string) {\n-\t_, err := Parse(\"\", bytes.NewBuffer([]byte(src)))\n-\tif err == nil {\n-\t\tt.Errorf(\"Parse(%s) should have failed\", src)\n-\t}\n-}\n-\n-func TestGrammars(t *testing.T) {\n-\tfor _, src := range goodGrammars {\n-\t\tcheckGood(t, src)\n-\t}\n-\tfor _, src := range badGrammars {\n-\t\tcheckBad(t, src)\n-\t}\n-}"}, {"sha": "7a7e3cc16e4441ccdbc18396b08673cbbfb3844e", "filename": "libgo/go/exp/ebnf/parser.go", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,190 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package ebnf\n-\n-import (\n-\t\"io\"\n-\t\"strconv\"\n-\t\"text/scanner\"\n-)\n-\n-type parser struct {\n-\terrors  errorList\n-\tscanner scanner.Scanner\n-\tpos     scanner.Position // token position\n-\ttok     rune             // one token look-ahead\n-\tlit     string           // token literal\n-}\n-\n-func (p *parser) next() {\n-\tp.tok = p.scanner.Scan()\n-\tp.pos = p.scanner.Position\n-\tp.lit = p.scanner.TokenText()\n-}\n-\n-func (p *parser) error(pos scanner.Position, msg string) {\n-\tp.errors = append(p.errors, newError(pos, msg))\n-}\n-\n-func (p *parser) errorExpected(pos scanner.Position, msg string) {\n-\tmsg = `expected \"` + msg + `\"`\n-\tif pos.Offset == p.pos.Offset {\n-\t\t// the error happened at the current position;\n-\t\t// make the error message more specific\n-\t\tmsg += \", found \" + scanner.TokenString(p.tok)\n-\t\tif p.tok < 0 {\n-\t\t\tmsg += \" \" + p.lit\n-\t\t}\n-\t}\n-\tp.error(pos, msg)\n-}\n-\n-func (p *parser) expect(tok rune) scanner.Position {\n-\tpos := p.pos\n-\tif p.tok != tok {\n-\t\tp.errorExpected(pos, scanner.TokenString(tok))\n-\t}\n-\tp.next() // make progress in any case\n-\treturn pos\n-}\n-\n-func (p *parser) parseIdentifier() *Name {\n-\tpos := p.pos\n-\tname := p.lit\n-\tp.expect(scanner.Ident)\n-\treturn &Name{pos, name}\n-}\n-\n-func (p *parser) parseToken() *Token {\n-\tpos := p.pos\n-\tvalue := \"\"\n-\tif p.tok == scanner.String {\n-\t\tvalue, _ = strconv.Unquote(p.lit)\n-\t\t// Unquote may fail with an error, but only if the scanner found\n-\t\t// an illegal string in the first place. In this case the error\n-\t\t// has already been reported.\n-\t\tp.next()\n-\t} else {\n-\t\tp.expect(scanner.String)\n-\t}\n-\treturn &Token{pos, value}\n-}\n-\n-// ParseTerm returns nil if no term was found.\n-func (p *parser) parseTerm() (x Expression) {\n-\tpos := p.pos\n-\n-\tswitch p.tok {\n-\tcase scanner.Ident:\n-\t\tx = p.parseIdentifier()\n-\n-\tcase scanner.String:\n-\t\ttok := p.parseToken()\n-\t\tx = tok\n-\t\tconst ellipsis = '\u2026' // U+2026, the horizontal ellipsis character\n-\t\tif p.tok == ellipsis {\n-\t\t\tp.next()\n-\t\t\tx = &Range{tok, p.parseToken()}\n-\t\t}\n-\n-\tcase '(':\n-\t\tp.next()\n-\t\tx = &Group{pos, p.parseExpression()}\n-\t\tp.expect(')')\n-\n-\tcase '[':\n-\t\tp.next()\n-\t\tx = &Option{pos, p.parseExpression()}\n-\t\tp.expect(']')\n-\n-\tcase '{':\n-\t\tp.next()\n-\t\tx = &Repetition{pos, p.parseExpression()}\n-\t\tp.expect('}')\n-\t}\n-\n-\treturn x\n-}\n-\n-func (p *parser) parseSequence() Expression {\n-\tvar list Sequence\n-\n-\tfor x := p.parseTerm(); x != nil; x = p.parseTerm() {\n-\t\tlist = append(list, x)\n-\t}\n-\n-\t// no need for a sequence if list.Len() < 2\n-\tswitch len(list) {\n-\tcase 0:\n-\t\tp.errorExpected(p.pos, \"term\")\n-\t\treturn &Bad{p.pos, \"term expected\"}\n-\tcase 1:\n-\t\treturn list[0]\n-\t}\n-\n-\treturn list\n-}\n-\n-func (p *parser) parseExpression() Expression {\n-\tvar list Alternative\n-\n-\tfor {\n-\t\tlist = append(list, p.parseSequence())\n-\t\tif p.tok != '|' {\n-\t\t\tbreak\n-\t\t}\n-\t\tp.next()\n-\t}\n-\t// len(list) > 0\n-\n-\t// no need for an Alternative node if list.Len() < 2\n-\tif len(list) == 1 {\n-\t\treturn list[0]\n-\t}\n-\n-\treturn list\n-}\n-\n-func (p *parser) parseProduction() *Production {\n-\tname := p.parseIdentifier()\n-\tp.expect('=')\n-\tvar expr Expression\n-\tif p.tok != '.' {\n-\t\texpr = p.parseExpression()\n-\t}\n-\tp.expect('.')\n-\treturn &Production{name, expr}\n-}\n-\n-func (p *parser) parse(filename string, src io.Reader) Grammar {\n-\tp.scanner.Init(src)\n-\tp.scanner.Filename = filename\n-\tp.next() // initializes pos, tok, lit\n-\n-\tgrammar := make(Grammar)\n-\tfor p.tok != scanner.EOF {\n-\t\tprod := p.parseProduction()\n-\t\tname := prod.Name.String\n-\t\tif _, found := grammar[name]; !found {\n-\t\t\tgrammar[name] = prod\n-\t\t} else {\n-\t\t\tp.error(prod.Pos(), name+\" declared already\")\n-\t\t}\n-\t}\n-\n-\treturn grammar\n-}\n-\n-// Parse parses a set of EBNF productions from source src.\n-// It returns a set of productions. Errors are reported\n-// for incorrect syntax and if a production is declared\n-// more than once; the filename is used only for error\n-// positions.\n-//\n-func Parse(filename string, src io.Reader) (Grammar, error) {\n-\tvar p parser\n-\tgrammar := p.parse(filename, src)\n-\treturn grammar, p.errors.Err()\n-}"}, {"sha": "4bb22a4cb8098d4dc9f5f88be56df78902812912", "filename": "libgo/go/exp/ebnflint/doc.go", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnflint%2Fdoc.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-/*\n-\n-Ebnflint verifies that EBNF productions are consistent and grammatically correct.\n-It reads them from an HTML document such as the Go specification.\n-\n-Grammar productions are grouped in boxes demarcated by the HTML elements\n-\t<pre class=\"ebnf\">\n-\t</pre>\n-\n-\n-Usage:\n-\tgo tool ebnflint [--start production] [file]\n-\n-The --start flag specifies the name of the start production for\n-the grammar; it defaults to \"Start\".\n-\n-*/\n-package documentation"}, {"sha": "d54fb229d03a5b15ad60ce3e5ff068ca621b6f96", "filename": "libgo/go/exp/ebnflint/ebnflint.go", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,122 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import (\n-\t\"bytes\"\n-\t\"exp/ebnf\"\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"go/scanner\"\n-\t\"go/token\"\n-\t\"io\"\n-\t\"io/ioutil\"\n-\t\"os\"\n-\t\"path/filepath\"\n-)\n-\n-var fset = token.NewFileSet()\n-var start = flag.String(\"start\", \"Start\", \"name of start production\")\n-\n-func usage() {\n-\tfmt.Fprintf(os.Stderr, \"usage: go tool ebnflint [flags] [filename]\\n\")\n-\tflag.PrintDefaults()\n-\tos.Exit(1)\n-}\n-\n-// Markers around EBNF sections in .html files\n-var (\n-\topen  = []byte(`<pre class=\"ebnf\">`)\n-\tclose = []byte(`</pre>`)\n-)\n-\n-func report(err error) {\n-\tscanner.PrintError(os.Stderr, err)\n-\tos.Exit(1)\n-}\n-\n-func extractEBNF(src []byte) []byte {\n-\tvar buf bytes.Buffer\n-\n-\tfor {\n-\t\t// i = beginning of EBNF text\n-\t\ti := bytes.Index(src, open)\n-\t\tif i < 0 {\n-\t\t\tbreak // no EBNF found - we are done\n-\t\t}\n-\t\ti += len(open)\n-\n-\t\t// write as many newlines as found in the excluded text\n-\t\t// to maintain correct line numbers in error messages\n-\t\tfor _, ch := range src[0:i] {\n-\t\t\tif ch == '\\n' {\n-\t\t\t\tbuf.WriteByte('\\n')\n-\t\t\t}\n-\t\t}\n-\n-\t\t// j = end of EBNF text (or end of source)\n-\t\tj := bytes.Index(src[i:], close) // close marker\n-\t\tif j < 0 {\n-\t\t\tj = len(src) - i\n-\t\t}\n-\t\tj += i\n-\n-\t\t// copy EBNF text\n-\t\tbuf.Write(src[i:j])\n-\n-\t\t// advance\n-\t\tsrc = src[j:]\n-\t}\n-\n-\treturn buf.Bytes()\n-}\n-\n-func main() {\n-\tflag.Parse()\n-\n-\tvar (\n-\t\tname string\n-\t\tr    io.Reader\n-\t)\n-\tswitch flag.NArg() {\n-\tcase 0:\n-\t\tname, r = \"<stdin>\", os.Stdin\n-\tcase 1:\n-\t\tname = flag.Arg(0)\n-\tdefault:\n-\t\tusage()\n-\t}\n-\n-\tif err := verify(name, *start, r); err != nil {\n-\t\treport(err)\n-\t}\n-}\n-\n-func verify(name, start string, r io.Reader) error {\n-\tif r == nil {\n-\t\tf, err := os.Open(name)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdefer f.Close()\n-\t\tr = f\n-\t}\n-\n-\tsrc, err := ioutil.ReadAll(r)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n-\tif filepath.Ext(name) == \".html\" || bytes.Index(src, open) >= 0 {\n-\t\tsrc = extractEBNF(src)\n-\t}\n-\n-\tgrammar, err := ebnf.Parse(name, bytes.NewBuffer(src))\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n-\treturn ebnf.Verify(grammar, start)\n-}"}, {"sha": "875dbc19aca0976be38f90fd28443ad291be18ef", "filename": "libgo/go/exp/ebnflint/ebnflint_test.go", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnflint%2Febnflint_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import (\n-\t\"runtime\"\n-\t\"testing\"\n-)\n-\n-func TestSpec(t *testing.T) {\n-\tif err := verify(runtime.GOROOT()+\"/doc/go_spec.html\", \"SourceFile\", nil); err != nil {\n-\t\tt.Fatal(err)\n-\t}\n-}"}, {"sha": "1168086771fb1e7d583ebbfe2a925527781cbeed", "filename": "libgo/go/exp/gotype/doc.go", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgotype%2Fdoc.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-/*\n-The gotype command does syntactic and semantic analysis of Go files\n-and packages similar to the analysis performed by the front-end of\n-a Go compiler. Errors are reported if the analysis fails; otherwise\n-gotype is quiet (unless -v is set).\n-\n-Without a list of paths, gotype processes the standard input, which must\n-be the source of a single package file.\n-\n-Given a list of file names, each file must be a source file belonging to\n-the same package unless the package name is explicitly specified with the\n--p flag.\n-\n-Given a directory name, gotype collects all .go files in the directory\n-and processes them as if they were provided as an explicit list of file\n-names. Each directory is processed independently. Files starting with .\n-or not ending in .go are ignored.\n-\n-Usage:\n-\tgotype [flags] [path ...]\n-\n-The flags are:\n-\t-e\n-\t\tPrint all (including spurious) errors.\n-\t-p pkgName\n-\t\tProcess only those files in package pkgName.\n-\t-r\n-\t\tRecursively process subdirectories.\n-\t-v\n-\t\tVerbose mode.\n-\n-Debugging flags:\n-\t-comments\n-\t\tParse comments (ignored if -ast not set).\n-\t-ast\n-\t\tPrint AST (disables concurrent parsing).\n-\t-trace\n-\t\tPrint parse trace (disables concurrent parsing).\n-\n-\n-Examples\n-\n-To check the files file.go, old.saved, and .ignored:\n-\n-\tgotype file.go old.saved .ignored\n-\n-To check all .go files belonging to package main in the current directory\n-and recursively in all subdirectories:\n-\n-\tgotype -p main -r .\n-\n-To verify the output of a pipe:\n-\n-\techo \"package foo\" | gotype\n-\n-*/\n-package documentation\n-\n-// BUG(gri): At the moment, only single-file scope analysis is performed."}, {"sha": "bb3237c37cb63252a0d1a4704cb9c74a932df52d", "filename": "libgo/go/exp/gotype/gotype.go", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,184 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import (\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"go/ast\"\n-\t\"go/parser\"\n-\t\"go/scanner\"\n-\t\"go/token\"\n-\t\"go/types\"\n-\t\"io/ioutil\"\n-\t\"os\"\n-\t\"path/filepath\"\n-\t\"strings\"\n-)\n-\n-var (\n-\t// main operation modes\n-\tpkgName   = flag.String(\"p\", \"\", \"process only those files in package pkgName\")\n-\trecursive = flag.Bool(\"r\", false, \"recursively process subdirectories\")\n-\tverbose   = flag.Bool(\"v\", false, \"verbose mode\")\n-\tallErrors = flag.Bool(\"e\", false, \"print all (including spurious) errors\")\n-\n-\t// debugging support\n-\tparseComments = flag.Bool(\"comments\", false, \"parse comments (ignored if -ast not set)\")\n-\tprintTrace    = flag.Bool(\"trace\", false, \"print parse trace\")\n-\tprintAST      = flag.Bool(\"ast\", false, \"print AST\")\n-)\n-\n-var exitCode = 0\n-\n-func usage() {\n-\tfmt.Fprintf(os.Stderr, \"usage: gotype [flags] [path ...]\\n\")\n-\tflag.PrintDefaults()\n-\tos.Exit(2)\n-}\n-\n-func report(err error) {\n-\tscanner.PrintError(os.Stderr, err)\n-\texitCode = 2\n-}\n-\n-// parse returns the AST for the Go source src.\n-// The filename is for error reporting only.\n-// The result is nil if there were errors or if\n-// the file does not belong to the -p package.\n-func parse(fset *token.FileSet, filename string, src []byte) *ast.File {\n-\tif *verbose {\n-\t\tfmt.Println(filename)\n-\t}\n-\n-\t// ignore files with different package name\n-\tif *pkgName != \"\" {\n-\t\tfile, err := parser.ParseFile(fset, filename, src, parser.PackageClauseOnly)\n-\t\tif err != nil {\n-\t\t\treport(err)\n-\t\t\treturn nil\n-\t\t}\n-\t\tif file.Name.Name != *pkgName {\n-\t\t\tif *verbose {\n-\t\t\t\tfmt.Printf(\"\\tignored (package %s)\\n\", file.Name.Name)\n-\t\t\t}\n-\t\t\treturn nil\n-\t\t}\n-\t}\n-\n-\t// parse entire file\n-\tmode := parser.DeclarationErrors\n-\tif *allErrors {\n-\t\tmode |= parser.SpuriousErrors\n-\t}\n-\tif *parseComments && *printAST {\n-\t\tmode |= parser.ParseComments\n-\t}\n-\tif *printTrace {\n-\t\tmode |= parser.Trace\n-\t}\n-\tfile, err := parser.ParseFile(fset, filename, src, mode)\n-\tif err != nil {\n-\t\treport(err)\n-\t\treturn nil\n-\t}\n-\tif *printAST {\n-\t\tast.Print(fset, file)\n-\t}\n-\n-\treturn file\n-}\n-\n-func parseStdin(fset *token.FileSet) (files []*ast.File) {\n-\tsrc, err := ioutil.ReadAll(os.Stdin)\n-\tif err != nil {\n-\t\treport(err)\n-\t\treturn\n-\t}\n-\tconst filename = \"<standard input>\"\n-\tif file := parse(fset, filename, src); file != nil {\n-\t\tfiles = []*ast.File{file}\n-\t}\n-\treturn\n-}\n-\n-func parseFiles(fset *token.FileSet, filenames []string) (files []*ast.File) {\n-\tfor _, filename := range filenames {\n-\t\tsrc, err := ioutil.ReadFile(filename)\n-\t\tif err != nil {\n-\t\t\treport(err)\n-\t\t\tcontinue\n-\t\t}\n-\t\tif file := parse(fset, filename, src); file != nil {\n-\t\t\tfiles = append(files, file)\n-\t\t}\n-\t}\n-\treturn\n-}\n-\n-func isGoFilename(filename string) bool {\n-\t// ignore non-Go files\n-\treturn !strings.HasPrefix(filename, \".\") && strings.HasSuffix(filename, \".go\")\n-}\n-\n-func processDirectory(dirname string) {\n-\tf, err := os.Open(dirname)\n-\tif err != nil {\n-\t\treport(err)\n-\t\treturn\n-\t}\n-\tfilenames, err := f.Readdirnames(-1)\n-\tf.Close()\n-\tif err != nil {\n-\t\treport(err)\n-\t\t// continue since filenames may not be empty\n-\t}\n-\tfor i, filename := range filenames {\n-\t\tfilenames[i] = filepath.Join(dirname, filename)\n-\t}\n-\tprocessFiles(filenames, false)\n-}\n-\n-func processFiles(filenames []string, allFiles bool) {\n-\ti := 0\n-\tfor _, filename := range filenames {\n-\t\tswitch info, err := os.Stat(filename); {\n-\t\tcase err != nil:\n-\t\t\treport(err)\n-\t\tcase info.IsDir():\n-\t\t\tif allFiles || *recursive {\n-\t\t\t\tprocessDirectory(filename)\n-\t\t\t}\n-\t\tdefault:\n-\t\t\tif allFiles || isGoFilename(info.Name()) {\n-\t\t\t\tfilenames[i] = filename\n-\t\t\t\ti++\n-\t\t\t}\n-\t\t}\n-\t}\n-\tfset := token.NewFileSet()\n-\tprocessPackage(fset, parseFiles(fset, filenames[0:i]))\n-}\n-\n-func processPackage(fset *token.FileSet, files []*ast.File) {\n-\t_, err := types.Check(fset, files)\n-\tif err != nil {\n-\t\treport(err)\n-\t}\n-}\n-\n-func main() {\n-\tflag.Usage = usage\n-\tflag.Parse()\n-\n-\tif flag.NArg() == 0 {\n-\t\tfset := token.NewFileSet()\n-\t\tprocessPackage(fset, parseStdin(fset))\n-\t} else {\n-\t\tprocessFiles(flag.Args(), true)\n-\t}\n-\n-\tos.Exit(exitCode)\n-}"}, {"sha": "67ab7cfa74a51dceb5d9095704d92cd5c195f208", "filename": "libgo/go/exp/gotype/gotype_test.go", "status": "removed", "additions": 0, "deletions": 215, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgotype%2Fgotype_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,215 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import (\n-\t\"go/build\"\n-\t\"path/filepath\"\n-\t\"runtime\"\n-\t\"strings\"\n-\t\"testing\"\n-)\n-\n-func runTest(t *testing.T, path string) {\n-\texitCode = 0\n-\n-\t*recursive = false\n-\tif suffix := \".go\"; strings.HasSuffix(path, suffix) {\n-\t\t// single file\n-\t\tpath = filepath.Join(runtime.GOROOT(), \"src/pkg\", path)\n-\t\tpath, file := filepath.Split(path)\n-\t\t*pkgName = file[:len(file)-len(suffix)]\n-\t\tprocessFiles([]string{path}, true)\n-\t} else {\n-\t\t// package directory\n-\t\t// TODO(gri) gotype should use the build package instead\n-\t\tctxt := build.Default\n-\t\tctxt.CgoEnabled = false\n-\t\tpkg, err := ctxt.Import(path, \"\", 0)\n-\t\tif err != nil {\n-\t\t\tt.Errorf(\"build.Import error for path = %s: %s\", path, err)\n-\t\t\treturn\n-\t\t}\n-\t\t// TODO(gri) there ought to be a more direct way using the build package...\n-\t\tfiles := make([]string, len(pkg.GoFiles))\n-\t\tfor i, file := range pkg.GoFiles {\n-\t\t\tfiles[i] = filepath.Join(pkg.Dir, file)\n-\t\t}\n-\t\t*pkgName = pkg.Name\n-\t\tprocessFiles(files, true)\n-\t}\n-\n-\tif exitCode != 0 {\n-\t\tt.Errorf(\"processing %s failed: exitCode = %d\", path, exitCode)\n-\t}\n-}\n-\n-var tests = []string{\n-\t// individual files\n-\t\"exp/gotype/testdata/test1.go\",\n-\n-\t// directories\n-\t// Note: Packages that don't typecheck yet are commented out.\n-\t// Unless there is a comment next to the commented out packages,\n-\t// the package doesn't typecheck due to errors in the shift\n-\t// expression checker.\n-\t\"archive/tar\",\n-\t\"archive/zip\",\n-\n-\t\"bufio\",\n-\t\"bytes\",\n-\n-\t// \"compress/bzip2\",\n-\t\"compress/flate\",\n-\t\"compress/gzip\",\n-\t// \"compress/lzw\",\n-\t\"compress/zlib\",\n-\n-\t\"container/heap\",\n-\t\"container/list\",\n-\t\"container/ring\",\n-\n-\t\"crypto\",\n-\t\"crypto/aes\",\n-\t\"crypto/cipher\",\n-\t\"crypto/des\",\n-\t\"crypto/dsa\",\n-\t\"crypto/ecdsa\",\n-\t\"crypto/elliptic\",\n-\t\"crypto/hmac\",\n-\t\"crypto/md5\",\n-\t// \"crypto/rand\",\n-\t\"crypto/rc4\",\n-\t// \"crypto/rsa\", // intermittent failure: /home/gri/go2/src/pkg/crypto/rsa/pkcs1v15.go:21:27: undeclared name: io\n-\t\"crypto/sha1\",\n-\t\"crypto/sha256\",\n-\t\"crypto/sha512\",\n-\t\"crypto/subtle\",\n-\t\"crypto/tls\",\n-\t\"crypto/x509\",\n-\t\"crypto/x509/pkix\",\n-\n-\t\"database/sql\",\n-\t\"database/sql/driver\",\n-\n-\t// \"debug/dwarf\",\n-\t\"debug/elf\",\n-\t\"debug/gosym\",\n-\t\"debug/macho\",\n-\t\"debug/pe\",\n-\n-\t\"encoding/ascii85\",\n-\t// \"encoding/asn1\",\n-\t\"encoding/base32\",\n-\t\"encoding/base64\",\n-\t\"encoding/binary\",\n-\t\"encoding/csv\",\n-\t\"encoding/gob\",\n-\t\"encoding/hex\",\n-\t\"encoding/json\",\n-\t\"encoding/pem\",\n-\t\"encoding/xml\",\n-\n-\t\"errors\",\n-\t\"expvar\",\n-\t\"flag\",\n-\t\"fmt\",\n-\n-\t\"exp/gotype\",\n-\n-\t\"go/ast\",\n-\t\"go/build\",\n-\t\"go/doc\",\n-\t\"go/format\",\n-\t\"go/parser\",\n-\t\"go/printer\",\n-\t\"go/scanner\",\n-\t// \"go/token\",\n-\t\"go/types\",\n-\n-\t\"hash/adler32\",\n-\t\"hash/crc32\",\n-\t\"hash/crc64\",\n-\t\"hash/fnv\",\n-\n-\t\"image\",\n-\t\"image/color\",\n-\t\"image/draw\",\n-\t\"image/gif\",\n-\t// \"image/jpeg\",\n-\t\"image/png\",\n-\n-\t\"index/suffixarray\",\n-\n-\t\"io\",\n-\t\"io/ioutil\",\n-\n-\t\"log\",\n-\t\"log/syslog\",\n-\n-\t// \"math\",\n-\t//\"math/big\",\n-\t\"math/cmplx\",\n-\t\"math/rand\",\n-\n-\t\"mime\",\n-\t\"mime/multipart\",\n-\n-\t// \"net\",\n-\t\"net/http\",\n-\t\"net/http/cgi\",\n-\t\"net/http/fcgi\",\n-\t\"net/http/httptest\",\n-\t\"net/http/httputil\",\n-\t\"net/http/pprof\",\n-\t\"net/mail\",\n-\t\"net/rpc\",\n-\t\"net/rpc/jsonrpc\",\n-\t\"net/smtp\",\n-\t// \"net/textproto\",\n-\t\"net/url\",\n-\n-\t\"path\",\n-\t\"path/filepath\",\n-\n-\t\"reflect\",\n-\n-\t\"regexp\",\n-\t\"regexp/syntax\",\n-\n-\t// \"runtime\",\n-\t\"runtime/cgo\",\n-\t\"runtime/debug\",\n-\t\"runtime/pprof\",\n-\n-\t\"sort\",\n-\t// \"strconv\",\n-\t\"strings\",\n-\n-\t\"sync\",\n-\t\"sync/atomic\",\n-\n-\t// \"syscall\",\n-\n-\t\"testing\",\n-\t\"testing/iotest\",\n-\t\"testing/quick\",\n-\n-\t// \"text/scanner\",\n-\t\"text/tabwriter\",\n-\t\"text/template\",\n-\t\"text/template/parse\",\n-\n-\t\"time\",\n-\t\"unicode\",\n-\t\"unicode/utf16\",\n-\t\"unicode/utf8\",\n-}\n-\n-func Test(t *testing.T) {\n-\tfor _, test := range tests {\n-\t\trunTest(t, test)\n-\t}\n-}"}, {"sha": "6a6f477e7807a72a6c3b9ed9b9bdcf960c86e0e8", "filename": "libgo/go/exp/gotype/testdata/test1.go", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Ftestdata%2Ftest1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fgotype%2Ftestdata%2Ftest1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgotype%2Ftestdata%2Ftest1.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package test1\n-\n-func _() {\n-\t// the scope of a local type declaration starts immediately after the type name\n-\ttype T struct{ _ *T }\n-}\n-\n-func _(x interface{}) {\n-\t// the variable defined by a TypeSwitchGuard is declared in each TypeCaseClause\n-\tswitch t := x.(type) {\n-\tcase int:\n-\t\t_ = t\n-\tcase float32:\n-\t\t_ = t\n-\tdefault:\n-\t\t_ = t\n-\t}\n-\n-\t// the variable defined by a TypeSwitchGuard must not conflict with other\n-\t// variables declared in the initial simple statement\n-\tswitch t := 0; t := x.(type) {\n-\t}\n-}"}, {"sha": "2dbd0fbf7f51cec0932da617b3dd9eac241dfb02", "filename": "libgo/go/exp/html/atom/atom.go", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,81 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// Package atom provides integer codes (also known as atoms) for a fixed set of\n-// frequently occurring HTML strings: tag names and attribute keys such as \"p\"\n-// and \"id\".\n-//\n-// Sharing an atom's name between all elements with the same tag can result in\n-// fewer string allocations when tokenizing and parsing HTML. Integer\n-// comparisons are also generally faster than string comparisons.\n-//\n-// The value of an atom's particular code is not guaranteed to stay the same\n-// between versions of this package. Neither is any ordering guaranteed:\n-// whether atom.H1 < atom.H2 may also change. The codes are not guaranteed to\n-// be dense. The only guarantees are that e.g. looking up \"div\" will yield\n-// atom.Div, calling atom.Div.String will return \"div\", and atom.Div != 0.\n-//\n-// TODO(rsc): When this package moves out of exp we need to freeze atom values\n-// across releases.\n-package atom\n-\n-// Atom is an integer code for a string. The zero value maps to \"\".\n-type Atom uint32\n-\n-// String returns the atom's name.\n-func (a Atom) String() string {\n-\tstart := uint32(a >> 8)\n-\tn := uint32(a & 0xff)\n-\tif start+n > uint32(len(atomText)) {\n-\t\treturn \"\"\n-\t}\n-\treturn atomText[start : start+n]\n-}\n-\n-func (a Atom) string() string {\n-\treturn atomText[a>>8 : a>>8+a&0xff]\n-}\n-\n-// fnv computes the FNV hash with an arbitrary starting value h.\n-func fnv(h uint32, s []byte) uint32 {\n-\tfor i := range s {\n-\t\th ^= uint32(s[i])\n-\t\th *= 16777619\n-\t}\n-\treturn h\n-}\n-\n-func match(s string, t []byte) bool {\n-\tfor i, c := range t {\n-\t\tif s[i] != c {\n-\t\t\treturn false\n-\t\t}\n-\t}\n-\treturn true\n-}\n-\n-// Lookup returns the atom whose name is s. It returns zero if there is no\n-// such atom. The lookup is case sensitive.\n-func Lookup(s []byte) Atom {\n-\tif len(s) == 0 || len(s) > maxAtomLen {\n-\t\treturn 0\n-\t}\n-\th := fnv(hash0, s)\n-\tif a := table[h&uint32(len(table)-1)]; int(a&0xff) == len(s) && match(a.string(), s) {\n-\t\treturn a\n-\t}\n-\tif a := table[(h>>16)&uint32(len(table)-1)]; int(a&0xff) == len(s) && match(a.string(), s) {\n-\t\treturn a\n-\t}\n-\treturn 0\n-}\n-\n-// String returns a string whose contents are equal to s. In that sense, it is\n-// equivalent to string(s) but may be more efficient.\n-func String(s []byte) string {\n-\tif a := Lookup(s); a != 0 {\n-\t\treturn a.String()\n-\t}\n-\treturn string(s)\n-}"}, {"sha": "6e33704dd5e114c1610e8239f6162a828db39132", "filename": "libgo/go/exp/html/atom/atom_test.go", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fatom_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,109 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package atom\n-\n-import (\n-\t\"sort\"\n-\t\"testing\"\n-)\n-\n-func TestKnown(t *testing.T) {\n-\tfor _, s := range testAtomList {\n-\t\tif atom := Lookup([]byte(s)); atom.String() != s {\n-\t\t\tt.Errorf(\"Lookup(%q) = %#x (%q)\", s, uint32(atom), atom.String())\n-\t\t}\n-\t}\n-}\n-\n-func TestHits(t *testing.T) {\n-\tfor _, a := range table {\n-\t\tif a == 0 {\n-\t\t\tcontinue\n-\t\t}\n-\t\tgot := Lookup([]byte(a.String()))\n-\t\tif got != a {\n-\t\t\tt.Errorf(\"Lookup(%q) = %#x, want %#x\", a.String(), uint32(got), uint32(a))\n-\t\t}\n-\t}\n-}\n-\n-func TestMisses(t *testing.T) {\n-\ttestCases := []string{\n-\t\t\"\",\n-\t\t\"\\x00\",\n-\t\t\"\\xff\",\n-\t\t\"A\",\n-\t\t\"DIV\",\n-\t\t\"Div\",\n-\t\t\"dIV\",\n-\t\t\"aa\",\n-\t\t\"a\\x00\",\n-\t\t\"ab\",\n-\t\t\"abb\",\n-\t\t\"abbr0\",\n-\t\t\"abbr \",\n-\t\t\" abbr\",\n-\t\t\" a\",\n-\t\t\"acceptcharset\",\n-\t\t\"acceptCharset\",\n-\t\t\"accept_charset\",\n-\t\t\"h0\",\n-\t\t\"h1h2\",\n-\t\t\"h7\",\n-\t\t\"onClick\",\n-\t\t\"\u03bb\",\n-\t\t// The following string has the same hash (0xa1d7fab7) as \"onmouseover\".\n-\t\t\"\\x00\\x00\\x00\\x00\\x00\\x50\\x18\\xae\\x38\\xd0\\xb7\",\n-\t}\n-\tfor _, tc := range testCases {\n-\t\tgot := Lookup([]byte(tc))\n-\t\tif got != 0 {\n-\t\t\tt.Errorf(\"Lookup(%q): got %d, want 0\", tc, got)\n-\t\t}\n-\t}\n-}\n-\n-func TestForeignObject(t *testing.T) {\n-\tconst (\n-\t\tafo = Foreignobject\n-\t\tafO = ForeignObject\n-\t\tsfo = \"foreignobject\"\n-\t\tsfO = \"foreignObject\"\n-\t)\n-\tif got := Lookup([]byte(sfo)); got != afo {\n-\t\tt.Errorf(\"Lookup(%q): got %#v, want %#v\", sfo, got, afo)\n-\t}\n-\tif got := Lookup([]byte(sfO)); got != afO {\n-\t\tt.Errorf(\"Lookup(%q): got %#v, want %#v\", sfO, got, afO)\n-\t}\n-\tif got := afo.String(); got != sfo {\n-\t\tt.Errorf(\"Atom(%#v).String(): got %q, want %q\", afo, got, sfo)\n-\t}\n-\tif got := afO.String(); got != sfO {\n-\t\tt.Errorf(\"Atom(%#v).String(): got %q, want %q\", afO, got, sfO)\n-\t}\n-}\n-\n-func BenchmarkLookup(b *testing.B) {\n-\tsortedTable := make([]string, 0, len(table))\n-\tfor _, a := range table {\n-\t\tif a != 0 {\n-\t\t\tsortedTable = append(sortedTable, a.String())\n-\t\t}\n-\t}\n-\tsort.Strings(sortedTable)\n-\n-\tx := make([][]byte, 1000)\n-\tfor i := range x {\n-\t\tx[i] = []byte(sortedTable[i%len(sortedTable)])\n-\t}\n-\n-\tb.ResetTimer()\n-\tfor i := 0; i < b.N; i++ {\n-\t\tfor _, s := range x {\n-\t\t\tLookup(s)\n-\t\t}\n-\t}\n-}"}, {"sha": "9958a71884266f49b663dad4645189d17ca49654", "filename": "libgo/go/exp/html/atom/gen.go", "status": "removed", "additions": 0, "deletions": 636, "changes": 636, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fgen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fgen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Fgen.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,636 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build ignore\n-\n-package main\n-\n-// This program generates table.go and table_test.go.\n-// Invoke as\n-//\n-//\tgo run gen.go |gofmt >table.go\n-//\tgo run gen.go -test |gofmt >table_test.go\n-\n-import (\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"math/rand\"\n-\t\"os\"\n-\t\"sort\"\n-\t\"strings\"\n-)\n-\n-// identifier converts s to a Go exported identifier.\n-// It converts \"div\" to \"Div\" and \"accept-charset\" to \"AcceptCharset\".\n-func identifier(s string) string {\n-\tb := make([]byte, 0, len(s))\n-\tcap := true\n-\tfor _, c := range s {\n-\t\tif c == '-' {\n-\t\t\tcap = true\n-\t\t\tcontinue\n-\t\t}\n-\t\tif cap && 'a' <= c && c <= 'z' {\n-\t\t\tc -= 'a' - 'A'\n-\t\t}\n-\t\tcap = false\n-\t\tb = append(b, byte(c))\n-\t}\n-\treturn string(b)\n-}\n-\n-var test = flag.Bool(\"test\", false, \"generate table_test.go\")\n-\n-func main() {\n-\tflag.Parse()\n-\n-\tvar all []string\n-\tall = append(all, elements...)\n-\tall = append(all, attributes...)\n-\tall = append(all, eventHandlers...)\n-\tall = append(all, extra...)\n-\tsort.Strings(all)\n-\n-\tif *test {\n-\t\tfmt.Printf(\"// generated by go run gen.go -test; DO NOT EDIT\\n\\n\")\n-\t\tfmt.Printf(\"package atom\\n\\n\")\n-\t\tfmt.Printf(\"var testAtomList = []string{\\n\")\n-\t\tfor _, s := range all {\n-\t\t\tfmt.Printf(\"\\t%q,\\n\", s)\n-\t\t}\n-\t\tfmt.Printf(\"}\\n\")\n-\t\treturn\n-\t}\n-\n-\t// uniq - lists have dups\n-\t// compute max len too\n-\tmaxLen := 0\n-\tw := 0\n-\tfor _, s := range all {\n-\t\tif w == 0 || all[w-1] != s {\n-\t\t\tif maxLen < len(s) {\n-\t\t\t\tmaxLen = len(s)\n-\t\t\t}\n-\t\t\tall[w] = s\n-\t\t\tw++\n-\t\t}\n-\t}\n-\tall = all[:w]\n-\n-\t// Find hash that minimizes table size.\n-\tvar best *table\n-\tfor i := 0; i < 1000000; i++ {\n-\t\tif best != nil && 1<<(best.k-1) < len(all) {\n-\t\t\tbreak\n-\t\t}\n-\t\th := rand.Uint32()\n-\t\tfor k := uint(0); k <= 16; k++ {\n-\t\t\tif best != nil && k >= best.k {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tvar t table\n-\t\t\tif t.init(h, k, all) {\n-\t\t\t\tbest = &t\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif best == nil {\n-\t\tfmt.Fprintf(os.Stderr, \"failed to construct string table\\n\")\n-\t\tos.Exit(1)\n-\t}\n-\n-\t// Lay out strings, using overlaps when possible.\n-\tlayout := append([]string{}, all...)\n-\n-\t// Remove strings that are substrings of other strings\n-\tfor changed := true; changed; {\n-\t\tchanged = false\n-\t\tfor i, s := range layout {\n-\t\t\tif s == \"\" {\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\tfor j, t := range layout {\n-\t\t\t\tif i != j && t != \"\" && strings.Contains(s, t) {\n-\t\t\t\t\tchanged = true\n-\t\t\t\t\tlayout[j] = \"\"\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t// Join strings where one suffix matches another prefix.\n-\tfor {\n-\t\t// Find best i, j, k such that layout[i][len-k:] == layout[j][:k],\n-\t\t// maximizing overlap length k.\n-\t\tbesti := -1\n-\t\tbestj := -1\n-\t\tbestk := 0\n-\t\tfor i, s := range layout {\n-\t\t\tif s == \"\" {\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\tfor j, t := range layout {\n-\t\t\t\tif i == j {\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t\tfor k := bestk + 1; k <= len(s) && k <= len(t); k++ {\n-\t\t\t\t\tif s[len(s)-k:] == t[:k] {\n-\t\t\t\t\t\tbesti = i\n-\t\t\t\t\t\tbestj = j\n-\t\t\t\t\t\tbestk = k\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif bestk > 0 {\n-\t\t\tlayout[besti] += layout[bestj][bestk:]\n-\t\t\tlayout[bestj] = \"\"\n-\t\t\tcontinue\n-\t\t}\n-\t\tbreak\n-\t}\n-\n-\ttext := strings.Join(layout, \"\")\n-\n-\tatom := map[string]uint32{}\n-\tfor _, s := range all {\n-\t\toff := strings.Index(text, s)\n-\t\tif off < 0 {\n-\t\t\tpanic(\"lost string \" + s)\n-\t\t}\n-\t\tatom[s] = uint32(off<<8 | len(s))\n-\t}\n-\n-\t// Generate the Go code.\n-\tfmt.Printf(\"// generated by go run gen.go; DO NOT EDIT\\n\\n\")\n-\tfmt.Printf(\"package atom\\n\\nconst (\\n\")\n-\tfor _, s := range all {\n-\t\tfmt.Printf(\"\\t%s Atom = %#x\\n\", identifier(s), atom[s])\n-\t}\n-\tfmt.Printf(\")\\n\\n\")\n-\n-\tfmt.Printf(\"const hash0 = %#x\\n\\n\", best.h0)\n-\tfmt.Printf(\"const maxAtomLen = %d\\n\\n\", maxLen)\n-\n-\tfmt.Printf(\"var table = [1<<%d]Atom{\\n\", best.k)\n-\tfor i, s := range best.tab {\n-\t\tif s == \"\" {\n-\t\t\tcontinue\n-\t\t}\n-\t\tfmt.Printf(\"\\t%#x: %#x, // %s\\n\", i, atom[s], s)\n-\t}\n-\tfmt.Printf(\"}\\n\")\n-\tdatasize := (1 << best.k) * 4\n-\n-\tfmt.Printf(\"const atomText =\\n\")\n-\ttextsize := len(text)\n-\tfor len(text) > 60 {\n-\t\tfmt.Printf(\"\\t%q +\\n\", text[:60])\n-\t\ttext = text[60:]\n-\t}\n-\tfmt.Printf(\"\\t%q\\n\\n\", text)\n-\n-\tfmt.Fprintf(os.Stderr, \"%d atoms; %d string bytes + %d tables = %d total data\\n\", len(all), textsize, datasize, textsize+datasize)\n-}\n-\n-type byLen []string\n-\n-func (x byLen) Less(i, j int) bool { return len(x[i]) > len(x[j]) }\n-func (x byLen) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n-func (x byLen) Len() int           { return len(x) }\n-\n-// fnv computes the FNV hash with an arbitrary starting value h.\n-func fnv(h uint32, s string) uint32 {\n-\tfor i := 0; i < len(s); i++ {\n-\t\th ^= uint32(s[i])\n-\t\th *= 16777619\n-\t}\n-\treturn h\n-}\n-\n-// A table represents an attempt at constructing the lookup table.\n-// The lookup table uses cuckoo hashing, meaning that each string\n-// can be found in one of two positions.\n-type table struct {\n-\th0   uint32\n-\tk    uint\n-\tmask uint32\n-\ttab  []string\n-}\n-\n-// hash returns the two hashes for s.\n-func (t *table) hash(s string) (h1, h2 uint32) {\n-\th := fnv(t.h0, s)\n-\th1 = h & t.mask\n-\th2 = (h >> 16) & t.mask\n-\treturn\n-}\n-\n-// init initializes the table with the given parameters.\n-// h0 is the initial hash value,\n-// k is the number of bits of hash value to use, and\n-// x is the list of strings to store in the table.\n-// init returns false if the table cannot be constructed.\n-func (t *table) init(h0 uint32, k uint, x []string) bool {\n-\tt.h0 = h0\n-\tt.k = k\n-\tt.tab = make([]string, 1<<k)\n-\tt.mask = 1<<k - 1\n-\tfor _, s := range x {\n-\t\tif !t.insert(s) {\n-\t\t\treturn false\n-\t\t}\n-\t}\n-\treturn true\n-}\n-\n-// insert inserts s in the table.\n-func (t *table) insert(s string) bool {\n-\th1, h2 := t.hash(s)\n-\tif t.tab[h1] == \"\" {\n-\t\tt.tab[h1] = s\n-\t\treturn true\n-\t}\n-\tif t.tab[h2] == \"\" {\n-\t\tt.tab[h2] = s\n-\t\treturn true\n-\t}\n-\tif t.push(h1, 0) {\n-\t\tt.tab[h1] = s\n-\t\treturn true\n-\t}\n-\tif t.push(h2, 0) {\n-\t\tt.tab[h2] = s\n-\t\treturn true\n-\t}\n-\treturn false\n-}\n-\n-// push attempts to push aside the entry in slot i.\n-func (t *table) push(i uint32, depth int) bool {\n-\tif depth > len(t.tab) {\n-\t\treturn false\n-\t}\n-\ts := t.tab[i]\n-\th1, h2 := t.hash(s)\n-\tj := h1 + h2 - i\n-\tif t.tab[j] != \"\" && !t.push(j, depth+1) {\n-\t\treturn false\n-\t}\n-\tt.tab[j] = s\n-\treturn true\n-}\n-\n-// The lists of element names and attribute keys were taken from\n-// http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html\n-// as of the \"HTML Living Standard - Last Updated 30 May 2012\" version.\n-\n-var elements = []string{\n-\t\"a\",\n-\t\"abbr\",\n-\t\"address\",\n-\t\"area\",\n-\t\"article\",\n-\t\"aside\",\n-\t\"audio\",\n-\t\"b\",\n-\t\"base\",\n-\t\"bdi\",\n-\t\"bdo\",\n-\t\"blockquote\",\n-\t\"body\",\n-\t\"br\",\n-\t\"button\",\n-\t\"canvas\",\n-\t\"caption\",\n-\t\"cite\",\n-\t\"code\",\n-\t\"col\",\n-\t\"colgroup\",\n-\t\"command\",\n-\t\"data\",\n-\t\"datalist\",\n-\t\"dd\",\n-\t\"del\",\n-\t\"details\",\n-\t\"dfn\",\n-\t\"dialog\",\n-\t\"div\",\n-\t\"dl\",\n-\t\"dt\",\n-\t\"em\",\n-\t\"embed\",\n-\t\"fieldset\",\n-\t\"figcaption\",\n-\t\"figure\",\n-\t\"footer\",\n-\t\"form\",\n-\t\"h1\",\n-\t\"h2\",\n-\t\"h3\",\n-\t\"h4\",\n-\t\"h5\",\n-\t\"h6\",\n-\t\"head\",\n-\t\"header\",\n-\t\"hgroup\",\n-\t\"hr\",\n-\t\"html\",\n-\t\"i\",\n-\t\"iframe\",\n-\t\"img\",\n-\t\"input\",\n-\t\"ins\",\n-\t\"kbd\",\n-\t\"keygen\",\n-\t\"label\",\n-\t\"legend\",\n-\t\"li\",\n-\t\"link\",\n-\t\"map\",\n-\t\"mark\",\n-\t\"menu\",\n-\t\"meta\",\n-\t\"meter\",\n-\t\"nav\",\n-\t\"noscript\",\n-\t\"object\",\n-\t\"ol\",\n-\t\"optgroup\",\n-\t\"option\",\n-\t\"output\",\n-\t\"p\",\n-\t\"param\",\n-\t\"pre\",\n-\t\"progress\",\n-\t\"q\",\n-\t\"rp\",\n-\t\"rt\",\n-\t\"ruby\",\n-\t\"s\",\n-\t\"samp\",\n-\t\"script\",\n-\t\"section\",\n-\t\"select\",\n-\t\"small\",\n-\t\"source\",\n-\t\"span\",\n-\t\"strong\",\n-\t\"style\",\n-\t\"sub\",\n-\t\"summary\",\n-\t\"sup\",\n-\t\"table\",\n-\t\"tbody\",\n-\t\"td\",\n-\t\"textarea\",\n-\t\"tfoot\",\n-\t\"th\",\n-\t\"thead\",\n-\t\"time\",\n-\t\"title\",\n-\t\"tr\",\n-\t\"track\",\n-\t\"u\",\n-\t\"ul\",\n-\t\"var\",\n-\t\"video\",\n-\t\"wbr\",\n-}\n-\n-var attributes = []string{\n-\t\"accept\",\n-\t\"accept-charset\",\n-\t\"accesskey\",\n-\t\"action\",\n-\t\"alt\",\n-\t\"async\",\n-\t\"autocomplete\",\n-\t\"autofocus\",\n-\t\"autoplay\",\n-\t\"border\",\n-\t\"challenge\",\n-\t\"charset\",\n-\t\"checked\",\n-\t\"cite\",\n-\t\"class\",\n-\t\"cols\",\n-\t\"colspan\",\n-\t\"command\",\n-\t\"content\",\n-\t\"contenteditable\",\n-\t\"contextmenu\",\n-\t\"controls\",\n-\t\"coords\",\n-\t\"crossorigin\",\n-\t\"data\",\n-\t\"datetime\",\n-\t\"default\",\n-\t\"defer\",\n-\t\"dir\",\n-\t\"dirname\",\n-\t\"disabled\",\n-\t\"download\",\n-\t\"draggable\",\n-\t\"dropzone\",\n-\t\"enctype\",\n-\t\"for\",\n-\t\"form\",\n-\t\"formaction\",\n-\t\"formenctype\",\n-\t\"formmethod\",\n-\t\"formnovalidate\",\n-\t\"formtarget\",\n-\t\"headers\",\n-\t\"height\",\n-\t\"hidden\",\n-\t\"high\",\n-\t\"href\",\n-\t\"hreflang\",\n-\t\"http-equiv\",\n-\t\"icon\",\n-\t\"id\",\n-\t\"inert\",\n-\t\"ismap\",\n-\t\"itemid\",\n-\t\"itemprop\",\n-\t\"itemref\",\n-\t\"itemscope\",\n-\t\"itemtype\",\n-\t\"keytype\",\n-\t\"kind\",\n-\t\"label\",\n-\t\"lang\",\n-\t\"list\",\n-\t\"loop\",\n-\t\"low\",\n-\t\"manifest\",\n-\t\"max\",\n-\t\"maxlength\",\n-\t\"media\",\n-\t\"mediagroup\",\n-\t\"method\",\n-\t\"min\",\n-\t\"multiple\",\n-\t\"muted\",\n-\t\"name\",\n-\t\"novalidate\",\n-\t\"open\",\n-\t\"optimum\",\n-\t\"pattern\",\n-\t\"ping\",\n-\t\"placeholder\",\n-\t\"poster\",\n-\t\"preload\",\n-\t\"radiogroup\",\n-\t\"readonly\",\n-\t\"rel\",\n-\t\"required\",\n-\t\"reversed\",\n-\t\"rows\",\n-\t\"rowspan\",\n-\t\"sandbox\",\n-\t\"spellcheck\",\n-\t\"scope\",\n-\t\"scoped\",\n-\t\"seamless\",\n-\t\"selected\",\n-\t\"shape\",\n-\t\"size\",\n-\t\"sizes\",\n-\t\"span\",\n-\t\"src\",\n-\t\"srcdoc\",\n-\t\"srclang\",\n-\t\"start\",\n-\t\"step\",\n-\t\"style\",\n-\t\"tabindex\",\n-\t\"target\",\n-\t\"title\",\n-\t\"translate\",\n-\t\"type\",\n-\t\"typemustmatch\",\n-\t\"usemap\",\n-\t\"value\",\n-\t\"width\",\n-\t\"wrap\",\n-}\n-\n-var eventHandlers = []string{\n-\t\"onabort\",\n-\t\"onafterprint\",\n-\t\"onbeforeprint\",\n-\t\"onbeforeunload\",\n-\t\"onblur\",\n-\t\"oncancel\",\n-\t\"oncanplay\",\n-\t\"oncanplaythrough\",\n-\t\"onchange\",\n-\t\"onclick\",\n-\t\"onclose\",\n-\t\"oncontextmenu\",\n-\t\"oncuechange\",\n-\t\"ondblclick\",\n-\t\"ondrag\",\n-\t\"ondragend\",\n-\t\"ondragenter\",\n-\t\"ondragleave\",\n-\t\"ondragover\",\n-\t\"ondragstart\",\n-\t\"ondrop\",\n-\t\"ondurationchange\",\n-\t\"onemptied\",\n-\t\"onended\",\n-\t\"onerror\",\n-\t\"onfocus\",\n-\t\"onhashchange\",\n-\t\"oninput\",\n-\t\"oninvalid\",\n-\t\"onkeydown\",\n-\t\"onkeypress\",\n-\t\"onkeyup\",\n-\t\"onload\",\n-\t\"onloadeddata\",\n-\t\"onloadedmetadata\",\n-\t\"onloadstart\",\n-\t\"onmessage\",\n-\t\"onmousedown\",\n-\t\"onmousemove\",\n-\t\"onmouseout\",\n-\t\"onmouseover\",\n-\t\"onmouseup\",\n-\t\"onmousewheel\",\n-\t\"onoffline\",\n-\t\"ononline\",\n-\t\"onpagehide\",\n-\t\"onpageshow\",\n-\t\"onpause\",\n-\t\"onplay\",\n-\t\"onplaying\",\n-\t\"onpopstate\",\n-\t\"onprogress\",\n-\t\"onratechange\",\n-\t\"onreset\",\n-\t\"onresize\",\n-\t\"onscroll\",\n-\t\"onseeked\",\n-\t\"onseeking\",\n-\t\"onselect\",\n-\t\"onshow\",\n-\t\"onstalled\",\n-\t\"onstorage\",\n-\t\"onsubmit\",\n-\t\"onsuspend\",\n-\t\"ontimeupdate\",\n-\t\"onunload\",\n-\t\"onvolumechange\",\n-\t\"onwaiting\",\n-}\n-\n-// extra are ad-hoc values not covered by any of the lists above.\n-var extra = []string{\n-\t\"align\",\n-\t\"annotation\",\n-\t\"annotation-xml\",\n-\t\"applet\",\n-\t\"basefont\",\n-\t\"bgsound\",\n-\t\"big\",\n-\t\"blink\",\n-\t\"center\",\n-\t\"color\",\n-\t\"desc\",\n-\t\"face\",\n-\t\"font\",\n-\t\"foreignObject\", // HTML is case-insensitive, but SVG-embedded-in-HTML is case-sensitive.\n-\t\"foreignobject\",\n-\t\"frame\",\n-\t\"frameset\",\n-\t\"image\",\n-\t\"isindex\",\n-\t\"listing\",\n-\t\"malignmark\",\n-\t\"marquee\",\n-\t\"math\",\n-\t\"mglyph\",\n-\t\"mi\",\n-\t\"mn\",\n-\t\"mo\",\n-\t\"ms\",\n-\t\"mtext\",\n-\t\"nobr\",\n-\t\"noembed\",\n-\t\"noframes\",\n-\t\"plaintext\",\n-\t\"prompt\",\n-\t\"public\",\n-\t\"spacer\",\n-\t\"strike\",\n-\t\"svg\",\n-\t\"system\",\n-\t\"tt\",\n-\t\"xmp\",\n-}"}, {"sha": "20b8b8a5903df330ad3608e9c0b81774592c3d33", "filename": "libgo/go/exp/html/atom/table.go", "status": "removed", "additions": 0, "deletions": 694, "changes": 694, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,694 +0,0 @@\n-// generated by go run gen.go; DO NOT EDIT\n-\n-package atom\n-\n-const (\n-\tA                Atom = 0x1\n-\tAbbr             Atom = 0x4\n-\tAccept           Atom = 0x2106\n-\tAcceptCharset    Atom = 0x210e\n-\tAccesskey        Atom = 0x3309\n-\tAction           Atom = 0x21b06\n-\tAddress          Atom = 0x5d507\n-\tAlign            Atom = 0x1105\n-\tAlt              Atom = 0x4503\n-\tAnnotation       Atom = 0x18d0a\n-\tAnnotationXml    Atom = 0x18d0e\n-\tApplet           Atom = 0x2d106\n-\tArea             Atom = 0x31804\n-\tArticle          Atom = 0x39907\n-\tAside            Atom = 0x4f05\n-\tAsync            Atom = 0x9305\n-\tAudio            Atom = 0xaf05\n-\tAutocomplete     Atom = 0xd50c\n-\tAutofocus        Atom = 0xe109\n-\tAutoplay         Atom = 0x10c08\n-\tB                Atom = 0x101\n-\tBase             Atom = 0x11404\n-\tBasefont         Atom = 0x11408\n-\tBdi              Atom = 0x1a03\n-\tBdo              Atom = 0x12503\n-\tBgsound          Atom = 0x13807\n-\tBig              Atom = 0x14403\n-\tBlink            Atom = 0x14705\n-\tBlockquote       Atom = 0x14c0a\n-\tBody             Atom = 0x2f04\n-\tBorder           Atom = 0x15606\n-\tBr               Atom = 0x202\n-\tButton           Atom = 0x15c06\n-\tCanvas           Atom = 0x4b06\n-\tCaption          Atom = 0x1e007\n-\tCenter           Atom = 0x2df06\n-\tChallenge        Atom = 0x23e09\n-\tCharset          Atom = 0x2807\n-\tChecked          Atom = 0x33f07\n-\tCite             Atom = 0x9704\n-\tClass            Atom = 0x3d905\n-\tCode             Atom = 0x16f04\n-\tCol              Atom = 0x17603\n-\tColgroup         Atom = 0x17608\n-\tColor            Atom = 0x18305\n-\tCols             Atom = 0x18804\n-\tColspan          Atom = 0x18807\n-\tCommand          Atom = 0x19b07\n-\tContent          Atom = 0x42c07\n-\tContenteditable  Atom = 0x42c0f\n-\tContextmenu      Atom = 0x3480b\n-\tControls         Atom = 0x1ae08\n-\tCoords           Atom = 0x1ba06\n-\tCrossorigin      Atom = 0x1c40b\n-\tData             Atom = 0x44304\n-\tDatalist         Atom = 0x44308\n-\tDatetime         Atom = 0x25b08\n-\tDd               Atom = 0x28802\n-\tDefault          Atom = 0x5207\n-\tDefer            Atom = 0x17105\n-\tDel              Atom = 0x4d603\n-\tDesc             Atom = 0x4804\n-\tDetails          Atom = 0x6507\n-\tDfn              Atom = 0x8303\n-\tDialog           Atom = 0x1b06\n-\tDir              Atom = 0x9d03\n-\tDirname          Atom = 0x9d07\n-\tDisabled         Atom = 0x10008\n-\tDiv              Atom = 0x10703\n-\tDl               Atom = 0x13e02\n-\tDownload         Atom = 0x40908\n-\tDraggable        Atom = 0x1a109\n-\tDropzone         Atom = 0x3a208\n-\tDt               Atom = 0x4e402\n-\tEm               Atom = 0x7f02\n-\tEmbed            Atom = 0x7f05\n-\tEnctype          Atom = 0x23007\n-\tFace             Atom = 0x2dd04\n-\tFieldset         Atom = 0x1d508\n-\tFigcaption       Atom = 0x1dd0a\n-\tFigure           Atom = 0x1f106\n-\tFont             Atom = 0x11804\n-\tFooter           Atom = 0x5906\n-\tFor              Atom = 0x1fd03\n-\tForeignObject    Atom = 0x1fd0d\n-\tForeignobject    Atom = 0x20a0d\n-\tForm             Atom = 0x21704\n-\tFormaction       Atom = 0x2170a\n-\tFormenctype      Atom = 0x22c0b\n-\tFormmethod       Atom = 0x2470a\n-\tFormnovalidate   Atom = 0x2510e\n-\tFormtarget       Atom = 0x2660a\n-\tFrame            Atom = 0x8705\n-\tFrameset         Atom = 0x8708\n-\tH1               Atom = 0x13602\n-\tH2               Atom = 0x29602\n-\tH3               Atom = 0x2c502\n-\tH4               Atom = 0x30e02\n-\tH5               Atom = 0x4e602\n-\tH6               Atom = 0x27002\n-\tHead             Atom = 0x2fa04\n-\tHeader           Atom = 0x2fa06\n-\tHeaders          Atom = 0x2fa07\n-\tHeight           Atom = 0x27206\n-\tHgroup           Atom = 0x27a06\n-\tHidden           Atom = 0x28606\n-\tHigh             Atom = 0x29304\n-\tHr               Atom = 0x13102\n-\tHref             Atom = 0x29804\n-\tHreflang         Atom = 0x29808\n-\tHtml             Atom = 0x27604\n-\tHttpEquiv        Atom = 0x2a00a\n-\tI                Atom = 0x601\n-\tIcon             Atom = 0x42b04\n-\tId               Atom = 0x5102\n-\tIframe           Atom = 0x2b406\n-\tImage            Atom = 0x2ba05\n-\tImg              Atom = 0x2bf03\n-\tInert            Atom = 0x4c105\n-\tInput            Atom = 0x3f605\n-\tIns              Atom = 0x1cd03\n-\tIsindex          Atom = 0x2c707\n-\tIsmap            Atom = 0x2ce05\n-\tItemid           Atom = 0x9806\n-\tItemprop         Atom = 0x57e08\n-\tItemref          Atom = 0x2d707\n-\tItemscope        Atom = 0x2e509\n-\tItemtype         Atom = 0x2ef08\n-\tKbd              Atom = 0x1903\n-\tKeygen           Atom = 0x3906\n-\tKeytype          Atom = 0x51207\n-\tKind             Atom = 0xfd04\n-\tLabel            Atom = 0xba05\n-\tLang             Atom = 0x29c04\n-\tLegend           Atom = 0x1a806\n-\tLi               Atom = 0x1202\n-\tLink             Atom = 0x14804\n-\tList             Atom = 0x44704\n-\tListing          Atom = 0x44707\n-\tLoop             Atom = 0xbe04\n-\tLow              Atom = 0x13f03\n-\tMalignmark       Atom = 0x100a\n-\tManifest         Atom = 0x5b608\n-\tMap              Atom = 0x2d003\n-\tMark             Atom = 0x1604\n-\tMarquee          Atom = 0x5f207\n-\tMath             Atom = 0x2f704\n-\tMax              Atom = 0x30603\n-\tMaxlength        Atom = 0x30609\n-\tMedia            Atom = 0xa205\n-\tMediagroup       Atom = 0xa20a\n-\tMenu             Atom = 0x34f04\n-\tMeta             Atom = 0x45604\n-\tMeter            Atom = 0x26105\n-\tMethod           Atom = 0x24b06\n-\tMglyph           Atom = 0x2c006\n-\tMi               Atom = 0x9b02\n-\tMin              Atom = 0x31003\n-\tMn               Atom = 0x25402\n-\tMo               Atom = 0x47a02\n-\tMs               Atom = 0x2e802\n-\tMtext            Atom = 0x31305\n-\tMultiple         Atom = 0x32108\n-\tMuted            Atom = 0x32905\n-\tName             Atom = 0xa004\n-\tNav              Atom = 0x3e03\n-\tNobr             Atom = 0x7404\n-\tNoembed          Atom = 0x7d07\n-\tNoframes         Atom = 0x8508\n-\tNoscript         Atom = 0x28b08\n-\tNovalidate       Atom = 0x2550a\n-\tObject           Atom = 0x21106\n-\tOl               Atom = 0xcd02\n-\tOnabort          Atom = 0x16007\n-\tOnafterprint     Atom = 0x1e50c\n-\tOnbeforeprint    Atom = 0x21f0d\n-\tOnbeforeunload   Atom = 0x5c90e\n-\tOnblur           Atom = 0x3e206\n-\tOncancel         Atom = 0xb308\n-\tOncanplay        Atom = 0x12709\n-\tOncanplaythrough Atom = 0x12710\n-\tOnchange         Atom = 0x3b808\n-\tOnclick          Atom = 0x2ad07\n-\tOnclose          Atom = 0x32e07\n-\tOncontextmenu    Atom = 0x3460d\n-\tOncuechange      Atom = 0x3530b\n-\tOndblclick       Atom = 0x35e0a\n-\tOndrag           Atom = 0x36806\n-\tOndragend        Atom = 0x36809\n-\tOndragenter      Atom = 0x3710b\n-\tOndragleave      Atom = 0x37c0b\n-\tOndragover       Atom = 0x3870a\n-\tOndragstart      Atom = 0x3910b\n-\tOndrop           Atom = 0x3a006\n-\tOndurationchange Atom = 0x3b010\n-\tOnemptied        Atom = 0x3a709\n-\tOnended          Atom = 0x3c007\n-\tOnerror          Atom = 0x3c707\n-\tOnfocus          Atom = 0x3ce07\n-\tOnhashchange     Atom = 0x3e80c\n-\tOninput          Atom = 0x3f407\n-\tOninvalid        Atom = 0x3fb09\n-\tOnkeydown        Atom = 0x40409\n-\tOnkeypress       Atom = 0x4110a\n-\tOnkeyup          Atom = 0x42107\n-\tOnload           Atom = 0x43b06\n-\tOnloadeddata     Atom = 0x43b0c\n-\tOnloadedmetadata Atom = 0x44e10\n-\tOnloadstart      Atom = 0x4640b\n-\tOnmessage        Atom = 0x46f09\n-\tOnmousedown      Atom = 0x4780b\n-\tOnmousemove      Atom = 0x4830b\n-\tOnmouseout       Atom = 0x48e0a\n-\tOnmouseover      Atom = 0x49b0b\n-\tOnmouseup        Atom = 0x4a609\n-\tOnmousewheel     Atom = 0x4af0c\n-\tOnoffline        Atom = 0x4bb09\n-\tOnonline         Atom = 0x4c608\n-\tOnpagehide       Atom = 0x4ce0a\n-\tOnpageshow       Atom = 0x4d90a\n-\tOnpause          Atom = 0x4e807\n-\tOnplay           Atom = 0x4f206\n-\tOnplaying        Atom = 0x4f209\n-\tOnpopstate       Atom = 0x4fb0a\n-\tOnprogress       Atom = 0x5050a\n-\tOnratechange     Atom = 0x5190c\n-\tOnreset          Atom = 0x52507\n-\tOnresize         Atom = 0x52c08\n-\tOnscroll         Atom = 0x53a08\n-\tOnseeked         Atom = 0x54208\n-\tOnseeking        Atom = 0x54a09\n-\tOnselect         Atom = 0x55308\n-\tOnshow           Atom = 0x55d06\n-\tOnstalled        Atom = 0x56609\n-\tOnstorage        Atom = 0x56f09\n-\tOnsubmit         Atom = 0x57808\n-\tOnsuspend        Atom = 0x58809\n-\tOntimeupdate     Atom = 0x1190c\n-\tOnunload         Atom = 0x59108\n-\tOnvolumechange   Atom = 0x5990e\n-\tOnwaiting        Atom = 0x5a709\n-\tOpen             Atom = 0x58404\n-\tOptgroup         Atom = 0xc008\n-\tOptimum          Atom = 0x5b007\n-\tOption           Atom = 0x5c506\n-\tOutput           Atom = 0x49506\n-\tP                Atom = 0xc01\n-\tParam            Atom = 0xc05\n-\tPattern          Atom = 0x6e07\n-\tPing             Atom = 0xab04\n-\tPlaceholder      Atom = 0xc70b\n-\tPlaintext        Atom = 0xf109\n-\tPoster           Atom = 0x17d06\n-\tPre              Atom = 0x27f03\n-\tPreload          Atom = 0x27f07\n-\tProgress         Atom = 0x50708\n-\tPrompt           Atom = 0x5bf06\n-\tPublic           Atom = 0x42706\n-\tQ                Atom = 0x15101\n-\tRadiogroup       Atom = 0x30a\n-\tReadonly         Atom = 0x31908\n-\tRel              Atom = 0x28003\n-\tRequired         Atom = 0x1f508\n-\tReversed         Atom = 0x5e08\n-\tRows             Atom = 0x7704\n-\tRowspan          Atom = 0x7707\n-\tRp               Atom = 0x1eb02\n-\tRt               Atom = 0x16502\n-\tRuby             Atom = 0xd104\n-\tS                Atom = 0x2c01\n-\tSamp             Atom = 0x6b04\n-\tSandbox          Atom = 0xe907\n-\tScope            Atom = 0x2e905\n-\tScoped           Atom = 0x2e906\n-\tScript           Atom = 0x28d06\n-\tSeamless         Atom = 0x33308\n-\tSection          Atom = 0x3dd07\n-\tSelect           Atom = 0x55506\n-\tSelected         Atom = 0x55508\n-\tShape            Atom = 0x1b505\n-\tSize             Atom = 0x53004\n-\tSizes            Atom = 0x53005\n-\tSmall            Atom = 0x1bf05\n-\tSource           Atom = 0x1cf06\n-\tSpacer           Atom = 0x30006\n-\tSpan             Atom = 0x7a04\n-\tSpellcheck       Atom = 0x33a0a\n-\tSrc              Atom = 0x3d403\n-\tSrcdoc           Atom = 0x3d406\n-\tSrclang          Atom = 0x41a07\n-\tStart            Atom = 0x39705\n-\tStep             Atom = 0x5bc04\n-\tStrike           Atom = 0x50e06\n-\tStrong           Atom = 0x53406\n-\tStyle            Atom = 0x5db05\n-\tSub              Atom = 0x57a03\n-\tSummary          Atom = 0x5e007\n-\tSup              Atom = 0x5e703\n-\tSvg              Atom = 0x5ea03\n-\tSystem           Atom = 0x5ed06\n-\tTabindex         Atom = 0x45c08\n-\tTable            Atom = 0x43605\n-\tTarget           Atom = 0x26a06\n-\tTbody            Atom = 0x2e05\n-\tTd               Atom = 0x4702\n-\tTextarea         Atom = 0x31408\n-\tTfoot            Atom = 0x5805\n-\tTh               Atom = 0x13002\n-\tThead            Atom = 0x2f905\n-\tTime             Atom = 0x11b04\n-\tTitle            Atom = 0x8e05\n-\tTr               Atom = 0xf902\n-\tTrack            Atom = 0xf905\n-\tTranslate        Atom = 0x16609\n-\tTt               Atom = 0x7002\n-\tType             Atom = 0x23304\n-\tTypemustmatch    Atom = 0x2330d\n-\tU                Atom = 0xb01\n-\tUl               Atom = 0x5602\n-\tUsemap           Atom = 0x4ec06\n-\tValue            Atom = 0x4005\n-\tVar              Atom = 0x10903\n-\tVideo            Atom = 0x2a905\n-\tWbr              Atom = 0x14103\n-\tWidth            Atom = 0x4e205\n-\tWrap             Atom = 0x56204\n-\tXmp              Atom = 0xef03\n-)\n-\n-const hash0 = 0xc17da63e\n-\n-const maxAtomLen = 16\n-\n-var table = [1 << 9]Atom{\n-\t0x1:   0x4830b, // onmousemove\n-\t0x2:   0x5a709, // onwaiting\n-\t0x4:   0x5bf06, // prompt\n-\t0x7:   0x5b007, // optimum\n-\t0x8:   0x1604,  // mark\n-\t0xa:   0x2d707, // itemref\n-\t0xb:   0x4d90a, // onpageshow\n-\t0xc:   0x55506, // select\n-\t0xd:   0x1a109, // draggable\n-\t0xe:   0x3e03,  // nav\n-\t0xf:   0x19b07, // command\n-\t0x11:  0xb01,   // u\n-\t0x14:  0x2fa07, // headers\n-\t0x15:  0x44308, // datalist\n-\t0x17:  0x6b04,  // samp\n-\t0x1a:  0x40409, // onkeydown\n-\t0x1b:  0x53a08, // onscroll\n-\t0x1c:  0x17603, // col\n-\t0x20:  0x57e08, // itemprop\n-\t0x21:  0x2a00a, // http-equiv\n-\t0x22:  0x5e703, // sup\n-\t0x24:  0x1f508, // required\n-\t0x2b:  0x27f07, // preload\n-\t0x2c:  0x21f0d, // onbeforeprint\n-\t0x2d:  0x3710b, // ondragenter\n-\t0x2e:  0x4e402, // dt\n-\t0x2f:  0x57808, // onsubmit\n-\t0x30:  0x13102, // hr\n-\t0x31:  0x3460d, // oncontextmenu\n-\t0x33:  0x2ba05, // image\n-\t0x34:  0x4e807, // onpause\n-\t0x35:  0x27a06, // hgroup\n-\t0x36:  0xab04,  // ping\n-\t0x37:  0x55308, // onselect\n-\t0x3a:  0x10703, // div\n-\t0x40:  0x9b02,  // mi\n-\t0x41:  0x33308, // seamless\n-\t0x42:  0x2807,  // charset\n-\t0x43:  0x5102,  // id\n-\t0x44:  0x4fb0a, // onpopstate\n-\t0x45:  0x4d603, // del\n-\t0x46:  0x5f207, // marquee\n-\t0x47:  0x3309,  // accesskey\n-\t0x49:  0x5906,  // footer\n-\t0x4a:  0x2d106, // applet\n-\t0x4b:  0x2ce05, // ismap\n-\t0x51:  0x34f04, // menu\n-\t0x52:  0x2f04,  // body\n-\t0x55:  0x8708,  // frameset\n-\t0x56:  0x52507, // onreset\n-\t0x57:  0x14705, // blink\n-\t0x58:  0x8e05,  // title\n-\t0x59:  0x39907, // article\n-\t0x5b:  0x13002, // th\n-\t0x5d:  0x15101, // q\n-\t0x5e:  0x58404, // open\n-\t0x5f:  0x31804, // area\n-\t0x61:  0x43b06, // onload\n-\t0x62:  0x3f605, // input\n-\t0x63:  0x11404, // base\n-\t0x64:  0x18807, // colspan\n-\t0x65:  0x51207, // keytype\n-\t0x66:  0x13e02, // dl\n-\t0x68:  0x1d508, // fieldset\n-\t0x6a:  0x31003, // min\n-\t0x6b:  0x10903, // var\n-\t0x6f:  0x2fa06, // header\n-\t0x70:  0x16502, // rt\n-\t0x71:  0x17608, // colgroup\n-\t0x72:  0x25402, // mn\n-\t0x74:  0x16007, // onabort\n-\t0x75:  0x3906,  // keygen\n-\t0x76:  0x4bb09, // onoffline\n-\t0x77:  0x23e09, // challenge\n-\t0x78:  0x2d003, // map\n-\t0x7a:  0x30e02, // h4\n-\t0x7b:  0x3c707, // onerror\n-\t0x7c:  0x30609, // maxlength\n-\t0x7d:  0x31305, // mtext\n-\t0x7e:  0x5805,  // tfoot\n-\t0x7f:  0x11804, // font\n-\t0x80:  0x100a,  // malignmark\n-\t0x81:  0x45604, // meta\n-\t0x82:  0x9305,  // async\n-\t0x83:  0x2c502, // h3\n-\t0x84:  0x28802, // dd\n-\t0x85:  0x29804, // href\n-\t0x86:  0xa20a,  // mediagroup\n-\t0x87:  0x1ba06, // coords\n-\t0x88:  0x41a07, // srclang\n-\t0x89:  0x35e0a, // ondblclick\n-\t0x8a:  0x4005,  // value\n-\t0x8c:  0xb308,  // oncancel\n-\t0x8e:  0x33a0a, // spellcheck\n-\t0x8f:  0x8705,  // frame\n-\t0x91:  0x14403, // big\n-\t0x94:  0x21b06, // action\n-\t0x95:  0x9d03,  // dir\n-\t0x97:  0x31908, // readonly\n-\t0x99:  0x43605, // table\n-\t0x9a:  0x5e007, // summary\n-\t0x9b:  0x14103, // wbr\n-\t0x9c:  0x30a,   // radiogroup\n-\t0x9d:  0xa004,  // name\n-\t0x9f:  0x5ed06, // system\n-\t0xa1:  0x18305, // color\n-\t0xa2:  0x4b06,  // canvas\n-\t0xa3:  0x27604, // html\n-\t0xa5:  0x54a09, // onseeking\n-\t0xac:  0x1b505, // shape\n-\t0xad:  0x28003, // rel\n-\t0xae:  0x12710, // oncanplaythrough\n-\t0xaf:  0x3870a, // ondragover\n-\t0xb1:  0x1fd0d, // foreignObject\n-\t0xb3:  0x7704,  // rows\n-\t0xb6:  0x44707, // listing\n-\t0xb7:  0x49506, // output\n-\t0xb9:  0x3480b, // contextmenu\n-\t0xbb:  0x13f03, // low\n-\t0xbc:  0x1eb02, // rp\n-\t0xbd:  0x58809, // onsuspend\n-\t0xbe:  0x15c06, // button\n-\t0xbf:  0x4804,  // desc\n-\t0xc1:  0x3dd07, // section\n-\t0xc2:  0x5050a, // onprogress\n-\t0xc3:  0x56f09, // onstorage\n-\t0xc4:  0x2f704, // math\n-\t0xc5:  0x4f206, // onplay\n-\t0xc7:  0x5602,  // ul\n-\t0xc8:  0x6e07,  // pattern\n-\t0xc9:  0x4af0c, // onmousewheel\n-\t0xca:  0x36809, // ondragend\n-\t0xcb:  0xd104,  // ruby\n-\t0xcc:  0xc01,   // p\n-\t0xcd:  0x32e07, // onclose\n-\t0xce:  0x26105, // meter\n-\t0xcf:  0x13807, // bgsound\n-\t0xd2:  0x27206, // height\n-\t0xd4:  0x101,   // b\n-\t0xd5:  0x2ef08, // itemtype\n-\t0xd8:  0x1e007, // caption\n-\t0xd9:  0x10008, // disabled\n-\t0xdc:  0x5ea03, // svg\n-\t0xdd:  0x1bf05, // small\n-\t0xde:  0x44304, // data\n-\t0xe0:  0x4c608, // ononline\n-\t0xe1:  0x2c006, // mglyph\n-\t0xe3:  0x7f05,  // embed\n-\t0xe4:  0xf902,  // tr\n-\t0xe5:  0x4640b, // onloadstart\n-\t0xe7:  0x3b010, // ondurationchange\n-\t0xed:  0x12503, // bdo\n-\t0xee:  0x4702,  // td\n-\t0xef:  0x4f05,  // aside\n-\t0xf0:  0x29602, // h2\n-\t0xf1:  0x50708, // progress\n-\t0xf2:  0x14c0a, // blockquote\n-\t0xf4:  0xba05,  // label\n-\t0xf5:  0x601,   // i\n-\t0xf7:  0x7707,  // rowspan\n-\t0xfb:  0x4f209, // onplaying\n-\t0xfd:  0x2bf03, // img\n-\t0xfe:  0xc008,  // optgroup\n-\t0xff:  0x42c07, // content\n-\t0x101: 0x5190c, // onratechange\n-\t0x103: 0x3e80c, // onhashchange\n-\t0x104: 0x6507,  // details\n-\t0x106: 0x40908, // download\n-\t0x109: 0xe907,  // sandbox\n-\t0x10b: 0x42c0f, // contenteditable\n-\t0x10d: 0x37c0b, // ondragleave\n-\t0x10e: 0x2106,  // accept\n-\t0x10f: 0x55508, // selected\n-\t0x112: 0x2170a, // formaction\n-\t0x113: 0x2df06, // center\n-\t0x115: 0x44e10, // onloadedmetadata\n-\t0x116: 0x14804, // link\n-\t0x117: 0x11b04, // time\n-\t0x118: 0x1c40b, // crossorigin\n-\t0x119: 0x3ce07, // onfocus\n-\t0x11a: 0x56204, // wrap\n-\t0x11b: 0x42b04, // icon\n-\t0x11d: 0x2a905, // video\n-\t0x11e: 0x3d905, // class\n-\t0x121: 0x5990e, // onvolumechange\n-\t0x122: 0x3e206, // onblur\n-\t0x123: 0x2e509, // itemscope\n-\t0x124: 0x5db05, // style\n-\t0x127: 0x42706, // public\n-\t0x129: 0x2510e, // formnovalidate\n-\t0x12a: 0x55d06, // onshow\n-\t0x12c: 0x16609, // translate\n-\t0x12d: 0x9704,  // cite\n-\t0x12e: 0x2e802, // ms\n-\t0x12f: 0x1190c, // ontimeupdate\n-\t0x130: 0xfd04,  // kind\n-\t0x131: 0x2660a, // formtarget\n-\t0x135: 0x3c007, // onended\n-\t0x136: 0x28606, // hidden\n-\t0x137: 0x2c01,  // s\n-\t0x139: 0x2470a, // formmethod\n-\t0x13a: 0x44704, // list\n-\t0x13c: 0x27002, // h6\n-\t0x13d: 0xcd02,  // ol\n-\t0x13e: 0x3530b, // oncuechange\n-\t0x13f: 0x20a0d, // foreignobject\n-\t0x143: 0x5c90e, // onbeforeunload\n-\t0x145: 0x3a709, // onemptied\n-\t0x146: 0x17105, // defer\n-\t0x147: 0xef03,  // xmp\n-\t0x148: 0xaf05,  // audio\n-\t0x149: 0x1903,  // kbd\n-\t0x14c: 0x46f09, // onmessage\n-\t0x14d: 0x5c506, // option\n-\t0x14e: 0x4503,  // alt\n-\t0x14f: 0x33f07, // checked\n-\t0x150: 0x10c08, // autoplay\n-\t0x152: 0x202,   // br\n-\t0x153: 0x2550a, // novalidate\n-\t0x156: 0x7d07,  // noembed\n-\t0x159: 0x2ad07, // onclick\n-\t0x15a: 0x4780b, // onmousedown\n-\t0x15b: 0x3b808, // onchange\n-\t0x15e: 0x3fb09, // oninvalid\n-\t0x15f: 0x2e906, // scoped\n-\t0x160: 0x1ae08, // controls\n-\t0x161: 0x32905, // muted\n-\t0x163: 0x4ec06, // usemap\n-\t0x164: 0x1dd0a, // figcaption\n-\t0x165: 0x36806, // ondrag\n-\t0x166: 0x29304, // high\n-\t0x168: 0x3d403, // src\n-\t0x169: 0x17d06, // poster\n-\t0x16b: 0x18d0e, // annotation-xml\n-\t0x16c: 0x5bc04, // step\n-\t0x16d: 0x4,     // abbr\n-\t0x16e: 0x1b06,  // dialog\n-\t0x170: 0x1202,  // li\n-\t0x172: 0x47a02, // mo\n-\t0x175: 0x1fd03, // for\n-\t0x176: 0x1cd03, // ins\n-\t0x178: 0x53004, // size\n-\t0x17a: 0x5207,  // default\n-\t0x17b: 0x1a03,  // bdi\n-\t0x17c: 0x4ce0a, // onpagehide\n-\t0x17d: 0x9d07,  // dirname\n-\t0x17e: 0x23304, // type\n-\t0x17f: 0x21704, // form\n-\t0x180: 0x4c105, // inert\n-\t0x181: 0x12709, // oncanplay\n-\t0x182: 0x8303,  // dfn\n-\t0x183: 0x45c08, // tabindex\n-\t0x186: 0x7f02,  // em\n-\t0x187: 0x29c04, // lang\n-\t0x189: 0x3a208, // dropzone\n-\t0x18a: 0x4110a, // onkeypress\n-\t0x18b: 0x25b08, // datetime\n-\t0x18c: 0x18804, // cols\n-\t0x18d: 0x1,     // a\n-\t0x18e: 0x43b0c, // onloadeddata\n-\t0x191: 0x15606, // border\n-\t0x192: 0x2e05,  // tbody\n-\t0x193: 0x24b06, // method\n-\t0x195: 0xbe04,  // loop\n-\t0x196: 0x2b406, // iframe\n-\t0x198: 0x2fa04, // head\n-\t0x19e: 0x5b608, // manifest\n-\t0x19f: 0xe109,  // autofocus\n-\t0x1a0: 0x16f04, // code\n-\t0x1a1: 0x53406, // strong\n-\t0x1a2: 0x32108, // multiple\n-\t0x1a3: 0xc05,   // param\n-\t0x1a6: 0x23007, // enctype\n-\t0x1a7: 0x2dd04, // face\n-\t0x1a8: 0xf109,  // plaintext\n-\t0x1a9: 0x13602, // h1\n-\t0x1aa: 0x56609, // onstalled\n-\t0x1ad: 0x28d06, // script\n-\t0x1ae: 0x30006, // spacer\n-\t0x1af: 0x52c08, // onresize\n-\t0x1b0: 0x49b0b, // onmouseover\n-\t0x1b1: 0x59108, // onunload\n-\t0x1b2: 0x54208, // onseeked\n-\t0x1b4: 0x2330d, // typemustmatch\n-\t0x1b5: 0x1f106, // figure\n-\t0x1b6: 0x48e0a, // onmouseout\n-\t0x1b7: 0x27f03, // pre\n-\t0x1b8: 0x4e205, // width\n-\t0x1bb: 0x7404,  // nobr\n-\t0x1be: 0x7002,  // tt\n-\t0x1bf: 0x1105,  // align\n-\t0x1c0: 0x3f407, // oninput\n-\t0x1c3: 0x42107, // onkeyup\n-\t0x1c6: 0x1e50c, // onafterprint\n-\t0x1c7: 0x210e,  // accept-charset\n-\t0x1c8: 0x9806,  // itemid\n-\t0x1cb: 0x50e06, // strike\n-\t0x1cc: 0x57a03, // sub\n-\t0x1cd: 0xf905,  // track\n-\t0x1ce: 0x39705, // start\n-\t0x1d0: 0x11408, // basefont\n-\t0x1d6: 0x1cf06, // source\n-\t0x1d7: 0x1a806, // legend\n-\t0x1d8: 0x2f905, // thead\n-\t0x1da: 0x2e905, // scope\n-\t0x1dd: 0x21106, // object\n-\t0x1de: 0xa205,  // media\n-\t0x1df: 0x18d0a, // annotation\n-\t0x1e0: 0x22c0b, // formenctype\n-\t0x1e2: 0x28b08, // noscript\n-\t0x1e4: 0x53005, // sizes\n-\t0x1e5: 0xd50c,  // autocomplete\n-\t0x1e6: 0x7a04,  // span\n-\t0x1e7: 0x8508,  // noframes\n-\t0x1e8: 0x26a06, // target\n-\t0x1e9: 0x3a006, // ondrop\n-\t0x1ea: 0x3d406, // srcdoc\n-\t0x1ec: 0x5e08,  // reversed\n-\t0x1f0: 0x2c707, // isindex\n-\t0x1f3: 0x29808, // hreflang\n-\t0x1f5: 0x4e602, // h5\n-\t0x1f6: 0x5d507, // address\n-\t0x1fa: 0x30603, // max\n-\t0x1fb: 0xc70b,  // placeholder\n-\t0x1fc: 0x31408, // textarea\n-\t0x1fe: 0x4a609, // onmouseup\n-\t0x1ff: 0x3910b, // ondragstart\n-}\n-\n-const atomText = \"abbradiogrouparamalignmarkbdialogaccept-charsetbodyaccesskey\" +\n-\t\"genavaluealtdescanvasidefaultfootereversedetailsampatternobr\" +\n-\t\"owspanoembedfnoframesetitleasyncitemidirnamediagroupingaudio\" +\n-\t\"ncancelabelooptgrouplaceholderubyautocompleteautofocusandbox\" +\n-\t\"mplaintextrackindisabledivarautoplaybasefontimeupdatebdoncan\" +\n-\t\"playthrough1bgsoundlowbrbigblinkblockquoteborderbuttonabortr\" +\n-\t\"anslatecodefercolgroupostercolorcolspannotation-xmlcommandra\" +\n-\t\"ggablegendcontrolshapecoordsmallcrossoriginsourcefieldsetfig\" +\n-\t\"captionafterprintfigurequiredforeignObjectforeignobjectforma\" +\n-\t\"ctionbeforeprintformenctypemustmatchallengeformmethodformnov\" +\n-\t\"alidatetimeterformtargeth6heightmlhgroupreloadhiddenoscripth\" +\n-\t\"igh2hreflanghttp-equivideonclickiframeimageimglyph3isindexis\" +\n-\t\"mappletitemrefacenteritemscopeditemtypematheaderspacermaxlen\" +\n-\t\"gth4minmtextareadonlymultiplemutedoncloseamlesspellcheckedon\" +\n-\t\"contextmenuoncuechangeondblclickondragendondragenterondragle\" +\n-\t\"aveondragoverondragstarticleondropzonemptiedondurationchange\" +\n-\t\"onendedonerroronfocusrcdoclassectionbluronhashchangeoninputo\" +\n-\t\"ninvalidonkeydownloadonkeypressrclangonkeyupublicontentedita\" +\n-\t\"bleonloadeddatalistingonloadedmetadatabindexonloadstartonmes\" +\n-\t\"sageonmousedownonmousemoveonmouseoutputonmouseoveronmouseupo\" +\n-\t\"nmousewheelonofflinertononlineonpagehidelonpageshowidth5onpa\" +\n-\t\"usemaponplayingonpopstateonprogresstrikeytypeonratechangeonr\" +\n-\t\"esetonresizestrongonscrollonseekedonseekingonselectedonshowr\" +\n-\t\"aponstalledonstorageonsubmitempropenonsuspendonunloadonvolum\" +\n-\t\"echangeonwaitingoptimumanifestepromptoptionbeforeunloaddress\" +\n-\t\"tylesummarysupsvgsystemarquee\""}, {"sha": "db016a1c01cdd34e57ec9c5779c70f717b8f3c82", "filename": "libgo/go/exp/html/atom/table_test.go", "status": "removed", "additions": 0, "deletions": 341, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fatom%2Ftable_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,341 +0,0 @@\n-// generated by go run gen.go -test; DO NOT EDIT\n-\n-package atom\n-\n-var testAtomList = []string{\n-\t\"a\",\n-\t\"abbr\",\n-\t\"accept\",\n-\t\"accept-charset\",\n-\t\"accesskey\",\n-\t\"action\",\n-\t\"address\",\n-\t\"align\",\n-\t\"alt\",\n-\t\"annotation\",\n-\t\"annotation-xml\",\n-\t\"applet\",\n-\t\"area\",\n-\t\"article\",\n-\t\"aside\",\n-\t\"async\",\n-\t\"audio\",\n-\t\"autocomplete\",\n-\t\"autofocus\",\n-\t\"autoplay\",\n-\t\"b\",\n-\t\"base\",\n-\t\"basefont\",\n-\t\"bdi\",\n-\t\"bdo\",\n-\t\"bgsound\",\n-\t\"big\",\n-\t\"blink\",\n-\t\"blockquote\",\n-\t\"body\",\n-\t\"border\",\n-\t\"br\",\n-\t\"button\",\n-\t\"canvas\",\n-\t\"caption\",\n-\t\"center\",\n-\t\"challenge\",\n-\t\"charset\",\n-\t\"checked\",\n-\t\"cite\",\n-\t\"cite\",\n-\t\"class\",\n-\t\"code\",\n-\t\"col\",\n-\t\"colgroup\",\n-\t\"color\",\n-\t\"cols\",\n-\t\"colspan\",\n-\t\"command\",\n-\t\"command\",\n-\t\"content\",\n-\t\"contenteditable\",\n-\t\"contextmenu\",\n-\t\"controls\",\n-\t\"coords\",\n-\t\"crossorigin\",\n-\t\"data\",\n-\t\"data\",\n-\t\"datalist\",\n-\t\"datetime\",\n-\t\"dd\",\n-\t\"default\",\n-\t\"defer\",\n-\t\"del\",\n-\t\"desc\",\n-\t\"details\",\n-\t\"dfn\",\n-\t\"dialog\",\n-\t\"dir\",\n-\t\"dirname\",\n-\t\"disabled\",\n-\t\"div\",\n-\t\"dl\",\n-\t\"download\",\n-\t\"draggable\",\n-\t\"dropzone\",\n-\t\"dt\",\n-\t\"em\",\n-\t\"embed\",\n-\t\"enctype\",\n-\t\"face\",\n-\t\"fieldset\",\n-\t\"figcaption\",\n-\t\"figure\",\n-\t\"font\",\n-\t\"footer\",\n-\t\"for\",\n-\t\"foreignObject\",\n-\t\"foreignobject\",\n-\t\"form\",\n-\t\"form\",\n-\t\"formaction\",\n-\t\"formenctype\",\n-\t\"formmethod\",\n-\t\"formnovalidate\",\n-\t\"formtarget\",\n-\t\"frame\",\n-\t\"frameset\",\n-\t\"h1\",\n-\t\"h2\",\n-\t\"h3\",\n-\t\"h4\",\n-\t\"h5\",\n-\t\"h6\",\n-\t\"head\",\n-\t\"header\",\n-\t\"headers\",\n-\t\"height\",\n-\t\"hgroup\",\n-\t\"hidden\",\n-\t\"high\",\n-\t\"hr\",\n-\t\"href\",\n-\t\"hreflang\",\n-\t\"html\",\n-\t\"http-equiv\",\n-\t\"i\",\n-\t\"icon\",\n-\t\"id\",\n-\t\"iframe\",\n-\t\"image\",\n-\t\"img\",\n-\t\"inert\",\n-\t\"input\",\n-\t\"ins\",\n-\t\"isindex\",\n-\t\"ismap\",\n-\t\"itemid\",\n-\t\"itemprop\",\n-\t\"itemref\",\n-\t\"itemscope\",\n-\t\"itemtype\",\n-\t\"kbd\",\n-\t\"keygen\",\n-\t\"keytype\",\n-\t\"kind\",\n-\t\"label\",\n-\t\"label\",\n-\t\"lang\",\n-\t\"legend\",\n-\t\"li\",\n-\t\"link\",\n-\t\"list\",\n-\t\"listing\",\n-\t\"loop\",\n-\t\"low\",\n-\t\"malignmark\",\n-\t\"manifest\",\n-\t\"map\",\n-\t\"mark\",\n-\t\"marquee\",\n-\t\"math\",\n-\t\"max\",\n-\t\"maxlength\",\n-\t\"media\",\n-\t\"mediagroup\",\n-\t\"menu\",\n-\t\"meta\",\n-\t\"meter\",\n-\t\"method\",\n-\t\"mglyph\",\n-\t\"mi\",\n-\t\"min\",\n-\t\"mn\",\n-\t\"mo\",\n-\t\"ms\",\n-\t\"mtext\",\n-\t\"multiple\",\n-\t\"muted\",\n-\t\"name\",\n-\t\"nav\",\n-\t\"nobr\",\n-\t\"noembed\",\n-\t\"noframes\",\n-\t\"noscript\",\n-\t\"novalidate\",\n-\t\"object\",\n-\t\"ol\",\n-\t\"onabort\",\n-\t\"onafterprint\",\n-\t\"onbeforeprint\",\n-\t\"onbeforeunload\",\n-\t\"onblur\",\n-\t\"oncancel\",\n-\t\"oncanplay\",\n-\t\"oncanplaythrough\",\n-\t\"onchange\",\n-\t\"onclick\",\n-\t\"onclose\",\n-\t\"oncontextmenu\",\n-\t\"oncuechange\",\n-\t\"ondblclick\",\n-\t\"ondrag\",\n-\t\"ondragend\",\n-\t\"ondragenter\",\n-\t\"ondragleave\",\n-\t\"ondragover\",\n-\t\"ondragstart\",\n-\t\"ondrop\",\n-\t\"ondurationchange\",\n-\t\"onemptied\",\n-\t\"onended\",\n-\t\"onerror\",\n-\t\"onfocus\",\n-\t\"onhashchange\",\n-\t\"oninput\",\n-\t\"oninvalid\",\n-\t\"onkeydown\",\n-\t\"onkeypress\",\n-\t\"onkeyup\",\n-\t\"onload\",\n-\t\"onloadeddata\",\n-\t\"onloadedmetadata\",\n-\t\"onloadstart\",\n-\t\"onmessage\",\n-\t\"onmousedown\",\n-\t\"onmousemove\",\n-\t\"onmouseout\",\n-\t\"onmouseover\",\n-\t\"onmouseup\",\n-\t\"onmousewheel\",\n-\t\"onoffline\",\n-\t\"ononline\",\n-\t\"onpagehide\",\n-\t\"onpageshow\",\n-\t\"onpause\",\n-\t\"onplay\",\n-\t\"onplaying\",\n-\t\"onpopstate\",\n-\t\"onprogress\",\n-\t\"onratechange\",\n-\t\"onreset\",\n-\t\"onresize\",\n-\t\"onscroll\",\n-\t\"onseeked\",\n-\t\"onseeking\",\n-\t\"onselect\",\n-\t\"onshow\",\n-\t\"onstalled\",\n-\t\"onstorage\",\n-\t\"onsubmit\",\n-\t\"onsuspend\",\n-\t\"ontimeupdate\",\n-\t\"onunload\",\n-\t\"onvolumechange\",\n-\t\"onwaiting\",\n-\t\"open\",\n-\t\"optgroup\",\n-\t\"optimum\",\n-\t\"option\",\n-\t\"output\",\n-\t\"p\",\n-\t\"param\",\n-\t\"pattern\",\n-\t\"ping\",\n-\t\"placeholder\",\n-\t\"plaintext\",\n-\t\"poster\",\n-\t\"pre\",\n-\t\"preload\",\n-\t\"progress\",\n-\t\"prompt\",\n-\t\"public\",\n-\t\"q\",\n-\t\"radiogroup\",\n-\t\"readonly\",\n-\t\"rel\",\n-\t\"required\",\n-\t\"reversed\",\n-\t\"rows\",\n-\t\"rowspan\",\n-\t\"rp\",\n-\t\"rt\",\n-\t\"ruby\",\n-\t\"s\",\n-\t\"samp\",\n-\t\"sandbox\",\n-\t\"scope\",\n-\t\"scoped\",\n-\t\"script\",\n-\t\"seamless\",\n-\t\"section\",\n-\t\"select\",\n-\t\"selected\",\n-\t\"shape\",\n-\t\"size\",\n-\t\"sizes\",\n-\t\"small\",\n-\t\"source\",\n-\t\"spacer\",\n-\t\"span\",\n-\t\"span\",\n-\t\"spellcheck\",\n-\t\"src\",\n-\t\"srcdoc\",\n-\t\"srclang\",\n-\t\"start\",\n-\t\"step\",\n-\t\"strike\",\n-\t\"strong\",\n-\t\"style\",\n-\t\"style\",\n-\t\"sub\",\n-\t\"summary\",\n-\t\"sup\",\n-\t\"svg\",\n-\t\"system\",\n-\t\"tabindex\",\n-\t\"table\",\n-\t\"target\",\n-\t\"tbody\",\n-\t\"td\",\n-\t\"textarea\",\n-\t\"tfoot\",\n-\t\"th\",\n-\t\"thead\",\n-\t\"time\",\n-\t\"title\",\n-\t\"title\",\n-\t\"tr\",\n-\t\"track\",\n-\t\"translate\",\n-\t\"tt\",\n-\t\"type\",\n-\t\"typemustmatch\",\n-\t\"u\",\n-\t\"ul\",\n-\t\"usemap\",\n-\t\"value\",\n-\t\"var\",\n-\t\"video\",\n-\t\"wbr\",\n-\t\"width\",\n-\t\"wrap\",\n-\t\"xmp\",\n-}"}, {"sha": "d7cc8bb9a9931f33a925b98c3a2930ddf112bf82", "filename": "libgo/go/exp/html/const.go", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fconst.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,100 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-// Section 12.2.3.2 of the HTML5 specification says \"The following elements\n-// have varying levels of special parsing rules\".\n-// http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#the-stack-of-open-elements\n-var isSpecialElementMap = map[string]bool{\n-\t\"address\":    true,\n-\t\"applet\":     true,\n-\t\"area\":       true,\n-\t\"article\":    true,\n-\t\"aside\":      true,\n-\t\"base\":       true,\n-\t\"basefont\":   true,\n-\t\"bgsound\":    true,\n-\t\"blockquote\": true,\n-\t\"body\":       true,\n-\t\"br\":         true,\n-\t\"button\":     true,\n-\t\"caption\":    true,\n-\t\"center\":     true,\n-\t\"col\":        true,\n-\t\"colgroup\":   true,\n-\t\"command\":    true,\n-\t\"dd\":         true,\n-\t\"details\":    true,\n-\t\"dir\":        true,\n-\t\"div\":        true,\n-\t\"dl\":         true,\n-\t\"dt\":         true,\n-\t\"embed\":      true,\n-\t\"fieldset\":   true,\n-\t\"figcaption\": true,\n-\t\"figure\":     true,\n-\t\"footer\":     true,\n-\t\"form\":       true,\n-\t\"frame\":      true,\n-\t\"frameset\":   true,\n-\t\"h1\":         true,\n-\t\"h2\":         true,\n-\t\"h3\":         true,\n-\t\"h4\":         true,\n-\t\"h5\":         true,\n-\t\"h6\":         true,\n-\t\"head\":       true,\n-\t\"header\":     true,\n-\t\"hgroup\":     true,\n-\t\"hr\":         true,\n-\t\"html\":       true,\n-\t\"iframe\":     true,\n-\t\"img\":        true,\n-\t\"input\":      true,\n-\t\"isindex\":    true,\n-\t\"li\":         true,\n-\t\"link\":       true,\n-\t\"listing\":    true,\n-\t\"marquee\":    true,\n-\t\"menu\":       true,\n-\t\"meta\":       true,\n-\t\"nav\":        true,\n-\t\"noembed\":    true,\n-\t\"noframes\":   true,\n-\t\"noscript\":   true,\n-\t\"object\":     true,\n-\t\"ol\":         true,\n-\t\"p\":          true,\n-\t\"param\":      true,\n-\t\"plaintext\":  true,\n-\t\"pre\":        true,\n-\t\"script\":     true,\n-\t\"section\":    true,\n-\t\"select\":     true,\n-\t\"style\":      true,\n-\t\"summary\":    true,\n-\t\"table\":      true,\n-\t\"tbody\":      true,\n-\t\"td\":         true,\n-\t\"textarea\":   true,\n-\t\"tfoot\":      true,\n-\t\"th\":         true,\n-\t\"thead\":      true,\n-\t\"title\":      true,\n-\t\"tr\":         true,\n-\t\"ul\":         true,\n-\t\"wbr\":        true,\n-\t\"xmp\":        true,\n-}\n-\n-func isSpecialElement(element *Node) bool {\n-\tswitch element.Namespace {\n-\tcase \"\", \"html\":\n-\t\treturn isSpecialElementMap[element.Data]\n-\tcase \"svg\":\n-\t\treturn element.Data == \"foreignObject\"\n-\t}\n-\treturn false\n-}"}, {"sha": "fac0f54e78adcdd7e74e4ab983ff6d6425c4dcea", "filename": "libgo/go/exp/html/doc.go", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fdoc.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-/*\n-Package html implements an HTML5-compliant tokenizer and parser.\n-\n-Tokenization is done by creating a Tokenizer for an io.Reader r. It is the\n-caller's responsibility to ensure that r provides UTF-8 encoded HTML.\n-\n-\tz := html.NewTokenizer(r)\n-\n-Given a Tokenizer z, the HTML is tokenized by repeatedly calling z.Next(),\n-which parses the next token and returns its type, or an error:\n-\n-\tfor {\n-\t\ttt := z.Next()\n-\t\tif tt == html.ErrorToken {\n-\t\t\t// ...\n-\t\t\treturn ...\n-\t\t}\n-\t\t// Process the current token.\n-\t}\n-\n-There are two APIs for retrieving the current token. The high-level API is to\n-call Token; the low-level API is to call Text or TagName / TagAttr. Both APIs\n-allow optionally calling Raw after Next but before Token, Text, TagName, or\n-TagAttr. In EBNF notation, the valid call sequence per token is:\n-\n-\tNext {Raw} [ Token | Text | TagName {TagAttr} ]\n-\n-Token returns an independent data structure that completely describes a token.\n-Entities (such as \"&lt;\") are unescaped, tag names and attribute keys are\n-lower-cased, and attributes are collected into a []Attribute. For example:\n-\n-\tfor {\n-\t\tif z.Next() == html.ErrorToken {\n-\t\t\t// Returning io.EOF indicates success.\n-\t\t\treturn z.Err()\n-\t\t}\n-\t\temitToken(z.Token())\n-\t}\n-\n-The low-level API performs fewer allocations and copies, but the contents of\n-the []byte values returned by Text, TagName and TagAttr may change on the next\n-call to Next. For example, to extract an HTML page's anchor text:\n-\n-\tdepth := 0\n-\tfor {\n-\t\ttt := z.Next()\n-\t\tswitch tt {\n-\t\tcase ErrorToken:\n-\t\t\treturn z.Err()\n-\t\tcase TextToken:\n-\t\t\tif depth > 0 {\n-\t\t\t\t// emitBytes should copy the []byte it receives,\n-\t\t\t\t// if it doesn't process it immediately.\n-\t\t\t\temitBytes(z.Text())\n-\t\t\t}\n-\t\tcase StartTagToken, EndTagToken:\n-\t\t\ttn, _ := z.TagName()\n-\t\t\tif len(tn) == 1 && tn[0] == 'a' {\n-\t\t\t\tif tt == StartTagToken {\n-\t\t\t\t\tdepth++\n-\t\t\t\t} else {\n-\t\t\t\t\tdepth--\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-Parsing is done by calling Parse with an io.Reader, which returns the root of\n-the parse tree (the document element) as a *Node. It is the caller's\n-responsibility to ensure that the Reader provides UTF-8 encoded HTML. For\n-example, to process each anchor node in depth-first order:\n-\n-\tdoc, err := html.Parse(r)\n-\tif err != nil {\n-\t\t// ...\n-\t}\n-\tvar f func(*html.Node)\n-\tf = func(n *html.Node) {\n-\t\tif n.Type == html.ElementNode && n.Data == \"a\" {\n-\t\t\t// Do something with n...\n-\t\t}\n-\t\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\t\tf(c)\n-\t\t}\n-\t}\n-\tf(doc)\n-\n-The relevant specifications include:\n-http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html and\n-http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\n-*/\n-package html\n-\n-// The tokenization algorithm implemented by this package is not a line-by-line\n-// transliteration of the relatively verbose state-machine in the WHATWG\n-// specification. A more direct approach is used instead, where the program\n-// counter implies the state, such as whether it is tokenizing a tag or a text\n-// node. Specification compliance is verified by checking expected and actual\n-// outputs over a test suite rather than aiming for algorithmic fidelity.\n-\n-// TODO(nigeltao): Does a DOM API belong in this package or a separate one?\n-// TODO(nigeltao): How does parsing interact with a JavaScript engine?"}, {"sha": "c484e5a94fbf0a38b9c1789356f9f152ccaec4d2", "filename": "libgo/go/exp/html/doctype.go", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fdoctype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fdoctype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fdoctype.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,156 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"strings\"\n-)\n-\n-// parseDoctype parses the data from a DoctypeToken into a name,\n-// public identifier, and system identifier. It returns a Node whose Type\n-// is DoctypeNode, whose Data is the name, and which has attributes\n-// named \"system\" and \"public\" for the two identifiers if they were present.\n-// quirks is whether the document should be parsed in \"quirks mode\".\n-func parseDoctype(s string) (n *Node, quirks bool) {\n-\tn = &Node{Type: DoctypeNode}\n-\n-\t// Find the name.\n-\tspace := strings.IndexAny(s, whitespace)\n-\tif space == -1 {\n-\t\tspace = len(s)\n-\t}\n-\tn.Data = s[:space]\n-\t// The comparison to \"html\" is case-sensitive.\n-\tif n.Data != \"html\" {\n-\t\tquirks = true\n-\t}\n-\tn.Data = strings.ToLower(n.Data)\n-\ts = strings.TrimLeft(s[space:], whitespace)\n-\n-\tif len(s) < 6 {\n-\t\t// It can't start with \"PUBLIC\" or \"SYSTEM\".\n-\t\t// Ignore the rest of the string.\n-\t\treturn n, quirks || s != \"\"\n-\t}\n-\n-\tkey := strings.ToLower(s[:6])\n-\ts = s[6:]\n-\tfor key == \"public\" || key == \"system\" {\n-\t\ts = strings.TrimLeft(s, whitespace)\n-\t\tif s == \"\" {\n-\t\t\tbreak\n-\t\t}\n-\t\tquote := s[0]\n-\t\tif quote != '\"' && quote != '\\'' {\n-\t\t\tbreak\n-\t\t}\n-\t\ts = s[1:]\n-\t\tq := strings.IndexRune(s, rune(quote))\n-\t\tvar id string\n-\t\tif q == -1 {\n-\t\t\tid = s\n-\t\t\ts = \"\"\n-\t\t} else {\n-\t\t\tid = s[:q]\n-\t\t\ts = s[q+1:]\n-\t\t}\n-\t\tn.Attr = append(n.Attr, Attribute{Key: key, Val: id})\n-\t\tif key == \"public\" {\n-\t\t\tkey = \"system\"\n-\t\t} else {\n-\t\t\tkey = \"\"\n-\t\t}\n-\t}\n-\n-\tif key != \"\" || s != \"\" {\n-\t\tquirks = true\n-\t} else if len(n.Attr) > 0 {\n-\t\tif n.Attr[0].Key == \"public\" {\n-\t\t\tpublic := strings.ToLower(n.Attr[0].Val)\n-\t\t\tswitch public {\n-\t\t\tcase \"-//w3o//dtd w3 html strict 3.0//en//\", \"-/w3d/dtd html 4.0 transitional/en\", \"html\":\n-\t\t\t\tquirks = true\n-\t\t\tdefault:\n-\t\t\t\tfor _, q := range quirkyIDs {\n-\t\t\t\t\tif strings.HasPrefix(public, q) {\n-\t\t\t\t\t\tquirks = true\n-\t\t\t\t\t\tbreak\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// The following two public IDs only cause quirks mode if there is no system ID.\n-\t\t\tif len(n.Attr) == 1 && (strings.HasPrefix(public, \"-//w3c//dtd html 4.01 frameset//\") ||\n-\t\t\t\tstrings.HasPrefix(public, \"-//w3c//dtd html 4.01 transitional//\")) {\n-\t\t\t\tquirks = true\n-\t\t\t}\n-\t\t}\n-\t\tif lastAttr := n.Attr[len(n.Attr)-1]; lastAttr.Key == \"system\" &&\n-\t\t\tstrings.ToLower(lastAttr.Val) == \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\" {\n-\t\t\tquirks = true\n-\t\t}\n-\t}\n-\n-\treturn n, quirks\n-}\n-\n-// quirkyIDs is a list of public doctype identifiers that cause a document\n-// to be interpreted in quirks mode. The identifiers should be in lower case.\n-var quirkyIDs = []string{\n-\t\"+//silmaril//dtd html pro v0r11 19970101//\",\n-\t\"-//advasoft ltd//dtd html 3.0 aswedit + extensions//\",\n-\t\"-//as//dtd html 3.0 aswedit + extensions//\",\n-\t\"-//ietf//dtd html 2.0 level 1//\",\n-\t\"-//ietf//dtd html 2.0 level 2//\",\n-\t\"-//ietf//dtd html 2.0 strict level 1//\",\n-\t\"-//ietf//dtd html 2.0 strict level 2//\",\n-\t\"-//ietf//dtd html 2.0 strict//\",\n-\t\"-//ietf//dtd html 2.0//\",\n-\t\"-//ietf//dtd html 2.1e//\",\n-\t\"-//ietf//dtd html 3.0//\",\n-\t\"-//ietf//dtd html 3.2 final//\",\n-\t\"-//ietf//dtd html 3.2//\",\n-\t\"-//ietf//dtd html 3//\",\n-\t\"-//ietf//dtd html level 0//\",\n-\t\"-//ietf//dtd html level 1//\",\n-\t\"-//ietf//dtd html level 2//\",\n-\t\"-//ietf//dtd html level 3//\",\n-\t\"-//ietf//dtd html strict level 0//\",\n-\t\"-//ietf//dtd html strict level 1//\",\n-\t\"-//ietf//dtd html strict level 2//\",\n-\t\"-//ietf//dtd html strict level 3//\",\n-\t\"-//ietf//dtd html strict//\",\n-\t\"-//ietf//dtd html//\",\n-\t\"-//metrius//dtd metrius presentational//\",\n-\t\"-//microsoft//dtd internet explorer 2.0 html strict//\",\n-\t\"-//microsoft//dtd internet explorer 2.0 html//\",\n-\t\"-//microsoft//dtd internet explorer 2.0 tables//\",\n-\t\"-//microsoft//dtd internet explorer 3.0 html strict//\",\n-\t\"-//microsoft//dtd internet explorer 3.0 html//\",\n-\t\"-//microsoft//dtd internet explorer 3.0 tables//\",\n-\t\"-//netscape comm. corp.//dtd html//\",\n-\t\"-//netscape comm. corp.//dtd strict html//\",\n-\t\"-//o'reilly and associates//dtd html 2.0//\",\n-\t\"-//o'reilly and associates//dtd html extended 1.0//\",\n-\t\"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n-\t\"-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//\",\n-\t\"-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//\",\n-\t\"-//spyglass//dtd html 2.0 extended//\",\n-\t\"-//sq//dtd html 2.0 hotmetal + extensions//\",\n-\t\"-//sun microsystems corp.//dtd hotjava html//\",\n-\t\"-//sun microsystems corp.//dtd hotjava strict html//\",\n-\t\"-//w3c//dtd html 3 1995-03-24//\",\n-\t\"-//w3c//dtd html 3.2 draft//\",\n-\t\"-//w3c//dtd html 3.2 final//\",\n-\t\"-//w3c//dtd html 3.2//\",\n-\t\"-//w3c//dtd html 3.2s draft//\",\n-\t\"-//w3c//dtd html 4.0 frameset//\",\n-\t\"-//w3c//dtd html 4.0 transitional//\",\n-\t\"-//w3c//dtd html experimental 19960712//\",\n-\t\"-//w3c//dtd html experimental 970421//\",\n-\t\"-//w3c//dtd w3 html//\",\n-\t\"-//w3o//dtd w3 html 3.0//\",\n-\t\"-//webtechs//dtd mozilla html 2.0//\",\n-\t\"-//webtechs//dtd mozilla html//\",\n-}"}, {"sha": "af8a007ed04629c83e1046b76cb977658ddcf3c2", "filename": "libgo/go/exp/html/entity.go", "status": "removed", "additions": 0, "deletions": 2253, "changes": 2253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fentity.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fentity.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fentity.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,2253 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-// All entities that do not end with ';' are 6 or fewer bytes long.\n-const longestEntityWithoutSemicolon = 6\n-\n-// entity is a map from HTML entity names to their values. The semicolon matters:\n-// http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html\n-// lists both \"amp\" and \"amp;\" as two separate entries.\n-//\n-// Note that the HTML5 list is larger than the HTML4 list at\n-// http://www.w3.org/TR/html4/sgml/entities.html\n-var entity = map[string]rune{\n-\t\"AElig;\":                           '\\U000000C6',\n-\t\"AMP;\":                             '\\U00000026',\n-\t\"Aacute;\":                          '\\U000000C1',\n-\t\"Abreve;\":                          '\\U00000102',\n-\t\"Acirc;\":                           '\\U000000C2',\n-\t\"Acy;\":                             '\\U00000410',\n-\t\"Afr;\":                             '\\U0001D504',\n-\t\"Agrave;\":                          '\\U000000C0',\n-\t\"Alpha;\":                           '\\U00000391',\n-\t\"Amacr;\":                           '\\U00000100',\n-\t\"And;\":                             '\\U00002A53',\n-\t\"Aogon;\":                           '\\U00000104',\n-\t\"Aopf;\":                            '\\U0001D538',\n-\t\"ApplyFunction;\":                   '\\U00002061',\n-\t\"Aring;\":                           '\\U000000C5',\n-\t\"Ascr;\":                            '\\U0001D49C',\n-\t\"Assign;\":                          '\\U00002254',\n-\t\"Atilde;\":                          '\\U000000C3',\n-\t\"Auml;\":                            '\\U000000C4',\n-\t\"Backslash;\":                       '\\U00002216',\n-\t\"Barv;\":                            '\\U00002AE7',\n-\t\"Barwed;\":                          '\\U00002306',\n-\t\"Bcy;\":                             '\\U00000411',\n-\t\"Because;\":                         '\\U00002235',\n-\t\"Bernoullis;\":                      '\\U0000212C',\n-\t\"Beta;\":                            '\\U00000392',\n-\t\"Bfr;\":                             '\\U0001D505',\n-\t\"Bopf;\":                            '\\U0001D539',\n-\t\"Breve;\":                           '\\U000002D8',\n-\t\"Bscr;\":                            '\\U0000212C',\n-\t\"Bumpeq;\":                          '\\U0000224E',\n-\t\"CHcy;\":                            '\\U00000427',\n-\t\"COPY;\":                            '\\U000000A9',\n-\t\"Cacute;\":                          '\\U00000106',\n-\t\"Cap;\":                             '\\U000022D2',\n-\t\"CapitalDifferentialD;\":            '\\U00002145',\n-\t\"Cayleys;\":                         '\\U0000212D',\n-\t\"Ccaron;\":                          '\\U0000010C',\n-\t\"Ccedil;\":                          '\\U000000C7',\n-\t\"Ccirc;\":                           '\\U00000108',\n-\t\"Cconint;\":                         '\\U00002230',\n-\t\"Cdot;\":                            '\\U0000010A',\n-\t\"Cedilla;\":                         '\\U000000B8',\n-\t\"CenterDot;\":                       '\\U000000B7',\n-\t\"Cfr;\":                             '\\U0000212D',\n-\t\"Chi;\":                             '\\U000003A7',\n-\t\"CircleDot;\":                       '\\U00002299',\n-\t\"CircleMinus;\":                     '\\U00002296',\n-\t\"CirclePlus;\":                      '\\U00002295',\n-\t\"CircleTimes;\":                     '\\U00002297',\n-\t\"ClockwiseContourIntegral;\":        '\\U00002232',\n-\t\"CloseCurlyDoubleQuote;\":           '\\U0000201D',\n-\t\"CloseCurlyQuote;\":                 '\\U00002019',\n-\t\"Colon;\":                           '\\U00002237',\n-\t\"Colone;\":                          '\\U00002A74',\n-\t\"Congruent;\":                       '\\U00002261',\n-\t\"Conint;\":                          '\\U0000222F',\n-\t\"ContourIntegral;\":                 '\\U0000222E',\n-\t\"Copf;\":                            '\\U00002102',\n-\t\"Coproduct;\":                       '\\U00002210',\n-\t\"CounterClockwiseContourIntegral;\": '\\U00002233',\n-\t\"Cross;\":                    '\\U00002A2F',\n-\t\"Cscr;\":                     '\\U0001D49E',\n-\t\"Cup;\":                      '\\U000022D3',\n-\t\"CupCap;\":                   '\\U0000224D',\n-\t\"DD;\":                       '\\U00002145',\n-\t\"DDotrahd;\":                 '\\U00002911',\n-\t\"DJcy;\":                     '\\U00000402',\n-\t\"DScy;\":                     '\\U00000405',\n-\t\"DZcy;\":                     '\\U0000040F',\n-\t\"Dagger;\":                   '\\U00002021',\n-\t\"Darr;\":                     '\\U000021A1',\n-\t\"Dashv;\":                    '\\U00002AE4',\n-\t\"Dcaron;\":                   '\\U0000010E',\n-\t\"Dcy;\":                      '\\U00000414',\n-\t\"Del;\":                      '\\U00002207',\n-\t\"Delta;\":                    '\\U00000394',\n-\t\"Dfr;\":                      '\\U0001D507',\n-\t\"DiacriticalAcute;\":         '\\U000000B4',\n-\t\"DiacriticalDot;\":           '\\U000002D9',\n-\t\"DiacriticalDoubleAcute;\":   '\\U000002DD',\n-\t\"DiacriticalGrave;\":         '\\U00000060',\n-\t\"DiacriticalTilde;\":         '\\U000002DC',\n-\t\"Diamond;\":                  '\\U000022C4',\n-\t\"DifferentialD;\":            '\\U00002146',\n-\t\"Dopf;\":                     '\\U0001D53B',\n-\t\"Dot;\":                      '\\U000000A8',\n-\t\"DotDot;\":                   '\\U000020DC',\n-\t\"DotEqual;\":                 '\\U00002250',\n-\t\"DoubleContourIntegral;\":    '\\U0000222F',\n-\t\"DoubleDot;\":                '\\U000000A8',\n-\t\"DoubleDownArrow;\":          '\\U000021D3',\n-\t\"DoubleLeftArrow;\":          '\\U000021D0',\n-\t\"DoubleLeftRightArrow;\":     '\\U000021D4',\n-\t\"DoubleLeftTee;\":            '\\U00002AE4',\n-\t\"DoubleLongLeftArrow;\":      '\\U000027F8',\n-\t\"DoubleLongLeftRightArrow;\": '\\U000027FA',\n-\t\"DoubleLongRightArrow;\":     '\\U000027F9',\n-\t\"DoubleRightArrow;\":         '\\U000021D2',\n-\t\"DoubleRightTee;\":           '\\U000022A8',\n-\t\"DoubleUpArrow;\":            '\\U000021D1',\n-\t\"DoubleUpDownArrow;\":        '\\U000021D5',\n-\t\"DoubleVerticalBar;\":        '\\U00002225',\n-\t\"DownArrow;\":                '\\U00002193',\n-\t\"DownArrowBar;\":             '\\U00002913',\n-\t\"DownArrowUpArrow;\":         '\\U000021F5',\n-\t\"DownBreve;\":                '\\U00000311',\n-\t\"DownLeftRightVector;\":      '\\U00002950',\n-\t\"DownLeftTeeVector;\":        '\\U0000295E',\n-\t\"DownLeftVector;\":           '\\U000021BD',\n-\t\"DownLeftVectorBar;\":        '\\U00002956',\n-\t\"DownRightTeeVector;\":       '\\U0000295F',\n-\t\"DownRightVector;\":          '\\U000021C1',\n-\t\"DownRightVectorBar;\":       '\\U00002957',\n-\t\"DownTee;\":                  '\\U000022A4',\n-\t\"DownTeeArrow;\":             '\\U000021A7',\n-\t\"Downarrow;\":                '\\U000021D3',\n-\t\"Dscr;\":                     '\\U0001D49F',\n-\t\"Dstrok;\":                   '\\U00000110',\n-\t\"ENG;\":                      '\\U0000014A',\n-\t\"ETH;\":                      '\\U000000D0',\n-\t\"Eacute;\":                   '\\U000000C9',\n-\t\"Ecaron;\":                   '\\U0000011A',\n-\t\"Ecirc;\":                    '\\U000000CA',\n-\t\"Ecy;\":                      '\\U0000042D',\n-\t\"Edot;\":                     '\\U00000116',\n-\t\"Efr;\":                      '\\U0001D508',\n-\t\"Egrave;\":                   '\\U000000C8',\n-\t\"Element;\":                  '\\U00002208',\n-\t\"Emacr;\":                    '\\U00000112',\n-\t\"EmptySmallSquare;\":         '\\U000025FB',\n-\t\"EmptyVerySmallSquare;\":     '\\U000025AB',\n-\t\"Eogon;\":                    '\\U00000118',\n-\t\"Eopf;\":                     '\\U0001D53C',\n-\t\"Epsilon;\":                  '\\U00000395',\n-\t\"Equal;\":                    '\\U00002A75',\n-\t\"EqualTilde;\":               '\\U00002242',\n-\t\"Equilibrium;\":              '\\U000021CC',\n-\t\"Escr;\":                     '\\U00002130',\n-\t\"Esim;\":                     '\\U00002A73',\n-\t\"Eta;\":                      '\\U00000397',\n-\t\"Euml;\":                     '\\U000000CB',\n-\t\"Exists;\":                   '\\U00002203',\n-\t\"ExponentialE;\":             '\\U00002147',\n-\t\"Fcy;\":                      '\\U00000424',\n-\t\"Ffr;\":                      '\\U0001D509',\n-\t\"FilledSmallSquare;\":        '\\U000025FC',\n-\t\"FilledVerySmallSquare;\":    '\\U000025AA',\n-\t\"Fopf;\":                     '\\U0001D53D',\n-\t\"ForAll;\":                   '\\U00002200',\n-\t\"Fouriertrf;\":               '\\U00002131',\n-\t\"Fscr;\":                     '\\U00002131',\n-\t\"GJcy;\":                     '\\U00000403',\n-\t\"GT;\":                       '\\U0000003E',\n-\t\"Gamma;\":                    '\\U00000393',\n-\t\"Gammad;\":                   '\\U000003DC',\n-\t\"Gbreve;\":                   '\\U0000011E',\n-\t\"Gcedil;\":                   '\\U00000122',\n-\t\"Gcirc;\":                    '\\U0000011C',\n-\t\"Gcy;\":                      '\\U00000413',\n-\t\"Gdot;\":                     '\\U00000120',\n-\t\"Gfr;\":                      '\\U0001D50A',\n-\t\"Gg;\":                       '\\U000022D9',\n-\t\"Gopf;\":                     '\\U0001D53E',\n-\t\"GreaterEqual;\":             '\\U00002265',\n-\t\"GreaterEqualLess;\":         '\\U000022DB',\n-\t\"GreaterFullEqual;\":         '\\U00002267',\n-\t\"GreaterGreater;\":           '\\U00002AA2',\n-\t\"GreaterLess;\":              '\\U00002277',\n-\t\"GreaterSlantEqual;\":        '\\U00002A7E',\n-\t\"GreaterTilde;\":             '\\U00002273',\n-\t\"Gscr;\":                     '\\U0001D4A2',\n-\t\"Gt;\":                       '\\U0000226B',\n-\t\"HARDcy;\":                   '\\U0000042A',\n-\t\"Hacek;\":                    '\\U000002C7',\n-\t\"Hat;\":                      '\\U0000005E',\n-\t\"Hcirc;\":                    '\\U00000124',\n-\t\"Hfr;\":                      '\\U0000210C',\n-\t\"HilbertSpace;\":             '\\U0000210B',\n-\t\"Hopf;\":                     '\\U0000210D',\n-\t\"HorizontalLine;\":           '\\U00002500',\n-\t\"Hscr;\":                     '\\U0000210B',\n-\t\"Hstrok;\":                   '\\U00000126',\n-\t\"HumpDownHump;\":             '\\U0000224E',\n-\t\"HumpEqual;\":                '\\U0000224F',\n-\t\"IEcy;\":                     '\\U00000415',\n-\t\"IJlig;\":                    '\\U00000132',\n-\t\"IOcy;\":                     '\\U00000401',\n-\t\"Iacute;\":                   '\\U000000CD',\n-\t\"Icirc;\":                    '\\U000000CE',\n-\t\"Icy;\":                      '\\U00000418',\n-\t\"Idot;\":                     '\\U00000130',\n-\t\"Ifr;\":                      '\\U00002111',\n-\t\"Igrave;\":                   '\\U000000CC',\n-\t\"Im;\":                       '\\U00002111',\n-\t\"Imacr;\":                    '\\U0000012A',\n-\t\"ImaginaryI;\":               '\\U00002148',\n-\t\"Implies;\":                  '\\U000021D2',\n-\t\"Int;\":                      '\\U0000222C',\n-\t\"Integral;\":                 '\\U0000222B',\n-\t\"Intersection;\":             '\\U000022C2',\n-\t\"InvisibleComma;\":           '\\U00002063',\n-\t\"InvisibleTimes;\":           '\\U00002062',\n-\t\"Iogon;\":                    '\\U0000012E',\n-\t\"Iopf;\":                     '\\U0001D540',\n-\t\"Iota;\":                     '\\U00000399',\n-\t\"Iscr;\":                     '\\U00002110',\n-\t\"Itilde;\":                   '\\U00000128',\n-\t\"Iukcy;\":                    '\\U00000406',\n-\t\"Iuml;\":                     '\\U000000CF',\n-\t\"Jcirc;\":                    '\\U00000134',\n-\t\"Jcy;\":                      '\\U00000419',\n-\t\"Jfr;\":                      '\\U0001D50D',\n-\t\"Jopf;\":                     '\\U0001D541',\n-\t\"Jscr;\":                     '\\U0001D4A5',\n-\t\"Jsercy;\":                   '\\U00000408',\n-\t\"Jukcy;\":                    '\\U00000404',\n-\t\"KHcy;\":                     '\\U00000425',\n-\t\"KJcy;\":                     '\\U0000040C',\n-\t\"Kappa;\":                    '\\U0000039A',\n-\t\"Kcedil;\":                   '\\U00000136',\n-\t\"Kcy;\":                      '\\U0000041A',\n-\t\"Kfr;\":                      '\\U0001D50E',\n-\t\"Kopf;\":                     '\\U0001D542',\n-\t\"Kscr;\":                     '\\U0001D4A6',\n-\t\"LJcy;\":                     '\\U00000409',\n-\t\"LT;\":                       '\\U0000003C',\n-\t\"Lacute;\":                   '\\U00000139',\n-\t\"Lambda;\":                   '\\U0000039B',\n-\t\"Lang;\":                     '\\U000027EA',\n-\t\"Laplacetrf;\":               '\\U00002112',\n-\t\"Larr;\":                     '\\U0000219E',\n-\t\"Lcaron;\":                   '\\U0000013D',\n-\t\"Lcedil;\":                   '\\U0000013B',\n-\t\"Lcy;\":                      '\\U0000041B',\n-\t\"LeftAngleBracket;\":         '\\U000027E8',\n-\t\"LeftArrow;\":                '\\U00002190',\n-\t\"LeftArrowBar;\":             '\\U000021E4',\n-\t\"LeftArrowRightArrow;\":      '\\U000021C6',\n-\t\"LeftCeiling;\":              '\\U00002308',\n-\t\"LeftDoubleBracket;\":        '\\U000027E6',\n-\t\"LeftDownTeeVector;\":        '\\U00002961',\n-\t\"LeftDownVector;\":           '\\U000021C3',\n-\t\"LeftDownVectorBar;\":        '\\U00002959',\n-\t\"LeftFloor;\":                '\\U0000230A',\n-\t\"LeftRightArrow;\":           '\\U00002194',\n-\t\"LeftRightVector;\":          '\\U0000294E',\n-\t\"LeftTee;\":                  '\\U000022A3',\n-\t\"LeftTeeArrow;\":             '\\U000021A4',\n-\t\"LeftTeeVector;\":            '\\U0000295A',\n-\t\"LeftTriangle;\":             '\\U000022B2',\n-\t\"LeftTriangleBar;\":          '\\U000029CF',\n-\t\"LeftTriangleEqual;\":        '\\U000022B4',\n-\t\"LeftUpDownVector;\":         '\\U00002951',\n-\t\"LeftUpTeeVector;\":          '\\U00002960',\n-\t\"LeftUpVector;\":             '\\U000021BF',\n-\t\"LeftUpVectorBar;\":          '\\U00002958',\n-\t\"LeftVector;\":               '\\U000021BC',\n-\t\"LeftVectorBar;\":            '\\U00002952',\n-\t\"Leftarrow;\":                '\\U000021D0',\n-\t\"Leftrightarrow;\":           '\\U000021D4',\n-\t\"LessEqualGreater;\":         '\\U000022DA',\n-\t\"LessFullEqual;\":            '\\U00002266',\n-\t\"LessGreater;\":              '\\U00002276',\n-\t\"LessLess;\":                 '\\U00002AA1',\n-\t\"LessSlantEqual;\":           '\\U00002A7D',\n-\t\"LessTilde;\":                '\\U00002272',\n-\t\"Lfr;\":                      '\\U0001D50F',\n-\t\"Ll;\":                       '\\U000022D8',\n-\t\"Lleftarrow;\":               '\\U000021DA',\n-\t\"Lmidot;\":                   '\\U0000013F',\n-\t\"LongLeftArrow;\":            '\\U000027F5',\n-\t\"LongLeftRightArrow;\":       '\\U000027F7',\n-\t\"LongRightArrow;\":           '\\U000027F6',\n-\t\"Longleftarrow;\":            '\\U000027F8',\n-\t\"Longleftrightarrow;\":       '\\U000027FA',\n-\t\"Longrightarrow;\":           '\\U000027F9',\n-\t\"Lopf;\":                     '\\U0001D543',\n-\t\"LowerLeftArrow;\":           '\\U00002199',\n-\t\"LowerRightArrow;\":          '\\U00002198',\n-\t\"Lscr;\":                     '\\U00002112',\n-\t\"Lsh;\":                      '\\U000021B0',\n-\t\"Lstrok;\":                   '\\U00000141',\n-\t\"Lt;\":                       '\\U0000226A',\n-\t\"Map;\":                      '\\U00002905',\n-\t\"Mcy;\":                      '\\U0000041C',\n-\t\"MediumSpace;\":              '\\U0000205F',\n-\t\"Mellintrf;\":                '\\U00002133',\n-\t\"Mfr;\":                      '\\U0001D510',\n-\t\"MinusPlus;\":                '\\U00002213',\n-\t\"Mopf;\":                     '\\U0001D544',\n-\t\"Mscr;\":                     '\\U00002133',\n-\t\"Mu;\":                       '\\U0000039C',\n-\t\"NJcy;\":                     '\\U0000040A',\n-\t\"Nacute;\":                   '\\U00000143',\n-\t\"Ncaron;\":                   '\\U00000147',\n-\t\"Ncedil;\":                   '\\U00000145',\n-\t\"Ncy;\":                      '\\U0000041D',\n-\t\"NegativeMediumSpace;\":      '\\U0000200B',\n-\t\"NegativeThickSpace;\":       '\\U0000200B',\n-\t\"NegativeThinSpace;\":        '\\U0000200B',\n-\t\"NegativeVeryThinSpace;\":    '\\U0000200B',\n-\t\"NestedGreaterGreater;\":     '\\U0000226B',\n-\t\"NestedLessLess;\":           '\\U0000226A',\n-\t\"NewLine;\":                  '\\U0000000A',\n-\t\"Nfr;\":                      '\\U0001D511',\n-\t\"NoBreak;\":                  '\\U00002060',\n-\t\"NonBreakingSpace;\":         '\\U000000A0',\n-\t\"Nopf;\":                     '\\U00002115',\n-\t\"Not;\":                      '\\U00002AEC',\n-\t\"NotCongruent;\":             '\\U00002262',\n-\t\"NotCupCap;\":                '\\U0000226D',\n-\t\"NotDoubleVerticalBar;\":     '\\U00002226',\n-\t\"NotElement;\":               '\\U00002209',\n-\t\"NotEqual;\":                 '\\U00002260',\n-\t\"NotExists;\":                '\\U00002204',\n-\t\"NotGreater;\":               '\\U0000226F',\n-\t\"NotGreaterEqual;\":          '\\U00002271',\n-\t\"NotGreaterLess;\":           '\\U00002279',\n-\t\"NotGreaterTilde;\":          '\\U00002275',\n-\t\"NotLeftTriangle;\":          '\\U000022EA',\n-\t\"NotLeftTriangleEqual;\":     '\\U000022EC',\n-\t\"NotLess;\":                  '\\U0000226E',\n-\t\"NotLessEqual;\":             '\\U00002270',\n-\t\"NotLessGreater;\":           '\\U00002278',\n-\t\"NotLessTilde;\":             '\\U00002274',\n-\t\"NotPrecedes;\":              '\\U00002280',\n-\t\"NotPrecedesSlantEqual;\":    '\\U000022E0',\n-\t\"NotReverseElement;\":        '\\U0000220C',\n-\t\"NotRightTriangle;\":         '\\U000022EB',\n-\t\"NotRightTriangleEqual;\":    '\\U000022ED',\n-\t\"NotSquareSubsetEqual;\":     '\\U000022E2',\n-\t\"NotSquareSupersetEqual;\":   '\\U000022E3',\n-\t\"NotSubsetEqual;\":           '\\U00002288',\n-\t\"NotSucceeds;\":              '\\U00002281',\n-\t\"NotSucceedsSlantEqual;\":    '\\U000022E1',\n-\t\"NotSupersetEqual;\":         '\\U00002289',\n-\t\"NotTilde;\":                 '\\U00002241',\n-\t\"NotTildeEqual;\":            '\\U00002244',\n-\t\"NotTildeFullEqual;\":        '\\U00002247',\n-\t\"NotTildeTilde;\":            '\\U00002249',\n-\t\"NotVerticalBar;\":           '\\U00002224',\n-\t\"Nscr;\":                     '\\U0001D4A9',\n-\t\"Ntilde;\":                   '\\U000000D1',\n-\t\"Nu;\":                       '\\U0000039D',\n-\t\"OElig;\":                    '\\U00000152',\n-\t\"Oacute;\":                   '\\U000000D3',\n-\t\"Ocirc;\":                    '\\U000000D4',\n-\t\"Ocy;\":                      '\\U0000041E',\n-\t\"Odblac;\":                   '\\U00000150',\n-\t\"Ofr;\":                      '\\U0001D512',\n-\t\"Ograve;\":                   '\\U000000D2',\n-\t\"Omacr;\":                    '\\U0000014C',\n-\t\"Omega;\":                    '\\U000003A9',\n-\t\"Omicron;\":                  '\\U0000039F',\n-\t\"Oopf;\":                     '\\U0001D546',\n-\t\"OpenCurlyDoubleQuote;\":     '\\U0000201C',\n-\t\"OpenCurlyQuote;\":           '\\U00002018',\n-\t\"Or;\":                       '\\U00002A54',\n-\t\"Oscr;\":                     '\\U0001D4AA',\n-\t\"Oslash;\":                   '\\U000000D8',\n-\t\"Otilde;\":                   '\\U000000D5',\n-\t\"Otimes;\":                   '\\U00002A37',\n-\t\"Ouml;\":                     '\\U000000D6',\n-\t\"OverBar;\":                  '\\U0000203E',\n-\t\"OverBrace;\":                '\\U000023DE',\n-\t\"OverBracket;\":              '\\U000023B4',\n-\t\"OverParenthesis;\":          '\\U000023DC',\n-\t\"PartialD;\":                 '\\U00002202',\n-\t\"Pcy;\":                      '\\U0000041F',\n-\t\"Pfr;\":                      '\\U0001D513',\n-\t\"Phi;\":                      '\\U000003A6',\n-\t\"Pi;\":                       '\\U000003A0',\n-\t\"PlusMinus;\":                '\\U000000B1',\n-\t\"Poincareplane;\":            '\\U0000210C',\n-\t\"Popf;\":                     '\\U00002119',\n-\t\"Pr;\":                       '\\U00002ABB',\n-\t\"Precedes;\":                 '\\U0000227A',\n-\t\"PrecedesEqual;\":            '\\U00002AAF',\n-\t\"PrecedesSlantEqual;\":       '\\U0000227C',\n-\t\"PrecedesTilde;\":            '\\U0000227E',\n-\t\"Prime;\":                    '\\U00002033',\n-\t\"Product;\":                  '\\U0000220F',\n-\t\"Proportion;\":               '\\U00002237',\n-\t\"Proportional;\":             '\\U0000221D',\n-\t\"Pscr;\":                     '\\U0001D4AB',\n-\t\"Psi;\":                      '\\U000003A8',\n-\t\"QUOT;\":                     '\\U00000022',\n-\t\"Qfr;\":                      '\\U0001D514',\n-\t\"Qopf;\":                     '\\U0000211A',\n-\t\"Qscr;\":                     '\\U0001D4AC',\n-\t\"RBarr;\":                    '\\U00002910',\n-\t\"REG;\":                      '\\U000000AE',\n-\t\"Racute;\":                   '\\U00000154',\n-\t\"Rang;\":                     '\\U000027EB',\n-\t\"Rarr;\":                     '\\U000021A0',\n-\t\"Rarrtl;\":                   '\\U00002916',\n-\t\"Rcaron;\":                   '\\U00000158',\n-\t\"Rcedil;\":                   '\\U00000156',\n-\t\"Rcy;\":                      '\\U00000420',\n-\t\"Re;\":                       '\\U0000211C',\n-\t\"ReverseElement;\":           '\\U0000220B',\n-\t\"ReverseEquilibrium;\":       '\\U000021CB',\n-\t\"ReverseUpEquilibrium;\":     '\\U0000296F',\n-\t\"Rfr;\":                      '\\U0000211C',\n-\t\"Rho;\":                      '\\U000003A1',\n-\t\"RightAngleBracket;\":        '\\U000027E9',\n-\t\"RightArrow;\":               '\\U00002192',\n-\t\"RightArrowBar;\":            '\\U000021E5',\n-\t\"RightArrowLeftArrow;\":      '\\U000021C4',\n-\t\"RightCeiling;\":             '\\U00002309',\n-\t\"RightDoubleBracket;\":       '\\U000027E7',\n-\t\"RightDownTeeVector;\":       '\\U0000295D',\n-\t\"RightDownVector;\":          '\\U000021C2',\n-\t\"RightDownVectorBar;\":       '\\U00002955',\n-\t\"RightFloor;\":               '\\U0000230B',\n-\t\"RightTee;\":                 '\\U000022A2',\n-\t\"RightTeeArrow;\":            '\\U000021A6',\n-\t\"RightTeeVector;\":           '\\U0000295B',\n-\t\"RightTriangle;\":            '\\U000022B3',\n-\t\"RightTriangleBar;\":         '\\U000029D0',\n-\t\"RightTriangleEqual;\":       '\\U000022B5',\n-\t\"RightUpDownVector;\":        '\\U0000294F',\n-\t\"RightUpTeeVector;\":         '\\U0000295C',\n-\t\"RightUpVector;\":            '\\U000021BE',\n-\t\"RightUpVectorBar;\":         '\\U00002954',\n-\t\"RightVector;\":              '\\U000021C0',\n-\t\"RightVectorBar;\":           '\\U00002953',\n-\t\"Rightarrow;\":               '\\U000021D2',\n-\t\"Ropf;\":                     '\\U0000211D',\n-\t\"RoundImplies;\":             '\\U00002970',\n-\t\"Rrightarrow;\":              '\\U000021DB',\n-\t\"Rscr;\":                     '\\U0000211B',\n-\t\"Rsh;\":                      '\\U000021B1',\n-\t\"RuleDelayed;\":              '\\U000029F4',\n-\t\"SHCHcy;\":                   '\\U00000429',\n-\t\"SHcy;\":                     '\\U00000428',\n-\t\"SOFTcy;\":                   '\\U0000042C',\n-\t\"Sacute;\":                   '\\U0000015A',\n-\t\"Sc;\":                       '\\U00002ABC',\n-\t\"Scaron;\":                   '\\U00000160',\n-\t\"Scedil;\":                   '\\U0000015E',\n-\t\"Scirc;\":                    '\\U0000015C',\n-\t\"Scy;\":                      '\\U00000421',\n-\t\"Sfr;\":                      '\\U0001D516',\n-\t\"ShortDownArrow;\":           '\\U00002193',\n-\t\"ShortLeftArrow;\":           '\\U00002190',\n-\t\"ShortRightArrow;\":          '\\U00002192',\n-\t\"ShortUpArrow;\":             '\\U00002191',\n-\t\"Sigma;\":                    '\\U000003A3',\n-\t\"SmallCircle;\":              '\\U00002218',\n-\t\"Sopf;\":                     '\\U0001D54A',\n-\t\"Sqrt;\":                     '\\U0000221A',\n-\t\"Square;\":                   '\\U000025A1',\n-\t\"SquareIntersection;\":       '\\U00002293',\n-\t\"SquareSubset;\":             '\\U0000228F',\n-\t\"SquareSubsetEqual;\":        '\\U00002291',\n-\t\"SquareSuperset;\":           '\\U00002290',\n-\t\"SquareSupersetEqual;\":      '\\U00002292',\n-\t\"SquareUnion;\":              '\\U00002294',\n-\t\"Sscr;\":                     '\\U0001D4AE',\n-\t\"Star;\":                     '\\U000022C6',\n-\t\"Sub;\":                      '\\U000022D0',\n-\t\"Subset;\":                   '\\U000022D0',\n-\t\"SubsetEqual;\":              '\\U00002286',\n-\t\"Succeeds;\":                 '\\U0000227B',\n-\t\"SucceedsEqual;\":            '\\U00002AB0',\n-\t\"SucceedsSlantEqual;\":       '\\U0000227D',\n-\t\"SucceedsTilde;\":            '\\U0000227F',\n-\t\"SuchThat;\":                 '\\U0000220B',\n-\t\"Sum;\":                      '\\U00002211',\n-\t\"Sup;\":                      '\\U000022D1',\n-\t\"Superset;\":                 '\\U00002283',\n-\t\"SupersetEqual;\":            '\\U00002287',\n-\t\"Supset;\":                   '\\U000022D1',\n-\t\"THORN;\":                    '\\U000000DE',\n-\t\"TRADE;\":                    '\\U00002122',\n-\t\"TSHcy;\":                    '\\U0000040B',\n-\t\"TScy;\":                     '\\U00000426',\n-\t\"Tab;\":                      '\\U00000009',\n-\t\"Tau;\":                      '\\U000003A4',\n-\t\"Tcaron;\":                   '\\U00000164',\n-\t\"Tcedil;\":                   '\\U00000162',\n-\t\"Tcy;\":                      '\\U00000422',\n-\t\"Tfr;\":                      '\\U0001D517',\n-\t\"Therefore;\":                '\\U00002234',\n-\t\"Theta;\":                    '\\U00000398',\n-\t\"ThinSpace;\":                '\\U00002009',\n-\t\"Tilde;\":                    '\\U0000223C',\n-\t\"TildeEqual;\":               '\\U00002243',\n-\t\"TildeFullEqual;\":           '\\U00002245',\n-\t\"TildeTilde;\":               '\\U00002248',\n-\t\"Topf;\":                     '\\U0001D54B',\n-\t\"TripleDot;\":                '\\U000020DB',\n-\t\"Tscr;\":                     '\\U0001D4AF',\n-\t\"Tstrok;\":                   '\\U00000166',\n-\t\"Uacute;\":                   '\\U000000DA',\n-\t\"Uarr;\":                     '\\U0000219F',\n-\t\"Uarrocir;\":                 '\\U00002949',\n-\t\"Ubrcy;\":                    '\\U0000040E',\n-\t\"Ubreve;\":                   '\\U0000016C',\n-\t\"Ucirc;\":                    '\\U000000DB',\n-\t\"Ucy;\":                      '\\U00000423',\n-\t\"Udblac;\":                   '\\U00000170',\n-\t\"Ufr;\":                      '\\U0001D518',\n-\t\"Ugrave;\":                   '\\U000000D9',\n-\t\"Umacr;\":                    '\\U0000016A',\n-\t\"UnderBar;\":                 '\\U0000005F',\n-\t\"UnderBrace;\":               '\\U000023DF',\n-\t\"UnderBracket;\":             '\\U000023B5',\n-\t\"UnderParenthesis;\":         '\\U000023DD',\n-\t\"Union;\":                    '\\U000022C3',\n-\t\"UnionPlus;\":                '\\U0000228E',\n-\t\"Uogon;\":                    '\\U00000172',\n-\t\"Uopf;\":                     '\\U0001D54C',\n-\t\"UpArrow;\":                  '\\U00002191',\n-\t\"UpArrowBar;\":               '\\U00002912',\n-\t\"UpArrowDownArrow;\":         '\\U000021C5',\n-\t\"UpDownArrow;\":              '\\U00002195',\n-\t\"UpEquilibrium;\":            '\\U0000296E',\n-\t\"UpTee;\":                    '\\U000022A5',\n-\t\"UpTeeArrow;\":               '\\U000021A5',\n-\t\"Uparrow;\":                  '\\U000021D1',\n-\t\"Updownarrow;\":              '\\U000021D5',\n-\t\"UpperLeftArrow;\":           '\\U00002196',\n-\t\"UpperRightArrow;\":          '\\U00002197',\n-\t\"Upsi;\":                     '\\U000003D2',\n-\t\"Upsilon;\":                  '\\U000003A5',\n-\t\"Uring;\":                    '\\U0000016E',\n-\t\"Uscr;\":                     '\\U0001D4B0',\n-\t\"Utilde;\":                   '\\U00000168',\n-\t\"Uuml;\":                     '\\U000000DC',\n-\t\"VDash;\":                    '\\U000022AB',\n-\t\"Vbar;\":                     '\\U00002AEB',\n-\t\"Vcy;\":                      '\\U00000412',\n-\t\"Vdash;\":                    '\\U000022A9',\n-\t\"Vdashl;\":                   '\\U00002AE6',\n-\t\"Vee;\":                      '\\U000022C1',\n-\t\"Verbar;\":                   '\\U00002016',\n-\t\"Vert;\":                     '\\U00002016',\n-\t\"VerticalBar;\":              '\\U00002223',\n-\t\"VerticalLine;\":             '\\U0000007C',\n-\t\"VerticalSeparator;\":        '\\U00002758',\n-\t\"VerticalTilde;\":            '\\U00002240',\n-\t\"VeryThinSpace;\":            '\\U0000200A',\n-\t\"Vfr;\":                      '\\U0001D519',\n-\t\"Vopf;\":                     '\\U0001D54D',\n-\t\"Vscr;\":                     '\\U0001D4B1',\n-\t\"Vvdash;\":                   '\\U000022AA',\n-\t\"Wcirc;\":                    '\\U00000174',\n-\t\"Wedge;\":                    '\\U000022C0',\n-\t\"Wfr;\":                      '\\U0001D51A',\n-\t\"Wopf;\":                     '\\U0001D54E',\n-\t\"Wscr;\":                     '\\U0001D4B2',\n-\t\"Xfr;\":                      '\\U0001D51B',\n-\t\"Xi;\":                       '\\U0000039E',\n-\t\"Xopf;\":                     '\\U0001D54F',\n-\t\"Xscr;\":                     '\\U0001D4B3',\n-\t\"YAcy;\":                     '\\U0000042F',\n-\t\"YIcy;\":                     '\\U00000407',\n-\t\"YUcy;\":                     '\\U0000042E',\n-\t\"Yacute;\":                   '\\U000000DD',\n-\t\"Ycirc;\":                    '\\U00000176',\n-\t\"Ycy;\":                      '\\U0000042B',\n-\t\"Yfr;\":                      '\\U0001D51C',\n-\t\"Yopf;\":                     '\\U0001D550',\n-\t\"Yscr;\":                     '\\U0001D4B4',\n-\t\"Yuml;\":                     '\\U00000178',\n-\t\"ZHcy;\":                     '\\U00000416',\n-\t\"Zacute;\":                   '\\U00000179',\n-\t\"Zcaron;\":                   '\\U0000017D',\n-\t\"Zcy;\":                      '\\U00000417',\n-\t\"Zdot;\":                     '\\U0000017B',\n-\t\"ZeroWidthSpace;\":           '\\U0000200B',\n-\t\"Zeta;\":                     '\\U00000396',\n-\t\"Zfr;\":                      '\\U00002128',\n-\t\"Zopf;\":                     '\\U00002124',\n-\t\"Zscr;\":                     '\\U0001D4B5',\n-\t\"aacute;\":                   '\\U000000E1',\n-\t\"abreve;\":                   '\\U00000103',\n-\t\"ac;\":                       '\\U0000223E',\n-\t\"acd;\":                      '\\U0000223F',\n-\t\"acirc;\":                    '\\U000000E2',\n-\t\"acute;\":                    '\\U000000B4',\n-\t\"acy;\":                      '\\U00000430',\n-\t\"aelig;\":                    '\\U000000E6',\n-\t\"af;\":                       '\\U00002061',\n-\t\"afr;\":                      '\\U0001D51E',\n-\t\"agrave;\":                   '\\U000000E0',\n-\t\"alefsym;\":                  '\\U00002135',\n-\t\"aleph;\":                    '\\U00002135',\n-\t\"alpha;\":                    '\\U000003B1',\n-\t\"amacr;\":                    '\\U00000101',\n-\t\"amalg;\":                    '\\U00002A3F',\n-\t\"amp;\":                      '\\U00000026',\n-\t\"and;\":                      '\\U00002227',\n-\t\"andand;\":                   '\\U00002A55',\n-\t\"andd;\":                     '\\U00002A5C',\n-\t\"andslope;\":                 '\\U00002A58',\n-\t\"andv;\":                     '\\U00002A5A',\n-\t\"ang;\":                      '\\U00002220',\n-\t\"ange;\":                     '\\U000029A4',\n-\t\"angle;\":                    '\\U00002220',\n-\t\"angmsd;\":                   '\\U00002221',\n-\t\"angmsdaa;\":                 '\\U000029A8',\n-\t\"angmsdab;\":                 '\\U000029A9',\n-\t\"angmsdac;\":                 '\\U000029AA',\n-\t\"angmsdad;\":                 '\\U000029AB',\n-\t\"angmsdae;\":                 '\\U000029AC',\n-\t\"angmsdaf;\":                 '\\U000029AD',\n-\t\"angmsdag;\":                 '\\U000029AE',\n-\t\"angmsdah;\":                 '\\U000029AF',\n-\t\"angrt;\":                    '\\U0000221F',\n-\t\"angrtvb;\":                  '\\U000022BE',\n-\t\"angrtvbd;\":                 '\\U0000299D',\n-\t\"angsph;\":                   '\\U00002222',\n-\t\"angst;\":                    '\\U000000C5',\n-\t\"angzarr;\":                  '\\U0000237C',\n-\t\"aogon;\":                    '\\U00000105',\n-\t\"aopf;\":                     '\\U0001D552',\n-\t\"ap;\":                       '\\U00002248',\n-\t\"apE;\":                      '\\U00002A70',\n-\t\"apacir;\":                   '\\U00002A6F',\n-\t\"ape;\":                      '\\U0000224A',\n-\t\"apid;\":                     '\\U0000224B',\n-\t\"apos;\":                     '\\U00000027',\n-\t\"approx;\":                   '\\U00002248',\n-\t\"approxeq;\":                 '\\U0000224A',\n-\t\"aring;\":                    '\\U000000E5',\n-\t\"ascr;\":                     '\\U0001D4B6',\n-\t\"ast;\":                      '\\U0000002A',\n-\t\"asymp;\":                    '\\U00002248',\n-\t\"asympeq;\":                  '\\U0000224D',\n-\t\"atilde;\":                   '\\U000000E3',\n-\t\"auml;\":                     '\\U000000E4',\n-\t\"awconint;\":                 '\\U00002233',\n-\t\"awint;\":                    '\\U00002A11',\n-\t\"bNot;\":                     '\\U00002AED',\n-\t\"backcong;\":                 '\\U0000224C',\n-\t\"backepsilon;\":              '\\U000003F6',\n-\t\"backprime;\":                '\\U00002035',\n-\t\"backsim;\":                  '\\U0000223D',\n-\t\"backsimeq;\":                '\\U000022CD',\n-\t\"barvee;\":                   '\\U000022BD',\n-\t\"barwed;\":                   '\\U00002305',\n-\t\"barwedge;\":                 '\\U00002305',\n-\t\"bbrk;\":                     '\\U000023B5',\n-\t\"bbrktbrk;\":                 '\\U000023B6',\n-\t\"bcong;\":                    '\\U0000224C',\n-\t\"bcy;\":                      '\\U00000431',\n-\t\"bdquo;\":                    '\\U0000201E',\n-\t\"becaus;\":                   '\\U00002235',\n-\t\"because;\":                  '\\U00002235',\n-\t\"bemptyv;\":                  '\\U000029B0',\n-\t\"bepsi;\":                    '\\U000003F6',\n-\t\"bernou;\":                   '\\U0000212C',\n-\t\"beta;\":                     '\\U000003B2',\n-\t\"beth;\":                     '\\U00002136',\n-\t\"between;\":                  '\\U0000226C',\n-\t\"bfr;\":                      '\\U0001D51F',\n-\t\"bigcap;\":                   '\\U000022C2',\n-\t\"bigcirc;\":                  '\\U000025EF',\n-\t\"bigcup;\":                   '\\U000022C3',\n-\t\"bigodot;\":                  '\\U00002A00',\n-\t\"bigoplus;\":                 '\\U00002A01',\n-\t\"bigotimes;\":                '\\U00002A02',\n-\t\"bigsqcup;\":                 '\\U00002A06',\n-\t\"bigstar;\":                  '\\U00002605',\n-\t\"bigtriangledown;\":          '\\U000025BD',\n-\t\"bigtriangleup;\":            '\\U000025B3',\n-\t\"biguplus;\":                 '\\U00002A04',\n-\t\"bigvee;\":                   '\\U000022C1',\n-\t\"bigwedge;\":                 '\\U000022C0',\n-\t\"bkarow;\":                   '\\U0000290D',\n-\t\"blacklozenge;\":             '\\U000029EB',\n-\t\"blacksquare;\":              '\\U000025AA',\n-\t\"blacktriangle;\":            '\\U000025B4',\n-\t\"blacktriangledown;\":        '\\U000025BE',\n-\t\"blacktriangleleft;\":        '\\U000025C2',\n-\t\"blacktriangleright;\":       '\\U000025B8',\n-\t\"blank;\":                    '\\U00002423',\n-\t\"blk12;\":                    '\\U00002592',\n-\t\"blk14;\":                    '\\U00002591',\n-\t\"blk34;\":                    '\\U00002593',\n-\t\"block;\":                    '\\U00002588',\n-\t\"bnot;\":                     '\\U00002310',\n-\t\"bopf;\":                     '\\U0001D553',\n-\t\"bot;\":                      '\\U000022A5',\n-\t\"bottom;\":                   '\\U000022A5',\n-\t\"bowtie;\":                   '\\U000022C8',\n-\t\"boxDL;\":                    '\\U00002557',\n-\t\"boxDR;\":                    '\\U00002554',\n-\t\"boxDl;\":                    '\\U00002556',\n-\t\"boxDr;\":                    '\\U00002553',\n-\t\"boxH;\":                     '\\U00002550',\n-\t\"boxHD;\":                    '\\U00002566',\n-\t\"boxHU;\":                    '\\U00002569',\n-\t\"boxHd;\":                    '\\U00002564',\n-\t\"boxHu;\":                    '\\U00002567',\n-\t\"boxUL;\":                    '\\U0000255D',\n-\t\"boxUR;\":                    '\\U0000255A',\n-\t\"boxUl;\":                    '\\U0000255C',\n-\t\"boxUr;\":                    '\\U00002559',\n-\t\"boxV;\":                     '\\U00002551',\n-\t\"boxVH;\":                    '\\U0000256C',\n-\t\"boxVL;\":                    '\\U00002563',\n-\t\"boxVR;\":                    '\\U00002560',\n-\t\"boxVh;\":                    '\\U0000256B',\n-\t\"boxVl;\":                    '\\U00002562',\n-\t\"boxVr;\":                    '\\U0000255F',\n-\t\"boxbox;\":                   '\\U000029C9',\n-\t\"boxdL;\":                    '\\U00002555',\n-\t\"boxdR;\":                    '\\U00002552',\n-\t\"boxdl;\":                    '\\U00002510',\n-\t\"boxdr;\":                    '\\U0000250C',\n-\t\"boxh;\":                     '\\U00002500',\n-\t\"boxhD;\":                    '\\U00002565',\n-\t\"boxhU;\":                    '\\U00002568',\n-\t\"boxhd;\":                    '\\U0000252C',\n-\t\"boxhu;\":                    '\\U00002534',\n-\t\"boxminus;\":                 '\\U0000229F',\n-\t\"boxplus;\":                  '\\U0000229E',\n-\t\"boxtimes;\":                 '\\U000022A0',\n-\t\"boxuL;\":                    '\\U0000255B',\n-\t\"boxuR;\":                    '\\U00002558',\n-\t\"boxul;\":                    '\\U00002518',\n-\t\"boxur;\":                    '\\U00002514',\n-\t\"boxv;\":                     '\\U00002502',\n-\t\"boxvH;\":                    '\\U0000256A',\n-\t\"boxvL;\":                    '\\U00002561',\n-\t\"boxvR;\":                    '\\U0000255E',\n-\t\"boxvh;\":                    '\\U0000253C',\n-\t\"boxvl;\":                    '\\U00002524',\n-\t\"boxvr;\":                    '\\U0000251C',\n-\t\"bprime;\":                   '\\U00002035',\n-\t\"breve;\":                    '\\U000002D8',\n-\t\"brvbar;\":                   '\\U000000A6',\n-\t\"bscr;\":                     '\\U0001D4B7',\n-\t\"bsemi;\":                    '\\U0000204F',\n-\t\"bsim;\":                     '\\U0000223D',\n-\t\"bsime;\":                    '\\U000022CD',\n-\t\"bsol;\":                     '\\U0000005C',\n-\t\"bsolb;\":                    '\\U000029C5',\n-\t\"bsolhsub;\":                 '\\U000027C8',\n-\t\"bull;\":                     '\\U00002022',\n-\t\"bullet;\":                   '\\U00002022',\n-\t\"bump;\":                     '\\U0000224E',\n-\t\"bumpE;\":                    '\\U00002AAE',\n-\t\"bumpe;\":                    '\\U0000224F',\n-\t\"bumpeq;\":                   '\\U0000224F',\n-\t\"cacute;\":                   '\\U00000107',\n-\t\"cap;\":                      '\\U00002229',\n-\t\"capand;\":                   '\\U00002A44',\n-\t\"capbrcup;\":                 '\\U00002A49',\n-\t\"capcap;\":                   '\\U00002A4B',\n-\t\"capcup;\":                   '\\U00002A47',\n-\t\"capdot;\":                   '\\U00002A40',\n-\t\"caret;\":                    '\\U00002041',\n-\t\"caron;\":                    '\\U000002C7',\n-\t\"ccaps;\":                    '\\U00002A4D',\n-\t\"ccaron;\":                   '\\U0000010D',\n-\t\"ccedil;\":                   '\\U000000E7',\n-\t\"ccirc;\":                    '\\U00000109',\n-\t\"ccups;\":                    '\\U00002A4C',\n-\t\"ccupssm;\":                  '\\U00002A50',\n-\t\"cdot;\":                     '\\U0000010B',\n-\t\"cedil;\":                    '\\U000000B8',\n-\t\"cemptyv;\":                  '\\U000029B2',\n-\t\"cent;\":                     '\\U000000A2',\n-\t\"centerdot;\":                '\\U000000B7',\n-\t\"cfr;\":                      '\\U0001D520',\n-\t\"chcy;\":                     '\\U00000447',\n-\t\"check;\":                    '\\U00002713',\n-\t\"checkmark;\":                '\\U00002713',\n-\t\"chi;\":                      '\\U000003C7',\n-\t\"cir;\":                      '\\U000025CB',\n-\t\"cirE;\":                     '\\U000029C3',\n-\t\"circ;\":                     '\\U000002C6',\n-\t\"circeq;\":                   '\\U00002257',\n-\t\"circlearrowleft;\":          '\\U000021BA',\n-\t\"circlearrowright;\":         '\\U000021BB',\n-\t\"circledR;\":                 '\\U000000AE',\n-\t\"circledS;\":                 '\\U000024C8',\n-\t\"circledast;\":               '\\U0000229B',\n-\t\"circledcirc;\":              '\\U0000229A',\n-\t\"circleddash;\":              '\\U0000229D',\n-\t\"cire;\":                     '\\U00002257',\n-\t\"cirfnint;\":                 '\\U00002A10',\n-\t\"cirmid;\":                   '\\U00002AEF',\n-\t\"cirscir;\":                  '\\U000029C2',\n-\t\"clubs;\":                    '\\U00002663',\n-\t\"clubsuit;\":                 '\\U00002663',\n-\t\"colon;\":                    '\\U0000003A',\n-\t\"colone;\":                   '\\U00002254',\n-\t\"coloneq;\":                  '\\U00002254',\n-\t\"comma;\":                    '\\U0000002C',\n-\t\"commat;\":                   '\\U00000040',\n-\t\"comp;\":                     '\\U00002201',\n-\t\"compfn;\":                   '\\U00002218',\n-\t\"complement;\":               '\\U00002201',\n-\t\"complexes;\":                '\\U00002102',\n-\t\"cong;\":                     '\\U00002245',\n-\t\"congdot;\":                  '\\U00002A6D',\n-\t\"conint;\":                   '\\U0000222E',\n-\t\"copf;\":                     '\\U0001D554',\n-\t\"coprod;\":                   '\\U00002210',\n-\t\"copy;\":                     '\\U000000A9',\n-\t\"copysr;\":                   '\\U00002117',\n-\t\"crarr;\":                    '\\U000021B5',\n-\t\"cross;\":                    '\\U00002717',\n-\t\"cscr;\":                     '\\U0001D4B8',\n-\t\"csub;\":                     '\\U00002ACF',\n-\t\"csube;\":                    '\\U00002AD1',\n-\t\"csup;\":                     '\\U00002AD0',\n-\t\"csupe;\":                    '\\U00002AD2',\n-\t\"ctdot;\":                    '\\U000022EF',\n-\t\"cudarrl;\":                  '\\U00002938',\n-\t\"cudarrr;\":                  '\\U00002935',\n-\t\"cuepr;\":                    '\\U000022DE',\n-\t\"cuesc;\":                    '\\U000022DF',\n-\t\"cularr;\":                   '\\U000021B6',\n-\t\"cularrp;\":                  '\\U0000293D',\n-\t\"cup;\":                      '\\U0000222A',\n-\t\"cupbrcap;\":                 '\\U00002A48',\n-\t\"cupcap;\":                   '\\U00002A46',\n-\t\"cupcup;\":                   '\\U00002A4A',\n-\t\"cupdot;\":                   '\\U0000228D',\n-\t\"cupor;\":                    '\\U00002A45',\n-\t\"curarr;\":                   '\\U000021B7',\n-\t\"curarrm;\":                  '\\U0000293C',\n-\t\"curlyeqprec;\":              '\\U000022DE',\n-\t\"curlyeqsucc;\":              '\\U000022DF',\n-\t\"curlyvee;\":                 '\\U000022CE',\n-\t\"curlywedge;\":               '\\U000022CF',\n-\t\"curren;\":                   '\\U000000A4',\n-\t\"curvearrowleft;\":           '\\U000021B6',\n-\t\"curvearrowright;\":          '\\U000021B7',\n-\t\"cuvee;\":                    '\\U000022CE',\n-\t\"cuwed;\":                    '\\U000022CF',\n-\t\"cwconint;\":                 '\\U00002232',\n-\t\"cwint;\":                    '\\U00002231',\n-\t\"cylcty;\":                   '\\U0000232D',\n-\t\"dArr;\":                     '\\U000021D3',\n-\t\"dHar;\":                     '\\U00002965',\n-\t\"dagger;\":                   '\\U00002020',\n-\t\"daleth;\":                   '\\U00002138',\n-\t\"darr;\":                     '\\U00002193',\n-\t\"dash;\":                     '\\U00002010',\n-\t\"dashv;\":                    '\\U000022A3',\n-\t\"dbkarow;\":                  '\\U0000290F',\n-\t\"dblac;\":                    '\\U000002DD',\n-\t\"dcaron;\":                   '\\U0000010F',\n-\t\"dcy;\":                      '\\U00000434',\n-\t\"dd;\":                       '\\U00002146',\n-\t\"ddagger;\":                  '\\U00002021',\n-\t\"ddarr;\":                    '\\U000021CA',\n-\t\"ddotseq;\":                  '\\U00002A77',\n-\t\"deg;\":                      '\\U000000B0',\n-\t\"delta;\":                    '\\U000003B4',\n-\t\"demptyv;\":                  '\\U000029B1',\n-\t\"dfisht;\":                   '\\U0000297F',\n-\t\"dfr;\":                      '\\U0001D521',\n-\t\"dharl;\":                    '\\U000021C3',\n-\t\"dharr;\":                    '\\U000021C2',\n-\t\"diam;\":                     '\\U000022C4',\n-\t\"diamond;\":                  '\\U000022C4',\n-\t\"diamondsuit;\":              '\\U00002666',\n-\t\"diams;\":                    '\\U00002666',\n-\t\"die;\":                      '\\U000000A8',\n-\t\"digamma;\":                  '\\U000003DD',\n-\t\"disin;\":                    '\\U000022F2',\n-\t\"div;\":                      '\\U000000F7',\n-\t\"divide;\":                   '\\U000000F7',\n-\t\"divideontimes;\":            '\\U000022C7',\n-\t\"divonx;\":                   '\\U000022C7',\n-\t\"djcy;\":                     '\\U00000452',\n-\t\"dlcorn;\":                   '\\U0000231E',\n-\t\"dlcrop;\":                   '\\U0000230D',\n-\t\"dollar;\":                   '\\U00000024',\n-\t\"dopf;\":                     '\\U0001D555',\n-\t\"dot;\":                      '\\U000002D9',\n-\t\"doteq;\":                    '\\U00002250',\n-\t\"doteqdot;\":                 '\\U00002251',\n-\t\"dotminus;\":                 '\\U00002238',\n-\t\"dotplus;\":                  '\\U00002214',\n-\t\"dotsquare;\":                '\\U000022A1',\n-\t\"doublebarwedge;\":           '\\U00002306',\n-\t\"downarrow;\":                '\\U00002193',\n-\t\"downdownarrows;\":           '\\U000021CA',\n-\t\"downharpoonleft;\":          '\\U000021C3',\n-\t\"downharpoonright;\":         '\\U000021C2',\n-\t\"drbkarow;\":                 '\\U00002910',\n-\t\"drcorn;\":                   '\\U0000231F',\n-\t\"drcrop;\":                   '\\U0000230C',\n-\t\"dscr;\":                     '\\U0001D4B9',\n-\t\"dscy;\":                     '\\U00000455',\n-\t\"dsol;\":                     '\\U000029F6',\n-\t\"dstrok;\":                   '\\U00000111',\n-\t\"dtdot;\":                    '\\U000022F1',\n-\t\"dtri;\":                     '\\U000025BF',\n-\t\"dtrif;\":                    '\\U000025BE',\n-\t\"duarr;\":                    '\\U000021F5',\n-\t\"duhar;\":                    '\\U0000296F',\n-\t\"dwangle;\":                  '\\U000029A6',\n-\t\"dzcy;\":                     '\\U0000045F',\n-\t\"dzigrarr;\":                 '\\U000027FF',\n-\t\"eDDot;\":                    '\\U00002A77',\n-\t\"eDot;\":                     '\\U00002251',\n-\t\"eacute;\":                   '\\U000000E9',\n-\t\"easter;\":                   '\\U00002A6E',\n-\t\"ecaron;\":                   '\\U0000011B',\n-\t\"ecir;\":                     '\\U00002256',\n-\t\"ecirc;\":                    '\\U000000EA',\n-\t\"ecolon;\":                   '\\U00002255',\n-\t\"ecy;\":                      '\\U0000044D',\n-\t\"edot;\":                     '\\U00000117',\n-\t\"ee;\":                       '\\U00002147',\n-\t\"efDot;\":                    '\\U00002252',\n-\t\"efr;\":                      '\\U0001D522',\n-\t\"eg;\":                       '\\U00002A9A',\n-\t\"egrave;\":                   '\\U000000E8',\n-\t\"egs;\":                      '\\U00002A96',\n-\t\"egsdot;\":                   '\\U00002A98',\n-\t\"el;\":                       '\\U00002A99',\n-\t\"elinters;\":                 '\\U000023E7',\n-\t\"ell;\":                      '\\U00002113',\n-\t\"els;\":                      '\\U00002A95',\n-\t\"elsdot;\":                   '\\U00002A97',\n-\t\"emacr;\":                    '\\U00000113',\n-\t\"empty;\":                    '\\U00002205',\n-\t\"emptyset;\":                 '\\U00002205',\n-\t\"emptyv;\":                   '\\U00002205',\n-\t\"emsp;\":                     '\\U00002003',\n-\t\"emsp13;\":                   '\\U00002004',\n-\t\"emsp14;\":                   '\\U00002005',\n-\t\"eng;\":                      '\\U0000014B',\n-\t\"ensp;\":                     '\\U00002002',\n-\t\"eogon;\":                    '\\U00000119',\n-\t\"eopf;\":                     '\\U0001D556',\n-\t\"epar;\":                     '\\U000022D5',\n-\t\"eparsl;\":                   '\\U000029E3',\n-\t\"eplus;\":                    '\\U00002A71',\n-\t\"epsi;\":                     '\\U000003B5',\n-\t\"epsilon;\":                  '\\U000003B5',\n-\t\"epsiv;\":                    '\\U000003F5',\n-\t\"eqcirc;\":                   '\\U00002256',\n-\t\"eqcolon;\":                  '\\U00002255',\n-\t\"eqsim;\":                    '\\U00002242',\n-\t\"eqslantgtr;\":               '\\U00002A96',\n-\t\"eqslantless;\":              '\\U00002A95',\n-\t\"equals;\":                   '\\U0000003D',\n-\t\"equest;\":                   '\\U0000225F',\n-\t\"equiv;\":                    '\\U00002261',\n-\t\"equivDD;\":                  '\\U00002A78',\n-\t\"eqvparsl;\":                 '\\U000029E5',\n-\t\"erDot;\":                    '\\U00002253',\n-\t\"erarr;\":                    '\\U00002971',\n-\t\"escr;\":                     '\\U0000212F',\n-\t\"esdot;\":                    '\\U00002250',\n-\t\"esim;\":                     '\\U00002242',\n-\t\"eta;\":                      '\\U000003B7',\n-\t\"eth;\":                      '\\U000000F0',\n-\t\"euml;\":                     '\\U000000EB',\n-\t\"euro;\":                     '\\U000020AC',\n-\t\"excl;\":                     '\\U00000021',\n-\t\"exist;\":                    '\\U00002203',\n-\t\"expectation;\":              '\\U00002130',\n-\t\"exponentiale;\":             '\\U00002147',\n-\t\"fallingdotseq;\":            '\\U00002252',\n-\t\"fcy;\":                      '\\U00000444',\n-\t\"female;\":                   '\\U00002640',\n-\t\"ffilig;\":                   '\\U0000FB03',\n-\t\"fflig;\":                    '\\U0000FB00',\n-\t\"ffllig;\":                   '\\U0000FB04',\n-\t\"ffr;\":                      '\\U0001D523',\n-\t\"filig;\":                    '\\U0000FB01',\n-\t\"flat;\":                     '\\U0000266D',\n-\t\"fllig;\":                    '\\U0000FB02',\n-\t\"fltns;\":                    '\\U000025B1',\n-\t\"fnof;\":                     '\\U00000192',\n-\t\"fopf;\":                     '\\U0001D557',\n-\t\"forall;\":                   '\\U00002200',\n-\t\"fork;\":                     '\\U000022D4',\n-\t\"forkv;\":                    '\\U00002AD9',\n-\t\"fpartint;\":                 '\\U00002A0D',\n-\t\"frac12;\":                   '\\U000000BD',\n-\t\"frac13;\":                   '\\U00002153',\n-\t\"frac14;\":                   '\\U000000BC',\n-\t\"frac15;\":                   '\\U00002155',\n-\t\"frac16;\":                   '\\U00002159',\n-\t\"frac18;\":                   '\\U0000215B',\n-\t\"frac23;\":                   '\\U00002154',\n-\t\"frac25;\":                   '\\U00002156',\n-\t\"frac34;\":                   '\\U000000BE',\n-\t\"frac35;\":                   '\\U00002157',\n-\t\"frac38;\":                   '\\U0000215C',\n-\t\"frac45;\":                   '\\U00002158',\n-\t\"frac56;\":                   '\\U0000215A',\n-\t\"frac58;\":                   '\\U0000215D',\n-\t\"frac78;\":                   '\\U0000215E',\n-\t\"frasl;\":                    '\\U00002044',\n-\t\"frown;\":                    '\\U00002322',\n-\t\"fscr;\":                     '\\U0001D4BB',\n-\t\"gE;\":                       '\\U00002267',\n-\t\"gEl;\":                      '\\U00002A8C',\n-\t\"gacute;\":                   '\\U000001F5',\n-\t\"gamma;\":                    '\\U000003B3',\n-\t\"gammad;\":                   '\\U000003DD',\n-\t\"gap;\":                      '\\U00002A86',\n-\t\"gbreve;\":                   '\\U0000011F',\n-\t\"gcirc;\":                    '\\U0000011D',\n-\t\"gcy;\":                      '\\U00000433',\n-\t\"gdot;\":                     '\\U00000121',\n-\t\"ge;\":                       '\\U00002265',\n-\t\"gel;\":                      '\\U000022DB',\n-\t\"geq;\":                      '\\U00002265',\n-\t\"geqq;\":                     '\\U00002267',\n-\t\"geqslant;\":                 '\\U00002A7E',\n-\t\"ges;\":                      '\\U00002A7E',\n-\t\"gescc;\":                    '\\U00002AA9',\n-\t\"gesdot;\":                   '\\U00002A80',\n-\t\"gesdoto;\":                  '\\U00002A82',\n-\t\"gesdotol;\":                 '\\U00002A84',\n-\t\"gesles;\":                   '\\U00002A94',\n-\t\"gfr;\":                      '\\U0001D524',\n-\t\"gg;\":                       '\\U0000226B',\n-\t\"ggg;\":                      '\\U000022D9',\n-\t\"gimel;\":                    '\\U00002137',\n-\t\"gjcy;\":                     '\\U00000453',\n-\t\"gl;\":                       '\\U00002277',\n-\t\"glE;\":                      '\\U00002A92',\n-\t\"gla;\":                      '\\U00002AA5',\n-\t\"glj;\":                      '\\U00002AA4',\n-\t\"gnE;\":                      '\\U00002269',\n-\t\"gnap;\":                     '\\U00002A8A',\n-\t\"gnapprox;\":                 '\\U00002A8A',\n-\t\"gne;\":                      '\\U00002A88',\n-\t\"gneq;\":                     '\\U00002A88',\n-\t\"gneqq;\":                    '\\U00002269',\n-\t\"gnsim;\":                    '\\U000022E7',\n-\t\"gopf;\":                     '\\U0001D558',\n-\t\"grave;\":                    '\\U00000060',\n-\t\"gscr;\":                     '\\U0000210A',\n-\t\"gsim;\":                     '\\U00002273',\n-\t\"gsime;\":                    '\\U00002A8E',\n-\t\"gsiml;\":                    '\\U00002A90',\n-\t\"gt;\":                       '\\U0000003E',\n-\t\"gtcc;\":                     '\\U00002AA7',\n-\t\"gtcir;\":                    '\\U00002A7A',\n-\t\"gtdot;\":                    '\\U000022D7',\n-\t\"gtlPar;\":                   '\\U00002995',\n-\t\"gtquest;\":                  '\\U00002A7C',\n-\t\"gtrapprox;\":                '\\U00002A86',\n-\t\"gtrarr;\":                   '\\U00002978',\n-\t\"gtrdot;\":                   '\\U000022D7',\n-\t\"gtreqless;\":                '\\U000022DB',\n-\t\"gtreqqless;\":               '\\U00002A8C',\n-\t\"gtrless;\":                  '\\U00002277',\n-\t\"gtrsim;\":                   '\\U00002273',\n-\t\"hArr;\":                     '\\U000021D4',\n-\t\"hairsp;\":                   '\\U0000200A',\n-\t\"half;\":                     '\\U000000BD',\n-\t\"hamilt;\":                   '\\U0000210B',\n-\t\"hardcy;\":                   '\\U0000044A',\n-\t\"harr;\":                     '\\U00002194',\n-\t\"harrcir;\":                  '\\U00002948',\n-\t\"harrw;\":                    '\\U000021AD',\n-\t\"hbar;\":                     '\\U0000210F',\n-\t\"hcirc;\":                    '\\U00000125',\n-\t\"hearts;\":                   '\\U00002665',\n-\t\"heartsuit;\":                '\\U00002665',\n-\t\"hellip;\":                   '\\U00002026',\n-\t\"hercon;\":                   '\\U000022B9',\n-\t\"hfr;\":                      '\\U0001D525',\n-\t\"hksearow;\":                 '\\U00002925',\n-\t\"hkswarow;\":                 '\\U00002926',\n-\t\"hoarr;\":                    '\\U000021FF',\n-\t\"homtht;\":                   '\\U0000223B',\n-\t\"hookleftarrow;\":            '\\U000021A9',\n-\t\"hookrightarrow;\":           '\\U000021AA',\n-\t\"hopf;\":                     '\\U0001D559',\n-\t\"horbar;\":                   '\\U00002015',\n-\t\"hscr;\":                     '\\U0001D4BD',\n-\t\"hslash;\":                   '\\U0000210F',\n-\t\"hstrok;\":                   '\\U00000127',\n-\t\"hybull;\":                   '\\U00002043',\n-\t\"hyphen;\":                   '\\U00002010',\n-\t\"iacute;\":                   '\\U000000ED',\n-\t\"ic;\":                       '\\U00002063',\n-\t\"icirc;\":                    '\\U000000EE',\n-\t\"icy;\":                      '\\U00000438',\n-\t\"iecy;\":                     '\\U00000435',\n-\t\"iexcl;\":                    '\\U000000A1',\n-\t\"iff;\":                      '\\U000021D4',\n-\t\"ifr;\":                      '\\U0001D526',\n-\t\"igrave;\":                   '\\U000000EC',\n-\t\"ii;\":                       '\\U00002148',\n-\t\"iiiint;\":                   '\\U00002A0C',\n-\t\"iiint;\":                    '\\U0000222D',\n-\t\"iinfin;\":                   '\\U000029DC',\n-\t\"iiota;\":                    '\\U00002129',\n-\t\"ijlig;\":                    '\\U00000133',\n-\t\"imacr;\":                    '\\U0000012B',\n-\t\"image;\":                    '\\U00002111',\n-\t\"imagline;\":                 '\\U00002110',\n-\t\"imagpart;\":                 '\\U00002111',\n-\t\"imath;\":                    '\\U00000131',\n-\t\"imof;\":                     '\\U000022B7',\n-\t\"imped;\":                    '\\U000001B5',\n-\t\"in;\":                       '\\U00002208',\n-\t\"incare;\":                   '\\U00002105',\n-\t\"infin;\":                    '\\U0000221E',\n-\t\"infintie;\":                 '\\U000029DD',\n-\t\"inodot;\":                   '\\U00000131',\n-\t\"int;\":                      '\\U0000222B',\n-\t\"intcal;\":                   '\\U000022BA',\n-\t\"integers;\":                 '\\U00002124',\n-\t\"intercal;\":                 '\\U000022BA',\n-\t\"intlarhk;\":                 '\\U00002A17',\n-\t\"intprod;\":                  '\\U00002A3C',\n-\t\"iocy;\":                     '\\U00000451',\n-\t\"iogon;\":                    '\\U0000012F',\n-\t\"iopf;\":                     '\\U0001D55A',\n-\t\"iota;\":                     '\\U000003B9',\n-\t\"iprod;\":                    '\\U00002A3C',\n-\t\"iquest;\":                   '\\U000000BF',\n-\t\"iscr;\":                     '\\U0001D4BE',\n-\t\"isin;\":                     '\\U00002208',\n-\t\"isinE;\":                    '\\U000022F9',\n-\t\"isindot;\":                  '\\U000022F5',\n-\t\"isins;\":                    '\\U000022F4',\n-\t\"isinsv;\":                   '\\U000022F3',\n-\t\"isinv;\":                    '\\U00002208',\n-\t\"it;\":                       '\\U00002062',\n-\t\"itilde;\":                   '\\U00000129',\n-\t\"iukcy;\":                    '\\U00000456',\n-\t\"iuml;\":                     '\\U000000EF',\n-\t\"jcirc;\":                    '\\U00000135',\n-\t\"jcy;\":                      '\\U00000439',\n-\t\"jfr;\":                      '\\U0001D527',\n-\t\"jmath;\":                    '\\U00000237',\n-\t\"jopf;\":                     '\\U0001D55B',\n-\t\"jscr;\":                     '\\U0001D4BF',\n-\t\"jsercy;\":                   '\\U00000458',\n-\t\"jukcy;\":                    '\\U00000454',\n-\t\"kappa;\":                    '\\U000003BA',\n-\t\"kappav;\":                   '\\U000003F0',\n-\t\"kcedil;\":                   '\\U00000137',\n-\t\"kcy;\":                      '\\U0000043A',\n-\t\"kfr;\":                      '\\U0001D528',\n-\t\"kgreen;\":                   '\\U00000138',\n-\t\"khcy;\":                     '\\U00000445',\n-\t\"kjcy;\":                     '\\U0000045C',\n-\t\"kopf;\":                     '\\U0001D55C',\n-\t\"kscr;\":                     '\\U0001D4C0',\n-\t\"lAarr;\":                    '\\U000021DA',\n-\t\"lArr;\":                     '\\U000021D0',\n-\t\"lAtail;\":                   '\\U0000291B',\n-\t\"lBarr;\":                    '\\U0000290E',\n-\t\"lE;\":                       '\\U00002266',\n-\t\"lEg;\":                      '\\U00002A8B',\n-\t\"lHar;\":                     '\\U00002962',\n-\t\"lacute;\":                   '\\U0000013A',\n-\t\"laemptyv;\":                 '\\U000029B4',\n-\t\"lagran;\":                   '\\U00002112',\n-\t\"lambda;\":                   '\\U000003BB',\n-\t\"lang;\":                     '\\U000027E8',\n-\t\"langd;\":                    '\\U00002991',\n-\t\"langle;\":                   '\\U000027E8',\n-\t\"lap;\":                      '\\U00002A85',\n-\t\"laquo;\":                    '\\U000000AB',\n-\t\"larr;\":                     '\\U00002190',\n-\t\"larrb;\":                    '\\U000021E4',\n-\t\"larrbfs;\":                  '\\U0000291F',\n-\t\"larrfs;\":                   '\\U0000291D',\n-\t\"larrhk;\":                   '\\U000021A9',\n-\t\"larrlp;\":                   '\\U000021AB',\n-\t\"larrpl;\":                   '\\U00002939',\n-\t\"larrsim;\":                  '\\U00002973',\n-\t\"larrtl;\":                   '\\U000021A2',\n-\t\"lat;\":                      '\\U00002AAB',\n-\t\"latail;\":                   '\\U00002919',\n-\t\"late;\":                     '\\U00002AAD',\n-\t\"lbarr;\":                    '\\U0000290C',\n-\t\"lbbrk;\":                    '\\U00002772',\n-\t\"lbrace;\":                   '\\U0000007B',\n-\t\"lbrack;\":                   '\\U0000005B',\n-\t\"lbrke;\":                    '\\U0000298B',\n-\t\"lbrksld;\":                  '\\U0000298F',\n-\t\"lbrkslu;\":                  '\\U0000298D',\n-\t\"lcaron;\":                   '\\U0000013E',\n-\t\"lcedil;\":                   '\\U0000013C',\n-\t\"lceil;\":                    '\\U00002308',\n-\t\"lcub;\":                     '\\U0000007B',\n-\t\"lcy;\":                      '\\U0000043B',\n-\t\"ldca;\":                     '\\U00002936',\n-\t\"ldquo;\":                    '\\U0000201C',\n-\t\"ldquor;\":                   '\\U0000201E',\n-\t\"ldrdhar;\":                  '\\U00002967',\n-\t\"ldrushar;\":                 '\\U0000294B',\n-\t\"ldsh;\":                     '\\U000021B2',\n-\t\"le;\":                       '\\U00002264',\n-\t\"leftarrow;\":                '\\U00002190',\n-\t\"leftarrowtail;\":            '\\U000021A2',\n-\t\"leftharpoondown;\":          '\\U000021BD',\n-\t\"leftharpoonup;\":            '\\U000021BC',\n-\t\"leftleftarrows;\":           '\\U000021C7',\n-\t\"leftrightarrow;\":           '\\U00002194',\n-\t\"leftrightarrows;\":          '\\U000021C6',\n-\t\"leftrightharpoons;\":        '\\U000021CB',\n-\t\"leftrightsquigarrow;\":      '\\U000021AD',\n-\t\"leftthreetimes;\":           '\\U000022CB',\n-\t\"leg;\":                      '\\U000022DA',\n-\t\"leq;\":                      '\\U00002264',\n-\t\"leqq;\":                     '\\U00002266',\n-\t\"leqslant;\":                 '\\U00002A7D',\n-\t\"les;\":                      '\\U00002A7D',\n-\t\"lescc;\":                    '\\U00002AA8',\n-\t\"lesdot;\":                   '\\U00002A7F',\n-\t\"lesdoto;\":                  '\\U00002A81',\n-\t\"lesdotor;\":                 '\\U00002A83',\n-\t\"lesges;\":                   '\\U00002A93',\n-\t\"lessapprox;\":               '\\U00002A85',\n-\t\"lessdot;\":                  '\\U000022D6',\n-\t\"lesseqgtr;\":                '\\U000022DA',\n-\t\"lesseqqgtr;\":               '\\U00002A8B',\n-\t\"lessgtr;\":                  '\\U00002276',\n-\t\"lesssim;\":                  '\\U00002272',\n-\t\"lfisht;\":                   '\\U0000297C',\n-\t\"lfloor;\":                   '\\U0000230A',\n-\t\"lfr;\":                      '\\U0001D529',\n-\t\"lg;\":                       '\\U00002276',\n-\t\"lgE;\":                      '\\U00002A91',\n-\t\"lhard;\":                    '\\U000021BD',\n-\t\"lharu;\":                    '\\U000021BC',\n-\t\"lharul;\":                   '\\U0000296A',\n-\t\"lhblk;\":                    '\\U00002584',\n-\t\"ljcy;\":                     '\\U00000459',\n-\t\"ll;\":                       '\\U0000226A',\n-\t\"llarr;\":                    '\\U000021C7',\n-\t\"llcorner;\":                 '\\U0000231E',\n-\t\"llhard;\":                   '\\U0000296B',\n-\t\"lltri;\":                    '\\U000025FA',\n-\t\"lmidot;\":                   '\\U00000140',\n-\t\"lmoust;\":                   '\\U000023B0',\n-\t\"lmoustache;\":               '\\U000023B0',\n-\t\"lnE;\":                      '\\U00002268',\n-\t\"lnap;\":                     '\\U00002A89',\n-\t\"lnapprox;\":                 '\\U00002A89',\n-\t\"lne;\":                      '\\U00002A87',\n-\t\"lneq;\":                     '\\U00002A87',\n-\t\"lneqq;\":                    '\\U00002268',\n-\t\"lnsim;\":                    '\\U000022E6',\n-\t\"loang;\":                    '\\U000027EC',\n-\t\"loarr;\":                    '\\U000021FD',\n-\t\"lobrk;\":                    '\\U000027E6',\n-\t\"longleftarrow;\":            '\\U000027F5',\n-\t\"longleftrightarrow;\":       '\\U000027F7',\n-\t\"longmapsto;\":               '\\U000027FC',\n-\t\"longrightarrow;\":           '\\U000027F6',\n-\t\"looparrowleft;\":            '\\U000021AB',\n-\t\"looparrowright;\":           '\\U000021AC',\n-\t\"lopar;\":                    '\\U00002985',\n-\t\"lopf;\":                     '\\U0001D55D',\n-\t\"loplus;\":                   '\\U00002A2D',\n-\t\"lotimes;\":                  '\\U00002A34',\n-\t\"lowast;\":                   '\\U00002217',\n-\t\"lowbar;\":                   '\\U0000005F',\n-\t\"loz;\":                      '\\U000025CA',\n-\t\"lozenge;\":                  '\\U000025CA',\n-\t\"lozf;\":                     '\\U000029EB',\n-\t\"lpar;\":                     '\\U00000028',\n-\t\"lparlt;\":                   '\\U00002993',\n-\t\"lrarr;\":                    '\\U000021C6',\n-\t\"lrcorner;\":                 '\\U0000231F',\n-\t\"lrhar;\":                    '\\U000021CB',\n-\t\"lrhard;\":                   '\\U0000296D',\n-\t\"lrm;\":                      '\\U0000200E',\n-\t\"lrtri;\":                    '\\U000022BF',\n-\t\"lsaquo;\":                   '\\U00002039',\n-\t\"lscr;\":                     '\\U0001D4C1',\n-\t\"lsh;\":                      '\\U000021B0',\n-\t\"lsim;\":                     '\\U00002272',\n-\t\"lsime;\":                    '\\U00002A8D',\n-\t\"lsimg;\":                    '\\U00002A8F',\n-\t\"lsqb;\":                     '\\U0000005B',\n-\t\"lsquo;\":                    '\\U00002018',\n-\t\"lsquor;\":                   '\\U0000201A',\n-\t\"lstrok;\":                   '\\U00000142',\n-\t\"lt;\":                       '\\U0000003C',\n-\t\"ltcc;\":                     '\\U00002AA6',\n-\t\"ltcir;\":                    '\\U00002A79',\n-\t\"ltdot;\":                    '\\U000022D6',\n-\t\"lthree;\":                   '\\U000022CB',\n-\t\"ltimes;\":                   '\\U000022C9',\n-\t\"ltlarr;\":                   '\\U00002976',\n-\t\"ltquest;\":                  '\\U00002A7B',\n-\t\"ltrPar;\":                   '\\U00002996',\n-\t\"ltri;\":                     '\\U000025C3',\n-\t\"ltrie;\":                    '\\U000022B4',\n-\t\"ltrif;\":                    '\\U000025C2',\n-\t\"lurdshar;\":                 '\\U0000294A',\n-\t\"luruhar;\":                  '\\U00002966',\n-\t\"mDDot;\":                    '\\U0000223A',\n-\t\"macr;\":                     '\\U000000AF',\n-\t\"male;\":                     '\\U00002642',\n-\t\"malt;\":                     '\\U00002720',\n-\t\"maltese;\":                  '\\U00002720',\n-\t\"map;\":                      '\\U000021A6',\n-\t\"mapsto;\":                   '\\U000021A6',\n-\t\"mapstodown;\":               '\\U000021A7',\n-\t\"mapstoleft;\":               '\\U000021A4',\n-\t\"mapstoup;\":                 '\\U000021A5',\n-\t\"marker;\":                   '\\U000025AE',\n-\t\"mcomma;\":                   '\\U00002A29',\n-\t\"mcy;\":                      '\\U0000043C',\n-\t\"mdash;\":                    '\\U00002014',\n-\t\"measuredangle;\":            '\\U00002221',\n-\t\"mfr;\":                      '\\U0001D52A',\n-\t\"mho;\":                      '\\U00002127',\n-\t\"micro;\":                    '\\U000000B5',\n-\t\"mid;\":                      '\\U00002223',\n-\t\"midast;\":                   '\\U0000002A',\n-\t\"midcir;\":                   '\\U00002AF0',\n-\t\"middot;\":                   '\\U000000B7',\n-\t\"minus;\":                    '\\U00002212',\n-\t\"minusb;\":                   '\\U0000229F',\n-\t\"minusd;\":                   '\\U00002238',\n-\t\"minusdu;\":                  '\\U00002A2A',\n-\t\"mlcp;\":                     '\\U00002ADB',\n-\t\"mldr;\":                     '\\U00002026',\n-\t\"mnplus;\":                   '\\U00002213',\n-\t\"models;\":                   '\\U000022A7',\n-\t\"mopf;\":                     '\\U0001D55E',\n-\t\"mp;\":                       '\\U00002213',\n-\t\"mscr;\":                     '\\U0001D4C2',\n-\t\"mstpos;\":                   '\\U0000223E',\n-\t\"mu;\":                       '\\U000003BC',\n-\t\"multimap;\":                 '\\U000022B8',\n-\t\"mumap;\":                    '\\U000022B8',\n-\t\"nLeftarrow;\":               '\\U000021CD',\n-\t\"nLeftrightarrow;\":          '\\U000021CE',\n-\t\"nRightarrow;\":              '\\U000021CF',\n-\t\"nVDash;\":                   '\\U000022AF',\n-\t\"nVdash;\":                   '\\U000022AE',\n-\t\"nabla;\":                    '\\U00002207',\n-\t\"nacute;\":                   '\\U00000144',\n-\t\"nap;\":                      '\\U00002249',\n-\t\"napos;\":                    '\\U00000149',\n-\t\"napprox;\":                  '\\U00002249',\n-\t\"natur;\":                    '\\U0000266E',\n-\t\"natural;\":                  '\\U0000266E',\n-\t\"naturals;\":                 '\\U00002115',\n-\t\"nbsp;\":                     '\\U000000A0',\n-\t\"ncap;\":                     '\\U00002A43',\n-\t\"ncaron;\":                   '\\U00000148',\n-\t\"ncedil;\":                   '\\U00000146',\n-\t\"ncong;\":                    '\\U00002247',\n-\t\"ncup;\":                     '\\U00002A42',\n-\t\"ncy;\":                      '\\U0000043D',\n-\t\"ndash;\":                    '\\U00002013',\n-\t\"ne;\":                       '\\U00002260',\n-\t\"neArr;\":                    '\\U000021D7',\n-\t\"nearhk;\":                   '\\U00002924',\n-\t\"nearr;\":                    '\\U00002197',\n-\t\"nearrow;\":                  '\\U00002197',\n-\t\"nequiv;\":                   '\\U00002262',\n-\t\"nesear;\":                   '\\U00002928',\n-\t\"nexist;\":                   '\\U00002204',\n-\t\"nexists;\":                  '\\U00002204',\n-\t\"nfr;\":                      '\\U0001D52B',\n-\t\"nge;\":                      '\\U00002271',\n-\t\"ngeq;\":                     '\\U00002271',\n-\t\"ngsim;\":                    '\\U00002275',\n-\t\"ngt;\":                      '\\U0000226F',\n-\t\"ngtr;\":                     '\\U0000226F',\n-\t\"nhArr;\":                    '\\U000021CE',\n-\t\"nharr;\":                    '\\U000021AE',\n-\t\"nhpar;\":                    '\\U00002AF2',\n-\t\"ni;\":                       '\\U0000220B',\n-\t\"nis;\":                      '\\U000022FC',\n-\t\"nisd;\":                     '\\U000022FA',\n-\t\"niv;\":                      '\\U0000220B',\n-\t\"njcy;\":                     '\\U0000045A',\n-\t\"nlArr;\":                    '\\U000021CD',\n-\t\"nlarr;\":                    '\\U0000219A',\n-\t\"nldr;\":                     '\\U00002025',\n-\t\"nle;\":                      '\\U00002270',\n-\t\"nleftarrow;\":               '\\U0000219A',\n-\t\"nleftrightarrow;\":          '\\U000021AE',\n-\t\"nleq;\":                     '\\U00002270',\n-\t\"nless;\":                    '\\U0000226E',\n-\t\"nlsim;\":                    '\\U00002274',\n-\t\"nlt;\":                      '\\U0000226E',\n-\t\"nltri;\":                    '\\U000022EA',\n-\t\"nltrie;\":                   '\\U000022EC',\n-\t\"nmid;\":                     '\\U00002224',\n-\t\"nopf;\":                     '\\U0001D55F',\n-\t\"not;\":                      '\\U000000AC',\n-\t\"notin;\":                    '\\U00002209',\n-\t\"notinva;\":                  '\\U00002209',\n-\t\"notinvb;\":                  '\\U000022F7',\n-\t\"notinvc;\":                  '\\U000022F6',\n-\t\"notni;\":                    '\\U0000220C',\n-\t\"notniva;\":                  '\\U0000220C',\n-\t\"notnivb;\":                  '\\U000022FE',\n-\t\"notnivc;\":                  '\\U000022FD',\n-\t\"npar;\":                     '\\U00002226',\n-\t\"nparallel;\":                '\\U00002226',\n-\t\"npolint;\":                  '\\U00002A14',\n-\t\"npr;\":                      '\\U00002280',\n-\t\"nprcue;\":                   '\\U000022E0',\n-\t\"nprec;\":                    '\\U00002280',\n-\t\"nrArr;\":                    '\\U000021CF',\n-\t\"nrarr;\":                    '\\U0000219B',\n-\t\"nrightarrow;\":              '\\U0000219B',\n-\t\"nrtri;\":                    '\\U000022EB',\n-\t\"nrtrie;\":                   '\\U000022ED',\n-\t\"nsc;\":                      '\\U00002281',\n-\t\"nsccue;\":                   '\\U000022E1',\n-\t\"nscr;\":                     '\\U0001D4C3',\n-\t\"nshortmid;\":                '\\U00002224',\n-\t\"nshortparallel;\":           '\\U00002226',\n-\t\"nsim;\":                     '\\U00002241',\n-\t\"nsime;\":                    '\\U00002244',\n-\t\"nsimeq;\":                   '\\U00002244',\n-\t\"nsmid;\":                    '\\U00002224',\n-\t\"nspar;\":                    '\\U00002226',\n-\t\"nsqsube;\":                  '\\U000022E2',\n-\t\"nsqsupe;\":                  '\\U000022E3',\n-\t\"nsub;\":                     '\\U00002284',\n-\t\"nsube;\":                    '\\U00002288',\n-\t\"nsubseteq;\":                '\\U00002288',\n-\t\"nsucc;\":                    '\\U00002281',\n-\t\"nsup;\":                     '\\U00002285',\n-\t\"nsupe;\":                    '\\U00002289',\n-\t\"nsupseteq;\":                '\\U00002289',\n-\t\"ntgl;\":                     '\\U00002279',\n-\t\"ntilde;\":                   '\\U000000F1',\n-\t\"ntlg;\":                     '\\U00002278',\n-\t\"ntriangleleft;\":            '\\U000022EA',\n-\t\"ntrianglelefteq;\":          '\\U000022EC',\n-\t\"ntriangleright;\":           '\\U000022EB',\n-\t\"ntrianglerighteq;\":         '\\U000022ED',\n-\t\"nu;\":                       '\\U000003BD',\n-\t\"num;\":                      '\\U00000023',\n-\t\"numero;\":                   '\\U00002116',\n-\t\"numsp;\":                    '\\U00002007',\n-\t\"nvDash;\":                   '\\U000022AD',\n-\t\"nvHarr;\":                   '\\U00002904',\n-\t\"nvdash;\":                   '\\U000022AC',\n-\t\"nvinfin;\":                  '\\U000029DE',\n-\t\"nvlArr;\":                   '\\U00002902',\n-\t\"nvrArr;\":                   '\\U00002903',\n-\t\"nwArr;\":                    '\\U000021D6',\n-\t\"nwarhk;\":                   '\\U00002923',\n-\t\"nwarr;\":                    '\\U00002196',\n-\t\"nwarrow;\":                  '\\U00002196',\n-\t\"nwnear;\":                   '\\U00002927',\n-\t\"oS;\":                       '\\U000024C8',\n-\t\"oacute;\":                   '\\U000000F3',\n-\t\"oast;\":                     '\\U0000229B',\n-\t\"ocir;\":                     '\\U0000229A',\n-\t\"ocirc;\":                    '\\U000000F4',\n-\t\"ocy;\":                      '\\U0000043E',\n-\t\"odash;\":                    '\\U0000229D',\n-\t\"odblac;\":                   '\\U00000151',\n-\t\"odiv;\":                     '\\U00002A38',\n-\t\"odot;\":                     '\\U00002299',\n-\t\"odsold;\":                   '\\U000029BC',\n-\t\"oelig;\":                    '\\U00000153',\n-\t\"ofcir;\":                    '\\U000029BF',\n-\t\"ofr;\":                      '\\U0001D52C',\n-\t\"ogon;\":                     '\\U000002DB',\n-\t\"ograve;\":                   '\\U000000F2',\n-\t\"ogt;\":                      '\\U000029C1',\n-\t\"ohbar;\":                    '\\U000029B5',\n-\t\"ohm;\":                      '\\U000003A9',\n-\t\"oint;\":                     '\\U0000222E',\n-\t\"olarr;\":                    '\\U000021BA',\n-\t\"olcir;\":                    '\\U000029BE',\n-\t\"olcross;\":                  '\\U000029BB',\n-\t\"oline;\":                    '\\U0000203E',\n-\t\"olt;\":                      '\\U000029C0',\n-\t\"omacr;\":                    '\\U0000014D',\n-\t\"omega;\":                    '\\U000003C9',\n-\t\"omicron;\":                  '\\U000003BF',\n-\t\"omid;\":                     '\\U000029B6',\n-\t\"ominus;\":                   '\\U00002296',\n-\t\"oopf;\":                     '\\U0001D560',\n-\t\"opar;\":                     '\\U000029B7',\n-\t\"operp;\":                    '\\U000029B9',\n-\t\"oplus;\":                    '\\U00002295',\n-\t\"or;\":                       '\\U00002228',\n-\t\"orarr;\":                    '\\U000021BB',\n-\t\"ord;\":                      '\\U00002A5D',\n-\t\"order;\":                    '\\U00002134',\n-\t\"orderof;\":                  '\\U00002134',\n-\t\"ordf;\":                     '\\U000000AA',\n-\t\"ordm;\":                     '\\U000000BA',\n-\t\"origof;\":                   '\\U000022B6',\n-\t\"oror;\":                     '\\U00002A56',\n-\t\"orslope;\":                  '\\U00002A57',\n-\t\"orv;\":                      '\\U00002A5B',\n-\t\"oscr;\":                     '\\U00002134',\n-\t\"oslash;\":                   '\\U000000F8',\n-\t\"osol;\":                     '\\U00002298',\n-\t\"otilde;\":                   '\\U000000F5',\n-\t\"otimes;\":                   '\\U00002297',\n-\t\"otimesas;\":                 '\\U00002A36',\n-\t\"ouml;\":                     '\\U000000F6',\n-\t\"ovbar;\":                    '\\U0000233D',\n-\t\"par;\":                      '\\U00002225',\n-\t\"para;\":                     '\\U000000B6',\n-\t\"parallel;\":                 '\\U00002225',\n-\t\"parsim;\":                   '\\U00002AF3',\n-\t\"parsl;\":                    '\\U00002AFD',\n-\t\"part;\":                     '\\U00002202',\n-\t\"pcy;\":                      '\\U0000043F',\n-\t\"percnt;\":                   '\\U00000025',\n-\t\"period;\":                   '\\U0000002E',\n-\t\"permil;\":                   '\\U00002030',\n-\t\"perp;\":                     '\\U000022A5',\n-\t\"pertenk;\":                  '\\U00002031',\n-\t\"pfr;\":                      '\\U0001D52D',\n-\t\"phi;\":                      '\\U000003C6',\n-\t\"phiv;\":                     '\\U000003D5',\n-\t\"phmmat;\":                   '\\U00002133',\n-\t\"phone;\":                    '\\U0000260E',\n-\t\"pi;\":                       '\\U000003C0',\n-\t\"pitchfork;\":                '\\U000022D4',\n-\t\"piv;\":                      '\\U000003D6',\n-\t\"planck;\":                   '\\U0000210F',\n-\t\"planckh;\":                  '\\U0000210E',\n-\t\"plankv;\":                   '\\U0000210F',\n-\t\"plus;\":                     '\\U0000002B',\n-\t\"plusacir;\":                 '\\U00002A23',\n-\t\"plusb;\":                    '\\U0000229E',\n-\t\"pluscir;\":                  '\\U00002A22',\n-\t\"plusdo;\":                   '\\U00002214',\n-\t\"plusdu;\":                   '\\U00002A25',\n-\t\"pluse;\":                    '\\U00002A72',\n-\t\"plusmn;\":                   '\\U000000B1',\n-\t\"plussim;\":                  '\\U00002A26',\n-\t\"plustwo;\":                  '\\U00002A27',\n-\t\"pm;\":                       '\\U000000B1',\n-\t\"pointint;\":                 '\\U00002A15',\n-\t\"popf;\":                     '\\U0001D561',\n-\t\"pound;\":                    '\\U000000A3',\n-\t\"pr;\":                       '\\U0000227A',\n-\t\"prE;\":                      '\\U00002AB3',\n-\t\"prap;\":                     '\\U00002AB7',\n-\t\"prcue;\":                    '\\U0000227C',\n-\t\"pre;\":                      '\\U00002AAF',\n-\t\"prec;\":                     '\\U0000227A',\n-\t\"precapprox;\":               '\\U00002AB7',\n-\t\"preccurlyeq;\":              '\\U0000227C',\n-\t\"preceq;\":                   '\\U00002AAF',\n-\t\"precnapprox;\":              '\\U00002AB9',\n-\t\"precneqq;\":                 '\\U00002AB5',\n-\t\"precnsim;\":                 '\\U000022E8',\n-\t\"precsim;\":                  '\\U0000227E',\n-\t\"prime;\":                    '\\U00002032',\n-\t\"primes;\":                   '\\U00002119',\n-\t\"prnE;\":                     '\\U00002AB5',\n-\t\"prnap;\":                    '\\U00002AB9',\n-\t\"prnsim;\":                   '\\U000022E8',\n-\t\"prod;\":                     '\\U0000220F',\n-\t\"profalar;\":                 '\\U0000232E',\n-\t\"profline;\":                 '\\U00002312',\n-\t\"profsurf;\":                 '\\U00002313',\n-\t\"prop;\":                     '\\U0000221D',\n-\t\"propto;\":                   '\\U0000221D',\n-\t\"prsim;\":                    '\\U0000227E',\n-\t\"prurel;\":                   '\\U000022B0',\n-\t\"pscr;\":                     '\\U0001D4C5',\n-\t\"psi;\":                      '\\U000003C8',\n-\t\"puncsp;\":                   '\\U00002008',\n-\t\"qfr;\":                      '\\U0001D52E',\n-\t\"qint;\":                     '\\U00002A0C',\n-\t\"qopf;\":                     '\\U0001D562',\n-\t\"qprime;\":                   '\\U00002057',\n-\t\"qscr;\":                     '\\U0001D4C6',\n-\t\"quaternions;\":              '\\U0000210D',\n-\t\"quatint;\":                  '\\U00002A16',\n-\t\"quest;\":                    '\\U0000003F',\n-\t\"questeq;\":                  '\\U0000225F',\n-\t\"quot;\":                     '\\U00000022',\n-\t\"rAarr;\":                    '\\U000021DB',\n-\t\"rArr;\":                     '\\U000021D2',\n-\t\"rAtail;\":                   '\\U0000291C',\n-\t\"rBarr;\":                    '\\U0000290F',\n-\t\"rHar;\":                     '\\U00002964',\n-\t\"racute;\":                   '\\U00000155',\n-\t\"radic;\":                    '\\U0000221A',\n-\t\"raemptyv;\":                 '\\U000029B3',\n-\t\"rang;\":                     '\\U000027E9',\n-\t\"rangd;\":                    '\\U00002992',\n-\t\"range;\":                    '\\U000029A5',\n-\t\"rangle;\":                   '\\U000027E9',\n-\t\"raquo;\":                    '\\U000000BB',\n-\t\"rarr;\":                     '\\U00002192',\n-\t\"rarrap;\":                   '\\U00002975',\n-\t\"rarrb;\":                    '\\U000021E5',\n-\t\"rarrbfs;\":                  '\\U00002920',\n-\t\"rarrc;\":                    '\\U00002933',\n-\t\"rarrfs;\":                   '\\U0000291E',\n-\t\"rarrhk;\":                   '\\U000021AA',\n-\t\"rarrlp;\":                   '\\U000021AC',\n-\t\"rarrpl;\":                   '\\U00002945',\n-\t\"rarrsim;\":                  '\\U00002974',\n-\t\"rarrtl;\":                   '\\U000021A3',\n-\t\"rarrw;\":                    '\\U0000219D',\n-\t\"ratail;\":                   '\\U0000291A',\n-\t\"ratio;\":                    '\\U00002236',\n-\t\"rationals;\":                '\\U0000211A',\n-\t\"rbarr;\":                    '\\U0000290D',\n-\t\"rbbrk;\":                    '\\U00002773',\n-\t\"rbrace;\":                   '\\U0000007D',\n-\t\"rbrack;\":                   '\\U0000005D',\n-\t\"rbrke;\":                    '\\U0000298C',\n-\t\"rbrksld;\":                  '\\U0000298E',\n-\t\"rbrkslu;\":                  '\\U00002990',\n-\t\"rcaron;\":                   '\\U00000159',\n-\t\"rcedil;\":                   '\\U00000157',\n-\t\"rceil;\":                    '\\U00002309',\n-\t\"rcub;\":                     '\\U0000007D',\n-\t\"rcy;\":                      '\\U00000440',\n-\t\"rdca;\":                     '\\U00002937',\n-\t\"rdldhar;\":                  '\\U00002969',\n-\t\"rdquo;\":                    '\\U0000201D',\n-\t\"rdquor;\":                   '\\U0000201D',\n-\t\"rdsh;\":                     '\\U000021B3',\n-\t\"real;\":                     '\\U0000211C',\n-\t\"realine;\":                  '\\U0000211B',\n-\t\"realpart;\":                 '\\U0000211C',\n-\t\"reals;\":                    '\\U0000211D',\n-\t\"rect;\":                     '\\U000025AD',\n-\t\"reg;\":                      '\\U000000AE',\n-\t\"rfisht;\":                   '\\U0000297D',\n-\t\"rfloor;\":                   '\\U0000230B',\n-\t\"rfr;\":                      '\\U0001D52F',\n-\t\"rhard;\":                    '\\U000021C1',\n-\t\"rharu;\":                    '\\U000021C0',\n-\t\"rharul;\":                   '\\U0000296C',\n-\t\"rho;\":                      '\\U000003C1',\n-\t\"rhov;\":                     '\\U000003F1',\n-\t\"rightarrow;\":               '\\U00002192',\n-\t\"rightarrowtail;\":           '\\U000021A3',\n-\t\"rightharpoondown;\":         '\\U000021C1',\n-\t\"rightharpoonup;\":           '\\U000021C0',\n-\t\"rightleftarrows;\":          '\\U000021C4',\n-\t\"rightleftharpoons;\":        '\\U000021CC',\n-\t\"rightrightarrows;\":         '\\U000021C9',\n-\t\"rightsquigarrow;\":          '\\U0000219D',\n-\t\"rightthreetimes;\":          '\\U000022CC',\n-\t\"ring;\":                     '\\U000002DA',\n-\t\"risingdotseq;\":             '\\U00002253',\n-\t\"rlarr;\":                    '\\U000021C4',\n-\t\"rlhar;\":                    '\\U000021CC',\n-\t\"rlm;\":                      '\\U0000200F',\n-\t\"rmoust;\":                   '\\U000023B1',\n-\t\"rmoustache;\":               '\\U000023B1',\n-\t\"rnmid;\":                    '\\U00002AEE',\n-\t\"roang;\":                    '\\U000027ED',\n-\t\"roarr;\":                    '\\U000021FE',\n-\t\"robrk;\":                    '\\U000027E7',\n-\t\"ropar;\":                    '\\U00002986',\n-\t\"ropf;\":                     '\\U0001D563',\n-\t\"roplus;\":                   '\\U00002A2E',\n-\t\"rotimes;\":                  '\\U00002A35',\n-\t\"rpar;\":                     '\\U00000029',\n-\t\"rpargt;\":                   '\\U00002994',\n-\t\"rppolint;\":                 '\\U00002A12',\n-\t\"rrarr;\":                    '\\U000021C9',\n-\t\"rsaquo;\":                   '\\U0000203A',\n-\t\"rscr;\":                     '\\U0001D4C7',\n-\t\"rsh;\":                      '\\U000021B1',\n-\t\"rsqb;\":                     '\\U0000005D',\n-\t\"rsquo;\":                    '\\U00002019',\n-\t\"rsquor;\":                   '\\U00002019',\n-\t\"rthree;\":                   '\\U000022CC',\n-\t\"rtimes;\":                   '\\U000022CA',\n-\t\"rtri;\":                     '\\U000025B9',\n-\t\"rtrie;\":                    '\\U000022B5',\n-\t\"rtrif;\":                    '\\U000025B8',\n-\t\"rtriltri;\":                 '\\U000029CE',\n-\t\"ruluhar;\":                  '\\U00002968',\n-\t\"rx;\":                       '\\U0000211E',\n-\t\"sacute;\":                   '\\U0000015B',\n-\t\"sbquo;\":                    '\\U0000201A',\n-\t\"sc;\":                       '\\U0000227B',\n-\t\"scE;\":                      '\\U00002AB4',\n-\t\"scap;\":                     '\\U00002AB8',\n-\t\"scaron;\":                   '\\U00000161',\n-\t\"sccue;\":                    '\\U0000227D',\n-\t\"sce;\":                      '\\U00002AB0',\n-\t\"scedil;\":                   '\\U0000015F',\n-\t\"scirc;\":                    '\\U0000015D',\n-\t\"scnE;\":                     '\\U00002AB6',\n-\t\"scnap;\":                    '\\U00002ABA',\n-\t\"scnsim;\":                   '\\U000022E9',\n-\t\"scpolint;\":                 '\\U00002A13',\n-\t\"scsim;\":                    '\\U0000227F',\n-\t\"scy;\":                      '\\U00000441',\n-\t\"sdot;\":                     '\\U000022C5',\n-\t\"sdotb;\":                    '\\U000022A1',\n-\t\"sdote;\":                    '\\U00002A66',\n-\t\"seArr;\":                    '\\U000021D8',\n-\t\"searhk;\":                   '\\U00002925',\n-\t\"searr;\":                    '\\U00002198',\n-\t\"searrow;\":                  '\\U00002198',\n-\t\"sect;\":                     '\\U000000A7',\n-\t\"semi;\":                     '\\U0000003B',\n-\t\"seswar;\":                   '\\U00002929',\n-\t\"setminus;\":                 '\\U00002216',\n-\t\"setmn;\":                    '\\U00002216',\n-\t\"sext;\":                     '\\U00002736',\n-\t\"sfr;\":                      '\\U0001D530',\n-\t\"sfrown;\":                   '\\U00002322',\n-\t\"sharp;\":                    '\\U0000266F',\n-\t\"shchcy;\":                   '\\U00000449',\n-\t\"shcy;\":                     '\\U00000448',\n-\t\"shortmid;\":                 '\\U00002223',\n-\t\"shortparallel;\":            '\\U00002225',\n-\t\"shy;\":                      '\\U000000AD',\n-\t\"sigma;\":                    '\\U000003C3',\n-\t\"sigmaf;\":                   '\\U000003C2',\n-\t\"sigmav;\":                   '\\U000003C2',\n-\t\"sim;\":                      '\\U0000223C',\n-\t\"simdot;\":                   '\\U00002A6A',\n-\t\"sime;\":                     '\\U00002243',\n-\t\"simeq;\":                    '\\U00002243',\n-\t\"simg;\":                     '\\U00002A9E',\n-\t\"simgE;\":                    '\\U00002AA0',\n-\t\"siml;\":                     '\\U00002A9D',\n-\t\"simlE;\":                    '\\U00002A9F',\n-\t\"simne;\":                    '\\U00002246',\n-\t\"simplus;\":                  '\\U00002A24',\n-\t\"simrarr;\":                  '\\U00002972',\n-\t\"slarr;\":                    '\\U00002190',\n-\t\"smallsetminus;\":            '\\U00002216',\n-\t\"smashp;\":                   '\\U00002A33',\n-\t\"smeparsl;\":                 '\\U000029E4',\n-\t\"smid;\":                     '\\U00002223',\n-\t\"smile;\":                    '\\U00002323',\n-\t\"smt;\":                      '\\U00002AAA',\n-\t\"smte;\":                     '\\U00002AAC',\n-\t\"softcy;\":                   '\\U0000044C',\n-\t\"sol;\":                      '\\U0000002F',\n-\t\"solb;\":                     '\\U000029C4',\n-\t\"solbar;\":                   '\\U0000233F',\n-\t\"sopf;\":                     '\\U0001D564',\n-\t\"spades;\":                   '\\U00002660',\n-\t\"spadesuit;\":                '\\U00002660',\n-\t\"spar;\":                     '\\U00002225',\n-\t\"sqcap;\":                    '\\U00002293',\n-\t\"sqcup;\":                    '\\U00002294',\n-\t\"sqsub;\":                    '\\U0000228F',\n-\t\"sqsube;\":                   '\\U00002291',\n-\t\"sqsubset;\":                 '\\U0000228F',\n-\t\"sqsubseteq;\":               '\\U00002291',\n-\t\"sqsup;\":                    '\\U00002290',\n-\t\"sqsupe;\":                   '\\U00002292',\n-\t\"sqsupset;\":                 '\\U00002290',\n-\t\"sqsupseteq;\":               '\\U00002292',\n-\t\"squ;\":                      '\\U000025A1',\n-\t\"square;\":                   '\\U000025A1',\n-\t\"squarf;\":                   '\\U000025AA',\n-\t\"squf;\":                     '\\U000025AA',\n-\t\"srarr;\":                    '\\U00002192',\n-\t\"sscr;\":                     '\\U0001D4C8',\n-\t\"ssetmn;\":                   '\\U00002216',\n-\t\"ssmile;\":                   '\\U00002323',\n-\t\"sstarf;\":                   '\\U000022C6',\n-\t\"star;\":                     '\\U00002606',\n-\t\"starf;\":                    '\\U00002605',\n-\t\"straightepsilon;\":          '\\U000003F5',\n-\t\"straightphi;\":              '\\U000003D5',\n-\t\"strns;\":                    '\\U000000AF',\n-\t\"sub;\":                      '\\U00002282',\n-\t\"subE;\":                     '\\U00002AC5',\n-\t\"subdot;\":                   '\\U00002ABD',\n-\t\"sube;\":                     '\\U00002286',\n-\t\"subedot;\":                  '\\U00002AC3',\n-\t\"submult;\":                  '\\U00002AC1',\n-\t\"subnE;\":                    '\\U00002ACB',\n-\t\"subne;\":                    '\\U0000228A',\n-\t\"subplus;\":                  '\\U00002ABF',\n-\t\"subrarr;\":                  '\\U00002979',\n-\t\"subset;\":                   '\\U00002282',\n-\t\"subseteq;\":                 '\\U00002286',\n-\t\"subseteqq;\":                '\\U00002AC5',\n-\t\"subsetneq;\":                '\\U0000228A',\n-\t\"subsetneqq;\":               '\\U00002ACB',\n-\t\"subsim;\":                   '\\U00002AC7',\n-\t\"subsub;\":                   '\\U00002AD5',\n-\t\"subsup;\":                   '\\U00002AD3',\n-\t\"succ;\":                     '\\U0000227B',\n-\t\"succapprox;\":               '\\U00002AB8',\n-\t\"succcurlyeq;\":              '\\U0000227D',\n-\t\"succeq;\":                   '\\U00002AB0',\n-\t\"succnapprox;\":              '\\U00002ABA',\n-\t\"succneqq;\":                 '\\U00002AB6',\n-\t\"succnsim;\":                 '\\U000022E9',\n-\t\"succsim;\":                  '\\U0000227F',\n-\t\"sum;\":                      '\\U00002211',\n-\t\"sung;\":                     '\\U0000266A',\n-\t\"sup;\":                      '\\U00002283',\n-\t\"sup1;\":                     '\\U000000B9',\n-\t\"sup2;\":                     '\\U000000B2',\n-\t\"sup3;\":                     '\\U000000B3',\n-\t\"supE;\":                     '\\U00002AC6',\n-\t\"supdot;\":                   '\\U00002ABE',\n-\t\"supdsub;\":                  '\\U00002AD8',\n-\t\"supe;\":                     '\\U00002287',\n-\t\"supedot;\":                  '\\U00002AC4',\n-\t\"suphsol;\":                  '\\U000027C9',\n-\t\"suphsub;\":                  '\\U00002AD7',\n-\t\"suplarr;\":                  '\\U0000297B',\n-\t\"supmult;\":                  '\\U00002AC2',\n-\t\"supnE;\":                    '\\U00002ACC',\n-\t\"supne;\":                    '\\U0000228B',\n-\t\"supplus;\":                  '\\U00002AC0',\n-\t\"supset;\":                   '\\U00002283',\n-\t\"supseteq;\":                 '\\U00002287',\n-\t\"supseteqq;\":                '\\U00002AC6',\n-\t\"supsetneq;\":                '\\U0000228B',\n-\t\"supsetneqq;\":               '\\U00002ACC',\n-\t\"supsim;\":                   '\\U00002AC8',\n-\t\"supsub;\":                   '\\U00002AD4',\n-\t\"supsup;\":                   '\\U00002AD6',\n-\t\"swArr;\":                    '\\U000021D9',\n-\t\"swarhk;\":                   '\\U00002926',\n-\t\"swarr;\":                    '\\U00002199',\n-\t\"swarrow;\":                  '\\U00002199',\n-\t\"swnwar;\":                   '\\U0000292A',\n-\t\"szlig;\":                    '\\U000000DF',\n-\t\"target;\":                   '\\U00002316',\n-\t\"tau;\":                      '\\U000003C4',\n-\t\"tbrk;\":                     '\\U000023B4',\n-\t\"tcaron;\":                   '\\U00000165',\n-\t\"tcedil;\":                   '\\U00000163',\n-\t\"tcy;\":                      '\\U00000442',\n-\t\"tdot;\":                     '\\U000020DB',\n-\t\"telrec;\":                   '\\U00002315',\n-\t\"tfr;\":                      '\\U0001D531',\n-\t\"there4;\":                   '\\U00002234',\n-\t\"therefore;\":                '\\U00002234',\n-\t\"theta;\":                    '\\U000003B8',\n-\t\"thetasym;\":                 '\\U000003D1',\n-\t\"thetav;\":                   '\\U000003D1',\n-\t\"thickapprox;\":              '\\U00002248',\n-\t\"thicksim;\":                 '\\U0000223C',\n-\t\"thinsp;\":                   '\\U00002009',\n-\t\"thkap;\":                    '\\U00002248',\n-\t\"thksim;\":                   '\\U0000223C',\n-\t\"thorn;\":                    '\\U000000FE',\n-\t\"tilde;\":                    '\\U000002DC',\n-\t\"times;\":                    '\\U000000D7',\n-\t\"timesb;\":                   '\\U000022A0',\n-\t\"timesbar;\":                 '\\U00002A31',\n-\t\"timesd;\":                   '\\U00002A30',\n-\t\"tint;\":                     '\\U0000222D',\n-\t\"toea;\":                     '\\U00002928',\n-\t\"top;\":                      '\\U000022A4',\n-\t\"topbot;\":                   '\\U00002336',\n-\t\"topcir;\":                   '\\U00002AF1',\n-\t\"topf;\":                     '\\U0001D565',\n-\t\"topfork;\":                  '\\U00002ADA',\n-\t\"tosa;\":                     '\\U00002929',\n-\t\"tprime;\":                   '\\U00002034',\n-\t\"trade;\":                    '\\U00002122',\n-\t\"triangle;\":                 '\\U000025B5',\n-\t\"triangledown;\":             '\\U000025BF',\n-\t\"triangleleft;\":             '\\U000025C3',\n-\t\"trianglelefteq;\":           '\\U000022B4',\n-\t\"triangleq;\":                '\\U0000225C',\n-\t\"triangleright;\":            '\\U000025B9',\n-\t\"trianglerighteq;\":          '\\U000022B5',\n-\t\"tridot;\":                   '\\U000025EC',\n-\t\"trie;\":                     '\\U0000225C',\n-\t\"triminus;\":                 '\\U00002A3A',\n-\t\"triplus;\":                  '\\U00002A39',\n-\t\"trisb;\":                    '\\U000029CD',\n-\t\"tritime;\":                  '\\U00002A3B',\n-\t\"trpezium;\":                 '\\U000023E2',\n-\t\"tscr;\":                     '\\U0001D4C9',\n-\t\"tscy;\":                     '\\U00000446',\n-\t\"tshcy;\":                    '\\U0000045B',\n-\t\"tstrok;\":                   '\\U00000167',\n-\t\"twixt;\":                    '\\U0000226C',\n-\t\"twoheadleftarrow;\":         '\\U0000219E',\n-\t\"twoheadrightarrow;\":        '\\U000021A0',\n-\t\"uArr;\":                     '\\U000021D1',\n-\t\"uHar;\":                     '\\U00002963',\n-\t\"uacute;\":                   '\\U000000FA',\n-\t\"uarr;\":                     '\\U00002191',\n-\t\"ubrcy;\":                    '\\U0000045E',\n-\t\"ubreve;\":                   '\\U0000016D',\n-\t\"ucirc;\":                    '\\U000000FB',\n-\t\"ucy;\":                      '\\U00000443',\n-\t\"udarr;\":                    '\\U000021C5',\n-\t\"udblac;\":                   '\\U00000171',\n-\t\"udhar;\":                    '\\U0000296E',\n-\t\"ufisht;\":                   '\\U0000297E',\n-\t\"ufr;\":                      '\\U0001D532',\n-\t\"ugrave;\":                   '\\U000000F9',\n-\t\"uharl;\":                    '\\U000021BF',\n-\t\"uharr;\":                    '\\U000021BE',\n-\t\"uhblk;\":                    '\\U00002580',\n-\t\"ulcorn;\":                   '\\U0000231C',\n-\t\"ulcorner;\":                 '\\U0000231C',\n-\t\"ulcrop;\":                   '\\U0000230F',\n-\t\"ultri;\":                    '\\U000025F8',\n-\t\"umacr;\":                    '\\U0000016B',\n-\t\"uml;\":                      '\\U000000A8',\n-\t\"uogon;\":                    '\\U00000173',\n-\t\"uopf;\":                     '\\U0001D566',\n-\t\"uparrow;\":                  '\\U00002191',\n-\t\"updownarrow;\":              '\\U00002195',\n-\t\"upharpoonleft;\":            '\\U000021BF',\n-\t\"upharpoonright;\":           '\\U000021BE',\n-\t\"uplus;\":                    '\\U0000228E',\n-\t\"upsi;\":                     '\\U000003C5',\n-\t\"upsih;\":                    '\\U000003D2',\n-\t\"upsilon;\":                  '\\U000003C5',\n-\t\"upuparrows;\":               '\\U000021C8',\n-\t\"urcorn;\":                   '\\U0000231D',\n-\t\"urcorner;\":                 '\\U0000231D',\n-\t\"urcrop;\":                   '\\U0000230E',\n-\t\"uring;\":                    '\\U0000016F',\n-\t\"urtri;\":                    '\\U000025F9',\n-\t\"uscr;\":                     '\\U0001D4CA',\n-\t\"utdot;\":                    '\\U000022F0',\n-\t\"utilde;\":                   '\\U00000169',\n-\t\"utri;\":                     '\\U000025B5',\n-\t\"utrif;\":                    '\\U000025B4',\n-\t\"uuarr;\":                    '\\U000021C8',\n-\t\"uuml;\":                     '\\U000000FC',\n-\t\"uwangle;\":                  '\\U000029A7',\n-\t\"vArr;\":                     '\\U000021D5',\n-\t\"vBar;\":                     '\\U00002AE8',\n-\t\"vBarv;\":                    '\\U00002AE9',\n-\t\"vDash;\":                    '\\U000022A8',\n-\t\"vangrt;\":                   '\\U0000299C',\n-\t\"varepsilon;\":               '\\U000003F5',\n-\t\"varkappa;\":                 '\\U000003F0',\n-\t\"varnothing;\":               '\\U00002205',\n-\t\"varphi;\":                   '\\U000003D5',\n-\t\"varpi;\":                    '\\U000003D6',\n-\t\"varpropto;\":                '\\U0000221D',\n-\t\"varr;\":                     '\\U00002195',\n-\t\"varrho;\":                   '\\U000003F1',\n-\t\"varsigma;\":                 '\\U000003C2',\n-\t\"vartheta;\":                 '\\U000003D1',\n-\t\"vartriangleleft;\":          '\\U000022B2',\n-\t\"vartriangleright;\":         '\\U000022B3',\n-\t\"vcy;\":                      '\\U00000432',\n-\t\"vdash;\":                    '\\U000022A2',\n-\t\"vee;\":                      '\\U00002228',\n-\t\"veebar;\":                   '\\U000022BB',\n-\t\"veeeq;\":                    '\\U0000225A',\n-\t\"vellip;\":                   '\\U000022EE',\n-\t\"verbar;\":                   '\\U0000007C',\n-\t\"vert;\":                     '\\U0000007C',\n-\t\"vfr;\":                      '\\U0001D533',\n-\t\"vltri;\":                    '\\U000022B2',\n-\t\"vopf;\":                     '\\U0001D567',\n-\t\"vprop;\":                    '\\U0000221D',\n-\t\"vrtri;\":                    '\\U000022B3',\n-\t\"vscr;\":                     '\\U0001D4CB',\n-\t\"vzigzag;\":                  '\\U0000299A',\n-\t\"wcirc;\":                    '\\U00000175',\n-\t\"wedbar;\":                   '\\U00002A5F',\n-\t\"wedge;\":                    '\\U00002227',\n-\t\"wedgeq;\":                   '\\U00002259',\n-\t\"weierp;\":                   '\\U00002118',\n-\t\"wfr;\":                      '\\U0001D534',\n-\t\"wopf;\":                     '\\U0001D568',\n-\t\"wp;\":                       '\\U00002118',\n-\t\"wr;\":                       '\\U00002240',\n-\t\"wreath;\":                   '\\U00002240',\n-\t\"wscr;\":                     '\\U0001D4CC',\n-\t\"xcap;\":                     '\\U000022C2',\n-\t\"xcirc;\":                    '\\U000025EF',\n-\t\"xcup;\":                     '\\U000022C3',\n-\t\"xdtri;\":                    '\\U000025BD',\n-\t\"xfr;\":                      '\\U0001D535',\n-\t\"xhArr;\":                    '\\U000027FA',\n-\t\"xharr;\":                    '\\U000027F7',\n-\t\"xi;\":                       '\\U000003BE',\n-\t\"xlArr;\":                    '\\U000027F8',\n-\t\"xlarr;\":                    '\\U000027F5',\n-\t\"xmap;\":                     '\\U000027FC',\n-\t\"xnis;\":                     '\\U000022FB',\n-\t\"xodot;\":                    '\\U00002A00',\n-\t\"xopf;\":                     '\\U0001D569',\n-\t\"xoplus;\":                   '\\U00002A01',\n-\t\"xotime;\":                   '\\U00002A02',\n-\t\"xrArr;\":                    '\\U000027F9',\n-\t\"xrarr;\":                    '\\U000027F6',\n-\t\"xscr;\":                     '\\U0001D4CD',\n-\t\"xsqcup;\":                   '\\U00002A06',\n-\t\"xuplus;\":                   '\\U00002A04',\n-\t\"xutri;\":                    '\\U000025B3',\n-\t\"xvee;\":                     '\\U000022C1',\n-\t\"xwedge;\":                   '\\U000022C0',\n-\t\"yacute;\":                   '\\U000000FD',\n-\t\"yacy;\":                     '\\U0000044F',\n-\t\"ycirc;\":                    '\\U00000177',\n-\t\"ycy;\":                      '\\U0000044B',\n-\t\"yen;\":                      '\\U000000A5',\n-\t\"yfr;\":                      '\\U0001D536',\n-\t\"yicy;\":                     '\\U00000457',\n-\t\"yopf;\":                     '\\U0001D56A',\n-\t\"yscr;\":                     '\\U0001D4CE',\n-\t\"yucy;\":                     '\\U0000044E',\n-\t\"yuml;\":                     '\\U000000FF',\n-\t\"zacute;\":                   '\\U0000017A',\n-\t\"zcaron;\":                   '\\U0000017E',\n-\t\"zcy;\":                      '\\U00000437',\n-\t\"zdot;\":                     '\\U0000017C',\n-\t\"zeetrf;\":                   '\\U00002128',\n-\t\"zeta;\":                     '\\U000003B6',\n-\t\"zfr;\":                      '\\U0001D537',\n-\t\"zhcy;\":                     '\\U00000436',\n-\t\"zigrarr;\":                  '\\U000021DD',\n-\t\"zopf;\":                     '\\U0001D56B',\n-\t\"zscr;\":                     '\\U0001D4CF',\n-\t\"zwj;\":                      '\\U0000200D',\n-\t\"zwnj;\":                     '\\U0000200C',\n-\t\"AElig\":                     '\\U000000C6',\n-\t\"AMP\":                       '\\U00000026',\n-\t\"Aacute\":                    '\\U000000C1',\n-\t\"Acirc\":                     '\\U000000C2',\n-\t\"Agrave\":                    '\\U000000C0',\n-\t\"Aring\":                     '\\U000000C5',\n-\t\"Atilde\":                    '\\U000000C3',\n-\t\"Auml\":                      '\\U000000C4',\n-\t\"COPY\":                      '\\U000000A9',\n-\t\"Ccedil\":                    '\\U000000C7',\n-\t\"ETH\":                       '\\U000000D0',\n-\t\"Eacute\":                    '\\U000000C9',\n-\t\"Ecirc\":                     '\\U000000CA',\n-\t\"Egrave\":                    '\\U000000C8',\n-\t\"Euml\":                      '\\U000000CB',\n-\t\"GT\":                        '\\U0000003E',\n-\t\"Iacute\":                    '\\U000000CD',\n-\t\"Icirc\":                     '\\U000000CE',\n-\t\"Igrave\":                    '\\U000000CC',\n-\t\"Iuml\":                      '\\U000000CF',\n-\t\"LT\":                        '\\U0000003C',\n-\t\"Ntilde\":                    '\\U000000D1',\n-\t\"Oacute\":                    '\\U000000D3',\n-\t\"Ocirc\":                     '\\U000000D4',\n-\t\"Ograve\":                    '\\U000000D2',\n-\t\"Oslash\":                    '\\U000000D8',\n-\t\"Otilde\":                    '\\U000000D5',\n-\t\"Ouml\":                      '\\U000000D6',\n-\t\"QUOT\":                      '\\U00000022',\n-\t\"REG\":                       '\\U000000AE',\n-\t\"THORN\":                     '\\U000000DE',\n-\t\"Uacute\":                    '\\U000000DA',\n-\t\"Ucirc\":                     '\\U000000DB',\n-\t\"Ugrave\":                    '\\U000000D9',\n-\t\"Uuml\":                      '\\U000000DC',\n-\t\"Yacute\":                    '\\U000000DD',\n-\t\"aacute\":                    '\\U000000E1',\n-\t\"acirc\":                     '\\U000000E2',\n-\t\"acute\":                     '\\U000000B4',\n-\t\"aelig\":                     '\\U000000E6',\n-\t\"agrave\":                    '\\U000000E0',\n-\t\"amp\":                       '\\U00000026',\n-\t\"aring\":                     '\\U000000E5',\n-\t\"atilde\":                    '\\U000000E3',\n-\t\"auml\":                      '\\U000000E4',\n-\t\"brvbar\":                    '\\U000000A6',\n-\t\"ccedil\":                    '\\U000000E7',\n-\t\"cedil\":                     '\\U000000B8',\n-\t\"cent\":                      '\\U000000A2',\n-\t\"copy\":                      '\\U000000A9',\n-\t\"curren\":                    '\\U000000A4',\n-\t\"deg\":                       '\\U000000B0',\n-\t\"divide\":                    '\\U000000F7',\n-\t\"eacute\":                    '\\U000000E9',\n-\t\"ecirc\":                     '\\U000000EA',\n-\t\"egrave\":                    '\\U000000E8',\n-\t\"eth\":                       '\\U000000F0',\n-\t\"euml\":                      '\\U000000EB',\n-\t\"frac12\":                    '\\U000000BD',\n-\t\"frac14\":                    '\\U000000BC',\n-\t\"frac34\":                    '\\U000000BE',\n-\t\"gt\":                        '\\U0000003E',\n-\t\"iacute\":                    '\\U000000ED',\n-\t\"icirc\":                     '\\U000000EE',\n-\t\"iexcl\":                     '\\U000000A1',\n-\t\"igrave\":                    '\\U000000EC',\n-\t\"iquest\":                    '\\U000000BF',\n-\t\"iuml\":                      '\\U000000EF',\n-\t\"laquo\":                     '\\U000000AB',\n-\t\"lt\":                        '\\U0000003C',\n-\t\"macr\":                      '\\U000000AF',\n-\t\"micro\":                     '\\U000000B5',\n-\t\"middot\":                    '\\U000000B7',\n-\t\"nbsp\":                      '\\U000000A0',\n-\t\"not\":                       '\\U000000AC',\n-\t\"ntilde\":                    '\\U000000F1',\n-\t\"oacute\":                    '\\U000000F3',\n-\t\"ocirc\":                     '\\U000000F4',\n-\t\"ograve\":                    '\\U000000F2',\n-\t\"ordf\":                      '\\U000000AA',\n-\t\"ordm\":                      '\\U000000BA',\n-\t\"oslash\":                    '\\U000000F8',\n-\t\"otilde\":                    '\\U000000F5',\n-\t\"ouml\":                      '\\U000000F6',\n-\t\"para\":                      '\\U000000B6',\n-\t\"plusmn\":                    '\\U000000B1',\n-\t\"pound\":                     '\\U000000A3',\n-\t\"quot\":                      '\\U00000022',\n-\t\"raquo\":                     '\\U000000BB',\n-\t\"reg\":                       '\\U000000AE',\n-\t\"sect\":                      '\\U000000A7',\n-\t\"shy\":                       '\\U000000AD',\n-\t\"sup1\":                      '\\U000000B9',\n-\t\"sup2\":                      '\\U000000B2',\n-\t\"sup3\":                      '\\U000000B3',\n-\t\"szlig\":                     '\\U000000DF',\n-\t\"thorn\":                     '\\U000000FE',\n-\t\"times\":                     '\\U000000D7',\n-\t\"uacute\":                    '\\U000000FA',\n-\t\"ucirc\":                     '\\U000000FB',\n-\t\"ugrave\":                    '\\U000000F9',\n-\t\"uml\":                       '\\U000000A8',\n-\t\"uuml\":                      '\\U000000FC',\n-\t\"yacute\":                    '\\U000000FD',\n-\t\"yen\":                       '\\U000000A5',\n-\t\"yuml\":                      '\\U000000FF',\n-}\n-\n-// HTML entities that are two unicode codepoints.\n-var entity2 = map[string][2]rune{\n-\t// TODO(nigeltao): Handle replacements that are wider than their names.\n-\t// \"nLt;\":                     {'\\u226A', '\\u20D2'},\n-\t// \"nGt;\":                     {'\\u226B', '\\u20D2'},\n-\t\"NotEqualTilde;\":           {'\\u2242', '\\u0338'},\n-\t\"NotGreaterFullEqual;\":     {'\\u2267', '\\u0338'},\n-\t\"NotGreaterGreater;\":       {'\\u226B', '\\u0338'},\n-\t\"NotGreaterSlantEqual;\":    {'\\u2A7E', '\\u0338'},\n-\t\"NotHumpDownHump;\":         {'\\u224E', '\\u0338'},\n-\t\"NotHumpEqual;\":            {'\\u224F', '\\u0338'},\n-\t\"NotLeftTriangleBar;\":      {'\\u29CF', '\\u0338'},\n-\t\"NotLessLess;\":             {'\\u226A', '\\u0338'},\n-\t\"NotLessSlantEqual;\":       {'\\u2A7D', '\\u0338'},\n-\t\"NotNestedGreaterGreater;\": {'\\u2AA2', '\\u0338'},\n-\t\"NotNestedLessLess;\":       {'\\u2AA1', '\\u0338'},\n-\t\"NotPrecedesEqual;\":        {'\\u2AAF', '\\u0338'},\n-\t\"NotRightTriangleBar;\":     {'\\u29D0', '\\u0338'},\n-\t\"NotSquareSubset;\":         {'\\u228F', '\\u0338'},\n-\t\"NotSquareSuperset;\":       {'\\u2290', '\\u0338'},\n-\t\"NotSubset;\":               {'\\u2282', '\\u20D2'},\n-\t\"NotSucceedsEqual;\":        {'\\u2AB0', '\\u0338'},\n-\t\"NotSucceedsTilde;\":        {'\\u227F', '\\u0338'},\n-\t\"NotSuperset;\":             {'\\u2283', '\\u20D2'},\n-\t\"ThickSpace;\":              {'\\u205F', '\\u200A'},\n-\t\"acE;\":                     {'\\u223E', '\\u0333'},\n-\t\"bne;\":                     {'\\u003D', '\\u20E5'},\n-\t\"bnequiv;\":                 {'\\u2261', '\\u20E5'},\n-\t\"caps;\":                    {'\\u2229', '\\uFE00'},\n-\t\"cups;\":                    {'\\u222A', '\\uFE00'},\n-\t\"fjlig;\":                   {'\\u0066', '\\u006A'},\n-\t\"gesl;\":                    {'\\u22DB', '\\uFE00'},\n-\t\"gvertneqq;\":               {'\\u2269', '\\uFE00'},\n-\t\"gvnE;\":                    {'\\u2269', '\\uFE00'},\n-\t\"lates;\":                   {'\\u2AAD', '\\uFE00'},\n-\t\"lesg;\":                    {'\\u22DA', '\\uFE00'},\n-\t\"lvertneqq;\":               {'\\u2268', '\\uFE00'},\n-\t\"lvnE;\":                    {'\\u2268', '\\uFE00'},\n-\t\"nGg;\":                     {'\\u22D9', '\\u0338'},\n-\t\"nGtv;\":                    {'\\u226B', '\\u0338'},\n-\t\"nLl;\":                     {'\\u22D8', '\\u0338'},\n-\t\"nLtv;\":                    {'\\u226A', '\\u0338'},\n-\t\"nang;\":                    {'\\u2220', '\\u20D2'},\n-\t\"napE;\":                    {'\\u2A70', '\\u0338'},\n-\t\"napid;\":                   {'\\u224B', '\\u0338'},\n-\t\"nbump;\":                   {'\\u224E', '\\u0338'},\n-\t\"nbumpe;\":                  {'\\u224F', '\\u0338'},\n-\t\"ncongdot;\":                {'\\u2A6D', '\\u0338'},\n-\t\"nedot;\":                   {'\\u2250', '\\u0338'},\n-\t\"nesim;\":                   {'\\u2242', '\\u0338'},\n-\t\"ngE;\":                     {'\\u2267', '\\u0338'},\n-\t\"ngeqq;\":                   {'\\u2267', '\\u0338'},\n-\t\"ngeqslant;\":               {'\\u2A7E', '\\u0338'},\n-\t\"nges;\":                    {'\\u2A7E', '\\u0338'},\n-\t\"nlE;\":                     {'\\u2266', '\\u0338'},\n-\t\"nleqq;\":                   {'\\u2266', '\\u0338'},\n-\t\"nleqslant;\":               {'\\u2A7D', '\\u0338'},\n-\t\"nles;\":                    {'\\u2A7D', '\\u0338'},\n-\t\"notinE;\":                  {'\\u22F9', '\\u0338'},\n-\t\"notindot;\":                {'\\u22F5', '\\u0338'},\n-\t\"nparsl;\":                  {'\\u2AFD', '\\u20E5'},\n-\t\"npart;\":                   {'\\u2202', '\\u0338'},\n-\t\"npre;\":                    {'\\u2AAF', '\\u0338'},\n-\t\"npreceq;\":                 {'\\u2AAF', '\\u0338'},\n-\t\"nrarrc;\":                  {'\\u2933', '\\u0338'},\n-\t\"nrarrw;\":                  {'\\u219D', '\\u0338'},\n-\t\"nsce;\":                    {'\\u2AB0', '\\u0338'},\n-\t\"nsubE;\":                   {'\\u2AC5', '\\u0338'},\n-\t\"nsubset;\":                 {'\\u2282', '\\u20D2'},\n-\t\"nsubseteqq;\":              {'\\u2AC5', '\\u0338'},\n-\t\"nsucceq;\":                 {'\\u2AB0', '\\u0338'},\n-\t\"nsupE;\":                   {'\\u2AC6', '\\u0338'},\n-\t\"nsupset;\":                 {'\\u2283', '\\u20D2'},\n-\t\"nsupseteqq;\":              {'\\u2AC6', '\\u0338'},\n-\t\"nvap;\":                    {'\\u224D', '\\u20D2'},\n-\t\"nvge;\":                    {'\\u2265', '\\u20D2'},\n-\t\"nvgt;\":                    {'\\u003E', '\\u20D2'},\n-\t\"nvle;\":                    {'\\u2264', '\\u20D2'},\n-\t\"nvlt;\":                    {'\\u003C', '\\u20D2'},\n-\t\"nvltrie;\":                 {'\\u22B4', '\\u20D2'},\n-\t\"nvrtrie;\":                 {'\\u22B5', '\\u20D2'},\n-\t\"nvsim;\":                   {'\\u223C', '\\u20D2'},\n-\t\"race;\":                    {'\\u223D', '\\u0331'},\n-\t\"smtes;\":                   {'\\u2AAC', '\\uFE00'},\n-\t\"sqcaps;\":                  {'\\u2293', '\\uFE00'},\n-\t\"sqcups;\":                  {'\\u2294', '\\uFE00'},\n-\t\"varsubsetneq;\":            {'\\u228A', '\\uFE00'},\n-\t\"varsubsetneqq;\":           {'\\u2ACB', '\\uFE00'},\n-\t\"varsupsetneq;\":            {'\\u228B', '\\uFE00'},\n-\t\"varsupsetneqq;\":           {'\\u2ACC', '\\uFE00'},\n-\t\"vnsub;\":                   {'\\u2282', '\\u20D2'},\n-\t\"vnsup;\":                   {'\\u2283', '\\u20D2'},\n-\t\"vsubnE;\":                  {'\\u2ACB', '\\uFE00'},\n-\t\"vsubne;\":                  {'\\u228A', '\\uFE00'},\n-\t\"vsupnE;\":                  {'\\u2ACC', '\\uFE00'},\n-\t\"vsupne;\":                  {'\\u228B', '\\uFE00'},\n-}"}, {"sha": "b53f866fa2ddff6f22e9c9c831c8eabb1d7197b2", "filename": "libgo/go/exp/html/entity_test.go", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fentity_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fentity_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fentity_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"testing\"\n-\t\"unicode/utf8\"\n-)\n-\n-func TestEntityLength(t *testing.T) {\n-\t// We verify that the length of UTF-8 encoding of each value is <= 1 + len(key).\n-\t// The +1 comes from the leading \"&\". This property implies that the length of\n-\t// unescaped text is <= the length of escaped text.\n-\tfor k, v := range entity {\n-\t\tif 1+len(k) < utf8.RuneLen(v) {\n-\t\t\tt.Error(\"escaped entity &\" + k + \" is shorter than its UTF-8 encoding \" + string(v))\n-\t\t}\n-\t\tif len(k) > longestEntityWithoutSemicolon && k[len(k)-1] != ';' {\n-\t\t\tt.Errorf(\"entity name %s is %d characters, but longestEntityWithoutSemicolon=%d\", k, len(k), longestEntityWithoutSemicolon)\n-\t\t}\n-\t}\n-\tfor k, v := range entity2 {\n-\t\tif 1+len(k) < utf8.RuneLen(v[0])+utf8.RuneLen(v[1]) {\n-\t\t\tt.Error(\"escaped entity &\" + k + \" is shorter than its UTF-8 encoding \" + string(v[0]) + string(v[1]))\n-\t\t}\n-\t}\n-}"}, {"sha": "75bddff094f3cb70e1cc0c7936ebdd458612e422", "filename": "libgo/go/exp/html/escape.go", "status": "removed", "additions": 0, "deletions": 258, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fescape.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,258 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"bytes\"\n-\t\"strings\"\n-\t\"unicode/utf8\"\n-)\n-\n-// These replacements permit compatibility with old numeric entities that\n-// assumed Windows-1252 encoding.\n-// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference\n-var replacementTable = [...]rune{\n-\t'\\u20AC', // First entry is what 0x80 should be replaced with.\n-\t'\\u0081',\n-\t'\\u201A',\n-\t'\\u0192',\n-\t'\\u201E',\n-\t'\\u2026',\n-\t'\\u2020',\n-\t'\\u2021',\n-\t'\\u02C6',\n-\t'\\u2030',\n-\t'\\u0160',\n-\t'\\u2039',\n-\t'\\u0152',\n-\t'\\u008D',\n-\t'\\u017D',\n-\t'\\u008F',\n-\t'\\u0090',\n-\t'\\u2018',\n-\t'\\u2019',\n-\t'\\u201C',\n-\t'\\u201D',\n-\t'\\u2022',\n-\t'\\u2013',\n-\t'\\u2014',\n-\t'\\u02DC',\n-\t'\\u2122',\n-\t'\\u0161',\n-\t'\\u203A',\n-\t'\\u0153',\n-\t'\\u009D',\n-\t'\\u017E',\n-\t'\\u0178', // Last entry is 0x9F.\n-\t// 0x00->'\\uFFFD' is handled programmatically.\n-\t// 0x0D->'\\u000D' is a no-op.\n-}\n-\n-// unescapeEntity reads an entity like \"&lt;\" from b[src:] and writes the\n-// corresponding \"<\" to b[dst:], returning the incremented dst and src cursors.\n-// Precondition: b[src] == '&' && dst <= src.\n-// attribute should be true if parsing an attribute value.\n-func unescapeEntity(b []byte, dst, src int, attribute bool) (dst1, src1 int) {\n-\t// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference\n-\n-\t// i starts at 1 because we already know that s[0] == '&'.\n-\ti, s := 1, b[src:]\n-\n-\tif len(s) <= 1 {\n-\t\tb[dst] = b[src]\n-\t\treturn dst + 1, src + 1\n-\t}\n-\n-\tif s[i] == '#' {\n-\t\tif len(s) <= 3 { // We need to have at least \"&#.\".\n-\t\t\tb[dst] = b[src]\n-\t\t\treturn dst + 1, src + 1\n-\t\t}\n-\t\ti++\n-\t\tc := s[i]\n-\t\thex := false\n-\t\tif c == 'x' || c == 'X' {\n-\t\t\thex = true\n-\t\t\ti++\n-\t\t}\n-\n-\t\tx := '\\x00'\n-\t\tfor i < len(s) {\n-\t\t\tc = s[i]\n-\t\t\ti++\n-\t\t\tif hex {\n-\t\t\t\tif '0' <= c && c <= '9' {\n-\t\t\t\t\tx = 16*x + rune(c) - '0'\n-\t\t\t\t\tcontinue\n-\t\t\t\t} else if 'a' <= c && c <= 'f' {\n-\t\t\t\t\tx = 16*x + rune(c) - 'a' + 10\n-\t\t\t\t\tcontinue\n-\t\t\t\t} else if 'A' <= c && c <= 'F' {\n-\t\t\t\t\tx = 16*x + rune(c) - 'A' + 10\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t} else if '0' <= c && c <= '9' {\n-\t\t\t\tx = 10*x + rune(c) - '0'\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\tif c != ';' {\n-\t\t\t\ti--\n-\t\t\t}\n-\t\t\tbreak\n-\t\t}\n-\n-\t\tif i <= 3 { // No characters matched.\n-\t\t\tb[dst] = b[src]\n-\t\t\treturn dst + 1, src + 1\n-\t\t}\n-\n-\t\tif 0x80 <= x && x <= 0x9F {\n-\t\t\t// Replace characters from Windows-1252 with UTF-8 equivalents.\n-\t\t\tx = replacementTable[x-0x80]\n-\t\t} else if x == 0 || (0xD800 <= x && x <= 0xDFFF) || x > 0x10FFFF {\n-\t\t\t// Replace invalid characters with the replacement character.\n-\t\t\tx = '\\uFFFD'\n-\t\t}\n-\n-\t\treturn dst + utf8.EncodeRune(b[dst:], x), src + i\n-\t}\n-\n-\t// Consume the maximum number of characters possible, with the\n-\t// consumed characters matching one of the named references.\n-\n-\tfor i < len(s) {\n-\t\tc := s[i]\n-\t\ti++\n-\t\t// Lower-cased characters are more common in entities, so we check for them first.\n-\t\tif 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' || '0' <= c && c <= '9' {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif c != ';' {\n-\t\t\ti--\n-\t\t}\n-\t\tbreak\n-\t}\n-\n-\tentityName := string(s[1:i])\n-\tif entityName == \"\" {\n-\t\t// No-op.\n-\t} else if attribute && entityName[len(entityName)-1] != ';' && len(s) > i && s[i] == '=' {\n-\t\t// No-op.\n-\t} else if x := entity[entityName]; x != 0 {\n-\t\treturn dst + utf8.EncodeRune(b[dst:], x), src + i\n-\t} else if x := entity2[entityName]; x[0] != 0 {\n-\t\tdst1 := dst + utf8.EncodeRune(b[dst:], x[0])\n-\t\treturn dst1 + utf8.EncodeRune(b[dst1:], x[1]), src + i\n-\t} else if !attribute {\n-\t\tmaxLen := len(entityName) - 1\n-\t\tif maxLen > longestEntityWithoutSemicolon {\n-\t\t\tmaxLen = longestEntityWithoutSemicolon\n-\t\t}\n-\t\tfor j := maxLen; j > 1; j-- {\n-\t\t\tif x := entity[entityName[:j]]; x != 0 {\n-\t\t\t\treturn dst + utf8.EncodeRune(b[dst:], x), src + j + 1\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tdst1, src1 = dst+i, src+i\n-\tcopy(b[dst:dst1], b[src:src1])\n-\treturn dst1, src1\n-}\n-\n-// unescape unescapes b's entities in-place, so that \"a&lt;b\" becomes \"a<b\".\n-// attribute should be true if parsing an attribute value.\n-func unescape(b []byte, attribute bool) []byte {\n-\tfor i, c := range b {\n-\t\tif c == '&' {\n-\t\t\tdst, src := unescapeEntity(b, i, i, attribute)\n-\t\t\tfor src < len(b) {\n-\t\t\t\tc := b[src]\n-\t\t\t\tif c == '&' {\n-\t\t\t\t\tdst, src = unescapeEntity(b, dst, src, attribute)\n-\t\t\t\t} else {\n-\t\t\t\t\tb[dst] = c\n-\t\t\t\t\tdst, src = dst+1, src+1\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn b[0:dst]\n-\t\t}\n-\t}\n-\treturn b\n-}\n-\n-// lower lower-cases the A-Z bytes in b in-place, so that \"aBc\" becomes \"abc\".\n-func lower(b []byte) []byte {\n-\tfor i, c := range b {\n-\t\tif 'A' <= c && c <= 'Z' {\n-\t\t\tb[i] = c + 'a' - 'A'\n-\t\t}\n-\t}\n-\treturn b\n-}\n-\n-const escapedChars = \"&'<>\\\"\\r\"\n-\n-func escape(w writer, s string) error {\n-\ti := strings.IndexAny(s, escapedChars)\n-\tfor i != -1 {\n-\t\tif _, err := w.WriteString(s[:i]); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tvar esc string\n-\t\tswitch s[i] {\n-\t\tcase '&':\n-\t\t\tesc = \"&amp;\"\n-\t\tcase '\\'':\n-\t\t\t// \"&#39;\" is shorter than \"&apos;\" and apos was not in HTML until HTML5.\n-\t\t\tesc = \"&#39;\"\n-\t\tcase '<':\n-\t\t\tesc = \"&lt;\"\n-\t\tcase '>':\n-\t\t\tesc = \"&gt;\"\n-\t\tcase '\"':\n-\t\t\t// \"&#34;\" is shorter than \"&quot;\".\n-\t\t\tesc = \"&#34;\"\n-\t\tcase '\\r':\n-\t\t\tesc = \"&#13;\"\n-\t\tdefault:\n-\t\t\tpanic(\"unrecognized escape character\")\n-\t\t}\n-\t\ts = s[i+1:]\n-\t\tif _, err := w.WriteString(esc); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\ti = strings.IndexAny(s, escapedChars)\n-\t}\n-\t_, err := w.WriteString(s)\n-\treturn err\n-}\n-\n-// EscapeString escapes special characters like \"<\" to become \"&lt;\". It\n-// escapes only five such characters: <, >, &, ' and \".\n-// UnescapeString(EscapeString(s)) == s always holds, but the converse isn't\n-// always true.\n-func EscapeString(s string) string {\n-\tif strings.IndexAny(s, escapedChars) == -1 {\n-\t\treturn s\n-\t}\n-\tvar buf bytes.Buffer\n-\tescape(&buf, s)\n-\treturn buf.String()\n-}\n-\n-// UnescapeString unescapes entities like \"&lt;\" to become \"<\". It unescapes a\n-// larger range of entities than EscapeString escapes. For example, \"&aacute;\"\n-// unescapes to \"\u00e1\", as does \"&#225;\" and \"&xE1;\".\n-// UnescapeString(EscapeString(s)) == s always holds, but the converse isn't\n-// always true.\n-func UnescapeString(s string) string {\n-\tfor _, c := range s {\n-\t\tif c == '&' {\n-\t\t\treturn string(unescape([]byte(s), false))\n-\t\t}\n-\t}\n-\treturn s\n-}"}, {"sha": "d3b3844099bf151b97131dde31a161b7de630053", "filename": "libgo/go/exp/html/foreign.go", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fforeign.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fforeign.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fforeign.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,226 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"strings\"\n-)\n-\n-func adjustAttributeNames(aa []Attribute, nameMap map[string]string) {\n-\tfor i := range aa {\n-\t\tif newName, ok := nameMap[aa[i].Key]; ok {\n-\t\t\taa[i].Key = newName\n-\t\t}\n-\t}\n-}\n-\n-func adjustForeignAttributes(aa []Attribute) {\n-\tfor i, a := range aa {\n-\t\tif a.Key == \"\" || a.Key[0] != 'x' {\n-\t\t\tcontinue\n-\t\t}\n-\t\tswitch a.Key {\n-\t\tcase \"xlink:actuate\", \"xlink:arcrole\", \"xlink:href\", \"xlink:role\", \"xlink:show\",\n-\t\t\t\"xlink:title\", \"xlink:type\", \"xml:base\", \"xml:lang\", \"xml:space\", \"xmlns:xlink\":\n-\t\t\tj := strings.Index(a.Key, \":\")\n-\t\t\taa[i].Namespace = a.Key[:j]\n-\t\t\taa[i].Key = a.Key[j+1:]\n-\t\t}\n-\t}\n-}\n-\n-func htmlIntegrationPoint(n *Node) bool {\n-\tif n.Type != ElementNode {\n-\t\treturn false\n-\t}\n-\tswitch n.Namespace {\n-\tcase \"math\":\n-\t\tif n.Data == \"annotation-xml\" {\n-\t\t\tfor _, a := range n.Attr {\n-\t\t\t\tif a.Key == \"encoding\" {\n-\t\t\t\t\tval := strings.ToLower(a.Val)\n-\t\t\t\t\tif val == \"text/html\" || val == \"application/xhtml+xml\" {\n-\t\t\t\t\t\treturn true\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\tcase \"svg\":\n-\t\tswitch n.Data {\n-\t\tcase \"desc\", \"foreignObject\", \"title\":\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\treturn false\n-}\n-\n-func mathMLTextIntegrationPoint(n *Node) bool {\n-\tif n.Namespace != \"math\" {\n-\t\treturn false\n-\t}\n-\tswitch n.Data {\n-\tcase \"mi\", \"mo\", \"mn\", \"ms\", \"mtext\":\n-\t\treturn true\n-\t}\n-\treturn false\n-}\n-\n-// Section 12.2.5.5.\n-var breakout = map[string]bool{\n-\t\"b\":          true,\n-\t\"big\":        true,\n-\t\"blockquote\": true,\n-\t\"body\":       true,\n-\t\"br\":         true,\n-\t\"center\":     true,\n-\t\"code\":       true,\n-\t\"dd\":         true,\n-\t\"div\":        true,\n-\t\"dl\":         true,\n-\t\"dt\":         true,\n-\t\"em\":         true,\n-\t\"embed\":      true,\n-\t\"h1\":         true,\n-\t\"h2\":         true,\n-\t\"h3\":         true,\n-\t\"h4\":         true,\n-\t\"h5\":         true,\n-\t\"h6\":         true,\n-\t\"head\":       true,\n-\t\"hr\":         true,\n-\t\"i\":          true,\n-\t\"img\":        true,\n-\t\"li\":         true,\n-\t\"listing\":    true,\n-\t\"menu\":       true,\n-\t\"meta\":       true,\n-\t\"nobr\":       true,\n-\t\"ol\":         true,\n-\t\"p\":          true,\n-\t\"pre\":        true,\n-\t\"ruby\":       true,\n-\t\"s\":          true,\n-\t\"small\":      true,\n-\t\"span\":       true,\n-\t\"strong\":     true,\n-\t\"strike\":     true,\n-\t\"sub\":        true,\n-\t\"sup\":        true,\n-\t\"table\":      true,\n-\t\"tt\":         true,\n-\t\"u\":          true,\n-\t\"ul\":         true,\n-\t\"var\":        true,\n-}\n-\n-// Section 12.2.5.5.\n-var svgTagNameAdjustments = map[string]string{\n-\t\"altglyph\":            \"altGlyph\",\n-\t\"altglyphdef\":         \"altGlyphDef\",\n-\t\"altglyphitem\":        \"altGlyphItem\",\n-\t\"animatecolor\":        \"animateColor\",\n-\t\"animatemotion\":       \"animateMotion\",\n-\t\"animatetransform\":    \"animateTransform\",\n-\t\"clippath\":            \"clipPath\",\n-\t\"feblend\":             \"feBlend\",\n-\t\"fecolormatrix\":       \"feColorMatrix\",\n-\t\"fecomponenttransfer\": \"feComponentTransfer\",\n-\t\"fecomposite\":         \"feComposite\",\n-\t\"feconvolvematrix\":    \"feConvolveMatrix\",\n-\t\"fediffuselighting\":   \"feDiffuseLighting\",\n-\t\"fedisplacementmap\":   \"feDisplacementMap\",\n-\t\"fedistantlight\":      \"feDistantLight\",\n-\t\"feflood\":             \"feFlood\",\n-\t\"fefunca\":             \"feFuncA\",\n-\t\"fefuncb\":             \"feFuncB\",\n-\t\"fefuncg\":             \"feFuncG\",\n-\t\"fefuncr\":             \"feFuncR\",\n-\t\"fegaussianblur\":      \"feGaussianBlur\",\n-\t\"feimage\":             \"feImage\",\n-\t\"femerge\":             \"feMerge\",\n-\t\"femergenode\":         \"feMergeNode\",\n-\t\"femorphology\":        \"feMorphology\",\n-\t\"feoffset\":            \"feOffset\",\n-\t\"fepointlight\":        \"fePointLight\",\n-\t\"fespecularlighting\":  \"feSpecularLighting\",\n-\t\"fespotlight\":         \"feSpotLight\",\n-\t\"fetile\":              \"feTile\",\n-\t\"feturbulence\":        \"feTurbulence\",\n-\t\"foreignobject\":       \"foreignObject\",\n-\t\"glyphref\":            \"glyphRef\",\n-\t\"lineargradient\":      \"linearGradient\",\n-\t\"radialgradient\":      \"radialGradient\",\n-\t\"textpath\":            \"textPath\",\n-}\n-\n-// Section 12.2.5.1\n-var mathMLAttributeAdjustments = map[string]string{\n-\t\"definitionurl\": \"definitionURL\",\n-}\n-\n-var svgAttributeAdjustments = map[string]string{\n-\t\"attributename\":             \"attributeName\",\n-\t\"attributetype\":             \"attributeType\",\n-\t\"basefrequency\":             \"baseFrequency\",\n-\t\"baseprofile\":               \"baseProfile\",\n-\t\"calcmode\":                  \"calcMode\",\n-\t\"clippathunits\":             \"clipPathUnits\",\n-\t\"contentscripttype\":         \"contentScriptType\",\n-\t\"contentstyletype\":          \"contentStyleType\",\n-\t\"diffuseconstant\":           \"diffuseConstant\",\n-\t\"edgemode\":                  \"edgeMode\",\n-\t\"externalresourcesrequired\": \"externalResourcesRequired\",\n-\t\"filterres\":                 \"filterRes\",\n-\t\"filterunits\":               \"filterUnits\",\n-\t\"glyphref\":                  \"glyphRef\",\n-\t\"gradienttransform\":         \"gradientTransform\",\n-\t\"gradientunits\":             \"gradientUnits\",\n-\t\"kernelmatrix\":              \"kernelMatrix\",\n-\t\"kernelunitlength\":          \"kernelUnitLength\",\n-\t\"keypoints\":                 \"keyPoints\",\n-\t\"keysplines\":                \"keySplines\",\n-\t\"keytimes\":                  \"keyTimes\",\n-\t\"lengthadjust\":              \"lengthAdjust\",\n-\t\"limitingconeangle\":         \"limitingConeAngle\",\n-\t\"markerheight\":              \"markerHeight\",\n-\t\"markerunits\":               \"markerUnits\",\n-\t\"markerwidth\":               \"markerWidth\",\n-\t\"maskcontentunits\":          \"maskContentUnits\",\n-\t\"maskunits\":                 \"maskUnits\",\n-\t\"numoctaves\":                \"numOctaves\",\n-\t\"pathlength\":                \"pathLength\",\n-\t\"patterncontentunits\":       \"patternContentUnits\",\n-\t\"patterntransform\":          \"patternTransform\",\n-\t\"patternunits\":              \"patternUnits\",\n-\t\"pointsatx\":                 \"pointsAtX\",\n-\t\"pointsaty\":                 \"pointsAtY\",\n-\t\"pointsatz\":                 \"pointsAtZ\",\n-\t\"preservealpha\":             \"preserveAlpha\",\n-\t\"preserveaspectratio\":       \"preserveAspectRatio\",\n-\t\"primitiveunits\":            \"primitiveUnits\",\n-\t\"refx\":                      \"refX\",\n-\t\"refy\":                      \"refY\",\n-\t\"repeatcount\":               \"repeatCount\",\n-\t\"repeatdur\":                 \"repeatDur\",\n-\t\"requiredextensions\":        \"requiredExtensions\",\n-\t\"requiredfeatures\":          \"requiredFeatures\",\n-\t\"specularconstant\":          \"specularConstant\",\n-\t\"specularexponent\":          \"specularExponent\",\n-\t\"spreadmethod\":              \"spreadMethod\",\n-\t\"startoffset\":               \"startOffset\",\n-\t\"stddeviation\":              \"stdDeviation\",\n-\t\"stitchtiles\":               \"stitchTiles\",\n-\t\"surfacescale\":              \"surfaceScale\",\n-\t\"systemlanguage\":            \"systemLanguage\",\n-\t\"tablevalues\":               \"tableValues\",\n-\t\"targetx\":                   \"targetX\",\n-\t\"targety\":                   \"targetY\",\n-\t\"textlength\":                \"textLength\",\n-\t\"viewbox\":                   \"viewBox\",\n-\t\"viewtarget\":                \"viewTarget\",\n-\t\"xchannelselector\":          \"xChannelSelector\",\n-\t\"ychannelselector\":          \"yChannelSelector\",\n-\t\"zoomandpan\":                \"zoomAndPan\",\n-}"}, {"sha": "01f8c42ce3af74b1f4b0c4c0600126f026b70c02", "filename": "libgo/go/exp/html/node.go", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fnode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fnode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fnode.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,193 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"exp/html/atom\"\n-)\n-\n-// A NodeType is the type of a Node.\n-type NodeType uint32\n-\n-const (\n-\tErrorNode NodeType = iota\n-\tTextNode\n-\tDocumentNode\n-\tElementNode\n-\tCommentNode\n-\tDoctypeNode\n-\tscopeMarkerNode\n-)\n-\n-// Section 12.2.3.3 says \"scope markers are inserted when entering applet\n-// elements, buttons, object elements, marquees, table cells, and table\n-// captions, and are used to prevent formatting from 'leaking'\".\n-var scopeMarker = Node{Type: scopeMarkerNode}\n-\n-// A Node consists of a NodeType and some Data (tag name for element nodes,\n-// content for text) and are part of a tree of Nodes. Element nodes may also\n-// have a Namespace and contain a slice of Attributes. Data is unescaped, so\n-// that it looks like \"a<b\" rather than \"a&lt;b\". For element nodes, DataAtom\n-// is the atom for Data, or zero if Data is not a known tag name.\n-//\n-// An empty Namespace implies a \"http://www.w3.org/1999/xhtml\" namespace.\n-// Similarly, \"math\" is short for \"http://www.w3.org/1998/Math/MathML\", and\n-// \"svg\" is short for \"http://www.w3.org/2000/svg\".\n-type Node struct {\n-\tParent, FirstChild, LastChild, PrevSibling, NextSibling *Node\n-\n-\tType      NodeType\n-\tDataAtom  atom.Atom\n-\tData      string\n-\tNamespace string\n-\tAttr      []Attribute\n-}\n-\n-// InsertBefore inserts newChild as a child of n, immediately before oldChild\n-// in the sequence of n's children. oldChild may be nil, in which case newChild\n-// is appended to the end of n's children.\n-//\n-// It will panic if newChild already has a parent or siblings.\n-func (n *Node) InsertBefore(newChild, oldChild *Node) {\n-\tif newChild.Parent != nil || newChild.PrevSibling != nil || newChild.NextSibling != nil {\n-\t\tpanic(\"html: InsertBefore called for an attached child Node\")\n-\t}\n-\tvar prev, next *Node\n-\tif oldChild != nil {\n-\t\tprev, next = oldChild.PrevSibling, oldChild\n-\t} else {\n-\t\tprev = n.LastChild\n-\t}\n-\tif prev != nil {\n-\t\tprev.NextSibling = newChild\n-\t} else {\n-\t\tn.FirstChild = newChild\n-\t}\n-\tif next != nil {\n-\t\tnext.PrevSibling = newChild\n-\t} else {\n-\t\tn.LastChild = newChild\n-\t}\n-\tnewChild.Parent = n\n-\tnewChild.PrevSibling = prev\n-\tnewChild.NextSibling = next\n-}\n-\n-// AppendChild adds a node c as a child of n.\n-//\n-// It will panic if c already has a parent or siblings.\n-func (n *Node) AppendChild(c *Node) {\n-\tif c.Parent != nil || c.PrevSibling != nil || c.NextSibling != nil {\n-\t\tpanic(\"html: AppendChild called for an attached child Node\")\n-\t}\n-\tlast := n.LastChild\n-\tif last != nil {\n-\t\tlast.NextSibling = c\n-\t} else {\n-\t\tn.FirstChild = c\n-\t}\n-\tn.LastChild = c\n-\tc.Parent = n\n-\tc.PrevSibling = last\n-}\n-\n-// RemoveChild removes a node c that is a child of n. Afterwards, c will have\n-// no parent and no siblings.\n-//\n-// It will panic if c's parent is not n.\n-func (n *Node) RemoveChild(c *Node) {\n-\tif c.Parent != n {\n-\t\tpanic(\"html: RemoveChild called for a non-child Node\")\n-\t}\n-\tif n.FirstChild == c {\n-\t\tn.FirstChild = c.NextSibling\n-\t}\n-\tif c.NextSibling != nil {\n-\t\tc.NextSibling.PrevSibling = c.PrevSibling\n-\t}\n-\tif n.LastChild == c {\n-\t\tn.LastChild = c.PrevSibling\n-\t}\n-\tif c.PrevSibling != nil {\n-\t\tc.PrevSibling.NextSibling = c.NextSibling\n-\t}\n-\tc.Parent = nil\n-\tc.PrevSibling = nil\n-\tc.NextSibling = nil\n-}\n-\n-// reparentChildren reparents all of src's child nodes to dst.\n-func reparentChildren(dst, src *Node) {\n-\tfor {\n-\t\tchild := src.FirstChild\n-\t\tif child == nil {\n-\t\t\tbreak\n-\t\t}\n-\t\tsrc.RemoveChild(child)\n-\t\tdst.AppendChild(child)\n-\t}\n-}\n-\n-// clone returns a new node with the same type, data and attributes.\n-// The clone has no parent, no siblings and no children.\n-func (n *Node) clone() *Node {\n-\tm := &Node{\n-\t\tType:     n.Type,\n-\t\tDataAtom: n.DataAtom,\n-\t\tData:     n.Data,\n-\t\tAttr:     make([]Attribute, len(n.Attr)),\n-\t}\n-\tcopy(m.Attr, n.Attr)\n-\treturn m\n-}\n-\n-// nodeStack is a stack of nodes.\n-type nodeStack []*Node\n-\n-// pop pops the stack. It will panic if s is empty.\n-func (s *nodeStack) pop() *Node {\n-\ti := len(*s)\n-\tn := (*s)[i-1]\n-\t*s = (*s)[:i-1]\n-\treturn n\n-}\n-\n-// top returns the most recently pushed node, or nil if s is empty.\n-func (s *nodeStack) top() *Node {\n-\tif i := len(*s); i > 0 {\n-\t\treturn (*s)[i-1]\n-\t}\n-\treturn nil\n-}\n-\n-// index returns the index of the top-most occurrence of n in the stack, or -1\n-// if n is not present.\n-func (s *nodeStack) index(n *Node) int {\n-\tfor i := len(*s) - 1; i >= 0; i-- {\n-\t\tif (*s)[i] == n {\n-\t\t\treturn i\n-\t\t}\n-\t}\n-\treturn -1\n-}\n-\n-// insert inserts a node at the given index.\n-func (s *nodeStack) insert(i int, n *Node) {\n-\t(*s) = append(*s, nil)\n-\tcopy((*s)[i+1:], (*s)[i:])\n-\t(*s)[i] = n\n-}\n-\n-// remove removes a node from the stack. It is a no-op if n is not present.\n-func (s *nodeStack) remove(n *Node) {\n-\ti := s.index(n)\n-\tif i == -1 {\n-\t\treturn\n-\t}\n-\tcopy((*s)[i:], (*s)[i+1:])\n-\tj := len(*s) - 1\n-\t(*s)[j] = nil\n-\t*s = (*s)[:j]\n-}"}, {"sha": "471102f3a2218e2d19c882fbc94e0c7d7b1fb046", "filename": "libgo/go/exp/html/node_test.go", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fnode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fnode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fnode_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,146 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"fmt\"\n-)\n-\n-// checkTreeConsistency checks that a node and its descendants are all\n-// consistent in their parent/child/sibling relationships.\n-func checkTreeConsistency(n *Node) error {\n-\treturn checkTreeConsistency1(n, 0)\n-}\n-\n-func checkTreeConsistency1(n *Node, depth int) error {\n-\tif depth == 1e4 {\n-\t\treturn fmt.Errorf(\"html: tree looks like it contains a cycle\")\n-\t}\n-\tif err := checkNodeConsistency(n); err != nil {\n-\t\treturn err\n-\t}\n-\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\tif err := checkTreeConsistency1(c, depth+1); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t}\n-\treturn nil\n-}\n-\n-// checkNodeConsistency checks that a node's parent/child/sibling relationships\n-// are consistent.\n-func checkNodeConsistency(n *Node) error {\n-\tif n == nil {\n-\t\treturn nil\n-\t}\n-\n-\tnParent := 0\n-\tfor p := n.Parent; p != nil; p = p.Parent {\n-\t\tnParent++\n-\t\tif nParent == 1e4 {\n-\t\t\treturn fmt.Errorf(\"html: parent list looks like an infinite loop\")\n-\t\t}\n-\t}\n-\n-\tnForward := 0\n-\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\tnForward++\n-\t\tif nForward == 1e6 {\n-\t\t\treturn fmt.Errorf(\"html: forward list of children looks like an infinite loop\")\n-\t\t}\n-\t\tif c.Parent != n {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent child/parent relationship\")\n-\t\t}\n-\t}\n-\n-\tnBackward := 0\n-\tfor c := n.LastChild; c != nil; c = c.PrevSibling {\n-\t\tnBackward++\n-\t\tif nBackward == 1e6 {\n-\t\t\treturn fmt.Errorf(\"html: backward list of children looks like an infinite loop\")\n-\t\t}\n-\t\tif c.Parent != n {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent child/parent relationship\")\n-\t\t}\n-\t}\n-\n-\tif n.Parent != nil {\n-\t\tif n.Parent == n {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent relationship\")\n-\t\t}\n-\t\tif n.Parent == n.FirstChild {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent/first relationship\")\n-\t\t}\n-\t\tif n.Parent == n.LastChild {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent/last relationship\")\n-\t\t}\n-\t\tif n.Parent == n.PrevSibling {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent/prev relationship\")\n-\t\t}\n-\t\tif n.Parent == n.NextSibling {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent/next relationship\")\n-\t\t}\n-\n-\t\tparentHasNAsAChild := false\n-\t\tfor c := n.Parent.FirstChild; c != nil; c = c.NextSibling {\n-\t\t\tif c == n {\n-\t\t\t\tparentHasNAsAChild = true\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif !parentHasNAsAChild {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent parent/child relationship\")\n-\t\t}\n-\t}\n-\n-\tif n.PrevSibling != nil && n.PrevSibling.NextSibling != n {\n-\t\treturn fmt.Errorf(\"html: inconsistent prev/next relationship\")\n-\t}\n-\tif n.NextSibling != nil && n.NextSibling.PrevSibling != n {\n-\t\treturn fmt.Errorf(\"html: inconsistent next/prev relationship\")\n-\t}\n-\n-\tif (n.FirstChild == nil) != (n.LastChild == nil) {\n-\t\treturn fmt.Errorf(\"html: inconsistent first/last relationship\")\n-\t}\n-\tif n.FirstChild != nil && n.FirstChild == n.LastChild {\n-\t\t// We have a sole child.\n-\t\tif n.FirstChild.PrevSibling != nil || n.FirstChild.NextSibling != nil {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent sole child's sibling relationship\")\n-\t\t}\n-\t}\n-\n-\tseen := map[*Node]bool{}\n-\n-\tvar last *Node\n-\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\tif seen[c] {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent repeated child\")\n-\t\t}\n-\t\tseen[c] = true\n-\t\tlast = c\n-\t}\n-\tif last != n.LastChild {\n-\t\treturn fmt.Errorf(\"html: inconsistent last relationship\")\n-\t}\n-\n-\tvar first *Node\n-\tfor c := n.LastChild; c != nil; c = c.PrevSibling {\n-\t\tif !seen[c] {\n-\t\t\treturn fmt.Errorf(\"html: inconsistent missing child\")\n-\t\t}\n-\t\tdelete(seen, c)\n-\t\tfirst = c\n-\t}\n-\tif first != n.FirstChild {\n-\t\treturn fmt.Errorf(\"html: inconsistent first relationship\")\n-\t}\n-\n-\tif len(seen) != 0 {\n-\t\treturn fmt.Errorf(\"html: inconsistent forwards/backwards child list\")\n-\t}\n-\n-\treturn nil\n-}"}, {"sha": "0ff15746f2189570df063ec8482e5837e356960d", "filename": "libgo/go/exp/html/parse.go", "status": "removed", "additions": 0, "deletions": 2091, "changes": 2091, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fparse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fparse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fparse.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,2091 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"errors\"\n-\ta \"exp/html/atom\"\n-\t\"fmt\"\n-\t\"io\"\n-\t\"strings\"\n-)\n-\n-// A parser implements the HTML5 parsing algorithm:\n-// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tree-construction\n-type parser struct {\n-\t// tokenizer provides the tokens for the parser.\n-\ttokenizer *Tokenizer\n-\t// tok is the most recently read token.\n-\ttok Token\n-\t// Self-closing tags like <hr/> are treated as start tags, except that\n-\t// hasSelfClosingToken is set while they are being processed.\n-\thasSelfClosingToken bool\n-\t// doc is the document root element.\n-\tdoc *Node\n-\t// The stack of open elements (section 12.2.3.2) and active formatting\n-\t// elements (section 12.2.3.3).\n-\toe, afe nodeStack\n-\t// Element pointers (section 12.2.3.4).\n-\thead, form *Node\n-\t// Other parsing state flags (section 12.2.3.5).\n-\tscripting, framesetOK bool\n-\t// im is the current insertion mode.\n-\tim insertionMode\n-\t// originalIM is the insertion mode to go back to after completing a text\n-\t// or inTableText insertion mode.\n-\toriginalIM insertionMode\n-\t// fosterParenting is whether new elements should be inserted according to\n-\t// the foster parenting rules (section 12.2.5.3).\n-\tfosterParenting bool\n-\t// quirks is whether the parser is operating in \"quirks mode.\"\n-\tquirks bool\n-\t// fragment is whether the parser is parsing an HTML fragment.\n-\tfragment bool\n-\t// context is the context element when parsing an HTML fragment\n-\t// (section 12.4).\n-\tcontext *Node\n-}\n-\n-func (p *parser) top() *Node {\n-\tif n := p.oe.top(); n != nil {\n-\t\treturn n\n-\t}\n-\treturn p.doc\n-}\n-\n-// Stop tags for use in popUntil. These come from section 12.2.3.2.\n-var (\n-\tdefaultScopeStopTags = map[string][]a.Atom{\n-\t\t\"\":     {a.Applet, a.Caption, a.Html, a.Table, a.Td, a.Th, a.Marquee, a.Object},\n-\t\t\"math\": {a.AnnotationXml, a.Mi, a.Mn, a.Mo, a.Ms, a.Mtext},\n-\t\t\"svg\":  {a.Desc, a.ForeignObject, a.Title},\n-\t}\n-)\n-\n-type scope int\n-\n-const (\n-\tdefaultScope scope = iota\n-\tlistItemScope\n-\tbuttonScope\n-\ttableScope\n-\ttableRowScope\n-\ttableBodyScope\n-\tselectScope\n-)\n-\n-// popUntil pops the stack of open elements at the highest element whose tag\n-// is in matchTags, provided there is no higher element in the scope's stop\n-// tags (as defined in section 12.2.3.2). It returns whether or not there was\n-// such an element. If there was not, popUntil leaves the stack unchanged.\n-//\n-// For example, the set of stop tags for table scope is: \"html\", \"table\". If\n-// the stack was:\n-// [\"html\", \"body\", \"font\", \"table\", \"b\", \"i\", \"u\"]\n-// then popUntil(tableScope, \"font\") would return false, but\n-// popUntil(tableScope, \"i\") would return true and the stack would become:\n-// [\"html\", \"body\", \"font\", \"table\", \"b\"]\n-//\n-// If an element's tag is in both the stop tags and matchTags, then the stack\n-// will be popped and the function returns true (provided, of course, there was\n-// no higher element in the stack that was also in the stop tags). For example,\n-// popUntil(tableScope, \"table\") returns true and leaves:\n-// [\"html\", \"body\", \"font\"]\n-func (p *parser) popUntil(s scope, matchTags ...a.Atom) bool {\n-\tif i := p.indexOfElementInScope(s, matchTags...); i != -1 {\n-\t\tp.oe = p.oe[:i]\n-\t\treturn true\n-\t}\n-\treturn false\n-}\n-\n-// indexOfElementInScope returns the index in p.oe of the highest element whose\n-// tag is in matchTags that is in scope. If no matching element is in scope, it\n-// returns -1.\n-func (p *parser) indexOfElementInScope(s scope, matchTags ...a.Atom) int {\n-\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\ttagAtom := p.oe[i].DataAtom\n-\t\tif p.oe[i].Namespace == \"\" {\n-\t\t\tfor _, t := range matchTags {\n-\t\t\t\tif t == tagAtom {\n-\t\t\t\t\treturn i\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tswitch s {\n-\t\t\tcase defaultScope:\n-\t\t\t\t// No-op.\n-\t\t\tcase listItemScope:\n-\t\t\t\tif tagAtom == a.Ol || tagAtom == a.Ul {\n-\t\t\t\t\treturn -1\n-\t\t\t\t}\n-\t\t\tcase buttonScope:\n-\t\t\t\tif tagAtom == a.Button {\n-\t\t\t\t\treturn -1\n-\t\t\t\t}\n-\t\t\tcase tableScope:\n-\t\t\t\tif tagAtom == a.Html || tagAtom == a.Table {\n-\t\t\t\t\treturn -1\n-\t\t\t\t}\n-\t\t\tcase selectScope:\n-\t\t\t\tif tagAtom != a.Optgroup && tagAtom != a.Option {\n-\t\t\t\t\treturn -1\n-\t\t\t\t}\n-\t\t\tdefault:\n-\t\t\t\tpanic(\"unreachable\")\n-\t\t\t}\n-\t\t}\n-\t\tswitch s {\n-\t\tcase defaultScope, listItemScope, buttonScope:\n-\t\t\tfor _, t := range defaultScopeStopTags[p.oe[i].Namespace] {\n-\t\t\t\tif t == tagAtom {\n-\t\t\t\t\treturn -1\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn -1\n-}\n-\n-// elementInScope is like popUntil, except that it doesn't modify the stack of\n-// open elements.\n-func (p *parser) elementInScope(s scope, matchTags ...a.Atom) bool {\n-\treturn p.indexOfElementInScope(s, matchTags...) != -1\n-}\n-\n-// clearStackToContext pops elements off the stack of open elements until a\n-// scope-defined element is found.\n-func (p *parser) clearStackToContext(s scope) {\n-\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\ttagAtom := p.oe[i].DataAtom\n-\t\tswitch s {\n-\t\tcase tableScope:\n-\t\t\tif tagAtom == a.Html || tagAtom == a.Table {\n-\t\t\t\tp.oe = p.oe[:i+1]\n-\t\t\t\treturn\n-\t\t\t}\n-\t\tcase tableRowScope:\n-\t\t\tif tagAtom == a.Html || tagAtom == a.Tr {\n-\t\t\t\tp.oe = p.oe[:i+1]\n-\t\t\t\treturn\n-\t\t\t}\n-\t\tcase tableBodyScope:\n-\t\t\tif tagAtom == a.Html || tagAtom == a.Tbody || tagAtom == a.Tfoot || tagAtom == a.Thead {\n-\t\t\t\tp.oe = p.oe[:i+1]\n-\t\t\t\treturn\n-\t\t\t}\n-\t\tdefault:\n-\t\t\tpanic(\"unreachable\")\n-\t\t}\n-\t}\n-}\n-\n-// generateImpliedEndTags pops nodes off the stack of open elements as long as\n-// the top node has a tag name of dd, dt, li, option, optgroup, p, rp, or rt.\n-// If exceptions are specified, nodes with that name will not be popped off.\n-func (p *parser) generateImpliedEndTags(exceptions ...string) {\n-\tvar i int\n-loop:\n-\tfor i = len(p.oe) - 1; i >= 0; i-- {\n-\t\tn := p.oe[i]\n-\t\tif n.Type == ElementNode {\n-\t\t\tswitch n.DataAtom {\n-\t\t\tcase a.Dd, a.Dt, a.Li, a.Option, a.Optgroup, a.P, a.Rp, a.Rt:\n-\t\t\t\tfor _, except := range exceptions {\n-\t\t\t\t\tif n.Data == except {\n-\t\t\t\t\t\tbreak loop\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t}\n-\t\tbreak\n-\t}\n-\n-\tp.oe = p.oe[:i+1]\n-}\n-\n-// addChild adds a child node n to the top element, and pushes n onto the stack\n-// of open elements if it is an element node.\n-func (p *parser) addChild(n *Node) {\n-\tif p.shouldFosterParent() {\n-\t\tp.fosterParent(n)\n-\t} else {\n-\t\tp.top().AppendChild(n)\n-\t}\n-\n-\tif n.Type == ElementNode {\n-\t\tp.oe = append(p.oe, n)\n-\t}\n-}\n-\n-// shouldFosterParent returns whether the next node to be added should be\n-// foster parented.\n-func (p *parser) shouldFosterParent() bool {\n-\tif p.fosterParenting {\n-\t\tswitch p.top().DataAtom {\n-\t\tcase a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\treturn false\n-}\n-\n-// fosterParent adds a child node according to the foster parenting rules.\n-// Section 12.2.5.3, \"foster parenting\".\n-func (p *parser) fosterParent(n *Node) {\n-\tvar table, parent, prev *Node\n-\tvar i int\n-\tfor i = len(p.oe) - 1; i >= 0; i-- {\n-\t\tif p.oe[i].DataAtom == a.Table {\n-\t\t\ttable = p.oe[i]\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\n-\tif table == nil {\n-\t\t// The foster parent is the html element.\n-\t\tparent = p.oe[0]\n-\t} else {\n-\t\tparent = table.Parent\n-\t}\n-\tif parent == nil {\n-\t\tparent = p.oe[i-1]\n-\t}\n-\n-\tif table != nil {\n-\t\tprev = table.PrevSibling\n-\t} else {\n-\t\tprev = parent.LastChild\n-\t}\n-\tif prev != nil && prev.Type == TextNode && n.Type == TextNode {\n-\t\tprev.Data += n.Data\n-\t\treturn\n-\t}\n-\n-\tparent.InsertBefore(n, table)\n-}\n-\n-// addText adds text to the preceding node if it is a text node, or else it\n-// calls addChild with a new text node.\n-func (p *parser) addText(text string) {\n-\tif text == \"\" {\n-\t\treturn\n-\t}\n-\n-\tif p.shouldFosterParent() {\n-\t\tp.fosterParent(&Node{\n-\t\t\tType: TextNode,\n-\t\t\tData: text,\n-\t\t})\n-\t\treturn\n-\t}\n-\n-\tt := p.top()\n-\tif n := t.LastChild; n != nil && n.Type == TextNode {\n-\t\tn.Data += text\n-\t\treturn\n-\t}\n-\tp.addChild(&Node{\n-\t\tType: TextNode,\n-\t\tData: text,\n-\t})\n-}\n-\n-// addElement adds a child element based on the current token.\n-func (p *parser) addElement() {\n-\tp.addChild(&Node{\n-\t\tType:     ElementNode,\n-\t\tDataAtom: p.tok.DataAtom,\n-\t\tData:     p.tok.Data,\n-\t\tAttr:     p.tok.Attr,\n-\t})\n-}\n-\n-// Section 12.2.3.3.\n-func (p *parser) addFormattingElement() {\n-\ttagAtom, attr := p.tok.DataAtom, p.tok.Attr\n-\tp.addElement()\n-\n-\t// Implement the Noah's Ark clause, but with three per family instead of two.\n-\tidenticalElements := 0\n-findIdenticalElements:\n-\tfor i := len(p.afe) - 1; i >= 0; i-- {\n-\t\tn := p.afe[i]\n-\t\tif n.Type == scopeMarkerNode {\n-\t\t\tbreak\n-\t\t}\n-\t\tif n.Type != ElementNode {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif n.Namespace != \"\" {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif n.DataAtom != tagAtom {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif len(n.Attr) != len(attr) {\n-\t\t\tcontinue\n-\t\t}\n-\tcompareAttributes:\n-\t\tfor _, t0 := range n.Attr {\n-\t\t\tfor _, t1 := range attr {\n-\t\t\t\tif t0.Key == t1.Key && t0.Namespace == t1.Namespace && t0.Val == t1.Val {\n-\t\t\t\t\t// Found a match for this attribute, continue with the next attribute.\n-\t\t\t\t\tcontinue compareAttributes\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// If we get here, there is no attribute that matches a.\n-\t\t\t// Therefore the element is not identical to the new one.\n-\t\t\tcontinue findIdenticalElements\n-\t\t}\n-\n-\t\tidenticalElements++\n-\t\tif identicalElements >= 3 {\n-\t\t\tp.afe.remove(n)\n-\t\t}\n-\t}\n-\n-\tp.afe = append(p.afe, p.top())\n-}\n-\n-// Section 12.2.3.3.\n-func (p *parser) clearActiveFormattingElements() {\n-\tfor {\n-\t\tn := p.afe.pop()\n-\t\tif len(p.afe) == 0 || n.Type == scopeMarkerNode {\n-\t\t\treturn\n-\t\t}\n-\t}\n-}\n-\n-// Section 12.2.3.3.\n-func (p *parser) reconstructActiveFormattingElements() {\n-\tn := p.afe.top()\n-\tif n == nil {\n-\t\treturn\n-\t}\n-\tif n.Type == scopeMarkerNode || p.oe.index(n) != -1 {\n-\t\treturn\n-\t}\n-\ti := len(p.afe) - 1\n-\tfor n.Type != scopeMarkerNode && p.oe.index(n) == -1 {\n-\t\tif i == 0 {\n-\t\t\ti = -1\n-\t\t\tbreak\n-\t\t}\n-\t\ti--\n-\t\tn = p.afe[i]\n-\t}\n-\tfor {\n-\t\ti++\n-\t\tclone := p.afe[i].clone()\n-\t\tp.addChild(clone)\n-\t\tp.afe[i] = clone\n-\t\tif i == len(p.afe)-1 {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-}\n-\n-// Section 12.2.4.\n-func (p *parser) acknowledgeSelfClosingTag() {\n-\tp.hasSelfClosingToken = false\n-}\n-\n-// An insertion mode (section 12.2.3.1) is the state transition function from\n-// a particular state in the HTML5 parser's state machine. It updates the\n-// parser's fields depending on parser.tok (where ErrorToken means EOF).\n-// It returns whether the token was consumed.\n-type insertionMode func(*parser) bool\n-\n-// setOriginalIM sets the insertion mode to return to after completing a text or\n-// inTableText insertion mode.\n-// Section 12.2.3.1, \"using the rules for\".\n-func (p *parser) setOriginalIM() {\n-\tif p.originalIM != nil {\n-\t\tpanic(\"html: bad parser state: originalIM was set twice\")\n-\t}\n-\tp.originalIM = p.im\n-}\n-\n-// Section 12.2.3.1, \"reset the insertion mode\".\n-func (p *parser) resetInsertionMode() {\n-\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\tn := p.oe[i]\n-\t\tif i == 0 && p.context != nil {\n-\t\t\tn = p.context\n-\t\t}\n-\n-\t\tswitch n.DataAtom {\n-\t\tcase a.Select:\n-\t\t\tp.im = inSelectIM\n-\t\tcase a.Td, a.Th:\n-\t\t\tp.im = inCellIM\n-\t\tcase a.Tr:\n-\t\t\tp.im = inRowIM\n-\t\tcase a.Tbody, a.Thead, a.Tfoot:\n-\t\t\tp.im = inTableBodyIM\n-\t\tcase a.Caption:\n-\t\t\tp.im = inCaptionIM\n-\t\tcase a.Colgroup:\n-\t\t\tp.im = inColumnGroupIM\n-\t\tcase a.Table:\n-\t\t\tp.im = inTableIM\n-\t\tcase a.Head:\n-\t\t\tp.im = inBodyIM\n-\t\tcase a.Body:\n-\t\t\tp.im = inBodyIM\n-\t\tcase a.Frameset:\n-\t\t\tp.im = inFramesetIM\n-\t\tcase a.Html:\n-\t\t\tp.im = beforeHeadIM\n-\t\tdefault:\n-\t\t\tcontinue\n-\t\t}\n-\t\treturn\n-\t}\n-\tp.im = inBodyIM\n-}\n-\n-const whitespace = \" \\t\\r\\n\\f\"\n-\n-// Section 12.2.5.4.1.\n-func initialIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\tp.tok.Data = strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(p.tok.Data) == 0 {\n-\t\t\t// It was all whitespace, so ignore it.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.doc.AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\tn, quirks := parseDoctype(p.tok.Data)\n-\t\tp.doc.AppendChild(n)\n-\t\tp.quirks = quirks\n-\t\tp.im = beforeHTMLIM\n-\t\treturn true\n-\t}\n-\tp.quirks = true\n-\tp.im = beforeHTMLIM\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.2.\n-func beforeHTMLIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\tcase TextToken:\n-\t\tp.tok.Data = strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(p.tok.Data) == 0 {\n-\t\t\t// It was all whitespace, so ignore it.\n-\t\t\treturn true\n-\t\t}\n-\tcase StartTagToken:\n-\t\tif p.tok.DataAtom == a.Html {\n-\t\t\tp.addElement()\n-\t\t\tp.im = beforeHeadIM\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Head, a.Body, a.Html, a.Br:\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Html, a.Html.String())\n-\t\t\treturn false\n-\t\tdefault:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.doc.AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\t}\n-\tp.parseImpliedToken(StartTagToken, a.Html, a.Html.String())\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.3.\n-func beforeHeadIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\tp.tok.Data = strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(p.tok.Data) == 0 {\n-\t\t\t// It was all whitespace, so ignore it.\n-\t\t\treturn true\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Head:\n-\t\t\tp.addElement()\n-\t\t\tp.head = p.top()\n-\t\t\tp.im = inHeadIM\n-\t\t\treturn true\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Head, a.Body, a.Html, a.Br:\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Head, a.Head.String())\n-\t\t\treturn false\n-\t\tdefault:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\t}\n-\n-\tp.parseImpliedToken(StartTagToken, a.Head, a.Head.String())\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.4.\n-func inHeadIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\ts := strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(s) < len(p.tok.Data) {\n-\t\t\t// Add the initial whitespace to the current node.\n-\t\t\tp.addText(p.tok.Data[:len(p.tok.Data)-len(s)])\n-\t\t\tif s == \"\" {\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.tok.Data = s\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Base, a.Basefont, a.Bgsound, a.Command, a.Link, a.Meta:\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\treturn true\n-\t\tcase a.Script, a.Title, a.Noscript, a.Noframes, a.Style:\n-\t\t\tp.addElement()\n-\t\t\tp.setOriginalIM()\n-\t\t\tp.im = textIM\n-\t\t\treturn true\n-\t\tcase a.Head:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Head:\n-\t\t\tn := p.oe.pop()\n-\t\t\tif n.DataAtom != a.Head {\n-\t\t\t\tpanic(\"html: bad parser state: <head> element not found, in the in-head insertion mode\")\n-\t\t\t}\n-\t\t\tp.im = afterHeadIM\n-\t\t\treturn true\n-\t\tcase a.Body, a.Html, a.Br:\n-\t\t\tp.parseImpliedToken(EndTagToken, a.Head, a.Head.String())\n-\t\t\treturn false\n-\t\tdefault:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\t}\n-\n-\tp.parseImpliedToken(EndTagToken, a.Head, a.Head.String())\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.6.\n-func afterHeadIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\ts := strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(s) < len(p.tok.Data) {\n-\t\t\t// Add the initial whitespace to the current node.\n-\t\t\tp.addText(p.tok.Data[:len(p.tok.Data)-len(s)])\n-\t\t\tif s == \"\" {\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.tok.Data = s\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Body:\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inBodyIM\n-\t\t\treturn true\n-\t\tcase a.Frameset:\n-\t\t\tp.addElement()\n-\t\t\tp.im = inFramesetIM\n-\t\t\treturn true\n-\t\tcase a.Base, a.Basefont, a.Bgsound, a.Link, a.Meta, a.Noframes, a.Script, a.Style, a.Title:\n-\t\t\tp.oe = append(p.oe, p.head)\n-\t\t\tdefer p.oe.remove(p.head)\n-\t\t\treturn inHeadIM(p)\n-\t\tcase a.Head:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Body, a.Html, a.Br:\n-\t\t\t// Drop down to creating an implied <body> tag.\n-\t\tdefault:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\t}\n-\n-\tp.parseImpliedToken(StartTagToken, a.Body, a.Body.String())\n-\tp.framesetOK = true\n-\treturn false\n-}\n-\n-// copyAttributes copies attributes of src not found on dst to dst.\n-func copyAttributes(dst *Node, src Token) {\n-\tif len(src.Attr) == 0 {\n-\t\treturn\n-\t}\n-\tattr := map[string]string{}\n-\tfor _, t := range dst.Attr {\n-\t\tattr[t.Key] = t.Val\n-\t}\n-\tfor _, t := range src.Attr {\n-\t\tif _, ok := attr[t.Key]; !ok {\n-\t\t\tdst.Attr = append(dst.Attr, t)\n-\t\t\tattr[t.Key] = t.Val\n-\t\t}\n-\t}\n-}\n-\n-// Section 12.2.5.4.7.\n-func inBodyIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\td := p.tok.Data\n-\t\tswitch n := p.oe.top(); n.DataAtom {\n-\t\tcase a.Pre, a.Listing:\n-\t\t\tif n.FirstChild == nil {\n-\t\t\t\t// Ignore a newline at the start of a <pre> block.\n-\t\t\t\tif d != \"\" && d[0] == '\\r' {\n-\t\t\t\t\td = d[1:]\n-\t\t\t\t}\n-\t\t\t\tif d != \"\" && d[0] == '\\n' {\n-\t\t\t\t\td = d[1:]\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\td = strings.Replace(d, \"\\x00\", \"\", -1)\n-\t\tif d == \"\" {\n-\t\t\treturn true\n-\t\t}\n-\t\tp.reconstructActiveFormattingElements()\n-\t\tp.addText(d)\n-\t\tif p.framesetOK && strings.TrimLeft(d, whitespace) != \"\" {\n-\t\t\t// There were non-whitespace characters inserted.\n-\t\t\tp.framesetOK = false\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\tcopyAttributes(p.oe[0], p.tok)\n-\t\tcase a.Base, a.Basefont, a.Bgsound, a.Command, a.Link, a.Meta, a.Noframes, a.Script, a.Style, a.Title:\n-\t\t\treturn inHeadIM(p)\n-\t\tcase a.Body:\n-\t\t\tif len(p.oe) >= 2 {\n-\t\t\t\tbody := p.oe[1]\n-\t\t\t\tif body.Type == ElementNode && body.DataAtom == a.Body {\n-\t\t\t\t\tp.framesetOK = false\n-\t\t\t\t\tcopyAttributes(body, p.tok)\n-\t\t\t\t}\n-\t\t\t}\n-\t\tcase a.Frameset:\n-\t\t\tif !p.framesetOK || len(p.oe) < 2 || p.oe[1].DataAtom != a.Body {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tbody := p.oe[1]\n-\t\t\tif body.Parent != nil {\n-\t\t\t\tbody.Parent.RemoveChild(body)\n-\t\t\t}\n-\t\t\tp.oe = p.oe[:1]\n-\t\t\tp.addElement()\n-\t\t\tp.im = inFramesetIM\n-\t\t\treturn true\n-\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Center, a.Details, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Menu, a.Nav, a.Ol, a.P, a.Section, a.Summary, a.Ul:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\tcase a.H1, a.H2, a.H3, a.H4, a.H5, a.H6:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tswitch n := p.top(); n.DataAtom {\n-\t\t\tcase a.H1, a.H2, a.H3, a.H4, a.H5, a.H6:\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\tcase a.Pre, a.Listing:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\t\t// The newline, if any, will be dealt with by the TextToken case.\n-\t\t\tp.framesetOK = false\n-\t\tcase a.Form:\n-\t\t\tif p.form == nil {\n-\t\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\t\tp.addElement()\n-\t\t\t\tp.form = p.top()\n-\t\t\t}\n-\t\tcase a.Li:\n-\t\t\tp.framesetOK = false\n-\t\t\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\t\t\tnode := p.oe[i]\n-\t\t\t\tswitch node.DataAtom {\n-\t\t\t\tcase a.Li:\n-\t\t\t\t\tp.oe = p.oe[:i]\n-\t\t\t\tcase a.Address, a.Div, a.P:\n-\t\t\t\t\tcontinue\n-\t\t\t\tdefault:\n-\t\t\t\t\tif !isSpecialElement(node) {\n-\t\t\t\t\t\tcontinue\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\tcase a.Dd, a.Dt:\n-\t\t\tp.framesetOK = false\n-\t\t\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\t\t\tnode := p.oe[i]\n-\t\t\t\tswitch node.DataAtom {\n-\t\t\t\tcase a.Dd, a.Dt:\n-\t\t\t\t\tp.oe = p.oe[:i]\n-\t\t\t\tcase a.Address, a.Div, a.P:\n-\t\t\t\t\tcontinue\n-\t\t\t\tdefault:\n-\t\t\t\t\tif !isSpecialElement(node) {\n-\t\t\t\t\t\tcontinue\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\tcase a.Plaintext:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\tcase a.Button:\n-\t\t\tp.popUntil(defaultScope, a.Button)\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\tcase a.A:\n-\t\t\tfor i := len(p.afe) - 1; i >= 0 && p.afe[i].Type != scopeMarkerNode; i-- {\n-\t\t\t\tif n := p.afe[i]; n.Type == ElementNode && n.DataAtom == a.A {\n-\t\t\t\t\tp.inBodyEndTagFormatting(a.A)\n-\t\t\t\t\tp.oe.remove(n)\n-\t\t\t\t\tp.afe.remove(n)\n-\t\t\t\t\tbreak\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addFormattingElement()\n-\t\tcase a.B, a.Big, a.Code, a.Em, a.Font, a.I, a.S, a.Small, a.Strike, a.Strong, a.Tt, a.U:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addFormattingElement()\n-\t\tcase a.Nobr:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tif p.elementInScope(defaultScope, a.Nobr) {\n-\t\t\t\tp.inBodyEndTagFormatting(a.Nobr)\n-\t\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\t}\n-\t\t\tp.addFormattingElement()\n-\t\tcase a.Applet, a.Marquee, a.Object:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.afe = append(p.afe, &scopeMarker)\n-\t\t\tp.framesetOK = false\n-\t\tcase a.Table:\n-\t\t\tif !p.quirks {\n-\t\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inTableIM\n-\t\t\treturn true\n-\t\tcase a.Area, a.Br, a.Embed, a.Img, a.Input, a.Keygen, a.Wbr:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\tif p.tok.DataAtom == a.Input {\n-\t\t\t\tfor _, t := range p.tok.Attr {\n-\t\t\t\t\tif t.Key == \"type\" {\n-\t\t\t\t\t\tif strings.ToLower(t.Val) == \"hidden\" {\n-\t\t\t\t\t\t\t// Skip setting framesetOK = false\n-\t\t\t\t\t\t\treturn true\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tp.framesetOK = false\n-\t\tcase a.Param, a.Source, a.Track:\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\tcase a.Hr:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\tp.framesetOK = false\n-\t\tcase a.Image:\n-\t\t\tp.tok.DataAtom = a.Img\n-\t\t\tp.tok.Data = a.Img.String()\n-\t\t\treturn false\n-\t\tcase a.Isindex:\n-\t\t\tif p.form != nil {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\taction := \"\"\n-\t\t\tprompt := \"This is a searchable index. Enter search keywords: \"\n-\t\t\tattr := []Attribute{{Key: \"name\", Val: \"isindex\"}}\n-\t\t\tfor _, t := range p.tok.Attr {\n-\t\t\t\tswitch t.Key {\n-\t\t\t\tcase \"action\":\n-\t\t\t\t\taction = t.Val\n-\t\t\t\tcase \"name\":\n-\t\t\t\t\t// Ignore the attribute.\n-\t\t\t\tcase \"prompt\":\n-\t\t\t\t\tprompt = t.Val\n-\t\t\t\tdefault:\n-\t\t\t\t\tattr = append(attr, t)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Form, a.Form.String())\n-\t\t\tif action != \"\" {\n-\t\t\t\tp.form.Attr = []Attribute{{Key: \"action\", Val: action}}\n-\t\t\t}\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Hr, a.Hr.String())\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Label, a.Label.String())\n-\t\t\tp.addText(prompt)\n-\t\t\tp.addChild(&Node{\n-\t\t\t\tType:     ElementNode,\n-\t\t\t\tDataAtom: a.Input,\n-\t\t\t\tData:     a.Input.String(),\n-\t\t\t\tAttr:     attr,\n-\t\t\t})\n-\t\t\tp.oe.pop()\n-\t\t\tp.parseImpliedToken(EndTagToken, a.Label, a.Label.String())\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Hr, a.Hr.String())\n-\t\t\tp.parseImpliedToken(EndTagToken, a.Form, a.Form.String())\n-\t\tcase a.Textarea:\n-\t\t\tp.addElement()\n-\t\t\tp.setOriginalIM()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = textIM\n-\t\tcase a.Xmp:\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.addElement()\n-\t\t\tp.setOriginalIM()\n-\t\t\tp.im = textIM\n-\t\tcase a.Iframe:\n-\t\t\tp.framesetOK = false\n-\t\t\tp.addElement()\n-\t\t\tp.setOriginalIM()\n-\t\t\tp.im = textIM\n-\t\tcase a.Noembed, a.Noscript:\n-\t\t\tp.addElement()\n-\t\t\tp.setOriginalIM()\n-\t\t\tp.im = textIM\n-\t\tcase a.Select:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inSelectIM\n-\t\t\treturn true\n-\t\tcase a.Optgroup, a.Option:\n-\t\t\tif p.top().DataAtom == a.Option {\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\tcase a.Rp, a.Rt:\n-\t\t\tif p.elementInScope(defaultScope, a.Ruby) {\n-\t\t\t\tp.generateImpliedEndTags()\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\tcase a.Math, a.Svg:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tif p.tok.DataAtom == a.Math {\n-\t\t\t\tadjustAttributeNames(p.tok.Attr, mathMLAttributeAdjustments)\n-\t\t\t} else {\n-\t\t\t\tadjustAttributeNames(p.tok.Attr, svgAttributeAdjustments)\n-\t\t\t}\n-\t\t\tadjustForeignAttributes(p.tok.Attr)\n-\t\t\tp.addElement()\n-\t\t\tp.top().Namespace = p.tok.Data\n-\t\t\tif p.hasSelfClosingToken {\n-\t\t\t\tp.oe.pop()\n-\t\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\t}\n-\t\t\treturn true\n-\t\tcase a.Caption, a.Col, a.Colgroup, a.Frame, a.Head, a.Tbody, a.Td, a.Tfoot, a.Th, a.Thead, a.Tr:\n-\t\t\t// Ignore the token.\n-\t\tdefault:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Body:\n-\t\t\tif p.elementInScope(defaultScope, a.Body) {\n-\t\t\t\tp.im = afterBodyIM\n-\t\t\t}\n-\t\tcase a.Html:\n-\t\t\tif p.elementInScope(defaultScope, a.Body) {\n-\t\t\t\tp.parseImpliedToken(EndTagToken, a.Body, a.Body.String())\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\treturn true\n-\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Button, a.Center, a.Details, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Listing, a.Menu, a.Nav, a.Ol, a.Pre, a.Section, a.Summary, a.Ul:\n-\t\t\tp.popUntil(defaultScope, p.tok.DataAtom)\n-\t\tcase a.Form:\n-\t\t\tnode := p.form\n-\t\t\tp.form = nil\n-\t\t\ti := p.indexOfElementInScope(defaultScope, a.Form)\n-\t\t\tif node == nil || i == -1 || p.oe[i] != node {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.generateImpliedEndTags()\n-\t\t\tp.oe.remove(node)\n-\t\tcase a.P:\n-\t\t\tif !p.elementInScope(buttonScope, a.P) {\n-\t\t\t\tp.parseImpliedToken(StartTagToken, a.P, a.P.String())\n-\t\t\t}\n-\t\t\tp.popUntil(buttonScope, a.P)\n-\t\tcase a.Li:\n-\t\t\tp.popUntil(listItemScope, a.Li)\n-\t\tcase a.Dd, a.Dt:\n-\t\t\tp.popUntil(defaultScope, p.tok.DataAtom)\n-\t\tcase a.H1, a.H2, a.H3, a.H4, a.H5, a.H6:\n-\t\t\tp.popUntil(defaultScope, a.H1, a.H2, a.H3, a.H4, a.H5, a.H6)\n-\t\tcase a.A, a.B, a.Big, a.Code, a.Em, a.Font, a.I, a.Nobr, a.S, a.Small, a.Strike, a.Strong, a.Tt, a.U:\n-\t\t\tp.inBodyEndTagFormatting(p.tok.DataAtom)\n-\t\tcase a.Applet, a.Marquee, a.Object:\n-\t\t\tif p.popUntil(defaultScope, p.tok.DataAtom) {\n-\t\t\t\tp.clearActiveFormattingElements()\n-\t\t\t}\n-\t\tcase a.Br:\n-\t\t\tp.tok.Type = StartTagToken\n-\t\t\treturn false\n-\t\tdefault:\n-\t\t\tp.inBodyEndTagOther(p.tok.DataAtom)\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t}\n-\n-\treturn true\n-}\n-\n-func (p *parser) inBodyEndTagFormatting(tagAtom a.Atom) {\n-\t// This is the \"adoption agency\" algorithm, described at\n-\t// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#adoptionAgency\n-\n-\t// TODO: this is a fairly literal line-by-line translation of that algorithm.\n-\t// Once the code successfully parses the comprehensive test suite, we should\n-\t// refactor this code to be more idiomatic.\n-\n-\t// Steps 1-3. The outer loop.\n-\tfor i := 0; i < 8; i++ {\n-\t\t// Step 4. Find the formatting element.\n-\t\tvar formattingElement *Node\n-\t\tfor j := len(p.afe) - 1; j >= 0; j-- {\n-\t\t\tif p.afe[j].Type == scopeMarkerNode {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tif p.afe[j].DataAtom == tagAtom {\n-\t\t\t\tformattingElement = p.afe[j]\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif formattingElement == nil {\n-\t\t\tp.inBodyEndTagOther(tagAtom)\n-\t\t\treturn\n-\t\t}\n-\t\tfeIndex := p.oe.index(formattingElement)\n-\t\tif feIndex == -1 {\n-\t\t\tp.afe.remove(formattingElement)\n-\t\t\treturn\n-\t\t}\n-\t\tif !p.elementInScope(defaultScope, tagAtom) {\n-\t\t\t// Ignore the tag.\n-\t\t\treturn\n-\t\t}\n-\n-\t\t// Steps 5-6. Find the furthest block.\n-\t\tvar furthestBlock *Node\n-\t\tfor _, e := range p.oe[feIndex:] {\n-\t\t\tif isSpecialElement(e) {\n-\t\t\t\tfurthestBlock = e\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif furthestBlock == nil {\n-\t\t\te := p.oe.pop()\n-\t\t\tfor e != formattingElement {\n-\t\t\t\te = p.oe.pop()\n-\t\t\t}\n-\t\t\tp.afe.remove(e)\n-\t\t\treturn\n-\t\t}\n-\n-\t\t// Steps 7-8. Find the common ancestor and bookmark node.\n-\t\tcommonAncestor := p.oe[feIndex-1]\n-\t\tbookmark := p.afe.index(formattingElement)\n-\n-\t\t// Step 9. The inner loop. Find the lastNode to reparent.\n-\t\tlastNode := furthestBlock\n-\t\tnode := furthestBlock\n-\t\tx := p.oe.index(node)\n-\t\t// Steps 9.1-9.3.\n-\t\tfor j := 0; j < 3; j++ {\n-\t\t\t// Step 9.4.\n-\t\t\tx--\n-\t\t\tnode = p.oe[x]\n-\t\t\t// Step 9.5.\n-\t\t\tif p.afe.index(node) == -1 {\n-\t\t\t\tp.oe.remove(node)\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\t// Step 9.6.\n-\t\t\tif node == formattingElement {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\t// Step 9.7.\n-\t\t\tclone := node.clone()\n-\t\t\tp.afe[p.afe.index(node)] = clone\n-\t\t\tp.oe[p.oe.index(node)] = clone\n-\t\t\tnode = clone\n-\t\t\t// Step 9.8.\n-\t\t\tif lastNode == furthestBlock {\n-\t\t\t\tbookmark = p.afe.index(node) + 1\n-\t\t\t}\n-\t\t\t// Step 9.9.\n-\t\t\tif lastNode.Parent != nil {\n-\t\t\t\tlastNode.Parent.RemoveChild(lastNode)\n-\t\t\t}\n-\t\t\tnode.AppendChild(lastNode)\n-\t\t\t// Step 9.10.\n-\t\t\tlastNode = node\n-\t\t}\n-\n-\t\t// Step 10. Reparent lastNode to the common ancestor,\n-\t\t// or for misnested table nodes, to the foster parent.\n-\t\tif lastNode.Parent != nil {\n-\t\t\tlastNode.Parent.RemoveChild(lastNode)\n-\t\t}\n-\t\tswitch commonAncestor.DataAtom {\n-\t\tcase a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\tp.fosterParent(lastNode)\n-\t\tdefault:\n-\t\t\tcommonAncestor.AppendChild(lastNode)\n-\t\t}\n-\n-\t\t// Steps 11-13. Reparent nodes from the furthest block's children\n-\t\t// to a clone of the formatting element.\n-\t\tclone := formattingElement.clone()\n-\t\treparentChildren(clone, furthestBlock)\n-\t\tfurthestBlock.AppendChild(clone)\n-\n-\t\t// Step 14. Fix up the list of active formatting elements.\n-\t\tif oldLoc := p.afe.index(formattingElement); oldLoc != -1 && oldLoc < bookmark {\n-\t\t\t// Move the bookmark with the rest of the list.\n-\t\t\tbookmark--\n-\t\t}\n-\t\tp.afe.remove(formattingElement)\n-\t\tp.afe.insert(bookmark, clone)\n-\n-\t\t// Step 15. Fix up the stack of open elements.\n-\t\tp.oe.remove(formattingElement)\n-\t\tp.oe.insert(p.oe.index(furthestBlock)+1, clone)\n-\t}\n-}\n-\n-// inBodyEndTagOther performs the \"any other end tag\" algorithm for inBodyIM.\n-func (p *parser) inBodyEndTagOther(tagAtom a.Atom) {\n-\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\tif p.oe[i].DataAtom == tagAtom {\n-\t\t\tp.oe = p.oe[:i]\n-\t\t\tbreak\n-\t\t}\n-\t\tif isSpecialElement(p.oe[i]) {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-}\n-\n-// Section 12.2.5.4.8.\n-func textIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase ErrorToken:\n-\t\tp.oe.pop()\n-\tcase TextToken:\n-\t\td := p.tok.Data\n-\t\tif n := p.oe.top(); n.DataAtom == a.Textarea && n.FirstChild == nil {\n-\t\t\t// Ignore a newline at the start of a <textarea> block.\n-\t\t\tif d != \"\" && d[0] == '\\r' {\n-\t\t\t\td = d[1:]\n-\t\t\t}\n-\t\t\tif d != \"\" && d[0] == '\\n' {\n-\t\t\t\td = d[1:]\n-\t\t\t}\n-\t\t}\n-\t\tif d == \"\" {\n-\t\t\treturn true\n-\t\t}\n-\t\tp.addText(d)\n-\t\treturn true\n-\tcase EndTagToken:\n-\t\tp.oe.pop()\n-\t}\n-\tp.im = p.originalIM\n-\tp.originalIM = nil\n-\treturn p.tok.Type == EndTagToken\n-}\n-\n-// Section 12.2.5.4.9.\n-func inTableIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase ErrorToken:\n-\t\t// Stop parsing.\n-\t\treturn true\n-\tcase TextToken:\n-\t\tp.tok.Data = strings.Replace(p.tok.Data, \"\\x00\", \"\", -1)\n-\t\tswitch p.oe.top().DataAtom {\n-\t\tcase a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\tif strings.Trim(p.tok.Data, whitespace) == \"\" {\n-\t\t\t\tp.addText(p.tok.Data)\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Caption:\n-\t\t\tp.clearStackToContext(tableScope)\n-\t\t\tp.afe = append(p.afe, &scopeMarker)\n-\t\t\tp.addElement()\n-\t\t\tp.im = inCaptionIM\n-\t\t\treturn true\n-\t\tcase a.Colgroup:\n-\t\t\tp.clearStackToContext(tableScope)\n-\t\t\tp.addElement()\n-\t\t\tp.im = inColumnGroupIM\n-\t\t\treturn true\n-\t\tcase a.Col:\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Colgroup, a.Colgroup.String())\n-\t\t\treturn false\n-\t\tcase a.Tbody, a.Tfoot, a.Thead:\n-\t\t\tp.clearStackToContext(tableScope)\n-\t\t\tp.addElement()\n-\t\t\tp.im = inTableBodyIM\n-\t\t\treturn true\n-\t\tcase a.Td, a.Th, a.Tr:\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Tbody, a.Tbody.String())\n-\t\t\treturn false\n-\t\tcase a.Table:\n-\t\t\tif p.popUntil(tableScope, a.Table) {\n-\t\t\t\tp.resetInsertionMode()\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Style, a.Script:\n-\t\t\treturn inHeadIM(p)\n-\t\tcase a.Input:\n-\t\t\tfor _, t := range p.tok.Attr {\n-\t\t\t\tif t.Key == \"type\" && strings.ToLower(t.Val) == \"hidden\" {\n-\t\t\t\t\tp.addElement()\n-\t\t\t\t\tp.oe.pop()\n-\t\t\t\t\treturn true\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// Otherwise drop down to the default action.\n-\t\tcase a.Form:\n-\t\t\tif p.form != nil {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\t\tp.form = p.oe.pop()\n-\t\tcase a.Select:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tswitch p.top().DataAtom {\n-\t\t\tcase a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\t\tp.fosterParenting = true\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\t\tp.fosterParenting = false\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inSelectInTableIM\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Table:\n-\t\t\tif p.popUntil(tableScope, a.Table) {\n-\t\t\t\tp.resetInsertionMode()\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Body, a.Caption, a.Col, a.Colgroup, a.Html, a.Tbody, a.Td, a.Tfoot, a.Th, a.Thead, a.Tr:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\t}\n-\n-\tp.fosterParenting = true\n-\tdefer func() { p.fosterParenting = false }()\n-\n-\treturn inBodyIM(p)\n-}\n-\n-// Section 12.2.5.4.11.\n-func inCaptionIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Caption, a.Col, a.Colgroup, a.Tbody, a.Td, a.Tfoot, a.Thead, a.Tr:\n-\t\t\tif p.popUntil(tableScope, a.Caption) {\n-\t\t\t\tp.clearActiveFormattingElements()\n-\t\t\t\tp.im = inTableIM\n-\t\t\t\treturn false\n-\t\t\t} else {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\tcase a.Select:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inSelectInTableIM\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Caption:\n-\t\t\tif p.popUntil(tableScope, a.Caption) {\n-\t\t\t\tp.clearActiveFormattingElements()\n-\t\t\t\tp.im = inTableIM\n-\t\t\t}\n-\t\t\treturn true\n-\t\tcase a.Table:\n-\t\t\tif p.popUntil(tableScope, a.Caption) {\n-\t\t\t\tp.clearActiveFormattingElements()\n-\t\t\t\tp.im = inTableIM\n-\t\t\t\treturn false\n-\t\t\t} else {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\tcase a.Body, a.Col, a.Colgroup, a.Html, a.Tbody, a.Td, a.Tfoot, a.Th, a.Thead, a.Tr:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\treturn inBodyIM(p)\n-}\n-\n-// Section 12.2.5.4.12.\n-func inColumnGroupIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\ts := strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(s) < len(p.tok.Data) {\n-\t\t\t// Add the initial whitespace to the current node.\n-\t\t\tp.addText(p.tok.Data[:len(p.tok.Data)-len(s)])\n-\t\t\tif s == \"\" {\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.tok.Data = s\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Col:\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Colgroup:\n-\t\t\tif p.oe.top().DataAtom != a.Html {\n-\t\t\t\tp.oe.pop()\n-\t\t\t\tp.im = inTableIM\n-\t\t\t}\n-\t\t\treturn true\n-\t\tcase a.Col:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\tif p.oe.top().DataAtom != a.Html {\n-\t\tp.oe.pop()\n-\t\tp.im = inTableIM\n-\t\treturn false\n-\t}\n-\treturn true\n-}\n-\n-// Section 12.2.5.4.13.\n-func inTableBodyIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Tr:\n-\t\t\tp.clearStackToContext(tableBodyScope)\n-\t\t\tp.addElement()\n-\t\t\tp.im = inRowIM\n-\t\t\treturn true\n-\t\tcase a.Td, a.Th:\n-\t\t\tp.parseImpliedToken(StartTagToken, a.Tr, a.Tr.String())\n-\t\t\treturn false\n-\t\tcase a.Caption, a.Col, a.Colgroup, a.Tbody, a.Tfoot, a.Thead:\n-\t\t\tif p.popUntil(tableScope, a.Tbody, a.Thead, a.Tfoot) {\n-\t\t\t\tp.im = inTableIM\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Tbody, a.Tfoot, a.Thead:\n-\t\t\tif p.elementInScope(tableScope, p.tok.DataAtom) {\n-\t\t\t\tp.clearStackToContext(tableBodyScope)\n-\t\t\t\tp.oe.pop()\n-\t\t\t\tp.im = inTableIM\n-\t\t\t}\n-\t\t\treturn true\n-\t\tcase a.Table:\n-\t\t\tif p.popUntil(tableScope, a.Tbody, a.Thead, a.Tfoot) {\n-\t\t\t\tp.im = inTableIM\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Body, a.Caption, a.Col, a.Colgroup, a.Html, a.Td, a.Th, a.Tr:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\t}\n-\n-\treturn inTableIM(p)\n-}\n-\n-// Section 12.2.5.4.14.\n-func inRowIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Td, a.Th:\n-\t\t\tp.clearStackToContext(tableRowScope)\n-\t\t\tp.addElement()\n-\t\t\tp.afe = append(p.afe, &scopeMarker)\n-\t\t\tp.im = inCellIM\n-\t\t\treturn true\n-\t\tcase a.Caption, a.Col, a.Colgroup, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\tif p.popUntil(tableScope, a.Tr) {\n-\t\t\t\tp.im = inTableBodyIM\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Tr:\n-\t\t\tif p.popUntil(tableScope, a.Tr) {\n-\t\t\t\tp.im = inTableBodyIM\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Table:\n-\t\t\tif p.popUntil(tableScope, a.Tr) {\n-\t\t\t\tp.im = inTableBodyIM\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Tbody, a.Tfoot, a.Thead:\n-\t\t\tif p.elementInScope(tableScope, p.tok.DataAtom) {\n-\t\t\t\tp.parseImpliedToken(EndTagToken, a.Tr, a.Tr.String())\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Body, a.Caption, a.Col, a.Colgroup, a.Html, a.Td, a.Th:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\n-\treturn inTableIM(p)\n-}\n-\n-// Section 12.2.5.4.15.\n-func inCellIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Caption, a.Col, a.Colgroup, a.Tbody, a.Td, a.Tfoot, a.Th, a.Thead, a.Tr:\n-\t\t\tif p.popUntil(tableScope, a.Td, a.Th) {\n-\t\t\t\t// Close the cell and reprocess.\n-\t\t\t\tp.clearActiveFormattingElements()\n-\t\t\t\tp.im = inRowIM\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Select:\n-\t\t\tp.reconstructActiveFormattingElements()\n-\t\t\tp.addElement()\n-\t\t\tp.framesetOK = false\n-\t\t\tp.im = inSelectInTableIM\n-\t\t\treturn true\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Td, a.Th:\n-\t\t\tif !p.popUntil(tableScope, p.tok.DataAtom) {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\tp.clearActiveFormattingElements()\n-\t\t\tp.im = inRowIM\n-\t\t\treturn true\n-\t\tcase a.Body, a.Caption, a.Col, a.Colgroup, a.Html:\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr:\n-\t\t\tif !p.elementInScope(tableScope, p.tok.DataAtom) {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t\t// Close the cell and reprocess.\n-\t\t\tp.popUntil(tableScope, a.Td, a.Th)\n-\t\t\tp.clearActiveFormattingElements()\n-\t\t\tp.im = inRowIM\n-\t\t\treturn false\n-\t\t}\n-\t}\n-\treturn inBodyIM(p)\n-}\n-\n-// Section 12.2.5.4.16.\n-func inSelectIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase ErrorToken:\n-\t\t// Stop parsing.\n-\t\treturn true\n-\tcase TextToken:\n-\t\tp.addText(strings.Replace(p.tok.Data, \"\\x00\", \"\", -1))\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Option:\n-\t\t\tif p.top().DataAtom == a.Option {\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\tcase a.Optgroup:\n-\t\t\tif p.top().DataAtom == a.Option {\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\t\tif p.top().DataAtom == a.Optgroup {\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\t\tp.addElement()\n-\t\tcase a.Select:\n-\t\t\tp.tok.Type = EndTagToken\n-\t\t\treturn false\n-\t\tcase a.Input, a.Keygen, a.Textarea:\n-\t\t\tif p.elementInScope(selectScope, a.Select) {\n-\t\t\t\tp.parseImpliedToken(EndTagToken, a.Select, a.Select.String())\n-\t\t\t\treturn false\n-\t\t\t}\n-\t\t\t// In order to properly ignore <textarea>, we need to change the tokenizer mode.\n-\t\t\tp.tokenizer.NextIsNotRawText()\n-\t\t\t// Ignore the token.\n-\t\t\treturn true\n-\t\tcase a.Script:\n-\t\t\treturn inHeadIM(p)\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Option:\n-\t\t\tif p.top().DataAtom == a.Option {\n-\t\t\t\tp.oe.pop()\n-\t\t\t}\n-\t\tcase a.Optgroup:\n-\t\t\ti := len(p.oe) - 1\n-\t\t\tif p.oe[i].DataAtom == a.Option {\n-\t\t\t\ti--\n-\t\t\t}\n-\t\t\tif p.oe[i].DataAtom == a.Optgroup {\n-\t\t\t\tp.oe = p.oe[:i]\n-\t\t\t}\n-\t\tcase a.Select:\n-\t\t\tif p.popUntil(selectScope, a.Select) {\n-\t\t\t\tp.resetInsertionMode()\n-\t\t\t}\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.doc.AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\tcase DoctypeToken:\n-\t\t// Ignore the token.\n-\t\treturn true\n-\t}\n-\n-\treturn true\n-}\n-\n-// Section 12.2.5.4.17.\n-func inSelectInTableIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase StartTagToken, EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Caption, a.Table, a.Tbody, a.Tfoot, a.Thead, a.Tr, a.Td, a.Th:\n-\t\t\tif p.tok.Type == StartTagToken || p.elementInScope(tableScope, p.tok.DataAtom) {\n-\t\t\t\tp.parseImpliedToken(EndTagToken, a.Select, a.Select.String())\n-\t\t\t\treturn false\n-\t\t\t} else {\n-\t\t\t\t// Ignore the token.\n-\t\t\t\treturn true\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn inSelectIM(p)\n-}\n-\n-// Section 12.2.5.4.18.\n-func afterBodyIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase ErrorToken:\n-\t\t// Stop parsing.\n-\t\treturn true\n-\tcase TextToken:\n-\t\ts := strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(s) == 0 {\n-\t\t\t// It was all whitespace.\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase StartTagToken:\n-\t\tif p.tok.DataAtom == a.Html {\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase EndTagToken:\n-\t\tif p.tok.DataAtom == a.Html {\n-\t\t\tif !p.fragment {\n-\t\t\t\tp.im = afterAfterBodyIM\n-\t\t\t}\n-\t\t\treturn true\n-\t\t}\n-\tcase CommentToken:\n-\t\t// The comment is attached to the <html> element.\n-\t\tif len(p.oe) < 1 || p.oe[0].DataAtom != a.Html {\n-\t\t\tpanic(\"html: bad parser state: <html> element not found, in the after-body insertion mode\")\n-\t\t}\n-\t\tp.oe[0].AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\t}\n-\tp.im = inBodyIM\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.19.\n-func inFramesetIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\tcase TextToken:\n-\t\t// Ignore all text but whitespace.\n-\t\ts := strings.Map(func(c rune) rune {\n-\t\t\tswitch c {\n-\t\t\tcase ' ', '\\t', '\\n', '\\f', '\\r':\n-\t\t\t\treturn c\n-\t\t\t}\n-\t\t\treturn -1\n-\t\t}, p.tok.Data)\n-\t\tif s != \"\" {\n-\t\t\tp.addText(s)\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Frameset:\n-\t\t\tp.addElement()\n-\t\tcase a.Frame:\n-\t\t\tp.addElement()\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\tcase a.Noframes:\n-\t\t\treturn inHeadIM(p)\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Frameset:\n-\t\t\tif p.oe.top().DataAtom != a.Html {\n-\t\t\t\tp.oe.pop()\n-\t\t\t\tif p.oe.top().DataAtom != a.Frameset {\n-\t\t\t\t\tp.im = afterFramesetIM\n-\t\t\t\t\treturn true\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\tdefault:\n-\t\t// Ignore the token.\n-\t}\n-\treturn true\n-}\n-\n-// Section 12.2.5.4.20.\n-func afterFramesetIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\tcase TextToken:\n-\t\t// Ignore all text but whitespace.\n-\t\ts := strings.Map(func(c rune) rune {\n-\t\t\tswitch c {\n-\t\t\tcase ' ', '\\t', '\\n', '\\f', '\\r':\n-\t\t\t\treturn c\n-\t\t\t}\n-\t\t\treturn -1\n-\t\t}, p.tok.Data)\n-\t\tif s != \"\" {\n-\t\t\tp.addText(s)\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Noframes:\n-\t\t\treturn inHeadIM(p)\n-\t\t}\n-\tcase EndTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\tp.im = afterAfterFramesetIM\n-\t\t\treturn true\n-\t\t}\n-\tdefault:\n-\t\t// Ignore the token.\n-\t}\n-\treturn true\n-}\n-\n-// Section 12.2.5.4.21.\n-func afterAfterBodyIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase ErrorToken:\n-\t\t// Stop parsing.\n-\t\treturn true\n-\tcase TextToken:\n-\t\ts := strings.TrimLeft(p.tok.Data, whitespace)\n-\t\tif len(s) == 0 {\n-\t\t\t// It was all whitespace.\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase StartTagToken:\n-\t\tif p.tok.DataAtom == a.Html {\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase CommentToken:\n-\t\tp.doc.AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\t\treturn true\n-\tcase DoctypeToken:\n-\t\treturn inBodyIM(p)\n-\t}\n-\tp.im = inBodyIM\n-\treturn false\n-}\n-\n-// Section 12.2.5.4.22.\n-func afterAfterFramesetIM(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase CommentToken:\n-\t\tp.doc.AppendChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\tcase TextToken:\n-\t\t// Ignore all text but whitespace.\n-\t\ts := strings.Map(func(c rune) rune {\n-\t\t\tswitch c {\n-\t\t\tcase ' ', '\\t', '\\n', '\\f', '\\r':\n-\t\t\t\treturn c\n-\t\t\t}\n-\t\t\treturn -1\n-\t\t}, p.tok.Data)\n-\t\tif s != \"\" {\n-\t\t\tp.tok.Data = s\n-\t\t\treturn inBodyIM(p)\n-\t\t}\n-\tcase StartTagToken:\n-\t\tswitch p.tok.DataAtom {\n-\t\tcase a.Html:\n-\t\t\treturn inBodyIM(p)\n-\t\tcase a.Noframes:\n-\t\t\treturn inHeadIM(p)\n-\t\t}\n-\tcase DoctypeToken:\n-\t\treturn inBodyIM(p)\n-\tdefault:\n-\t\t// Ignore the token.\n-\t}\n-\treturn true\n-}\n-\n-const whitespaceOrNUL = whitespace + \"\\x00\"\n-\n-// Section 12.2.5.5.\n-func parseForeignContent(p *parser) bool {\n-\tswitch p.tok.Type {\n-\tcase TextToken:\n-\t\tif p.framesetOK {\n-\t\t\tp.framesetOK = strings.TrimLeft(p.tok.Data, whitespaceOrNUL) == \"\"\n-\t\t}\n-\t\tp.tok.Data = strings.Replace(p.tok.Data, \"\\x00\", \"\\ufffd\", -1)\n-\t\tp.addText(p.tok.Data)\n-\tcase CommentToken:\n-\t\tp.addChild(&Node{\n-\t\t\tType: CommentNode,\n-\t\t\tData: p.tok.Data,\n-\t\t})\n-\tcase StartTagToken:\n-\t\tb := breakout[p.tok.Data]\n-\t\tif p.tok.DataAtom == a.Font {\n-\t\tloop:\n-\t\t\tfor _, attr := range p.tok.Attr {\n-\t\t\t\tswitch attr.Key {\n-\t\t\t\tcase \"color\", \"face\", \"size\":\n-\t\t\t\t\tb = true\n-\t\t\t\t\tbreak loop\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif b {\n-\t\t\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\t\t\tn := p.oe[i]\n-\t\t\t\tif n.Namespace == \"\" || htmlIntegrationPoint(n) || mathMLTextIntegrationPoint(n) {\n-\t\t\t\t\tp.oe = p.oe[:i+1]\n-\t\t\t\t\tbreak\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn false\n-\t\t}\n-\t\tswitch p.top().Namespace {\n-\t\tcase \"math\":\n-\t\t\tadjustAttributeNames(p.tok.Attr, mathMLAttributeAdjustments)\n-\t\tcase \"svg\":\n-\t\t\t// Adjust SVG tag names. The tokenizer lower-cases tag names, but\n-\t\t\t// SVG wants e.g. \"foreignObject\" with a capital second \"O\".\n-\t\t\tif x := svgTagNameAdjustments[p.tok.Data]; x != \"\" {\n-\t\t\t\tp.tok.DataAtom = a.Lookup([]byte(x))\n-\t\t\t\tp.tok.Data = x\n-\t\t\t}\n-\t\t\tadjustAttributeNames(p.tok.Attr, svgAttributeAdjustments)\n-\t\tdefault:\n-\t\t\tpanic(\"html: bad parser state: unexpected namespace\")\n-\t\t}\n-\t\tadjustForeignAttributes(p.tok.Attr)\n-\t\tnamespace := p.top().Namespace\n-\t\tp.addElement()\n-\t\tp.top().Namespace = namespace\n-\t\tif namespace != \"\" {\n-\t\t\t// Don't let the tokenizer go into raw text mode in foreign content\n-\t\t\t// (e.g. in an SVG <title> tag).\n-\t\t\tp.tokenizer.NextIsNotRawText()\n-\t\t}\n-\t\tif p.hasSelfClosingToken {\n-\t\t\tp.oe.pop()\n-\t\t\tp.acknowledgeSelfClosingTag()\n-\t\t}\n-\tcase EndTagToken:\n-\t\tfor i := len(p.oe) - 1; i >= 0; i-- {\n-\t\t\tif p.oe[i].Namespace == \"\" {\n-\t\t\t\treturn p.im(p)\n-\t\t\t}\n-\t\t\tif strings.EqualFold(p.oe[i].Data, p.tok.Data) {\n-\t\t\t\tp.oe = p.oe[:i]\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\treturn true\n-\tdefault:\n-\t\t// Ignore the token.\n-\t}\n-\treturn true\n-}\n-\n-// Section 12.2.5.\n-func (p *parser) inForeignContent() bool {\n-\tif len(p.oe) == 0 {\n-\t\treturn false\n-\t}\n-\tn := p.oe[len(p.oe)-1]\n-\tif n.Namespace == \"\" {\n-\t\treturn false\n-\t}\n-\tif mathMLTextIntegrationPoint(n) {\n-\t\tif p.tok.Type == StartTagToken && p.tok.DataAtom != a.Mglyph && p.tok.DataAtom != a.Malignmark {\n-\t\t\treturn false\n-\t\t}\n-\t\tif p.tok.Type == TextToken {\n-\t\t\treturn false\n-\t\t}\n-\t}\n-\tif n.Namespace == \"math\" && n.DataAtom == a.AnnotationXml && p.tok.Type == StartTagToken && p.tok.DataAtom == a.Svg {\n-\t\treturn false\n-\t}\n-\tif htmlIntegrationPoint(n) && (p.tok.Type == StartTagToken || p.tok.Type == TextToken) {\n-\t\treturn false\n-\t}\n-\tif p.tok.Type == ErrorToken {\n-\t\treturn false\n-\t}\n-\treturn true\n-}\n-\n-// parseImpliedToken parses a token as though it had appeared in the parser's\n-// input.\n-func (p *parser) parseImpliedToken(t TokenType, dataAtom a.Atom, data string) {\n-\trealToken, selfClosing := p.tok, p.hasSelfClosingToken\n-\tp.tok = Token{\n-\t\tType:     t,\n-\t\tDataAtom: dataAtom,\n-\t\tData:     data,\n-\t}\n-\tp.hasSelfClosingToken = false\n-\tp.parseCurrentToken()\n-\tp.tok, p.hasSelfClosingToken = realToken, selfClosing\n-}\n-\n-// parseCurrentToken runs the current token through the parsing routines\n-// until it is consumed.\n-func (p *parser) parseCurrentToken() {\n-\tif p.tok.Type == SelfClosingTagToken {\n-\t\tp.hasSelfClosingToken = true\n-\t\tp.tok.Type = StartTagToken\n-\t}\n-\n-\tconsumed := false\n-\tfor !consumed {\n-\t\tif p.inForeignContent() {\n-\t\t\tconsumed = parseForeignContent(p)\n-\t\t} else {\n-\t\t\tconsumed = p.im(p)\n-\t\t}\n-\t}\n-\n-\tif p.hasSelfClosingToken {\n-\t\t// This is a parse error, but ignore it.\n-\t\tp.hasSelfClosingToken = false\n-\t}\n-}\n-\n-func (p *parser) parse() error {\n-\t// Iterate until EOF. Any other error will cause an early return.\n-\tvar err error\n-\tfor err != io.EOF {\n-\t\t// CDATA sections are allowed only in foreign content.\n-\t\tn := p.oe.top()\n-\t\tp.tokenizer.AllowCDATA(n != nil && n.Namespace != \"\")\n-\t\t// Read and parse the next token.\n-\t\tp.tokenizer.Next()\n-\t\tp.tok = p.tokenizer.Token()\n-\t\tif p.tok.Type == ErrorToken {\n-\t\t\terr = p.tokenizer.Err()\n-\t\t\tif err != nil && err != io.EOF {\n-\t\t\t\treturn err\n-\t\t\t}\n-\t\t}\n-\t\tp.parseCurrentToken()\n-\t}\n-\treturn nil\n-}\n-\n-// Parse returns the parse tree for the HTML from the given Reader.\n-// The input is assumed to be UTF-8 encoded.\n-func Parse(r io.Reader) (*Node, error) {\n-\tp := &parser{\n-\t\ttokenizer: NewTokenizer(r),\n-\t\tdoc: &Node{\n-\t\t\tType: DocumentNode,\n-\t\t},\n-\t\tscripting:  true,\n-\t\tframesetOK: true,\n-\t\tim:         initialIM,\n-\t}\n-\terr := p.parse()\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\treturn p.doc, nil\n-}\n-\n-// ParseFragment parses a fragment of HTML and returns the nodes that were\n-// found. If the fragment is the InnerHTML for an existing element, pass that\n-// element in context.\n-func ParseFragment(r io.Reader, context *Node) ([]*Node, error) {\n-\tcontextTag := \"\"\n-\tif context != nil {\n-\t\tif context.Type != ElementNode {\n-\t\t\treturn nil, errors.New(\"html: ParseFragment of non-element Node\")\n-\t\t}\n-\t\t// The next check isn't just context.DataAtom.String() == context.Data because\n-\t\t// it is valid to pass an element whose tag isn't a known atom. For example,\n-\t\t// DataAtom == 0 and Data = \"tagfromthefuture\" is perfectly consistent.\n-\t\tif context.DataAtom != a.Lookup([]byte(context.Data)) {\n-\t\t\treturn nil, fmt.Errorf(\"html: inconsistent Node: DataAtom=%q, Data=%q\", context.DataAtom, context.Data)\n-\t\t}\n-\t\tcontextTag = context.DataAtom.String()\n-\t}\n-\tp := &parser{\n-\t\ttokenizer: NewTokenizerFragment(r, contextTag),\n-\t\tdoc: &Node{\n-\t\t\tType: DocumentNode,\n-\t\t},\n-\t\tscripting: true,\n-\t\tfragment:  true,\n-\t\tcontext:   context,\n-\t}\n-\n-\troot := &Node{\n-\t\tType:     ElementNode,\n-\t\tDataAtom: a.Html,\n-\t\tData:     a.Html.String(),\n-\t}\n-\tp.doc.AppendChild(root)\n-\tp.oe = nodeStack{root}\n-\tp.resetInsertionMode()\n-\n-\tfor n := context; n != nil; n = n.Parent {\n-\t\tif n.Type == ElementNode && n.DataAtom == a.Form {\n-\t\t\tp.form = n\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\n-\terr := p.parse()\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\n-\tparent := p.doc\n-\tif context != nil {\n-\t\tparent = root\n-\t}\n-\n-\tvar result []*Node\n-\tfor c := parent.FirstChild; c != nil; {\n-\t\tnext := c.NextSibling\n-\t\tparent.RemoveChild(c)\n-\t\tresult = append(result, c)\n-\t\tc = next\n-\t}\n-\treturn result, nil\n-}"}, {"sha": "4896dfb7a0f558695d6954087997978bb77ceeba", "filename": "libgo/go/exp/html/parse_test.go", "status": "removed", "additions": 0, "deletions": 390, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fparse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Fparse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Fparse_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e", "patch": "@@ -1,390 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package html\n-\n-import (\n-\t\"bufio\"\n-\t\"bytes\"\n-\t\"errors\"\n-\t\"exp/html/atom\"\n-\t\"fmt\"\n-\t\"io\"\n-\t\"io/ioutil\"\n-\t\"os\"\n-\t\"path/filepath\"\n-\t\"runtime\"\n-\t\"sort\"\n-\t\"strings\"\n-\t\"testing\"\n-)\n-\n-// readParseTest reads a single test case from r.\n-func readParseTest(r *bufio.Reader) (text, want, context string, err error) {\n-\tline, err := r.ReadSlice('\\n')\n-\tif err != nil {\n-\t\treturn \"\", \"\", \"\", err\n-\t}\n-\tvar b []byte\n-\n-\t// Read the HTML.\n-\tif string(line) != \"#data\\n\" {\n-\t\treturn \"\", \"\", \"\", fmt.Errorf(`got %q want \"#data\\n\"`, line)\n-\t}\n-\tfor {\n-\t\tline, err = r.ReadSlice('\\n')\n-\t\tif err != nil {\n-\t\t\treturn \"\", \"\", \"\", err\n-\t\t}\n-\t\tif line[0] == '#' {\n-\t\t\tbreak\n-\t\t}\n-\t\tb = append(b, line...)\n-\t}\n-\ttext = string(b)\n-\tif strings.HasSuffix(text, \"\\n\") {\n-\t\ttext = text[:len(text)-1]\n-\t}\n-\tb = b[:0]\n-\n-\t// Skip the error list.\n-\tif string(line) != \"#errors\\n\" {\n-\t\treturn \"\", \"\", \"\", fmt.Errorf(`got %q want \"#errors\\n\"`, line)\n-\t}\n-\tfor {\n-\t\tline, err = r.ReadSlice('\\n')\n-\t\tif err != nil {\n-\t\t\treturn \"\", \"\", \"\", err\n-\t\t}\n-\t\tif line[0] == '#' {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\n-\tif string(line) == \"#document-fragment\\n\" {\n-\t\tline, err = r.ReadSlice('\\n')\n-\t\tif err != nil {\n-\t\t\treturn \"\", \"\", \"\", err\n-\t\t}\n-\t\tcontext = strings.TrimSpace(string(line))\n-\t\tline, err = r.ReadSlice('\\n')\n-\t\tif err != nil {\n-\t\t\treturn \"\", \"\", \"\", err\n-\t\t}\n-\t}\n-\n-\t// Read the dump of what the parse tree should be.\n-\tif string(line) != \"#document\\n\" {\n-\t\treturn \"\", \"\", \"\", fmt.Errorf(`got %q want \"#document\\n\"`, line)\n-\t}\n-\tinQuote := false\n-\tfor {\n-\t\tline, err = r.ReadSlice('\\n')\n-\t\tif err != nil && err != io.EOF {\n-\t\t\treturn \"\", \"\", \"\", err\n-\t\t}\n-\t\ttrimmed := bytes.Trim(line, \"| \\n\")\n-\t\tif len(trimmed) > 0 {\n-\t\t\tif line[0] == '|' && trimmed[0] == '\"' {\n-\t\t\t\tinQuote = true\n-\t\t\t}\n-\t\t\tif trimmed[len(trimmed)-1] == '\"' && !(line[0] == '|' && len(trimmed) == 1) {\n-\t\t\t\tinQuote = false\n-\t\t\t}\n-\t\t}\n-\t\tif len(line) == 0 || len(line) == 1 && line[0] == '\\n' && !inQuote {\n-\t\t\tbreak\n-\t\t}\n-\t\tb = append(b, line...)\n-\t}\n-\treturn text, string(b), context, nil\n-}\n-\n-func dumpIndent(w io.Writer, level int) {\n-\tio.WriteString(w, \"| \")\n-\tfor i := 0; i < level; i++ {\n-\t\tio.WriteString(w, \"  \")\n-\t}\n-}\n-\n-type sortedAttributes []Attribute\n-\n-func (a sortedAttributes) Len() int {\n-\treturn len(a)\n-}\n-\n-func (a sortedAttributes) Less(i, j int) bool {\n-\tif a[i].Namespace != a[j].Namespace {\n-\t\treturn a[i].Namespace < a[j].Namespace\n-\t}\n-\treturn a[i].Key < a[j].Key\n-}\n-\n-func (a sortedAttributes) Swap(i, j int) {\n-\ta[i], a[j] = a[j], a[i]\n-}\n-\n-func dumpLevel(w io.Writer, n *Node, level int) error {\n-\tdumpIndent(w, level)\n-\tswitch n.Type {\n-\tcase ErrorNode:\n-\t\treturn errors.New(\"unexpected ErrorNode\")\n-\tcase DocumentNode:\n-\t\treturn errors.New(\"unexpected DocumentNode\")\n-\tcase ElementNode:\n-\t\tif n.Namespace != \"\" {\n-\t\t\tfmt.Fprintf(w, \"<%s %s>\", n.Namespace, n.Data)\n-\t\t} else {\n-\t\t\tfmt.Fprintf(w, \"<%s>\", n.Data)\n-\t\t}\n-\t\tattr := sortedAttributes(n.Attr)\n-\t\tsort.Sort(attr)\n-\t\tfor _, a := range attr {\n-\t\t\tio.WriteString(w, \"\\n\")\n-\t\t\tdumpIndent(w, level+1)\n-\t\t\tif a.Namespace != \"\" {\n-\t\t\t\tfmt.Fprintf(w, `%s %s=\"%s\"`, a.Namespace, a.Key, a.Val)\n-\t\t\t} else {\n-\t\t\t\tfmt.Fprintf(w, `%s=\"%s\"`, a.Key, a.Val)\n-\t\t\t}\n-\t\t}\n-\tcase TextNode:\n-\t\tfmt.Fprintf(w, `\"%s\"`, n.Data)\n-\tcase CommentNode:\n-\t\tfmt.Fprintf(w, \"<!-- %s -->\", n.Data)\n-\tcase DoctypeNode:\n-\t\tfmt.Fprintf(w, \"<!DOCTYPE %s\", n.Data)\n-\t\tif n.Attr != nil {\n-\t\t\tvar p, s string\n-\t\t\tfor _, a := range n.Attr {\n-\t\t\t\tswitch a.Key {\n-\t\t\t\tcase \"public\":\n-\t\t\t\t\tp = a.Val\n-\t\t\t\tcase \"system\":\n-\t\t\t\t\ts = a.Val\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif p != \"\" || s != \"\" {\n-\t\t\t\tfmt.Fprintf(w, ` \"%s\"`, p)\n-\t\t\t\tfmt.Fprintf(w, ` \"%s\"`, s)\n-\t\t\t}\n-\t\t}\n-\t\tio.WriteString(w, \">\")\n-\tcase scopeMarkerNode:\n-\t\treturn errors.New(\"unexpected scopeMarkerNode\")\n-\tdefault:\n-\t\treturn errors.New(\"unknown node type\")\n-\t}\n-\tio.WriteString(w, \"\\n\")\n-\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\tif err := dumpLevel(w, c, level+1); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t}\n-\treturn nil\n-}\n-\n-func dump(n *Node) (string, error) {\n-\tif n == nil || n.FirstChild == nil {\n-\t\treturn \"\", nil\n-\t}\n-\tvar b bytes.Buffer\n-\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n-\t\tif err := dumpLevel(&b, c, 0); err != nil {\n-\t\t\treturn \"\", err\n-\t\t}\n-\t}\n-\treturn b.String(), nil\n-}\n-\n-const testDataDir = \"testdata/webkit/\"\n-\n-func TestParser(t *testing.T) {\n-\ttestFiles, err := filepath.Glob(testDataDir + \"*.dat\")\n-\tif err != nil {\n-\t\tt.Fatal(err)\n-\t}\n-\tfor _, tf := range testFiles {\n-\t\tf, err := os.Open(tf)\n-\t\tif err != nil {\n-\t\t\tt.Fatal(err)\n-\t\t}\n-\t\tdefer f.Close()\n-\t\tr := bufio.NewReader(f)\n-\n-\t\tfor i := 0; ; i++ {\n-\t\t\ttext, want, context, err := readParseTest(r)\n-\t\t\tif err == io.EOF {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t\tif err != nil {\n-\t\t\t\tt.Fatal(err)\n-\t\t\t}\n-\n-\t\t\terr = testParseCase(text, want, context)\n-\n-\t\t\tif err != nil {\n-\t\t\t\tt.Errorf(\"%s test #%d %q, %s\", tf, i, text, err)\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n-\n-// testParseCase tests one test case from the test files. If the test does not\n-// pass, it returns an error that explains the failure.\n-// text is the HTML to be parsed, want is a dump of the correct parse tree,\n-// and context is the name of the context node, if any.\n-func testParseCase(text, want, context string) (err error) {\n-\tdefer func() {\n-\t\tif x := recover(); x != nil {\n-\t\t\tswitch e := x.(type) {\n-\t\t\tcase error:\n-\t\t\t\terr = e\n-\t\t\tdefault:\n-\t\t\t\terr = fmt.Errorf(\"%v\", e)\n-\t\t\t}\n-\t\t}\n-\t}()\n-\n-\tvar doc *Node\n-\tif context == \"\" {\n-\t\tdoc, err = Parse(strings.NewReader(text))\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t} else {\n-\t\tcontextNode := &Node{\n-\t\t\tType:     ElementNode,\n-\t\t\tDataAtom: atom.Lookup([]byte(context)),\n-\t\t\tData:     context,\n-\t\t}\n-\t\tnodes, err := ParseFragment(strings.NewReader(text), contextNode)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdoc = &Node{\n-\t\t\tType: DocumentNode,\n-\t\t}\n-\t\tfor _, n := range nodes {\n-\t\t\tdoc.AppendChild(n)\n-\t\t}\n-\t}\n-\n-\tif err := checkTreeConsistency(doc); err != nil {\n-\t\treturn err\n-\t}\n-\n-\tgot, err := dump(doc)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\t// Compare the parsed tree to the #document section.\n-\tif got != want {\n-\t\treturn fmt.Errorf(\"got vs want:\\n----\\n%s----\\n%s----\", got, want)\n-\t}\n-\n-\tif renderTestBlacklist[text] || context != \"\" {\n-\t\treturn nil\n-\t}\n-\n-\t// Check that rendering and re-parsing results in an identical tree.\n-\tpr, pw := io.Pipe()\n-\tgo func() {\n-\t\tpw.CloseWithError(Render(pw, doc))\n-\t}()\n-\tdoc1, err := Parse(pr)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tgot1, err := dump(doc1)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tif got != got1 {\n-\t\treturn fmt.Errorf(\"got vs got1:\\n----\\n%s----\\n%s----\", got, got1)\n-\t}\n-\n-\treturn nil\n-}\n-\n-// Some test input result in parse trees are not 'well-formed' despite\n-// following the HTML5 recovery algorithms. Rendering and re-parsing such a\n-// tree will not result in an exact clone of that tree. We blacklist such\n-// inputs from the render test.\n-var renderTestBlacklist = map[string]bool{\n-\t// The second <a> will be reparented to the first <table>'s parent. This\n-\t// results in an <a> whose parent is an <a>, which is not 'well-formed'.\n-\t`<a><table><td><a><table></table><a></tr><a></table><b>X</b>C<a>Y`: true,\n-\t// The same thing with a <p>:\n-\t`<p><table></p>`: true,\n-\t// More cases of <a> being reparented:\n-\t`<a href=\"blah\">aba<table><a href=\"foo\">br<tr><td></td></tr>x</table>aoe`: true,\n-\t`<a><table><a></table><p><a><div><a>`:                                     true,\n-\t`<a><table><td><a><table></table><a></tr><a></table><a>`:                  true,\n-\t// A similar reparenting situation involving <nobr>:\n-\t`<!DOCTYPE html><body><b><nobr>1<table><nobr></b><i><nobr>2<nobr></i>3`: true,\n-\t// A <plaintext> element is reparented, putting it before a table.\n-\t// A <plaintext> element can't have anything after it in HTML.\n-\t`<table><plaintext><td>`:                                   true,\n-\t`<!doctype html><table><plaintext></plaintext>`:            true,\n-\t`<!doctype html><table><tbody><plaintext></plaintext>`:     true,\n-\t`<!doctype html><table><tbody><tr><plaintext></plaintext>`: true,\n-\t// A form inside a table inside a form doesn't work either.\n-\t`<!doctype html><form><table></form><form></table></form>`: true,\n-\t// A script that ends at EOF may escape its own closing tag when rendered.\n-\t`<!doctype html><script><!--<script `:          true,\n-\t`<!doctype html><script><!--<script <`:         true,\n-\t`<!doctype html><script><!--<script <a`:        true,\n-\t`<!doctype html><script><!--<script </`:        true,\n-\t`<!doctype html><script><!--<script </s`:       true,\n-\t`<!doctype html><script><!--<script </script`:  true,\n-\t`<!doctype html><script><!--<script </scripta`: true,\n-\t`<!doctype html><script><!--<script -`:         true,\n-\t`<!doctype html><script><!--<script -a`:        true,\n-\t`<!doctype html><script><!--<script -<`:        true,\n-\t`<!doctype html><script><!--<script --`:        true,\n-\t`<!doctype html><script><!--<script --a`:       true,\n-\t`<!doctype html><script><!--<script --<`:       true,\n-\t`<script><!--<script `:                         true,\n-\t`<script><!--<script <a`:                       true,\n-\t`<script><!--<script </script`:                 true,\n-\t`<script><!--<script </scripta`:                true,\n-\t`<script><!--<script -`:                        true,\n-\t`<script><!--<script -a`:                       true,\n-\t`<script><!--<script --`:                       true,\n-\t`<script><!--<script --a`:                      true,\n-\t`<script><!--<script <`:                        true,\n-\t`<script><!--<script </`:                       true,\n-\t`<script><!--<script </s`:                      true,\n-\t// Reconstructing the active formatting elements results in a <plaintext>\n-\t// element that contains an <a> element.\n-\t`<!doctype html><p><a><plaintext>b`: true,\n-}\n-\n-func TestNodeConsistency(t *testing.T) {\n-\t// inconsistentNode is a Node whose DataAtom and Data do not agree.\n-\tinconsistentNode := &Node{\n-\t\tType:     ElementNode,\n-\t\tDataAtom: atom.Frameset,\n-\t\tData:     \"table\",\n-\t}\n-\t_, err := ParseFragment(strings.NewReader(\"<p>hello</p>\"), inconsistentNode)\n-\tif err == nil {\n-\t\tt.Errorf(\"got nil error, want non-nil\")\n-\t}\n-}\n-\n-func BenchmarkParser(b *testing.B) {\n-\tbuf, err := ioutil.ReadFile(\"testdata/go1.html\")\n-\tif err != nil {\n-\t\tb.Fatalf(\"could not read testdata/go1.html: %v\", err)\n-\t}\n-\tb.SetBytes(int64(len(buf)))\n-\truntime.GC()\n-\tb.ReportAllocs()\n-\tb.ResetTimer()\n-\tfor i := 0; i < b.N; i++ {\n-\t\tParse(bytes.NewBuffer(buf))\n-\t}\n-}"}, {"sha": "d34564f49dd1e65a0a38f0bc3718c586e6ec6c9b", "filename": "libgo/go/exp/html/render.go", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Frender.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Frender.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Frender.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "11da54b313e5e8a33fae705db152b4a7792494d7", "filename": "libgo/go/exp/html/render_test.go", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Frender_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Frender_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Frender_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a782cc71d209163e9197263951dfd445cf29deeb", "filename": "libgo/go/exp/html/testdata/go1.html", "status": "removed", "additions": 0, "deletions": 2237, "changes": 2237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fgo1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fgo1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fgo1.html?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "9b4c2d8be0a2dfe7e7f2ab87bb116b5ab5adeced", "filename": "libgo/go/exp/html/testdata/webkit/README", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2FREADME?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "787e1b01e193b68d0d85ba0047f6343b40d566e1", "filename": "libgo/go/exp/html/testdata/webkit/adoption01.dat", "status": "removed", "additions": 0, "deletions": 194, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d18151b44f0e3a034278d9c7120119db084e832d", "filename": "libgo/go/exp/html/testdata/webkit/adoption02.dat", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption02.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption02.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fadoption02.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "44f187683004b904f06f92f1ca31cbd7641ae1dd", "filename": "libgo/go/exp/html/testdata/webkit/comments01.dat", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fcomments01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fcomments01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fcomments01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "ae457328a45338ed78e9d4d778906b25129e7c65", "filename": "libgo/go/exp/html/testdata/webkit/doctype01.dat", "status": "removed", "additions": 0, "deletions": 370, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fdoctype01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fdoctype01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fdoctype01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "c8073b7810b8dcc0340db720af2a83c9b0195db2", "filename": "libgo/go/exp/html/testdata/webkit/entities01.dat", "status": "removed", "additions": 0, "deletions": 603, "changes": 603, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "e2fb42a078b227abc2fddc545e07404a343bae07", "filename": "libgo/go/exp/html/testdata/webkit/entities02.dat", "status": "removed", "additions": 0, "deletions": 249, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities02.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities02.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fentities02.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d7cb71db0547b7816b66349d686111410a06d24a", "filename": "libgo/go/exp/html/testdata/webkit/html5test-com.dat", "status": "removed", "additions": 0, "deletions": 246, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fhtml5test-com.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fhtml5test-com.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fhtml5test-com.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "3f2bd374c033be8a0320cbac18bdce10268f6b1f", "filename": "libgo/go/exp/html/testdata/webkit/inbody01.dat", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Finbody01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Finbody01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Finbody01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "88325ffe64c5c7c83ab101b45da9e89bf3f9b73b", "filename": "libgo/go/exp/html/testdata/webkit/isindex.dat", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fisindex.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fisindex.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fisindex.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "5a9208465f58a4554fec072b3259f50b11156b2b", "filename": "libgo/go/exp/html/testdata/webkit/pending-spec-changes.dat", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "76b67f4ba6085d177f0afae2eca5877d84c20984", "filename": "libgo/go/exp/html/testdata/webkit/scriptdata01.dat", "status": "removed", "additions": 0, "deletions": 308, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscriptdata01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscriptdata01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscriptdata01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "4e08d0e84a0731e092670d0219934bf8f3d8ee95", "filename": "libgo/go/exp/html/testdata/webkit/scripted/adoption01.dat", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fadoption01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fadoption01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fadoption01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "ef4a41ca00ba2396e64b838876d33ed7edd6c587", "filename": "libgo/go/exp/html/testdata/webkit/scripted/webkit01.dat", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fwebkit01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fwebkit01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fscripted%2Fwebkit01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "c4b47e48a816e6448fb7195269f483776bf22b3c", "filename": "libgo/go/exp/html/testdata/webkit/tables01.dat", "status": "removed", "additions": 0, "deletions": 212, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftables01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftables01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftables01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "cbf8bdda638502131b08c8297bbf4f97ef250efe", "filename": "libgo/go/exp/html/testdata/webkit/tests1.dat", "status": "removed", "additions": 0, "deletions": 1952, "changes": 1952, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests1.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests1.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests1.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "4f8df86f208a01514d619fe6da43ce4d519f66e5", "filename": "libgo/go/exp/html/testdata/webkit/tests10.dat", "status": "removed", "additions": 0, "deletions": 799, "changes": 799, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests10.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests10.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests10.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "638cde479f7674a3d76b8e91b73b9470fa226894", "filename": "libgo/go/exp/html/testdata/webkit/tests11.dat", "status": "removed", "additions": 0, "deletions": 482, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests11.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests11.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests11.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "63107d277b6a7f1597155ad2527868bbc2c323de", "filename": "libgo/go/exp/html/testdata/webkit/tests12.dat", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests12.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests12.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests12.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b8713f88582c2c3c11596ac1b178d4bbd1ba7c70", "filename": "libgo/go/exp/html/testdata/webkit/tests14.dat", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests14.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests14.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests14.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "6ce1c0d166320448002292397d28f210d2debceb", "filename": "libgo/go/exp/html/testdata/webkit/tests15.dat", "status": "removed", "additions": 0, "deletions": 208, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests15.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests15.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests15.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "c8ef66f0e6e1146ff53d58bf8db17a433f58ab7f", "filename": "libgo/go/exp/html/testdata/webkit/tests16.dat", "status": "removed", "additions": 0, "deletions": 2299, "changes": 2299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests16.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests16.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests16.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "7b555f888dede982c223a33f15cbcb5f382a9d83", "filename": "libgo/go/exp/html/testdata/webkit/tests17.dat", "status": "removed", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests17.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests17.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests17.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "680e1f068a650d6dcee7c97c834c5cb506523328", "filename": "libgo/go/exp/html/testdata/webkit/tests18.dat", "status": "removed", "additions": 0, "deletions": 269, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests18.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests18.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests18.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "0d62f5a5b02b0b56b0a20e42a7afddaae39f5890", "filename": "libgo/go/exp/html/testdata/webkit/tests19.dat", "status": "removed", "additions": 0, "deletions": 1237, "changes": 1237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests19.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests19.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests19.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "60d859221624e13b9b2c50b69c715a9590ba8b02", "filename": "libgo/go/exp/html/testdata/webkit/tests2.dat", "status": "removed", "additions": 0, "deletions": 763, "changes": 763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests2.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests2.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests2.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "6bd825608f16ba9adb89a23e91112cf19b093e9a", "filename": "libgo/go/exp/html/testdata/webkit/tests20.dat", "status": "removed", "additions": 0, "deletions": 455, "changes": 455, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests20.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests20.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests20.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1260ec03e2029443b1566cd9dbe80fe9b4a9c142", "filename": "libgo/go/exp/html/testdata/webkit/tests21.dat", "status": "removed", "additions": 0, "deletions": 221, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests21.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests21.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests21.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "aab27b2e904b8e2672c9a4b92305ea99b3e04587", "filename": "libgo/go/exp/html/testdata/webkit/tests22.dat", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests22.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests22.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests22.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "34d2a73f1c75ed52c555689d5dcfbb15a1d08987", "filename": "libgo/go/exp/html/testdata/webkit/tests23.dat", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests23.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests23.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests23.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f6dc7eb48a53d7417418f8827c9a24031b5edcd7", "filename": "libgo/go/exp/html/testdata/webkit/tests24.dat", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests24.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests24.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests24.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "00de7295b71d411377f94fe8330be41f6a34d246", "filename": "libgo/go/exp/html/testdata/webkit/tests25.dat", "status": "removed", "additions": 0, "deletions": 219, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests25.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests25.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests25.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "fae11ffdf9675bfe5a7882a98b836aa0466f102f", "filename": "libgo/go/exp/html/testdata/webkit/tests26.dat", "status": "removed", "additions": 0, "deletions": 313, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests26.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests26.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests26.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "38dc501be352ae2a11b509e448c1bf64bbcf5307", "filename": "libgo/go/exp/html/testdata/webkit/tests3.dat", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests3.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests3.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests3.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "3c506326d1f1318e1955e0a60a5bb968513d422a", "filename": "libgo/go/exp/html/testdata/webkit/tests4.dat", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests4.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests4.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests4.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d7b5128a44d89a4cc5244073a3f13c53a0666466", "filename": "libgo/go/exp/html/testdata/webkit/tests5.dat", "status": "removed", "additions": 0, "deletions": 191, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests5.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests5.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests5.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f28ece4fb007f0fe0a03f93a4b0714fc3c8cc59c", "filename": "libgo/go/exp/html/testdata/webkit/tests6.dat", "status": "removed", "additions": 0, "deletions": 663, "changes": 663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests6.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests6.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests6.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f5193c660bcac9e815344046edcca5212bd550c5", "filename": "libgo/go/exp/html/testdata/webkit/tests7.dat", "status": "removed", "additions": 0, "deletions": 390, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests7.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests7.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests7.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "90e6c919e8463a1e2c53df1ba3a67b4f166342f0", "filename": "libgo/go/exp/html/testdata/webkit/tests8.dat", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests8.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests8.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests8.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "554e27aecf6ded5bdb2d247d7550fbd05d57c262", "filename": "libgo/go/exp/html/testdata/webkit/tests9.dat", "status": "removed", "additions": 0, "deletions": 457, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests9.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests9.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests9.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "6c78661e0cb83ebf19ff8db1fe5c7695d3489df6", "filename": "libgo/go/exp/html/testdata/webkit/tests_innerHTML_1.dat", "status": "removed", "additions": 0, "deletions": 741, "changes": 741, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests_innerHTML_1.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests_innerHTML_1.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftests_innerHTML_1.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "0841992448623b2730c58be384ba1112f15f0bf5", "filename": "libgo/go/exp/html/testdata/webkit/tricky01.dat", "status": "removed", "additions": 0, "deletions": 261, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftricky01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftricky01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Ftricky01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "9d425e99d5f76edc3e6f4bbdfc3e195de6624d3b", "filename": "libgo/go/exp/html/testdata/webkit/webkit01.dat", "status": "removed", "additions": 0, "deletions": 610, "changes": 610, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit01.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit01.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit01.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "905783d3cdf2a433830969911c2daa62d8a410d8", "filename": "libgo/go/exp/html/testdata/webkit/webkit02.dat", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit02.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit02.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fwebkit02.dat?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f9a087b02d9e7e83b57412098bb8934b4b27ce09", "filename": "libgo/go/exp/html/token.go", "status": "removed", "additions": 0, "deletions": 1173, "changes": 1173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "14e23467f49e9b152fe74bc6941cb1caedd0c478", "filename": "libgo/go/exp/html/token_test.go", "status": "removed", "additions": 0, "deletions": 679, "changes": 679, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftoken_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "912cf5db820c672e72888aba96db8cf134907ec8", "filename": "libgo/go/exp/inotify/inotify_linux.go", "status": "removed", "additions": 0, "deletions": 289, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d41d66bfacd8d457ff4c7fa351c48baf55c0b160", "filename": "libgo/go/exp/inotify/inotify_linux_test.go", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "4c28bd6b8672d5b47e02f5f678131eb21e1ac82c", "filename": "libgo/go/exp/locale/collate/build/builder.go", "status": "removed", "additions": 0, "deletions": 688, "changes": 688, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "568309798e5c4f21e793b683bd842c762528ed7e", "filename": "libgo/go/exp/locale/collate/build/builder_test.go", "status": "removed", "additions": 0, "deletions": 290, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fbuilder_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1a8356d72bcd38eb439bf4e51f20c92653b2de68", "filename": "libgo/go/exp/locale/collate/build/colelem.go", "status": "removed", "additions": 0, "deletions": 365, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b3be0336d21221102416b58bacbf70d31714c23c", "filename": "libgo/go/exp/locale/collate/build/colelem_test.go", "status": "removed", "additions": 0, "deletions": 214, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcolelem_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "868665061e70ddcae2f4909072c9f6f359982920", "filename": "libgo/go/exp/locale/collate/build/contract.go", "status": "removed", "additions": 0, "deletions": 307, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "0fc944d34b5822a7121dd425074cd366b28e53be", "filename": "libgo/go/exp/locale/collate/build/contract_test.go", "status": "removed", "additions": 0, "deletions": 264, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Fcontract_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b22a382e94b4e7ea2ad1f15fdbc9fbe9e0929821", "filename": "libgo/go/exp/locale/collate/build/order.go", "status": "removed", "additions": 0, "deletions": 392, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "9577d918cf2785d616b3f66ab7d8c1dab217ed0b", "filename": "libgo/go/exp/locale/collate/build/order_test.go", "status": "removed", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Forder_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1b6c3da4c0bb079dcd60b599fbadf4d6dae85c3f", "filename": "libgo/go/exp/locale/collate/build/table.go", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftable.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftable.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftable.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "9404a3465bf410aa6aeeb2bc5027897231d98102", "filename": "libgo/go/exp/locale/collate/build/trie.go", "status": "removed", "additions": 0, "deletions": 290, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "4d4f6e4d140108dda8efd99a112828f6e93ad5c9", "filename": "libgo/go/exp/locale/collate/build/trie_test.go", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fbuild%2Ftrie_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "7633ddc0e7f6256474850efaf3bb9abffb82bacc", "filename": "libgo/go/exp/locale/collate/colelem.go", "status": "removed", "additions": 0, "deletions": 317, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "374c4487976a188081cd1ac7f2f56fd9b18edc7e", "filename": "libgo/go/exp/locale/collate/colelem_test.go", "status": "removed", "additions": 0, "deletions": 274, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolelem_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "2cb29f24b740901dc33274c65b31d3c1d9af7a15", "filename": "libgo/go/exp/locale/collate/collate.go", "status": "removed", "additions": 0, "deletions": 586, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcollate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcollate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcollate.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "cdb213ffe4d8f34078c9c4930f1b0c50e3148e37", "filename": "libgo/go/exp/locale/collate/colltab.go", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolltab.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolltab.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcolltab.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "7ce6b1f20ea665540e5bf0ff124f4821a32ad01e", "filename": "libgo/go/exp/locale/collate/contract.go", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f3710a183a211f401dc4fdf940f90072170b4b42", "filename": "libgo/go/exp/locale/collate/contract_test.go", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fcontract_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "8145dee25a9066187f1517f40faad13a44cc31e0", "filename": "libgo/go/exp/locale/collate/export.go", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "3782144d83164c650dce8414dc51cec98ab15988", "filename": "libgo/go/exp/locale/collate/export_test.go", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fexport_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "42df613e60f65a7aac62a7e16831898e8f89c328", "filename": "libgo/go/exp/locale/collate/maketables.go", "status": "removed", "additions": 0, "deletions": 722, "changes": 722, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fmaketables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fmaketables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fmaketables.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "e30915ed894aba9268917673debab3b29d1bff79", "filename": "libgo/go/exp/locale/collate/regtest.go", "status": "removed", "additions": 0, "deletions": 268, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fregtest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fregtest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fregtest.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "57b2efdfc258bc2a8d44d80eec337f5e99b1a2aa", "filename": "libgo/go/exp/locale/collate/sort.go", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d0682f48e6fb8f70f1b891b5a791b518543eb777", "filename": "libgo/go/exp/locale/collate/sort_test.go", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Fsort_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a03e9e21585abcbdd530eae82c507ab9d0e0a120", "filename": "libgo/go/exp/locale/collate/table.go", "status": "removed", "additions": 0, "deletions": 317, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftable.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftable.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftable.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "464514cf4b26f029256a9dc4a2767301abf84051", "filename": "libgo/go/exp/locale/collate/tables.go", "status": "removed", "additions": 0, "deletions": 51896, "changes": 51896, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftables.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "c04998d2ec367236714216befcb4191db33729fc", "filename": "libgo/go/exp/locale/collate/tools/colcmp/chars.go", "status": "removed", "additions": 0, "deletions": 937, "changes": 937, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fchars.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fchars.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fchars.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "3f8d7eed655835d5ff084dc538e17e17d4c8c233", "filename": "libgo/go/exp/locale/collate/tools/colcmp/col.go", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcol.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcol.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcol.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "66d12127bdfc33540ff6b1148eda458e8997931c", "filename": "libgo/go/exp/locale/collate/tools/colcmp/colcmp.go", "status": "removed", "additions": 0, "deletions": 528, "changes": 528, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcolcmp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcolcmp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fcolcmp.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "ce2ab468b19f756f459cde6c93930bc426a72c13", "filename": "libgo/go/exp/locale/collate/tools/colcmp/darwin.go", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fdarwin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fdarwin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fdarwin.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "f9e31187de1e92b204c117a31fdd8e75ce3dbfa6", "filename": "libgo/go/exp/locale/collate/tools/colcmp/gen.go", "status": "removed", "additions": 0, "deletions": 179, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fgen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fgen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Fgen.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "91980ac98fdf633b9142086e66251759c828ea54", "filename": "libgo/go/exp/locale/collate/tools/colcmp/icu.go", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Ficu.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Ficu.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftools%2Fcolcmp%2Ficu.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "616dc09236fec2627b6e294253f0d854e37e2a2d", "filename": "libgo/go/exp/locale/collate/trie.go", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "778e85614a3cb4195a90496a9babb2ea199ddb14", "filename": "libgo/go/exp/locale/collate/trie_test.go", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Flocale%2Fcollate%2Ftrie_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "2d52f99dc01581eee8e7369b2572d4a7e1c17f64", "filename": "libgo/go/exp/norm/composition.go", "status": "removed", "additions": 0, "deletions": 382, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "976aa21ed00f557f0333f66a4c74762dd82d6ba2", "filename": "libgo/go/exp/norm/composition_test.go", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "edb9fcf55b87fc2804debb4d249302b1b4dd302b", "filename": "libgo/go/exp/norm/example_iter_test.go", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fexample_iter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fexample_iter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fexample_iter_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "7f7ee72e8adc2a83727c3d6a5c6dac148a8f2c2b", "filename": "libgo/go/exp/norm/forminfo.go", "status": "removed", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fforminfo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fforminfo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fforminfo.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d0177a14a4ec3e8084f2b97de6ce3be17ad82e44", "filename": "libgo/go/exp/norm/input.go", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a9546247c3b4954a8c422119f1da05ef2c559a49", "filename": "libgo/go/exp/norm/iter.go", "status": "removed", "additions": 0, "deletions": 401, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fiter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fiter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fiter.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "82611936268dd4ba544ee4825db10f56450decd4", "filename": "libgo/go/exp/norm/iter_test.go", "status": "removed", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fiter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fiter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fiter_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "03e1e2e33fa61744c5a5e026ea59d6dc1a026028", "filename": "libgo/go/exp/norm/maketables.go", "status": "removed", "additions": 0, "deletions": 934, "changes": 934, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "6d11ec069cda59216f880add4a73cbd84e4001a4", "filename": "libgo/go/exp/norm/maketesttables.go", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketesttables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketesttables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketesttables.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "12dacfcf3006ceda00dc883a1d14bfd8d4fd0406", "filename": "libgo/go/exp/norm/norm_test.go", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnorm_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnorm_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnorm_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1c3e49b7719bbae21c7ef7c48c9084fe20ff2d0f", "filename": "libgo/go/exp/norm/normalize.go", "status": "removed", "additions": 0, "deletions": 478, "changes": 478, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "9a6b46e41bc52fb5450516d3c8da0ce044498df8", "filename": "libgo/go/exp/norm/normalize_test.go", "status": "removed", "additions": 0, "deletions": 750, "changes": 750, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d7ef9ba3ec76a0de0ac18bd5dd17ce2c9151112e", "filename": "libgo/go/exp/norm/normregtest.go", "status": "removed", "additions": 0, "deletions": 308, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "2682894de0b1d19781cdd44184eb2be2c4bb5356", "filename": "libgo/go/exp/norm/readwriter.go", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "3b49eb0a2f08631adb454bb3c1e65da093a82fd8", "filename": "libgo/go/exp/norm/readwriter_test.go", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Freadwriter_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "fa33a34a16448b7987e6357ee64d202235a161ce", "filename": "libgo/go/exp/norm/tables.go", "status": "removed", "additions": 0, "deletions": 6779, "changes": 6779, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftables.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "82267a8d37fb440bdd96fe2b2cf2e968ee0800d6", "filename": "libgo/go/exp/norm/trie.go", "status": "removed", "additions": 0, "deletions": 232, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1a75cc705689f79cd1ace4328815ea2932298278", "filename": "libgo/go/exp/norm/trie_test.go", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "d6c832d46a1435dc3f3c8a74f8bb30f865cd2267", "filename": "libgo/go/exp/norm/triedata_test.go", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftriedata_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftriedata_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftriedata_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "52c88b039a2495ebef7bbf2a8ff130c15e35940e", "filename": "libgo/go/exp/norm/triegen.go", "status": "removed", "additions": 0, "deletions": 317, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a81be6aefe8476714bf88f83bdcbb756e6f26f62", "filename": "libgo/go/exp/ssa/blockopt.go", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fblockopt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fblockopt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fblockopt.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a489c312956a71467ab0bde42e11ae33c54d5a0e", "filename": "libgo/go/exp/ssa/doc.go", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fdoc.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "6af5e1efcd5495dc4e3640cd38664d1cdcfadf6f", "filename": "libgo/go/exp/ssa/func.go", "status": "removed", "additions": 0, "deletions": 428, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Ffunc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Ffunc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Ffunc.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "fa26c47e927197efab8f9305e6a46336da542c0e", "filename": "libgo/go/exp/ssa/literal.go", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fliteral.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fliteral.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fliteral.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b8708b6ede46a2bf7e0d9238135acb9d50df43d3", "filename": "libgo/go/exp/ssa/print.go", "status": "removed", "additions": 0, "deletions": 383, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fprint.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "bbb30cfcf46bf93d51ed3669ac41728113b930f5", "filename": "libgo/go/exp/ssa/sanity.go", "status": "removed", "additions": 0, "deletions": 263, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fsanity.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fsanity.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fsanity.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "eb0f7fc0b07904dee3fa9a801cd8116f8f2291bd", "filename": "libgo/go/exp/ssa/ssa.go", "status": "removed", "additions": 0, "deletions": 1100, "changes": 1100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fssa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Fssa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Fssa.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "0d2ebde268a3bfdb3b51bea7f2754e520269da87", "filename": "libgo/go/exp/ssa/util.go", "status": "removed", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Futil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fssa%2Futil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssa%2Futil.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "da1e2de1ea2fc4db8c3f6cf6eda4670ca56733a5", "filename": "libgo/go/exp/utf8string/string.go", "status": "removed", "additions": 0, "deletions": 203, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Futf8string%2Fstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Futf8string%2Fstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Futf8string%2Fstring.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "28511b2f5f159274bce88245387f6f317be27ff1", "filename": "libgo/go/exp/utf8string/string_test.go", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Futf8string%2Fstring_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Futf8string%2Fstring_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Futf8string%2Fstring_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a6e3a6a8fb75e2428bda27cedda9dfd5bbe1d719", "filename": "libgo/go/exp/winfsnotify/winfsnotify.go", "status": "removed", "additions": 0, "deletions": 572, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a0bd4327fb5ebf958ca143b531323c17bdd44e26", "filename": "libgo/go/exp/winfsnotify/winfsnotify_test.go", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b8dd995c77b88529e0246e39bd0310ab2a0bf579", "filename": "libgo/go/fmt/doc.go", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fdoc.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "df9e5a0af2468fc6a0dfa6634e8d3a6a9fe1cd85", "filename": "libgo/go/fmt/fmt_test.go", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Ffmt_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "5f37fd1208522355a4a802041cac1a0c3c4460ef", "filename": "libgo/go/fmt/print.go", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Ffmt%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fprint.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "71c9ed7766b193de5614c8780cacccba4d8e8b93", "filename": "libgo/go/go/ast/filter.go", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Ffilter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Ffilter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Ffilter.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "9fd86cb46710ee3fbfb80c9b569a6ea8e9217b72", "filename": "libgo/go/go/ast/filter_test.go", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Ffilter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Ffilter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Ffilter_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "f15dc11dc055f6592d5fd74dafbf7da815986cc0", "filename": "libgo/go/go/ast/print.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fast%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Fprint.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "cc89afb218d0cde2c7064f41b613d7f8e9225e15", "filename": "libgo/go/go/build/build.go", "status": "modified", "additions": 114, "deletions": 34, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "71b1bcf060bfcb1154aef0459ba5022751957fc8", "filename": "libgo/go/go/build/deps_test.go", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "b5fc071d61a73b716f1db16a1ec4bba8a206bf99", "filename": "libgo/go/go/build/doc.go", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "4264940a0cd5ca20ff5a0d27d18f548f4ad6aa2d", "filename": "libgo/go/go/doc/doc.go", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "2761083c7eed99c6828bfc19b4ee74808183b8da", "filename": "libgo/go/go/doc/example.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "e0477e3f6930b81d529e770b1304ae3b1391de5d", "filename": "libgo/go/go/doc/example_test.go", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fexample_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "a6f243f33e5825e07f99cef220b185a7ae19ebf8", "filename": "libgo/go/go/doc/filter.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ffilter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ffilter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ffilter.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "4fa6fd9d599f0e7f3644c015e8879df3abba5bc0", "filename": "libgo/go/go/doc/reader.go", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Freader.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "cd98f4e0ebe72ba80e7a4a0e96615ccbe79d3585", "filename": "libgo/go/go/doc/testdata/a.0.golden", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.0.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.0.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.0.golden?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "cd98f4e0ebe72ba80e7a4a0e96615ccbe79d3585", "filename": "libgo/go/go/doc/testdata/a.1.golden", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.1.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.1.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.1.golden?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "cd98f4e0ebe72ba80e7a4a0e96615ccbe79d3585", "filename": "libgo/go/go/doc/testdata/a.2.golden", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.2.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.2.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa.2.golden?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "2420c8a483a2654dd5343172dc7cc765b8df662f", "filename": "libgo/go/go/doc/testdata/a0.go", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa0.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa0.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa0.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "9fad1e09bc44bbbe51f67153b875c47aaa90f51c", "filename": "libgo/go/go/doc/testdata/a1.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Fa1.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "26482f7c2464ef0c1a099f6019e56422fe71e9d9", "filename": "libgo/go/go/doc/testdata/template.txt", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Ftemplate.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Ftemplate.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Ftestdata%2Ftemplate.txt?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "3d00a645dbe857cdf8d7d355edea6a775103345d", "filename": "libgo/go/go/format/format.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fformat%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fformat%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fformat%2Fformat.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "d4d4f909d3ffd909c5dfa36bae9f6c3e8c745d00", "filename": "libgo/go/go/parser/error_test.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "149257ca6b108711776139062fb861c5d5b5f58b", "filename": "libgo/go/go/parser/interface.go", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "f4a690a6f289812e2b3ce2912125e0434150add5", "filename": "libgo/go/go/parser/parser.go", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "48813d106127d782dff9878e72b7193ae6e4fd6b", "filename": "libgo/go/go/parser/parser_test.go", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "62277c0d26b45ca7959eae701abe134d0493c707", "filename": "libgo/go/go/parser/short_test.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "7cd068e22ef45f754a9bec7a31c154b9715a248a", "filename": "libgo/go/go/printer/nodes.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "e06d2edfb21c2e8da51d07c2c9f572c21a99c3e3", "filename": "libgo/go/go/printer/printer.go", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "0331615e5195bc99e7dd50d2fd6d9f9acab90157", "filename": "libgo/go/go/printer/testdata/declarations.golden", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "dbdbdfe7422db109a99c991a19e25ea2db256eba", "filename": "libgo/go/go/printer/testdata/declarations.input", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "1e259d5ed2a4f1007cc8cbae778b7d8757e5fa2e", "filename": "libgo/go/go/scanner/scanner.go", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "8c64c2b95ffca6a7f1fe37952133272db66675f6", "filename": "libgo/go/go/scanner/scanner_test.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "865f63f4a146ca03da07074106c59f466a9b9c07", "filename": "libgo/go/go/token/token.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Ftoken%2Ftoken.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be47d6eceffd2c5dbbc1566d5eea490527fb2bd4/libgo%2Fgo%2Fgo%2Ftoken%2Ftoken.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftoken%2Ftoken.go?ref=be47d6eceffd2c5dbbc1566d5eea490527fb2bd4"}, {"sha": "e5b6aa12c011d3028ada393a46cf0e3cf75e35dc", "filename": "libgo/go/go/types/api.go", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fapi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fapi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fapi.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "867f1e9c6de0545f581dd81830c2cb1974db5907", "filename": "libgo/go/go/types/builtins.go", "status": "removed", "additions": 0, "deletions": 457, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fbuiltins.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fbuiltins.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fbuiltins.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "fb9d7573d5792147e1a47bf959fe26277e6b8936", "filename": "libgo/go/go/types/check.go", "status": "removed", "additions": 0, "deletions": 454, "changes": 454, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "375ae67246c45ab574858d3f52beafd5b2b6e598", "filename": "libgo/go/go/types/check_test.go", "status": "removed", "additions": 0, "deletions": 262, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fcheck_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "a6c807c432736ee202a133d9fdc62fea27f42054", "filename": "libgo/go/go/types/const.go", "status": "removed", "additions": 0, "deletions": 734, "changes": 734, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fconst.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "65359f319d1ed9edf6944e8b48dd830659518313", "filename": "libgo/go/go/types/conversions.go", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fconversions.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fconversions.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fconversions.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "c8b420b4db6939b2b546446371e1e8caacc40ef7", "filename": "libgo/go/go/types/errors.go", "status": "removed", "additions": 0, "deletions": 331, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Ferrors.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Ferrors.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ferrors.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "1f6a3c72526989c16e460c19f2882b897549195f", "filename": "libgo/go/go/types/exportdata.go", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fexportdata.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fexportdata.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fexportdata.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "696a0cae684e6c70cb035a8b103dfa8f3a96724a", "filename": "libgo/go/go/types/expr.go", "status": "removed", "additions": 0, "deletions": 1334, "changes": 1334, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fexpr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fexpr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fexpr.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "edd3e4dec7d595440e0bc5548bb1bddbe17a1594", "filename": "libgo/go/go/types/gcimporter.go", "status": "removed", "additions": 0, "deletions": 908, "changes": 908, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}, {"sha": "b793eb4cb33ae09a752041cbbf96d020a8dd425d", "filename": "libgo/go/go/types/gcimporter_test.go", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb30cdeb003fd7c585ee0d7657340086abcbd9e/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fgcimporter_test.go?ref=efb30cdeb003fd7c585ee0d7657340086abcbd9e"}]}