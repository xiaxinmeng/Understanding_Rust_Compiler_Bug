{"sha": "249a82c4c632bbba058b583d41b3829ae7e8f119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5YTgyYzRjNjMyYmJiYTA1OGI1ODNkNDFiMzgyOWFlN2U4ZjExOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-20T22:41:53Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-20T22:41:53Z"}, "message": "In gcc/: 2010-10-20 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * parser.c (c_parser_objc_method_type): Mark inline.  Return a\n        bool instead of a tree.\n        (c_parser_objc_method_decl): Added bool argument.  Updated call to\n        objc_build_method_signature.\n        (c_parser_objc_method_definition): Do not call\n        objc_set_method_type.  Updated calls to c_parser_objc_method_type,\n        c_parser_objc_method_decl and objc_start_method_definition.\n        (c_parser_objc_methodproto): Do not call objc_set_method_type.\n        Updated calls to c_parser_objc_method_type,\n        c_parser_objc_method_decl and objc_add_method_declaration.\n\nIn gcc/c-family/:\n2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-common.h (objc_set_method_type): Removed.\n        (objc_add_method_declaration): Added boolean argument.\n        (objc_start_method_definition): Same change.\n        (objc_build_method_signature): Same change.\n        * stub-objc.c (objc_set_method_type): Removed.\n        (objc_add_method_declaration): Added boolean argument.\n        (objc_start_method_definition): Same change.\n        (objc_build_method_signature): Same change.\n\nIn gcc/cp/:\n2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * parser.c (cp_parser_objc_method_type): Mark inline.  Return a\n        bool instead of calling objc_set_method_type.\n        (cp_parser_objc_method_signature): Updated calls to\n        cp_parser_objc_method_type and to objc_build_method_signature.\n        (cp_parser_objc_method_prototype_list): Updated calls to\n        objc_add_method_declaration.  Use token->type to determine if it\n        is a class method or not.\n        (cp_parser_objc_method_definition_list): Same change.\n\nIn gcc/objc/:\n2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.h (objc_inherit_code): Removed.\n        * objc-act.c (objc_inherit_code): Removed.\n        (objc_set_method_type): Removed.\n        (objc_build_method_signature): Added is_class_method argument.\n        Use it instead of the global objc_inherit_code variable.\n        (objc_add_method_declaration): Same change.\n        (objc_start_method_definition): Same change.\n        (objc_generate_cxx_ctor_or_dtor): Updated call to\n        objc_start_method_definition.  Do not call objc_set_method_type.\n        (adjust_type_for_id_default): Mark as inline.\n        (objc_synthesize_getter): Updated call to\n        objc_start_method_definition.  Do not set objc_inherit_code.\n        (objc_synthesize_setter): Updated call to\n        objc_start_method_definition.  Do not set objc_inherit_code.\n\nFrom-SVN: r165741", "tree": {"sha": "d92f3d904701bebb9ece6405dc79f58c575c78f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92f3d904701bebb9ece6405dc79f58c575c78f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/249a82c4c632bbba058b583d41b3829ae7e8f119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249a82c4c632bbba058b583d41b3829ae7e8f119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/249a82c4c632bbba058b583d41b3829ae7e8f119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249a82c4c632bbba058b583d41b3829ae7e8f119/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1e344ed754edda1085dfeecca07680119f3a67c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e344ed754edda1085dfeecca07680119f3a67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e344ed754edda1085dfeecca07680119f3a67c"}], "stats": {"total": 197, "additions": 125, "deletions": 72}, "files": [{"sha": "f472aeea709ed081ca947002ac07008030bda5c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1,3 +1,16 @@\n+2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* parser.c (c_parser_objc_method_type): Mark inline.  Return a\n+\tbool instead of a tree.\n+\t(c_parser_objc_method_decl): Added bool argument.  Updated call to\n+\tobjc_build_method_signature.\n+\t(c_parser_objc_method_definition): Do not call\n+\tobjc_set_method_type.  Updated calls to c_parser_objc_method_type,\n+\tc_parser_objc_method_decl and objc_start_method_definition.\n+\t(c_parser_objc_methodproto): Do not call objc_set_method_type.\n+\tUpdated calls to c_parser_objc_method_type,\n+\tc_parser_objc_method_decl and objc_add_method_declaration.\n+\t\n 2010-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/45919"}, {"sha": "2893062b1192534a4304a0fd0df52bcd22496199", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1,3 +1,14 @@\n+2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (objc_set_method_type): Removed.\n+\t(objc_add_method_declaration): Added boolean argument.\n+\t(objc_start_method_definition): Same change.\n+\t(objc_build_method_signature): Same change.\n+\t* stub-objc.c (objc_set_method_type): Removed.\n+\t(objc_add_method_declaration): Added boolean argument.\n+\t(objc_start_method_definition): Same change.\n+\t(objc_build_method_signature): Same change.\n+\n 2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-common.h (finish_file): Removed."}, {"sha": "5aff415ff7ecb4eaf3a14f4b409ae3c17850ef98", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1020,10 +1020,9 @@ extern void objc_start_category_implementation (tree, tree);\n extern void objc_continue_implementation (void);\n extern void objc_finish_implementation (void);\n extern void objc_set_visibility (objc_ivar_visibility_kind);\n-extern void objc_set_method_type (enum tree_code);\n-extern tree objc_build_method_signature (tree, tree, tree, bool);\n-extern void objc_add_method_declaration (tree, tree);\n-extern bool objc_start_method_definition (tree, tree);\n+extern tree objc_build_method_signature (bool, tree, tree, tree, bool);\n+extern void objc_add_method_declaration (bool, tree, tree);\n+extern bool objc_start_method_definition (bool, tree, tree);\n extern void objc_finish_method_definition (tree);\n extern void objc_add_instance_variable (tree);\n extern tree objc_build_keyword_decl (tree, tree, tree, tree);"}, {"sha": "7ef4f1e432d4199bf1bebf7adb5ff245c61e689b", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -178,11 +178,6 @@ objc_set_visibility (objc_ivar_visibility_kind ARG_UNUSED (vis))\n {\n }\n \n-void\n-objc_set_method_type (enum tree_code ARG_UNUSED (code))\n-{\n-}\n-\n void\n objc_start_class_implementation (tree ARG_UNUSED (name),\n \t\t\t\t tree ARG_UNUSED (super))\n@@ -211,13 +206,15 @@ objc_finish_implementation (void)\n }\n \n void\n-objc_add_method_declaration (tree ARG_UNUSED (signature),\n+objc_add_method_declaration (bool ARG_UNUSED (is_class_method),\n+\t\t\t     tree ARG_UNUSED (signature),\n \t\t\t     tree ARG_UNUSED (attributes))\n {\n }\n \n bool\n-objc_start_method_definition (tree ARG_UNUSED (signature),\n+objc_start_method_definition (bool ARG_UNUSED (is_class_method),\n+\t\t\t      tree ARG_UNUSED (signature),\n \t\t\t      tree ARG_UNUSED (attributes))\n {\n   return true;\n@@ -244,7 +241,8 @@ objc_build_keyword_decl (tree ARG_UNUSED (selector),\n }\n \n tree\n-objc_build_method_signature (tree ARG_UNUSED (rettype),\n+objc_build_method_signature (bool ARG_UNUSED (is_class_method),\n+\t\t\t     tree ARG_UNUSED (rettype),\n \t\t\t     tree ARG_UNUSED (selectors),\n \t\t\t     tree ARG_UNUSED (optparms),\n \t\t\t     bool ARG_UNUSED (ellipsis))"}, {"sha": "e4efd38cac6f7147b39eaae06220bc7c8b3433f6", "filename": "gcc/c-parser.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1067,11 +1067,11 @@ static void c_parser_objc_class_instance_variables (c_parser *);\n static void c_parser_objc_class_declaration (c_parser *);\n static void c_parser_objc_alias_declaration (c_parser *);\n static void c_parser_objc_protocol_definition (c_parser *, tree);\n-static enum tree_code c_parser_objc_method_type (c_parser *);\n+static bool c_parser_objc_method_type (c_parser *);\n static void c_parser_objc_method_definition (c_parser *);\n static void c_parser_objc_methodprotolist (c_parser *);\n static void c_parser_objc_methodproto (c_parser *);\n-static tree c_parser_objc_method_decl (c_parser *, tree *);\n+static tree c_parser_objc_method_decl (c_parser *, bool, tree *);\n static tree c_parser_objc_type_name (c_parser *);\n static tree c_parser_objc_protocol_refs (c_parser *);\n static void c_parser_objc_try_catch_statement (c_parser *);\n@@ -6889,19 +6889,21 @@ c_parser_objc_protocol_definition (c_parser *parser, tree attributes)\n    objc-method-type:\n      +\n      -\n-*/\n \n-static enum tree_code\n+   Return true if it is a class method (+) and false if it is\n+   an instance method (-).\n+*/\n+static inline bool\n c_parser_objc_method_type (c_parser *parser)\n {\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_PLUS:\n       c_parser_consume_token (parser);\n-      return PLUS_EXPR;\n+      return true;\n     case CPP_MINUS:\n       c_parser_consume_token (parser);\n-      return MINUS_EXPR;\n+      return false;\n     default:\n       gcc_unreachable ();\n     }\n@@ -6916,11 +6918,10 @@ c_parser_objc_method_type (c_parser *parser)\n static void\n c_parser_objc_method_definition (c_parser *parser)\n {\n-  enum tree_code type = c_parser_objc_method_type (parser);\n+  bool is_class_method = c_parser_objc_method_type (parser);\n   tree decl, attributes = NULL_TREE;\n-  objc_set_method_type (type);\n   parser->objc_pq_context = true;\n-  decl = c_parser_objc_method_decl (parser, &attributes);\n+  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes);\n   if (decl == error_mark_node)\n     return;  /* Bail here. */\n \n@@ -6938,7 +6939,7 @@ c_parser_objc_method_definition (c_parser *parser)\n     }\n \n   parser->objc_pq_context = false;\n-  if (objc_start_method_definition (decl, attributes))\n+  if (objc_start_method_definition (is_class_method, decl, attributes))\n     {\n       add_stmt (c_parser_compound_statement (parser));\n       objc_finish_method_definition (current_function_decl);\n@@ -7024,12 +7025,12 @@ c_parser_objc_methodprotolist (c_parser *parser)\n static void\n c_parser_objc_methodproto (c_parser *parser)\n {\n-  enum tree_code type = c_parser_objc_method_type (parser);\n+  bool is_class_method = c_parser_objc_method_type (parser);\n   tree decl, attributes = NULL_TREE;\n-  objc_set_method_type (type);\n+\n   /* Remember protocol qualifiers in prototypes.  */\n   parser->objc_pq_context = true;\n-  decl = c_parser_objc_method_decl (parser, &attributes);\n+  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes);\n   /* Forget protocol qualifiers now.  */\n   parser->objc_pq_context = false;\n \n@@ -7042,7 +7043,7 @@ c_parser_objc_methodproto (c_parser *parser)\n     }\n   \n   if (decl != error_mark_node)\n-    objc_add_method_declaration (decl, attributes);\n+    objc_add_method_declaration (is_class_method, decl, attributes);\n \n   c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n }\n@@ -7115,7 +7116,7 @@ c_parser_objc_maybe_method_attributes (c_parser* parser, tree* attributes)\n */\n \n static tree\n-c_parser_objc_method_decl (c_parser *parser, tree *attributes)\n+c_parser_objc_method_decl (c_parser *parser, bool is_class_method, tree *attributes)\n {\n   tree type = NULL_TREE;\n   tree sel;\n@@ -7206,7 +7207,7 @@ c_parser_objc_method_decl (c_parser *parser, tree *attributes)\n   if (attr_err)\n     return error_mark_node;\n \n-  return objc_build_method_signature (type, sel, parms, ellipsis);\n+  return objc_build_method_signature (is_class_method, type, sel, parms, ellipsis);\n }\n \n /* Parse an objc-type-name."}, {"sha": "24cfd3920e426ebf6343f4427100a2a59529b8f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1,3 +1,14 @@\n+2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* parser.c (cp_parser_objc_method_type): Mark inline.  Return a\n+\tbool instead of calling objc_set_method_type.\n+\t(cp_parser_objc_method_signature): Updated calls to\n+\tcp_parser_objc_method_type and to objc_build_method_signature.\n+\t(cp_parser_objc_method_prototype_list): Updated calls to\n+\tobjc_add_method_declaration.  Use token->type to determine if it\n+\tis a class method or not.\t\n+\t(cp_parser_objc_method_definition_list): Same change.\n+\t\n 2010-10-20  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>\n \n \tPR c++/46056"}, {"sha": "68638e95cb79955b0ca371964c4f81b4490b12c4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -21394,15 +21394,16 @@ cp_parser_objc_visibility_spec (cp_parser* parser)\n   cp_lexer_consume_token (parser->lexer);\n }\n \n-/* Parse an Objective-C method type.  */\n+/* Parse an Objective-C method type.  Return 'true' if it is a class\n+   (+) method, and 'false' if it is an instance (-) method.  */\n \n-static void\n+static inline bool\n cp_parser_objc_method_type (cp_parser* parser)\n {\n-  objc_set_method_type\n-   (cp_lexer_consume_token (parser->lexer)->type == CPP_PLUS\n-    ? PLUS_EXPR\n-    : MINUS_EXPR);\n+  if (cp_lexer_consume_token (parser->lexer)->type == CPP_PLUS)\n+    return true;\n+  else\n+    return false;\n }\n \n /* Parse an Objective-C protocol qualifier.  */\n@@ -21688,8 +21689,9 @@ cp_parser_objc_method_signature (cp_parser* parser, tree* attributes)\n {\n   tree rettype, kwdparms, optparms;\n   bool ellipsis = false;\n+  bool is_class_method;\n \n-  cp_parser_objc_method_type (parser);\n+  is_class_method = cp_parser_objc_method_type (parser);\n   rettype = cp_parser_objc_typename (parser);\n   *attributes = NULL_TREE;\n   kwdparms = cp_parser_objc_method_keyword_params (parser, attributes);\n@@ -21699,7 +21701,7 @@ cp_parser_objc_method_signature (cp_parser* parser, tree* attributes)\n   if (optparms == error_mark_node)\n     return error_mark_node;\n \n-  return objc_build_method_signature (rettype, kwdparms, optparms, ellipsis);\n+  return objc_build_method_signature (is_class_method, rettype, kwdparms, optparms, ellipsis);\n }\n \n static bool\n@@ -21734,14 +21736,19 @@ cp_parser_objc_method_prototype_list (cp_parser* parser)\n       if (token->type == CPP_PLUS || token->type == CPP_MINUS)\n \t{\n \t  tree attributes, sig;\n+\t  bool is_class_method;\n+\t  if (token->type == CPP_PLUS)\n+\t    is_class_method = true;\n+\t  else\n+\t    is_class_method = false;\n \t  sig = cp_parser_objc_method_signature (parser, &attributes);\n \t  if (sig == error_mark_node)\n \t    {\n \t      cp_parser_skip_to_end_of_block_or_statement (parser);\n \t      token = cp_lexer_peek_token (parser->lexer);\n \t      continue;\n \t    }\n-\t  objc_add_method_declaration (sig, attributes);\n+\t  objc_add_method_declaration (is_class_method, sig, attributes);\n \t  cp_parser_consume_semicolon_at_end_of_statement (parser);\n \t}\n       else if (token->keyword == RID_AT_PROPERTY)\n@@ -21781,6 +21788,11 @@ cp_parser_objc_method_definition_list (cp_parser* parser)\n \t{\n \t  cp_token *ptk;\n \t  tree sig, attribute;\n+\t  bool is_class_method;\n+\t  if (token->type == CPP_PLUS)\n+\t    is_class_method = true;\n+\t  else\n+\t    is_class_method = false;\n \t  push_deferring_access_checks (dk_deferred);\n \t  sig = cp_parser_objc_method_signature (parser, &attribute);\n \t  if (sig == error_mark_node)\n@@ -21789,7 +21801,7 @@ cp_parser_objc_method_definition_list (cp_parser* parser)\n \t      token = cp_lexer_peek_token (parser->lexer);\n \t      continue;\n \t    }\n-\t  objc_start_method_definition (sig, attribute);\n+\t  objc_start_method_definition (is_class_method, sig, attribute);\n \n \t  /* For historical reasons, we accept an optional semicolon.  */\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))"}, {"sha": "cc7b54845b1a584b956c3f26ed8b8f49a22cd1c3", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -1,3 +1,20 @@\n+2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.h (objc_inherit_code): Removed.\n+\t* objc-act.c (objc_inherit_code): Removed.\n+\t(objc_set_method_type): Removed.\n+\t(objc_build_method_signature): Added is_class_method argument.\n+\tUse it instead of the global objc_inherit_code variable.\n+\t(objc_add_method_declaration): Same change.\n+\t(objc_start_method_definition): Same change.\n+\t(objc_generate_cxx_ctor_or_dtor): Updated call to\n+\tobjc_start_method_definition.  Do not call objc_set_method_type.\n+\t(adjust_type_for_id_default): Mark as inline.\n+\t(objc_synthesize_getter): Updated call to\n+\tobjc_start_method_definition.  Do not set objc_inherit_code.\n+\t(objc_synthesize_setter): Updated call to\n+\tobjc_start_method_definition.  Do not set objc_inherit_code.\t\n+\t\n 2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers.  Obvious updates"}, {"sha": "77324a395b5734bcf0c159672012643da1f6abcc", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -392,7 +392,6 @@ struct imp_entry *imp_list = 0;\n int imp_count = 0;\t/* `@implementation' */\n int cat_count = 0;\t/* `@category' */\n \n-enum tree_code objc_inherit_code;\n objc_ivar_visibility_kind objc_ivar_visibility;\n \n /* Use to generate method labels.  */\n@@ -1278,24 +1277,20 @@ build_property_reference (tree property, tree id)\n   return getter;\n }\n \n-void\n-objc_set_method_type (enum tree_code type)\n-{\n-  objc_inherit_code = (type == PLUS_EXPR\n-\t\t       ? CLASS_METHOD_DECL\n-\t\t       : INSTANCE_METHOD_DECL);\n-}\n-\n tree\n-objc_build_method_signature (tree rettype, tree selector,\n+objc_build_method_signature (bool is_class_method, tree rettype, tree selector,\n \t\t\t     tree optparms, bool ellipsis)\n {\n-  return build_method_decl (objc_inherit_code, rettype, selector,\n-\t\t\t    optparms, ellipsis);\n+  if (is_class_method)\n+    return build_method_decl (CLASS_METHOD_DECL, rettype, selector,\n+\t\t\t      optparms, ellipsis);\n+  else\n+    return build_method_decl (INSTANCE_METHOD_DECL, rettype, selector,\n+\t\t\t      optparms, ellipsis);\n }\n \n void\n-objc_add_method_declaration (tree decl, tree attributes)\n+objc_add_method_declaration (bool is_class_method, tree decl, tree attributes)\n {\n   if (!objc_interface_context)\n     {\n@@ -1309,15 +1304,15 @@ objc_add_method_declaration (tree decl, tree attributes)\n   objc_decl_method_attributes (&decl, attributes, 0);\n   objc_add_method (objc_interface_context,\n \t\t   decl,\n-\t\t   objc_inherit_code == CLASS_METHOD_DECL,\n+\t\t   is_class_method,\n \t\t   objc_method_optional_flag);\n }\n \n /* Return 'true' if the method definition could be started, and\n    'false' if not (because we are outside an @implementation context).\n */\n bool\n-objc_start_method_definition (tree decl, tree attributes)\n+objc_start_method_definition (bool is_class_method, tree decl, tree attributes)\n {\n   if (!objc_implementation_context)\n     {\n@@ -1338,7 +1333,7 @@ objc_start_method_definition (tree decl, tree attributes)\n   objc_decl_method_attributes (&decl, attributes, 0);\n   objc_add_method (objc_implementation_context,\n \t\t   decl,\n-\t\t   objc_inherit_code == CLASS_METHOD_DECL, \n+\t\t   is_class_method,\n \t\t   /* is optional */ false);\n   start_method_def (decl);\n   return true;\n@@ -5179,17 +5174,18 @@ objc_generate_cxx_ctor_or_dtor (bool dtor)\n   /* - (id) .cxx_construct { ... return self; } */\n   /* - (void) .cxx_construct { ... }            */\n \n-  objc_set_method_type (MINUS_EXPR);\n   objc_start_method_definition\n-   (objc_build_method_signature (build_tree_list (NULL_TREE,\n-\t\t\t\t\t\t  dtor\n-\t\t\t\t\t\t  ? void_type_node\n-\t\t\t\t\t\t  : objc_object_type),\n-\t\t\t\t get_identifier (dtor\n-\t\t\t\t\t\t ? TAG_CXX_DESTRUCT\n-\t\t\t\t\t\t : TAG_CXX_CONSTRUCT),\n-\t\t\t\t make_node (TREE_LIST),\n-\t\t\t\t false), NULL);\n+    (false /* is_class_method */,\n+     objc_build_method_signature (false /* is_class_method */,\n+\t\t\t\t  build_tree_list (NULL_TREE,\n+\t\t\t\t\t\t   dtor\n+\t\t\t\t\t\t   ? void_type_node\n+\t\t\t\t\t\t   : objc_object_type),\n+\t\t\t\t  get_identifier (dtor\n+\t\t\t\t\t\t  ? TAG_CXX_DESTRUCT\n+\t\t\t\t\t\t  : TAG_CXX_CONSTRUCT),\n+\t\t\t\t  make_node (TREE_LIST),\n+\t\t\t\t  false), NULL);\n   body = begin_function_body ();\n   compound_stmt = begin_compound_stmt (0);\n \n@@ -6498,8 +6494,7 @@ synth_id_with_class_suffix (const char *preamble, tree ctxt)\n \n /* If type is empty or only type qualifiers are present, add default\n    type of id (otherwise grokdeclarator will default to int).  */\n-\n-static tree\n+static inline tree\n adjust_type_for_id_default (tree type)\n {\n   if (!type)\n@@ -6557,7 +6552,6 @@ objc_build_keyword_decl (tree key_name, tree arg_type,\n }\n \n /* Given a chain of keyword_decl's, synthesize the full keyword selector.  */\n-\n static tree\n build_keyword_selector (tree selector)\n {\n@@ -8660,9 +8654,8 @@ objc_synthesize_getter (tree klass, tree class_method, tree property)\n   if (!decl)\n     return;\n \n-  objc_inherit_code = INSTANCE_METHOD_DECL;\n   /* For now no attributes.  */\n-  objc_start_method_definition (copy_node (decl), NULL_TREE);\n+  objc_start_method_definition (false /* is_class_method */, copy_node (decl), NULL_TREE);\n \n   body = c_begin_compound_stmt (true);\n   /* return self->_property_name; */\n@@ -8720,9 +8713,8 @@ objc_synthesize_setter (tree klass, tree class_method, tree property)\n   if (!decl)\n     return;\n \n-  objc_inherit_code = INSTANCE_METHOD_DECL;\n   /* For now, no attributes.  */\n-  objc_start_method_definition (copy_node (decl), NULL_TREE);\n+  objc_start_method_definition (false /* is_class_method */, copy_node (decl), NULL_TREE);\n \n   body = c_begin_compound_stmt (true);\n   /* _property_name = _value; */"}, {"sha": "f56ae7bf53b240aae597705bb74e48ddeb5a6a5e", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249a82c4c632bbba058b583d41b3829ae7e8f119/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=249a82c4c632bbba058b583d41b3829ae7e8f119", "patch": "@@ -176,7 +176,6 @@ extern GTY(()) struct imp_entry *imp_list;\n extern GTY(()) int imp_count;\t/* `@implementation' */\n extern GTY(()) int cat_count;\t/* `@category' */\n \n-extern GTY(()) enum tree_code objc_inherit_code;\n extern GTY(()) objc_ivar_visibility_kind objc_ivar_visibility;\n \n /* Objective-C/Objective-C++ global tree enumeration.  */"}]}