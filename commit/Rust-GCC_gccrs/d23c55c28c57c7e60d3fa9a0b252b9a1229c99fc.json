{"sha": "d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzYzU1YzI4YzU3YzdlNjBkM2ZhOWEwYjI1MmI5YTEyMjljOTlmYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@cat.daikokuya.demon.co.uk", "date": "2001-11-06T21:12:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-11-06T21:12:14Z"}, "message": "Clean up langhooks\n\n\t* alias.c:: Include langhooks.h.\n\t* emit-rtl.c: Similarly.\n\t* toplev.c: Similarly.\n\t* tree-inline.c: Similarly.\n\t* langhooks-def.h: New, the old langhooks.h.  Give the default\n\thooks a common prefix.\n\t* langhooks.h: Contents extracted from toplev.h.\n\t* toplev.h: Move langhook stuff to langhooks.h.\n\t* langhooks.c: Give default hooks a common prefix.\n\n\t* c-lang.c: Include langhooks-def.h.\n\t* ada/misc.c: Similarly.\n\t* cp/cp-lang.c: Similarly.\n\t* f/com.c: Similarly.\n\t* java/lang.c: Similarly.\n\t* objc/objc-act.c: Similarly.\n\n\t* Makefile.in: Update.\n\t* ada/Makefile.in: Similarly.\n\t* cp/Make-lang.in: Similarly.\n\t* f/Make-lang.in: Similarly.\n\t* java/Make-lang.in: Similarly.\n\t* objc/Make-lang.in: Similarly.\n\nFrom-SVN: r46813", "tree": {"sha": "e218294f121610ce23014b4b8954bac5d7230fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e218294f121610ce23014b4b8954bac5d7230fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/comments", "author": null, "committer": null, "parents": [{"sha": "80f9249adae5fd98b349c0c72d8eb43f21ec44e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f9249adae5fd98b349c0c72d8eb43f21ec44e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f9249adae5fd98b349c0c72d8eb43f21ec44e9"}], "stats": {"total": 438, "additions": 255, "deletions": 183}, "files": [{"sha": "3c88f247d6aac25ab3e75bbe6760a54191701b64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,3 +1,20 @@\n+2001-11-06  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* alias.c:: Include langhooks.h.\n+\t* emit-rtl.c: Similarly.\n+\t* toplev.c: Similarly.\n+\t* tree-inline.c: Similarly.\n+\t* langhooks-def.h: New, the old langhooks.h.  Give the default\n+\thooks a common prefix.\n+\t* langhooks.h: Contents extracted from toplev.h.\n+\t* toplev.h: Move langhook stuff to langhooks.h.\n+\t* langhooks.c: Give default hooks a common prefix.\n+\n+\t* c-lang.c: Include langhooks-def.h.\n+\t* objc/objc-act.c: Similarly.\n+\t* Makefile.in: Update.\n+\t* objc/Make-lang.in: Update.\n+\n 2001-11-06  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/install.texi: Document that configure options not listed in"}, {"sha": "73596948bb91297c9eb81ffdf2789d9bde8f5e80", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1168,7 +1168,8 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(GGC_H)  c-lex.h toplev.h diagnostic.h output.h function.h \\\n-    $(RTL_H) $(EXPR_H) tree-inline.h insn-config.h integrate.h langhooks.h\n+    $(RTL_H) $(EXPR_H) tree-inline.h insn-config.h integrate.h langhooks.h \\\n+    langhooks-def.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n     debug.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n@@ -1344,12 +1345,12 @@ prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) Makefile prefix.h\n convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h toplev.h\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h \\\n-   tree-inline.h $(RTL_H) insn-config.h integrate.h langhooks.h\n+   tree-inline.h $(RTL_H) insn-config.h integrate.h langhooks.h langhooks-def.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h function.h toplev.h \\\n    $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H)\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n    expr.h flags.h params.h input.h insn-config.h $(INTEGRATE_H) \\\n-   $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n+   $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h langhooks.h \\\n    $(C_COMMON_H) tree-inline.h\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n@@ -1364,7 +1365,8 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n-   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) halfpic.h\n+   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) halfpic.h \\\n+   langhooks.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n@@ -1439,7 +1441,7 @@ xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) xcoffout.h \\\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h \\\n-   $(HASHTAB_H) $(TM_P_H) debug.h\n+   $(HASHTAB_H) $(TM_P_H) debug.h langhooks.h\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h $(TM_P_H)\n integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    debug.h $(INTEGRATE_H) insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n@@ -1545,7 +1547,7 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) conditions.h hard-reg-set.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) \\\n-   $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H)\n+   $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h"}, {"sha": "b7c2e6e71f101e6acd94dd5ad167cae35d7d9a1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,3 +1,8 @@\n+2001-11-06  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* misc.c: Include langhooks-def.h.\n+\t* Makefile.in: Update.\n+\n 2001-10-30  Robert Dewar <dewar@gnat.com>\n \n \t* style.adb:"}, {"sha": "4bd750d94a58205eae5ba8116a5c813443d1ee30", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -2587,7 +2587,7 @@ misc.o : misc.c $(CONFIG_H) $(TREE_H) $(RTL_H) $(srcdir)/../expr.h \\\n    $(srcdir)/../flags.h $(srcdir)/../diagnostic.h $(srcdir)/../output.h \\\n    $(srcdir)/../except.h ../tm_p.h ../langhooks.h ada.h types.h atree.h \\\n    nlists.h elists.h sinfo.h einfo.h namet.h stringt.h uintp.h fe.h \\\n-   $(ADA_TREE_H) gigi.h\n+   $(ADA_TREE_H) gigi.h ../langhooks-def.h\n \n targtyps.o : targtyps.c $(CONFIG_H) ada.h types.h atree.h nlists.h elists.h \\\n    uintp.h sinfo.h einfo.h namet.h snames.h stringt.h urealp.h fe.h \\"}, {"sha": "8ef1063c2fa14a9bd24a15ac484dd56aa031ea58", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision$\n+ *                             $Revision: 1.8 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -53,6 +53,7 @@\n #include \"except.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n #include \"ada.h\"\n #include \"types.h\""}, {"sha": "84fbdc9ee0b8d26882ac8b113d3209ecc6458843", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cselib.h\"\n #include \"splay-tree.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n \n /* The alias sets assigned to MEMs assist the back-end in determining\n    which MEMs can alias which other MEMs.  In general, two MEMs in"}, {"sha": "5f8f43ac0941183a797f537ae7ce40e3f3a1dde7", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -39,6 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"integrate.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n static int c_tree_printer PARAMS ((output_buffer *));\n static int c_missing_noreturn_ok_p PARAMS ((tree));"}, {"sha": "a36f3e4a09b89e2a4565604f011f7f9a3373aa40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,3 +1,8 @@\n+2001-11-06  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* Make-lang.in: Update.\n+\t* cp-lang.c: Include langhooks-def.h.\n+\n 2001-11-04  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* pt.c (tsubst_copy): Call tsubst for TYPEOF_EXPR."}, {"sha": "c57cbe523ed9395f0f9d0860f810c20ecd8de74d", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -241,7 +241,7 @@ cp/spew.o: cp/spew.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h toplev.h\n cp/lex.o: cp/lex.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h c-pragma.h \\\n   toplev.h output.h mbchar.h $(GGC_H) input.h diagnostic.h cp/operators.def \\\n   $(TM_P_H)\n-cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h\n+cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h langhooks-def.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h"}, {"sha": "fa3d766e63512de75163121de5fea89fdbc7d2d9", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n "}, {"sha": "9bbaee4432be0f35f110509a8520c34645feadbd", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -55,6 +55,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"basic-block.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n+#include \"langhooks.h\"\n \n /* Commonly used modes.  */\n "}, {"sha": "cc346bd7b6b8ab81600707f6610641ec80c3a350", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,3 +1,8 @@\n+Tue Nov  6 21:17:47 2001  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* com.c: Include langhooks-def.h.\n+\t* Make-lang.in: Update.\n+\n 2001-11-04  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.texi: Split off invoke.texi (preliminary to using it"}, {"sha": "464c75ed81dd374abe89ccd16b7e421b5f1c657e", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -423,7 +423,7 @@ f/com.o: f/com.c f/proj.h $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\\n  f/bad.def f/where.h glimits.h f/top.h f/lex.h f/type.h f/intrin.h \\\n  f/intrin.def f/lab.h f/symbol.h f/symbol.def f/equiv.h f/storag.h f/global.h \\\n  f/name.h f/expr.h f/implic.h f/src.h f/st.h $(GGC_H) toplev.h diagnostic.h \\\n- langhooks.h\n+ langhooks.h langhooks-def.h\n f/data.o: f/data.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/data.h f/bld.h f/bld-op.def \\\n  f/bit.h f/malloc.h f/com.h f/com-rt.def $(TREE_H) f/info.h f/info-b.def \\\n  f/info-k.def f/info-w.def f/target.h f/bad.h f/bad.def f/where.h glimits.h \\"}, {"sha": "428458b8c614781cbca95b222405cdf81976a3ed", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -90,6 +90,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n /* VMS-specific definitions */\n #ifdef VMS"}, {"sha": "ae4fcb0af3a709f929fb09b951eb1a82e1c424b8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,3 +1,8 @@\n+2001-11-06  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* lang.c: Include langhooks-def.h.\n+\t* Make-lang.in: Update.\n+\n 2001-10-31  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Make-lang.in: Replace $(INTL_TARGETS) with po-generated."}, {"sha": "7186aed918d20dd9cefac4e84bef54d83fc70e8d", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -268,7 +268,8 @@ java/jcf-write.o: java/jcf-write.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n java/jv-scan.o: java/jv-scan.c $(CONFIG_H) $(SYSTEM_H) version.h\n java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H)\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n-  toplev.h $(SYSTEM_H) $(RTL_H) $(EXPR_H) diagnostic.h langhooks.h\n+  toplev.h $(SYSTEM_H) $(RTL_H) $(EXPR_H) diagnostic.h langhooks.h \\\n+  langhooks-def.h\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   toplev.h $(GGC_H)\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\"}, {"sha": "91114b19e1fd583f528e580b7c759a1b8ffea310", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -35,6 +35,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n #include \"flags.h\"\n #include \"xref.h\"\n #include \"ggc.h\""}, {"sha": "0e615cb5bca4a52f70a0ecd8be31656f2078b1bb", "filename": "gcc/langhooks-def.h", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -0,0 +1,109 @@\n+/* Default macros to initialize the lang_hooks data structure.\n+   Copyright 2001 Free Software Foundation, Inc.\n+   Contributed by Alexandre Oliva  <aoliva@redhat.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_LANG_HOOKS_DEF_H\n+#define GCC_LANG_HOOKS_DEF_H\n+\n+/* Provide a hook routine for alias sets that always returns 1.  This is\n+   used by languages that haven't deal with alias sets yet.  */\n+extern HOST_WIDE_INT hook_get_alias_set_0\tPARAMS ((tree));\n+\n+/* Note to creators of new hooks:\n+\n+   The macros in this file should NOT be surrounded by a\n+   #ifdef...#endif pair, since this file declares the defaults.  Each\n+   front end overrides any hooks it wishes to, in the file containing\n+   its struct lang_hooks, AFTER including this file.\n+\n+   Prefix all default hooks with \"lhd_\".  */\n+\n+/* See langhooks.h for the definition and documentation of each hook.  */\n+\n+extern void lhd_do_nothing PARAMS ((void));\n+extern int lhd_decode_option PARAMS ((int, char **));\n+extern HOST_WIDE_INT lhd_get_alias_set PARAMS ((tree));\n+extern void lhd_clear_binding_stack PARAMS ((void));\n+\n+/* Declarations of default tree inlining hooks.  */\n+tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n+\t\t\t\t\t\t\t walk_tree_fn,\n+\t\t\t\t\t\t\t void *, void *));\n+int lhd_tree_inlining_cannot_inline_tree_fn\tPARAMS ((tree *));\n+int lhd_tree_inlining_disregard_inline_limits\tPARAMS ((tree));\n+tree lhd_tree_inlining_add_pending_fn_decls\tPARAMS ((void *, tree));\n+int lhd_tree_inlining_tree_chain_matters_p\tPARAMS ((tree));\n+int lhd_tree_inlining_auto_var_in_fn_p\t\tPARAMS ((tree, tree));\n+tree lhd_tree_inlining_copy_res_decl_for_inlining PARAMS ((tree, tree,\n+\t\t\t\t\t\t\t   tree, void *,\n+\t\t\t\t\t\t\t   int *, void *));\n+int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n+\n+#define LANG_HOOKS_INIT\t\t\tlhd_do_nothing\n+#define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n+#define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n+#define LANG_HOOKS_INIT_OPTIONS\t\tlhd_do_nothing\n+#define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n+#define LANG_HOOKS_POST_OPTIONS\t\tlhd_do_nothing\n+#define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n+#define LANG_HOOKS_HONOR_READONLY\tfalse\n+\n+/* Tree inlining hooks.  */\n+#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES lhd_tree_inlining_walk_subtrees\n+#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n+  lhd_tree_inlining_cannot_inline_tree_fn\n+#define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n+  lhd_tree_inlining_disregard_inline_limits\n+#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n+  lhd_tree_inlining_add_pending_fn_decls\n+#define LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P \\\n+  lhd_tree_inlining_tree_chain_matters_p\n+#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n+  lhd_tree_inlining_auto_var_in_fn_p\n+#define LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING \\\n+  lhd_tree_inlining_copy_res_decl_for_inlining\n+#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n+  lhd_tree_inlining_anon_aggr_type_p\n+\n+#define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n+  LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n+  LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n+  LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n+  LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS, \\\n+  LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P, \\\n+  LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n+  LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING, \\\n+  LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n+} \\\n+\n+/* The whole thing.  The structure is defined in toplev.h.  */\n+#define LANG_HOOKS_INITIALIZER { \\\n+  LANG_HOOKS_INIT, \\\n+  LANG_HOOKS_FINISH, \\\n+  LANG_HOOKS_CLEAR_BINDING_STACK, \\\n+  LANG_HOOKS_INIT_OPTIONS, \\\n+  LANG_HOOKS_DECODE_OPTION, \\\n+  LANG_HOOKS_POST_OPTIONS, \\\n+  LANG_HOOKS_GET_ALIAS_SET, \\\n+  LANG_HOOKS_HONOR_READONLY, \\\n+  LANG_HOOKS_TREE_INLINING_INITIALIZER \\\n+}\n+\n+#endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "a253af372a2c226ddfcaa1c413d1f5801123a009", "filename": "gcc/langhooks.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -28,18 +28,19 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"integrate.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n /* Do nothing; in many cases the default hook.  */\n \n void\n-lang_hook_default_do_nothing ()\n+lhd_do_nothing ()\n {\n }\n \n /* Do nothing; the default hook to decode an option.  */\n \n int\n-lang_hook_default_decode_option (argc, argv)\n+lhd_decode_option (argc, argv)\n      int argc ATTRIBUTE_UNUSED;\n      char **argv ATTRIBUTE_UNUSED;\n {\n@@ -49,7 +50,7 @@ lang_hook_default_decode_option (argc, argv)\n /* Provide a default routine to clear the binding stack.  This is used\n    by languages that don't need to do anything special.  */\n void\n-lang_hook_default_clear_binding_stack ()\n+lhd_clear_binding_stack ()\n {\n   while (! global_bindings_p ())\n     poplevel (0, 0, 0);\n@@ -59,7 +60,7 @@ lang_hook_default_clear_binding_stack ()\n    is used by languages that don't need to do anything special.  */\n \n HOST_WIDE_INT\n-lang_hook_default_get_alias_set (t)\n+lhd_get_alias_set (t)\n      tree t ATTRIBUTE_UNUSED;\n {\n   return -1;\n@@ -87,7 +88,7 @@ hook_get_alias_set_0 (t)\n    when the function is called.  */\n \n tree\n-tree_inlining_default_hook_walk_subtrees (tp,subtrees,func,data,htab)\n+lhd_tree_inlining_walk_subtrees (tp,subtrees,func,data,htab)\n      tree *tp ATTRIBUTE_UNUSED;\n      int *subtrees ATTRIBUTE_UNUSED;\n      walk_tree_fn func ATTRIBUTE_UNUSED;\n@@ -102,7 +103,7 @@ tree_inlining_default_hook_walk_subtrees (tp,subtrees,func,data,htab)\n    inlining a given function.  */\n \n int\n-tree_inlining_default_hook_cannot_inline_tree_fn (fnp)\n+lhd_tree_inlining_cannot_inline_tree_fn (fnp)\n      tree *fnp ATTRIBUTE_UNUSED;\n {\n   return 0;\n@@ -113,7 +114,7 @@ tree_inlining_default_hook_cannot_inline_tree_fn (fnp)\n    if it would exceed inlining limits.  */\n \n int\n-tree_inlining_default_hook_disregard_inline_limits (fn)\n+lhd_tree_inlining_disregard_inline_limits (fn)\n      tree fn ATTRIBUTE_UNUSED;\n {\n   return 0;\n@@ -127,7 +128,7 @@ tree_inlining_default_hook_disregard_inline_limits (fn)\n    returned.  */\n \n tree\n-tree_inlining_default_hook_add_pending_fn_decls (vafnp, pfn)\n+lhd_tree_inlining_add_pending_fn_decls (vafnp, pfn)\n      void *vafnp ATTRIBUTE_UNUSED;\n      tree pfn;\n {\n@@ -139,7 +140,7 @@ tree_inlining_default_hook_add_pending_fn_decls (vafnp, pfn)\n    whether it should be walked, copied and preserved across copies.  */\n \n int\n-tree_inlining_default_hook_tree_chain_matters_p (t)\n+lhd_tree_inlining_tree_chain_matters_p (t)\n      tree t ATTRIBUTE_UNUSED;\n {\n   return 0;\n@@ -149,7 +150,7 @@ tree_inlining_default_hook_tree_chain_matters_p (t)\n    whether VT is an automatic variable defined in function FT.  */\n \n int\n-tree_inlining_default_hook_auto_var_in_fn_p (var, fn)\n+lhd_tree_inlining_auto_var_in_fn_p (var, fn)\n      tree var, fn;\n {\n   return (DECL_P (var) && DECL_CONTEXT (var) == fn\n@@ -169,8 +170,8 @@ tree_inlining_default_hook_auto_var_in_fn_p (var, fn)\n    match RES.  */\n \n tree\n-tree_inlining_default_hook_copy_res_decl_for_inlining (res, fn, caller,\n-\t\t\t\t\t\t       dm, ndp, texps)\n+lhd_tree_inlining_copy_res_decl_for_inlining (res, fn, caller,\n+\t\t\t\t\t      dm, ndp, texps)\n      tree res, fn, caller;\n      void *dm ATTRIBUTE_UNUSED;\n      int *ndp ATTRIBUTE_UNUSED;\n@@ -184,7 +185,7 @@ tree_inlining_default_hook_copy_res_decl_for_inlining (res, fn, caller,\n    i.e., one whose members are in the same scope as the union itself.  */\n \n int\n-tree_inlining_default_hook_anon_aggr_type_p (t)\n+lhd_tree_inlining_anon_aggr_type_p (t)\n      tree t ATTRIBUTE_UNUSED;\n {\n   return 0;"}, {"sha": "2f97b7ae491cce6665ff2ec8f6a5f6ead4ffa6c0", "filename": "gcc/langhooks.h", "status": "modified", "additions": 69, "deletions": 89, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -1,6 +1,5 @@\n-/* Default macros to initialize the lang_hooks data structure.\n+/* The lang_hooks data structure.\n    Copyright 2001 Free Software Foundation, Inc.\n-   Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GNU CC.\n \n@@ -22,92 +21,73 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_LANG_HOOKS_H\n #define GCC_LANG_HOOKS_H\n \n-/* Provide a hook routine for alias sets that always returns 1.  This is\n-   used by languages that haven't deal with alias sets yet.  */\n-extern HOST_WIDE_INT hook_get_alias_set_0\tPARAMS ((tree));\n-\n-/* Note to creators of new hooks:\n-\n-   The macros in this file should NOT be surrounded by a\n-   #ifdef...#endif pair, since this file declares the defaults.  Each\n-   front end overrides any hooks it wishes to, in the file containing\n-   its struct lang_hooks, AFTER including this file.  */\n-\n-/* See toplev.h for the definition and documentation of each hook.  */\n-\n-extern void lang_hook_default_do_nothing PARAMS ((void));\n-extern int lang_hook_default_decode_option PARAMS ((int, char **));\n-extern HOST_WIDE_INT lang_hook_default_get_alias_set PARAMS ((tree));\n-extern void lang_hook_default_clear_binding_stack PARAMS ((void));\n-\n-#define LANG_HOOKS_INIT\t\t\tlang_hook_default_do_nothing\n-#define LANG_HOOKS_FINISH\t\tlang_hook_default_do_nothing\n-#define LANG_HOOKS_CLEAR_BINDING_STACK\tlang_hook_default_clear_binding_stack\n-#define LANG_HOOKS_INIT_OPTIONS\t\tlang_hook_default_do_nothing\n-#define LANG_HOOKS_DECODE_OPTION\tlang_hook_default_decode_option\n-#define LANG_HOOKS_POST_OPTIONS\t\tlang_hook_default_do_nothing\n-#define LANG_HOOKS_GET_ALIAS_SET\tlang_hook_default_get_alias_set\n-\n-#define LANG_HOOKS_HONOR_READONLY\tfalse\n-\n-/* Declarations of default tree inlining hooks.  */\n-tree tree_inlining_default_hook_walk_subtrees\t\tPARAMS ((tree *, int *,\n-\t\t\t\t\t\t\t\t walk_tree_fn,\n-\t\t\t\t\t\t\t\t void *,\n-\t\t\t\t\t\t\t\t void *));\n-int tree_inlining_default_hook_cannot_inline_tree_fn\tPARAMS ((tree *));\n-int tree_inlining_default_hook_disregard_inline_limits\tPARAMS ((tree));\n-tree tree_inlining_default_hook_add_pending_fn_decls\tPARAMS ((void *,\n-\t\t\t\t\t\t\t\t tree));\n-int tree_inlining_default_hook_tree_chain_matters_p\tPARAMS ((tree));\n-int tree_inlining_default_hook_auto_var_in_fn_p\t\tPARAMS ((tree, tree));\n-tree tree_inlining_default_hook_copy_res_decl_for_inlining PARAMS ((tree, tree,\n-\t\t\t\t\t\t\t\t    tree,\n-\t\t\t\t\t\t\t\t    void *,\n-\t\t\t\t\t\t\t\t    int *,\n-\t\t\t\t\t\t\t\t    void *));\n-int tree_inlining_default_hook_anon_aggr_type_p\t\tPARAMS ((tree));\n-\n-/* Tree inlining hooks.  */\n-#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n-  tree_inlining_default_hook_walk_subtrees\n-#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n-  tree_inlining_default_hook_cannot_inline_tree_fn\n-#define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n-  tree_inlining_default_hook_disregard_inline_limits\n-#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n-  tree_inlining_default_hook_add_pending_fn_decls\n-#define LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P \\\n-  tree_inlining_default_hook_tree_chain_matters_p\n-#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n-  tree_inlining_default_hook_auto_var_in_fn_p\n-#define LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING \\\n-  tree_inlining_default_hook_copy_res_decl_for_inlining\n-#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n-  tree_inlining_default_hook_anon_aggr_type_p\n-\n-#define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n-  LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n-  LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n-  LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n-  LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS, \\\n-  LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P, \\\n-  LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n-  LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n-} \\\n-\n-/* The whole thing.  The structure is defined in toplev.h.  */\n-#define LANG_HOOKS_INITIALIZER { \\\n-  LANG_HOOKS_INIT, \\\n-  LANG_HOOKS_FINISH, \\\n-  LANG_HOOKS_CLEAR_BINDING_STACK, \\\n-  LANG_HOOKS_INIT_OPTIONS, \\\n-  LANG_HOOKS_DECODE_OPTION, \\\n-  LANG_HOOKS_POST_OPTIONS, \\\n-  LANG_HOOKS_GET_ALIAS_SET, \\\n-  LANG_HOOKS_HONOR_READONLY, \\\n-  LANG_HOOKS_TREE_INLINING_INITIALIZER \\\n-}\n+/* The following hooks are documented in langhooks.c.  Must not be\n+   NULL.  */\n+\n+struct lang_hooks_for_tree_inlining\n+{\n+  union tree_node *(*walk_subtrees) PARAMS ((union tree_node **, int *,\n+\t\t\t\t\t     union tree_node *(*)\n+\t\t\t\t\t     (union tree_node **,\n+\t\t\t\t\t      int *, void *),\n+\t\t\t\t\t     void *, void *));\n+  int (*cannot_inline_tree_fn) PARAMS ((union tree_node **));\n+  int (*disregard_inline_limits) PARAMS ((union tree_node *));\n+  union tree_node *(*add_pending_fn_decls) PARAMS ((void *,\n+\t\t\t\t\t\t    union tree_node *));\n+  int (*tree_chain_matters_p) PARAMS ((union tree_node *));\n+  int (*auto_var_in_fn_p) PARAMS ((union tree_node *, union tree_node *));\n+  union tree_node *(*copy_res_decl_for_inlining) PARAMS ((union tree_node *,\n+\t\t\t\t\t\t\t  union tree_node *,\n+\t\t\t\t\t\t\t  union tree_node *,\n+\t\t\t\t\t\t\t  void *, int *,\n+\t\t\t\t\t\t\t  void *));\n+  int (*anon_aggr_type_p) PARAMS ((union tree_node *));\n+};\n+\n+/* Language-specific hooks.  See langhooks-def.h for defaults.  */\n+\n+struct lang_hooks\n+{\n+  /* Called first, to initialize the front end.  */\n+  void (*init) PARAMS ((void));\n+\n+  /* Called last, as a finalizer.  */\n+  void (*finish) PARAMS ((void));\n+\n+  /* Called immediately after parsing to clear the binding stack.  */\n+  void (*clear_binding_stack) PARAMS ((void));\n+\n+  /* Called to initialize options, before any calls to decode_option.  */\n+  void (*init_options) PARAMS ((void));\n+\n+  /* Function called with an option vector as argument, to decode a\n+     single option (typically starting with -f or -W or +).  It should\n+     return the number of command-line arguments it uses if it handles\n+     the option, or 0 and not complain if it does not recognise the\n+     option.  If this function returns a negative number, then its\n+     absolute value is the number of command-line arguments used, but,\n+     in addition, no language-independent option processing should be\n+     done for this option.  */\n+  int (*decode_option) PARAMS ((int, char **));\n+\n+  /* Called when all command line options have been processed.  */\n+  void (*post_options) PARAMS ((void));\n+\n+  /* Called to obtain the alias set to be used for an expression or type.\n+     Returns -1 if the language does nothing special for it.  */\n+  HOST_WIDE_INT (*get_alias_set) PARAMS ((tree));\n+\n+  /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n+  bool honor_readonly;\n+\n+  struct lang_hooks_for_tree_inlining tree_inlining;\n+\n+  /* Whenever you add entries here, make sure you adjust langhooks.h\n+     and langhooks.c accordingly.  */\n+};\n+\n+/* Each front end provides its own.  */\n+extern struct lang_hooks lang_hooks;\n \n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "9b777d4289da9fb78182721a84fc5da6f113afc0", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -80,7 +80,8 @@ objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \\\n    $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n-   $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h\n+   $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \\\n+   $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-act.c\n "}, {"sha": "4e1c48de2a61f8a882a867e459210d825d65340a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -59,6 +59,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct."}, {"sha": "2451aced5a6ba26dcbaab70d10a52a7a61213449", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -68,6 +68,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"integrate.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\""}, {"sha": "74fef17f4595bac06473119e7db5e4c3e390ef45", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -115,75 +115,6 @@ extern void check_global_declarations   PARAMS ((union tree_node **, int));\n extern const char *progname;\n extern const char *dump_base_name;\n \n-/* The following hooks are documented in langhooks.c.  Must not be\n-   NULL.  */\n-\n-struct lang_hooks_for_tree_inlining\n-{\n-  union tree_node *(*walk_subtrees) PARAMS ((union tree_node **, int *,\n-\t\t\t\t\t     union tree_node *(*)\n-\t\t\t\t\t     (union tree_node **,\n-\t\t\t\t\t      int *, void *),\n-\t\t\t\t\t     void *, void *));\n-  int (*cannot_inline_tree_fn) PARAMS ((union tree_node **));\n-  int (*disregard_inline_limits) PARAMS ((union tree_node *));\n-  union tree_node *(*add_pending_fn_decls) PARAMS ((void *,\n-\t\t\t\t\t\t    union tree_node *));\n-  int (*tree_chain_matters_p) PARAMS ((union tree_node *));\n-  int (*auto_var_in_fn_p) PARAMS ((union tree_node *, union tree_node *));\n-  union tree_node *(*copy_res_decl_for_inlining) PARAMS ((union tree_node *,\n-\t\t\t\t\t\t\t  union tree_node *,\n-\t\t\t\t\t\t\t  union tree_node *,\n-\t\t\t\t\t\t\t  void *, int *,\n-\t\t\t\t\t\t\t  void *));\n-  int (*anon_aggr_type_p) PARAMS ((union tree_node *));\n-};\n-\n-/* Language-specific hooks.  See langhooks.h for defaults.  */\n-\n-struct lang_hooks\n-{\n-  /* Called first, to initialize the front end.  */\n-  void (*init) PARAMS ((void));\n-\n-  /* Called last, as a finalizer.  */\n-  void (*finish) PARAMS ((void));\n-\n-  /* Called immediately after parsing to clear the binding stack.  */\n-  void (*clear_binding_stack) PARAMS ((void));\n-\n-  /* Called to initialize options, before any calls to decode_option.  */\n-  void (*init_options) PARAMS ((void));\n-\n-  /* Function called with an option vector as argument, to decode a\n-     single option (typically starting with -f or -W or +).  It should\n-     return the number of command-line arguments it uses if it handles\n-     the option, or 0 and not complain if it does not recognise the\n-     option.  If this function returns a negative number, then its\n-     absolute value is the number of command-line arguments used, but,\n-     in addition, no language-independent option processing should be\n-     done for this option.  */\n-  int (*decode_option) PARAMS ((int, char **));\n-\n-  /* Called when all command line options have been processed.  */\n-  void (*post_options) PARAMS ((void));\n-\n-  /* Called to obtain the alias set to be used for an expression or type.\n-     Returns -1 if the language does nothing special for it.  */\n-  HOST_WIDE_INT (*get_alias_set) PARAMS ((tree));\n-\n-  /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n-  bool honor_readonly;\n-\n-  struct lang_hooks_for_tree_inlining tree_inlining;\n-\n-  /* Whenever you add entries here, make sure you adjust langhooks.h\n-     and langhooks.c accordingly.  */\n-};\n-\n-/* Each front end provides its own.  */\n-extern struct lang_hooks lang_hooks;\n-\n /* The hashtable, so that the C front ends can pass it to cpplib.  */\n extern struct ht *ident_hash;\n "}, {"sha": "a4f483ae3e46842f22141dc2634b06c4ec54245b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d23c55c28c57c7e60d3fa9a0b252b9a1229c99fc", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"varray.h\"\n #include \"hashtab.h\"\n #include \"splay-tree.h\"\n+#include \"langhooks.h\"\n \n /* This should be eventually be generalized to other languages, but\n    this would require a shared function-as-trees infrastructure.  */"}]}