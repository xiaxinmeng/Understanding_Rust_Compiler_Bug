{"sha": "59564c5e9a60e8d19a594020f329c3f71bcc0262", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1NjRjNWU5YTYwZThkMTlhNTk0MDIwZjMyOWMzZjcxYmNjMDI2Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-02T22:25:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-02T22:25:51Z"}, "message": "locale_facets.tcc (money_get<>::_M_extract): Reorganize a bit the main parsing loop...\n\n2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n\tReorganize a bit the main parsing loop, thus early detecting\n\tan empty value component.\n\t* testsuite/22_locale/money_get/get/char/16.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/16.cc: New.\n\nFrom-SVN: r78788", "tree": {"sha": "7d4104b6e6bdf96d853500c11f97a1ebbcfe1806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4104b6e6bdf96d853500c11f97a1ebbcfe1806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59564c5e9a60e8d19a594020f329c3f71bcc0262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59564c5e9a60e8d19a594020f329c3f71bcc0262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59564c5e9a60e8d19a594020f329c3f71bcc0262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59564c5e9a60e8d19a594020f329c3f71bcc0262/comments", "author": null, "committer": null, "parents": [{"sha": "d87e83b9b6fa31bc2e3b9406ee890c39343dcb8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87e83b9b6fa31bc2e3b9406ee890c39343dcb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87e83b9b6fa31bc2e3b9406ee890c39343dcb8a"}], "stats": {"total": 202, "additions": 176, "deletions": 26}, "files": [{"sha": "cbe40379d3af37d5d589ef453559b76437ecfcae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=59564c5e9a60e8d19a594020f329c3f71bcc0262", "patch": "@@ -1,3 +1,11 @@\n+2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n+\tReorganize a bit the main parsing loop, thus early detecting\n+\tan empty value component.\n+\t* testsuite/22_locale/money_get/get/char/16.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/16.cc: New.\n+\n 2004-03-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tSupport automake 1.8.2"}, {"sha": "1f36742cd9964da037acea9d9b06c26a823b235b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=59564c5e9a60e8d19a594020f329c3f71bcc0262", "patch": "@@ -1193,12 +1193,10 @@ namespace std\n \tconst __cache_type* __lc = __uc(__loc);\n \tconst char_type* __lit = __lc->_M_atoms;\n \n-\tconst money_base::pattern __p = __lc->_M_neg_format;\n-\n \t// Deduced sign.\n \tbool __negative = false;\n-\t// True for more than one character long sign.\n-\tbool __long_sign = false;\n+\t// Sign size.\n+\tsize_type __sign_size = 0;\n \t// String of grouping info from thousands_sep plucked from __units.\n \tstring __grouping_tmp;\n \tif (__lc->_M_use_grouping)\n@@ -1218,48 +1216,44 @@ namespace std\n \n \tconst char_type* __lit_zero = __lit + _S_zero;\n \tconst char_type* __q;\n-\tfor (int __i = 0; __beg != __end && __i < 4 && __testvalid; ++__i)\n+\tconst money_base::pattern __p = __lc->_M_neg_format;\t\n+\tfor (int __i = 0; __i < 4 && __testvalid; ++__i)\n \t  {\n \t    const part __which = static_cast<part>(__p.field[__i]);\n \t    switch (__which)\n \t      {\n \t      case money_base::symbol:\n \t\tif (__io.flags() & ios_base::showbase\n-\t\t    || __i < 2 || __long_sign\n+\t\t    || __i < 2 || __sign_size > 1\n \t\t    || ((static_cast<part>(__p.field[3]) != money_base::none)\n \t\t\t&& __i == 2))\n \t\t  {\n \t\t    // According to 22.2.6.1.2, p2, symbol is required\n-\t\t    // if (__io.flags() & ios_base::showbase),\n-\t\t    // otherwise is optional and consumed only if\n-\t\t    // other characters are needed to complete the\n-\t\t    // format.\n+\t\t    // if (__io.flags() & ios_base::showbase), otherwise\n+\t\t    // is optional and consumed only if other characters\n+\t\t    // are needed to complete the format.\n \t\t    const size_type __len = __lc->_M_curr_symbol_size;\n \t\t    size_type __j = 0;\n \t\t    for (; __beg != __end && __j < __len\n \t\t\t   && *__beg == __lc->_M_curr_symbol[__j];\n \t\t\t ++__beg, ++__j);\n-\t\t    // When (__io.flags() & ios_base::showbase)\n-\t\t    // symbol is required.\n \t\t    if (__j != __len && (__io.flags() & ios_base::showbase))\n \t\t      __testvalid = false;\n \t\t  }\n \t\tbreak;\n \t      case money_base::sign:\n \t\t// Sign might not exist, or be more than one character long.\n-\t\tif (__lc->_M_positive_sign_size\n+\t\tif (__lc->_M_positive_sign_size && __beg != __end\n \t\t    && *__beg == __lc->_M_positive_sign[0])\n \t\t  {\n-\t\t    if (__lc->_M_positive_sign_size > 1)\n-\t\t      __long_sign = true;\n+\t\t    __sign_size = __lc->_M_positive_sign_size;\n \t\t    ++__beg;\n \t\t  }\n-\t\telse if (__lc->_M_negative_sign_size\n+\t\telse if (__lc->_M_negative_sign_size && __beg != __end\n \t\t\t && *__beg == __lc->_M_negative_sign[0])\n \t\t  {\n \t\t    __negative = true;\n-\t\t    if (__lc->_M_negative_sign_size > 1)\n-\t\t      __long_sign = true;\t\t    \n+\t\t    __sign_size = __lc->_M_negative_sign_size;\n \t\t    ++__beg;\n \t\t  }\n \t\telse if (__lc->_M_positive_sign_size\n@@ -1307,6 +1301,8 @@ namespace std\n \t\t    }\n \t\t  else\n \t\t    break;\n+\t\tif (__res.empty())\n+\t\t  __testvalid = false;\n \t\tbreak;\n \t      case money_base::space:\n \t      case money_base::none:\n@@ -1319,21 +1315,19 @@ namespace std\n \t  }\n \n \t// Need to get the rest of the sign characters, if they exist.\n-\tif (__long_sign)\n+\tif (__sign_size > 1 && __testvalid)\n \t  {\n \t    const char_type* __sign = __negative ? __lc->_M_negative_sign\n \t                                         : __lc->_M_positive_sign;\n-\t    const size_type __len = __negative ? __lc->_M_negative_sign_size\n-                                               : __lc->_M_positive_sign_size;\n \t    size_type __i = 1;\n-\t    for (; __beg != __end && __i < __len\n+\t    for (; __beg != __end && __i < __sign_size\n \t\t   && *__beg == __sign[__i]; ++__beg, ++__i);\n \t    \n-\t    if (__i != __len)\n+\t    if (__i != __sign_size)\n \t      __testvalid = false;\n \t  }\n \n-\tif (__testvalid && __res.size())\n+\tif (__testvalid)\n \t  {\n \t    // Strip leading zeros.\n \t    if (__res.size() > 1)\n@@ -1365,8 +1359,6 @@ namespace std\n \t\t&& __n != __lc->_M_frac_digits)\n \t      __testvalid = false;\n \t  }\n-\telse\n-\t  __testvalid = false;\n \t\n \t// Iff no more characters are available.\n \tif (__beg == __end)"}, {"sha": "c4a2011e776b55ddd242603593291bda1d129767", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/16.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F16.cc?ref=59564c5e9a60e8d19a594020f329c3f71bcc0262", "patch": "@@ -0,0 +1,75 @@\n+// 2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Fail as soon as value digits are not present.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_c != loc_hk );\n+\n+  iterator_type end01, end02;\n+  istringstream iss01, iss02;\n+  iss01.imbue(loc_de);\n+  iss02.imbue(loc_hk);\n+\n+  // cache the money_get facet\n+  const money_get<char>& mon_get_01 =\n+    use_facet<money_get<char> >(iss01.getloc());\n+  const money_get<char>& mon_get_02 =\n+    use_facet<money_get<char> >(iss02.getloc());\n+\n+  iss01.setf(ios_base::showbase);\n+  iss01.str(\"EUR \");\n+  iterator_type is_it01(iss01);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get_01.get(is_it01, end01, true, iss01, err01, result1);\n+  VERIFY( err01 == ios_base::failbit );\n+  VERIFY( *end01 == 'E' );\n+  \n+  iss02.str(\"(HKD )\");\n+  iterator_type is_it02(iss02);\n+  long double result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get_02.get(is_it02, end02, true, iss02, err02, result2);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == ')' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c7d7bd2299ebd781f66817de287b80a428381def", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/16.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59564c5e9a60e8d19a594020f329c3f71bcc0262/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F16.cc?ref=59564c5e9a60e8d19a594020f329c3f71bcc0262", "patch": "@@ -0,0 +1,75 @@\n+// 2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Fail as soon as value digits are not present.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_c != loc_hk );\n+\n+  iterator_type end01, end02;\n+  wistringstream iss01, iss02;\n+  iss01.imbue(loc_de);\n+  iss02.imbue(loc_hk);\n+\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get_01 =\n+    use_facet<money_get<wchar_t> >(iss01.getloc());\n+  const money_get<wchar_t>& mon_get_02 =\n+    use_facet<money_get<wchar_t> >(iss02.getloc());\n+\n+  iss01.setf(ios_base::showbase);\n+  iss01.str(L\"EUR \");\n+  iterator_type is_it01(iss01);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get_01.get(is_it01, end01, true, iss01, err01, result1);\n+  VERIFY( err01 == ios_base::failbit );\n+  VERIFY( *end01 == L'E' );\n+  \n+  iss02.str(L\"(HKD )\");\n+  iterator_type is_it02(iss02);\n+  long double result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get_02.get(is_it02, end02, true, iss02, err02, result2);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == L')' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}