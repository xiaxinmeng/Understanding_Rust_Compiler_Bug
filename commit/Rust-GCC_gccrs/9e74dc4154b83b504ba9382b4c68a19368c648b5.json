{"sha": "9e74dc4154b83b504ba9382b4c68a19368c648b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU3NGRjNDE1NGI4M2I1MDRiYTkzODJiNGM2OGExOTM2OGM2NDhiNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-16T23:56:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-16T23:56:24Z"}, "message": "(make_extraction): Correct typo in force_to_mode call in previous change.\n\nReturn 0 if pos+len out of range of want desired mode.\n\nFrom-SVN: r11544", "tree": {"sha": "a0f6535276b72f2ee588190ae67454ed88187606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f6535276b72f2ee588190ae67454ed88187606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e74dc4154b83b504ba9382b4c68a19368c648b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e74dc4154b83b504ba9382b4c68a19368c648b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e74dc4154b83b504ba9382b4c68a19368c648b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e74dc4154b83b504ba9382b4c68a19368c648b5/comments", "author": null, "committer": null, "parents": [{"sha": "ff352ceaa015c25cba359d3261199e145a688872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff352ceaa015c25cba359d3261199e145a688872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff352ceaa015c25cba359d3261199e145a688872"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "70b9faac4dbe3c6726074a0df7a4d74cfbf154ef", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e74dc4154b83b504ba9382b4c68a19368c648b5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e74dc4154b83b504ba9382b4c68a19368c648b5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9e74dc4154b83b504ba9382b4c68a19368c648b5", "patch": "@@ -5321,13 +5321,23 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t}\n     }\n \n-  /* If INNER is not memory, we can always get it into the proper mode. */\n+  /* If INNER is not memory, we can always get it into the proper mode.  If we\n+     are changing its mode, POS must be a constant and smaller than the size\n+     of the new mode.  */\n   else if (GET_CODE (inner) != MEM)\n-    inner = force_to_mode (inner, wanted_inner_mode,\n-\t\t\t   pos_rtx || len + orig_pos >= HOST_BITS_PER_WIDE_INT\n-\t\t\t   ? GET_MODE_MASK (extraction_mode)\n-\t\t\t   : (((HOST_WIDE_INT) 1 << len) - 1) << orig_pos,\n-\t\t\t   NULL_RTX, 0);\n+    {\n+      if (GET_MODE (inner) != wanted_inner_mode\n+\t  && (pos_rtx != 0\n+\t      || orig_pos + len > GET_MODE_BITSIZE (wanted_inner_mode)))\n+\treturn 0;\n+\n+      inner = force_to_mode (inner, wanted_inner_mode,\n+\t\t\t     pos_rtx\n+\t\t\t     || len + orig_pos >= HOST_BITS_PER_WIDE_INT\n+\t\t\t     ? GET_MODE_MASK (wanted_inner_mode)\n+\t\t\t     : (((HOST_WIDE_INT) 1 << len) - 1) << orig_pos,\n+\t\t\t     NULL_RTX, 0);\n+    }\n \n   /* Adjust mode of POS_RTX, if needed.  If we want a wider mode, we\n      have to zero extend.  Otherwise, we can just use a SUBREG.  */"}]}