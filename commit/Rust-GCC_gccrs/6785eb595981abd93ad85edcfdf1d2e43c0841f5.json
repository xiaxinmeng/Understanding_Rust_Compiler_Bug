{"sha": "6785eb595981abd93ad85edcfdf1d2e43c0841f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4NWViNTk1OTgxYWJkOTNhZDg1ZWRjZmRmMWQyZTQzYzA4NDFmNQ==", "commit": {"author": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-07-12T09:48:21Z"}, "committer": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-07-12T09:48:21Z"}, "message": "arm/66791: Replace builtins for unsigned and fp vmul_n intrinsics.\n\ngcc/ChangeLog:\n\tPR target/66791\n\t* config/arm/arm_neon.h (vmul_n_u32): Replace call to builtin with\n\t__a * __b.\n\t(vmulq_n_u32): Likewise.\n\t(vmul_n_f32): Gate __a * __b on __FAST_MATH__.\n\t(vmulq_n_f32): Likewise.\n\t(vmul_n_f16): Likewise.\n\t(vmulq_n_f16): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR target/66791\n\t* gcc.target/arm/armv8_2-fp16-neon-2.c: Adjust.", "tree": {"sha": "15a94f749bdb369cd9dad95212224f110333c9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a94f749bdb369cd9dad95212224f110333c9c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6785eb595981abd93ad85edcfdf1d2e43c0841f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6785eb595981abd93ad85edcfdf1d2e43c0841f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6785eb595981abd93ad85edcfdf1d2e43c0841f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6785eb595981abd93ad85edcfdf1d2e43c0841f5/comments", "author": null, "committer": null, "parents": [{"sha": "9b8b37d1b6301855213b8d4860feaeb74d464c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8b37d1b6301855213b8d4860feaeb74d464c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8b37d1b6301855213b8d4860feaeb74d464c6b"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "41b596b5fc6cca9d25ec5a0d804ab8afe71c67bf", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6785eb595981abd93ad85edcfdf1d2e43c0841f5/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6785eb595981abd93ad85edcfdf1d2e43c0841f5/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=6785eb595981abd93ad85edcfdf1d2e43c0841f5", "patch": "@@ -8384,21 +8384,25 @@ __extension__ extern __inline float32x2_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_n_f32 (float32x2_t __a, float32_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return (float32x2_t)__builtin_neon_vmul_nv2sf (__a, (__builtin_neon_sf) __b);\n+#endif\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_n_u16 (uint16x4_t __a, uint16_t __b)\n {\n-  return (uint16x4_t)__builtin_neon_vmul_nv4hi ((int16x4_t) __a, (__builtin_neon_hi) __b);\n+  return __a * __b;\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_n_u32 (uint32x2_t __a, uint32_t __b)\n {\n-  return (uint32x2_t)__builtin_neon_vmul_nv2si ((int32x2_t) __a, (__builtin_neon_si) __b);\n+  return __a * __b;\n }\n \n __extension__ extern __inline int16x8_t\n@@ -8419,21 +8423,25 @@ __extension__ extern __inline float32x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_n_f32 (float32x4_t __a, float32_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return (float32x4_t)__builtin_neon_vmul_nv4sf (__a, (__builtin_neon_sf) __b);\n+#endif\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return (uint16x8_t)__builtin_neon_vmul_nv8hi ((int16x8_t) __a, (__builtin_neon_hi) __b);\n+  return __a * __b;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return (uint32x4_t)__builtin_neon_vmul_nv4si ((int32x4_t) __a, (__builtin_neon_si) __b);\n+  return __a * __b;\n }\n \n __extension__ extern __inline int32x4_t\n@@ -17740,7 +17748,11 @@ __extension__ extern __inline float16x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_n_f16 (float16x4_t __a, float16_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return __builtin_neon_vmul_nv4hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x8_t\n@@ -17765,7 +17777,11 @@ __extension__ extern __inline float16x8_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_n_f16 (float16x8_t __a, float16_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return __builtin_neon_vmul_nv8hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x4_t"}, {"sha": "6808576ce597be87b7459877e38f645f015a3d8c", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-neon-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6785eb595981abd93ad85edcfdf1d2e43c0841f5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6785eb595981abd93ad85edcfdf1d2e43c0841f5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c?ref=6785eb595981abd93ad85edcfdf1d2e43c0841f5", "patch": "@@ -327,13 +327,13 @@ BINOP_TEST (vminnm)\n \n BINOP_TEST (vmul)\n /* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 3 } }\n-   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } }  */\n BINOP_LANE_TEST (vmul, 2)\n /* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[2\\]} 1 } }\n    { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[2\\]} 1 } }  */\n BINOP_N_TEST (vmul)\n-/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[0\\]} 1 } }\n-   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[0\\]} 1 } }*/\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 3 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } }*/\n \n float16x4_t\n test_vpadd_16x4 (float16x4_t a, float16x4_t b)\n@@ -387,7 +387,7 @@ test_vdup_n_f16 (float16_t a)\n {\n   return vdup_n_f16 (a);\n }\n-/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, r[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, r[0-9]+} 3 } }  */\n \n float16x8_t\n test_vmovq_n_f16 (float16_t a)\n@@ -400,7 +400,7 @@ test_vdupq_n_f16 (float16_t a)\n {\n   return vdupq_n_f16 (a);\n }\n-/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, r[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, r[0-9]+} 3 } }  */\n \n float16x4_t\n test_vdup_lane_f16 (float16x4_t a)"}]}