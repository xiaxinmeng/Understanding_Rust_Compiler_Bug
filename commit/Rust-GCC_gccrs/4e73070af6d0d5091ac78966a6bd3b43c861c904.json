{"sha": "4e73070af6d0d5091ac78966a6bd3b43c861c904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3MzA3MGFmNmQwZDUwOTFhYzc4OTY2YTZiZDNiNDNjODYxYzkwNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:45:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:45:29Z"}, "message": "sem_type.adb (Write_Overloads): Improve display of candidate interpretations.\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\t* sem_type.adb (Write_Overloads): Improve display of candidate\n\tinterpretations.\n\t(Add_One_Interp): Do not add to the list of interpretations aliased\n\tentities corresponding with an abstract interface type that is an\n\timmediate ancestor of a tagged type; otherwise we have a dummy\n\tconflict between this entity and the aliased entity.\n\t(Disambiguate): The predefined equality on universal_access is not\n\tusable if there is a user-defined equality with the proper signature,\n\tdeclared in the same declarative part as the designated type.\n\t(Find_Unique_Type): The universal_access equality operator defined under\n\tAI-230 does not cover pool specific access types.\n\t(Covers): If one of the types is a generic actual subtype, check whether\n\tit matches the partial view of the other type.\n\nFrom-SVN: r111096", "tree": {"sha": "0c80e1e6f750a6cfb18612964f5e677a09698823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c80e1e6f750a6cfb18612964f5e677a09698823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e73070af6d0d5091ac78966a6bd3b43c861c904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73070af6d0d5091ac78966a6bd3b43c861c904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e73070af6d0d5091ac78966a6bd3b43c861c904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73070af6d0d5091ac78966a6bd3b43c861c904/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3640a4e7820d85e5e0af1715139105ed1ad0b458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3640a4e7820d85e5e0af1715139105ed1ad0b458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3640a4e7820d85e5e0af1715139105ed1ad0b458"}], "stats": {"total": 105, "additions": 97, "deletions": 8}, "files": [{"sha": "cedd4c514835296300234bd7db643d04c6517410", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 97, "deletions": 8, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73070af6d0d5091ac78966a6bd3b43c861c904/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73070af6d0d5091ac78966a6bd3b43c861c904/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4e73070af6d0d5091ac78966a6bd3b43c861c904", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,8 +32,10 @@ with Elists;   use Elists;\n with Nlists;   use Nlists;\n with Errout;   use Errout;\n with Lib;      use Lib;\n+with Namet;    use Namet;\n with Opt;      use Opt;\n with Output;   use Output;\n+with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n@@ -385,7 +387,20 @@ package body Sem_Type is\n         and then Is_Subprogram (E)\n         and then Present (Abstract_Interface_Alias (E))\n       then\n-         Add_One_Interp (N, Abstract_Interface_Alias (E), T);\n+         --  Ada 2005 (AI-251): If this primitive operation corresponds with\n+         --  an inmediate ancestor interface there is no need to add it to the\n+         --  list of interpretations; the corresponding aliased primitive is\n+         --  also in this list of primitive operations and will be used instead\n+         --  because otherwise we have a dummy between the two subprograms that\n+         --  are in fact the same.\n+\n+         if Present (DTC_Entity (Abstract_Interface_Alias (E)))\n+           and then Etype (DTC_Entity (Abstract_Interface_Alias (E)))\n+                      /= RTE (RE_Tag)\n+         then\n+            Add_One_Interp (N, Abstract_Interface_Alias (E), T);\n+         end if;\n+\n          return;\n       end if;\n \n@@ -896,13 +911,29 @@ package body Sem_Type is\n       then\n          return True;\n \n+      --  In instances, or with types exported from instantiations, check\n+      --  whether a partial and a full view match. Verify that types are\n+      --  legal, to prevent cascaded errors.\n+\n       elsif In_Instance\n         and then\n           (Full_View_Covers (T1, T2)\n             or else Full_View_Covers (T2, T1))\n       then\n          return True;\n \n+      elsif Is_Type (T2)\n+        and then Is_Generic_Actual_Type (T2)\n+        and then Full_View_Covers (T1, T2)\n+      then\n+         return True;\n+\n+      elsif Is_Type (T1)\n+        and then  Is_Generic_Actual_Type (T1)\n+        and then Full_View_Covers (T2, T1)\n+      then\n+         return True;\n+\n       --  In the expansion of inlined bodies, types are compatible if they\n       --  are structurally equivalent.\n \n@@ -1000,7 +1031,9 @@ package body Sem_Type is\n       --  ambiguities when two formal types have the same actual.\n \n       function Standard_Operator return Boolean;\n-      --  Comment required ???\n+      --  Check whether subprogram is predefined operator declared in Standard.\n+      --  It may given by an operator name, or by an expanded name whose prefix\n+      --  is Standard.\n \n       function Remove_Conversions return Interp;\n       --  Last chance for pathological cases involving comparisons on literals,\n@@ -1019,8 +1052,8 @@ package body Sem_Type is\n       --  pathology in the other direction with calls whose multiple overloaded\n       --  actuals make them truly unresolvable.\n \n-      --  The new rules concerning abstract operations create additional\n-      --  for special handling of expressions with universal operands, See\n+      --  The new rules concerning abstract operations create additional need\n+      --  for special handling of expressions with universal operands, see\n       --  comments to Has_Abstract_Interpretation below.\n \n       ------------------------\n@@ -1139,7 +1172,7 @@ package body Sem_Type is\n             return False;\n          end Has_Abstract_Interpretation;\n \n-      --  Start of processing for Remove_ConversionsMino\n+      --  Start of processing for Remove_Conversions\n \n       begin\n          It1 := No_Interp;\n@@ -1590,6 +1623,43 @@ package body Sem_Type is\n                else\n                   return It2;\n                end if;\n+\n+            --  Ada 2005, AI-420: preference rule for \"=\" on Universal_Access\n+            --  states that the operator defined in Standard is not available\n+            --  if there is a user-defined equality with the proper signature,\n+            --  declared in the same declarative list as the type. The node\n+            --  may be an operator or a function call.\n+\n+            elsif (Chars (Nam1) = Name_Op_Eq\n+                     or else\n+                   Chars (Nam1) = Name_Op_Ne)\n+              and then Ada_Version >= Ada_05\n+              and then Etype (User_Subp) = Standard_Boolean\n+            then\n+               declare\n+                  Opnd : Node_Id;\n+               begin\n+                  if Nkind (N) = N_Function_Call then\n+                     Opnd := First_Actual (N);\n+                  else\n+                     Opnd := Left_Opnd (N);\n+                  end if;\n+\n+                  if Ekind (Etype (Opnd)) = E_Anonymous_Access_Type\n+                    and then\n+                     List_Containing (Parent (Designated_Type (Etype (Opnd))))\n+                       = List_Containing (Unit_Declaration_Node (User_Subp))\n+                  then\n+                     if It2.Nam = Predef_Subp then\n+                        return It1;\n+                     else\n+                        return It2;\n+                     end if;\n+                  else\n+                     return No_Interp;\n+                  end if;\n+               end;\n+\n             else\n                return No_Interp;\n             end if;\n@@ -1700,15 +1770,25 @@ package body Sem_Type is\n       --    function \"=\"  (L, R : universal_access) return Boolean;\n       --    function \"/=\" (L, R : universal_access) return Boolean;\n \n+      --  Pool specific access types (E_Access_Type) are not covered by these\n+      --  operators because of the legality rule of 4.5.2(9.2): \"The operands\n+      --  of the equality operators for universal_access shall be convertible\n+      --  to one another (see 4.6)\". For example, considering the type decla-\n+      --  ration \"type P is access Integer\" and an anonymous access to Integer,\n+      --  P is convertible to \"access Integer\" by 4.6 (24.11-24.15), but there\n+      --  is no rule in 4.6 that allows \"access Integer\" to be converted to P.\n+\n       elsif Ada_Version >= Ada_05\n         and then Ekind (Etype (L)) = E_Anonymous_Access_Type\n         and then Is_Access_Type (Etype (R))\n+        and then Ekind (Etype (R)) /= E_Access_Type\n       then\n          return Etype (L);\n \n       elsif Ada_Version >= Ada_05\n         and then Ekind (Etype (R)) = E_Anonymous_Access_Type\n         and then Is_Access_Type (Etype (L))\n+        and then Ekind (Etype (L)) /= E_Access_Type\n       then\n          return Etype (R);\n \n@@ -2731,11 +2811,20 @@ package body Sem_Type is\n          Get_First_Interp (N, I, It);\n          Write_Str (\"Overloaded entity \");\n          Write_Eol;\n+         Write_Str (\"      Name           Type\");\n+         Write_Eol;\n+         Write_Str (\"===============================\");\n+         Write_Eol;\n          Nam := It.Nam;\n \n          while Present (Nam) loop\n-            Write_Entity_Info (Nam,  \"      \");\n-            Write_Str (\"=================\");\n+            Write_Int (Int (Nam));\n+            Write_Str (\"   \");\n+            Write_Name (Chars (Nam));\n+            Write_Str (\"   \");\n+            Write_Int (Int (It.Typ));\n+            Write_Str (\"   \");\n+            Write_Name (Chars (It.Typ));\n             Write_Eol;\n             Get_Next_Interp (I, It);\n             Nam := It.Nam;"}]}