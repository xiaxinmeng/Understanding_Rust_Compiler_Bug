{"sha": "4402147197bea00a19741bafefe7f19eb4c8467f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwMjE0NzE5N2JlYTAwYTE5NzQxYmFmZWZlN2YxOWViNGM4NDY3Zg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-05-03T10:11:19Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-05-03T10:11:19Z"}, "message": "re PR c++/14389 (Out-of-line of overloaded template rejected)\n\n\tPR c++/14389\n\t* decl2.c (check_classfn): For member templates, compare also the\n\ttemplate parameters to match the declaration.\n\t* cp-tree.h: Adjust declaration of check_classfn.\n\t* decl.c (start_decl, grokfndecl): Adjust callers of check_classfn.\n\t* friend.c (do_friend): Likewise.\n\t* pt.c (tsubst_friend_function): Likewise.\n\n\tPR c++/14389\n\t* g++.dg/template/member5.C: New test.\n\nFrom-SVN: r81426", "tree": {"sha": "d0cc887d089f42e5c3dd6d1a442b14113df99313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0cc887d089f42e5c3dd6d1a442b14113df99313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4402147197bea00a19741bafefe7f19eb4c8467f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4402147197bea00a19741bafefe7f19eb4c8467f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4402147197bea00a19741bafefe7f19eb4c8467f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4402147197bea00a19741bafefe7f19eb4c8467f/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "37170e2ca71c678ce9cb18c3c837e5624244e13f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -3721,7 +3721,7 @@ extern void maybe_make_one_only\t(tree);\n extern void grokclassfn\t(tree, tree, enum overload_flags, tree);\n extern tree grok_array_decl (tree, tree);\n extern tree delete_sanity (tree, tree, bool, int);\n-extern tree check_classfn (tree, tree, bool);\n+extern tree check_classfn (tree, tree, tree);\n extern void check_member_template (tree);\n extern tree grokfield (tree, tree, tree, tree, tree);\n extern tree grokbitfield (tree, tree, tree);"}, {"sha": "17b625f668cd4936dcd95a7557ae4e8c138a1b3f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -3727,8 +3727,10 @@ start_decl (tree declarator,\n       else\n \t{\n \t  tree field = check_classfn (context, decl,\n-\t\t\t\t      processing_template_decl\n-\t\t\t\t      > template_class_depth (context));\n+\t\t\t\t      (processing_template_decl\n+\t\t\t\t       > template_class_depth (context))\n+\t\t\t\t      ? current_template_parms\n+\t\t\t\t      : NULL_TREE);\n \t  if (field && duplicate_decls (decl, field))\n \t    decl = field;\n \t}\n@@ -5691,8 +5693,10 @@ grokfndecl (tree ctype,\n       tree old_decl;\n \n       old_decl = check_classfn (ctype, decl,\n-\t\t\t\tprocessing_template_decl\n-\t\t\t\t> template_class_depth (ctype));\n+\t\t\t\t(processing_template_decl\n+\t\t\t\t > template_class_depth (ctype))\n+\t\t\t\t? current_template_parms\n+\t\t\t\t: NULL_TREE);\n \n       if (old_decl && TREE_CODE (old_decl) == TEMPLATE_DECL)\n \t/* Because grokfndecl is always supposed to return a"}, {"sha": "5730d369efc41ad886d67bcb939c07fabf886fae", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -612,15 +612,19 @@ check_java_method (tree method)\n \n /* Sanity check: report error if this function FUNCTION is not\n    really a member of the class (CTYPE) it is supposed to belong to.\n-   CNAME is the same here as it is for grokclassfn above.\n-   TEMPLATE_HEADER_P is true when this declaration comes with a\n-   template header.  */\n+   TEMPLATE_PARMS is used to specifiy the template parameters of a member\n+   template passed as FUNCTION_DECL. If the member template is passed as a \n+   TEMPLATE_DECL, it can be NULL since the parameters can be extracted\n+   from the declaration. If the function is not a function template, it\n+   must be NULL.\n+   It returns the original declaration for the function, or NULL_TREE\n+   if no declaration was found (and an error was emitted).  */\n \n tree\n-check_classfn (tree ctype, tree function, bool template_header_p)\n+check_classfn (tree ctype, tree function, tree template_parms)\n {\n   int ix;\n-  int is_template;\n+  bool is_template;\n   \n   if (DECL_USE_TEMPLATE (function)\n       && !(TREE_CODE (function) == TEMPLATE_DECL\n@@ -638,9 +642,20 @@ check_classfn (tree ctype, tree function, bool template_header_p)\n        find the method, but we don't complain.  */\n     return NULL_TREE;\n \n+  /* Basic sanity check: for a template function, the template parameters\n+     either were not passed, or they are the same of DECL_TEMPLATE_PARMS.  */\n+  if (TREE_CODE (function) == TEMPLATE_DECL)\n+    {\n+      my_friendly_assert (!template_parms \n+\t\t\t  || comp_template_parms \n+\t\t\t      (template_parms, \n+\t\t\t       DECL_TEMPLATE_PARMS (function)),\n+\t\t\t  20040303);\n+      template_parms = DECL_TEMPLATE_PARMS (function);\n+    }\n+\n   /* OK, is this a definition of a member template?  */\n-  is_template = (TREE_CODE (function) == TEMPLATE_DECL\n-\t\t || template_header_p);\n+  is_template = (template_parms != NULL_TREE);\n \n   ix = lookup_fnfields_1 (complete_type (ctype),\n \t\t\t  DECL_CONSTRUCTOR_P (function) ? ctor_identifier :\n@@ -684,6 +699,9 @@ check_classfn (tree ctype, tree function, bool template_header_p)\n \t  if (same_type_p (TREE_TYPE (TREE_TYPE (function)),\n \t\t\t   TREE_TYPE (TREE_TYPE (fndecl)))\n \t      && compparms (p1, p2)\n+\t      && (!is_template\n+\t\t  || comp_template_parms (template_parms, \n+\t\t\t\t\t  DECL_TEMPLATE_PARMS (fndecl)))\n \t      && (DECL_TEMPLATE_SPECIALIZATION (function)\n \t\t  == DECL_TEMPLATE_SPECIALIZATION (fndecl))\n \t      && (!DECL_TEMPLATE_SPECIALIZATION (function)"}, {"sha": "e55adaa8bc0cfb7704e789599b60084bf68fe7f3", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -397,7 +397,10 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t       validity of the declaration later.  */\n \t    decl = push_template_decl_real (decl, /*is_friend=*/1);\n \t  else\n-\t    decl = check_classfn (ctype, decl, template_member_p);\n+\t    decl = check_classfn (ctype, decl, \n+\t\t\t\t  template_member_p \n+\t\t\t\t  ? current_template_parms\n+\t\t\t\t  : NULL_TREE);\n \n \t  if (template_member_p && decl && TREE_CODE (decl) == FUNCTION_DECL)\n \t    decl = DECL_TI_TEMPLATE (decl);"}, {"sha": "96ee6875a56252ebd5fed49fd85c860daea94312", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -5142,8 +5142,8 @@ tsubst_friend_function (tree decl, tree args)\n     {\n       /* Check to see that the declaration is really present, and,\n \t possibly obtain an improved declaration.  */\n-      tree fn = check_classfn (DECL_CONTEXT (new_friend),\n-\t\t\t       new_friend, false);\n+      tree fn = check_classfn (DECL_CONTEXT (new_friend), \n+\t\t\t       new_friend, NULL_TREE);\n       \n       if (fn)\n \tnew_friend = fn;"}, {"sha": "df01d26d23e56406e2c9a7a2581722b1cf2fcc49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -1,6 +1,11 @@\n+2004-05-03  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/14389\n+\t* g++.dg/template/member5.C: New test.\n+\n 2004-05-03  Uros Bizjak  <uros@kss-loka.si>\n \n-        * gcc.dg/builtins-34.c: Also check expm1*.\n+\t* gcc.dg/builtins-34.c: Also check expm1*.\n \n 2004-05-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "45dcd6c6c66607123fba58ec8b81a0e0fc53d927", "filename": "gcc/testsuite/g++.dg/template/member5.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4402147197bea00a19741bafefe7f19eb4c8467f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C?ref=4402147197bea00a19741bafefe7f19eb4c8467f", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// Contributed by: <fasbjx at free dot fr>\n+// PR c++/14389: Disambiguate overloaded member templates which differ only\n+//  in the template argument list.\n+\n+namespace N1 {\n+\n+struct S { \n+    template< typename B, typename A > void foo(); \n+    template< typename A >             void foo(); \n+}; \n+ \n+template< typename A >             void S::foo() {} \n+template< typename B, typename A > void S::foo() {} \n+ \n+template void S::foo<void> (); \n+template void S::foo<void,void> (); \n+\n+}\n+\n+namespace N2 {\n+\n+struct S { \n+  template< typename _A > void foo(); \n+  template< int _i >      void foo(); \n+}; \n+\n+template< typename _A > void S::foo() {} \n+\n+template void S::foo< 0 >();    // { dg-error \"no definition available|instantiated from here\" }\n+\n+}"}]}