{"sha": "e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "node_id": "C_kwDOANBUbNoAKGU1ZTY5ODNjM2RhNTM3MjllNThhMzJhZjFkNTMxZWE3NGIzZGJmNWQ", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-19T17:46:40Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-24T18:30:44Z"}, "message": "Fix PR 106601: __builtin_bswap16 code gen could be improved with ZBB enabled\n\nThe default expansion for bswap16 is two extractions (shift/and)\nfollowed by an insertation (ior) and then a zero extend. This can be improved\nwith ZBB enabled to just full byteswap followed by a (logical) shift right.\nThis patch adds a new pattern for this which does that.\n\nOK? Built and tested on riscv32-linux-gnu and riscv64-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR target/106601\n\t* config/riscv/bitmanip.md (bswaphi2): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106601\n\t* gcc.target/riscv/zbb_32_bswap-2.c: New test.\n\t* gcc.target/riscv/zbb_bswap-2.c: New test.", "tree": {"sha": "1de40f51a76673e5c4953b1a48e4a9e6bda3bd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de40f51a76673e5c4953b1a48e4a9e6bda3bd00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2daf5acce003300ee948a89860c0d13ebcae79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2daf5acce003300ee948a89860c0d13ebcae79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2daf5acce003300ee948a89860c0d13ebcae79"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "c4383285d81be30d7181a606c46c0dbab9bb4cb2", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "patch": "@@ -276,6 +276,30 @@\n   \"rev8\\t%0,%1\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n+;; HI bswap can be emulated using SI/DI bswap followed\n+;; by a logical shift right\n+;; SI bswap for TARGET_64BIT is already similarly in\n+;; the common code.\n+(define_expand \"bswaphi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+        (bswap:HI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBB\"\n+{\n+  rtx tmp = gen_reg_rtx (word_mode);\n+  rtx newop1 = gen_lowpart (word_mode, operands[1]);\n+  if (TARGET_64BIT)\n+    emit_insn (gen_bswapdi2 (tmp, newop1));\n+  else\n+    emit_insn (gen_bswapsi2 (tmp, newop1));\n+  rtx tmp1 = gen_reg_rtx (word_mode);\n+  if (TARGET_64BIT)\n+    emit_insn (gen_lshrdi3 (tmp1, tmp, GEN_INT (64 - 16)));\n+  else\n+    emit_insn (gen_lshrsi3 (tmp1, tmp, GEN_INT (32 - 16)));\n+  emit_move_insn (operands[0], gen_lowpart (HImode, tmp1));\n+  DONE;\n+})\n+\n (define_insn \"<bitmanip_optab><mode>3\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (bitmanip_minmax:X (match_operand:X 1 \"register_operand\" \"r\")"}, {"sha": "679b34c4e411f7a9009e92f2105ba72a0f59f349", "filename": "gcc/testsuite/gcc.target/riscv/zbb_32_bswap-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_32_bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_32_bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_32_bswap-2.c?ref=e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_zbb -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int foo(int n)\n+{\n+  return __builtin_bswap16(n);\n+}\n+\n+/* { dg-final { scan-assembler \"rev8\" } } */\n+/* { dg-final { scan-assembler \"srli\" } } */\n+"}, {"sha": "c358f6683f33330f06289682218c5e79a11dbdab", "filename": "gcc/testsuite/gcc.target/riscv/zbb_bswap-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e6983c3da53729e58a32af1d531ea74b3dbf5d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb_bswap-2.c?ref=e5e6983c3da53729e58a32af1d531ea74b3dbf5d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int foo(int n)\n+{\n+  return __builtin_bswap16(n);\n+}\n+\n+/* { dg-final { scan-assembler \"rev8\" } } */\n+/* { dg-final { scan-assembler \"srli\" } } */\n+"}]}