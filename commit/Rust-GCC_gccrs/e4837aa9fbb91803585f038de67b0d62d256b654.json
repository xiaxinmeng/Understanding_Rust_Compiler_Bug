{"sha": "e4837aa9fbb91803585f038de67b0d62d256b654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4MzdhYTlmYmI5MTgwMzU4NWYwMzhkZTY3YjBkNjJkMjU2YjY1NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-01T12:03:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-01T12:03:29Z"}, "message": "tree-ssa-sccvn.c (visit_phi): Compare invariant addresses as base and offset.\n\n2018-08-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_phi): Compare invariant addresses\n\tas base and offset.\n\n\t* gcc.dg/tree-ssa/ssa-fre-68.c: New testcase.\n\nFrom-SVN: r263206", "tree": {"sha": "deef5cb331e8d14f935a347904cbb33a90b96455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deef5cb331e8d14f935a347904cbb33a90b96455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4837aa9fbb91803585f038de67b0d62d256b654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4837aa9fbb91803585f038de67b0d62d256b654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4837aa9fbb91803585f038de67b0d62d256b654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4837aa9fbb91803585f038de67b0d62d256b654/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42c4ccce729ae19954160339aa2f20e9663408a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c4ccce729ae19954160339aa2f20e9663408a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c4ccce729ae19954160339aa2f20e9663408a5"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "0d10e950e230ce86c5ff135aa681eac2d33fa6b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4837aa9fbb91803585f038de67b0d62d256b654", "patch": "@@ -1,3 +1,8 @@\n+2018-08-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_phi): Compare invariant addresses\n+\tas base and offset.\n+\n 2018-08-01  Martin Liska  <mliska@suse.cz>\n \n \t* value-prof.c (gimple_divmod_fixed_value_transform): Unify"}, {"sha": "7fcc05da6a9339be66a7b062de8afe5f5f20fa49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4837aa9fbb91803585f038de67b0d62d256b654", "patch": "@@ -1,3 +1,7 @@\n+2018-08-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-68.c: New testcase.\n+\n 2018-08-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/plugin/poly-int-07_plugin.c (dg-options): Use -O0."}, {"sha": "d9f07bd59bacc31c2bfe4dedf3b426d4c2e84dd2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-68.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-68.c?ref=e4837aa9fbb91803585f038de67b0d62d256b654", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+struct S { char a[3]; char b[5]; } s = { \"abc\", \"defg\" };\n+\n+__SIZE_TYPE__\n+foo (struct S s, int a, int b)\n+{\n+  char *p = (char *) &s.a[0];\n+  if (a)\n+    p = (char *) &s.a;\n+  else if (b)\n+    p = (char *) &s;\n+  return __builtin_strlen (p);\n+}\n+\n+__SIZE_TYPE__\n+bar (int a, int b)\n+{\n+  char *p = (char *) &s.a[0];\n+  if (a)\n+    p = (char *) &s.a;\n+  else if (b)\n+    p = (char *) &s;\n+  return __builtin_strlen (p);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\\\(&s\" 2 \"fre1\" } } */"}, {"sha": "43f3313911f8ba006eb65b34197ed0d57815f562", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4837aa9fbb91803585f038de67b0d62d256b654/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e4837aa9fbb91803585f038de67b0d62d256b654", "patch": "@@ -3941,6 +3941,8 @@ static bool\n visit_phi (gimple *phi)\n {\n   tree result, sameval = VN_TOP, seen_undef = NULL_TREE;\n+  tree sameval_base = NULL_TREE;\n+  poly_int64 soff, doff;\n   unsigned n_executable = 0;\n   bool allsame = true;\n   edge_iterator ei;\n@@ -3971,6 +3973,23 @@ visit_phi (gimple *phi)\n \t  sameval = def;\n \telse if (!expressions_equal_p (def, sameval))\n \t  {\n+\t    /* We know we're arriving only with invariant addresses here,\n+\t       try harder comparing them.  We can do some caching here\n+\t       which we cannot do in expressions_equal_p.  */\n+\t    if (TREE_CODE (def) == ADDR_EXPR\n+\t\t&& TREE_CODE (sameval) == ADDR_EXPR\n+\t\t&& sameval_base != (void *)-1)\n+\t      {\n+\t\tif (!sameval_base)\n+\t\t  sameval_base = get_addr_base_and_unit_offset\n+\t\t\t\t   (TREE_OPERAND (sameval, 0), &soff);\n+\t\tif (!sameval_base)\n+\t\t  sameval_base = (tree)(void *)-1;\n+\t\telse if ((get_addr_base_and_unit_offset\n+\t\t\t    (TREE_OPERAND (def, 0), &doff) == sameval_base)\n+\t\t\t && known_eq (soff, doff))\n+\t\t  continue;\n+\t      }\n \t    allsame = false;\n \t    break;\n \t  }"}]}