{"sha": "425006751bbedc2928d0bddac0de2e5953075ac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI1MDA2NzUxYmJlZGMyOTI4ZDBiZGRhYzBkZTJlNTk1MzA3NWFjOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-09T01:26:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-09T01:26:04Z"}, "message": "stl_vector.h (vector::_Alloc_traits): Make private.\n\n\t* include/bits/stl_vector.h (vector::_Alloc_traits): Make private.\n\t* include/debug/vector: Add allocator-extended constructors, ensure\n\tmove assignment and swap have same allocator propagation semantics\n\tand exceptions specification as base class.\n\t* include/profile/vector: Likewise.\n\t(vector::push_back(_Tp&&)): Forward argument as rvalue.\n\t* testsuite/23_containers/vector/debug/alloc_prop.cc: New.\n\t* doc/xml/manual/status_cxx2011.xml: Clarify status of container\n\trequirements with respect to allocators.\n\t(status.iso.200x): Add anchor for old ID to preserve existing links.\n\nFrom-SVN: r181189", "tree": {"sha": "6d0324a396a0e77c139accb20f546a28c978cc4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0324a396a0e77c139accb20f546a28c978cc4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/425006751bbedc2928d0bddac0de2e5953075ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425006751bbedc2928d0bddac0de2e5953075ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425006751bbedc2928d0bddac0de2e5953075ac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425006751bbedc2928d0bddac0de2e5953075ac9/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe1468659b160f34f296a3879a0894e45e644ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe1468659b160f34f296a3879a0894e45e644ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe1468659b160f34f296a3879a0894e45e644ba"}], "stats": {"total": 172, "additions": 158, "deletions": 14}, "files": [{"sha": "b8b6e358dce7aaffe187578d6729b7cc0a0d2e22", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -1,3 +1,16 @@\n+2011-11-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/stl_vector.h (vector::_Alloc_traits): Make private.\n+\t* include/debug/vector: Add allocator-extended constructors, ensure\n+\tmove assignment and swap have same allocator propagation semantics\n+\tand exceptions specification as base class.\n+\t* include/profile/vector: Likewise.\n+\t(vector::push_back(_Tp&&)): Forward argument as rvalue.\n+\t* testsuite/23_containers/vector/debug/alloc_prop.cc: New.\n+\t* doc/xml/manual/status_cxx2011.xml: Clarify status of container\n+\trequirements with respect to allocators.\n+\t(status.iso.200x): Add anchor for old ID to preserve existing links.\n+\n 2011-11-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/shared_ptr_base.h (_Sp_counted_ptr): Make 'final'."}, {"sha": "51785fcb812c0e8ffb948b4709426a68114e40f3", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -14,6 +14,7 @@\n </info>\n \n <para>\n+<anchor xml:id=\"status.iso.200x\" /> <!-- preserve links to old section ID -->\n This table is based on the table of contents of ISO/IEC\n JTC1 SC22 WG21 Doc No: N3290 Date: 2011-04-11\n Final Draft International Standard, Standard for Programming Language C++\n@@ -1373,10 +1374,12 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>23.2.1</entry>\n       <entry>General container requirements</entry>\n-      <entry>Y</entry>\n-      <entry/>\n+      <entry>Partial</entry>\n+      <entry>Only <code>vector</code> meets the requirements\n+             relating to allocator use and propagation.</entry>\n     </row>\n     <row>\n       <entry>23.2.2</entry>"}, {"sha": "ec21807321df7d37f3a9b0a2f8e26de77e6e5ab3", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -214,11 +214,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       \n       typedef _Vector_base<_Tp, _Alloc>\t\t\t _Base;\n       typedef typename _Base::_Tp_alloc_type\t\t _Tp_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;\n \n     public:\n       typedef _Tp\t\t\t\t\t value_type;\n       typedef typename _Base::pointer                    pointer;\n-      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;\n       typedef typename _Alloc_traits::const_pointer      const_pointer;\n       typedef typename _Alloc_traits::reference          reference;\n       typedef typename _Alloc_traits::const_reference    const_reference;"}, {"sha": "82662b4460543c2d9898d7c2a750a81a41976601", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -52,6 +52,10 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n+#endif\n+\n     public:\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n@@ -116,6 +120,17 @@ namespace __debug\n \t__x._M_guaranteed_capacity = 0;\n       }\n \n+      vector(const vector& __x, const allocator_type& __a)\n+      : _Base(__x, __a), _M_guaranteed_capacity(__x.size()) { }\n+\n+      vector(vector&& __x, const allocator_type& __a)\n+      : _Base(std::move(__x), __a),\n+        _M_guaranteed_capacity(this->size())\n+      {\n+\t__x._M_invalidate_all();\n+\t__x._M_guaranteed_capacity = 0;\n+      }\n+\n       vector(initializer_list<value_type> __l,\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__l, __a),\n@@ -135,12 +150,13 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       vector&\n-      operator=(vector&& __x)\n+      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tclear();\n-\tswap(__x);\n+\t_Base::operator=(std::move(__x));\n+\tthis->_M_invalidate_all();\n+\t_M_update_guaranteed_capacity();\n+\t__x._M_invalidate_all();\n+\t__x._M_guaranteed_capacity = 0;\n \treturn *this;\n       }\n \n@@ -513,6 +529,9 @@ namespace __debug\n \n       void\n       swap(vector& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);"}, {"sha": "86aefd649e3230d96fa28ddfbee5fd219f6836c1", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -50,6 +50,10 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n+#endif\n+\n     public:\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n@@ -143,6 +147,20 @@ namespace __profile\n         __profcxx_vector_construct2(this);\n       }\n \n+      vector(const _Base& __x, const _Allocator& __a)\n+      : _Base(__x) \n+      { \n+        __profcxx_vector_construct(this, this->capacity());\n+        __profcxx_vector_construct2(this);\n+      }\n+\n+      vector(vector&& __x, const _Allocator& __a) noexcept\n+      : _Base(std::move(__x), __a)\n+      {\n+        __profcxx_vector_construct(this, this->capacity());\n+        __profcxx_vector_construct2(this);\n+      }\n+\n       vector(initializer_list<value_type> __l,\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__l, __a) { }\n@@ -163,12 +181,11 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       vector&\n-      operator=(vector&& __x)\n+      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n+\t__profcxx_vector_destruct(this, this->capacity(), this->size());\n+\t__profcxx_vector_destruct2(this);\n+\tstatic_cast<_Base&>(*this) = std::move(__x);\n \treturn *this;\n       }\n \n@@ -329,7 +346,7 @@ namespace __profile\n       push_back(_Tp&& __x)\n       {\n         size_type __old_size = this->capacity();\n-        _Base::push_back(__x);\n+        _Base::push_back(std::move(__x));\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n \n@@ -373,6 +390,9 @@ namespace __profile\n \n       void\n       swap(vector& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n         _Base::swap(__x);\n       }"}, {"sha": "fffc4663659fcda60a130403f1ae312f9528dfdd", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/alloc_prop.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425006751bbedc2928d0bddac0de2e5953075ac9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc?ref=425006751bbedc2928d0bddac0de2e5953075ac9", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <debug/vector>\n+#include <type_traits>\n+#include <testsuite_allocator.h>\n+\n+template<typename T, typename A>\n+  void\n+  test()\n+  {\n+    typedef std::vector<T, A>         base;\n+    typedef __gnu_debug::vector<T, A> debug;\n+\n+    using std::is_nothrow_default_constructible;\n+    using std::is_nothrow_copy_constructible;\n+    using std::is_nothrow_move_constructible;\n+    using std::is_nothrow_copy_assignable;\n+    using std::is_nothrow_move_assignable;\n+\n+    static_assert(\n+        is_nothrow_default_constructible<base>::value\n+        == is_nothrow_default_constructible<debug>::value,\n+        \"nothrow default constructible\");\n+\n+    static_assert(\n+        is_nothrow_copy_constructible<base>::value\n+        == is_nothrow_copy_constructible<debug>::value,\n+        \"nothrow copy constructible\");\n+\n+    static_assert(\n+        is_nothrow_move_constructible<base>::value\n+        == is_nothrow_move_constructible<debug>::value,\n+        \"nothrow move constructible\");\n+\n+    static_assert(\n+        is_nothrow_copy_assignable<base>::value\n+        == is_nothrow_copy_assignable<debug>::value,\n+        \"nothrow move assignable\");\n+\n+    static_assert(\n+        is_nothrow_move_assignable<base>::value\n+        == is_nothrow_move_assignable<debug>::value,\n+        \"nothrow move assignable\");\n+  }\n+\n+struct X\n+{\n+  X() { }\n+  ~X() { }\n+  X(const X&) { }\n+  X(X&&) { }\n+  X& operator=(const X&) { }\n+  X& operator=(X&&) { }\n+};\n+\n+int main()\n+{\n+  using __gnu_test::propagating_allocator;\n+  using __gnu_test::SimpleAllocator;\n+\n+  test<int, std::allocator<int>>();\n+  test<int, SimpleAllocator<int>>();\n+  test<int, propagating_allocator<int, true>>();\n+  test<int, propagating_allocator<int, false>>();\n+  test<X, std::allocator<X>>();\n+  test<X, SimpleAllocator<X>>();\n+  test<X, propagating_allocator<X, true>>();\n+  test<X, propagating_allocator<X, false>>();\n+\n+  return 0;\n+}"}]}