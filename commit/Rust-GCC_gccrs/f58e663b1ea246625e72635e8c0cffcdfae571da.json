{"sha": "f58e663b1ea246625e72635e8c0cffcdfae571da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4ZTY2M2IxZWEyNDY2MjVlNzI2MzVlOGMwY2ZmY2RmYWU1NzFkYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-10-22T08:50:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-22T08:50:00Z"}, "message": "utils.c (rest_of_record_type_compilation): Simplify and robustify pattern machine code for masking operations.\n\n\t* gcc-interface/utils.c (rest_of_record_type_compilation): Simplify and\n\trobustify pattern machine code for masking operations.\n\nFrom-SVN: r192672", "tree": {"sha": "814f4b559dbb98d632f1ed844b3031df1728d560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814f4b559dbb98d632f1ed844b3031df1728d560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f58e663b1ea246625e72635e8c0cffcdfae571da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58e663b1ea246625e72635e8c0cffcdfae571da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58e663b1ea246625e72635e8c0cffcdfae571da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58e663b1ea246625e72635e8c0cffcdfae571da/comments", "author": null, "committer": null, "parents": [{"sha": "25eb3455aeec24f5084fd68f92287fba1d1c1718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25eb3455aeec24f5084fd68f92287fba1d1c1718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25eb3455aeec24f5084fd68f92287fba1d1c1718"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "570dc0fd15bf28ffd19497b9ce08902dd4f71edd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58e663b1ea246625e72635e8c0cffcdfae571da/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58e663b1ea246625e72635e8c0cffcdfae571da/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f58e663b1ea246625e72635e8c0cffcdfae571da", "patch": "@@ -1,3 +1,8 @@\n+2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (rest_of_record_type_compilation): Simplify and\n+\trobustify pattern machine code for masking operations.\n+\n 2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: In"}, {"sha": "624e724f23c657b16ffd05625acf680a1628b80b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58e663b1ea246625e72635e8c0cffcdfae571da/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58e663b1ea246625e72635e8c0cffcdfae571da/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f58e663b1ea246625e72635e8c0cffcdfae571da", "patch": "@@ -1731,19 +1731,23 @@ rest_of_record_type_compilation (tree record_type)\n \t      tree offset = TREE_OPERAND (curpos, 0);\n \t      align = tree_low_cst (TREE_OPERAND (curpos, 1), 1);\n \n-\t      /* An offset which is a bitwise AND with a negative power of 2\n-\t\t means an alignment corresponding to this power of 2.  Note\n-\t\t that, as sizetype is sign-extended but nonetheless unsigned,\n-\t\t we don't directly use tree_int_cst_sgn.  */\n+\t      /* An offset which is a bitwise AND with a mask increases the\n+\t\t alignment according to the number of trailing zeros.  */\n \t      offset = remove_conversions (offset, true);\n \t      if (TREE_CODE (offset) == BIT_AND_EXPR\n-\t\t  && host_integerp (TREE_OPERAND (offset, 1), 0)\n-\t\t  && TREE_INT_CST_HIGH (TREE_OPERAND (offset, 1)) < 0)\n+\t\t  && TREE_CODE (TREE_OPERAND (offset, 1)) == INTEGER_CST)\n \t\t{\n-\t\t  unsigned int pow\n-\t\t    = - tree_low_cst (TREE_OPERAND (offset, 1), 0);\n-\t\t  if (exact_log2 (pow) > 0)\n-\t\t    align *= pow;\n+\t\t  unsigned HOST_WIDE_INT mask\n+\t\t    = TREE_INT_CST_LOW (TREE_OPERAND (offset, 1));\n+\t\t  unsigned int i;\n+\n+\t\t  for (i = 0; i < HOST_BITS_PER_WIDE_INT; i++)\n+\t\t    {\n+\t\t      if (mask & 1)\n+\t\t\tbreak;\n+\t\t      mask >>= 1;\n+\t\t      align *= 2;\n+\t\t    }\n \t\t}\n \n \t      pos = compute_related_constant (curpos,"}]}