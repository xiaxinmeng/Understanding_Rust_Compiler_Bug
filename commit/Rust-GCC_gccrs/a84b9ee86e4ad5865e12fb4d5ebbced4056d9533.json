{"sha": "a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0YjllZTg2ZTRhZDU4NjVlMTJmYjRkNWViYmNlZDQwNTZkOTUzMw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2007-11-30T04:10:47Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-30T04:10:47Z"}, "message": "re PR fortran/34230 (Expressions of parameters evaluated with too high precision)\n\n2007-11-29  Steven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/34230\n\t* fortran/arith.c (gfc_check_real_range): Set intermediate values\n\tto +-Inf and 0 when -fno-range-check is in effect.\n\t* fortran/invoke.texi: Improve -fno-range-check description.\n\n\tPR fortran/34203\n\t* fortran/invoke.texi: Document the C escaped characters activated\n\tby -fbackslash.\n\nFrom-SVN: r130530", "tree": {"sha": "6c111f01b6c4dfe3d648cedfaaf92c43e5a77f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c111f01b6c4dfe3d648cedfaaf92c43e5a77f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/comments", "author": null, "committer": null, "parents": [{"sha": "04fe2e7b3008d2746c860d3386a14d3ad84a31ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fe2e7b3008d2746c860d3386a14d3ad84a31ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04fe2e7b3008d2746c860d3386a14d3ad84a31ae"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "6aa5a35f779bc4fe93ad07c390d09d15b839045f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "patch": "@@ -1,3 +1,14 @@\n+2007-11-29  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/34230\n+\t* fortran/arith.c (gfc_check_real_range): Set intermediate values\n+\tto +-Inf and 0 when -fno-range-check is in effect.\n+\t* fortran/invoke.texi: Improve -fno-range-check description.\n+\n+\tPR fortran/34203\n+\t* fortran/invoke.texi: Document the C escaped characters activated\n+\tby -fbackslash.\n+\n 2007-11-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34248"}, {"sha": "cfcbdf0cb76b107e0f59daa6d361b452ac9bf7b6", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "patch": "@@ -348,14 +348,27 @@ gfc_check_real_range (mpfr_t p, int kind)\n   else if (mpfr_cmp (q, gfc_real_kinds[i].huge) > 0)\n     {\n       if (gfc_option.flag_range_check == 0)\n-\tretval = ARITH_OK;\n+\t{\n+\t  mpfr_set_inf (p, mpfr_sgn (p));\n+\t  retval = ARITH_OK;\n+\t}\n       else\n \tretval = ARITH_OVERFLOW;\n     }\n   else if (mpfr_cmp (q, gfc_real_kinds[i].subnormal) < 0)\n     {\n       if (gfc_option.flag_range_check == 0)\n-\tretval = ARITH_OK;\n+\t{\n+\t  if (mpfr_sgn (p) < 0)\n+\t    {\n+\t      mpfr_set_ui (p, 0, GFC_RND_MODE);\n+\t      mpfr_set_si (q, -1, GFC_RND_MODE);\n+\t      mpfr_copysign (p, p, q, GFC_RND_MODE);\n+\t    }\n+\t  else\n+\t    mpfr_set_ui (p, 0, GFC_RND_MODE);\n+\t  retval = ARITH_OK;\n+\t}\n       else\n \tretval = ARITH_UNDERFLOW;\n     }"}, {"sha": "22dd8983acdc9b8993070f320abb176e057160b7", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84b9ee86e4ad5865e12fb4d5ebbced4056d9533/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=a84b9ee86e4ad5865e12fb4d5ebbced4056d9533", "patch": "@@ -239,6 +239,11 @@ Allow @samp{$} as a valid character in a symbol name.\n @cindex escape characters\n Change the interpretation of backslashes in string literals\n from a single backslash character to ``C-style'' escape characters.\n+The following combinations are expanded \\a, \\b, \\f, \\n, \\r, \\t,\n+\\v, \\\\, and \\0 to the ASCII characters alert, backspace, form feed,\n+newline, carriage return, horizontal tab, vertical tab, backslash,\n+and NUL, respectively.  All other combinations of a character preceded\n+by \\ are unexpanded.\n \n @item -fmodule-private\n @opindex @code{fmodule-private}\n@@ -303,10 +308,13 @@ in.  The option @option{-fopenmp} implies @option{-frecursive}.\n @item -fno-range-check\n @opindex @code{frange-check}\n Disable range checking on results of simplification of constant\n-expressions during compilation.  For example, by default, GNU Fortran\n-will give an overflow error at compile time when simplifying @code{a =\n-EXP(1000)}. With @option{-fno-range-check}, no error will be given and\n-the variable @code{a} will be assigned the value @code{+Infinity}.\n+expressions during compilation.  For example, GNU Fortran will give\n+an error at compile time when simplifying @code{a = 1. / 0}.\n+With this option, no error will be given and @code{a} will be assigned\n+the value @code{+Infinity}.  If an expression evaluates to a value\n+outside of the relevant range of [@code{-HUGE()}:@code{HUGE()}],\n+then the expression will be replaced by @code{-Inf} or @code{+Inf}\n+as appropriate.\n Similarly, @code{DATA i/Z'FFFFFFFF'/} will result in an integer overflow\n on most systems, but with @option{-fno-range-check} the value will\n ``wrap around'' and @code{i} will be initialized to @math{-1} instead."}]}