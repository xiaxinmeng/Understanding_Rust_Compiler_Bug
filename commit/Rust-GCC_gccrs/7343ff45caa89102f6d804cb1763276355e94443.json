{"sha": "7343ff45caa89102f6d804cb1763276355e94443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0M2ZmNDVjYWE4OTEwMmY2ZDgwNGNiMTc2MzI3NjM1NWU5NDQ0Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-03-05T18:01:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-03-05T18:01:00Z"}, "message": "re PR tree-optimization/31034 (ICE in set_value_range, at tree-vrp.c:267)\n\n\tPR tree-optimization/31034\n\t* tree-vrp.c (extract_range_from_assert): Don't try to handle a\n\thalf-range if the other side is an overflow infinity.\n\nFrom-SVN: r122562", "tree": {"sha": "c9f92192867005cede3b191cf655a7c041ddda8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9f92192867005cede3b191cf655a7c041ddda8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7343ff45caa89102f6d804cb1763276355e94443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7343ff45caa89102f6d804cb1763276355e94443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7343ff45caa89102f6d804cb1763276355e94443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7343ff45caa89102f6d804cb1763276355e94443/comments", "author": null, "committer": null, "parents": [{"sha": "666ff4f65d256dec0974941605cf76db0b138a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666ff4f65d256dec0974941605cf76db0b138a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666ff4f65d256dec0974941605cf76db0b138a76"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "a1a5e3cd41cbf21ca56a279c968161b597b92e58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7343ff45caa89102f6d804cb1763276355e94443/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7343ff45caa89102f6d804cb1763276355e94443/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7343ff45caa89102f6d804cb1763276355e94443", "patch": "@@ -1,3 +1,9 @@\n+2007-03-05  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/31034\n+\t* tree-vrp.c (extract_range_from_assert): Don't try to handle a\n+\thalf-range if the other side is an overflow infinity.\n+\n 2007-03-05  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config.gcc (bfin*-uclinux*): Use t-bfin-uclinux."}, {"sha": "fd5ba643db09ed8fe3ab7cc2d08191c5e0fc010f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7343ff45caa89102f6d804cb1763276355e94443/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7343ff45caa89102f6d804cb1763276355e94443/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7343ff45caa89102f6d804cb1763276355e94443", "patch": "@@ -1137,13 +1137,14 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n       /* If the maximum value forces us to be out of bounds, simply punt.\n \t It would be pointless to try and do anything more since this\n \t all should be optimized away above us.  */\n-      if (cond_code == LT_EXPR && compare_values (max, min) == 0)\n+      if ((cond_code == LT_EXPR\n+\t   && compare_values (max, min) == 0)\n+\t  || is_overflow_infinity (max))\n \tset_value_range_to_varying (vr_p);\n       else\n \t{\n \t  /* For LT_EXPR, we create the range [MIN, MAX - 1].  */\n-\t  if (cond_code == LT_EXPR\n-\t      && !is_positive_overflow_infinity (max))\n+\t  if (cond_code == LT_EXPR)\n \t    {\n \t      tree one = build_int_cst (type, 1);\n \t      max = fold_build2 (MINUS_EXPR, type, max, one);\n@@ -1169,13 +1170,14 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n       /* If the minimum value forces us to be out of bounds, simply punt.\n \t It would be pointless to try and do anything more since this\n \t all should be optimized away above us.  */\n-      if (cond_code == GT_EXPR && compare_values (min, max) == 0)\n+      if ((cond_code == GT_EXPR\n+\t   && compare_values (min, max) == 0)\n+\t  || is_overflow_infinity (min))\n \tset_value_range_to_varying (vr_p);\n       else\n \t{\n \t  /* For GT_EXPR, we create the range [MIN + 1, MAX].  */\n-\t  if (cond_code == GT_EXPR\n-\t      && !is_negative_overflow_infinity (min))\n+\t  if (cond_code == GT_EXPR)\n \t    {\n \t      tree one = build_int_cst (type, 1);\n \t      min = fold_build2 (PLUS_EXPR, type, min, one);"}]}