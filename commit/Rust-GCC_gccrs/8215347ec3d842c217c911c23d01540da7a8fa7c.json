{"sha": "8215347ec3d842c217c911c23d01540da7a8fa7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxNTM0N2VjM2Q4NDJjMjE3YzkxMWMyM2QwMTU0MGRhN2E4ZmE3Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2000-11-01T00:20:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-11-01T00:20:34Z"}, "message": "Make ia64 port use tags instead of labels for debug info labels.\n\n\t* defaults.h (ASM_OUTPUT_DEBUG_LABEL): New.\n\t* tm.texi (ASM_OUTPUT_DEBUG_LABEL): Document.\n\t* dwarf2out.c (dwarf2out_begin_block): Use ASM_OUTPUT_DEBUG_LABEL\n\tinstead of ASM_OUTPUT_INTERNAL_LABEL.\n\t(dwarf2out_end_block, dwarf2out_label): Likewise.\n\t* final.c (final_scan_insn, case NOTE_INSN_DELETED_LABEL): Likewise\n\t* config/ia64/ia64.h (ASM_OUTPUT_DEBUG_LABEL): Define.\n\nFrom-SVN: r37174", "tree": {"sha": "f74b9a4d296a145ceee676bb737c29f0db6b96e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74b9a4d296a145ceee676bb737c29f0db6b96e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8215347ec3d842c217c911c23d01540da7a8fa7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8215347ec3d842c217c911c23d01540da7a8fa7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8215347ec3d842c217c911c23d01540da7a8fa7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8215347ec3d842c217c911c23d01540da7a8fa7c/comments", "author": null, "committer": null, "parents": [{"sha": "4547105f643233da44000b0c7f0a2f5b83548f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4547105f643233da44000b0c7f0a2f5b83548f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4547105f643233da44000b0c7f0a2f5b83548f28"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "830088c5cfe8c7fef291a49715840d463da5eeb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -1,3 +1,13 @@\n+2000-10-31  Jim Wilson  <wilson@redhat.com>\n+\n+\t* defaults.h (ASM_OUTPUT_DEBUG_LABEL): New.\n+\t* tm.texi (ASM_OUTPUT_DEBUG_LABEL): Document.\n+\t* dwarf2out.c (dwarf2out_begin_block): Use ASM_OUTPUT_DEBUG_LABEL\n+\tinstead of ASM_OUTPUT_INTERNAL_LABEL.\n+\t(dwarf2out_end_block, dwarf2out_label): Likewise.\n+\t* final.c (final_scan_insn, case NOTE_INSN_DELETED_LABEL): Likewise\n+\t* config/ia64/ia64.h (ASM_OUTPUT_DEBUG_LABEL): Define.\n+\t\n 2000-10-31  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (struct dw_loc_descr_struct): Add dw_loc_addr."}, {"sha": "a3aca050fa606563fe658768134340ae9ca29ff3", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -2637,6 +2637,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define DWARF2_ASM_LINE_DEBUG_INFO (TARGET_DWARF2_ASM)\n \n+/* Use tags for debug info labels, so that they don't break instruction\n+   bundles.  This also avoids getting spurious DV warnings from the\n+   assembler.  This is similar to ASM_OUTPUT_INTERNAL_LABEL, except that we\n+   add brackets around the label.  */\n+\n+#define ASM_OUTPUT_DEBUG_LABEL(FILE, PREFIX, NUM) \\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"[.%s%d:]\\n\", PREFIX, NUM);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n \f\n /* Cross Compilation and Floating Point.  */\n "}, {"sha": "b6fe9ec8c860bfe03c7a041f1d5c1d132f0735e4", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -133,6 +133,15 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #define ASM_OUTPUT_LABELREF(FILE,NAME)  asm_fprintf ((FILE), \"%U%s\", (NAME))\n #endif\n \n+/* Allow target to print debug info labels specially.  This is useful for\n+   VLIW targets, since debug info labels should go into the middle of\n+   instruction bundles instead of breaking them.  */\n+\n+#ifndef ASM_OUTPUT_DEBUG_LABEL\n+#define ASM_OUTPUT_DEBUG_LABEL(FILE, PREFIX, NUM) \\\n+  ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM)\n+#endif\n+\n /* This determines whether or not we support weak symbols.  */\n #ifndef SUPPORTS_WEAK\n #ifdef ASM_WEAKEN_LABEL"}, {"sha": "77cda6453d00eb6e834a7735de55ce581bf5746f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -10929,7 +10929,7 @@ dwarf2out_begin_block (blocknum)\n      register unsigned blocknum;\n {\n   function_section (current_function_decl);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, BLOCK_BEGIN_LABEL, blocknum);\n+  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_BEGIN_LABEL, blocknum);\n }\n \n /* Output a marker (i.e. a label) for the end of the generated code for a\n@@ -10940,7 +10940,7 @@ dwarf2out_end_block (blocknum)\n      register unsigned blocknum;\n {\n   function_section (current_function_decl);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);\n+  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);\n }\n \n /* Returns nonzero if it is appropriate not to emit any debugging\n@@ -10975,7 +10975,7 @@ dwarf2out_label (insn)\n     {\n       function_section (current_function_decl);\n       sprintf (label, INSN_LABEL_FMT, current_funcdef_number);\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, label,\n+      ASM_OUTPUT_DEBUG_LABEL (asm_out_file, label,\n \t\t\t\t (unsigned) INSN_UID (insn));\n     }\n }"}, {"sha": "ae2864aec0a45ac4a4c78407f404671f68c8d3f9", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -2270,7 +2270,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t     referenced (in the form of having its address taken.  */\n \t  /* ??? Figure out how not to do this unconditionally.  This\n \t     interferes with bundling on LIW targets.  */\n-\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n+\t  ASM_OUTPUT_DEBUG_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n \n \t  if (debug_info_level == DINFO_LEVEL_NORMAL\n \t      || debug_info_level == DINFO_LEVEL_VERBOSE)"}, {"sha": "87228a45c3b2b8f3a3b03362c5d9e11582c08fa7", "filename": "gcc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8215347ec3d842c217c911c23d01540da7a8fa7c/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=8215347ec3d842c217c911c23d01540da7a8fa7c", "patch": "@@ -5945,6 +5945,19 @@ The usual definition of this macro is as follows:\n fprintf (@var{stream}, \"L%s%d:\\n\", @var{prefix}, @var{num})\n @end example\n \n+@findex ASM_OUTPUT_DEBUG_LABEL\n+@item ASM_OUTPUT_DEBUG_LABEL (@var{stream}, @var{prefix}, @var{num})\n+A C statement to output to the stdio stream @var{stream} a debug info\n+label whose name is made from the string @var{prefix} and the number\n+@var{num}.  This is useful for VLIW targets, where debug info labels\n+may need to be treated differently than branch target labels.  On some\n+systems, branch target labels must be at the beginning of instruction\n+bundles, but debug info labels can occur in the middle of instruction\n+bundles.\n+\n+If this macro is not defined, then @code{ASM_OUTPUT_INTERNAL_LABEL} will be\n+used.\n+\n @findex ASM_OUTPUT_ALTERNATE_LABEL_NAME\n @item ASM_OUTPUT_ALTERNATE_LABEL_NAME (@var{stream}, @var{string})\n A C statement to output to the stdio stream @var{stream} the string"}]}