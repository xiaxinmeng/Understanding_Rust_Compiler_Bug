{"sha": "6c0eaee7d2abf83f42269e5f238025c841a0355f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwZWFlZTdkMmFiZjgzZjQyMjY5ZTVmMjM4MDI1Yzg0MWEwMzU1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-12-08T00:44:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-12-08T00:44:28Z"}, "message": "re PR rtl-optimization/42269 (Extra sign extension instructions generated)\n\n        PR rtl-opt/42269\n        * combine.c (setup_incoming_promotions): Improve the conditions\n        under which we respect the promotions applied.\n\nFrom-SVN: r155071", "tree": {"sha": "36f585f9dad663c419f9f6399d5a9a62873998f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36f585f9dad663c419f9f6399d5a9a62873998f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0eaee7d2abf83f42269e5f238025c841a0355f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0eaee7d2abf83f42269e5f238025c841a0355f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0eaee7d2abf83f42269e5f238025c841a0355f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0eaee7d2abf83f42269e5f238025c841a0355f/comments", "author": null, "committer": null, "parents": [{"sha": "9e7e65a08b1bac45dff11d676bc49a845d4b438e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7e65a08b1bac45dff11d676bc49a845d4b438e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7e65a08b1bac45dff11d676bc49a845d4b438e"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "bcccc3a2bf97c3a9eb600611f267a158a1603269", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c0eaee7d2abf83f42269e5f238025c841a0355f", "patch": "@@ -1,3 +1,9 @@\n+2009-12-07  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/42269\n+\t* combine.c (setup_incoming_promotions): Improve the conditions\n+\tunder which we respect the promotions applied.\n+\n 2009-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/linux.h (ASM_SPEC): Pass -K PIC if -findirect-dispatch."}, {"sha": "f26b9e50abc841fcea49b9b2b01278348632bf16", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6c0eaee7d2abf83f42269e5f238025c841a0355f", "patch": "@@ -1377,19 +1377,23 @@ setup_incoming_promotions (rtx first)\n \n       /* Eliminate sign extensions in the callee when possible.  Only\n          do this when:\n-\t (a) a mode promotion has occurred;\n-\t (b) the mode of the register is the same as the mode of\n+\t (a) A mode promotion has occurred;\n+\t (b) The mode of the register is the same as the mode of\n \t     the argument as it is passed; and\n-\t (c) the signedness does not change across any of the promotions; and\n-\t (d) when no language-level promotions (which we cannot guarantee\n+\t (c) Either there's no language level extension, or the extension\n+\t     from source to end result is valid.  The later case is true\n+\t     when the signedness of the extensions match, or when the \n+\t     language level extension is unsigned.  In the later case,\n+\t     a zero extension followed by a sign extension is the same\n+\t     as one big zero extension.\n+\t (d) When no language-level promotions (which we cannot guarantee\n \t     will have been done by an external caller) are necessary,\n \t     unless we know that this function is only ever called from\n \t     the current compilation unit -- all of whose call sites will\n \t     do the mode1 --> mode2 promotion.  */\n       if (mode1 != mode3\n           && mode3 == mode4\n-          && uns1 == uns3\n-\t  && (mode1 == mode2 || strictly_local))\n+\t  && (mode1 == mode2 || ((uns1 || !uns3) && strictly_local)))\n         {\n \t  /* Record that the value was promoted from mode1 to mode3,\n \t     so that any sign extension at the head of the current"}, {"sha": "a9410d442e9ea223262c0d26172b697c3d328de4", "filename": "gcc/testsuite/gcc.c-torture/execute/pr42269-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42269-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42269-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42269-2.c?ref=6c0eaee7d2abf83f42269e5f238025c841a0355f", "patch": "@@ -0,0 +1,15 @@\n+/* Make sure that language + abi extensions in passing S interoperate.  */\n+\n+static long long __attribute__((noinline))\n+foo (unsigned short s)\n+{\n+  return (short) s;\n+}\n+\n+unsigned short s = 0xFFFF;\n+\n+int\n+main (void)\n+{\n+  return foo (s) + 1 != 0;\n+}"}, {"sha": "5d4ef1c258fc29d4979280c400ef2e9a86a2bc1a", "filename": "gcc/testsuite/gcc.target/alpha/pr42269-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42269-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0eaee7d2abf83f42269e5f238025c841a0355f/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42269-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42269-1.c?ref=6c0eaee7d2abf83f42269e5f238025c841a0355f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"addl\" } } */\n+\n+unsigned\n+parity (unsigned x)\n+{\n+  x ^= x >> 16;\n+  x ^= x >> 8;\n+  x ^= x >> 4;\n+  x &= 0xf;\n+  return (0x6996 >> x) & 1;\n+}"}]}