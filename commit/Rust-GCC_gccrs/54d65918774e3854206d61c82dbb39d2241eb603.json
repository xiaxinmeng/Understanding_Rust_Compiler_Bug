{"sha": "54d65918774e3854206d61c82dbb39d2241eb603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkNjU5MTg3NzRlMzg1NDIwNmQ2MWM4MmRiYjM5ZDIyNDFlYjYwMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-09-15T22:01:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-15T22:01:08Z"}, "message": "pa.c (emit_move_sequence): Do not replace a pseudo with its equivalent memory location unless...\n\n\ufffd\n        * pa.c (emit_move_sequence): Do not replace a pseudo with its\n        equivalent memory location unless we have been provided a scratch\n        register.  Similarly do not call find_replacement unless a\n        scratch register has been provided.\n\nFrom-SVN: r22438", "tree": {"sha": "f809acae4b5b12a2757aa56eafd013c9f83c4298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f809acae4b5b12a2757aa56eafd013c9f83c4298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d65918774e3854206d61c82dbb39d2241eb603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d65918774e3854206d61c82dbb39d2241eb603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d65918774e3854206d61c82dbb39d2241eb603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d65918774e3854206d61c82dbb39d2241eb603/comments", "author": null, "committer": null, "parents": [{"sha": "c09a3c2e15620f80528bc3b38562d9f6b9c28e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c09a3c2e15620f80528bc3b38562d9f6b9c28e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c09a3c2e15620f80528bc3b38562d9f6b9c28e34"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "d791d774dd8060307349080b3ceb5b7013fc06fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d65918774e3854206d61c82dbb39d2241eb603/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d65918774e3854206d61c82dbb39d2241eb603/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54d65918774e3854206d61c82dbb39d2241eb603", "patch": "@@ -1,3 +1,10 @@\n+Tue Sep 15 22:59:52 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c (emit_move_sequence): Do not replace a pseudo with its\n+\tequivalent memory location unless we have been provided a scratch\n+\tregister.  Similarly do not call find_replacement unless a\n+\tscratch register has been provided.\n+\n Tue Sep 15 19:23:01 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n         * i386.h (PREFERRED_RELOAD_CLASS): For standard 387 constants,"}, {"sha": "41642041e32f8a7b86d3f3f45b9af252821757b6", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d65918774e3854206d61c82dbb39d2241eb603/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d65918774e3854206d61c82dbb39d2241eb603/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=54d65918774e3854206d61c82dbb39d2241eb603", "patch": "@@ -1086,33 +1086,37 @@ emit_move_sequence (operands, mode, scratch_reg)\n   register rtx operand1 = operands[1];\n   register rtx tem;\n \n-  if (reload_in_progress && GET_CODE (operand0) == REG\n+  if (scratch_reg\n+      && reload_in_progress && GET_CODE (operand0) == REG\n       && REGNO (operand0) >= FIRST_PSEUDO_REGISTER)\n     operand0 = reg_equiv_mem[REGNO (operand0)];\n-  else if (reload_in_progress && GET_CODE (operand0) == SUBREG\n+  else if (scratch_reg\n+\t   && reload_in_progress && GET_CODE (operand0) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operand0)) == REG\n \t   && REGNO (SUBREG_REG (operand0)) >= FIRST_PSEUDO_REGISTER)\n     {\n       SUBREG_REG (operand0) = reg_equiv_mem[REGNO (SUBREG_REG (operand0))];\n       operand0 = alter_subreg (operand0);\n     }\n \n-  if (reload_in_progress && GET_CODE (operand1) == REG\n+  if (scratch_reg\n+      && reload_in_progress && GET_CODE (operand1) == REG\n       && REGNO (operand1) >= FIRST_PSEUDO_REGISTER)\n     operand1 = reg_equiv_mem[REGNO (operand1)];\n-  else if (reload_in_progress && GET_CODE (operand1) == SUBREG\n+  else if (scratch_reg\n+\t   && reload_in_progress && GET_CODE (operand1) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operand1)) == REG\n \t   && REGNO (SUBREG_REG (operand1)) >= FIRST_PSEUDO_REGISTER)\n     {\n       SUBREG_REG (operand1) = reg_equiv_mem[REGNO (SUBREG_REG (operand1))];\n       operand1 = alter_subreg (operand1);\n     }\n \n-  if (reload_in_progress && GET_CODE (operand0) == MEM\n+  if (scratch_reg && reload_in_progress && GET_CODE (operand0) == MEM\n       && ((tem = find_replacement (&XEXP (operand0, 0)))\n \t  != XEXP (operand0, 0)))\n     operand0 = gen_rtx_MEM (GET_MODE (operand0), tem);\n-  if (reload_in_progress && GET_CODE (operand1) == MEM\n+  if (scratch_reg && reload_in_progress && GET_CODE (operand1) == MEM\n       && ((tem = find_replacement (&XEXP (operand1, 0)))\n \t  != XEXP (operand1, 0)))\n     operand1 = gen_rtx_MEM (GET_MODE (operand1), tem);"}]}