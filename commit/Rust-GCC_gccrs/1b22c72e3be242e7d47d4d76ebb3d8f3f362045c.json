{"sha": "1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyMmM3MmUzYmUyNDJlN2Q0N2Q0ZDc2ZWJiM2Q4ZjNmMzYyMDQ1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-12-10T22:30:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-12-10T22:30:02Z"}, "message": "re PR target/34403 (wrong frequency of block)\n\n\tPR target/34403\n\t* config/i386/i386.c (ix86_expand_movmem): Punt if the count is large.\n\t(ix86_expand_setmem): Likewise.\n\nFrom-SVN: r130753", "tree": {"sha": "8e749f899be5b475f7eabcd7ed59d5c5a699c7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e749f899be5b475f7eabcd7ed59d5c5a699c7e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da9ad92397352dceef1f0bd3d2cb7ca221489570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9ad92397352dceef1f0bd3d2cb7ca221489570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9ad92397352dceef1f0bd3d2cb7ca221489570"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "c57f46eac80805d790801f05708b6eefe0852c1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "patch": "@@ -1,3 +1,9 @@\n+2007-12-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/34403\n+\t* config/i386/i386.c (ix86_expand_movmem): Punt if the count is large.\n+\t(ix86_expand_setmem): Likewise.\n+\n 2007-12-10  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/34302"}, {"sha": "ebbf48957ba7f5b9dd298cd5fe2d677bfa69d2fe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "patch": "@@ -15282,7 +15282,7 @@ smallest_pow2_greater_than (int val)\n }\n \n /* Expand string move (memcpy) operation.  Use i386 string operations when\n-   profitable.  expand_clrmem contains similar code. The code depends upon\n+   profitable.  expand_setmem contains similar code.  The code depends upon\n    architecture, block size and alignment, but always has the same\n    overall structure:\n \n@@ -15333,6 +15333,10 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n   if (CONST_INT_P (expected_size_exp) && count == 0)\n     expected_size = INTVAL (expected_size_exp);\n \n+  /* Make sure we don't need to care about overflow later on.  */\n+  if (count > ((unsigned HOST_WIDE_INT) 1 << 30))\n+    return 0;\n+\n   /* Step 0: Decide on preferred algorithm, desired alignment and\n      size of chunks to be copied by main loop.  */\n \n@@ -15657,6 +15661,10 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n   if (CONST_INT_P (expected_size_exp) && count == 0)\n     expected_size = INTVAL (expected_size_exp);\n \n+  /* Make sure we don't need to care about overflow later on.  */\n+  if (count > ((unsigned HOST_WIDE_INT) 1 << 30))\n+    return 0;\n+\n   /* Step 0: Decide on preferred algorithm, desired alignment and\n      size of chunks to be copied by main loop.  */\n "}, {"sha": "8ff13b4fb12c3ee3ffb8f040d981e157a26b7cda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "patch": "@@ -1,3 +1,7 @@\n+2007-12-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/memcpy1.C: New test.\n+\n 2007-12-10  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34425"}, {"sha": "f9887ee2314c9b221c72d8e78af8e001a693aa6a", "filename": "gcc/testsuite/g++.dg/opt/memcpy1.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22c72e3be242e7d47d4d76ebb3d8f3f362045c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C?ref=1b22c72e3be242e7d47d4d76ebb3d8f3f362045c", "patch": "@@ -0,0 +1,79 @@\n+// PR target/34403\n+// Origin: Martin Michlmayr <tbm@cyrius.com>\n+\n+// { dg-do compile }\n+// { dg-options \"-O\" }\n+\n+typedef unsigned char uint8_t;\n+typedef uint8_t uint8;\n+typedef long unsigned int size_t;\n+class csVector2\n+{\n+public:float x;\n+};\n+class csBox2\n+{\n+};\n+struct iBase\n+{\n+};\n+struct iClipper2D:public virtual iBase\n+{\n+};\n+template < class Class > class scfImplementation:public virtual iBase\n+{\n+};\n+template < class Class, class I1 > class scfImplementation1:public\n+scfImplementation < Class >,\n+  public I1\n+{\n+};\n+class csClipper:public scfImplementation1 < csClipper, iClipper2D >\n+{\n+};\n+class csBoxClipper:public csClipper\n+{\n+  csBox2 region;\n+  virtual uint8 Clip (csVector2 * InPolygon, size_t InCount,\n+                      csVector2 * OutPolygon, size_t & OutCount);\n+};\n+struct StatusOutputNone\n+{\n+};\n+namespace CS\n+{\n+  template < typename BoxTest, typename StatusOutput > class BoxClipper\n+  {\n+    BoxTest boxTest;\n+    StatusOutput statOut;\n+    const csBox2 & region;\n+    csVector2 *InP;\n+    size_t InV;\n+    csVector2 *OutP;\n+    size_t OutV;\n+  public:  BoxClipper (const BoxTest & boxTest, const StatusOutput & statOut,\n+                  const csBox2 & region, csVector2 * InP, size_t InV,\n+                  csVector2 * OutP):boxTest (boxTest), statOut (statOut),\n+      region (region), InP (InP), InV (InV), OutP (OutP), OutV (-1)\n+    {\n+    }\n+    uint8 Clip ()\n+    {\n+      __builtin_memcpy (this->OutP, InP, OutV * sizeof (csVector2));\n+    }\n+  };\n+}\n+struct BoxTestAll\n+{\n+};\n+uint8\n+csBoxClipper::Clip (csVector2 * InPolygon, size_t InCount,\n+                    csVector2 * OutPolygon, size_t & OutCount)\n+{\n+  BoxTestAll b;\n+  StatusOutputNone n;\n+  CS::BoxClipper < BoxTestAll, StatusOutputNone > boxClip (b, n, region,\n+                                                           InPolygon, InCount,\n+                                                           OutPolygon);\n+  uint8 Clipped = boxClip.Clip ();\n+}"}]}