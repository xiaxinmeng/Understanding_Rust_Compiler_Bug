{"sha": "d797b11519bf0f555ea30472441395013c1411f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5N2IxMTUxOWJmMGY1NTVlYTMwNDcyNDQxMzk1MDEzYzE0MTFmMA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-06-10T08:25:37Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-06-10T08:25:37Z"}, "message": "[ARC] Update RTX costs.\n\nUpdate RTX costs to reflect better the ARC architecture.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_rtx_costs): Update costs.\n\n/gcc/testsuite\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/jumptables.c: Update test.\n\nFrom-SVN: r272113", "tree": {"sha": "9f3cbc448947303b235ebb8beb4632c6a9e27d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3cbc448947303b235ebb8beb4632c6a9e27d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d797b11519bf0f555ea30472441395013c1411f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d797b11519bf0f555ea30472441395013c1411f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d797b11519bf0f555ea30472441395013c1411f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d797b11519bf0f555ea30472441395013c1411f0/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03301dcc8402e51506e0f64ace9c83e36d2fefc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03301dcc8402e51506e0f64ace9c83e36d2fefc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03301dcc8402e51506e0f64ace9c83e36d2fefc7"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "d8fbb00c3bf0189d56dbf430989b0d424853c641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d797b11519bf0f555ea30472441395013c1411f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d797b11519bf0f555ea30472441395013c1411f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d797b11519bf0f555ea30472441395013c1411f0", "patch": "@@ -1,3 +1,7 @@\n+2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_rtx_costs): Update costs.\n+\n 2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (arc_check_ior_const): Declare."}, {"sha": "2a530dea88ce64633e22c369c422ce6200dd9413", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=d797b11519bf0f555ea30472441395013c1411f0", "patch": "@@ -5560,41 +5560,39 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case CONST_INT:\n       {\n \tbool nolimm = false; /* Can we do without long immediate?  */\n-\tbool fast = false; /* Is the result available immediately?  */\n-\tbool condexec = false; /* Does this allow conditiobnal execution?  */\n-\tbool compact = false; /* Is a 16 bit opcode available?  */\n-\t/* CONDEXEC also implies that we can have an unconditional\n-\t   3-address operation.  */\n \n-\tnolimm = compact = condexec = false;\n+\tnolimm = false;\n \tif (UNSIGNED_INT6 (INTVAL (x)))\n-\t  nolimm = condexec = compact = true;\n+\t  nolimm = true;\n \telse\n \t  {\n-\t    if (SMALL_INT (INTVAL (x)))\n-\t      nolimm = fast = true;\n \t    switch (outer_code)\n \t      {\n \t      case AND: /* bclr, bmsk, ext[bw] */\n \t\tif (satisfies_constraint_Ccp (x) /* bclr */\n \t\t    || satisfies_constraint_C1p (x) /* bmsk */)\n-\t\t  nolimm = fast = condexec = compact = true;\n+\t\t  nolimm = true;\n \t\tbreak;\n \t      case IOR: /* bset */\n \t\tif (satisfies_constraint_C0p (x)) /* bset */\n-\t\t  nolimm = fast = condexec = compact = true;\n+\t\t  nolimm = true;\n \t\tbreak;\n \t      case XOR:\n \t\tif (satisfies_constraint_C0p (x)) /* bxor */\n-\t\t  nolimm = fast = condexec = true;\n+\t\t  nolimm = true;\n \t\tbreak;\n+\t      case SET:\n+\t\tif (UNSIGNED_INT8 (INTVAL (x)))\n+\t\t  nolimm = true;\n+\t\tif (satisfies_constraint_Chi (x))\n+\t\t  nolimm = true;\n+\t\tif (satisfies_constraint_Clo (x))\n+\t\t  nolimm = true;\n \t      default:\n \t\tbreak;\n \t      }\n \t  }\n-\t/* FIXME: Add target options to attach a small cost if\n-\t   condexec / compact is not true.  */\n-\tif (nolimm)\n+\tif (nolimm && !speed)\n \t  {\n \t    *total = 0;\n \t    return true;\n@@ -5607,7 +5605,7 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case CONST:\n     case LABEL_REF:\n     case SYMBOL_REF:\n-      *total = COSTS_N_INSNS (1);\n+      *total = speed ? COSTS_N_INSNS (1) : COSTS_N_INSNS (4);\n       return true;\n \n     case CONST_DOUBLE:\n@@ -5633,16 +5631,10 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case LSHIFTRT:\n       if (TARGET_BARREL_SHIFTER)\n \t{\n-\t  /* If we want to shift a constant, we need a LIMM.  */\n-\t  /* ??? when the optimizers want to know if a constant should be\n-\t     hoisted, they ask for the cost of the constant.  OUTER_CODE is\n-\t     insufficient context for shifts since we don't know which operand\n-\t     we are looking at.  */\n \t  if (CONSTANT_P (XEXP (x, 0)))\n \t    {\n-\t      *total += (COSTS_N_INSNS (2)\n-\t\t\t + rtx_cost (XEXP (x, 1), mode, (enum rtx_code) code,\n-\t\t\t\t     0, speed));\n+\t      *total += rtx_cost (XEXP (x, 1), mode, (enum rtx_code) code,\n+\t\t\t\t  0, speed);\n \t      return true;\n \t    }\n \t  *total = COSTS_N_INSNS (1);\n@@ -5662,7 +5654,13 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \n     case DIV:\n     case UDIV:\n-      if (speed)\n+      if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t  && (TARGET_FP_SP_SQRT || TARGET_FP_DP_SQRT))\n+\t*total = COSTS_N_INSNS(1);\n+      else if (GET_MODE_CLASS (mode) == MODE_INT\n+\t       && TARGET_DIVREM)\n+\t*total = COSTS_N_INSNS(1);\n+      else if (speed)\n \t*total = COSTS_N_INSNS(30);\n       else\n \t*total = COSTS_N_INSNS(1);\n@@ -5675,19 +5673,28 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t*total= arc_multcost;\n       /* We do not want synth_mult sequences when optimizing\n \t for size.  */\n-      else if (TARGET_MUL64_SET || TARGET_ARC700_MPY)\n+      else if (TARGET_ANY_MPY)\n \t*total = COSTS_N_INSNS (1);\n       else\n \t*total = COSTS_N_INSNS (2);\n       return false;\n+\n     case PLUS:\n+      if (outer_code == MEM && CONST_INT_P (XEXP (x, 1))\n+\t  && RTX_OK_FOR_OFFSET_P (mode, XEXP (x, 1)))\n+\t{\n+\t  *total = 0;\n+\t  return true;\n+\t}\n+\n       if ((GET_CODE (XEXP (x, 0)) == ASHIFT\n \t   && _1_2_3_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n           || (GET_CODE (XEXP (x, 0)) == MULT\n               && _2_4_8_operand (XEXP (XEXP (x, 0), 1), VOIDmode)))\n \t{\n-\t  *total += (rtx_cost (XEXP (x, 1), mode, PLUS, 0, speed)\n-\t\t     + rtx_cost (XEXP (XEXP (x, 0), 0), mode, PLUS, 1, speed));\n+\t  if (CONSTANT_P (XEXP (x, 1)) && !speed)\n+\t    *total += COSTS_N_INSNS (4);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode, PLUS, 1, speed);\n \t  return true;\n \t}\n       return false;\n@@ -5697,11 +5704,13 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n           || (GET_CODE (XEXP (x, 1)) == MULT\n               && _2_4_8_operand (XEXP (XEXP (x, 1), 1), VOIDmode)))\n \t{\n-\t  *total += (rtx_cost (XEXP (x, 0), mode, PLUS, 0, speed)\n-\t\t     + rtx_cost (XEXP (XEXP (x, 1), 0), mode, PLUS, 1, speed));\n+\t  if (CONSTANT_P (XEXP (x, 0)) && !speed)\n+\t    *total += COSTS_N_INSNS (4);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), mode, PLUS, 1, speed);\n \t  return true;\n \t}\n       return false;\n+\n     case COMPARE:\n       {\n \trtx op0 = XEXP (x, 0);"}, {"sha": "e6671e3c8617610d3947b654aab98123f085c9fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d797b11519bf0f555ea30472441395013c1411f0", "patch": "@@ -1,3 +1,7 @@\n+2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/jumptables.c: Update test.\n+\n 2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/and-cnst-size.c: New test."}, {"sha": "ffbcf93e164c3e5c8362286314fa1cb65c533172", "filename": "gcc/testsuite/gcc.target/arc/jumptable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d797b11519bf0f555ea30472441395013c1411f0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c?ref=d797b11519bf0f555ea30472441395013c1411f0", "patch": "@@ -31,4 +31,4 @@ int switchCase(int value, int b)\n }\n \n /* { dg-final { scan-assembler-times \"bih\" 1 } } */\n-/* { dg-final { scan-assembler-times \"b_s\" 8 } } */\n+/* { dg-final { scan-assembler-times \"b_s\" 6 } } */"}]}