{"sha": "58d4c8364b5fcfbb21bc1040974fbb0e30700430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkNGM4MzY0YjVmY2ZiYjIxYmMxMDQwOTc0ZmJiMGUzMDcwMDQzMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-05-06T15:18:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-05-06T15:18:59Z"}, "message": "Move name_to_pass_map into class pass_manager\n\ngcc/ChangeLog:\n\t* pass_manager.h (pass_manager::register_pass_name): New method.\n\t(pass_manager::get_pass_by_name): New method.\n\t(pass_manager::create_pass_tab): New method.\n\t(pass_manager::m_name_to_pass_map): New field.\n\t* passes.c (name_to_pass_map): Delete global in favor of field\n\t\"m_name_to_pass_map\" of pass_manager.\n\t(register_pass_name): Rename from a function to...\n\t(pass_manager::register_pass_name): ...this method, updating\n\tfor renaming of global \"name_to_pass_map\" to field\n\t\"m_name_to_pass_map\".\n\t(create_pass_tab): Rename from a function to...\n\t(pass_manager::create_pass_tab): ...this method, updating\n\tfor renaming of global \"name_to_pass_map\" to field.\n\t(get_pass_by_name): Rename from a function to...\n\t(pass_manager::get_pass_by_name): ...this method.\n\t(enable_disable_pass): Convert use of get_pass_by_name to\n\ta method call, locating the pass_manager singleton.\n\nFrom-SVN: r235977", "tree": {"sha": "6555b94afb07ba3011d6b678bf7c938173218880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6555b94afb07ba3011d6b678bf7c938173218880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58d4c8364b5fcfbb21bc1040974fbb0e30700430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d4c8364b5fcfbb21bc1040974fbb0e30700430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d4c8364b5fcfbb21bc1040974fbb0e30700430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d4c8364b5fcfbb21bc1040974fbb0e30700430/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66b0fe8f4ef0d0345a66c9783b056e765ea6065b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b0fe8f4ef0d0345a66c9783b056e765ea6065b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b0fe8f4ef0d0345a66c9783b056e765ea6065b"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "c65156d0919bed2a29d3f36071aa9b5c0144c78a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58d4c8364b5fcfbb21bc1040974fbb0e30700430", "patch": "@@ -1,3 +1,23 @@\n+2016-05-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* pass_manager.h (pass_manager::register_pass_name): New method.\n+\t(pass_manager::get_pass_by_name): New method.\n+\t(pass_manager::create_pass_tab): New method.\n+\t(pass_manager::m_name_to_pass_map): New field.\n+\t* passes.c (name_to_pass_map): Delete global in favor of field\n+\t\"m_name_to_pass_map\" of pass_manager.\n+\t(register_pass_name): Rename from a function to...\n+\t(pass_manager::register_pass_name): ...this method, updating\n+\tfor renaming of global \"name_to_pass_map\" to field\n+\t\"m_name_to_pass_map\".\n+\t(create_pass_tab): Rename from a function to...\n+\t(pass_manager::create_pass_tab): ...this method, updating\n+\tfor renaming of global \"name_to_pass_map\" to field.\n+\t(get_pass_by_name): Rename from a function to...\n+\t(pass_manager::get_pass_by_name): ...this method.\n+\t(enable_disable_pass): Convert use of get_pass_by_name to\n+\ta method call, locating the pass_manager singleton.\n+\n 2016-05-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* genattr-common.c (main): Convert argv from"}, {"sha": "464e25faaaba5c10b1900679264a98cd2436d63c", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=58d4c8364b5fcfbb21bc1040974fbb0e30700430", "patch": "@@ -78,6 +78,10 @@ class pass_manager\n   opt_pass *get_pass_peephole2 () const { return pass_peephole2_1; }\n   opt_pass *get_pass_profile () const { return pass_profile_1; }\n \n+  void register_pass_name (opt_pass *pass, const char *name);\n+\n+  opt_pass *get_pass_by_name (const char *name);\n+\n public:\n   /* The root of the compilation pass tree, once constructed.  */\n   opt_pass *all_passes;\n@@ -95,9 +99,11 @@ class pass_manager\n private:\n   void set_pass_for_id (int id, opt_pass *pass);\n   void register_dump_files (opt_pass *pass);\n+  void create_pass_tab () const;\n \n private:\n   context *m_ctxt;\n+  hash_map<nofree_string_hash, opt_pass *> *m_name_to_pass_map;\n \n   /* References to all of the individual passes.\n      These fields are generated via macro expansion."}, {"sha": "0565cfa144b61ff48755f11002087c9892bc9d20", "filename": "gcc/passes.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d4c8364b5fcfbb21bc1040974fbb0e30700430/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=58d4c8364b5fcfbb21bc1040974fbb0e30700430", "patch": "@@ -66,8 +66,6 @@ using namespace gcc;\n    The variable current_pass is also used for statistics and plugins.  */\n opt_pass *current_pass;\n \n-static void register_pass_name (opt_pass *, const char *);\n-\n /* Most passes are single-instance (within their context) and thus don't\n    need to implement cloning, but passes that support multiple instances\n    *must* provide their own implementation of the clone method.\n@@ -844,21 +842,19 @@ pass_manager::register_dump_files (opt_pass *pass)\n   while (pass);\n }\n \n-static hash_map<nofree_string_hash, opt_pass *> *name_to_pass_map;\n-\n /* Register PASS with NAME.  */\n \n-static void\n-register_pass_name (opt_pass *pass, const char *name)\n+void\n+pass_manager::register_pass_name (opt_pass *pass, const char *name)\n {\n-  if (!name_to_pass_map)\n-    name_to_pass_map = new hash_map<nofree_string_hash, opt_pass *> (256);\n+  if (!m_name_to_pass_map)\n+    m_name_to_pass_map = new hash_map<nofree_string_hash, opt_pass *> (256);\n \n-  if (name_to_pass_map->get (name))\n+  if (m_name_to_pass_map->get (name))\n     return; /* Ignore plugin passes.  */\n \n-      const char *unique_name = xstrdup (name);\n-      name_to_pass_map->put (unique_name, pass);\n+  const char *unique_name = xstrdup (name);\n+  m_name_to_pass_map->put (unique_name, pass);\n }\n \n /* Map from pass id to canonicalized pass name.  */\n@@ -882,14 +878,14 @@ passes_pass_traverse (const char *const &name, opt_pass *const &pass, void *)\n /* The function traverses NAME_TO_PASS_MAP and creates a pass info\n    table for dumping purpose.  */\n \n-static void\n-create_pass_tab (void)\n+void\n+pass_manager::create_pass_tab (void) const\n {\n   if (!flag_dump_passes)\n     return;\n \n-  pass_tab.safe_grow_cleared (g->get_passes ()->passes_by_id_size + 1);\n-  name_to_pass_map->traverse <void *, passes_pass_traverse> (NULL);\n+  pass_tab.safe_grow_cleared (passes_by_id_size + 1);\n+  m_name_to_pass_map->traverse <void *, passes_pass_traverse> (NULL);\n }\n \n static bool override_gate_status (opt_pass *, tree, bool);\n@@ -960,10 +956,10 @@ pass_manager::dump_passes () const\n \n /* Returns the pass with NAME.  */\n \n-static opt_pass *\n-get_pass_by_name (const char *name)\n+opt_pass *\n+pass_manager::get_pass_by_name (const char *name)\n {\n-  opt_pass **p = name_to_pass_map->get (name);\n+  opt_pass **p = m_name_to_pass_map->get (name);\n   if (p)\n     return *p;\n \n@@ -1025,7 +1021,7 @@ enable_disable_pass (const char *arg, bool is_enable)\n       free (argstr);\n       return;\n     }\n-  pass = get_pass_by_name (phase_name);\n+  pass = g->get_passes ()->get_pass_by_name (phase_name);\n   if (!pass || pass->static_pass_number == -1)\n     {\n       if (is_enable)"}]}