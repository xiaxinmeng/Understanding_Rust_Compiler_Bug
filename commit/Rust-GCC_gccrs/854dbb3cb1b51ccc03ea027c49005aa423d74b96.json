{"sha": "854dbb3cb1b51ccc03ea027c49005aa423d74b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0ZGJiM2NiMWI1MWNjYzAzZWEwMjdjNDkwMDVhYTQyM2Q3NGI5Ng==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-04-25T07:43:49Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-04-25T07:43:49Z"}, "message": "S/390: PR80464: Split MEM->GPR vector moves\n\nWe do this already for TImode values but it was missing for vector\nmodes.\n\ngcc/ChangeLog:\n\n2017-04-25  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/80464\n\t* config/s390/vector.md: Split MEM->GPR vector moves for\n\tnon-s_operand addresses.\n\ngcc/testsuite/ChangeLog:\n\n2017-04-25  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/80464\n\t* gfortran.fortran-torture/compile/pr80464.f90: New test.\n\nFrom-SVN: r247134", "tree": {"sha": "00d98ef00cfe09f0e84eb1774debc0b5928e4244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00d98ef00cfe09f0e84eb1774debc0b5928e4244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854dbb3cb1b51ccc03ea027c49005aa423d74b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854dbb3cb1b51ccc03ea027c49005aa423d74b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854dbb3cb1b51ccc03ea027c49005aa423d74b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854dbb3cb1b51ccc03ea027c49005aa423d74b96/comments", "author": null, "committer": null, "parents": [{"sha": "3cb9ee2f9c10a04a7498be3279897b46669c61dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb9ee2f9c10a04a7498be3279897b46669c61dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb9ee2f9c10a04a7498be3279897b46669c61dc"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "2952893834a776a3daeedd1154a15b19b71d1696", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854dbb3cb1b51ccc03ea027c49005aa423d74b96/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854dbb3cb1b51ccc03ea027c49005aa423d74b96/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=854dbb3cb1b51ccc03ea027c49005aa423d74b96", "patch": "@@ -248,6 +248,25 @@\n   operands[5] = operand_subword (operands[1], 0, 0, <MODE>mode);\n })\n \n+; This is the vector equivalent to the TImode splitter in s390.md.  It\n+; is required if both target GPRs occur in the source address operand.\n+\n+; For non-s_operands at least one of the target GPRs does not conflict\n+; with the address operand and one of the splitters above will take\n+; over.\n+(define_split\n+  [(set (match_operand:V_128 0 \"register_operand\" \"\")\n+        (match_operand:V_128 1 \"memory_operand\" \"\"))]\n+  \"TARGET_ZARCH && reload_completed\n+   && !VECTOR_REG_P (operands[0])\n+   && !s_operand (operands[1], VOIDmode)\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  rtx addr = operand_subword (operands[0], 1, 0, <MODE>mode);\n+  addr = gen_lowpart (Pmode, addr);\n+  s390_load_address (addr, XEXP (operands[1], 0));\n+  operands[1] = replace_equiv_address (operands[1], addr);\n+})\n \n ; Moves for smaller vector modes.\n "}, {"sha": "d3a3943b59fc3565876fcd9bc9539c3fcda9c269", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr80464.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854dbb3cb1b51ccc03ea027c49005aa423d74b96/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr80464.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854dbb3cb1b51ccc03ea027c49005aa423d74b96/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr80464.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr80464.f90?ref=854dbb3cb1b51ccc03ea027c49005aa423d74b96", "patch": "@@ -0,0 +1,39 @@\n+subroutine bla(a,bar,lb,ne,nt,v,b)\n+  character*8 lb\n+  integer bar(20),foo(8,5)\n+  real*8 a(3,*),x(3,8),v(0:3,*)\n+  if(lb(4:4).eq.'3') then\n+     n=8\n+  elseif(lb(4:5).eq.'10') then\n+     n=10\n+     ns=6\n+     m=4\n+  endif\n+  call blub(id)\n+  do\n+     if(id.eq.0) exit\n+     if(lb(4:4).eq.'6') then\n+        m=1\n+     endif\n+     if((n.eq.20).or.(n.eq.8)) then\n+        if(b.eq.0) then\n+           do i=1,ns\n+              do j=1,3\n+                 x(j,i)=a(j,bar(foo(i,ig)))\n+              enddo\n+           enddo\n+        else\n+           do i=1,ns\n+              do j=1,3\n+                 x(j,i)=a(j,bar(foo(i,ig)))+v(j,bar(foo(i,ig)))\n+              enddo\n+           enddo\n+        endif\n+     endif\n+     do i=1,m\n+        if(lb(4:5).eq.'1E') then\n+           call blab(x)\n+        endif\n+     enddo\n+  enddo\n+end subroutine bla"}]}