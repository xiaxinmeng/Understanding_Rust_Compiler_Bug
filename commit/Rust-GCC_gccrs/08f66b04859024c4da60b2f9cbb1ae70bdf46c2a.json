{"sha": "08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmNjZiMDQ4NTkwMjRjNGRhNjBiMmY5Y2JiMWFlNzBiZGY0NmMyYQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-20T10:52:06Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-20T10:52:06Z"}, "message": "[multiple changes]\n\n2001-07-20  David Billinghurst <David.Billinghurst@riotinto.org>\n\n\t* g77.f-torture/compile/pr3743.f:  New test\n\n2001-07-20  David Billinghurst <David.Billinghurst@riotinto.com>\n\n\t* g77.f-torture/execute/f90-intrinsic-bit.f: New test\n\nFrom-SVN: r44192", "tree": {"sha": "4cf88e05720a8d2cc95b851819e62eae4d2959ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cf88e05720a8d2cc95b851819e62eae4d2959ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/comments", "author": null, "committer": null, "parents": [{"sha": "e8919ea4256496285cabe51686c76c5d6a161b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8919ea4256496285cabe51686c76c5d6a161b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8919ea4256496285cabe51686c76c5d6a161b03"}], "stats": {"total": 482, "additions": 482, "deletions": 0}, "files": [{"sha": "407d87513ea5df23f281a987cf0e5bd90637a6b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "patch": "@@ -1,3 +1,11 @@\n+2001-07-20  David Billinghurst <David.Billinghurst@riotinto.org>\n+\n+\t* g77.f-torture/compile/pr3743.f:  New test\n+\n+2001-07-20  David Billinghurst <David.Billinghurst@riotinto.com>\n+\n+\t* g77.f-torture/execute/f90-intrinsic-bit.f: New test\n+\n 2001-07-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* g++.old-deja/g++.pt/static3.C: Removed alpha*-*-osf* XFAIL."}, {"sha": "ac6f75cfa4f4ffdd222d8011f26b51e70c561b4e", "filename": "gcc/testsuite/g77.f-torture/compile/pr3743.f", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fpr3743.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fpr3743.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fpr3743.f?ref=08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "patch": "@@ -0,0 +1,16 @@\n+        program pr3743\n+c On mips-sgi-irix6.5 get\n+c\n+c         i3 = ISHFT(i,BIT_SIZE(i))\n+c              ^\n+c Reference to intrinsic `ISHFT' at (^) invalid -- \n+c one or more arguments have incorrect type\n+c\n+c     David Billinghurst <David.Billinghurst@riotinto.com>\n+c\n+      integer   i, i2, i3\n+      i  = 3\n+      i2 = BIT_SIZE(i)\n+      i3 = ISHFT(i,i2)\n+      i3 = ISHFT(i,BIT_SIZE(i))\n+      end"}, {"sha": "a5f876e14bae71c0b31f77e6a6fdaa3709af5031", "filename": "gcc/testsuite/g77.f-torture/execute/f90-intrinsic-bit.f", "status": "added", "additions": 458, "deletions": 0, "changes": 458, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ff90-intrinsic-bit.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f66b04859024c4da60b2f9cbb1ae70bdf46c2a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ff90-intrinsic-bit.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ff90-intrinsic-bit.f?ref=08f66b04859024c4da60b2f9cbb1ae70bdf46c2a", "patch": "@@ -0,0 +1,458 @@\n+c  f90-intrinsic-bit.f\n+c\n+c Test Fortran 90 \n+c  * intrinsic bit manipulation functions - Section 13.10.10\n+c  * bitcopy subroutine - Section 13.9.3 \n+c David Billinghurst <David.Billinghurst@riotinto.com>\n+c\n+c Notes: \n+c  * g77 only supports scalar arguments\n+c  * third argument of ISHFTC is not optional in g77\n+\n+      logical fail\n+      integer   i, i2, ia, i3\n+      integer*2 j, j2, j3, ja\n+      integer*1 k, k2, k3, ka\n+      integer*8 m, m2, m3, ma\n+\n+      common /flags/ fail\n+      fail = .false.\n+\n+c     BIT_SIZE - Section 13.13.16\n+c     Determine BIT_SIZE by counting the bits \n+      ia = 0\n+      i = 0\n+      i = not(i)\n+      do while ( (i.ne.0) .and. (ia.lt.127) ) \n+         ia = ia + 1\n+         i = ishft(i,-1)\n+      end do\n+      call c_i(BIT_SIZE(i),ia,'BIT_SIZE(integer)')\n+      ja = 0\n+      j = 0\n+      j = not(j)\n+      do while  ( (j.ne.0) .and. (ja.lt.127) ) \n+         ja = ja + 1\n+         j = ishft(j,-1)\n+      end do\n+      call c_i2(BIT_SIZE(j),ja,'BIT_SIZE(integer*2)')\n+      ka = 0\n+      k = 0\n+      k = not(k)\n+      do while ( (k.ne.0) .and. (ka.lt.127) )\n+         ka = ka + 1\n+         k = ishft(k,-1)\n+      end do\n+      call c_i1(BIT_SIZE(k),ka,'BIT_SIZE(integer*1)')\n+      ma = 0\n+      m = 0\n+      m = not(m)\n+      do while ( (m.ne.0) .and. (ma.lt.127) )\n+         ma = ma + 1\n+         m = ishft(m,-1)\n+      end do\n+      call c_i8(BIT_SIZE(m),ma,'BIT_SIZE(integer*8)')\n+\n+c     BTEST  - Section 13.13.17\n+      j  = 7\n+      j2 = 3\n+      k  = 7\n+      k2 = 3\n+      m  = 7\n+      m2 = 3\n+      call c_l(BTEST(7,3),.true.,'BTEST(integer,integer)')\n+      call c_l(BTEST(7,j2),.true.,'BTEST(integer,integer*2)')\n+      call c_l(BTEST(7,k2),.true.,'BTEST(integer,integer*1)')\n+      call c_l(BTEST(7,m2),.true.,'BTEST(integer,integer*8)')\n+      call c_l(BTEST(j,3),.true.,'BTEST(integer*2,integer)')\n+      call c_l(BTEST(j,j2),.true.,'BTEST(integer*2,integer*2)')\n+      call c_l(BTEST(j,k2),.true.,'BTEST(integer*2,integer*1)')\n+      call c_l(BTEST(j,m2),.true.,'BTEST(integer*2,integer*8)')\n+      call c_l(BTEST(k,3),.true.,'BTEST(integer*1,integer)')\n+      call c_l(BTEST(k,j2),.true.,'BTEST(integer*1,integer*2)')\n+      call c_l(BTEST(k,k2),.true.,'BTEST(integer*1,integer*1)')\n+      call c_l(BTEST(k,m2),.true.,'BTEST(integer*1,integer*8)')\n+      call c_l(BTEST(m,3),.true.,'BTEST(integer*8,integer)')\n+      call c_l(BTEST(m,j2),.true.,'BTEST(integer*8,integer*2)')\n+      call c_l(BTEST(m,k2),.true.,'BTEST(integer*8,integer*1)')\n+      call c_l(BTEST(m,m2),.true.,'BTEST(integer*8,integer*8)')\n+ \n+c     IAND   - Section 13.13.40\n+      j  = 3\n+      j2 = 1\n+      ja = 1\n+      k  = 3\n+      k2 = 1\n+      ka = 1\n+      m  = 3\n+      m2 = 1\n+      ma = 1\n+      call c_i(IAND(3,1),1,'IAND(integer,integer)')\n+      call c_i2(IAND(j,j2),ja,'IAND(integer*2,integer*2)')\n+      call c_i1(IAND(k,k2),ka,'IAND(integer*1,integer*1)')\n+      call c_i8(IAND(m,m2),ma,'IAND(integer*8,integer*8)')\n+\n+\n+c     IBCLR  - Section 13.13.41\n+      j  = 14\n+      j2 = 1\n+      ja = 12\n+      k  = 14\n+      k2 = 1\n+      ka = 12\n+      m  = 14\n+      m2 = 1\n+      ma = 12\n+      call c_i(IBCLR(14,1),12,'IBCLR(integer,integer)')\n+      call c_i(IBCLR(14,j2),12,'IBCLR(integer,integer*2)')\n+      call c_i(IBCLR(14,k2),12,'IBCLR(integer,integer*1)')\n+      call c_i(IBCLR(14,m2),12,'IBCLR(integer,integer*8)')\n+      call c_i2(IBCLR(j,1),ja,'IBCLR(integer*2,integer)')\n+      call c_i2(IBCLR(j,j2),ja,'IBCLR(integer*2,integer*2)')\n+      call c_i2(IBCLR(j,k2),ja,'IBCLR(integer*2,integer*1)')\n+      call c_i2(IBCLR(j,m2),ja,'IBCLR(integer*2,integer*8)')\n+      call c_i1(IBCLR(k,1),ka,'IBCLR(integer*1,integer)')\n+      call c_i1(IBCLR(k,j2),ka,'IBCLR(integer*1,integer*2)')\n+      call c_i1(IBCLR(k,k2),ka,'IBCLR(integer*1,integer*1)')\n+      call c_i1(IBCLR(k,m2),ka,'IBCLR(integer*1,integer*8)')\n+      call c_i8(IBCLR(m,1),ma,'IBCLR(integer*8,integer)')\n+      call c_i8(IBCLR(m,j2),ma,'IBCLR(integer*8,integer*2)')\n+      call c_i8(IBCLR(m,k2),ma,'IBCLR(integer*8,integer*1)')\n+      call c_i8(IBCLR(m,m2),ma,'IBCLR(integer*8,integer*8)')\n+\n+c     IBSET  - Section 13.13.43\n+      j  = 12\n+      j2 = 1\n+      ja = 14\n+      k  = 12\n+      k2 = 1\n+      ka = 14\n+      m  = 12\n+      m2 = 1\n+      ma = 14\n+      call c_i(IBSET(12,1),14,'IBSET(integer,integer)')\n+      call c_i(IBSET(12,j2),14,'IBSET(integer,integer*2)')\n+      call c_i(IBSET(12,k2),14,'IBSET(integer,integer*1)')\n+      call c_i(IBSET(12,m2),14,'IBSET(integer,integer*8)')\n+      call c_i2(IBSET(j,1),ja,'IBSET(integer*2,integer)')\n+      call c_i2(IBSET(j,j2),ja,'IBSET(integer*2,integer*2)')\n+      call c_i2(IBSET(j,k2),ja,'IBSET(integer*2,integer*1)')\n+      call c_i2(IBSET(j,m2),ja,'IBSET(integer*2,integer*8)')\n+      call c_i1(IBSET(k,1),ka,'IBSET(integer*1,integer)')\n+      call c_i1(IBSET(k,j2),ka,'IBSET(integer*1,integer*2)')\n+      call c_i1(IBSET(k,k2),ka,'IBSET(integer*1,integer*1)')\n+      call c_i1(IBSET(k,m2),ka,'IBSET(integer*1,integer*8)')\n+      call c_i8(IBSET(m,1),ma,'IBSET(integer*8,integer)')\n+      call c_i8(IBSET(m,j2),ma,'IBSET(integer*8,integer*2)')\n+      call c_i8(IBSET(m,k2),ma,'IBSET(integer*8,integer*1)')\n+      call c_i8(IBSET(m,m2),ma,'IBSET(integer*8,integer*8)')\n+\n+c     IEOR   - Section 13.13.45\n+      j  = 3\n+      j2 = 1\n+      ja = 2\n+      k  = 3\n+      k2 = 1\n+      ka = 2\n+      m  = 3\n+      m2 = 1\n+      ma = 2\n+      call c_i(IEOR(3,1),2,'IEOR(integer,integer)')\n+      call c_i2(IEOR(j,j2),ja,'IEOR(integer*2,integer*2)')\n+      call c_i1(IEOR(k,k2),ka,'IEOR(integer*1,integer*1)')\n+      call c_i8(IEOR(m,m2),ma,'IEOR(integer*8,integer*8)')\n+\n+c     ISHFT  - Section 13.13.49\n+      i  = 3\n+      i2 = 1\n+      i3 = 0\n+      ia = 6\n+      j  = 3\n+      j2 = 1\n+      j3 = 0\n+      ja = 6\n+      k  = 3\n+      k2 = 1\n+      k3 = 0\n+      ka = 6\n+      m  = 3\n+      m2 = 1\n+      m3 = 0\n+      ma = 6\n+      call c_i(ISHFT(i,i2),ia,'ISHFT(integer,integer)')\n+      call c_i(ISHFT(i,BIT_SIZE(i)),i3,'ISHFT(integer,integer) 2')\n+      call c_i(ISHFT(i,-BIT_SIZE(i)),i3,'ISHFT(integer,integer) 3')\n+      call c_i(ISHFT(i,0),i,'ISHFT(integer,integer) 4')\n+      call c_i2(ISHFT(j,j2),ja,'ISHFT(integer*2,integer*2)')\n+      call c_i2(ISHFT(j,BIT_SIZE(j)),j3,\n+     $     'ISHFT(integer*2,integer*2) 2')\n+      call c_i2(ISHFT(j,-BIT_SIZE(j)),j3,\n+     $     'ISHFT(integer*2,integer*2) 3')\n+      call c_i2(ISHFT(j,0),j,'ISHFT(integer*2,integer*2) 4')\n+      call c_i1(ISHFT(k,k2),ka,'ISHFT(integer*1,integer*1)')\n+      call c_i1(ISHFT(k,BIT_SIZE(k)),k3,\n+     $     'ISHFT(integer*1,integer*1) 2')\n+      call c_i1(ISHFT(k,-BIT_SIZE(k)),k3,\n+     $     'ISHFT(integer*1,integer*1) 3')\n+      call c_i1(ISHFT(k,0),k,'ISHFT(integer*1,integer*1) 4')\n+      call c_i8(ISHFT(m,m2),ma,'ISHFT(integer*8,integer*8)')\n+      call c_i8(ISHFT(m,BIT_SIZE(m)),m3,\n+     $     'ISHFT(integer*8,integer*8) 2')\n+      call c_i8(ISHFT(m,-BIT_SIZE(m)),m3,\n+     $     'ISHFT(integer*8,integer*8) 3')\n+      call c_i8(ISHFT(m,0),m,'ISHFT(integer*8,integer*8) 4')\n+\n+c     ISHFTC - Section 13.13.50\n+c     The third argument is not optional in g77\n+      i  = 3\n+      i2 = 2\n+      i3 = 3\n+      ia = 5\n+      j  = 3\n+      j2 = 2\n+      j3 = 3\n+      ja = 5\n+      k  = 3\n+      k2 = 2\n+      k3 = 3\n+      ka = 5\n+      m2 = 2\n+      m3 = 3\n+      ma = 5\n+c     test all the combinations of arguments\n+      call c_i(ISHFTC(i,i2,i3),5,'ISHFTC(integer,integer,integer)')\n+      call c_i(ISHFTC(i,i2,j3),5,'ISHFTC(integer,integer,integer*2)')\n+      call c_i(ISHFTC(i,i2,k3),5,'ISHFTC(integer,integer,integer*1)')\n+      call c_i(ISHFTC(i,i2,m3),5,'ISHFTC(integer,integer,integer*8)')\n+      call c_i(ISHFTC(i,j2,i3),5,'ISHFTC(integer,integer*2,integer)')\n+      call c_i(ISHFTC(i,j2,j3),5,'ISHFTC(integer,integer*2,integer*2)')\n+      call c_i(ISHFTC(i,j2,k3),5,'ISHFTC(integer,integer*2,integer*1)')\n+      call c_i(ISHFTC(i,j2,m3),5,'ISHFTC(integer,integer*2,integer*8)')\n+      call c_i(ISHFTC(i,k2,i3),5,'ISHFTC(integer,integer*1,integer)')\n+      call c_i(ISHFTC(i,k2,j3),5,'ISHFTC(integer,integer*1,integer*2)')\n+      call c_i(ISHFTC(i,k2,k3),5,'ISHFTC(integer,integer*1,integer*1)')\n+      call c_i(ISHFTC(i,k2,m3),5,'ISHFTC(integer,integer*1,integer*8)')\n+      call c_i(ISHFTC(i,m2,i3),5,'ISHFTC(integer,integer*8,integer)')\n+      call c_i(ISHFTC(i,m2,j3),5,'ISHFTC(integer,integer*8,integer*2)')\n+      call c_i(ISHFTC(i,m2,k3),5,'ISHFTC(integer,integer*8,integer*1)')\n+      call c_i(ISHFTC(i,m2,m3),5,'ISHFTC(integer,integer*8,integer*8)')\n+\n+      call c_i2(ISHFTC(j,i2,i3),ja,'ISHFTC(integer*2,integer,integer)')\n+      call c_i2(ISHFTC(j,i2,j3),ja,\n+     $     'ISHFTC(integer*2,integer,integer*2)')\n+      call c_i2(ISHFTC(j,i2,k3),ja,\n+     $     'ISHFTC(integer*2,integer,integer*1)')\n+      call c_i2(ISHFTC(j,i2,m3),ja,\n+     $     'ISHFTC(integer*2,integer,integer*8)')\n+      call c_i2(ISHFTC(j,j2,i3),ja,\n+     $     'ISHFTC(integer*2,integer*2,integer)')\n+      call c_i2(ISHFTC(j,j2,j3),ja,\n+     $     'ISHFTC(integer*2,integer*2,integer*2)')\n+      call c_i2(ISHFTC(j,j2,k3),ja,\n+     $     'ISHFTC(integer*2,integer*2,integer*1)')\n+      call c_i2(ISHFTC(j,j2,m3),ja,\n+     $     'ISHFTC(integer*2,integer*2,integer*8)')\n+      call c_i2(ISHFTC(j,k2,i3),ja,\n+     $     'ISHFTC(integer*2,integer*1,integer)')\n+      call c_i2(ISHFTC(j,k2,j3),ja,\n+     $     'ISHFTC(integer*2,integer*1,integer*2)')\n+      call c_i2(ISHFTC(j,k2,k3),ja,\n+     $     'ISHFTC(integer*2,integer*1,integer*1)')\n+      call c_i2(ISHFTC(j,k2,m3),ja,\n+     $     'ISHFTC(integer*2,integer*1,integer*8)')\n+      call c_i2(ISHFTC(j,m2,i3),ja,\n+     $     'ISHFTC(integer*2,integer*8,integer)')\n+      call c_i2(ISHFTC(j,m2,j3),ja,\n+     $     'ISHFTC(integer*2,integer*8,integer*2)')\n+      call c_i2(ISHFTC(j,m2,k3),ja,\n+     $     'ISHFTC(integer*2,integer*8,integer*1)')\n+      call c_i2(ISHFTC(j,m2,m3),ja,\n+     $     'ISHFTC(integer*2,integer*8,integer*8)')\n+\n+      call c_i1(ISHFTC(k,i2,i3),ka,'ISHFTC(integer*1,integer,integer)')\n+      call c_i1(ISHFTC(k,i2,j3),ka,\n+     $     'ISHFTC(integer*1,integer,integer*2)')\n+      call c_i1(ISHFTC(k,i2,k3),ka,\n+     $     'ISHFTC(integer*1,integer,integer*1)')\n+      call c_i1(ISHFTC(k,i2,m3),ka,\n+     $     'ISHFTC(integer*1,integer,integer*8)')\n+      call c_i1(ISHFTC(k,j2,i3),ka,\n+     $     'ISHFTC(integer*1,integer*2,integer)')\n+      call c_i1(ISHFTC(k,j2,j3),ka,\n+     $     'ISHFTC(integer*1,integer*2,integer*2)')\n+      call c_i1(ISHFTC(k,j2,k3),ka,\n+     $     'ISHFTC(integer*1,integer*2,integer*1)')\n+      call c_i1(ISHFTC(k,j2,m3),ka,\n+     $     'ISHFTC(integer*1,integer*2,integer*8)')\n+      call c_i1(ISHFTC(k,k2,i3),ka,\n+     $     'ISHFTC(integer*1,integer*1,integer)')\n+      call c_i1(ISHFTC(k,k2,j3),ka,\n+     $     'ISHFTC(integer*1,integer*1,integer*2)')\n+      call c_i1(ISHFTC(k,k2,k3),ka,\n+     $     'ISHFTC(integer*1,integer*1,integer*1)')\n+      call c_i1(ISHFTC(k,k2,m3),ka,\n+     $     'ISHFTC(integer*1,integer*1,integer*8)')\n+      call c_i1(ISHFTC(k,m2,i3),ka,\n+     $     'ISHFTC(integer*1,integer*8,integer)')\n+      call c_i1(ISHFTC(k,m2,j3),ka,\n+     $     'ISHFTC(integer*1,integer*8,integer*2)')\n+      call c_i1(ISHFTC(k,m2,k3),ka,\n+     $     'ISHFTC(integer*1,integer*8,integer*1)')\n+      call c_i1(ISHFTC(k,m2,m3),ka,\n+     $     'ISHFTC(integer*1,integer*8,integer*8)')\n+\n+      call c_i8(ISHFTC(m,i2,i3),ma,'ISHFTC(integer*8,integer,integer)')\n+      call c_i8(ISHFTC(m,i2,j3),ma,\n+     $     'ISHFTC(integer*8,integer,integer*2)')\n+      call c_i8(ISHFTC(m,i2,k3),ma,\n+     $     'ISHFTC(integer*8,integer,integer*1)')\n+      call c_i8(ISHFTC(m,i2,m3),ma,\n+     $     'ISHFTC(integer*8,integer,integer*8)')\n+      call c_i8(ISHFTC(m,j2,i3),ma,\n+     $     'ISHFTC(integer*8,integer*2,integer)')\n+      call c_i8(ISHFTC(m,j2,j3),ma,\n+     $     'ISHFTC(integer*8,integer*2,integer*2)')\n+      call c_i8(ISHFTC(m,j2,k3),ma,\n+     $     'ISHFTC(integer*8,integer*2,integer*1)')\n+      call c_i8(ISHFTC(m,j2,m3),ma,\n+     $     'ISHFTC(integer*8,integer*2,integer*8)')\n+      call c_i8(ISHFTC(m,k2,i3),ma,\n+     $     'ISHFTC(integer*8,integer*1,integer)')\n+      call c_i8(ISHFTC(m,k2,j3),ma,\n+     $     'ISHFTC(integer*1,integer*8,integer*2)')\n+      call c_i8(ISHFTC(m,k2,k3),ma,\n+     $     'ISHFTC(integer*1,integer*8,integer*1)')\n+      call c_i8(ISHFTC(m,k2,m3),ma,\n+     $     'ISHFTC(integer*1,integer*8,integer*8)')\n+      call c_i8(ISHFTC(m,m2,i3),ma,\n+     $     'ISHFTC(integer*8,integer*8,integer)')\n+      call c_i8(ISHFTC(m,m2,j3),ma,\n+     $     'ISHFTC(integer*8,integer*8,integer*2)')\n+      call c_i8(ISHFTC(m,m2,k3),ma,\n+     $     'ISHFTC(integer*8,integer*8,integer*1)')\n+      call c_i8(ISHFTC(m,m2,m3),ma,\n+     $     'ISHFTC(integer*8,integer*8,integer*8)')\n+\n+c     test the corner cases\n+      call c_i(ISHFTC(i,BIT_SIZE(i),BIT_SIZE(i)),i,\n+     $     'ISHFTC(i,BIT_SIZE(i),BIT_SIZE(i)) i = integer')\n+      call c_i(ISHFTC(i,0,BIT_SIZE(i)),i,\n+     $     'ISHFTC(i,0,BIT_SIZE(i)) i = integer')\n+      call c_i(ISHFTC(i,-BIT_SIZE(i),BIT_SIZE(i)),i,\n+     $     'ISHFTC(i,-BIT_SIZE(i),BIT_SIZE(i)) i = integer')\n+      call c_i2(ISHFTC(j,BIT_SIZE(j),BIT_SIZE(j)),j,\n+     $     'ISHFTC(j,BIT_SIZE(j),BIT_SIZE(j)) j = integer*2')\n+      call c_i2(ISHFTC(j,0,BIT_SIZE(j)),j,\n+     $     'ISHFTC(j,0,BIT_SIZE(j)) j = integer*2')\n+      call c_i2(ISHFTC(j,-BIT_SIZE(j),BIT_SIZE(j)),j,\n+     $     'ISHFTC(j,-BIT_SIZE(j),BIT_SIZE(j)) j = integer*2')\n+      call c_i1(ISHFTC(k,BIT_SIZE(k),BIT_SIZE(k)),k,\n+     $     'ISHFTC(k,BIT_SIZE(k),BIT_SIZE(k)) k = integer*1')\n+      call c_i1(ISHFTC(k,0,BIT_SIZE(k)),k,\n+     $     'ISHFTC(k,0,BIT_SIZE(k)) k = integer*1')\n+      call c_i1(ISHFTC(k,-BIT_SIZE(k),BIT_SIZE(k)),k,\n+     $     'ISHFTC(k,-BIT_SIZE(k),BIT_SIZE(k)) k = integer*1')\n+      call c_i8(ISHFTC(m,BIT_SIZE(m),BIT_SIZE(m)),m,\n+     $     'ISHFTC(m,BIT_SIZE(m),BIT_SIZE(m)) m = integer*8')\n+      call c_i8(ISHFTC(m,0,BIT_SIZE(m)),m,\n+     $     'ISHFTC(m,0,BIT_SIZE(m)) m = integer*8')\n+      call c_i8(ISHFTC(m,-BIT_SIZE(m),BIT_SIZE(m)),m,\n+     $     'ISHFTC(m,-BIT_SIZE(m),BIT_SIZE(m)) m = integer*8')\n+\n+c     MVBITS - Section 13.13.74\n+      i = 6\n+      call MVBITS(7,2,2,i,0)\n+      call c_i(i,5,'MVBITS 1')\n+      j = 6\n+      j2 = 7\n+      ja = 5\n+      call MVBITS(j2,2,2,j,0)\n+      call c_i2(j,ja,'MVBITS 2')\n+      k = 6\n+      k2 = 7\n+      ka = 5\n+      call MVBITS(k2,2,2,k,0)\n+      call c_i1(k,ka,'MVBITS 3')\n+      m = 6\n+      m2 = 7\n+      ma = 5\n+      call MVBITS(m2,2,2,m,0)\n+      call c_i8(m,ma,'MVBITS 4')\n+\n+c     NOT    - Section 13.13.77\n+c     Rather than assume integer sizes, mask off high bits\n+      j  = 21\n+      j2 = 31\n+      ja = 10\n+      k  = 21\n+      k2 = 31\n+      ka = 10\n+      m  = 21\n+      m2 = 31\n+      ma = 10\n+      call c_i(IAND(NOT(21),31),10,'NOT(integer)')\n+      call c_i2(IAND(NOT(j),j2),ja,'NOT(integer*2)')\n+      call c_i1(IAND(NOT(k),k2),ka,'NOT(integer*1)')\n+      call c_i8(IAND(NOT(m),m2),ma,'NOT(integer*8)')\n+\n+      if ( fail ) call abort()\n+      end\n+\n+      subroutine failure(label)\n+c     Report failure and set flag\n+      character*(*) label\n+      logical fail\n+      common /flags/ fail\n+      write(6,'(a,a,a)') 'Test ',label,' FAILED'\n+      fail = .true.\n+      end\n+\n+      subroutine c_l(i,j,label)\n+c     Check if LOGICAL i equals j, and fail otherwise\n+      logical i,j\n+      character*(*) label\n+      if ( i .eqv. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i(i,j,label)\n+c     Check if INTEGER i equals j, and fail otherwise\n+      integer i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i2(i,j,label)\n+c     Check if INTEGER*2 i equals j, and fail otherwise\n+      integer*2 i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i1(i,j,label)\n+c     Check if INTEGER*1 i equals j, and fail otherwise\n+      integer*1 i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i8(i,j,label)\n+c     Check if INTEGER*8 i equals j, and fail otherwise\n+      integer*8 i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end"}]}