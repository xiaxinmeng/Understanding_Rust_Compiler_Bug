{"sha": "0fe04f5c3185fa3a3beb39fb811df019ed41569c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlMDRmNWMzMTg1ZmEzYTNiZWIzOWZiODExZGYwMTllZDQxNTY5Yw==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2013-10-09T12:09:11Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-10-09T12:09:11Z"}, "message": "[AArch64] Implement vclz ADVSimd intrinsic.\n\nFrom-SVN: r203314", "tree": {"sha": "7f91f8865c551d6d0675a53c84404bf1ae0e084b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f91f8865c551d6d0675a53c84404bf1ae0e084b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe04f5c3185fa3a3beb39fb811df019ed41569c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe04f5c3185fa3a3beb39fb811df019ed41569c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe04f5c3185fa3a3beb39fb811df019ed41569c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe04f5c3185fa3a3beb39fb811df019ed41569c/comments", "author": null, "committer": null, "parents": [{"sha": "bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed9bae4f00a0a385e68fd81405320d1f3ad0a92"}], "stats": {"total": 798, "additions": 664, "deletions": 134}, "files": [{"sha": "d04904c440825c0219458be31e77e4f63b9fbbd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -1,3 +1,13 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vclz_s8, vclz_s16, vclz_s32)\n+\t(vclzq_s8, vclzq_s16, vclzq_s32, vclz_u8, vclz_u16, vclz_u32)\n+\t(vclzq_u8, vclzq_u16, vclzq_u32): Replace ASM with C.\n+\t* config/aarch64/aarch64.h\n+\t(CLZ_DEFINED_VALUE_AT_ZERO): Macro fixed for clz.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(VAR1 (UNOP, clz, 0, v4si)): Replaced with iterator.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/arm_neon.h (vadd_f64, vsub_f64): Implementation added."}, {"sha": "c18b150a1f5f2131deb54e3f66f93330c43bcefd", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -45,7 +45,7 @@\n   BUILTIN_VDQF (UNOP, sqrt, 2)\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)\n-  VAR1 (UNOP, clz, 2, v4si)\n+  BUILTIN_VDQ_BHSI (UNOP, clz, 2)\n \n   BUILTIN_VALL (GETLANE, get_lane, 0)\n   VAR1 (GETLANE, get_lane, 0, di)"}, {"sha": "7a80e96385f935e032bc0421d1aeea52de7bcd1d", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -739,7 +739,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    : reverse_condition (CODE))\n \n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n-  ((VALUE) = ((MODE) == SImode ? 32 : 64), 2)\n+  ((VALUE) = GET_MODE_UNIT_BITSIZE (MODE))\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n   ((VALUE) = ((MODE) == SImode ? 32 : 64), 2)\n "}, {"sha": "482d7d03ed4995d46bef14a0c2c42903aafc6986", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 74, "deletions": 132, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -5158,138 +5158,6 @@ vclsq_s32 (int32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vclz_s8 (int8x8_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"clz %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vclz_s16 (int16x4_t a)\n-{\n-  int16x4_t result;\n-  __asm__ (\"clz %0.4h,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vclz_s32 (int32x2_t a)\n-{\n-  int32x2_t result;\n-  __asm__ (\"clz %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vclz_u8 (uint8x8_t a)\n-{\n-  uint8x8_t result;\n-  __asm__ (\"clz %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vclz_u16 (uint16x4_t a)\n-{\n-  uint16x4_t result;\n-  __asm__ (\"clz %0.4h,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vclz_u32 (uint32x2_t a)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"clz %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vclzq_s8 (int8x16_t a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"clz %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vclzq_s16 (int16x8_t a)\n-{\n-  int16x8_t result;\n-  __asm__ (\"clz %0.8h,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vclzq_s32 (int32x4_t a)\n-{\n-  int32x4_t result;\n-  __asm__ (\"clz %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vclzq_u8 (uint8x16_t a)\n-{\n-  uint8x16_t result;\n-  __asm__ (\"clz %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n-vclzq_u16 (uint16x8_t a)\n-{\n-  uint16x8_t result;\n-  __asm__ (\"clz %0.8h,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vclzq_u32 (uint32x4_t a)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"clz %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vcnt_p8 (poly8x8_t a)\n {\n@@ -17934,6 +17802,80 @@ vcltzd_f64 (float64_t __a)\n   return __a < 0.0 ? -1ll : 0ll;\n }\n \n+/* vclz.  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vclz_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_clzv8qi (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vclz_s16 (int16x4_t __a)\n+{\n+  return __builtin_aarch64_clzv4hi (__a);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vclz_s32 (int32x2_t __a)\n+{\n+  return __builtin_aarch64_clzv2si (__a);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vclz_u8 (uint8x8_t __a)\n+{\n+  return (uint8x8_t)__builtin_aarch64_clzv8qi ((int8x8_t)__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vclz_u16 (uint16x4_t __a)\n+{\n+  return (uint16x4_t)__builtin_aarch64_clzv4hi ((int16x4_t)__a);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vclz_u32 (uint32x2_t __a)\n+{\n+  return (uint32x2_t)__builtin_aarch64_clzv2si ((int32x2_t)__a);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vclzq_s8 (int8x16_t __a)\n+{\n+  return __builtin_aarch64_clzv16qi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vclzq_s16 (int16x8_t __a)\n+{\n+  return __builtin_aarch64_clzv8hi (__a);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vclzq_s32 (int32x4_t __a)\n+{\n+  return __builtin_aarch64_clzv4si (__a);\n+}\n+\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vclzq_u8 (uint8x16_t __a)\n+{\n+  return (uint8x16_t)__builtin_aarch64_clzv16qi ((int8x16_t)__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vclzq_u16 (uint16x8_t __a)\n+{\n+  return (uint16x8_t)__builtin_aarch64_clzv8hi ((int16x8_t)__a);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vclzq_u32 (uint32x4_t __a)\n+{\n+  return (uint32x4_t)__builtin_aarch64_clzv4si ((int32x4_t)__a);\n+}\n+\n /* vcvt (double -> float).  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}, {"sha": "0ece8c0651077204084ff7513d5236d45fd03564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -1,3 +1,7 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vclz.c: New testcase.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vadd_f64.c: New testcase."}, {"sha": "006f80d77b5ad9a67e68fb48fc0b5e26e6b2fa5e", "filename": "gcc/testsuite/gcc.target/aarch64/vclz.c", "status": "added", "additions": 574, "deletions": 0, "changes": 574, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe04f5c3185fa3a3beb39fb811df019ed41569c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c?ref=0fe04f5c3185fa3a3beb39fb811df019ed41569c", "patch": "@@ -0,0 +1,574 @@\n+/* Test vclz works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O3 -Wno-div-by-zero --save-temps\" } */\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+/* Tests in binary should look like:\n+   0\n+   1\n+   10\n+   101\n+   1010\n+   10101\n+   etc.  */\n+\n+#define TEST0 0\n+#define TEST1 0x1\n+#define TEST2 0x2\n+#define TEST3 0x5\n+#define TEST4 0xa\n+#define TEST5 0x15\n+#define TEST6 0x2a\n+#define TEST7 0x55\n+#define TEST8 0xaa\n+#define TEST9 0x155\n+#define TEST10 0x2aa\n+#define TEST11 0x555\n+#define TEST12 0xaaa\n+#define TEST13 0x1555\n+#define TEST14 0x2aaa\n+#define TEST15 0x5555\n+#define TEST16 0xaaaa\n+#define TEST17 0x15555\n+#define TEST18 0x2aaaa\n+#define TEST19 0x55555\n+#define TEST20 0xaaaaa\n+#define TEST21 0x155555\n+#define TEST22 0x2aaaaa\n+#define TEST23 0x555555\n+#define TEST24 0xaaaaaa\n+#define TEST25 0x1555555\n+#define TEST26 0x2aaaaaa\n+#define TEST27 0x5555555\n+#define TEST28 0xaaaaaaa\n+#define TEST29 0x15555555\n+#define TEST30 0x2aaaaaaa\n+#define TEST31 0x55555555\n+#define TEST32 0xaaaaaaaa\n+\n+#define INHIB_OPTIMIZATION asm volatile (\"\" : : : \"memory\")\n+\n+#define CONCAT(a, b) a##b\n+#define CONCAT1(a, b) CONCAT (a, b)\n+#define REG_INFEX64 _\n+#define REG_INFEX128 q_\n+#define SIGNED0 u\n+#define SIGNED1 s\n+#define SIGNED(x) SIGNED##x\n+#define REG_INFEX(reg_len) REG_INFEX##reg_len\n+#define POSTFIX(reg_len, data_len, is_signed) \\\n+  CONCAT1 (REG_INFEX (reg_len), CONCAT1 (SIGNED (is_signed), data_len))\n+#define DATA_TYPE(data_len) DATA_TYPE_##data_len\n+#define LOAD_INST(reg_len, data_len, is_signed) \\\n+  CONCAT1 (vld1, POSTFIX (reg_len, data_len, is_signed))\n+#define CLZ_INST(reg_len, data_len, is_signed) \\\n+  CONCAT1 (vclz, POSTFIX (reg_len, data_len, is_signed))\n+\n+#define RUN_TEST(test_set, answ_set, reg_len, data_len, is_signed, n)\t\\\n+  a = LOAD_INST (reg_len, data_len, is_signed) (test_set);\t\t\\\n+  b = LOAD_INST (reg_len, data_len, is_signed) (answ_set);\t        \\\n+  INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n+  a = CLZ_INST (reg_len, data_len, is_signed) (a);\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      INHIB_OPTIMIZATION;\t\t\t\t\t\t\\\n+      if (a [i] != b [i])\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          return 1;\t\t\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+    }\n+\n+int\n+test_vclz_s8 ()\n+{\n+  int i;\n+  int8x8_t a;\n+  int8x8_t b;\n+\n+  int8_t test_set0[8] = {\n+    TEST0, TEST1, TEST2, TEST3,\n+    TEST4, TEST5, TEST6, TEST7\n+  };\n+  int8_t test_set1[8] = {\n+    TEST8, TEST8, TEST8, TEST8,\n+    TEST8, TEST8, TEST8, TEST8\n+  };\n+  int8_t answ_set0[8] = {\n+    8, 7, 6, 5,\n+    4, 3, 2, 1\n+  };\n+  int8_t answ_set1[8] = {\n+    0, 0, 0, 0,\n+    0, 0, 0, 0\n+  };\n+  RUN_TEST (test_set0, answ_set0, 64, 8, 1, 8);\n+  RUN_TEST (test_set1, answ_set1, 64, 8, 1, 1);\n+\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 4 } } */\n+\n+int\n+test_vclz_s16 ()\n+{\n+  int i;\n+  int16x4_t a;\n+  int16x4_t b;\n+\n+  int16_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n+  int16_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n+  int16_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n+  int16_t test_set3[4] = { TEST12, TEST13, TEST14, TEST15 };\n+  int16_t test_set4[4] = { TEST16, TEST16, TEST16, TEST16 };\n+\n+  int16_t answ_set0[4] = { 16, 15, 14, 13 };\n+  int16_t answ_set1[4] = { 12, 11, 10, 9 };\n+  int16_t answ_set2[4] = { 8, 7, 6, 5 };\n+  int16_t answ_set3[4] = { 4, 3, 2, 1 };\n+  int16_t answ_set4[4] = { 0, 0, 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 64, 16, 1, 4);\n+  RUN_TEST (test_set1, answ_set1, 64, 16, 1, 4);\n+  RUN_TEST (test_set2, answ_set2, 64, 16, 1, 4);\n+  RUN_TEST (test_set3, answ_set3, 64, 16, 1, 4);\n+  RUN_TEST (test_set4, answ_set4, 64, 16, 1, 1);\n+\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 10} } */\n+\n+int\n+test_vclz_s32 ()\n+{\n+  int i;\n+  int32x2_t a;\n+  int32x2_t b;\n+\n+  int32_t test_set0[2] = { TEST0, TEST1 };\n+  int32_t test_set1[2] = { TEST2, TEST3 };\n+  int32_t test_set2[2] = { TEST4, TEST5 };\n+  int32_t test_set3[2] = { TEST6, TEST7 };\n+  int32_t test_set4[2] = { TEST8, TEST9 };\n+  int32_t test_set5[2] = { TEST10, TEST11 };\n+  int32_t test_set6[2] = { TEST12, TEST13 };\n+  int32_t test_set7[2] = { TEST14, TEST15 };\n+  int32_t test_set8[2] = { TEST16, TEST17 };\n+  int32_t test_set9[2] = { TEST18, TEST19 };\n+  int32_t test_set10[2] = { TEST20, TEST21 };\n+  int32_t test_set11[2] = { TEST22, TEST23 };\n+  int32_t test_set12[2] = { TEST24, TEST25 };\n+  int32_t test_set13[2] = { TEST26, TEST27 };\n+  int32_t test_set14[2] = { TEST28, TEST29 };\n+  int32_t test_set15[2] = { TEST30, TEST31 };\n+  int32_t test_set16[2] = { TEST32, TEST32 };\n+\n+  int32_t answ_set0[2] = { 32, 31 };\n+  int32_t answ_set1[2] = { 30, 29 };\n+  int32_t answ_set2[2] = { 28, 27 };\n+  int32_t answ_set3[2] = { 26, 25 };\n+  int32_t answ_set4[2] = { 24, 23 };\n+  int32_t answ_set5[2] = { 22, 21 };\n+  int32_t answ_set6[2] = { 20, 19 };\n+  int32_t answ_set7[2] = { 18, 17 };\n+  int32_t answ_set8[2] = { 16, 15 };\n+  int32_t answ_set9[2] = { 14, 13 };\n+  int32_t answ_set10[2] = { 12, 11 };\n+  int32_t answ_set11[2] = { 10, 9 };\n+  int32_t answ_set12[2] = { 8, 7 };\n+  int32_t answ_set13[2] = { 6, 5 };\n+  int32_t answ_set14[2] = { 4, 3 };\n+  int32_t answ_set15[2] = { 2, 1 };\n+  int32_t answ_set16[2] = { 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 64, 32, 1, 2);\n+  RUN_TEST (test_set1, answ_set1, 64, 32, 1, 2);\n+  RUN_TEST (test_set2, answ_set2, 64, 32, 1, 2);\n+  RUN_TEST (test_set3, answ_set3, 64, 32, 1, 2);\n+  RUN_TEST (test_set4, answ_set4, 64, 32, 1, 2);\n+  RUN_TEST (test_set5, answ_set5, 64, 32, 1, 2);\n+  RUN_TEST (test_set6, answ_set6, 64, 32, 1, 2);\n+  RUN_TEST (test_set7, answ_set7, 64, 32, 1, 2);\n+  RUN_TEST (test_set8, answ_set8, 64, 32, 1, 2);\n+  RUN_TEST (test_set9, answ_set9, 64, 32, 1, 2);\n+  RUN_TEST (test_set10, answ_set10, 64, 32, 1, 2);\n+  RUN_TEST (test_set11, answ_set11, 64, 32, 1, 2);\n+  RUN_TEST (test_set12, answ_set12, 64, 32, 1, 2);\n+  RUN_TEST (test_set13, answ_set13, 64, 32, 1, 2);\n+  RUN_TEST (test_set14, answ_set14, 64, 32, 1, 2);\n+  RUN_TEST (test_set15, answ_set15, 64, 32, 1, 2);\n+  RUN_TEST (test_set16, answ_set16, 64, 32, 1, 1);\n+\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 34 } } */\n+\n+int\n+test_vclzq_s8 ()\n+{\n+  int i;\n+  int8x16_t a;\n+  int8x16_t b;\n+\n+  int8_t test_set0[16] = {\n+    TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7,\n+    TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8\n+  };\n+  int8_t answ_set0[16] = {\n+    8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0\n+  };\n+  RUN_TEST (test_set0, answ_set0, 128, 8, 1, 9);\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 2 } } */\n+\n+int\n+test_vclzq_s16 ()\n+{\n+  int i;\n+  int16x8_t a;\n+  int16x8_t b;\n+\n+  int16_t test_set0[8] = {\n+    TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7\n+  };\n+  int16_t test_set1[8] = {\n+    TEST8, TEST9, TEST10, TEST11, TEST12, TEST13, TEST14, TEST15\n+  };\n+  int16_t test_set2[8] = {\n+    TEST16, TEST16, TEST16, TEST16, TEST16, TEST16, TEST16, TEST16\n+  };\n+\n+  int16_t answ_set0[8] = {\n+    16, 15, 14, 13, 12, 11, 10, 9\n+  };\n+  int16_t answ_set1[8] = {\n+    8, 7, 6, 5, 4, 3, 2, 1\n+  };\n+  int16_t answ_set2[8] = {\n+    0, 0, 0, 0, 0, 0, 0, 0\n+  };\n+  RUN_TEST (test_set0, answ_set0, 128, 16, 1, 8);\n+  RUN_TEST (test_set1, answ_set1, 128, 16, 1, 8);\n+  RUN_TEST (test_set2, answ_set2, 128, 16, 1, 1);\n+\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 6 } } */\n+\n+int\n+test_vclzq_s32 ()\n+{\n+  int i;\n+  int32x4_t a;\n+  int32x4_t b;\n+\n+  int32_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n+  int32_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n+  int32_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n+  int32_t test_set3[4] = { TEST12, TEST13, TEST14, TEST15 };\n+  int32_t test_set4[4] = { TEST16, TEST17, TEST18, TEST19 };\n+  int32_t test_set5[4] = { TEST20, TEST21, TEST22, TEST23 };\n+  int32_t test_set6[4] = { TEST24, TEST25, TEST26, TEST27 };\n+  int32_t test_set7[4] = { TEST28, TEST29, TEST30, TEST31 };\n+  int32_t test_set8[4] = { TEST32, TEST32, TEST32, TEST32 };\n+\n+  int32_t answ_set0[4] = { 32, 31, 30, 29 };\n+  int32_t answ_set1[4] = { 28, 27, 26, 25 };\n+  int32_t answ_set2[4] = { 24, 23, 22, 21 };\n+  int32_t answ_set3[4] = { 20, 19, 18, 17 };\n+  int32_t answ_set4[4] = { 16, 15, 14, 13 };\n+  int32_t answ_set5[4] = { 12, 11, 10, 9 };\n+  int32_t answ_set6[4] = { 8, 7, 6, 5 };\n+  int32_t answ_set7[4] = { 4, 3, 2, 1 };\n+  int32_t answ_set8[4] = { 0, 0, 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 128, 32, 1, 4);\n+  RUN_TEST (test_set1, answ_set1, 128, 32, 1, 4);\n+  RUN_TEST (test_set2, answ_set2, 128, 32, 1, 4);\n+  RUN_TEST (test_set3, answ_set3, 128, 32, 1, 4);\n+  RUN_TEST (test_set4, answ_set4, 128, 32, 1, 1);\n+\n+  return 0;\n+}\n+\n+/* Double scan-assembler-times to take account of unsigned functions.  */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 10 } } */\n+\n+/* Unsigned versions.  */\n+\n+int\n+test_vclz_u8 ()\n+{\n+  int i;\n+  uint8x8_t a;\n+  uint8x8_t b;\n+\n+  uint8_t test_set0[8] = {\n+    TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7\n+  };\n+  uint8_t test_set1[8] = {\n+    TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8\n+  };\n+  uint8_t answ_set0[8] = {\n+    8, 7, 6, 5, 4, 3, 2, 1\n+  };\n+  uint8_t answ_set1[8] = {\n+    0, 0, 0, 0, 0, 0, 0, 0\n+  };\n+\n+  RUN_TEST (test_set0, answ_set0, 64, 8, 0, 8);\n+  RUN_TEST (test_set1, answ_set1, 64, 8, 0, 1);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+test_vclz_u16 ()\n+{\n+  int i;\n+  uint16x4_t a;\n+  uint16x4_t b;\n+\n+  uint16_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n+  uint16_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n+  uint16_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n+  uint16_t test_set3[4] = { TEST12, TEST13, TEST14, TEST15 };\n+  uint16_t test_set4[4] = { TEST16, TEST16, TEST16, TEST16 };\n+\n+  uint16_t answ_set0[4] = { 16, 15, 14, 13 };\n+  uint16_t answ_set1[4] = { 12, 11, 10, 9 };\n+  uint16_t answ_set2[4] = { 8, 7, 6, 5 };\n+  uint16_t answ_set3[4] = { 4, 3, 2, 1 };\n+  uint16_t answ_set4[4] = { 0, 0, 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 64, 16, 0, 4);\n+  RUN_TEST (test_set1, answ_set1, 64, 16, 0, 4);\n+  RUN_TEST (test_set2, answ_set2, 64, 16, 0, 4);\n+  RUN_TEST (test_set3, answ_set3, 64, 16, 0, 4);\n+  RUN_TEST (test_set4, answ_set4, 64, 16, 0, 1);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+test_vclz_u32 ()\n+{\n+  int i;\n+  uint32x2_t a;\n+  uint32x2_t b;\n+\n+  uint32_t test_set0[2] = { TEST0, TEST1 };\n+  uint32_t test_set1[2] = { TEST2, TEST3 };\n+  uint32_t test_set2[2] = { TEST4, TEST5 };\n+  uint32_t test_set3[2] = { TEST6, TEST7 };\n+  uint32_t test_set4[2] = { TEST8, TEST9 };\n+  uint32_t test_set5[2] = { TEST10, TEST11 };\n+  uint32_t test_set6[2] = { TEST12, TEST13 };\n+  uint32_t test_set7[2] = { TEST14, TEST15 };\n+  uint32_t test_set8[2] = { TEST16, TEST17 };\n+  uint32_t test_set9[2] = { TEST18, TEST19 };\n+  uint32_t test_set10[2] = { TEST20, TEST21 };\n+  uint32_t test_set11[2] = { TEST22, TEST23 };\n+  uint32_t test_set12[2] = { TEST24, TEST25 };\n+  uint32_t test_set13[2] = { TEST26, TEST27 };\n+  uint32_t test_set14[2] = { TEST28, TEST29 };\n+  uint32_t test_set15[2] = { TEST30, TEST31 };\n+  uint32_t test_set16[2] = { TEST32, TEST32 };\n+\n+  uint32_t answ_set0[2] = { 32, 31 };\n+  uint32_t answ_set1[2] = { 30, 29 };\n+  uint32_t answ_set2[2] = { 28, 27 };\n+  uint32_t answ_set3[2] = { 26, 25 };\n+  uint32_t answ_set4[2] = { 24, 23 };\n+  uint32_t answ_set5[2] = { 22, 21 };\n+  uint32_t answ_set6[2] = { 20, 19 };\n+  uint32_t answ_set7[2] = { 18, 17 };\n+  uint32_t answ_set8[2] = { 16, 15 };\n+  uint32_t answ_set9[2] = { 14, 13 };\n+  uint32_t answ_set10[2] = { 12, 11 };\n+  uint32_t answ_set11[2] = { 10, 9 };\n+  uint32_t answ_set12[2] = { 8, 7 };\n+  uint32_t answ_set13[2] = { 6, 5 };\n+  uint32_t answ_set14[2] = { 4, 3 };\n+  uint32_t answ_set15[2] = { 2, 1 };\n+  uint32_t answ_set16[2] = { 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 64, 32, 0, 2);\n+  RUN_TEST (test_set1, answ_set1, 64, 32, 0, 2);\n+  RUN_TEST (test_set2, answ_set2, 64, 32, 0, 2);\n+  RUN_TEST (test_set3, answ_set3, 64, 32, 0, 2);\n+  RUN_TEST (test_set4, answ_set4, 64, 32, 0, 2);\n+  RUN_TEST (test_set5, answ_set5, 64, 32, 0, 2);\n+  RUN_TEST (test_set6, answ_set6, 64, 32, 0, 2);\n+  RUN_TEST (test_set7, answ_set7, 64, 32, 0, 2);\n+  RUN_TEST (test_set8, answ_set8, 64, 32, 0, 2);\n+  RUN_TEST (test_set9, answ_set9, 64, 32, 0, 2);\n+  RUN_TEST (test_set10, answ_set10, 64, 32, 0, 2);\n+  RUN_TEST (test_set11, answ_set11, 64, 32, 0, 2);\n+  RUN_TEST (test_set12, answ_set12, 64, 32, 0, 2);\n+  RUN_TEST (test_set13, answ_set13, 64, 32, 0, 2);\n+  RUN_TEST (test_set14, answ_set14, 64, 32, 0, 2);\n+  RUN_TEST (test_set15, answ_set15, 64, 32, 0, 2);\n+  RUN_TEST (test_set16, answ_set16, 64, 32, 0, 1);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+test_vclzq_u8 ()\n+{\n+  int i;\n+  uint8x16_t a;\n+  uint8x16_t b;\n+\n+  uint8_t test_set0[16] = {\n+    TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7,\n+    TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8\n+  };\n+  uint8_t answ_set0[16] = {\n+    8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0\n+  };\n+  RUN_TEST (test_set0, answ_set0, 128, 8, 0, 9);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+test_vclzq_u16 ()\n+{\n+  int i;\n+  uint16x8_t a;\n+  uint16x8_t b;\n+\n+  uint16_t test_set0[8] = {\n+    TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7\n+  };\n+  uint16_t test_set1[8] = {\n+    TEST8, TEST9, TEST10, TEST11, TEST12, TEST13, TEST14, TEST15\n+  };\n+  uint16_t test_set2[8] = {\n+    TEST16, TEST16, TEST16, TEST16, TEST16, TEST16, TEST16, TEST16\n+  };\n+\n+  uint16_t answ_set0[8] = {\n+    16, 15, 14, 13, 12, 11, 10, 9\n+  };\n+\n+  uint16_t answ_set1[8] = {\n+    8, 7, 6, 5, 4, 3, 2, 1\n+  };\n+  uint16_t answ_set2[8] = {\n+    0, 0, 0, 0, 0, 0, 0, 0\n+  };\n+\n+  RUN_TEST (test_set0, answ_set0, 128, 16, 0, 8);\n+  RUN_TEST (test_set1, answ_set1, 128, 16, 0, 8);\n+  RUN_TEST (test_set2, answ_set2, 128, 16, 0, 1);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+test_vclzq_u32 ()\n+{\n+  int i;\n+  uint32x4_t a;\n+  uint32x4_t b;\n+\n+  uint32_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n+  uint32_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n+  uint32_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n+  uint32_t test_set3[4] = { TEST12, TEST13, TEST14, TEST15 };\n+  uint32_t test_set4[4] = { TEST16, TEST17, TEST18, TEST19 };\n+  uint32_t test_set5[4] = { TEST20, TEST21, TEST22, TEST23 };\n+  uint32_t test_set6[4] = { TEST24, TEST25, TEST26, TEST27 };\n+  uint32_t test_set7[4] = { TEST28, TEST29, TEST30, TEST31 };\n+  uint32_t test_set8[4] = { TEST32, TEST32, TEST32, TEST32 };\n+\n+  uint32_t answ_set0[4] = { 32, 31, 30, 29 };\n+  uint32_t answ_set1[4] = { 28, 27, 26, 25 };\n+  uint32_t answ_set2[4] = { 24, 23, 22, 21 };\n+  uint32_t answ_set3[4] = { 20, 19, 18, 17 };\n+  uint32_t answ_set4[4] = { 16, 15, 14, 13 };\n+  uint32_t answ_set5[4] = { 12, 11, 10, 9 };\n+  uint32_t answ_set6[4] = { 8, 7, 6, 5 };\n+  uint32_t answ_set7[4] = { 4, 3, 2, 1 };\n+  uint32_t answ_set8[4] = { 0, 0, 0, 0 };\n+\n+  RUN_TEST (test_set0, answ_set0, 128, 32, 0, 4);\n+  RUN_TEST (test_set1, answ_set1, 128, 32, 0, 4);\n+  RUN_TEST (test_set2, answ_set2, 128, 32, 0, 4);\n+  RUN_TEST (test_set3, answ_set3, 128, 32, 0, 4);\n+  RUN_TEST (test_set4, answ_set4, 128, 32, 0, 1);\n+\n+  return 0;\n+}\n+\n+/* ASM scan near test for signed version.  */\n+\n+int\n+main (int argc, char **argv)\n+{\n+\n+  if (test_vclz_s8 ())\n+    abort ();\n+\n+  if (test_vclz_s16 ())\n+    abort ();\n+\n+  if (test_vclz_s32 ())\n+    abort ();\n+\n+  if (test_vclzq_s8 ())\n+    abort ();\n+\n+  if (test_vclzq_s16 ())\n+    abort ();\n+\n+  if (test_vclzq_s32 ())\n+    abort ();\n+\n+  if (test_vclz_u8 ())\n+    abort ();\n+\n+  if (test_vclz_u16 ())\n+    abort ();\n+\n+  if (test_vclz_u32 ())\n+    abort ();\n+\n+  if (test_vclzq_u8 ())\n+    abort ();\n+\n+  if (test_vclzq_u16 ())\n+    abort ();\n+\n+  if (test_vclzq_u32 ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}