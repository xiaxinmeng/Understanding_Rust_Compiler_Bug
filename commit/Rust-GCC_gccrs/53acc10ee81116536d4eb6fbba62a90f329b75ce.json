{"sha": "53acc10ee81116536d4eb6fbba62a90f329b75ce", "node_id": "C_kwDOANBUbNoAKDUzYWNjMTBlZTgxMTE2NTM2ZDRlYjZmYmJhNjJhOTBmMzI5Yjc1Y2U", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-03T13:10:42Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-03T13:10:42Z"}, "message": "c: Adjust LDBL_EPSILON for C2x for IBM long double\n\nC2x changes the <float.h> definition of *_EPSILON to apply only to\nnormalized numbers.  The effect is that LDBL_EPSILON for IBM long\ndouble becomes 0x1p-105L instead of 0x1p-1074L.\n\nThere is a reasonable case for considering this a defect fix - it\noriginated from the issue reporting process (DR#467), though it ended\nup being resolved by a paper (N2326) for C2x rather than through the\nissue process, and code using *_EPSILON often needs to override the\npre-C2x value of LDBL_EPSILON and use something on the order of\nmagnitude of the C2x value instead.  However, I've followed the\nconservative approach of only making the change for C2x and not for\nprevious standard versions (and not for C++, which doesn't have the\nC2x changes in this area).\n\nThe testcases added are intended to be valid for all long double\nformats.  The C11 one is based on\ngcc.target/powerpc/rs6000-ldouble-2.c (and when we move to a C2x\ndefault, gcc.target/powerpc/rs6000-ldouble-2.c will need an\nappropriate option added to keep using an older language version).\n\nTested with no regressions for cross to powerpc-linux-gnu.\n\ngcc/c-family/\n\t* c-cppbuiltin.cc (builtin_define_float_constants): Do not\n\tspecial-case __*_EPSILON__ setting for IBM long double for C2x.\n\ngcc/testsuite/\n\t* gcc.dg/c11-float-7.c, gcc.dg/c2x-float-12.c: New tests.", "tree": {"sha": "e261b4a63cbdae4122ed24463859356f5f91b89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e261b4a63cbdae4122ed24463859356f5f91b89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53acc10ee81116536d4eb6fbba62a90f329b75ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53acc10ee81116536d4eb6fbba62a90f329b75ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53acc10ee81116536d4eb6fbba62a90f329b75ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53acc10ee81116536d4eb6fbba62a90f329b75ce/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866263a5fe0d657cb9ec06d01bbc100900159036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866263a5fe0d657cb9ec06d01bbc100900159036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866263a5fe0d657cb9ec06d01bbc100900159036"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "4b8486c8879bfc700de96a50ae911f71fb872eff", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=53acc10ee81116536d4eb6fbba62a90f329b75ce", "patch": "@@ -279,7 +279,7 @@ builtin_define_float_constants (const char *name_prefix,\n   /* The difference between 1 and the least value greater than 1 that is\n      representable in the given floating point type, b**(1-p).  */\n   sprintf (name, \"__%s_EPSILON__\", name_prefix);\n-  if (fmt->pnan < fmt->p)\n+  if (fmt->pnan < fmt->p && (c_dialect_cxx () || !flag_isoc2x))\n     /* This is an IBM extended double format, so 1.0 + any double is\n        representable precisely.  */\n       sprintf (buf, \"0x1p%d\", fmt->emin - fmt->p);"}, {"sha": "a8a7ef5bc3317ba0db12198cbd0bcc60053371fb", "filename": "gcc/testsuite/gcc.dg/c11-float-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-7.c?ref=53acc10ee81116536d4eb6fbba62a90f329b75ce", "patch": "@@ -0,0 +1,24 @@\n+/* Test C11 definition of LDBL_EPSILON.  Based on\n+   gcc.target/powerpc/rs6000-ldouble-2.c.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  volatile long double ee = 1.0;\n+  long double eps = ee;\n+  while (ee + 1.0 != 1.0)\n+    {\n+      eps = ee;\n+      ee = eps / 2;\n+    }\n+  if (eps != LDBL_EPSILON)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "40900bd918ae43dd10ec2d2f48acde5c78235e45", "filename": "gcc/testsuite/gcc.dg/c2x-float-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53acc10ee81116536d4eb6fbba62a90f329b75ce/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-12.c?ref=53acc10ee81116536d4eb6fbba62a90f329b75ce", "patch": "@@ -0,0 +1,19 @@\n+/* Test C2x definition of LDBL_EPSILON.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  volatile long double x = 1.0L;\n+  for (int i = 0; i < LDBL_MANT_DIG - 1; i++)\n+    x /= 2;\n+  if (x != LDBL_EPSILON)\n+    abort ();\n+  exit (0);\n+}"}]}