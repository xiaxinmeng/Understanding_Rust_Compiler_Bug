{"sha": "f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "node_id": "C_kwDOANBUbNoAKGYxN2RkZjJjNDg0NDI3ZTZkZGZkOTk0YjYyZmVmY2RhYzI3YWMwMmY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-14T00:18:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-14T00:18:37Z"}, "message": "Daily bump.", "tree": {"sha": "4c847be5cab86fc03295dcab507391f8c4987ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c847be5cab86fc03295dcab507391f8c4987ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/comments", "author": null, "committer": null, "parents": [{"sha": "8a263116d4375892bf67ceaaf2575935cd99edd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a263116d4375892bf67ceaaf2575935cd99edd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a263116d4375892bf67ceaaf2575935cd99edd0"}], "stats": {"total": 1384, "additions": 1383, "deletions": 1}, "files": [{"sha": "bd099b4757c37f85cd057c06a81e15edbfb03949", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,8 @@\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* Makefile.def: Add Rust language.\n+\t* Makefile.in: Regenerate via autogen.\n+\n 2022-12-09  Martin Liska  <mliska@suse.cz>\n \n \t* MAINTAINERS: Fix spacing."}, {"sha": "46b85d5bad1c5fe485a3c4564d2f593582f06ab3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,210 @@\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-param-manipulation.cc\n+\t(ipa_param_body_adjustments::modify_expression): Bail out early if\n+\tthere are no replacements.\n+\t(ipa_param_body_adjustments::modify_assignment): Likewise.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-sra.cc (isra_param_desc): New fields safe_size,\n+\tconditionally_dereferenceable and safe_size_set.\n+\t(struct gensum_param_desc): New field conditionally_dereferenceable.\n+\t(struct isra_param_flow): Updated comment of field unit_size.\n+\t(ipa_sra_function_summaries::duplicate): Copy the new fields.\n+\t(isra_call_summary::dump): Dump unit_size when representing safe_size.\n+\t(dump_gensum_param_descriptor): Dump new flag.\n+\t(dump_isra_param_descriptor): Dump new fields.\n+\t(isra_analyze_call): Fill unit_size when it represents known safe\n+\tsize.\n+\t(check_gensum_access): Instead of disqualifying pointers which are not\n+\talways dereference, mark them as conditionally dereferencable if loads\n+\tare frequent enough.\n+\t(process_scan_results): Copy the conditionally_dereferenceable flag.\n+\t(isra_write_node_summary): Stream new fields, or assert they are not\n+\tinitialized yet.\n+\t(isra_read_node_info): Stream new fields.\n+\t(update_safe_size): New function.\n+\t(propagate_param_hints_accross_call): Propagate safe_sizes.\n+\t(propagate_hints_to_all_callees): New function.\n+\t(adjust_parameter_descriptions): Check conditionally_dereferenceable\n+\tcandidates, rework dumping.\n+\t(ipa_sra_analysis): Move most of hint propagation for one node to\n+\tpropagate_hints_to_all_callees.  Add another loop to stabilize within\n+\tSCCs and another one to verify.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-sra.cc (isra_param_desc): New field not_specially_constructed.\n+\t(struct isra_param_flow): New field constructed_for_calls.\n+\t(isra_call_summary::dump): Dump the new flag.\n+\t(loaded_decls): New variable.\n+\t(dump_isra_param_descriptor): New parameter hints, dump\n+\tnot_specially_constructed if it is true.\n+\t(dump_isra_param_descriptors): New parameter hints, pass it to\n+\tdump_isra_param_descriptor.\n+\t(ipa_sra_function_summaries::duplicate): Duplicate new flag.\n+\t(create_parameter_descriptors): Adjust comment.\n+\t(get_gensum_param_desc): Bail out when decl2desc is NULL.\n+\t(scan_expr_access): Add loaded local variables to loaded_decls.\n+\t(scan_function): Survive if final_bbs is NULL.\n+\t(isra_analyze_call): Compute constructed_for_calls flag.\n+\t(process_scan_results): Be optimistic about size limits.  Do not dump\n+\tcomputed param hints when dumpint IPA-SRA structures.\n+\t(isra_write_edge_summary): Stream constructed_for_calls.\n+\t(isra_read_edge_summary): Likewise.\n+\t(ipa_sra_dump_all_summaries): New parameter hints, pass it to\n+\tdump_isra_param_descriptor.\n+\t(flip_all_hints_pessimistic): New function.\n+\t(flip_all_param_hints_pessimistic): Likewise.\n+\t(propagate_param_hints): Likewise.\n+\t(disable_unavailable_parameters): Renamed to\n+\tadjust_parameter_descriptions.  Expand size limits for parameters\n+\twhich are specially contstructed by all callers.  Check limits again.p\n+\t(ipa_sra_analysis): Pass required hints to ipa_sra_dump_all_summaries.\n+\tAdd hint propagation.\n+\t(ipa_sra_summarize_function): Initialize and destory loaded_decls,\n+\trearrange so that scan_function is called even when there are no\n+\tcandidates.\n+\t* params.opt (ipa-sra-ptrwrap-growth-factor): New parameter.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-sra.cc (ipa_sra_analysis): Move top-down analysis before\n+\tbottom-up analysis.  Replace FOR_EACH_VEC_ELT with C++11 iteration.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103585\n+\t* params.opt (ipa-sra-deref-prob-threshold): New parameter.\n+\t* doc/invoke.texi (ipa-sra-deref-prob-threshold): Document it.\n+\t* ipa-sra.cc (struct gensum_param_access): New field load_count.\n+\t(struct gensum_param_desc): New field safe_ref, adjusted comments.\n+\t(by_ref_count): Renamed to unsafe_by_ref_count, adjusted all uses.\n+\t(dump_gensum_access): Dump the new field.\n+\t(dump_gensum_param_descriptor): Likewise.\n+\t(create_parameter_descriptors): Set safe_ref field, move setting\n+\tby_ref forward.  Only increment unsafe_by_ref_count for unsafe\n+\tby_ref parameters.\n+\t(allocate_access): Initialize new field.\n+\t(mark_param_dereference): Adjust indentation.  Only add data to\n+\tbb_dereferences for unsafe by_ref parameters.\n+\t(scan_expr_access): For loads, accumulate BB counts.\n+\t(dereference_probable_p): New function.\n+\t(check_gensum_access): Fix leading comment, add parameter FUN.\n+\tCheck cumulative counts of loads for safe by_ref accesses instead\n+\tof dereferences.\n+\t(process_scan_results): Do not propagate dereference distances for\n+\tsafe by_ref parameters.  Pass fun to check_gensum_access.  Safe\n+\tby_ref params do not need the postdominance check.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.cc (clone_for_param_removal_p): New function.\n+\t(estimate_local_effects): Call it before considering cloning\n+\tjust to remove unused parameters.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103227\n+\t* ipa-param-manipulation.h (class ipa_param_adjustments): Removed\n+\tmember function get_updated_index_or_split.\n+\t(class ipa_param_body_adjustments): New overload of\n+\tregister_replacement, new member function append_init_stmts, new\n+\tmember m_split_agg_csts_inits.\n+\t* ipa-param-manipulation.cc: Include ipa-prop.h.\n+\t(ipa_param_adjustments::get_updated_index_or_split): Removed.\n+\t(ipa_param_body_adjustments::register_replacement): New overload, use\n+\tit from the older one.\n+\t(ipa_param_body_adjustments::common_initialization): Added the\n+\tcapability to create replacements for conflicting IPA-CP discovered\n+\tconstants.\n+\t(ipa_param_body_adjustments::ipa_param_body_adjustments): Construct\n+\tthe new member.\n+\t(ipa_param_body_adjustments::append_init_stmts): New function.\n+\t* ipa-sra.cc: Include ipa-prop.h.\n+\t(push_param_adjustments_for_index): Require IPA-CP transformation\n+\tsummary as a parameter, do not create replacements which are known to\n+\thave constant values.\n+\t(process_isra_node_results): Find and pass to the above function the\n+\tIPA-CP transformation summary.\n+\t* ipa-prop.cc (adjust_agg_replacement_values): Remove the\n+\tfunctionality replacing IPA-SRA created scalar parameters with\n+\tconstants.  Simplify, do not require parameter descriptors, do not\n+\treturn anything.\n+\t(ipcp_transform_function): Simplify now that\n+\tadjust_agg_replacement_values does not change cfg.  Move definition\n+\tand initialization of descriptors lower.\n+\t* tree-inline.cc (tree_function_versioning): Call append_init_stmts of\n+\tparam_body_adjs, if there are any.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.cc (useful_ipcp_transformation_info_p): New function.\n+\t(write_ipcp_transformation_info): Added a parameter, simplified\n+\tgiven that is known not to be NULL.\n+\t(ipcp_write_transformation_summaries): Write out all useful\n+\ttransformation summaries.\n+\t(read_ipcp_transformation_info): Simplify given that some info\n+\twill be read.\n+\t(read_replacements_section): Remove assert.\n+\t* lto-cgraph.cc (add_node_to): Also set encode_body for clones.\n+\t* lto-streamer-out.cc (lto_output): Do not output virtual clones.\n+\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108044\n+\t* config/i386/i386.md (*concat<half><mode>3_5, *concat<mode><dwi>3_6,\n+\t*concat<mode><dwi>3_7): Split alternative with =ro output constraint\n+\tinto =r,o,o and use Wd input constraint for the last alternative which\n+\tis enabled for TARGET_64BIT.  Reject ix86_endbr_immediate_operand\n+\tin the input constant.\n+\n+2022-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.md (tbranch_<code><mode>3): Use gen_int_mode.\n+\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108064\n+\t* tree-vect-patterns.cc (vect_recog_rotate_pattern): Pass uvectype\n+\tas 4th argument to append_pattern_def_seq for statements with lhs\n+\twith utype type.\n+\n+2022-12-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105801\n+\t* tree-ssa-ccp.cc (likely_value): .DEFERRED_INIT produces\n+\tUNDEFINED.\n+\t* doc/invoke.texi (ftrivial-auto-var-init): Explicitely\n+\tmention we treat variables without an initializer as\n+\tundefined also for optimization purposes.\n+\n+2022-12-13  Tom Tromey  <tom@tromey.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\t    Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* dwarf2out.cc (is_rust): New.\n+\t(base_type_die): Use DW_ATE_UTF for the Rust 'char' type.\n+\t(gen_compile_unit_die): Handle \"GNU Rust\".\n+\n+2022-12-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108076\n+\t* tree-if-conv.cc (if_convertible_loop_p_1): Reject blocks\n+\twith non-local or forced labels that we later remove\n+\tlabels from.\n+\n+2022-12-13  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.md (cbranchcc4): New expander.\n+\n+2022-12-13  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* optabs.cc (prepare_cmp_insn): Return a NULL rtx other than\n+\tassertion failure when targets don't have cbranch optab or\n+\tpredicate check fails.\n+\n 2022-12-12  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* config/aarch64/aarch64.cc (aarch64_rtx_costs): Add correct costs"}, {"sha": "fb5d5da64c6041f451d36bf192bb628a05f0741f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1 +1 @@\n-20221213\n+20221214"}, {"sha": "cbb0ecfbe6994832fd4794fa54bd302994a3eff3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,9 @@\n+2022-12-13  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/107423\n+\t* parse.cc (parse_spec): Avoid NULL pointer dereference when parsing\n+\ta function and an error occured.\n+\n 2022-12-12  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102180"}, {"sha": "acd36bf7ce4053b63e08eb15460dd56421626f3f", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,394 @@\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* CONTRIBUTING.md: New.\n+\t* README.md: New.\n+\t* logo.png: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* config-lang.in: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* lang.opt (-frust-incomplete-and-experimental-compiler-do-not-use):\n+\tNew.\n+\t* rust-session-manager.cc (Session::compile_crate): Check it.\n+\t* Make-lang.in (RUST_SELFTEST_FLAGS): Add it.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* Make-lang.in: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* lang.opt: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* lang-specs.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust-lang.cc: New.\n+\t* rust-session-manager.cc: New.\n+\t* rust-session-manager.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rustspec.cc: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust-diagnostics.cc: New.\n+\t* rust-diagnostics.h: New.\n+\t* rust-gcc-diagnostics.cc: New.\n+\t* rust-linemap.cc: New.\n+\t* rust-linemap.h: New.\n+\t* rust-location.h: New.\n+\t* rust-system.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\t    Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* backend/rust-compile-context.cc: New.\n+\t* backend/rust-compile-context.h: New.\n+\t* backend/rust-compile.cc: New.\n+\t* backend/rust-compile.h: New.\n+\t* backend/rust-constexpr.cc: New.\n+\t* backend/rust-constexpr.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\n+\t* backend/rust-compile-block.cc: New.\n+\t* backend/rust-compile-block.h: New.\n+\t* backend/rust-compile-expr.cc: New.\n+\t* backend/rust-compile-expr.h: New.\n+\t* backend/rust-compile-extern.h: New.\n+\t* backend/rust-compile-fnparam.cc: New.\n+\t* backend/rust-compile-fnparam.h: New.\n+\t* backend/rust-compile-implitem.cc: New.\n+\t* backend/rust-compile-implitem.h: New.\n+\t* backend/rust-compile-intrinsic.cc: New.\n+\t* backend/rust-compile-intrinsic.h: New.\n+\t* backend/rust-compile-item.cc: New.\n+\t* backend/rust-compile-item.h: New.\n+\t* backend/rust-compile-pattern.cc: New.\n+\t* backend/rust-compile-pattern.h: New.\n+\t* backend/rust-compile-resolve-path.cc: New.\n+\t* backend/rust-compile-resolve-path.h: New.\n+\t* backend/rust-compile-stmt.cc: New.\n+\t* backend/rust-compile-stmt.h: New.\n+\t* backend/rust-compile-struct-field-expr.cc: New.\n+\t* backend/rust-compile-struct-field-expr.h: New.\n+\t* backend/rust-compile-type.cc: New.\n+\t* backend/rust-compile-type.h: New.\n+\t* backend/rust-compile-var-decl.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\n+\t* backend/rust-builtins.h: New.\n+\t* backend/rust-compile-base.cc: New.\n+\t* backend/rust-compile-base.h: New.\n+\t* backend/rust-mangle.cc: New.\n+\t* backend/rust-mangle.h: New.\n+\t* backend/rust-tree.cc: New.\n+\t* backend/rust-tree.h: New.\n+\t* rust-backend.h: New.\n+\t* rust-gcc.cc: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* metadata/rust-export-metadata.cc: New.\n+\t* metadata/rust-export-metadata.h: New.\n+\t* metadata/rust-extern-crate.cc: New.\n+\t* metadata/rust-extern-crate.h: New.\n+\t* metadata/rust-import-archive.cc: New.\n+\t* metadata/rust-imports.cc: New.\n+\t* metadata/rust-imports.h: New.\n+\t* rust-object-export.cc: New.\n+\t* rust-object-export.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* checks/lints/rust-lint-unused-var.cc: New.\n+\t* checks/lints/rust-lint-unused-var.h: New.\n+\n+2022-12-13  Thomas Young  <wenzhang5800@gmail.com>\n+\n+\t* checks/lints/rust-lint-marklive-base.h: New.\n+\t* checks/lints/rust-lint-marklive.cc: New.\n+\t* checks/lints/rust-lint-marklive.h: New.\n+\t* checks/lints/rust-lint-scan-deadcode.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* checks/errors/privacy/rust-privacy-check.cc: New.\n+\t* checks/errors/privacy/rust-privacy-check.h: New.\n+\t* checks/errors/privacy/rust-privacy-common.h: New.\n+\t* checks/errors/privacy/rust-privacy-ctx.cc: New.\n+\t* checks/errors/privacy/rust-privacy-ctx.h: New.\n+\t* checks/errors/privacy/rust-privacy-reporter.cc: New.\n+\t* checks/errors/privacy/rust-privacy-reporter.h: New.\n+\t* checks/errors/privacy/rust-pub-restricted-visitor.cc: New.\n+\t* checks/errors/privacy/rust-pub-restricted-visitor.h: New.\n+\t* checks/errors/privacy/rust-reachability.cc: New.\n+\t* checks/errors/privacy/rust-reachability.h: New.\n+\t* checks/errors/privacy/rust-visibility-resolver.cc: New.\n+\t* checks/errors/privacy/rust-visibility-resolver.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* checks/errors/rust-const-checker.cc: New.\n+\t* checks/errors/rust-const-checker.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* checks/errors/rust-unsafe-checker.cc: New.\n+\t* checks/errors/rust-unsafe-checker.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-autoderef.cc: New.\n+\t* typecheck/rust-autoderef.h: New.\n+\t* typecheck/rust-casts.cc: New.\n+\t* typecheck/rust-casts.h: New.\n+\t* typecheck/rust-coercion.cc: New.\n+\t* typecheck/rust-coercion.h: New.\n+\t* typecheck/rust-hir-dot-operator.cc: New.\n+\t* typecheck/rust-hir-dot-operator.h: New.\n+\t* typecheck/rust-hir-inherent-impl-overlap.h: New.\n+\t* typecheck/rust-hir-path-probe.h: New.\n+\t* typecheck/rust-hir-trait-ref.h: New.\n+\t* typecheck/rust-hir-type-bounds.h: New.\n+\t* typecheck/rust-substitution-mapper.cc: New.\n+\t* typecheck/rust-substitution-mapper.h: New.\n+\t* typecheck/rust-tycheck-dump.h: New.\n+\t* typecheck/rust-tyctx.cc: New.\n+\t* typecheck/rust-tyty-bounds.cc: New.\n+\t* typecheck/rust-tyty-call.cc: New.\n+\t* typecheck/rust-tyty-call.h: New.\n+\t* typecheck/rust-tyty-cmp.h: New.\n+\t* typecheck/rust-tyty-rules.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-tyty.cc: New.\n+\t* typecheck/rust-tyty.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-trait-resolve.cc: New.\n+\t* typecheck/rust-hir-trait-resolve.h: New.\n+\t* typecheck/rust-hir-type-check-base.cc: New.\n+\t* typecheck/rust-hir-type-check-base.h: New.\n+\t* typecheck/rust-hir-type-check-enumitem.cc: New.\n+\t* typecheck/rust-hir-type-check-enumitem.h: New.\n+\t* typecheck/rust-hir-type-check-expr.cc: New.\n+\t* typecheck/rust-hir-type-check-expr.h: New.\n+\t* typecheck/rust-hir-type-check-implitem.cc: New.\n+\t* typecheck/rust-hir-type-check-implitem.h: New.\n+\t* typecheck/rust-hir-type-check-item.cc: New.\n+\t* typecheck/rust-hir-type-check-item.h: New.\n+\t* typecheck/rust-hir-type-check-path.cc: New.\n+\t* typecheck/rust-hir-type-check-pattern.cc: New.\n+\t* typecheck/rust-hir-type-check-pattern.h: New.\n+\t* typecheck/rust-hir-type-check-stmt.cc: New.\n+\t* typecheck/rust-hir-type-check-stmt.h: New.\n+\t* typecheck/rust-hir-type-check-struct-field.h: New.\n+\t* typecheck/rust-hir-type-check-struct.cc: New.\n+\t* typecheck/rust-hir-type-check-toplevel.cc: New.\n+\t* typecheck/rust-hir-type-check-toplevel.h: New.\n+\t* typecheck/rust-hir-type-check-type.cc: New.\n+\t* typecheck/rust-hir-type-check-type.h: New.\n+\t* typecheck/rust-hir-type-check-util.cc: New.\n+\t* typecheck/rust-hir-type-check-util.h: New.\n+\t* typecheck/rust-hir-type-check.cc: New.\n+\t* typecheck/rust-hir-type-check.h: New.\n+\t* typecheck/rust-tyty-visitor.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-canonical-path.h: New.\n+\t* util/rust-common.h: New.\n+\t* util/rust-hir-map.cc: New.\n+\t* util/rust-hir-map.h: New.\n+\t* util/rust-identifier.h: New.\n+\t* util/rust-lang-item.h: New.\n+\t* util/rust-mapping-common.h: New.\n+\t* util/rust-stacked-contexts.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-attributes.cc: New.\n+\t* util/rust-attributes.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-optional-test.cc: New.\n+\t* util/rust-optional.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-base62.cc: New.\n+\t* util/rust-base62.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-abi.cc: New.\n+\t* util/rust-abi.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/fnv-hash.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-make-unique.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/rust-ast-lower-base.cc: New.\n+\t* hir/rust-ast-lower-base.h: New.\n+\t* hir/rust-ast-lower-block.h: New.\n+\t* hir/rust-ast-lower-enumitem.h: New.\n+\t* hir/rust-ast-lower-expr.h: New.\n+\t* hir/rust-ast-lower-extern.h: New.\n+\t* hir/rust-ast-lower-implitem.h: New.\n+\t* hir/rust-ast-lower-item.cc: New.\n+\t* hir/rust-ast-lower-item.h: New.\n+\t* hir/rust-ast-lower-pattern.cc: New.\n+\t* hir/rust-ast-lower-pattern.h: New.\n+\t* hir/rust-ast-lower-stmt.h: New.\n+\t* hir/rust-ast-lower-struct-field-expr.h: New.\n+\t* hir/rust-ast-lower-type.h: New.\n+\t* hir/rust-ast-lower.cc: New.\n+\t* hir/rust-ast-lower.h: New.\n+\t* hir/rust-hir-dump.cc: New.\n+\t* hir/rust-hir-dump.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/tree/rust-hir-full-decls.h: New.\n+\t* hir/tree/rust-hir-full-test.cc: New.\n+\t* hir/tree/rust-hir-full.h: New.\n+\t* hir/tree/rust-hir-visitor.h: New.\n+\t* hir/tree/rust-hir.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/tree/rust-hir-expr.h: New.\n+\t* hir/tree/rust-hir-item.h: New.\n+\t* hir/tree/rust-hir-path.h: New.\n+\t* hir/tree/rust-hir-pattern.h: New.\n+\t* hir/tree/rust-hir-stmt.h: New.\n+\t* hir/tree/rust-hir-type.h: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-base.cc: New.\n+\t* resolve/rust-ast-resolve-base.h: New.\n+\t* resolve/rust-ast-resolve-expr.cc: New.\n+\t* resolve/rust-ast-resolve-expr.h: New.\n+\t* resolve/rust-ast-resolve-implitem.h: New.\n+\t* resolve/rust-ast-resolve-item.cc: New.\n+\t* resolve/rust-ast-resolve-item.h: New.\n+\t* resolve/rust-ast-resolve-path.cc: New.\n+\t* resolve/rust-ast-resolve-path.h: New.\n+\t* resolve/rust-ast-resolve-pattern.cc: New.\n+\t* resolve/rust-ast-resolve-pattern.h: New.\n+\t* resolve/rust-ast-resolve-stmt.cc: New.\n+\t* resolve/rust-ast-resolve-stmt.h: New.\n+\t* resolve/rust-ast-resolve-struct-expr-field.cc: New.\n+\t* resolve/rust-ast-resolve-struct-expr-field.h: New.\n+\t* resolve/rust-ast-resolve-toplevel.h: New.\n+\t* resolve/rust-ast-resolve-type.cc: New.\n+\t* resolve/rust-ast-resolve-type.h: New.\n+\t* resolve/rust-ast-resolve.cc: New.\n+\t* resolve/rust-ast-resolve.h: New.\n+\t* resolve/rust-ast-verify-assignee.h: New.\n+\t* resolve/rust-name-resolver.cc: New.\n+\t* resolve/rust-name-resolver.h: New.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Joel Phillips  <simplytheother@gmail.com>\n+\n+\t* expand/rust-attribute-visitor.cc: New.\n+\t* expand/rust-attribute-visitor.h: New.\n+\t* expand/rust-macro-builtins.cc: New.\n+\t* expand/rust-macro-builtins.h: New.\n+\t* expand/rust-macro-expand.cc: New.\n+\t* expand/rust-macro-expand.h: New.\n+\t* expand/rust-macro-invoc-lexer.cc: New.\n+\t* expand/rust-macro-invoc-lexer.h: New.\n+\t* expand/rust-macro-substitute-ctx.cc: New.\n+\t* expand/rust-macro-substitute-ctx.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h: New, second half.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-cfg-parser.cc: New.\n+\t* parse/rust-cfg-parser.h: New.\n+\t* parse/rust-parse-impl.h: New.\n+\t* parse/rust-parse.cc: New.\n+\t* parse/rust-parse.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\n+\t* lex/rust-codepoint.h: New.\n+\t* lex/rust-lex.cc: New.\n+\t* lex/rust-lex.h: New.\n+\t* lex/rust-token.cc: New.\n+\t* lex/rust-token.h: New.\n+\t* rust-buffered-queue.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc: New.\n+\t* ast/rust-ast-dump.h: New.\n+\t* ast/rust-ast-visitor.h: New.\n+\t* ast/rust-cond-compilation.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* ast/rust-expr.h: New.\n+\t* ast/rust-macro.h: New.\n+\t* ast/rust-path.h: New.\n+\t* ast/rust-pattern.h: New.\n+\t* ast/rust-stmt.h: New.\n+\t* ast/rust-type.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* ast/rust-item.h: New.\n+\n+2022-12-13  Joel Phillips  <simplytheother@gmail.com>\n+\t    Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-full-decls.h: New.\n+\t* ast/rust-ast-full-test.cc: New.\n+\t* ast/rust-ast-full.h: New.\n+\t* ast/rust-ast.h: New.\n+\t* operator.h: New.\n+\n \f\n Copyright (C) 2022 Free Software Foundation, Inc.\n "}, {"sha": "c36a2aea9401066b1a4db71c1a892a3c9be167cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 763, "deletions": 0, "changes": 763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,766 @@\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-sra-26.c: New test.\n+\t* gcc.dg/ipa/ipa-sra-27.c: Likewise.\n+\t* gcc.dg/ipa/ipa-sra-28.c: Likewise.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gfortran.dg/pr48636-2.f90: Disable IPA-SRA.\n+\t* gfortran.dg/ipa-sra-1.f90: New test.\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-sra-25.c: New test\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* g++.dg/ipa/ipa-sra-5.C: New test\n+\n+2022-12-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103227\n+\tPR ipa/107640\n+\t* gcc.dg/ipa/pr107640-2.c: New test.\n+\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108044\n+\t* gcc.target/i386/pr108044-1.c: New test.\n+\t* gcc.target/i386/pr108044-2.c: New test.\n+\t* gcc.target/i386/pr108044-3.c: New test.\n+\t* gcc.target/i386/pr108044-4.c: New test.\n+\n+2022-12-13  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/107423\n+\t* gfortran.dg/pr107423.f90: New test.\n+\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108064\n+\t* gcc.c-torture/execute/pr108064.c: New test.\n+\n+2022-12-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105801\n+\t* gcc.dg/tree-ssa/ssa-ccp-43.c: New testcase.\n+\n+2022-12-13  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* lib/rust.exp (rust_init): Add\n+\t'-frust-incomplete-and-experimental-compiler-do-not-use'.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\t    Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* rust/execute/torture/block_expr1.rs: New.\n+\t* rust/execute/torture/builtin_macro_cfg.rs: New.\n+\t* rust/execute/torture/builtin_macro_concat.rs: New.\n+\t* rust/execute/torture/builtin_macro_env.rs: New.\n+\t* rust/execute/torture/builtin_macro_include_bytes.rs: New.\n+\t* rust/execute/torture/builtin_macro_include_str.rs: New.\n+\t* rust/execute/torture/builtin_macro_line.rs: New.\n+\t* rust/execute/torture/builtin_macros1.rs: New.\n+\t* rust/execute/torture/builtin_macros3.rs: New.\n+\t* rust/execute/torture/cfg1.rs: New.\n+\t* rust/execute/torture/cfg2.rs: New.\n+\t* rust/execute/torture/cfg3.rs: New.\n+\t* rust/execute/torture/cfg4.rs: New.\n+\t* rust/execute/torture/cfg5.rs: New.\n+\t* rust/execute/torture/coercion1.rs: New.\n+\t* rust/execute/torture/coercion2.rs: New.\n+\t* rust/execute/torture/const_fold1.rs: New.\n+\t* rust/execute/torture/const_fold2.rs: New.\n+\t* rust/execute/torture/copy_nonoverlapping1.rs: New.\n+\t* rust/execute/torture/empty_main.rs: New.\n+\t* rust/execute/torture/execute.exp: New.\n+\t* rust/execute/torture/exit_error.rs: New.\n+\t* rust/execute/torture/extern_mod4.rs: New.\n+\t* rust/execute/torture/func1.rs: New.\n+\t* rust/execute/torture/helloworld1.rs: New.\n+\t* rust/execute/torture/helloworld2.rs: New.\n+\t* rust/execute/torture/include.txt: New.\n+\t* rust/execute/torture/index1.rs: New.\n+\t* rust/execute/torture/issue-1120.rs: New.\n+\t* rust/execute/torture/issue-1133.rs: New.\n+\t* rust/execute/torture/issue-1198.rs: New.\n+\t* rust/execute/torture/issue-1231.rs: New.\n+\t* rust/execute/torture/issue-1232.rs: New.\n+\t* rust/execute/torture/issue-1249.rs: New.\n+\t* rust/execute/torture/issue-1436.rs: New.\n+\t* rust/execute/torture/issue-1496.rs: New.\n+\t* rust/execute/torture/issue-647.rs: New.\n+\t* rust/execute/torture/issue-845.rs: New.\n+\t* rust/execute/torture/issue-851.rs: New.\n+\t* rust/execute/torture/issue-858.rs: New.\n+\t* rust/execute/torture/issue-976.rs: New.\n+\t* rust/execute/torture/issue-995.rs: New.\n+\t* rust/execute/torture/macros1.rs: New.\n+\t* rust/execute/torture/macros10.rs: New.\n+\t* rust/execute/torture/macros11.rs: New.\n+\t* rust/execute/torture/macros12.rs: New.\n+\t* rust/execute/torture/macros13.rs: New.\n+\t* rust/execute/torture/macros14.rs: New.\n+\t* rust/execute/torture/macros16.rs: New.\n+\t* rust/execute/torture/macros17.rs: New.\n+\t* rust/execute/torture/macros18.rs: New.\n+\t* rust/execute/torture/macros19.rs: New.\n+\t* rust/execute/torture/macros2.rs: New.\n+\t* rust/execute/torture/macros20.rs: New.\n+\t* rust/execute/torture/macros21.rs: New.\n+\t* rust/execute/torture/macros22.rs: New.\n+\t* rust/execute/torture/macros23.rs: New.\n+\t* rust/execute/torture/macros24.rs: New.\n+\t* rust/execute/torture/macros25.rs: New.\n+\t* rust/execute/torture/macros26.rs: New.\n+\t* rust/execute/torture/macros27.rs: New.\n+\t* rust/execute/torture/macros28.rs: New.\n+\t* rust/execute/torture/macros29.rs: New.\n+\t* rust/execute/torture/macros3.rs: New.\n+\t* rust/execute/torture/macros30.rs: New.\n+\t* rust/execute/torture/macros31.rs: New.\n+\t* rust/execute/torture/macros4.rs: New.\n+\t* rust/execute/torture/macros5.rs: New.\n+\t* rust/execute/torture/macros6.rs: New.\n+\t* rust/execute/torture/macros7.rs: New.\n+\t* rust/execute/torture/macros8.rs: New.\n+\t* rust/execute/torture/macros9.rs: New.\n+\t* rust/execute/torture/match1.rs: New.\n+\t* rust/execute/torture/match2.rs: New.\n+\t* rust/execute/torture/match3.rs: New.\n+\t* rust/execute/torture/match_bool1.rs: New.\n+\t* rust/execute/torture/match_byte1.rs: New.\n+\t* rust/execute/torture/match_char1.rs: New.\n+\t* rust/execute/torture/match_int1.rs: New.\n+\t* rust/execute/torture/match_loop1.rs: New.\n+\t* rust/execute/torture/match_range1.rs: New.\n+\t* rust/execute/torture/match_range2.rs: New.\n+\t* rust/execute/torture/match_tuple1.rs: New.\n+\t* rust/execute/torture/method1.rs: New.\n+\t* rust/execute/torture/method2.rs: New.\n+\t* rust/execute/torture/method3.rs: New.\n+\t* rust/execute/torture/method4.rs: New.\n+\t* rust/execute/torture/mod1.rs: New.\n+\t* rust/execute/torture/modules/mod.rs: New.\n+\t* rust/execute/torture/operator_overload_1.rs: New.\n+\t* rust/execute/torture/operator_overload_10.rs: New.\n+\t* rust/execute/torture/operator_overload_11.rs: New.\n+\t* rust/execute/torture/operator_overload_12.rs: New.\n+\t* rust/execute/torture/operator_overload_2.rs: New.\n+\t* rust/execute/torture/operator_overload_3.rs: New.\n+\t* rust/execute/torture/operator_overload_4.rs: New.\n+\t* rust/execute/torture/operator_overload_5.rs: New.\n+\t* rust/execute/torture/operator_overload_6.rs: New.\n+\t* rust/execute/torture/operator_overload_7.rs: New.\n+\t* rust/execute/torture/operator_overload_8.rs: New.\n+\t* rust/execute/torture/operator_overload_9.rs: New.\n+\t* rust/execute/torture/slice-magic.rs: New.\n+\t* rust/execute/torture/slice-magic2.rs: New.\n+\t* rust/execute/torture/slice1.rs: New.\n+\t* rust/execute/torture/str-layout1.rs: New.\n+\t* rust/execute/torture/str-zero.rs: New.\n+\t* rust/execute/torture/trait1.rs: New.\n+\t* rust/execute/torture/trait10.rs: New.\n+\t* rust/execute/torture/trait11.rs: New.\n+\t* rust/execute/torture/trait12.rs: New.\n+\t* rust/execute/torture/trait13.rs: New.\n+\t* rust/execute/torture/trait2.rs: New.\n+\t* rust/execute/torture/trait3.rs: New.\n+\t* rust/execute/torture/trait4.rs: New.\n+\t* rust/execute/torture/trait5.rs: New.\n+\t* rust/execute/torture/trait6.rs: New.\n+\t* rust/execute/torture/trait7.rs: New.\n+\t* rust/execute/torture/trait8.rs: New.\n+\t* rust/execute/torture/trait9.rs: New.\n+\t* rust/execute/torture/transmute1.rs: New.\n+\t* rust/execute/torture/wrapping_op1.rs: New.\n+\t* rust/execute/torture/wrapping_op2.rs: New.\n+\t* rust/execute/xfail/macro1.rs: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\t    Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* rust/compile/abi-options1.rs: New.\n+\t* rust/compile/array3.rs: New.\n+\t* rust/compile/array_empty_list.rs: New.\n+\t* rust/compile/arrays1.rs: New.\n+\t* rust/compile/arrays2.rs: New.\n+\t* rust/compile/attr-mismatch-crate-name.rs: New.\n+\t* rust/compile/attr_cold.rs: New.\n+\t* rust/compile/attr_deprecated.rs: New.\n+\t* rust/compile/attr_deprecated_2.rs: New.\n+\t* rust/compile/bad-crate-name.rs: New.\n+\t* rust/compile/bad=file-name.rs: New.\n+\t* rust/compile/bad_as_bool_char.rs: New.\n+\t* rust/compile/bad_file_name.txt.rs: New.\n+\t* rust/compile/bad_inner_doc.rs: New.\n+\t* rust/compile/bad_pub_enumitems.rs: New.\n+\t* rust/compile/bad_stmt_enums.rs: New.\n+\t* rust/compile/bad_toplevel_enums.rs: New.\n+\t* rust/compile/bad_tuple_index.rs: New.\n+\t* rust/compile/bad_type1.rs: New.\n+\t* rust/compile/bad_type2.rs: New.\n+\t* rust/compile/break1.rs: New.\n+\t* rust/compile/break2.rs: New.\n+\t* rust/compile/builtin_macro_compile_error.rs: New.\n+\t* rust/compile/builtin_macro_concat.rs: New.\n+\t* rust/compile/builtin_macro_env.rs: New.\n+\t* rust/compile/builtin_macro_include_bytes.rs: New.\n+\t* rust/compile/builtin_macro_include_str.rs: New.\n+\t* rust/compile/builtin_macro_not_found.rs: New.\n+\t* rust/compile/bytecharstring.rs: New.\n+\t* rust/compile/canonical_paths1.rs: New.\n+\t* rust/compile/cast1.rs: New.\n+\t* rust/compile/cfg1.rs: New.\n+\t* rust/compile/cfg2.rs: New.\n+\t* rust/compile/cfg3.rs: New.\n+\t* rust/compile/cfg4.rs: New.\n+\t* rust/compile/cfg5.rs: New.\n+\t* rust/compile/compile.exp: New.\n+\t* rust/compile/complex-path1.rs: New.\n+\t* rust/compile/const-issue1440.rs: New.\n+\t* rust/compile/const1.rs: New.\n+\t* rust/compile/const2.rs: New.\n+\t* rust/compile/const3.rs: New.\n+\t* rust/compile/const_generics_1.rs: New.\n+\t* rust/compile/const_generics_2.rs: New.\n+\t* rust/compile/const_generics_3.rs: New.\n+\t* rust/compile/const_generics_4.rs: New.\n+\t* rust/compile/const_generics_5.rs: New.\n+\t* rust/compile/const_generics_6.rs: New.\n+\t* rust/compile/continue1.rs: New.\n+\t* rust/compile/deadcode_err1.rs: New.\n+\t* rust/compile/deadcode_err2.rs: New.\n+\t* rust/compile/debug-diagnostics-default.rs: New.\n+\t* rust/compile/debug-diagnostics-off.rs: New.\n+\t* rust/compile/debug-diagnostics-on.rs: New.\n+\t* rust/compile/doc_isolated_cr_block_comment.rs: New.\n+\t* rust/compile/doc_isolated_cr_inner_block_comment.rs: New.\n+\t* rust/compile/doc_isolated_cr_inner_line_comment.rs: New.\n+\t* rust/compile/doc_isolated_cr_line_comment.rs: New.\n+\t* rust/compile/dup_fields.rs: New.\n+\t* rust/compile/empty_comment_before_match.rs: New.\n+\t* rust/compile/expected_type_args2.rs: New.\n+\t* rust/compile/expected_type_args3.rs: New.\n+\t* rust/compile/func1.rs: New.\n+\t* rust/compile/func2.rs: New.\n+\t* rust/compile/func3.rs: New.\n+\t* rust/compile/func4.rs: New.\n+\t* rust/compile/func5.rs: New.\n+\t* rust/compile/generic-default1.rs: New.\n+\t* rust/compile/generics1.rs: New.\n+\t* rust/compile/generics10.rs: New.\n+\t* rust/compile/generics11.rs: New.\n+\t* rust/compile/generics12.rs: New.\n+\t* rust/compile/generics13.rs: New.\n+\t* rust/compile/generics2.rs: New.\n+\t* rust/compile/generics3.rs: New.\n+\t* rust/compile/generics4.rs: New.\n+\t* rust/compile/generics5.rs: New.\n+\t* rust/compile/generics6.rs: New.\n+\t* rust/compile/generics7.rs: New.\n+\t* rust/compile/generics8.rs: New.\n+\t* rust/compile/generics9.rs: New.\n+\t* rust/compile/implicit_returns_err1.rs: New.\n+\t* rust/compile/implicit_returns_err2.rs: New.\n+\t* rust/compile/implicit_returns_err3.rs: New.\n+\t* rust/compile/implicit_returns_err4.rs: New.\n+\t* rust/compile/infer-crate-name.rs: New.\n+\t* rust/compile/inline_1.rs: New.\n+\t* rust/compile/inline_2.rs: New.\n+\t* rust/compile/issue-1005.rs: New.\n+\t* rust/compile/issue-1019.rs: New.\n+\t* rust/compile/issue-1023.rs: New.\n+\t* rust/compile/issue-1031.rs: New.\n+\t* rust/compile/issue-1034.rs: New.\n+\t* rust/compile/issue-1089.rs: New.\n+\t* rust/compile/issue-1128.rs: New.\n+\t* rust/compile/issue-1129-1.rs: New.\n+\t* rust/compile/issue-1129-2.rs: New.\n+\t* rust/compile/issue-1130.rs: New.\n+\t* rust/compile/issue-1131.rs: New.\n+\t* rust/compile/issue-1152.rs: New.\n+\t* rust/compile/issue-1165.rs: New.\n+\t* rust/compile/issue-1173.rs: New.\n+\t* rust/compile/issue-1226.rs: New.\n+\t* rust/compile/issue-1234.rs: New.\n+\t* rust/compile/issue-1235.rs: New.\n+\t* rust/compile/issue-1237.rs: New.\n+\t* rust/compile/issue-1251.rs: New.\n+\t* rust/compile/issue-1271.rs: New.\n+\t* rust/compile/issue-1289.rs: New.\n+\t* rust/compile/issue-1323-1.rs: New.\n+\t* rust/compile/issue-1323-2.rs: New.\n+\t* rust/compile/issue-1383.rs: New.\n+\t* rust/compile/issue-1393.rs: New.\n+\t* rust/compile/issue-1447.rs: New.\n+\t* rust/compile/issue-407-2.rs: New.\n+\t* rust/compile/issue-407.rs: New.\n+\t* rust/compile/issue-557.rs: New.\n+\t* rust/compile/issue-635-1.rs: New.\n+\t* rust/compile/issue-635-2.rs: New.\n+\t* rust/compile/lookup_err1.rs: New.\n+\t* rust/compile/macro-issue1053-2.rs: New.\n+\t* rust/compile/macro-issue1053.rs: New.\n+\t* rust/compile/macro-issue1224.rs: New.\n+\t* rust/compile/macro-issue1233.rs: New.\n+\t* rust/compile/macro-issue1395-2.rs: New.\n+\t* rust/compile/macro-issue1395.rs: New.\n+\t* rust/compile/macro-issue1400-2.rs: New.\n+\t* rust/compile/macro-issue1400.rs: New.\n+\t* rust/compile/macro1.rs: New.\n+\t* rust/compile/macro10.rs: New.\n+\t* rust/compile/macro11.rs: New.\n+\t* rust/compile/macro12.rs: New.\n+\t* rust/compile/macro13.rs: New.\n+\t* rust/compile/macro14.rs: New.\n+\t* rust/compile/macro15.rs: New.\n+\t* rust/compile/macro16.rs: New.\n+\t* rust/compile/macro17.rs: New.\n+\t* rust/compile/macro18.rs: New.\n+\t* rust/compile/macro19.rs: New.\n+\t* rust/compile/macro2.rs: New.\n+\t* rust/compile/macro20.rs: New.\n+\t* rust/compile/macro21.rs: New.\n+\t* rust/compile/macro22.rs: New.\n+\t* rust/compile/macro23.rs: New.\n+\t* rust/compile/macro25.rs: New.\n+\t* rust/compile/macro26.rs: New.\n+\t* rust/compile/macro27.rs: New.\n+\t* rust/compile/macro28.rs: New.\n+\t* rust/compile/macro29.rs: New.\n+\t* rust/compile/macro3.rs: New.\n+\t* rust/compile/macro30.rs: New.\n+\t* rust/compile/macro31.rs: New.\n+\t* rust/compile/macro32.rs: New.\n+\t* rust/compile/macro33.rs: New.\n+\t* rust/compile/macro34.rs: New.\n+\t* rust/compile/macro35.rs: New.\n+\t* rust/compile/macro36.rs: New.\n+\t* rust/compile/macro37.rs: New.\n+\t* rust/compile/macro38.rs: New.\n+\t* rust/compile/macro39.rs: New.\n+\t* rust/compile/macro4.rs: New.\n+\t* rust/compile/macro40.rs: New.\n+\t* rust/compile/macro41.rs: New.\n+\t* rust/compile/macro42.rs: New.\n+\t* rust/compile/macro5.rs: New.\n+\t* rust/compile/macro6.rs: New.\n+\t* rust/compile/macro7.rs: New.\n+\t* rust/compile/macro8.rs: New.\n+\t* rust/compile/macro9.rs: New.\n+\t* rust/compile/macro_return.rs: New.\n+\t* rust/compile/match1.rs: New.\n+\t* rust/compile/match2.rs: New.\n+\t* rust/compile/match3.rs: New.\n+\t* rust/compile/match4.rs: New.\n+\t* rust/compile/match5.rs: New.\n+\t* rust/compile/match6.rs: New.\n+\t* rust/compile/match7.rs: New.\n+\t* rust/compile/method1.rs: New.\n+\t* rust/compile/method2.rs: New.\n+\t* rust/compile/mismatch-crate-name.rs: New.\n+\t* rust/compile/missing_middle/both_path.rs: New.\n+\t* rust/compile/missing_middle/explicit.not.rs: New.\n+\t* rust/compile/missing_middle/inner_path.rs: New.\n+\t* rust/compile/missing_middle/other.rs: New.\n+\t* rust/compile/missing_middle/outer_path.rs: New.\n+\t* rust/compile/missing_middle/sub/mod.rs: New.\n+\t* rust/compile/missing_return1.rs: New.\n+\t* rust/compile/mod_missing_middle.rs: New.\n+\t* rust/compile/never_type_err1.rs: New.\n+\t* rust/compile/privacy1.rs: New.\n+\t* rust/compile/privacy2.rs: New.\n+\t* rust/compile/privacy3.rs: New.\n+\t* rust/compile/privacy4.rs: New.\n+\t* rust/compile/privacy5.rs: New.\n+\t* rust/compile/privacy6.rs: New.\n+\t* rust/compile/pub_restricted_1.rs: New.\n+\t* rust/compile/pub_restricted_2.rs: New.\n+\t* rust/compile/pub_restricted_3.rs: New.\n+\t* rust/compile/raw_identifiers_bad_keywords.rs: New.\n+\t* rust/compile/raw_identifiers_underscore.rs: New.\n+\t* rust/compile/redef_error1.rs: New.\n+\t* rust/compile/redef_error2.rs: New.\n+\t* rust/compile/redef_error3.rs: New.\n+\t* rust/compile/redef_error4.rs: New.\n+\t* rust/compile/redef_error5.rs: New.\n+\t* rust/compile/redef_error6.rs: New.\n+\t* rust/compile/reference1.rs: New.\n+\t* rust/compile/self-path1.rs: New.\n+\t* rust/compile/self-path2.rs: New.\n+\t* rust/compile/shadow1.rs: New.\n+\t* rust/compile/specify-crate-name.rs: New.\n+\t* rust/compile/static_var1.rs: New.\n+\t* rust/compile/stmt_with_block_err1.rs: New.\n+\t* rust/compile/struct_align1.rs: New.\n+\t* rust/compile/struct_align2.rs: New.\n+\t* rust/compile/struct_init1.rs: New.\n+\t* rust/compile/struct_pack1.rs: New.\n+\t* rust/compile/struct_pack2.rs: New.\n+\t* rust/compile/syntax-only.rs: New.\n+\t* rust/compile/test_mod.rs: New.\n+\t* rust/compile/torture/all_doc_comment_line_blocks.rs: New.\n+\t* rust/compile/torture/all_doc_comment_line_blocks_crlf.rs: New.\n+\t* rust/compile/torture/arithmetic_expressions1.rs: New.\n+\t* rust/compile/torture/array_const_fold_1.rs: New.\n+\t* rust/compile/torture/array_const_fold_2.rs: New.\n+\t* rust/compile/torture/array_function.rs: New.\n+\t* rust/compile/torture/array_type_infer.rs: New.\n+\t* rust/compile/torture/array_zero_length.rs: New.\n+\t* rust/compile/torture/arrays1.rs: New.\n+\t* rust/compile/torture/arrays2.rs: New.\n+\t* rust/compile/torture/arrays3.rs: New.\n+\t* rust/compile/torture/arrays4.rs: New.\n+\t* rust/compile/torture/arrays5.rs: New.\n+\t* rust/compile/torture/arrays6.rs: New.\n+\t* rust/compile/torture/arrays_index1.rs: New.\n+\t* rust/compile/torture/arrays_index2.rs: New.\n+\t* rust/compile/torture/arrays_index3.rs: New.\n+\t* rust/compile/torture/as_bool_char.rs: New.\n+\t* rust/compile/torture/associated_types1.rs: New.\n+\t* rust/compile/torture/autoderef1.rs: New.\n+\t* rust/compile/torture/block_expr1.rs: New.\n+\t* rust/compile/torture/block_expr2.rs: New.\n+\t* rust/compile/torture/block_expr3.rs: New.\n+\t* rust/compile/torture/block_expr4.rs: New.\n+\t* rust/compile/torture/block_expr5.rs: New.\n+\t* rust/compile/torture/block_expr_parser_bug.rs: New.\n+\t* rust/compile/torture/bom.rs: New.\n+\t* rust/compile/torture/bom_comment.rs: New.\n+\t* rust/compile/torture/bom_shebang.rs: New.\n+\t* rust/compile/torture/bom_whitespace.rs: New.\n+\t* rust/compile/torture/bools_eq.rs: New.\n+\t* rust/compile/torture/borrow1.rs: New.\n+\t* rust/compile/torture/borrow_function.rs: New.\n+\t* rust/compile/torture/break_function.rs: New.\n+\t* rust/compile/torture/byte_char_str.rs: New.\n+\t* rust/compile/torture/byte_str.rs: New.\n+\t* rust/compile/torture/cast1.rs: New.\n+\t* rust/compile/torture/cast2.rs: New.\n+\t* rust/compile/torture/cast3.rs: New.\n+\t* rust/compile/torture/cfg_attr.rs: New.\n+\t* rust/compile/torture/char1.rs: New.\n+\t* rust/compile/torture/check-doc-attr-string.rs: New.\n+\t* rust/compile/torture/coercion1.rs: New.\n+\t* rust/compile/torture/coercion2.rs: New.\n+\t* rust/compile/torture/comparison_expr1.rs: New.\n+\t* rust/compile/torture/compile.exp: New.\n+\t* rust/compile/torture/compound_assignment_expr1.rs: New.\n+\t* rust/compile/torture/conditional.rs: New.\n+\t* rust/compile/torture/constant1.rs: New.\n+\t* rust/compile/torture/constant2.rs: New.\n+\t* rust/compile/torture/constant3.rs: New.\n+\t* rust/compile/torture/deadcode1.rs: New.\n+\t* rust/compile/torture/deadcode2.rs: New.\n+\t* rust/compile/torture/deref1.rs: New.\n+\t* rust/compile/torture/deref_function.rs: New.\n+\t* rust/compile/torture/doc_comment.rs: New.\n+\t* rust/compile/torture/enum1.rs: New.\n+\t* rust/compile/torture/extern_mod1.rs: New.\n+\t* rust/compile/torture/extern_mod2.rs: New.\n+\t* rust/compile/torture/float1.rs: New.\n+\t* rust/compile/torture/float_types.rs: New.\n+\t* rust/compile/torture/forward_decl_1.rs: New.\n+\t* rust/compile/torture/forward_decl_2.rs: New.\n+\t* rust/compile/torture/forward_decl_3-unsafe.rs: New.\n+\t* rust/compile/torture/forward_decl_3.rs: New.\n+\t* rust/compile/torture/forward_decl_4.rs: New.\n+\t* rust/compile/torture/forward_decl_5.rs: New.\n+\t* rust/compile/torture/func1.rs: New.\n+\t* rust/compile/torture/func2.rs: New.\n+\t* rust/compile/torture/function_reference1.rs: New.\n+\t* rust/compile/torture/function_reference2.rs: New.\n+\t* rust/compile/torture/function_reference3.rs: New.\n+\t* rust/compile/torture/function_reference4.rs: New.\n+\t* rust/compile/torture/generics1.rs: New.\n+\t* rust/compile/torture/generics10.rs: New.\n+\t* rust/compile/torture/generics11.rs: New.\n+\t* rust/compile/torture/generics12.rs: New.\n+\t* rust/compile/torture/generics13.rs: New.\n+\t* rust/compile/torture/generics14.rs: New.\n+\t* rust/compile/torture/generics15.rs: New.\n+\t* rust/compile/torture/generics16.rs: New.\n+\t* rust/compile/torture/generics17.rs: New.\n+\t* rust/compile/torture/generics18.rs: New.\n+\t* rust/compile/torture/generics19.rs: New.\n+\t* rust/compile/torture/generics2.rs: New.\n+\t* rust/compile/torture/generics20.rs: New.\n+\t* rust/compile/torture/generics21.rs: New.\n+\t* rust/compile/torture/generics22.rs: New.\n+\t* rust/compile/torture/generics23.rs: New.\n+\t* rust/compile/torture/generics24.rs: New.\n+\t* rust/compile/torture/generics25.rs: New.\n+\t* rust/compile/torture/generics26.rs: New.\n+\t* rust/compile/torture/generics27.rs: New.\n+\t* rust/compile/torture/generics28.rs: New.\n+\t* rust/compile/torture/generics29.rs: New.\n+\t* rust/compile/torture/generics3.rs: New.\n+\t* rust/compile/torture/generics30.rs: New.\n+\t* rust/compile/torture/generics31.rs: New.\n+\t* rust/compile/torture/generics32.rs: New.\n+\t* rust/compile/torture/generics4.rs: New.\n+\t* rust/compile/torture/generics5.rs: New.\n+\t* rust/compile/torture/generics6.rs: New.\n+\t* rust/compile/torture/generics7.rs: New.\n+\t* rust/compile/torture/generics8.rs: New.\n+\t* rust/compile/torture/generics9.rs: New.\n+\t* rust/compile/torture/grouped_expr_function.rs: New.\n+\t* rust/compile/torture/identifier-missing-impl-1.rs: New.\n+\t* rust/compile/torture/if.rs: New.\n+\t* rust/compile/torture/if_elif.rs: New.\n+\t* rust/compile/torture/if_elif_else_expr1.rs: New.\n+\t* rust/compile/torture/if_else.rs: New.\n+\t* rust/compile/torture/ifunaryexpr.rs: New.\n+\t* rust/compile/torture/impl_block1.rs: New.\n+\t* rust/compile/torture/impl_block2.rs: New.\n+\t* rust/compile/torture/impl_block3.rs: New.\n+\t* rust/compile/torture/impl_block_unused.rs: New.\n+\t* rust/compile/torture/implicit_returns1.rs: New.\n+\t* rust/compile/torture/infer_type1.rs: New.\n+\t* rust/compile/torture/inner_attributes.rs: New.\n+\t* rust/compile/torture/integer_inference_var1.rs: New.\n+\t* rust/compile/torture/integer_inference_var2.rs: New.\n+\t* rust/compile/torture/integer_inference_var3.rs: New.\n+\t* rust/compile/torture/integer_inference_var4.rs: New.\n+\t* rust/compile/torture/integer_inference_var5.rs: New.\n+\t* rust/compile/torture/integer_types.rs: New.\n+\t* rust/compile/torture/intrinsics-1.rs: New.\n+\t* rust/compile/torture/intrinsics-2.rs: New.\n+\t* rust/compile/torture/isolated_cr_block_comment.rs: New.\n+\t* rust/compile/torture/isolated_cr_line_comment.rs: New.\n+\t* rust/compile/torture/issue-1024.rs: New.\n+\t* rust/compile/torture/issue-1075.rs: New.\n+\t* rust/compile/torture/issue-1432.rs: New.\n+\t* rust/compile/torture/issue-1434.rs: New.\n+\t* rust/compile/torture/issue-368.rs: New.\n+\t* rust/compile/torture/issue-808.rs: New.\n+\t* rust/compile/torture/issue-862.rs: New.\n+\t* rust/compile/torture/issue-893-2.rs: New.\n+\t* rust/compile/torture/issue-893.rs: New.\n+\t* rust/compile/torture/lazybooleanexpr_function.rs: New.\n+\t* rust/compile/torture/lifetime1.rs: New.\n+\t* rust/compile/torture/literals1.rs: New.\n+\t* rust/compile/torture/loop1.rs: New.\n+\t* rust/compile/torture/loop2.rs: New.\n+\t* rust/compile/torture/loop3.rs: New.\n+\t* rust/compile/torture/loop4.rs: New.\n+\t* rust/compile/torture/loop5.rs: New.\n+\t* rust/compile/torture/loop6.rs: New.\n+\t* rust/compile/torture/loop7.rs: New.\n+\t* rust/compile/torture/macro-issue1403.rs: New.\n+\t* rust/compile/torture/macro-issue1426.rs: New.\n+\t* rust/compile/torture/macro_as_expr.rs: New.\n+\t* rust/compile/torture/match1.rs: New.\n+\t* rust/compile/torture/methods1.rs: New.\n+\t* rust/compile/torture/methods2.rs: New.\n+\t* rust/compile/torture/methods3.rs: New.\n+\t* rust/compile/torture/mod-nameresolve.rs: New.\n+\t* rust/compile/torture/mod1.rs: New.\n+\t* rust/compile/torture/mod2.rs: New.\n+\t* rust/compile/torture/mod3.rs: New.\n+\t* rust/compile/torture/modules/mod.rs: New.\n+\t* rust/compile/torture/modules/valid_path.rs: New.\n+\t* rust/compile/torture/must_use1.rs: New.\n+\t* rust/compile/torture/must_use2.rs: New.\n+\t* rust/compile/torture/name_resolve1.rs: New.\n+\t* rust/compile/torture/negation_function.rs: New.\n+\t* rust/compile/torture/nested_fn1.rs: New.\n+\t* rust/compile/torture/nested_fn2.rs: New.\n+\t* rust/compile/torture/nested_struct1.rs: New.\n+\t* rust/compile/torture/never_type1.rs: New.\n+\t* rust/compile/torture/not_shebang.rs: New.\n+\t* rust/compile/torture/not_shebang_block_comment.rs: New.\n+\t* rust/compile/torture/not_shebang_comment.rs: New.\n+\t* rust/compile/torture/not_shebang_multiline_comment.rs: New.\n+\t* rust/compile/torture/not_shebang_spaces.rs: New.\n+\t* rust/compile/torture/parameter_usage1.rs: New.\n+\t* rust/compile/torture/parens1.rs: New.\n+\t* rust/compile/torture/pointer1.rs: New.\n+\t* rust/compile/torture/primconsts.rs: New.\n+\t* rust/compile/torture/prims_struct_eq.rs: New.\n+\t* rust/compile/torture/range-lang-item1.rs: New.\n+\t* rust/compile/torture/raw_identifiers.rs: New.\n+\t* rust/compile/torture/raw_identifiers_keywords.rs: New.\n+\t* rust/compile/torture/recursive_fn1.rs: New.\n+\t* rust/compile/torture/return_function.rs: New.\n+\t* rust/compile/torture/scoping1.rs: New.\n+\t* rust/compile/torture/self_type1.rs: New.\n+\t* rust/compile/torture/shadow1.rs: New.\n+\t* rust/compile/torture/shadow2.rs: New.\n+\t* rust/compile/torture/shebang.rs: New.\n+\t* rust/compile/torture/shebang_plus_attr.rs: New.\n+\t* rust/compile/torture/shebang_plus_attr2.rs: New.\n+\t* rust/compile/torture/static_function.rs: New.\n+\t* rust/compile/torture/static_var1.rs: New.\n+\t* rust/compile/torture/stmt_with_block1.rs: New.\n+\t* rust/compile/torture/str1.rs: New.\n+\t* rust/compile/torture/struct_access1.rs: New.\n+\t* rust/compile/torture/struct_base_init_1.rs: New.\n+\t* rust/compile/torture/struct_decl.rs: New.\n+\t* rust/compile/torture/struct_init.rs: New.\n+\t* rust/compile/torture/struct_init_10.rs: New.\n+\t* rust/compile/torture/struct_init_11.rs: New.\n+\t* rust/compile/torture/struct_init_2.rs: New.\n+\t* rust/compile/torture/struct_init_3.rs: New.\n+\t* rust/compile/torture/struct_init_4.rs: New.\n+\t* rust/compile/torture/struct_init_5.rs: New.\n+\t* rust/compile/torture/struct_init_6.rs: New.\n+\t* rust/compile/torture/struct_init_7.rs: New.\n+\t* rust/compile/torture/struct_init_8.rs: New.\n+\t* rust/compile/torture/struct_init_9.rs: New.\n+\t* rust/compile/torture/top_attr.rs: New.\n+\t* rust/compile/torture/traits1.rs: New.\n+\t* rust/compile/torture/traits10.rs: New.\n+\t* rust/compile/torture/traits11.rs: New.\n+\t* rust/compile/torture/traits12.rs: New.\n+\t* rust/compile/torture/traits13.rs: New.\n+\t* rust/compile/torture/traits14.rs: New.\n+\t* rust/compile/torture/traits15.rs: New.\n+\t* rust/compile/torture/traits16.rs: New.\n+\t* rust/compile/torture/traits17.rs: New.\n+\t* rust/compile/torture/traits18.rs: New.\n+\t* rust/compile/torture/traits19.rs: New.\n+\t* rust/compile/torture/traits2.rs: New.\n+\t* rust/compile/torture/traits3.rs: New.\n+\t* rust/compile/torture/traits4.rs: New.\n+\t* rust/compile/torture/traits5.rs: New.\n+\t* rust/compile/torture/traits6.rs: New.\n+\t* rust/compile/torture/traits7.rs: New.\n+\t* rust/compile/torture/traits8.rs: New.\n+\t* rust/compile/torture/traits9.rs: New.\n+\t* rust/compile/torture/transmute-size-check-1.rs: New.\n+\t* rust/compile/torture/transmute1.rs: New.\n+\t* rust/compile/torture/tuple1.rs: New.\n+\t* rust/compile/torture/tuple2.rs: New.\n+\t* rust/compile/torture/tuple3.rs: New.\n+\t* rust/compile/torture/tuple_enum_variants.rs: New.\n+\t* rust/compile/torture/tuple_field_access.rs: New.\n+\t* rust/compile/torture/tuple_function.rs: New.\n+\t* rust/compile/torture/tuple_index.rs: New.\n+\t* rust/compile/torture/tuple_struct1.rs: New.\n+\t* rust/compile/torture/tuple_struct2.rs: New.\n+\t* rust/compile/torture/tuple_struct_unit.rs: New.\n+\t* rust/compile/torture/tuple_struct_unused.rs: New.\n+\t* rust/compile/torture/type-alias1.rs: New.\n+\t* rust/compile/torture/type-alias2.rs: New.\n+\t* rust/compile/torture/type_infer1.rs: New.\n+\t* rust/compile/torture/type_infer2.rs: New.\n+\t* rust/compile/torture/type_infer3.rs: New.\n+\t* rust/compile/torture/type_infer4.rs: New.\n+\t* rust/compile/torture/type_infer5.rs: New.\n+\t* rust/compile/torture/type_infer6.rs: New.\n+\t* rust/compile/torture/unary_operators.rs: New.\n+\t* rust/compile/torture/undended-string-1.rs: New.\n+\t* rust/compile/torture/undended-string-2.rs: New.\n+\t* rust/compile/torture/underscore_id.rs: New.\n+\t* rust/compile/torture/union.rs: New.\n+\t* rust/compile/torture/union_union.rs: New.\n+\t* rust/compile/torture/unit_type1.rs: New.\n+\t* rust/compile/torture/unit_type2.rs: New.\n+\t* rust/compile/torture/unit_type3.rs: New.\n+\t* rust/compile/torture/unit_type4.rs: New.\n+\t* rust/compile/torture/unit_type5.rs: New.\n+\t* rust/compile/torture/unsafe1.rs: New.\n+\t* rust/compile/torture/unsafe2.rs: New.\n+\t* rust/compile/torture/unsafe3.rs: New.\n+\t* rust/compile/torture/unsafe4.rs: New.\n+\t* rust/compile/torture/unused.rs: New.\n+\t* rust/compile/torture/unused1.rs: New.\n+\t* rust/compile/torture/unused_struct.rs: New.\n+\t* rust/compile/torture/unused_struct_field.rs: New.\n+\t* rust/compile/torture/usize1.rs: New.\n+\t* rust/compile/torture/very-broken-attr-string.rs: New.\n+\t* rust/compile/torture/while_function.rs: New.\n+\t* rust/compile/traits1.rs: New.\n+\t* rust/compile/traits10.rs: New.\n+\t* rust/compile/traits11.rs: New.\n+\t* rust/compile/traits12.rs: New.\n+\t* rust/compile/traits2.rs: New.\n+\t* rust/compile/traits3.rs: New.\n+\t* rust/compile/traits4.rs: New.\n+\t* rust/compile/traits5.rs: New.\n+\t* rust/compile/traits6.rs: New.\n+\t* rust/compile/traits7.rs: New.\n+\t* rust/compile/traits8.rs: New.\n+\t* rust/compile/traits9.rs: New.\n+\t* rust/compile/tuple1.rs: New.\n+\t* rust/compile/tuple_struct1.rs: New.\n+\t* rust/compile/tuple_struct2.rs: New.\n+\t* rust/compile/tuple_struct3.rs: New.\n+\t* rust/compile/type-alias1.rs: New.\n+\t* rust/compile/type-bindings1.rs: New.\n+\t* rust/compile/unary_negation.rs: New.\n+\t* rust/compile/unary_not.rs: New.\n+\t* rust/compile/unconstrained_type_param.rs: New.\n+\t* rust/compile/unicode_escape.rs: New.\n+\t* rust/compile/unsafe1.rs: New.\n+\t* rust/compile/unsafe10.rs: New.\n+\t* rust/compile/unsafe2.rs: New.\n+\t* rust/compile/unsafe3.rs: New.\n+\t* rust/compile/unsafe4.rs: New.\n+\t* rust/compile/unsafe5.rs: New.\n+\t* rust/compile/unsafe6.rs: New.\n+\t* rust/compile/unsafe7.rs: New.\n+\t* rust/compile/unsafe8.rs: New.\n+\t* rust/compile/unsafe9.rs: New.\n+\t* rust/compile/unterminated_c_comment.rs: New.\n+\t* rust/compile/use_1.rs: New.\n+\t* rust/compile/usize1.rs: New.\n+\t* rust/compile/xfail/lifetime_param.rs: New.\n+\t* rust/compile/xfail/struct_field_vis.rs: New.\n+\t* rust/compile/xfail/xfail.exp: New.\n+\t* rust/compile/rawbytestring.rs: New file.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/link/generic_function_0.rs: New.\n+\t* rust/link/generic_function_1.rs: New.\n+\t* rust/link/link.exp: New.\n+\t* rust/link/simple_function_0.rs: New.\n+\t* rust/link/simple_function_1.rs: New.\n+\t* rust/link/trait_import_0.rs: New.\n+\t* rust/link/trait_import_1.rs: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\t    Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* rust/debug/chartype.rs: New.\n+\t* rust/debug/custom_link_section.rs: New.\n+\t* rust/debug/debug.exp: New.\n+\t* rust/debug/i8u8.rs: New.\n+\t* rust/debug/lang.rs: New.\n+\t* rust/debug/no_mangle.rs: New.\n+\t* rust/debug/oldlang.rs: New.\n+\t* rust/debug/tuple.rs: New.\n+\t* rust/debug/win64-abi.rs: New.\n+\n+2022-12-13  Philip Herron  <philip.herron@embecosm.com>\n+\t    Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/rust-dg.exp: New.\n+\t* lib/rust.exp: New.\n+\n+2022-12-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108076\n+\t* gcc.dg/torture/pr108076.c: New testcase.\n+\n+2022-12-13  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/cbranchcc4-1.c: New.\n+\t* gcc.target/powerpc/cbranchcc4-2.c: New.\n+\n 2022-12-12  Jason Merrill  <jason@redhat.com>\n \n \tRevert:"}, {"sha": "b2a765c229a2bde357ce013898a79aa587bfc986", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,8 @@\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/108072\n+\t* libbacktrace/backtrace-rename.h (backtrace_uncompress_zstd): Define.\n+\n 2022-12-09  liuhongt  <hongtao.liu@intel.com>\n \n \t* configure.tgt: Enable hwasan for x86-64."}, {"sha": "bf77f8073f865a9b24c32298ecd6667f494884c4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17ddf2c484427e6ddfd994b62fefcdac27ac02f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "patch": "@@ -1,3 +1,8 @@\n+2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* src/libbacktrace/backtrace-rename.h (backtrace_uncompress_zstd):\n+\tDefine.\n+\n 2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/duration/arithmetic/overflow_c++20.cc: New"}]}