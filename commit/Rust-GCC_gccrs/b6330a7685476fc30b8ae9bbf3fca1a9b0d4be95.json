{"sha": "b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "node_id": "C_kwDOANBUbNoAKGI2MzMwYTc2ODU0NzZmYzMwYjhhZTliYmYzZmNhMWE5YjBkNGJlOTU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-24T10:29:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-24T10:29:54Z"}, "message": "asan: Fix up error recovery for too large frames [PR107317]\n\nasan_emit_stack_protection and functions it calls have various asserts that\nverify sanity of the stack protection instrumentation.  But, that\nverification can easily fail if we've diagnosed a frame offset overflow.\nasan_emit_stack_protection just emits some extra code in the prologue,\nif we've reported errors, we aren't producing assembly, so it doesn't\nreally matter if we don't include the protection code, compilation\nis going to fail anyway.\n\n2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/107317\n\t* asan.cc: Include diagnostic-core.h.\n\t(asan_emit_stack_protection): Return NULL early if seen_error ().\n\n\t* gcc.dg/asan/pr107317.c: New test.", "tree": {"sha": "138f2e04002ea9258936ceb760f83e8eb149f3c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138f2e04002ea9258936ceb760f83e8eb149f3c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f77aa6b2f04781faa78373add11538d276c8ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f77aa6b2f04781faa78373add11538d276c8ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f77aa6b2f04781faa78373add11538d276c8ae4"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "dc7b7f4bcf1803dd2ffbbaad782cf1b515d61ed8", "filename": "gcc/asan.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-ssa.h\"\n #include \"tree-eh.h\"\n+#include \"diagnostic-core.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -1818,6 +1819,11 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n   tree str_cst, decl, id;\n   int use_after_return_class = -1;\n \n+  /* Don't emit anything when doing error recovery, the assertions\n+     might fail e.g. if a function had a frame offset overflow.  */\n+  if (seen_error ())\n+    return NULL;\n+\n   if (shadow_ptr_types[0] == NULL_TREE)\n     asan_init_shadow_ptr_types ();\n "}, {"sha": "dd7ad7d24496f2298ebef01b6da0a76b763bb5ba", "filename": "gcc/testsuite/gcc.dg/asan/pr107317.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr107317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr107317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr107317.c?ref=b6330a7685476fc30b8ae9bbf3fca1a9b0d4be95", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/107317 */\n+/* { dg-do compile { target ilp32 } } */\n+/* { dg-options \"-fsanitize=address -ffat-lto-objects\" } */\n+\n+void bar (float *, float *);\n+\n+void\n+foo (void)\t\t/* { dg-error \"exceeds maximum\" } */\n+{\n+  float a[400000000];\n+  float b[200000000];\n+  bar (a, b);\n+}"}]}