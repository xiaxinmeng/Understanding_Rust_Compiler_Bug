{"sha": "efa129331c5ceb9937c990f45f3bfd447cbe290e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhMTI5MzMxYzVjZWI5OTM3Yzk5MGY0NWYzYmZkNDQ3Y2JlMjkwZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-07-17T08:03:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:03:49Z"}, "message": "[Ada] Fix handling of inherited discriminant constraints\n\n2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Gather_Components): A discriminant of an ancestor may\n\thave been constrained by a later ancestor, so when looking for the\n\tvalue of that hidden discriminant we must examine the stored constraint\n\tof other ancestors than the immediate parent type.\n\ngcc/testsuite/\n\n\t* gnat.dg/discr54.adb, gnat.dg/discr54_pkg.ads: New testcase.\n\nFrom-SVN: r262767", "tree": {"sha": "fb1825688c2011f39a4dc73eb1dae94e9810d05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb1825688c2011f39a4dc73eb1dae94e9810d05c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa129331c5ceb9937c990f45f3bfd447cbe290e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa129331c5ceb9937c990f45f3bfd447cbe290e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa129331c5ceb9937c990f45f3bfd447cbe290e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa129331c5ceb9937c990f45f3bfd447cbe290e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a4f3b312e2aa6016963a6befc986b93465be968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f3b312e2aa6016963a6befc986b93465be968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4f3b312e2aa6016963a6befc986b93465be968"}], "stats": {"total": 179, "additions": 158, "deletions": 21}, "files": [{"sha": "ad067f641e2617b0329470689d23e4f5f448b8d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efa129331c5ceb9937c990f45f3bfd447cbe290e", "patch": "@@ -1,3 +1,10 @@\n+2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Gather_Components): A discriminant of an ancestor may\n+\thave been constrained by a later ancestor, so when looking for the\n+\tvalue of that hidden discriminant we must examine the stored constraint\n+\tof other ancestors than the immediate parent type.\n+\n 2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb (Build_Heap_Or_Pool_Allocator): Ensure that scoping"}, {"sha": "2b96ce84b0415f3681da90d1b7e8cde8b5f83b0f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=efa129331c5ceb9937c990f45f3bfd447cbe290e", "patch": "@@ -8805,7 +8805,6 @@ package body Sem_Util is\n          if No (Next (Assoc)) then\n             if not Is_Constrained (Typ)\n               and then Is_Derived_Type (Typ)\n-              and then Present (Stored_Constraint (Typ))\n             then\n                --  If the type is a tagged type with inherited discriminants,\n                --  use the stored constraint on the parent in order to find\n@@ -8819,35 +8818,48 @@ package body Sem_Util is\n                --  of them. We recover the constraint on the others from the\n                --  Stored_Constraint as well.\n \n+               --  An inherited discriminant may have been constrained in a\n+               --  later ancestor (no the immediate parent) so we must examine\n+               --  the stored constraint of all of them to locate the inherited\n+               --  value.\n+\n                declare\n                   D : Entity_Id;\n                   C : Elmt_Id;\n+                  T : Entity_Id := Typ;\n \n                begin\n-                  D := First_Discriminant (Etype (Typ));\n-                  C := First_Elmt (Stored_Constraint (Typ));\n-                  while Present (D) and then Present (C) loop\n-                     if Chars (Discrim_Name) = Chars (D) then\n-                        if Is_Entity_Name (Node (C))\n-                          and then Entity (Node (C)) = Entity (Discrim)\n-                        then\n-                           --  D is renamed by Discrim, whose value is given in\n-                           --  Assoc.\n+                  while Is_Derived_Type (T) loop\n+                     if Present (Stored_Constraint (T)) then\n+                        D := First_Discriminant (Etype (T));\n+                        C := First_Elmt (Stored_Constraint (T));\n+                        while Present (D) and then Present (C) loop\n+                           if Chars (Discrim_Name) = Chars (D) then\n+                              if Is_Entity_Name (Node (C))\n+                                and then Entity (Node (C)) = Entity (Discrim)\n+                              then\n+                                 --  D is renamed by Discrim, whose value is\n+                                 --  given in Assoc.\n \n-                           null;\n+                                 null;\n \n-                        else\n-                           Assoc :=\n-                             Make_Component_Association (Sloc (Typ),\n-                               New_List\n-                                 (New_Occurrence_Of (D, Sloc (Typ))),\n-                                  Duplicate_Subexpr_No_Checks (Node (C)));\n-                        end if;\n-                        exit Find_Constraint;\n+                              else\n+                                 Assoc :=\n+                                   Make_Component_Association (Sloc (Typ),\n+                                     New_List\n+                                       (New_Occurrence_Of (D, Sloc (Typ))),\n+                                     Duplicate_Subexpr_No_Checks (Node (C)));\n+                              end if;\n+                              exit Find_Constraint;\n+                           end if;\n+\n+                           Next_Discriminant (D);\n+                           Next_Elmt (C);\n+                        end loop;\n                      end if;\n \n-                     Next_Discriminant (D);\n-                     Next_Elmt (C);\n+                     --  Discriminant may be inherited from ancestor.\n+                     T := Etype (T);\n                   end loop;\n                end;\n             end if;"}, {"sha": "39caa2f7776ff371b51fdd7b45ccf122301acebf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efa129331c5ceb9937c990f45f3bfd447cbe290e", "patch": "@@ -1,3 +1,7 @@\n+2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/discr54.adb, gnat.dg/discr54_pkg.ads: New testcase.\n+\n 2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/bip_case_expr.adb, gnat.dg/bip_case_expr_pkg.ads: New testcase."}, {"sha": "a16e75c81df472275b12fa549079ee01d8bf9467", "filename": "gcc/testsuite/gnat.dg/discr54.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54.adb?ref=efa129331c5ceb9937c990f45f3bfd447cbe290e", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do compile }\n+\n+with Discr54_Pkg;\n+pragma Unreferenced (Discr54_Pkg);\n+\n+procedure Discr54 is\n+begin\n+   null;\n+end Discr54;"}, {"sha": "8238258525113f2b866cb7a2c1ae38f32d9604a7", "filename": "gcc/testsuite/gnat.dg/discr54_pkg.ads", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa129331c5ceb9937c990f45f3bfd447cbe290e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr54_pkg.ads?ref=efa129331c5ceb9937c990f45f3bfd447cbe290e", "patch": "@@ -0,0 +1,105 @@\n+package Discr54_Pkg is\n+\n+  type E_TYPE is (A_KIND, B_KIND, C_KIND, X_KIND);\n+\n+  type DR0 (V : E_TYPE) is tagged\n+    record\n+      I0 : INTEGER;\n+      case V is\n+        when A_KIND | B_KIND =>\n+          I1 : INTEGER;\n+          I2 : INTEGER;\n+        when C_KIND | X_KIND =>\n+          I3 : INTEGER;\n+      end case;\n+    end record;\n+\n+  type DN1 is new DR0 (V => A_KIND) with\n+    record\n+      I4 : INTEGER;\n+      I5 : INTEGER;\n+    end record;\n+\n+  type DR1 (W : E_TYPE) is new DR0 (V => A_KIND) with\n+    record\n+      I4 : INTEGER;\n+      case W is\n+        when A_KIND | B_KIND =>\n+          I5 : INTEGER;\n+        when C_KIND | X_KIND =>\n+          I6 : INTEGER;\n+      end case;\n+    end record;\n+\n+  type DD1 (W : E_TYPE; V : E_TYPE) is new DR0 (V => V) with\n+    record\n+      I4 : INTEGER;\n+      case W is\n+        when A_KIND | B_KIND =>\n+          I5 : INTEGER;\n+        when C_KIND | X_KIND =>\n+          I6 : INTEGER;\n+      end case;\n+    end record;\n+\n+  type DR2 is new DR1 (W => A_KIND) with\n+    record\n+      I7 : INTEGER;\n+    end record;\n+\n+  V0 : constant DR0 := DR0'(I0 => 0,\n+                            V  => A_KIND,\n+                            I1 => 0,\n+                            I2 => 0\n+                           );\n+\n+  N1 : constant DN1 := DN1'(V  => A_KIND,\n+                            I0 => 0,\n+                            I1 => 0,\n+                            I2 => 0,\n+                            I4 => 0,\n+                            I5 => 0);\n+\n+  N2 : constant DN1 := DN1'(V  => A_KIND,\n+                            I0 => 0,\n+                            I1 => 0,\n+                            I2 => 0,\n+                            I4 => 0,\n+                            I5 => 0);\n+\n+  D1 : constant DD1 := DD1'(W  => A_KIND,\n+                            V  => A_KIND,\n+                            I0 => 0,\n+                            I1 => 0,\n+                            I2 => 0,\n+                            I4 => 0,\n+                            I5 => 0);\n+\n+  V1 : constant DR1 := DR1'(W  => A_KIND,\n+                            I0 => 0,\n+                            I1 => 0,\n+                            I2 => 0,\n+                            I4 => 0,\n+                            I5 => 0);\n+\n+  V3 : constant DR2 := DR2'(V1 with I7 => 0);\n+  V2 : constant DR2 := DR2'(\n+                            --  V  => A_KIND,  --  needed???\n+                            W  => A_KIND,\n+                            I0 => 0,\n+                            I1 => 1,\n+                            I2 => 2,\n+                            I4 => 4,\n+                            I5 => 5,\n+                            I7 => 7);\n+\n+  pragma Assert (\n+      V2.I0 = 0\n+    and then V2.I1 = 1\n+    and then V2.I1 = 1\n+    and then V2.I2 = 2\n+    and then V2.I4 = 4\n+    and then V2.I5 = 5\n+    and then V2.I7 = 1);\n+\n+end Discr54_Pkg;"}]}