{"sha": "1717ec59158d5250140e479fd0fa5e57bc67f4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxN2VjNTkxNThkNTI1MDE0MGU0NzlmZDBmYTVlNTdiYzY3ZjRlNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:58:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:58:41Z"}, "message": "(__objc_thread_detach_function): Clear thread storage.\n\nCall the thread hook function when first becoming multi-threaded.\n(objc_set_thread_callback): New function.\n\nFrom-SVN: r12261", "tree": {"sha": "41baa21e6835af1de32d82ac3d7d64bd4ae2df90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41baa21e6835af1de32d82ac3d7d64bd4ae2df90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1717ec59158d5250140e479fd0fa5e57bc67f4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1717ec59158d5250140e479fd0fa5e57bc67f4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1717ec59158d5250140e479fd0fa5e57bc67f4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1717ec59158d5250140e479fd0fa5e57bc67f4e6/comments", "author": null, "committer": null, "parents": [{"sha": "f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "524723339cacd15e7bf67a08c69da7db1f28aee5", "filename": "gcc/objc/thr.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1717ec59158d5250140e479fd0fa5e57bc67f4e6/gcc%2Fobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1717ec59158d5250140e479fd0fa5e57bc67f4e6/gcc%2Fobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr.c?ref=1717ec59158d5250140e479fd0fa5e57bc67f4e6", "patch": "@@ -32,10 +32,34 @@ Boston, MA 02111-1307, USA.  */\n  */\n int     __objc_thread_exit_status = 0;          /* Global exit status.      */\n \n+/* Flag which lets us know if we ever became multi threaded */\n+int __objc_is_multi_threaded = 0;\n+/* The hook function called when the runtime becomes multi threaded */\n+objc_thread_callback _objc_became_multi_threaded = NULL;\n+\n /*****************************************************************************\n  *  Universal Functionality\n  */\n \n+/*\n+  Use this to set the hook function that will be called when the \n+  runtime initially becomes multi threaded.\n+  The hook function is only called once, meaning only when the \n+  2nd thread is spawned, not for each and every thread.\n+\n+  It returns the previous hook function or NULL if there is none.\n+\n+  A program outside of the runtime could set this to some function so\n+  it can be informed; for example, the GNUstep Base Library sets it \n+  so it can implement the NSBecomingMultiThreaded notification.\n+  */\n+objc_thread_callback objc_set_thread_callback(objc_thread_callback func)\n+{\n+  objc_thread_callback temp = _objc_became_multi_threaded;\n+  _objc_became_multi_threaded = func;\n+  return temp;\n+}\n+\n /********\n  *  First function called in a thread, starts everything else.\n  */\n@@ -57,6 +81,18 @@ __objc_thread_detach_function(struct __objc_thread_start_state *istate)\n \n         free(istate);\n \n+\t/* Clear out the thread local storage */\n+\tobjc_thread_set_data(NULL);\n+\n+\t/* Check to see if we just became multi threaded */\n+\tif (!__objc_is_multi_threaded) {\n+\t  __objc_is_multi_threaded = 1;\n+\n+\t  /* Call the hook function */\n+\t  if (_objc_became_multi_threaded != NULL)\n+\t    (*_objc_became_multi_threaded)();\n+\t}\n+\n         if ((imp = (id(*)(id, SEL, id))objc_msg_lookup(object, selector))) {\n             (*imp)(object, selector, argument);\n         }\n@@ -93,6 +129,7 @@ objc_thread_detach(SEL selector, id object, id argument)\n     free(istate);                           /* Release state if failed.   */\n     return thread_id;\n   }\n+\n   return thread_id;\n }\n "}]}