{"sha": "3af52023d752c432b9ef7e90d8c75576efebf7ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmNTIwMjNkNzUyYzQzMmI5ZWY3ZTkwZDhjNzU1NzZlZmViZjdhYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-07-07T20:04:05Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-07-07T20:04:05Z"}, "message": "re PR fortran/61459 (segfault when assigning to allocatable function result from matmul result)\n\n2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/61459\n\tPR fortran/58883\n\t* trans-expr.c (fcncall_realloc_result): Use the natural type\n\tfor the address expression of 'res_desc'.\n\n2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/61459\n\tPR fortran/58883\n\t* gfortran.dg/allocatable_function_8.f90 : New test\n\nFrom-SVN: r212339", "tree": {"sha": "a2bc4f9a4d4060ebbf286b8fe2fc12faa345bf3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2bc4f9a4d4060ebbf286b8fe2fc12faa345bf3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af52023d752c432b9ef7e90d8c75576efebf7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af52023d752c432b9ef7e90d8c75576efebf7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af52023d752c432b9ef7e90d8c75576efebf7ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af52023d752c432b9ef7e90d8c75576efebf7ab/comments", "author": null, "committer": null, "parents": [{"sha": "72732f3ef0f08c0547228a295c1f3a00907d061b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72732f3ef0f08c0547228a295c1f3a00907d061b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72732f3ef0f08c0547228a295c1f3a00907d061b"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "4d9f0c3ce26643f559807613b4d8d2129fc8b851", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3af52023d752c432b9ef7e90d8c75576efebf7ab", "patch": "@@ -1,3 +1,10 @@\n+2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/61459\n+\tPR fortran/58883\n+\t* trans-expr.c (fcncall_realloc_result): Use the natural type\n+\tfor the address expression of 'res_desc'.\n+\n 2014-07-07  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* gfortran.texi (Fortran 2003 status): Fix grammar.\n@@ -8,7 +15,7 @@\n \t* trans-array.c (gfc_conv_descriptor_token): Change assert.\n \tfor select-type temporaries.\n \t* trans-decl.c (generate_coarray_sym_init): Skip for\n-\tattr.select_type_temporary. \n+\tattr.select_type_temporary.\n \t* trans-expr.c (gfc_conv_procedure_call): Fix for\n \tselect-type temporaries.\n \t* trans-intrinsic.c (get_caf_token_offset): Ditto.\n@@ -18,7 +25,7 @@\n \t* trans-types.c (gfc_get_dtype_rank_type): Ditto.\n \n 2014-07-03  Tobias Burnus  <burnus@net-b.de>\n-\t\n+\n \t* scanner.c (skip_free_comments): Fix indentation.\n \n 2014-07-02  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "81f213711775d83a57812c3581b7e8f35e96090b", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3af52023d752c432b9ef7e90d8c75576efebf7ab", "patch": "@@ -6518,7 +6518,7 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n \n       tmp = build_fold_indirect_ref_loc (input_location, se->expr);\n       tmp = gfc_deallocate_alloc_comp (expr->ts.u.derived, tmp, expr->rank);\n-      \n+\n       /* The components shall be deallocated before\n          their containing entity.  */\n       gfc_prepend_expr_to_block (&se->post, tmp);\n@@ -7302,7 +7302,7 @@ fcncall_realloc_result (gfc_se *se, int rank)\n \n   res_desc = gfc_evaluate_now (desc, &se->pre);\n   gfc_conv_descriptor_data_set (&se->pre, res_desc, null_pointer_node);\n-  se->expr = gfc_build_addr_expr (TREE_TYPE (se->expr), res_desc);\n+  se->expr = gfc_build_addr_expr (NULL_TREE, res_desc);\n \n   /* Free the lhs after the function call and copy the result data to\n      the lhs descriptor.  */"}, {"sha": "2b5e354d79a42e57f742076a23cc5f40d0472ba8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3af52023d752c432b9ef7e90d8c75576efebf7ab", "patch": "@@ -1,3 +1,9 @@\n+2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/61459\n+\tPR fortran/58883\n+\t* gfortran.dg/allocatable_function_8.f90 : New test\n+\n 2014-07-07  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* gcc.target/powerpc/spe-evmerge.c: New file."}, {"sha": "48f6dd2165797a719543ddda8968b8b7e9969ddf", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_8.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af52023d752c432b9ef7e90d8c75576efebf7ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90?ref=3af52023d752c432b9ef7e90d8c75576efebf7ab", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do run }\n+! Test the fix for PR61459 and PR58883.\n+!\n+! Contributed by John Wingate  <johnww@tds.net>\n+!             and Tao Song  <songtao.thu@gmail.com>\n+!\n+module a\n+\n+   implicit none\n+   private\n+   public :: f_segfault, f_segfault_plus, f_workaround\n+   integer, dimension(2,2) :: b = reshape([1,-1,1,1],[2,2])\n+\n+contains\n+\n+   function f_segfault(x)\n+      real, dimension(:), allocatable :: f_segfault\n+      real, dimension(:), intent(in)  :: x\n+      allocate(f_segfault(2))\n+      f_segfault = matmul(b,x)\n+   end function f_segfault\n+\n+! Sefaulted without the ALLOCATE as well.\n+   function f_segfault_plus(x)\n+      real, dimension(:), allocatable :: f_segfault_plus\n+      real, dimension(:), intent(in)  :: x\n+      f_segfault_plus = matmul(b,x)\n+   end function f_segfault_plus\n+\n+   function f_workaround(x)\n+      real, dimension(:), allocatable :: f_workaround\n+      real, dimension(:), intent(in)  :: x\n+      real, dimension(:), allocatable :: tmp\n+      allocate(f_workaround(2),tmp(2))\n+      tmp = matmul(b,x)\n+      f_workaround = tmp\n+   end function f_workaround\n+\n+end module a\n+\n+program main\n+   use a\n+   implicit none\n+   real, dimension(2) :: x = 1.0, y\n+! PR61459\n+   y = f_workaround (x)\n+   if (any (f_segfault (x) .ne. y)) call abort\n+   if (any (f_segfault_plus (x) .ne. y)) call abort\n+! PR58883\n+   if (any (foo () .ne. reshape([1,2,3,4,5,6,7,8],[2,4]))) call abort\n+contains\n+  function foo()\n+    integer, allocatable  :: foo(:,:)\n+    integer, allocatable  :: temp(:)\n+\n+    temp = [1,2,3,4,5,6,7,8]\n+    foo = reshape(temp,[2,4])\n+  end function\n+end program main"}]}