{"sha": "62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiZjQ1YTVhMGYxYjk4MWZhMDc4Mzg2ZTZlZTdjYWY1YTdmNjEyYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-09-07T08:19:32Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-09-07T08:19:32Z"}, "message": "re PR target/27117 (SH backend cheats to reload -- disables indexed addressing but uses it internally)\n\n2006-09-07  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/27117\n\t* config/sh/sh.md (divsi_inv_qitable, divsi_inv_hitable): New patterns.\n\t(divsi_inv_m1): Use them.\n\t(UNSPEC_DIV_INV_TABLE): New constant.\n\nFrom-SVN: r116746", "tree": {"sha": "70f7311db08529d0e47267026c9db75ed5f3eca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70f7311db08529d0e47267026c9db75ed5f3eca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8288489d9bf76261674e5b2cac70d954bfd83ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8288489d9bf76261674e5b2cac70d954bfd83ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8288489d9bf76261674e5b2cac70d954bfd83ea"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "f3d086b5ea64c4418be31338e4c52570e7720ffd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "patch": "@@ -1,3 +1,10 @@\n+2006-09-07  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR target/27117\n+\t* config/sh/sh.md (divsi_inv_qitable, divsi_inv_hitable): New patterns.\n+\t(divsi_inv_m1): Use them.\n+\t(UNSPEC_DIV_INV_TABLE): New constant.\n+\n 2006-09-06  James E Wilson  <wilson@specifix.com>\n \n \tPR rtl-opt/27883"}, {"sha": "97aa69811b57dc98c2f651425916e8ef25a23022", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bf45a5a0f1b981fa078386e6ee7caf5a7f612b/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=62bf45a5a0f1b981fa078386e6ee7caf5a7f612b", "patch": "@@ -148,6 +148,7 @@\n   (UNSPEC_DIV_INV_M2\t32)\n   (UNSPEC_DIV_INV_M3\t33)\n   (UNSPEC_DIV_INV20\t34)\n+  (UNSPEC_DIV_INV_TABLE\t37)\n   (UNSPEC_ASHIFTRT\t35)\n   (UNSPEC_THUNK\t\t36)\n   (UNSPEC_SP_SET\t40)\n@@ -2244,6 +2245,34 @@\n   DONE;\n }\")\n \n+;; operands: scratch, tab_base, tab_ix\n+;; These are unspecs because we could generate an indexed addressing mode\n+;; even if -m5-32media, where INDEX_REG_CLASS == NO_REGS, and this would\n+;; confuse reload.  See PR27117.\n+\n+(define_insn \"divsi_inv_qitable\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (unspec:QI [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t    (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t\t\t UNSPEC_DIV_INV_TABLE)))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tldx.ub\t%1, %2, %0\"\n+  [(set_attr \"type\" \"load_media\")\n+   (set_attr \"highpart\" \"user\")])\n+\n+;; operands: scratch, tab_base, tab_ix\n+(define_insn \"divsi_inv_hitable\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (unspec:HI [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t    (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t\t\t UNSPEC_DIV_INV_TABLE)))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tldx.w\t%1, %2, %0\"\n+  [(set_attr \"type\" \"load_media\")\n+   (set_attr \"highpart\" \"user\")])\n+\n ;; operands: inv0, tab_base, tab_ix, norm32\n ;; scratch equiv in sdivsi3_2: r19, r21\n (define_expand \"divsi_inv_m0\"\n@@ -2278,12 +2307,10 @@ norm32: r25\n   rtx scratch1 = operands[5];\n   rtx mem;\n \n-  mem = gen_const_mem (QImode, gen_rtx_PLUS (DImode, tab_base, tab_ix));\n-  emit_insn (gen_zero_extendqidi2 (scratch0, mem));\n+  emit_insn (gen_divsi_inv_qitable (scratch0, tab_base, tab_ix));\n   emit_insn (gen_ashldi3_media (scratch1, tab_ix, GEN_INT (1)));\n   emit_insn (gen_mulsidi3_media (scratch0, norm32, scratch0_si));\n-  mem = gen_const_mem (HImode, gen_rtx_PLUS (DImode, tab_base, scratch1));\n-  emit_insn (gen_extendhidi2 (scratch1, mem));\n+  emit_insn (gen_divsi_inv_hitable (scratch1, tab_base, scratch1));\n   emit_insn (gen_ashrdi3_media (scratch0, scratch0, GEN_INT (24)));\n   emit_insn (gen_subdisi3_media (inv0, scratch1, scratch0));\n   DONE;"}]}