{"sha": "881083d629878da043d3f0d7ab5584e77253626c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxMDgzZDYyOTg3OGRhMDQzZDNmMGQ3YWI1NTg0ZTc3MjUzNjI2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-04T14:44:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-04T14:44:57Z"}, "message": "match-and-simplify.texi: Update for recent changes.\n\n2014-12-04  Richard Biener  <rguenther@suse.de>\n\n\t* doc/match-and-simplify.texi: Update for recent changes.\n\nFrom-SVN: r218372", "tree": {"sha": "6da8594866f29cf2ae6e684675423173b67aca42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6da8594866f29cf2ae6e684675423173b67aca42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881083d629878da043d3f0d7ab5584e77253626c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881083d629878da043d3f0d7ab5584e77253626c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881083d629878da043d3f0d7ab5584e77253626c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881083d629878da043d3f0d7ab5584e77253626c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04be694e4d9132523f01de8d9873c6b07164afb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04be694e4d9132523f01de8d9873c6b07164afb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04be694e4d9132523f01de8d9873c6b07164afb2"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "f937c44f30d0382421b43c291992ad3cdafa7fe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881083d629878da043d3f0d7ab5584e77253626c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881083d629878da043d3f0d7ab5584e77253626c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=881083d629878da043d3f0d7ab5584e77253626c", "patch": "@@ -1,3 +1,7 @@\n+2014-12-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/match-and-simplify.texi: Update for recent changes.\n+\n 2014-12-04  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.h (ipa_alignment): New type."}, {"sha": "2d8faf881fceaccd21506fcdfc07a5b658ac49e7", "filename": "gcc/doc/match-and-simplify.texi", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881083d629878da043d3f0d7ab5584e77253626c/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881083d629878da043d3f0d7ab5584e77253626c/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=881083d629878da043d3f0d7ab5584e77253626c", "patch": "@@ -224,6 +224,46 @@ In this example the pattern will be repeated four times with\n @code{plus, minus, minus}, @code{minus, plus, plus},\n @code{minus, plus, minus}.\n \n+To avoid repeating operator lists in @code{for} you can name\n+them via\n+\n+@smallexample\n+(define_operator_list pmm plus minus mult)\n+@end smallexample\n+\n+and use them in @code{for} operator lists where they get expanded.\n+\n+@smallexample\n+(for opa (pmm trunc_div)\n+ (simplify...\n+@end smallexample\n+\n+So this example iterates over @code{plus}, @code{minus}, @code{mult}\n+and @code{trunc_div}.\n+\n+Using operator lists can also remove the need to explicitely write\n+a @code{for}.  All operator list uses that appear in a @code{simplify}\n+or @code{match} pattern in operator positions will implicitely\n+be added to a new @code{for}.  For example\n+\n+@smallexample\n+(define_operator_list SQRT BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n+(define_operator_list POW BUILT_IN_POWF BUILT_IN_POW BUILT_IN_POWL)\n+(simplify\n+ (SQRT (POW @@0 @@1))\n+ (POW (abs @@0) (mult @@1 @{ built_real (TREE_TYPE (@@1), dconsthalf); @})))\n+@end smallexample\n+\n+is the same as\n+\n+@smallexample\n+(for SQRT (BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n+     POW (BUILT_IN_POWF BUILT_IN_POW BUILT_IN_POWL)\n+ (simplify\n+  (SQRT (POW @@0 @@1))\n+  (POW (abs @@0) (mult @@1 @{ built_real (TREE_TYPE (@@1), dconsthalf); @}))))\n+@end smallexample\n+\n Another building block are @code{with} expressions in the\n result expression which nest the generated code in a new C block\n followed by its argument:"}]}