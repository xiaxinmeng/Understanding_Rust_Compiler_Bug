{"sha": "e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "node_id": "C_kwDOANBUbNoAKGU3ZmFjMWUxYTU4NThhYmM5NzM3NTE4ZGRiZGFjNzgwZmQyYWQ4Yjg", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-21T10:56:40Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-12-08T18:09:47Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Enhance std::erase_if for vector/deque\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/deque (erase_if): Use _GLIBCXX_STD_C container reference and\n\t__niter_wrap to limit _GLIBCXX_DEBUG mode impact.\n\t* include/std/vector (erase_if): Likewise.", "tree": {"sha": "eda5f7cd2af2b62cda7f4c3267841c28b283dae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda5f7cd2af2b62cda7f4c3267841c28b283dae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8/comments", "author": null, "committer": null, "parents": [{"sha": "60147c2b7d987f6142bdc1d2ae83e091fc6a5a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60147c2b7d987f6142bdc1d2ae83e091fc6a5a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60147c2b7d987f6142bdc1d2ae83e091fc6a5a45"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "0a3541af5540109e8de67002bfea61b873a0c051", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "patch": "@@ -96,25 +96,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n       using namespace __gnu_cxx;\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __ucont = __cont;\n       const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed = std::__remove_if(__cont.begin(), __end,\n+      const auto __end = __ucont.end();\n+      auto __removed = std::__remove_if(__ucont.begin(), __end,\n \t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n-      __cont.erase(__removed, __end);\n-      return __osz - __cont.size();\n+      if (__removed != __end)\n+\t{\n+\t  __cont.erase(__niter_wrap(__cont.begin(), __removed),\n+\t\t       __cont.end());\n+\t  return __osz - __cont.size();\n+\t}\n+\n+      return 0;\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n       using namespace __gnu_cxx;\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __ucont = __cont;\n       const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed = std::__remove_if(__cont.begin(), __end,\n+      const auto __end = __ucont.end();\n+      auto __removed = std::__remove_if(__ucont.begin(), __end,\n \t\t\t\t\t__ops::__iter_equals_val(__value));\n-      __cont.erase(__removed, __end);\n-      return __osz - __cont.size();\n+      if (__removed != __end)\n+\t{\n+\t  __cont.erase(__niter_wrap(__cont.begin(), __removed),\n+\t\t       __cont.end());\n+\t  return __osz - __cont.size();\n+\t}\n+\n+      return 0;\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "b648b3d73096ad0ee885ac408020b7f3529a74a5", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "patch": "@@ -107,12 +107,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n       using namespace __gnu_cxx;\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __ucont = __cont;\n       const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed = std::__remove_if(__cont.begin(), __end,\n+      const auto __end = __ucont.end();\n+      auto __removed = std::__remove_if(__ucont.begin(), __end,\n \t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n-      __cont.erase(__removed, __end);\n-      return __osz - __cont.size();\n+      if (__removed != __end)\n+\t{\n+\t  __cont.erase(__niter_wrap(__cont.begin(), __removed),\n+\t\t       __cont.end());\n+\t  return __osz - __cont.size();\n+\t}\n+\n+      return 0;\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n@@ -121,12 +128,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n       using namespace __gnu_cxx;\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __ucont = __cont;\n       const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed = std::__remove_if(__cont.begin(), __end,\n+      const auto __end = __ucont.end();\n+      auto __removed = std::__remove_if(__ucont.begin(), __end,\n \t\t\t\t\t__ops::__iter_equals_val(__value));\n-      __cont.erase(__removed, __end);\n-      return __osz - __cont.size();\n+      if (__removed != __end)\n+\t{\n+\t  __cont.erase(__niter_wrap(__cont.begin(), __removed),\n+\t\t       __cont.end());\n+\t  return __osz - __cont.size();\n+\t}\n+\n+      return 0;\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}]}