{"sha": "f5d1c3deeff9fc22e415894792b2cf1898354f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkMWMzZGVlZmY5ZmMyMmU0MTU4OTQ3OTJiMmNmMTg5ODM1NGYwZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-07-08T15:26:04Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-07-08T15:26:04Z"}, "message": "re PR target/11453 (gcc > 3.3 ICE)\n\n\tPR Target/11453\n\t* pa.md: Disparage all mtsar constraints.\n\t(extzv, extv, insv): Don't fail on length of {32|64}.\n\nFrom-SVN: r69087", "tree": {"sha": "9478a232cd7179da86daf59a56acc3cbc3979f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9478a232cd7179da86daf59a56acc3cbc3979f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d1c3deeff9fc22e415894792b2cf1898354f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d1c3deeff9fc22e415894792b2cf1898354f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d1c3deeff9fc22e415894792b2cf1898354f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d1c3deeff9fc22e415894792b2cf1898354f0d/comments", "author": null, "committer": null, "parents": [{"sha": "ce1bb65b4d2b2d4aa2a4abebbfa3b4dd50395600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1bb65b4d2b2d4aa2a4abebbfa3b4dd50395600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1bb65b4d2b2d4aa2a4abebbfa3b4dd50395600"}], "stats": {"total": 93, "additions": 57, "deletions": 36}, "files": [{"sha": "678af02aa9616169f44028a2b30546daf9f7e132", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d1c3deeff9fc22e415894792b2cf1898354f0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d1c3deeff9fc22e415894792b2cf1898354f0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5d1c3deeff9fc22e415894792b2cf1898354f0d", "patch": "@@ -1,3 +1,9 @@\n+2003-07-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR Target/11453\n+\t* pa.md: Disparage all mtsar constraints.\n+\t(extzv, extv, insv): Don't fail on length of {32|64}.\n+\n 2003-07-08  Zack Weinberg  <zack@codesourcery.com>\n \n \t* system.h: Poison MAP_CHARACTER."}, {"sha": "35369966d59b382e9aa9b779e74b598f6149f3cd", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d1c3deeff9fc22e415894792b2cf1898354f0d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d1c3deeff9fc22e415894792b2cf1898354f0d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f5d1c3deeff9fc22e415894792b2cf1898354f0d", "patch": "@@ -2264,9 +2264,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,r,Q,*q,!f,f,*TR\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,!*q,!f,f,*TR\")\n \t(match_operand:SI 1 \"move_operand\"\n-\t\t\t\t\"A,r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,!rM,!fM,*RT,f\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && ! TARGET_SOFT_FLOAT\"\n@@ -2288,9 +2288,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,r,Q,*q\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,!*q\")\n \t(match_operand:SI 1 \"move_operand\"\n-\t\t\t\t\"A,r,J,N,K,RQ,rM,rM\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,!rM\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && TARGET_SOFT_FLOAT\"\n@@ -2699,8 +2699,8 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!*f\")\n-\t(match_operand:HI 1 \"move_operand\" \"r,J,N,K,RQ,rM,rM,!*fM\"))]\n+  [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,!*q,!*f\")\n+\t(match_operand:HI 1 \"move_operand\" \"r,J,N,K,RQ,rM,!rM,!*fM\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n@@ -2814,8 +2814,8 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!*f\")\n-\t(match_operand:QI 1 \"move_operand\" \"r,J,N,K,RQ,rM,rM,!*fM\"))]\n+  [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,!*q,!*f\")\n+\t(match_operand:QI 1 \"move_operand\" \"r,J,N,K,RQ,rM,!rM,!*fM\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n@@ -3137,9 +3137,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,Q,*q,!f,f,*TR\")\n+\t\t\t\t\"=r,r,r,r,r,Q,!*q,!f,f,*TR\")\n \t(match_operand:DF 1 \"move_operand\"\n-\t\t\t\t\"r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n+\t\t\t\t\"r,J,N,K,RQ,rM,!rM,!fM,*RT,f\"))]\n   \"(register_operand (operands[0], DFmode)\n     || reg_or_0_operand (operands[1], DFmode))\n    && ! TARGET_SOFT_FLOAT && TARGET_64BIT\"\n@@ -3296,9 +3296,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,r,Q,*q,!f,f,*TR\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,!*q,!f,f,*TR\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t\t\t\"A,r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,!rM,!fM,*RT,f\"))]\n   \"(register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\n    && ! TARGET_SOFT_FLOAT && TARGET_64BIT\"\n@@ -3992,9 +3992,9 @@\n   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,q\")\n-\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I,U\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"r,r,r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,!q\")\n+\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I,!U\")\n+\t\t  (match_operand:DI 2 \"register_operand\" \"r,r,!r\")))]\n   \"TARGET_64BIT\"\n   \"@\n    sub %1,%2,%0\n@@ -4022,9 +4022,9 @@\n    (set_attr \"length\" \"4,4\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,q\")\n-\t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"r,I,S\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"r,r,r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,!q\")\n+\t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"r,I,!S\")\n+\t\t  (match_operand:SI 2 \"register_operand\" \"r,r,!r\")))]\n   \"TARGET_PA_20\"\n   \"@\n    sub %1,%2,%0\n@@ -7158,12 +7158,17 @@\n     FAIL;\n \n   if (TARGET_64BIT)\n-    emit_insn (gen_extzv_64 (operands[0], operands[1],\n-\t\t\t     operands[2], operands[3]));\n+    {\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n+\tFAIL;\n+      emit_insn (gen_extzv_64 (operands[0], operands[1],\n+\t\t\t       operands[2], operands[3]));\n+    }\n   else\n     {\n-      if (! uint5_operand (operands[2], SImode)\n-\t  || ! uint5_operand (operands[3], SImode))\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n \tFAIL;\n       emit_insn (gen_extzv_32 (operands[0], operands[1],\n \t\t\t       operands[2], operands[3]));\n@@ -7174,8 +7179,8 @@\n (define_insn \"extzv_32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n+\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"uint32_operand\" \"\")))]\n   \"\"\n   \"{extru|extrw,u} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n@@ -7224,12 +7229,17 @@\n     FAIL;\n \n   if (TARGET_64BIT)\n-    emit_insn (gen_extv_64 (operands[0], operands[1],\n-\t\t\t    operands[2], operands[3]));\n+    {\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n+\tFAIL;\n+      emit_insn (gen_extv_64 (operands[0], operands[1],\n+\t\t\t      operands[2], operands[3]));\n+    }\n   else\n     {\n-      if (! uint5_operand (operands[2], SImode)\n-\t  || ! uint5_operand (operands[3], SImode))\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n \tFAIL;\n       emit_insn (gen_extv_32 (operands[0], operands[1],\n \t\t\t      operands[2], operands[3]));\n@@ -7240,8 +7250,8 @@\n (define_insn \"extv_32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n+\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"uint32_operand\" \"\")))]\n   \"\"\n   \"{extrs|extrw,s} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n@@ -7287,12 +7297,17 @@\n   \"\n {\n   if (TARGET_64BIT)\n-    emit_insn (gen_insv_64 (operands[0], operands[1],\n-\t\t\t    operands[2], operands[3]));\n+    {\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n+\tFAIL;\n+      emit_insn (gen_insv_64 (operands[0], operands[1],\n+\t\t\t      operands[2], operands[3]));\n+    }\n   else\n     {\n-      if (! uint5_operand (operands[2], SImode)\n-\t  || ! uint5_operand (operands[3], SImode))\n+      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n+          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n \tFAIL;\n       emit_insn (gen_insv_32 (operands[0], operands[1],\n \t\t\t      operands[2], operands[3]));\n@@ -7302,8 +7317,8 @@\n \n (define_insn \"insv_32\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r,r\")\n-\t\t\t (match_operand:SI 1 \"uint5_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\"))\n+\t\t\t (match_operand:SI 1 \"uint32_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\"))\n \t(match_operand:SI 3 \"arith5_operand\" \"r,L\"))]\n   \"\"\n   \"@"}]}