{"sha": "3c642f929e645b645c03b6d2490da25d46d6f4e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2NDJmOTI5ZTY0NWI2NDVjMDNiNmQyNDkwZGEyNWQ0NmQ2ZjRlNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2010-04-20T20:12:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2010-04-20T20:12:47Z"}, "message": "builtins.c (fold_builtin_cproj): Fold more cases.\n\n        * builtins.c (fold_builtin_cproj): Fold more cases.\n\ntestsuite:\n        * gcc.dg/torture/builtin-cproj-1.c: Test more cases.\n\nFrom-SVN: r158574", "tree": {"sha": "0571f6c98a4bec862a18389e5fe90d9a038b4cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0571f6c98a4bec862a18389e5fe90d9a038b4cf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c642f929e645b645c03b6d2490da25d46d6f4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c642f929e645b645c03b6d2490da25d46d6f4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c642f929e645b645c03b6d2490da25d46d6f4e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c642f929e645b645c03b6d2490da25d46d6f4e7/comments", "author": null, "committer": null, "parents": [{"sha": "43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701"}], "stats": {"total": 124, "additions": 123, "deletions": 1}, "files": [{"sha": "cdb7c2b8ad6bdb20f22a54e5401dd0f3b326c710", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c642f929e645b645c03b6d2490da25d46d6f4e7", "patch": "@@ -1,3 +1,7 @@\n+2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_cproj): Fold more cases.\n+\n 2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (build_complex_cproj, fold_builtin_cproj): New."}, {"sha": "997c13a5505f2f771af7f77078155d5d29845c93", "filename": "gcc/builtins.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3c642f929e645b645c03b6d2490da25d46d6f4e7", "patch": "@@ -7082,6 +7082,33 @@ fold_builtin_cproj (location_t loc, tree arg, tree type)\n       else\n \treturn arg;\n     }\n+  else if (TREE_CODE (arg) == COMPLEX_EXPR)\n+    {\n+      tree real = TREE_OPERAND (arg, 0);\n+      tree imag = TREE_OPERAND (arg, 1);\n+\n+      STRIP_NOPS (real);\n+      STRIP_NOPS (imag);\n+      \n+      /* If the real part is inf and the imag part is known to be\n+\t nonnegative, return (inf + 0i).  Remember side-effects are\n+\t possible in the imag part.  */\n+      if (TREE_CODE (real) == REAL_CST\n+\t  && real_isinf (TREE_REAL_CST_PTR (real))\n+\t  && tree_expr_nonnegative_p (imag))\n+\treturn omit_one_operand_loc (loc, type,\n+\t\t\t\t     build_complex_cproj (type, false),\n+\t\t\t\t     arg);\n+      \n+      /* If the imag part is inf, return (inf+I*copysign(0,imag)).\n+\t Remember side-effects are possible in the real part.  */\n+      if (TREE_CODE (imag) == REAL_CST\n+\t  && real_isinf (TREE_REAL_CST_PTR (imag)))\n+\treturn\n+\t  omit_one_operand_loc (loc, type,\n+\t\t\t\tbuild_complex_cproj (type, TREE_REAL_CST_PTR\n+\t\t\t\t\t\t     (imag)->sign), arg);\n+    }\n \n   return NULL_TREE;\n }"}, {"sha": "e689381a4e5d0002385cd089310d3f1ea01efd85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c642f929e645b645c03b6d2490da25d46d6f4e7", "patch": "@@ -1,3 +1,7 @@\n+2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-cproj-1.c: Test more cases.\n+\n 2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-cproj-1.c: New."}, {"sha": "31cd5874ffba59e612a4bffe114a5db5c6240a72", "filename": "gcc/testsuite/gcc.dg/torture/builtin-cproj-1.c", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c642f929e645b645c03b6d2490da25d46d6f4e7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c?ref=3c642f929e645b645c03b6d2490da25d46d6f4e7", "patch": "@@ -44,7 +44,80 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n } while (0)\n \n-void foo (void)\n+/* Test that cproj(X + I*INF) -> (ZERO + INF), where ZERO is +-0i.\n+   NEG is either blank or a minus sign when ZERO is negative.  */\n+#define TEST_IMAG_INF(NEG,ZERO) do { \\\n+  if (CPROJF(f+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJF(f+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJ(d+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJ(d+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(ld+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJL(ld+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Like TEST_IMAG_INF, but check that side effects are honored.  */\n+#define TEST_IMAG_INF_SIDE_EFFECT(NEG,ZERO) do { \\\n+  int side = 4; \\\n+  if (CPROJF(++side+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJF(++side+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJ(++side+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJ(++side+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(++side+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJL(++side+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (side != 10) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Test that cproj(INF, POSITIVE) -> INF+0i.  NEG is either blank or a\n+   minus sign to test negative INF.  */\n+#define TEST_REAL_INF(NEG) do { \\\n+  __real cf = NEG INF; \\\n+  __imag cf = (x ? 4 : 5); \\\n+  if (CPROJF(cf) != INF \\\n+      || CKSGN_I (CPROJF(cf), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cd = NEG INF; \\\n+  __imag cd = (x ? 4 : 5); \\\n+  if (CPROJ(cd) != INF \\\n+      || CKSGN_I (CPROJ(cd), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cld = NEG INF; \\\n+  __imag cld = (x ? 4 : 5); \\\n+  if (CPROJL(cld) != INF \\\n+      || CKSGN_I (CPROJL(cld), INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Like TEST_REAL_INF, but check that side effects are honored.  */\n+#define TEST_REAL_INF_SIDE_EFFECT(NEG) do { \\\n+  int side = -9; \\\n+  __real cf = NEG INF; \\\n+  __imag cf = (x ? 4 : 5); \\\n+  if (CPROJF((++side,cf)) != INF \\\n+      || CKSGN_I (CPROJF((++side,cf)), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cd = NEG INF; \\\n+  __imag cd = (x ? 4 : 5); \\\n+  if (CPROJ((++side,cd)) != INF \\\n+      || CKSGN_I (CPROJ((++side,cd)), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cld = NEG INF; \\\n+  __imag cld = (x ? 4 : 5); \\\n+  if (CPROJL((++side,cld)) != INF \\\n+      || CKSGN_I (CPROJL((++side,cld)), INF)) \\\n+    link_error(__LINE__); \\\n+  if (side != -3) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+void foo (_Complex long double cld, _Complex double cd, _Complex float cf,\n+\t  long double ld, double d, float f, int x)\n {\n   TEST_CST_INF (INF+0I, 0);\n   TEST_CST_INF (INF-0I, -0.FI);\n@@ -79,6 +152,20 @@ void foo (void)\n   TEST_CST (-22+3I);\n   TEST_CST (-22-3I);\n \n+  TEST_IMAG_INF (,0.FI);\n+  TEST_IMAG_INF (-,-0.FI);\n+\n+#ifdef __OPTIMIZE__\n+  TEST_REAL_INF( );\n+  TEST_REAL_INF(-);\n+  \n+  TEST_IMAG_INF_SIDE_EFFECT (,0.FI);\n+  TEST_IMAG_INF_SIDE_EFFECT (-,-0.FI);\n+\n+  TEST_REAL_INF_SIDE_EFFECT( );\n+  TEST_REAL_INF_SIDE_EFFECT(-);\n+#endif\n+\n   return;\n }\n "}]}