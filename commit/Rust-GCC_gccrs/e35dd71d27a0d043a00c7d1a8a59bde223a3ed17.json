{"sha": "e35dd71d27a0d043a00c7d1a8a59bde223a3ed17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1ZGQ3MWQyN2EwZDA0M2EwMGM3ZDFhOGE1OWJkZTIyM2EzZWQxNw==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-08T09:54:02Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-08T09:54:02Z"}, "message": "Initial revision\n\nFrom-SVN: r3156", "tree": {"sha": "c65984fd2789e93654b60e8c46df32f2b6fe8a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c65984fd2789e93654b60e8c46df32f2b6fe8a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17/comments", "author": null, "committer": null, "parents": [{"sha": "60c9835ecc279cb9511b2ed79a3770e3be542d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c9835ecc279cb9511b2ed79a3770e3be542d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c9835ecc279cb9511b2ed79a3770e3be542d1e"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "c1a417071caecffb5d4bb319e1a74235665ac737", "filename": "gcc/config/i386/perform.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17/gcc%2Fconfig%2Fi386%2Fperform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35dd71d27a0d043a00c7d1a8a59bde223a3ed17/gcc%2Fconfig%2Fi386%2Fperform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fperform.h?ref=e35dd71d27a0d043a00c7d1a8a59bde223a3ed17", "patch": "@@ -0,0 +1,93 @@\n+/* Definitions for AT&T assembler syntax for the Intel 80386.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Defines to be able to build libgcc.a with GCC.  */\n+\n+/* It might seem that these are not important, since gcc 2 will never\n+   call libgcc for these functions.  But programs might be linked with\n+   code compiled by gcc 1, and then these will be used.  */\n+\n+/* The arg names used to be a and b, but `a' appears inside strings\n+   and that confuses non-ANSI cpp.  */\n+\n+#define perform_udivsi3(arg0,arg1)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = arg0;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_divsi3(arg0,arg1)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = arg0;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1)); \\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_umodsi3(arg0,arg1)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = arg0;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_modsi3(arg0,arg1)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = arg0;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1)); \\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_fixdfsi(arg0)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  auto unsigned short ostatus;\t\t\t\t\t\t\\\n+  auto unsigned short nstatus;\t\t\t\t\t\t\\\n+  auto int ret;\t\t\t\t\t\t\t\t\\\n+  auto double tmp;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n+  &nstatus;\t\t\t\t\t\t\t\t\\\n+  &ret;\t\t\t\t\t\t\t\t\t\\\n+  &tmp;\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n+  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n+  tmp = arg0;\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n+  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}\n+"}]}