{"sha": "0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyNWY0YzFiNjMxMDdiZjNiYzQ3NzhkMWZlNTNjOTFhY2U3ODM4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-15T20:12:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-15T20:12:14Z"}, "message": "match.pd: Generalize the PR64309 simplifications [PR96669]\n\nThe following patch generalizes the PR64309 simplifications, so that instead\nof working only with constants 1 and 1 it works with any two power of two\nconstants, and works also for right shift (in that case it rules out the\nfirst one being negative, as it is arithmetic shift then).\n\n2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96669\n\t* match.pd (((1 << A) & 1) != 0 -> A == 0,\n\t((1 << A) & 1) == 0 -> A != 0): Generalize for 1s replaced by\n\tpossibly different power of two constants and to right shift too.\n\n\t* gcc.dg/tree-ssa/pr96669-1.c: New test.", "tree": {"sha": "48f0ca415fb19a52b755cefdd92d0434efee9831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f0ca415fb19a52b755cefdd92d0434efee9831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0425f4c1b63107bf3bc4778d1fe53c91ace7838d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c046034e3ea61dd68965154a398f8f813daf8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c046034e3ea61dd68965154a398f8f813daf8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c046034e3ea61dd68965154a398f8f813daf8f2"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "84c4ee66a79fe026ff1351e7b12af0e40ee25777", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425f4c1b63107bf3bc4778d1fe53c91ace7838d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425f4c1b63107bf3bc4778d1fe53c91ace7838d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "patch": "@@ -3117,13 +3117,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (op @0 { build_int_cst (TREE_TYPE (@1), low); })))))))\n \n \n-/* ((1 << A) & 1) != 0 -> A == 0\n-   ((1 << A) & 1) == 0 -> A != 0 */\n+/* Simplify ((C << x) & D) != 0 where C and D are power of two constants,\n+   either to false if D is smaller (unsigned comparison) than C, or to\n+   x == log2 (D) - log2 (C).  Similarly for right shifts.  */\n (for cmp (ne eq)\n      icmp (eq ne)\n  (simplify\n-  (cmp (bit_and (lshift integer_onep @0) integer_onep) integer_zerop)\n-  (icmp @0 { build_zero_cst (TREE_TYPE (@0)); })))\n+  (cmp (bit_and (lshift integer_pow2p@1 @0) integer_pow2p@2) integer_zerop)\n+   (with { int c1 = wi::clz (wi::to_wide (@1));\n+\t   int c2 = wi::clz (wi::to_wide (@2)); }\n+    (if (c1 < c2)\n+     { constant_boolean_node (cmp == NE_EXPR ? false : true, type); }\n+     (icmp @0 { build_int_cst (TREE_TYPE (@0), c1 - c2); }))))\n+ (simplify\n+  (cmp (bit_and (rshift integer_pow2p@1 @0) integer_pow2p@2) integer_zerop)\n+   (if (tree_int_cst_sgn (@1) > 0)\n+    (with { int c1 = wi::clz (wi::to_wide (@1));\n+\t    int c2 = wi::clz (wi::to_wide (@2)); }\n+     (if (c1 > c2)\n+      { constant_boolean_node (cmp == NE_EXPR ? false : true, type); }\n+      (icmp @0 { build_int_cst (TREE_TYPE (@0), c2 - c1); }))))))\n \n /* (CST1 << A) == CST2 -> A == ctz (CST2) - ctz (CST1)\n    (CST1 << A) != CST2 -> A != ctz (CST2) - ctz (CST1)"}, {"sha": "a1efba76770cf556ab47307c8330d09c530da3ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96669-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425f4c1b63107bf3bc4778d1fe53c91ace7838d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425f4c1b63107bf3bc4778d1fe53c91ace7838d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c?ref=0425f4c1b63107bf3bc4778d1fe53c91ace7838d", "patch": "@@ -0,0 +1,59 @@\n+/* PR tree-optimization/96669 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+/* { dg-final { scan-tree-dump \"return a == 0;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return 1;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return c == 3;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return d != 1;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return e != 0;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return f == 1;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return 0;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"return h != 1;\" \"original\" } } */\n+\n+int\n+f1 (int a)\n+{\n+  return ((1 << a) & 1) != 0;\n+}\n+\n+int\n+f2 (int b)\n+{\n+  return ((2 << b) & 1) == 0;\n+}\n+\n+int\n+f3 (int c)\n+{\n+  return ((2 << c) & 16) != 0;\n+}\n+\n+int\n+f4 (int d)\n+{\n+  return ((16 << d) & 32) == 0;\n+}\n+\n+int\n+f5 (int e)\n+{\n+  return ((1 >> e) & 1) == 0;\n+}\n+\n+int\n+f6 (int f)\n+{\n+  return ((2 >> f) & 1) != 0;\n+}\n+\n+int\n+f7 (int g)\n+{\n+  return ((1 >> g) & 2) != 0;\n+}\n+\n+int\n+f8 (int h)\n+{\n+  return ((32 >> h) & 16) == 0;\n+}"}]}