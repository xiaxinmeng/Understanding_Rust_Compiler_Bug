{"sha": "203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzZGRjZWFlZGEyMGE2ZDFkZTBhMjgzODczZDY0ZjRmYjNhNWNlZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T10:53:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T10:53:58Z"}, "message": "[multiple changes]\n\n2011-09-06  Robert Dewar  <dewar@adacore.com>\n\n\t* s-tpopsp-vxworks.adb, prj-nmsc.adb: Minor reformatting.\n\n2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gcc-interface/trans.c (Attribute_to_gnu): New case for\n\tattribute Descriptor_Size.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Add processing\n\tfor attribute Descriptor_Size.\n\t* exp_ch7.adb (Double_Size_Of): Removed.\n\t(Make_Finalize_Address_Stmts): Remove the code which generates\n\tan expression to calculate the dope vector of an unconstrained\n\tarray. Instead use attribute Descriptor_Size and leave the\n\tcalculation to the back end.\n\t(Nearest_Multiple_Rounded_Up): Removed.\n\t(Size_Of): Removed.\n\t* sem_attr.adb (Analyze_Attribute): Add processing for attribute\n\tDescriptor_Size. Currently the attribute is applicable only\n\tto unconstrained arrays.\n\t(Eval_Attribute): Add processing for\n\tattribute Descriptor_Size.\n\t* snames.ads-tmpl: Add a predefined name and an Attribute_Id\n\tfor Descriptor_Size.\n\n2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb: Remove useless formal.\n\nFrom-SVN: r178585", "tree": {"sha": "ca430b765206683111d5a1c7faa156f19e0bd6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca430b765206683111d5a1c7faa156f19e0bd6c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/comments", "author": null, "committer": null, "parents": [{"sha": "32dba5ef786a92d5d041594106995f8ffd2bda34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dba5ef786a92d5d041594106995f8ffd2bda34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dba5ef786a92d5d041594106995f8ffd2bda34"}], "stats": {"total": 224, "additions": 77, "deletions": 147}, "files": [{"sha": "f79353a4ab57e80873417db91220642e90f7a616", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -109,15 +109,12 @@ package body Exp_Aggr is\n    function Build_Record_Aggr_Code\n      (N                             : Node_Id;\n       Typ                           : Entity_Id;\n-      Lhs                           : Node_Id;\n-      Is_Limited_Ancestor_Expansion : Boolean   := False) return List_Id;\n+      Lhs                           : Node_Id) return List_Id;\n    --  N is an N_Aggregate or an N_Extension_Aggregate. Typ is the type of the\n    --  aggregate. Target is an expression containing the location on which the\n    --  component by component assignments will take place. Returns the list of\n    --  assignments plus all other adjustments needed for tagged and controlled\n-   --  types. Is_Limited_Ancestor_Expansion indicates that the function has\n-   --  been called recursively to expand the limited ancestor to avoid copying\n-   --  it.\n+   --  types.\n \n    procedure Convert_To_Assignments (N : Node_Id; Typ : Entity_Id);\n    --  N is an N_Aggregate or an N_Extension_Aggregate. Typ is the type of the\n@@ -1734,8 +1731,7 @@ package body Exp_Aggr is\n    function Build_Record_Aggr_Code\n      (N                             : Node_Id;\n       Typ                           : Entity_Id;\n-      Lhs                           : Node_Id;\n-      Is_Limited_Ancestor_Expansion : Boolean := False) return List_Id\n+      Lhs                           : Node_Id) return List_Id\n    is\n       Loc     : constant Source_Ptr := Sloc (N);\n       L       : constant List_Id    := New_List;\n@@ -2338,8 +2334,7 @@ package body Exp_Aggr is\n                   Build_Record_Aggr_Code (\n                     N   => Unqualify (Ancestor),\n                     Typ => Etype (Unqualify (Ancestor)),\n-                    Lhs => Target,\n-                    Is_Limited_Ancestor_Expansion => True));\n+                    Lhs => Target));\n \n             --  If the ancestor part is an expression \"E\", we generate\n "}, {"sha": "a98a7b93a9a8a98c45e60af6efaf305def3875dc", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -1799,6 +1799,15 @@ package body Exp_Attr is\n          Analyze_And_Resolve (N, Typ);\n       end Count;\n \n+      ---------------------\n+      -- Descriptor_Size --\n+      ---------------------\n+\n+      --  This attribute is handled entirely by the back end\n+\n+      when Attribute_Descriptor_Size =>\n+         Apply_Universal_Integer_Attribute_Checks (N);\n+\n       ---------------\n       -- Elab_Body --\n       ---------------"}, {"sha": "c7ea703d272555d000e3539a85542d062f2ac0a3", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 11, "deletions": 132, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -7023,99 +7023,6 @@ package body Exp_Ch7 is\n       Desg_Typ : Entity_Id;\n       Obj_Expr : Node_Id;\n \n-      function Double_Size_Of (Typ : Entity_Id) return Node_Id;\n-      --  Subsidiary routine, produces an expression which calculates double\n-      --  the size of Typ as the nearest multiple of its alignment rounded up.\n-\n-      function Nearest_Multiple_Rounded_Up\n-        (Size_Expr : Node_Id;\n-         Typ       : Entity_Id) return Node_Id;\n-      --  Subsidiary routine, generate the following expression:\n-      --    ((Size_Expr + Typ'Alignment - 1) / Typ'Alignment) * Typ'Alignment\n-\n-      function Size_Of (Typ : Entity_Id) return Node_Id;\n-      --  Subsidiary routine, produces an expression which calculates the size\n-      --  of Typ as the nearest multiple of its alignment rounded up.\n-\n-      --------------------\n-      -- Double_Size_Of --\n-      --------------------\n-\n-      function Double_Size_Of (Typ : Entity_Id) return Node_Id is\n-      begin\n-         return\n-           Make_Op_Multiply (Loc,\n-             Left_Opnd  => Make_Integer_Literal (Loc, 2),\n-             Right_Opnd => Size_Of (Typ));\n-      end Double_Size_Of;\n-\n-      ---------------------------------\n-      -- Nearest_Multiple_Rounded_Up --\n-      ---------------------------------\n-\n-      function Nearest_Multiple_Rounded_Up\n-        (Size_Expr : Node_Id;\n-         Typ       : Entity_Id) return Node_Id\n-      is\n-         function Alignment_Of (Typ : Entity_Id) return Node_Id;\n-         --  Subsidiary routine, generate the following attribute reference:\n-         --    Typ'Alignment\n-\n-         ------------------\n-         -- Alignment_Of --\n-         ------------------\n-\n-         function Alignment_Of (Typ : Entity_Id) return Node_Id is\n-         begin\n-            return\n-              Make_Attribute_Reference (Loc,\n-                Prefix         => New_Reference_To (Typ, Loc),\n-                Attribute_Name => Name_Alignment);\n-         end Alignment_Of;\n-\n-      --  Start of processing for Nearest_Multiple_Rounded_Up\n-\n-      begin\n-         --  Generate:\n-         --    ((Size_Expr + Typ'Alignment - 1) / Typ'Alignment) *\n-         --                                           Typ'Alignment\n-\n-         return\n-           Make_Op_Multiply (Loc,\n-             Left_Opnd  =>\n-               Make_Op_Divide (Loc,\n-                 Left_Opnd  =>\n-                   Make_Op_Add (Loc,\n-                     Left_Opnd  => Size_Expr,\n-                     Right_Opnd =>\n-                       Make_Op_Subtract (Loc,\n-                         Left_Opnd  => Alignment_Of (Typ),\n-                         Right_Opnd => Make_Integer_Literal (Loc, 1))),\n-                 Right_Opnd => Alignment_Of (Typ)),\n-             Right_Opnd => Alignment_Of (Typ));\n-      end Nearest_Multiple_Rounded_Up;\n-\n-      -------------\n-      -- Size_Of --\n-      -------------\n-\n-      function Size_Of (Typ : Entity_Id) return Node_Id is\n-      begin\n-         return\n-           Nearest_Multiple_Rounded_Up\n-             (Size_Expr =>\n-                Make_Op_Divide (Loc,\n-                  Left_Opnd  =>\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix         => New_Reference_To (Typ, Loc),\n-                      Attribute_Name => Name_Size),\n-                  Right_Opnd =>\n-                    Make_Integer_Literal (Loc, System_Storage_Unit)),\n-              Typ => Typ);\n-      end Size_Of;\n-\n-   --  Start of processing for Make_Finalize_Address_Stmts\n-\n    begin\n       if Is_Array_Type (Typ) then\n          if Is_Constrained (First_Subtype (Typ)) then\n@@ -7190,11 +7097,7 @@ package body Exp_Ch7 is\n         and then not Is_Constrained (First_Subtype (Typ))\n       then\n          declare\n-            Dope_Expr : Node_Id;\n-            Dope_Id   : Entity_Id;\n-            For_First : Boolean := True;\n-            Index     : Node_Id;\n-            Index_Typ : Entity_Id;\n+            Dope_Id : Entity_Id;\n \n          begin\n             --  Ensure that Ptr_Typ a thin pointer, generate:\n@@ -7207,40 +7110,9 @@ package body Exp_Ch7 is\n                 Expression =>\n                   Make_Integer_Literal (Loc, System_Address_Size)));\n \n-            --  For unconstrained arrays, create the expression which computes\n-            --  the size of the dope vector.\n-\n-            Index := First_Index (Typ);\n-            while Present (Index) loop\n-               Index_Typ := Etype (Index);\n-\n-               --  Each bound has two values and a potential hole added to\n-               --  compensate for alignment differences.\n-\n-               if For_First then\n-                  For_First := False;\n-                  Dope_Expr := Double_Size_Of (Index_Typ);\n-\n-               else\n-                  Dope_Expr :=\n-                    Make_Op_Add (Loc,\n-                      Left_Opnd  => Dope_Expr,\n-                      Right_Opnd => Double_Size_Of (Index_Typ));\n-               end if;\n-\n-               Next_Index (Index);\n-            end loop;\n-\n-            --  Dope_Expr calculates the size of the dope, acounting for\n-            --  individual alignment holes on the index type level. Since the\n-            --  alignment of the component type dictates the underlying layout\n-            --  of the array, round the size of the dope to the next higher\n-            --  multiple of the component alignment.\n-\n-            Dope_Expr := Nearest_Multiple_Rounded_Up (Dope_Expr, Typ);\n-\n             --  Generate:\n-            --    Dnn : Storage_Offset := Dope_Expr;\n+            --    Dnn : constant Storage_Offset :=\n+            --            Desg_Typ'Descriptor_Size / Storage_Unit;\n \n             Dope_Id := Make_Temporary (Loc, 'D');\n \n@@ -7250,7 +7122,14 @@ package body Exp_Ch7 is\n                 Constant_Present    => True,\n                 Object_Definition   =>\n                   New_Reference_To (RTE (RE_Storage_Offset), Loc),\n-                Expression          => Dope_Expr));\n+                Expression          =>\n+                  Make_Op_Divide (Loc,\n+                    Left_Opnd  =>\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Reference_To (Desg_Typ, Loc),\n+                        Attribute_Name => Name_Descriptor_Size),\n+                    Right_Opnd =>\n+                      Make_Integer_Literal (Loc, System_Storage_Unit))));\n \n             --  Shift the address from the start of the dope vector to the\n             --  start of the elements:"}, {"sha": "13df71f129cb2e7540addecbe998fc75c93a1bf7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -1878,6 +1878,20 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       prefix_unused = true;\n       break;\n \n+    case Attr_Descriptor_Size:\n+      gnu_type = TREE_TYPE (gnu_prefix);\n+      gcc_assert (TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE);\n+\n+      /* What we want is the offset of the ARRAY field in the record that the\n+        thin pointer designates, but the components have been shifted so this\n+        is actually the opposite of the offset of the BOUNDS field.  */\n+      gnu_type = TYPE_OBJECT_RECORD_TYPE (gnu_type);\n+      gnu_result = size_binop (MINUS_EXPR, bitsize_zero_node,\n+                               bit_position (TYPE_FIELDS (gnu_type)));\n+      gnu_result_type = get_unpadded_type (Etype (gnat_node));\n+      prefix_unused = true;\n+      break;\n+\n     case Attr_Null_Parameter:\n       /* This is just a zero cast to the pointer type for our prefix and\n \t dereferenced.  */"}, {"sha": "9193769a86dcac14495ff57c590ca0ad3589fcf3", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -6718,11 +6718,11 @@ package body Prj.Nmsc is\n \n                if not Header_File then\n                   Compute_Unit_Name\n-                    (File_Name       => File_Name,\n-                     Naming          => Config.Naming_Data,\n-                     Kind            => Kind,\n-                     Unit            => Unit,\n-                     Project         => Project);\n+                    (File_Name => File_Name,\n+                     Naming    => Config.Naming_Data,\n+                     Kind      => Kind,\n+                     Unit      => Unit,\n+                     Project   => Project);\n \n                   if Unit /= No_Name then\n                      Language    := Tmp_Lang;"}, {"sha": "a926ca445ec0affe31a34039dbecab13879448c8", "filename": "gcc/ada/s-tpopsp-vxworks.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fs-tpopsp-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fs-tpopsp-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-vxworks.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -70,7 +70,9 @@ package body Specific is\n       Result : STATUS;\n \n    begin\n-      --  If Self_Id is null, delete task specific data\n+      --  If argument is null, destroy task specific data, to make API\n+      --  consistent with other platforms, and thus compatible with the\n+      --  shared version of s-tpoaal.adb.\n \n       if Self_Id = null then\n          Result := taskVarDelete (taskIdSelf, ATCB_Key'Access);"}, {"sha": "9b33acddef3435aa7b2fa87166b75a49db083dc5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -3014,6 +3014,28 @@ package body Sem_Attr is\n          Check_Floating_Point_Type_0;\n          Set_Etype (N, Standard_Boolean);\n \n+      ---------------------\n+      -- Descriptor_Size --\n+      ---------------------\n+\n+      when Attribute_Descriptor_Size =>\n+         Check_E0;\n+\n+         --  Attribute Descriptor_Size is relevant only in the context of an\n+         --  unconstrained array type.\n+\n+         if Is_Entity_Name (P)\n+           and then Is_Type (Entity (P))\n+           and then Is_Array_Type (Entity (P))\n+           and then not Is_Constrained (Entity (P))\n+         then\n+            null;\n+         else\n+            Error_Attr_P (\"invalid prefix for % attribute\");\n+         end if;\n+\n+         Set_Etype (N, Universal_Integer);\n+\n       ------------\n       -- Digits --\n       ------------\n@@ -6246,6 +6268,13 @@ package body Sem_Attr is\n          Fold_Uint\n            (N, UI_From_Int (Boolean'Pos (Denorm_On_Target)), True);\n \n+      ---------------------\n+      -- Descriptor_Size --\n+      ---------------------\n+\n+      when Attribute_Descriptor_Size =>\n+         null;\n+\n       ------------\n       -- Digits --\n       ------------"}, {"sha": "332a7902ff226cb5262d5ee9010623a6a6be008e", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203ddceaeda20a6d1de0a283873d64f4fb3a5cef/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=203ddceaeda20a6d1de0a283873d64f4fb3a5cef", "patch": "@@ -744,6 +744,7 @@ package Snames is\n    Name_Definite                       : constant Name_Id := N + $;\n    Name_Delta                          : constant Name_Id := N + $;\n    Name_Denorm                         : constant Name_Id := N + $;\n+   Name_Descriptor_Size                : constant Name_Id := N + $;\n    Name_Digits                         : constant Name_Id := N + $;\n    Name_Elaborated                     : constant Name_Id := N + $; -- GNAT\n    Name_Emax                           : constant Name_Id := N + $; -- Ada 83\n@@ -1298,6 +1299,7 @@ package Snames is\n       Attribute_Definite,\n       Attribute_Delta,\n       Attribute_Denorm,\n+      Attribute_Descriptor_Size,\n       Attribute_Digits,\n       Attribute_Elaborated,\n       Attribute_Emax,"}]}