{"sha": "fe58fea70b2614f36fb9e1fde78af892426ad8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1OGZlYTcwYjI2MTRmMzZmYjllMWZkZTc4YWY4OTI0MjZhZDhhNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T11:52:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T11:52:04Z"}, "message": "[multiple changes]\n\n2011-12-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* freeze.adb (Freeze_Expression): Allow freezing of static\n\tscalar subtypes that are prefixes of an attribute, even if not\n\tyet marked static. Such attributes will get marked as static\n\tlater in Eval_Attribute (as called from Resolve_Attribute).\n\t* sem_attr.adb (Eval_Attribute): Remove wrong code that does an\n\tearly return for attribute prefixes that are unfrozen source-level\n\ttypes. This code was incorrectly bypassing folding of unfrozen\n\tstatic subtype attributes in default expressions (the executable\n\texample in the now-deleted comment was in fact illegal).\n\n2011-12-12  Robert Dewar  <dewar@adacore.com>\n\n\t* a-coinve.adb, sem_res.adb, prj-nmsc.adb, a-cobove.adb, a-convec.adb,\n\tgnatls.adb, sem_ch13.adb, prj-env.adb, prj-env.ads: Minor reformatting.\n\n2011-12-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* gsocket.h: Adjust previous patch.\n\nFrom-SVN: r182228", "tree": {"sha": "47e75a0a07789fbe0929f7955dd7427cfbfb0c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47e75a0a07789fbe0929f7955dd7427cfbfb0c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe58fea70b2614f36fb9e1fde78af892426ad8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe58fea70b2614f36fb9e1fde78af892426ad8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe58fea70b2614f36fb9e1fde78af892426ad8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe58fea70b2614f36fb9e1fde78af892426ad8a6/comments", "author": null, "committer": null, "parents": [{"sha": "ee1a757231c05815f7e2f9e5e0ced98b380c0416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1a757231c05815f7e2f9e5e0ced98b380c0416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1a757231c05815f7e2f9e5e0ced98b380c0416"}], "stats": {"total": 215, "additions": 112, "deletions": 103}, "files": [{"sha": "e644b7e78fd46b67e0c7e4f1db715198b8fb9e34", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -1,3 +1,24 @@\n+2011-12-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Allow freezing of static\n+\tscalar subtypes that are prefixes of an attribute, even if not\n+\tyet marked static. Such attributes will get marked as static\n+\tlater in Eval_Attribute (as called from Resolve_Attribute).\n+\t* sem_attr.adb (Eval_Attribute): Remove wrong code that does an\n+\tearly return for attribute prefixes that are unfrozen source-level\n+\ttypes. This code was incorrectly bypassing folding of unfrozen\n+\tstatic subtype attributes in default expressions (the executable\n+\texample in the now-deleted comment was in fact illegal).\n+\n+2011-12-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-coinve.adb, sem_res.adb, prj-nmsc.adb, a-cobove.adb, a-convec.adb,\n+\tgnatls.adb, sem_ch13.adb, prj-env.adb, prj-env.ads: Minor reformatting.\n+\n+2011-12-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gsocket.h: Adjust previous patch.\n+\n 2011-12-12  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_disp.adb: Minor reformatting."}, {"sha": "71f65dfea6b3d1169a9683ee6da4cf195bf93e00", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -738,16 +738,16 @@ package body Ada.Containers.Bounded_Vectors is\n       --  The value of the iterator object's Index component influences the\n       --  behavior of the First (and Last) selector function.\n \n-      --  When the Index component is No_Index, this means the iterator object\n-      --  was constructed without a start expression, in which case the\n+      --  When the Index component is No_Index, this means the iterator\n+      --  object was constructed without a start expression, in which case the\n       --  (forward) iteration starts from the (logical) beginning of the entire\n       --  sequence of items (corresponding to Container.First, for a forward\n       --  iterator).\n \n-      --  Otherwise, this is iteration over a partial sequence of items. When\n-      --  the Index component isn't No_Index, the iterator object was\n-      --  constructed with a start expression, that specifies the position from\n-      --  which the (forward) partial iteration begins.\n+      --  Otherwise, this is iteration over a partial sequence of items.\n+      --  When the Index component isn't No_Index, the iterator object was\n+      --  constructed with a start expression, that specifies the position\n+      --  from which the (forward) partial iteration begins.\n \n       if Object.Index = No_Index then\n          return First (Object.Container.all);"}, {"sha": "b845e6fc7ffb019ff145f5c32328f6bd818b3e0c", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -1184,16 +1184,16 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  The value of the iterator object's Index component influences the\n       --  behavior of the First (and Last) selector function.\n \n-      --  When the Index component is No_Index, this means the iterator object\n-      --  was constructed without a start expression, in which case the\n+      --  When the Index component is No_Index, this means the iterator\n+      --  object was constructed without a start expression, in which case the\n       --  (forward) iteration starts from the (logical) beginning of the entire\n       --  sequence of items (corresponding to Container.First, for a forward\n       --  iterator).\n \n-      --  Otherwise, this is iteration over a partial sequence of items. When\n-      --  the Index component isn't No_Index, the iterator object was\n-      --  constructed with a start expression, that specifies the position from\n-      --  which the (forward) partial iteration begins.\n+      --  Otherwise, this is iteration over a partial sequence of items.\n+      --  When the Index component isn't No_Index, the iterator object was\n+      --  constructed with a start expression, that specifies the position\n+      --  from which the (forward) partial iteration begins.\n \n       if Object.Index = No_Index then\n          return First (Object.Container.all);\n@@ -2630,8 +2630,8 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  is a partial iteration, over a subset of the complete sequence of\n       --  items. The iterator object was constructed with a start expression,\n       --  indicating the position from which the iteration begins. Note that\n-      --  the start position has the same value irrespective of whether this is\n-      --  a forward or reverse iteration.\n+      --  the start position has the same value irrespective of whether this\n+      --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n                     (Limited_Controlled with\n@@ -2660,15 +2660,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  The value of the iterator object's Index component influences the\n       --  behavior of the Last (and First) selector function.\n \n-      --  When the Index component is No_Index, this means the iterator object\n-      --  was constructed without a start expression, in which case the\n+      --  When the Index component is No_Index, this means the iterator\n+      --  object was constructed without a start expression, in which case the\n       --  (reverse) iteration starts from the (logical) beginning of the entire\n       --  sequence (corresponding to Container.Last, for a reverse iterator).\n \n-      --  Otherwise, this is iteration over a partial sequence of items. When\n-      --  the Index component is not No_Index, the iterator object was\n-      --  constructed with a start expression, that specifies the position from\n-      --  which the (reverse) partial iteration begins.\n+      --  Otherwise, this is iteration over a partial sequence of items.\n+      --  When the Index component is not No_Index, the iterator object was\n+      --  constructed with a start expression, that specifies the position\n+      --  from which the (reverse) partial iteration begins.\n \n       if Object.Index = No_Index then\n          return Last (Object.Container.all);"}, {"sha": "f80dd3b29c05865e362bc20c5996f850d4d73ef1", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -855,16 +855,16 @@ package body Ada.Containers.Vectors is\n       --  The value of the iterator object's Index component influences the\n       --  behavior of the First (and Last) selector function.\n \n-      --  When the Index component is No_Index, this means the iterator object\n-      --  was constructed without a start expression, in which case the\n+      --  When the Index component is No_Index, this means the iterator\n+      --  object was constructed without a start expression, in which case the\n       --  (forward) iteration starts from the (logical) beginning of the entire\n       --  sequence of items (corresponding to Container.First, for a forward\n       --  iterator).\n \n-      --  Otherwise, this is iteration over a partial sequence of items. When\n-      --  the Index component isn't No_Index, the iterator object was\n-      --  constructed with a start expression, that specifies the position from\n-      --  which the (forward) partial iteration begins.\n+      --  Otherwise, this is iteration over a partial sequence of items.\n+      --  When the Index component isn't No_Index, the iterator object was\n+      --  constructed with a start expression, that specifies the position\n+      --  from which the (forward) partial iteration begins.\n \n       if Object.Index = No_Index then\n          return First (Object.Container.all);\n@@ -2199,8 +2199,8 @@ package body Ada.Containers.Vectors is\n       --  is a partial iteration, over a subset of the complete sequence of\n       --  items. The iterator object was constructed with a start expression,\n       --  indicating the position from which the iteration begins. Note that\n-      --  the start position has the same value irrespective of whether this is\n-      --  a forward or reverse iteration.\n+      --  the start position has the same value irrespective of whether this\n+      --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n                     (Limited_Controlled with\n@@ -2229,15 +2229,15 @@ package body Ada.Containers.Vectors is\n       --  The value of the iterator object's Index component influences the\n       --  behavior of the Last (and First) selector function.\n \n-      --  When the Index component is No_Index, this means the iterator object\n-      --  was constructed without a start expression, in which case the\n+      --  When the Index component is No_Index, this means the iterator\n+      --  object was constructed without a start expression, in which case the\n       --  (reverse) iteration starts from the (logical) beginning of the entire\n       --  sequence (corresponding to Container.Last, for a reverse iterator).\n \n-      --  Otherwise, this is iteration over a partial sequence of items. When\n-      --  the Index component is not No_Index, the iterator object was\n-      --  constructed with a start expression, that specifies the position from\n-      --  which the (reverse) partial iteration begins.\n+      --  Otherwise, this is iteration over a partial sequence of items.\n+      --  When the Index component is not No_Index, the iterator object was\n+      --  constructed with a start expression, that specifies the position\n+      --  from which the (reverse) partial iteration begins.\n \n       if Object.Index = No_Index then\n          return Last (Object.Container.all);"}, {"sha": "336825ea91eb6e578554baf0758acee6b3df9163", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -4360,13 +4360,23 @@ package body Freeze is\n \n       --  If expression is non-static, then it does not freeze in a default\n       --  expression, see section \"Handling of Default Expressions\" in the\n-      --  spec of package Sem for further details. Note that we have to\n-      --  make sure that we actually have a real expression (if we have\n-      --  a subtype indication, we can't test Is_Static_Expression!)\n+      --  spec of package Sem for further details. Note that we have to make\n+      --  sure that we actually have a real expression (if we have a subtype\n+      --  indication, we can't test Is_Static_Expression!) However, we exclude\n+      --  the case of the prefix of an attribute of a static scalar subtype\n+      --  from this early return, because static subtype attributes should\n+      --  always cause freezing, even in default expressions, but the attribute\n+      --  may not have been marked as static yet (because in Resolve_Attribute,\n+      --  the call to Eval_Attribute follows the call of Freeze_Expression on\n+      --  the prefix).\n \n       if In_Spec_Exp\n         and then Nkind (N) in N_Subexpr\n         and then not Is_Static_Expression (N)\n+        and then (Nkind (Parent (N)) /= N_Attribute_Reference\n+                   or else not (Is_Entity_Name (N)\n+                                 and then Is_Type (Entity (N))\n+                                 and then Is_Static_Subtype (Entity (N))))\n       then\n          return;\n       end if;"}, {"sha": "a1d0e8d36a94111c765a67682af067aa344a5f47", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -1186,10 +1186,11 @@ procedure Gnatls is\n    procedure Search_RTS (Name : String) is\n       Src_Path : String_Ptr;\n       Lib_Path : String_Ptr;\n-      --  Pathes for source and include subdirs\n+      --  Paths for source and include subdirs\n \n       Rts_Full_Path : String_Access;\n       --  Full path for RTS project\n+\n    begin\n       --  Try to find the RTS\n \n@@ -1207,32 +1208,32 @@ procedure Gnatls is\n \n       if Lib_Path /= null then\n          Osint.Fail (\"RTS path not valid: missing adainclude directory\");\n-\n       elsif Src_Path /= null then\n          Osint.Fail (\"RTS path not valid: missing adalib directory\");\n-\n       end if;\n \n-      --  Try to find the RTS on the project path.  First setup the project\n-      --  path.\n+      --  Try to find the RTS on the project path. First setup the project path\n \n       Initialize_Default_Project_Path\n         (Prj_Path, Target_Name => Sdefault.Target_Name.all);\n \n       Rts_Full_Path := Get_Runtime_Path (Prj_Path, Name);\n+\n       if Rts_Full_Path /= null then\n+\n          --  Directory name was found on the project path.  Look for the\n          --  include subdir(s).\n \n-         Src_Path := Get_RTS_Search_Dir (Name, Include);\n+         Src_Path := Get_RTS_Search_Dir (Rts_Full_Path.all, Include);\n+\n          if Src_Path /= null then\n             Add_Search_Dirs (Src_Path, Include);\n             return;\n          end if;\n       end if;\n \n-      Osint.Fail (\"RTS path not valid: missing \" &\n-                    \"adainclude and adalib directories\");\n+      Osint.Fail\n+        (\"RTS path not valid: missing adainclude and adalib directories\");\n    end Search_RTS;\n \n    -------------------"}, {"sha": "a4507fe8804ccd62622e38f37a61c1885f8012e5", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -165,13 +165,14 @@\n #include <windows.h>\n \n #elif defined(VMS)\n+/* Allow a large number of fds for select.  */\n #define FD_SETSIZE 4096\n-#include <sys/types.h>\n-#include <sys/time.h>\n #ifndef IN_RTS\n-/* These DEC C headers are not available when building with GCC */\n-#include <in.h>\n+/* These DEC C headers are not available when building with GCC.  Order is\n+   important.  */\n+#include <time.h>\n #include <tcp.h>\n+#include <in.h>\n #include <ioctl.h>\n #include <netdb.h>\n #endif"}, {"sha": "bce59d96bcc0e76dac4a5479dee6f060487ab29a", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -1405,23 +1405,33 @@ package body Prj.Env is\n    -- Get_Runtime_Path --\n    ----------------------\n \n-   function Get_Runtime_Path (Self : Project_Search_Path; Name : String)\n-     return String_Access is\n+   function Get_Runtime_Path\n+     (Self : Project_Search_Path;\n+      Name : String) return String_Access\n+   is\n       function Is_Base_Name (Path : String) return Boolean;\n       --  Returns True if Path has no directory separator\n \n+      ------------------\n+      -- Is_Base_Name --\n+      ------------------\n+\n       function Is_Base_Name (Path : String) return Boolean is\n       begin\n-         for I in Path'Range loop\n-            if Path (I) = Directory_Separator or else Path (I) = '/' then\n+         for J in Path'Range loop\n+            if Path (J) = Directory_Separator or else Path (J) = '/' then\n                return False;\n             end if;\n          end loop;\n+\n          return True;\n       end Is_Base_Name;\n \n       function Find_Rts_In_Path is new Prj.Env.Find_Name_In_Path\n         (Check_Filename => Is_Directory);\n+\n+      --  Start of processing for Get_Runtime_Path\n+\n    begin\n       if not Is_Base_Name (Name) then\n          return Find_Rts_In_Path (Self, Name);"}, {"sha": "e2bb4448da5df7e44193c0561f8c411917234c1f", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -236,8 +236,9 @@ package Prj.Env is\n    --\n    --  Returns No_Name if no such project was found\n \n-   function Get_Runtime_Path (Self : Project_Search_Path; Name : String)\n-     return String_Access;\n+   function Get_Runtime_Path\n+     (Self : Project_Search_Path;\n+      Name : String) return String_Access;\n    --  Compute the full path for the project-based runtime name.  It first\n    --  checks that name is not a simple name (must has a path separator in it),\n    --  and returns null in case of failure.  This check might be removed in the"}, {"sha": "39a22b6c31687ef2c340332fb285d9f86c38e9de", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -5284,9 +5284,9 @@ package body Prj.Nmsc is\n                \"Object_Dir cannot be empty\",\n                Object_Dir.Location, Project);\n \n-         elsif Setup_Projects and then\n-               No_Sources and then\n-               Project.Extends = No_Project\n+         elsif Setup_Projects\n+           and then No_Sources\n+           and then Project.Extends = No_Project\n          then\n             --  Do not create an object directory for a non extending project\n             --  with no sources.\n@@ -5371,9 +5371,9 @@ package body Prj.Nmsc is\n                \"Exec_Dir cannot be empty\",\n                Exec_Dir.Location, Project);\n \n-         elsif Setup_Projects and then\n-               No_Sources and then\n-               Project.Extends = No_Project\n+         elsif Setup_Projects\n+           and then No_Sources\n+           and then Project.Extends = No_Project\n          then\n             --  Do not create an exec directory for a non extending project\n             --  with no sources."}, {"sha": "f72bebdba7b0eac61beffeed4e838d4f328cf9dc", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -5618,40 +5618,6 @@ package body Sem_Attr is\n    --  Start of processing for Eval_Attribute\n \n    begin\n-      --  No folding in spec expression that comes from source where the prefix\n-      --  is an unfrozen entity. This avoids premature folding in cases like:\n-\n-      --    procedure DefExprAnal is\n-      --       type R is new Integer;\n-      --       procedure P (Arg : Integer := R'Size);\n-      --       for R'Size use 64;\n-      --       procedure P (Arg : Integer := R'Size) is\n-      --       begin\n-      --          Put_Line (Arg'Img);\n-      --       end P;\n-      --    begin\n-      --       P;\n-      --    end;\n-\n-      --  which should print 64 rather than 32. The exclusion of non-source\n-      --  constructs from this test comes from some internal usage in packed\n-      --  arrays, which otherwise fails, could use more analysis perhaps???\n-\n-      --  We do however go ahead with generic actual types, otherwise we get\n-      --  some regressions, probably these types should be frozen anyway???\n-\n-      if In_Spec_Expression\n-        and then Comes_From_Source (N)\n-        and then not (Is_Entity_Name (P)\n-                       and then\n-                        (Is_Frozen (Entity (P))\n-                          or else (Is_Type (Entity (P))\n-                                    and then\n-                                      Is_Generic_Actual_Type (Entity (P)))))\n-      then\n-         return;\n-      end if;\n-\n       --  Acquire first two expressions (at the moment, no attributes take more\n       --  than two expressions in any case).\n "}, {"sha": "9ddabcc9cbb230ddbbad555942390735a30fa06c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -5876,12 +5876,9 @@ package body Sem_Ch13 is\n          --  aspect expressions have not been preanalyzed, so do it now.\n          --  There are no conformance checks to perform in this case.\n \n-         if No (T)\n-           and then Inside_A_Generic\n-         then\n+         if No (T) and then Inside_A_Generic then\n             Check_Aspect_At_Freeze_Point (ASN);\n             return;\n-\n          else\n             Preanalyze_Spec_Expression (End_Decl_Expr, T);\n          end if;"}, {"sha": "663e0e8203a009d033f62a4f8445757ea7057c36", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58fea70b2614f36fb9e1fde78af892426ad8a6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fe58fea70b2614f36fb9e1fde78af892426ad8a6", "patch": "@@ -1989,6 +1989,7 @@ package body Sem_Res is\n       end if;\n \n       Debug_A_Entry (\"resolving  \", N);\n+\n       if Debug_Flag_V then\n          Write_Overloads (N);\n       end if;\n@@ -2584,14 +2585,15 @@ package body Sem_Res is\n          Resolution_Failed;\n          return;\n \n+      --  Only one intepretation\n+\n       else\n          --  In Ada 2005, if we have something like \"X : T := 2 + 2;\", where\n          --  the \"+\" on T is abstract, and the operands are of universal type,\n          --  the above code will have (incorrectly) resolved the \"+\" to the\n-         --  universal one in Standard. Therefore, we check for this case, and\n-         --  give an error. We can't do this earlier, because it would cause\n-         --  legal cases to get errors (when some other type has an abstract\n-         --  \"+\").\n+         --  universal one in Standard. Therefore check for this case and give\n+         --  an error. We can't do this earlier, because it would cause legal\n+         --  cases to get errors (when some other type has an abstract \"+\").\n \n          if Ada_Version >= Ada_2005 and then\n            Nkind (N) in N_Op and then"}]}