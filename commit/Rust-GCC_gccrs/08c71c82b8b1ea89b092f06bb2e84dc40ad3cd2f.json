{"sha": "08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjNzFjODJiOGIxZWE4OWIwOTJmMDZiYjJlODRkYzQwYWQzY2QyZg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-09-28T08:07:39Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-09-28T08:07:39Z"}, "message": "configure.ac: Add test for new section attribute specifier \"e\" via define...\n\n\t* configure.ac: Add test for new section attribute\n\tspecifier \"e\" via define HAVE_GAS_SECTION_EXCLUDE.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.\n\t* config/i386/winnt.c (i386_pe_asm_named_section): Emit\n\tnew section flag \"e\" for excluded sections, if supported.\n\tOtherwise we mark section withc SECTION_EXCLUDE flag\n\tas never-load.\n\nFrom-SVN: r179308", "tree": {"sha": "54fa8e39315a2300568c6f1addebf0270867b3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54fa8e39315a2300568c6f1addebf0270867b3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/comments", "author": null, "committer": null, "parents": [{"sha": "5e3a0ed1a7e8d1c08052cb5939fb86529623cab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3a0ed1a7e8d1c08052cb5939fb86529623cab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3a0ed1a7e8d1c08052cb5939fb86529623cab9"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "417ba5b1e47050c03b1f997dbd78bf4f45cecdc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "patch": "@@ -1,3 +1,14 @@\n+2011-09-28  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* configure.ac: Add test for new section attribute\n+\tspecifier \"e\" via define HAVE_GAS_SECTION_EXCLUDE.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* config/i386/winnt.c (i386_pe_asm_named_section): Emit\n+\tnew section flag \"e\" for excluded sections, if supported.\n+\tOtherwise we mark section withc SECTION_EXCLUDE flag\n+\tas never-load.\n+\n 2011-09-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/m32r/m32r.md: Use match_test rather than eq/ne symbol_ref"}, {"sha": "f2847d8789562b36230df6bcd8fb75f52a5a0408", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "patch": "@@ -1015,6 +1015,12 @@\n #endif\n \n \n+/* Define if your assembler supports specifying the section flag e. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_SECTION_EXCLUDE\n+#endif\n+\n+\n /* Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.\n    */\n #ifndef USED_FOR_TARGET"}, {"sha": "af3f97571379d738c97b54f2d93e408375aabf95", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "patch": "@@ -484,6 +484,11 @@ i386_pe_asm_named_section (const char *name, unsigned int flags,\n {\n   char flagchars[8], *f = flagchars;\n \n+#if defined (HAVE_GAS_SECTION_EXCLUDE) && HAVE_GAS_SECTION_EXCLUDE == 1\n+  if ((flags & SECTION_EXCLUDE) != 0)\n+    *f++ = 'e';\n+#endif\n+\n   if ((flags & (SECTION_CODE | SECTION_WRITE)) == 0)\n     /* readonly data */\n     {\n@@ -498,6 +503,12 @@ i386_pe_asm_named_section (const char *name, unsigned int flags,\n         *f++ = 'w';\n       if (flags & SECTION_PE_SHARED)\n         *f++ = 's';\n+#if !defined (HAVE_GAS_SECTION_EXCLUDE) || HAVE_GAS_SECTION_EXCLUDE == 0\n+      /* If attribute \"e\" isn't supported we mark this section as\n+         never-load.  */\n+      if ((flags & SECTION_EXCLUDE) != 0)\n+\t*f++ = 'n';\n+#endif\n     }\n \n   /* LTO sections need 1-byte alignment to avoid confusing the"}, {"sha": "e067f388733494bde204c0e9851d7e60a1917e70", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "patch": "@@ -24232,6 +24232,44 @@ $as_echo \"$as_me: WARNING: LTO for $target requires binutils >= 2.20.1, but vers\n \t      ;;\n \t  esac\n \tfi\n+\t# Test if the assembler supports the section flag 'e' for specifying\n+\t# an excluded section.\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .section with e\" >&5\n+$as_echo_n \"checking assembler for .section with e... \" >&6; }\n+if test \"${gcc_cv_as_section_has_e+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_section_has_e=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 22 \\) \\* 1000 + 51`\n+  then gcc_cv_as_section_has_e=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '.section foo1,\"e\"\n+.byte 0,0,0,0' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_section_has_e=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_has_e\" >&5\n+$as_echo \"$gcc_cv_as_section_has_e\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_SECTION_EXCLUDE `if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n \t;;\n     esac\n "}, {"sha": "3df77c3220de14bc610fabdce6a32fa3763c7585", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=08c71c82b8b1ea89b092f06bb2e84dc40ad3cd2f", "patch": "@@ -3553,6 +3553,15 @@ foo:\tnop\n \t      ;;\n \t  esac\n \tfi\n+\t# Test if the assembler supports the section flag 'e' for specifying\n+\t# an excluded section.\n+\tgcc_GAS_CHECK_FEATURE([.section with e], gcc_cv_as_section_has_e,\n+\t  [2,22,51],,\n+[.section foo1,\"e\"\n+.byte 0,0,0,0])\n+\tAC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n+\t  [`if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`],\n+          [Define if your assembler supports specifying the section flag e.])\n \t;;\n     esac\n "}]}