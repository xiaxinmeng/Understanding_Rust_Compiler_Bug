{"sha": "c12894e1c3ba3e702df869a4a143bd2ff056685c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyODk0ZTFjM2JhM2U3MDJkZjg2OWE0YTE0M2JkMmZmMDU2Njg1Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-20T08:11:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-20T08:11:49Z"}, "message": "alpha.c (vmskrunch): Delete\n\n        * alpha/alpha.c (vmskrunch): Delete\n        * alpha/vms.h (ENCODE_SECTION_INFO, ASM_DECLARE_FUNCTION_NAME): Delete.\n\n        * make-l2.com: Support openVMS/Alpha.\n\n        * vmsconfig.com: Fix to work on openVMS/Alpha and openVMS/VAX.\n\nSome patches from Klaus.\n\nFrom-SVN: r16097", "tree": {"sha": "7fd29f0fc694838de1ecd7c4e6f42777d3372c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fd29f0fc694838de1ecd7c4e6f42777d3372c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c12894e1c3ba3e702df869a4a143bd2ff056685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12894e1c3ba3e702df869a4a143bd2ff056685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12894e1c3ba3e702df869a4a143bd2ff056685c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12894e1c3ba3e702df869a4a143bd2ff056685c/comments", "author": null, "committer": null, "parents": [{"sha": "7d4f2e6c2a65afed8d203e9cfe86005b082bdf9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f2e6c2a65afed8d203e9cfe86005b082bdf9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4f2e6c2a65afed8d203e9cfe86005b082bdf9a"}], "stats": {"total": 273, "additions": 61, "deletions": 212}, "files": [{"sha": "1c99ab6fcec0fe9a5489887df8a463148ed79f4b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 144, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c12894e1c3ba3e702df869a4a143bd2ff056685c", "patch": "@@ -1992,150 +1992,6 @@ add_long_const (file, c, in_reg, out_reg, temp_reg)\n \n #if OPEN_VMS\n \n-/* \n-   Quick and dirty vmskrunch routine to ensure symbols are within the\n-   64 bytes limit imposed by VMS.\n-\n-   This is written specifically for GNAT, and may not work for C++.\n-\n-   This routine duplicates every symbol passed to it whether it is too\n-   long or not, which is a waste of space, fix later.\n-*/\n-#include <string.h>\n-char*\n-vmskrunch (name)\n-     char *name;\n-{\n-  char *foo;\n-  int max = 60; /* Allow for the ..xx extension */\n-  int len, tlen;\n-\n-  if (name[0] == '*')\n-    return (&name[1]);\n-\n-  len = tlen = strlen (name);\n-  foo = xstrdup (name);\n-\n-  /* Don't muck with the ..xx extenstion */\n-  if ((foo [tlen-4] == '.') && (foo [tlen-3] == '.'))\n-    {\n-      max = max + 4;\n-      if (tlen > max)\n-\t{\n-\t  foo [tlen-4] = 0;\n-\t  len = len - 4;\n-\t  max = max - 4;\n-\t}\n-    }\n-\n-  if (len > max)\n-    {\n-      char *bar;\n-      int i, j, slen, nlen, xlen, chopchar;\n-\n-      nlen = len;\n-\n-      /* Change all _ and . characters to spaces, if thats enough then quit.\n-\t For example: \"foobar__foo__bar\" becomes \"foobar  foo  bar\" */\n-\n-      for (i = 0; bar = index (foo, '_'); i++)\n-\t*bar = ' ';\n-      nlen = nlen - i;\n-\n-      for (i = 0; bar = index (foo, '.'); i++)\n-\t*bar = ' ';\n-      nlen = nlen - i;\n-\n-      for (i = 0; bar = index (foo, '$'); i++)\n-\t*bar = ' ';\n-      nlen = nlen - i;\n-\n-      /* Iteratively make blank the rightmost non-blank character on the\n-\t longest leftmost substring delmited by blanks, until it's short\n-\t enough. For example: \"foobar  foo  bar\" becomes, successively:\n-\t \"fooba   foo bar\"\n-\t \"foob    foo bar\"\n-\t \"foo     foo bar\"\n-\t \"fo      foo bar\"\n-\t \"fo      fo  bar\"\n-\t \"fo      fo  ba \"\n-\t \"f       fo  ba \"\n-\t \"f       f   ba \"\n-\t \"f       f   b  \"\n-\t etc.  */\n-\n-      while (nlen > max)\n-\t{\n-\t  j = 0;\n-\t  xlen = 0;\n-\n-\t  while (foo[j])\n-\t    {\n-\t      /* Find first non-blank */\n-\t      if (foo[j])\n-\t\tfor (i = j; foo[i]==' ' && foo[i]; i++)\n-\t\t  ;\n-\n-\t      /* Find the first blank */\n-\t      j = i;\n-\t      if (foo[j])\n-\t\tfor (i = j + 1; foo[i] != ' ' && foo[i]; i++)\n-\t\t  ;\n-\n-\t      /* If this substring is the longest so far, remember the\n-\t\t position of the character to chop off. */\n-\t      slen = i - j;\n-\t      if (slen > xlen)\n-\t\t{\n-\t\t  chopchar = i - 1;\n-\t\t  xlen = slen;\n-\t\t}\n-\n-\t      j = i;\n-\t    }\n-\n-\t  /* Try to avoid chopping uppercase suffix letters */\n-\t  if (isupper (foo [chopchar]))\n-\t    {\n-\t      for (i = chopchar;\n-\t\t   isupper (foo[i]) && foo[i] != ' ' && i >= 0;\n-\t\t   i--)\n-\t\t;\n-\t      if (islower (foo[i]))\n-\t\tchopchar = i;\n-\t    }\n-\t  foo [chopchar] = ' ';\n-\t  nlen--;\n-\t}\n-\n-      /* Put the ..xx extension back */\n-      if (len != tlen)\n-\t{\n-\t  foo [len] = '.';\n-\t  len = len + 4;\n-\t}\n-\n-      /* Collapse all the blanks */\n-      j = 0;\n-      for (i = 0; foo[i]; i++)\n-\tif (foo[i] != ' ')\n-\t  foo[j++] = foo[i];\n-      foo[j] = 0;\n-\n-      return foo;\n-    }\n-\n-  /* Put back the ..xx extension */\n-  if (len != tlen)\n-    {\n-      foo [len] = '.';\n-      len = len + 4;\n-    }\n-\n-  free (foo);\n-  return name;\n-}\n-\n /* On vms we have two kinds of functions:\n \n    - stack frame (PROC_STACK)"}, {"sha": "46e5ed087da50e26967bc081db741d86c5bd593d", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=c12894e1c3ba3e702df869a4a143bd2ff056685c", "patch": "@@ -141,20 +141,6 @@ Boston, MA 02111-1307, USA.  */\n    + ALPHA_ARG_SIZE (MODE, TYPE, NAMED)\t\t\t\t\t\\\n  ? 6 - (CUM & 0xff) : 0)\n \n-extern char *vmskrunch ();\n-#undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL && ! TREE_PUBLIC (DECL)) \\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (TREE_CODE_CLASS (TREE_CODE (DECL)) == 'd'\t\t\t\\\n-      && GET_CODE (DECL_RTL (DECL)) == MEM\t\t\t\\\n-      && GET_CODE (XEXP (DECL_RTL (DECL), 0)) == SYMBOL_REF)\t\\\n-\tXSTR (XEXP (DECL_RTL (DECL), 0), 0)\t\t\t\\\n-\t  = vmskrunch (XSTR (XEXP (DECL_RTL (DECL), 0), 0));\t\\\n-} while (0)\n-\n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments. \n \n@@ -191,12 +177,6 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\n \n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL)\t\\\n-{\t\t\t\t\t\t\t\\\n-   alpha_function_name = vmskrunch (NAME);\t\t\\\n-}\n-\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\"}, {"sha": "28a5c86b8effa2e285ac3e9f72603478498ea31b", "filename": "gcc/make-l2.com", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fmake-l2.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fmake-l2.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-l2.com?ref=c12894e1c3ba3e702df869a4a143bd2ff056685c", "patch": "@@ -2,49 +2,41 @@ $! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n+$ arch_indx = 1 + ((f$getsyi(\"CPU\").ge.128).and.1)      ! vax==1, alpha==2\n+$ arch = f$element(arch_indx,\"|\",\"|vax|alpha|\")\n+$!\n $! Command file to build libgcc2.olb.  You should only run this once you \n $! have the current compiler installed, otherwise some of the builtins will\n $! not be recognized.  Once you have built libgcc2.olb, you can merge this\n-$! with gnu_cc:[000000]gcclib.olb\n+$! with gnu:[000000]gcclib.olb\n $!\n $! All of the source code is assumed to be in libgcc2.c, and a list of the\n $! modules that we need from there is in libgcc2.list (which is generated\n $! when config-gcc.com is run).\n $!\n $if f$search(\"gcc-cc1.exe\").eqs.\"\"\n $  then\n-$    gcc_cc1:=$gnu_cc:[000000]gcc-cc1\n-$    if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).eqs.\"1\" then goto nocompile\n+$    gcc-cc1:=$gnu_cc_library:gcc-cc1\n $  else\n $    gcc_cc1:=$sys$disk:[]gcc-cc1\n $  endif\n $!\n $if f$search(\"gcc-cpp.exe\").eqs.\"\"\n $  then\n-$    gcc_cpp:=$gnu_cc:[000000]gcc-cpp\n-$    if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).eqs.\"1\" then goto nocompile\n-$    Version:='f$trnlnm(\"GNU_CC_VERSION\")'\n+$    gcc_cpp:=$gnu_cc_library:gcc-cpp\n $  else\n $    gcc_cpp:=$sys$disk:[]gcc-cpp\n $    open ifile$ version.opt\n $    read ifile$ line\n $    close ifile$\n-$    Version=line-\"ident=\"\"\"-\"\"\"\n $  endif\n $!\n-$gcc_as:=$gnu_cc:[000000]gcc-as\n-$cpp_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.cpp\n-$s_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.s\n+$ gcc_as:=$gnu_root:[bin]as       \n+$ cpp_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.cpp\n+$ s_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.s\n $!\n $set symbol/scope=(nolocal,noglobal)\n $!\n-$goto compile\n-$!\n-$nocompile:\n-$write sys$error \"You must have gcc version 2 in order to build libgcc2.\"\n-$exit 0\n-$!\n-$compile:\n $lib/create libgcc2.olb\n $on error then goto c_err\n $on control_y then goto c_err\n@@ -68,17 +60,30 @@ $!\n $! We do this by hand, since the VMS compiler driver does not have a way\n $! of specifying an alternate location for the compiler executables.\n $!\n-$ gcc_cpp \"-I[]\" \"-I[.ginclude]\" \"-D''flnm'\"  libgcc2.c 'cpp_file'\n-$ gcc_cc1 'cpp_file' -dumpbase 'objname' -\n+$ if arch .eqs. \"alpha\"\n+$ then\n+$   gcc_cpp \"-D__IEEE_FLOAT\" \"-I[]\" \"-I[.config]\" \"-I[.ginclude]\" \"-D''flnm'\"  libgcc2.c 'cpp_file'\n+$   gcc_cc1 'cpp_file' -dumpbase 'objname' -\n+        -quiet -mgas \"-O1\" -mfloat-ieee -o 's_file'\n+$ else\n+$   gcc_cpp \"-I[]\" \"-I[.config]\" \"-I[.ginclude]\" \"-D''flnm'\"  libgcc2.c 'cpp_file'\n+$   gcc_cc1 'cpp_file' -dumpbase 'objname' -\n         -quiet -mgnu -g \"-O1\" -mvaxc-alignment   -o 's_file'\n+$ endif\n $ delete/nolog 'cpp_file';\n-$ gcc_as \"-vGNU CC  V''Version'\" 's_file'  -o 'objname'.OBJ\n+$   gcc_as 's_file'  -o 'objname'.OBJ\n+$ if arch .eqs. \"vax\"\n+$ then\n $! Assemble again, preserving lowercase symbol names this time.\n-$ gcc_as \"-vGNU CC  V''Version'\" -h3 's_file'  -o 'objname'-c.OBJ\n+$   gcc_as -h3 's_file'  -o 'objname'-c.OBJ\n+$   library libgcc2.olb 'objname'.obj,'objname'-c.obj\n+$   delete/nolog 'objname'.obj;,'objname'-c.obj;\n+$ else\n+$   library libgcc2.olb 'objname'.obj\n+$   delete/nolog 'objname'.obj;\n+$ endif\n $ delete/nolog 's_file';\n $!\n-$ library libgcc2.olb 'objname'.obj,'objname'-c.obj\n-$ delete/nolog 'objname'.obj;,'objname'-c.obj;\n $!\n $goto loop1\n $!"}, {"sha": "dc74ff1edc6aa32e30d50ee473a4e2a4e6c9dac7", "filename": "gcc/vmsconfig.com", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fvmsconfig.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12894e1c3ba3e702df869a4a143bd2ff056685c/gcc%2Fvmsconfig.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsconfig.com?ref=c12894e1c3ba3e702df869a4a143bd2ff056685c", "patch": "@@ -1,7 +1,7 @@\n $ !\n $ !\tSet up to compile GCC on VMS.\n $ !\n-$! Set the def dir to proper place for use in batch. Works for interactive too.\n+$ ! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $ !\n@@ -14,8 +14,17 @@ $ arch_indx = 1 + ((f$getsyi(\"CPU\").ge.128).and.1)\t! vax==1, alpha==2\n $ arch = f$element(arch_indx,\"|\",\"|vax|alpha|\")\n $ !\n $ if f$search(\"config.h\") .nes. \"\" then delete config.h.*\n-$ copy [.config.'arch']xm-vms.h []config.h\n-$ echo \"Linked `config.h' to `[.config.''arch']xm-vms.h'.\"\n+$ if arch .eqs. \"vax\"\n+$ then\n+$   copy [.config.'arch']xm-vms.h []config.h\n+$   echo \"Linked `config.h' to `[.config.''arch']xm-vms.h'.\"\n+$else\n+$   open/write cfile []config.h\n+$   write cfile \"#include \"+\"\"\"config/\"+arch+\"/xm-\"+arch+\".h\"+\"\"\"\n+$   write cfile \"#include \"+\"\"\"config/\"+arch+\"/xm-vms.h\"+\"\"\"\n+$   close cfile\n+$   echo \"Created `config.h'.\"\n+$ endif\n $ !\n $ if f$search(\"tconfig.h\") .nes. \"\" then delete tconfig.h.*\n $ create []tconfig.h\n@@ -34,7 +43,7 @@ $EOD\n $ echo \"Created `hconfig.h'.\n $ !\n $ if f$search(\"tm.h\") .nes. \"\" then delete tm.h.*\n-$!! copy [.config.'arch']vms.h []tm.h\n+$ !\n $ edit/tpu/nojournal/nosection/nodisplay/command=sys$input -\n         [.config.'arch']vms.h /output=[]tm.h\n $DECK\n@@ -60,7 +69,7 @@ $DECK\n    ENDLOOP;\n    WRITE_FILE(file, GET_INFO(COMMAND_LINE, \"output_file\"));\n    QUIT\n-$EOD\n+$  EOD\n $ echo \"Generated `tm.h' from `[.config.''arch']vms.h'.\"\n $ !\n $\t!crude hack to allow compiling from [.cp] subdirectory\n@@ -72,18 +81,21 @@ $ call make_lang_incl \"options.h\"\n $ !\n $ call make_lang_incl \"specs.h\"\n $ !\n-$ if f$search(\"''arch'.md\") .nes. \"\" then delete 'arch'.md;*\n-$ copy [.config.'arch']'arch'.md []'arch'.md\n-$ echo \"Copied `''arch'.md' from `[.config.''arch']''arch'.md'.\"\n+$ if arch .eqs. \"vax\"\n+$ then\n+$   if f$search(\"''arch'.md\") .nes. \"\" then delete 'arch'.md;*\n+$   copy [.config.'arch']'arch'.md []'arch'.md\n+$   echo \"Copied `''arch'.md' from `[.config.''arch']''arch'.md'.\"\n+$ endif\n $ !\n $ if f$search(\"aux-output.c\") .nes. \"\" then delete aux-output.c.*\n $ copy [.config.'arch']'arch'.c []aux-output.c\n $ echo \"Linked `aux-output.c' to `[.config.''arch']''arch'.c'.\n $ !\n-$!\n-$!\n-$! Create the file version.opt, which helps identify the executable.\n-$!\n+$ !\n+$ !\n+$ ! Create the file version.opt, which helps identify the executable.\n+$ !\n $search version.c version_string,\"=\"/match=and/output=t.tmp\n $open ifile$ t.tmp\n $read ifile$ line\n@@ -95,19 +107,9 @@ $ijk=f$locate(\"\"\"\",line)\n $line=f$extract(0,ijk,line)\n $ijk=f$locate(\"\\n\",line)\n $line=f$extract(0,ijk,line)\n-$!\n-$i=0\n-$loop:\n-$elm=f$element(i,\" \",line)\n-$if elm.eqs.\"\" then goto no_ident\n-$if (elm.les.\"9\").and.(elm.ges.\"0\") then goto write_ident\n-$i=i+1\n-$goto loop\n-$!\n-$no_ident:\n-$elm=\"?.??\"\n-$!\n-$!\n+$ !\n+$elm=f$element(1,\" \",line)\n+$ !\n $write_ident:\n $open/write ifile$ version.opt\n $write ifile$ \"ident=\"+\"\"\"\"+elm+\"\"\"\"\n@@ -175,6 +177,7 @@ PROCEDURE process_makefile( )\n   !\n   generate_option_file (\"OBJS\",      \"=\", \"independent.opt\");\n   generate_option_file (\"LIB2FUNCS\", \"=\", \"libgcc2.list\");\n+  generate_option_file (\"CXX_LIB2FUNCS\", \"=\", \"libgcc2-cxx.list\");\n   generate_option_file (\"BC_ALL\",    \"=\", \"bc_all.list\");\n   generate_option_file (\"BI_OBJ\",    \"=\", \"bi_all.opt\");\n   !\n@@ -239,6 +242,9 @@ PROCEDURE configure_makefile( )\n   COPY_TEXT (\"out_object_file=aux-output.o\");\tSPLIT_LINE;\t! aux-output.obj\n   COPY_TEXT (\"md_file=\" + arch + \".md\");\tSPLIT_LINE;\t! 'arch'/'arch'.md\n   COPY_TEXT (\"tm_file=tm.h\");\t\t\tSPLIT_LINE;\t! 'arch'/tm-vms.h\n+  pat_replace (\"@\" &\n+    SPAN(\"abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ#~0123456789\")\n+\t\t& \"@\", );\t\t\t! strip `configure' dummy values\n ENDPROCEDURE; !configure_makefile\n !!\n \n@@ -252,6 +258,8 @@ PROCEDURE identify_compilers( )\n   ! Strip most comments from the makefile, to speed up subsequent processing.\n   POSITION (BEGINNING_OF (makefile_buf));\n   pat_replace (LINE_BEGIN & \"#\" & REMAIN & LINE_END, );\n+  pat_replace (\"$(exeext)\", );\n+  pat_replace (\"@all_compilers@\", );\n !#  ! Convert directory references to VMS syntax (actually, just strip it).\n !#  pat_replace (\" $(srcdir)/\", \" \");\n   ! Look up the ``COMPILERS=cc1 xyzzy'' Makefile macro and put"}]}