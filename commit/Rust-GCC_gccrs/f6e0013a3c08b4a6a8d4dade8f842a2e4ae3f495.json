{"sha": "f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlMDAxM2EzYzA4YjRhNmE4ZDRkYWRlOGY4NDJhMmU0YWUzZjQ5NQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-05-27T12:15:47Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-05-27T12:15:47Z"}, "message": "Remove aarch64_cannot_change_mode_class as the underlying issue (PR67609) has been resolved.\n\nRemove aarch64_cannot_change_mode_class as the underlying issue\n(PR67609) has been resolved.  This avoids a few unnecessary lane\nwidening operations like:\n\nfaddp   d18, v18.2d\nmov     d18, v18.d[0]\n\n    gcc/\n\tPR67609\n\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Remove.\n\t* config/aarch64/aarch64.c\n\t(aarch64_cannot_change_mode_class): Remove function.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_cannot_change_mode_class): Remove.\n\nFrom-SVN: r236817", "tree": {"sha": "3ff023f6cc024600d6f2da69662c5a64b4499905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff023f6cc024600d6f2da69662c5a64b4499905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/comments", "author": null, "committer": null, "parents": [{"sha": "105e29c5cf8729021614b152328bcfe054bed64d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105e29c5cf8729021614b152328bcfe054bed64d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105e29c5cf8729021614b152328bcfe054bed64d"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "dd7328ba2764b4cffefbe1b11b686c3b36283ad5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "patch": "@@ -1,3 +1,12 @@\n+2016-05-27  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR67609\n+\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Remove.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_cannot_change_mode_class): Remove function.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_cannot_change_mode_class): Remove.\n+\n 2016-05-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cfgloop.c (record_niter_bound): Record likely upper bounds."}, {"sha": "1b20cf9da9ef98119315bb7573c161bc71ed00ae", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "patch": "@@ -282,9 +282,6 @@ int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n int aarch64_branch_cost (bool, bool);\n enum aarch64_symbol_type aarch64_classify_symbolic_expression (rtx);\n-bool aarch64_cannot_change_mode_class (machine_mode,\n-\t\t\t\t       machine_mode,\n-\t\t\t\t       enum reg_class);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);\n bool aarch64_constant_address_p (rtx);\n bool aarch64_expand_movmem (rtx *);"}, {"sha": "3f9034e3da072b752a8d674637b2a84dc9d448d3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "patch": "@@ -12615,24 +12615,6 @@ aarch64_vectorize_vec_perm_const_ok (machine_mode vmode,\n   return ret;\n }\n \n-/* Implement target hook CANNOT_CHANGE_MODE_CLASS.  */\n-bool\n-aarch64_cannot_change_mode_class (machine_mode from,\n-\t\t\t\t  machine_mode to,\n-\t\t\t\t  enum reg_class rclass)\n-{\n-  /* We cannot allow word_mode subregs of full vector modes.\n-     Otherwise the middle-end will assume it's ok to store to\n-     (subreg:DI (reg:TI 100) 0) in order to modify only the low 64 bits\n-     of the 128-bit register.  However, after reload the subreg will\n-     be dropped leaving a plain DImode store.  See PR67609 for a more\n-     detailed dicussion.  In all other cases, we want to be permissive\n-     and return false.  */\n-  return (reg_classes_intersect_p (FP_REGS, rclass)\n-\t  && GET_MODE_SIZE (to) == UNITS_PER_WORD\n-\t  && GET_MODE_SIZE (from) > UNITS_PER_WORD);\n-}\n-\n rtx\n aarch64_reverse_mask (enum machine_mode mode)\n {"}, {"sha": "b15c23f056d6231667307a5496a9247b4eb63687", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=f6e0013a3c08b4a6a8d4dade8f842a2e4ae3f495", "patch": "@@ -832,9 +832,6 @@ typedef struct\n   extern void  __aarch64_sync_cache_range (void *, void *);\t\\\n   __aarch64_sync_cache_range (beg, end)\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n-  aarch64_cannot_change_mode_class (FROM, TO, CLASS)\n-\n #define SHIFT_COUNT_TRUNCATED (!TARGET_SIMD)\n \n /* Choose appropriate mode for caller saves, so we do the minimum"}]}