{"sha": "ca6f60bc49de2ff3d150b6393148bdc468967eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2ZjYwYmM0OWRlMmZmM2QxNTBiNjM5MzE0OGJkYzQ2ODk2N2VlYw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-05-24T10:50:01Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-05-24T10:50:01Z"}, "message": "re PR tree-optimization/71252 (ICE: verify_ssa failed : definition in block 7 does not dominate use in block 6)\n\ngcc/testsuite/ChangeLog:\n\n2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/71252\n\t* gfortran.dg/pr71252.f90: New test.\n\ngcc/ChangeLog:\n\n2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/71252\n\t* tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Add stmt_to_insert after\n\tbuild_and_add_sum creates new use stmt.\n\nFrom-SVN: r236634", "tree": {"sha": "8f03741c51214f749dc37af85ff654e56232dd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f03741c51214f749dc37af85ff654e56232dd5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6f60bc49de2ff3d150b6393148bdc468967eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6f60bc49de2ff3d150b6393148bdc468967eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6f60bc49de2ff3d150b6393148bdc468967eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6f60bc49de2ff3d150b6393148bdc468967eec/comments", "author": null, "committer": null, "parents": [{"sha": "d3465d72bacd65663da8f8b4977f2936a799c3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3465d72bacd65663da8f8b4977f2936a799c3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3465d72bacd65663da8f8b4977f2936a799c3cd"}], "stats": {"total": 123, "additions": 114, "deletions": 9}, "files": [{"sha": "4dc6e7de1a5d79c5df436038472215be92ec9b20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca6f60bc49de2ff3d150b6393148bdc468967eec", "patch": "@@ -1,3 +1,9 @@\n+2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/71252\n+\t* tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Add stmt_to_insert after\n+\tbuild_and_add_sum creates new use stmt.\n+\n 2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vectorizable_load): Reorder checks so that"}, {"sha": "47ddcf0bd58662b0ce02be57be59ca8e7a260bb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca6f60bc49de2ff3d150b6393148bdc468967eec", "patch": "@@ -1,3 +1,8 @@\n+2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/71252\n+\t* gfortran.dg/pr71252.f90: New test.\n+\n 2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-load-lanes-peeling-1.c: New test."}, {"sha": "dae210b27a23cec343cf7b77f0a82c15f558fd2a", "filename": "gcc/testsuite/gfortran.dg/pr71252.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71252.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71252.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71252.f90?ref=ca6f60bc49de2ff3d150b6393148bdc468967eec", "patch": "@@ -0,0 +1,88 @@\n+\n+! { dg-do compile }\n+! { dg-options \"-O1 -ffast-math\" }\n+\n+MODULE xc_b97\n+  INTEGER, PARAMETER :: dp=8\n+  PRIVATE\n+  PUBLIC :: b97_lda_info, b97_lsd_info, b97_lda_eval, b97_lsd_eval\n+CONTAINS\n+  SUBROUTINE b97_lsd_eval(rho_set,deriv_set,grad_deriv,b97_params)\n+    INTEGER, INTENT(in)                      :: grad_deriv\n+    INTEGER                                  :: handle, npoints, param, stat\n+    LOGICAL                                  :: failure\n+    REAL(kind=dp)                            :: epsilon_drho, epsilon_rho, &\n+                                                scale_c, scale_x\n+    REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndra, &\n+      e_ndra_ndra, e_ndra_ndrb, e_ndra_ra, e_ndra_rb, e_ndrb, e_ndrb_ndrb, &\n+      e_ndrb_ra, e_ndrb_rb, e_ra, e_ra_ra, e_ra_rb, e_rb, e_rb_rb, &\n+      norm_drhoa, norm_drhob, rhoa, rhob\n+    IF (.NOT. failure) THEN\n+       CALL b97_lsd_calc(&\n+            rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa,&\n+            norm_drhob=norm_drhob, e_0=e_0, &\n+            e_ra=e_ra, e_rb=e_rb, &\n+            e_ndra=e_ndra, e_ndrb=e_ndrb, &\n+            e_ra_ra=e_ra_ra, e_ra_rb=e_ra_rb, e_rb_rb=e_rb_rb,&\n+            e_ra_ndra=e_ndra_ra, e_ra_ndrb=e_ndrb_ra, &\n+            e_rb_ndrb=e_ndrb_rb, e_rb_ndra=e_ndra_rb,&\n+            e_ndra_ndra=e_ndra_ndra, e_ndrb_ndrb=e_ndrb_ndrb,&\n+            e_ndra_ndrb=e_ndra_ndrb,&\n+            grad_deriv=grad_deriv, npoints=npoints, &\n+            epsilon_rho=epsilon_rho,epsilon_drho=epsilon_drho,&\n+            param=param,scale_c_in=scale_c,scale_x_in=scale_x)\n+    END IF\n+  END SUBROUTINE b97_lsd_eval\n+  SUBROUTINE b97_lsd_calc(rhoa, rhob, norm_drhoa, norm_drhob,&\n+       e_0, e_ra, e_rb, e_ndra, e_ndrb, &\n+       e_ra_ndra,e_ra_ndrb, e_rb_ndra, e_rb_ndrb,&\n+       e_ndra_ndra, e_ndrb_ndrb, e_ndra_ndrb, &\n+       e_ra_ra, e_ra_rb, e_rb_rb,&\n+       grad_deriv,npoints,epsilon_rho,epsilon_drho, &\n+       param, scale_c_in, scale_x_in)\n+    REAL(kind=dp), DIMENSION(*), INTENT(in)  :: rhoa, rhob, norm_drhoa, &\n+                                                norm_drhob\n+    REAL(kind=dp), DIMENSION(*), INTENT(inout) :: e_0, e_ra, e_rb, e_ndra, &\n+      e_ndrb, e_ra_ndra, e_ra_ndrb, e_rb_ndra, e_rb_ndrb, e_ndra_ndra, &\n+      e_ndrb_ndrb, e_ndra_ndrb, e_ra_ra, e_ra_rb, e_rb_rb\n+    INTEGER, INTENT(in)                      :: grad_deriv, npoints\n+    REAL(kind=dp), INTENT(in)                :: epsilon_rho, epsilon_drho\n+    INTEGER, INTENT(in)                      :: param\n+    REAL(kind=dp), INTENT(in)                :: scale_c_in, scale_x_in\n+    REAL(kind=dp) :: A_1, A_2, A_3, alpha_1_1, alpha_1_2, alpha_1_3, alpha_c, &\n+      t133, t134, t1341, t1348, t1351, t1360, t1368, t138, t1388, t139, &\n+      u_x_bnorm_drhobnorm_drhob, u_x_brhob, u_x_brhobnorm_drhob, u_x_brhobrhob\n+    SELECT CASE(grad_deriv)\n+    CASE default\n+       DO ii=1,npoints\n+          IF (rho>epsilon_rho) THEN\n+             IF (grad_deriv/=0) THEN\n+                IF (grad_deriv>1 .OR. grad_deriv<-1) THEN\n+                   alpha_c1rhob = alpha_crhob\n+                   f1rhob = frhob\n+                   t1360 = -0.4e1_dp * t105 * t290 * chirhobrhob + (-0.2e1_dp * t239 &\n+                        * t257 + t709 * t1236 * t711 * t62 / 0.2e1_dp - e_c_u_0rhobrhob) * f&\n+                        * t108 + t438 * f1rhob * t108 + 0.4e1_dp * t439 * t443 + t1341 * &\n+                        0.4e1_dp * t1348 * t443 + 0.4e1_dp * t1351 * t443 + 0.12e2_dp * t113&\n+                        * t107 * t1299 + 0.4e1_dp * t113 * t289 * chirhobrhob\n+                   IF (grad_deriv>1 .OR. grad_deriv==-2) THEN\n+                       exc_rhob_rhob = scale_x * (-t4 * t6 / t1152 * gx_b / &\n+                            0.6e1_dp + e_lsda_x_brhob * (u_x_b1rhob * t31 + u_x_b * u_x_b1rhob *&\n+                            u_x_brhobrhob * c_x_2)) + scale_c * (((e_c_u_0rhobrhob + (0.2e1_dp *&\n+                            t726 * t1270 * t278 - t266 * (-t731 * t1205 / 0.4e1_dp + t267 * &\n+                            t1205 * t647) * t278 - t757 * t1270 * t759 * t80 / 0.2e1_dp) * f * &\n+                            t110 + alpha_crhob * f1rhob * t110 - 0.4e1_dp * t431 * t435 + &\n+                            alpha_c1rhob * frhob * t110 + alpha_c * frhobrhob * t110 - 0.4e1_dp &\n+                            * t433 * t435 - 0.4e1_dp * t1321 * t435 - 0.4e1_dp * t1324 * t435 - &\n+                            0.12e2_dp * t105 * t796 * t1299 + t1360) * rho + epsilon_c_unifrhob &\n+                            * c_css_2))\n+                       e_rb_rb(ii)=e_rb_rb(ii)+exc_rhob_rhob\n+                   END IF\n+                END IF ! <1 || >1\n+             END IF ! /=0\n+          END IF ! rho>epsilon_rho\n+       END DO\n+    END SELECT\n+  END SUBROUTINE b97_lsd_calc\n+END MODULE xc_b97\n+"}, {"sha": "28823a2c7e644f855601d363a2b94b23dd0b8c27", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6f60bc49de2ff3d150b6393148bdc468967eec/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ca6f60bc49de2ff3d150b6393148bdc468967eec", "patch": "@@ -4091,24 +4091,30 @@ rewrite_expr_tree_parallel (gassign *stmt, int width,\n \t  print_gimple_stmt (dump_file, stmts[i], 0, 0);\n \t}\n \n-      /* If the stmt that defines operand has to be inserted, insert it\n-\t before the use.  */\n-      if (stmt1)\n-\tinsert_stmt_before_use (stmts[i], stmt1);\n-      if (stmt2)\n-\tinsert_stmt_before_use (stmts[i], stmt2);\n-\n       /* We keep original statement only for the last one.  All\n \t others are recreated.  */\n       if (i == stmt_num - 1)\n \t{\n+\t  /* If the stmt that defines operand has to be inserted, insert it\n+\t     before the use.  */\n+\t  if (stmt1)\n+\t    insert_stmt_before_use (stmts[i], stmt1);\n+\t  if (stmt2)\n+\t    insert_stmt_before_use (stmts[i], stmt2);\n \t  gimple_assign_set_rhs1 (stmts[i], op1);\n \t  gimple_assign_set_rhs2 (stmts[i], op2);\n \t  update_stmt (stmts[i]);\n \t}\n       else\n-\tstmts[i] = build_and_add_sum (TREE_TYPE (last_rhs1), op1, op2, opcode);\n-\n+\t{\n+\t  stmts[i] = build_and_add_sum (TREE_TYPE (last_rhs1), op1, op2, opcode);\n+\t  /* If the stmt that defines operand has to be inserted, insert it\n+\t     before new build_and_add stmt after it is created.  */\n+\t  if (stmt1)\n+\t    insert_stmt_before_use (stmts[i], stmt1);\n+\t  if (stmt2)\n+\t    insert_stmt_before_use (stmts[i], stmt2);\n+\t}\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \" into \");"}]}