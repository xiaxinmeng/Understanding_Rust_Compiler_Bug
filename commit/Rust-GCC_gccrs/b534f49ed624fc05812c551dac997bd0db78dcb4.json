{"sha": "b534f49ed624fc05812c551dac997bd0db78dcb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzNGY0OWVkNjI0ZmMwNTgxMmM1NTFkYWM5OTdiZDBkYjc4ZGNiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T13:52:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T13:52:31Z"}, "message": "[multiple changes]\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* switch-c.adb, bindgen.adb: Minor reformatting.\n\n2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Type_Invariant):\n\tInvariant'class is allowed on an abstract type.\n\n2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Access_Definition): If the access definition is\n\tfor a protected component and defines an access to protected\n\tsubprogram, do not create an itype reference for it because a\n\tfull type declaration will be built in order to generate the\n\tproper equivalent type.\n\t(Analyze_Subtype_Declaration): Add information of incomplete\n\tsubtypes, for Ada 2012 extended uses of incomplete types.\n\nFrom-SVN: r220856", "tree": {"sha": "20bc25364bc62770280cbf378c2b583fc42214ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20bc25364bc62770280cbf378c2b583fc42214ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b534f49ed624fc05812c551dac997bd0db78dcb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b534f49ed624fc05812c551dac997bd0db78dcb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b534f49ed624fc05812c551dac997bd0db78dcb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b534f49ed624fc05812c551dac997bd0db78dcb4/comments", "author": null, "committer": null, "parents": [{"sha": "9816367c7c84a6b7b533a5aee44b40fa456d28a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9816367c7c84a6b7b533a5aee44b40fa456d28a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9816367c7c84a6b7b533a5aee44b40fa456d28a7"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "9fdfd9ed5d8b5bd7ab64626b7bef42301e84b568", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b534f49ed624fc05812c551dac997bd0db78dcb4", "patch": "@@ -1,3 +1,22 @@\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* switch-c.adb, bindgen.adb: Minor reformatting.\n+\n+2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Type_Invariant):\n+\tInvariant'class is allowed on an abstract type.\n+\n+2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Definition): If the access definition is\n+\tfor a protected component and defines an access to protected\n+\tsubprogram, do not create an itype reference for it because a\n+\tfull type declaration will be built in order to generate the\n+\tproper equivalent type.\n+\t(Analyze_Subtype_Declaration): Add information of incomplete\n+\tsubtypes, for Ada 2012 extended uses of incomplete types.\n+\n 2015-02-20  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_res.adb: Minor reformatting."}, {"sha": "798db09dd4091aae64403ffa9b04765336aed0b5", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=b534f49ed624fc05812c551dac997bd0db78dcb4", "patch": "@@ -1979,6 +1979,7 @@ package body Bindgen is\n       end if;\n \n       --  Add a \"-Ldir\" for each directory in the object path\n+\n       if VM_Target /= CLI_Target then\n          for J in 1 .. Nb_Dir_In_Obj_Search_Path loop\n             declare"}, {"sha": "009b39452a22ce1aafea4ccc1183e5f355032e5a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b534f49ed624fc05812c551dac997bd0db78dcb4", "patch": "@@ -878,7 +878,14 @@ package body Sem_Ch3 is\n          --  create a reference to it after the enclosing protected definition\n          --  because the itype will be used in the subsequent bodies.\n \n-         if Ekind (Current_Scope) = E_Protected_Type then\n+         --  If the anonymous access itself is protected, a full type\n+         --  declaratiton will be created for it, so that the equivalent\n+         --  record type can be constructed. For further details, see\n+         --  Replace_Anonymous_Access_To_Protected-Subprogram.\n+\n+         if Ekind (Current_Scope) = E_Protected_Type\n+           and then not Protected_Present (Access_To_Subprogram_Definition (N))\n+         then\n             Build_Itype_Reference (Anon_Type, Parent (Current_Scope));\n          end if;\n \n@@ -4978,16 +4985,17 @@ package body Sem_Ch3 is\n                end if;\n \n                if Has_Discriminants (T) then\n-                  Set_Discriminant_Constraint (Id,\n-                                           Discriminant_Constraint (T));\n+                  Set_Discriminant_Constraint\n+                    (Id, Discriminant_Constraint (T));\n                   Set_Stored_Constraint_From_Discriminant_Constraint (Id);\n                end if;\n \n-            when E_Incomplete_Type =>\n+            when Incomplete_Kind  =>\n                if Ada_Version >= Ada_2005 then\n \n                   --  In Ada 2005 an incomplete type can be explicitly tagged:\n-                  --  propagate indication.\n+                  --  propagate indication. Note that we also have to include\n+                  --  subtypes for Ada 2012 extended use of incomplete types.\n \n                   Set_Ekind              (Id, E_Incomplete_Subtype);\n                   Set_Is_Tagged_Type     (Id, Is_Tagged_Type (T));\n@@ -4996,6 +5004,7 @@ package body Sem_Ch3 is\n                   if Is_Tagged_Type (Id) then\n                      Set_No_Tagged_Streams_Pragma\n                        (Id, No_Tagged_Streams_Pragma (T));\n+                     Set_Direct_Primitive_Operations (Id, New_Elmt_List);\n                   end if;\n \n                   --  Ada 2005 (AI-412): Decorate an incomplete subtype of an"}, {"sha": "823e4cbafd0c06d25d31e60389e970ebeb42a42b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b534f49ed624fc05812c551dac997bd0db78dcb4", "patch": "@@ -15732,7 +15732,7 @@ package body Sem_Prag is\n \n             --  Not allowed for abstract type\n \n-            if Is_Abstract_Type (Typ) then\n+            if Is_Abstract_Type (Typ) and then not Class_Present (N) then\n                Error_Pragma_Arg\n                  (\"pragma% not allowed for abstract type\", Arg1);\n             end if;"}, {"sha": "4f2f06e25c8ec394b163204a4f37683bedc4eea0", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b534f49ed624fc05812c551dac997bd0db78dcb4/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=b534f49ed624fc05812c551dac997bd0db78dcb4", "patch": "@@ -219,10 +219,8 @@ package body Switch.C is\n                        (Switch_Chars (Ptr + 4 .. Max))\n                   then\n                      Runtime_Dir :=\n-                       new String'\n-                         (System.OS_Lib.Normalize_Pathname\n-                            (Switch_Chars (Ptr + 4 .. Max)));\n-\n+                       new String'(System.OS_Lib.Normalize_Pathname\n+                                      (Switch_Chars (Ptr + 4 .. Max)));\n                   else\n                      Runtime_Dir :=\n                        new String'(Switch_Chars (Ptr + 4 .. Max));"}]}