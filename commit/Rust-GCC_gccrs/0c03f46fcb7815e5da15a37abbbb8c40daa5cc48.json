{"sha": "0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwM2Y0NmZjYjc4MTVlNWRhMTVhMzdhYmJiYjhjNDBkYWE1Y2M0OA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-09-09T08:56:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-09-09T08:56:58Z"}, "message": "c-common.c (c_expand_decl): Remove.\n\n2008-09-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* c-common.c (c_expand_decl): Remove.\n\t* c-common.h (anon_aggr_type_p): Remove prototype.\n\t(DECL_ANON_UNION_ELEMS): Remove.\n\t* c-objc-common.h (LANG_HOOKS_EXPAND_DECL): Remove.\n\t* c-decl.c (anon_aggr_type_p): Remove.\n\t* langhooks-def.h (LANG_HOOKS_EXPAND_DECL): Remove.\n\t(LANG_HOOKS_INITIALIZER): Remove LANG_HOOKS_EXPAND_DECL.\n\t* langhooks.h (struct lang_hooks): Remove expand_decl.\n\t* langhooks.c (lhd_expand_decl): Remove.\n\t* stmt.c (expand_anon_union_decl): Remove.\n\t* tree.h (expand_anon_union_decl): Remove prototype.\n\ncp:\n2008-09-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* cp-objcp-common.h (LANG_HOOKS_EXPAND_DECL): Remove.\n\t* cp-tree.h: Don't mention DECL_ANON_UNION_ELEMS.\n\t* semantics.c (anon_aggr_type_p): Remove.\n\nFrom-SVN: r140138", "tree": {"sha": "37848acf141412c81415c91c89ffd7eab8980776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37848acf141412c81415c91c89ffd7eab8980776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb"}], "stats": {"total": 154, "additions": 20, "deletions": 134}, "files": [{"sha": "67a3eb6860d2b9acc5792871e1c91c54c7308592", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -1,3 +1,17 @@\n+2008-09-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-common.c (c_expand_decl): Remove.\n+\t* c-common.h (anon_aggr_type_p): Remove prototype.\n+\t(DECL_ANON_UNION_ELEMS): Remove.\n+\t* c-objc-common.h (LANG_HOOKS_EXPAND_DECL): Remove.\n+\t* c-decl.c (anon_aggr_type_p): Remove.\n+\t* langhooks-def.h (LANG_HOOKS_EXPAND_DECL): Remove.\n+\t(LANG_HOOKS_INITIALIZER): Remove LANG_HOOKS_EXPAND_DECL.\n+\t* langhooks.h (struct lang_hooks): Remove expand_decl.\n+\t* langhooks.c (lhd_expand_decl): Remove.\n+\t* stmt.c (expand_anon_union_decl): Remove.\n+\t* tree.h (expand_anon_union_decl): Remove prototype.\n+\n 2008-08-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \tPR target/36609"}, {"sha": "a810bead87c6eb1bb47342e5fd73c02d4c1d2574", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -983,28 +983,6 @@ fname_as_string (int pretty_p)\n   return namep;\n }\n \n-/* Expand DECL if it declares an entity not handled by the\n-   common code.  */\n-\n-int\n-c_expand_decl (tree decl)\n-{\n-  if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n-    {\n-      /* Let the back-end know about this variable.  */\n-      if (!anon_aggr_type_p (TREE_TYPE (decl)))\n-\temit_local_var (decl);\n-      else\n-\texpand_anon_union_decl (decl, NULL_TREE,\n-\t\t\t\tDECL_ANON_UNION_ELEMS (decl));\n-    }\n-  else\n-    return 0;\n-\n-  return 1;\n-}\n-\n-\n /* Return the VAR_DECL for a const char array naming the current\n    function. If the VAR_DECL has not yet been created, create it\n    now. RID indicates how it should be formatted and IDENTIFIER_NODE"}, {"sha": "96c5fa071cb822dfb29f37a66ede417a11609262", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -800,12 +800,6 @@ extern void finish_file\t(void);\n #define COMPOUND_LITERAL_EXPR_DECL(NODE)\t\t\t\\\n   DECL_EXPR_DECL (COMPOUND_LITERAL_EXPR_DECL_STMT (NODE))\n \n-extern int anon_aggr_type_p (const_tree);\n-\n-/* For a VAR_DECL that is an anonymous union, these are the various\n-   sub-variables that make up the anonymous union.  */\n-#define DECL_ANON_UNION_ELEMS(NODE) DECL_ARGUMENTS ((NODE))\n-\n /* In a FIELD_DECL, nonzero if the decl was originally a bitfield.  */\n #define DECL_C_BIT_FIELD(NODE) \\\n   (DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE)) == 1)"}, {"sha": "ae8861e2b8504358221be0be9d16e8fb57536956", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -6978,15 +6978,6 @@ current_stmt_tree (void)\n   return &c_stmt_tree;\n }\n \n-/* Nonzero if TYPE is an anonymous union or struct type.  Always 0 in\n-   C.  */\n-\n-int\n-anon_aggr_type_p (const_tree ARG_UNUSED (node))\n-{\n-  return 0;\n-}\n-\n /* Return the global value of T as a symbol.  */\n \n tree"}, {"sha": "65445aef667caf9d688d42a4b10b8a9332575528", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -45,8 +45,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n-#undef LANG_HOOKS_EXPAND_DECL\n-#define LANG_HOOKS_EXPAND_DECL c_expand_decl\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE"}, {"sha": "633161543f9ec1218a5e2e690fc401d480ae122d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -1,3 +1,9 @@\n+2008-09-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_EXPAND_DECL): Remove.\n+\t* cp-tree.h: Don't mention DECL_ANON_UNION_ELEMS.\n+\t* semantics.c (anon_aggr_type_p): Remove.\n+\n 2008-09-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37302"}, {"sha": "db78f948b2d6222b6e4dabcb2e322005593578f5", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -52,8 +52,6 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n-#undef LANG_HOOKS_EXPAND_DECL\n-#define LANG_HOOKS_EXPAND_DECL c_expand_decl\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_STATICP"}, {"sha": "a39e9da6975d92f64b0d47af9b956a9208d1169e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -175,9 +175,6 @@ framework extensions, you must include this file before toplev.h, not after.\n      to which the vptr should be initialized.  Use get_vtbl_decl_for_binfo\n      to extract the VAR_DECL for the complete vtable.\n \n-   DECL_ARGUMENTS\n-     For a VAR_DECL this is DECL_ANON_UNION_ELEMS.\n-\n    DECL_VINDEX\n      This field is NULL for a non-virtual function.  For a virtual\n      function, it is eventually set to an INTEGER_CST indicating the"}, {"sha": "cfd06bb08cb880f2bc350ee8623cbdcc36dacbf5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -429,16 +429,6 @@ add_decl_expr (tree decl)\n   add_stmt (r);\n }\n \n-/* Nonzero if TYPE is an anonymous union or struct type.  We have to use a\n-   flag for this because \"A union for which objects or pointers are\n-   declared is not an anonymous union\" [class.union].  */\n-\n-int\n-anon_aggr_type_p (const_tree node)\n-{\n-  return ANON_AGGR_TYPE_P (node);\n-}\n-\n /* Finish a scope.  */\n \n tree"}, {"sha": "37b5905ed98b86a37ed1a17ff5b944a91d8dd00a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -51,7 +51,6 @@ extern const char *lhd_decl_printable_name (tree, int);\n extern const char *lhd_dwarf_name (tree, int);\n extern int lhd_types_compatible_p (tree, tree);\n extern rtx lhd_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n-extern int lhd_expand_decl (tree);\n extern void lhd_print_error_function (struct diagnostic_context *,\n \t\t\t\t      const char *, struct diagnostic_info *);\n extern void lhd_set_decl_assembler_name (tree);\n@@ -93,7 +92,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_MISSING_NORETURN_OK_P hook_bool_tree_true\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr\n-#define LANG_HOOKS_EXPAND_DECL\t\tlhd_expand_decl\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL lhd_do_nothing_t\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n@@ -243,7 +241,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_MISSING_NORETURN_OK_P, \\\n   LANG_HOOKS_GET_ALIAS_SET, \\\n   LANG_HOOKS_EXPAND_EXPR, \\\n-  LANG_HOOKS_EXPAND_DECL, \\\n   LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\\n   LANG_HOOKS_MARK_ADDRESSABLE, \\\n   LANG_HOOKS_STATICP, \\"}, {"sha": "ebbec951aefa5822bec45da7f22f62c9cd820068", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -227,18 +227,6 @@ lhd_expand_expr (tree ARG_UNUSED (t), rtx ARG_UNUSED (r),\n   gcc_unreachable ();\n }\n \n-/* The default language-specific function for expanding a decl.  After\n-   the language-independent cases are handled, this function will be\n-   called.  If this function is not defined, it is assumed that\n-   declarations other than those for variables and labels do not require\n-   any RTL generation.  */\n-\n-int\n-lhd_expand_decl (tree ARG_UNUSED (t))\n-{\n-  return 0;\n-}\n-\n /* This is the default decl_printable_name function.  */\n \n const char *"}, {"sha": "2d62f99f28d67755f5af19c752b8802a9a4dac45", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -294,10 +294,6 @@ struct lang_hooks\n      Fourth argument is actually an enum expand_modifier.  */\n   rtx (*expand_expr) (tree, rtx, enum machine_mode, int, rtx *);\n \n-  /* Called by expand_expr to generate the definition of a decl.  Returns\n-     1 if handled, 0 otherwise.  */\n-  int (*expand_decl) (tree);\n-\n   /* Function to finish handling an incomplete decl at the end of\n      compilation.  Default hook is does nothing.  */\n   void (*finish_incomplete_decl) (tree);"}, {"sha": "199967e1062ee3e5bacfc19efff37156546380ff", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -1958,66 +1958,6 @@ expand_stack_restore (tree var)\n   emit_stack_restore (SAVE_BLOCK, sa, NULL_RTX);\n }\n \f\n-/* DECL is an anonymous union.  CLEANUP is a cleanup for DECL.\n-   DECL_ELTS is the list of elements that belong to DECL's type.\n-   In each, the TREE_VALUE is a VAR_DECL, and the TREE_PURPOSE a cleanup.  */\n-\n-void\n-expand_anon_union_decl (tree decl, tree cleanup ATTRIBUTE_UNUSED,\n-\t\t\ttree decl_elts)\n-{\n-  rtx x;\n-  tree t;\n-\n-  /* If any of the elements are addressable, so is the entire union.  */\n-  for (t = decl_elts; t; t = TREE_CHAIN (t))\n-    if (TREE_ADDRESSABLE (TREE_VALUE (t)))\n-      {\n-\tTREE_ADDRESSABLE (decl) = 1;\n-\tbreak;\n-      }\n-\n-  expand_decl (decl);\n-  x = DECL_RTL (decl);\n-\n-  /* Go through the elements, assigning RTL to each.  */\n-  for (t = decl_elts; t; t = TREE_CHAIN (t))\n-    {\n-      tree decl_elt = TREE_VALUE (t);\n-      enum machine_mode mode = TYPE_MODE (TREE_TYPE (decl_elt));\n-      rtx decl_rtl;\n-\n-      /* If any of the elements are addressable, so is the entire\n-\t union.  */\n-      if (TREE_USED (decl_elt))\n-\tTREE_USED (decl) = 1;\n-\n-      /* Propagate the union's alignment to the elements.  */\n-      DECL_ALIGN (decl_elt) = DECL_ALIGN (decl);\n-      DECL_USER_ALIGN (decl_elt) = DECL_USER_ALIGN (decl);\n-\n-      /* If the element has BLKmode and the union doesn't, the union is\n-         aligned such that the element doesn't need to have BLKmode, so\n-         change the element's mode to the appropriate one for its size.  */\n-      if (mode == BLKmode && DECL_MODE (decl) != BLKmode)\n-\tDECL_MODE (decl_elt) = mode\n-\t  = mode_for_size_tree (DECL_SIZE (decl_elt), MODE_INT, 1);\n-\n-      if (mode == GET_MODE (x))\n-\tdecl_rtl = x;\n-      else if (MEM_P (x))\n-        /* (SUBREG (MEM ...)) at RTL generation time is invalid, so we\n-           instead create a new MEM rtx with the proper mode.  */\n-\tdecl_rtl = adjust_address_nv (x, mode, 0);\n-      else\n-\t{\n-\t  gcc_assert (REG_P (x));\n-\t  decl_rtl = gen_lowpart_SUBREG (mode, x);\n-\t}\n-      SET_DECL_RTL (decl_elt, decl_rtl);\n-    }\n-}\n-\f\n /* Do the insertion of a case label into case_list.  The labels are\n    fed to us in descending order from the sorted vector of case labels used\n    in the tree part of the middle end.  So the list we construct is"}, {"sha": "2dc3e6b9ec10bfc8681d4cd095e518a623640563", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c03f46fcb7815e5da15a37abbbb8c40daa5cc48/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0c03f46fcb7815e5da15a37abbbb8c40daa5cc48", "patch": "@@ -5045,7 +5045,6 @@ extern void expand_asm_expr (tree);\n extern tree resolve_asm_operand_names (tree, tree, tree);\n extern void expand_case (tree);\n extern void expand_decl (tree);\n-extern void expand_anon_union_decl (tree, tree, tree);\n #ifdef HARD_CONST\n /* Silly ifdef to avoid having all includers depend on hard-reg-set.h.  */\n extern tree tree_overlaps_hard_reg_set (tree, HARD_REG_SET *);"}]}