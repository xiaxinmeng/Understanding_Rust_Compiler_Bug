{"sha": "585a21bab3ec688c2039bff2922cc372d8558283", "node_id": "C_kwDOANBUbNoAKDU4NWEyMWJhYjNlYzY4OGMyMDM5YmZmMjkyMmNjMzcyZDg1NTgyODM", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2022-07-29T07:55:54Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2022-08-25T12:39:49Z"}, "message": "PR 106101: IBM zSystems: Fix strict_low_part problem\n\nThis avoids generating illegal (strict_low_part (reg ...)) RTXs. This\nrequired two changes:\n\n1. Do not use gen_lowpart to generate the inner expression of a\nSTRICT_LOW_PART.  gen_lowpart might fold the SUBREG either because\nthere is already a paradoxical subreg or because it can directly be\napplied to the register. A new wrapper function makes sure that we\nalways end up having an actual SUBREG.\n\n2. Change the movstrict patterns to enforce a SUBREG as inner operand\nof the STRICT_LOW_PARTs.  The new predicate introduced for the\ndestination operand requires a SUBREG expression with a\nregister_operand as inner operand.  However, since reload strips away\nthe majority of the SUBREGs we have to accept single registers as well\nonce we reach reload.\n\nBootstrapped and regression tested on IBM zSystems 64 bit.\n\ngcc/ChangeLog:\n\n\tPR target/106101\n\t* config/s390/predicates.md (subreg_register_operand): New\n\tpredicate.\n\t* config/s390/s390-protos.h (s390_gen_lowpart_subreg): New\n\tfunction prototype.\n\t* config/s390/s390.cc (s390_gen_lowpart_subreg): New function.\n\t(s390_expand_insv): Use s390_gen_lowpart_subreg instead of\n\tgen_lowpart.\n\t* config/s390/s390.md (\"*get_tp_64\", \"*zero_extendhisi2_31\")\n\t(\"*zero_extendqisi2_31\", \"*zero_extendqihi2_31\"): Likewise.\n\t(\"movstrictqi\", \"movstricthi\", \"movstrictsi\"): Use the\n\tsubreg_register_operand predicate instead of register_operand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106101\n\t* gcc.c-torture/compile/pr106101.c: New test.", "tree": {"sha": "4e6584a4a002e9434c05f50ef71af235402df5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e6584a4a002e9434c05f50ef71af235402df5c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585a21bab3ec688c2039bff2922cc372d8558283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585a21bab3ec688c2039bff2922cc372d8558283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585a21bab3ec688c2039bff2922cc372d8558283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585a21bab3ec688c2039bff2922cc372d8558283/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a3d2b778168341c617aaee6541c66239a198d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a3d2b778168341c617aaee6541c66239a198d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a3d2b778168341c617aaee6541c66239a198d2"}], "stats": {"total": 138, "additions": 116, "deletions": 22}, "files": [{"sha": "430cf6edfd6c461c14d9ae435d6f9d71d1820c96", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=585a21bab3ec688c2039bff2922cc372d8558283", "patch": "@@ -594,3 +594,15 @@\n (define_predicate \"addv_const_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= -32768 && INTVAL (op) <= 32767\")))\n+\n+; Match (subreg (reg ...)) operands.\n+; Used for movstrict destination operands\n+; When replacing pseudos with hard regs reload strips away the\n+; subregs. Accept also plain registers then to prevent the insn from\n+; becoming unrecognizable.\n+(define_predicate \"subreg_register_operand\"\n+  (ior (and (match_code \"subreg\")\n+\t    (match_test \"register_operand (SUBREG_REG (op), GET_MODE (SUBREG_REG (op)))\"))\n+       (and (match_code \"reg\")\n+\t    (match_test \"reload_completed || reload_in_progress\")\n+\t    (match_test \"register_operand (op, GET_MODE (op))\"))))"}, {"sha": "765d843a4183075644bf602d2db45682bd24ce81", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=585a21bab3ec688c2039bff2922cc372d8558283", "patch": "@@ -50,6 +50,7 @@ extern void s390_set_has_landing_pad_p (bool);\n extern bool s390_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int s390_class_max_nregs (enum reg_class, machine_mode);\n extern bool s390_return_addr_from_memory(void);\n+extern rtx s390_gen_lowpart_subreg (machine_mode, rtx);\n extern bool s390_fma_allowed_p (machine_mode);\n #if S390_USE_TARGET_ATTRIBUTE\n extern tree s390_valid_target_attribute_tree (tree args,"}, {"sha": "5e06bf9350c90f9b043be22fb0fbda743c4df6c4", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=585a21bab3ec688c2039bff2922cc372d8558283", "patch": "@@ -458,6 +458,31 @@ s390_return_addr_from_memory ()\n   return cfun_gpr_save_slot(RETURN_REGNUM) == SAVE_SLOT_STACK;\n }\n \n+/* Generate a SUBREG for the MODE lowpart of EXPR.\n+\n+   In contrast to gen_lowpart it will always return a SUBREG\n+   expression.  This is useful to generate STRICT_LOW_PART\n+   expressions.  */\n+rtx\n+s390_gen_lowpart_subreg (machine_mode mode, rtx expr)\n+{\n+  rtx lowpart = gen_lowpart (mode, expr);\n+\n+  /* There might be no SUBREG in case it could be applied to the hard\n+     REG rtx or it could be folded with a paradoxical subreg.  Bring\n+     it back.  */\n+  if (!SUBREG_P (lowpart))\n+    {\n+      machine_mode reg_mode = TARGET_ZARCH ? DImode : SImode;\n+      gcc_assert (REG_P (lowpart));\n+      lowpart = gen_lowpart_SUBREG (mode,\n+\t\t\t\t    gen_rtx_REG (reg_mode,\n+\t\t\t\t\t\t REGNO (lowpart)));\n+    }\n+\n+  return lowpart;\n+}\n+\n /* Return nonzero if it's OK to use fused multiply-add for MODE.  */\n bool\n s390_fma_allowed_p (machine_mode mode)\n@@ -6520,7 +6545,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n       /* Emit a strict_low_part pattern if possible.  */\n       if (smode_bsize == bitsize && bitpos == mode_bsize - smode_bsize)\n \t{\n-\t  rtx low_dest = gen_lowpart (smode, dest);\n+\t  rtx low_dest = s390_gen_lowpart_subreg (smode, dest);\n \t  rtx low_src = gen_lowpart (smode, src);\n \n \t  switch (smode)"}, {"sha": "aaa247d7612f59c71f07163fa16cdbdc9080039e", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=585a21bab3ec688c2039bff2922cc372d8558283", "patch": "@@ -1971,11 +1971,12 @@\n   \"TARGET_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (match_dup 3))\n+  [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 32)))\n-   (set (strict_low_part (match_dup 2)) (match_dup 4))]\n+   (set (strict_low_part (match_dup 3)) (match_dup 5))]\n   \"operands[2] = gen_lowpart (SImode, operands[0]);\n-   s390_split_access_reg (operands[1], &operands[4], &operands[3]);\")\n+   operands[3] = s390_gen_lowpart_subreg (SImode, operands[0]);\n+   s390_split_access_reg (operands[1], &operands[5], &operands[4]);\")\n \n ; Splitters for storing TLS pointer to %a0:DI.\n \n@@ -2522,13 +2523,14 @@\n   [(set (match_dup 0) (match_dup 2))]\n   \"operands[2] = get_pool_constant (operands[1]);\")\n \n+\n ;\n-; movstrictqi instruction pattern(s).\n+; movstrict instruction pattern(s).\n ;\n \n (define_insn \"movstrictqi\"\n-  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d,d\"))\n-                         (match_operand:QI 1 \"memory_operand\" \"R,T\"))]\n+  [(set (strict_low_part (match_operand:QI 0 \"subreg_register_operand\" \"+d,d\"))\n+                         (match_operand:QI 1 \"memory_operand\"           \"R,T\"))]\n   \"\"\n   \"@\n    ic\\t%0,%1\n@@ -2537,13 +2539,9 @@\n    (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n-;\n-; movstricthi instruction pattern(s).\n-;\n-\n (define_insn \"movstricthi\"\n-  [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d,d\"))\n-                         (match_operand:HI 1 \"memory_operand\" \"Q,S\"))\n+  [(set (strict_low_part (match_operand:HI 0 \"subreg_register_operand\" \"+d,d\"))\n+                         (match_operand:HI 1 \"memory_operand\"           \"Q,S\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n@@ -2553,13 +2551,9 @@\n    (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n-;\n-; movstrictsi instruction pattern(s).\n-;\n-\n (define_insn \"movstrictsi\"\n-  [(set (strict_low_part (match_operand:SI 0 \"register_operand\" \"+d,d,d,d\"))\n-                         (match_operand:SI 1 \"general_operand\" \"d,R,T,t\"))]\n+  [(set (strict_low_part (match_operand:SI 0 \"subreg_register_operand\" \"+d,d,d,d\"))\n+                         (match_operand:SI 1 \"general_operand\"          \"d,R,T,t\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lr\\t%0,%1\n@@ -5019,7 +5013,7 @@\n    (parallel\n     [(set (strict_low_part (match_dup 2)) (match_dup 1))\n      (clobber (reg:CC CC_REGNUM))])]\n-  \"operands[2] = gen_lowpart (HImode, operands[0]);\")\n+  \"operands[2] = s390_gen_lowpart_subreg (HImode, operands[0]);\")\n \n (define_insn_and_split \"*zero_extendqisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n@@ -5029,7 +5023,7 @@\n   \"&& reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n-  \"operands[2] = gen_lowpart (QImode, operands[0]);\")\n+  \"operands[2] = s390_gen_lowpart_subreg (QImode, operands[0]);\")\n \n ;\n ; zero_extendqihi2 instruction pattern(s).\n@@ -5061,7 +5055,7 @@\n   \"&& reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n-  \"operands[2] = gen_lowpart (QImode, operands[0]);\")\n+  \"operands[2] = s390_gen_lowpart_subreg (QImode, operands[0]);\")\n \n ;\n ; fixuns_trunc(dd|td|sf|df|tf)(si|di)2 expander"}, {"sha": "dec66081f25e9314c871d5d7176a3c636b32ac37", "filename": "gcc/testsuite/gcc.c-torture/compile/pr106101.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585a21bab3ec688c2039bff2922cc372d8558283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106101.c?ref=585a21bab3ec688c2039bff2922cc372d8558283", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+\n+extern char *globerr;\n+char **ftpglob();\n+\n+static const int yypgoto[] =\n+{\n+     -82, -82, -82, -82\n+};\n+\n+static const int yydefgoto[] =\n+{\n+       0, 1, 36, 37\n+};\n+\n+static const int yytable[] =\n+{\n+      43, 129, 88, 89\n+};\n+\n+static const int yycheck[] =\n+{\n+       8, 82, 4, 5\n+};\n+\n+\n+int yyparse (void)\n+{\n+    int yystate = 0;\n+    int *yyvsp = 0;\n+\n+  int yyn;\n+  int yyresult;\n+  int yyval;\n+\n+yyreduce:\n+\n+  switch (yyn)\n+    {\n+  case 72: {\n+\n+  if (strncmp( yyvsp[0], \"~\", 1) == 0) {\n+   *(char **)&(yyval) = *ftpglob(yyvsp[0]);\n+   if (globerr != 0) {\n+    yyval = 0;\n+   }\n+   free(yyvsp[0]);\n+  }\n+ }\n+    break;\n+    }\n+\n+  *++yyvsp = yyval;\n+\n+  {\n+    const int yyi = yypgoto[0] + *yyvsp;\n+    yystate = (yycheck[yyi] == *yyvsp ? 0 : 0);\n+  }\n+\n+  return yyresult;\n+}\n+"}]}