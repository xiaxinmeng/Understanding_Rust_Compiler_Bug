{"sha": "668df9e769e7d89bcefa07f72b68dcae9a8f3970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4ZGY5ZTc2OWU3ZDg5YmNlZmEwN2Y3MmI2OGRjYWU5YThmMzk3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-28T16:54:52Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-28T16:54:52Z"}, "message": "aarch64: Fix address mode for vec_concat pattern [PR100305]\n\nThe load_pair_lanes<mode> patterns match a vec_concat of two\nadjacent 64-bit memory locations as a single 128-bit load.\nThe Utq constraint made sure that the address was suitable\nfor a 128-bit vector, but this meant that it allowed some\naddresses that aren't valid for the 64-bit element mode.\n\nTwo obvious fixes were:\n\n(1) Continue to accept addresses that aren't valid for the element\n    modes.  This would mean changing the mode of operands[1] before\n    printing it.  It would also mean using a custom predicate instead\n    of the current memory_operand.\n\n(2) Restrict addresses to the intersection of those that are valid\n    element and vector addresses.\n\nThe problem with (1) is that, as well as being more complicated,\nit doesn't deal with the fact that we still have a memory_operand\nfor the second element.  If we encourage the first operand to be\noutside the range of a normal element memory_operand, we'll have\nto reload the second operand to make it valid.  This reload will\noften be dead code, but will be kept around because the RTL\npattern makes it look as though the second element address\nis still needed.\n\nThis patch therefore does (2) instead.\n\nAs mentioned in the PR notes, I think we have a general problem\nwith the way that the aarch64 port deals with paired addresses.\nThere's nothing to guarantee that the two addresses will be\nreloaded in a way that keeps them \u201cobviously\u201d adjacent, so the\nrtx_equal_p conditions could fail if something rechecked them\nlater.\n\nFor this particular pattern, I think it would be better to teach\nsimplify-rtx.c to fold the vec_concat to a normal vector memory\nreference, to remove any suggestion that targets should try to\nmatch the unsimplified form.  That obviously wouldn't be suitable\nfor backports though.\n\ngcc/\n\tPR target/100305\n\t* config/aarch64/constraints.md (Utq): Require the address to\n\tbe valid for both the element mode and for V2DImode.\n\ngcc/testsuite/\n\tPR target/100305\n\t* gcc.c-torture/compile/pr100305.c: New test.", "tree": {"sha": "94b3f9f9513d3e2dbeec8701aef60cf08baab05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b3f9f9513d3e2dbeec8701aef60cf08baab05f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668df9e769e7d89bcefa07f72b68dcae9a8f3970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668df9e769e7d89bcefa07f72b68dcae9a8f3970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668df9e769e7d89bcefa07f72b68dcae9a8f3970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668df9e769e7d89bcefa07f72b68dcae9a8f3970/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5bfa6704179f8db7d1ae0b485439e9896df8eb"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "3b49b452119c49320020fa9183314d9a25b92491", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668df9e769e7d89bcefa07f72b68dcae9a8f3970/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668df9e769e7d89bcefa07f72b68dcae9a8f3970/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=668df9e769e7d89bcefa07f72b68dcae9a8f3970", "patch": "@@ -327,6 +327,8 @@\n   \"@internal\n    An address valid for loading or storing a 128-bit AdvSIMD register\"\n   (and (match_code \"mem\")\n+       (match_test \"aarch64_legitimate_address_p (GET_MODE (op),\n+\t\t\t\t\t\t  XEXP (op, 0), 1)\")\n        (match_test \"aarch64_legitimate_address_p (V2DImode,\n \t\t\t\t\t\t  XEXP (op, 0), 1)\")))\n "}, {"sha": "e098b90b589237535b7b491f6a754e488bd35f22", "filename": "gcc/testsuite/gcc.c-torture/compile/pr100305.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668df9e769e7d89bcefa07f72b68dcae9a8f3970/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100305.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668df9e769e7d89bcefa07f72b68dcae9a8f3970/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100305.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100305.c?ref=668df9e769e7d89bcefa07f72b68dcae9a8f3970", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O\" } */\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+\n+#define N 4096\n+void consume (void *);\n+v2df\n+foo (void)\n+{\n+  double x[N+2];\n+  consume (x);\n+  return (v2df) { x[N], x[N + 1] };\n+}"}]}