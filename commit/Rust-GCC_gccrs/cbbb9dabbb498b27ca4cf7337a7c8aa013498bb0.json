{"sha": "cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiYjlkYWJiYjQ5OGIyN2NhNGNmNzMzN2E3YzhhYTAxMzQ5OGJiMA==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-12-22T14:46:46Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-22T14:46:46Z"}, "message": "Run tests only if the machine supports the instruction set.\n\ngcc/ChangeLog:\n\n2016-12-22  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Define\n\t__S390_ARCH_LEVEL__.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-22  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/md/setmem_long-1.c: Use \"s390_useable_hw\".\n\t* gcc.target/s390/md/rXsbg_mode_sXl.c: Likewise.\n\t* gcc.target/s390/md/andc-splitter-1.c: Likewise.\n\t* gcc.target/s390/md/andc-splitter-2.c: Likewise.\n\t* lib/gcc-dg.exp (gcc-dg-runtest): Export torture_current_flags.\n\t* gcc.target/s390/s390.exp: Import torture_current_flags.\n\t(check_effective_target_s390_useable_hw): New.\n\t(check_effective_target_s390_z900_hw): New.\n\t(check_effective_target_s390_z990_hw): New.\n\t(check_effective_target_s390_z9_ec_hw): New.\n\t(check_effective_target_s390_z10_hw): New.\n\t(check_effective_target_s390_z196_hw): New.\n\t(check_effective_target_s390_zEC12_hw): New.\n\t(check_effective_target_s390_z13_hw): New.\n\t(check_effective_target_z10_instructions): Removed.\n\t(torture tests): Add optimization level without -march=.\n\tReorder torture tests for good cache usage.\n\nFrom-SVN: r243887", "tree": {"sha": "90e366ab002fef48ff08fe6cc4eef5afa99f265a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e366ab002fef48ff08fe6cc4eef5afa99f265a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a71dcca81e3bdc9b387a6c6d1496f1f1d414f3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71dcca81e3bdc9b387a6c6d1496f1f1d414f3d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71dcca81e3bdc9b387a6c6d1496f1f1d414f3d7"}], "stats": {"total": 263, "additions": 223, "deletions": 40}, "files": [{"sha": "f3f3816f45789d8b6a345a06ccea13b48144d007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -1,3 +1,8 @@\n+2016-12-22  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Define\n+\t__S390_ARCH_LEVEL__.\n+\n 2016-12-22  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/78886"}, {"sha": "e84136535170f2ea86b628d1738ca576dc11c84d", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -320,6 +320,8 @@ s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n {\n   s390_def_or_undef_macro (pfile, MASK_OPT_HTM, old_opts, opts,\n \t\t\t   \"__HTM__\", \"__HTM__\");\n+  s390_def_or_undef_macro (pfile, MASK_OPT_VX, old_opts, opts,\n+\t\t\t   \"__S390_VX__\", \"__S390_VX__\");\n   s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n \t\t\t   \"__VEC__=10301\", \"__VEC__\");\n   s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n@@ -328,6 +330,21 @@ s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n   s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n \t\t\t   \"__bool=__attribute__((s390_vector_bool)) unsigned\",\n \t\t\t   \"__bool\");\n+  {\n+    char macro_def[64];\n+    int arch_level;\n+    gcc_assert (s390_arch != PROCESSOR_NATIVE);\n+    arch_level = (int)s390_arch + 3;\n+    if (s390_arch >= PROCESSOR_2094_Z9_EC)\n+      /* Z9_EC has the same level as Z9_109.  */\n+      arch_level--;\n+    /* Review when a new arch is added and increase the value.  */\n+    char dummy[23 - 2 * PROCESSOR_max] __attribute__((unused));\n+    sprintf (macro_def, \"__S390_ARCH_LEVEL__=%d\", arch_level);\n+    cpp_undef (pfile, \"__S390_ARCH_LEVEL__\");\n+    cpp_define (pfile, macro_def);\n+  }\n+\n   if (!flag_iso)\n     {\n       s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,"}, {"sha": "1532f18651c31593bbae74f6f08324c3b47343ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -1,3 +1,23 @@\n+2016-12-22  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/md/setmem_long-1.c: Use \"s390_useable_hw\".\n+\t* gcc.target/s390/md/rXsbg_mode_sXl.c: Likewise.\n+\t* gcc.target/s390/md/andc-splitter-1.c: Likewise.\n+\t* gcc.target/s390/md/andc-splitter-2.c: Likewise.\n+\t* lib/gcc-dg.exp (gcc-dg-runtest): Export torture_current_flags.\n+\t* gcc.target/s390/s390.exp: Import torture_current_flags.\n+\t(check_effective_target_s390_useable_hw): New.\n+\t(check_effective_target_s390_z900_hw): New.\n+\t(check_effective_target_s390_z990_hw): New.\n+\t(check_effective_target_s390_z9_ec_hw): New.\n+\t(check_effective_target_s390_z10_hw): New.\n+\t(check_effective_target_s390_z196_hw): New.\n+\t(check_effective_target_s390_zEC12_hw): New.\n+\t(check_effective_target_s390_z13_hw): New.\n+\t(check_effective_target_z10_instructions): Removed.\n+\t(torture tests): Add optimization level without -march=.\n+\tReorder torture tests for good cache usage.\n+\n 2016-12-22  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/78886"}, {"sha": "3f0677cfd76415520d00367242dfd7904655a65a", "filename": "gcc/testsuite/gcc.target/s390/md/andc-splitter-1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -1,7 +1,8 @@\n /* Machine description pattern tests.  */\n \n-/* { dg-do run { target { lp64 } } } */\n+/* { dg-do compile { target { lp64 } } } */\n /* { dg-options \"-mzarch -save-temps -dP\" } */\n+/* { dg-do run { target { lp64 && s390_useable_hw } } } */\n /* Skip test if -O0 is present on the command line:\n \n     { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } }\n@@ -13,26 +14,26 @@\n __attribute__ ((noinline))\n unsigned long andc_vv(unsigned long a, unsigned long b)\n { return ~b & a; }\n-/* { dg-final { scan-assembler \":15 .\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":15 .\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":16 .\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":16 .\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_pv(unsigned long *a, unsigned long b)\n { return ~b & *a; }\n-/* { dg-final { scan-assembler \":21 .\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":21 .\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":22 .\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":22 .\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_vp(unsigned long a, unsigned long *b)\n { return ~*b & a; }\n-/* { dg-final { scan-assembler \":27 .\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":27 .\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":28 .\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":28 .\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_pp(unsigned long *a, unsigned long *b)\n { return ~*b & *a; }\n-/* { dg-final { scan-assembler \":33 .\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":33 .\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":34 .\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":34 .\\* \\{\\\\*xordi3\\}\" } } */\n \n /* { dg-final { scan-assembler-times \"\\tngr\\?k\\?\\t\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\txgr\\?\\t\" 4 } } */"}, {"sha": "89c8ea25f997a9504d7a31552a8417e95812f006", "filename": "gcc/testsuite/gcc.target/s390/md/andc-splitter-2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -1,7 +1,8 @@\n /* Machine description pattern tests.  */\n \n-/* { dg-do run } */\n+/* { dg-do compile } */\n /* { dg-options \"-save-temps -dP\" } */\n+/* { dg-do run { target { s390_useable_hw } } } */\n /* Skip test if -O0 is present on the command line:\n \n     { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } }\n@@ -13,26 +14,26 @@\n __attribute__ ((noinline))\n unsigned int andc_vv(unsigned int a, unsigned int b)\n { return ~b & a; }\n-/* { dg-final { scan-assembler \":15 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":15 .\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":16 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":16 .\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_pv(unsigned int *a, unsigned int b)\n { return ~b & *a; }\n-/* { dg-final { scan-assembler \":21 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":21 .\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":22 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":22 .\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_vp(unsigned int a, unsigned int *b)\n { return ~*b & a; }\n-/* { dg-final { scan-assembler \":27 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":27 .\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":28 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":28 .\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_pp(unsigned int *a, unsigned int *b)\n { return ~*b & *a; }\n-/* { dg-final { scan-assembler \":33 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":33 .\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":34 .\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":34 .\\* \\{\\\\*xorsi3\\}\" } } */\n \n /* { dg-final { scan-assembler-times \"\\tnr\\?k\\?\\t\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\txr\\?k\\?\\t\" 4 } } */"}, {"sha": "824ce39dfd9c82acb88cf810703aad90351992da", "filename": "gcc/testsuite/gcc.target/s390/md/rXsbg_mode_sXl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -7,8 +7,8 @@\n    always wins, even if the condition is false.  If this test is run on hardware\n    older than z10 with a buggy dejagnu release, the execution part will fail.\n \n-    { dg-do assemble { target { ! z10_instructions } } }\n-    { dg-do run { target { z10_instructions } } }\n+    { dg-do assemble }\n+    { dg-do run { target { s390_useable_hw } } }\n \n    Skip test if -O0, -march=z900, -march=z9-109 or -march=z9-ec is present on\n    the command line:"}, {"sha": "5fc54e2108f6fbab22c5c052b7e5637e3288b06d", "filename": "gcc/testsuite/gcc.target/s390/md/setmem_long-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -1,7 +1,8 @@\n /* Machine description pattern tests.  */\n \n-/* { dg-do run } */\n+/* { dg-do compile } */\n /* { dg-options \"-mmvcle -dP -save-temps\" } */\n+/* { dg-do run { target { s390_useable_hw } } } */\n \n __attribute__ ((noinline))\n void test(char *p, char c, int len)\n@@ -16,8 +17,8 @@ void test2(char *p, int c, int len)\n }\n \n /* Check that the right patterns are used.  */\n-/* { dg-final { scan-assembler-times {c\"?:9 .*{[*]setmem_long_?3?1?z?}} 1 } } */\n-/* { dg-final { scan-assembler-times {c\"?:15 .*{[*]setmem_long_and_?3?1?z?}} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {c\"?:10 .*{[*]setmem_long_?3?1?z?}} 1 } } */\n+/* { dg-final { scan-assembler-times {c\"?:16 .*{[*]setmem_long_and_?3?1?z?}} 1 { xfail *-*-* } } } */\n \n #define LEN 500\n char buf[LEN + 2];"}, {"sha": "d826dbaee1308782beb14486c9929a5c9ce26972", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 153, "deletions": 17, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -16,6 +16,9 @@\n \n # GCC testsuite that uses the `dg.exp' driver.\n \n+global torture_current_flags\n+set torture_current_flags \"\"\n+\n # Exit immediately if this isn't a s390 target.\n if ![istarget s390*-*-*] then {\n   return\n@@ -24,17 +27,6 @@ if ![istarget s390*-*-*] then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# Return 1 if z10 instructions work.\n-proc check_effective_target_z10_instructions { } {\n-    if { ![check_runtime s390_check_z10_instructions [subst {\n-\tint main (void)\n-\t{\n-\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : );\n-\t    return 0;\n-\t}\n-    }] \"-march=z10 -mzarch\" ] } { return 0 } else { return 1 }\n-}\n-\n # Return 1 if the the assembler understands .machine and .machinemode.  The\n # target attribute needs that feature to work.\n proc check_effective_target_target_attribute { } {\n@@ -78,6 +70,138 @@ proc check_effective_target_vector { } {\n     }] \"-march=z13 -mzarch\" ] } { return 0 } else { return 1 }\n }\n \n+global s390_cached_flags\n+set s390_cached_flags \"\"\n+global s390_cached_value\n+set s390_cached_value \"\"\n+global s390_cached_value_noflags\n+set s390_cached_value_noflags \"\"\n+\n+# Return 1 if a program using the full instruction set allowed by\n+# the compiler option can be executed.\n+proc check_effective_target_s390_useable_hw { } {\n+    global torture_current_flags\n+    global s390_cached_flags\n+    global s390_cached_value\n+    global s390_cached_value_noflags\n+\n+    # Remove -Ox options and whitespace.\n+    set flags [regsub -all {[-]O[0-9s]} \"$torture_current_flags\" \"\"]\n+    set flags [regsub -all {[ \\\\t\\\\n]+} \"$flags\" \" \"]\n+    set flags [regsub -all {(^ )|( $)} \"$flags\" \"\"]\n+    if { \"$s390_cached_flags\" != \"\" && \"$flags\" == \"$s390_cached_flags\" } {\n+      return $s390_cached_value\n+    }\n+    # Extra cache for (frequent) calls with empty torture_current_flags.\n+    if { \"$flags\" == \"\" && $s390_cached_value_noflags != \"\" } {\n+      return $s390_cached_value_noflags\n+    }\n+    if { ![check_runtime_nocache s390_check_useable_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\".machinemode zarch\" : : );\n+\t#if __S390_ARCH_LEVEL__ >= 11\n+\t    asm (\"lcbb %%r2,0(%%r15),0\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 10\n+\t    asm (\"risbgn %%r2,%%r2,0,0,0\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 9\n+\t    asm (\"sgrk %%r2,%%r2,%%r2\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 8\n+\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 7\n+\t    asm (\"nilf %%r2,0\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 6\n+\t    asm (\"lay %%r2,0(%%r15)\" : : );\n+\t#elif __S390_ARCH_LEVEL__ >= 5\n+\t    asm (\"tam\" : : );\n+\t#endif\n+\t#ifdef __HTM__\n+\t  {\n+\t    unsigned int nd;\n+\t    asm (\"etnd %0\" : \"=d\" (nd));\n+\t  }\n+\t#endif\n+\t#ifdef __S390_VX__\n+\t    asm (\"vzero %%v0\" : : );\n+\t#endif\n+\t  return 0;\n+\t}\n+    }] \"$flags\" ] } { set result 0 } else { set result 1 }\n+    if { \"$flags\" == \"\" } {\n+      set s390_cached_value_noflags \"$result\"\n+    } else {\n+      set s390_cached_flags \"$flags\"\n+      set s390_cached_value \"$result\"\n+    }\n+    return $result\n+}\n+\n+# Return 1 if -march=... specific instructions are understood by\n+# the assembler and can be executed.\n+proc check_effective_target_s390_z900_hw { } {\n+    if { ![check_runtime s390_check_s390_z900_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"tam\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z900 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_z990_hw { } {\n+    if { ![check_runtime s390_check_s390_z990_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"lay %%r2,0(%%r15)\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z990 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_z9_ec_hw { } {\n+    if { ![check_runtime s390_check_s390_z9_ec_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"nilf %%r2,0\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z9-ec -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_z10_hw { } {\n+    if { ![check_runtime s390_check_s390_z10_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z10 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_z196_hw { } {\n+    if { ![check_runtime s390_check_s390_z196_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"sgrk %%r2,%%r2,%%r2\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z196 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_zEC12_hw { } {\n+    if { ![check_runtime s390_check_s390_zEC12_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"risbgn %%r2,%%r2,0,0,0\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=zEC12 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+proc check_effective_target_s390_z13_hw { } {\n+    if { ![check_runtime s390_check_s390_z13_hw [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"lcbb %%r2,0(%%r15),0\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z13 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {\n@@ -110,15 +234,27 @@ gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/hotpatch-\\[0-9\\]*.c]] \\\n torture-finish\n \n # Additional md torture tests.\n+# (Note: Split into a separate torture test for each -march= option to improve\n+# cacheability.)\n+torture-init\n+set MD_TEST_OPTS [list \\\n+\t{-Os} {-Os -march=z900} \\\n+\t{-O0} {-O0 -march=z900} \\\n+\t{-O1} {-O1 -march=z900} \\\n+\t{-O2} {-O2 -march=z900} \\\n+\t{-O3} {-O3 -march=z900} ]\n+set-torture-options $MD_TEST_OPTS\n+gcc-dg-runtest [lsort [glob -nocomplain $md_tests]] \"\" \"$DEFAULT_CFLAGS\"\n+torture-finish\n torture-init\n set MD_TEST_OPTS [list \\\n-\t{-Os -march=z900} {-Os -march=z13} \\\n-\t{-O0 -march=z900} {-O0 -march=z13} \\\n-\t{-O1 -march=z900} {-O1 -march=z13} \\\n-\t{-O2 -march=z900} {-O2 -march=z13} \\\n-\t{-O3 -march=z900} {-O3 -march=z13}]\n+\t{-Os -march=z13} \\\n+\t{-O0 -march=z13} \\\n+\t{-O1 -march=z13} \\\n+\t{-O2 -march=z13} \\\n+\t{-O3 -march=z13} ]\n set-torture-options $MD_TEST_OPTS\n-gcc-dg-runtest [lsort [glob -nocomplain $md_tests]] \"\" $DEFAULT_CFLAGS\n+gcc-dg-runtest [lsort [glob -nocomplain $md_tests]] \"\" \"$DEFAULT_CFLAGS\"\n torture-finish\n \n # All done."}, {"sha": "d9681b18ed151ce75bbbba7102b408de96921c7a", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=cbbb9dabbb498b27ca4cf7337a7c8aa013498bb0", "patch": "@@ -533,6 +533,8 @@ proc gcc-dg-runtest { testcases flags default-extra-flags } {\n \tset nshort [file tail [file dirname $test]]/[file tail $test]\n \n \tforeach flags_t $option_list {\n+\t    global torture_current_flags\n+\t    set torture_current_flags \"$flags_t\"\n \t    verbose \"Testing $nshort, $flags $flags_t\" 1\n \t    dg-test $test \"$flags $flags_t\" ${default-extra-flags}\n \t}"}]}