{"sha": "c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzZmY5MjYxNGJmYjdiZTRjNDg5ZTA1M2FiMDZhNWI0YzNhOTRjZA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-20T06:48:39Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-20T06:48:39Z"}, "message": "re PR fortran/34795 (inquire statement , direct= specifier incorrectly returns YES)\n\n2008-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/34795\n\t* gfortran.dg/inquire_13.f90: New test.\n\t\n\tPR libfortran/34659\n\t* gfortran.dg/continuation_9.f90: New test.\n\nFrom-SVN: r131673", "tree": {"sha": "48c3aa344af695c7c9c86be63290aa4ab23e2b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c3aa344af695c7c9c86be63290aa4ab23e2b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/comments", "author": null, "committer": null, "parents": [{"sha": "17c2c96cdcde260adce0c535e501f08371f5990e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c2c96cdcde260adce0c535e501f08371f5990e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c2c96cdcde260adce0c535e501f08371f5990e"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "03aa0149f70a2cc27b0c218468f3898ba428748f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "patch": "@@ -1,3 +1,11 @@\n+2008-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/34795\n+\t* gfortran.dg/inquire_13.f90: New test.\n+\t\n+\tPR libfortran/34659\n+\t* gfortran.dg/continuation_9.f90: New test.\n+\n 2008-01-20  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR target/34831\n@@ -49,9 +57,9 @@\n \t* gfortran.dg/bom_error.f90: Ditto.\n \t* gfortran.dg/func_decl_4.f90: Ditto.\n \n-2007-01-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+2008-01-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n-\tPR target/34782\n+\tPR libfortran/34782\n \t* gfortran.dg/fmt_t_6.f: New test.\n \n 2008-01-18  Tobias Burnus  <burnus@net-b.de>"}, {"sha": "7cd9c9d42df4c8e671a9a6e4b3b01056a7328fac", "filename": "gcc/testsuite/gfortran.dg/continuation_9.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90?ref=c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+  &  \n+&\n+ &\n+end\n+! { dg-error \"not allowed by itself in line 3\" \"\" {target \"*-*-*\"} 0 }\n+! { dg-error \"not allowed by itself in line 4\" \"\" {target \"*-*-*\"} 0 }\n+! { dg-error \"not allowed by itself in line 5\" \"\" {target \"*-*-*\"} 0 }"}, {"sha": "366e383327f2e7ea74778700ca21b211e8afe9af", "filename": "gcc/testsuite/gfortran.dg/inquire_13.f90", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13ff92614bfb7be4c489e053ab06a5b4c3a94cd/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_13.f90?ref=c13ff92614bfb7be4c489e053ab06a5b4c3a94cd", "patch": "@@ -0,0 +1,101 @@\n+! { dg-do run }\n+! PR34795 inquire statement , direct= specifier incorrectly returns YES\n+! Test case from PR, modified by Jerry DeLisle  <jvdelisle@gcc.gnu.org\n+program testinquire\n+implicit none\n+character drct*7, acc*12, frmt*12, seqn*12, fname*15\n+logical opn\n+\n+fname=\"inquire_13_test\"\n+inquire(unit=6, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+\n+inquire(unit=10, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+\n+inquire(unit=10, direct=drct, opened=opn, access=acc, formatted=frmt)\n+if (drct.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+if (frmt.ne.\"UNKNOWN\") call abort\n+\n+open(unit=19,file=fname,status='replace',err=170,form=\"formatted\")\n+inquire(unit=19, direct=drct, opened=opn, access=acc,formatted=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\")  call abort\n+if (frmt.ne.\"YES\")  call abort\n+\n+! Inquire on filename, open file with DIRECT and FORMATTED\n+inquire(file=fname, direct=drct, opened=opn, access=acc, FORMATTED=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\")  call abort\n+if (frmt.ne.\"YES\") call abort\n+close(19)\n+\n+! Inquire on filename, closed file with DIRECT and FORMATTED\n+inquire(file=fname, direct=drct, opened=opn, access=acc, formatted=frmt)\n+if (drct.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+if (frmt.ne.\"UNKNOWN\") call abort\n+\n+open(unit=19,file=fname,status='replace',err=170,form=\"unformatted\")\n+inquire(unit=19, direct=drct, opened=opn, access=acc, formatted=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+if (frmt.ne.\"NO\")  call abort\n+close(19)\n+       \n+open(unit=19,file=fname,status='replace',err=170,form=\"formatted\")\n+\n+inquire(unit=19, direct=drct, opened=opn, access=acc, unformatted=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+\n+! Inquire on filename, open file with DIRECT and UNFORMATTED\n+inquire(file=fname, direct=drct, opened=opn, access=acc, UNFORMATTED=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\")  call abort\n+if (frmt.ne.\"NO\") call abort\n+close(19)\n+\n+! Inquire on filename, closed file with DIRECT and UNFORMATTED\n+inquire(file=fname, direct=drct, opened=opn, access=acc, unformatted=frmt)\n+if (drct.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+if (frmt.ne.\"UNKNOWN\") call abort\n+\n+open(unit=19,file=fname,status='replace',err=170,form=\"unformatted\")\n+\n+inquire(unit=19, direct=drct, opened=opn, access=acc,unformatted=frmt)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+if (frmt.ne.\"YES\")  call abort\n+close(19)\n+      \n+open(unit=19,file=fname,status='replace',err=170)\n+\n+inquire(unit=19, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+close(19)\n+\n+open(unit=19,file=fname,status='replace',err=170,access='SEQUENTIAL')\n+\n+inquire(unit=19, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"NO\" .and. .not.opn .and. acc.ne.\"SEQUENTIAL\") call abort\n+\n+! Inquire on filename, open file with SEQUENTIAL\n+inquire(file=fname, SEQUENTIAL=seqn, opened=opn, access=acc)\n+if (seqn.ne.\"YES\" .and. .not.opn .and. acc.ne.\"DIRECT\") call abort\n+close(19)\n+\n+! Inquire on filename, closed file with SEQUENTIAL\n+inquire(file=fname, SEQUENTIAL=seqn, opened=opn, access=acc)\n+if (seqn.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+\n+open(unit=19,file=fname,status='replace',err=170,form='UNFORMATTED',access='DIRECT',recl=72)\n+\n+inquire(unit=19, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"YES\" .and. .not.opn .and. acc.ne.\"DIRECT\") call abort\n+\n+! Inquire on filename, open file with DIRECT\n+inquire(file=fname, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"YES\" .and. .not.opn .and. acc.ne.\"DIRECT\") call abort\n+close(19, status=\"delete\")\n+\n+! Inquire on filename, closed file with DIRECT\n+inquire(file=fname, direct=drct, opened=opn, access=acc)\n+if (drct.ne.\"UNKNOWN\" .and. opn .and. acc.ne.\"UNDEFINED\") call abort\n+stop\n+\n+170   write(*,*) \"ERROR: unable to open testdirect.f\"\n+end"}]}